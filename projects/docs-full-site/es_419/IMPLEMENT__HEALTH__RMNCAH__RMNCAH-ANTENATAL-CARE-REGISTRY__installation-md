---
edit_url: "https://github.com/dhis2-metadata/RMNCAH_ANC/blob/master/docs/rmncah_anc-installation.md"
revision_date: '2023-03-10'
tags:
- Implementar
---

# ANC Tracker - Installation Guide { #anc-trk-installation }

## Instalación { #installation } 

La instalación del módulo consta de varios pasos:

1. [Preparing](#preparing-the-metadata-file) the metadata file with DHIS2 metadata.
2. [Importar](#importing-metadata) el archivo de metadatos en DHIS2.
3. [Configuring](#additional-configuration) the imported metadata.
4. [Adaptar](#adapting-the-tracker-program) el programa después de ser importado

It is recommended to first read through each section before starting the installation and configuration process in DHIS2. Sections that are not applicable have been identified, depending on if you are importing into a new instance of DHIS2 or a DHIS2 instance with metadata already present. The procedure outlined in this document should be tested in a test/staging environment before either being repeated or transferred to a production instance of DHIS2.

## Requisitos { #requirements } 

Para instalar el módulo, se requiere una cuenta de usuario administrador en DHIS2. El procedimiento descrito en este documento debe probarse en un entorno de prueba/preparación antes de realizarse en una instancia de producción de DHIS2.

Great care should be taken to ensure that the server itself and the DHIS2 application is well secured, to restrict access to the data being collected. Details on securing a DHIS2 system is outside the scope of this document, and we refer to the [DHIS2 documentation](https://docs.dhis2.org/).

## Preparar el archivo de metadatos { #preparing-the-metadata-file } 

**NOTE**: If you are installing the package on a new instance of DHIS2, you can skip the “Preparing the metadata file” section and move immediately to the section on “[Importing a metadata file into DHIS2](#importing-metadata).”

Si bien no siempre es necesario, a menudo puede resultar ventajoso realizar ciertas modificaciones en el archivo de metadatos antes de importarlo a DHIS2.

### Dimensión de datos predeterminada { #default-data-dimension } 

En las primeras versiones de DHIS2, el UID de la dimensión de datos predeterminada se generaba automáticamente. Por lo tanto, si bien todas las instancias de DHIS2 tienen una opción de categoría predeterminada, una categoría de elemento de datos, una combinación de categoría y una combinación de opciones de categoría, los UID de estos valores predeterminados pueden ser diferentes. Las versiones posteriores de DHIS2 tienen UID codificados para la dimensión predeterminada y estos UID se utilizan en los paquetes de configuración.

To avoid conflicts when importing the metadata, it is advisable to search and replace the entire .json file for all occurrences of these default objects, replacing UIDs of the .json file with the UIDs of the database in which the file will be imported. Table 1 shows the UIDs which should be replaced, as well as the API endpoints to identify the existing UIDs

|Objeto|UID|API endpoint|
|--|--|--|
|Categoría |GLevLNI9wkl|../api/categories.json?filter=name:eq:default|
|Opción de categoría|xYerKDKCefk|../api/categoryOptions.json?filter=name:eq:default|
|Combinación de categoría|bjDvmb4bfuf|../api/categoryCombos.json?filter=name:eq:default|
|Combinación de opciones de categoría|HllvX50cXC0|../api/categoryOptionCombos.json?filter=name:eq:default|

For example, if importing a configuration package into [https://play.dhis2.org/demo](https://play.dhis2.org/demo), the UID of the default category option combination could be identified through <https://play.dhis2.org/demo/api/categoryOptionCombos.json?filter=name:eq:default> as bRowv6yZOF2.

You could then search and replace all occurrences of HllvX50cXC0 with bRowv6yZOF2 in the .json file, as that is the ID of default in the system you are importing into. ***Note that this search and replace operation must be done with a plain text editor***, not a word processor like Microsoft Word.

### Tipos de indicadores { #indicator-types } 

El tipo de indicador es otro tipo de objeto que puede crear conflictos de importación porque ciertos nombres se utilizan en diferentes bases de datos DHIS2 (por ejemplo, "Porcentaje"). Dado que los tipos de indicadores se definen simplemente por su factor y si son o no números simples sin denominador, no son ambiguos y pueden reemplazarse mediante una búsqueda y reemplazo de los UID. Esto evita posibles conflictos de importación y evita la creación de tipos de indicadores duplicados. La Tabla 2 muestra los UID que podrían reemplazarse, así como los API endpoints para identificar los UID existentes.

|Objeto|UID|API endpoint|
|--|--|--|
|Sólo numerador (número)|kHy61PbChXr|../api/indicatorTypes.json?filter=number:eq:true&filter=factor:eq:1|
|Porcentaje|hmSnCXmLYwt|../api/indicatorTypes.json?filter=number:eq:false&filter=factor:eq:100|

####  Tipo de entidad Tracked { #tracked-entity-type } 

Al igual que los tipos de indicadores, es posible que ya existan tipos de entidades tracker en su base de datos DHIS2. Las referencias al tipo de entidad tracker deben cambiarse para reflejar lo que hay en su sistema para no crear duplicados. La Tabla 3 muestra los UID que podrían reemplazarse, así como los API endpoints para identificar los UID existentes

|Objeto|UID|API endpoint|
|--|--|--|
|Persona|MCPQUTHX1Ze|../api/trackedEntityTypes.json?filter=name:eq:Person|


#### Visualizations using Root Organisation Unit { #visualizations-using-root-organisation-unit } 

Visualizations, if included in a package, may contain a placeholder for a Root Organisation Unit. The placeholder label example is <OU_ROOT_UID>. Before attempting to import the package you need to replace this label with the UID of the Root Organisation Unit in your system.


#### Custom Attributes { #custom-attributes } 

As noted in the system design guide, the ANC DAK provides concept mappings of these data elements and tracked entity attributes to other coding systems, such as ICD-11, SNOMED, and LOINC, to support interoperability with other systems. These are modelled in DHIS2 as "Attributes"  attached to DHIS2 objects. Where noted by the ANC DAK, the concept mappings are included as attribute values. For example, the data element for "Cough" in Physical Exam is mapped to the ICD-10 attribute, which has a value of MD12.

When importing the package into your DHIS2 instance, these Attributes will be imported first. If you have other metadata in this instance, you will see six "Attributes" fields underneath data elements and TEI attributes in maintenance.


## Importar metadatos { #importing-metadata } 

The .json metadata file is imported through the [Import/Export](https://docs.dhis2.org/en/use/user-guides/dhis-core-version-master/maintaining-the-system/importexport-app.html) app of DHIS2. It is advisable to use the "dry run" feature to identify issues before attempting to do an actual import of the metadata. If "dry run" reports any issues or conflicts, see the [import conflicts](https://who.dhis2.org/documentation/installation_guide_complete.html#handling-import-conflicts) section below. If the "dry run"/"validate" import works without error, attempt to import the metadata. If the import succeeds without any errors, you can proceed to [configure](https://who.dhis2.org/documentation/installation_guide_complete.html#configuration) the module. In some cases, import conflicts or issues are not shown during the "dry run", but appear when the actual import is attempted. In this case, the import summary will list any errors that need to be resolved.


### Gestión de conflictos de importación { #handling-import-conflicts } 

***NOTE***: If you are importing into a new DHIS2 instance, you will not have to worry about import conflicts, as there is nothing in the database you are importing to to conflict with. Follow the instructions to import the metadata then please proceed to the “[Additional configuration](#additional-configuration)” section.

Pueden ocurrir varios conflictos diferentes, aunque el más común es que haya objetos de metadatos en el paquete de configuración con un nombre, nombre corto y/o código que ya existe en la base de datos de destino. Hay un par de soluciones alternativas a estos problemas, con diferentes ventajas y desventajas. Cuál sea la más adecuada dependerá, por ejemplo, del tipo de objeto para el que se produce un conflicto.

#### Alternativa 1 { #alternative-1 } 

Cambiar el nombre del objeto existente en su base de datos DHIS2 para el cual existe un conflicto. La ventaja de este enfoque es que no es necesario modificar el archivo .json, ya que los cambios se realizan a través de la interfaz de usuario de DHIS2. Es probable que esto sea menos propenso a errores. También significa que el paquete de configuración se deja como está, lo que puede ser una ventaja, por ejemplo, cuando se vaya a utilizar material de formación y documentación basados en el paquete de configuración.

#### Alternativa 2 { #alternative-2 } 

Cambiar el nombre del objeto para el que existe un conflicto en el archivo .json. La ventaja de este enfoque es que los metadatos DHIS2 existentes se dejan como están. Este puede ser un factor cuando existe material de formación o documentación como SOPs de diccionarios de datos vinculados al objeto en cuestión, y no implica ningún riesgo de confundir a los usuarios al modificar los metadatos con los que están familiarizados.

Tenga en cuenta que, tanto para la alternativa 1 como para la 2, la modificación puede ser tan simple como agregar un pequeño pre/post-fijo al nombre, para minimizar el riesgo de confusión.

#### Alternativa 3 { #alternative-3 } 

Un tercer enfoque, más complicado, es modificar el archivo .json para reutilizar los metadatos existentes. Por ejemplo, en los casos en los que ya existe un set de opciones para un determinado concepto (por ejemplo, "sexo"), ese set de opciones podría eliminarse del archivo .json y todas las referencias a su UID podrían reemplazarse con el set de opciones correspondiente que ya se esté en la base de datos. La gran ventaja de esto (que no se limita a los casos en los que existe un conflicto de importación directo) es evitar la creación de metadatos duplicados en la base de datos. Hay algunas consideraciones clave que se deben tener en cuenta al realizar este tipo de modificación:

* requiere conocimiento especializado de la estructura detallada de metadatos de DHIS2
* el enfoque no funciona para todos los tipos de objetos. En particular, ciertos tipos de objetos tienen dependencias que son complicadas de resolver de esta manera, por ejemplo relacionadas con desagregaciones.
* las futuras actualizaciones del paquete de configuración serán complicadas.

### Known Import Issues { #known-import-issues } 

1. Sort order for options do not match
  Symptoms: import fails with no errors. Please check the dhis.log in your server/instance. If you see the following error:

  ```* ERROR 2021-07-15 10:05:58,018 java.lang.NullPointerException
             at
     org.hisp.dhis.dxf2.metadata.objectbundle.hooks.OptionSetObjectBundleHook.lambda$updateOption$0(OptionSetObjectBundleHook.java:71)
             at java.lang.Iterable.forEach(Iterable.java:75)
  ```

  The issue is related to sortOrder of options in an optionSet included in the package not matching the sortOrder of same options in the instance/server.
2. Duplicate key value violates unique constraint
  Symptoms: import fails with no errors. Please check the dhis.log in your server/instance. If you see the following error:

  ```* ERROR 2021-07-15 10:12:20,272 ERROR: duplicate key value violates unique constraint "uk_myox13mr8r27oxl7ts33ntpd5"
    Detail: Key (uid)=(YYtAbckt77l) already exists. (SqlExceptionHelper.java [taskScheduler-23])
     * ERROR 2021-07-15 10:12:20,303 javax.persistence.PersistenceException: org.hibernate.exception.ConstraintViolationException: could not execute statement
  ```

## Additional configuration { #additional-configuration } 

Una vez que todos los metadatos se hayan importado correctamente, hay algunos pasos que deben seguirse antes de que el módulo sea funcional.

### Compartir { #sharing } 

First, you will have to use the *Sharing* functionality of DHIS2 to configure which users (user groups) should see the metadata and data associated with the programme as well as who can register/enter data into the program. By default, sharing has been configured for the following:

* Tipo de entidad Tracked
* Programa
* Etapas del programa
* Tableros

There are three user groups that come with the package:

* ANC access
* ANC admin
* ANC data capture

By default the following is assigned to these user groups

|Objeto|User Group|||
|--|--|--|--|
||_Access_|_Admin_|_Data capture_|
|_*Tracked entity type*_|Metadatos: puede ver <br> Datos: puede ver|Metadatos : puede ver y editar <br> Datos: puede ver|Metadatos : puede ver <br> Datos: puede ver y capturar|
|_*Program*_|Metadatos: puede ver <br> Datos: puede ver|Metadatos : puede ver y editar <br> Datos: puede ver|Metadatos : puede ver <br> Datos: puede ver y capturar|
|_*Program Stages*_|Metadatos: puede ver <br> Datos: puede ver|Metadatos : puede ver y editar <br> Datos: puede ver|Metadatos : puede ver <br> Datos: puede ver y capturar|
|_*Dashboards*_|Metadatos: puede ver <br> Datos: puede ver|Metadatos : puede ver y editar <br> Datos: puede ver|Metadatos: puede ver <br> Datos: puede ver|

You will want to assign your users to the appropriate user group based on their role within the system. You may want to enable sharing for other objects in the package depending on your set up. Refer to the [DHIS2 Documentation](https://docs.dhis2.org/en/use/user-guides/dhis-core-version-master/configuring-the-system/about-sharing-of-objects.html) for more information on configuring sharing.

### Roles de usuario { #user-roles } 

Los usuarios necesitarán roles de usuario para poder interactuar con las diversas aplicaciones dentro de DHIS2. Se recomiendan los siguientes roles mínimos:

1. Análisis de datos Tracker: puede ver análisis de eventos y acceder a tableros, informes de eventos, visualizador de eventos, visualizador de datos, tablas dinámicas, informes y mapas.
2. Captura de datos Tracker: puede agregar valores de datos, actualizar entidades de tracker, buscar entidades de tracker en unidades organizativas y acceder a la captura de tracker

Refer to the [DHIS2 Documentation](https://docs.dhis2.org) for more information on configuring user roles.

### Unidades organizativas { #organisation-units } 

Debe asignar el programa a unidades organizativas dentro de su propia jerarquía para poder ver el programa en Tracker - captura de datos.

### Metadatos duplicados { #duplicated-metadata } 

**NOTE**: This section only applies if you are importing into a DHIS2 database in which there is already meta-data present. If you are working with a new DHIS2 instance, please skip this section and go to [Adapting the tracker program](#adapting-the-tracker-program).”

Incluso cuando los metadatos se han importado exitosamente sin ningún conflicto de importación, puede haber duplicados en los metadatos: elementos de datos, atributos de entidad tracker o set de opciones que ya existen. Como se señaló en la sección anterior sobre resolución de conflictos, una cuestión importante a tener en cuenta es que las decisiones sobre la realización de cambios en los metadatos en DHIS2 también deben tener en cuenta otros documentos y recursos que están asociados de diferentes maneras tanto con los metadatos existentes, como con los metadatos que se han importado a través del paquete de configuración. Por lo tanto, resolver duplicados no es sólo una cuestión de "limpiar la base de datos", sino también de asegurarse de que esto se haga sin, por ejemplo, romper la posible integración con otros sistemas, la posibilidad de utilizar material de capacitación, romper los SOP, etc. Esto dependerá en gran medida del contexto.

One important thing to keep in mind is that DHIS2 has tools that can hide some of the complexities of potential duplications in metadata. For example, where duplicate option sets exist, they can be hidden for groups of users through [sharing](https://docs.dhis2.org/en/use/user-guides/dhis-core-version-master/configuring-the-system/about-sharing-of-objects.html).

## Adaptar el programa { #adapting-the-tracker-program } 

Once the programme has been imported, you will want to make certain modifications to the programme. Examples of local adaptations that *could* be made include:

* Adding additional variables to the form
* Adding or removing decision support logic
* Adapting data element/option names according to national conventions
* Adding translations to variables and/or the data entry form
* Modifying program indicators based on local case definitions

Other modifications that might be made include making the program easier for backdata entry, for example removing rules to hide program stages unless the latest Quick Check stage is todays date.

Most metadata in this package can be removed or modified without breaking essential workflows or program indicators. Note however that much of the workflow and indicators depend on Gestational Age calculation, so program rules related to this should be closely inspected before changing.

User roles are not supported, however there is a program rule to HIDE the visit date for non super users, which only shows the Quick Check visit date data element to be only seen by Administrators. This rule should be updated with the UID of your Superuser user role.

