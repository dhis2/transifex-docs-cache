---
edit_url: "https://github.com/dhis2-metadata/VC_IRS_CAMPAIGN/blob/master/docs/vc_irs_campaign-installation.md"
revision_date: '2023-08-28'
tags:
- Metadatos
---

# Vector Control - Indoor Residual Spraying - Campaigns { #vc-irs-campaign-installation }

You will have to follow the instructions in full for each separate package that you install.

## Instalación { #installation } 

La instalación del módulo consta de varios pasos:

1. [Preparing](#preparing-the-metadata-file) the metadata file with DHIS2 metadata.
2. [Importing](#generic-metadata) the metadata file into DHIS2.
3. [Configuring](#additional-configuration) the imported metadata.
4. [Adapting](#adapting-the-event-program) the program after being imported

It is recommended to first read through each section before starting the installation and configuration process in DHIS2. Sections that are not applicable have been identified, depending on if you are importing into a new instance of DHIS2 or a DHIS2 instance with metadata already present. The procedure outlined in this document should be tested in a test/staging environment before either being repeated or transferred to a production instance of DHIS2.

## Requisitos { #requirements } 

In order to install the module, an administrator user account on DHIS2 is required. The procedure outlined in this document should be tested in a test/staging environment before being performed on a production instance of DHIS2.

Great care should be taken to ensure that the server itself and the DHIS2 application is well secured, to restrict access to the data being collected. Details on securing a DHIS2 system is outside the scope of this document, and we refer to the [DHIS2 documentation](https://docs.dhis2.org/en/home.html).

## Preparar el archivo de metadatos { #preparing-the-metadata-file } 

**NOTE:** If you are installing the package on a new instance of DHIS2, you can skip the "Preparing the metadata file" section and move immediately to the section on "[Importing a metadata file into DHIS2](#generic-metadata)."

Si bien no siempre es necesario, a menudo puede resultar ventajoso realizar ciertas modificaciones en el archivo de metadatos antes de importarlo a DHIS2.

### Dimensión de datos predeterminada { #default-data-dimension } 

In early versions of DHIS2, the UID of the default data dimension was auto-generated. Thus, while all DHIS2 instances have a default category option, data element category, category combination and category option combination, the UIDs of these defaults can be different. Later versions of DHIS2 have hardcoded UIDs for the default dimension, and these UIDs are used in the configuration packages.

To avoid conflicts when importing the metadata, it is advisable to search and replace the entire .json file for all occurrences of these default objects, replacing UIDs of the .json file with the UIDs of the database in which the file will be imported. Table 1 shows the UIDs which should be replaced, as well as the API endpoints to identify the existing UIDs.
existing UIDs.

| Objeto                      | UID         | API endpoint                                             |
|-----------------------------|-------------|----------------------------------------------------------|
| Categoría                     | GLevLNI9wkl | `../api/categories.json?filter=name:eq:default`          |
| Opción de categoría             | xYerKDKCefk | `../api/categoryOptions.json?filter=name:eq:default`     |
| Combinación de categoría        | bjDvmb4bfuf | `../api/categoryCombos.json?filter=name:eq:default`      |
| Combinación de opciones de categoría | HllvX50cXC0 | `../api/categoryOptionCombos.json?filter=name:eq:default`|

For example, if importing a configuration package into [https://play.dhis2.org/demo](https://play.dhis2.org/demo), the UID of the default category option combination could be identified through [https://play.dhis2.org/demo/api/categoryOptionCombos.json?filter=name:eq:default](https://play.dhis2.org/demo/api/categoryOptionCombos.json?filter=name:eq:default) as bRowv6yZOF2.

You could then search and replace all occurrences of HllvX50cXC0 with bRowv6yZOF2 in the .json file, as that is the ID of default in the system you are importing into. Note that this search and replace operation must be done with a plain text editor, not a word processor like Microsoft Word.

### Tipos de indicadores { #indicator-types } 

Indicator type is another type of object that can create import conflict because certain names are used in different DHIS2 databases (.e.g "Percentage"). Since Indicator types are defined simply by their factor and whether or not they are simple numbers without a denominator, they are unambiguous and can be replaced through a search and replace of the UIDs. This avoids potential import conflicts, and avoids creating duplicate indicator types. Table 2 shows the UIDs which could be replaced, as well as the API endpoints to identify the existing UIDs

| Objeto     | UID         | API endpoint                                                             |
|------------|-------------|--------------------------------------------------------------------------|
| Porcentaje | hmSnCXmLYwt | `../api/indicatorTypes.json?filter=number:eq:false&filter=factor:eq:100` |

### Visualizaciones utilizando el UID de la unidad organizativa raíz { #visualizations-using-root-organisation-unit-uid } 

Las visualizaciones, informes de eventos, tablas de informes y mapas que están asignados a un nivel de unidad organizativa específico o grupo de unidades organizativas  tienen una referencia a la unidad organizativa raíz (nivel 1). Dichos objetos, si están presentes en el archivo de metadatos, contienen un marcador de posición `<OU_ROOT_UID>`. Utilice la función de búsqueda en el editor de archivos .json para identificar este marcador de posición y reemplazarlo con el UID de la unidad organizativa de nivel 1 en la instancia de destino.

### Importar metadatos { #importing-metadata } 

The .json metadata file is imported through the [Import/Export](#import_export) app of DHIS2. It is advisable to use the "dry run" feature to identify issues before attempting to do an actual import of the metadata. If "dry run" reports any issues or conflicts, see the [import conflicts](#handling-import-conflicts) section below.
If the "dry run"/"validate" import works without error, attempt to import the metadata. If the import succeeds without any errors, you can proceed to [configure](#additional-configuration) the module. In some cases, import conflicts or issues are not shown during the "dry run", but appear when the actual import is attempted. In this case, the import summary will list any errors that need to be resolved.

### Generic metadata { #generic-metadata } 

For generic metadata overview (identical metadata objects used by several packages), please refer to the installation annex of the individual package.

### Gestión de conflictos de importación { #handling-import-conflicts } 

NOTE: If you are importing into a new DHIS2 instance, you will not have to worry about import conflicts, as there is nothing in the database you are importing to to conflict with. Follow the instructions to import the metadata then please proceed to the [“Additional configuration”](#additional-configuration) section.

There are a number of different conflicts that may occur, though the most common is that there are metadata objects in the configuration package with a name, shortname and/or code that already exists in the target database. There are a couple of alternative solutions to these problems, with different advantages and disadvantages. Which one is more appropriate will depend, for example, on the type of object for which a conflict occurs.

#### Alternativa 1 { #alternative-1 } 

Rename the existing object in your DHIS2 database for which there is a conflict. The advantage of this approach is that there is no need to modify the .json file, as changes are instead done through the user interface of DHIS2. This is likely to be less error prone. It also means that the configuration package is left as is, which can be an advantage for example when training material and documentation based on the configuration package will be used.

#### Alternativa 2 { #alternative-2 } 

Cambiar el nombre del objeto para el que existe un conflicto en el archivo .json. La ventaja de este enfoque es que los metadatos DHIS2 existentes se dejan como están. Este puede ser un factor cuando existe material de formación o documentación como SOPs de diccionarios de datos vinculados al objeto en cuestión, y no implica ningún riesgo de confundir a los usuarios al modificar los metadatos con los que están familiarizados.

Tenga en cuenta que, tanto para la alternativa 1 como para la 2, la modificación puede ser tan simple como agregar un pequeño pre/post-fijo al nombre, para minimizar el riesgo de confusión.

#### Alternativa 3 { #alternative-3 } 

Un tercer enfoque, más complicado, es modificar el archivo .json para reutilizar los metadatos existentes. Por ejemplo, en los casos en los que ya existe un set de opciones para un determinado concepto (por ejemplo, "sexo"), ese set de opciones podría eliminarse del archivo .json y todas las referencias a su UID podrían reemplazarse con el set de opciones correspondiente que ya se esté en la base de datos. La gran ventaja de esto (que no se limita a los casos en los que existe un conflicto de importación directo) es evitar la creación de metadatos duplicados en la base de datos. Hay algunas consideraciones clave que se deben tener en cuenta al realizar este tipo de modificación:

* requiere conocimiento especializado de la estructura detallada de metadatos de DHIS2
* el enfoque no funciona para todos los tipos de objetos. En particular, ciertos tipos de objetos tienen dependencias que son complicadas de resolver de esta manera, por ejemplo relacionadas con desagregaciones.
* las futuras actualizaciones del paquete de configuración serán complicadas.

### Additional configuration { #additional-configuration } 

Una vez que todos los metadatos se hayan importado correctamente, hay algunos pasos que deben seguirse antes de que el módulo sea funcional.

#### Compartir { #sharing } 

First, you will have to use the *Sharing* functionality of DHIS2 to configure which users (user groups) should see the metadata and data associated with the programme as well as who can register/enter data into the program. By default, sharing has been configured for the following:

* Programa
* Program stages
* Tableros

A metadata package usually contains several user groups:

* VC-IRS Access
* VC-IRS Admin
* VC-IRS Data Capture

By default the following is assigned to these user groups

| Objeto              | Grupos de usuarios                             |                                                  |                                                     |
|---------------------|-----------------------------------------|--------------------------------------------------|-----------------------------------------------------|
|                     | VC-IRS Access                           | VC-IRS Admin                                     | VC-IRS Data Capture                                 |
| Programa             | Metadata : can view <br> Data: can view | Metadata : can edit and view <br> Data: can view | Metadata : can view <br> Data: can capture and view |
| Etapas del programa      | Metadata : can view <br> Data: can view | Metadata : can edit and view <br> Data: can view | Metadata : can view <br> Data: can capture and view |
| Tableros          | Metadata : can view <br> Data: can view | Metadata : can edit and view <br> Data: can view | Metadata : can view <br> Data: can view             |

Please refere to the individual package installation annex for information about user groups.

You will want to assign your users to the appropriate user group based on their role within the system. You may want to enable sharing for other objects in the package depending on your set up. Refer to the [DHIS2 Documentation](#sharing) for more information on configuring sharing.


### Roles de usuario { #user-roles } 

Los usuarios necesitarán roles de usuario para poder interactuar con las diversas aplicaciones dentro de DHIS2. Se recomiendan los siguientes roles mínimos:

1. Análisis de datos Tracker: puede ver análisis de eventos y acceder a tableros, informes de eventos, visualizador de eventos, visualizador de datos, tablas dinámicas, informes y mapas.
2. Tracker data capture : Can add data values, access capture to create events

Refer to the [DHIS2 Documentation](#manage_user_role_group) for more information on configuring user roles.

### Unidades organizativas { #organisation-units } 

You must assign the program to organisation units within your own hierarchy in order to be able to see the program in capture.

### Metadatos duplicados { #duplicated-metadata } 

**NOTE:** This section only applies if you are importing into a DHIS2 database in which there is already meta-data present. If you are working with a new DHIS2 instance, please skip this section and go to "[Adapting the event program](#adapting-the-event-program)."

Even when metadata has been successfully imported without any import conflicts, there can be duplicates in the metadata - data elements or option sets that already exist. As was noted in the section above on resolving conflict, an important issue to keep in mind is that decisions on making changes to the metadata in DHIS2 also needs to take into account other documents and resources that are in different ways associated with both the existing metadata, and the metadata that has been imported through the configuration package. Resolving duplicates is thus not only a matter of "cleaning up the database", but also making sure that this is done without, for example, breaking potential integrating with other systems, the possibility to use training material, breaking SOPs etc. This will very much be context-dependent.

Una cosa importante a tener en cuenta es que DHIS2 tiene herramientas que pueden ocultar algunas de las complejidades de posibles duplicaciones en los metadatos. Por ejemplo, cuando existen set de opciones duplicados, se pueden ocultar para grupos de usuarios mediante [compartir](#sharing).

### Adapting the event program { #adapting-the-event-program } 

Once the programme has been imported, you might want to make certain modifications to the programme. Examples of local adaptations that *could* be made include:

* Añadir variables adicionales al formulario.
* Adaptar los nombres de los elementos de datos/opciones según las convenciones nacionales.
* Adapting the Category Combo used in the Event program to use category options for the Partners involved in the campaign
* Añadir traducciones a las variables y/o al formulario de entrada de datos.
* Modifying program indicators based on local case definitions

Sin embargo, se recomienda fuertemente tener mucho cuidado si decide cambiar o eliminar cualquiera de los formularios/metadatos incluidos. Existe el peligro de que las modificaciones puedan alterar la funcionalidad, por ejemplo las reglas y los indicadores de programa.

