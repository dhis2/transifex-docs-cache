---
edit_url: "https://github.com/dhis2-metadata/CRVS_VE/blob/master/docs/crvs_ve-installation.md"
revision_date: "2022-05-27"
tags:
    - Metadatos
    - Version 1.0.0
---

# Vital Events Birth, Stillbirth and Death notifications - Tracker Installation Guide { #crvs-ve-trk-installation }

This document includes an installation guide for the updated Vital Events tracker package.

Idioma predeterminado del sistema: Inglés

Available translations: French, Spanish, Portuguese

## Visión general { #overview }

Los archivos json de metadatos del paquete contienen un componente "paquete" que proporciona detalles técnicos sobre la versión y el contenido del paquete. Los archivos disponibles en la versión actual del paquete se enumeran a continuación.

### DHIS2.35 { #dhis235 }

=== "Complete Package"

    ```json
    "package": {
        "DHIS2Build": "35d663a",
        "DHIS2Version": "2.35.11",
        "code": "VE0000",
        "description": "Vital Events",
        "lastUpdated": "20220120T113753",
        "locale": "en",
        "name": "CRVS_VE_TKR_1.1.0_DHIS2.35.11-en",
        "type": "TKR",
        "version": "1.1.0"
    }
    ```

### DHIS2.36 { #dhis236 }

=== "Complete Package"

    ```json
    "package": {
        "DHIS2Build": "5d136cb",
        "DHIS2Version": "2.36.6",
        "code": "VE0000",
        "description": "Vital Events",
        "lastUpdated": "20220120T140039",
        "locale": "en",
        "name": "CRVS_VE_TKR_1.1.0_DHIS2.36.6-en",
        "type": "TKR",
        "version": "1.1.0"
    }
    ```

## Installation { #installation }

La instalación del módulo consta de varios pasos:

1. [Preparar el archivo de metadatos con metadatos DHIS2](#preparing-the-metadata-file).
2. [Importar el archivo de metadatos en DHIS2](#importing-metadata).
3. [Configurar los metadatos importados](#configuration).
4. [Adaptar el programa después de la importación](#adapting-the-program)

Se recomienda leer primero cada sección de la guía de instalación antes de comenzar el proceso de instalación y configuración en DHIS2. Identifique las secciones aplicables según el tipo de su importación:

1. importar a una instancia DHIS2 en blanco
2. importar a una instancia DHIS2 con metadatos existentes.

Los pasos descritos en este documento deben probarse en una instancia de prueba/preparación de DHIS2 y solo luego aplicarse a un entorno de producción.

## Requisitos { #requirements }

Para instalar el módulo, se requiere una cuenta de usuario administrador en DHIS2.

Se debe tener mucho cuidado para garantizar que el servidor en sí  y la aplicación DHIS2 estén bien protegidos,  asimismo se deben definir los derechos de acceso a los datos recopilados. Los detalles sobre cómo proteger un sistema DHIS2 están fuera del alcance de este documento, por lo que remitimos a la [documentación de DHIS2](https://docs.dhis2.org/).

## Metadata files { #metadata-files }

Si bien no siempre es necesario, a menudo puede resultar ventajoso realizar ciertas modificaciones en el archivo de metadatos antes de importarlo a DHIS2.

The Vital Events tracker package includes three metadata files. The contents and purposose of each individual file are described below:

| Package identifier | Contents | Purpose |
| --- | --- | --- |
| CRVS_VE_TKR_1.1.0_DHIS2.35.11-en | Updated tracker package | New implementation |

## Preparing the metadata file { #preparing-the-metadata-file }

### Default data dimension { #default-data-dimension }

En las primeras versiones de DHIS2, los UID de las dimensiones de datos predeterminadas se generaban automáticamente. Por lo tanto, si bien todas las instancias de DHIS2 tienen una opción de categoría predeterminada, una categoría de elemento de datos, una combinación de categoría y una combinación de opciones de categoría, los UID de estos valores predeterminados pueden ser diferentes. Las versiones posteriores de DHIS2 tienen UID codificados para la dimensión predeterminada y estos UID se utilizan en los paquetes de configuración.

Para evitar conflictos al importar los metadatos, es recomendable buscar y  reemplazar en todo el archivo .json todas las apariciones de estos objetos predeterminados, reemplazando los UID del archivo .json con los UID de la instancia en la que se importará el archivo. La Tabla 1 muestra los UID que deben reemplazarse, así como los API endpoints para identificar los UID existentes

| Objeto | UID | API endpoint |
| --- | --- | --- |
| Categoría  | `GLevLNI9wkl` | `../api/categories.json?filter=name:eq:default` |
| Opción de categoría | `xYerKDKCefk` | `../api/categoryOptions.json?filter=name:eq:default` |
| Combinación de categoría | `bjDvmb4bfuf` | `../api/categoryCombos.json?filter=name:eq:default` |
| Combinación de opciones de categoría | `HllvX50cXC0` | `../api/categoryOptionCombos.json?filter=name:eq:default` |

Identifique los UID de las dimensiones predeterminadas en su instancia utilizando las solicitudes API enumeradas y reemplace los UID en el archivo json con los UID de la instancia.

> **NOTA**
>
> Tenga en cuenta que esta operación de búsqueda y reemplazo debe realizarse con un editor de texto plano, no con un procesador de textos como Microsoft Word.

### Indicator types { #indicator-types }

El tipo de indicador es otro tipo de objeto que puede crear conflictos de importación porque ciertos nombres se utilizan en diferentes bases de datos DHIS2 (por ejemplo, "Porcentaje"). Dado que los tipos de indicadores se definen por su factor (incluido 1 para indicadores "solo numerador"), no son ambiguos y se pueden reemplazar mediante una búsqueda y reemplazo de los UID. Este método ayuda a evitar posibles conflictos de importación y evita que el implementador cree tipos de indicadores duplicados. La siguiente tabla contiene los UID que podrían reemplazarse, así como los API endpoints para identificar los UID existentes:

| Objeto | UID | API endpoint |
| --- | --- | --- |
| Sólo numerador (número) | `kHy61PbChXr` | `../api/indicatorTypes.json?filter=number:eq:true&filter=factor:eq:1` |
| Per 1000 | `zpa0vUC7IWd` | `../api/indicatorTypes.json?filter=number:eq:false&filter=factor:eq:1000` |
| Porcentaje | `hmSnCXmLYwt` | `../api/indicatorTypes.json?filter=number:eq:false&filter=factor:eq:100` |

### Tracked Entity Type { #tracked-entity-type }

Like indicator types, you may have already existing tracked entity types in your DHIS2 database. The references to the tracked entity type should be changed to reflect what is in your system so you do not create duplicates. The table below contains the UIDs which could be replaced, as well as the API endpoints to identify the existing UIDs:

| Objeto | UID | API endpoint |
| --- | --- | --- |
| Persona | `MCPQUTHX1Ze` | `../api/trackedEntityTypes.json?filter=name:eq:Person` |

### Visualizations using Root Organisation Unit UID { #visualizations-using-root-organisation-unit-uid }

Las visualizaciones, informes de eventos, tablas de informes y mapas que están asignados a un nivel de unidad organizativa específico o grupo de unidades organizativas  tienen una referencia a la unidad organizativa raíz (nivel 1). Dichos objetos, si están presentes en el archivo de metadatos, contienen un marcador de posición `<OU_ROOT_UID>`. Utilice la función de búsqueda en el editor de archivos .json para identificar este marcador de posición y reemplazarlo con el UID de la unidad organizativa de nivel 1 en la instancia de destino.

### Option codes { #option-codes }

According to the DHIS2 naming conventions, the metadata codes use capital letters, underscores and no spaces. Some exceptions that may occur are specified in the corresponding package documentation. All codes included in the metadata objects in the current version of the package were adjusted to match the naming conventions. It may occur that the codes used in the earlier versions of the package used lower case characters. If data values in the existing implementations contain lower case codes, it is important to update those values directly in the database.

The table below contains all option sets where codes were changed to upper case in the metadata package. Before importing metadata into the instance, check whether the option sets in the existing system match those in the package .json and use the same upper case option codes.

| Option set name                           | Option set UID |
| ----------------------------------------- | -------------- |
| GEN - Birth attendant type                | `gHkSQ7ti6zn`  |
| GEN - Birth type                          | `jumQ0TEDlf4`  |
| GEN - Manner of death                     | `A7mNd2r3ZJe`  |
| GEN - Mode of delivery                    | `whFhwY80xAQ`  |
| GEN - Place of birth                      | `BkY9x47OEff`  |
| GEN - Sex (with unknown)                  | `rlYDq7U043q`  |
| Marital status                            | `rkRT5bxwyAt`  |
| Relationship (Mother/Father/Spouse/Other) | `ocdVHauxjzI`  |
| Stillbirth type                           | `tPXEZ46FACM`  |
| VE - Place of death occurrence            | `tPXEZ46FACM`  |
| VE - Registration Reason                  | `I90dDKWASnH`  |

The table below contains metadata elements that use an affected option set:

| Metadata object          | Nombre                           | UID           |
| ------------------------ | ------------------------------ | ------------- |
| Elemento de datos             | GEN - Place of birth           | `ABhkInP0wGY` |
| Elemento de datos             | GEN - Birth type               | `LtlzGAPWWo8` |
| Elemento de datos             | GEN - Attendant at birth       | `lQtJB35vsDj` |
| Elemento de datos             | GEN - Mode of delivery         | `fF7wxNym0Un` |
| Elemento de datos             | VE - Place of death            | `XkvdOAv6d3V` |
| Elemento de datos             | GEN - Manner of Death          | `MAqI45DkhPd` |
| Elemento de datos             | VE - Stillbirth classification | `vjNZ3tj3ins` |
| Tracked Entity Attribute | Vital Events Sex M/F/U         | `fSn3gGMwRLi` |
| Tracked Entity Attribute | Vital Events Marital Status    | `EhEPmB7n31b` |
| Tracked Entity Attribute | Vital Events Relationship 1    | `Nv4K5ob82z3` |
| Tracked Entity Attribute | Vital Events Relationship 2    | `egRR3lyqD0F` |

> **Important**
>
> During the import, the existing option codes will be overwritten with the updated upper case codes. In order to update the data values for existing data in the database, it is necessary to update the values stored in the database using database commands. Make sure to map existing old option codes and new option codes before replacing the values. Use staging instance first, before making adjustments on the production server.

For data element values, use:

    ```SQL
    UPDATE programstageinstance
    SET eventdatavalues = jsonb_set(eventdatavalues, '{"<affected data element uid>","value"}', '"<new value>"')
    WHERE eventdatavalues @> '{"<affected data element uid>":{"value": "<old value>"}}'::jsonb
    AND programstageid=<database_programsatgeid>;
    ```

For tracked entity attribute values, use:

    ```SQL
    UPDATE trackedentityattributevalue
    SET value = <new value>
    WHERE trackedentityattributeid=<affected trackedentityattribute database_id> AND value=<old value>;
    ```

> **Example**
>
> To replace the option code 'yes' with 'YES' for existing data values (data element COVAC - Previously infected with COVID `LOU9t0aR0z7`) in the programstage with the id=1510410385 (example id), the command will be configured as follows:
>
>     ```SQL
>     UPDATE programstageinstance
>     SET eventdatavalues = jsonb_set(eventdatavalues, '{"LOU9t0aR0z7","value"}', '"YES"')
>     WHERE eventdatavalues @> '{"LOU9t0aR0z7":{"value": "yes"}}'::jsonb
>     AND programstageid=1510410385;
>     ```

Option codes are also used in program rule expressions, program indicators, etc. If you are updating code options in your system, make sure you update the codes in all affected metadata objects.

### Sort order for options { #sort-order-for-options }

Check whether the sort order `sortOrder` of options in your system matches the sort order of options included in the metadata package. This only applies when the json file and the target instance contain options and option sets with the same UID.

After import, make sure that the sort order for options within an option set starts at 1. There should be no gaps (eg. 1,2,3,5,6) in the sort order values.

Sort order can be adjusted in the Maintenance app.

1. Go to the applicable Option Set
2. Open the "Options" section
3. Use "SORT BY NAME", "SORT BY CODE/VALUE" or "SORT MANUALLY" alternatives.

## Importing metadata { #importing-metadata }

Utilice la aplicación DHIS2 [Importar/Exportar](#import_export) para importar paquetes de metadatos. Es recomendable utilizar la función de proceso de prueba "dry run" para identificar problemas antes de intentar realizar una importación real de los metadatos. Si el "dry run" informa algún problema o conflicto, consulte la sección [conflictos de importación](#handling-import-conflicts) más abajo. Si la importación "dry run"/"validar" funciona sin errores, intente importar los metadatos. Si la importación se realiza correctamente sin errores, puede proceder a [configurar](#configuration) el módulo. En algunos casos, los conflictos o problemas de importación no se muestran durante el proceso de prueba "dry run", pero aparecen cuando se intenta la importación real. En este caso, el resumen de la importación enumerará los errores que deben resolverse.

### Handling import conflicts { #handling-import-conflicts }

> **NOTA**
>
> Si está importando el paquete a una nueva instancia de DHIS2, no experimentará conflictos de importación, ya que no hay metadatos en la base de datos de destino. Después de importar los metadatos, vaya a la sección “[Configuración](#configuration)”.

Pueden ocurrir varios conflictos diferentes, aunque el más común es que haya objetos de metadatos en el paquete de configuración con un nombre, nombre corto y/o código que ya existe en la base de datos de destino. Hay un par de soluciones alternativas a estos problemas, con diferentes ventajas y desventajas. Cuál sea la más adecuada dependerá, por ejemplo, del tipo de objeto para el que se produce un conflicto.

#### Alternative 1 { #alternative-1 }

Cambiar el nombre del objeto existente en su base de datos DHIS2 para el cual existe un conflicto. La ventaja de este enfoque es que no es necesario modificar el archivo .json, ya que los cambios se realizan a través de la interfaz de usuario de DHIS2. Es probable que esto sea menos propenso a errores. También significa que el paquete de configuración se deja como está, lo que puede ser una ventaja, por ejemplo, cuando se publican actualizaciones del paquete. Con frecuencia también se hace referencia a los objetos del paquete original en la documentación y los materiales de formación.

#### Alternative 2 { #alternative-2 }

Cambiar el nombre del objeto para el que existe un conflicto en el archivo .json. La ventaja de este enfoque es que los metadatos DHIS2 existentes se dejan como están. Este puede ser un factor cuando existe material de formación o documentación como SOPs de diccionarios de datos vinculados al objeto en cuestión, y no implica ningún riesgo de confundir a los usuarios al modificar los metadatos con los que están familiarizados.

Tenga en cuenta que, tanto para la alternativa 1 como para la 2, la modificación puede ser tan simple como agregar un pequeño pre/post-fijo al nombre, para minimizar el riesgo de confusión.

#### Alternative 3 { #alternative-3 }

Un tercer enfoque, más complicado, es modificar el archivo .json para reutilizar los metadatos existentes. Por ejemplo, en los casos en los que ya existe un set de opciones para un determinado concepto (por ejemplo, "sexo"), ese set de opciones podría eliminarse del archivo .json y todas las referencias a su UID podrían reemplazarse con el set de opciones correspondiente que ya se esté en la base de datos. La gran ventaja de esto (que no se limita a los casos en los que existe un conflicto de importación directo) es evitar la creación de metadatos duplicados en la base de datos. Hay algunas consideraciones clave que se deben tener en cuenta al realizar este tipo de modificación:

-   requiere conocimiento especializado de la estructura detallada de metadatos de DHIS2
-   el enfoque no funciona para todos los tipos de objetos. En particular, ciertos tipos de objetos tienen dependencias que son complicadas de resolver de esta manera, por ejemplo relacionadas con desagregaciones.
-   las futuras actualizaciones del paquete de configuración serán complicadas.

## Configuration { #configuration }

Una vez que todos los metadatos se hayan importado correctamente, hay algunos pasos que deben seguirse antes de que el módulo sea funcional.

### Compartir { #sharing }

First, you will have to use the _Sharing_ functionality of DHIS2 to configure which users (user groups) should see the metadata and data associated with the program as well as who can register/enter data into the program. By default, sharing has been configured for the following:

-   Tipo de entidad Tracked
-   Programa
-   Program stages
-   Tableros
-   Visualizaciones, mapas, informes de eventos y tablas de informes
-   Sets de datos
-   Opciones de categoría

Consulte la [documentación DHIS2]](#sharing) para obtener más información sobre compartir.

Three core user groups are included in the package:

-   VE - Access
-   VE - Data capture
-   VE - Admin

By default, the following permissions are assigned to these user groups:

| Objeto | User Group |  |  |
| --- | --- | --- | --- |
|  | _VE - Access_ | _VE - Data capture_ | _VE - Admin_ |
| _*Tracked entity type*_ | Metadata : can view <br> Data: can view | Metadata : can view <br> Data: can capture and view | Metadata : can edit and view <br> Data: can view |
| _*Program*_ | Metadata : can view <br> Data: can view | Metadata : can view <br> Data: can capture and view | Metadata : can edit and view <br> Data: can view |
| _*Program Stages*_ | Metadata : can view <br> Data: can view | Metadata : can view <br> Data: can capture and view | Metadata : can edit and view <br> Data: can view |
| _*Dashboards*_ | Metadata : can view | Sin acceso | Metadata : can edit and view |
| _*Data Sets*_ | Metadata : can view <br> Data: can view | Sin acceso | Metadata : can edit and view <br> Data: No access |

The users are assigned to the appropriate user group based on their role within the system. Sharing for other objects in the package may be adjusted depending on the set up. Refer to the [DHIS2 Documentation on sharing](#sharing) for more information.

### User roles { #user-roles }

Los usuarios necesitarán roles de usuario para poder interactuar con las diversas aplicaciones dentro de DHIS2. Se recomiendan los siguientes roles mínimos:

1. Análisis de datos Tracker: puede ver análisis de eventos y acceder a tableros, informes de eventos, visualizador de eventos, visualizador de datos, tablas dinámicas, informes y mapas.
2. Captura de datos Tracker: puede agregar valores de datos, actualizar entidades de tracker, buscar entidades de tracker en unidades organizativas y acceder a la captura de tracker

Consulte la [Documentación de DHIS2](https://docs.dhis2.org/) para obtener más información sobre la configuración de roles de usuario.

### Organisation units { #organisation-units }

The program and the data sets must be assigned to organisation units within existing hierarchy in order to be accessible via tracker capture/capture apps.

### Duplicated metadata { #duplicated-metadata }

> **NOTE**
>
> This section only applies if you are importing into a DHIS2 database in which there is already meta-data present. If you are working with a new DHIS2 instance, please skip this section and go to [Adapting the tracker program](#adapting-the-program). If you are using any third party applications that rely on the current metadata, please take into account that this update could break them.

Incluso cuando los metadatos se han importado exitosamente sin ningún conflicto de importación, puede haber duplicados en los metadatos: elementos de datos, atributos de entidad tracker o set de opciones que ya existen. Como se señaló en la sección anterior sobre resolución de conflictos, una cuestión importante a tener en cuenta es que las decisiones sobre la realización de cambios en los metadatos en DHIS2 también deben tener en cuenta otros documentos y recursos que están asociados de diferentes maneras tanto con los metadatos existentes, como con los metadatos que se han importado a través del paquete de configuración. Por lo tanto, resolver duplicados no es sólo una cuestión de "limpiar la base de datos", sino también de asegurarse de que esto se haga sin, por ejemplo, romper la posible integración con otros sistemas, la posibilidad de utilizar material de capacitación, romper los SOP, etc. Esto dependerá en gran medida del contexto.

Una cosa importante a tener en cuenta es que DHIS2 tiene herramientas que pueden ocultar algunas de las complejidades de posibles duplicaciones en los metadatos. Por ejemplo, cuando existen set de opciones duplicados, se pueden ocultar para grupos de usuarios mediante [compartir](#sharing).

## Adapting the program { #adapting-the-program }

Once the program has been imported, you might want to make certain modifications to the program. Examples of local adaptations that _could_ be made include:

-   Añadir variables adicionales al formulario.
-   Adaptar los nombres de los elementos de datos/opciones según las convenciones nacionales.
-   Añadir traducciones a las variables y/o al formulario de entrada de datos.
-   Modifying program indicators based on local case definitions

Sin embargo, se recomienda fuertemente tener mucho cuidado si decide cambiar o eliminar cualquiera de los formularios/metadatos incluidos. Existe el peligro de que las modificaciones puedan alterar la funcionalidad, por ejemplo las reglas y los indicadores de programa.

## Removing metadata { #removing-metadata }

In order to keep your instance clean and avoid errors, it is recommended that you remove the unnecessary metadata from your instance.

In order to remove the old dashboard from your system, you need to:

> **NOTE**
>
> It is possible to delete the dashboard, its dashboard items and all relevant visualizations, maps and reports directly from the database using SQL commands.

## Upgrading from 1.0.0 to 1.1.0 { #upgrading-from-100-to-110 }

## Metadata delete { #metadata-delete }

Importing version 1.1.0 of the Vital Events package in an instance where 1.0.0 has been already installed is enough to create and update the metadata but the following metadata elements should be deleted:

| Tipo | UID | Nombre |
| --- | --- | --- |
| TEA | `u0dqjGQ3Z80` | VE - Sex is unknown |
| PR | `napRgSZqVp4` | Hide Sex if "Sex is unknown" is checked |
| PR | `dp6ev2TTLUH` | Hide Sex is unknown if reason for registration is not 2 (stillbirth) |

## Migrating legacy data to the new metadata { #migrating-legacy-data-to-the-new-metadata }

Update values entered for all TEA Sex, i.e. replace UID of TEA Sex with UID of TEA Sex M/F/U

    ```SQL
    UPDATE trackedentityattributevalue
    SET trackedentityattributeid = (SELECT trackedentityattributeid FROM trackedentityattribute where UID = 'fSn3gGMwRLi')
    WHERE trackedentityattributeid = (SELECT trackedentityattributeid FROM trackedentityattribute where UID = 'oindugucx72');
    ```

For all values corresponding to TEA Sex is Unknown = true, replace UID of TEA with UID of TEA Sex M/F/U and replace true with UNKNOWN

    ```SQL
    UPDATE trackedentityattributevalue
    SET value = 'UNKNOWN',
    trackedentityattributeid = (SELECT trackedentityattributeid FROM trackedentityattribute where UID = 'fSn3gGMwRLi')
    WHERE trackedentityattributeid = (SELECT trackedentityattributeid FROM trackedentityattribute where UID = 'u0dqjGQ3Z80')
    and value = 'true';
    ```
