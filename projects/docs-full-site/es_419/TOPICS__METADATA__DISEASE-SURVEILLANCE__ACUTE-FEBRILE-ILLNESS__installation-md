---
edit_url: "https://github.com/dhis2-metadata/IDS_AFI/blob/master/docs/ids_afi-installation.md"
revision_date: '2023-03-28'
tags:
- Metadatos
---

# Integrated Disease Surveillance: Acute Febrile Illness - Installation Guide { #ids-afi-installation }

You will have to follow the instructions in full for each separate package that you install.

## Instalación { #installation } 

La instalación del módulo consta de varios pasos:

1. [Preparing](#preparing-the-metadata-file) the metadata file with DHIS2 metadata.
2. [Importing](#generic-metadata) the metadata file into DHIS2.
3. [Configuring](#additional-configuration) the imported metadata.
4. [Adaptar](#adapting-the-tracker-program) el programa después de ser importado

It is recommended to first read through each section before starting the installation and configuration process in DHIS2. Sections that are not applicable have been identified, depending on if you are importing into a new instance of DHIS2 or a DHIS2 instance with metadata already present. The procedure outlined in this document should be tested in a test/staging environment before either being repeated or transferred to a production instance of DHIS2.

## Requisitos { #requirements } 

Para instalar el módulo, se requiere una cuenta de usuario administrador en DHIS2. El procedimiento descrito en este documento debe probarse en un entorno de prueba/preparación antes de realizarse en una instancia de producción de DHIS2.

Great care should be taken to ensure that the server itself and the DHIS2 application is well secured, to restrict access to the data being collected. Details on securing a DHIS2 system is outside the scope of this document, and we refer to the [DHIS2 documentation](https://docs.dhis2.org/en/home.html).

## Preparar el archivo de metadatos { #preparing-the-metadata-file } 

**NOTE:** If you are installing the package on a new instance of DHIS2, you can skip the "Preparing the metadata file" section and move immediately to the section on "[Importing a metadata file into DHIS2](#generic-metadata)."

Si bien no siempre es necesario, a menudo puede resultar ventajoso realizar ciertas modificaciones en el archivo de metadatos antes de importarlo a DHIS2.

### Dimensión de datos predeterminada { #default-data-dimension } 

En las primeras versiones de DHIS2, el UID de la dimensión de datos predeterminada se generaba automáticamente. Por lo tanto, si bien todas las instancias de DHIS2 tienen una opción de categoría predeterminada, una categoría de elemento de datos, una combinación de categoría y una combinación de opciones de categoría, los UID de estos valores predeterminados pueden ser diferentes. Las versiones posteriores de DHIS2 tienen UID codificados para la dimensión predeterminada y estos UID se utilizan en los paquetes de configuración.

To avoid conflicts when importing the metadata, it is advisable to search and replace the entire .json file for all occurrences of these default objects, replacing UIDs of the .json file with the UIDs of the database in which the file will be imported. Table 1 shows the UIDs which should be replaced, as well as the API endpoints to identify the existing UIDs.
existing UIDs.

| Objeto                      | UID         | API endpoint                                             |
|-----------------------------|-------------|----------------------------------------------------------|
| Categoría                     | GLevLNI9wkl | `../api/categories.json?filter=name:eq:default`          |
| Opción de categoría             | xYerKDKCefk | `../api/categoryOptions.json?filter=name:eq:default`     |
| Combinación de categoría        | bjDvmb4bfuf | `../api/categoryCombos.json?filter=name:eq:default`      |
| Combinación de opciones de categoría | HllvX50cXC0 | `../api/categoryOptionCombos.json?filter=name:eq:default`|

For example, if importing a configuration package into [https://play.dhis2.org/demo](https://play.dhis2.org/demo), the UID of the default category option combination could be identified through [https://play.dhis2.org/demo/api/categoryOptionCombos.json?filter=name:eq:default](https://play.dhis2.org/demo/api/categoryOptionCombos.json?filter=name:eq:default) as bRowv6yZOF2.

You could then search and replace all occurrences of HllvX50cXC0 with bRowv6yZOF2 in the .json file, as that is the ID of default in the system you are importing into. Note that this search and replace operation must be done with a plain text editor, not a word processor like Microsoft Word.

### Tipos de indicadores { #indicator-types } 

El tipo de indicador es otro tipo de objeto que puede crear conflictos de importación porque ciertos nombres se utilizan en diferentes bases de datos DHIS2 (por ejemplo, "Porcentaje"). Dado que los tipos de indicadores se definen simplemente por su factor y si son o no números simples sin denominador, no son ambiguos y pueden reemplazarse mediante una búsqueda y reemplazo de los UID. Esto evita posibles conflictos de importación y evita la creación de tipos de indicadores duplicados. La Tabla 2 muestra los UID que podrían reemplazarse, así como los API endpoints para identificar los UID existentes.

| Objeto     | UID         | API endpoint                                                             |
|------------|-------------|--------------------------------------------------------------------------|
| Porcentaje | hmSnCXmLYwt | `../api/indicatorTypes.json?filter=number:eq:false&filter=factor:eq:100` |

###  Tipo de entidad Tracked { #tracked-entity-type } 

Al igual que los tipos de indicadores, es posible que ya existan tipos de entidades tracker en su base de datos DHIS2. Las referencias al tipo de entidad tracker deben cambiarse para reflejar lo que hay en su sistema para no crear duplicados. La Tabla 3 muestra los UID que podrían reemplazarse, así como los API endpoints para identificar los UID existentes

| Objeto | UID         | API endpoint                                           |
|--------|-------------|--------------------------------------------------------|
| Persona | MCPQUTHX1Ze | `../api/trackedEntityTypes.json?filter=name:eq:Person` |

### Visualizaciones utilizando el UID de la unidad organizativa raíz { #visualizations-using-root-organisation-unit-uid } 

Las visualizaciones, informes de eventos, tablas de informes y mapas que están asignados a un nivel de unidad organizativa específico o grupo de unidades organizativas  tienen una referencia a la unidad organizativa raíz (nivel 1). Dichos objetos, si están presentes en el archivo de metadatos, contienen un marcador de posición `<OU_ROOT_UID>`. Utilice la función de búsqueda en el editor de archivos .json para identificar este marcador de posición y reemplazarlo con el UID de la unidad organizativa de nivel 1 en la instancia de destino.

### Importar metadatos { #importing-metadata } 

The .json metadata file is imported through the [Import/Export](#import_export) app of DHIS2. It is advisable to use the "dry run" feature to identify issues before attempting to do an actual import of the metadata. If "dry run" reports any issues or conflicts, see the [import conflicts](#handling-import-conflicts) section below.
If the "dry run"/"validate" import works without error, attempt to import the metadata. If the import succeeds without any errors, you can proceed to [configure](#additional-configuration) the module. In some cases, import conflicts or issues are not shown during the "dry run", but appear when the actual import is attempted. In this case, the import summary will list any errors that need to be resolved.

### Generic metadata { #generic-metadata } 

For generic metadata overview (identical metadata objects used by several packages), please refer to the installation annex of the individual package.

### Gestión de conflictos de importación { #handling-import-conflicts } 

NOTE: If you are importing into a new DHIS2 instance, you will not have to worry about import conflicts, as there is nothing in the database you are importing to to conflict with. Follow the instructions to import the metadata then please proceed to the [“Additional configuration”](#additional-configuration) section.

Pueden ocurrir varios conflictos diferentes, aunque el más común es que haya objetos de metadatos en el paquete de configuración con un nombre, nombre corto y/o código que ya existe en la base de datos de destino. Hay un par de soluciones alternativas a estos problemas, con diferentes ventajas y desventajas. Cuál sea la más adecuada dependerá, por ejemplo, del tipo de objeto para el que se produce un conflicto.

#### Alternativa 1 { #alternative-1 } 

Cambiar el nombre del objeto existente en su base de datos DHIS2 para el cual existe un conflicto. La ventaja de este enfoque es que no es necesario modificar el archivo .json, ya que los cambios se realizan a través de la interfaz de usuario de DHIS2. Es probable que esto sea menos propenso a errores. También significa que el paquete de configuración se deja como está, lo que puede ser una ventaja, por ejemplo, cuando se vaya a utilizar material de formación y documentación basados en el paquete de configuración.

#### Alternativa 2 { #alternative-2 } 

Cambiar el nombre del objeto para el que existe un conflicto en el archivo .json. La ventaja de este enfoque es que los metadatos DHIS2 existentes se dejan como están. Este puede ser un factor cuando existe material de formación o documentación como SOPs de diccionarios de datos vinculados al objeto en cuestión, y no implica ningún riesgo de confundir a los usuarios al modificar los metadatos con los que están familiarizados.

Tenga en cuenta que, tanto para la alternativa 1 como para la 2, la modificación puede ser tan simple como agregar un pequeño pre/post-fijo al nombre, para minimizar el riesgo de confusión.

#### Alternativa 3 { #alternative-3 } 

Un tercer enfoque, más complicado, es modificar el archivo .json para reutilizar los metadatos existentes. Por ejemplo, en los casos en los que ya existe un set de opciones para un determinado concepto (por ejemplo, "sexo"), ese set de opciones podría eliminarse del archivo .json y todas las referencias a su UID podrían reemplazarse con el set de opciones correspondiente que ya se esté en la base de datos. La gran ventaja de esto (que no se limita a los casos en los que existe un conflicto de importación directo) es evitar la creación de metadatos duplicados en la base de datos. Hay algunas consideraciones clave que se deben tener en cuenta al realizar este tipo de modificación:

* requiere conocimiento especializado de la estructura detallada de metadatos de DHIS2
* el enfoque no funciona para todos los tipos de objetos. En particular, ciertos tipos de objetos tienen dependencias que son complicadas de resolver de esta manera, por ejemplo relacionadas con desagregaciones.
* las futuras actualizaciones del paquete de configuración serán complicadas.

### Additional configuration { #additional-configuration } 

Una vez que todos los metadatos se hayan importado correctamente, hay algunos pasos que deben seguirse antes de que el módulo sea funcional.

#### Compartir { #sharing } 

First, you will have to use the *Sharing* functionality of DHIS2 to configure which users (user groups) should see the metadata and data associated with the programme as well as who can register/enter data into the program. By default, sharing has been configured for the following:

* Tipo de entidad Tracked
* Programa
* Etapas del programa
* Tableros

Un paquete de metadatos suele contener varios grupos de usuarios:

* AFI access
* AFI admin
* AFI data capture

By default the following is assigned to these user groups

| Objeto              | Grupos de usuarios                             |                                                  |                                                     |
|---------------------|-----------------------------------------|--------------------------------------------------|-----------------------------------------------------|
|                     | AFI access                          | AFI admin                                    | AFI data capture                                |
| Tipo de entidad Tracked | Metadatos: puede ver <br> Datos: puede ver | Metadatos : puede ver y editar <br> Datos: puede ver | Metadatos : puede ver <br> Datos: puede ver y capturar |
| Programa             | Metadatos: puede ver <br> Datos: puede ver | Metadatos : puede ver y editar <br> Datos: puede ver | Metadatos : puede ver <br> Datos: puede ver y capturar |
| Etapas del programa      | Metadatos: puede ver <br> Datos: puede ver | Metadatos : puede ver y editar <br> Datos: puede ver | Metadatos : puede ver <br> Datos: puede ver y capturar |
| Tableros          | Metadatos: puede ver <br> Datos: puede ver | Metadatos : puede ver y editar <br> Datos: puede ver | Metadatos: puede ver <br> Datos: puede ver             |

Please refere to the individual package installation annex for information about user groups.

You will want to assign your users to the appropriate user group based on their role within the system. You may want to enable sharing for other objects in the package depending on your set up. Refer to the [DHIS2 Documentation](#sharing) for more information on configuring sharing.

If your TET Person already matches the one in the package and you want to avoid overriding the current sharing properties for this object in the database, you can follow these steps:

* Remove this TET from the package file
* Import the package
* Update sharing properties for this TET using the table above.

### Roles de usuario { #user-roles } 

Los usuarios necesitarán roles de usuario para poder interactuar con las diversas aplicaciones dentro de DHIS2. Se recomiendan los siguientes roles mínimos:

1. Análisis de datos Tracker: puede ver análisis de eventos y acceder a tableros, informes de eventos, visualizador de eventos, visualizador de datos, tablas dinámicas, informes y mapas.
2. Captura de datos Tracker: puede agregar valores de datos, actualizar entidades de tracker, buscar entidades de tracker en unidades organizativas y acceder a la captura de tracker

Refer to the [DHIS2 Documentation](#manage_user_role_group) for more information on configuring user roles.

### Unidades organizativas { #organisation-units } 

Debe asignar el programa a unidades organizativas dentro de su propia jerarquía para poder ver el programa en Tracker - captura de datos.

### Metadatos duplicados { #duplicated-metadata } 

**NOTE:** This section only applies if you are importing into a DHIS2 database in which there is already meta-data present. If you are working with a new DHIS2 instance, please skip this section and go to "[Adapting the tracker program](#adapting-the-tracker-program)."

Incluso cuando los metadatos se han importado exitosamente sin ningún conflicto de importación, puede haber duplicados en los metadatos: elementos de datos, atributos de entidad tracker o set de opciones que ya existen. Como se señaló en la sección anterior sobre resolución de conflictos, una cuestión importante a tener en cuenta es que las decisiones sobre la realización de cambios en los metadatos en DHIS2 también deben tener en cuenta otros documentos y recursos que están asociados de diferentes maneras tanto con los metadatos existentes, como con los metadatos que se han importado a través del paquete de configuración. Por lo tanto, resolver duplicados no es sólo una cuestión de "limpiar la base de datos", sino también de asegurarse de que esto se haga sin, por ejemplo, romper la posible integración con otros sistemas, la posibilidad de utilizar material de capacitación, romper los SOP, etc. Esto dependerá en gran medida del contexto.

Una cosa importante a tener en cuenta es que DHIS2 tiene herramientas que pueden ocultar algunas de las complejidades de posibles duplicaciones en los metadatos. Por ejemplo, cuando existen set de opciones duplicados, se pueden ocultar para grupos de usuarios mediante [compartir](#sharing).

### Adaptar el programa { #adapting-the-tracker-program } 

Once the programme has been imported, you might want to make certain modifications to the programme. Examples of local adaptations that *could* be made include:

* Añadir variables adicionales al formulario.
* Adaptar los nombres de los elementos de datos/opciones según las convenciones nacionales.
* Añadir traducciones a las variables y/o al formulario de entrada de datos.
* Modifying program indicators based on local case definitions

Sin embargo, se recomienda fuertemente tener mucho cuidado si decide cambiar o eliminar cualquiera de los formularios/metadatos incluidos. Existe el peligro de que las modificaciones puedan alterar la funcionalidad, por ejemplo las reglas y los indicadores de programa.

### [CONFIG] metadatos { #config-metadata } 

Los siguientes metadatos deben configurarse después de la importación.

| Tipo de metadatos       | Nombre                                               |
|---------------------|----------------------------------------------------|
| Set de opciones         | [CONFIG]\_Race / Ethnicity / Nationality           |
| Set de opciones         | [CONFIG]\_Occupation                               |
| Set de opciones         | [CONFIG]\_Diagnosis                                |
| Data Elements       | [CONFIG]\_Month before illness, [Other exposure X] |
| Data Elements       | [CONFIG]\_Laboratory test X                        |
| Data Elements       | [CONFIG]\_Date of test X                           |
| Data Elements       | [CONFIG]\_Pathogens tested "X"                     |

Where you can see X in the name, it means there is currently a number to distinguish every different metadata object. For example, for [CONFIG]\_Laboratory test X, you will find in the package Data Elements called [CONFIG]\_Laboratory test 1, [CONFIG]\_Laboratory test 2, [CONFIG]\_Laboratory test 3. It is entirely up to you to rename them as well as adding new ones or removing the ones you may not need following the same logic.
**Please be aware that this migh have an impact on Program Indicators and Program Rules.**

