---
edit_url: "https://github.com/dhis2-metadata/HIV_CS-TRK-HIV_Case_Surveillance/blob/master/docs/hiv_case_surveillance_installation.md"
revision_date: "2021-10-05"
---

# HIV Case Surveillance Installation Guide { #hiv_cs_installation }

Package Version b1.0.0

DHIS2 Version compatibility 2.33.5 and above

## Visión general { #overview }

The HIV Case Surveillance tracker package was developed using DHIS2.33.5. This was done in order to support some of the latest features in DHIS2. In order to use the package, it is recommended that you install it into a DHIS2 instance using DHIS2 2.33.5 or above. If you will be setting this up on a new instance, please refer to the [DHIS2 installation guide](https://docs.dhis2.org/master/en/dhis2_system_administration_guide/installation.html). This document covers the installation of the following packages:

1. Case Surveillance tracker program

You will have to follow the instructions to ensure that the package is installed and configured correctly.

## Installation { #installation }

La instalación del módulo consta de varios pasos:

1. [Preparar](#preparing-the-metadata-file) el archivo de metadatos.
2. [Importar](#importing-metadata) el archivo de metadatos en DHIS2.
3. [Configuring](#additional-configuration) the imported metadata.
4. [Adaptar](#adapting-the-tracker-program) el programa después de ser importado

It is recommended to first read through each section before starting the installation and configuration process in DHIS2. Sections that are not applicable have been identified, depending on if you are importing into a new instance of DHIS2 or a DHIS2 instance with metadata already present. The procedure outlined in this document should be tested in a test/staging environment before either being repeated or transferred to a production instance of DHIS2.

## Requisitos { #requirements }

Para instalar el módulo, se requiere una cuenta de usuario administrador en DHIS2. El procedimiento descrito en este documento debe probarse en un entorno de prueba/preparación antes de realizarse en una instancia de producción de DHIS2.

Se debe tener mucho cuidado para garantizar que el servidor en sí y la aplicación DHIS2 estén bien protegidos, para restringir el acceso a los datos que se recopilan. Los detalles sobre cómo proteger un sistema DHIS2 están fuera del alcance de este documento, por lo que remitimos a la [documentación de DHIS2](http://dhis2.org/documentation).

## Preparing the metadata file { #preparing-the-metadata-file }

**NOTA:** Si está instalando el paquete en una nueva instancia de DHIS2, puede omitir la sección "Preparación del archivo de metadatos" y pasar inmediatamente a la sección [Importar un archivo de metadatos a DHIS2](#importing-metadata)

Si bien no siempre es necesario, a menudo puede resultar ventajoso realizar ciertas modificaciones en el archivo de metadatos antes de importarlo a DHIS2.

### Default data dimension (if applicable) { #default-data-dimension-if-applicable }

En las primeras versiones de DHIS2, el UID de la dimensión de datos predeterminada se generaba automáticamente. Por lo tanto, si bien todas las instancias de DHIS2 tienen una opción de categoría predeterminada, una categoría de elemento de datos, una combinación de categoría y una combinación de opciones de categoría, los UID de estos valores predeterminados pueden ser diferentes. Las versiones posteriores de DHIS2 tienen UID codificados para la dimensión predeterminada y estos UID se utilizan en los paquetes de configuración.

Para evitar conflictos al importar los metadatos, es recomendable buscar y  reemplazar en todo el archivo .json todas las apariciones de estos objetos predeterminados, reemplazando los UID del archivo .json con los UID de la base de datos en la que se importará el archivo. La Tabla 1 muestra los UID que deben reemplazarse, así como los API endpoints para identificar los UID existentes.

| Objeto | UID | API endpoint |
| :-- | :-- | :-- |
| Categoría  | GLevLNI9wkl | `../api/categories.json?filter=name:eq:default` |
| Opción de categoría | xYerKDKCefk | `../api/categoryOptions.json?filter=name:eq:default` |
| Combinación de categoría | bjDvmb4bfuf | `../api/categoryCombos.json?filter=name:eq:default` |
| Combinación de opciones de categoría | HllvX50cXC0 | `../api/categoryOptionCombos.json?filter=name:eq:default` |

Por ejemplo, si importa un paquete de configuración a <https://play.dhis2.org/demo>, el UID de la combinación de opciones de categoría predeterminada podría identificarse a través de <https://play.dhis2.org/demo/api/categoryOptionCombos.json?filter=name:eq:default> as bRowv6yZOF2.

Luego, puede buscar y reemplazar todas las apariciones de HllvX50cXC0 con bRowv6yZOF2 en el archivo .json, ya que ese es el ID predeterminado en el sistema al que está importando. **_Tenga en cuenta que esta operación de búsqueda y reemplazo debe realizarse con un editor de texto plano_**, no con un procesador de textos como Microsoft Word.

### Indicator types { #indicator-types }

El tipo de indicador es otro tipo de objeto que puede crear conflictos de importación porque ciertos nombres se utilizan en diferentes bases de datos DHIS2 (por ejemplo, "Porcentaje"). Dado que los tipos de indicadores se definen simplemente por su factor y si son o no números simples sin denominador, no son ambiguos y pueden reemplazarse mediante una búsqueda y reemplazo de los UID. Esto evita posibles conflictos de importación y evita la creación de tipos de indicadores duplicados. La Tabla 2 muestra los UID que podrían reemplazarse, así como los API endpoints para identificar los UID existentes.

| Objeto | UID | API endpoint |
| :-- | :-- | :-- |
| Porcentaje | hmSnCXmLYwt | `../api/indicatorTypes.json?filter=number:eq:false&filter=factor:eq:100` |

### Tracked Entity Type { #tracked-entity-type }

Al igual que los tipos de indicadores, es posible que ya existan tipos de entidades tracker en su base de datos DHIS2. Las referencias al tipo de entidad tracker deben cambiarse para reflejar lo que hay en su sistema para no crear duplicados. La Tabla 3 muestra los UID que podrían reemplazarse, así como los API endpoints para identificar los UID existentes

| Objeto | UID | API endpoint |
| :-- | :-- | :-- |
| Persona | MCPQUTHX1Ze | `../api/trackedEntityTypes.json?filter=name:eq:Person` |

## Importing metadata { #importing-metadata }

El archivo de metadatos .json se importa a través de la aplicación [Importar/Exportar] (https://docs.dhis2.org/master/en/user/html/import_export.html) de DHIS2. Es recomendable utilizar la función de proceso de prueba "dry run" para identificar problemas antes de intentar realizar una importación real de los metadatos. Si el "dry run" informa algún problema o conflicto, consulte la sección [conflictos de importación](#handling-import-conflicts) más abajo.

If the "dry run"/"validate" import works without error, attempt to import the metadata. If the import succeeds without any errors, you can proceed to [configure](#additional-configuration) the module. In some cases, import conflicts or issues are not shown during the "dry run", but appear when the actual import is attempted. In this case, the import summary will list any errors that need to be resolved.

### Handling import conflicts { #handling-import-conflicts }

**NOTE:** If you are importing into a new DHIS2 instance, you will not have to worry about import conflicts, as there is nothing in the database you are importing to to conflict with. Follow the instructions to import the metadata then please proceed to the “[Additional configuration](#additional-configuration)” section.

Pueden ocurrir varios conflictos diferentes, aunque el más común es que haya objetos de metadatos en el paquete de configuración con un nombre, nombre corto y/o código que ya existe en la base de datos de destino. Hay un par de soluciones alternativas a estos problemas, con diferentes ventajas y desventajas. Cuál sea la más adecuada dependerá, por ejemplo, del tipo de objeto para el que se produce un conflicto.

**_Alternative 1_**

Cambiar el nombre del objeto existente en su base de datos DHIS2 para el cual existe un conflicto. La ventaja de este enfoque es que no es necesario modificar el archivo .json, ya que los cambios se realizan a través de la interfaz de usuario de DHIS2. Es probable que esto sea menos propenso a errores. También significa que el paquete de configuración se deja como está, lo que puede ser una ventaja, por ejemplo, cuando se vaya a utilizar material de formación y documentación basados en el paquete de configuración.

**_Alternative 2_**

Cambiar el nombre del objeto para el que existe un conflicto en el archivo .json. La ventaja de este enfoque es que los metadatos DHIS2 existentes se dejan como están. Este puede ser un factor cuando existe material de formación o documentación como SOPs de diccionarios de datos vinculados al objeto en cuestión, y no implica ningún riesgo de confundir a los usuarios al modificar los metadatos con los que están familiarizados.

Tenga en cuenta que, tanto para la alternativa 1 como para la 2, la modificación puede ser tan simple como agregar un pequeño pre/post-fijo al nombre, para minimizar el riesgo de confusión.

**_Alternative 3_**

Un tercer enfoque, más complicado, es modificar el archivo .json para reutilizar los metadatos existentes. Por ejemplo, en los casos en los que ya existe un set de opciones para un determinado concepto (por ejemplo, "sexo"), ese set de opciones podría eliminarse del archivo .json y todas las referencias a su UID podrían reemplazarse con el set de opciones correspondiente que ya se esté en la base de datos. La gran ventaja de esto (que no se limita a los casos en los que existe un conflicto de importación directo) es evitar la creación de metadatos duplicados en la base de datos. Hay algunas consideraciones clave que se deben tener en cuenta al realizar este tipo de modificación:

-   requiere conocimiento especializado de la estructura detallada de metadatos de DHIS2
-   el enfoque no funciona para todos los tipos de objetos. En particular, ciertos tipos de objetos tienen dependencias que son complicadas de resolver de esta manera, por ejemplo relacionadas con desagregaciones.
-   las futuras actualizaciones del paquete de configuración serán complicadas.

### Additional configuration { #additional-configuration }

Una vez que todos los metadatos se hayan importado correctamente, hay algunos pasos que deben seguirse antes de que el módulo sea funcional.

### Compartir { #sharing }

Primero, tendrá que usar la funcionalidad _Compartir_ de DHIS2 para configurar qué usuarios (grupos de usuarios) deben ver los metadatos y los datos asociados con el programa, así como quién puede registrar/introducir datos en el programa. De forma predeterminada, el uso compartido se ha configurado para lo siguiente:

-   Tipo de entidad Tracked
-   Programa
-   Etapas del programa
-   Tableros

There are four user groups that come with the package:

-   HIV CS- Admin
-   HIV CS- Data capture
-   HIV CS- Data Analysis

By default the following is assigned to these user groups

| Objeto | User groups |  |  |  |
| --- | --- | --- | --- | --- |
|  | HIV - CS Admin | HIV CS- Data capture | HIV CS - Data analytics |  |
| Tipo de entidad Tracked | XXX | Metadata: can edit and view Data: can view | Metadata: can view Data: can capture and view | Metadata: can view Data: ca view |
| Programa | XXX | Metadata: can edit and view Data: can view | Metadata: can view Data: can capture and view | Metadata: can view Data: can view |
| Tableros | XXX | Metadata: can edit and view Data: can view | Metadata: can view Data: can view | Metadata: can view Data: can view |
|  |  |  |  |  |

Querrá asignar sus usuarios al grupo de usuarios apropiado según su rol dentro del sistema. Es posible que desee habilitar 'compartir' para otros objetos en el paquete en función de su configuración. Consulte la [Documentación de DHIS2](https://docs.dhis2.org/master/en/dhis2_user_manual_en/about-sharing-of-objects.html) para obtener más información sobre cómo configurar compartir.

### User Roles { #user-roles }

Los usuarios necesitarán roles de usuario para poder interactuar con las diversas aplicaciones dentro de DHIS2. Se recomiendan los siguientes roles mínimos:

1. Análisis de datos Tracker: puede ver análisis de eventos y acceder a tableros, informes de eventos, visualizador de eventos, visualizador de datos, tablas dinámicas, informes y mapas.
2. Captura de datos Tracker: puede agregar valores de datos, actualizar entidades de tracker, buscar entidades de tracker en unidades organizativas y acceder a la captura de tracker

Consulte la [Documentación DHIS2](http://dhis2.org/documentation) para obtener más información sobre la configuración de roles de usuario.

### Organisation Units { #organisation-units }

Debe asignar el programa a unidades organizativas dentro de su propia jerarquía para poder ver el programa en Tracker - captura de datos.

### Duplicated metadata { #duplicated-metadata }

**NOTE:** This section only applies if you are importing into a DHIS2 database in which there is already meta-data present. If you are working with a new DHIS2 instance, you may skip this section.

Incluso cuando los metadatos se han importado exitosamente sin ningún conflicto de importación, puede haber duplicados en los metadatos: elementos de datos, atributos de entidad tracker o set de opciones que ya existen. Como se señaló en la sección anterior sobre resolución de conflictos, una cuestión importante a tener en cuenta es que las decisiones sobre la realización de cambios en los metadatos en DHIS2 también deben tener en cuenta otros documentos y recursos que están asociados de diferentes maneras tanto con los metadatos existentes, como con los metadatos que se han importado a través del paquete de configuración. Por lo tanto, resolver duplicados no es sólo una cuestión de "limpiar la base de datos", sino también de asegurarse de que esto se haga sin, por ejemplo, romper la posible integración con otros sistemas, la posibilidad de utilizar material de capacitación, romper los SOP, etc. Esto dependerá en gran medida del contexto.

One important thing to keep in mind is that DHIS2 has tools that can hide some of the complexities of potential duplications in metadata. For example, where duplicate option sets exist, they can be hidden for groups of users through [sharing](https://docs.dhis2.org/master/en/user/html/sharing.html).

#### Data entry forms { #data-entry-forms }

-   After registering the first (test) case, access the **Settings** menu in the tracker capture form and select **Show/Hide Widgets**
-   Switch from **Timeline Data Entry** to **Tabular Data Entry**
-   Make sure that **Enrollment**, **Feedback** and **Profile** widgets are selected. Click **Close**.
-   Adjust the widgets on the screen as shown below:

Captura de Pantalla

#### Top Bar { #top-bar }

-   Access the **Settings** menu and select **Top bar settings**
-   Select **Activate top bar**
-   Select required information fields and assign their **Sort order**

|                                    | Recommended fields | Sort order |
| ---------------------------------- | ------------------ | ---------- |
| Surname                            | 1                  |
| Date of birth                      | 2                  |
| This person is in viral supression | 3                  |
| Viral load latest                  | 4                  |
| Days without medicine              | 5                  |

-   Click **Save**
-   Return to the **Settings** menu. Click **Saved dashboard layout as default**. Lock layout for all users.

## Adapting the tracker program { #adapting-the-tracker-program }

Una vez que se haya importado el programa, es posible que desee realizar ciertas modificaciones en él. Algunos ejemplos de adaptaciones locales que _podrían_ realizarse son:

-   Añadir variables adicionales al formulario.
-   Adaptar los nombres de los elementos de datos/opciones según las convenciones nacionales.
-   Añadir traducciones a las variables y/o al formulario de entrada de datos.
-   Modificación de los indicadores del programa basados en definiciones de casos locales.

Sin embargo, se recomienda fuertemente tener mucho cuidado si decide cambiar o eliminar cualquiera de los formularios/metadatos incluidos. Existe el peligro de que las modificaciones puedan alterar la funcionalidad, por ejemplo las reglas y los indicadores de programa.

## Event Reports { #event-reports }

There is currently (08/03/2021) a bug that prevents the importing event reports (JIRA-DHIS2-10163). This means that some of the event report dashboards need to be recreated manually after the import.

### 6.1.2HIV - Visit by Gender and Treatment Status { #612hiv-visit-by-gender-and-treatment-status }

![Visit by gender and Treatment status](resources/images/image23.png)

In order to recreate this pivot table, go to the app “event reports” and configure the following:

Table Style: Pivot table Output type: Event Program: HIV Case surveillance Stage: Visit

Selected data items: Program Attribute “Gender, M,F,TG” Data Element “HIV - Treatment Status”

Periods: This Month Last three months

Organisation unit: Select the corresponding org unit or level(Currently it is configured at national level)

### HIV - Visit by Treatment Status and District { #hiv-visit-by-treatment-status-and-district }

![Visit by Treatment Status and District](resources/images/image20.png)

In order to recreate this pivot table, go to the app “event reports” and configure the following:

Table Style: Pivot table Output type: Event Program: HIV Case surveillance Stage: Visit

Selected data items: Data Element “HIV - Treatment Status”

Periods: Last Month

Organisation unit: Select the corresponding org unit or level (Currently it is configured at national level)

Layout: Report filter: Periods Column dimensions: Data Element “HIV - Treatment Status” Row Dimensions: Organisation units

### TPT Regimes { #tpt-regimes }

![TB PReventive therapy regimes](resources/images/image17.png) In order to recreate this pivot table, go to the app “event reports” and configure the following:

Table Style: Pivot table Output type: Event Program: HIV Case surveillance Stage: Visit

Selected data items: Data Element “HIV - TPT Eligibility” Data Element “HIV - TPT Regimen”

Periods: This month,Last Month, Last three months

Organisation unit: Select the corresponding org unit (Currently it is configured as “User org unit”)

Layout: Column dimensions: Organisation units, Periods Row Dimensions: DE HIV TPT Eligibility, DE HIV - TPT Regimen

## Script Annex { #script-annex }

In order to allow for analytics at the point of service when clients change the place where they receive treatment, we have created a script that will need to be installed on the instance.

### Step 1: Create a Table { #step-1-create-a-table }

First step is to create a new table in the database where we will log the OU selected when the user enrolls in a new TEI. Please note that only programinstanceid and organisationunitid columns are required. In this case the uid column has been added for clarity purposes. We could add any column required for auditing purposes (for example a timestamp with the creation date, etc…)

```SQL
CREATE TABLE public.enrollmentou (
    programinstanceid bigint NOT NULL,
    uid character varying(11),
    organisationunitid bigint
);

ALTER TABLE public.enrollmentou OWNER TO postgres;

ALTER TABLE ONLY public.enrollmentou
    ADD CONSTRAINT enrollmentou_pkey PRIMARY KEY (programinstanceid);

ALTER TABLE ONLY public.enrollmentou
    ADD CONSTRAINT uk_d3lsa2h8me94ksyp53l6rpe4g UNIQUE (uid);

CREATE INDEX index_enrollmentou ON public.enrollmentou USING btree (programinstanceid);

ALTER TABLE ONLY public.enrollmentou
    ADD CONSTRAINT fk_enrollmentou_programinstanceid FOREIGN KEY (programinstanceid) REFERENCES public.programinstance(programinstanceid);

ALTER TABLE ONLY public.enrollmentou
    ADD CONSTRAINT fk_enrollmentou_organisationunitid FOREIGN KEY (organisationunitid) REFERENCES public.organisationunit(organisationunitid);
```

Then, we define a function to be executed by a trigger. This function simply takes the NEW value(s) INSERTED or UPDATED in table programinstance (corresponding to an enrollment) stored in variable NEW and populates enrollementou table with them. It also makes sure that the new enrollment corresponds to program uid 'Xh88p1nyefp', HIV CS.

```SQL
@CREATE OR REPLACE FUNCTION log_enrollment_ou_changes()
  RETURNS TRIGGER
  LANGUAGE PLPGSQL
  AS
$$
BEGIN
    IF NEW.programid = (SELECT programid FROM program WHERE uid = 'Xh88p1nyefp')
    THEN
        INSERT INTO enrollmentou (programinstanceid, uid, organisationunitid)
        VALUES(NEW.programinstanceid,NEW.uid,NEW.organisationunitid)
        ON CONFLICT (programinstanceid) DO NOTHING;
    END IF;

    RETURN NEW;
END;
$$;
```

Last step remaining is to create a trigger which will execute this function after an insert or update operation takes place in the programinstance table.

```SQL
CREATE TRIGGER enrollment_ou_changes
  AFTER INSERT OR UPDATE
  ON programinstance
  FOR EACH ROW
  EXECUTE PROCEDURE log_enrollment_ou_changes();
```

We check the table at present and verify that is empty:

![table](resources/images/image15.png)

After accessing the instance, we proceed to enroll a new case in the HIV CS program. The result is as follows:

![Visit by Treatment Status and District](resources/images/image22.png)

Please note that the UID for this new TEI is qFdfVhUGFZ8.

Checking the table enrollmentou, we can see that a new row has been created.

![Visit by Treatment Status and District](resources/images/image1.png)

It is possible to create a SQL view to provide the contents of enrollmentou table in a more user friendly way, so the user can easily check what the enrollment ou was for each TEI in the program. The SQL view is as follows:

```SQL
SELECT tei.uid as tei_uid, eou.uid as enrollment_uid, ou.name as enrollment_ou
FROM enrollmentou eou
INNER JOIN programinstance pi ON eou.programinstanceid = pi.programinstanceid
INNER JOIN trackedentityinstance tei ON pi.trackedentityinstanceid = tei.trackedentityinstanceid
INNER JOIN organisationunit ou ON eou.organisationunitid = ou.organisationunitid;
```

And the result is:

![Visit by Treatment Status and District](resources/images/image27.png)

We can now verify the current enrollment OU and ownership OU are the same for this TEI:

![Visit by Treatment Status and District](resources/images/image13.png)

Also in the UI:

![Visit by Treatment Status and District](resources/images/image19.png)

### Step 2: Create a function and trigger on trackedentityprogramowner { #step-2-create-a-function-and-trigger-on-trackedentityprogramowner }

We create the following function and trigger on table trackedentityprogramowner:

```SQL
CREATE OR REPLACE FUNCTION log_ownership_ou_changes()
  RETURNS TRIGGER
  LANGUAGE PLPGSQL
  AS
$$
BEGIN
    IF NEW.programid = (SELECT programid FROM program WHERE uid = 'Xh88p1nyefp') AND
       NEW.lastupdated != NEW.created
    THEN
        UPDATE programinstance SET organisationunitid = NEW.organisationunitid
        FROM trackedentityprogramowner
        WHERE trackedentityprogramowner.trackedentityinstanceid = NEW.trackedentityinstanceid AND
            trackedentityprogramowner.trackedentityinstanceid = programinstance.trackedentityinstanceid;

    END IF;

    RETURN NEW;
END;
$$;

CREATE TRIGGER ownership_ou_changes
  AFTER INSERT OR UPDATE
  ON trackedentityprogramowner
  FOR EACH ROW
  EXECUTE PROCEDURE log_ownership_ou_changes();
```

Function log_ownership_ou_changes will be triggered when an INSERT or UPDATE takes place in trackedentityprogramowner. If the row affected corresponds to HIV program and the timestamp from update differs from the one stored in create (so it is an update of ownership), the enrollment ou in the programinstance table is updated accordingly.

We proceed to refer the patient, making a permanent move:

![Visit by Treatment Status and District](resources/images/image16.png)

We can check that the ownership has changed to Crow Health Centre:

We also check the table in the database:

![Visit by Treatment Status and District](resources/images/image24.png)

The OU ownership is “Crow Health Centre” but also that is the new enrollment OU as well, so the trigger successfully performed the update in the program instance table. If we refresh the browser, we see this:

![Visit by Treatment Status and District](resources/images/image7.png)

Ownership and enrollment are the same.

Finally, we verify that nothing has changed in the enrollmentou table:

![Visit by Treatment Status and District](resources/images/image13.png)

So we still have the information about the enrollment organization unit.
