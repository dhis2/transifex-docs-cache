---
edit_url: "https://github.com/dhis2-metadata/C19_CS/blob/master/docs/c19_cs-installation.md"
revision_date: '2022-09-13'
tags:
- Implémentation
---

# COVID-19 Surveillance - Installation Guide { #c19-cs-installation }

## Présentation { #overview } 

The COVID-19 tracker package was developed using DHIS2.33.2. This was done in order to support some of the latest features in DHIS2. In order to use the package, it is recommended that you install it into a DHIS2 instance using DHIS2 2.33.2 or above. If you will be setting this up on a new instance, please refer to the [DHIS2 installation guide](https://docs.dhis2.org/en/manage/performing-system-administration/dhis-core-version-master/installation.html). This document covers the installation of the following packages:

1. COVID-19 Programme Tracker de surveillance basée sur les cas & COVID-19 Programme d'enregistrement et de suivi des contacts
2. Programme Tracker de dépistage aux points d'entrée

Vous devrez suivre les instructions dans leur intégralité pour chaque package que vous installez.

## Installation { #installation }

L'installation du module se fait en plusieurs étapes :

1. [Préparation](#preparing-the-metadata-file) du fichier de métadonnées avec les métadonnées de DHIS2.
2. [Importation](#importing-metadata) du fichier de métadonnées dans DHIS2.
3. [Configuration](#configuration-additionnelle) des métadonnées importées.
4. [Adaptation](#adapting-the-tracker-program) du programme après son importation

Il est recommandé de lire d'abord chaque section avant de commencer le processus d'installation et de configuration dans le DHIS2. Les sections non applicables ont été identifiées, selon que vous importiez dans une nouvelle instance de DHIS2 ou dans une instance de DHIS2 ayant déjà des métadonnées. La procédure décrite dans le présent document doit être testée dans un environnement de test et de simulation avant d'être répétée ou transférée dans une instance de production du DHIS2.

## Conditions requises { #requirements } 

Pour installer le module, il faut nécessairement un compte d'utilisateur administrateur sur DHIS2. La procédure décrite dans le présent document doit être testée dans un environnement de test et de simulation avant d'être exécutée sur une instance de production du DHIS2.

Great care should be taken to ensure that the server itself and the DHIS2 application is well secured, to restrict access to the data being collected. Details on securing a DHIS2 system is outside the scope of this document, and we refer to the [DHIS2 documentation](https://docs.dhis2.org/).

## Préparation du fichier de métadonnées { #preparing-the-metadata-file } 

**N.B.** : Si vous installez le package sur une nouvelle instance de DHIS2, vous pouvez alors ignorer la section "Préparation du fichier de métadonnées" et passer immédiatement à la section "[Importer un fichier de métadonnées dans DHIS2](#importing-metadata)".

Bien que ce ne soit pas toujours nécessaire, il peut souvent être avantageux d'apporter certaines modifications au fichier de métadonnées avant son importation dans DHIS2.

### Dimension de données par défaut { #default-data-dimension } 

Dans les premières versions de DHIS2, l'UID de la dimension des données par défaut était généré automatiquement. Ainsi, alors que toutes les instances du DHIS2 ont une option de catégorie par défaut, une catégorie d'élément de données, une combinaison de catégories et une combinaison d'options de catégories, les UID de ces valeurs par défaut peuvent être différents. Les versions plus récentes de DHIS2 ont des UID codés en dur pour la dimension par défaut, et ce sont ces UID qui sont utilisés dans les packages de configuration.

To avoid conflicts when importing the metadata, it is advisable to search and replace the entire .json file for all occurrences of these default objects, replacing UIDs of the .json file with the UIDs of the database in which the file will be imported. Table 1 shows the UIDs which should be replaced, as well as the API endpoints to identify the existing UIDs

|Objet|UID|Chemin vers l'API|
|--|--|--|
|Catégorie|GLevLNI9wkl|../api/categories.json?filter=name:eq:default|
|Option de catégorie|xYerKDKCefk|../api/categoryOptions.json?filter=name:eq:default|
|Combinaison de catégories|bjDvmb4bfuf|../api/categoryCombos.json?filter=name:eq:default|
|Combinaison d’options catégorie|HllvX50cXC0|../api/categoryOptionCombos.json?filter=name:eq:default|

For example, if importing a configuration package into [https://play.dhis2.org/demo](https://play.dhis2.org/demo), the UID of the default category option combination could be identified through <https://play.dhis2.org/demo/api/categoryOptionCombos.json?filter=name:eq:default> as bRowv6yZOF2.

Vous pourriez alors rechercher et remplacer toutes les occurrences de `HllvX50cXC0` par `bRowv6yZOF2` dans le fichier .json, puisque c'est l'ID par défaut du système dans lequel vous importez. ***Notez que cette opération de recherche et de remplacement doit être effectuée avec un éditeur de texte brut***, et non avec un logiciel de traitement de textes comme Microsoft Word.

### Types d'indicateurs { #indicator-types } 

Le type d'indicateur est un autre type d'objet pouvant créer un conflit d'importation puisque certains noms sont utilisés dans différentes bases de données de DHIS2 ("Pourcentage", par exemple). Étant donné que les types d'indicateurs sont définis simplement par leur facteur et par le fait qu'il s'agisse ou non de simples nombres sans dénominateur, ils sont sans aucune ambiguïté et peuvent être remplacés par une recherche et un remplacement des UID. Cela permet d'éviter d'éventuels conflits d'importation et de ne pas créer de types d'indicateurs dupliqués. Le tableau 2 montre les UID qui pourraient être remplacés, ainsi que les points d'extrémité de l'API pour identifier les UID existants.

|Objet|UID|Chemin vers l'API|
|--|--|--|
|Numérateur seulement (nombre)|kHy61PbChXr|../api/indicatorTypes.json?filter=number:eq:true&filter=factor:eq:1|
|Pourcentage|hmSnCXmLYwt|../api/indicatorTypes.json?filter=number:eq:false&filter=factor:eq:100|

#### Type d'entité suivie { #tracked-entity-type } 

Comme pour les types d'indicateurs, il se peut que vous ayez déjà des types d'entités suivies dans votre base de données DHIS2. Les références au type d'entité suivie doivent être modifiées pour refléter ce qui se trouve dans votre système afin d'éviter la création de doublons. Le tableau 3 indique les UID qui pourraient être remplacés, ainsi que les points point d'extrémité de l'API permettant d'identifier les UID existants.

|Objet|UID|Chemin vers l'API|
|--|--|--|
|Personne|MCPQUTHX1Ze|../api/trackedEntityTypes.json?filter=name:eq:Person|

## Importation de métadonnées { #importing-metadata } 

The .json metadata file is imported through the [Import/Export](https://docs.dhis2.org/en/use/user-guides/dhis-core-version-master/maintaining-the-system/importexport-app.html) app of DHIS2. It is advisable to use the "dry run" feature to identify issues before attempting to do an actual import of the metadata. If "dry run" reports any issues or conflicts, see the [import conflicts](https://who.dhis2.org/documentation/installation_guide_complete.html#handling-import-conflicts) section below. If the "dry run"/"validate" import works without error, attempt to import the metadata. If the import succeeds without any errors, you can proceed to [configure](https://who.dhis2.org/documentation/installation_guide_complete.html#configuration) the module. In some cases, import conflicts or issues are not shown during the "dry run", but appear when the actual import is attempted. In this case, the import summary will list any errors that need to be resolved.

### Gestion des conflits d'importation { #handling-import-conflicts } 

***N.B.*** : Si vous importez dans une nouvelle instance DHIS2, vous n'aurez pas à vous soucier des conflits d'importation, car il n'y a rien dans la base de données que vous importez qui puisse entrer en conflit avec celle-ci. Suivez les instructions pour importer les métadonnées, puis passez à la section "[Configuration supplémentaire](#configuration-supplémentaire)".

Plusieurs de conflits peuvent survenir, mais le plus courant est le fait qu'il y ait des objets de métadonnées dans le package de configuration avec un nom, un nom abrégé et/ou un code existant déjà dans la base de données cible. Il existe plusieurs solutions alternatives à ces problèmes, avec de différents avantages et inconvénients. La solution la plus appropriée dépendra, par exemple, du type d'objet pour lequel un conflit survient.

#### Option 1 { #alternative-1 } 

Renommez l'objet de votre base de données de DHIS2 pour lequel il y a un conflit. L'avantage de cette approche est que vous n'avez pas besoin de modifier le fichier .json, puisque les modifications sont effectuées par l'interface utilisateur de DHIS2. Cette méthode est probablement moins sujette aux erreurs. Cela signifie également que le package de configuration est laissé tel quel, ce qui peut être un avantage, par exemple, lorsque du matériel de formation et de la documentation basés sur le package de configuration seront utilisés.

#### Option 2 { #alternative-2 } 

Renommez l'objet pour lequel il y a un conflit dans le fichier .json. L'avantage de cette approche est que les métadonnées DHIS2 existantes sont laissées telles quelles. Cela peut être un facteur lorsqu'il y a du matériel de formation ou de la documentation, comme les procédure normale d'exploitation des dictionnaires de données liés à l'objet en question, et cela n'implique aucun risque de confusion pour les utilisateurs lors de la modification des métadonnées qui leur sont familières.

Notez que pour les deux options 1 et 2, la modification peut être aussi simple que l'ajout d'un petit pré/post-fixe au nom, pour minimiser le risque de confusion.

#### Option 3 { #alternative-3 } 

Une troisième approche, plus complexe, consiste à modifier le fichier .json pour réutiliser les métadonnées existantes. Par exemple, dans les cas où un ensemble d'options existe déjà pour un certain concept (par exemple "sexe"), cet ensemble d'options pourrait être supprimé du fichier .json et toutes les références à son UID remplacées par l'ensemble d'options correspondant existant déjà dans la base de données. Le grand avantage de cette méthode (qui n'est pas limitée aux seuls cas où il y a un conflit d'importation directe) est d'éviter de créer des métadonnées dupliquées dans la base de données. Il y a des aspects essentiels à prendre en compte lors de ce type de modification :

* il nécessite une connaissance approfondie de la structure détaillée des métadonnées du DHIS2
* Cette approche ne fonctionne pas pour tous les types d'objets. En particulier, certains types d'objets ont des dépendances compliquées à résoudre de cette manière, par exemple en ce qui concerne les désagrégations.
* il sera compliqué de procéder aux futures mises à jour du package de configuration.

## Configuration supplémentaire { #additional-configuration } 

Une fois que toutes les métadonnées sont importées avec succès, des étapes doivent être mises en oeuvre avant que le module ne soit fonctionnel.

### Partage { #sharing } 

Tout d'abord, vous devrez utiliser la fonctionnalité *Partage* de DHIS2 pour configurer quels utilisateurs (groupes d'utilisateurs) doivent voir les métadonnées et les données associées au programme ainsi que qui peut enregistrer/saisir des données dans le programme. Par défaut, le partage a été configuré pour ce qui suit :

* Type d'entité suivie
* Programme
* Étapes du programme
* Tableaux de bord

Trois groupes d'utilisateurs sont inclus dans le package :

* COVID19 Accès
* COVID19 Administrateur
* COVID 19 Saisie de données

Les éléments suivants sont attribués par défaut à ces groupes d'utilisateurs

|Objet|Groupe d'utilisateurs|||
|--|--|--|--|
||_COVID19 access_|_COVID19 admin_|_COVID19 data capture_|
|_*Type d’entité suivie*_.|Métadonnées : peuvent être visualisées <br>Données : peuvent être visualisées|Métadonnées : peuvent être modifiées et visualisées <br>Données : peuvent être visualisées |Métadonnées : peuvent être visualisées <br>Données : peuvent être capturées et visualisées|
|_*Programme*_|Métadonnées : peuvent être visualisées <br>Données : peuvent être visualisées|Métadonnées : peuvent être modifiées et visualisées <br>Données : peuvent être visualisées |Métadonnées : peuvent être visualisées <br>Données : peuvent être capturées et visualisées|
|_*Étapes du programme*_|Métadonnées : peuvent être visualisées <br>Données : peuvent être visualisées|Métadonnées : peuvent être modifiées et visualisées <br>Données : peuvent être visualisées |Métadonnées : peuvent être visualisées <br>Données : peuvent être capturées et visualisées|
|_*Tableaux de bord*_.|Métadonnées : peuvent être visualisées <br>Données : peuvent être visualisées|Métadonnées : peuvent être modifiées et visualisées <br>Données : peuvent être visualisées |Métadonnées : peuvent être visualisées <br>Données : peuvent être visualisées|

You will want to assign your users to the appropriate user group based on their role within the system. You may want to enable sharing for other objects in the package depending on your set up. Refer to the [DHIS2 Documentation](https://docs.dhis2.org/en/use/user-guides/dhis-core-version-master/configuring-the-system/about-sharing-of-objects.html) for more information on configuring sharing.

### Rôles des utilisateurs { #user-roles } 

Les utilisateurs auront besoin de rôles utilisateur pour pouvoir utiliser les différentes applications du DHIS2. Les rôles minimums suivants sont recommandés :

1. Analyse des données Tracker : Il peut visualiser des analyses d'événements et accéder à des tableaux de bord, des rapports d'événements, un visualiseur d'événements, un visualiseur de données, des tableaux croisés dynamiques, des rapports et des cartes.
2. Saisie de données Tracker : possibilité d'ajouter des valeurs de données, de mettre à jour les entités suivies, de rechercher des entités suivies dans les unités d'organisation et d'accéder à l'application Saisie Tracker

Refer to the [DHIS2 Documentation](https://docs.dhis2.org) for more information on configuring user roles.

### Unités d’organisation { #organisation-units } 

Vous devez assigner le programme à des unités d'organisation au sein de votre propre hiérarchie afin de pouvoir le visualiser dans Saisie Tracker.

### Métadonnées dupliquées { #duplicated-metadata } 

**N.B.** : Cette section ne s'applique que si vous importez dans une base de données DHIS2 ayant déjà des méta-données. Si vous travaillez avec une nouvelle instance de DHIS2, veuillez ignorer cette section et aller à [Adapter le programme tracker] (#adapter-le-programme-de-suivi)".

Même lorsque les métadonnées sont importées avec succès sans aucun conflit d'importation, il peut y avoir des doublons dans les métadonnées - éléments de données, attributs d'entités suivies ou ensembles d'options qui existent déjà. Comme indiqué dans la section ci-dessus sur la résolution des conflits, il est important de garder à l'esprit que les décisions relatives à la modification des métadonnées dans le DHIS2 doivent également tenir compte d'autres documents et ressources associés de différentes manières aux métadonnées existantes et aux métadonnées importées par le biais du package de configuration. La résolution des doublons ne consiste donc pas seulement à "nettoyer la base de données", mais aussi à s'assurer que cela est fait sans, par exemple, briser le potentiel d'intégration avec d'autres systèmes, la possibilité d'utiliser du matériel de formation, la rupture des SOP, etc. Cela dépend beaucoup du contexte.

One important thing to keep in mind is that DHIS2 has tools that can hide some of the complexities of potential duplications in metadata. For example, where duplicate option sets exist, they can be hidden for groups of users through [sharing](https://docs.dhis2.org/en/use/user-guides/dhis-core-version-master/configuring-the-system/about-sharing-of-objects.html).

## Adaptation du programme tracker { #adapting-the-tracker-program } 

Une fois le programme importé, il est possible que vous souhaitiez y apporter certaines modifications. Voici quelques exemples d'adaptations locales que vous *pourrez* effectuer :

* Ajout de variables supplémentaires au formulaire.
* Adaptation des noms des éléments de données/options en fonction des usages au niveau national.
* Ajout des traductions aux variables et/ou au formulaire de saisie des données.
* Modification des indicateurs du programme en fonction des définitions de cas locales

Toutefois, il est fortement recommandé de faire preuve d'une grande prudence si vous décidez de modifier ou de supprimer l'un des formulaires/métadonnées inclus. Il y a donc un risque que des modifications brisent des fonctionnalités, par exemple les règles du programme et les indicateurs du programme.

