---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/master/src/developer/web-api/overview.md"
revision_date: '2023-02-09'
tags:
- Version Master de DHIS2 Central
- Développement
---

# Aperçu { #webapi } 

L'API Web est un composant qui permet aux systèmes externes d'accéder 
aux données stockées dans une instance DHIS2 et de les manipuler. Plus 
précisément, elle fournit une interface programmatique à un large éventail de 
données exposées et de méthodes de service pour des applications telles que des clients 
logiciels tiers, des portails web et des modules DHIS2 internes.

## Introduction { #webapi_introduction } 

L'API Web adhère à de nombreux principes du style 
architectural REST. Pour n'en citer que certains, importants :

1.  Les éléments fondamentaux sont appelés *ressources*. Une 
    ressource peut être tout ce qui est exposé sur le web, d'un document à un 
    processus d'entreprise - tout ce avec quoi un client peut vouloir interagir.
    The information aspects of a resource can be retrieved or exchanged
    through resource *representations*. A representation is a view of a
    resource's state at any given time. For instance, the *visualizations*
    resource in DHIS2 represents visualizations of aggregated data for
    a certain set of parameters. This resource can be retrieved in a
    variety of representation formats including JSON and CSV.
2.  All resources can be uniquely identified by a *URI* (also referred
    to as *URL*). All resources have a default representation. You can
    indicate that you are interested in a specific representation by
    supplying an *Accept* HTTP header, a file extension or a *format*
    query parameter. So in order to retrieve a CSV representation of
    an analytics data response you can supply an *Accept: application/csv* 
    header or append *.csv* or *?format=csv* to your request URL.
3.  Interactions with the API requires the correct use of HTTP *methods* or
    *verbs*. This implies that for a resource you must issue a *GET*
    request when you want to retrieve it, *POST* request when you want
    to create one, *PUT* when you want to update it and *DELETE* when
    you want to remove it.

## Authentication { #webapi_authentication } 

The DHIS2 Web API supports three protocols for authentication: 

- [Basic Authentication](#webapi_basic_authentication)
- [Personal Access Tokens (PAT)](#webapi_pat_authentication)
- [OAuth 2](#webapi_oauth2)

You can verify and get information about the currently authenticated 
user by making a GET request to the following URL:

    /api/33/me

And more information about authorities (and if a user has a certain
authority) by using the endpoints:

    /api/33/me/authorities
    /api/33/me/authorities/ALL

## Basic Authentication { #webapi_basic_authentication } 

L'API Web DHIS2 prend en charge *l'authentification de base*. L'authentification de base 
est une technique permettant aux clients d'envoyer des informations d'identification par HTTP à un 
serveur web. Techniquement parlant, le nom d'utilisateur est suivi de deux points et 
le mot de passe, encodé en Base64, est préfixé par Basic et fourni en tant que valeur 
de l'en-tête HTTP *Autorisation*. De manière plus formelle, il s'agit de : 

    Authorization: Basic base64encode(username:password)

La plupart des environnements de développement compatibles avec les réseaux prennent en charge 
l'authentification de base, comme *Apache HttpClient* et *Spring RestTemplate*. 
Il est important de noter que ce schéma d'authentification n'offre aucune sécurité 
puisque le nom d'utilisateur et le mot de passe sont envoyés en texte clair et peuvent être facilement 
observés par un pirate. L'utilisation de Basic n'est recommandée que si le serveur 
utilise SSL/TLS (HTTPS) pour crypter la communication avec les clients. Considérez qu'il 
s'agit d'une exigence impérative pour assurer des interactions sécurisées avec l'API 
Web.

## Authentification à deux facteurs { #webapi_2fa } 

DHIS2 prend en charge l'authentification à deux facteurs. Cette fonction peut être activée pour chaque utilisateur. 
Lorsque cette option est activée, les utilisateurs sont invités à saisir un code 2FA lorsqu'ils se connectent. Pour 
en savoir plus sur l'authentification à deux facteurs, cliquez ici (https : www.google.com/landing/2step/).

## Jeton d'accès personnel { #webapi_pat_authentication }
Les jetons d'accès personnels (PAT) sont une alternative à l'utilisation de mots de passe lors 
de l'authentification au système DHIS2 lorsque l'on utilise l'API.

Les jetons d'accès personnel peuvent être une alternative plus sécurisée à l'authentification 
de base HTTP et devraient être votre choix privilégié lorsque vous créez une nouvelle application, un script, etc.

L'authentification de base HTTP est considérée comme non sécurisée car, entre autres, 
elle envoie votre nom d'utilisateur et votre mot de passe de façon indiscrète. Il est possible qu'elle soit abandonnée dans les versions 
futures de DHIS2 ou qu'elle devienne facultative, ce qui signifie que l'authentification de base devra 
être explicitement activée dans la configuration.

#### Problèmes de sécurité majeurs ! { #important-security-concerns } 

Vos jetons hériteront automatiquement de toutes les permissions et autorisations dont dispose votre utilisateur. Il est donc extrêmement important de limiter l'accès que vous accordez à votre jeton en fonction de l'utilisation que vous comptez en faire, voir **Configurer votre jeton**.

**Si vous souhaitez que le jeton n'ait accès qu'à une partie restreinte et spécifique du serveur, il est plutôt recommandé de créer un nouvel utilisateur spécial auquel vous n'attribuerez que les rôles et autorisations auxquels vous souhaitez qu'il ait accès.**


### Creating a token { #creating-a-token } 
To create a new PAT, you have two choices:
* A. Create a token in the UI on your account's profile page.
* B. Create a token via the API.

### A. Création d'un jeton sur la page du compte { #a-creating-a-token-on-the-accounts-page } 
Connectez-vous avec votre nom d'utilisateur et votre mot de passe, allez sur votre page de profil 
(cliquez en haut à droite, et choisissez « Modifier le profil » dans le menu déroulant). 
Sur votre page de profil, choisissez « Jetons d'accès personnels » dans le 
menu à gauche. 
Vous devriez maintenant être sur la page « Gérer les jetons d'accès personnels » et voir le 
texte : « Vous n'avez pas de jetons d'accès personnels actifs ». 
Cliquez sur « Générer un nouveau jeton » pour créer un nouveau jeton.
Une fenêtre contextuelle « Générer un nouveau jeton » s'affiche et vous propose deux choix :

#### 1. Server/script context: { #1-serverscript-context } 
_"This type is used for integrations and scripts that won't be accessed by a browser"._

If you plan to use the token in an application, a script or similar, this
type should be your choice.

#### 2. Browser context: { #2-browser-context } 
_"This type us used for applications, like public portals, that will be accessed with a web browser"._

If you need to link to DHIS2 on a webpage, or e.g. embed in an iframe,
this is probably the type of token you want.


### Configuration de votre jeton { #configuring-your-token } 

Après avoir choisi le type de jeton que vous désirez, vous pouvez configurer différentes contraintes d'accès à 
votre jeton. Par contrainte, nous entendons la manière de limiter et de restreindre l'utilisation de votre jeton. 
Cela peut être d'une importance cruciale si vous envisagez d'utiliser le jeton dans un environnement public, 
par exemple sur un tableau de bord public d'un autre site, intégré dans une iframe. 
Étant donné que les jetons ont toujours les mêmes accès/autorisations que ceux dont dispose actuellement votre utilisateur, il convient d'être particulièrement 
vigilant si vous avez l'intention de les utiliser dans un environnement que vous ne contrôlez pas à 100 %.

**NB** : Si quelqu'un d'autre met la main sur votre jeton, il peut faire tout ce que votre utilisateur est capable de faire. 
Il n'est pas possible de faire la distinction entre les actions effectuées à l'aide du jeton et les autres actions
effectuées par votre utilisateur.

**Important** : Il est fortement conseillé de créer un utilisateur distinct et unique ayant uniquement les rôles/autorisations 
si vous envisagez d'utiliser les jetons PAT dans un environnement non sécurisé et/ou public,
par exemple, sur un PC ou un serveur que vous ne contrôlez pas à 100 %, ou « intégré » dans une page web sur un autre serveur.

#### The different constraint types are as follows: { #the-different-constraint-types-are-as-follows } 
* Expiry time
* Allowed UP addresses
* Allowed HTTP methods
* Allowed HTTP referrers

##### Expiry time { #expiry-time } 
La durée d'expiration définit simplement la durée pendant laquelle vous souhaitez que votre jeton soit utilisable, le délai par défaut étant de 30 
jours. Passé ce délai, le jeton renverra simplement un message 401 (non autorisé).
Vous pouvez définir le délai d'expiration que vous souhaitez, mais il est fortement conseillé de définir un délai d'expiration 
raisonnable pour votre cas d'utilisation.

#### Adresses IP autorisées { #allowed-ip-addresses } 
Il s'agit d'une liste d'adresses IP séparées par des virgules, à partir desquelles vous souhaitez limiter la provenance des requêtes de jetons.

 **Important** La validation de l'adresse IP repose sur l'en-tête X-Transféré-À, qui peut être usurpé. 
Pour des raisons de sécurité, assurez-vous qu'un équilibreur de charge ou un proxy inverse écrase cet en-tête.

#### Méthodes HTTP autorisées { #allowed-http-methods } 
Une liste de méthodes HTTP séparées par des virgules que vous souhaitez que votre jeton puisse utiliser.
Si vous n'avez besoin de votre jeton que pour consulter des données, et non pour les modifier ou les supprimer, la sélection de la méthode GET HTTP 
est judicieuse.

#### Références HTTP autorisées { #allowed-http-referrers } 
Le référent HTTP est un en-tête ajouté à la requête lorsque vous cliquez sur un lien, il indique le site/la page 
sur lequel/laquelle vous étiez lorsque vous avez cliqué sur le lien. 
Pour en savoir plus sur l'en-tête du référent HTTP, cliquez sur le lien suivant : https://en.wikipedia.org/wiki/HTTP_referer

Cela peut servir à limiter l'utilisation d'un jeton « public » intégré à une autre page sur un autre site. 
S'assurer que l'en-tête du référent correspond au nom d'hôte du site d'où le jeton doit provenir peut
éviter l'utilisation abusive du jeton, par exemple si quelqu'un le publie sur un forum public.

**Important** Ceci n'est pas une fonctionnalité de sécurité. L'en-tête `référence` peut être facilement usurpé. 
Ce paramètre est destiné à dissuader les développeurs tiers non autorisés à se connecter 
aux instances d'accès public.

#### Sauvegarder votre jeton: { #saving-your-token } 
Lorsque vous avez fini de configurer votre jeton, vous pouvez l'enregistrer en cliquant sur le bouton « Générer un nouveau jeton »
en bas à droite de la fenêtre contextuelle.
Le jeton sera alors sauvegardé et une clé secrète sera générée sur le serveur.
La nouvelle clé secrète sera affichée en bas de la liste des jetons PAT sur fond vert,
et le texte « Jeton nouvellement créé ».
La clé du jeton secret ressemble à ceci :
```
d2pat_5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ1151814092
```
**Important**: Cette clé de jeton secrète générée ne sera affichée qu'une seule fois. Il est donc important 
que vous la copiez maintenant et que vous la sauvegardiez en lieu sûr pour une utilisation ultérieure. 
La clé de jeton secrète sera hachée de manière sécurisée sur le serveur, et seul le hachage de cette 
clé sera enregistré dans la base de données ; ceci pour minimiser les risques relatifs à la sécurité s'il arrivait qu'une personne obtienne 
un accès non autorisé à la base de données, de la même manière que les mots de passe sont gérés.

### B. Creating a token via the API { #b-creating-a-token-via-the-api } 

Example of how to create a new Personal Access Token with the API:

```
POST https://play.dhis2.org/dev/api/apiToken
Content-Type: application/json
Authorization: Basic admin district

{}
```
**NB**: Remember the empty JSON body (`{}`) in the payload! 

This will return a response containing a token similar to this:
```json
{
  "httpStatus": "Created",
  "httpStatusCode": 201,
  "status": "OK",
  "response": {
     "responseType": "ApiTokenCreationResponse",
     "key": "d2pat_5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ1151814092",
     "uid": "jJYrtIVP7qU",
     "klass": "org.hisp.dhis.security.apikey.ApiToken",
     "errorReports": []
  }
}
```

**Important** : La clé symbolique n'apparaît qu'une seule fois dans cette réponse.
Vous devez la copier et l'enregistrer dans un endroit sûr pour pouvoir l'utiliser ultérieurement !

The token itself consists of three parts:
1. Prefix: (`d2pat_`) indicates what type of token this is.
2. Random bytes Base64 encoded: (`5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ`)
3. CRC32 checksum: (`1151814092`) the checksum part is padded with 0 so that it always stays ten characters long.


#### Configure your token via the API: { #configure-your-token-via-the-api } 
To change any of the constraints on your token, you can issue the following HTTP API request.

**NB**: Only the constraints are possible to modify after the token is created! 

```
PUT https://play.dhis2.org/dev/api/apiToken/jJYrtIVP7qU
Content-Type: application/json
Authorization: Basic admin district
```

```json
{
  "version": 1,
  "type": "PERSONAL_ACCESS_TOKEN",
  "expire": 163465349603200,
  "attributes": [
      {
        "type": "IpAllowedList",
        "allowedIps": ["192.168.0.1"]
      },
      {
        "type": "MethodAllowedList",
        "allowedMethods": ["GET"]
      }
  ]
}
```

### Using your Personal Access Token { #using-your-personal-access-token } 

To issue a request with your newly created token, use the Authorization header
accordingly.
The Authorization header format is:
```
Autorisation : ApiToken [YOUR_SECRET_API_TOKEN_KEY]
```
**Exemple**:
```
GET https://play.dhis2.org/dev/api/apiToken/jJYrtIVP7qU
Content-Type: application/json
Authorization: ApiToken d2pat_5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ1151814092
```


### Supprimer votre jeton d'accès personnel { #deleting-your-personal-access-token } 
You can delete your PATs either in the UI on your profile page where you created it,
or via the API like this:
```
DELETE https://play.dhis2.org/dev/api/apiToken/jJYrtIVP7qU
Content-Type: application/json
Authorization: ApiToken d2pat_5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ1151814092
```


## OAuth2 { #webapi_oauth2 } 

DHIS2 supporte le protocole d'authentification *OAuth2*. OAuth2 est une norme 
ouverte d'autorisation qui permet aux clients tiers de se 
connecter au nom d'un utilisateur DHIS2 et d'obtenir un *jeton porteur* réutilisable 
pour les demandes ultérieures à l'API Web. DHIS2 ne prend pas en charge les rôles 
OAuth2 à granularité fine, mais fournit aux applications un accès basé sur les rôles 
de l'utilisateur DHIS2.

Chaque client pour lequel vous souhaitez autoriser l'authentification OAuth 2 doit être
enregistré dans DHIS2. Pour ajouter un nouveau client OAuth2, allez dans `Applications > Paramètres > Clients OAuth2`
dans l'interface utilisateur, cliquez sur *Ajouter nouveau* et entrez le nom du client souhaité et les types de subventions.

#### Adding a client using the Web API { #adding-a-client-using-the-web-api } 

An OAuth2 client can be added through the Web API. As an example, we can
send a payload like this:

```json
{
  "name": "OAuth2 Demo Client",
  "cid": "demo",
  "secret": "1e6db50c-0fee-11e5-98d0-3c15c2c6caf6",
  "grantTypes": [
    "password",
    "refresh_token",
    "authorization_code"
  ],
  "redirectUris": [
    "http://www.example.org"
  ]
}
```

The payload can be sent with the following command:

```bash
SERVER="https://play.dhis2.org/dev"
curl -X POST -H "Content-Type: application/json" -d @client.json
  -u admin:district "$SERVER/api/oAuth2Clients"
```

We will use this client as the basis for our next grant type examples.

#### Grant type password { #webapi_oauth2_password } 

The simplest of all grant types is the *password* grant type. This
grant type is similar to basic authentication in the sense that it
requires the client to collect the user's username and password. As an
example we can use our demo server:

```bash
SERVER="https://play.dhis2.org/dev"
SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"

curl -X POST -H "Accept: application/json" -u demo:$SECRET "$SERVER/uaa/oauth/token"
  -d grant_type=password -d username=admin -d password=district
```

This will give you a response similar to this:

```json
{
  "expires_in": 43175,
  "scope": "ALL",
  "access_token": "07fc551c-806c-41a4-9a8c-10658bd15435",
  "refresh_token": "a4e4de45-4743-481d-9345-2cfe34732fcc",
  "token_type": "bearer"
}
```

For now, we will concentrate on the `access_token`, which is what we
will use as our authentication (bearer) token. As an example, we will get
all data elements using our token:

```bash
SERVER="https://play.dhis2.org/dev"
curl -H "Authorization: Bearer 07fc551c-806c-41a4-9a8c-10658bd15435" "$SERVER/api/33/dataElements.json"
```

#### Grant type refresh\_token { #webapi_refresh_token } 

In general the access tokens have limited validity. You can have a look
at the `expires_in` property of the response in the previous example
to understand when a token expires. To get a fresh `access_token` you
can make another round trip to the server and use `refresh_token`
which allows you to get an updated token without needing to ask for the
user credentials one more time.

```bash
SERVER="https://play.dhis2.org/dev"
SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"
REFRESH_TOKEN="a4e4de45-4743-481d-9345-2cfe34732fcc"

curl -X POST -H "Accept: application/json" -u demo:$SECRET "$SERVER/uaa/oauth/token"
  -d "grant_type=refresh_token" -d "refresh_token=$REFRESH_TOKEN"
```

The response will be exactly the same as when you get a token to start with.

#### Type de subvention code_d'autorisation { #webapi_authorization_code } 

Le type de subvention « code autorisé » est l'approche recommandée si vous ne souhaitez 
pas stocker les informations d'identification de l'utilisateur en externe. Elle permet au DHIS2 de collecter le 
nom d'utilisateur et le mot de passe directement auprès de l'utilisateur au lieu que le client 
les collecte et s'authentifie ensuite au nom de l'utilisateur. Veuillez noter 
que cette approche utilise la partie `redirectUris` de la charge utile du 
client.

Étape 1 : Visitez l'URL suivante à l'aide d'un navigateur web. Si vous avez plus d'un
URI de redirection, vous pouvez ajouter `&redirect_uri=http://www.example.org` 
à l'URL :

```bash
SERVER="https://play.dhis2.org/dev"
$SERVER/uaa/oauth/authorize?client_id=demo&response_type=code
```

Étape 2 : Une fois que l'utilisateur s'est connecté avec succès et a accepté votre accès client
il sera redirigé vers votre uri de redirection comme suit :

    http://www.example.org/?code=XYZ

Étape 3 : Cette étape est similaire à celle de l'octroi du mot de passe,
en utilisant le code fourni, nous allons maintenant demander un jeton d'accès :

```bash
SERVER="https://play.dhis2.org/dev"
SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"

curl -X POST -u demo:$SECRET -H "Accept: application/json" $SERVER/uaa/oauth/token
-d "grant_type=authorization_code" -d "code=XYZ"
```

## Error and info messages { #webapi_error_info_messages } 

The Web API uses a consistent format for all error/warning and
informational messages:

```json
{
  "httpStatus": "Forbidden",
  "message": "Vous n'avez pas la permission de lire ce type d'objet.",
  "httpStatusCode": 403,
  "status": "ERROR"
}
```

Here we can see from the message that the user tried to access a
resource I did not have access to. It uses the http status code 403, the
HTTP status message *forbidden* and a descriptive message.

Table: WebMessage properties

| Nom | Description |
|---|---|
| httpStatus | HTTP Status message for this response, see RFC 2616 (Section 10) for more information. |
| httpStatusCode | HTTP Status code for this response, see RFC 2616 (Section 10) for more information. |
| statut | DHIS2 status, possible values are *OK* &#124; *WARNING* &#124; *ERROR*, where `OK` means everything was successful, `ERROR` means that operation did not complete and `WARNING` means the operation was partially successful, if the message contains a `response` property, please look there for more information. |
| message | A user-friendly message telling whether the operation was a success or not. |
| devMessage | A more technical, developer-friendly message (not currently in use). |
| réponse | Extension point for future extensions of the `WebMessage` format. |

## Date and period format { #webapi_date_perid_format } 

Throughout the Web API, we refer to dates and periods. The date format
is:

    aaaa-MM-jj

For instance, if you want to express March 20, 2014, you must use
*2014-03-20*.

The period format is described in the following table (also available on
the API endpoint `/api/periodTypes`)

Table: Period format

| Intervale | Format | Exemple | Description |
|---|---|---|---|
| Jour | aaaaMMjj | 20040315 | March 15, 2004 |
| Semaine | yyyyWn | 2004W10 | Week 10 2004 |
| Week Wednesday | yyyyWedWn | 2015WedW5 | Week 5 with start Wednesday |
| Week Thursday | yyyyThuWn | 2015ThuW6 | Week 6 with start Thursday |
| Week Saturday | yyyySatWn | 2015SatW7 | Week 7 with start Saturday |
| Week Sunday | yyyySunWn | 2015SunW8 | Week 8 with start Sunday |
| Bi-week | yyyyBiWn | 2015BiW1 | Week 1-2 20015 |
| Mois | aaaaMM | 200403 | Mars 2004 |
| Bi-month | yyyyMMB | 200401B | January-February 2004 |
| Quarter | yyyyQn | 2004Q1 | January-March 2004 |
| Six-month | yyyySn | 2004S1 | January-June 2004 |
| Six-month April | yyyyAprilSn | 2004AprilS1 | April-September 2004 |
| Année | aaaa | 2004 | 2004 |
| Financial Year April | yyyyApril | 2004April | Apr 2004-Mar 2005 |
| Financial Year July | yyyyJuly | 2004July | July 2004-June 2005 |
| Financial Year Oct | yyyyOct | 2004Oct | Oct 2004-Sep 2005 |


### Relative Periods { #webapi_date_relative_period_values } 


In some parts of the API, like for the analytics resource, you can
utilize relative periods in addition to fixed periods (defined above).
The relative periods are relative to the current date and allow e.g.
for creating dynamic reports. The available relative period values are:

    THIS_WEEK, LAST_WEEK, LAST_4_WEEKS, LAST_12_WEEKS, LAST_52_WEEKS,
    THIS_MONTH, LAST_MONTH, THIS_BIMONTH, LAST_BIMONTH, THIS_QUARTER, LAST_QUARTER,
    THIS_SIX_MONTH, LAST_SIX_MONTH, MONTHS_THIS_YEAR, QUARTERS_THIS_YEAR,
    THIS_YEAR, MONTHS_LAST_YEAR, QUARTERS_LAST_YEAR, LAST_YEAR, LAST_5_YEARS, LAST_10_YEARS, LAST_10_FINANCIAL_YEARS, LAST_12_MONTHS, 
    LAST_3_MONTHS, LAST_6_BIMONTHS, LAST_4_QUARTERS, LAST_2_SIXMONTHS, THIS_FINANCIAL_YEAR,
    LAST_FINANCIAL_YEAR, LAST_5_FINANCIAL_YEARS

### Custom date periods { #webapi_date_custom_date_periods }

Analytics `query` resources support extra parameters to express periods.

Default `pe` dimension will fall back to:

- `eventDate` for `/analytics/events/query`
- `enrollmentDate` for `/analytics/enrollments/query`

Adding conditions on one or more date fields and combining them are allowed.

#### Usage of custom date periods { #usage-of-custom-date-periods } 

In resources supporting custom date periods, there are extra query parameters that will be combined to express conditions on the time dimension.

| custom date period | events query resource  | enrollment query resource |
|--------------------|------------------------|---------------------------|
| `eventDate`        | Hôpital public Londres                    | **Cliniques**: Clinique publique Alberta / Clinique publique Windsor ET                       |
| `enrollmentDate`   | Hôpital public Londres                    | Hôpital public Londres                       |
| `scheduledDate`    | Hôpital public Londres                    | **Cliniques**: Clinique publique Alberta / Clinique publique Windsor ET                       |
| `incidentDate`     | Hôpital public Londres                    | Hôpital public Londres                       |
| `lastUpdated`      | Hôpital public Londres                    | Hôpital public Londres                       |

Conditions can be expressed in the following form:

`analytics/events/query/...?...&eventDate=2021&...`

It's possible to combine more time fields in the same query:

`analytics/events/query/...?...&eventDate=2021&incidentDate=202102&...`

All of these conditions can be combined with `pe` dimension:

`analytics/events/query/...?...&dimension=pe:TODAY&enrollmentDate=2021&incidentDate=202102&...`

Supported formats are described in "date and period format" above. An extra format is provided to express a range of dates: `yyyyMMdd_yyyyMMdd` and `yyyy-MM-dd_yyyy-MM-dd`.

In the example bellow, the endpoint will return events that are scheduled to happen between 20210101 and 20210104:

`analytics/events/query/...?...&dimension=pe:TODAY&enrollmentDate=2021&incidentDate=202102&scheduledDate=20210101_20210104&...`


## Authorities { #authorities } 
System authority ids and names can be listed using:

    /api/authorities

It returns the following format:
```json
{
  "systemAuthorities": [
    {
      "id": "ALL",
      "name": "ALL"
    },
    {
      "id": "F_ACCEPT_DATA_LOWER_LEVELS",
      "name": "Accept data at lower levels"
    }
  ]
}
```

