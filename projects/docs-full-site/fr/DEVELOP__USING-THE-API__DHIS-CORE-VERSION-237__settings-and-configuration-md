---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.37/src/developer/web-api/settings-and-configuration.md"
revision_date: '2021-10-14'
tags:
- DHIS core version 2.37
- Développement
---

# Paramètres et configuration { #settings-and-configuration } 

## Paramètres du système { #webapi_system_settings } 

Vous pouvez manipuler les paramètres du système en interagissant avec la ressource
*systemSettings*. Un paramètre système est une simple paire clé-valeur,
où la clé et la valeur sont des chaînes de texte en clair. Pour enregistrer ou
mettre à jour un paramètre système, vous pouvez envoyer une requête *POST* à l'URL suivante :

    /api/33/systemSettings/my-key?value=my-val

Vous pouvez également soumettre la valeur du paramètre dans le corps de la requête,
où le type de contenu est défini sur "texte/clair". Par exemple, vous pouvez utiliser
curl comme suit :

```bash
curl "play.dhis2.org/demo/api/33/systemSettings/my-key" -d "My long value"
  -H "Content-Type: text/plain" -u admin:district
```

Pour définir les paramètres du système en bloc, vous pouvez envoyer un objet JSON avec une 
propriété et une valeur pour chaque paire clé-valeur de paramètre du système à l'aide d'une requête POST :

```json
{
  "notification de l'application clé" : "Bienvenue",
  "intro de l'application clé": "DHIS2",
  "pied de page de l'application clé" : "En savoir plus sur dhis2.org"
}
```

Les traductions pour les clés de paramétrage traduisibles peuvent être définies en spécifiant  le paramètre local  comme 
paramètre de requête et la valeur traduite qui peut être spécifiée 
soit comme paramètre de requête, soit dans la charge utile du corps. Voir un exemple d'URL :

    /api/33/systemSettings/<my-key>?locale=<my-locale>&value=<my-translated-value>

Vous devez remplacer my-key par votre clé réelle et my-val par votre valeur 
réelle. Pour récupérer la valeur d'une clé donnée (en JSON ou en texte brut)
vous pouvez envoyer une requête *GET* à l'URL suivante :

    /api/33/systemSettings/my-key

Alternativement, vous pouvez spécifier la clé en tant que paramètre de requête :

    /api/33/systemSettings?key=my-key

Vous pouvez récupérer des paramètres système spécifiques sous forme de JSON en répétant la clé
paramètre de la requête :

```bash
curl "play.dhis2.org/demo/api/33/systemSettings?key=keyApplicationNotification&key=keyApplicationIntro"
  -u admin:district
```

Vous pouvez récupérer tous les paramètres du système à l'aide d'une requête GET :

    /api/33/systemSettings

Pour récupérer une traduction spécifique pour une clé traduisible donnée, vous pouvez spécifier
un paramètre local comme paramètre de requête :

    /api/33/systemSettings/<my-key>?locale=<my-locale>

Si elle est présente, la traduction pour le paramètre local donné est renvoyée. Sinon, une valeur
est renvoyée. Si aucun paramètre local n'est spécifié pour la clé traduisible, le paramètre local par défaut de 
l'interface utilisateur est utilisé pour obtenir la traduction correcte. Si la traduction donnée n'est pas
présente, la valeur par défaut est renvoyée.

La priorité pour les clés traduisibles est la suivante :

 locale spécifiée > UI local par défaut de l'utilisateur > valeur par défaut

Pour supprimer un paramètre du système, vous pouvez envoyer une requête *DELETE* à l'URL
similaire à celle utilisée ci-dessus pour la récupération. Si une clé traduisible est
utilisée, toutes les traductions présentes seront également supprimées.

Pour supprimer uniquement une traduction spécifique d'une clé traduisible, il convient d'utiliser la même URL
que pour l'ajout d'une traduction et la valeur vide doit être
fournie :

    /api/33/systemSettings/<my-key>?locale=<my-locale>&value=

Les paramètres système disponibles sont énumérés ci-dessous.



Tableau : Paramètres du système

| Clé | Description | Traduisible |
|---|---|---|
| cléUiLocale | Paramètre local pour l'interface utilisateur | Non |
| cléDbLocale | Paramètre local de la base de données | Non |
| Propriété d'affichage de l'analyse clé | La propriété à afficher dans l'analyse. Par défaut : " nom " | Non |
| Séparateur de groupes de chiffres de l'analyse clé | Le séparateur utilisé pour séparer les groupes de chiffres | Non |
| type clé du domaine actuel | Pas encore en service | Non |
| présentation du tableau de bord clé du tracker | Used by tracker capture | Non |
| applicationTitle | The application title. Default: "DHIS2" | Oui |
| keyApplicationIntro | La présentation de l'application | Oui |
| Notification clé de l'application | Notification de l'application | Oui |
| keyApplicationFooter | Application left footer | Oui |
| keyApplicationRightFooter | Application right footer | Oui |
| keyFlag | Application flag | Non |
| keyFlagImage | Flag used in dashboard menu | Non |
| startModule | La page de démarrage de l'application. Par défaut :  " Intégration du-tableau de bord-de dhis-web  " | Non |
| factorDeviation | Facteur d'écart-type de l'analyse des données. Par défaut :"2d" | Non |
| keyEmailHostName | Email server hostname | Non |
| keyEmailPort | Email server port | Non |
| keyEmailTls | Use TLS. Default: "true" | Non |
| keyEmailSender | Email sender | Non |
| keyEmailUsername | Email server username | Non |
| keyEmailPassword | Email server password | Non |
| minPasswordLength | Minimum length of password | Non |
| maxPasswordLength | Maximum length of password | Non |
| keySmsSetting | Configuration de SMS | Non |
| keyCacheStrategy | Stratégie de mise en cache. Par défaut : " MIS EN CACHE_6H_DEMAIN " | Non |
| keyCacheability | PUBLIC ou PRIVÉ. Détermine si les serveurs proxy sont autorisés à mettre des données en cache ou non. | Non |
| phoneNumberAreaCode | Phonenumber area code | Non |
| multiOrganisationUnitForms | Permet d'activer les formulaires d'unités multi-organisations. Par défaut :  " faux  " | Non |
| keyConfig || Non |
| keyAccountRecovery | Active la récupération des comptes d'utilisateurs. Par défaut : " faux " | Non |
| keyLockMultipleFailedLogins | Enable locking access after multiple failed logins | Non |
| googleAnalyticsUA | Google Analytic UA key for tracking site-usage | Non |
| credentialsExpires | Require user account password change. Default: "0" (Never) | Non |
| credentialsExpiryAlert | Enable alert when credentials are close to expiration date | Non |
| accountExpiryAlert | Send an alert email to users whose account is about to expire due to expiry date being set. Default: "false" | Non |
| accountExpiresInDays | Number of days the account expiry alert should be send in advance of the actual expiry. Default: 7 | Non |
| keySelfRegistrationNoRecaptcha | Do not require recaptcha for self registration. Default: "false" | Non |
| recaptchaSecret | Google API recaptcha secret. Default: dhis2 play instance API secret, but this will only works on you local instance and not in production. | Non |
| recaptchaSite | Google API recaptcha site. Default: dhis2 play instance API site, but this will only works on you local instance and not in production. | Non |
| keyCanGrantOwnUserAuthorityGroups | Allow users to grant own user roles. Default: "false" | Non |
| keySqlViewMaxLimit | Max limit for SQL view | Non |
| keyRespectMetaDataStartEndDatesInAnalyticsTableExport | When "true", analytics will skip data not within category option's start and end dates. Default: "false" | Non |
| keySkipDataTypeValidationInAnalyticsTableExport | Skips data type validation in analytics table export | Non |
| keyCustomLoginPageLogo | Logo for custom login page | Non |
| keyCustomTopMenuLogo | Logo for custom top menu | Non |
| keyCacheAnalyticsDataYearThreshold | Analytics data older than this value (in years) will always be cached. "0" disabled this setting. Default: 0 | Non |
| keyCacheAnalyticsDataYearThreshold | Analytics data older than this value (in years) will always be cached. "0" disabled this setting. Default: 0 | Non |
| analyticsFinancialYearStart | Set financial year start. Default: October | Non |
| keyIgnoreAnalyticsApprovalYearThreshold | "0" check approval for all data. "-1" disable approval checking. "1" or higher checks approval for all data that is newer than "1" year. | Non |
| keyAnalyticsMaxLimit | Maximum number of analytics recors. Default: "50000" | Non |
| keyAnalyticsMaintenanceMode | Put analytics in maintenance mode. Default: "false" | Non |
| keyDatabaseServerCpus | Number of database server CPUs. Default: "0" (Automatic) | Non |
| keyLastSuccessfulAnalyticsTablesRuntime | Keeps timestamp of last successful analytics tables run | Non |
| keyLastSuccessfulLatestAnalyticsPartitionRuntime | Keeps timestamp of last successful latest analytics partition run | Non |
| keyLastMonitoringRun | Keeps timestamp of last monitoring run | Non |
| keyLastSuccessfulDataSynch | Keeps timestamp of last successful data values synchronization | Non |
| keyLastSuccessfulEventsDataSynch | Keeps timestamp of last successful Event programs data synchronization | Non |
| keyLastCompleteDataSetRegistrationSyncSuccess | Keeps timestamp of last successful completeness synchronization | Non |
| syncSkipSyncForDataChangedBefore | Specifies timestamp used to skip synchronization of all the data changed before this point in time | Non |
| keyLastSuccessfulAnalyticsTablesUpdate | Keeps timestamp of last successful analytics tables update | Non |
| keyLastSuccessfulLatestAnalyticsPartitionUpdate | Keeps timestamp of last successful latest analytics partition update | Non |
| keyLastSuccessfulResourceTablesUpdate | Keeps timestamp of last successful resource tables update | Non |
| keyLastSuccessfulSystemMonitoringPush | Keeps timestamp of last successful system monitoring push | Non |
| keyLastSuccessfulMonitoring | Keeps timestamp of last successful monitoring | Non |
| keyNextAnalyticsTableUpdate | Keeps timestamp of next analytics table update | Non |
| helpPageLink | Link to help page. Default: "[https://dhis2.github.io/dhis2-docs/master/en/user/html/dhis2_user_manual_en.html](http://dhis2.github.io/dhis2-docs/master/en/user/html/dhis2_user_manual_en.html) | Non |
| keyAcceptanceRequiredForApproval | Acceptance required before approval. Default: "false" | Non |
| keySystemNotificationsEmail | Where to email system notifications | Non |
| keyAnalysisRelativePeriod | Default relative period for analysis. Default: "LAST_12_MONTHS" | Non |
| keyRequireAddToView | Require authority to add to view object lists. Default: "false" | Non |
| keyAllowObjectAssignment | Allow assigning object to related objects during add or update. Default: "false" | Non |
| keyUseCustomLogoFront | Enables the usage of a custom logo on the front page. Default: "false" | Non |
| keyUseCustomLogoBanner | Enables the usage of a custom banner on the website. Default: "false" | Non |
| keyDataImportStrictPeriods || Non |
| keyDataImportStrictPeriods | Require periods to match period type of data set. Default: "false" | Non |
| keyDataImportStrictDataElements | Require data elements to be part of data set. Default: "false" | Non |
| keyDataImportStrictCategoryOptionCombos | Require category option combos to match category combo of data element. Default: "false" | Non |
| keyDataImportStrictOrganisationUnits | Require organisation units to match assignment of data set. Default: "false" | Non |
| keyDataImportStrictAttributeOptionsCombos | Require attribute option combis to match category combo of data set. Default: "false" | Non |
| keyDataImportRequireCategoryOptionCombo | Require category option combo to be specified. Default: "false" | Non |
| keyDataImportRequireAttributeOptionCombo | Require attribute option combo to be specified. Default: "false" | Non |
| keyCustomJs | Custom JavaScript to be used on the website | Non |
| keyCustomCss | Custom CSS to be used on the website | Non |
| keyCalendar | The calendar type. Default: "iso8601". | Non |
| keyDateFormat | The format in which dates should be displayed. Default: "yyyy-MM-dd". | Non |
| keyStyle | The style used on the DHIS2 webpages. Default: "light_blue/light_blue.css". | Non |
| keyRemoteInstanceUrl | Url used to connect to remote instance | Non |
| keyRemoteInstanceUsername | Username used to connect to remote DHIS2 instance | Non |
| keyRemoteInstancePassword | Password used to connect to remote DHIS2 instance | Non |
| keyGoogleMapsApiKey | Google Maps API key | Non |
| keyGoogleCloudApiKey | Google Cloud API key | Non |
| keyLastMetaDataSyncSuccess | Keeps timestamp of last successful metadata synchronization | Non |
| keyVersionEnabled | Enables metadata versioning | Non |
| keyMetadataFailedVersion | Keeps details about failed metadata version sync | Non |
| keyMetadataLastFailedTime | Keeps timestamp of last metadata synchronization failure | Non |
| keyLastSuccessfulScheduledProgramNotifications || Non |
| keyLastSuccessfulScheduledDataSetNotifications || Non |
| keyRemoteMetadataVersion | Details about metadata version of remote instance | Non |
| keySystemMetadataVersion | Details about metadata version of the system | Non |
| keyStopMetadataSync | Flag to stop metadata synchronization | Non |
| keyFileResourceRetentionStrategy | Determines how long file resources associated with deleted or updated values are kept. NONE, THREE_MONTHS, ONE_YEAR, or FOREVER. | Non |
| syncMaxRemoteServerAvailabilityCheckAttempts | Specifies how many times the availability of remote server will be checked before synchronization jobs fail. | Non |
| syncMaxAttempts | Specifies max attempts for synchronization jobs | Non |
| syncDelayBetweenRemoteServerAvailabilityCheckAttempts | Delay between remote server availability checks | Non |
| lastSuccessfulDataStatistics | Keeps timestamp of last successful data analytics | Non |
| keyHideDailyPeriods | Not in use | Non |
| keyHideWeeklyPeriods || Non |
| keyHideBiWeeklyPeriods | Boolean flag used to hide/show bi-weekly periods | Non |
| keyHideMonthlyPeriods || Non |
| keyHideBiMonthlyPeriods || Non |
| keyGatherAnalyticalObjectStatisticsInDashboardViews | Whether to gather analytical statistics on objects when they are viewed within a dashboard | Non |
| keyCountPassiveDashboardViewsInUsageAnalytics | Counts "passive" dashboard views (not selecting a particular dashboard) in usage analytics | Non |
| keyDashboardContextMenuItemSwitchViewType | Allow users to switch dashboard favorites' view type | Oui |
| keyDashboardContextMenuItemOpenInRelevantApp | Allow users to open dashboard favorites in relevant apps | Oui |
| keyDashboardContextMenuItemShowInterpretationsAndDetails | Allow users to show dashboard favorites' interpretations and details | Oui |
| keyDashboardContextMenuItemViewFullscreen | Allow users to view dashboard favorites in fullscreen | Oui |


## Paramètres de l'utilisateur { #webapi_user_settings } 

You can manipulate user settings by interacting with the *userSettings*
resource. A user setting is a simple key-value pair, where both the key
and the value are plain text strings. The user setting will be linked to
the user who is authenticated for the Web API request. To return a list
of all user settings, you can send a *GET* request to the following URL:

    /api/33/userSettings

User settings not set by the user, will fall back to the equivalent
system setting. To only return the values set explicitly by the user,
you can append ?useFallback=false to the above URL, like this:

    /api/33/userSettings?useFallback=false

To save or update a setting for the currently authenticated user you can
make a *POST* request to the following URL:

    /api/33/userSettings/my-key?value=my-val

You can specify the user for which to save the setting explicitly with
this syntax:

    /api/33/userSettings/my-key?user=username&value=my-val

Vous pouvez également soumettre la valeur du paramètre dans le corps de la requête,
où le type de contenu est défini sur "texte/clair". Par exemple, vous pouvez utiliser
curl comme suit :

```bash
curl "https://play.dhis2.org/demo/api/33/userSettings/my-key" -d "My long value"
  -H "Content-Type: text/plain" -u admin:district
```

As an example, to set the UI locale of the current user to French you
can use the following command.

```bash
curl "https://play.dhis2.org/demo/api/33/userSettings/keyUiLocale?value=fr"
  -X POST -u admin:district
```

You should replace my-key with your real key and my-val with your real
value. To retrieve the value for a given key in plain text you can make
a *GET* request to the following URL:

    /api/33/userSettings/my-key

To delete a user setting, you can make a *DELETE* request to the URL
similar to the one used above for retrieval.

Les paramètres système disponibles sont énumérés ci-dessous.



Table: User settings

| Clé | Options | Description |
|---|---|---|
| keyStyle | light_blue/light_blue.css &#124; green/green.css &#124; vietnam/vietnam.css | User interface stylesheet. |
| keyMessageEmailNotification | faux &#124; vrai | Whether to send email notifications. |
| keyMessageSmsNotification | faux &#124; vrai | Whether to send SMS notifications. |
| cléUiLocale | Valeur locale | User interface locale. |
| cléDbLocale | Valeur locale | Database content locale. |
| Propriété d'affichage de l'analyse clé | nom &#124; Nom court | Property to display for metadata in analysis apps. |
| type clé du domaine actuel | all &#124; aggregate &#124; tracker | Data element domain type to display in lists. |
| keyAutoSaveCaseEntryForm | faux &#124; vrai | Save case entry forms periodically. |
| keyAutoSaveTrackedEntityForm | faux &#124; vrai | Save person registration forms periodically. |
| keyAutoSaveDataEntryForm | faux &#124; vrai | Save aggregate data entry forms periodically. |
| présentation du tableau de bord clé du tracker | faux &#124; vrai | Tracker dasboard layout. |

## Configuration { #webapi_configuration } 

To access configuration you can interact with the *configuration*
resource. You can get XML and JSON responses through the *Accept* header
or by using the .json or .xml extensions. You can *GET* all properties
of the configuration from:

    /api/33/configuration

You can send *GET* and *POST* requests to the following specific
resources:

    GET /api/33/configuration/systemId

    GET POST DELETE /api/33/configuration/feedbackRecipients

    GET POST DELETE /api/33/configuration/offlineOrganisationUnitLevel

    GET POST /api/33/configuration/infrastructuralDataElements

    GET POST /api/33/configuration/infrastructuralIndicators

    GET POST /api/33/configuration/infrastructuralPeriodType

    GET POST DELETE /api/33/configuration/selfRegistrationRole

    GET POST DELETE /api/33/configuration/selfRegistrationOrgUnit

For the CORS whitelist configuration you can make a POST request with an
array of URLs to whitelist as payload using "application/json" as
content-type, for instance:

```json
["www.google.com", "www.dhis2.org", "www.who.int"]
```

    GET POST /api/33/configuration/corsWhitelist

For POST requests, the configuration value should be sent as the request
payload as text. The following table shows appropriate configuration
values for each property.



Table: Configuration values

| Configuration property | Valeur |
|---|---|
| feedbackRecipients | User group ID |
| offlineOrganisationUnitLevel | Organisation unit level ID |
| infrastructuralDataElements | Data element group ID |
| infrastructuralIndicators | Indicator group ID |
| infrastructuralPeriodType | Period type name (e.g. "Monthly") |
| selfRegistrationRole | User role ID |
| selfRegistrationOrgUnit | Organisation unit ID |
| smtpPassword | SMTP email server password |
| remoteServerUrl | URL to remote server |
| remoteServerUsername | Username for remote server authentication |
| remoteServerPassword | Password for remote server authentication |
| corsWhitelist | JSON list of URLs |

As an example, to set the feedback recipients user group you can invoke
the following curl command:

```bash
curl "localhost/api/33/configuration/feedbackRecipients" -d "wl5cDMuUhmF"
  -H "Content-Type:text/plain"-u admin:district
```

## Read-only configuration { #webapi_readonly_configuration_interface } 

To access all configuration settings and properties you can use the read-only configuration endpoint. This will provide read-only access to *UserSettings, SystemSettings and DHIS2 server configurations* You can get XML and JSON responses through the *Accept* header. You can *GET* all settings from:

    /api/33/configuration/settings

You can get filtered settings based on setting type:

    GET /api/33/configuration/settings/filter?type=USER_SETTING

    GET /api/33/configuration/settings/filter?type=CONFIGURATION

More than one type can be provided:

    GET /api/33/configuration/settings/filter?type=USER_SETTING&type=SYSTEM_SETTING



Table: SettingType values

| Valeur | Description |
|---|---|
| USER_SETTING | To get user settings |
| SYSTEM_SETTING | To get system settings |
| CONFIGURATION | To get DHIS server settings |

> **Note**
>
> Fields which are confidential will be provided in the output but without values.

## Jetons { #webapi_tokens } 

The *tokens* resource provides access tokens to various services.

### Google Service Account { #webapi_tokens_google_service_account } 

You can retrieve a Google service account OAuth 2.0 access token with a
GET request to the following resource.

    GET /api/tokens/google

The token will be valid for a certain amount of time, after which
another token must be requested from this resource. The response
contains a cache control header which matches the token expiration. The
response will contain the following properties in JSON format.



Table: Token response

| Propriété | Description |
|---|---|
| access_token | The OAuth 2.0 access token to be used when authentication against Google services. |
| expires_in | The number of seconds until the access token expires, typically 3600 seconds (1 hour). |
| client_id | The Google service account client id. |

This assumes that a Google service account has been set up and configured for DHIS2. Please consult the installation guide for more info.

## Static content { #webapi_static_content } 

The *staticContent* resource allows you to upload and retrieve custom
logos used in DHIS2. The resource lets the user upload a file with an
associated key, which can later be retrieved using the key. Only PNG
files are supported and can only be uploaded to the `logo_banner` and
`logo_front` keys.

    /api/33/staticContent



Table: Static content keys

| Clé | Description |
|---|---|
| logo_banner | Logo in the application top menu on the left side. |
| logo_front | Logo on the login-page above the login form. |

To upload a file, send the file with a *POST* request to:

    POST /api/33/staticContent/<key>

Example request to upload logo.png to the `logo_front` key:

```bash
curl -F "file=@logo.png;type=image/png" "https://play.dhis2.org/demo/api/33/staticContent/logo_front"
  -X POST -H "Content-Type: multipart/form-data" -u admin:district
```

Uploading multiple files with the same key will overwrite the existing
file. This way, retrieving a file for any given key will only return the
latest file uploaded.

To retrieve a logo, you can *GET* the following:

    GET /api/33/staticContent/<key>

Example of requests to retrieve the file stored for `logo_front`:

* Adding "Accept: text/html" to the HTTP header.*__ In this case, the endpoint will return a default image if nothing is defined. Will return an image stream when a custom or default image is found.

```bash
curl "https://play.dhis2.org/demo/api/33/staticContent/logo_front"
  -H "Accept: text/html" -L -u admin:district
```

* Adding "Accept: application/json" to the HTTP header.*__ With this parameter set, the endpoint will never return a default image if the custom logo is not found. Instead, an error message will be returned. When the custom image is found this endpoint will return a JSON response containing the path/URL to the respective image.

```bash
curl "https://play.dhis2.org/demo/api/33/staticContent/logo_front"
  -H "Accept: application/json" -L -u admin:district
```

Success and error messages will look like this:

```json
{
  "images": {
    "png": "http://localhost:8080/dhis/api/staticContent/logo_front"
  }
}
```

```json
{
  "httpStatus": "Non trouvé",
  "httpStatusCode": 404,
  "statut": "ERREUR",
  "message": "Aucun fichier personnalisé n'a été trouvé."
}
```

To use custom logos, you need to enable the corresponding system
settings by setting it to *true*. If the corresponding setting is false,
the default logo will be served.

## UI customization { #webapi_ui_customization } 

To customize the UI of the DHIS2 application you can insert custom
JavaScript and CSS styles through the *files* resource.

```
POST GET DELETE /api/33/files/script
POST GET DELETE /api/33/files/style
```

The JavaScript and CSS content inserted through this resource will be loaded by the
DHIS2 web application. This can be particularly useful in certain situations:

  - Overriding the CSS styles of the DHIS2 application, such as the
    login page or main page.

  - Defining JavaScript functions which are common to several custom
    data entry forms and HTML-based reports.

  - Including CSS styles which are used in custom data entry forms and
    HTML-based reports.

### Javascript { #webapi_customization_javascript } 

To insert Javascript from a file called *script.js* you can interact
with the *files/script* resource with a POST request:

```bash
curl --data-binary @script.js "localhost/api/33/files/script"
  -H "Content-Type:application/javascript" -u admin:district
```

Note that we use the `--data-binary` option to preserve formatting of the
file content. You can fetch the JavaScript content with a GET request:

    /api/33/files/script

Pour supprimer le contenu JavaScript, vous pouvez utiliser une requête de type SUPPRIMER (DELETE).

### CSS { #webapi_customization_css } 

To insert CSS from a file called *style.css* you can interact with the
*files/style* resource with a POST-request:

```bash
curl --data-binary @style.css "localhost/api/33/files/style"
  -H "Content-Type:text/css" -u admin:district
```

Vous pouvez récupérer le contenu CSS à l'aide d'une requête GET :

    /api/33/files/style

Pour supprimer le contenu JavaScript, vous pouvez utiliser une requête de type SUPPRIMER (DELETE).

