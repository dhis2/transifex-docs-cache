---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.41/src/developer/web-api/synchronization.md"
revision_date: '2024-02-09'
tags:
- DHIS Version 2.41
- Développement
---

# Synchronization { #webapi_synchronization }

This section covers pull and push of data and metadata.

## Data value push { #webapi_sync_data_push }

To initiate a data value push to a remote server one must first configure the
URL and credentials for the relevant server from System settings >
Synchronization, then make a POST request to the following resource:

    /api/33/synchronization/dataPush

## Metadata pull { #webapi_sync_metadata_pull }

To initiate a metadata pull from a remote JSON document you can make a
POST request with a *url* as request payload to the following resource:

    /api/33/synchronization/metadataPull

> **Remarque**
>
> L'URL fournie sera vérifiée par rapport à la propriété de configuration `system.remote_servers_allowed` dans le fichier `dhis.conf`.
> Si l'URL de base n'est pas l'un des serveurs configurés autorisés, l'opération ne sera pas autorisée. Voir l'exemple d'échec ci-dessous.  
> Quelques exemples où le jeu de configuration est `system.remote_servers_allowed=https://server1.org/,https://server2.org/`
> - fournir `https://server1.org/path/to/resource` -> l'opération sera acceptée
> - fournir `https://server2.org/resource/path` -> l'opération sera acceptée
> - fournir `https://oldserver.org/resource/path` -> l'opération sera rejetée
>
Exemple de réponse en cas d'échec

```json
 {
  "httpStatus": "Conflict",
  "httpStatusCode": 409,
  "status": "ERROR",
  "message": "Provided URL is not in the remote servers allowed list",
  "errorCode": "E1004"
}
```

## Availability check { #webapi_sync_availability_check }

To check the availability of the remote data server and verify user
credentials you can make a GET request to the following resource:

    /api/33/synchronization/availability

