---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/master/src/developer/web-api/tracker-old.md"
revision_date: '2024-05-30'
tags:
- Développement
- Version Master de DHIS2 Central
---

# Tracker (deprecated APIs) { #webapi_deprecated_tracker }

> **Caution**
>
> Tracker has been re-implemented in DHIS2 2.36. The new endpoints are documented at
> [Tracker](#webapi_tracker).
>
> Endpoints
>
> * `GET/POST/PUT/DELETE /api/trackedEntityInstance`
> * `GET/POST/PUT/DELETE /api/enrollments`
> * `GET/POST/PUT/DELETE /api/events`
> * `GET/POST/PUT/DELETE /api/relationships`
>
> have been removed in version **42**!
>
> We also removed the ability to sync Tracker data via [metadata sync](#metadata_sync).
>
> * If you plan to use the tracker endpoints use the new endpoints described in
>   [Tracker](#webapi_tracker)
> * If you are still using the deprecated tracker endpoints in production, please migrate over to the
>   new endpoints. [Migrating to new tracker endpoints](#webapi_tracker_migration) should help you
>   get started. Reach out on the [community of practice](https://community.dhis2.org) if you need
>   further assistance.

## Migration vers de nouveaux points d'extrémité du Tracker { #webapi_tracker_migration }

Les sections suivantes montrent les principales différences entre les points d'extrémité obsolètes.

* `GET/POST/PUT/DELETE /api/trackedEntityInstance`
* `GET/POST/PUT/DELETE /api/enrollments`
* `GET/POST/PUT/DELETE /api/events`
* `GET/POST/PUT/DELETE /api/relationships`

et ceux introduits nouvellement.

* `POST /api/tracker`
* `GET  /api/tracker/trackedEntities`
* `GET  /api/tracker/enrollments`
* `GET  /api/tracker/events`
* `GET  /api/tracker/relationships`

### Noms de propriétés { #webapi_tracker_migration_names }

Les noms des propriétés d'API ont été modifiés afin qu'ils soient cohérents pour tous les points d'extrémité. Le tableau suivant énumère les anciens et les nouveaux noms de propriétés.

|Objet Tracker|Avant|Maintenant|
|---|---|---|
|**Attribut**|`created` (créé)<br>`lastUpdated` (dernière mise à jour)|`createdAt` (créé à) <br>`updatedAt` (mis à jour à)|
|**Valeur de données**|`created`<br>`lastUpdated`<br>`createByUserInfo` (créé avec les informations d'utilisateur)<br>`lastUpdatedByUserInfo` (dernière mise à jour avec les informations d'utilisateur)|`createdAt`<br>`updatedAt`<br>`createdBy` (créé par)<br>`updatedBy` (mis à jour par)|
|**Inscription**|`created`<br>`createdAtClient`<br>`lastUpdated`<br>`lastUpdatedAtClient`<br>`trackedEntityInstance`<br>`enrollmentDate`<br>`incidentDate`<br>`completedDate`<br>`createByUserInfo`<br>`lastUpdatedByUserInfo`|`createdAt`<br>`createdAtClient`<br>`updatedAt`<br>`updatedAtClient`<br>`trackedEntity`<br>`enrolledAt`<br>`occurredAt`<br>`completedAt`<br>`createdBy`<br>`updatedBy`|
|**Manifestation**|`trackedEntityInstance`<br>`eventDate`<br>`dueDate`<br>`created`<br>`createdAtClient`<br>`lastUpdated`<br>`lastUpdatedAtClient`<br>`completedDate`<br>`createByUserInfo`<br>`lastUpdatedByUserInfo`<br>`assignedUser`*|`trackedEntity`<br>`occurredAt`<br>`scheduledAt`<br>`createdAt`<br>`createdAtClient`<br>`updatedAt`<br>`updatedAtClient`<br>`completedAt`<br>`createdBy`<br>`updatedBy`<br>`assignedUser`*|
|**Remarque**|`storedDate`<br>`lastUpdatedBy`|`storedAt`<br>`createdBy`|
|**Propriétaire du programme**|`ownerOrgUnit`<br>`trackedEntityInstance`|`orgUnit`<br>`trackedEntity`|
|**Élément de relation**|`trackedEntityInstance.trackedEntityInstance`<br>`enrollment.enrollment`<br>`event.event`|`trackedEntity`<br>`enrollment`<br>`event`|
|**Relation**|`created` (créé)<br>`lastUpdated` (dernière mise à jour)|`createdAt` (créé à) <br>`updatedAt` (mis à jour à)|
|**Entité suivie**|`trackedEntityInstance`<br>`created`<br>`createdAtClient`<br>`lastUpdated`<br>`lastUpdatedAtClient`<br>`createByUserInfo`<br>`lastUpdatedByUserInfo`|`trackedEntity`<br>`createdAt`<br>`createdAtClient`<br>`updatedAt`<br>`updatedAtClient`<br>`createdBy`<br>`updatedBy`|

> **Remarque**
>
> La propriété `assignedUser` (utilisateur assigné) était auparavant une chaîne de caractères et est maintenant un objet de la forme suivante (type `User`) :
> ```json
> {
> "assignedUser" : {
> "uid" : "ABCDEF12345",
> "username" : "username",
> "firstName" : "John",
> "nom de famille" : "Doe"
> }
> }
> ```

### Point-virgule comme séparateur pour les identifiants (UID) { #semicolon-as-separator-for-identifiers-uid } 

Fields or query parameters accepting multiple values like UIDs are now consistently separated by
comma instead of semicolon. This is to ensure UIDs are consistently separated by comma across all
DHIS2 endpoints.

Les champs suivants sont concernés

* `event.attributeCategoryOptions` (ainsi qu'un événement renvoyé dans le cadre d'une relation
`from`/`to`)

### Journal des modifications (changelog) de l'importation Tracker (`POST`) { #tracker-import-changelog-post } 

Les précédents points d'extrémité de l'importation Tracker

* `POST/PUT/DELETE /api/trackedEntityInstance`
* `POST/PUT/DELETE /api/enrollments`
* `POST/PUT/DELETE /api/events`
* `POST/PUT/DELETE /api/relationships`

sont remplacés par le nouveau point d'extrémité

* `POST /api/tracker`

[Importation Tracker] (https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/tracker.html#webapi_nti_import) décrit comment utiliser ce nouveau point d'extrémité.

### Journal des modifications de l'exportation Tracker (`GET`) { #tracker-export-changelog-get } 

En plus des noms modifiés indiqués dans [Noms de propriétés](#webapi_tracker_migration_names), certains paramètres de requête ont également été modifiés.

Les tableaux suivants énumèrent les différences entre les anciens et les nouveaux paramètres de requête pour les points d'extrémité `GET`.

#### Modifications apportées aux paramètres de requête pour `GET /api/tracker/trackedEntities` { #request-parameter-changes-for-get-apitrackertrackedentities } 

|Avant|Maintenant|
|---|---|
|`assignedUser` (utilisateur attribué)|`assignedUsers`<br>Les valeurs sont désormais séparées par une virgule au lieu d'un point-virgule.|
|`attachment`|Supprimé|
|`attribut`|Supprimé - utiliser `filter` à la place|
|`eventStartDate`<br>`eventEndDate`|`eventOccurredAfter`<br>`eventOccurredBefore`|
|`includeAllAttributes` (inclure tous les attributs)|Supprimé|
|`lastUpdatedStartDate`<br>`lastUpdatedEndDate`<br>`lastUpdatedDuration`|`updatedAfter`<br>`updatedBefore`<br>`updatedWithin`|
|`ouMode`|`orgUnitMode`|
|`uo`|`orgUnits`<br>Les valeurs sont désormais séparées par une virgule et non par un point-virgule.|
|`programEnrollmentStartDate`<br>`programEnrollmentEndDate`|`enrollmentEnrolledAfter`<br>`enrollmentEnrolledBefore`|
|`programIncidentStartDate`<br>`programIncidentEndDate`|`enrollmentOccurredAfter`<br>`enrollmentOccurredBefore`|
|`programStartDate`<br>`programEndDate`|Supprimé - obsolète, voir <br><ul> <li> `enrollmentEnrolledAfter`</li><li> `enrollmentEnrolledBefore`</li></ul>|
|`programStatus` (statut de programme)|`enrollmentStatus`|
|`requête`|Supprimé - utiliser `filter` à la place|
|`skipMeta` (ignorer les métadonnées)|Supprimé|
|`skipPaging` (ignorer la pagination)|`paging`<br>C'est l'inverse, donc `paging=false` remplace `skipPaging=true`.|
|`trackedEntityInstance`|`trackedEntities`<br>Les valeurs sont désormais séparées par une virgule et non par un point-virgule.|

#### Modifications apportées aux paramètres de requête pour `GET /api/tracker/enrollments` { #request-parameter-changes-for-get-apitrackerenrollments }

|Avant|Maintenant|
|---|---|
|`inscription`|`enrollments`<br>Les valeurs sont désormais séparées par une virgule et non par un point-virgule.|
|`lastUpdated`<br>`lastUpdatedDuration`|`updatedAfter`<br>`updatedWithin`|
|`ouMode`|`orgUnitMode`|
|`uo`|`orgUnits`<br>Les valeurs sont désormais séparées par une virgule et non par un point-virgule.|
|`programStartDate`<br>`programEndDate`|`enrolledAfter`<br>`enrolledBefore`|
|`programStatus` (statut de programme)|`statut`|
|`skipPaging` (ignorer la pagination)|`paging`<br>C'est l'inverse, donc `paging=false` remplace `skipPaging=true`.|
|`trackedEntityInstance`|`trackedEntity` (entité suivie)|

#### Modifications apportées aux paramètres de requête pour `GET /api/tracker/events` { #request-parameter-changes-for-get-apitrackerevents }

|Avant|Maintenant|
|---|---|
|`assignedUser` (utilisateur assigné)|`assignedUsers`<br>Les valeurs sont désormais séparées par une virgule au lieu d'un point-virgule.|
|`attachment`|Supprimé|
|`attributeCc`|`attributeCategoryCombo`|
|`attributeCos`|`attributeCategoryOptions`<br>Les valeurs sont désormais séparées par une virgule et non par un point-virgule.|
|`dueDateStart`<br>`dueDateEnd`|`scheduledAfter`<br>`scheduledBefore`|
|`événement`|`events`<br>Les valeurs sont désormais séparées par une virgule et non par un point-virgule.|
|`lastUpdatedStartDate`<br>`lastUpdatedEndDate`<br>`lastUpdatedDuration`|`updatedAfter`<br>`updatedBefore`<br>`updatedWithin`|
|`dernière mise à jour`|Supprimé - obsolète, voir : <br><ul><li>`updatedAfter`</li><li> `updatedBefore`</li></ul>|
|`ouMode`|`orgUnitMode`|
|`programStatus` (statut de programme)|`enrollmentStatus`|
|`skipEventId` (ignorer l'identifiant de l'élément)|Supprimé|
|`skipMeta` (ignorer les métadonnées)|Supprimé|
|`skipPaging` (ignorer la pagination)|`paging`<br>C'est l'inverse, donc `paging=false` remplace `skipPaging=true`.|
|`startDate`<br>`endDate`|`occurredAfter`<br>`occurredBefore`|
|`startDate`<br>`endDate`|`occurredAfter`<br>`occurredBefore`|
|`trackedEntityInstance`|`trackedEntity` (entité suivie)|

#### Modifications apportées aux paramètres de requête pour `GET /api/tracker/relationships` { #request-parameter-changes-for-get-apitrackerrelationships }

|Avant|Maintenant|
|---|---|
|`skipPaging` (ignorer la pagination)|`paging`<br>C'est l'inverse, donc `paging=false` remplace `skipPaging=true`.|
|`tei`|`trackedEntity` (entité suivie)|

## API Web du Tracker { #webapi_tracker_api }

L'API Web du Tracker est constitué de 3 points d'extrémité qui ont un support CRUD complet (créer, lire, mettre à jour, supprimer). Les 3 points d'extrémité sont `/api/trackedEntityInstances`, `/api/enrollments` et `/api/events` et ils prennent en charge les instances d'entités suivies, les inscriptions et les événements.

### Gestion des instances d'entités suivies { #webapi_tracked_entity_instance_management }

Les instances d'entités suivies bénéficient d'une prise en charge CRUD complète dans l'API. Avec l'API d'inscription, la plupart des opérations nécessaires pour travailler avec les instances d'entités suivies et les programmes sont prises en charge.

    /api/33/trackedEntityInstances

#### Création d'une nouvelle instance d'entité suivie { #webapi_creating_tei }

Pour créer une nouvelle personne dans le système, vous devez utiliser la ressource *trackedEntityInstances* (instances d'entités suivies). Un modèle de charge est présenté ci-dessous :

```json
{
  "trackedEntity": "tracked-entity-id",
  "orgUnit": "org-unit-id",
  "geometry": "<Geo JSON>",
  "attributes": [{
    "attribute": "attribute-id",
    "value": "attribute-value"
  }]
}
```

Le champ "geometry" accepte un objet GeoJson, dont le type doit correspondre au featureType (type de fonctionnalité) du TrackedEntityType (type d'entité suivie). Voici un exemple d'objet GeoJson :

```json
{
  "type": "Point",
  "coordinates": [1, 1]
}
```

Le champ "coordinates" a été introduit dans la version 2.29 et accepte comme valeur une coordonnée ou un polygone.

Pour obtenir les ID de `relationship` et `attributes`, vous pouvez consulter respectivement les ressources `relationshipTypes` et `trackedEntityAttributes`.
Pour créer une instance d'entité suivie, vous devez utiliser la méthode HTTP *POST*.
Vous pouvez envoyer la charge à l'URL suivante :

    /api/trackedEntityInstances

Par exemple, créons une nouvelle instance pour une entité suivie de personne et spécifions ses attributs 'prénom' et 'nom' :

```json
{
  "trackedEntity": "nEenWmSyUEp",
  "orgUnit": "DiszpKrYNg8",
  "attributes": [
    {
      "attribute": "w75KJ2mc4zz",
      "value": "Joe"
    },
    {
      "attribute": "zDhUuAYrxNC",
      "value": "Smith"
    }
  ]
}
```

Pour envoyer ces données au serveur, vous pouvez utiliser la commande cURL comme suit :

```bash
curl -d @tei.json "https://play.dhis2.org/demo/api/trackedEntityInstances" -X POST
  -H "Content-Type: application/json" -u admin:district
```

Pour créer plusieurs instances à l'aide d'une seule requête, vous pouvez envelopper la charge dans un tableau extérieur comme ceci et effectuer une requête POST à la même ressource comme ci-dessus :[]()

```json
{
  "trackedEntityInstances": [
    {
      "trackedEntity": "nEenWmSyUEp",
      "orgUnit": "DiszpKrYNg8",
      "attributes": [
        {
          "attribute": "w75KJ2mc4zz",
          "value": "Joe"
        },
        {
          "attribute": "zDhUuAYrxNC",
          "value": "Smith"
        }
      ]
    },
    {
      "trackedEntity": "nEenWmSyUEp",
      "orgUnit": "DiszpKrYNg8",
      "attributes": [
        {
          "attribute": "w75KJ2mc4zz",
          "value": "Jennifer"
        },
        {
          "attribute": "zDhUuAYrxNC",
          "value": "Johnson"
        }
      ]
    }
  ]
}
```

Le système ne permet pas la création d'une instance d'entité suivie (ainsi que l'inscription et l'événement) avec un UID déjà utilisé dans le système. Cela signifie que les UID ne peuvent pas être réutilisés.

#### Mise à jour d'une instance d'entité suivie { #webapi_updating_tei }

Pour la mise à jour d'une instance d'entité suivie, la charge est identique à celle de la section précédente. La différence est que vous devez utiliser la méthode HTTP *PUT* pour la requête lors de l'envoi de la charge. Vous devrez également ajouter l'identifiant de la personne à la ressource *trackedEntityInstances* dans l'URL comme suit, où `<tracked-entity-instance-identifier>` doit être remplacé par l'identifiant de l'instance d'entité suivie :

    /api/trackedEntityInstances/<tracked-entity-instance-id>

La charge doit contenir tous les attributs et relations, même ceux qui n'ont pas été modifiés. Les attributs ou les relations qui étaient présents auparavant et qui ne sont plus présents dans la charge actuelle seront supprimés du système. Cela signifie que si des attributs/relations sont vides dans la charge actuelle, tous les attributs/relations existants seront supprimés du système. Depuis la version 2.31, il est possible d'ignorer les attributs/relations vides dans la charge en cours d'utilisation. Vous pouvez définir le paramètre de requête `ignoreEmptyCollection` sur `true` si vous ne voulez pas envoyer des attributs ou des relations et que vous ne voulez pas non plus qu'ils soient supprimés du système.

Il n'est pas autorisé de mettre à jour une instance d'entité suivie déjà supprimée. Il n'est pas non plus autorisé de marquer une instance d'entité suivie comme supprimée via une requête de mise à jour. Les mêmes règles s'appliquent aux inscriptions et aux événements.

#### Suppression d'une instance d'entité suivie { #webapi_deleting_tei }

Pour supprimer une instance d'entité suivie, envoyez une requête à l'URL qui identifie cette instance d'entité suivie avec la méthode *DELETE*. L'URL est la même que celle utilisée plus haut pour la mise à jour.

#### Création et inscription des instances d'entités suivies { #webapi_create_enroll_tei }

Il est également possible de créer (et de mettre à jour) une instance d'entité suivie et de l'inscrire en même temps à un programme

```json
{
  "trackedEntity": "tracked-entity-id",
  "orgUnit": "org-unit-id",
  "attributes": [{
    "attribute": "attribute-id",
    "value": "attribute-value"
  }],
  "enrollments": [{
    "orgUnit": "org-unit-id",
    "program": "program-id",
    "enrollmentDate": "2013-09-17",
    "incidentDate": "2013-09-17"
   }, {
    "orgUnit": "org-unit-id",
    "program": "program-id",
    "enrollmentDate": "2013-09-17",
    "incidentDate": "2013-09-17"
   }]
}
```

Vous l'enverrez au serveur comme vous le feriez normalement lors de la création ou de la mise à jour d'une nouvelle instance d'entité suivie.

```bash
curl -X POST -d @tei.json -H "Content-Type: application/json"
  -u user:pass "http://server/api/33/trackedEntityInstances"
```

#### Exemple complet de charge comprenant : l'instance d'entité suivie, l'inscription et l'événement. { #webapi_create_enroll_tei_create_event }

Il est également possible de créer (et de mettre à jour) une instance d'entité suivie, de l'inscrire en même temps à un programme et de créer un événement.

```json
{
  "trackedEntityType": "nEenWmSyUEp",
  "orgUnit": "DiszpKrYNg8",
  "attributes": [
    {
      "attribute": "w75KJ2mc4zz",
      "value": "Joe"
    },
    {
      "attribute": "zDhUuAYrxNC",
      "value": "Rufus"
    },
    {
     "attribute":"cejWyOfXge6",
     "value":"Male"
    }
  ],
  "enrollments":[
    {
      "orgUnit":"DiszpKrYNg8",
      "program":"ur1Edk5Oe2n",
      "enrollmentDate":"2017-09-15",
      "incidentDate":"2017-09-15",
      "events":[
        {
          "program":"ur1Edk5Oe2n",
          "orgUnit":"DiszpKrYNg8",
          "eventDate":"2017-10-17",
          "status":"COMPLETED",
          "storedBy":"admin",
          "programStage":"EPEcjy3FWmI",
          "coordinate": {
            "latitude":"59.8",
            "longitude":"10.9"
          },
          "dataValues": [
            {
              "dataElement":"qrur9Dvnyt5",
              "value":"22"
            },
            {
              "dataElement":"oZg33kd9taw",
              "value":"Male"
            }
         ]
      },
      {
         "program":"ur1Edk5Oe2n",
         "orgUnit":"DiszpKrYNg8",
         "eventDate":"2017-10-17",
         "status":"COMPLETED",
         "storedBy":"admin",
         "programStage":"EPEcjy3FWmI",
         "coordinate": {
           "latitude":"59.8",
           "longitude":"10.9"
         },
         "dataValues":[
           {
             "dataElement":"qrur9Dvnyt5",
             "value":"26"
           },
           {
             "dataElement":"oZg33kd9taw",
             "value":"Female"
           }
         ]
       }
     ]
    }
  ]  
}
```

Vous l'enverrez au serveur comme vous le feriez normalement lors de la création ou de la mise à jour d'une nouvelle instance d'entité suivie.

```bash
curl -X POST -d @tei.json -H "Content-Type: application/json"
  -u user:pass "http://server/api/33/trackedEntityInstances"
```

#### Attributs d'instances d'entités suivies générés { #webapi_generate_tei_attributes }

Les attributs d'instances d'entités suivies dont les valeurs uniques sont générées automatiquement ont trois points d'extrémité qui sont utilisés par les applications. Ces points d'extrémité sont tous utilisés pour générer et réserver des valeurs.

Dans la version 2.29, nous avons introduit TextPattern pour définir et générer ces modèles. Tous les modèles existants seront convertis en modèles TextPattern valides lors de la mise à jour vers la version 2.29.

> **Remarque**
>
> À partir de la version 2.29, tous ces points d'extrémité vous demanderont d'inclure toutes les 
> variables rapportées par le point d'extrémité `requiredValues` et qui sont listées comme
> obligatoires. Les modèles existants, composés uniquement de `#`, seront mis à jour
> vers la nouvelle syntaxe TextPattern `RANDOM(<old-pattern>)`. Le > segment RANDOM
du TextPattern n'est pas une variable obligatoire, donc ce   > point d'extrémité fonctionnera comme auparavant pour les modèles définis avant la version 2.29.

##### Recherche des valeurs obligatoires { #finding-required-values } 

Un TextPattern peut contenir des variables qui changent en fonction de différents facteurs. Certains de ces facteurs sont inconnus du serveur. Pour cela, les valeurs de ces variables doivent être fournies lors de la génération et de la réservation des valeurs.

Cet point d'extrémité va renvoyer un plan de valeurs obligatoires et optionnelles, que le serveur va intégrer dans le TextPattern lorsqu'il génère de nouvelles valeurs. Les variables obligatoires doivent être fournies pour la génération, mais les variables optionnelles ne doivent être fournies que si vous savez ce que vous faites.

    GET /api/33/trackedEntityAttributes/Gs1ICEQTPlG/requiredValues

```json
{
  "REQUIRED": [
    "ORG_UNIT_CODE"
  ],
  "OPTIONAL": [
    "RANDOM"
  ]
}
```

##### Point d'extrémité de de génération de valeur { #webapi_generate_values }

Les applications web en ligne et les autres clients qui souhaitent générer une valeur qui sera utilisée immédiatement peuvent utiliser le point d'extrémité de génération simple. Ce point d'extrémité génère une valeur dont l'unicité est garantie au moment de la génération. La valeur ne sera pas non plus réservée. Depuis la version 2.29, ce point d'extrémité réserve également la valeur générée pendant 3 jours.

Si votre TextPattern comprend des valeurs obligatoires, vous pouvez les utiliser comme paramètres dans l'exemple ci-dessous :

Le délai d'expiration peut également être modifié au moment de la génération, en ajoutant l'option `?expiration=<number-of-days>` à la requête.

    GET /api/33/trackedEntityAttributes/Gs1ICEQTPlG/generate?ORG_UNIT_CODE=OSLO

```json
{
  "ownerObject": "TRACKEDENTITYATTRIBUTE",
  "ownerUid": "Gs1ICEQTPlG",
  "key": "RANDOM(X)-OSL",
  "value": "C-OSL",
  "created": "2018-03-02T12:01:36.680",
  "expiryDate": "2018-03-05T12:01:36.678"
}
```

##### Point d'extrémité de génération et de réservation de valeur { #webapi_generate_reserve_values }

Le point d'extrémité de génération et de réservation est utilisé par les clients hors ligne qui ont besoin d'enregistrer des entités suivies avec des identifiants uniques. Ils réservent un certain nombre d'identifiants uniques que ce dispositif utilisera ensuite lors de l'enregistrement de nouvelles instances d'entités suivies. Une requête est envoyée à ce point d'extrémité afin de récupérer un certain nombre de valeurs réservées pour les instances d'entités suivies. Un paramètre facultatif, "numberToReserve", indique le nombre d'identifiants à générer (par défaut, ce paramètre est défini sur 1).

Si votre TextPattern comprend des valeurs obligatoires, vous pouvez les utiliser comme paramètres dans l'exemple ci-dessous :

Comme pour le point d'extrémité de génération, ce point d'extrémité peut également spécifier le délai d'expiration de la même manière. En ajoutant `?expiration=<number-of-days>`, vous pouvez remplacer le délai par défaut de 60 jours.

    GET /api/33/trackedEntityAttributes/Gs1ICEQTPlG/generateAndReserve?numberToReserve=3&ORG_UNIT_CODE=OSLO

```json
[
  {
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "B-OSL",
    "created": "2018-03-02T13:22:35.175",
    "expiryDate": "2018-05-01T13:22:35.174"
  },
  {
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "Q-OSL",
    "created": "2018-03-02T13:22:35.175",
    "expiryDate": "2018-05-01T13:22:35.174"
  },
  {
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "S-OSL",
    "created": "2018-03-02T13:22:35.175",
    "expiryDate": "2018-05-01T13:22:35.174"
  }
]
```

##### Valeurs réservées { #reserved-values } 

Les valeurs réservées ne sont actuellement pas accessibles via l'API, mais elles sont renvoyées par les points d'extrémité `generate` (génération) et `generate And Reserve` (génération et réservation). Le tableau suivant explique les propriétés de l'objet de valeur réservée :

#####



Tableau : Valeurs réservées

| Propriété | Description ; |
|---|---|
| ownerObject  | Le type de métadonnées référencé lors de la génération et de la réservation de la valeur. Actuellement, seul TRACKEDENTITYATTRIBUTE (attribut d'entité suivie) est pris en charge. |
| ownerUid | L'uid de l'objet de métadonnées référencé lors de la génération et de la réservation de la valeur. |
| clé | Une valeur partiellement générée où les segments générés ne sont pas encore ajoutés. |
| valeur | La valeur réservée. C'est la valeur que vous envoyez au serveur lorsque vous stockez des données. |
| créés | Date et heure à laquelle la réservation a été effectuée |
| expiryDate | Date et heure à partir de laquelle la réservation ne sera plus valable. |

Les réservations expirées sont supprimées quotidiennement. Si un modèle change, les valeurs déjà réservées seront acceptées lors du stockage des données, même si elles ne correspondent pas au nouveau modèle, tant que la réservation n'a pas expiré.

#### Attributs d'image { #image-attributes } 

Travailler avec des attributs d'image ressemble beaucoup à travailler avec des valeurs de données de fichier. La valeur d'un attribut de type image est l'identifiant de la ressource de fichier associée. Une requête GET au point d'extrémité `/api/trackedEntityInstances/<entityId>/<attributeId>/image` renverra l'image proprement dite. Les paramètres facultatifs height (hauteur) et width (largeur) peuvent être utilisés pour spécifier les dimensions de l'image.

```bash
curl "http://server/api/33/trackedEntityInstances/ZRyCnJ1qUXS/zDhUuAYrxNC/image?height=200&width=200"
  > image.jpg
```

L'API prend également en charge un paramètre *dimension*. Il peut prendre trois valeurs possibles (attention aux lettres majuscules) : `SMALL` (254x254), `MEDIUM` (512x512), `LARGE` (1024x1024) ou `ORIGINAL`. Les attributs de type d'image seront stockés dans des tailles pré-générées et seront fournis par requête en fonction de la valeur du paramètre `dimension`.

```bash
curl "http://server/api/33/trackedEntityInstances/ZRyCnJ1qUXS/zDhUuAYrxNC/image?dimension=MEDIUM"
```

#### Attributs de fichier { #file-attributes } 

Travailler avec les attributs de fichier ressemble beaucoup à travailler avec les valeurs de données d'image. La valeur d'un attribut de type fichier est l'identifiant de la ressource de fichier associée. Une requête GET à l'adresse
`/api/trackedEntityInstances/<entityId>/<attributeId>/file` renvoie le contenu du fichier.

```bash
curl "http://server/api/trackedEntityInstances/ZRyCnJ1qUXS/zDhUuAYrxNC/file
```

#### Requête pour des instances d'entité suivie { #webapi_tracked_entity_instance_query }

Pour rechercher des instances d'entités suivies, vous pouvez interagir avec la ressource `/api/trackedEntityInstances`.

    /api/33/trackedEntityInstances

##### Syntaxe de la requête { #webapi_tei_query_request_syntax }



Tableau : Paramètres de requête pour les instances d'entités suivies

| Paramètre de requête | Description ; |
|---|---|
| filtre | Attributs à utiliser comme filtre pour la requête. Le paramètre peut être répété autant de fois que nécessaire. Les filtres peuvent être appliqués à une dimension selon le format <attribute-id\>:<operator\>:<filter\>[ :<operator\>:<filter\>]. Les valeurs du filtre sont insensibles à la casse et peuvent être répétées avec l'opérateur autant de fois que nécessaire. Les opérateurs peuvent être EQ | GT | GE | LT | LE | NE | LIKE | IN. |
| ou | Identifiants des unités d'organisation, séparés par des " ;". |
| ouMode (Mode d'unité d'organisation) | Le mode de sélection des unités d'organisation. les différentes options sont SÉLECTIONNÉES | SUBORDONNÉES | DÉSCENDANTS | ACCESSIBLES | SAISIE | TOUTES. Par défaut, le mode est défini sur SÉLECTIONNÉES, et cela ne concerne que les unités d'organisation sélectionnées. Voir le tableau ci-dessous pour les explications. |
| programme | Identifiant du programme. Il détermine le programme auquel les instances doivent être inscrites. |
| programStatus (statut de programme) | Statut de l'instance pour le programme donné. Peut être ACTIF | TERMINÉ | ANNULÉ. |
| Suivi | Statut du suivi de l'instance pour le programme donné. Peut être vrai, faux ou omis. |
| programStartDate | Date de début de l'inscription au programme donné pour l'instance d'entité suivie. |
| programEndDate | Date de fin de l'inscription au programme pour l'instance d'entité suivie. |
| Entité suivie | Identifiant de l'entité suivie ; il restreint les instances au type d'instance suivie donné. |
| page | Il s'agit du numéro de page. La page par défaut est 1. |
| taille de la page | La taille de la page. La taille par défaut est de 50 lignes par page. |
| totalPages (pages totales) | Indique s'il faut inclure le nombre total de pages dans la réponse de pagination (ce qui implique un temps de réponse plus long). |
| skipPaging | Indique si la pagination doit être ignorée et si toutes les lignes doivent être renvoyées. |
| lastUpdatedStartDate | Filtre pour les TEI qui ont été mises à jour après cette date ; ne peut être utilisé avec *lastUpdatedDuration*. |
| lastUpdatedEndDate | Filtre pour les TEI qui ont été mises à jour jusqu'à cette date ; ne peut être utilisé avec *lastUpdatedDuration*. |
| lastUpdatedDuration (durée de la dernière mise à jour) | Ce paramètre inclut uniquement les éléments qui ont été mis à jour pendant la durée spécifiée. Le format est jj-hh-mm-ss, où  "j" = jours, "h" = heures, "m" = minutes et "s" = secondes. Il ne peut pas être utilisé avec *lastUpdatedStartDate* et/ou *lastUpdatedEndDate*. |
| Mode d'utilisateur assigné | Restreint le résultat à la TEI dont les événements sont attribués en fonction du mode de sélection de l'utilisateur. Il peut s'a qui peut être CURRENT | PROVIDED | NONE | ANY (ACTUEL | FOURNI). Voir le tableau ci-dessous "Modes de sélection de l'utilisateur" pour les explications. |
| assignedUser (Utilisateur assigné) | Permet de filtrer le résultat de manière à obtenir un ensemble limité de TEI avec des événements attribués aux UID donnés, en utilisant ceci : *assignedUser=id1;id2*. Ce paramètre ne sera pris en compte que si le assignedUserMode est PROVIDED ou null. L'API va générer une erreur si, par exemple, assignedUserMode=CURRENT et assignedUser=someId |
| trackedEntityInstance | Filtre le résultat de manière à obtenir un ensemble limité de TEI qui utilisent des uids d'instances d'entités suivies explicites. Vous pouvez le faire en utilisant ceci : *trackedEntityInstance=id1;id2*. Ce paramètre créera, au minimum, la limite externe des résultats, en constituant la liste de toutes les TEI à l'aide des uids fournis. Si d'autres paramètres/filtres de ce tableau sont utilisés, ils limiteront davantage les résultats à partir de la limite externe explicite. |
| includeDeleted | Indique s'il faut inclure ou non les TEI supprimées de manière réversible. La valeur par défaut est "false". |
| potentialDuplicate (doublon potentiel) | Il est possible de filtrer le résultat en supposant qu'une TEI soit un doublon potentiel. true: renvoie les TEI marqués comme doublons potentiels. false: renvoie les TEI NON marqués comme doublons potentiels. En cas d'omission, nous ne vérifions pas si une TEI est un doublon potentiel ou pas.|

Les modes de sélection d'unités d'organisation disponibles sont expliqués dans le tableau suivant.



Tableau : Modes de sélection des unités d'organisation

| Mode | Description ; |
|---|---|
| SELECTED | Unités d'organisation définies dans la requête. |
| CHILDREN | Unités d'organisation sélectionnées et leurs subordonnées directs, c'est-à-dire les unités d'organisation au niveau inférieur. |
| DESCENDANTS | Unités d'organisation sélectionnées et tous leurs subordonnées, c'est-à-dire toutes les unités d'organisation qui leur sont inférieures dans la hiérarchie. |
| ACCESSIBLE | Techniquement, il s'agit ici de toutes les unités d'organisation de recherche présentes dans le Tracker de l'utilisateur. De façon pratique, si un utilisateur n'a pas d'unités d'organisation de recherche, le système utilise par défaut son champs de saisie de données. Étant donné que le champ de saisie est obligatoire, nous nous assurons que l'utilisateur en dispose toujours d'au moins un. |
| CAPTURE | Il s'agit ici des unités d'organisation de saisie de données associées à l'utilisateur actuel et toutes leurs subordonnées, c'est-à-dire toutes les unités d'organisation qui leur sont inférieures dans la hiérarchie. |
| ALL | Le terme "ALL" fait logiquement référence à toutes les unités d'organisation disponibles dans le système et concerne les superutilisateurs. Pour les autres utilisateurs, "ALL" correspond aux unités d'organisation accessibles. |

Les modes d'utilisateur assigné disponibles sont expliqués dans le tableau suivant.



Tableau : Modes d'utilisateur assigné

| Mode | Description ; |
|---|---|
| ACTUEL | Inclut les événements attribués à l’utilisateur actuellement connecté. |
| FOURNI | Inclut les événements attribués à l’utilisateur fourni dans la requête. |
| AUCUN | Inclut uniquement les événements non attribués. |
| TOUT | Inclut tous les événements attribués, peu importe à qui ils sont attribués. |

La requête n'est pas sensible à la casse. Les règles suivantes s'appliquent aux paramètres de la requête.

  - Au moins une unité d'organisation doit être spécifiée à l'aide de l'attribut *ou*.
    (un ou plusieurs), ou *ouMode=ALL* doit être spécifié.

  - Un seul des paramètres *program* et *trackedEntity* peut être
    spécifié (zéro ou un).

  - Si *programStatus* est spécifié, alors *program* doit également être
    spécifié.

  - Si *followUp* est spécifié, alors *program* doit également être spécifié.

  - Si *programStartDate* ou *programEndDate* est spécifié, alors
    *program* doit également être spécifié.

  - Les éléments du filtre ne peuvent être spécifiés qu'une seule fois.

Une requête pour toutes les instances associées à une unité d'organisation spécifique peut ressembler à ceci :

    /api/33/trackedEntityInstances.json?ou=DiszpKrYNg8

Pour lancer une requête sur des instances à l'aide d'un attribut avec filtre et d'un attribut sans filtre, avec une unité d'organisation en utilisant le mode de requête de l'unité d'organisation subordonnée, utilisez ceci :

    /api/33/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A
      &filter=AMpUYgxuCaE&ou=DiszpKrYNg8;yMCshbaVExv

Une requête pour les instances où un attribut est inclus dans la réponse et où un attribut est utilisé comme filtre :

    /api/33/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A
      &filter=AMpUYgxuCaE:LIKE:Road&ou=DiszpKrYNg8

Une requête dans laquelle plusieurs opérandes et filtres sont spécifiés pour un élément de filtre :

    api/33/trackedEntityInstances.json?ou=DiszpKrYNg8&program=ur1Edk5Oe2n
      &filter=lw1SqmMlnfh:GT:150:LT:190

Pour lancer une requête sur un attribut en utilisant plusieurs valeurs dans un filtre *IN* :

    api/33/trackedEntityInstances.json?ou=DiszpKrYNg8
      &filter=dv3nChNSIxy:IN:Scott;Jimmy;Santiago

Pour limiter la réponse aux instances qui font partie d'un programme spécifique, vous pouvez inclure un paramètre de requête de programme :

    api/33/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&ou=O6uvpzGd5pu
      &ouMode=DESCENDANTS&program=ur1Edk5Oe2n

Pour spécifier les dates d'inscription au programme dans la requête :

    api/33/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&ou=O6uvpzGd5pu
      &program=ur1Edk5Oe2n&programStartDate=2013-01-01&programEndDate=2013-09-01

Pour limiter la réponse aux instances d'une entité suivie spécifique, vous pouvez inclure un paramètre de requête d'entité suivie :

    api/33/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&ou=O6uvpzGd5pu
      &ouMode=DESCENDANTS&trackedEntity=cyl5vuJ5ETQ

Par défaut, les instances sont renvoyées dans des pages de taille 50. Pour modifier cela, vous pouvez utiliser les paramètres de requête de page et de taille de page (pageSize) :

    api/33/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&ou=O6uvpzGd5pu
      &ouMode=DESCENDANTS&page=2&pageSize=3

Vous pouvez utiliser une gamme d'opérateurs pour effectuer le filtrage :



Tableau : Opérateurs de filtre

| Opérateur | Description ; |
|---|---|
| EQ | Egal à |
| GT | Supérieur à |
| GE | Supérieur ou égal à |
| LT | Inférieur à |
| LE | inférieur ou égal à |
| NE | Pas égal à |
| LIKE | Free text match (Contains) |
| SW | Commence par |
| EW | Se termine par |
| IN | Égal à l'une des multiples valeurs séparées par ";" |

##### Format de la réponse { #webapi_tei_query_response_format }

Cette ressource prend en charge les représentations JSON, JSONP, XLS et CSV.

  - json (application/json)

  - jsonp (application/javascript)

  - xml (application/xml)

La réponse en JSON/XML est au format objet et peut ressembler à ce qui suit. Le filtrage des champs est possible, donc si vous voulez un affichage complet, vous pouvez ajouter `fields=*` à la requête :

```json
{
  "trackedEntityInstances": [
    {
      "lastUpdated": "2014-03-28 12:27:52.399",
      "trackedEntity": "cyl5vuJ5ETQ",
      "created": "2014-03-26 15:40:19.997",
      "orgUnit": "ueuQlqb8ccl",
      "trackedEntityInstance": "tphfdyIiVL6",
      "relationships": [],
      "attributes": [
        {
          "displayName": "Address",
          "attribute": "AMpUYgxuCaE",
          "type": "string",
          "value": "2033 Akasia St"
        },
        {
          "displayName": "TB number",
          "attribute": "ruQQnf6rswq",
          "type": "string",
          "value": "1Z 989 408 56 9356 521 9"
        },
        {
          "displayName": "Weight in kg",
          "attribute": "OvY4VVhSDeJ",
          "type": "number",
          "value": "68.1"
        },
        {
          "displayName": "Email",
          "attribute": "NDXw0cluzSw",
          "type": "string",
          "value": "LiyaEfrem@armyspy.com"
        },
        {
          "displayName": "Gender",
          "attribute": "cejWyOfXge6",
          "type": "optionSet",
          "value": "Female"
        },
        {
          "displayName": "Phone number",
          "attribute": "P2cwLGskgxn",
          "type": "phoneNumber",
          "value": "085 813 9447"
        },
        {
          "displayName": "First name",
          "attribute": "dv3nChNSIxy",
          "type": "string",
          "value": "Liya"
        },
        {
          "displayName": "Last name",
          "attribute": "hwlRTFIFSUq",
          "type": "string",
          "value": "Efrem"
        },
        {
          "code": "Height in cm",
          "displayName": "Height in cm",
          "attribute": "lw1SqmMlnfh",
          "type": "number",
          "value": "164"
        },
        {
          "code": "City",
          "displayName": "City",
          "attribute": "VUvgVao8Y5z",
          "type": "string",
          "value": "Kranskop"
        },
        {
          "code": "State",
          "displayName": "State",
          "attribute": "GUOBQt5K2WI",
          "type": "number",
          "value": "KwaZulu-Natal"
        },
        {
          "code": "Zip code",
          "displayName": "Zip code",
          "attribute": "n9nUvfpTsxQ",
          "type": "number",
          "value": "3282"
        },
        {
          "code": "National identifier",
          "displayName": "National identifier",
          "attribute": "AuPLng5hLbE",
          "type": "string",
          "value": "465700042"
        },
        {
          "code": "Blood type",
          "displayName": "Blood type",
          "attribute": "H9IlTX2X6SL",
          "type": "string",
          "value": "B-"
        },
        {
          "code": "Latitude",
          "displayName": "Latitude",
          "attribute": "Qo571yj6Zcn",
          "type": "string",
          "value": "-30.659626"
        },
        {
          "code": "Longitude",
          "displayName": "Longitude",
          "attribute": "RG7uGl4w5Jq",
          "type": "string",
          "value": "26.916172"
        }
      ]
    }
  ]
}
```

#### Tracked entity instance grid query { #webapi_tracked_entity_instance_grid_query }

Pour effectuer une requête sur les instances d'entités suivies, vous pouvez interagir avec la ressource */api/trackedEntityInstances/grid*. Il existe deux types de requêtes : L'une où un paramètre de requête *query* et éventuellement des paramètres *attribute* sont définis, et l'autre où des paramètres *attribute* et *filter* sont définis. Ce point d'extrémité utilise un format de "grille" plus compact et constitue une alternative à la requête de la section précédente.

    /api/33/trackedEntityInstances/query

##### Syntaxe de la requête{ #webapi_tei_grid_query_request_syntax }



Tableau : Paramètres de requête pour les instances d'entités suivies

| Paramètre de requête | Description ; |
|---|---|
| requête | Chaîne de requête. Le paramètre de requête "Attribute" peut être utilisé pour définir les attributs à inclure dans la réponse. Si aucun attribut n'est défini mais qu'un programme l'est, les attributs de ce programme seront utilisés. Si aucun programme n'est défini, tous les attributs seront utilisés. Il existe deux formats. Le premier est une chaîne de requête plan. Le second est au format <opérateur>:<requête>. Les opérateurs peuvent être EQ | LIKE. EQ signifie qu'il y a des correspondances exactes avec les mots, LIKE signifie qu'il y a des correspondances partielles avec les mots. La requête sera divisée sur l'espace, où chaque mot formera une requête logique AND. |
| attribut | Attributs à inclure dans la réponse. Ce paramètre peut également être utilisé comme filtre pour la requête. Il peut être répété autant de fois que nécessaire. Les filtres peuvent être appliqués à une dimension selon le format <attribute-id\>:<operator\>:<filter\>[:<operator\>:<filter\>]. Les valeurs des filtres sont insensibles à la casse et peuvent être répétées avec l'opérateur autant de fois que nécessaire. Les opérateurs peuvent être EQ | GT | GE | LT | LE | NE | LIKE | IN. Les filtres peuvent être omis afin d'inclure simplement l'attribut dans la réponse sans aucune contrainte. |
| filtre | Attributs à utiliser comme filtre pour la requête. Le paramètre peut être répété autant de fois que nécessaire. Les filtres peuvent être appliqués à une dimension selon le format <attribute-id\>:<operator\>:<filter\>[ :<operator\>:<filter\>]. Les valeurs du filtre sont insensibles à la casse et peuvent être répétées avec l'opérateur autant de fois que nécessaire. Les opérateurs peuvent être EQ | GT | GE | LT | LE | NE | LIKE | IN. |
| ou | Identifiants des unités d'organisation, séparés par des " ;". |
| ouMode (Mode d'unité d'organisation) | Le mode de sélection des unités d'organisation. Les différentes options sont SELECTED (sélectionnées) | CHILDREN (subordonnées) | DESCENDANTS (descendants) | ACCESSIBLE (accessibles) | ALL (toutes). Par défaut, le mode est défini sur SELECTED, et cela ne concerne que les unités d'organisation sélectionnées. Voir le tableau ci-dessous pour les explications. |
| programme | Identifiant du programme. Il détermine le programme auquel les instances doivent être inscrites. |
| programStatus (statut de programme) | Statut de l'instance pour le programme donné. Peut être ACTIF | TERMINÉ | ANNULÉ. |
| Suivi | Statut du suivi de l'instance pour le programme donné. Peut être vrai, faux ou omis. |
| programStartDate | Date de début de l'inscription au programme donné pour l'instance d'entité suivie. |
| programEndDate | Date de fin de l'inscription au programme pour l'instance d'entité suivie. |
| Entité suivie | Identifiant de l'entité suivie ; il restreint les instances au type d'instance suivie donné. |
| eventStatus (statut d'événement) | Statut de tout événement associé au programme donné et à l'instance d'entité suivie. Il peut être ACTIVE (actif) | COMPLETED (terminé) | VISITED (visité) | SCHEDULE (planifié) | OVERDUE (en retard) | SKIPPED (ignoré). |
| eventStartDate | Date de début de l'événement associé au programme et au statut de l'événement. |
| eventEndDate | Date de fin de l'événement associé au programme et au statut d'événement. |
| Étape du programme | L'étape de programme à laquelle les filtres relatifs à l'événement doivent être appliqués. Si ce paramètre n'est pas fourni, toutes les étapes seront prises en compte. |
| skipMeta (ignorer les métadonnées) | Indique si les métadonnées de la réponse doivent être incluses. |
| page | Il s'agit du numéro de page. La page par défaut est 1. |
| taille de la page | La taille de la page. La taille par défaut est de 50 lignes par page. |
| totalPages (pages totales) | Indique s'il faut inclure le nombre total de pages dans la réponse de pagination (ce qui implique un temps de réponse plus long). |
| skipPaging | Indique si la pagination doit être ignorée et si toutes les lignes doivent être renvoyées. |
| Mode d'utilisateur assigné | Restreint le résultat à la TEI dont les événements sont attribués en fonction du mode de sélection de l'utilisateur. Il peut être CURRENT (actuel) | PROVIDED (fourni) | NONE (aucun) | ANY (tout). |
| assignedUser (Utilisateur assigné) | Permet de filtrer le résultat de manière à obtenir un ensemble limité de TEI avec des événements attribués aux UID donnés, en utilisant ceci : *assignedUser=id1;id2*. Ce paramètre ne sera pris en compte que si le assignedUserMode est PROVIDED ou null. L'API va générer une erreur si, par exemple, assignedUserMode=CURRENT et assignedUser=someId |
| trackedEntityInstance | Filtre le résultat de manière à obtenir un ensemble limité de TEI qui utilisent des uids d'instances d'entités suivies explicites. Vous pouvez le faire en utilisant ceci : *trackedEntityInstance=id1;id2*. Ce paramètre créera, au minimum, la limite externe des résultats, en constituant la liste de toutes les TEI à l'aide des uids fournis. Si d'autres paramètres/filtres de ce tableau sont utilisés, ils limiteront davantage les résultats à partir de la limite externe explicite. |
| potentialDuplicate (doublon potentiel) | Permet de filtrer le résultat en supposant qu'une TEI soit un doublon potentiel. Définit sur true, il renvoie les TEI marqués comme doublons potentiels. Définit sur false, il renvoie les TEI NON marqués comme doublons potentiels. En cas d'omission, nous ne vérifions pas si une TEI est un doublon potentiel ou pas.|

Les modes de sélection d'unités d'organisation disponibles sont expliqués dans le tableau suivant.



Tableau : Modes de sélection des unités d'organisation

| Mode | Description ; |
|---|---|
| SELECTED | Unités d'organisation définies dans la requête. |
| CHILDREN | Subordonnées directs, c'est-à-dire les unités d'organisation qui se trouvent au niveau directement inférieur de celles définies dans la requête. |
| DESCENDANTS | Toutes les subordonnées, c'est-à-dire toutes les unités d'organisation qui se trouvent en dessous de celles définies dans la requête, y compris les subordonnées des subordonnées. |
| ACCESSIBLE | Tous les descendants des unités d'organisation de visualisation de données associées à l'utilisateur actuel. Si ce mode n'est pas défini, les unités d'organisation de saisie de données associées à l'utilisateur actuel seront utilisées. |
| CAPTURE | Les unités d'organisation de saisie de données associées à l'utilisateur actuel et toutes leurs subordonnées, c'est-à-dire toutes les unités d'organisation qui leur sont inférieures dans la hiérarchie. |
| ALL | Toutes les unités d'organisation du système. L'utilisateur doit disposer de l'autorité `ALL` pour pouvoir utiliser ce paramètre. |

Vous pouvez spécifier "attribut" avec des filtres ou directement utiliser les paramètres de filtrage pour restreindre les instances à renvoyer.

Certaines règles s'appliquent aux attributs renvoyés.

  - Si "query" est spécifié sans aucun attribut ou programme, alors tous les attributs qui 
    sont marqués comme "Afficher dans la liste sans programme" seront inclus dans la réponse.

  - Si le programme est spécifié, tous les attributs liés au programme seront
    inclus dans la réponse.

  - Si le type d'entité suivie est spécifié, alors tous les attributs du type entité suivie
    seront inclus dans la réponse.

Vous pouvez spécifier des requêtes avec des mots séparés par des espaces - dans ce cas, le système recherchera chaque mot indépendamment et renverra les enregistrements où chaque mot est contenu dans n'importe quel attribut. Un élément de requête peut être spécifié une fois en tant qu'attribut et une fois en tant que filtre si nécessaire. La requête est insensible à la casse. Les règles suivantes s'appliquent aux paramètres de requête.

  - Au moins une unité d'organisation doit être spécifiée à l'aide de l'attribut *ou*.
    (un ou plusieurs), ou *ouMode=ALL* doit être spécifié.

  - Un seul des paramètres *program* et *trackedEntity* peut être
    spécifié (zéro ou un).

  - Si *programStatus* est spécifié, alors *program* doit également être
    spécifié.

  - Si *followUp* est spécifié, alors *program* doit également être spécifié.

  - Si *programStartDate* ou *programEndDate* est spécifié, alors
    *program* doit également être spécifié.

  - Si *eventStatus* est spécifié, alors *eventStartDate* et
    *eventEndDate* doivent également être spécifiés.

  - Une requête ne peut pas être spécifiée en même temps que des filtres.

  - Les éléments d'attributs ne peuvent être spécifiés qu'une seule fois.

  - Les éléments du filtre ne peuvent être spécifiés qu'une seule fois.

Une requête pour toutes les instances associées à une unité d'organisation spécifique peut ressembler à ceci :

    /api/33/trackedEntityInstances/query.json?ou=DiszpKrYNg8

Une requête sur tous les attributs pour une valeur et une unité d'organisation spécifiques, en utilisant une correspondance exacte des mots :

    /api/33/trackedEntityInstances/query.json?query=scott&ou=DiszpKrYNg8

Une requête sur tous les attributs pour une valeur spécifique, en utilisant un mot partiel :

    /api/33/trackedEntityInstances/query.json?query=LIKE:scott&ou=DiszpKrYNg8

You can query on multiple words separated by the URL character for
space which is %20, will use a logical AND query for each
    word:

    /api/33/trackedEntityInstances/query.json?query=isabel%20may&ou=DiszpKrYNg8

Une requête dans laquelle sont spécifiés les attributs à inclure dans la réponse :

    /api/33/trackedEntityInstances/query.json?query=isabel
      &attribute=dv3nChNSIxy&attribute=AMpUYgxuCaE&ou=DiszpKrYNg8

Pour effectuer une requête sur des instances à l'aide d'un attribut avec filtre et d'un attribut sans filtre, avec une unité d'organisation en utilisant le mode de requête de l'unité d'organisation subordonnée, utilisez ceci :

    /api/33/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      &attribute=AMpUYgxuCaE&ou=DiszpKrYNg8;yMCshbaVExv

Une requête pour les instances où un attribut est inclus dans la réponse et où un attribut est utilisé comme filtre :

    /api/33/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      &filter=AMpUYgxuCaE:LIKE:Road&ou=DiszpKrYNg8

Une requête dans laquelle plusieurs opérandes et filtres sont spécifiés pour un élément de filtre :

    /api/33/trackedEntityInstances/query.json?ou=DiszpKrYNg8&program=ur1Edk5Oe2n
      &filter=lw1SqmMlnfh:GT:150:LT:190

Pour effectuer une requête sur un attribut en utilisant plusieurs valeurs dans un filtre IN :

    /api/33/trackedEntityInstances/query.json?ou=DiszpKrYNg8
      &attribute=dv3nChNSIxy:IN:Scott;Jimmy;Santiago

Pour limiter la réponse aux instances qui font partie d'un programme spécifique, vous pouvez inclure un paramètre de requête de programme :

    /api/33/trackedEntityInstances/query.json?filter=zHXD5Ve1Efw:EQ:A
      &ou=O6uvpzGd5pu&ouMode=DESCENDANTS&program=ur1Edk5Oe2n

Pour spécifier les dates d'inscription au programme dans la requête :

    /api/33/trackedEntityInstances/query.json?filter=zHXD5Ve1Efw:EQ:A
      &ou=O6uvpzGd5pu&program=ur1Edk5Oe2n&programStartDate=2013-01-01
      &programEndDate=2013-09-01

Pour limiter la réponse aux instances d'une entité suivie spécifique, vous pouvez inclure un paramètre de requête d'entité suivie :

    /api/33/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      &ou=O6uvpzGd5pu&ouMode=DESCENDANTS&trackedEntity=cyl5vuJ5ETQ

Par défaut, les instances sont renvoyées dans des pages de taille 50. Pour modifier cela, vous pouvez utiliser les paramètres de requête de page et de taille de page (pageSize) :

    /api/33/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      &ou=O6uvpzGd5pu&ouMode=DESCENDANTS&page=2&pageSize=3

Pour effectuer une requête sur les instances qui ont des événements d'un statut donné dans un intervalle de temps donné :

    /api/33/trackedEntityInstances/query.json?ou=O6uvpzGd5pu
      &program=ur1Edk5Oe2n&eventStatus=COMPLETED
      &eventStartDate=2014-01-01&eventEndDate=2014-09-01

Vous pouvez utiliser une gamme d'opérateurs pour effectuer le filtrage :



Tableau : Opérateurs de filtre

| Opérateur | Description ; |
|---|---|
| EQ | Egal à |
| GT | Supérieur à |
| GE | Supérieur ou égal à |
| LT | Inférieur à |
| LE | inférieur ou égal à |
| NE | Pas égal à |
| LIKE | Free text match (Contains) |
| SW | Commence par |
| EW | Se termine par |
| IN | Égal à l'une des multiples valeurs séparées par ";" |

##### Format de la réponse { #webapi_tei_grid_query_response_format }

Cette ressource prend en charge les représentations JSON, JSONP, XLS et CSV.

  - json (application/json)

  - jsonp (application/javascript)

  - xml (application/xml)

  - csv (application/csv)

  - xls (application/vnd.ms-excel)

La réponse au format JSON se présente sous la forme d'un tableau et peut ressembler à ce qui suit. La section *headers* décrit le contenu de chaque colonne. Les colonnes "instance", "créé", "dernière mise à jour", "unité d'organisation" et "entité suivie" sont toujours présentes. Les colonnes suivantes correspondent aux attributs spécifiés dans la requête. La section *rows* contient une ligne par instance.

```json
{
  "headers": [{
    "name": "instance",
    "column": "Instance",
    "type": "java.lang.String"
  }, {
    "name": "created",
    "column": "Created",
    "type": "java.lang.String"
  }, {
    "name": "lastupdated",
    "column": "Last updated",
    "type": "java.lang.String"
  }, {
    "name": "ou",
    "column": "Org unit",
    "type": "java.lang.String"
  }, {
    "name": "te",
    "column": "Tracked entity",
    "type": "java.lang.String"
  }, {
    "name": "zHXD5Ve1Efw",
    "column": "Date of birth type",
    "type": "java.lang.String"
  }, {
    "name": "AMpUYgxuCaE",
    "column": "Address",
    "type": "java.lang.String"
  }],
  "metaData": {
    "names": {
      "cyl5vuJ5ETQ": "Person"
    }
  },
  "width": 7,
  "height": 7,
  "rows": [
    ["yNCtJ6vhRJu", "2013-09-08 21:40:28.0", "2014-01-09 19:39:32.19", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "21 Kenyatta Road"],
    ["fSofnQR6lAU", "2013-09-08 21:40:28.0", "2014-01-09 19:40:19.62", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "56 Upper Road"],
    ["X5wZwS5lgm2", "2013-09-08 21:40:28.0", "2014-01-09 19:40:31.11", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "56 Main Road"],
    ["pCbogmlIXga", "2013-09-08 21:40:28.0", "2014-01-09 19:40:45.02", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "12 Lower Main Road"],
    ["WnUXrY4XBMM", "2013-09-08 21:40:28.0", "2014-01-09 19:41:06.97", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "13 Main Road"],
    ["xLNXbDs9uDF", "2013-09-08 21:40:28.0", "2014-01-09 19:42:25.66", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "14 Mombasa Road"],
    ["foc5zag6gbE", "2013-09-08 21:40:28.0", "2014-01-09 19:42:36.93", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "15 Upper Hill"]
  ]
}
```

#### Filtres d'instances d'entités suivies { #webapi_tei_filters }

Pour créer, lire, mettre à jour et supprimer des filtres d'instances d'entités suivies, vous pouvez interagir avec la ressource */api/trackedEntityInstanceFilters*. Les filtres d'instances d'entités suivies peuvent être partagés et suivent le même modèle de partage que tout autre objet de métadonnées. En utilisant */api/sharing*, le paramètre de type sera *trackedEntityInstanceFilter*.

    /api/33/trackedEntityInstanceFilters

##### Créer et mettre à jour une définition de filtre d'instance d'entité suivie { #create-and-update-a-tracked-entity-instance-filter-definition } 

Pour créer et mettre à jour un filtre d'instance d'entité suivie dans le système, vous devez utiliser la ressource *trackedEntityInstanceFilters*. Les définitions des filtres d'instances d'entités suivies sont utilisées dans l'application Saisie Tracker pour afficher les "listes de tâches" prédéfinies pertinentes sur l'interface utilisateur du Tracker.



Tableau : Charge utile

| Valeurs de charge utile | Description ; | Exemple |
|---|---|---|
| nom | Nom du filtre. Obligatoire. ||
| Description | Une description du filtre. ||
| sortOrder (ordre de tri) | Ordre de tri du filtre ; utilisé dans Saisie Tracker pour ordonner les filtres dans le tableau de bord du programme. ||
| style | Objet contenant un style css. | ( "color": "blue", "icon": "fa fa-calendar"} |
| programme | Objet contenant l'identifiant du programme. Obligatoire. | { "id" : "uy2gU8kTjF"} |
| entityQueryCriteria | Un objet représentant diverses valeurs de filtrage possibles. Voir le tableau de définition des *Critères de requête d'entité* ci-dessous.
| eventFilters | Une liste de filtres d'événements. Voir le tableau de définition des *filtres d'événements* ci-dessous. | [{"programStage": "eaDH9089uMp", "eventStatus": "OVERDUE", "eventCreatedPeriod": {"periodFrom": -15, "periodTo": 15}}] |

Tableau : Définition des critères de requêtes sur les entités

||||
|---|---|---|
| Filtres des valeurs d'attributs | Une liste de filtres de valeurs d'attribut. Elle est utilisée pour spécifier des filtres pour les valeurs d'attributs lors de l'établissement de la liste des instances d'entités suivies. | "attributeValueFilters"=[{       "attribute": "abcAttributeUid",       "le": "20",       "ge": "10",       "lt": "20",       "gt": "10",       "in": ["India", "Norway"],       "like": "abc",       "sw": "abc",       "ew": "abc",       "dateFilter": {         "startDate": "2014-05-01",         "endDate": "2019-03-20",         "startBuffer": -5,         "endBuffer": 5,         "period": "LAST_WEEK",         "type": "RELATIVE"       }     }] |
| Statut de l'inscription | Statut de l'inscription des TEI. Cette valeur peut être "none"(n'importe quel statut d'inscription) ou ACTIVE (active) | COMPLETED (terminée) | CANCELLED (annulée). ||
| followup | Lorsque ce paramètre est définie sur "true", le filtre ne renvoie que les TEI dont le statut d'inscription est followup (suivi). ||
| organisationUnit | Utilisée pour spécifier l'identifiant de l'unité d'organisation | "organisationUnit": "a3kGcGDCuk7" |
| ouMode (Mode d'unité d'organisation) | Utilisée pour spécifier le mode de sélection des unités d'organisation. Les valeurs possibles sont SELECTED| CHILDREN|DESCENDANTS|ACCESSIBLE|CAPTURE|ALL | "ouMode": "SELECTED" |
| Mode d'utilisateur assigné | Utilisée pour spécifier le mode de sélection de l'utilisateur pour les événements. Les valeurs possibles sont CURRENT| PROVIDED| NONE | ANY. Voir le tableau ci-dessous pour comprendre ce que chaque valeur indique. Si elle est définie sur PROVIDED (ou "null"), les sections assignedUsers non vides dans la charge seront pris en compte. | "assignedUserMode": "PROVIDED" |
| assignedUser (Utilisateur assigné) | Utilisée pour spécifier une liste d'utilisateurs assignés à des événements. À utiliser avec le mode d'utilisateur assigné PROVIDED ci-dessus. | "assignedUsers": ["a3kGcGDCuk7", "a3kGcGDCuk8"] |
| Ordre d'affichage des colonnes | Utilisée pour spécifier l'ordre de sortie des colonnes | "displayOrderColumns": ["enrollmentDate", "program"] |
| Ordre | To specify ordering/sorting of fields and its directions in comma separated values. A single item in order is of the form "orderDimension:direction". Note: Supported orderDimensions are trackedEntity, created, createdAt, createdAtClient, updatedAt, updatedAtClient, enrolledAt, inactive and the tracked entity attributes | "order"="a3kGcGDCuk6:desc" |
| eventStatus (statut d'événement) | Tout statut d'événement valide | "eventStatus": "COMPLETED" |
| Étape du programme | Utilisée pour spécifier un uid d'étape de programme sur lequel effectuer le filtrage. Les TEI seront filtrés si elles disposent d'une inscription à l'étape de programme spécifiée.| "programStage"="a3kGcGDCuk6" |
| TrackedEntityType (Type d'entité suivie) | Utilisée pour spécifier un filtre de type d'entité suivie lors sur les TEI. | "trackedEntityType"="a3kGcGDCuk6" |
| trackedEntityInstances | Utilisée pour spécifier une liste d'instances d'entités suivies à utiliser lors des requêtes sur les TEI. | "trackedEntityInstances"=["a3kGcGDCuk6","b4jGcGDCuk7"] |
| enrollmentIncidentDate | DateFilterPeriod object date filtering based on enrollment incident date. | "enrollmentIncidentDate": {     "startDate": "2014-05-01",     "endDate": "2019-03-20",     "startBuffer": -5,     "endBuffer": 5,     "period": "LAST_WEEK",     "type": "RELATIVE"   } |
| eventDate (date de l'événement) | DateFilterPeriod object date filtering based on event date. | "eventDate": {     "startBuffer": -5,     "endBuffer": 5,     "type": "RELATIVE"   } |
| enrollmentCreatedDate | DateFilterPeriod object date filtering based on enrollment created date. | "enrollmentCreatedDate": {     "period": "LAST_WEEK",     "type": "RELATIVE"   } |
| lastUpdatedDate | DateFilterPeriod object date filtering based on last updated date. | "lastUpdatedDate": {     "startDate": "2014-05-01",     "endDate": "2019-03-20",     "type": "ABSOLUTE"   } |

Tableau : Définition des filtres d'événements

||||
|---|---|---|
| Étape du programme | L'étape de programme dans laquelle la TEI a besoin d'un événement pour être renvoyée. | "eaDH9089uMp" |
| eventStatus (statut d'événement) | Le statut de l'événement ; peut être "none" (n'importe quel statut d'événement) ou ACTIVE | COMPLETED | SCHEDULE | OVERDUE. | ACTIVE |
| eventCreatedPeriod | Objet période contenant une période au cours de laquelle l'événement doit être créé. Voir la définition de *Période* ci-dessous. | { "periodFrom": -15, "periodTo": 15} |
| Mode d'utilisateur assigné | Utilisée pour spécifier le mode de sélection des utilisateurs assignés à des événements. Les valeurs possibles sont CURRENT (événements attribués à l'utilisateur actuel)| PROVIDED (événements attribués aux utilisateurs figurant dans la liste "assignedUsers") | NONE (événements attribués à personne) | ANY (événements attribués à tout utilisateur). Si cette valeur est définie sur PROVIDED (ou null), les sections assignedUsers non vides dans la charge seront pris en compte. | "assignedUserMode": "PROVIDED" |
| assignedUser (Utilisateur assigné) | Utilisée pour spécifier une liste d'utilisateurs assignés à des événements. À utiliser avec le mode d'utilisateur assigné PROVIDED ci-dessus. | "assignedUsers": ["a3kGcGDCuk7", "a3kGcGDCuk8"] |


Tableau : Définition de l'objet DateFilterPeriod

||||
|---|---|---|
| type | Spécifie si le type de période "date" est ABSOLUTE (absolu) ou RELATIVE (relatif) | "type" : "RELATIVE" |
| période | Spécifie si une période relative doit être utilisée. Ceci est applicable uniquement lorsque "type" est RELATIVE. (voir la section [Périodes relatives](#webapi_date_relative_period_values) pour consulter les périodes relatives prises en charge) | "period" : "THIS_WEEK" |
| date de début | Date de début absolue ; applicable uniquement lorsque le "type" est ABSOLUTE. | "startDate":"2014-05-01" |
| date de fin | Date de fin absolue ; applicable uniquement lorsque le "type" est ABSOLUTE. | "startDate":"2014-05-01" |
| startBuffer | Date de début personnalisée relative ; applicable uniquement lorsque le "type" est RELATIVE. | "startBuffer":-10 |
| endBuffer | Date de fin personnalisée relative ; applicable uniquement lorsque le "type" est RELATIVE. | "startDate":+10 |

Tableau : Définition de la période

||||
|---|---|---|
| periodFrom | Nombre de jours à partir du jour actuel. Il peut s'agir d'un nombre entier positif ou négatif. | -15 |
| periodTo | Nombre de jours à partir du jour actuel. Doit être supérieur à periodFrom. Peut être un nombre entier positif ou négatif. | 15 |

##### Requête sur les filtres d'instances d'entités suivie { #tracked-entity-instance-filters-query } 

Pour rechercher des filtres d'instances d'entités suivies dans le système, vous pouvez interagir avec la ressource */api/trackedEntityInstanceFilters*.



Tableau : Paramètres de requête pour les filtres d'instances d'entités suivies

| Paramètre de requête | Description ; |
|---|---|
| programme | Identifiant du programme. Il limite le filtrage au programme donné. |

### Gestion des inscriptions { #webapi_enrollment_management }

Les inscriptions bénéficient d'une prise en charge CRUD complète dans l'API. Avec l'API des instances d'entités suivies, la plupart des opérations nécessaires pour travailler avec les instances d'entités suivies et les programmes sont prises en charge.

    /api/33/enrollments

#### Inscription d'une instance d'entité suivie à un programme { #webapi_enrolling_tei }

Pour inscrire des personnes à un programme, vous devez d'abord obtenir l'identifiant de la personne à partir de la ressource *trackedEntityInstances*. Ensuite, vous devez obtenir l'identifiant du programme à partir de la ressource *programs*. Un modèle de charge utile est présenté ci-dessous :

```json
{
  "trackedEntityInstance": "ZRyCnJ1qUXS",
  "orgUnit": "ImspTQPwCqd",
  "program": "S8uo8AlvYMz",
  "enrollmentDate": "2013-09-17",
  "incidentDate": "2013-09-17"
}
```

Cette charge doit être utilisée dans une requête *POST* à la ressource des inscriptions identifiée par l'URL suivante :

    /api/33/enrollments

Les différents statuts d'une inscription sont les suivants :

* **ACTIVE** : Il est utilisé lorsque lorsque l'entité suivie participe au programme.
* **COMPLETED** : utilisé lorsque l'entité suivie a terminé sa participation au programme.
* **CANCELLED** : "Désactivé" dans l'interface web. Il est utilisé lorsque l'entité suivie a annulé sa participation au programme.

Pour annuler ou terminer une inscription, vous pouvez adresser une requête *PUT* à la ressource `enrollments`, en indiquant l'identifiant de l'inscription et l'action que vous voulez réaliser. Pour annuler une inscription pour une entité suivie :

    /api/33/enrollments/<enrollment-id>/cancelled

Pour terminer l'inscription d'une instance d'entité suivie, vous pouvez envoyez une requête *PUT* à l'URL suivante :

    /api/33/enrollments/<enrollment-id>/completed

Pour supprimer une inscription, vous pouvez envoyer une requête *DELETE* à l'URL suivante :

    /api/33/enrollments/<enrollment-id>

#### Requête pour l'instance d'inscription { #webapi_enrollment_instance_query }

Pour rechercher des inscriptions, vous pouvez interagir avec la ressource */api/enrollments*.

    /api/33/enrollments

##### Syntaxe de la requête { #webapi_enrollment_query_request_syntax }



Tableau : Paramètres de la requête d'inscription

| Paramètre de requête | Description ; |
|---|---|
| ou | Identifiants des unités d'organisation, séparés par des " ;". |
| ouMode (Mode d'unité d'organisation) | Le mode de sélection des unités d'organisation. Les différentes options sont SELECTED (sélectionnées) | CHILDREN (subordonnées) | DESCENDANTS (descendants) | ACCESSIBLE (accessibles) | CAPTURE (saisie) | ALL (toutes). Par défaut, le mode est défini sur SELECTED, et cela ne concerne que les unités d'organisation sélectionnées. Voir le tableau ci-dessous pour les explications. |
| programme | Identifiant du programme. Il détermine le programme auquel les instances doivent être inscrites. |
| programStatus (statut de programme) | Statut de l'instance pour le programme donné. Peut être ACTIF | TERMINÉ | ANNULÉ. |
| Suivi | Statut du suivi de l'instance pour le programme donné. Peut être vrai, faux ou omis. |
| programStartDate | Date de début de l'inscription au programme donné pour l'instance d'entité suivie. |
| programEndDate | Date de fin de l'inscription au programme pour l'instance d'entité suivie. |
| lastUpdatedDuration (durée de la dernière mise à jour) | Inclure uniquement les éléments qui ont été mis à jour pendant la durée spécifiée. Le format est , où les unités de temps prises en charge sont "j" (jours), "h" (heures), "m" (minutes) et "s" (secondes). |
| Entité suivie | Identifiant de l'entité suivie ; il restreint les instances au type d'instance suivie donné. |
| trackedEntityInstance | Identifiant de l'instance d'entité suivie. Il ne doit pas être utilisé en même temps que trackedEntity. |
| page | Il s'agit du numéro de page. La page par défaut est 1. |
| taille de la page | La taille de la page. La taille par défaut est de 50 lignes par page. |
| totalPages (pages totales) | Indique s'il faut inclure le nombre total de pages dans la réponse de pagination (ce qui implique un temps de réponse plus long). |
| skipPaging | Indique si la pagination doit être ignorée et si toutes les lignes doivent être renvoyées. |
| includeDeleted | Indique s'il faut inclure ou non les inscriptions supprimés de manière réversible. La valeur par défaut est "false". |

Les modes de sélection d'unités d'organisation disponibles sont expliqués dans le tableau suivant.



Tableau : Modes de sélection des unités d'organisation

| Mode | Description ; |
|---|---|
| SELECTED | Unités d'organisation définies dans la requête (par défaut). |
| CHILDREN | Subordonnées directs, c'est-à-dire les unités d'organisation qui se trouvent au niveau directement inférieur de celles définies dans la requête. |
| DESCENDANTS | Toutes les subordonnées, c'est-à-dire toutes les unités d'organisation qui se trouvent en dessous de celles définies dans la requête, y compris les subordonnées des subordonnées. |
| ACCESSIBLE | Tous les descendants des unités d'organisation de visualisation de données associées à l'utilisateur actuel. Si ce mode n'est pas défini, les unités d'organisation de saisie de données associées à l'utilisateur actuel seront utilisées. |
| ALL | Toutes les unités d'organisation du système. L'utilisateur doit disposer de l'autorité `ALL` pour pouvoir utiliser ce paramètre. |

La requête n'est pas sensible à la casse. Les règles suivantes s'appliquent aux paramètres de la requête.

  - Au moins une unité d'organisation doit être spécifiée à l'aide de l'attribut *ou*.
    (un ou plusieurs), ou *ouMode=ALL* doit être spécifié.

  - Un seul des paramètres *program* et *trackedEntity* peut être
    spécifié (zéro ou un).

  - Si *programStatus* est spécifié, alors *program* doit également être
    spécifié.

  - Si *followUp* est spécifié, alors *program* doit également être spécifié.

  - Si *programStartDate* ou *programEndDate* est spécifié, alors
    *program* doit également être spécifié.

Une requête pour toutes les inscriptions associées à une unité d'organisation spécifique peut ressembler à ceci :

    /api/33/enrollments.json?ou=DiszpKrYNg8

Pour limiter la réponse aux inscriptions qui font partie d'un programme spécifique, vous pouvez inclure un paramètre de requête de programme :

    /api/33/enrollments.json?ou=O6uvpzGd5pu&ouMode=DESCENDANTS&program=ur1Edk5Oe2n

Pour spécifier les dates d'inscription au programme dans la requête :

    /api/33/enrollments.json?&ou=O6uvpzGd5pu&program=ur1Edk5Oe2n
      &programStartDate=2013-01-01&programEndDate=2013-09-01

Pour limiter la réponse aux inscriptions d'une entité suivie spécifique, vous pouvez inclure un paramètre de requête d'entité suivie :

    /api/33/enrollments.json?ou=O6uvpzGd5pu&ouMode=DESCENDANTS&trackedEntity=cyl5vuJ5ETQ

Pour limiter la réponse aux inscriptions d'une entité suivie spécifique, vous pouvez inclure un paramètre de requête d'instance d'entité suivie. Dans ce cas, nous avons limité la réponse aux inscriptions disponibles pour l'utilisateur actuel :

    /api/33/enrollments.json?ouMode=ACCESSIBLE&trackedEntityInstance=tphfdyIiVL6

Par défaut, les inscriptions sont renvoyées dans des pages de taille 50. Pour modifier cela, vous pouvez utiliser les paramètres de requête 'page' et 'taille de page' (pageSize) :

    /api/33/enrollments.json?ou=O6uvpzGd5pu&ouMode=DESCENDANTS&page=2&pageSize=3

##### Format de la réponse { #webapi_enrollment_query_response_format }

Cette ressource prend en charge les représentations JSON, JSONP, XLS et CSV.

  - json (application/json)

  - jsonp (application/javascript)

  - xml (application/xml)

La réponse en JSON/XML est au format objet et peut ressembler à ce qui suit. Le filtrage des champs est possible, donc si vous voulez un affichage complet, vous pouvez ajouter `fields=*` à la requête :

```json
{
  "enrollments": [
    {
      "lastUpdated": "2014-03-28T05:27:48.512+0000",
      "trackedEntity": "cyl5vuJ5ETQ",
      "created": "2014-03-28T05:27:48.500+0000",
      "orgUnit": "DiszpKrYNg8",
      "program": "ur1Edk5Oe2n",
      "enrollment": "HLFOK0XThjr",
      "trackedEntityInstance": "qv0j4JBXQX0",
      "followup": false,
      "enrollmentDate": "2013-05-23T05:27:48.490+0000",
      "incidentDate": "2013-05-10T05:27:48.490+0000",
      "status": "ACTIVE"
    }
  ]
}
```

### Événements { #webapi_events }

Cette section traite de l'envoi et de la lecture d'événements.

    /api/33/events

Les différents statuts d'un événement sont les suivants :

* **ACTIVE** : Si un événement a le statut ACTIVE, il est possible de modifier les détails de l'événement. Les événements de statut COMPLETED peuvent devenir ACTIVE à nouveau et vice versa.
* **COMPLETED** : Un événement ne prend le statut COMPLETED que lorsqu'un utilisateur clique sur le bouton "Terminer". Si un événement a le statut COMPLETED, ses informations ne peuvent pas être modifiées. Les événements de statut ACTIVE peuvent devenir COMPLETED à nouveau et vice versa.
* **SKIPPED** : Événements programmés qui n'ont plus lieu d'être. Dans l'application Saisie Tracker, un bouton est dédié à ce paramètre.
* **SCHEDULE** : Si un événement n'a pas de date d'événement (mais qu'il a une date d'échéance), le statut de l'événement est sauvegardé en tant SCHEDULE.
* **OVERDUE** (en retard) : Si la date d'échéance d'un événement planifié (sans date d'événement) a expiré, l'événement peut être considéré comme étant en retard.
* **VISITED** (visité) : (Ce statut est supprimé depuis la version 2.38. Il a migré vers ACTIVE). Dans l'application Saisie Tracker, il est possible d'atteindre le statut VISITED en ajoutant un nouvel événement avec une date d'événement, puis de le quitter avant d'y ajouter des données - l'équipe du Tracker ne remarquera pas qu'un utilisateur a fait usage de ce statut pour une raison quelconque. Le statut VISITED n'est pas visible dans l'interface utilisateur et est traité de la même manière qu'un événement de statut "ACTIVE".


#### Envoi d'événements { #webapi_sending_events }

DHIS2 prend en charge trois types d'événements : les événements uniques sans enregistrement (également appelés événements anonymes), les événements uniques avec enregistrement et les événements multiples avec enregistrement. L'enregistrement implique que les données sont rattachées à une instance d'entité suivie qui est identifiée à l'aide d'un identifiant.

Pour envoyer des événements à DHIS2, vous devez interagir avec la ressource *events*. L'approche utilisée pour envoyer des événements est similaire à celle utilisée pour envoyer des valeurs de données agrégées. Vous aurez besoin d'un *programme* qui peut être recherché à l'aide de la ressource *programs*, d'une *unité d'organisation* qui peut être recherchée à l'aide de la ressource *organisationUnits*, et d'une liste d'identifiants d'éléments de données valides qui peuvent être recherchés à l'aide de la ressource *dataElements*. Pour les événements avec enregistrement, un identifiant d'*instance d'entité suivie* est nécessaire. Pour savoir comment l'obtenir, consultez la section sur la ressource *trackedEntityInstances*. Pour envoyer des événements à des programmes comportant plusieurs étapes, il vous faudra également inclure l'identifiant *programStage* (étape de programme). Les identifiants des étapes de programme se trouvent dans la ressource *programStages*.

Voici un exemple simple d'événement unique sans enregistrement au format XML. Dans cet exemple, nous envoyons vers la base de données de démonstration, des événements du programme "Morbidité et mortalité des patients hospitalisés" pour l'établissement "Ngelehun CHC"  :

```xml
<?xml version="1.0" encoding="utf-8"?>
<event program="eBAyeGv0exc" orgUnit="DiszpKrYNg8"
  eventDate="2013-05-17" status="COMPLETED" storedBy="admin">
  <coordinate latitude="59.8" longitude="10.9" />
  <dataValues>
    <dataValue dataElement="qrur9Dvnyt5" value="22" />
    <dataValue dataElement="oZg33kd9taw" value="Male" />
    <dataValue dataElement="msodh3rEMJa" value="2013-05-18" />
  </dataValues>
</event>
```

Pour faire des tests, nous pouvons enregistrer la charge XML dans un fichier appelé *event.xml* et l'envoyer sous la forme d'une requête POST à la ressource "events" de l'API à l'aide de curl et de la commande suivante :

```bash
curl -d @event.xml "https://play.dhis2.org/demo/api/33/events"
  -H "Content-Type:application/xml" -u admin:district
```

La même charge au format JSON se présente comme suit :

```json
{
  "program": "eBAyeGv0exc",
  "orgUnit": "DiszpKrYNg8",
  "eventDate": "2013-05-17",
  "status": "COMPLETED",
  "completedDate": "2013-05-18",
  "storedBy": "admin",
  "coordinate": {
    "latitude": 59.8,
    "longitude": 10.9
  },
  "dataValues": [
    {
      "dataElement": "qrur9Dvnyt5",
      "value": "22"
    },
    {
      "dataElement": "oZg33kd9taw",
      "value": "Male"
    },
    {
      "dataElement": "msodh3rEMJa",
      "value": "2013-05-18"
    }
  ]
}
```

Pour l'envoyer, vous pouvez l'enregistrer dans un fichier appelé *event.json* et utiliser curl comme suit :

```bash
curl -d @event.json "localhost/api/33/events" -H "Content-Type:application/json"
  -u admin:district
```

Nous pouvons également envoyer plusieurs événements en même temps. Une charge au format XML pourrait ressembler à ceci :

```xml
<?xml version="1.0" encoding="utf-8"?>
<events>
  <event program="eBAyeGv0exc" orgUnit="DiszpKrYNg8"
    eventDate="2013-05-17" status="COMPLETED" storedBy="admin">
    <coordinate latitude="59.8" longitude="10.9" />
    <dataValues>
      <dataValue dataElement="qrur9Dvnyt5" value="22" />
      <dataValue dataElement="oZg33kd9taw" value="Male" />
    </dataValues>
  </event>
  <event program="eBAyeGv0exc" orgUnit="DiszpKrYNg8"
    eventDate="2013-05-17" status="COMPLETED" storedBy="admin">
    <coordinate latitude="59.8" longitude="10.9" />
    <dataValues>
      <dataValue dataElement="qrur9Dvnyt5" value="26" />
      <dataValue dataElement="oZg33kd9taw" value="Female" />
    </dataValues>
  </event>
</events>
```

Vous recevrez un récapitulatif de l'importation avec la réponse qui peut être inspecté afin d'obtenir des informations sur le résultat de la requête, par exemple le nombre de valeurs qui ont été importées avec succès. La charge au format JSON ressemble à ceci :

```json
{
  "events": [
  {
    "program": "eBAyeGv0exc",
    "orgUnit": "DiszpKrYNg8",
    "eventDate": "2013-05-17",
    "status": "COMPLETED",
    "storedBy": "admin",
    "coordinate": {
      "latitude": "59.8",
      "longitude": "10.9"
    },
    "dataValues": [
      {
        "dataElement": "qrur9Dvnyt5",
        "value": "22"
      },
      {
        "dataElement": "oZg33kd9taw",
        "value": "Male"
      }
    ]
  },
  {
    "program": "eBAyeGv0exc",
    "orgUnit": "DiszpKrYNg8",
    "eventDate": "2013-05-17",
    "status": "COMPLETED",
    "storedBy": "admin",
    "coordinate": {
      "latitude": "59.8",
      "longitude": "10.9"
    },
    "dataValues": [
      {
        "dataElement": "qrur9Dvnyt5",
        "value": "26"
      },
      {
        "dataElement": "oZg33kd9taw",
        "value": "Female"
      }
    ]
  } ]
}
```

Vous pouvez également utiliser GeoJson pour stocker tout type de géométrie sur votre événement. Voici un exemple de charge utilisant GeoJson et non les anciennes propriétés de latitude et de longitude :

```json
{
  "program": "eBAyeGv0exc",
  "orgUnit": "DiszpKrYNg8",
  "eventDate": "2013-05-17",
  "status": "COMPLETED",
  "storedBy": "admin",
  "geometry": {
    "type": "POINT",
    "coordinates": [59.8, 10.9]
  },
  "dataValues": [
    {
      "dataElement": "qrur9Dvnyt5",
      "value": "22"
    },
    {
      "dataElement": "oZg33kd9taw",
      "value": "Male"
    },
    {
      "dataElement": "msodh3rEMJa",
      "value": "2013-05-18"
    }
  ]
}
```

Le récapitulatif de l'importation contient également l'identifiant *reference* de l'événement que vous venez d'envoyer, ainsi qu'un élément *href* qui indique l'emplacement du serveur de cet événement. Le tableau ci-dessous décrit la signification de chaque élément.



Tableau : Format de la ressource des événements

| Paramètre | Type | Obligatoire | Options (par défaut en premier) | Description ; |
|---|---|---|---|---|
| programme | chaîne | vrai || Identifiant de l'événement unique sans enregistrement |
| orgUnit (Unité d'organisation) | chaîne | vrai || Identifiant de l'unité d'organisation où l'événement a eu lieu |
| eventDate (date de l'événement) | date | vrai || La date à laquelle l'événement s'est produit |
| completedDate | date | faux || La date à laquelle l'événement se termine. Si elle n'est pas fournie, la date du jour est sélectionnée comme date de fin de l'événement. |
| statut | enum | faux | ACTIVE | COMPLETED | VISITED | SCHEDULE | OVERDUE | SKIPPED | Spécifie si l'événement est terminé ou non |
| storedBy (Stockée par) | chaîne | faux | Par défaut, il s'agit de l'utilisateur actuel | L'utilisateur qui a stocké cet événement (peut être le nom d'utilisateur, le nom du système, etc.) |
| coordinate | double | faux || Fait référence à l'emplacement géographique où l'événement a eu lieu (latitude et longitude). |
| élément de données | chaîne | vrai || Identifiant de l'élément de données |
| valeur | chaîne | vrai || Valeur des données ou mesure pour cet événement |

##### Correspondance des unités d'organisation (paramètre orgUnit) { #orgunit-matching } 

Par défaut, le paramètre orgUnit correspondra à l'identifiant. Vous pouvez également sélectionner le schéma de correspondance de l'identifiant de l'unité d'organisation en utilisant le paramètre orgUnitIdScheme=SCHEME, où les options sont : *ID*, *UID*, *UUID*, *CODE* et *NAME*. Il existe également le schéma *ATTRIBUTE:*, qui correspond à une valeur d'attribut de métadonnées *unique*.

#### Mise à jour des événements { #webapi_updating_events }

Pour mettre à jour un événement existant, le format de la charge reste le même, mais il faudra ajouter l'identifiant à la fin de la chaîne de l'URL à laquelle vous adressez la requête, et la requête doit être de type PUT.

La charge doit contenir tous les attributs, même ceux qui n'ont pas été modifiés. Les attributs qui étaient présents auparavant et qui ne sont plus présents dans la charge actuelle seront supprimés par le système.

Il n'est pas autorisé de mettre à jour un événement déjà supprimé. Il en va de même pour les instances d'entité suivie et les inscriptions.

```bash
curl -X PUT -d @updated_event.xml "localhost/api/33/events/ID"
  -H "Content-Type: application/xml" -u admin:district
```

```bash
curl -X PUT -d @updated_event.json "localhost/api/33/events/ID"
  -H "Content-Type: application/json" -u admin:district
```

#### Suppression des événements { #webapi_deleting_events }

Pour supprimer un événement existant, il suffit d'envoyer une requête DELETE avec une référence d'identifiant au serveur que vous utilisez.

```bash
curl -X DELETE "localhost/api/33/events/ID" -u admin:district
```

#### Affectation d'un utilisateur à un événement { #webapi_user_assign_event }

Un utilisateur peut être affecté à un événement. Pour ce faire, il suffit d'inclure la propriété appropriée dans la charge lors de la mise à jour ou de la création de l'événement.

      "assignedUser": "<id>"

L'id fait référence à l'identifiant de l'utilisateur. Un seul utilisateur peut être affecté à un événement à la fois.

L'affectation des utilisateurs doit être activée dans la phase de programmation avant que les utilisateurs puissent être affectés à des événements.
#### Obtenir des événements { #webapi_getting_events }

Pour obtenir un événement existant, vous pouvez envoyer une requête GET comprenant l'identifiant comme ceci :

```bash
curl "http://localhost/api/33/events/ID" -H "Content-Type: application/xml" -u admin:district
```

#### Interroger et lire des événements { #webapi_querying_reading_events }

Cette section explique comment lire les événements qui ont été stockés dans l'instance DHIS2. Pour pouvoir utiliser les données d'événements de manière plus avancée, veuillez consulter la section consacrée à l'analyse des événements. Le format de sortie du point d'extrémité `/api/events` correspondra au format utilisé pour lui envoyer des événements (ce format n'est pas pris en charge par l'api d'analyse d'événements). Les formats XML et JSON sont pris en charge. Pour pouvoir les utiliser, il suffit d'ajouter un fichier .json/.xml ou de définir l'en-tête *Accept* approprié. La requête est paginée par défaut et la taille de la page par défaut est de 50 événements. Le filtrage par *champs* fonctionne comme avec les métadonnées ; ajoutez le paramètre *fields* et spécifiez les propriétés que vous voulez, ce qui nous donne *fields=program,status*.



Tableau : Paramètres de requête de la ressource des événements

| Clé | Type | Obligatoire | Description ; |
|---|---|---|---|
| programme | identifiant | true (if not programStage is provided) | Identifiant de programme |
| Étape du programme | identifiant | faux | Identifiant de l'étape de programme |
| programStatus (statut de programme) | enum | faux | Statut de l'événement dans le programme ; peut être ACTIVE | COMPLETED | CANCELLED |
| Suivi | booléen | faux | Détermine si l'événement est pris en compte pour le suivi dans le programme ; peut être vrai | faux ou omis. |
| trackedEntityInstance | identifiant | faux | Identifiant de l'instance d'entité suivie |
| orgUnit (Unité d'organisation) | identifiant | vrai | Identifiant de l'unité d'organisation |
| ouMode (Mode d'unité d'organisation) | enum | faux | Mode de sélection de l'unité d'organisation ; peut être SELECTED | CHILDREN | DESCENDANTS |
| date de début | date | faux | Seulement les événements plus récents que cette date |
| date de fin | date | faux | Uniquement les événements antérieurs à cette date |
| statut | enum | faux | Statut de l'événement, peut être ACTIVE | COMPLETED | VISITED | SCHEDULE | OVERDUE | SKIPPED |
| lastUpdatedStartDate | date | faux | Filtre pour les événements qui ont été mises à jour après cette date ; ne peut être utilisé avec *lastUpdatedDuration*. |
| lastUpdatedEndDate | date | faux | Filtre pour les événements qui ont été mises à jour jusqu'à cette date ; ne peut être utilisé avec *lastUpdatedDuration*. |
| lastUpdatedDuration (durée de la dernière mise à jour) | chaîne | faux | Ce paramètre inclut uniquement les éléments qui ont été mis à jour pendant la durée spécifiée. Le format est jj-hh-mm-ss, où  "j" = jours, "h" = heures, "m" = minutes et "s" = secondes. Il ne peut pas être utilisé avec *lastUpdatedStartDate* et/ou *lastUpdatedEndDate*. |
| skipMeta (ignorer les métadonnées) | booléen | faux | Exclut la partie métadonnées de la réponse (améliore les performances) |
| page | entier | faux | Numéro de page |
| taille de la page | entier | faux | Nombre d'éléments dans chaque page |
| totalPages (pages totales) | booléen | faux | Indique s'il faut inclure le nombre total de pages dans la réponse de pagination. |
| skipPaging | booléen | faux | Indique s'il faut ignorer la pagination dans la requête et renvoyer tous les événements. |
| dataElementIdScheme (Schéma d'identification de l'élément de données) | chaîne | faux | Schéma d'identification des éléments de données à utiliser pour l'exportation. Les options valides sont UID, CODE et ATTRIBUTE :{ID} |
| categoryOptionComboIdScheme (Schéma d'identification de la combinaison d'options de catégorie) | chaîne | faux | Schéma d'identification des combinaisons d'options d'attribut à utiliser pour l'exportation. Les options valides sont UID, CODE et ATTRIBUTE :{ID} |
| orgUnitIdScheme (Schéma d'identification de l'unité d'organisation) | chaîne | faux | Schéma d'identification des unités d'organisation à utiliser pour l'exportation. Les options valides sont UID, CODE et ATTRIBUTE :{ID} |
| programIdScheme (Schéma d'identification des programmes) | chaîne | faux | Schéma d'identification des programmes à utiliser pour l'exportation. Les options valides sont UID, CODE et ATTRIBUTE :{ID} |
| programmeStageIdScheme (Schéma d'identification des étapes de programme) | chaîne | faux | Schéma d'identification des étapes programme à utiliser pour l'exportation. Les options valides sont UID, CODE et ATTRIBUTE :{ID} |
| idScheme (schéma d'identification) | chaîne | faux | Permet de définir le schéma d'identification  à la fois pour l'élément de données, la combinaison d'options de catégorie, l'unité d'organisation, le programme et l'étape de programme. |
| Ordre | chaîne | faux | Ordre dans lequel les événements doivent être extraits de l'API. Utilisation : order=<property\>:asc/desc - L'ordre croissant est l'ordre par défaut. <br>Propriétés : event | program | programStage | enrollment | enrollmentStatus | orgUnit | orgUnitName | trackedEntityInstance | eventDate | followup | status | dueDate | storedBy | created | lastUpdated | completedBy | completedDate<br> order=orgUnitName :DESC order=lastUpdated:ASC |
| événement | chaîne délimitée par des virgules | faux | Filtre le résultat pour obtenir un ensemble limité d’identifiants en utilisant *event=id1;id2*. |
| skipEventId | booléen | faux | Ignore les identifiants d'événement dans la réponse |
| attributeCc (\*\*) | chaîne | faux | Identifiant de la combinaison de catégories d'attribut (doit être combiné aux options de catégorie d'attribut (*attributCos*)) |
| attributeCos (\*\*) | chaîne | faux | Identifiants d'options de catégorie d'attribut, séparés par ";"(cette clé doit être utilisée avec la combinaison de catégories d'attribut (*attributeCc*)) |
| async | faux &#124; vrai | faux | Indique si l'importation doit être asynchrone ou synchrone. |
| includeDeleted | booléen | faux | S'il est défini sur "vrai", les événements supprimés de façon réversible seront inclus dans le résultat de votre requête. |
| Mode d'utilisateur assigné | enum | faux | Mode de sélection de l'utilisateur assigné ; peut être CURRENT | PROVIDED | NONE | ANY. |
| assignedUser (Utilisateur assigné) | chaînes délimitées par des virgules | faux | Permet de filtrer le résultat de manière à obtenir un ensemble limité d'événements attribués aux UID donnés, en utilisant ceci : *assignedUser=id1;id2*. Ce paramètre ne sera pris en compte que si le assignedUserMode est 'PROVIDED' ou 'null'. L'API va générer une erreur si, par exemple, assignedUserMode=CURRENT et assignedUser=someId |

> **Remarque**
>
> Si la requête ne contient ni `attributeCC` ni `attributeCos`, le serveur renvoie des événements pour toutes les combinaisons d'options d'attribut pour lesquelles l'utilisateur a un accès en lecture.

##### Exemples { #examples }

Requête sur de tous les événements associés aux subordonnées d'une unité d'organisation donnée :

    /api/29/events.json?orgUnit=YuQRtpLP10I&ouMode=CHILDREN

Requête pour tous les événements associés à tous les descendants d'une unité d'organisation donnée, c'est-à-dire toutes les unités d'organisation qui lui sont inférieurs dans la hiérarchie :

    /api/33/events.json?orgUnit=O6uvpzGd5pu&ouMode=DESCENDANTS

La requête pour tous les événements disposant d'un programme et d'une unité d'organisation :

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc

Requête pour tous les événements associés à un programme et à une unité d'organisation, ordonnés par date d'échéance en ordre croissant :

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&order=dueDate

La requête pour les 10 événements avec la date d'événement la plus récente dans un programme et une unité d'organisation - par pagination et ordonnés par date d'échéance en ordre décroissant :

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc
      &order=eventDate:desc&pageSize=10&page=1

La requête pour tous les événements avec un programme et une unité d'organisation pour une instance d'entité suivie donnée :

    /api/33/events.json?orgUnit=DiszpKrYNg8
      &program=eBAyeGv0exc&trackedEntityInstance=gfVxE3ALA9m

Requête pour tous les événements associés à un programme et une unité d'organisation plus ancien(ne) ou égal(e) au 03/02/2014 :

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&endDate=2014-02-03

La requête pour tous les événements associés à une étape de programme, une unité d'organisation et une instance d'entité suivie de l'an 2014 :

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc
      &trackedEntityInstance=gfVxE3ALA9m&startDate=2014-01-01&endDate=2014-12-31

Requête pour des fichiers associés aux valeurs de données d'événement. Si l'on veut récupérer un fichier image, un paramètre supplémentaire peut être fourni pour récupérer l'image dans différentes options de dimensions. Si aucune dimension n'est fournie, le système renvoie l'image originale. Le paramètre sera ignoré si les fichiers ne sont pas des images, par exemple des fichiers PDF. Les valeurs possibles pour les dimensions sont *small(254 x 254), medium(512 x 512), large(1024 x 1024) ou original*. Toute valeur autre que celles mentionnées sera rejetée et l'image originale sera renvoyée.

    /api/33/events/files?eventUid=hcmcWlYkg9u&dataElementUid=C0W4aFuVm4P&dimension=small

Retrieve events with specified Organisation unit and Program, and use _Attribute:Gq0oWTf2DtN_ as
identifier scheme

    /api/events?orgUnit=DiszpKrYNg8&program=lxAQ7Zs9VYR&idScheme=Attribute:Gq0oWTf2DtN

Retrieve events with specified Organisation unit and Program, and use UID as identifier scheme for
orgUnits, Code as identifier scheme for Program stages, and _Attribute:Gq0oWTf2DtN_ as identifier
scheme for the rest of the metadata with assigned attribute.

    api/events.json?orgUnit=DiszpKrYNg8&program=lxAQ7Zs9VYR&idScheme=Attribute:Gq0oWTf2DtN
      &orgUnitIdScheme=UID&programStageIdScheme=Code

#### Requête pour les grilles d'événements { #event-grid-query } 

En plus du point d'extrémité des requêtes d'événements ci-dessus, il existe un point d'extrémité pour les requêtes de grilles d'événements où un format de "grille" d'événements plus compact  est renvoyé. Vous pouvez le faire en interagissant avec /api/events/query.json|xml|xls|csv.

    /api/33/events/query

La plupart des paramètres de requête mentionnés dans la section sur la requête et la lecture d'événements ci-dessus sont valables ici. Toutefois, étant donné que la grille à renvoyer comporte un ensemble spécifique de colonnes qui s'appliquent à toutes les lignes (événements), il est obligatoire de spécifier une étape de programme. Il n'est pas possible de combiner des événements de différents programmes ou étapes de programme dans le renvoi.

Le renvoi d'événements appartenant à une même étape de programme ouvre également la voie à de nouvelles fonctionnalités, par exemple le tri et la recherche d'événements sur la base des valeurs de leurs éléments de données. api/events/query prend en charge ces fonctionnalités. Voici quelques exemples :

Une requête pour obtenir une grille d'événements qui contient uniquement des éléments de données sélectionnés pour une étape de programme :

    /api/33/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk
      &dataElement=qrur9Dvnyt5,fWIAEtYVEGk,K6uUAvq500H&order=lastUpdated:desc
      &pageSize=50&page=1&totalPages=true

Une requête qui renvoie une grille d'événements qui contient tous les éléments de données d'une étape de programme :

    /api/33/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk
      &includeAllDataElements=true

Une requête pour filtrer les événements sur la base de la valeur de l'élément de données

    /api/33/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk
      &filter=qrur9Dvnyt5:GT:20:LT:50

Outre le filtrage, l'exemple ci-dessus illustre également une chose : le fait qu'il n'y a pas d'éléments de données mentionnés à renvoyer dans la grille. Dans ce cas, par défaut, le système ne renvoie que les éléments de données marqués "Afficher dans le rapport" dans la configuration des étapes de programme.

Nous pouvons également étendre la requête ci-dessus pour obtenir une grille triée (par ordre ascendant ou descendant) sur la base des valeurs de l'élément de données

    /api/33/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk
      &filter=qrur9Dvnyt5:GT:20:LT:50&order=qrur9Dvnyt5:desc

#### Filtres d'événements { #webapi_event_filters }

Pour créer, lire, mettre à jour et supprimer des filtres d'événements, vous pouvez interagir avec la ressource `/api/eventFilters`.

    /api/33/eventFilters

##### Création et mise à jour d'une définition de filtre d'événement { #create-and-update-an-event-filter-definition } 

Pour créer et mettre à jour un filtre d'événement dans le système, vous devez utiliser la ressource *eventFilters*. La méthode *POST* est utilisée pour créer et la méthode *PUT* est utilisée pour la mise à jour. Les définitions des filtres d'événements sont utilisées dans l'application Saisie Tracker pour afficher les "listes de tâches" prédéfinies pertinentes sur l'interface utilisateur du Tracker.



Tableau : Charge de la requête

| Propriété de requête | Description ; | Exemple |
|---|---|---|
| nom | Nom du filtre. | "name":"My working list" |
| Description | Une description du filtre. | "description":"for listing all events assigned to me". |
| programme | L'uid du programme. | "program" : "a3kGcGDCuk6" |
| Étape du programme | L'uid de l'étape de programme. | "programStage" : "a3kGcGDCuk6" |
| eventQueryCriteria | Objet contenant des paramètres pour les requêtes, le tri et le filtrage des événements. | "eventQueryCriteria": {     "organisationUnit":"a3kGcGDCuk6",     "status": "COMPLETED",     "createdDate": {       "from": "2014-05-01",       "to": "2019-03-20"     },     "dataElements": ["a3kGcGDCuk6:EQ:1", "a3kGcGDCuk6"],     "filters": ["a3kGcGDCuk6:EQ:1"],     "programStatus": "ACTIVE",     "ouMode": "SELECTED",     "assignedUserMode": "PROVIDED",     "assignedUsers" : ["a3kGcGDCuk7", "a3kGcGDCuk8"],     "followUp": false,     "trackedEntityInstance": "a3kGcGDCuk6",     "events": ["a3kGcGDCuk7", "a3kGcGDCuk8"],     "fields": "eventDate,dueDate",     "order": "dueDate:asc,createdDate:desc"   } |



Tableau : Définition des critères de requêtes d'événements

||||
|---|---|---|
| Suivi | Permet de filtrer les événements en fonction de l'indicateur de suivi de l'inscription. Les valeurs possibles sont true | false. | "followUp": true |
| organisationUnit | Utilisée pour spécifier l'identifiant de l'unité d'organisation | "organisationUnit": "a3kGcGDCuk7" |
| ouMode (Mode d'unité d'organisation) | Utilisée pour spécifier le mode de sélection des unités d'organisation. Les valeurs possibles sont SELECTED| CHILDREN|DESCENDANTS|ACCESSIBLE|CAPTURE|ALL | "ouMode": "SELECTED" |
| Mode d'utilisateur assigné | Utilisée pour spécifier le mode de sélection de l'utilisateur pour les événements. Les valeurs possibles sont CURRENT| PROVIDED| NONE | ANY. Voir le tableau ci-dessous pour comprendre ce que chaque valeur indique. Si elle est définie sur PROVIDED (ou "null"), les sections assignedUsers non vides dans la charge seront pris en compte. | "assignedUserMode": "PROVIDED" |
| assignedUser (Utilisateur assigné) | Utilisée pour spécifier une liste d'utilisateurs assignés à des événements. À utiliser avec le mode d'utilisateur assigné PROVIDED ci-dessus. | "assignedUsers": ["a3kGcGDCuk7", "a3kGcGDCuk8"] |
| displayOrderColumns | Utilisée pour spécifier l'ordre de sortie des colonnes | "displayOrderColumns": ["eventDate", "dueDate", "program"] |
| Ordre | To specify ordering/sorting of fields and its directions in comma separated values. A single item in order is of the form "dataItem:direction". | "order"="a3kGcGDCuk6:desc,eventDate:asc" |
| Filtres de données | Permet de spécifier les filtres à appliquer lors de l'établissement de la liste des événements | "dataFilters"=[{       "dataItem": "abcDataElementUid",       "le": "20",       "ge": "10",       "lt": "20",       "gt": "10",       "in": ["India", "Norway"],       "like": "abc",       "dateFilter": {         "startDate": "2014-05-01",         "endDate": "2019-03-20",         "startBuffer": -5,         "endBuffer": 5,         "period": "LAST_WEEK",         "type": "RELATIVE"       }     }] |
| statut | Tout statut d'événement valide | "eventStatus": "COMPLETED" |
| événements | permet de spécifier une liste d'événements | "events"=["a3kGcGDCuk6"] |
| completedDate | DateFilterPeriod object date filtering based on completed date. | "completedDate": {     "startDate": "2014-05-01",     "endDate": "2019-03-20",     "startBuffer": -5,     "endBuffer": 5,     "period": "LAST_WEEK",     "type": "RELATIVE"   } |
| eventDate (date de l'événement) | DateFilterPeriod object date filtering based on event date. | "eventDate": {     "startBuffer": -5,     "endBuffer": 5,     "type": "RELATIVE"   } |
| dueDate | DateFilterPeriod object date filtering based on due date. | "dueDate": {     "period": "LAST_WEEK",     "type": "RELATIVE"   } |
| lastUpdatedDate | DateFilterPeriod object date filtering based on last updated date. | "lastUpdatedDate": {     "startDate": "2014-05-01",     "endDate": "2019-03-20",     "type": "ABSOLUTE"   } |



Tableau : Définition de l'objet DateFilterPeriod

||||
|---|---|---|
| type | Spécifie si le type de période "date" est ABSOLUTE (absolu) ou RELATIVE (relatif) | "type" : "RELATIVE" |
| période | Spécifie si une période relative doit être utilisée. Ceci est applicable uniquement lorsque "type" est RELATIVE. (voir la section [Périodes relatives](#webapi_date_relative_period_values) pour consulter les périodes relatives prises en charge) | "period" : "THIS_WEEK" |
| date de début | Date de début absolue ; applicable uniquement lorsque le "type" est ABSOLUTE. | "startDate":"2014-05-01" |
| date de fin | Date de fin absolue ; applicable uniquement lorsque le "type" est ABSOLUTE. | "startDate":"2014-05-01" |
| startBuffer | Date de début personnalisée relative ; applicable uniquement lorsque le "type" est RELATIVE. | "startBuffer":-10 |
| endBuffer | Date de fin personnalisée relative ; applicable uniquement lorsque le "type" est RELATIVE. | "startDate":+10 |

Les modes de sélection des utilisateurs assignés disponibles sont expliqués dans le tableau suivant.



Tableau : Modes de sélection des utilisateurs assignés (attribution d'événements)

| Mode | Description ; |
|---|---|
| ACTUEL | Attribué à l'utilisateur actuellement connecté |
| FOURNI | Attribué aux utilisateurs indiqués dans le paramètre "assignedUser". |
| AUCUN | Attribué à aucun utilisateur. |
| TOUT | Attribué à tout utilisateur. |

Un exemple de charge pouvant être utilisée pour créer/mettre à jour un filtre d'événement est présenté ci-dessous.

```json
{
  "program": "ur1Edk5Oe2n",
  "description": "Simple Filter for TB events",
  "name": "TB events",
  "eventQueryCriteria": {
    "organisationUnit":"DiszpKrYNg8",
    "eventStatus": "COMPLETED",
    "eventDate": {
      "startDate": "2014-05-01",
      "endDate": "2019-03-20",
      "startBuffer": -5,
      "endBuffer": 5,
      "period": "LAST_WEEK",
      "type": "RELATIVE"
    },
    "dataFilters": [{
      "dataItem": "abcDataElementUid",
      "le": "20",
      "ge": "10",
      "lt": "20",
      "gt": "10",
      "in": ["India", "Norway"],
      "like": "abc"
    },
    {
      "dataItem": "dateDataElementUid",
      "dateFilter": {
        "startDate": "2014-05-01",
        "endDate": "2019-03-20",
        "type": "ABSOLUTE"
      }
    },
    {
      "dataItem": "anotherDateDataElementUid",
      "dateFilter": {
        "startBuffer": -5,
        "endBuffer": 5,
        "type": "RELATIVE"
      }
    },
    {
      "dataItem": "yetAnotherDateDataElementUid",
      "dateFilter": {
        "period": "LAST_WEEK",
        "type": "RELATIVE"
      }
    }],
    "programStatus": "ACTIVE"
  }
}
```


##### Récupération et suppression des filtres d'événements { #retrieving-and-deleting-event-filters } 

Un filtre d'événement spécifique peut être récupéré en utilisant l'API suivante

    GET /api/33/eventFilters/{uid}

Tous les filtres d'événements peuvent être récupérés en utilisant l'API suivante.

    GET /api/33/eventFilters?fields=*

Tous les filtres d'événements pour un programme spécifique peuvent être récupérés à l'aide de l'API suivante :

    GET /api/33/eventFilters?filter=program:eq:IpHINAT79UW

Un filtre d'événement peut être supprimé à l'aide de l'API suivante

    DELETE /api/33/eventFilters/{uid}

### Relations { #relationships } 
Les relations sont des liens entre deux entités dans le Tracker. Ces entités peuvent être des instances d'entités suivies, des inscriptions et des événements.

Il existe plusieurs points d'extrémité qui vous permettent de voir, de créer, de supprimer et de mettre à jour les relations. Le plus courant est /api/trackedEntityInstances, où vous pouvez inclure des relations dans la charge pour les créer, les mettre à jour ou les supprimer si vous les omettez - de la même manière que vous travaillez avec les inscriptions et les événements dans le même point d'extrémité. Tous les points d'extrémité du Tracker, c'est-à-dire /api/trackedEntityInstances, /api/enrollments et /api/events listent également leurs relations si une requête est spécifiée dans le filtre de champ.

Toutefois, le point d'extrémité communément utilisé pour les relations est /api/relationships. Il fournit toutes les opérations CRUD normales pour les relations.

Vous pouvez afficher une liste de relations par instance d'entité suivie, inscription ou événement :


    GET /api/relationships?[tei={teiUID}|enrollment={enrollmentUID}|event={eventUID}]


Cette requête renverra une liste de toutes les relations que vous pouvez voir. Cela inclut l'instance d'entité suivie, l'inscription ou l'événement que vous avez spécifié. Chaque relation est représentée par le JSON suivant :

```json
{
  "relationshipType": "dDrh5UyCyvQ",
  "relationshipName": "Mother-Child",
  "relationship": "t0HIBrc65Rm",
  "bidirectional": false,
  "from": {
    "trackedEntityInstance": {
      "trackedEntityInstance": "vOxUH373fy5"
    }
  },
  "to": {
    "trackedEntityInstance": {
      "trackedEntityInstance": "pybd813kIWx"
    }
  },
  "created": "2019-04-26T09:30:56.267",
  "lastUpdated": "2019-04-26T09:30:56.267"
}
```

Vous pouvez également visualiser les relations spécifiées en utilisant le point d'extrémité suivant :

    GET /api/relationships/<id>

Pour créer ou mettre à jour une relation, vous pouvez utiliser les points d'extrémité suivants :

    POST /api/relationships
    PUT /api/relationships

Et utilisez la structure de charge suivante :

```json
{
  "relationshipType": "dDrh5UyCyvQ",
  "from": {
    "trackedEntityInstance": {
      "trackedEntityInstance": "vOxUH373fy5"
    }
  },
  "to": {
    "trackedEntityInstance": {
      "trackedEntityInstance": "pybd813kIWx"
    }
  }
}
```

Pour supprimer une relation, vous pouvez utiliser ce point d'extrémité :

      DELETE /api/relationships/<id>

Dans nos exemples de charges, nous utilisons une relation entre instances d'entités suivies. C'est pourquoi les propriétés "from" et "to" de nos charges incluent des objets "trackedEntityInstance". Si votre relation inclut d'autres entités, vous pouvez utiliser les propriétés suivantes :

```json
{
  "enrollment": {
    "enrollment": "<id>"
  }
}
```

```json
{
  "event": {
    "event": "<id>"
  }
}
```

Une relation peut être supprimée de façon réversible. Dans ce cas, vous pouvez utiliser le paramètre de requête `includeDeleted` pour voir la relation.


    GET /api/relationships?tei=pybd813kIWx?includeDeleted=true


### Stratégies de mise à jour { #webapi_tei_update_strategies }

Deux stratégies de mise à jour sont prises en charge pour les trois points d'extrémité du Tracker : l'inscription et la création d'événements. Ceci est utile lorsque vous avez généré un identifiant au niveau du client et que vous n'êtes pas sûr s'il a été créé ou non sur le serveur.



Tableau : Stratégies du Tracker disponibles

| Paramètre | Description ; |
|---|---|
| CRÉER | Permet de créer uniquement. C'est le fonctionnement par défaut. |
| CREATE_AND_UPDATE | Ce paramètre essaie de trouver une correspondance avec l'ID, s'il existe, puis de le mettre à jour. S'il n'existe pas, il le crée. |

Pour modifier ce paramètre, utilisez le paramètre de stratégie :

    POST /api/33/trackedEntityInstances?strategy=CREATE_AND_UPDATE

### Suppression en bloc dans le Tracker { #webapi_tracker_bulk_deletion }

La suppression en bloc d'objets Tracker fonctionne de la même manière que l'ajout et la mise à jour d'objets Tracker. La seule différence est que la stratégie d'importation (`importStrategy`) est *DELETE*.

*Exemple : Suppression en bloc d'instances d'entités suivies :*

```json
{
  "trackedEntityInstances": [
    {
      "trackedEntityInstance": "ID1"
    }, {
      "trackedEntityInstance": "ID2"
    }, {
      "trackedEntityInstance": "ID3"
    }
  ]
}
```

```bash
curl -X POST -d @data.json -H "Content-Type: application/json"
  "http://server/api/33/trackedEntityInstances?strategy=DELETE"
```

*Exemple : Suppression en bloc d'inscriptions :*

```json
{
  "enrollments": [
    {
       "enrollment": "ID1"
    }, {
      "enrollment": "ID2"
    }, {
      "enrollment": "ID3"
    }
  ]
}
```

```bash
curl -X POST -d @data.json -H "Content-Type: application/json"
  "http://server/api/33/enrollments?strategy=DELETE"
```

*Exemple : Suppression en bloc d'événements:*

```json
{
  "events": [
    {
      "event": "ID1"
    }, {
      "event": "ID2"
    }, {
      "event": "ID3"
    }
  ]
}
```

```bash
curl -X POST -d @data.json -H "Content-Type: application/json"
  "http://server/api/33/events?strategy=DELETE"
```

### Réutilisation d'identifiants et suppression d'éléments via les méthodes POST et PUT { #webapi_updating_and_deleting_items }

Les points d'extrémité du Tracker */trackedEntityInstances*, */enrollments*, */events* prennent en charge les opérations CRUD. Le système garde la trace des identifiants utilisés. Ainsi, un élément qui a été créé puis supprimé (par exemple, un événement ou une inscription) ne peut pas être créé ou mis à jour à nouveau. Si l'on tente de supprimer un élément déjà supprimé, le système renvoie une réponse de succès, car la suppression d'un élément déjà supprimé n'implique aucun changement.

Le système ne permet pas de supprimer un élément via une méthode de mise à jour (*PUT*) ou de création (*POST*). Par conséquent, l'attribut *deleted* est ignoré dans les méthodes *PUT* et *POST*, et dans la méthode *POST*, il est défini par défaut sur *false*.

### Paramètres d'importation { #webapi_import_parameters }

Le processus d'importation peut être personnalisé à l'aide d'un ensemble de paramètres d'importation :



Tableau : Paramètres d'importation

| Paramètre | Valeurs (par défaut en premier) | Description ; |
|---|---|---|
| dataElementIdScheme (Schéma d'identification de l'élément de données) | identifiant &#124; nom &#124; code &#124; attribut:ID | Propriété de l'objet d'élément de données à utiliser pour faire correspondre les données. |
| orgUnitIdScheme (Schéma d'identification de l'unité d'organisation) | identifiant &#124; nom &#124; code &#124; attribut:ID | Propriété de l'objet d'unité d'organisation à utiliser pour faire correspondre les données. |
| idScheme (schéma d'identification) | id | name | code| attribute:ID | Property of all objects including data elements, org units and category option combos, to use to map the data values. |
| dryRun (essai) | faux &#124; vrai | Pour sauvegarder les modifications sur le serveur ou pour renvoyer le résumé de l'importation. |
| strategy | CRÉER &#124; METTRE À JOUR &#124; CRÉER _ET_METTRE À JOUR &#124; SUPPRIMER | Sauvegarde des objets de tous les statuts d'importation, nouveaux ou mis à jour, sur le serveur. |
| skipNotifications | vrai &#124; faux | Indicates whether to send notifications for completed events. |
| skipFirst | vrai &#124; faux | Relevant for CSV import only. Indicates whether CSV file contains a header row which should be skipped. |
| importReportMode (mode de rapport d'importation) | FULL, ERRORS, DEBUG | Définit le mode de `rapport d'importation` ; contrôle ce qui est rapporté après l'importation. `ERRORS` n'inclut que les *rapports d'objets* pour les objets qui contiennent des erreurs. `FULL` renvoie un *rapport d'objet* pour tous les objets importés, et `DEBUG` renvoie la même chose plus un nom pour l'objet (si disponible). |

#### CSV Import / Export { #webapi_events_csv_import_export }

In addition to XML and JSON for event import/export, in DHIS2.17 we
introduced support for the CSV format. Support for this format builds on
what was described in the last section, so here we will only write about
what the CSV specific parts are.

To use the CSV format you must either use the `/api/events.csv`
endpoint, or add *content-type: text/csv* for import, and *accept:
text/csv* for export when using the `/api/events` endpoint.

The order of column in the CSV which are used for both export and import
is as follows:



Table: CSV column

| Index | Clé | Type | Description ; |
|---|---|---|---|
| 1 | événement | identifiant | Identifier of event |
| 2 | statut | enum | Statut de l'événement, peut être ACTIVE | COMPLETED | VISITED | SCHEDULE | OVERDUE | SKIPPED |
| 3 | programme | identifiant | Identifiant de programme |
| 4 | Étape du programme | identifiant | Identifiant de l'étape de programme |
| 5 | inscription | identifiant | Identifier of enrollment (program instance) |
| 6 | orgUnit (Unité d'organisation) | identifiant | Identifiant de l'unité d'organisation |
| 7 | eventDate (date de l'événement) | date | Date de l'événement |
| 8 | dueDate | date | Due Date |
| 9 | latitude | double | Latitude where event happened |
| 10 | longitude | double | Longitude where event happened |
| 11 | élément de données | identifiant | Identifiant de l'élément de données |
| 12 | valeur | chaîne | Value / measure of event |
| 13 | storedBy (Stockée par) | chaîne | Event was stored by (defaults to current user) |
| 14 | Fourni ailleurs | booléen | Was this value collected somewhere else |
| 14 | completedDate | date | Completed date of event |
| 14 | completedBy (effectué par) | chaîne | Username of user who completed event |

*Example of 2 events with 2 different data value
    each:*

```csv
EJNxP3WreNP,COMPLETED,<pid>,<psid>,<enrollment-id>,<ou>,2016-01-01,2016-01-01,,,<de>,1,,
EJNxP3WreNP,COMPLETED,<pid>,<psid>,<enrollment-id>,<ou>,2016-01-01,2016-01-01,,,<de>,2,,
qPEdI1xn7k0,COMPLETED,<pid>,<psid>,<enrollment-id>,<ou>,2016-01-01,2016-01-01,,,<de>,3,,
qPEdI1xn7k0,COMPLETED,<pid>,<psid>,<enrollment-id>,<ou>,2016-01-01,2016-01-01,,,<de>,4,,
```

#### Import strategy: SYNC { #webapi_sync_import_strategy }

The import strategy SYNC should be used only by internal synchronization
task and not for regular import. The SYNC strategy allows all 3
operations: CREATE, UPDATE, DELETE to be present in the payload at the
same time.

### Tracker Ownership Management { #webapi_tracker_ownership_management }

A new concept called Tracker Ownership is introduced from 2.30. There
will now be one owner organisation unit for a tracked entity instance in
the context of a program. Programs that are configured with an access
level of *PROTECTED* or *CLOSED* will adhere to the ownership
privileges. Only those users belonging to the owning org unit for a
tracked entity-program combination will be able to access the data
related to that program for that tracked entity.

#### Tracker Ownership Override : Break the Glass { #webapi_tracker_ownership_override_api }

It is possible to temporarily override this ownership privilege for a
program that is configured with an access level of *PROTECTED*. Any user
will be able to temporarily gain access to the program related data, if
the user specifies a reason for accessing the tracked entity-program
data. This act of temporarily gaining access is termed as *breaking the
glass*. Currently, the temporary access is granted for 3 hours. DHIS2
audits breaking the glass along with the reason specified by the user.
It is not possible to gain temporary access to a program that has been
configured with an access level of *CLOSED*. To break the glass for a
tracked entity program combination, you can issue a POST request as
shown:

    /api/33/tracker/ownership/override?trackedEntityInstance=DiszpKrYNg8
      &program=eBAyeGv0exc&reason=patient+showed+up+for+emergency+care

#### Tracker Ownership Transfer { #webapi_tracker_ownership_transfer_api }

It is possible to transfer the ownership of a tracked entity-program
from one org unit to another. This will be useful in case of patient
referrals or migrations. Only an owner (or users who have broken the
glass) can transfer the ownership. To transfer ownership of a tracked
entity-program to another organisation unit, you can issue a PUT request
as shown:

    /api/33/tracker/ownership/transfer?trackedEntityInstance=DiszpKrYNg8
      &program=eBAyeGv0exc&ou=EJNxP3WreNP


## Potential Duplicates   { #potential-duplicates } 

Potential duplicates are records we work with in the data deduplication feature. Due to the nature of the deduplication feature, this API endpoint is somewhat restricted.

A potential duplicate represents a pair of records which are suspected to be a duplicate.

The payload of a potential duplicate looks like this:

```json
{
  "original": "<id>",
  "duplicate": "<id>",
  "status": "OPEN|INVALID|MERGED"
}
```

You can retrieve a list of potential duplicates using the following endpoint:

    GET /api/potentialDuplicates

| Nom du paramètre | Description ; | Type | Valeurs autorisées |
|---|---|---|---|
| teis | List of tracked entity instances | List of string (separated by comma)| existing tracked entity instance id |
| statut | Potential duplicate status | chaîne | `OPEN <default>`, `INVALID`, `MERGED`, `ALL` |

| Status code | Description ;
|---|---|
| 400 | Invalid input status

You can inspect individual potential duplicate records:

    GET /api/potentialDuplicates/<id>

| Status code | Description ;
|---|---|
| 404 | Potential duplicate not found

To create a new potential duplicate, you can use this endpoint:

    POST /api/potentialDuplicates

The payload you provide must include IDs of Original and Duplicate TEIs.

```json
{
  "original": "<id>",
  "duplicate": "<id>"
}
```

| Status code | Description ;
|---|---|
| 400 | Input original or duplicate is null or has invalid id
| 403 | User do not have access to read origianl or duplicate TEIs
| 404 | TEI not found
| 409 | Pair of original and duplicate TEIs already existing

To update a potential duplicate status:

    PUT /api/potentialDuplicates/<id>

| Nom du paramètre | Description ; | Type | Valeurs autorisées |
|---|---|---|---|
| statut | Potential duplicate status | chaîne | `OPEN`, `INVALID`, `MERGED` |

| Status code | Description ;
|---|---|
| 400 | You can't update a potential duplicate to MERGED as this is possible only by a merging request
| 400 | You can't update a potential duplicate that is already in a MERGED status

## Merging Tracked Entity Instances { #merging-tracked-entity-instances } 
Tracked entity instances can now be merged together if they are viable. To initiate a merge, the first step is to define two tracked entity instances as a Potential Duplicate. The merge endpoint
will move data from the duplicate tracked entity instance to the original tracked entity instance, and delete the remaining data of the duplicate.

To merge a Potential Duplicate, or the two tracked entity instances the Potential Duplicate represents, the following endpoint can be used:

    POST /api/potentialDuplicates/<id>/merge

| Nom du paramètre | Description ; | Type | Valeurs autorisées |
|---|---|---|---|
| mergeStrategy | Strategy to use for merging the potentialDuplicate | enum | AUTO(default) or MANUAL |

The endpoint accepts a single parameter, "mergeStrategy", which decides which strategy to use when merging. For the AUTO strategy, the server will attempt to merge the two tracked entities
automatically, without any input from the user. This strategy only allows merging tracked entities without conflicting data (See examples below). The other strategy, MANUAL, requires the
user to send in a payload describing how the merge should be done. For examples and rules for each strategy, see their respective sections below.

### Merge Strategy AUTO { #merge-strategy-auto } 
The automatic merge will evaluate the mergability of the two tracked entity instances, and merge them if they are deemed mergable. The mergability is based on whether the two tracked entity instances
has any conflicts or not. Conflicts refers to data which cannot be merged together automatically. Examples of possible conflicts are:
- The same attribute has different values in each tracked entity instance
- Both tracked entity instances are enrolled in the same program
- Tracked entity instances have different types

If any conflict is encountered, an errormessage is returned to the user.

When no conflicts are found, all data in the duplicate that is not already in the original will be moved over to the original. This includes attribute values, enrollments (Including events) and relationships.
After the merge completes, the duplicate is deleted and the potentialDuplicate is marked as MERGED.

When requesting an automatic merge like this, a payload is not required and will be ignored.

### Merge Strategy MANUAL { #merge-strategy-manual } 
The manual merge is suitable when the merge has resolvable conflicts, or when not all the data is required to be moved over during a merge. For example, if an attribute has different values in both tracked
entity instances, the user can specify whether to keep the original value, or move over the duplicate's value. Since the manual merge is the user explicitly requesting to move data, there are some different
checks being done here:
- Relationship cannot be between the original and the duplicate (This results in an invalid self-referencing relationship)
- Relationship cannot be of the same type and to the same object in both tracked entity instances (IE. between original and other, and duplicate and other; This would result in a duplicate relationship)

There are two ways to do a manual merge: With and without a payload.

When a manual merge is requested without a payload, we are telling the API to merge the two tracked entity instances without moving any data. In other words, we are just removing the duplicate and marking the
potentialDuplicate MERGED. This might be valid in a lot of cases where the tracked entity instance was just created, but not enrolled for example.

Otherwise, if a manual merge is requested with a payload, the payload refers to what data should be moved from the duplicate to the original. The payload looks like this:
```json
{
  "trackedEntityAttributes": ["B58KFJ45L9D"],
  "enrollments": ["F61SJ2DhINO"],
  "relationships": ["ETkkZVSNSVw"]
}
```

This payload contains three lists, one for each of the types of data that can be moved. `trackedEntityAttributes` is a list of uids for tracked entity attributes, `enrollments` is a list of uids for enrollments and `relationships` 
a list of uids for relationships. The uids in this payload have to refer to data that actually exists on the duplicate. There is no way to add new data or change data using the merge endpoint - Only moving data.


### Additional information about merging { #additional-information-about-merging } 
Currently it is not possible to merge tracked entity instances that are enrolled in the same program, due to the added complexity. A workaround is to manually remove the enrollments from one of the tracked entity
instances before starting the merge.

All merging is based on data already persisted in the database, which means the current merging service is not validating that data again. This means if data was already invalid, it will not be reported during the merge.
The only validation done in the service relates to relationships, as mentioned in the previous section.



## Program Notification Template { #program-notification-template } 

Program Notification Template lets you create message templates which can be sent as a result of different type of events.
Message and Subject templates will be translated into actual values and can be sent to the configured destination. Each program notification template will be
transformed to either MessageConversation object or ProgramMessage object based on external or internal notificationRecipient. These intermediate objects will
only contain translated message and subject text.
There are multiple configuraiton parameters in Program Notification Template which are critical for correct working of notifications.
All those are explained in the table below.

    POST /api/programNotificationTemplates

```json
{
    "name": "Case notification",
    "notificationTrigger": "ENROLLMENT",
    "subjectTemplate": "Case notification V{org_unit_name}",
    "displaySubjectTemplate": "Case notification V{org_unit_name}",
    "notifyUsersInHierarchyOnly": false,
    "sendRepeatable": false,
    "notificationRecipient": "ORGANISATION_UNIT_CONTACT",
    "notifyParentOrganisationUnitOnly": false,
    "displayMessageTemplate": "Case notification A{h5FuguPFF2j}",
    "messageTemplate": "Case notification A{h5FuguPFF2j}",
    "deliveryChannels": [
        "EMAIL"
    ]
}
```

The fields are explained in the following table.


Table: Program Notification Template payload

| Champ | Obligatoire | Description ; | Valeurs |
|---|---|---|---|
| nom | Oui | name of Program Notification Template | case-notification-alert |
| notificationTrigger | Oui | When notification should be triggered. Possible values are ENROLLMENT, COMPLETION, PROGRAM_RULE, SCHEDULED_DAYS_DUE_DATE| ENROLLMENT (inscription) |
| subjectTemplate | Non | Subject template string | Case notification V{org_unit_name} |
| messageTemplate | Oui | Message template string | Case notification A{h5FuguPFF2j} |
| notificationRecipient | OUI | Who is going to receive notification. Possible values are USER_GROUP, ORGANISATION_UNIT_CONTACT, TRACKED_ENTITY_INSTANCE, USERS_AT_ORGANISATION_UNIT, DATA_ELEMENT, PROGRAM_ATTRIBUTE, WEB_HOOK  | USER_GROUP |
| deliveryChannels | Non | Which channel should be used for this notification. It can be either SMS, EMAIL or HTTP | SMS |
| sendRepeatable | Non | Whether notification should be sent multiple times | faux |

NOTE: WEB_HOOK notificationRecipient is used only to POST http request to an external system. Make sure to choose HTTP delivery channel when using WEB_HOOK.

### Retrieving and deleting Program Notification Template { #retrieving-and-deleting-program-notification-template } 

The list of Program Notification Templates can be retrieved using GET.

    GET /api/programNotificationTemplates

For one particular Program Notification Template.

    GET /api/33/programNotificationTemplates/{uid}

To get filtered list of Program Notification Templates

    GET /api/programNotificationTemplates/filter?program=<uid>
    GET /api/programNotificationTemplates/filter?programStage=<uid>

Program Notification Template can be deleted using DELETE.

    DELETE /api/33/programNotificationTemplates/{uid}


## Program Messages { #program-messages } 

Program message lets you send messages to tracked entity instances,
contact addresses associated with organisation units, phone numbers and
email addresses. You can send messages through the `messages` resource.

    /api/33/messages

### Sending program messages { #sending-program-messages } 

Program messages can be sent using two delivery channels:

  - SMS (SMS)

  - Email address (EMAIL)

Program messages can be sent to various recipients:

  - Tracked entity instance: The system will look up attributes of value
    type PHONE_NUMBER or EMAIL (depending on the specified delivery
    channels) and use the corresponding attribute values.

  - Organisation unit: The system will use the phone number or email
    information registered for the organisation unit.

  - List of phone numbers: The system will use the explicitly defined
    phone numbers.

  - List of email addresses: The system will use the explicitly defined
    email addresses.

Below is a sample JSON payload for sending messages using POST requests.
Note that message resource accepts a wrapper object named
`programMessages` which can contain any number of program messages.

    POST /api/33/messages

```json
{
  "programMessages": [{
    "recipients": {
      "trackedEntityInstance": {
        "id": "UN810PwyVYO"
      },
      "organisationUnit": {
        "id": "Rp268JB6Ne4"
      },
      "phoneNumbers": [
        "55512345",
        "55545678"
      ],
      "emailAddresses": [
        "johndoe@mail.com",
        "markdoe@mail.com"
      ]
    },
    "programInstance": {
      "id": "f3rg8gFag8j"
    },
    "programStageInstance": {
      "id": "pSllsjpfLH2"
    },
    "deliveryChannels": [
      "SMS", "EMAIL"
    ],
    "notificationTemplate": "Zp268JB6Ne5",
    "subject": "Outbreak alert",
    "text": "An outbreak has been detected",
    "storeCopy": false
  }]
}
```

The fields are explained in the following table.



Table: Program message payload

| Champ | Obligatoire | Description ; | Valeurs |
|---|---|---|---|
| recipients | Oui | Recipients of the program message. At least one recipient must be specified. Any number of recipients / types can be specified for a message. | Can be trackedEntityInstance, organisationUnit, an array of phoneNumbers or an array of emailAddresses. |
| programInstance | Either this or programStageInstance required | The program instance / enrollment. | Enrollment ID. |
| programStageInstance | Either this or programInstance required | The program stage instance / event. | Event ID. |
| deliveryChannels | Oui | Array of delivery channels. | SMS &#124; EMAIL |
| subject | Non | The message subject. Not applicable for SMS delivery channel. | Text. |
| texte | Oui | The message text. | Text. |
| storeCopy | Non | Whether to store a copy of the program message in DHIS2. | false (default) &#124; true |

A minimalistic example for sending a message over SMS to a tracked
entity instance looks like this:

```bash
curl -d @message.json "https://play.dhis2.org/demo/api/33/messages"
  -H "Content-Type:application/json" -u admin:district
```

```json
{
  "programMessages": [{
    "recipients": {
      "trackedEntityInstance": {
        "id": "PQfMcpmXeFE"
      }
    },
    "programInstance": {
      "id": "JMgRZyeLWOo"
    },
    "deliveryChannels": [
      "SMS"
    ],
    "text": "Please make a visit on Thursday"
  }]
}
```

### Retrieving and deleting program messages { #retrieving-and-deleting-program-messages } 

The list of messages can be retrieved using GET.

    GET /api/33/messages

To get the list of sent tracker messages, the below endpoint can be used. ProgramInstance or ProgramStageInstance uid has to be provided.

    GET /api/33/messages/scheduled/sent?programInstance={uid}
    GET /api/33/messages/scheduled/sent?programStageInstance={uid}

To get the list of all scheduled message

    GET /api/33/messages/scheduled
    GET /api/33/messages/scheduled?scheduledAt=2020-12-12

One particular message can also be retrieved using GET.

    GET /api/33/messages/{uid}

Message can be deleted using DELETE.

    DELETE /api/33/messages/{uid}


### Querying program messages { #querying-program-messages } 

The program message API supports program message queries based on
request parameters. Messages can be filtered based on below mentioned
query parameters. All requests should use the GET HTTP verb for
retrieving information.



Table: Query program messages API

| Paramètre | URL |
|---|---|
| programInstance | /api/33/messages?programInstance=6yWDMa0LP7 |
| programStageInstance | /api/33/messages?programStageInstance=SllsjpfLH2 |
| trackedEntityInstance | /api/33/messages?trackedEntityInstance=xdfejpfLH2 |
| organisationUnit | /api/33/messages?ou=Sllsjdhoe3 |
| processedDate | /api/33/messages?processedDate=2016-02-01 |

