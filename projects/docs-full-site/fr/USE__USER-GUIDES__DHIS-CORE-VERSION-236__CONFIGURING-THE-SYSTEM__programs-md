---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.36/src/user/configure-programs-in-the-maintenance-app.md"
revision_date: "2021-06-14"
tags:
    - Utilisation
    - DHIS core version 2.36
---

# Configurer les programmes dans l'application Maintenance { #configure_programs_in_maintenance_app }

## À propos des programmes { #about_program_maintenance_app }

Traditionally, public health information systems have been reporting aggregated data of service provision across its health programs. This does not allow you to trace the people provided with these services. In DHIS2, you can define your own programs with stages. These programs are an essential part of the "tracker" functionality which lets you track individual records. You can also track other ‘entities’ such as wells or insurances. You can create two types of programs:

<table>
<caption>Types de programmes</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Types de programme</p></th>
<th><p>Description</p></th>
<th><p>Exemples d'application</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Programme d'événement</p></td>
<td><p>Événement unique <em>sans</em> programme d'enregistrement (programme anonyme ou SEWoR)</p>
<p>Les événements individuels anonymes sont suivis par le système de santé. Aucune personne ou entité n'est rattachée à ces opérations individuelles.</p>
<p>N'a qu'une seule étape de programme.</p></td>
<td><p>Enregistrer les cas sanitaires sans enregistrer aucune information dans le système.</p>
<p>Enregistrer des données d'enquête ou des listes de surveillance.</p></td>
</tr>
<tr class="even">
<td><p>Programme Tracker</p></td>
<td><p>Événement unique <em>avec</em> programme d'enregistrement (SEWR)</p>
<p>Une entité (personne, produit, etc.) est suivie à travers chaque opétarion individuelle avec le système de santé</p>
<p>N'a qu'une seule étape de programme.</p>
<p>Une instance d'entité suivie (TEI) ne peut s'inscrire au programme qu'une seule fois.</p></td>
<td><p>Enregistrer l'acte de naissance et l'acte de décès.</p></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Evénements multiples <em>avec</em> programme d'enregistrement (MEWR)</p>
<p>Une entité (personne, produit, etc.) est suivie à travers chaque opération individuelle avec le système de santé</p>
<p>Comporte plusieurs étapes de programme.</p></td>
<td><p>Programme de santé maternelle avec des étapes comme visite de CPN (2-4+), accouchement, visite de CPN.</p></td>
</tr>
</tbody>
</table>

Pour créer un programme, vous devez d'abord configurer plusieurs types d'objets de métadonnées. Vous pouvez créer ces objets de métadonnées dans l'application **Maintenance**.

<table>
<caption>Objets de métadonnées de programme dans l'application Maintenance</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Type d'objet</p></th>
<th>Description</th>
<th><p>Fonctions disponibles</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Programme d'événement</p></td>
<td><p>Un programme permettant d'enregistrer un événement unique sans inscription</p></td>
<td><p>Créer, modifier, partager, supprimer, afficher les détails et traduire</p></td>
</tr>
<tr class="even">
+<td><p>Programme Tracker</p></td>
+<td><p>Un programme permettant d'enregistrer un ou plusieurs événements avec inscription</p></td>
+<td><p>Créer, modifier, partager, supprimer, afficher les détails et traduire</p></td>
+</tr>
<tr class="even">
<td><p>Indicateur de programme</p></td>
<td><p>Une expression basée sur les éléments de données et les attributs des entités suivies que vous utilisez pour calculer des valeurs selon une formule.</p></td>
<td><p>Créer, modifier, cloner, partager, supprimer, afficher les détails et traduire</p></td>
</tr>
<tr class="odd">
<td><p>Règle de programme</p></td>
<td><p>Vous permet de créer et de contrôler le comportement dynamique de l'interface utilisateur dans les <strong>applications</strong> comme <strong>Saisie Tracker</strong> et Saisie d'événements</p></td>
<td><p>Créer, modifier, cloner, supprimer, afficher les détails et traduire</p></td>
</tr>
<tr class="even">
<td><p>Variable de règle de programme</p></td>
<td><p>Variables que vous utilisez pour créer des expressions de règles de programme.</p></td>
<td><p>Créer, modifier, cloner, supprimer, afficher les détails et traduire</p></td>
</tr>
<tr class="odd">
<td><p>Type de relation</p></td>
<td><p>Définit la relation entre l'entité suivie A et l'entité suivie B, par exemple la mère et l'enfant.</p></td>
<td><p>Créer, modifier, cloner, partager, supprimer, afficher les détails et traduire</p></td>
</tr>
<tr class="even">
<td><p>Type d'entité suivie</p></td>
<td><p>Types d'entités qui peuvent être suivies par le système. Cela peut aller des personnes aux produits, par exemple un médicament ou une personne.</p>
<p>Un programme doit avoir une entité suivie. Pour inscrire une instance d'entité suiviee dans un programme, l'entité suivie d'une entité et l'entité suivie d'un programme doivent être les mêmes.</p>
<blockquote>
<p><strong>N.B.</strong></p>
<p>Un programme doit être spécifié avec une seule entité suivie. Seule une entité suivie identique à l'entité suivie du programme peut s'inscrire à ce programme.</p>
</blockquote></td>
<td><p>Créer, modifier, cloner, partager, supprimer, afficher les détails et traduire</p></td>
</tr>
<tr class="odd">
<td><p>Attribut d'entité suivie</p></td>
<td><p>Utilisé pour enregistrer des informations supplémentaires sur une entité suivie.</p>
<p>Peut être partagé entre les programmes.</p></td>
<td><p>Créer, modifier, cloner, partager, supprimer, afficher les détails et traduire</p></td>
</tr>
<tr class="odd">
<td><p>Programme</p></td>
<td><p>Un programme se compose de plusieurs étapes.</p></td>
<td><p>Créer, modifier, partager, supprimer, affecter à des unités d'organisation, afficher les détails et traduire</p></td>
</tr>
<tr class="even">
<td><p>Étape du programme</p></td>
<td><p>Une étape du programme définit les actions à entreprendre à chaque étape.</p></td>
<td><p>Créer, modifier, partager, changer l'ordre de tri, supprimer, afficher les détails et traduire</p></td>
</tr>
<tr class="even">
<td><p>Groupe d'indicateurs du programme</p></td>
<td><p>Un groupe d'indicateurs de programme</p></td>
<td><p>Créer, modifier, cloner, partager, supprimer, afficher les détails et traduire</p></td>
</tr>
<tr class="odd">
<td><p>Règle de validation</p></td>
<td><p>Une règle de validation est basée sur une expression qui définit une relation entre les valeurs des éléments de données.</p></td>
<td><p>Créer, modifier, cloner, partager, supprimer, afficher les détails et traduire</p></td>
</tr>
<tr class="even">
<td><p>Notification du programme</p></td>
<td><p>Rappel par message automatique</p>
<p>Définir des rappels qui seront automatiquement envoyés aux entités enregistrées et suivies avant les rendez-vous prévus et après les visites manquées.</p></td>
<td><p>Créer, modifier et supprimer</p></td>
</tr>
<tr class="odd">
<td><p>Notification de l'étape du programme</p></td>
<td><p>Rappel par message automatique</p>
<p>Définir des rappels à envoyer automatiquement chaque fois qu'une étape du programme est terminée, ou avant ou après la date d'échéance.</p></td>
<td><p>Créer, modifier et supprimer</p></td>
</tr>
</tbody>
</table>

## Configurer les programmes d'événements dans l'application Maintenance { #configure_event_program_in_maintenance_app }

### À propos des programmes d'événements { #about_event_program }

Les événements uniques _sans_ programmes d'inscription sont appelés programmes d'événements. Vous pouvez les configurer dans l'application **Maintenance**. Les programmes d'événements peuvent avoir trois types de formulaires de saisie de données :

<table>
<caption>Types de formulaires de saisie pour les programmes d'événements</caption>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Type de formulaire</p></th>
<th><p>Description</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Elémentaire</p></td>
<td><p>Liste tous les éléments de données appartenant au programme. Vous pouvez modifier l'ordre des éléments de données.</p></td>
</tr>
<tr class="even">
<td><p>Section</p></td>
<td><p>Une section regroupe les éléments de données. Vous pouvez ensuite organiser l'ordre des sections pour créer la disposition souhaitée du formulaire de saisie des données.</p></td>
</tr>
<tr class="odd">
<td><p>Personnalisé</p></td>
<td><p>Définit le formulaire de saisie comme une page HTML.</p></td>
</tr>
</tbody>
</table>

> **Note**
>
> -   Custom forms takes precedence over section forms if both are present.
>
> -   If no custom or section form are defined, the basic form will be used.
>
> -   The Android apps only supports section forms.

Vous pouvez créer des _notifications de programme_ pour les programmes d'événements. Les notifications sont envoyées soit par le système de messagerie interne de DHIS2, soit par e-mail, soit par message texte (SMS). Vous pouvez utiliser les notifications de programme pour, par exemple, envoyer un rappel automatique à une entité suivie 10 jours avant un rendez-vous prévu. Vous utilisez les attributs de l'entité suivie du programme (par exemple le prénom) et les paramètres du programme (par exemple la date d'inscription) pour créer un modèle de notification. Dans le champ **Paramètres**, vous trouverez une liste des attributs de l'entité suivie et des paramètres du programme disponibles.

### Flux de production : Créer un programme d'événement { #workflow_event_program }

1.  Entrez les détails du programme de l'événement.

2.  Attribuer des éléments de données.

3.  Créer un ou plusieurs formulaires de saisie de données : **Base**, **Section** ou **Personnalisé**.

4.  Affectez le programme à une ou plusieurs unités d'organisation.

5.  Créer une ou des notifications de programme.

### Créer ou modifier un programme d'événement { #create_event_program }

#### Entrez les détails du programme de l'événement. { #enter-event-program-details }

1.  Ouvrez l'application **Maintenance** et cliquez sur **Programme** \> **Programme**.

2.  Cliquez sur le bouton d'ajout et sélectionnez **Programme de l'événement** dans le menu popup.

3.  Entrez les détails du programme, puis cliquez sur suivant.

    <table>
    <colgroup>
    <col style="width: 50%" />
    <col style="width: 50%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Champ</p></th>
    <th><p>Description</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p><strong>Nom</strong></p></td>
    <td><p>Le nom du programme.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Couleur</strong></p></td>
    <td><p>Couleur utilisée pour ce programme dans les applications de saisie.</p></td>
    </tr>
    <tr class="odd">
    <td><p><strong>Icône</strong></p></td>
    <td><p>Icône utilisée pour ce programme dans les applications de saisie.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Nom abrégé</strong></p></td>
    <td><p>Un nom abrégé du programme. Le nom abrégé est utilisé comme titre de graphique ou de tableau par défaut dans les applications d'analyse.</p></td>
    </tr>
    <tr class="odd">
    <td><p><strong>Description</strong></p></td>
    <td><p>Une description détaillée du programme.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Version</strong></p></td>
    <td><p>La version du programme. Elle est utilisée par exemple lorsque des personnes collectent des données hors ligne dans une implémentation Android. Lorsqu'ellles se connectent et synchronisent leurs métadonnées, elles devront alors obtenir la dernière version du programme.</p></td>
    </tr>
    <tr class="odd">
    <td><p><strong>Combinaison de catégories</strong></p></td>
    <td><p>La combinaison de catégories que vous souhaitez utiliser. Le paramètre par défaut est <strong>Aucune</strong>.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Flux de travail pour l'approbation des données</strong></p></td>
    <td><p>Le flux de travail d'approbation des données que vous souhaitez utiliser. Le paramètre par défaut est <strong>Aucune valeur</strong>.</p></td>
    </tr>
    <tr class="odd">
    <td><p><strong>Date d'expiration des événements achevés</strong></p></td>
    <td><p>Définit le nombre de jours pendant lesquels vous pouvez modifier un événement terminé. Cela signifie que lorsqu'un événement est terminé et que le nombre de jours d'expiration spécifié est passé, l'événement est verrouillé.</p>
    <p>Si vous fixez &quot;les jours d'expiration des événements terminés&quot ; à 10&quot ;,un événement sera bloqué dix jours après la date d'achèvement. Vous ne pouvez donc plus modifier l'événement après cette date.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Type de période d'expiration</strong></p>
    <p><strong>Jours d'expiration</strong></p></td>
    <td><p>La date d'expiration définit pendant combien de jours après la fin de la période précédente, un événement peut être modifié. Le type de période est défini par le type de période d'expiration. Cela signifie que lorsque le nombre déterminé de jours d'expiration s'est écoulé depuis la date d'expiration de la période précédente, les événements de cette période sont bloqués.</p>
    <p>Si vous définissez le type d'expiration à &quot;Mensuel&quot ; et les jours d'expiration à &quot;10&quot ; et que le mois est octobre, alors vous ne pouvez pas ajouter ou modifier un événement d'octobre après le 10 novembre.</p></td>
    </tr>
    <tr class="odd">
    <td><strong>Vérouiller le formulaire de saisie après l'avoir rempli</strong></td>
    <td><p>Cochez la case pour bloquer le formulaire de saisie après la fin de l'événement de ce programme.</p>
    <p>Cela signifie que les données du formulaire de saisie ne peuvent pas être modifiées tant que le statut n'a pas été réinitialisé à "incomplet".</p></td>
    </tr>
    <tr class="even">
    <td><strong>Type d'élément</strong></td>
    <td><p>Sets whether the program is going to capture a geographical feature type or not.

-   **Aucun** Rien n'est capturé.
-   **Polygone** Une zone est capturée. Pour les programmes à événement unique, la zone sera la zone représentant l'événement capturé. Pour les programmes de suivi, la zone représentera la zone de l'inscription.
-   **Point** Un point ou une coordonnée est saisi(e). Pour les programmes à événement unique, le point représentera l'événement saisi. Pour les programmes de suivi, le point représentera l'inscription. </p></td> </tr> <tr class="odd"> <td><strong>Stratégie de validation</strong></td> <td>Définit les critères de validation côté serveur et côté client.
    > Les validations de type de données sont toujours effectuées quelle que soit la stratégie de validation. Un champ de nombre entier n'est jamais stocké losqu'il contient du texte, par exemple.
-   **On complete** Cette option permet d'appliquer les champs obligatoires et les messages d'erreur à corriger à la fin de l'événement, mais l'événement peut être enregistré sur le serveur sans passer par ces critères de validation.
    -   For legacy reasons, this is always the validation strategy for tracker programs, where each data value in the event is stored to the server while entering data.
-   **Sur mise à jour et insertion** Cette option imposera la validation des champs obligatoires lors de l'enregistrement de l'événement sur le serveur, quel que soit l'état d'achèvement. Lorsque vous utilisez cette option, aucun événement ne peut être enregistré sans réussir les validations.
      </td>
      </tr>
      <tr class="even">
      <td><strong>Pré-génération de l'UID de l'événement</strong></td>
      <td>Cochez la case pour pré-générer des numéros d'identification uniques de l'événement.</td>
      </tr>
      <tr class="odd">
      <td><strong>Description de la date du rapport</strong></td>
      <td><p>Saisissez une description de la date du rapport.</p>
      <p>Cette description s'affiche dans le formulaire de saisie.</p></td>
      </tr>
      </tbody>
      </table>

1.  Cliquez sur suivant.

#### Attribuer des éléments de données { #assign_data_elements }

1.  Cliquez sur **Attribuer des éléments de données**.

2.  Dans la liste des éléments disponibles, double-cliquez sur les éléments de données que vous souhaitez attribuer au programme de l'événement.

3.  (Facultatif) Pour chaque élément de données, ajoutez des paramètres supplémentaires :

    <table>
    <colgroup>
    <col style="width: 50%" />
    <col style="width: 50%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Setting</p></th>
    <th><p>Description</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p><strong>Compulsory</strong></p></td>
    <td><p>The value of this data element must be filled into data entry form before you can complete the event.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Allow provided elsewhere</strong></p></td>
    <td><p>Specify if the value of this data element comes from other facility, not in the facility where this data is entered.</p></td>
    </tr>
    <tr class="odd">
    <td><p><strong>Display in reports</strong></p></td>
    <td><p>Displays the value of this data element into the single event without registration data entry function.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Date in future</strong></p></td>
    <td><p>Will allow user to select a date in future for date data elements.</p></td>
    </tr>
    <tr class="odd">
    <td><p><strong>Mobile render type</strong></p></td>
    <td><p>Can be used to select different render types for mobile devices. Available options vary depending on the data element's value type. For example, for a numerical value you may select &quot;Default&quot;, &quot;Value&quot;, &quot;Slider&quot;, &quot;Linear scale&quot;, and &quot;Spinner&quot;.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Desktop render type</strong></p></td>
    <td><p>WARNING: NOT IMPLEMENTED YET.</p>
    <p>Can be used to select different render types for desktop (i.e. the web interface). Available options vary depending on the data element's value type. For example, for a numerical value you may select &quot;Default&quot;, &quot;Value&quot;, &quot;Slider&quot;, &quot;Linear scale&quot;, and &quot;Spinner&quot;.</p></td>
    </tr>
    </tbody>
    </table>

4.  Cliquez sur suivant.

#### Créer des formulaires de saisie de données { #create_data_entry_forms }

Les formulaires de saisie définissent comment les éléments de données s'afficheront à l'utilisateur dans l'application **Saisie d'événements**.

1.  Cliquez sur **Créer un formulaire de saisie de données**.

2.  Cliquez sur **Base**, **Section** ou **Personnalisé**.

3.  Pour créer un formulaire de saisie **de base** : Glissez et déposez les éléments de données dans l'ordre que vous souhaitez.

4.  Pour créer un formulaire ** À section** :

    1.  Cliquez sur le bouton "Ajouter" et entrez le nom, la description et le type de rendu d'une section pour PC et mobile.

    2.  Cliquez sur la section pour qu'elle soit surlignée par une ligne noire.

    3.  Ajoutez des éléments de données en cliquant sur le signe "+" à côté du nom des éléments de données.

    4.  Répétez les étapes ci-dessus jusqu'à ce que vous ayez toutes les sections dont vous avez besoin.

    5.  Modifiez l'ordre des sections : cliquez sur le menu des options, puis faites glisser la section à l'endroit souhaité.

5.  Pour créer un formulaire de saisie de données **Personnalisé** : Utilisez l'éditeur WYSIWYG pour créer un formulaire entièrement personnalisé. Si vous sélectionnez **Source**, vous pouvez alors coller le code HTML directement dans la zone d'édition. Vous pouvez également insérer des images, par exemple des drapeaux ou des logos.

6.  Cliquez sur suivant.

#### Accès { #access }

Les options d'accès déterminent qui peut saisir les données pour le programme ou visualiser/modifier les métadonnées du programme. Un programme peut être partagé avec des unités d'organisation, et en outre, les options d'accès au programme principal et à toutes les étapes du programme peuvent être configurées par le biais de la boîte de dialogue **Partage**. Les options d'accès sont disponibles dans l'onglet **Accès**.

Attribuer des unités d'organisation :

1.  Dans l'arbre d'organisation, double-cliquez sur les unités d'organisation que vous souhaitez ajouter au programme.

    Vous pouvez localiser une unité d'organisation dans l'arbre en élargissant les branches (cliquez sur le symbole de la flèche) ou en la recherchant par son nom. Les unités organisationnelles sélectionnées s'affichent en orange.

Changer les rôles et l'accès :

1.  Faites défiler vers le bas jusqu'à la section **Rôles et accès**.

    La première ligne indique les options d'accès au programme principal, et chacune des lignes suivantes indique les options d'une étape du programme. Les étapes du programme comportant une icône d'avertissement (point d'exclamation) contiennent des options d'accès qui s'écartent du programme principal, ce qui signifie qu'elles sont accessibles à une combinaison différente d'utilisateurs.

2.  Cliquez sur l'une des lignes et la boîte de dialogue **Partage** s'affichera.

3.  Modifiez les options d'accès en conséquence. Voir la documentation sur le dialogue de partage pour plus de détails.

4.  Cliquez sur le bouton **Appliquer**.

5.  Répétez le processus pour chaque programme/étape du programme. Vous pouvez également copier toutes les options d'accès du programme principal vers vos programmes enfants :

    1.  Sélectionnez les étapes du programme pour lesquelles vous souhaitez avoir des options d'accès similaires à celles du programme principal en cochant les cases situées sur le côté droit des étapes du programme. Vous pouvez également choisir de **Sélectionner toutes** les étapes du programme, **Désélectionner toutes** les étapes du programme ou **Sélectionner des étapes similaires**, en termes d'options d'accès, à celle du programme principal. Les étapes similaires sont activées par défaut.

    2.  Cliquez sur **Appliquer aux étapes sélectionnées**.

#### Créer des notifications de programme { #create_program_notifications }

1.  Créez le message que vous voulez envoyer :

    1.  Cliquez sur **Quoi envoyer?**.

    2.  Entrez un **Nom**.

    3.  Créer le **Modèle d'objet** : Double-cliquez sur les paramètres dans le champ **Modèle de variables** pour les ajouter à votre objet.

        > **Note**
        >
        > The subject is not included in text messages.

    4.  Créer le **Modèle de message** : Double-cliquez sur les noms des paramètres dans la liste des **Variables du modèle** pour les ajouter à votre message.

        Cher A{w75KJ2mc4zz}, Vous êtes maintenant inscrit au V{programme_nom}.

2.  Définissez _quand_ vous voulez envoyer le message :

    1.  Cliquez sur **Quand l'envoyer?**.

    2.  Sélectionnez un **Déclencheur de notification**.

        <table>
        <colgroup>
        <col style="width: 33%" />
        <col style="width: 33%" />
        <col style="width: 33%" />
        </colgroup>
        <thead>
        <tr class="header">
        <th><p>Trigger</p></th>
        <th><p>Description</p></th>
        <th><p>Note</p></th>
        </tr>
        </thead>
        <tbody>
        <tr class="odd">
        <td><p>Program stage completion</p></td>
        <td><p>The program stage notification is sent when the program stage is completed</p></td>
        <td><p>-</p></td>
        </tr>
        <tr class="even">
        <td><p>Days scheduled (due date)</p></td>
        <td><p>The notification is sent XX number of days before or after the due date</p></td>
        <td><p>You need to enter the number of days before or after the scheduled date that the notification will be send.</p></td>
        </tr>
        <tr class="odd">
        <td><p>Program Rule</p></td>
        <td><p>Notification will be triggered as a result of program rule execution.</p></td>
        <td><p>Program rule with ProgramRuleActionType.SENDMESSAGE need to be in place to make this trigger successful.</p></td>
        </tr>
        </tbody>
        </table>

3.  Définissez _à qui_ vous voulez envoyer le message :

    1.  Cliquez sur **L'envoyer à ?**.

    2.  Sélectionnez un **Destinataire de la notification**.

        <table>
        <colgroup>
        <col style="width: 33%" />
        <col style="width: 33%" />
        <col style="width: 33%" />
        </colgroup>
        <thead>
        <tr class="header">
        <th><p>Recipient type</p></th>
        <th><p>Description</p></th>
        <th><p>Note</p></th>
        </tr>
        </thead>
        <tbody>
        <tr class="odd">
        <td><p>Tracked entity instance</p></td>
        <td><p>Receives program notifications via e-mail or text message.</p></td>
        <td><p>To receive a program notification, the recipient must have an e-mail address or a phone number attribute.</p></td>
        </tr>
        <tr class="even">
        <td><p>Organisation unit contact</p></td>
        <td><p>Receives program notifications via e-mail or text message.</p></td>
        <td><p>To receive a program notification, the receiving organisation unit must have a registered contact person with e-mail address and phone number.</p></td>
        </tr>
        <tr class="odd">
        <td><p>Users at organisation unit</p></td>
        <td><p>All users registered to the selected organisation unit receive program notifications via the internal DHIS2 messaging system.</p></td>
        <td>-</td>
        </tr>
        <tr class="even">
        <td><p>User group</p></td>
        <td><p>All members of the selected user group receive the program notifications via the internal DHIS2 messaging system</p></td>
        <td>-</td>
        </tr>
        <tr class="odd">
        <td><p>Data Element</p></td>
        <td><p>Data Element associated with ProgramStage can be selected as recipient.</p></td>
        <td><p>Data Element will only be effective if DataElement has value type PHONE_NUMBER/EMAIL.</p></td>
        </tr>
        </tbody>
        </table>

    3.  Cliquez sur **Sauvegarder**.

4.  Répétez les étapes ci-dessus pour créer toutes les notifications de programme dont vous avez besoin.

5.  Cliquez sur **Sauvegarder**.

> **Note**
>
> You configure when the program notifications are sent in the **Data Administration** app \> **Scheduling** \> **Program notifications scheduler**.
>
> -   Click **Run now** to send the program notifications immediately.
>
> -   Select a time and click **Start** to schedule the program notifications to be send at a specific time.

### Informations de référence : Paramètres de notification du programme { #reference_information_event_program_notification_parameters }

<table>
<caption>Program notification parameters to use in program notifications</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Notification type</p></th>
<th><p>Variable name</p></th>
<th><p>Variable code</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Program</p></td>
<td><p>Current date</p></td>
<td><pre><code>V{current_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Days since enrollment date</p></td>
<td><pre><code>V{days_since_enrollment_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Enrollment date</p></td>
<td><pre><code>V{enrollment_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Incident date</p></td>
<td><pre><code>V{incident_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Organisation unit name</p></td>
<td><pre><code>V{org_unit_name}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Program name</p></td>
<td><pre><code>V{program_name}</code></pre></td>
</tr>
<tr class="odd">
<td><p>Program stage</p></td>
<td><p>Current date</p></td>
<td><pre><code>V{current_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Days since due date</p></td>
<td><pre><code>V{days_since_due_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Days until due date</p></td>
<td><pre><code>V{days_until_due_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Due date</p></td>
<td><pre><code>V{due_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Organisation unit name</p></td>
<td><pre><code>V{org_unit_name}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Program name</p></td>
<td><pre><code>V{program_name}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Program stage name</p></td>
<td><pre><code>V{program_stage_name}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Event status</p></td>
<td><pre><code>V{event_status}</code></pre></td>
</tr>
</tbody>
</table>

## Configurer les programmes Tracker dans l'application Maintenance { #configure_tracker_program_in_Maintenance_app }

### À propos des programmes Tracker { #about-tracker-programs }

Les programmes à événement unique ou multiple _avec_ inscription sont appelés des programmes Tracker. Un programme doit être spécifié avec une seule entité suivie. Seules les entités suivies identiques à l'entité suivie du programme peuvent s'inscrire à ce programme. Un programme a besoin de plusieurs types de métadonnées que vous pouvez créer dans les applications **Maintenance**.

### Flux de production : Créer un programme tracker { #workflow_tracker_program }

1.  Entrez les détails du programme Tracker.

2.  Entrer les détails de l'inscription.

3.  Assigner des attributs et créer un formulaire d'inscription **à section** ou **personnalisé**.

4.  Créer des étapes de programme.

5.  Configurer l'accès et l'attribuer aux unités d'organisation.

6.  Créer une ou plusieurs notifications de programme et d'étape de programme.

### Créer ou modifier un programme Tracker { #create-or-edit-a-tracker-program }

1. Ouvrez l'application **Maintenance** et cliquez sur **Programme** \> **Programme**.

2. Cliquez sur le bouton Ajouter et sélectionnez **Programme Tracker** dans le menu popup.

#### Entrer les détails de programme { #tracker_enter_programs_details }

<table>
    <colgroup>
        <col style="width: 50%" />
        <col style="width: 50%" />
    </colgroup>
    <thead>
        <tr class="header">
            <th><p>Field</p></th>
            <th><p>Description</p></th>
        </tr>
    </thead>
    <tbody>
        <tr class="odd">
            <td>
                <p><strong>Name</strong></p>
            </td>
            <td><p>The name of the program.</p></td>
        </tr>
        <tr class="even">
            <td>
                <p><strong>Color</strong></p>
            </td>
            <td><p>Color used for this program in Tracker capture.</p></td>
        </tr>
        <tr class="odd">
            <td>
                <p><strong>Icon</strong></p>
            </td>
            <td><p>Icon used for this program in Tracker capture</p></td>
        </tr>
        <tr class="even">
            <td>
                <p><strong>Short name</strong></p>
            </td>
            <td>
                <p>
                    A short name of the program. The short name is used as the
                    default chart or table title in the analytics apps.
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td>
                <p><strong>Description</strong></p>
            </td>
            <td><p>A detailed description of the program.</p></td>
        </tr>
        <tr class="even">
            <td>
                <p><strong>Version</strong></p>
            </td>
            <td>
                <p>
                    The version of the program. This is used for example when
                    people collect data offline in an Android implementation.
                    When they go online and synchronize their metadata, they
                    should get the latest version of the program.
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td>
                <p><strong>Tracked Entity Type</strong></p>
            </td>
            <td>
                <p>
                    The tracked entity type you want to use. A program can only
                    have one type of tracked entity.
                </p>
            </td>
        </tr>
        <tr class="even">
            <td>
                <p><strong>Category combination</strong></p>
            </td>
            <td>
                <p>
                    The category combination you want to use. The default
                    setting is <strong>None</strong>.
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td>
                <p><strong>Display front page list</strong></p>
            </td>
            <td>
                <p>
                    Select checkbox to display a list of Tracked Entity
                    Instances in Tracker Capture. If not selected, the Search
                    will be displayed.
                </p>
            </td>
        </tr>
        <tr class="even">
            <td>
                <p><strong>First stage appears on registration page</strong></p>
            </td>
            <td>
                <p>
                    Select checkbox to display the first program stage together
                    with the registration (enrollment).
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td>
                <p><strong>Access level</strong></p>
            </td>
            <td><p>Choose the access level of the program.</p></td>
        </tr>
        <tr class="even">
            <td>
                <p><strong>Completed events expiry days</strong></p>
            </td>
            <td>
                <p>
                    Defines the number of days for which you can edit a
                    completed event. This means that when an event is completed
                    and the specified number of expiry days has passed, the
                    event is locked.
                </p>
                <p>
                    If you set &quot;Completed events expiry days&quot; to
                    10&quot;, an event is locked ten days after the completion
                    date. After this date you can no longer edit the event.
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td>
                <p><strong>Expiry period type</strong></p>
                <p><strong>Expiry days</strong></p>
            </td>
            <td>
                <p>
                    The expiry days defines for how many days after the end of
                    the previous period, an event can be edited. The period type
                    is defined by the expiry period type. This means that when
                    the specified number of expiry days has passed since the end
                    date of the previous period, the events from that period are
                    locked.
                </p>
                <p>
                    If you set the expiry type to &quot;Monthly&quot; and the
                    expiry days to &quot;10&quot; and the month is October, then
                    you can't add or edit an event to October after the 10th of
                    November.
                </p>
            </td>
        </tr>
        <tr class="even">
            <td>
                <strong>Minimum number of attributes required to search</strong>
            </td>
            <td>
                <p>
                    Specify the number of tracked entity attributes that needs
                    to be filled in to search for Tracked Entities in the
                    Program.
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td>
                <strong>Maximum number of tracked entity instances to return in
                    search</strong>
            </td>
            <td>
                <p>
                    Specify the maximum number of tracked entity instances that
                    should be returned in a search. Enter 0 for no limit.
                </p>
            </td>
        </tr>
    </tbody>
</table>

#### Enter enrollment details { #enter_enrollment_details }

<table>
    <colgroup>
        <col style="width: 50%" />
        <col style="width: 50%" />
    </colgroup>
    <thead>
        <tr class="header">
            <th><p>Field</p></th>
            <th><p>Description</p></th>
        </tr>
    </thead>
    <tbody>
        <tr class="odd">
            <td><strong>Allow future enrollment dates</strong></td>
            <td>
                <p>
                    Select checkbox if you want to allow tracked entity
                    instances to be enrolled in the program on a future date.
                </p>
            </td>
        </tr>
        <tr class="even">
            <td><strong>Allow future incident dates</strong></td>
            <td>
                <p>
                    Select checkbox if you want to allow the incident date in
                    the program to be on a future date.
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td>
                <strong>Only enroll once (per tracked entity instance lifetime)</strong>
            </td>
            <td>
                <p>
                    Select checkbox if you want a tracked entity to be able to
                    enroll only once in a program. This setting is useful for
                    example in child vaccination or post-mortem examination
                    programs where it wouldn’t make sense to enroll a tracked
                    entity more than once.
                </p>
            </td>
        </tr>
        <tr class="even">
            <td><strong>Show incident date</strong></td>
            <td>
                <p>
                    This setting allows you to show or hide the incident date
                    field when a tracked entity enroll in the program.
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td><strong>Description of incident date</strong></td>
            <td>
                <p>Type a description of the incident date</p>
                <p>For example:</p>
                <p>In an immunization program for child under 1 year old, the
                    incident date is the child's birthday. </p>
                <p>In a maternal program, the incident date is the date of last
                    menstrual period. </p>
            </td>
        </tr>
        <tr class="even">
            <td><strong>Type a description of the enrollment date</strong></td>
            <td>
                <p>
                    The date when the tracked entity is enrolled into the
                    program
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td><strong>Ignore overdue events</strong></td>
            <td>
                <p>
                    When a tracked entity enrolls into the program, the events
                    corresponding to the program stages are created. If you
                    select this checkbox, the system will not generate overdue
                    events.
                </p>
            </td>
        </tr>
        <tr class="even">
            <td><strong>Feature type</strong></td>
            <td>
                <p>
                    Sets whether the program is going to capture a geographical
                    feature type or not.
                </p>
                <ul>
                <li><strong>None</strong>: Nothing is captured.</li>
                <li><strong>Polygon</strong>: An area is captured. For single
                event programs the area will be the area representing the
                event being captured. For tracker programs, the area will
                represent the area of the enrollment. </li>
                <li><strong>Point</strong>: A point/coordinate is captured. For
                single event programs the point will be representing the
                event being captured. For tracker programs, the point will
                represent the enrollment. </li>
                </ul>
            </td>
        </tr>
        <tr class="odd">
            <td><strong>Related program</strong></td>
            <td>
                <p>
                    Choose a Tracker program which is related to the program you
                    are creating, for example an ANC and a Child program.
                </p>
            </td>
        </tr>
    </tbody>
</table>

#### Assign tracked entity attributes. { #assign_tracked_entity_attributes }

1. Dans la liste des **Attributs d'entités suivies de programme disponibles**, double-cliquez sur les attributs que vous souhaitez attribuer au programme.

2. (Optional) For each assigned attribute, add additional settings:
 <table>
         <colgroup>
             <col style="width: 50%" />
             <col style="width: 50%" />
         </colgroup>
         <thead>
             <tr class="header">
                 <th><p>Setting</p></th>
                 <th><p>Description</p></th>
             </tr>
         </thead>
         <tbody>
             <tr class="odd">
                 <td>
                     <p><strong>Display in list</strong></p>
                 </td>
                 <td>
                     <p>
                         Displays the value of this attribute in the list of tracked
                         entity instances in Tracker capture.
                     </p>
                 </td>
             </tr>
             <tr class="even">
                 <td>
                     <p><strong>Mandatory</strong></p>
                 </td>
                 <td>
                     <p>
                         The value of this attribute must be filled into data entry
                         form before you can complete the event.
                     </p>
                 </td>
             </tr>
             <tr class="odd">
                 <td>
                     <p><strong>Date in future</strong></p>
                 </td>
                 <td>
                     <p>
                         Will allow user to select a date in future for date
                         attributes.
                     </p>
                 </td>
             </tr>
             <tr class="even">
                 <td>
                     <p><strong>Mobile render type</strong></p>
                 </td>
                 <td>
                     <p>
                         Can be used to select different render types for mobile
                         devices. Available options vary depending on the attribute's
                         value type. For example, for a numerical value you may
                         select &quot;Default&quot;, &quot;Value&quot;,
                         &quot;Slider&quot;, &quot;Linear scale&quot;, and
                         &quot;Spinner&quot;.
                     </p>
                 </td>
             </tr>
             <tr class="odd">
                 <td>
                     <p><strong>Desktop render type</strong></p>
                 </td>
                 <td>
                     <p>WARNING: NOT IMPLEMENTED YET.</p>
                     <p>
                         Can be used to select different render types for desktop
                         (i.e. the web interface). Available options vary depending
                         on the attribute's value type. For example, for a numerical
                         value you may select &quot;Default&quot;, &quot;Value&quot;,
                         &quot;Slider&quot;, &quot;Linear scale&quot;, and
                         &quot;Spinner&quot;.
                     </p>
                 </td>
             </tr>
         </tbody>
 </table>

3. Créer un formulaire d'inscription

   Le formulaire d'inscription définit la manière dont les attributs seront affichés à l'utilisateur dans les applications consommatrices, telles qu'Android et Saisie Tracker.

    1. Cliquez sur **Créer un formulaire d'inscription**.

    2. Cliquez sur **À section** ou **Personnalisé**.

    3. Pour créer un formulaire ** À section** :

        1. Cliquez sur le bouton "Ajouter" et entrez le nom, la description et le type de rendu d'une section pour PC et mobile.
        2. Cliquez sur la section pour qu'elle surlignée par une bordure noire.
        3. Ajoutez des éléments de données en cliquant sur le signe "+" à côté du nom des éléments de données que vous souhaitez ajouter.
        4. Répétez les étapes ci-dessus jusqu'à ce que vous ayez toutes les sections dont vous avez besoin. Pour modifier l'ordre des sections : cliquez sur le menu des options, puis faites glisser la section à l'endroit souhaité.

    4. Pour créer un formulaire d'enregistrement **Personnalisé** : Utilisez l'éditeur WYSIWYG pour créer un formulaire entièrement personnalisé. Si vous sélectionnez Source, vous pouvez alors coller le code HTML directement dans la zone d'édition. Vous pouvez également insérer des images, par exemple des drapeaux ou des logos.

    5. Cliquez sur ajouter une étape.

#### Créer des étapes de programme { #create_program_stages }

Un programme se compose d'étapes. Une étape du programme définit les mesure devant être prises à chaque étape.

> **N.B.**
>
> Les modifications apportées à une étape du programme ne sont pas enregistrées tant que vous n'avez pas sauvegardé le programme.

1. Cliquez sur le signe "+" pour créer une étape du programme.
2. Entrez les détails de l'étape du programme : 1. Entrez un **Nom**. 2. (Facultatif) sélectionnez une **Couleur** et une **Icône** qui seront utilisées par les applications de saisie de données pour identifier cette étape du programme. 3. Saisissez une **Description**. 4. Dans le champ **Jours prévus à partir du début**, entrez le nombre minimum de jours d'attente pour le démarrage de l'étape du programme.
3. Entrez les détails reproduisibles des étapes du programme.
    1. Précisez si l'étape du programme est **Reproduisible** ou non.
    2. Sélectionnez un **Type de période**.
    3. Effacez **Affichez la boîte de génération d'événement après avoir terminé** si vous ne voulez pas afficher _Créer une nouvelle boîte d'événement_ pour créer un nouvel événement pour une étape reproduisible après avoir cliqué sur _Terminer_ pour un événement de l'étape dans le formulaire de saisie. Ce champ est sélectionné par défaut.
    4. Entrez **Jours d'intervalle standard**. Le nombre de jours pour répéter l'étape de programme reproduisible.
    5. (Facultatif) Sélectionnez une **Date prochaine prévue par défaut**. Une liste des éléments de données attribués de type **date** apparaîtra. Si un élément est sélectionné, le client Tracker utilisera cette date comme date de début par défaut. L'élément de données peut être utilisé par les règles du programme pour programmer de façon dynamique des intervalles entre les événements.
4. Entrez les détails du formulaire

 <table>
     <colgroup>
         <col style="width: 50%" />
         <col style="width: 50%" />
     </colgroup>
     <thead>
         <tr class="header">
             <th><p>Option</p></th>
             <th><p>Action</p></th>
         </tr>
     </thead>
     <tbody>
         <tr class="odd">
             <td>
                 <p><strong>Auto-generate event</strong></p>
             </td>
             <td>
                 <p>
                     Clear check box to prevent creating an event of this program
                     stage automatically when an entity is enrolled in the program.
                 </p>
             </td>
         </tr>
         <tr class="even">
             <td>
                 <p><strong>Open data entry form after enrollment</strong></p>
             </td>
             <td>
                 <p>
                     Select check box to automatically open the event of this
                     stage as soon as the entity has enrolled into the program.
                 </p>
             </td>
         </tr>
         <tr class="odd">
             <td>
                 <p><strong>Report date to use</strong></p>
             </td>
             <td>
                 If you have selected the
                 <strong>Open data entry form after enrollment</strong> check
                 box, also select a <strong>Report date to use</strong>:
                 <strong>Date of incident</strong> or
                 <strong>Date of enrollment</strong>.
                 <p>
                     This is the date used as report date for an event that has
                     been opened automatically.
                 </p>
                 <p>
                     If the <strong>Report date to use</strong> is selected as
                     one of those two ('incident date'/'enrollment date'), in
                     Dashboard, the 'Report date' of the event will be set as one
                     of those two.
                 </p>
             </td>
         </tr>
         <tr class="even">
             <td>
                 <p><strong>User assignment of events</strong></p>
             </td>
             <td>
                 <p>
                     Select check box to enable user assignment of the program
                     stage.
                 </p>
                 <p>
                     This means that in Tracker capture there will be a list of
                     users to which the event can be assigned.
                 </p>
             </td>
         </tr>
         <tr class="odd">
             <td>
                 <p><strong>Block entry form after completed</strong></p>
             </td>
             <td>
                 <p>
                     Select check box to block the entry form after completion of
                     the event of this stage.
                 </p>
                 <p>
                     This means that the data in the entry form can't be changed
                     until you reset the status to incomplete.
                 </p>
             </td>
         </tr>
         <tr class="even">
             <td>
                 <p>
                     <strong>Ask user to complete program when stage is
                         completed</strong>
                 </p>
             </td>
             <td>
                 <p>
                     Select check box to trigger a pop-up which asks the user if
                     he/she wants to create the event of next stage.
                 </p>
             </td>
         </tr>
         <tr class="odd">
             <td>
                 <p>
                     <strong>Ask user to create new event when stage is
                         complete</strong>
                 </p>
             </td>
             <td>
                 <p>
                     Select check box to trigger a pop-up which asks the users if
                     he/she wants to create a new event of this stage when an
                     event of this stage is completed.
                 </p>
                 <p>
                     This property is active only if you have selected
                     <strong>Repeatable</strong>.
                 </p>
             </td>
         </tr>
         <tr class="even">
             <td>
                 <p><strong>Generate events by enrollment date</strong></p>
             </td>
             <td>
                 <p>
                     Check on it for auto-generating due dates of events from
                     program-stages of this program based on the enrollment date.
                     If it is not checked, the due dates are generated based on
                     incident date.
                 </p>
             </td>
         </tr>
         <tr class="odd">
             <td>
                 <p><strong>Hide due dates</strong></p>
             </td>
             <td><p>Select checkbox to hide due dates for events.</p></td>
         </tr>
         <tr class="even">
             <td><strong>Feature type</strong></td>
             <td>
                 <p>
                     Sets whether the program is going to capture a geographical
                     feature type or not.
                 </p>
                 <ul>
                 <li><strong>None</strong>: Nothing is captured.</li>
                 <li>
                     <strong>Polygon</strong>: An area is captured. For single
                     event programs the area will be the area representing the
                     event being captured. For tracker programs, the area will
                     represent the area of the enrollment.
                 </li>
                 <li>
                     <strong>Point</strong>: A point/coordinate is captured. For
                     single event programs the point will be representing the
                     event being captured. For tracker programs, the point will
                     represent the enrollment.
                 </li>
                 </ul>
             </td>
         </tr>
         <tr class="odd">
             <td>
                 <p><strong>Pre-generate event UID</strong></p>
             </td>
             <td>
                 <p>Select check box to pre-generate unique event id numbers.</p>
             </td>
         </tr>
         <tr class="even">
             <td>
                 <p><strong>Description of report date</strong></p>
             </td>
             <td>
                 <p>Type a description of the report date.</p>
                 <p>This description is displayed in the data entry form.</p>
             </td>
         </tr>
         <tr class="odd">
             <td>
                 <p><strong>Description of due date</strong></p>
             </td>
             <td><p>Type a description of the due date.</p></td>
         </tr>
     </tbody>
 </table>

5. Attribuer des éléments de données à une étape du programme :

    1. Dans la liste des **Éléments de données disponibles**, double-cliquez sur les éléments de données que vous souhaitez attribuer à l'étape du programme.

    2. Pour chaque élément de données attribué, examinez les propriétés. Vous pouvez sélectionner :

<table>
    <colgroup>
        <col style="width: 50%" />
        <col style="width: 50%" />
    </colgroup>
    <thead>
        <tr class="header">
            <th><p>Option</p></th>
            <th><p>Action</p></th>
        </tr>
    </thead>
    <tbody>
        <tr class="odd">
            <td>
                <p><strong>Obligatoire</strong></p>
            </td>
            <td>
                <p>
                    La valeur de cet élément de donnée doit être indiquée dans le
                    formulaire de saisie avant de terminer l'evénement.
                </p>
            </td>
        </tr>
        <tr class="even">
            <td>
                <p><strong>Autorisation fournie ailleurs</strong></p>
            </td>
            <td>
                <p>
                    Préciser si la valeur de cet élément de donnée provient d'un autre établissement,
                    et non de l'établissement où cette donnée est saisie.
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td>
                <p><strong>Afficher dans les rapports</strong></p>
            </td>
            <td>
                <p>
                    Afficher la valeur de cet élément de donnée dans l'événement unique sans
                    fonction de saisie de données d'inscription.
                </p>
            </td>
        </tr>
        <tr class="even">
            <td>
                <p><strong>Date ultérieure</strong></p>
            </td>
            <td>
                <p>Permettre de sélectionner une date antérieure pour les éléments de données de date.</p>
            </td>
        </tr>
        <tr class="odd">
            <td>
                <p><strong>Ignorer la synchronisation</strong></p>
            </td>
            <td>
                <p>
                    Permettre de sauter l'élément de donnée lors de l'exécution
                    de tâches de synchronisation de données.
                </p>
            </td>
        </tr>
        <tr class="even">
            <td>
                <p><strong>Type de rendu pour mobile</strong></p>
            </td>
            <td>
                <p>
                    Peut être utilisé pour sélectionner différents types de rendu pour
                    les appareils mobiles. Les options disponibles varient en fonction du
                    type de valeur de l'attribut., Par exemple, pour une valeur numérique,
                    vous pouvez sélectionner &quot;Défaut&quot;, &quot;Valeur&quot;,
                    &quot;Slider&quot;, &quot;Échelle linéaire&quot; et
                    &quot;Spinner&quot;.
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td>
                <p><strong>Type de rendu pour bureau</strong></p>
            </td>
            <td>
                <p>AVERTISSEMENT : PAS ENCORE MIS EN ŒUVRE.</p>
                <p>
                    Peut être utilisé pour sélectionner différents types de rendu pour le bureau
                    (c'est-à-dire l'interface web). Les options disponibles varient en fonction du type
                    de valeur de l'attribut. Par exemple, pour une.valeur numérique,
                    vous pouvez séléctionner &quot;Défaut&quot;, &quot;Valeur&quot;,
                    &quot;Slider&quot;, &quot;Échelle linéaire&quot; et
                    &quot;Spinner&quot;.
                </p>
            </td>
        </tr>
    </tbody>
</table>

6. Créer des formulaires de saisie de données pour une étape du programme

    The data entry forms decide how the data elements will be displayed to the user in the **Tracker Capture** app.

    1. Cliquez sur **Créer un formulaire de saisie de données**.

    2. Cliquez sur **Base**, **Section** ou **Personnalisé**.

    3. Pour créer un formulaire de saisie **de base** : Glissez et déposez les éléments de données dans l'ordre que vous souhaitez.

    4. Pour créer un formulaire ** À section** :

        1. Cliquez sur le bouton "Ajouter" et entrez le nom, la description et le type de rendu d'une section pour PC et mobile.

        2. Cliquez sur la section pour qu'elle soit mise en évidence par une bordure noire.

        3. Ajoutez des éléments de données en cliquant sur le signe "+" à côté du nom des éléments de données.

        4. Répétez les étapes ci-dessus jusqu'à ce que vous ayez toutes les sections dont vous avez besoin.

        5. Modifiez l'ordre des sections : cliquez sur le menu des options, puis faites glisser la section à l'endroit souhaité.

    5. Pour créer un formulaire de saisie de données **Personnalisé** : Utilisez l'éditeur WYSIWYG pour créer un formulaire entièrement personnalisé. Si vous sélectionnez **Source**, vous pouvez alors coller le code HTML directement dans la zone d'édition. Vous pouvez également insérer des images, par exemple des drapeaux ou des logos.

    6. Cliquez sur ajouter une étape.

#### Accès { #tracker_program_access }

Les options d'accès déterminent qui peut saisir les données pour le programme ou visualiser/modifier les métadonnées du programme. Un programme peut être partagé avec des unités d'organisation, et en outre, les options d'accès au programme principal et à toutes les étapes du programme peuvent être configurées par le biais de la boîte de dialogue **Partage**. Les options d'accès sont disponibles dans l'onglet **Accès**.

Attribuer des unités d'organisation :

1.  Dans l'arbre d'organisation, double-cliquez sur les unités d'organisation que vous souhaitez ajouter au programme.

    Vous pouvez localiser une unité d'organisation dans l'arbre en élargissant les branches (cliquez sur le symbole de la flèche) ou en la recherchant par son nom. Les unités organisationnelles sélectionnées s'affichent en orange.

Changer les rôles et l'accès :

1.  Faites défiler vers le bas jusqu'à la section **Rôles et accès**.

    La première ligne indique les options d'accès au programme principal, et chacune des lignes suivantes indique les options d'une étape du programme. Les étapes du programme comportant une icône d'avertissement (point d'exclamation) contiennent des options d'accès qui s'écartent du programme principal, ce qui signifie qu'elles sont accessibles à une combinaison différente d'utilisateurs.

2.  Cliquez sur l'une des lignes et la boîte de dialogue **Partage** s'affichera.

3.  Modifiez les options d'accès en conséquence. Voir la documentation sur le dialogue de partage pour plus de détails.

4.  Cliquez sur le bouton **Appliquer**.

5.  Répétez le processus pour chaque programme/étape du programme. Vous pouvez également copier toutes les options d'accès du programme principal vers vos programmes enfants :

    1.  Sélectionnez les étapes du programme pour lesquelles vous souhaitez avoir des options d'accès similaires à celles du programme principal en cochant les cases situées sur le côté droit des étapes du programme. Vous pouvez également choisir de **Sélectionner toutes** les étapes du programme, **Désélectionner toutes** les étapes du programme ou **Sélectionner des étapes similaires**, en termes d'options d'accès, à celle du programme principal. Les étapes similaires sont activées par défaut.

    2.  Cliquez sur **Appliquer aux étapes sélectionnées**.

#### Créer des notifications de programme { #create_tracker_program_notifications }

Vous pouvez créer des notifications de programme pour les programmes avec enregistrement et leurs étapes. Les notifications sont envoyées soit par le système de messagerie interne DHIS2, soit par e-mail, soit par SMS. Vous pouvez utiliser les notifications de programme pour, par exemple, envoyer un rappel automatique à une entité suivie 10 jours avant un rendez-vous prévu. Vous utilisez les attributs de l'entité suivie du programme (par exemple le prénom) et les paramètres du programme (par exemple la date d'inscription) pour créer un modèle de notification.

1.  Ouvrez l'application **Maintenance** et cliquez sur **Programme puis notifications**.

    Une liste des notifications de programmes existants pour le programme sélectionné s'ouvre. Si le programme n'a pas de notifications de programme, la liste est vide.

2.  Cliquez sur le bouton ajouter et sélectionnez **Notification du programme**.

        ![](resources/images/program/what_to_send.png)

    ![](resources/images/program/where_to_send.png) ![](resources/images/program/who_to_send.png)

3.  Entrez un **Nom**.

4.  Créer le **Modèle d'objet**.

    Double-cliquez sur les paramètres dans le champ **Paramètres** pour les ajouter à votre objet.

    > **Note**
    >
    > The subject is not included in text messages.

5.  Créer le **Modèle de message**.

    Double-cliquez sur les noms des paramètres dans le champ **Paramètres** pour les ajouter à votre message.

    Cher A{w75KJ2mc4zz}, Vous êtes maintenant inscrit au V{programme_nom}.

6.  Dans le champ **Quand l'envoyer**, sélectionnez ce qui doit déclencher la notification.

    <table>
    <colgroup>
    <col style="width: 33%" />
    <col style="width: 33%" />
    <col style="width: 33%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Trigger</p></th>
    <th><p>Description</p></th>
    <th><p>Note</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p>Program enrollment</p></td>
    <td><p>The program notification is sent when the TEI enrols in the program.</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Program completion</p></td>
    <td><p>The program notification is sent when the program of TEI is completed</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="odd">
    <td><p>Days scheduled (incident date)</p></td>
    <td><p>The program notification is sent XX number of days before or after the incident date</p></td>
    <td><p>You need to enter the number of days before or after the scheduled date that the notification will be send.</p></td>
    </tr>
    <tr class="even">
    <td><p>Days scheduled (enrollment date)</p></td>
    <td><p>The program notification is sent XX number of days before or after the enrollment date</p></td>
    <td><p>You need to enter the number of days before or after the scheduled date that the notification will be send.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Program Rule</p></td>
    <td><p>Notification will be triggered as a result of program rule execution.</p></td>
    <td><p>Program rule with ProgramRuleActionType.SENDMESSAGE need to be in place to make this trigger successful.</p></td>
    </tr>
    </tbody>
    </table>

7.  In the **Who-to-send-it** field, select who should receive the program notification.

    <table>
    <colgroup>
    <col style="width: 33%" />
    <col style="width: 33%" />
    <col style="width: 33%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Recipient type</p></th>
    <th><p>Description</p></th>
    <th><p>Note</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p>Tracked entity instance</p></td>
    <td><p>Receives program notifications via e-mail or text message.</p></td>
    <td><p>To receive a program notification, the recipient must have an e-mail address or a phone number attribute.</p></td>
    </tr>
    <tr class="even">
    <td><p>Organisation unit contact</p></td>
    <td><p>Receives program notifications via e-mail or text message.</p></td>
    <td><p>To receive a program notification, the receiving organisation unit must have a registered contact person with e-mail address and phone number.</p></td>
    </tr>
    <tr class="odd">
    <td>Users at organisation unit:</td>
    <td><p>All users registered to the selected organisation unit receive program notifications via the internal DHIS2 messaging system.</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>User group</p></td>
    <td><p>All members of the selected user group receive the program notifications via the internal DHIS2 messaging system</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="odd">
    <td><p>Limit To Hierarchy</p></td>
    <td><p>Send notification only to those users who belong to any of the organisation unit in the hierarchy.</p></td>
    <td><p>This option is only available when User Group is selected as recipient.</p></td>
    </tr>
    <tr class="even">
    <td><p>Parent OrgUnit Only</p></td>
    <td><p>Send notification only to those users who belong to parent organisation unit.</p></td>
    <td><p>This option is only available when User Group is selected as recipient.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Program Attribute</p></td>
    <td><p>TrackedEntityAttribute can also be selected as recipient.</p></td>
    <td><p>This parameter will only be effective if TrackedEntityAttribute value type is PHONE_NUMBER/EMAIL.</p></td>
    </tr>
    </tbody>
    </table>

8.  Cliquez sur **Sauvegarder**.

### Créer une notification d'étape de programme { #create-a-program-stage-notification }

![](resources/images/program/what_to_send-psnt.png)

![](resources/images/program/what_to_send-psnt.png)

![](resources/images/program/what_to_send-psnt.png)

1.  Ouvrez l'application **Maintenance** et cliquez sur **Programme puis notifications**.

    Une liste des notifications existantes pour l'étape du programme sélectionnée s'ouvre. Si cette étape du programme ne comporte aucune notification d'étape du programme, la liste est vide.

2.  Cliquez sur le bouton d'ajout et sélectionnez**Notification de l'étape du programme**.

3.  Cliquez sur **AJOUTER**.

4.  Entrez un **Nom**.

5.  Créer le **Modèle d'objet**.

    Double-cliquez sur les noms des paramètres dans le champ **Paramètres** pour les ajouter à votre objet.

    > **Note**
    >
    > The subject is not included in text messages.

6.  Créer le **Modèle de message**.

    Double-cliquez sur les noms des paramètres dans le champ **Paramètres** pour les ajouter à votre message.

    Cher A{w75KJ2mc4zz}, veuillez vous présenter au rendez-vous le V{due_date}.

7.  Dans le champ **Quand l'envoyer**, sélectionnez ce qui doit déclencher la notification.

    <table>
    <colgroup>
    <col style="width: 33%" />
    <col style="width: 33%" />
    <col style="width: 33%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Trigger</p></th>
    <th><p>Description</p></th>
    <th><p>Note</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p>Program stage completion</p></td>
    <td><p>The program stage notification is sent when the program stage is completed</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Days scheduled (due date)</p></td>
    <td><p>The program stage notification is sent XX number of days before or after the due date</p></td>
    <td><p>You need to enter the number of days before or after the scheduled date that the notification will be send.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Program Rule</p></td>
    <td><p>Notification will be triggered as a result of program rule execution.</p></td>
    <td><p>Program rule with ProgramRuleActionType.SENDMESSAGE need to be in place to make this trigger successful.</p></td>
    </tr>
    </tbody>
    </table>

8.  Dans le champ **Destinataires**, sélectionnez qui doit recevoir la notification de l'étape du programme. Vous pouvez sélectionner :

    <table>
    <colgroup>
    <col style="width: 33%" />
    <col style="width: 33%" />
    <col style="width: 33%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Recipient type</p></th>
    <th><p>Description</p></th>
    <th><p>Note</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p>Tracked entity instance</p></td>
    <td><p>Receives program notifications via e-mail or text message.</p></td>
    <td><p>To receive a program stage notification, the recipient must have an e-mail address or a phone number attribute.</p></td>
    </tr>
    <tr class="even">
    <td><p>Organisation unit contact</p></td>
    <td><p>Receives program notifications via e-mail or text message.</p></td>
    <td><p>To receive a program stage notification, the receiving organisation unit must have a registered contact person with e-mail address and phone number.</p>
    <p>The system selects the same organisation unit as where the event took place.</p></td>
    </tr>
    <tr class="odd">
    <td>Users at organisation unit:</td>
    <td><p>All users registered to the selected organisation unit receive program notifications via the internal DHIS2 messaging system.</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>User group</p></td>
    <td><p>All members of the selected user group receive the program notifications via the internal DHIS2 messaging system</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="odd">
    <td><p>Limit To Hierarchy</p></td>
    <td><p>Send notification only to those users who belong to any of the organisation unit in the hierarchy.</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Parent OrgUnit Only</p></td>
    <td><p>Send notification only to those users who belong to parent organisation unit.</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="odd">
    <td><p>Data Element</p></td>
    <td><p>Data Element associated with ProgramStage can be selected as recipient.</p></td>
    <td><p>Data Element will only be effective if DataElement has value type PHONE_NUMBER/EMAIL.</p></td>
    </tr>
    <tr class="even">
    <td><p>Tracked Entity Attribute</p></td>
    <td><p>Tracked Entity Attribute associated with ProgramInstance/Enrollment can be selected as recipient.</p></td>
    <td><p>Attribute will only be effective if it has value type PHONE_NUMBER/EMAIL.</p></td>
    </tr>
    </tbody>
    </table>

9.  Flag **sendRepeatable**.

    This flag can be used if notification is required to be sent multiple times. For example in case of repeatable program stage, same notification will be sent as many times as the stage is repeated.

10. Cliquez sur **Sauvegarder**.

### Informations de référence : Paramètres de notification du programme { #reference_information_event_program_notification_parameters }

<table>
<caption>Program notification parameters to use in program notifications</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Notification type</p></th>
<th><p>Variable name</p></th>
<th><p>Variable code</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Program</p></td>
<td><p>Current date</p></td>
<td><pre><code>V{current_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Days since enrollment date</p></td>
<td><pre><code>V{days_since_enrollment_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Enrollment date</p></td>
<td><pre><code>V{enrollment_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Incident date</p></td>
<td><pre><code>V{incident_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Organisation unit name</p></td>
<td><pre><code>V{org_unit_name}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Program name</p></td>
<td><pre><code>V{program_name}</code></pre></td>
</tr>
<tr class="odd">
<td><p>Program stage</p></td>
<td><p>Current date</p></td>
<td><pre><code>V{current_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Days since due date</p></td>
<td><pre><code>V{days_since_due_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Days until due date</p></td>
<td><pre><code>V{days_until_due_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Due date</p></td>
<td><pre><code>V{due_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Organisation unit name</p></td>
<td><pre><code>V{org_unit_name}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Program name</p></td>
<td><pre><code>V{program_name}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Program stage name</p></td>
<td><pre><code>V{program_stage_name}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Event organisation unit</p></td>
<td><pre><code>V{event_org_unit_id}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Enrollment organisation unit</p></td>
<td><pre><code>V{enrollment_org_unit_id}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Program stage id</p></td>
<td><pre><code>V{program_stage_id}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Program id</p></td>
<td><pre><code>V{program_id}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Program instance id/Enrollment id</p></td>
<td><pre><code>V{enrollment_id}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Tracked entity id</p></td>
<td><pre><code>V{tracked_entity_id}</code></pre></td>
</tr>
</tbody>
</table>

## Configurer les indicateurs du programme { #configure_program_indicator }

### À propos des indicateurs du programme { #about_program_indicators }

Les indicateurs de programme sont des expressions basées sur les éléments de données et les attributs des entités suivies qui peuvent être utilisées pour calculer des valeurs à partir d'une formule. Les indicateurs de programme se composent d'un type d'agrégation, d'un type d'analyse, d'une expression et d'un filtre.

Les indicateurs de programme sont évalués sur la base du type d'agrégation, de l'expression et du filtre attribués. L'ordre d'évaluation est le suivant :

1.  Le _filtre_ filtrera les événements qui font partie de la routine d'évaluation/agrégation.

2.  La _expression_ sera évaluée par événement.

3.  Toutes les valeurs des expression évaluées seront _agrégées_ en fonction du type d'agrégation de l'indicateur de programme.

<table>
<caption>Composantes des indicateurs du programme</caption>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Composante des règles du programme</p></th>
<th><p>Description</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Type d'agrégation</p></td>
<td><p>Le type d'agrégation détermine comment l'indicateur de programme sera agrégé. Les types d'agrégation suivants sont disponibles :</p>
<ul>
<li><p>Moyenne</p></li>
<li><p>Moyenne (nombre)</p></li>
<li><p>Moyenne (nombre, désagrégation)</p></li>
<li><p>Moyenne (somme dans la hiérarchie des unités d'organisation)</p></li>
<li><p>Moyenne (somme des nombres)</p></li>
<li><p>Moyenne (somme des nombres, désagrégation)</p></li>
<li><p>Moyenne (Oui/Non)</p></li>
<li><p>Comptage</p></li>
<li><p>Personnalisé</p>
<p>L'agrégation de type &quot;personnalisé&quot ; vous permet de spécifier le type d'agrégation en ligne dans l'expression. Tous les autres types d'agrégation sont appliqués à l'ensemble de l'expression.</p>
<p>L'utilisation d'agrégation de type &quot;personnalisé&quot ; peut conduire à une exception de l'ordre d'évaluation décrit ci-dessus où des parties individuelles de l'expression peuvent être évaluées et agrégées, par opposition à l'expression entière qui est évaluée avant l'agrégation.</p></li>
<li><p>Défaut</p></li>
<li><p>Max</p></li>
<li><p>Min</p></li>
<li><p>Aucun</p></li>
<li><p>Écart-type</p></li>
<li><p>Somme</p></li>
<li><p>Variance</p></li>
</ul></td>
</tr>
<tr class="even">
<td><p>Type d'analytique</p></td>
<td><p>Les types d'analytique disponibles sont les suivants : <em>événement</em> et <em>inscription</em>.</p>
<p>Le type d'analytique définit si l'indicateur de programme est calculé en fonction des événements ou des inscriptions au programme. Cela a un impact sur le type de calculs que l'on peut effectuer.</p>
<ul>
<li><p>Événements implique une source de données où chaque événement existe sous la forme d'une ligne indépendante. Cela convient pour effectuer des agrégations telles que des comptages et des sommes.</p></li>
<li><p>Inscriptions impliquent une source de données où tous les événements d'une même inscription sont combinés sur une même ligne. Cela permet d'effectuer des calculs qui peuvent comparer les données d'événements de différentes étapes d'un programme au sein d'une inscription à un programme.</p></li>
</ul></td>
</tr>
<tr class="odd">
<td><p>Limites de la période d'analyse</p></td>
<td><p>Définit les limites du calcul des indicateurs de programme. Les limites déterminent quels événements ou inscriptions sont inclus dans les agrégations, toujours par rapport au début et à la fin de la période de déclaration agrégée. Lors de la création de l'indicateur de programme, les limites par défaut seront présélectionnées en fonction du type d'analyse type.</p>
<ul>
<li><p>Pour l'analytique de type <em>événement</em>, les limites par défaut seront configurées pour englober tout événement dont la date est postérieure au début de la période de référence et antérieure à la fin de cette période.</p></li>
<li><p>Pour l'analytique de type <em>inscription</em>, les limites par défaut engloberont toutes les inscriptions dont la date d'inscription est postérieure au début de la date de déclaration et antérieure à la fin de la période de déclaration. En outre, l'indicateur de programme d'inscription par défaut évalue l'événement le plus récent pour toutes les étapes du programme, quelle que soit la date.</p></li>
</ul>
<p>Il est possible de modifier les limites supérieure et inférieure pour inclure une période plus longue ou plus courte par rapport à la période de référence, ou de supprimer l'une des limites - en fait, de renvoyer toutes les données avant ou après une certaine période. Il est également possible d'ajouter des contraintes supplémentaires, par exemple pour faire en sorte qu'un indicateur de programme d'inscription n'inclue que les données relatives aux événements jusqu'à un moment donné.</p>
<ul>
<li><p>Cible limite : elle peut être <em>la date de l'incident</em>, <em>la date de l'événement</em>, <em>la date de d'inscription</em> ou <em>personnalisée</em>. Désigne ce qui est contraint par la limite.</p>
<p><em>personnalisé</em> est utilisé pour établir des limites qui ciblent soit un élément de donnée de date, soit un attribut d'entité suivi, soit la présence d'un événement dans une étape du programme. Ceci se fait avec une expression personnalisée sur le formulaire :</p>
<ul>
<li><p>Élément de donnée de type date: #{programStageUid.dataElementUid}.</p>
<pre><code>#{A03MvHHogjR.a3kGcGDCuk6}</code></pre></li>
<li><p>Élément de données de type date : #{attributeUid}.</p>
<pre><code>A{GPkGfbmArby}</code></pre></li>
<li><p>Présence d'un événement dans une étape spécifique du programme : PS_EVENTDATE:programStageUid.</p>
<pre><code>PS_EVENTDATE:A03MvHHogjR</code></pre>
<blockquote>
<p><strong>N.B.</strong></p>
Cette limite cible n'est applicable qu'à
l'Analytique de type Inscription
</blockquote></li>
</ul></li>
<li><p>Type de limite de la période d'analyse : Définit si la limite est une limite de fin - commençant par &quot;avant...&quot ;, ou une limite de début - &quot;après...&quot ;. Définit également si la limite se rapporte à la fin de la période de déclaration agrégée ou au début de la période de déclaration agrégée.</p></li>
<li><p>Période de décalage par quantité : Dans certains cas, par exemple l'analyse de cohorte, la limite doit être décalée par rapport à la période de déclaration globale lors de l'exécution des pivots et des rapports. La période de décalage par quantité est utilisée pour déplacer la limite actuelle soit en arrière (négatif) soit en avant (positif) dans le temps. La quantité et le type de période détermineront ensemble l'importance du décalage. Par exemple, pour un indicateur de programme simple d'une cohorte d'inscription pour une cohorte d'un an, il peut suffire de compenser chaque limite de l'indicateur de programme avec &quot;-1&quot ; et &quot;Années&quot ;</p></li>
<li><p>Period type: See above. Can be any period, e.g. <em>Weekly</em> or <em>Quarterly</em>.</p></li>
</ul></td>
</tr>
<tr class="even">
<td><p>Expression</p></td>
<td><p>The expression defines how the indicator is being calculated. The expression can contain references to various entities which will be substituted with a related values when the indicator is calculated:</p>
<ul>
<li><p>Data elements: Will be substituted with the value of the data element for the time period and organisation unit for which the calculation is done. Refers to both program stage and data element.</p></li>
<li><p>Attributes: Will be substituted with the value of the attribute for the person / tracked entity for which the calculation is done.</p></li>
<li><p>Variables: Will be substituted with special values linked to the program, including incident date and date of enrollment for the person, current date and count of values in the expression for the time period and organisation unit for which the calculation is done.</p></li>
<li><p>Constants: Will be substituted with the value of the constant.</p></li>
</ul>
<p>The expression is a mathematical expression and can also contain operators.</p>
<p>For single event programs and tracker programs with analytics type <em>event</em>, the expression will be evaluated <em>per event</em>, then aggregated according to its aggregation type.</p>
<p>For tracker programs with analytics type <em>enrollment</em>, the expression will be evaluated <em>per enrollment</em>, then aggregated according to its aggregation type.</p></td>
</tr>
<tr class="odd">
<td><p>Filter</p></td>
<td><p>The filter is applied to events and filters the data source used for the calculation of the indicator. I.e. the filter is applied to the set of events before the indicator expression is being evaluated. The filter must evaluate to either true or false. It filter is applied to each individual event. If the filter evaluates to true then the event is included later in the expression evaluation, if not it is ignored. The filter can, in a similar way as expressions, contain references to data elements, attributes and constants.</p>
<p>The program indicator filter can in addition use logical operators. These operators can be used to form logical expressions which ultimately evaluate to either true or false. For example you can assert that multiple data elements must be a specific value, or that specific attributes must have numerical values less or greater than a constant.</p></td>
</tr>
</tbody>
</table>

Dans l'application **Maintenance**, vous pouvez gérer les objets d'indicateurs de programme suivants :

<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Type d'objet</p></th>
<th><p>Fonctions disponibles</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Indicateur de programme</p></td>
<td><p>Créer, modifier, cloner, partager, supprimer, afficher les détails et traduire</p></td>
</tr>
<tr class="even">
<td><p>Groupe d'indicateurs du programme</p></td>
<td><p>Créer, modifier, cloner, partager, supprimer, montrer les détails et traduire</p></td>
</tr>
</tbody>
</table>

### Créer ou modifier un indicateur de programme { #create_program_indicator }

> **N.B.**
>
> Un indicateur de programme appartient à un seul programme.

1.  Ouvrez l'application **Maintenance** et cliquez sur **Indicateur** \> **Indicateur de programme**.

2.  Cliquez sur le bouton d'ajout.

3.  Sélectionnez un **Programme** et entrez :

    -   **Nom**

    -   **Nom abrégé**

    -   **Code**

    -   **Couleur**

    -   **Icône**

    -   **Description**

4.  Sélectionnez le nombre de **Décimales dans la production de données**.

5.  Sélectionnez un **Type d'agrégation**.

6.  Select if you want to **Display in form**.

7.  Attribuez une ou plusieurs **Légende**.

8.  (Facultatif) Entrez une **Combinaison d'options de catégorie pour l'exportation de données agrégées**.

9.  (Facultatif) Entrez une **Combinaison d'options d'attributs pour l'exportation de données agrégées**.

10. Créer l'expression.

    1.  Cliquez sur **Modifier l'expression**.

    2.  Créez l'expression à partir d'opérateurs mathématiques et des attributs, variables et constantes énumérés à droite.

11. Créer le filtre.

    1.  Cliquez sur **Modifier le filtre**.

    2.  Créez l'expression à partir d'opérateurs mathématiques et des attributs, variables et constantes énumérés à droite.

12. Cliquez sur **Sauvegarder**.

### Créer ou modifier un groupe d'indicateurs de programme { #create_program_indicator_group }

1.  Ouvrez l'application **Maintenance** et cliquez sur **Indicateur** \> **Groupe d'indicateurs de programme**.

2.  Cliquez sur le bouton d'ajout.

3.  Entrez **Nom** et **Code**.

4.  Dans la liste des indicateurs de programme disponibles, double-cliquez sur les indicateurs de programme que vous souhaitez attribuer à votre groupe.

5.  Cliquez sur **Sauvegarder**.

### Informations de référence : Exemples d'expressions et de filtres par type de valeur { #reference_information_program_indicator }

Le tableau ci-dessous présente des exemples de comment d'écrire des expressions et des filtres pour différents types d'éléments de données et de valeurs d'attribut :

<table>
<caption>Exemples d'expressions et de filtres par type de valeur</caption>
<thead>
<tr class="header">
<th>Type de valeur</th>
<th>Exemple de syntaxe</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Nombre entier</p>
<p>Nombre entier négatif</p>
<p>Nombre entier positif ou nul</p>
<p>Nombre entier positif</p>
<p>Nombre</p>
<p>Pourcentage</p></td>
<td><p>Les champs numériques peuvent être utilisés pour l'agrégation sous forme d'une expression, ou dans des filtres :</p>
<pre><code>#{mCXR7u4kNBW.K0A4BauXJDl} &gt;= 3</code></pre></td>
</tr>
<tr class="even">
<td><p>Oui/Non</p>
<p>Oui uniquement</p></td>
<td><p>Les champs booléens. Oui est traduit par le chiffre 1, Non par le chiffre 0. Peuvent être utilisés pour l'agrégation sous forme d'expression, ou dans les filtres :</p>
<pre><code>#{mCXR7u4kNBW.Popa3BauXJss} == 1</code></pre></td>
</tr>
<tr class="odd">
<td><p>Texte</p>
<p>Texte long</p>
<p>Numéro de téléphone</p>
<p>Email</p></td>
<td><p>Text fields. Can be checked for equality in filters:</p>
<pre><code>#{mCXR7u4kNBW.L8K4BauIKsl} == &#39;LiteralValue&#39;</code></pre></td>
</tr>
<tr class="even">
<td><p>Date</p>
<p>Age</p></td>
<td><p>Champs de date. Très utile lorsqu'il est combiné avec une fonction d2:daysBetween, qui produit un nombre pouvant être agrégé sous forme d'expression ou utilisé dans des filtres :</p>
<pre><code>d2:daysBetween(#{mCXR7u4kNBW.JKJKBausssl},V{enrollment_date}) &gt; 100</code></pre>
<p>Il est également possible de vérifier directement l'égalité dans les filtres :</p>
<pre><code>#{mCXR7u4kNBW.JKJKBausssl} == &#39;2011-10-28&#39;</code></pre></td>
</tr>
</tbody>
</table>

### Informations de référence : Fonctions, variables et opérateurs à utiliser dans les expressions d'indicateurs de programmes et les filtres { #program_indicator_functions_variables_operators }

Une expression qui comprend à la fois des attributs, des éléments de données et des constantes ressemble à ceci :

    (A{GPkGfbmArby} + #{mCXR7u4kNBW.NFkjsNiQ9PH}) * C{bCqvfPR02Im}

Une expression qui utilise le type d'agrégation personnalisé et peut donc utiliser les types d'agrégation en ligne ressemble à ceci :

    (sum(#{mCXR7u4kNBW.K0A4BauXJDl} * #{mCXR7u4kNBW.NFkjsNiQ9PH}) / sum(#{mCXR7u4kNBW.NFkjsNiQ9PH})) * 100

Prêtez attention à la façon dont l'opérateur d'agrégation "somme" est utilisé à l'intérieur de l'expression elle-même.

#### Fonctions à utiliser dans une expression ou un filtre d'indicateur de programme { #functions-to-use-in-a-program-indicator-expression-or-filter }

L'expression des indicateurs de programme et le filtre prennent en charge une série de fonctions. Ces fonctions peuvent être appliquées à des éléments et des attributs de données :

<table>
<caption>Functions to use in a program indicator expression or filter</caption>
<colgroup>
<col style="width: 15%" />
<col style="width: 30%" />
<col style="width: 54%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Function</p></th>
<th><p>Arguments</p></th>
<th><p>Description</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>d2:hasValue</p></td>
<td><p>(object)</p></td>
<td><p>Returns true if the data element/attribute has a value. Can be used in filters to distinguish between the number 0 and no value, and to distinguish between explicit &quot;No&quot; and no selection for a Yes/No field.</p></td>
</tr>
<tr class="even">
<td><p>d2:minutesBetween</p></td>
<td><p>(datetime, datetime)</p></td>
<td><p>Produces the number of minutes between two data elements/attributes of type &quot;date and time&quot;. When the first argument datetime comes before the second argument datetime, the number will be positive - in the opposite case, the number will be negative. The static datetime format is 'yyyy-MM-dd hh:mm'. Any of the arguments can be replaced with PS_EVENTDATE:(programStageUid) to compare the latest event date from a given program stage.</p></td>
</tr>
<tr class="odd">
<td><p>d2:daysBetween</p></td>
<td><p>(date, date)</p></td>
<td><p>Produces the number of days between two data elements/attributes of type date. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'. Any of the arguments can be replaced with PS_EVENTDATE:(programStageUid) to compare the latest event date from a given program stage.</p></td>
</tr>
<tr class="even">
<td><p>d2:weeksBetween</p></td>
<td><p>(date, date)</p></td>
<td><p>Produces the number of full weeks between two data elements/attributes of type date. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'. Any of the arguments can be replaced with PS_EVENTDATE:(programStageUid) to compare the latest event date from a given program stage.</p></td>
</tr>
<tr class="odd">
<td><p>d2:monthsBetween</p></td>
<td><p>(date, date)</p></td>
<td><p>Produces the number of full months between two data elements/attributes of type date. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'. Any of the arguments can be replaced with PS_EVENTDATE:(programStageUid) to compare the latest event date from a given program stage.</p></td>
</tr>
<tr class="even">
<td><p>d2:yearsBetween</p></td>
<td><p>(date, date)</p></td>
<td><p>Produces the number of full years between two data elements/attributes of type date. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'. Any of the arguments can be replaced with PS_EVENTDATE:(programStageUid) to compare the latest event date from a given program stage.</p></td>
</tr>
<tr class="odd">
<td><p>d2:condition</p></td>
<td><p>(boolean-expr, true-expr, false-expr)</p></td>
<td><p>Evaluates the boolean expression and if true returns the true expression value, if false returns the false expression value. The conditional expression must be quoted. The true-expr and false-expr arguments must follow the rules of any program indicator expression (including functions).</p></td>
</tr>
<tr class="even">
<td><p>d2:zing</p></td>
<td><p>(expression)</p></td>
<td><p>Returns zero if the expression is negative, otherwise returns the expression value. The expression must follow the rules of any program indicator expression (including functions).</p></td>
</tr>
<tr class="odd">
<td><p>d2:oizp</p></td>
<td><p>(expression)</p></td>
<td><p>Returns one if the expression is zero or positive, otherwise returns zero. The expression must follow the rules of any program indicator expression (including functions).</p></td>
</tr>
<tr class="even">
<td><p>d2:zpvc</p></td>
<td><p>(object, [,object ...])</p></td>
<td><p>Returns the number of numeric zero and positive values among the given object arguments. Can be provided any number of arguments.</p></td>
</tr>
<tr class="odd">
<td><p>d2:relationshipCount</p></td>
<td><p>([relationshipTypeUid])</p></td>
<td><p>Produces the number of relationships of the given type that is connected to the enrollment or event. When no type is given, all types are counted.</p></td>
</tr>
<tr class="even">
<td><p>d2:count</p></td>
<td><p>(dataElement)</p></td>
<td><p>Useful only for enrollment program indicators. Counts the number of data values that has been collected for the given program stage and data element in the course of the enrollment. The argument data element is supplied with the #{programStage.dataElement} syntax.</p></td>
</tr>
<tr class="odd">
<td><p>d2:countIfValue</p></td>
<td><p>(dataElement, value)</p></td>
<td><p>Useful only for enrollment program indicators. Counts the number of data values that matches the given literal value for the given program stage and data element in the course of the enrollment. The argument data element is supplied with the #{programStage.dataElement} syntax. The value can be a hard coded text or number, for example 'No_anemia' if only the values containing this text should be counted.</p></td>
</tr>
<tr class="even">
<td><p>d2:countIfCondition</p></td>
<td><p>(dataElement, condition)</p></td>
<td><p>Useful only for enrollment program indicators. Counts the number of data values that matches the given condition criteria for the given program stage and data element in the course of the enrollment. The argument data element is supplied with the #{programStage.dataElement} syntax. The condition is supplied as an expression in single quotes, for example '&lt;10' if only the values less than 10 should be counted.</p></td>
</tr>
<tr class="odd">
<td><p>if</p></td>
<td><p>(boolean-expr, true-expr, false-expr)</p></td>
<td><p>Evaluates the boolean expression and if true returns the true expression value, if false returns the false expression value. This is identical to the d2:condition function except that the boolean-expr is not quoted.</p></td>
</tr>
<tr class="even">
<td><p>isNull</p></td>
<td><p>(object)</p></td>
<td><p>Returns true if the object value is missing (null), otherwise false.</p></td>
</tr>
<tr class="odd">
<td><p>isNotNull</p></td>
<td><p>(object)</p></td>
<td><p>Returns true if the object value is not missing (not null), otherwise false.</p></td>
</tr>
<tr class="even">
<td><p>firstNonNull</p></td>
<td><p>(object [, object ...])</p></td>
<td><p>Returns the value of the first object that is not missing (not null). Can be provided any number of arguments. Any argument may also be a numeric or string literal, which will be returned if all the previous objects have missing values.</p></td>
</tr>
<tr class="odd">
<td><p>greatest</p></td>
<td><p>(expression [, expression ...])</p></td>
<td><p>Returns the greatest (highest) value of the expressions given. Can be provided any number of arguments. Each expression must follow the rules of any program indicator expression (including functions).</p></td>
</tr>
<tr class="even">
<td><p>least</p></td>
<td><p>(expression [, expression ...])</p></td>
<td><p>Returns the least (lowest) value of the expressions given. Can be provided any number of arguments. Each expression must follow the rules of any program indicator expression (including functions).</p></td>
</tr>
<tr class="odd">
<td><p>log</p></td>
<td><p>(expression [, base ])</p></td>
<td><p>Returns the natural logarithm (base e) of the numeric expression. If an integer is given as a second argument, returns the logarithm using that base.</p></td>
</tr>
<tr class="even">
<td><p>log10</p></td>
<td><p>(expression)</p></td>
<td><p>Returns the common logarithm (base 10) of the numeric expression.</p></td>
</tr>
</tbody>
</table>

Un filtre utilisant la fonction "hasValue" ressemble à ceci :

    d2:hasValue(#{mCXR7u4kNBW.NFkjsNiQ9PH})

Un filtre utilisant la fonction "relationshipCount(relationshipTypeUid)" ressemble à ceci :

    d2:relationshipCount('KLkjshoQ90U')

Une expression utilisant les fonctions "zing" et "oizp" ressemble à ceci :

    d2:zing(A{GPkGfbmArby}) + d2:oizp(#{mCXR7u4kNBW.NFkjsNiQ9PH}))

Une expression utilisant la fonction "daysBetween" ressemble à ceci :

    d2:daysBetween(#{mCXR7u4kNBW.k8ja2Aif1Ae},'2015-06-01')

Voici une expression qui utilise la fonction "yearBetween" pour comparer le dernier événement de la phase du programme "mCXR7u4kNBW" à la date d'inscription :

    d2:daysBetween(V{enrollment_date},PS_EVENTDATE:mCXR7u4kNBW)

Une expression qui utilise la fonction "condition" ressemble à ceci :

    d2:condition('#{mCXR7u4kNBW.NFkjsNiQ9PH} > 100',150,50)

Une expression qui utilise la fonction "countIfValue" pour ne compter que le nombre de fois où la valeur 10 a été recueillie ressemble à ceci :

    d2:countIfValue(#{mCXR7u4kNBW.NFkjsNiQ9PH}),10)

Une expression utilisant la fonction "zpvc" ressemble à ceci :

    d2:zpvc(A{GPkGfbmArby}),#{mCXR7u4kNBW.NFkjsNiQ9PH}),4,-1)

Une expression utilisant les fonctions "if" et "isull" ressemble à ceci :

    if(isNull(A{GPkGfbmArby}),10,20)

Une expression utilisant la fonction "firstNonNull" ressemble à ceci :

    firstNonNull(A{GPkGfbmArby}),#{mCXR7u4kNBW.NFkjsNiQ9PH},44)

<table>
<caption>Variables à utiliser dans une expression ou un filtre d'indicateur de programme</caption>
<colgroup>
<col style="width: 21%" />
<col style="width: 78%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Variable</p></th>
<th><p>Description</p></th>
</tr>
</thead>
<tbody>
<tr>
<td><p>date_événement</p></td>
<td><p>La date à laquelle l'événement ou le dernier événement de l'inscription a eu lieu.</p></td>
</tr>
<tr>
<td><p>date_création</p></td>
<td><p>La date à laquelle un événement ou une inscription a été créé dans le système.</p></td>
</tr>
<tr>
<td><p>date_échéance</p></td>
<td><p>La date à laquelle un événement est prévu.</p></td>
</tr>
<tr>
<td><p>date_synchro</p></td>
<td><p>La date à laquelle l'événement ou l'inscription a été synchronisé pour la dernière fois avec l'application Android.</p></td>
</tr>
<tr>
<td><p>date_incident</p></td>
<td><p>La date de l'incidence de l'événement.</p></td>
</tr>
<tr>
<td><p>date_inscription</p></td>
<td><p>La date à laquelle l'instance de l'entité suivie a été inscrite au programme.</p></td>
</tr>
<tr>
<td><p>statut_inscription</p></td>
<td><p>Peut être utilisé pour inclure ou exclure les inscriptions à certains statuts.</p>
<p>Pour calculer l'amélioration/la détérioration de l'hémoglobine tout au long d'une grossesse, il peut être judicieux de ne tenir compte que des inscriptions complètes. Si les inscriptions non terminées ne sont pas filtrées, elles représenteront des suivis de CPN à moitié terminés, où l'amélioration/détérioration finale n'est pas encore établie.</p></td>
</tr>
<tr>
<td><p>date_actuelle</p></td>
<td><p>La date actuelle.</p></td>
</tr>
<tr>
<td><p>nombre_valeur</p></td>
<td><p>Le nombre de valeurs non nulles dans la partie expression de l'événement.</p></td>
</tr>
<tr>
<td><p>nombre_valeur_zéro_positives</p></td>
<td><p>Le nombre de valeurs numériques positives dans la partie expression de l'événement.</p></td>
</tr>
<tr>
<td><p>nombre_événements</p></td>
<td><p>Le nombre d'événements (utile en combinaison avec des filtres).</p></td>
</tr>
<tr>
<td><p>nombre_inscriptions</p></td>
<td><p>Le nombre d'inscriptions (utile en combinaison avec les filtres). Le type d'agrégation pour l'indicateur de programme doit être COMPTER. </p></td>
</tr>
<tr>
<td><p>nombre_tei</p></td>
<td><p>Le nombre d'instances d'entités suivies (utile en combinaison avec des filtres). Le type d'agrégation pour l'indicateur de programme doit être COMPTER.</p></td>
</tr>
<tr>
<td><p>nombre_unités_d'org</p></td>
<td><p>Le nombre d'unités d'organisation (utile en combinaison avec les filtres). Le type d'agrégation pour l'indicateur de programme doit être COMPTER.</p></td>
</tr>
<tr>
<td><p>nom_étape_du programme</p></td>
<td><p>Peut être utilisé dans les filtres pour inclure seulement certaines étapes de programme dans un filtre pour les programmes de suivi. Utilise le nom de l'étape du programme :</p>
<pre><code>V{program_stage_name} == &#39;ANC first visit&#39;</code></pre></td>
</tr>
<tr>
<td><p>id_étape_du programme</p></td>
<td><p>Peut être utilisé dans les filtres pour inclure seulement certaines étapes de programme dans un filtre pour les programmes de suivi. Utilise l'identifiant unique de l'étape du programme :</p>
<pre><code>V{program_stage_id} == &#39;YPSSfbmAtt1&#39;</code></pre></td>
</tr>
<tr>
<td><p>début_période_d'analyse</p></td>
<td><p>Peut être utilisé dans des filtres ou des expressions pour comparer une date quelconque à la première date de chaque période de référence.</p>
<pre><code>d2:daysBetween(#{WZbXY0S00lP.w4ky6EkVahL}, V{analytics_period_start})</code></pre></td>
</tr>
<tr>
<td><p>fin_période_d'analyse</p></td>
<td><p>Peut être utilisé dans des filtres ou des expressions pour comparer une date quelconque à la dernière date incluse dans chaque période de référence.</p></td>
</tr>
</tbody>
</table>

    greatest(#{mCXR7u4kNBW.k8ja2Aif1Ae},#{mCXR7u4kNBW.NFkjsNiQ9PH},1)

#### Variables à utiliser dans une expression ou un filtre d'indicateur de programme { #variables-to-use-in-a-program-indicator-expression-or-filter }

L'expression et le filtre des indicateurs de programme prennent en charge toute une série de variables :

<table>
<caption>Variables to use in a program indicator expression or filter</caption>
<colgroup>
<col style="width: 21%" />
<col style="width: 78%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Variable</p></th>
<th><p>Description</p></th>
</tr>
</thead>
<tbody>
<tr>
<td><p>event_date</p></td>
<td><p>The date of when the event or the last event in the enrollment took place.</p></td>
</tr>
<tr>
<td><p>creation_date</p></td>
<td><p>The date of when an event or enrollment was created in the system.</p></td>
</tr>
<tr>
<td><p>due_date</p></td>
<td><p>The date of when an event is due.</p></td>
</tr>
<tr>
<td><p>sync_date</p></td>
<td><p>The date of when the event or enrollment was last synchronized with the Android app.</p></td>
</tr>
<tr>
<td><p>incident_date</p></td>
<td><p>The date of the incidence of the event.</p></td>
</tr>
<tr>
<td><p>enrollment_date</p></td>
<td><p>The date of when the tracked entity instance was enrolled in the program.</p></td>
</tr>
<tr>
<td><p>enrollment_status</p></td>
<td><p>Can be used to include or exclude enrollments in certain statuses.</p>
<p>When calculating the haemoglobin improvement/deterioration throughout a pregnancy, it might make sense to only consider completed enrollments. If non-completed enrollments is not filtered out, these will represent half-finished ANC followups, where the final improvement/deterioration is not yet established.</p></td>
</tr>
<tr>
<td><p>current_date</p></td>
<td><p>The current date.</p></td>
</tr>
<tr>
<td><p>value_count</p></td>
<td><p>The number of non-null values in the expression part of the event.</p></td>
</tr>
<tr>
<td><p>zero_pos_value_count</p></td>
<td><p>The number of numeric positive values in the expression part of the event.</p></td>
</tr>
<tr>
<td><p>event_count</p></td>
<td><p>The count of events (useful in combination with filters).</p></td>
</tr>
<tr>
<td><p>enrollment_count</p></td>
<td><p>The count of enrollments (useful in combination with filters). Aggregation type for the program indicator must be COUNT. </p></td>
</tr>
<tr>
<td><p>tei_count</p></td>
<td><p>The count of tracked entity instances (useful in combination with filters). Aggregation type for the program indicator must be COUNT.</p></td>
</tr>
<tr>
<td><p>org_unit_count</p></td>
<td><p>The count of organisation units (useful in combination with filters). Aggregation type for the program indicator must be COUNT.</p></td>
</tr>
<tr>
<td><p>program_stage_name</p></td>
<td><p>Can be used in filters for including only certain program stages in a filter for tracker programs. Uses the name of the program stage:</p>
<pre><code>V{program_stage_name} == &#39;ANC first visit&#39;</code></pre></td>
</tr>
<tr>
<td><p>program_stage_id</p></td>
<td><p>Can be used in filters for including only certain program stages in a filter for tracker programs. Uses the unique identifier of the program stage:</p>
<pre><code>V{program_stage_id} == &#39;YPSSfbmAtt1&#39;</code></pre></td>
</tr>
<tr>
<td><p>analytics_period_start</p></td>
<td><p>Can be used in filters or expressions for comparing any date to the first date in each reporting period.</p>
<pre><code>d2:daysBetween(#{WZbXY0S00lP.w4ky6EkVahL}, V{analytics_period_start})</code></pre></td>
</tr>
<tr>
<td><p>analytics_period_end</p></td>
<td><p>Can be used in filters or expressions for comparing any date to the last inclusive date in each reporting period.</p></td>
</tr>
<tr>
<td><p>event_status</p></td>
<td><p>Can be used in filters or expressions for comparing event status.</p>
<pre><code>V{event_status} == &#39;COMPLETED&#39;</code></pre></td>
</tr>
</tbody>
</table>

Un filtre utilisant la variable "Fin de la période d'analyse" pour n'inclure que les femmes ayant une DM qui surviendrait au premier trimestre :

    d2:daysBetween(#{WZbXY0S00lP.w4ky6EkVahL}, V{analytics_period_end}) <= 84

Une expression utilisant la variable "value count" ressemble à ceci :

    (#{A03MvHHogjR.a3kGcGDCuk6} + #{A03MvHHogjR.wQLfBvPrXqq}) / V{value_count}

Une expression qui utilise les variables "date_événement" et "date_incident" ressemble à ceci :

    d2:daysBetween(V{incident_date},V{event_date})

#### Opérateurs à utiliser dans un filtre d'indicateurs de programme { #operators-to-use-in-a-program-indicator-filter }

<table>
<caption>Opérateurs à utiliser dans un filtre d'indicateurs de programme</caption>
<colgroup>
<col style="width: 16%" />
<col style="width: 83%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Opérateur</p></th>
<th><p>Description</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>et</p></td>
<td><p>Logique ET</p></td>
</tr>
<tr class="even">
<td><p>ou</p></td>
<td><p>Logique OU</p></td>
</tr>
<tr class="odd">
<td><p>==</p></td>
<td><p>Égal à</p></td>
</tr>
<tr class="even">
<td><p>!=</p></td>
<td><p>Non égal à</p></td>
</tr>
<tr class="odd">
<td><p>&lt;</p></td>
<td><p>Inférieur à</p></td>
</tr>
<tr class="even">
<td><p>&lt;=</p></td>
<td><p>Inférieur ou égal à</p></td>
</tr>
<tr class="odd">
<td><p>&gt;</p></td>
<td><p>Supérieur à</p></td>
</tr>
<tr class="even">
<td><p>&gt;=</p></td>
<td><p>Supérieur ou égal à</p></td>
</tr>
</tbody>
</table>

Ces opérateurs peuvent être utilisés pour constituer des expressions logiques qui, en fin de compte, évaluent à vrai ou à faux. Vous pouvez par exemple affirmer que plusieurs éléments de données doivent avoir une valeur spécifique, ou que des attributs spécifiques doivent avoir des valeurs numériques inférieures ou supérieures à une constante.

Un filtre qui utilise à la fois des attributs et des éléments de données ressemble à ceci :

    A{cejWyOfXge6} == 'Female' and #{A03MvHHogjR.a3kGcGDCuk6} <= 2

> **Astuce**
>
> DHIS2 utilise la bibliothèque JEXL pour l'évaluation des expressions utilisant une syntaxe supplémentaire hormis ce qui est proposé dans cette documentation. Voir la référence sur la [page d'accueil du projet] (http://commons.apache.org/proper/commons-jexl/reference/syntax.html) pour savoir comment créer des expressions plus sophistiquées

## Configurer les règles du programme { #configure_program_rule }

### À propos des règles du programme { #about_program_rules }

Les règles du programme vous permettent de créer et de contrôler le comportement dynamique de l'interface utilisateur dans les applications **Saisie Tracker** et **Saisie dévénements**. Lors de la saisie des données, les expressions des règles du programme sont évaluées chaque fois que l'interface utilisateur est affichée, et chaque fois qu'un élément de donnée est modifié. La plupart des types d'actions prennent effet immédiatement lorsque l'utilisateur saisit des valeurs dans les applications **Saisie Tracker** et **Saisie d'événements**.

<table>
<caption>Composantes des règles du programme</caption>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Composante des règles du programme</p></th>
<th><p>Description</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Action de la règle du programme</p></td>
<td><p>Chaque règle de programme contient une ou plusieurs actions. Il s'agit des comportements qui sont déclenchés dans l'interface utilisateur lorsque l'expression est vraie. Les actions seront appliquées immédiatement si l'expression est vraie, et seront inversées lorsqu'elle n'est plus vraie. Il existe plusieurs types d'actions et vous pouvez avoir plusieurs actions dans une règle de programme.</p></td>
</tr>
<tr class="even">
<td><p>Expression de la règle du programme</p></td>
<td><p>Chaque règle de programme a une seule expression qui détermine si les actions de la règle de programme doivent être déclenchées, si l'expression est évaluée comme vraie. Si l'expression est vraie, la règle du programme est en vigueur et les actions seront exécutées. Si l'expression est fausse, la règle du programme n'est plus en vigueur et les actions ne seront plus appliquées.</p>
<p>Vous créez l'expression avec des opérateurs mathématiques standard, des fonctions personnalisées, des valeurs statiques définies par l'utilisateur et des variables de règles de programme. Les variables de règles de programme représentent les valeurs des attributs et des éléments de données qui seront évalués dans le cadre de l'expression.</p></td>
</tr>
<tr class="odd">
<td><p>Variable de règle de programme</p></td>
<td><p>Les variables de règles de programme vous permettent d'inclure des valeurs de données et des valeurs d'attributs dans les expressions de règles de programme. En règle générale, vous devez créer une ou plusieurs variables de règle de programme avant de créer une règle de programme. En effet, les expressions de règles de programme contiennent généralement au moins un élément de données ou une valeur d'attribut pour être significatives.</p>
<p>Les variables de règles de programme sont partagées entre toutes les règles de votre programme. Lorsque vous créez plusieurs règles de programme pour le même programme, ces règles partagent la même bibliothèque de variables de règles de programme.</p></td>
</tr>
</tbody>
</table>

Dans l'application **Maintenance**, vous gérez les objets de règles de programme suivants :

<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Type d'objets</p></th>
<th><p>Fonctions disponibles</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Règle du programme</p></td>
<td><p>Créer, modifier, cloner, supprimer, afficher les détails et traduire</p></td>
</tr>
<tr class="even">
<td><p>Variable des règles du programme</p></td>
<td><p>Créer, modifier, cloner, partager, supprimer, afficher les détails et traduire</p></td>
</tr>
</tbody>
</table>

### Déroulement { #workflow_program_rule }

1.  Dans l'application **Maintenance**, créez la ou les variable(s) de règle du programme si nécessaire.

2.  Dans l'application **Maintenance**, créez la règle du programme :

    1.  Entrez les détails des règles du programme.

    2.  Créez l'expression de la règle du programme.

    3.  Définissez les actions de la règle du programme.

3.  Dans les applications **Saisie Tracker** ou **Saisie d'événement**, vérifiez que la règle du programme fonctionne comme prévu.

### Créer ou modifier une variable de règle de programme { #create_program_rule_variable }

1.  Ouvrez l'application **Maintenance** et cliquez sur **Programme** \> **Variable de la règle du programme**.

2.  Cliquez sur le bouton d'ajout.

3.  Sélectionnez un **Programme** et entrez un **Nom**

4.  Sélectionnez si vous voulez **Utiliser le code pour l'ensemble des options**.

    Cette option n'est efficace que lorsque l'élément de données ou l'attribut de l'entité suivie est affilié à un ensemble d'options. Si vous ne sélectionnez pas cette option, la variable de règle du programme sera peuplée que du nom de l'ensemble d'options. Mais au cas où vous sélectionnez cette option, la variable de règle du programme sera peuplée du code de l'ensemble d'options.

5.  Sélectionnez un **Type de source** et saisissez les informations requises.

    Selon le type de source, vous devrez sélectionner, par exemple, une **étape du programme**, un **élément de données** ou un **attribut d'entité suivie**.

    Les types de source déterminent comment saisir une valeur dans la variable de règle de programme.

    <table>
    <colgroup>
    <col style="width: 50%" />
    <col style="width: 50%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Source type</p></th>
    <th><p>Description</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p><strong>Data element from the newest event for a program stage</strong></p></td>
    <td><p>This source type works the same way as <strong>Data element from the newest event in the current program</strong>, except that it only evaluates values from one program stage.</p>
    <p>This source type can be useful in program rules where the same data element is used in several program stages, and a rule needs to evaluate the newest data value from within one specific stage.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Data element from the newest event in the current program</strong></p></td>
    <td><p>This source type is used when a program rule variable needs to reflect the newest known value of a data element, regardless of what event the user currently has open.</p>
    <p>This source type is populated slightly differently in <strong>Tracker Capture</strong> and <strong>Event Capture</strong> apps:</p>
    <p><strong>Tracker Capture</strong>: the program rule variable will be populated with the newest data value collected for the given data element within the enrollment.</p>
    <p><strong>Event Capture</strong>: the program rule variable will be populated with the newest data value found within the 10 newest events in the same organisation unit.</p>
    <p>The newest data value is determined with event date.</p></td>
    </tr>
    <tr class="odd">
    <td><p><strong>Data element in current event</strong></p></td>
    <td><p>Program rule variables with this source type will contain the data value from the same event that the user currently has open.</p>
    <p>This is the most commonly used source type, especially for skip logic (hide actions) and warning/error rules.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Data element from previous event</strong></p></td>
    <td><p>Program rule variables with this source type will contain the value from a specified data element from a previous event. Only older events is evaluated, not including the event that the user currently has open.</p>
    <p>This source type is commonly used when a data element only should be collected once during an enrollment, and should be hidden in subsequent events.</p>
    <p>Another use case is making rules for validating input where there is an expected progression from one event to the next - a rule can evaluate whether the previous value is higher/lower and give a warning if an unexpected value is entered.</p>
    <p>This source type is populated slightly differently in <strong>Tracker Capture</strong> and <strong>Event Capture</strong> apps:</p>
    <p><strong>Tracker Capture</strong>: the program rule variable will be populated with the newest data value collected for the given data element within the enrollment - but only evaluating the events that comes before the current event date.</p>
    <p><strong>Event Capture</strong>: the program rule variable will be populated with the newest data value collected within the 10 events preceding the current event date - not including the current event.</p>
    <p>The newest data value is determined with event date.</p></td>
    </tr>
    <tr class="odd">
    <td><p><strong>Calculated value</strong></p></td>
    <td><p>Program rule variable with this source type is not connected directly to any form data - but will be populated as a result of some other program rules <strong>ASSIGN</strong> action.</p>
    <p>This variable will be used for making preliminary calculations, having a <strong>ASSIGN</strong> program rule action and assigning a value, this value can be used by other program rules - potentially making the expressions simpler and more maintainable.</p>
    <p>These variables will not be persisted and will stay in memory only during the execution of the set of program rules. Any program rule that assigns a data value to a preliminary calculated value would normally also have a <strong>priority</strong> assigned - to make sure that the preliminary calculation is done before the rule that consumes the calculated value.</p>
    </td>
    </tr>
    <tr class="even">
    <td><p><strong>Tracked entity attribute</strong></p></td>
    <td><p>Populates the program rule variable with a specified tracked entity attribute for the current enrollment.</p>
    <p>Use this is the source type to create program rules that evaluate data values entered during registration.</p>
    <p>This source type is also useful when you create program rules that compare data in events to data entered during registration.</p>
    <p>This source type is only used for tracker programs (programs with registration).</p></td>
    </tr>
    </tbody>
    </table>

6.  Cliquez sur **Sauvegarder**.

### Créer ou modifier une règle de programme { #create_program_rule }

> **N.B.**
>
> Une règle de programme appartient à un seul programme.

1.  Ouvrez l'application **Maintenance** et cliquez sur **Programme** \> **Règle de programme**.

2.  Cliquez sur le bouton d'ajout.

3.  Entrez les détails des règles du programme. Ces champs ne sont pas affichés à l'utilisateur final, ils sont uniquement destinés à l'administrateur du programme.

    -   **Programme**

    -   **Règle de déclenchement uniquement pour la phase du programme**

        Lorsque vous sélectionnez une étape du programme, la règle du programme ne s'appliquera qu'à l'étape sélectionnée, et non à chaque étape du programme.

    -   **Nom**

    -   **Description**

    -   **Priorité**

        Supposons que votre programme comporte 16 règles. Vous configurez les règles du programme à partir des paramètres de priorité suivants :

        -   Priorité 1 pour la règle A du programme

        -   Priorité 2 pour les règles B - K du programme

        -   Pas de priorité pour les règles L - P du programme

        Résultat : le système exécute les règles du programme dans l'ordre suivant :

        1.  Règle A du programme

        2.  Règles du programme B - K (impossible de savoir ou de configurer l'ordre dans lequel le système exécute ces règles du programme)

        3.  Règles L - P du programme

4.  Cliquez sur **Entrez l'expression de la règle du programme** et créez l'expression de la règle du programme à l'aide de variables, de fonctions et d'opérateurs.

5.  Cliquez sur **Définir les actions de la règle du programme** et créez les actions exécutées lorsque l'expression est vraie.

    1.  Cliquez sur le bouton d'ajout, sélectionnez une **Action** et entrez les informations requises.

        Selon le type d'action, vous devrez effectuer différents types de réglages. Pour certains types d'action, vous devez également saisir du texte libre ou créer des expressions.

        <table>
        <colgroup>
        <col style="width: 33%" />
        <col style="width: 33%" />
        <col style="width: 33%" />
        </colgroup>
        <thead>
        <tr class="header">
        <th><p>Action type</p></th>
        <th><p>Required settings</p></th>
        <th><p>Description</p></th>
        </tr>
        </thead>
        <tbody>
        <tr class="odd">
        <td></td>
        <td></td>
        <td></td>
        </tr>
        <tr class="even">
        <td><p><strong>Assign value</strong></p></td>
        <td><p><strong>Data element to assign value to</strong></p>
        <p><strong>Program rule variable to assign value to</strong></p>
        <p><strong>Expression to evaluate and assign</strong></p></td>
        <td><p>Used to help the user calculate and fill out fields in the data entry form. The idea is that the user shouldn’t have to fill in values that the system can calculate, for example BMI.</p>
        <p>When a field is assigned a value, the user sees the value but the user can't edit it.</p>
        <p>Example from Immunization stock card in Zambia: The data element for vaccine stock outgoing balance is calculated based on the data element for incoming stock balance minus the data elements for consumption and wastage.</p>
        <p>Advanced use: configure an 'assign value' to do a part of a calculation and then assign the result of the calculation to a program rule variable. This is the purpose with the &quot;Calculated value&quot; program rule variable.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Display text</strong></p></td>
        <td><p><strong>Display widget</strong></p>
        <p><strong>Static text</strong></p>
        <p><strong>Expression to evaluate and display after static text</strong></p></td>
        <td><p>Used to display information that is not an error or a warning, for example feedback to the user. You can also use this action to display important information, for example the patient's allergies, to the user.</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Display key/value pair</strong></p></td>
        <td><p><strong>Display widget</strong></p>
        <p><strong>Key label</strong></p>
        <p><strong>Expression to evaluate and display as value</strong></p></td>
        <td><p>Used to display information that is not an error or a warning.</p>
        <p>Example: calculate number of weeks and days in a pregnancy and display it in the format the clinician is used to see it in. The calculation is based on previous recorded data.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Error on complete</strong></p></td>
        <td><p><strong>Data element to display error next to</strong></p>
        <p><strong>Tracked entity attribute to display error next to</strong></p>
        <p><strong>Static text</strong></p>
        <p><strong>Expression to evaluate and display after static text</strong></p></td>
        <td><p>Used whenever you've cross-consistencies in the form that must be strictly adhered to. This action prevents the user from continuing until the error is resolved.</p>
        <p>This action differs from the regular <strong>Show error</strong> since the error is not shown until the user tries to actually complete the form.</p>
        <p>If you don't select a data element or a tracked entity attribute to display the error next to, make sure you write a comprehensive error message that helps the user to fix the error.</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Hide field</strong></p></td>
        <td><p><strong>Data element to hide</strong></p>
        <p><strong>Tracked entity attribute to hide</strong></p>
        <p><strong>Custom message for blanked field</strong></p></td>
        <td><p>Used when you want to hide a field from the user.</p>
        <p><strong>Custom message for blanked field</strong> allows you to define a custom message displayed to the user in case the program rule hides and blanks out the field after the user typed in or selected a value.</p>
        <p>If a hide field action hides a field that contains a value, the field will always be removed. If no message is defined, a standard message will be displayed to alert the user.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Hide section</strong></p></td>
        <td><p><strong>Program stage section to hide</strong></p></td>
        <td><p>TBA</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Hide program stage</strong></p></td>
        <td><p><strong>Program stage to hide</strong></p></td>
        <td><p>Used when you want to hide a program stage section from the user.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Make field mandatory</strong></p></td>
        <td><p><strong>Data element to make mandatory</strong></p>
        <p><strong>Tracked entity attribute to make mandatory</strong></p></td>
        <td><p>TBA</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Show error</strong></p></td>
        <td><p><strong>Data element to display error next to</strong></p>
        <p><strong>Tracked entity attribute to display error next to</strong></p>
        <p><strong>Static text</strong></p>
        <p><strong>Expression to evaluate and display after static text</strong></p></td>
        <td><p>Used whenever there are rules which must strictly be adhered to. The show error action prevents the user from continuing until the error is resolved.</p>
        <p>Such a strict validation should only be used when it's certain that the evaluated expression is never true unless the user has made a mistake in data entry.</p>
        <p>It's mandatory to define a message that is shown to the user when the expression is true and the action is triggered.</p>
        <p>You can select which data element or tracked entity attribute to link the error to. This will help the user to fix the error.</p>
        <p>In case several data elements or attributes are involved, select the one that is most likely that the user would need to change.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Show warning</strong></p></td>
        <td><p><strong>Data element to display warning next to</strong></p>
        <p><strong>Tracked entity attribute to display warning next to</strong></p>
        <p><strong>Static text</strong></p>
        <p><strong>Expression to evaluate and display after static text</strong></p></td>
        <td><p>Used to give the user a warning about the entered data, but at the same time to allow the user to save and continue.</p>
        <p>You can use warnings to help the user avoid errors in the entered data, while at the same time allow the user to consciously disregard the warnings and save a value that is outside present expectations.</p>
        <p><strong>Static text</strong> defines the message shown to the user when the expression is true and the action is triggered.</p>
        <p>You can select which data element or tracked entity attribute to link the error to. This will help the user to fix the error.</p>
        <p>In case several data elements or attributes are involved, select the one that is most likely that the user would need to change.</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Warning on complete</strong></p></td>
        <td><p><strong>Data element to display warning next to</strong></p>
        <p><strong>Tracked entity attribute to display warning next to</strong></p>
        <p><strong>Static text</strong></p>
        <p><strong>Expression to evaluate and display after static text</strong></p></td>
        <td><p>Used to give the user a warning if he/she tries to complete inconsistent data, but at the same time to allow the user to continue. The warning is shown in a dialog when the user completes the form.</p>
        <p><strong>Static text</strong> defines the message shown to the user when the expression is true and the action is triggered. This field is mandatory.</p>
        <p>You can select which data element or tracked entity attribute to link the error to. This will help the user to fix the error.</p>
        <p>If you don't select a data element or a tracked entity attribute to display the error next to, make sure you write a comprehensive error message that helps the user to fix the error.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Send Message</strong></p></td>
        <td><p><strong>Message template to send</strong></p></td>
        <td><p>Send Message triggers a notification based on provided message template. This action will be taken immediately. The message template will be parsed and variables will be substituted with actual values.</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Schedule Message</strong></p></td>
        <td><p><strong>Message template to send</strong></p>
        <p><strong>Data field which contains expression to evaluate the date which notification should be sent at. If this expression results in any value other than Date, then resultant will be discarded and notification will not get scheduled.</strong></p></td>
        <td><p>Schedule Message will schedule notification at date provided by Expression in the data field. Sample expression is given below</p>
        <pre><code>d2:addDays( &#39;2018-04-20&#39;, &#39;2&#39; )</code></pre>
        <p>Message template will be parsed and variables will be substituted with actual values.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Hide option</strong></p></td>
        <td><p><strong>Data element to hide option for</strong></p>
        <p><strong>Tracked entity attribute to hide option for</strong></p>
        <p><strong>Option that should be hidden</strong></p></td>
        <td><p>Used to selectively hide a single option for an option set in a given data element/tracked entity attribute.</p>
        <p>When combined with <strong>show option group</strong> the <strong>hide option</strong> takes precedence.</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Hide option group</strong></p></td>
        <td><p><strong>Data element to hide option group for</strong></p>
        <p><strong>Tracked entity attribute to hide option group for</strong></p>
        <p><strong>Option group that should be hidden</strong></p></td>
        <td><p>Used to hide all options in a given option group and data element/tracked entity attribute.</p>
        <p>When combined with <strong>show option group</strong> the <strong>hide option group</strong> takes precedence.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Show option group</strong></p></td>
        <td><p><strong>Data element to show option group for</strong></p>
        <p><strong>Tracked entity attribute to show option group for</strong></p>
        <p><strong>Option group that should be shown</strong></p></td>
        <td><p>Used to show only options from a given option group in a given data element/tracked entity attribute. To show an option group implicitly hides all options that is not part of the group(s) that is shown.</p></td>
        </tr>
        </tbody>
        </table>

    2.  Cliquez sur **Sauvegarder**.

    3.  (Facultatif) Répétez les étapes ci-dessus pour ajouter d'autres actions.

6.  Cliquez sur **Sauvegarder**.

### Exemple : Règles du programme { #program_rule_examples }

> **N.B.**
>
> Vous pouvez voir tous les exemples sur le serveur de démo : <https://play.dhis2.org/dev/dhis-web-maintenance/#/list/programSection/programRule>

Cet exemple montre comment configurer une règle de programme qui calcule le nombre de semaines et de jours d'une grossesse et affiche le résultat dans le format utilisé par le clinicien. Le calcul est basé sur les données enregistrées précédemment.

1.  ![](resources/images/maintainence/pg_rule_ex/keyvaluepair_details.png)

2.  ![](resources/images/maintainence/pg_rule_ex/keyvaluepair_expression.png)

3.  ![](resources/images/maintainence/pg_rule_ex/keyvaluepair_action.png)

    L'expression complète dans le champ **Données** :

        d2:concatenate(d2:weeksBetween(#{lmp}, V{current_date}), '+',
        d2:modulus(d2:daysBetween(#{lmp}, V{current_date}), 7))

![](resources/images/maintainence/pg_rule_ex/keyvaluepair_result.png)

Cet exemple montre comment configurer une règle de programme pour afficher du texte dans le widget Feedback de l'application **Saisie Tracker**.

1.  ![](resources/images/maintainence/pg_rule_ex/displaytext_pgrule_variable.png)

2.  ![](resources/images/maintainence/pg_rule_ex/displaytext_details.png)

3.  ![](resources/images/maintainence/pg_rule_ex/displaytext_expression.png)

4.  ![](resources/images/maintainence/pg_rule_ex/displaytext_action.png)

![](resources/images/maintainence/pg_rule_ex/displaytext_result.png)

Cet exemple montre comment configurer une règle de programme pour afficher toujours certaines données dans le widget Feedback de l'application **Saisie Tracker**. Ceci est utile lorsque l'on veut s'assurer que les données vitales, en l'occurence les allergies aux médicaments, sont toujours visibles.

1.  ![](resources/images/maintainence/pg_rule_ex/displaytext2_pgrule_variable.png)

2.  ![](resources/images/maintainence/pg_rule_ex/displaytext2_details.png)

3.  ![](resources/images/maintainence/pg_rule_ex/displaytext2_expression.png)

4.  ![](resources/images/maintainence/pg_rule_ex/displaytext2_action.png)

![](resources/images/maintainence/pg_rule_ex/displaytext2_first_pgstage.png)

![](resources/images/maintainence/pg_rule_ex/displaytext2_result.png)

En utilisant une règle de programme du type "Attribuer une valeur", vous pouvez calculer la valeur "Âge gestationnel à la visite" et la saisir dans le formulaire de saisie. Vous configurez la règle du programme pour calculer l'"âge gestationnel à la visite" sur la base de la "Date des dernières règles" ou de la "Date d'échéance estimée de l'échographie".

1.  ![](resources/images/maintainence/pg_rule_ex/assign_details.png)

2.  ![](resources/images/maintainence/pg_rule_ex/assign_expression.png)

3.  ![](resources/images/maintainence/pg_rule_ex/assign_action.png)

![](resources/images/maintainence/pg_rule_ex/assign_result.png)

### Informations de référence : Opérateurs et fonctions à utiliser dans l'expression de la règle du programme { #program_rules_operators_functions }

> **Conseil**
>
> Vous pouvez emboîter des fonctions les unes dans les autres et avec des sous-expressions pour former des conditions plus complexes. Voici un exemple qui génère l'âge gestationnel en semaines, basé sur la date des dernières menstruations :
>
>     d2:floor( d2:daysBetween(#{lastMenstrualDate},V{event_date}) / 7 )

> **Conseil**
>
> Le type de source déterminera comment les appels de fonction d2 : évalueront un paramètre (champ source).
>
> Exemple : où \#{hemoglobinCurrent} est défini sur le type de source **Élément de donnée dans l'événement en cours**. L'appel de fonction suivant permet d'évaluer si les données sur l'hémoglobine sont saisies dans l'événement en cours.
>
>     d2:hasValue( 'hemoglobinCurrent' )
>
> Exemple : où \#{hémoglobine} est défini sur le type de source **Élément de donnée provenant du dernier événement du programme en cours**. L'appel de fonction suivant  permet d'évaluer s'il existe une valeur pour l'hémoglobine dans un événement quelconque de l'inscription.
>
>     d2:hasValue( 'hemoglobin' )
>
> Exemple : où \#{hemoglobinPrevious} est défini sur le type de source **Élément de donnée de l'événement précédent** . L'appel de fonction suivant permet d'évaluer s'il existe une valeur pour l'hémoglobine parmi les événements précédant l'événement en cours.
>
>     d2:hasValue( 'hemoglobinPrevious' )

<table>
<caption>Opérateurs possibles à utiliser dans une expression de règle de programme</caption>
<colgroup>
<col style="width: 16%" />
<col style="width: 83%" />
</colgroup>
<thead>
<tr class="header">
<th>Opérateur</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>+</p></td>
<td><p>Additionner les nombres</p></td>
</tr>
<tr class="even">
<td><p>-</p></td>
<td><p>Soustraire des nombres les uns des autres</p></td>
</tr>
<tr class="odd">
<td><p>*</p></td>
<td><p>Multiplier deux nombres</p></td>
</tr>
<tr class="even">
<td><p>/</p></td>
<td><p>Diviser deux nombres</p></td>
</tr>
<tr class="odd">
<td><p>%</p></td>
<td><p>Le module de deux nombres</p></td>
</tr>
<tr class="even">
<td><p>&amp;&amp;</p></td>
<td><p>Logique ET. Vrai uniquement lorsque l'expression des côtés gauche et droit est vraie. Le côté gauche et le côté droit peuvent être oui/non, oui uniquement ou une sous-expression entre parenthèses.</p></td>
</tr>
<tr class="odd">
<td><p>||</p></td>
<td><p>Logique OU. Vrai lorsque l'expression de gauche ou l'expression de droite est vraie. Le côté gauche et le côté droit peuvent être oui/non, oui uniquement ou une sous-expression entre parenthèses.</p></td>
</tr>
<tr class="even">
<td><p>&gt;</p></td>
<td><p>Nombre de gauche supérieur à celui de droite</p></td>
</tr>
<tr class="odd">
<td><p>&gt;=</p></td>
<td><p>Nombre de gauche supérieur ou égal à celui de droite</p></td>
</tr>
<tr class="even">
<td><p>&lt;</p></td>
<td><p>Le nombre de gauche est inférieur à celui de droite</p></td>
</tr>
<tr class="odd">
<td><p>&lt;=</p></td>
<td><p>Le nombre de gauche inférieur ou égal à celui de droite.</p></td>
</tr>
<tr class="even">
<td><p>==</p></td>
<td><p>Le côté gauche est égal au côté droit. Prend en charge les chiffres, le texte, oui/non et oui uniquement.</p></td>
</tr>
<tr class="odd">
<td><p>!=</p></td>
<td><p>Le côté gauche n'est pas égal au côté droit. Prend en charge les chiffres, le texte, oui/non et oui uniquement.</p></td>
</tr>
<tr class="even">
<td><p>!</p></td>
<td><p>Annulez la valeur suivante. Peut être utilisé pour oui/non, oui uniquement ou une sous-expression entre parenthèses.</p></td>
</tr>
<tr class="odd">
<td><p>()</p></td>
<td><p>Les parenthèses sont utilisées pour regrouper les sous-expressions.</p></td>
</tr>
</tbody>
</table>

<table>
<caption>Custom functions to use in a program rule expression</caption>
<colgroup>
<col style="width: 15%" />
<col style="width: 30%" />
<col style="width: 54%" />
</colgroup>
<thead>
<tr class="header">
<th>Function</th>
<th>Arguments</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>d2:ceil</td>
<td>(number)</td>
<td>Rounds the input argument <strong>up</strong> to the nearest whole number.
<p>Example:</p>
<pre><code>d2:ceil(#{hemoglobinValue})</code></pre></td>
</tr>
<tr class="even">
<td>d2:floor</td>
<td>(number)</td>
<td>Rounds the input argument <strong>down</strong> to the nearest whole number.
<p>An example producing the number of weeks the woman is pregnant. Notice that the sub-expression #{gestationalAgeDays}/7 is evaluated before the floor function is executed:</p>
<pre><code>d2:floor(#{gestationalAgeDays}/7)</code></pre></td>
</tr>
<tr class="odd">
<td>d2:round</td>
<td>(number)</td>
<td>Rounds the input argument to the nearest whole number.</td>
</tr>
<tr class="even">
<td>d2:modulus</td>
<td>(number,number)</td>
<td>Produces the modulus when dividing the first with the second argument.
<p>An example producing the number of days the woman is into her current pregnancy week:</p>
<pre><code>d2:modulus(#{gestationalAgeDays},7)</code></pre></td>
</tr>
<tr class="odd">
<td>d2:zing</td>
<td>(number)</td>
<td>Evaluates the argument of type number to zero if the value is negative, otherwise to the value itself.</td>
</tr>
<tr class="even">
<td>d2:oizp</td>
<td>(number)</td>
<td>Evaluates the argument of type number to one if the value is zero or positive, otherwise to zero.</td>
</tr>
<tr class="odd">
<td>d2:concatenate</td>
<td>(object, [,object, object,...])</td>
<td>Produces a string concatenated string from the input parameters. Supports any number of parameters. Will mainly be in use in future action types, for example to display gestational age with d2:concatenate('weeks','+','gestationalageDays').</td>
</tr>
<tr class="even">
<td>d2:daysBetween</td>
<td>(date, date)</td>
<td>Produces the number of days between the first and second argument. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'.
<p>Example, calculating the gestational age(in days) of a woman, based on the last menstrual period and the current event date:</p>
<pre><code>d2:daysBetween(#{lastMenstrualDate},V{event_date})</code></pre></td>
</tr>
<tr class="odd">
<td>d2:weeksBetween</td>
<td>(date, date)</td>
<td>Produces the number of full weeks between the first and second argument. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'.</td>
</tr>
<tr class="even">
<td>d2:monthsBetween</td>
<td>(date, date)</td>
<td>Produces the number of full months between the first and second argument. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'.</td>
</tr>
<tr class="odd">
<td>d2:yearsBetween</td>
<td>(date, date)</td>
<td>Produces the number of years between the first and second argument. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'.</td>
</tr>
<tr class="even">
<td>d2:addDays</td>
<td>(date, number)</td>
<td>Produces a date based on the first argument date, adding the second argument number of days.
<p>An example calculating the pregnancy due date based on the last menstrual period:</p>
<pre><code>d2:addDays(#{lastMenstrualDate},283)</code></pre></td>
</tr>
<tr class="odd">
<td>d2:count</td>
<td>(sourcefield)</td>
<td>Counts the number of values that is entered for the source field in the argument. The source field parameter is the name of one of the defined source fields in the program - see example
<p>Example usage where #{previousPregnancyOutcome} is one of the source fields in a repeatable program stage &quot;previous pregnancy&quot;:</p>
<pre><code>d2:count(&#39;previousPregnancyOutcome&#39;)</code></pre></td>
</tr>
<tr class="even">
<td>d2:countIfValue</td>
<td>(sourcefield,text)</td>
<td>Counts the number of matching values that is entered for the source field in the first argument. Only occurrences that matches the second argument is counted. The source field parameter is the name of one of the defined source fields in the program - see example.
<p>Example usage where #{previousPregnancyOutcome} is one of the source fields in a repeatable program stage &quot;previous pregnancy&quot;. The following function will produce the number of previous pregnancies that ended with abortion:</p>
<pre><code>d2:countIfValue(&#39;previousPregnancyOutcome&#39;,&#39;Abortion&#39;)
                                    </code></pre></td>
</tr>
<tr class="odd">
<td>d2:countIfZeroPos</td>
<td>(sourcefield)</td>
<td>Counts the number of values that is zero or positive entered for the source field in the argument. The source field parameter is the name of one of the defined source fields in the program - see example.
<p>Example usage where #{fundalHeightDiscrepancy} is one of the source fields in program, and it can be either positive or negative. The following function will produce the number of positive occurrences:</p>
<pre><code>d2:countIfZeroPos(&#39;fundalHeightDiscrepancy&#39;)
                                    </code></pre></td>
</tr>
<tr class="even">
<td>d2:hasValue</td>
<td>(sourcefield)</td>
<td>Evaluates to true of the argument source field contains a value, false if no value is entered.
<p>Example usage, to find if the source field #{currentPregnancyOutcome} is yet filled in:</p>
<pre><code>d2:hasValue(&#39;currentPregnancyOutcome&#39;)
                                    </code></pre></td>
</tr>
<tr class="odd">
<td>d2:zpvc</td>
<td>(object, [,object, object,...])</td>
<td>Returns the number of numeric zero and positive values among the given object arguments. Can be provided with any number of arguments.</td>
</tr>
<tr class="even">
<td>d2:validatePattern</td>
<td>(text, regex-pattern)</td>
<td>Evaluates to true if the input text is an exact match with the supplied regular expression pattern. The regular expression needs to be escaped.
<p>Example expression, triggering actions if a number is not on the pattern 9999/99/9:</p>
<pre><code>!d2:validatePattern(A{nrc},&#39;\\d{6}\/\\d{2}\/\\d&#39;)</code></pre>
<p>Example expression, triggering actions that if the address is not consisting of letters or white spaces, then a white space, then a number:</p>
<pre><code>!d2:validatePattern(A{registrationAddress},&#39;[\\w ]+ \\d+&#39;)</code></pre>
<p>Example, triggering actions if a name contains any numbers:</p>
<pre><code>!d2:validatePattern(A{name},&#39;[^\\d]*&#39;)</code></pre>
<p>Example expression, triggering actions if a mobile number contains the illegal number sequence 555:</p>
<pre><code>d2:validatePattern(A{mobile} ,&#39;.*555.*&#39;)</code></pre></td>
</tr>
<tr class="odd">
<td>d2:left</td>
<td>(text, num-chars)</td>
<td>Evaluates to the left part of a text, num-chars from the first character.
<p>The text can be quoted or evaluated from a variable:</p>
<pre><code>d2:left(#{variableWithText}, 3)</code></pre></td>
</tr>
<tr class="even">
<td>d2:right</td>
<td>(text, num-chars)</td>
<td>Evaluates to the right part of a text, num-chars from the last character.
<p>The text can be quoted or evaluated from a variable:</p>
<pre><code>d2:right(#{variableWithText}, 2)</code></pre></td>
</tr>
<tr class="odd">
<td>d2:substring</td>
<td>(text, start-char-num, end-char-num)</td>
<td>Evaluates to the part of a string specified by the start and end character number.
<p>Example expression:</p>
<pre><code>d2:substring(#{variableWithText}, 1, 3)</code></pre>
If the #{variableWithText} in the above example was 'ABCD', then the result of the evaluation would be 'BC'</td>
</tr>
<tr class="even">
<td>d2:split</td>
<td>(text, delimiter, element-num)</td>
<td>Split the text by delimiter, and keep the nth element(0 is the first).
<p>The text can be quoted or evaluated from a variable, the delimiter must be quoted:</p>
<pre><code>d2:split(#{variableWithText}, &#39;-&#39;, 1)</code></pre>
<p>Note: comma delimiter(,) is not supported.</p></td>
</tr>
<tr class="odd">
<td>d2:length</td>
<td>(text)</td>
<td>Find the length of a string.
<p>Example:</p>
<pre><code>d2:length(#{variableWithText})</code></pre></td>
</tr>
<tr class="even">
<td>d2:inOrgUnitGroup</td>
<td>(text)</td>
<td>Evaluates whether the current organisation unit is in the argument group. The argument can be defined with either ID or organisation unit group code. The current organisation unit will be the event organisation unit when the rules is triggered in the context of an event, and the enrolling organisation unit when the rules is triggered in the event of a TEI registration form.
<p>Example expression:</p>
<pre><code>d2:inOrgUnitGroup(&#39;HIGH_RISK_FACILITY&#39;)</code></pre></td>
</tr>
<tr class="odd">
<td>d2:hasUserRole</td>
<td>(user role)</td>
<td>Returns true if current user has this role otherwise false
<p>Example expression:</p>
<pre><code>d2:hasUserRole(&#39;UYXOT4A3ASA&#39;)</code></pre></td>
</tr>
<tr class="even">
<td>d2:zScoreWFA</td>
<td>Z-Score weight for age indicator</td>
<td>Calculates z-score based on data provided by WHO weight-for-age indicator.
e varies between -3.5 to 3.5 depending upon the value of weight.
<p>Example expression:</p>
<pre><code>d2:zScoreWFA( ageInMonths, weight, gender )</code></pre>

> **Gender** Gender is considered female by default. Any of the following codes can be used to denote male: 'Male', 'MALE', 'male', 'ma', 'm', 'M', 0, false

</td>
</tr>
<tr class="odd">
<td>d2:zScoreHFA</td>
<td>Z-Score height for age indicator</td>
<td>Calculates z-score based on data provided by WHO height-for-age indicator.
Its value varies between -3.5 to 3.5 depending upon the value of height.
<p>Example expression:</p>
<pre><code>d2:zScoreHFA( ageInMonths, height, gender )</code></pre></td>
</tr>
<tr class="even">
<td>d2:zScoreWFH</td>
<td>Z-Score weight for height indicator</td>
<td>Calculates z-score based on data derived from the WHO weight-for-length and weight-for-height indicators.
The data used for girls can be found [here](https://github.com/dhis2/dhis2-docs/blob/master/src/commonmark/en/content/user/resources/txt-files/zScoreWFH-girls-table.txt) and for boys [here](https://github.com/dhis2/dhis2-docs/blob/master/src/commonmark/en/content/user/resources/txt-files/zScoreWFH-boys-table.txt).
Its value varies between -3.5 to 3.5 depending upon the value of the weight.
<p>Example expression:</p>
<pre><code>d2:zScoreWFH( height, weight, gender )</code></pre></td>
</tr>
<tr class="odd">
<td>d2:minValue</td>
<td>Get minimum value for provided item</td>
<td>Function gets minimum value of provided data element across entire enrollment.
<p>Example expression:</p>
<pre><code>d2:minValue( 'blood-pressure' )</code></pre></td>
</tr>
<tr class="even">
<td>d2:maxValue</td>
<td>Get maximum value for provided item</td>
<td>Function gets maximum value of provided data element across entire enrollment.
<p>Example expression:</p>
<pre><code>d2:maxValue( 'blood-pressure' )</code></pre></td>
</tr>
</tbody>
</table>

<table>
<caption>Standard variables to use in program rule expressions</caption>
<colgroup>
<col style="width: 15%" />
<col style="width: 30%" />
<col style="width: 54%" />
</colgroup>
<thead>
<tr class="header">
<th>Variable</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>V{current_date}</td>
<td>(date)</td>
<td>Contains the current date whenever the rule is executed.
<p>Example expression:</p>
<pre><code>d2:daysBetween(#{symptomDate},V{current_date}) &lt; 0 </code></pre></td>
</tr>
<tr class="even">
<td>V{event_date}</td>
<td>(date)</td>
<td>Contains the event date of the current event execution. Will not have a value at the moment the rule is executed as part of the registration form.</td>
</tr>
<tr class="odd">
<td>V{event_status}</td>
<td>(string)</td>
<td>Contains status of the current event or enrollment.
<p>Example expression to check status is:</p>
<pre><code>V{event_status} == &#39;COMPLETED&#39;</code></pre></td>
</tr>
<tr class="even">
<td>V{due_date}</td>
<td>(date)</td>
<td>This variable will contain the current date when the rule is executed. Note: This means that the rule might produce different results at different times, even if nothing else has changed.</td>
</tr>
<tr class="odd">
<td>V{event_count}</td>
<td>(number)</td>
<td>Contains the total number of events in the enrollment.</td>
</tr>
<tr class="even">
<td>V{enrollment_date}</td>
<td>(date)</td>
<td>Contains the enrollment date of the current enrollment. Will not have a value for single event programs.</td>
</tr>
<tr class="odd">
<td>V{incident_date}</td>
<td>(date)</td>
<td>Contains the incident date of the current enrollment. Will not have a value for single event programs.</td>
</tr>
<tr class="even">
<td>V{enrollment_id}</td>
<td>(string)</td>
<td>Unique identifier string(UID) of the current enrollment. Will not have a value for single event programs.</td>
</tr>
<tr class="odd">
<td>V{event_id}</td>
<td>(string)</td>
<td>Unique identifier string(UID) of the current event context. Will not have a value at the moment the rule is executed as part of the registration form.</td>
</tr>
<tr class="even">
<td>V{orgunit_code}</td>
<td>(string)</td>
<td>Contains the code of the orgunit that is linked to the current enrollment. For single event programs the code from the current event orgunit will be used instead.
<p>Example expression to check whether orgunit code starts with WB_:</p>
<pre><code>d2:left(V{orgunit_code},3) == &#39;WB_&#39;</code></pre></td>
</tr>
<tr class="odd">
<td>V{environment}</td>
<td>(string)</td>
<td>Contains a code representing the current runtime environment for the rules. The possible values is &quot;WebClient&quot;, &quot;AndroidClient&quot; and &quot;Server&quot;. Can be used when a program rule is only supposed to run in one or more of the client types.</td>
</tr>
<tr class="even">
<td>V{program_stage_id}</td>
<td>(string)</td>
<td>Contains the ID of the current program stage that triggered the rules. This can be used to run rules in specific program stages, or avoid execution in certain stages. When executing the rules in the context of a TEI registration form the variable will be empty.</td>
</tr>
<tr class="odd">
<td>V{program_stage_name}</td>
<td>(string)</td>
<td>Contains the name of the current program stage that triggered the rules. This can be used to run rules in specific program stages, or avoid execution in certain stages. When executing the rules in the context of a TEI registration form the variable will be empty.</td>
</tr>
<tr class="even">
<td>V{completed_date}</td>
<td>(string)</td>
<td>This variable contains completion date of event which triggered this rule. If event is not yet complete then &quot;completed_date&quot; contains nothing.</td>
</tr>

</tbody>
</table>

## Configurer les types de relation. { #configure_relationship_type }

### À propos des types de relation { #about_relationship_types }

Une relation est un lien entre deux entités dans le modèle Tracker. Une relation est considérée comme une donnée dans DHIS2 et est basée sur un type de relation, de la même manière qu'une instance d'entité suivie est basée sur un type d'entité suivie.

Les relations comprennent toujours deux entités, et ces entités peuvent inclure des instances d'entités suivies, des inscriptions et des événements, et toute combinaison de ceux-ci. Notez que toutes ces combinaisons ne sont pas disponibles dans les applications actuelles.

En outre, les relations peuvent être définies comme unidirectionnelles ou bidirectionnelles. La seule différence fonctionnelle est qu'elles nécessitent actuellement différents niveaux d'accès pour être créées. Les relations unidirectionnelles exigent que l'utilisateur ait un accès en écriture de données à l'entité "de" et un accès en lecture de données à l'entité "à", tandis que les relations bidirectionnelles exigent un accès en écriture de données pour les deux parties.

Pour plus d'informations sur la configuration et la signification de 'De la contrainte' et 'À la contrainte', voir [Modèle de relation](relationship_model#relationship_model_relationship_type).

### Créer ou modifier un type de relation { #create_relationship_type }

1.  Ouvrez l'application **Maintenance** et cliquez sur **Programme** \> **Type de relation**.

2.  Cliquez sur le bouton d'ajout.

3.  Entrez un **Nom** du type de relation.

4.  (Facultatif) Attribuez un **Code**.

5.  (Facultatif) Faites une **Description** de la relation.

6.  (Facultatif) Choisissez si la relation doit être bidirectionnelle

7.  Indiquez **Nom de la relation vu de l'entité initiale**. C'est le nom de la relation s'affichera dans l'application Saisie de données à gauche de la relation. Par exemple, dans une relation mère-enfant, il peut s'agir de "Mère de".

8.  (Facultatif) Indiquez **Nom de la relation vu de l'entité réceptrice**. C'est le nom de la relation qui s'affichera à droite de la relation dans l'application Saisie de données. Par exemple, dans le cas d'une relation mère-enfant, il peut s'agir de "Mère".

9.  Sélectionnez 'De la contrainte'. Cela limite le type d'entités pouvant être incluses dans la relation. [Modèle de relation](relationship_model#relationship_model_relationship_type).

10. Sélectionnez 'À la contrainte'. Cela limite le type d'entités pouvant être incluses dans la relation. [Modèle de relation](relationship_model#relationship_model_relationship_type).

11. Cliquez sur **Sauvegarder**.

## Configurer les types d'entités suivies { #configure_tracked_entity }

### À propos des types d'entités suivies { #about_tracked_entity }

A tracked entity is a type of entity which can be tracked through the system. It can be anything from persons to commodities, for example a medicine or a person.

Un programme doit avoir une entité suivie. Pour inscrire une instance d'entité suivie dans un programme, le type d'entité suivie et le type d'entité suivie d'un programme doivent être identiques.

Les attributs d'entités suivies sont utilisés pour enregistrer des informations supplémentaires pour une entité suivie. Les attributs des entités suivies peuvent être partagés entre les programmes.

### Créer ou modifier un attribut d'entité suivie { #create_tracked_entity_attribute }

1.  Ouvrez l'application **Maintenance** et cliquez sur **Programme** \> **Attribut d'entité suivie**.

2.  Cliquez sur le bouton d'ajout.

3.  Dans le champ **Nom**, saisissez le nom de l'attribut de l'entité suivie.

4.  (Facultatif) Tapez un **Nom abrégé**.

5.  (Facultatif) Entrez un **nom du formulaire**.

6.  (Facultatif) Dans le champ **Code**, attribuez un code.

7.  (Facultatif) Tapez une **Description**.

8.  (Facultatif) Dans le champ **Masque de champ**, vous pouvez entrer un modèle utilisé pour fournir des conseils pour un bon formatage de l'attribut. **N.B. : Jusqu'à présent, cette fonction n'a été implémentée que dans l'application Saisie Android de DHIS2, en non dans les applications web Saisie et Saisie Tracker.** Voici les caractères spéciaux qui peuvent être utilisés dans le masque. Ces caractères spéciaux correspondent exactement à un caractère du type donné.

    | Caractère  | Correspondance                      |
    | --------- | -------------------------- |
    | \\d       | chiffre                      |
    | \\x       | lettre minuscule          |
    | \\X       | lettre majuscule             |
    | \\w       | tout caractère alphanumérique |

For example, the pattern can be used to show hyphens as needed in the input field of the data element. E.g. "\d\d\d-\d\d\d-\d\d\d, would show a hyphen for every third digit.

8.  Sélectionnez un **ensemble d'options**.

9.  Dans le champ **Type de valeur**, sélectionnez le type de données que l'entité suivie pourra enregistrer.

    <table>
    <caption>Value types</caption>
    <colgroup>
    <col style="width: 53%" />
    <col style="width: 46%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Value type</p></th>
    <th><p>Description</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p>Age</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Coordinate</p></td>
    <td><p>A point coordinate specified as longitude and latitude in decimal degrees. All coordinate should be specified in the format &quot;-19.23 , 56.42&quot; with a comma separating the longitude and latitude.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Date</p></td>
    <td><p>Dates render as calendar widget in data entry.</p></td>
    </tr>
    <tr class="even">
    <td><p>Date &amp; time</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="odd">
    <td><p>E-mail</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>File</p></td>
    <td><p>A file resource where you can store external files, for example documents and photos.</p></td>
    </tr>
    <tr class="odd">
    <td>Image</td>
    <td>Similar to File, but restricted to images.</td>
    </tr>
    <tr class="even">
    <td><p>Integer</p></td>
    <td><p>Any whole number (positive and negative), including zero.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Letter</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Long text</p></td>
    <td><p>Textual value. Renders as text area in forms.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Negative integer</p></td>
    <td><p>Any whole number less than (but not including) zero.</p></td>
    </tr>
    <tr class="even">
    <td><p>Number</p></td>
    <td><p>Any real numeric value with a single decimal point. Thousands separators and scientific notation is not supported.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Percentage</p></td>
    <td><p>Whole numbers inclusive between 0 and 100.</p></td>
    </tr>
    <tr class="even">
    <td><p>Phone number</p></td>
    <td></td>
    </tr>
    <tr class="odd">
    <td><p>Positive integer</p></td>
    <td><p>Any whole number greater than (but not including) zero.</p></td>
    </tr>
    <tr class="even">
    <td><p>Positive of zero integer</p></td>
    <td><p>Any positive whole number, including zero.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Organisation unit</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Unit interval</p></td>
    <td><p>Any real number greater than or equal to 0 and less than or equal to 1.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Text</p></td>
    <td><p>Textual value. The maximum number of allowed characters per value is 50,000.</p></td>
    </tr>
    <tr class="even">
    <td><p>Time</p></td>
    <td><p>Time is stored in HH:mm format.</p>
    <p>HH is a number between 0 and 23</p>
    <p>mm is a number between 00 and 59</p></td>
    </tr>
    <tr class="odd">
    <td><p>Tracker associate</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Username</p></td>
    <td><p> Rendered as a dialog with a list of users and a search field. The user will need the "View User" authority to be able to utilise this data type</p></td>
    </tr>
    <tr class="odd">
    <td><p>Yes/No</p></td>
    <td><p>Boolean values, renders as drop-down lists in data entry.</p></td>
    </tr>
    <tr class="even">
    <td><p>Yes only</p></td>
    <td><p>True values, renders as check-boxes in data entry.</p></td>
    </tr>
    </tbody>
    </table>

10. Sélectionnez un **Type d'agrégation**.

    <table>
    <caption>Aggregation operators</caption>
    <colgroup>
    <col style="width: 50%" />
    <col style="width: 50%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Aggregation operator</p></th>
    <th><p>Description</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p>Average</p></td>
    <td><p>Average the values in both the period as and the organisation unit dimensions.</p></td>
    </tr>
    <tr class="even">
    <td><p>Average (sum in organisation unit hierarchy)</p></td>
    <td><p>Average of data values in the period dimension, sum in the organisation unit dimensions.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Count</p></td>
    <td><p>Count of data values.</p></td>
    </tr>
    <tr class="even">
    <td><p>Min</p></td>
    <td><p>Minimum of data values.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Max</p></td>
    <td><p>Maximum of data values.</p></td>
    </tr>
    <tr class="even">
    <td><p>None</p></td>
    <td><p>No aggregation is performed in any dimension.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Sum</p></td>
    <td><p>Sum of data values in the period and organisation unit dimension.</p></td>
    </tr>
    <tr class="even">
    <td><p>Standard deviation</p></td>
    <td><p>Standard deviation (population-based) of data values.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Variance</p></td>
    <td><p>Variance (population-based) of data values.</p></td>
    </tr>
    </tbody>
    </table>

11. Sélectionnez **Unique** pour spécifier que les valeurs de l'attribut de l'entité suivie sont uniques.

    Il existe deux options pour ce cadre unique :

    -   **Tout le système** : Les valeurs de l'attribut d'entité suivie peuvent être dupliquées avec des valeurs appartiennant à d'autres attributs de l'entité suivie. Mais les valeurs de cet attribut d'entité suivie ne doivent pas se répéter.

        Sélectionnez **Généré automatiquement** pour permettre la création automatique de la valeur de l'attribut de l'entité suivie. Lorsque le paramètre de création est activé, un champ optionnel permettant de spécifier le modèle s'affiche également. Ce champ doit contenir un modèle basé sur la syntaxe TextPattern. Lorsque la valeur est générée automatiquement, elle sera unique pour cet attribut et ceci pour l'ensemble du système. Voir la section TextPattern pour plus d'informations sur son fonctionnement.

    -   **Unité d'organisation** : Les valeurs de l'attribut de l'entité suivie ne doivent pas se répéter dans la même unité d'organisation.

12. Sélectionnez **Hériter** pour enregistrer une nouvelle entité en vue d'une relation avec une entité disponible. Toutes les champs de valeurs des attributs de l'entité héritée seront pré-remplis dans le formulaire d'enregistrement.

13. (Facultatif) Sélectionnez **Confidentiel**.

    Cette option n'est disponible que si vous avez configuré le cryptage du système.

14. (Facultatif) Sélectionnez **Afficher dans la liste sans programme**.

15. (Facultatif) Attribuez une ou plusieurs **Légendes**.

16. Cliquez sur **Sauvegarder**.

### Créer ou modifier un type d'entité suivie { #create_tracked_entity }

1.  Ouvrez l'application **Maintenance** et cliquez sur **Programme** \> **Type d'entité suivie**.

2.  Cliquez sur le bouton d'ajout ou sur un **type d'entité suivie** déjà existante.

3.  Entrez un **Nom** de l'entité suivie.

4.  (Facultatif) sélectionnez une **Couleur** et une **Icône** qui seront utilisées par les applications de saisie pour identifier ce type d'entité suivie.

5.  (Facultatif) Entrez une **Description** de l'entité suivie.

6.  (Facultatif) Entrez un **Nombre minimum d'attributs requis pour la recherche**. Ceci indique le nombre d'attributs à remplir pour pouvoir rechercher ce **type d'entité suivie** dans une _recherche globale_. Voir [Configurer la recherche](../search/search.xml#configure_search) pour plus d'informations.

7.  (Facultatif) Entrez un **Nombre maximal d'instances d'entités suivies à retourner dans la recherche**. Ceci spécifie le nombre d'instances d'entités suivies qui seront retournées dans une _recherche globale_. Voir [Configurer la recherche](../search/search.xml#configure_search) pour plus d'informations.

8.  (Facultatif) Ajouter **Attributs de type d'entité suivie**. Cette option est utilisés pour configurer la recherche, voir [Configurer la recherche](configure_search) pour plus d'informations.

9.  (Facultatif) Entrez un **Nom alternatif** de l'entité suivie.

10. Cliquez sur **Sauvegarder**.

## Configurer la recherche { #configure_search }

Les utilisateurs peuvent se voir attribuer des unités d'organisation de recherche, ce qui permet de rechercher des instances d'entités suivies en dehors de leurs unités d'organisation de saisie de données.

La recherche peut être effectuée soit dans le cadre d'un programme, soit dans le cadre d'un type d'entité suivie. Pour donner aux utilisateurs la possibilité d'effectuer une recherche dans le cadre d'un programme, il est nécessaire de configurer lequel des attributs de l'entité suivie du programme est interrogeable. Pour donner aux utilisateurs la possibilité d'effectuer une recherche dans le cadre d'un type d'entité suivie, il est nécessaire de configurer lequel des attributs du type d'entité suivi est interrogeable.

### Configurer la recherche pour le programme Tracker { #configure-search-for-tracker-program }

Pour pouvoir effectuer une recherche avec un programme, vous devrez rendre certains des attributs du programme consultables. Les attributs de programme uniques seront toujours consultables.

1.  Ouvrir l'application **Programme**

2.  Ouvrir ou créer un programme tracker

3.  Aller à **Attributs**

4.  Si vous n'avez pas d'attributs, ajoutez-en un

5.  Définir l'attribut interrogeable

Les attributs des programmes interrogeables seront attribués à un groupe de recherche.

-   Un groupe unique. Un groupe par attribut de programme unique. Les attributs uniques ne peuvent pas être combinés avec d'autres attributs de programme dans une recherche. Le résultat de la recherche ne peut être que 0 ou 1 instance d'entité suivie.

-   Groupe non-unique : Ce groupe contient tous les attributs non uniques du programme et permet de combiner plusieurs attributs dans une recherche.

Il y a deux limites qui peuvent être établies pour une recherche de programme, dans le cadre de la configuration du **Programme**.

-   Nombre minimum d'attributs requis pour la recherche : Cette propriété définit le nombre d'attributs non uniques devant être saisis avant qu'une recherche puisse être effectuée.

<!-- end list -->

-   Nombre maximum d'instances d'entité suivie à renvoyer : Cette propriété définit le degré de spécificité d'une recherche, en limitant le nombre d'instances d'entité suivie correspondantes qu'un utilisateur est autorisé à obtenir pour ses critères de recherche. Si le nombre d'enregistrements correspondants est supérieur à ce maximum, ils ne seront pas renvoyés. L'utilisateur doit fournir des critères de recherche plus spécifiques, afin de réduire le nombre d'enregistrements correspondants, avant qu'ils ne soient renvoyés.

    > **NOTE**
    >
    > This maximum is only applied to search results outside the users capture org unit. Within the capture scope, the user can see any number of results.

### Configurer la recherche pour le type d'entité suivie { #configure-search-for-tracked-entity-type }

> **N.B.**
>
> TET = Type d'entité suivie

Pour pouvoir effectuer une recherche sans programme, vous devrez rendre certains des attributs du TET consultables. Les attributs uniques du TET seront toujours interrogeables.

1.  Ouvrez l'application **Type d'entité suivie**

2.  Ouvrez un type d'entité suivie

3.  Si le TET n'a pas d'attributs, ajoutez-en un

4.  Définir l'attribut interrogeable

Les attributs de TET interrogeables seront attribués à un groupe de recherche.

-   Un groupe unique. Un groupe par attribut unique de TET. Les attributs uniques ne peuvent pas être combinés avec d'autres attributs de TET. Le résultat de la recherche ne peut être que 0 ou 1 instance d'entité suivie.

-   Groupe non-unique : Ce groupe contient tous les attributs non uniques de TET et permet de combiner plusieurs attributs dans une recherche.

Deux limites peuvent être établies pour une recherche de TET

-   Nombre minimum d'attributs requis pour la recherche : Cette propriété définit le nombre d'attributs non uniques devant être saisis avant qu'une recherche puisse être effectuée.

<!-- end list -->

-   Nombre maximum d'instances d'entité suivie à renvoyer : Cette propriété définit le degré de spécificité d'une recherche, en limitant le nombre d'instances d'entité suivie correspondantes qu'un utilisateur est autorisé à obtenir pour ses critères de recherche. Si le nombre d'enregistrements correspondants est supérieur à ce maximum, ils ne seront pas renvoyés. L'utilisateur doit fournir des critères de recherche plus spécifiques, afin de réduire le nombre d'enregistrements correspondants, avant qu'ils ne soient renvoyés.

    > **NOTE**
    >
    > This maximum is only applied to search results outside the users capture org unit. Within the capture scope, the user can see any number of results.

### Configurer les unités d'organisation de la recherche pour un utilisateur { #configure-search-organisation-units-for-a-user }

Pour pouvoir effectuer des recherches dans unités d'organisation autres que celles de la saisie des données de l'utilisateur, ce dernier doit se voir attribuer des unités d'organisation de recherche. Le fait d'attribuer une unité d'organisation de recherche à un utilisateur lui donnera également accès à la recherche dans tous les enfants de cette unité d'organisation.

1.  Ouvrir l'application**Utilisateurs**

2.  Cliquez sur un utilisateur

3.  Ouvert **Attribuer des unités d'organisation de recherche**

4.  Sélectionnez les unités d'organisation

5.  Cliquez sur **Enregistrer**

## Cloner des objets de métadonnées { #clone_metadata }

Le clonage d'un élément de données ou d'autres objets peut faire gagner du temps lorsque vous créez de nombreux objets similaires.

1.  Ouvrez l'application **Maintenance** et cherchez le type d'objet de métadonnées que vous souhaitez cloner.

2.  Dans la liste des objets, cliquez sur le menu des options et sélectionnez **Cloner**.

3.  Modifiez les options que vous souhaitez.

4.  Cliquez sur **Sauvegarder**.

## Supprimer les objets de métadonnées { #delete-metadata-objects }

> **N.B.**
>
> Vous ne pouvez supprimer un élément de données et d'autres objets d'éléments de données que lorsqu'aucune donnée n'est associée à l'élément de données lui-même.

> **Avertissement**
>
> Tout ensemble de données que vous supprimez du système est irrévocablement perdu. Tous les formulaires de saisie de données et les formulaires de section qui ont pu être élaborés seront également supprimés. Assurez-vous que vous avez fait une sauvegarde de votre base de données avant de supprimer tout ensemble de données au cas où vous auriez besoin de le restaurer à un moment donné.

1.  Ouvrez l'application **Maintenance** et cherchez le type d'objet de métadonnées que vous souhaitez supprimer.

2.  Dans la liste des objets, cliquez sur le menu des options et sélectionnez **Supprimer**.

3.  Cliquez sur **Confirmer**.

## Modifier les paramètres de partage des objets de métadonnées { #change-sharing-settings-for-metadata-objects }

Vous pouvez attribuer différents paramètres de partage aux objets de métadonnées, par exemple des unités d'organisation et des attributs d'entités suivies. Ces paramètres de partage déterminent les utilisateurs et les groupes d'utilisateurs qui peuvent visualiser ou modifier un objet de métadonnées.

Certains objets de métadonnées vous permettent également de modifier le paramètre de partage de la saisie de données pour l'objet. Ces paramètres supplémentaires permettent de déterminer qui peut visualiser ou saisir des données dans les champs de formulaire à l'aide des métadonnées.

> **N.B.**
>
> Le paramètre par défaut considère que tout le monde (**Accès public**) peut trouver, afficher et modifier les objets de métadonnées.

1.  Ouvrez l'application **Maintenance** et trouvez le type d'objet de métadonnées que vous souhaitez modifier.

2.  Dans la liste des objets, cliquez sur le menu contextuel et sélectionnez **Paramètres de partage**.

3.  (Facultatif) Ajouter des utilisateurs ou des groupes d'utilisateurs : recherchez un utilisateur ou un groupe d'utilisateurs et sélectionnez-le. L'utilisateur ou le groupe d'utilisateurs est ajouté à la liste.

4.  Modifiez les paramètres de partage pour les groupes d'accès que vous souhaitez modifier.

    -   **Peut modifier et visualiser** : Le groupe d'accès peut visualiser et modifier l'objet.

    -   **Peut seulement visualiser** : Le groupe d'accès peut seulement visualiser l'objet.

    -   **Pas d'accès** (uniquement applicable à **L'accès public**) : Le public n'aura pas accès à l'objet.

5.  Modifiez les paramètres de partage des données pour les groupes d'accès que vous souhaitez modifier.

    -   **Peut saisir des données** : Le groupe d'accès peut visualiser et saisir des données pour l'objet.

    -   **Peut visualiser les données** : Le groupe d'accès peut visualiser les données relatives à l'objet.

    -   **Pas d'accès** : Le groupe d'accès n'aura pas accès aux données relatives à l'objet.

6.  Cliquez sur **Fermer**

## Afficher les détails des objets de métadonnées { #display-details-of-metadata-objects }

1.  Ouvrez l'application **Maintenance** et cherchez le type d'objet de métadonnées que vous souhaitez visualiser.

2.  Dans la liste des objets, cliquez sur le menu des options et sélectionnez **Afficher les détails**.

## Traduire les objets de métadonnées { #translate-metadata-objects }

Le DHIS2 dispose des fonctionnalités pour la traduction du contenu des bases de données, par exemple des éléments de données, des groupes d'éléments de données, des indicateurs, des groupes d'indicateurs ou des unités d'organisation. Vous pouvez traduire ces éléments dans un nombre quelconque de lieux. Un lieu représente une région géographique, politique ou culturelle spécifique.

> **Astuce**
>
> Pour activer une traduction, ouvrez l'application **Paramètres du système**, cliquez sur \> > **Apparence** et sélectionnez une langue.

1.  Ouvrez l'application **Maintenance** et cherchez le type d'objet de métadonnées que vous souhaitez traduire.

2.  Dans la liste des objets, cliquez sur le menu des options et sélectionnez **Traduire**.

    > **Tip**
    >
    > If you want to translate an organisation unit level, click directly on the **Translate** icon next to each list item.

3.  Sélectionnez un lieu.

4.  Tapez un **Nom**, **Nom abrégé** et **Description**.

5.  Cliquez sur **Sauvegarder**.
