---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.36/src/developer/web-api/data-store.md"
revision_date: "2021-06-14"
tags:
    - Développer
    - DHIS core version 2.36
---

# Data store { #data-store }

## Data store { #webapi_data_store }

Using the _dataStore_ resource, developers can store arbitrary data for their apps. Access to a datastore's key is based on its sharing settings. By default all keys created are publicly accessible (read and write). Additionally, access to a datastore's namespace is limited to the user's access to the corresponding app, if the app has reserved the namespace. For example a user with access to the "sampleApp" application will also be able to use the sampleApp namespace in the datastore. If a namespace is not reserved, no specific access is required to use it.

    /api/33/dataStore

### Data store structure { #webapi_data_store_structure }

Data store entries consist of a namespace, key and value. The combination of namespace and key is unique. The value data type is JSON.

<table>
<caption>Data store structure</caption>
<colgroup>
<col style="width: 22%" />
<col style="width: 40%" />
<col style="width: 36%" />
</colgroup>
<thead>
<tr class="header">
<th>Item</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Namespace</td>
<td>Namespace for organization of entries.</td>
<td>String</td>
</tr>
<tr class="even">
<td>Key</td>
<td>Key for identification of values.</td>
<td>String</td>
</tr>
<tr class="odd">
<td>Value</td>
<td>Value holding the information for the entry.</td>
<td>JSON</td>
</tr>
<tr class="even">
<td>Encrypted</td>
<td>Indicates whether the value of the given key should be encrypted</td>
<td>Boolean</td>
</tr>
</tbody>
</table>

### Get keys and namespaces { #webapi_data_store_get_keys_and_namespaces }

Pour obtenir une liste de tous les espaces de noms existants :

    GET /api/33/dataStore

Exemple de requête curl pour le listing :

```bash
curl "play.dhis2.org/demo/api/33/dataStore" -u admin:district
```

Exemple de réponse : 

```json
["foo", "bar"]
```

Pour obtenir la liste de toutes les clés d'un espace de noms :

    GET /api/33/dataStore/<namespace>

Exemple de requête curl pour le listing :

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo" -u admin:district
```

Exemple de réponse : 

```json
["key_1", "key_2"]
```

Pour récupérer une valeur pour une clé existante dans un espace de noms :

    GET /api/33/dataStore/<namespace>/<key>

Exemple de requête curl pour l'extraction :

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo/key_1"-u admin:district
```

Exemple de réponse : 

```json
{
    "foo": "bar"
}
```

Pour récupérer les métadonnées d'une clé existante dans un espace de noms :

    GET /api/33/dataStore/<namespace>/<key>/metaData

Exemple de requête curl pour l'extraction :

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo/key_1/metaData" -u admin:district
```

Exemple de réponse : 

```json
{
  "id": "dsKeyUid001",
  "created": "...",
  "user": {...},
  "namespace": "foo",
  "key": "key_1"
}
```

### Create values { #webapi_data_store_create_values }

Pour créer une nouvelle clé et une nouvelle valeur pour un espace de noms :

    POST /api/33/dataStore/<namespace>/<key>

Exemple de requête curl pour créer, en présumant que la charge JSON est valide :

```bash
curl "https://play.dhis2.org/demo/api/33/dataStore/foo/key_1" -X POST
  -H "Content-Type: application/json" -d "{\"foo\":\"bar\"}" -u admin:district
```

Exemple de réponse : 

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 201,
    "status": "OK",
    "message": "Key 'key_1' created."
}
```

If you require the data you store to be encrypted (for example user credentials or similar) you can append a query to the url like this:

    GET /api/33/dataStore/<namespace>/<key>?encrypt=true

### Update values { #webapi_data_store_update_values }

Pour mettre à jour une clé qui existe dans un espace de noms :

    PUT /api/33/dataStore/<namespace>/<key>

Exemple de requête curl pour mettre à jour, en présumant que la charge JSON est valide :

```bash
curl "https://play.dhis2.org/demo/api/33/dataStore/foo/key_1" -X PUT -d "[1, 2, 3]"
  -H "Content-Type: application/json" -u admin:district
```

Exemple de réponse : 

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Key 'key_1' updated."
}
```

### Delete keys { #webapi_data_store_delete_keys }

Pour supprimer une clé existante d'un espace de noms :

    DELETE /api/33/dataStore/<namespace>/<key>

Exemple de requête curl pour la suppression :

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo/key_1" -X DELETE -u admin:district
```

Exemple de réponse : 

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Key 'key_1' deleted from namespace 'foo'."
}
```

Pour supprimer toutes les clés d'un espace de noms :

    DELETE /api/33/dataStore/<namespace>

Exemple de requête curl pour la suppression :

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo" -X DELETE -u admin:district
```

Exemple de réponse : 

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Namespace 'foo' deleted."
}
```

### Sharing datastore keys { #webapi_data_store_sharing }

Sharing of datastore keys follows the same principle as for other metadata sharing (see [Sharing](#webapi_sharing)).

To get sharing settings for a specific datastore key:

    GET /api/33/sharing?type=dataStore&id=<uid>

Where the id for the datastore key comes from the `/metaData` endpoint for that key:

    /api/33/dataStore/<namespace>/<key>/metaData

To modify sharing settings for a specific datastore key:

    POST /api/33/sharing?type=dataStore&id=<uid>

avec la requête suivante:

```json
{
    "object": {
        "publicAccess": "rw------",
        "externalAccess": false,
        "user": {},
        "userAccesses": [],
        "userGroupAccesses": [
            {
                "id": "hj0nnsVsPLU",
                "access": "rw------"
            },
            {
                "id": "qMjBflJMOfB",
                "access": "r-------"
            }
        ]
    }
}
```

## User data store { #webapi_user_data_store }

In addition to the _dataStore_ which is shared between all users of the system, a user-based data store is also available. Data stored to the _userDataStore_ is associated with individual users, so that each user can have different data on the same namespace and key combination. All calls against the _userDataStore_ will be associated with the logged in user. This means one can only see, change, remove and add values associated with the currently logged in user.

    /api/33/userDataStore

### User data store structure { #webapi_user_data_store_structure }

_userDataStore_ consists of a user, a namespace, keys and associated values. The combination of user, namespace and key is unique.

<table>
<caption>User data store structure</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>Item</th>
<th>Description</th>
<th>Data Type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>User</td>
<td>The user this data is associated with</td>
<td>String</td>
</tr>
<tr class="even">
<td>Namespace</td>
<td>The namespace the key belongs to</td>
<td>String</td>
</tr>
<tr class="odd">
<td>Key</td>
<td>The key a value is stored on</td>
<td>String</td>
</tr>
<tr class="even">
<td>Value</td>
<td>The value stored</td>
<td>JSON</td>
</tr>
<tr class="odd">
<td>Encrypted</td>
<td>Indicates whether the value should be encrypted</td>
<td>Boolean</td>
</tr>
</tbody>
</table>

### Get namespaces { #webapi_user_data_store_get_namespaces }

Renvoie un tableau de tous les espaces de noms existants

    GET /api/33/userDataStore

Exemple de requête:

```bash
curl -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/33/userDataStore"
```

```json
["foo", "bar"]
```

### Get keys { #webapi_user_data_store_get_keys }

Renvoie un tableau de toutes les clés existantes dans un espace de noms donné

    GET /api/userDataStore/<namespace>

Exemple de requête:

```bash
curl -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/33/userDataStore/foo"
```

```json
["key_1", "key_2"]
```

### Get values { #webapi_user_data_store_get_values }

Renvoie la valeur d'un espace de noms et d'une clé donnés

    GET /api/33/userDataStore/<namespace>/<key>

Exemple de requête:

```bash
curl -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
    "some": "value"
}
```

### Create value { #webapi_user_data_store_create_values }

Ajoute une nouvelle valeur à une clé donnée dans un espace de noms donné.

    POST /api/33/userDataStore/<namespace>/<key>

Exemple de requête:

```bash
curl -X POST -H "Content-Type: application/json" -u admin:district -d "['some value']"
  "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
    "httpStatus": "Created",
    "httpStatusCode": 201,
    "status": "OK",
    "message": "Key 'bar' in namespace 'foo' created."
}
```

If you require the value to be encrypted (For example user credentials and such) you can append a query to the url like this:

    GET /api/33/userDataStore/<namespace>/<key>?encrypt=true

### Update values { #webapi_user_data_store_update_values }

Met à jour une valeur existante

    PUT /api/33/userDataStore/<namespace>/<key>

Exemple de requête:

```bash
curl -X PUT -H "Content-Type: application/json" -u admin:district -d "['new value']"
  "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
    "httpStatus": "Created",
    "httpStatusCode": 201,
    "status": "OK",
    "message": "Key 'bar' in namespace 'foo' updated."
}
```

### Delete key { #webapi_user_data_store_delete_key }

Supprimer une clé

    DELETE /api/33/userDataStore/<namespace>/<key>

Exemple de requête:

```bash
curl -X DELETE -u admin:district "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Key 'bar' deleted from the namespace 'foo."
}
```

### Delete namespace { #webapi_user_data_store_delete_namespace }

Supprimer toutes les clés de l'espace de noms donné

    DELETE /api/33/userDataStore/<namespace>

Exemple de requête:

```bash
curl -X DELETE -u admin:district "play.dhis2.org/api/33/userDataStore/foo"
```

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "All keys from namespace 'foo' deleted."
}
```
