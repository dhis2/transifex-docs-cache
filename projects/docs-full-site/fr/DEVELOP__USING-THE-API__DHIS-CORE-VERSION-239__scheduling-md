---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.39/src/developer/web-api/scheduling.md"
revision_date: '2022-09-13'
tags:
- Développement
- DHIS version 2.39
---

# Programmation { #webapi_scheduling }

DHIS2 permet de programmer des tâches de différents types. Chaque type de tâche possède des propriétés de configuration différentes, ce qui vous permet de contrôler plus finement la façon dont les tâches sont exécutées. En outre, vous pouvez configurer une même tâche de manière à ce qu'elle s'exécute avec différentes configurations et à différents intervalles, si nécessaire.



Tableau : Principales propriétés

| Propriété | Description | Type |
|---|---|---|
| nom | Nom de la tâche. | Chaîne |
| expression cron | L'expression cron qui définit l'intervalle d'exécution de la tâche. | Chaîne (expression Cron) |
| type de tâches | Le type de tâche représente la tâche qui est exécutée. Le tableau suivant donne un aperçu des types de tâches existants. Chaque type de tâche peut avoir un ensemble spécifique de paramètres pour la configuration de la tâche. | Chaîne (Enum) |
| paramètres de tâches | Paramètres de tâches, le cas échéant pour le type de tâche. | (Voir la liste des types de tâches) |
| activé | Une tâche peut être ajoutée au système sans être programmée en mettant `enabled` à false dans la charge utile JSON. Utilisez ceci si vous voulez arrêter temporairement la programmation d'une tâche, ou si la configuration d'une tâche n'est pas encore terminée. | Booléen |



### Job Parameters { #job-parameters } 

Tableau : Paramètres des tâches de `DATA_INTEGRITY`.

| Nom          | Type          | Par défaut | Description                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `vérifications` | tableau de chaînes | `[]` = tous | noms des contrôles à effectuer dans l'ordre d'exécution |
| `type`   | enum            | `RAPPORT`   | RAPPORT, RÉSUMÉ ou DÉTAILS                       |

Tableau : Paramètres des tâches de `ANALYTICS_TABLE`.

| Nom          | Type          | Par défaut | Description                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `années précédentes` | int  | 0       | Nombre d'années écoulées à inclure |
| `Sauter les types de tableau` | tableau de enum  | `[]`    | Omettre la génération de tableaux ; Valeurs possibles : `VALEUR_DONNÉE`, `COMPLÉTUDE`, `COMPLÉTUDE_CIBLE`, `UNITÉ_D'ORGANISATION_CIBLE`, `ÉVÉNEMENT`, `INSCRIPTION`, `RÉSULTAT DE_VALIDATION` |
| `Sauter les tableaux ressources` | booléen | `faux`   | Ignorer la génération des tableaux de ressources |
| `Ignorer les Programmes` | tableau de chaînes | `[]`    | Liste facultative de programmes (d'identifiants) à ignorer |

Tableau : Paramètres des tâches de `CONTINUOUS_ANALYTICS_TABLE`.

| Nom          | Type          | Par défaut | Description                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `années précédentes` | int           | `0`     | Nombre d'années écoulées à inclure |
| `Sauter les types de tableau` | tableau de enum | `[]`    | Omettre la génération de tableaux ; Valeurs possibles : `VALEUR_DONNÉE`, `COMPLÉTUDE`, `COMPLÉTUDE_CIBLE`, `UNITÉ_D'ORGANISATION_CIBLE`, `ÉVÉNEMENT`, `INSCRIPTION`, `RÉSULTAT DE_VALIDATION` |
| `Mise à jour complète de l'heure de la journée` | int           | `0`     | Heure de la journée pour la mise à jour complète des tableaux d'analyse (0-23) |

Tableau : Paramètres des tâches de `DATA_SYNC`.

| Nom          | Type          | Par défaut | Description                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `taille de la page` | int | `10000` | nombre de valeurs de données traitées en tant qu'unité |

Tableau : Paramètres des tâches de `META_DATA_SYNC`.

| Nom          | Type          | Par défaut | Description                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `Taille de la page du programme tracker` | int | `20` | nombre d'entités suivies traitées en tant qu'unité |
| `Taille de la page du programme d'événements` | int | `60` | nombre d'événements traités en tant qu'unité           |
| `Taille de la page des données` | int | `10000` | nombre de valeurs de données traitées en tant qu'unité  |

Tableau : Paramètres des tâches `MONITORING` (Analyse des règles de validation)

| Nom          | Type          | Par défaut | Description                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `début relatif` | int | `0` | Un nombre lié à la date d'exécution qui correspond au début de la période à suivre. |
| `fin relative` | int | `0` | Un nombre lié à la date d'exécution qui correspond à la fin de la période à suivre. |
| `groupes de règles de validation` | tableau de chaînes | `[]` | Groupes de règles de validation (UID) à inclure dans la tâche  |
| `envoyer une notification` | booléen | `faux` | Définir sur `vrai` si la tâche doit envoyer des notifications basées sur les groupes de règles de validation |
| `persiste les résultats` | booléen | `faux` | Définir sur `true` si la tâche doit persister les résultats de la validation. |

Tableau : Paramètres des tâches de `PUSH_ANALYSIS`.

| Nom          | Type          | Par défaut | Description                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `analyse push` | tableau de chaînes | `[]` |  Les UID des analyses push que vous souhaitez exécuter |

Tableau : Paramètres des tâches de `PREDICTOR`.

| Nom          | Type          | Par défaut | Description                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `début relatif` | int | `0` | Un nombre lié à la date d'exécution qui correspond au début de la période à suivre. |
| `fin relative` | int | `0` | Un nombre lié à la date d'exécution qui correspond au début de la période à suivre. |
| `Les prédicteurs` | tableau de chaînes | `[]` | Prédicteurs (UID) à inclure dans la tâche                                                      |
| `groupes de prédicteurs` | tableau de chaînes | `[]` | Groupes de prédicteurs (UID) à inclure dans la tâche                                                |


### Get available job types { #get-available-job-types } 

Pour obtenir une liste de tous les types de travaux disponibles, vous pouvez utiliser le point d'extrémité suivant :

    GET /api/jobConfigurations/jobTypes

La réponse contient des informations sur chaque type de travail, notamment le nom, le type de travail, la clé, le type de programmation et les paramètres disponibles. Le type de programmation peut être soit `CRON`, ce qui signifie que les travaux peuvent être programmés en utilisant une expression cron avec le champ `cronExpression`, soit `FIXED_DELAY`, ce qui signifie que les travaux peuvent être programmés pour s'exécuter avec un délai fixe entre les deux avec le champ `delay`. Le champ delay est donné en secondes.

Une réponse ressemblera à ceci :

```json
{
  "jobTypes": [
    {
      "name": "Data integrity",
      "jobType": "DATA_INTEGRITY",
      "key": "dataIntegrityJob",
      "schedulingType": "CRON"
    }, {
      "name": "Resource table",
      "jobType": "RESOURCE_TABLE",
      "key": "resourceTableJob",
      "schedulingType": "CRON"
    }, {
      "name": "Continuous analytics table",
      "jobType": "CONTINUOUS_ANALYTICS_TABLE",
      "key": "continuousAnalyticsTableJob",
      "schedulingType": "FIXED_DELAY"
    }
  ]
}
```

### Créer une configuration de tâches { #create-a-job-configuration } 

Pour configurer les tâches, vous pouvez envoyer une requête POST à la ressource suivante :

    /api/jobConfigurations

Une tâche sans paramètres au format JSON ressemble à ceci :

```json
{
  "name": "",
  "jobType": "JOBTYPE",
  "cronExpression": "0 * * ? * *",
}
```

Exemple d'un tableau d'analyse de tâches avec des paramètres au format JSON :

```json
{
  "name": "Analytics tables last two years",
  "jobType": "ANALYTICS_TABLE",
  "cronExpression": "0 * * ? * *",
  "jobParameters": {
    "lastYears": "2",
    "skipTableTypes": [],
    "skipResourceTables": false
  }
}
```

Exemple d'une tâche d'analyse push avec des paramètres au format JSON :

```json
{
   "name": "Push anlysis charts",
   "jobType": "PUSH_ANALYSIS",
   "cronExpression": "0 * * ? * *",
   "jobParameters": {
     "pushAnalysis": [
       "jtcMAKhWwnc"
     ]
    }
 }
```

Exemple de tâche avec le type de programmation `FIXED_DELAY` et un délai de 120 secondes :

```json
{
  "name": "Continuous analytics table",
  "jobType": "CONTINUOUS_ANALYTICS_TABLE",
  "delay": "120",
  "jobParameters": {
    "fullUpdateHourOfDay": 4
  }
}
```

### Obtenir des configurations de tâches { #get-job-configurations } 

Liste de toutes les configurations de tâches :

    GET /api/jobConfigurations

Retrouver une tâche :

    GET /api/jobConfigurations/{id}

Le contenu de la réponse se présente comme suit :

```json
{
  "lastUpdated": "2018-02-22T15:15:34.067",
  "id": "KBcP6Qw37gT",
  "href": "http://localhost:8080/api/jobConfigurations/KBcP6Qw37gT",
  "created": "2018-02-22T15:15:34.067",
  "name": "analytics last two years",
  "jobStatus": "SCHEDULED",
  "displayName": "analytics last two years",
  "enabled": true,
  "externalAccess": false,
  "jobType": "ANALYTICS_TABLE",
  "nextExecutionTime": "2018-02-26T03:00:00.000",
  "cronExpression": "0 0 3 ? * MON",
  "jobParameters": {
    "lastYears": 2,
    "skipTableTypes": [],
    "skipResourceTables": false
  },
  "favorite": false,
  "configurable": true,
  "access": {
    "read": true,
    "update": true,
    "externalize": true,
    "delete": true,
    "write": true,
    "manage": true
  },
  "lastUpdatedBy": {
    "id": "GOLswS44mh8"
  },
  "favorites": [],
  "translations": [],
  "userGroupAccesses": [],
  "attributeValues": [],
  "userAccesses": []
}
```

### Mettre à jour la configuration d'une tâche { #update-a-job-configuration } 

Mettre à jour une tâche avec des paramètres en utilisant le point d'extrémité suivant et le format de charge utile JSON :

    PUT /api/jobConfiguration/{id}

```json
{
  "name": "analytics last two years",
  "enabled": true,
  "cronExpression": "0 0 3 ? * MON",
  "jobType": "ANALYTICS_TABLE",
  "jobParameters": {
    "lastYears": "3",
    "skipTableTypes": [],
    "skipResourceTables": false
  }
}
```

### Supprimer la configuration d'une tâche { #delete-a-job-configuration } 

Supprimer une tâche en utilisant :

    DELETE /api/jobConfiguration/{id}

Notez que certaines tâches avec des paramètres de configuration personnalisés peuvent ne pas être ajoutées si 
les paramètres système requis ne sont pas configurés. C'est le cas par exemple de la synchronisation des 
données, qui nécessite la configuration d'un serveur distant.

### Run Jobs Manually { #run-jobs-manually } 

Les tâches peuvent être exécutées manuellement à l'aide de :

    POST /api/jobConfiguration/{id}/execute


### Observe Running Jobs { #observe-running-jobs } 
Les étapes et l'état d'exécution peuvent être observés pendant que la tâche est en cours.
Une liste de tous les types de tâches en cours d'exécution est fournie par :

    GET /api/scheduling/running/types

Pour obtenir un aperçu de toutes les tâches en cours d'exécution par type de tâche, utilisez :

    GET /api/scheduling/running

Comme il ne peut y avoir qu'une seule tâche en cours pour chaque type à la fois, l'état d'une 
tâche en cours peut être visualisé en détail à l'aide de la commande suivante:

    GET /api/scheduling/running/{type}

Par exemple, pour voir l'état d'une tâche `ANALYTICS_TABLE` en cours d'exécution, utilisez

    GET /api/scheduling/running/ANALYTICS_TABLE

Une tâche est une séquence de processus. Chaque processus comporte une séquence d'` étapes `
Dans chaque étape, il peut y avoir zéro, un ou plusieurs `éléments`. Les éléments peuvent être
traités de manière strictement séquentielle ou parallèle, n éléments à la fois. Souvent, le
nombre d'` éléments total` est souvent connu à l'avance.

En général, les étapes d'un processus et les éléments d'une étape sont « découverts » 
en tant qu'« effet secondaire » du traitement des données. Alors que la plupart des processus ont 
une séquence fixe d'étapes, certains processus peuvent avoir des étapes variables en fonction des 
données traitées. Les éléments dépendent généralement des données. La plupart des travaux ne comprennent 
qu'un seul processus.

Chacun des nœuds de l'arbre processus-étape-élément a un statut qui est soit 
* `RUNNING` (en cours de traitement) : le traitement est en cours (pas encore terminé) 
* `SUCCESS` (succès) : lorsque le traitement est terminé avec succès 
* `ERROR` (erreur) : lorsque le traitement est terminé avec des erreurs ou lorsqu'une exception s'est produite 
* `CANCELLED` (annulé) : lorsque l'annulation a été demandée et que l'élément ne sera pas terminé.

### See Completed Job Runs { #see-completed-job-runs } 
Une fois qu'une tâche s'est achevée avec succès ou avec un échec à la suite d'une 
exception ou d'une annulation, l'état passe de l'ensemble des états d'exécution aux états 
des tâches achevées. Cet ensemble ne conserve que l'état d'exécution le plus récent 
pour chaque type de tâche. L'aperçu est disponible à l'adresse suivante : 

    GET /api/scheduling/completed

Des détails sur un type de tâche particulier sont donc fournis à l'adresse suivante :

    GET /api/scheduling/completed/{type}

Dans le cas de la tâche `ANALYTICS_TABLE`, ce serait :

    GET /api/scheduling/completed/ANALYTICS_TABLE

### Request Cancelling a Running Jobs { #request-cancelling-a-running-jobs } 
Une fois qu'une tâche est lancée, elle se déroule selon une séquence d'étapes. Chaque étape peut 
à son tour comporter des collections d'éléments à traiter. Bien que les tâches ne puissent généralement 
pas être arrêtées à tout moment, nous pouvons demander une annulation et le 
processus s'arrête de manière coopérative une fois qu'il a terminé un élément ou une étape 
et qu'il reconnaît qu'une annulation a été demandée. Cela signifie que les tâches ne s'arrêtent pas 
immédiatement et ne partent pas à un moment inconnu en plein milieu d'un 
traitement. Au contraire, elles s'arrêtent lorsqu'il est possible de passer à 
la fin. Cela signifie toujours que le processus global est inachevé et qu'il n'est pas 
annulé. Il se peut qu'il ait simplement effectué un certain nombre d'étapes et en ait sauté 
d'autres à la fin.

Pour annuler une tâche en cours, utilisez :

    POST /api/scheduling/cancel/{type}

Par exemple, pour annuler l'exécution de la tâche `ANALYTICS_TABLE` :

    POST /api/scheduling/cancel/ANALYTICS_TABLE

En fonction de l'étape en cours et de l'élément exécuté, l'annulation peut prendre de 
quelques millisecondes à quelques minutes avant d'être effective. 
Cependant, le statut de l'ensemble du processus sera affiché comme `ANNULÉ ` 
immédiatement après avoir été vérifié à l'aide de

    GET /api/scheduling/running/ANALYTICS_TABLE

Seuls les tâches qui ont été scindées en processus, étapes et éléments peuvent être 
annulées de manière efficace. Toutes les tâches n'ont pas encore été scindées. Celles-ci seront exécutées jusqu'à leur 
terme, même si l'annulation a été demandée.

