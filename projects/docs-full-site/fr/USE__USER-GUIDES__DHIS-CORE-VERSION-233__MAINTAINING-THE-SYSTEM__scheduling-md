---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.33/src/commonmark/en/content/user/scheduling.md"
revision_date: '2020-04-23'
---

# Programmation { #scheduling } 

<!--DHIS2-SECTION-ID:scheduling-->

Le Programmateur est une application qui permet de gérer les tâches d'arrière-plan dans DHIS2. Les tâches d'arrière-plan peuvent effectuer certaines fonctions, telles que l'exécution d'analyses, la synchronisation de données et de méta-données, ou l'envoi d'un rapport d'analyse "push". L'application permet de créer, de modifier et de supprimer de telles tâches.

Le Programmateur est fourni avec le DHIS2 et est accessible via le menu App.

![](resources/images/scheduler/overview.png)

The start page of the Scheduler app shows an overview of existing jobs.
By default, pre-defined system jobs are hidden. To view these, toggle
*Show system jobs* in the top right corner.

When you create or modify a job, it will be rescheduled according to
selected preferences. To run a job on demand, press the green triangle
labelled "Run now". This action is only available for enabled jobs.

## Créer une tâche { #scheduling_create_job } 

<!--DHIS2-SECTION-ID:scheduling_create_job-->

1.  Open the **Scheduler** app and click the add button in the bottom
    supérieur droit.

2.  Choisissez un **Nom** approprié pour le nouvel emploi.

3.  Select a running frequency for the job, i.e. when and how often the
    job should run.

    1.  You can either select a pre-defined frequency from the
        drop-down menu, or ...

    2.  You can give the job a custom **Cron expression** if you want a
        specific schedule, using the [Spring
        scheduling](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/support/CronSequenceGenerator.html)
        syntax.

    3.  Enabling the **Continuous execution** option will make the job
        run constantly. In other words, as soon as the job finishes, it
        will be scheduled to run again right away. Selecting this option
        will disable the other fields.

4.  Sélectionnez le **Type de tâche** que vous voulez programmer à l'aide du menu déroulant.
    menu déroulant.

5.  If the job type is customizable, a **Parameters** section will
    appear below. These additional options specify the details of the
    scheduled job, and will vary greatly depending on the job type.

6.  Press the **Add job** button to confirm the job creation. The newly
    created job should now be listed in the job overview, given that the
    **Show system jobs** setting is not enabled.

![](resources/images/scheduler/add_new_job.png)

Les tâches sont activées par défaut.

## Configurer une tâche { #scheduling_configure_job } 

<!--DHIS2-SECTION-ID:scheduling_configure_job-->

With the proper permissions, you can modify the details of user-created
jobs. Note that for system jobs, only the schedule (cron expression) can
be changed.

To quickly enable or disable a user created job from running, use the
**Enabled** column on the landing page of the Scheduler app. System jobs
are always enabled.

Configuration supplémentaire d'une tâche :

1.  Select a job from the landing page to unveil the **Attributes** and
    change them to accordingly. See the previous section for scheduling
    details.

2.  If the job type supports extra options, the **Parameters** section
    will also be available.

3.  Lorsque vous avez terminé, appuyez sur le bouton **Enregistrer les modifications** pour poursuivre les modifications.

## Supprimer une tâche { #dataAdmin_scheduler_delete } 

<!--DHIS2-SECTION-ID:dataAdmin_scheduler_delete-->

1.  Sélectionnez la tâche que vous souhaitez supprimer.

2.  Cliquez sur le bouton **Supprimer** dans le coin inférieur droit.

3.  Confirmez en cliquant à nouveau sur **Supprimer** dans la fenêtre pop-up.

![](resources/images/scheduler/delete_job.png)

## Types de tâches { #job-types } 

La section suivante décrit les différents types de tâches.

### Synchronisation des données { #scheduling_data_sync } 

<!--DHIS2-SECTION-ID:scheduling_data_sync-->

DHIS2 provides synchronisation of data between remotely distributed
instances and a central instance of DHIS2. This can be useful e.g. when
you have deployed multiple stand-alone instances of DHIS2 which are
required to submit data values to a central DHIS2 instance. Both tracker
data and aggregate data synchronisation is supported.

Voici les étapes à suivre pour activer la synchronisation des données :

- Accédez aux paramètres de synchronisation, saisissez l'URL du serveur à distance,
  le nom d'utilisateur et le mot de passe. Appuyez sur le bouton TAB pour enregistrer automatiquement
  le nouveau mot de passe. Actualisez la page et vérifiez que les valeurs renseignées
  sont toujours présentes. Notez que le champ du mot de passe sera vide après
  l'actualisation, puisque cette valeur est cryptée. Vous pouvez donc la considérer comme
  sauvegardée.

- À l'aide de l'application Planificateur, créez une nouvelle tâche à l'aide des types de tâche "Synchronisation des données des programmes d'événements"
  et/ou "Synchronisation des données des programmes Tracker". Assurez-vous qu'elle
  soit activée lorsque vous avez terminé. (Remarque : si la tâche "Synchronisation des données de programme",
  disponible dans les versions précédentes, a déjà été configurée dans l'application Planificateur,
  elle a été automatiquement remplacée par les deux nouvelles tâches "Synchronisation des données des programmes d'évènements"
  et "Synchronisation des données des programmes Tracker" avec les mêmes paramètres.)

Quelques aspects de la fonction de synchronisation des données à prendre en compte :

- L'instance DHIS2 locale stockera le mot de passe du compte utilisateur
  sur l'instance à distance cryptée dans la base de données locale. Le compte
  à distance est utilisé pour l'authentification lors du transfert des données. Pour
  security purposes make sure you set the "encryption.password"
  configuration parameter in hibernate.properties to a strong
   

- Le déploiement du serveur distant sur SSL/HTTPS est fortement recommandé car
  le nom d'utilisateur et le mot de passe sont envoyés en texte clair à l'aide 
  de base et peuvent être interceptés par un pirate.

- The data synchronization uses the UID property of data elements,
  category option combos and organisation units to match the
  meta-data. Hence the synchronization is dependent on these three
  meta-data objects being harmonized on the local and remote instance
  in order to work appropriately.

- The first time DHIS2 runs the synchronization job, it will include
  any data available. The subsequent synchronization jobs will only
  include data added and changed since the last successful job. A
  synchronization job is considered successful only if all the data
  was saved successfully on the remote server (Any data successfully
  synced will remain on the receiving instance, regardless if the job
  eventually fails). Whether the job was successful or not can be
  decided from the import summary returned from the central server.

- The initial synchronization job may take a significant amount of
  time, possibly slowing down your instance, depending on how much
  data is being synchronized. It could be a good idea to configure the
  job to run when there are few online users, then later change this
  to your own preference. If you do not want or need to synchronise all 
  the data, there is a possibility to <a href="#skip_changed_before">skip 
  some of the data being synchronised</a>.

  When DHIS2 synchronises tracker data, it determines the set of data
  to synchronise based on the last time it was synchronised. Each of
  the tracked entity instances and events have their own records of
  when they where last successfully synchronised.

- The system will start a synchronization job based on the rules set
  in the configuration of the job. If the synchronization job starts
  while there is no connection to the remote server, it will retry up
  to three times before it aborts. The job will run again at a
  scheduled time.

- The server handles each set of programs separately, which means one
  set of programs can be synchronized successfully, while the other
  fails. The failure or success of one doesn't influence the other, as
  the last successful synchronization time is tracked individually for
  each item as previously mentioned.

- The attributes of TrackedEntityInstances (TrackedEntityAttribute)
  and the data elements of ProgramStages (ProgramStageDataElement)
  which have an option "Skip synchronization" turned on will not be
  synchronized. This feature allows you to decide to not synchronize
  some sensitive or not relevant data and to keep them only locally.

- The authority `Ignore validation of required fields in Tracker and Event Capture`
  (F\_IGNORE\_TRACKER\_REQUIRED\_VALUE\_VALIDATION) should be used when
  there is a requirement that some mandatory attribute / data element
  has at the same time a "Skip synchronization" property turned on.
  Such a setting will lead to validation failure on the central server
  as the given attribute / data element will not be present in the
  payload.

  The validation won't fail for the user with this authority. The
  authority should be assigned to the user, on the central server,
  that will be used for synchronization job.

- In specific cases, **the initial synchronisation of all the data can be undesirable**; 
  for example, when a database on the local instance is a fresh copy of the 
  database present on the central instance, or when it is preferred to not 
  synchronise old data in favor of initial synchronisation taking less 
  time. 

  The *syncSkipSyncForDataChangedBefore* SettingKey can be used to skip 
  the synchronisation of all the data (data values, Event and Tracker 
  program data, complete data set registrations) that were *last 
  changed before the specified date*. The SettingKey is used in the 
  synchronisation job all the time. Therefore, if you need to synchronise 
  the old data, you should change the SettingKey.

- Both Tracker Programs and Event Programs synchronisation job supports 
  paging in order to avoid timeouts and to deal with unstable network.
  Default page size for "Event Programs Data Sync" job is set to 60. 
  Default page size for "Tracker Programs Data Sync" job is set to 20.

  If default values do not fit your purpose, own page size can be specified 
  via parameter in particular sync job in Scheduler app.

### Planification de la synchronisation des métadonnées { #scheduling_metadata_sync } 

<!--DHIS2-SECTION-ID:scheduling_metadata_sync-->

DHIS2 provides a feature for synchronizing meta data from a remote
instance to a local instance of DHIS2. This can be useful when you have
deployed multiple stand-alone instances of DHIS2 and you need to create
meta data in all the local instances similar to the central DHIS2
instance.

Voici les étapes à suivre pour activer la synchronisation des meta-données :

- Go to Settings \> Synchronization, enter the remote server URL,
  username and password and click Save.

- Go to Metadata administration \> Scheduling. Under Metadata
  synchronization set strategy to Enabled, select the time-period and
  click Start.

Quelques aspects de la fonction de synchronisation des meta-données à prendre en compte :

- L'instance DHIS2 locale stockera le mot de passe du compte utilisateur
  of the remote instance in its database. The remote user account is
  used for authentication when transferring/downloading data. For
  security purposes make sure you set the "encryption.password"
  configuration parameter in hibernate.properties to a strong
   

- Le déploiement du serveur distant sur SSL/HTTPS est fortement recommandé car
  le nom d'utilisateur et le mot de passe sont envoyés en texte clair à l'aide 
  de base et peuvent être interceptés par un pirate.

- Also ensure that the remote user is not having ALL authority,
  instead simply create a user with F\_METADATA\_MANAGE authority so
  that even if these details are intercepted by a hacker, one cannot
  have full control of the remote system.

- The meta data synchronization relies on the underlying import layer.
  Each meta data version is an export of meta data between two given
  timestamps. Each sync of meta data version is an attempt to import
  that meta data snapshot into the local instance. The sync of
  versions is incremental. The local instance will try to download the
  meta data versions from the central instance one after the other.
  Failure to sync a specific meta data version will not let the sync
  proceed to further versions. In case of failures, appropriate
  changes must be made to meta data at central to ensure that the
  error gets resolved. Metadata configuration is critical and the
  configurator should be careful while rolling out the updates to the
  production. It's always recommended to have staging environments in
  place to ensure the sanity of the meta data versions and their
  impact thereafter. The local instance will sync the meta data from
  first version so that harmony is maintained and local and central
  instance will work appropriately.

- The system will attempt a synchronization at the scheduled time. If
  the local or remote server does not have a working Internet
  connection at the time, the synchronization will be aborted and
  re-attempted after as per the retry count as mentioned in the
  dhis.conf file.

- You can see the time of last successful synchronization with remote
  server in the scheduling screen next to the "Last success" label.
