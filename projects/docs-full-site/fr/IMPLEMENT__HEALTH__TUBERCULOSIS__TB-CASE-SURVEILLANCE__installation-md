---
edit_url: "https://github.com/dhis2-metadata/TB_CS/blob/master/docs/tb_cs-installation.md"
revision_date: '2023-12-19'
tags:
- Implémentation
---

# TB Case Surveillance Tracker Installation Guide { #tb-cs-installation }

Package version 2.0.0

Langue par défaut du système : anglais

Traductions disponibles : français, espagnol, portugais

## Installation { #installation }

L'installation du module se fait en plusieurs étapes :

1. [Préparation](#preparing-the-metadata-file) du fichier de métadonnées.
2. [Importer](#importing-metadata) le fichier de métadonnées DHIS2.
4. [Configuration](#configuration) des métadonnées importées.
5. [Adaptation](#adapting-the-tracker-program) du programme après son importation

Nous vous recommandons de lire tout d’abord chaque section du guide d’installation avant de commencer le processus d’installation et de configuration dans le système DHIS2. Identifiez les sections applicables en fonction du type d’importation :

1. Importer dans une instance DHIS2 vierge
2. Import into a DHIS2 instance with existing metadata (No other versions of TB Case Surveillance tracker imported previously).
3. Update existing/older version of the TB Case Surveillance tracker.

Les étapes décrites dans ce document doivent être testées dans une instance DHIS2 de test/transit avant d’être appliquées à un environnement de production.

## Conditions requises { #requirements } 

In order to install the module, a DHIS2 administrator user account is required.

Il faut veiller à ce que le serveur lui-même et l'application DHIS2 soient bien sécurisés, et que les droits d'accès aux données collectées soient définis. Les détails sur la sécurisation d'un système DHIS2 dépassent le cadre de ce document et nous renvoyons à l'adresse [Documentation sur DHIS2] (https://docs.dhis2.org/).

## Fichiers de métadonnées { #metadata-files } 

Les fichiers metadata reference et metadata json fournissent des détails techniques sur la version et le contenu du package.

While not always necessary, it can often required to make certain modifications to the metadata file before importing it into DHIS2.

## Préparation du fichier de métadonnées { #preparing-the-metadata-file } 

It is recommended to import the DHIS2 Common HIS metadata library into the target instance before using and adapting any DHIS2 metadata packages.
Common HIS Metadata package is available for download in the supported versions of DHIS2 at [Metadata Package Downloads](https://dhis2.org/metadata-package-downloads)

### Dimension de données par défaut { #default-data-dimension } 

Dans les premières versions du système DHIS2, les UID des dimensions de données par défaut étaient générés automatiquement. Ainsi, bien que toutes les instances du système DHIS2 possèdent une option de catégorie par défaut, une catégorie d’élément de données, une combinaison de catégories et une combinaison d’options de catégorie, les UID de ces valeurs par défaut peuvent être différents. Les versions ultérieures du système DHIS2 utilisent des UID codés en dur pour la taille par défaut, lesquels sont utilisés dans les packages de configuration.

Pour éviter tout conflit lors de l’importation des métadonnées, nous vous recommandons de rechercher et de remplacer toutes les occurrences de ces objets par défaut dans l’ensemble du fichier .json, en remplaçant les UID du fichier .json par ceux de l’instance dans laquelle le fichier sera importé. Le tableau 1 présente les UID à remplacer, ainsi que les points de terminaison d’API permettant d’identifier les UID existants.

| Objet                      | UID           | Chemin vers l'API                                              |
|-----------------------------|---------------|-----------------------------------------------------------|
| Catégorie                    | `GLevLNI9wkl` | `../api/categories.json?filter=name:eq:default`           |
| Option de catégorie             | `xYerKDKCefk` | `../api/categoryOptions.json?filter=name:eq:default`      |
| La combinaison de catégories        | `bjDvmb4bfuf` | `../api/categoryCombos.json?filter=name:eq:default`       |
| Combinaison d’options catégorie | `HllvX50cXC0` | `../api/categoryOptionCombos.json?filter=name:eq:default` |

Identifiez les UID des tailles par défaut de votre instance à l’aide des requêtes API affichées et remplacez les UID dans le fichier .json par ceux de l’instance.

> **N.B.**
>
> Notez que cette opération de recherche et de remplacement doit être effectuée via un éditeur de texte brut, et non un traitement de texte comme Microsoft Word.

### Types d'indicateurs { #indicator-types } 

Le type d’indicateur est également un type d’objet susceptible de créer un conflit lors de l’importation, car certains noms sont utilisés dans différentes bases de données DHIS2 (par ex. « Pourcentage »). Comme les types d’indicateurs sont définis par leur facteur (y compris 1 pour les indicateurs « numérateur seulement »), ils ne laissent aucune ambiguïté et peuvent être remplacés en recherchant et remplaçant des UID. Cette méthode permet d’éviter les éventuels conflits d’importation et empêche le responsable de la mise en œuvre de créer des doublons de types d’indicateurs. Le tableau ci-dessous contient les UID pouvant être remplacés, ainsi que les points de terminaison d’API permettant d’identifier les UID existants :

|Objet                  | UID           | Chemin vers l'API                                                          |
|------------------------|---------------|-----------------------------------------------------------------------|
| Numérateur seulement (nombre)| `CqNPn5KzksS` | `../api/indicatorTypes.json?filter=number:eq:true&filter=factor:eq:1` |

### TrackedEntityType (Type d'entité suivie) { #tracked-entity-type } 

Comme pour les types d’indicateurs, il se peut que des types d’entités suivies existent déjà dans votre base de données DHIS2. Pour éviter de créer des doublons, les références au type d’entité suivie doivent être modifiées pour refléter les éléments de votre système. Le tableau ci-dessous contient les UID pouvant être remplacés, ainsi que les points de terminaison d’API permettant d’identifier les UID existants :

|Objet  | UID           | Chemin vers l'API                                           |
|------------------------|---------------|----------------------------------------|
| Personne | `MCPQUTHX1Ze` | `../api/trackedEntityTypes.json?filter=name:eq:Person` |

### Codes d'option { #option-codes } 

Selon les conventions d'affectation de noms du système  DHIS2, les codes de métadonnées utilisent des lettres majuscules, des caractères de soulignement et aucun espace. Certaines exceptions susceptibles de survenir sont spécifiées dans la documentation du package correspondant. Tous les codes inclus dans les objets de métadonnées du package actuel correspondent aux conventions d'affectation de noms. Il peut arriver que les codes des objets de métadonnées existants utilisés dans la base de données cible utilisent des caractères minuscules. Dans ce cas, il est important de mettre à jour ces valeurs directement dans la base de données.

> **Important**
>
> Pendant l’importation, les codes d’option existants seront remplacés par les nouveaux codes en majuscules. 
> Afin de mettre à jour les valeurs des données existantes dans la base de données, vous devez mettre à jour les valeurs stockées dans la base de données en utilisant les commandes de la base de données. 
> Assurez-vous de mapper les anciens codes d’option et les nouveaux avant de remplacer les valeurs. Utilisez d’abord l’instance de transit, avant d’effectuer des modifications sur le serveur de production.

Pour les valeurs des éléments de données, utilisez :

    ```SQL
    UPDATE programstageinstance
    SET eventdatavalues = jsonb_set(eventdatavalues, ’{"<affected data element uid>","value"}’, ’"<new value>"’)
    WHERE eventdatavalues @> ’{"<affected data element uid>":{"value": "<old value>"}}’::jsonb
    AND programstageid=<database_programsatgeid>;
    ```

> **REMARQUE.**
>
> Lorsque vous mettez à jour l'UID d'un élément de métadonnées dans l'instance DHIS2 existante, vous devez exécuter une commande SQL dans la base de données et remplacer en outre toutes les occurrences et références de son UID dans d'autres objets de métadonnées : prédicteurs, indicateurs, expressions de règles de validation, etc.

### Sort order of options { #sort-order-of-options } 

Vérifiez si l’ordre de tri `sortOrder` des options de votre système correspond à celui inclus dans le package de métadonnées. Cela ne s’applique que si le fichier .json et l’instance cible contiennent des options et des ensembles d’options avec le même UID.

After import, make sure that the sort order of options within an option set starts at 1. There should be no gaps (eg. 1,2,3,5,6) in the sort order values.

L’ordre de tri peut être modifié dans l’application Maintenance.

1. Accédez à l’ensemble d’options applicable
2. Ouvrez la section « Options »
3. Utilisez « TRIER PAR NOM », « TRIER PAR CODE/VALEUR » ou « TRIER MANUELLEMENT » comme alternative.

Make sure that no options within an option set have the same sort order. This can be checked using the following api endpoint:

`../api/options.json?paging=false&fields=id,name,sortOrder&filter=optionSet.id:in:[<optionSet UID>]`

In order to fix sort order in option sets containing large numbers of options, please refer to this [SQL script](https://github.com/dhis2/dhis2-utils/blob/master/resources/sql/clean_up_option_sort_order.sql).

### Visualisations à l'aide de l’UID de l’unité d’organisation de base { #visualizations-using-root-organisation-unit-uid }

Les visualisations, les rapports d’événements, les tableaux de rapports et les cartes affectés à un niveau d’unité d’organisation spécifique ou à un groupe d’unités d’organisation comportent un renvoi à l’unité d’organisation de base (niveau 1). Ces objets, s’ils sont présents dans le fichier de métadonnées, contiennent une balise `<OU_ROOT_UID>`. Utilisez la fonction de recherche de l’éditeur de fichiers .json pour trouver cette balise et la remplacer par l’UID de l’unité d’organisation de niveau 1 dans l’instance cible.

Some visualizations and maps may contain references to organisation unit levels. Maps that consist of several map views may contain vaious Organisation unit level references based on the configuration of the map layer. Adjust the organisation unit level references in the metadata json file to match the organisation unit structure in the target instance before importing the metadata file.

### Mise à jour du package de métadonnées { #upgrading-metadata-package } 

Le processus de mise à niveau d'un paquet existant vers une version plus récente dans une instance DHIS2 opérationnelle est une opération complexe qui doit être effectuée avec précaution. Ce processus doit d'abord être exécuté dans une instance d'essai, avant la mise à jour de la configuration sur le serveur de production. Étant donné que des objets de métadonnées peuvent avoir été supprimés, ajoutés ou modifiés, il faut s'assurer que :

   - le format des données existantes peut être mappé et adapté à la nouvelle configuration ;
   - les objets de métadonnées abandonnés sont supprimés de l'instance ; 
   - Les objets existants sont mis à jour ;
   - les nouveaux objets sont créés ;
   - l'affectation des utilisateurs aux groupes d'utilisateurs concernés a été révisée.

The [diff file](resources/tb_cs-1.0.1-vs-2.0.0.xlsx) will help the implementer identify the necessary changes.

## Importation de métadonnées { #importing-metadata } 

Utilisez l’application DHIS2 [Import/Export](#import_export) pour importer des packages de métadonnées. Nous vous recommandons d’utiliser la fonction « test » pour identifier les problèmes avant de tenter d’effectuer une importation réelle des métadonnées. Si le « test » signale des problèmes ou des conflits, consultez la section [conflits lors de l’importation](#handling-import-conflicts) ci-dessous. Si aucune erreur n’est signalée lors de l’importation « test »/« validée », essayez d’importer les métadonnées. Si l’importation s’est déroulée sans erreur, vous pouvez passer à la [configuration](#configuration) du module. Dans certains cas, les conflits ou les problèmes d’importation n’apparaissent pas pendant le test, mais durant l’importation réelle. Dans ce cas, le résumé de l’importation indiquera les erreurs à résoudre.

### Gestion des conflits d'importation { #handling-import-conflicts } 

> **REMARQUE**
>
> Si vous importez le package dans une nouvelle instance du système DHIS2, il n’y aura aucun conflit lors de l’importation, car ia base de données cible ne contient aucune métadonnée. Après avoir importé les métadonnées, passez à la section « [Configuration](#configuration) ».

Différents types de conflit peuvent survenir, mais le plus courant est le fait que le nom, le nom abrégé et/ou le code des objets de métadonnées du package de configuration existent déjà dans la base de données cible. Il existe plusieurs solutions alternatives à ces problèmes, chacun avec ses avantages et ses inconvénients. La solution la plus appropriée dépend, par exemple, du type d’objet à l’origine du conflit.

#### Option 1 { #alternative-1 } 

Renommez l'objet existant dans votre base de données DHIS2 pour lequel il existe un conflit. L'avantage de cette approche est qu'il n'est pas nécessaire de modifier le fichier .json, les changements étant effectués par l'interface utilisateur de DHIS2. Il est probable que cela soit moins sujet à des erreurs. Cela signifie également que le paquet de configuration est laissé tel quel, ce qui peut être un avantage, par exemple lorsque des mises à jour du package sont publiées. Les objets du package d'origine sont également souvent référencés dans le matériel de formation et la documentation.

#### Option 2 { #alternative-2 } 

Renommez l'objet pour lequel il y a un conflit dans le fichier .json. L'avantage de cette approche est que les métadonnées DHIS2 existantes sont laissées telles quelles. Cela peut être un facteur lorsqu'il y a du matériel de formation ou de la documentation, comme les procédure normale d'exploitation des dictionnaires de données liés à l'objet en question, et cela n'implique aucun risque de confusion pour les utilisateurs lors de la modification des métadonnées qui leur sont familières.

Notez que pour les deux options 1 et 2, la modification peut être aussi simple que l'ajout d'un petit pré/post-fixe au nom, pour minimiser le risque de confusion.

#### Option 3 { #alternative-3 } 

Une troisième approche, plus complexe, consiste à modifier le fichier .json pour réutiliser les métadonnées existantes. Par exemple, dans les cas où un ensemble d'options existe déjà pour un certain concept (par exemple "sexe"), cet ensemble d'options pourrait être supprimé du fichier .json et toutes les références à son UID remplacées par l'ensemble d'options correspondant existant déjà dans la base de données. Le grand avantage de cette méthode (qui n'est pas limitée aux seuls cas où il y a un conflit d'importation directe) est d'éviter de créer des métadonnées dupliquées dans la base de données. Il y a des aspects essentiels à prendre en compte lors de ce type de modification :

* il nécessite une connaissance approfondie de la structure détaillée des métadonnées du DHIS2
* Cette approche ne fonctionne pas pour tous les types d'objets. En particulier, certains types d'objets ont des dépendances compliquées à résoudre de cette manière, par exemple en ce qui concerne les désagrégations.
* il sera compliqué de procéder aux futures mises à jour du package de configuration.

### Upgrading earlier versions of TB CS Tracker program { #upgrading-earlier-versions-of-tb-cs-tracker-program } 

This section provides guidance on upgrading earlier versions of TB CS tracker (eg. versions 1.0.0 or 1.0.1).

For existing implementations, direct upgrade of metadata packages in the instance is not recommended.

Use the following steps before choosing the best upgrade strategy:

1. Import **TB CS tracker 2.0.0** into a new test instance
2. Compare and map existing data with the TB CS tracker 2.0.0 configuration
3. Adapt TB CS tracker 2.0.0 based on local requirements
4. Use existing or custom data transfer tools to transfer data from existing configuration to TB CS tracker 2.0.0
5. Make assessment-based decisions regarding upgrade stratagy (adapting existing configuration or moving data to the new tracker)

For demo and training purposes, the following upgrade process is recommended:

1. Create a backup of the instance with the TB CS tracker
2. The TB CS metadata objects that are listed below will have to be deleted from the target instance before importing TB CS tracker.2.0.0. If you have customised or added any metadata objects from the previous versions of the package, these need to be backed up, reconfigured and imported after upgrade. Delete the following metadata objects from the target instance:
    * des tableaux de bord
    * visualisations
    * cartes
    * eventReports
    * programIndicatorGroups
    * program indicators
    * indicatorGroups
    * des indicateurs
    * trackedEntityInstanceFilters
    * dataElementGroups
    * programRules
    * programRuleActions
    * programRuleVariables
3. If you have existing data in the demo/training instance, you will be required to export all TB CS tracker enrollment data, delete it in the instance and reimport once the data has been mapped and the TB CS tracker has been updated upgraded. In TB CS tracker 1.0.0, only diagnosed TB cases are enrolled in the program. TB CS tracker 2.0.0 allows both presumtive and diagnosed cases to be enrolled. The enrollment date in 1.0.0 (Date of diagnosis) becomes date of registration in 2.0.0. For existing enrollments, the enrollment date has to be mapped with the Date of diagnosis, which is a data element in the Registration stage. Additional mappings for Notification date and other data elements will be required.
4. Import TB CS tracker 2.0.0 into the instance.
5. Import mapped and missing data.
6. Test data entry, dashboards and general functionality.

## Configuration { #configuration }

Une fois que toutes les métadonnées sont importées avec succès, des étapes doivent être mises en oeuvre avant que le module ne soit fonctionnel.

### Partage { #sharing } 

Tout d'abord, vous devrez utiliser la fonctionnalité *Partage* de DHIS2 pour configurer quels utilisateurs (groupes d'utilisateurs) doivent voir les métadonnées et les données associées au programme ainsi que qui peut enregistrer/saisir des données dans le programme. Par défaut, le partage a été configuré pour ce qui suit :

* Tableaux de bord
* Visualisations, cartes, rapports d’événement et tableaux de rapports
* Des ensembles de données
* Les options de catégorie
* Programs and program stages

These core user groups are included in the package:

* Administrateur de la Tuberculose
* Accès à la tuberculose
* TB lab access
* Saisie des données de la tuberculose
* TB lab data capture

Les éléments suivants sont attribués par défaut à ces groupes d'utilisateurs

|Objet|Groupes d'utilisateurs| | | | |
|:-|:-|:-|:-|:-|:-|
| | Accès à la tuberculose | TB lab access | Administrateur de la Tuberculose | Saisie des données de la tuberculose | TB lab data capture |
| Type d'entité suivie | **Metadata:** can view <br> **Data:** can view | **Metadata:** can view <br> **Data:** can view | **Metadata:** can edit and view <br> **Data:** no access | **Metadata:** can view <br> **Data:** can capture and view | **Metadata:** can view <br> **Data:** can capture and view |
| Programme | **Metadata:** can view <br> **Data:** can view | **Metadata:** can view <br> **Data:** can view | **Metadata:** can edit and view <br> **Data:** no access | **Metadata:** can view <br> **Data:** can capture and view | **Metadata:** can view <br> **Data:** can capture and view |
| Étapes du programme | **Metadata:** can view <br> **Data:** can view | **Group access is limited to stages: TB Registration, Diagnostic and Laboratory Results** <br> **Metadata:** can view <br> **Data:** can view | **Metadata:** can edit and view <br> **Data:** no access | **Metadata:** can view <br> **Data:** can capture and view | **Group access is limited to stages: TB Registration and Laboratory Results** <br> **Metadata:** can view <br> **Data:** can capture and view |
| Tableaux de bord | **Metadata:** can view <br> **Data:** can view | **Metadata:** can view <br> **Data:** can view | **Metadata:** can edit and view <br> **Data:** no access | Pas d'accès | Pas d'accès |

Users need to be assigned to the aplicable user group based on their role within the system. Sharing for other objects in the package should be set up depending on requirements. Refer to the [DHIS2 Documentation](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/sharing.html) for more information on configuring sharing.

### Rôles des utilisateurs { #user-roles } 

Les utilisateurs auront besoin de rôles utilisateur pour pouvoir utiliser les différentes applications du DHIS2. Les rôles minimums suivants sont recommandés :

1. Analyse des données Tracker : Il peut visualiser des analyses d'événements et accéder à des tableaux de bord, des rapports d'événements, un visualiseur d'événements, un visualiseur de données, des tableaux croisés dynamiques, des rapports et des cartes.
2. Saisie de données Tracker : possibilité d'ajouter des valeurs de données, de mettre à jour les entités suivies, de rechercher des entités suivies dans les unités d'organisation et d'accéder à l'application Saisie Tracker

Reportez-vous à la [Documentation DHIS2] (http://dhis2.org/documentation) pour plus d'informations sur la configuration des rôles des utilisateurs.

### Unités d’Organisation { #organisation-units } 

Program must be assigned to applicable organisation units within the organisation unit hierarchy.

### Métadonnées dupliquées { #duplicated-metadata } 

> **REMARQUE**
>
> Cette section ne s’applique que si vous importez dans une base de données DHIS2 qui comporte déjà des métadonnées. Si vous travaillez avec une nouvelle instance du système DHIS2, veuillez ignorer cette section et accédez à [Adaptation du programme Tracker](#adapting-the-tracker-program). 
> Si vous utilisez des applications tierces qui reposent sur les métadonnées actuelles, sachez que cette mise à jour pourrait les interrompre."

Même lorsque les métadonnées sont importées avec succès sans aucun conflit d'importation, il peut y avoir des doublons dans les métadonnées - éléments de données, attributs d'entités suivies ou ensembles d'options qui existent déjà. Comme indiqué dans la section ci-dessus sur la résolution des conflits, il est important de garder à l'esprit que les décisions relatives à la modification des métadonnées dans le DHIS2 doivent également tenir compte d'autres documents et ressources associés de différentes manières aux métadonnées existantes et aux métadonnées importées par le biais du package de configuration. La résolution des doublons ne consiste donc pas seulement à "nettoyer la base de données", mais aussi à s'assurer que cela est fait sans, par exemple, briser le potentiel d'intégration avec d'autres systèmes, la possibilité d'utiliser du matériel de formation, la rupture des SOP, etc. Cela dépend beaucoup du contexte.

### Les constantes { #constants } 

TB Case Surveillance Tracker package includes a set of tests and a list of drugs that can be modified by the implementing country according to national context (e.g. which drugs and tests are used/available in country). The use of constants and corresponding program rules enables a system admin in an implementing country to easily ‘turn on’ or ‘turn off’ types of drugs and tests depending on requirements. Instructions for configuring constants are provided in the description of the constant objects.

### Configuring tracker capture interface, widgets and top bar { #configuring-tracker-capture-interface-widgets-and-top-bar } 

You must configure tracker capture dashboard after the package has been installed. This configuration includes data entry forms, widgets and top bar.

#### Modèles de saisie de données { #data-entry-forms } 

* After registering the first (test) case, access the **Settings** menu in the tracker capture form and select **Show/Hide Widgets**
* Use **Timeline Data Entry**
* Make sure that **Enrollment**, **Feedback** and **Profile** widgets are selected. Click **Close**.

#### Top Bar { #top-bar } 

* Access the **Settings** menu and select **Top bar settings**
* Select **Activate top bar**
* Select required information fields and assign **Sort order**

| Recommended fields                     | Sort order |
|:---------------------------------------|:-----------|
| **Attributs**                         |            |
| Numéro d'enregistrement de la tuberculose                 | 2          |
| Des **Indicateurs**                         |            |
| Case classification                    | 8          |
| Patient's age (years)                  | 5          |
| HIV Status at diagnosis                | 6          |
| Resistance at diagnosis                | 10         |
| Treatment regimen                      | 9          |
| Date of diagnosis                      | 1          |
| Months since diagnosis                 | 3          |
| Resistance classification at diagnosis | 7          |
| Patient's age (months)                 | 4          |

* Cliquez sur **Enregistrer**
* Return to the **Settings** menu. Click **Saved dashboard layout as default**. Lock layout for all users.

### Program notifications { #program-notifications } 

TB CS Tracker 2.0.0 includes 4 notification templates that can be edited based on local requirements. Additional configuration for setting up SMS or email notifications is required.

### Reporting case-based data into aggregate data sets { #reporting-case-based-data-into-aggregate-data-sets } 

The TB case-based surveillance tracker captures data that can be fed into standard, aggregate reporting (i.e. monthly, quarterly, yearly or as determined by the country). Aggregate DHIS2 TB HMIS system design can be accessed at [https://dhis2.org/metadata-package-downloads/#tb](https://dhis2.org/metadata-package-downloads/#tb)

This [Tracker-to-Aggregate tool](https://github.com/dhis2/integration-t2a) can be easily configured for data transfer..

More information is available in the [Tracker to aggregate data integration guide](https://docs.dhis2.org/en/implement/maintenance-and-use/tracker-and-aggregate-data-integration.html#how-to-saving-aggregated-tracker-data-as-aggregate-data-values).

The **program indicators** in the TB Case Surveillance and Laboratory package are mapped with **data elements** and **category option combinations** in the DHIS2 TB aggregate package (Laboratory, Notifications and outcomes).

## Adapter le programme tracker { #adapting-the-tracker-program } 

Une fois le programme importé, il est possible que vous souhaitiez y apporter certaines modifications. Voici quelques exemples d'adaptations locales que vous _pourrez_ effectuer :

* Ajout de variables supplémentaires au formulaire.
* Adaptation des noms des éléments de données/options en fonction des usages au niveau national.
* Ajout des traductions aux variables et/ou au formulaire de saisie des données.
* Modification des indicateurs du programme en fonction des définitions de cas locales.

Toutefois, il est fortement recommandé de faire preuve d'une grande prudence si vous décidez de modifier ou de supprimer l'un des formulaires/métadonnées inclus. Il y a donc un risque que des modifications brisent des fonctionnalités, par exemple les règles du programme et les indicateurs du programme.

