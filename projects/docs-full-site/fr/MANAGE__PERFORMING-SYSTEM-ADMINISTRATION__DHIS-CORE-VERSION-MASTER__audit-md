---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/master/src/sysadmin/audit.md"
revision_date: '2022-10-23'
tags:
- Version Master de DHIS2 Central
- Gestion
---

# Audit { #audit }

## Introduction { #introduction } 

DHIS2 prend en charge un nouveau service d'audit basé sur _Apache ActiveMQ Artemis_. Artemis est utilisé comme système de messagerie asynchrone par DHIS2.

Une fois qu'une entité est enregistrée dans la base de données, un message d'audit sera généré et envoyé au service utilisateur de la messagerie Artemis. Le message sera ensuite traité dans un autre fil de discussion.

Les journaux d'audit peuvent être récupérés à partir de la base de données de DHIS2. Actuellement, aucun point d'extrémité d'une interface utilisateur ou d'une API n’est disponible pour récupérer les entrées d’audit.

Vous trouverez une explication détaillée de l'architecture du système d'audit [ici](https://github.com/dhis2/wow-backend/blob/master/guides/auditing.md).

## Ce que nous enregistrons { #what_we_log }

Voici la liste des opérations que nous enregistrons dans le cadre du système d'audit :

- Opérations sur les comptes d'utilisateurs (comme, mais sans s'y limiter, la création, les modifications de profil)
- Opérations sur les rôles d'utilisateurs, les groupes et les groupes d'autorités
- Opérations sur les objets de métadonnées (par exemple, mais sans s'y limiter, les catégories, les unités d'organisation, les rapports)
- Opérations sur les objets suivis (par exemple, mais sans s'y limiter, les instances, les attributs, les valeurs de données)
- Configuration des tâches
- Opérations "Briser le verre"

## Table d'audit unique { #audit_table }

Toutes les entrées d'audit, à l'exception de celles liées aux entités suivies, seront sauvegardées dans un même tableau nommée `audit`

| Colonne     | Type                        | Description |
|------------|-----------------------------|---------------------------------------------------------------------------------------------------------------------------------------------|
| Identifiant de l'audit    | entier                     | Clé primaire. |
| type d'audit  | texte                        | LIRE, CRÉER, METTRE À JOUR, SUPPRIMER, RECHERCHER |
| champ d'application de l'audit | texte                        | MÉTADONNÉES, AGRÉGÉ, TRACKER |
| classe      | texte                        | Nom de classe Java de l’entité d’audit. |
| les attributs | jsonb                       | Une chaîne JSON avec les attributs de l'objet audité. Exemple : `{"valueType": "TEXT", "categoryCombo": "SWQW313FQY", "domainType": "TRACKER"}`. |
| données       | bytea                       | Chaîne JSON compressée de l'entité d'audit au format "tableau d'octets" (non lisible par l'homme). |
| créé à  | horodatage sans fuseau horaire | Temps de création. |
| créé par  | texte                        | Nom d'utilisateur de l'utilisateur effectuant l'opération auditée. |
| uid        | texte                        | L'UID de l'objet audité. |
| code       | texte                        | Le code de l'objet audité. |

Le service d'audit utilise deux nouveaux concepts : *Champ d'application de l'audit* et *Type d'audit*.

## Champ d'application de l'audit { #audit_scope }

Un champ d'application d'audit est une zone logique de l'application qui peut être auditée. Il existe actuellement trois champs d'application d'audit.

| **Portée** | Clé       | Objets audités                                              |
| --------- | --------- | ------------------------------------------------------------ |
| Tracker   | tracker   | Instance d'entité suivie, Valeur d'attribut d'entité suivie, inscription, Événement. |
| Métadonnées  | métadonnées  | Tous les objets de métadonnées (par exemple, les éléments de données, les unités d'organisation). |
| Agrégat | agrégation | Valeur de données agrégée.                                        |


## Type d'audit { #audit_type }

Un type d'audit est une action qui déclenche une opération d'audit. Actuellement, nous prenons en charge les quatre types suivants.

| Nom     | Clé      | Description         |
| -------- | -------- | ------------------- |
| Lire     | LIRE     | L'objet a été lu.    |
| Créer   | CRÉER   | L'objet a été créé. |
| Mise à jour   | METTRE À JOUR   | L'objet a été mis à jour. |
| Supprimer   | SUPPRIMER   | L'objet a été supprimé. |
| Désactivé | DÉSACTIVÉ | Désactiver l'audit.      |

> **Attention**
>
> Le type d'audit LIRE peut générer beaucoup de données dans la base de données et avoir un impact sur les performances.


## Audits d'entités suivies { #tracked-entity-audits }

Les opérations sur les entités suivies telles que les instances, les attributs et les valeurs, sont stockées respectivement dans les tableaux `trackedentityinstanceaudit` (audit d'instance d'entité suivie), `trackedentityattributevalueaudit` (audit de valeur d'attribut d'entité suivie), et `trackedentitydatavalueaudit` (audit de valeur de données d'entité suivie).

### audit d'instance d'entité suivie { #trackedentityinstanceaudit }

| Colonne     | Type                        | Description |
|------------|-----------------------------|-------------|
| trackedentityinstanceauditid | entier | Clé primaire. |
| trackedentityinstance | texte  | Nom de l'instance d'entité suivie.  |
| créé  | horodatage sans fuseau horaire | Temps de création. |
| accessible par | texte | Nom d'utilisateur de l'utilisateur effectuant l'opération auditée. |
| type d'audit | texte | LIRE, CRÉER, METTRE À JOUR, SUPPRIMER, RECHERCHER |
| commentaire | texte | Le code de l'objet audité. |

Ces données peuvent être récupérées via [API](#webapi_tracked_entity_instance_audits).

### trackedentityattributevalueaudit { #trackedentityattributevalueaudit } 

| Colonne     | Type                        | Description |
|------------|-----------------------------|-------------|
| trackedentityattributevalueauditid | entier | Clé primaire. |
| trackedentityinstanceid | entier | ID de l'instance à laquelle appartient la valeur d'attribut.  |
| trackedentityattributeid (ID d'attribut d'entité suivi) | entier | ID d'attribut.  |
| créé  | horodatage sans fuseau horaire | Temps de création. |
| modifié par  | texte | Nom d'utilisateur de l'utilisateur effectuant l'opération auditée. |
| type d'audit | texte  | LIRE, CRÉER, METTRE À JOUR, SUPPRIMER, RECHERCHER |
| valeur | texte | La valeur de l'objet audité. |
| valeur cryptée | texte | The encrypted value if confidentiality flag is set. |


This data can be retrieved via [API](#webapi_tracked_entity_attribute_value_audits).

### trackedentitydatavalueaudit { #trackedentitydatavalueaudit } 

| Colonne     | Type                        | Description |
|------------|-----------------------------|-------------|
| trackedentitydatavalueauditid | entier | Clé primaire. |
| programstageinstanceid | entier | Program stage ID of which the data value belongs to.  |
| dataelementid | entier | ID of the data element.  |
| créé | horodatage sans fuseau horaire | Temps de création. |
| modifié par | texte | Nom d'utilisateur de l'utilisateur effectuant l'opération auditée. |
| type d'audit | texte | LIRE, CRÉER, METTRE À JOUR, SUPPRIMER, RECHERCHER |
| valeur | texte | La valeur de l'objet audité. |
| providedelsewhere | bool | Indicates whether the user provided the value elsewhere or not. |

This data can be retrieved via [API](#webapi_tracked_entity_data_value_audits).

## Briser le verre { #breaking-the-glass } 
Breaking the glass features allows to access records a DHIS2 user doesn't have access in special circumstances. As a result of such, users must enter a reason to access such records.

A video explaining how it works can be found in our Youtube channel [here](https://www.youtube.com/watch?v=rTwg5Ix_E_M).

The breaking the glass event is stored in the `programtempownershipaudit` table, described below:

| Colonne     | Type  | Description |
|------------|-------|-------------|
| programtempownershipauditid | entier | Clé primaire. |
| programid | entier | Program ID of which the tracked entity belongs to.  |
| trackedentityinstanceid | entier | ID de l'instance à laquelle appartient la valeur d'attribut.  |
| créé  | horodatage sans fuseau horaire | Temps de création. |
| accessible par  | texte | Nom d'utilisateur de l'utilisateur effectuant l'opération auditée. |
| reason       | texte | The reason as inserted in the dialog. |


## Setup { #audit_configuration } 

The audit system is enabled by default for the following scopes and types.

Scopes (case sensitive):

- `CREATE`
- `UPDATE`
- `DELETE`

Types:

- `METADATA`
- `TRACKER`
- `AGGREGATE`

This means that **no action is required** to enable the default audit system. The default setting is equivalent to the following `dhis.conf` configuration.

```properties
audit.metadata = CREATE;UPDATE;DELETE
audit.tracker = CREATE;UPDATE;DELETE
audit.aggregate = CREATE;UPDATE;DELETE
```

The audit can be configured using the _audit matrix_. The audit matrix represents the valid combinations of scopes and types, and is defined with the following properties in the `dhis.conf` configuration file. Each property accepts a semicolon (`;`) delimited list of audit types.

* `audit.metadata`
* `audit.tracker`
* `audit.aggregate`

### Artemis { #artemis } 
[Apache ActiveMQ Artemis](https://activemq.apache.org/components/artemis/documentation/) is an open source project to build a multi-protocol, embeddable, very high performance, clustered, asynchronous messaging system. It has been part of DHIS2 since version 2.31 and used as a system to consume audit logs.

By default, DHIS2 will start an embedded Artemis server, which is used internally by the application to store and access audit events.

However, if you have already an Artemis server, you can connect to it from DHIS2 to send audit events, as described in our [official documentation](#webapi_amqp_configuration): in this setup, audit events will flow from DHIS2 to the external Artemis system.

### log4j2 { #log4j2 } 
[log4j2](https://logging.apache.org/log4j/2.x/index.html) is the default DHIS2 logging library used to handle output messages. It's used to control what events are recored in which file.

The application ships a [log4j2 default configuration file](https://github.com/dhis2/dhis2-core/blob/master/dhis-2/dhis-web/dhis-web-commons-resources/src/main/webapp/WEB-INF/classes/log4j2.xml), which instructs what information to log and where (console). DHIS2 then takes care of import that file and instruction logging as described in the [log4j configuration class](https://github.com/dhis2/dhis2-core/blob/2.38/dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/log/Log4JLogConfigInitializer.java), that is, redirecting output from console to files.

From 2.36 to 2.38, audit log file `dhis-audit.log` is rotated [every day at midnight](https://github.com/dhis2/dhis2-core/blob/2.38/dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/log/Log4JLogConfigInitializer.java#L171).

An example of custom log4j2 configuration can be found [here](): it shows how to configure DHIS2 to save all logs into an external storage location, rotate them on a weekly basis and retain them for 30 days. Please read the [application logging section](#install_application_logging) on how to use it.

## Examples { #examples } 

This section demonstrates how to configure the audit system in `dhis.conf`.

To enable audit of create and update of metadata and tracker only:

```properties
audit.metadata = CREATE;UPDATE
audit.tracker = CREATE;UPDATE
audit.aggregate = DISABLED
```

To only audit tracker related objects create and delete:

```properties
audit.metadata = DISABLED
audit.tracker = CREATE;DELETE
audit.aggregate = DISABLED
```

To completely disable audit for all scopes:
```properties
audit.metadata = DISABLED
audit.tracker = DISABLED
audit.aggregate = DISABLED
```

We recommend keeping the audit trails into a file, as by default in version 2.38. For older versions, the following configuration saves the audit logs into the `$DHIS2_HOME/logs/dhis-audit.log` file:
```properties
audit.database = off
audit.logger = on
```

To store audit data into the database, add the following to your `dhis.conf` file (default up until version 2.38):
```properties
audit.database = on
audit.logger = off
```

To extract logs from the `audit` table, you can use [`dhis2-audit-data-extractor`](https://github.com/dhis2/dhis2-utils/tree/master/tools/dhis2-audit-data-extractor) from the system where DHIS2 is running:
```
$ python extract_audit.py extract
```

Please read the documentation for full details.

To parse entries from log file, you can use the python script as follow:
```
$ grep "auditType" dhis-audit.log | python extract_audit.py parse
```

Or use `jq` as follow:

```
$ grep "auditType" dhis-audit.log | jq -r .
```

To select events within a specific date, you can use `jq` as follow (in this example, we're selecting all events happened between January 2022 and end of June 2022):

```
$ grep "auditType" dhis-audit.log | jq -r '.[] | select ( (.datetime >="2022-01-01") and (.datetime <= "2022-06-30") )'
```

Same with `extract_audit`:
```
$ python3 extract_audit.py extract -m stdout -f JSON | jq -r '.[] | select ( (.datetime >="2022-01-01") and (.datetime <= "2022-06-30") )'
```

