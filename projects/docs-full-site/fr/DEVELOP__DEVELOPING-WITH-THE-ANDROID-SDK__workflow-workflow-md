---
edit_url: "https://github.com/dhis2/dhis2-android-sdk/edit/master/docs/content/developer/workflow.md" 
---
# Déroulement  { #workflow } 

<!--DHIS2-SECTION-ID:workflow-->

Actuellement, le SDK est principalement orienté vers la construction d'applications qui fonctionnent en mode hors ligne. En bref, le SDK maintient une instance de base de données locale qui est utilisée pour effectuer le travail localement (créer des formulaires, gérer des données, ...). À la demande du client, cette base de données locale est synchronisée avec le serveur.

Voici un exemple de flux de travail typique :

1. **Connexion**
2. **Synchronisation des métadonnées:** le SDK télécharge un sous-ensemble des métadonnées du serveur afin qu'elles puissent être utilisées à tout moment. La synchronisation des métadonnées dépend totalement de l'utilisateur (voir [Synchronisation](#metadata-synchronization) pour plus de détails).
3. **Télécharger les données:** si vous souhaitez que les données existantes soient disponibles dans l'appareil même lorsqu'il est hors ligne, vous pouvez télécharger et sauvegarder les données de suivi et les données agrégées existantes dans l'appareil.
4. **Faire le travail:** à ce stade, l'application est en mesure de créer les formulaires de saisie de données et d'afficher certaines données existantes. L'utilisateur peut ensuite modifier/supprimer/mettre à jour les données.
5. **Charger les données:** de temps en temps, le travail effectué dans l'instance locale de la base de données est envoyé sur le serveur.
6. **Synchroniser les métadonnées:** il est recommandé de synchroniser les métadonnées assez souvent pour détecter les modifications dans la configuration des métadonnées.

## Connexion / Déconnexion { #login_logout } 

<!--DHIS2-SECTION-ID:login_logout-->

Avant d'interagir avec le serveur, il est nécessaire de se connecter à l'instance DHIS 2. Actuellement, le SDK ne prend simultanément en charge qu'une seule paire "utilisateur - serveur". Cela signifie qu'un seul utilisateur peut être authentifié dans un seul serveur à la fois.

```java
d2.userModule().logIn(username, password, serverUrl)

d2.userModule().logOut()
```

Après une déconnexion, le SDK garde la trace du dernier utilisateur connecté afin de pouvoir différencier les utilisateurs récurrents des nouveaux utilisateurs. Il conserve également un hachage des informations d'identification de l'utilisateur afin d'authentifier l'utilisateur même en l'absence de connectivité. Ceci étant dit, la méthode de connexion sera :

- Si un utilisateur authentifié existe déjà : lancer une erreur.
- Sauf si *Connecté* :
  - Essayez la **connexion en ligne** : le SDK enverra le nom d'utilisateur et le mot de passe à l'API, qui déterminera s'ils sont corrects. En cas de succès :
        - Si aucune base de données n'existe : créer une nouvelle base de données avec la valeur de cryptage du serveur.
        - S'il existe une base de données pour une autre [Url du serveur, utilisateur], supprimez-la et créez une nouvelle base de données avec la valeur de cryptage du serveur. Les données non synchronisées de l'utilisateur précédemment connecté seront définitivement perdues.
        - S'il existe une base de données pour la paire [URL du serveur, utilisateur] actuelle, ouvrez la base de données et cryptez ou décryptez la base de données si l'état de cryptage a changé dans le serveur.
  - Si le compte de l'utilisateur a été désactivé dans le serveur : supprimez la base de données et générez une erreur.
- Sauf si *Déconnecté* :
  - Si la paire [ URL du serveur, utilisateur ] a été la dernière à être authentifiée :
    - Essayez la **connexion hors ligne** : le SDK vérifiera que les informations d'identification sont les mêmes que les dernières fournies, qui ont été précédemment validées par l'API.
  - Si la paire [ URL du serveur, utilisateur ] n'est pas la dernière à avoir été authentifiée : lancez une erreur

L'appel aux méthodes du module ou du référentiel avant une connexion réussie ou après une déconnexion entraînera des erreurs de type "Base de données non créée".

La méthode de déconnexion supprime les informations d'identification de l'utilisateur, ce qui nécessite une nouvelle connexion avant toute interaction avec le serveur. Les métadonnées et les données sont préservées, ce qui permet à l'utilisateur de se déconnecter ou de se connecter sans perdre aucune donnée.

## Synchronisation des métadonnées { #metadata_synchronization } 

<!--DHIS2-SECTION-ID:metadata_synchronization-->

La synchronisation des métadonnées est généralement la première étape après la connexion. Elle permet de récupérer et de conserver les métadonnées nécessaires à l'utilisateur actuel. Pour lancer la synchronisation des métadonnées, nous devons exécuter :

```java
d2.metadataModule().download();
```

Afin de préserver l'utilisation de la bande passante et l'espace de stockage, le SDK ne synchronise pas toutes les métadonnées du serveur, mais un sous-ensemble. Ce sous-ensemble est défini comme les métadonnées dont l'utilisateur a besoin pour effectuer des tâches de saisie de données : afficher des programmes et des ensembles de données, exécuter des règles de programme, évaluer des indicateurs de programme en ligne, etc.

Sur cette base, la synchronisation des métadonnées comprend les éléments suivants :

|   L'élément             |   La condition ou le champ d'application |
|-----------------------|-------------|
| L'information sur le système           | Tous |
| Paramètres du système       | Indicateur clé, Style clé |
| Paramètres de l'utilisateur         | KeyDbLocale, KeyUiLocale |
| Utilisateur                  | Uniquement les utilisateurs authentifiés |
| Rôle d'utilisateur              | Les rôles affectés aux utilisateurs authentifiés |
| Autorisations             | Les pouvoirs affectés aux utilisateurs authentifiés |
| Programme               | Les programmes auxquels l'utilisateur a (au moins) accès en lecture et qui sont affectés à une unité d'organisation visible par l'utilisateur |
| Types de relations     | Tous |
| Groupes d'options          | Uniquement si le serveu est supérieur à 2.29 |
| Ensemble de données               | Les ensembles se données auxquels l'utilisateur a (au moins) accès en lecture et qui sont affectés à une unité d'organisation visible par l'utilisateur |
| Règles de validation      | Règles de validation associées aux ensembles de données |
| Indicators            | Indcateurs affectés aux ensembles de données téléchargés |
| Unité d'organisation      | Unités d'organisation dans la portée de la SAISIE ou de la RECHERCHE (y compris les descendants) |
| Groupe d'Unité d'Organisation | Groupes affectés aux unités d'organisation téléchargées |
| NIveau d'unité d'organisation | Tous |
| Constante              | Tous |
| Module SMS des métadonnées   | Uniquement si le module SMS est activé |

Dans le cas des programmes et des ensembles de données, la synchronisation des métadonnées inclut toutes les métadonnées qui leur sont liées : étapes, sections, éléments de données, options, catégories, etc. Les éléments qui ne sont pas liés à un programme ou à un ensemble de données ne sont pas inclus.

### Les configurations corrompues { #corrupted-configurations } 

Cette synchronisation partielle des métadonnées peut entraîner des problèmes de mauvaise configuration au niveau du serveur. Par exemple, une variable de règle de programme pointant vers un élément de données qui n'appartient plus au programme. En raison de l'utilisation de contraintes au niveau de la base de données, cette mauvaise configuration apparaîtra comme une erreur de Clé Étrangère.

Le SDK ne fait pas échouer la synchronisation, mais il stocke les erreurs dans un tableau à des fins d'inspection. Ces erreurs sont accessibles via :

```java
d2.maintenanceModule().foreignKeyViolations()
```

## États des données { #data_states } 

<!--DHIS2-SECTION-ID:data_states-->

Les objets de données ont une propriété `état` en lecture uniquement qui indique l'état actuel de l'objet en termes de synchronisation avec le serveur. Cet état est maintenu par le SDK.

Les statuts possible sont:

- **SYNCRONISÉ**. L'élément est synchronisé avec le serveur. Il n'y a pas de changement local pour cette valeur.
- **TO_POST** (à affcher). Les données créées localement qui n'existent pas encore dans le serveur.
- **TO_UPDATE** (à mettre à jour). Les données modifiées localement qui existent dans le serveur.
- **TÉLÉCHARGEMENT**. Les données sont en train d'être téléchargées. Si elles sont modifiées avant de recevoir une réponse du serveur, leur état revient à `METTRE À_JOUR`. Lorsque la réponse du serveur arrive, elles ne passent pas à `SYNCRONISÉ`, mais restent dans `METRE À_JOUR` pour indiquer qu'il y a des changements locaux.
- **ENVOYÉ_PAR_SMS**. Les données sont envoyées par SMS et il n'y a pas encore de réponse du serveur. Certains serveurs n'ont pas la capacité d'envoyer une réponse. Cet état signifie donc que les données ont été envoyées, mais nous ne savons pas si elles ont été correctement importées dans le serveur ou non.
- **SYNCHRONISÉ_PAR_SMS**. Les données sont envoyées par sms et le serveur a répondu avec succès.
- **ERREUR**. Les données pour lesquelles une erreur a été signalée par le serveur après le dernier téléchargement.
- **AVERTISSEMENT**. Les données pour lesquelles un avertissement a été émis par le serveur après le dernier téléchargement.

De plus, dans `l'instance d'entité suivie`, nous pourrions avoir :

- **RELATION**. Cette instance d'entité suivie a été téléchargée dans le seul but de remplir une relation avec une autre TEI. Cette `RELATION` de la TEI ne dispose que des informations de base (uid, type, etc.) et de la liste des attributs d'entité suivie afin de pouvoir imprimer des informations significatives sur la relation. D'autres données telles que les inscriptions, les événements ou les relations ne sont pas téléchargées pour cette TEI. De même, cette TEI ne peut pas être modifiée ou téléchargée sur le serveur.

## Données de suivi { #tracker_data } 

<!--DHIS2-SECTION-ID:tracker_data-->

### Téléchargement des données de suivi { #tracker-data-download } 

> **Important**
>
> Voir la section [ Paramètres de l'application ](#settings_app) pour savoir comment cette application peut être utilisée pour contrôler les paramètres de synchronisation.

Par défaut, le SDK ne télécharge que les instances d'entités suivies et les événements 
situés dans la fenêtre de saisie de l'utilisateur, mais il est également possible de 
télécharger les instances d'entités suivies dans la fenêtre de recherche.

Le module "entité suivie" contient le module
`TrackedEntityInstanceDownloader` (téléchargeur d'instances d'entités suivies). Le téléchargeur suit un modèle de construction 
ui permet de télécharger des instances d'entités suivies en les filtrant par 
**différents paramètres** et en définissant certaines **limites**. Le même 
comportement peut être trouvé dans le module d'événement pour les événements.

Le téléchargeur suit le dernier téléchargement réussi afin d'éviter 
de télécharger des données non modifiées. Il utilise la pagination avec une stratégie du 
meilleur effort : si une page ne parvient pas à être téléchargée ou conservée, elle est 
ignorée et le téléchargement se poursuit avec les pages qui suivent.

Voici un exemple de son utilisation.

```java
d2.trackedEntityModule().trackedEntityInstanceDownloader()
    .[filters]
    .[limits]
    .download()
```

```java
d2.eventModule().eventDownloader()
    .[filters]
    .[limits]
    .download()
```

Actuellement, il est possible de spécifier les filtres suivants :

- `byProgramUid()` (par Uid de programme). Filtre par l'identifiant du programme et télécharge les objets
  non synchronisés dans le programme.
- `byUid()` (par Uid). Filtre en fonction de l'uid de l'instance de l'entité suivie et télécharge un 
  objet unique. Ce filtre peut être utilisé pour télécharger les instances d'entités 
  suivies trouvées dans le champ de recherche. (Uniquement pour les instances d'entités 
  suivies).

Le téléchargeur permet également de limiter le nombre d'objets téléchargés.
Ces limites peuvent également être combinées entre elles.

- `limit()`. Limite le nombre maximum d'objets à télécharger.
- `limitByProgram()` (limite par programme). Appliquez la limite établie à chaque 
  programme. Le nombre d'objets qui sera téléchargé sera celui 
  obtenu en multipliant la limite fixée par le nombre de programmes utilisateurs.
- `limitByOrgunit()` (limite par unité d'organisation). Prenez la limite établie et appliquez-la à chaque 
  unité d'organisation. Le nombre d'objets qui sera téléchargé sera 
  celui obtenu en multipliant la limite fixée par le nombre d'utilisateurs.
  sélectionnées manuellement.

L'extrait de code suivant montre un exemple d'utilisation de la fonction
TrackedEntityInstanceDownloader.

```java
d2.trackedEntityModule().trackedEntityInstanceDownloader()
    .byProgramUid("program-uid")
    .limitByOrgunit(true)
    .limitByProgram(true)
    .limit(50)
    .download()
```

De plus, si vous voulez que les images associées aux valeurs de données `Image` puissent être téléchargées dans l'appareil, vous devez les télécharger. Voir la section [*Gestion des ressources de fichiers*](#dealing-with-fileresources) pour plus de détails.

### Recherche des données Tracker { #tracker-data-search } 

DHIS2 dispose d'une fonctionnalité qui permet de filtrer les instances d'entités suivies (TrackedEntityInstances) par des propriétés 
connexes, telles que des attributs, des unités d'organisation, des programmes ou des dates 
d'inscription.Le Sdk fournit le `TrackedEntityInstanceQueryCollectionRepository`
avec des méthodes qui permettent le téléchargement d'instances d'entités suivies
dans le champ de recherche. Il se trouve dans le module d'instances d'entités suivies.

La requête d'instances d'entités suivies est un outil puissant qui suit un 
modèle de conception et permet le téléchargement d'instances d'entités suivies
en les filtrant par **différents paramètres**.

```java
d2.trackedEntityModule().trackedEntityInstanceQuery()
    .[repository mode]
    .[filters]
    .get()
```

La source à partir de laquelle les TEI sont récupérés est définie par le **mode de dépôt**.
Voici les différents modes de dépôt disponibles :

- `onlineOnly()` (en ligne uniquement). Seules les instances d'entités suivies provenant du serveur sont 
  renvoyées dans la liste. Une connexion Internet est nécessaire pour utiliser ce mode.
- `offlineOnly()` (hors ligne uniquement). Seules les instances d'entités suivies provenant de la base de données
  locale sont renvoyées dans la liste.
- `onlineFirst()` (en ligne premièrement). Les instances d'entités suivies provenant du serveur sont 
  renvoyées en premier lieu. Lorsqu'il n'y a plus de résultats en ligne, la recherche 
  se poursuit avec les instances d'entités suivies de la base de données locale. Une connexion 
  Internet est nécessaire pour utiliser ce mode.
- `offlineFirst()` (hors ligne premièrement). Les instances d'entités suivies provenant de la base de données locale 
  sont renvoyées en premier lieu. Lorsqu'il n'y a plus de résultats, la recherche se poursuit 
  avec les instances d'entités suivies provenant du serveur. Cette méthode peut 
  accélérer le chargement initial. Une connexion Internet est nécessaire pour utiliser ce
  mode.

Ce référentiel suit la même syntaxe que les autres référentiels.
En outre, le référentiel propose différentes stratégies pour récupérer les données :

- `byAttribute()` (par attribut). Cette méthode ajoute un filtre *attribut* à la requête.
  Si cette méthode est invoquée plusieurs fois, les conditions seront accompagnées d'un « connecteur AND ». 
  Par exemple :

  ```java
  d2.trackedEntityModule().trackedEntityInstanceQuery()
      .byAttribute("uid1").eq("value1")
      .byAttribute("uid2").eq("value2")
      .get()
  ```

  Cela signifie que l'instance doit avoir l'attribut `uid1` avec la valeur
  `value1` **ET** l'attribut `uid2` avec la valeur `value2`.

- `byFilter()` (par filtre). Cette méthode ajoute un *filtre* à la requête. Si cette
  méthode est appelée plusieurs fois, les conditions sont jointes à l'aide d'un « connecteur AND ».
  Par exemple :

  ```java
  d2.trackedEntityModule().trackedEntityInstanceQuery()
      .byFilter("uid1").eq("value1")
      .byFilter("uid2").eq("value2")
      .get()
  ```

  Cela signifie que l'instance doit avoir l'attribut `uid1` avec la valeur
  `value1` **ET** l'attribut `uid2` avec la valeur `value2`.

- `byQuery()` (par requête). Recherche les instances d'entités suivies avec **tout** attribut 
  correspondant à la requête.
- `byProgram()` (par programme). Filtre par programme d'inscription. Un seul programme peut être 
  spécifié.
- `byOrgUnits()` (par unités d'organisation). Filtre par unités d'organisation de l'instance d'entité suivie.
  Plus d'une unité d'organisation peut être spécifié.
- `byOrgUnitMode()` (par mode d'unité d'organisation). Définit le mode de l'unité d'organisation. Les modes possibles 
  sont les suivants :
  - **SÉLECTIONNÉ**. Unités spécifiées uniquement.
  - **SUBORDONNÉES**. Les subordonnées immédiats des unités spécifiées, y compris 
    les unités spécifiées.
  - **DESCENDANTS**. Toutes les unités de la sous-hiérarchie des unités spécifiées, 
    y compris les unités spécifiées.
  - **ACCESSIBLE**. Toutes les unités d'organisation accessibles par l'utilisateur
    (champ de recherche).
  - **TOUS**. Toutes les unités du système. Nécessite une autorité.
- `byProgramStartDate()` (par date de début de programme). Définit une date de début d'inscription. Elle ne 
  s'applique que si un programme a été spécifié.
- `byProgramEndDate()` (par date de fin de programme). Définit une date de fin d'inscription. Elle ne s'applique 
  que si un programme a été spécifié.
- `byTrackedEntityType()` (par type d'entité suivie). Filtre par type d'entité suivie. Un seul type 
  peut être spécifié.
- `byIncludeDeleted()` (par l'inclusion de l'entité supprimée). Inclure ou non les instances d'entités suivies 
  supprimées. Actuellement, ce filtre ne s'applique qu'aux instances **hors ligne**.
  instances.
- `byStates()` (par statut). Filtre par état de synchronisation. L'utilisation de ce filtre force le 
  mode **hors ligne uniquement**.

Exemple:

```java
d2.trackedEntityModule().trackedEntityInstanceQuery()
                .byOrgUnits().eq("orgunitUid")
                .byOrgUnitMode().eq(OrganisationUnitMode.DESCENDANTS)
                .byProgram().eq("programUid")
                .byAttribute("attributeUid").like("value")
                .offlineFirst()
```

> **Important**
>
> Les instances d'entités suivies récupérées à l'aide de ce référentiel ne sont pas conservées dans la base de données. Il est possible
de les télécharger complètement en utilisant le filtre `byUid()` du `TrackedEntityInstanceDownloader` (téléchargeur d'instances d'entités suivies) dans le module d'instances d'entités suivies.

[//]: # (Include glass protected download)

### Écriture des données du tracker { #tracker-data-write } 

En général, il y a deux cas différents pour gérer la création/édition/suppression de données : le cas où l'objet est identifiable (c'est-à-dire qu'il a une propriété `uid`) et le cas où l'objet n'est pas identifiable.

**Objets identifiables** (Instance d'entité suivie, Inscription, Événement). Ces référentiels ont une méthode `uid()` qui vous donne accès aux méthodes d'édition pour un seul objet. Si l'objet n'existe pas encore, il faut d'abord le créer. Un flux de travail typique pour créer/modifier un objet est le suivant :

- Utilisez la classe `créer une projection` pour ajouter une nouvelle instance dans le référentiel.
- Enregistrer l'uid renvoyé par cette méthode.
- Utilisez la méthode `uid()` avec l'uid précédent pour accéder aux méthodes d'édition.

Et dans le code, cela ressemblerait à ce qui suit :

```java
String eventUid = d2.eventModule().events().add(
    EventCreateProjection.create("enrollment", "program", "programStage", "orgUnit", "attCombo"));

d2.eventModule().events().uid(eventUid).setStatus(COMPLETED);
```

**Objets non identifiables** (Valeur de l'Attribut d'Entité Suivie, Valeur de Donnée d'Entité Suivie). Ces référentiels disposent d'une méthode `value()` qui permet d'accéder aux méthodes d'édition d'un seul objet. Les paramètres acceptés par cette méthode sont ceux qui identifient sans ambiguïté une valeur.

Par exemple, l'écriture d'une valeur de données d'entité suivie serait la suivante :

```java
d2.trackedEntityModule().trackedEntityDataValues().value(eventUid, dataElementid).set(“5”);
```

Les valeurs de données de type `Image` impliquent une étape supplémentaire pour créer/mettre à jour/lire la ressource fichier associée. Plus de détails dans la section [*Gestion des ressources de fichiers*](#dealing-with-fileresources) ci-dessous.

### Téléchargement des données Tracker { #tracker-data-upload } 

Les référentiels instance d'entité suivie et événement ont une méthode `upload()` (télécharger) pour respectivement télécharger des données d'entité suivie et des données d'événement (sans enregistrement). Si la portée du référentiel a été réduite par des méthodes de filtrage, seuls les objets filtrés seront téléchargés.

```java
d2.( trackedEntityModule() | eventModule() )
    .[ filters ]
    .upload();
```

Les données dont l'état est `ERROR` (erreur) ou `WARNING` (avertissement) ne peuvent pas être téléchargées. Il est nécessaire de résoudre les erreurs avant de tenter un nouveau téléchargement : cela signifie qu'il faut modifier les données qui posent problème, ce qui ramène leur état à `TO_UPDATE` (à mettre à jour).

#### Erreurs du tracker { #tracker-conflicts } 

La réponse du serveur est analysée pour s'assurer que les données ont été correctement téléchargées sur le serveur. Si la réponse du serveur contient des erreurs d'importation, celles-ci sont stockées dans la base de données, afin que l'application puisse les vérifier et prendre les mesures nécessaires pour les résoudre.

```java
d2.importModule().trackerImportConflicts()
```

Les erreurs liés à une instance d'entité suivie, à une inscription ou à un événement sont automatiquement supprimées après un téléchargement réussi de l'objet.

Le SDK tente d'identifier l'élément de données ou l'attribut qui présente une erreur en analysant la réponse du serveur. Si c'est le cas, il enregistre également la valeur de l'élément lorsque l'erreur s'est produite afin que l'application puisse mettre en évidence l'élément dans le formulaire lorsque la valeur n'a pas encore été fixée.

### Données tracker : valeurs réservées { #tracker-data-reserved-values } 

Les attributs d'entités suivies configurés comme **uniques** et **générés automatiquement** sont générés par le serveur selon un modèle défini par l'utilisateur. Ces valeurs ne peuvent être générées que par le serveur, ce qui signifie que nous devons les mettre de côté à l'avance afin de pouvoir les utiliser lorsque nous travaillons hors ligne.

L'application est responsable de la réservation des valeurs générées avant la mise hors ligne. Cette opération peut être déclenchée par :

```java
// Réserver des valeurs pour tous les attributs d'entités suivies uniques et générés automatiquement.
d2.trackedEntityModule().reservedValueManager().downloadAllReservedValues(numValuesToFillUp)

// Réserver des valeurs pour un attribut d'entité suivie particulier.
d2.trackedEntityModule().reservedValueManager().downloadReservedValues("attributeUid", numValuesToFillUp)
```

En fonction de la durée pendant laquelle l'application prévoit d'être hors ligne, elle peut décider de la quantité de valeurs à stocker. Si le modèle d'attribut dépend du code de l'unité d'organisation, le SDK va stocker des valeurs pour toutes les unités d'organisation concernées. Plus de détails sur la logique dans la Javadoc.

Les valeurs stockées peuvent être obtenues par :

```java
d2.trackedEntityModule().reservedValueManager().getValue("attributeUid", "orgunitUid")
```

### Données tracker : relations { #tracker-data-relationships } 

Actuellement, le SDK ne prend en charge que les relations de TEI à TEI. On y accède en utilisant le module de relations.

Interroger les relations associées à une TEI.

```java
d2.relationshipModule().relationships().getByItem(
    RelationshipHelper.teiItem("trackedEntityInstanceUid")
)
```

Dans le même module, vous pouvez créer de nouvelles relations à l'aide de cette méthode :

```java
Relationship relationship = RelationshipHelper.teiToTeiRelationship("fromTEIUid", "toTEIUid", "relationshipTypeUid");

d2.relationshipModule().relationships().add(relationship);
```

Si l'instance d'entité suivie n'existe pas encore et que des valeurs d'attributs doivent être héritées, vous pouvez utiliser la méthode suivante pour hériter des valeurs d'attributs d'une TEI à l'autre dans le contexte d'un certain programme. Seuls les attributs marqués comme `inherit` seront hérités.

```java
d2.trackedEntityModule().trackedEntityInstanceService()
    .inheritAttributes("fromTeiUid", "toTeiUid", "programUid");
```

## Données agrégées { #aggregated_data } 

<!--DHIS2-SECTION-ID:aggregated_data-->

### Téléchargement de données agrégées { #aggregated-data-download } 

> **Important**
>
> Voir la section [ Paramètres de l'application ](#settings_app) pour savoir comment cette application peut être utilisée pour contrôler les paramètres de synchronisation.

```java
d2.aggregatedModule().data().download()
```

Par défaut, le SDK télécharge les **valeurs de données agrégées**, **ensemble de données
les valeurs d'enregistrement terminés** et les **approbations** correspondant à :

- **Ensembles de données** : tous les ensembles de données disponibles (ceux auxquels l'utilisateur a au moins 
  accès en lecture).
- **Unités d'organisation** : champ de saisie.
- **Périodes** : toutes les périodes disponibles, c'est-à-dire au moins :
  - Jours : 60 derniers jours.
  - Semaines : 13 dernières semaines (y compris les variantes du jour de départ).
  - Bihebdomadaire : les 13 dernières quinzaines.
  - Mensuel : 12 derniers mois.
  - Bimestriel : les 6 derniers bimestres.
  - Trimestres : 5 derniers trimestres.
  - Semestriel : 5 derniers semestres (à compter de janvier et d'avril).
  - Annuel : les 5 dernières années (y compris les variantes de l'exercice financier).

  En outre, si un ensemble de données permet la saisie de données pour des **périodes futures**,
  le Sdk téléchargera les données pour ces périodes ouvertes et les stockera. 

Le Sdk garde également la trace du dernier téléchargement réussi afin 
d'éviter de télécharger des données non modifiées du serveur.

Dans le téléchargement des **approbations de données**, les identifiants de combinaison d'options de flux de travail 
et d'attributs seront pris en compte en plus des 
unités d'organisation et des périodes. Les différents statuts possibles pour l'approbation des données 
sont les suivants :

- `UNAPPROVABLE` (non approuvable). L'approbation des données ne s'applique pas à cette sélection. (Les données
  ne sont ni *approuvées* ni *non approuvées*).
- `UNAPPROVED_WAITING` (EN ATTENTE NON APPROUVÉE). Les données pourraient être approuvées pour cette sélection, mais 
  elles attendent une approbation de niveau inférieur avant d'être prêtes à être
  approuvées.
- `UNAPPROVED_ELSEWHERE` (NON APPROUVÉ AILLEURS). Les données ne sont pas approuvées et sont en attente 
  d'approbation ailleurs (elles ne peuvent pas être approuvées ici).
- `UNAPPROVED_READY` (NON APPROUVÉ, PRÊT). Les données ne sont pas approuvées et sont prêtes à être approuvées 
  pour cette sélection.
- `UNAPPROVED_ABOVE` (NON APPROUVÉ CI-DESSUS). Les données ne sont pas approuvées ci-dessus.
- `APPROVED_HERE` (APPROUVÉ ICI). Les données sont approuvées et ont été approuvées ici (elles peuvent donc être 
  désapprouvées ici).
- `APPROVED_ELSEWHERE` (APPROUVÉ AILLEURS). Les données sont approuvées, mais n'ont pas été approuvées ici (elles ne 
  peuvent donc pas être désapprouvées ici).
- `APPROVED_ABOVE` (APPROUVÉ CI-DESSUS). Les données sont approuvées ci-dessus.
- `ACCEPTED_HERE` (ACCEPTÉ ICI). Les données sont approuvées et acceptées ici (elles peuvent donc être
  non approuvées ici).
- `ACCEPTED_ELSEWHERE` (ACCEPTÉ AILLEURS). Les données sont approuvées et acceptées, mais ailleurs.

Les approbations de données ne sont téléchargées que pour les versions supérieures à 2.29.

### Rédaction de données agrégées { #aggregated-data-write } 

#### Périodes { #periods }

Afin de rédiger des valeurs de données ou de terminer l'enregistrement d'un ensemble de données, il est obligatoire de fournir un identifiant de période. Les périodes sont stockées dans une table de la base de données et 
les identifiants de période fournis doivent être déjà présents dans cette table, sinon une erreur de clé étrangère sera levée. Pour éviter cette situation, le `PeriodHelper` (assistant de période) est 
exposé à l'intérieur du `PeriodModule` (module de période). Avant d'ajouter des données agrégées liées à un dataSet (ensemble de données), la méthode suivante doit être appelée :

```java
Single<List<Period>> periods = d2.periodModule().periodHelper().getPeriodsForDataSet("dataSetUid");
```

Cela permettra de s'assurer que :
1. L'application choisira l'une des périodes données, évitant ainsi les périodes mal formées ou erronées.
2. L'application ne pourra choisir que les périodes futures définies par le champ `DataSet.openFuturePeriods`.
3. L'application ne pourra sélectionner que les périodes passées définies sur la base des limites déclarées dans la section Téléchargement de données agrégées.

#### Valeur des données { #data-value } 

DataValueCollectionRepository possède une méthode `value()` qui donne accès aux méthodes d'édition. Les paramètres acceptés par cette méthode sont ceux qui identifient sans ambiguïté une valeur.

```java
DataValueObjectRepository valueRepository = d2.dataValueModule().dataValues()
    .value("periodId", "orgunitId", "dataElementId", "categoryOptionComboId", "attributeOptionComboId");

valueRepository.set("value")
```

#### Enregistrement terminé de l'ensemble des données { #data-set-complete-registration } 

Le Sdk fournit, dans le module des ensembles de données, un référentiel de collecte pour 
les enregistrements terminés d'ensembles de données. Ce référentiel contient des méthodes pour ajouter
de nouveaux enregistrements terminés et de les supprimer.

Pour ajouter un nouvel ensemble de données à l'enregistrement terminé, il existe une méthode `add()`
disponible :

```java
d2.dataSetModule().dataSetCompleteRegistrations()
    .add(dataSetCompleteRegistration);
```

Pour les supprimer de la base de données, le référentiel dispose d'une méthode `value()` (valeur) 
qui donne accès aux méthodes de suppression (`delete()` (supprimer) et `deleteIfExist()` (supprimer s'il existe)). Les 
paramètres acceptés par cette méthode sont ceux qui identifient sans ambiguïté que l'enregistrement de l'ensemble de données est 
terminé.

```java
d2.dataSetModule().dataSetCompleteRegistrations()
    .value("periodId", "orgunitId", "dataSetUid","attributeOptionCombo")
    .delete()
```

### Téléchargement de données agrégées { #aggregated-data-upload } 

Le DataValueCollectionRepository (référentiel de collecte des valeurs de données) dispose d'une méthode `upload()` pour télécharger des valeurs de données agrégées.

```java
d2.dataValueModule().dataValues().upload();
```

### Les instances d'ensembles de données  { #dataset-instances } 

Dans le SDK, une instance d'ensemble de données est une représentation pratique des données agrégées existantes. Une instance d'ensemble de données représente une combinaison unique d'ensemble de données, de période, d'unité d'organisation et de combinaison d'options d'attributs, et comprend des informations supplémentaires telles que l'état de synchronisation, le nombre de valeurs ou le nom d'affichage de certaines propriétés.

```java
d2.dataSetModule().dataSetInstances()
    .[ filters ]
    .get()

// Par exemple
d2.dataSetModule().dataSetInstances()
    .byDataSetUid().eq("datasetUid")
    .byOrganisationUnitUid().eq("orgunitUid")
    .byPeriod().in("201901", "201902")
    .get() ;
```

Si vous n'avez besoin que d'une vue d'ensemble du statut des données agrégées, vous pouvez utiliser le référentiel `DataSetInstanceSummary` (résumé de l'instance de l'ensemble de données). Il accepte les mêmes filtres et retourne un nombre de `DataSetInstance` (instances d'ensemble de données) pour chaque combinaison.

## Traitement des ressources de fichiers { #file_resources } 

<!--DHIS2-SECTION-ID:file_resources-->

Le SDK propose un module (le `FileResourceModule`) et deux assistants (le `FileResourceDirectoryHelper` et le `FileResizerHelper`) qui permettent de travailler avec des fichiers.

### Module de ressources des fichiers { #file-resources-module } 

Ce module contient des méthodes pour télécharger les ressources de fichiers associées aux données téléchargées et au référentiel de la collection de ressources de fichiers de la base de données.

- **Téléchargement des ressources de fichiers**.
La méthode `download()` recherche les valeurs d'attributs d'entités suivies et les valeurs de données d'entités suivies dont le type d'attribut d'entité suivie et le type d'élément de données sont de type image et dont la ressource de fichier n'a pas été téléchargée précédemment, et la méthode télécharge les ressources de fichier associées.

  ```java
  d2.fileResourceModule().download();
  ```

  Après avoir téléchargé les fichiers, vous pouvez obtenir les différentes ressources de fichiers téléchargées à travers le référentiel.

- **Référentiel de collecte de ressources de fichiers**.
Grâce à ce référentiel, il est possible de lancer des requêtes de fichiers, d'en enregistrer de nouveaux et de les télécharger sur le serveur. 

  - **Get**. Il se comporte de la même manière que n'importe quel autre dépôt Sdk. Il permet d'obtenir des collections en appliquant différents filtres si nécessaire.

    ```java
    d2.fileResourceModule().fileResources()
        .[ filters ]
        .get()
    ```

  - **Add**. Pour sauvegarder un fichier, vous devez l'ajouter en utilisant la méthode `add()` du référentiel en fournissant un objet de type `File`. La méthode `add()` retournera l'uid qui a été généré lors de l'ajout du fichier. Cet uid doit être utilisé pour mettre à jour la valeur de l'attribut de l'entité suivie ou la valeur des données de l'entité suivie associée à la ressource fichier.

    ```java
    d2.fileResourceModule().fileResources()
        .add(file); // Single<String> The fileResource uid
    ```

  - **Upload**. L'appel à la méthode `upload()` déclenche une série d'appels successifs au cours desquels tous les fichiers non synchronisés sont envoyés au serveur. Après chaque téléchargement, la réponse du serveur sera traitée. Le serveur fournira un nouvel uid à la ressource fichier et le Sdk renommera automatiquement le fichier et mettra à jour l'objet `FileResource` et les valeurs d'attribut de l'entité suivie ou les valeurs de données de l'entité suivie qui lui sont associées.

    ```java
    d2.fileResourceModule().fileResources()
        .upload()
    ```

### Assistant de redimensionnement de fichiers { #file-resizer-helper } 

Le Sdk fournit une assistance pour redimensionner les fichiers images (`FileResizerHelper`). Cette aide contient une méthode `resizeFile()` qui accepte le fichier que vous souhaitez réduire et la dimension à laquelle vous souhaitez le réduire.

Les dimensions possibles sont indiquées dans le tableau suivant.

| Petit | Moyen | Grand  |
|-------|--------|--------|
| 256px | 512px  | 1024px |

L'assistant prend le fichier, mesure la hauteur et la largeur de l'image, détermine lequel des deux côtés est le plus grand et réduit le plus grand des côtés à la dimension donnée et l'autre côté est mis à l'échelle à sa taille proportionnelle. **La mise à l'échelle de l'image conserve toujours les proportions**.

Dans le cas où la dernière image est plus petite que la dimension à laquelle vous souhaitez la redimensionner, le même fichier sera renvoyé sans être modifié.

La méthode `resizeFile()` renvoie un nouveau fichier situé dans le même répertoire parent que le fichier à redimensionner sous le nom `resized-DIMENSION-` + le nom du fichier sans redimensionnement.

### Assistant de répertoire des ressources de fichiers { #file-resource-directory-helper } 

La classe d'aide `FileResourceDirectoryHelper` ( Assistant de répertoire des ressources de fichiers ) fournit deux méthodes.

- `getFileResourceDirectory()`. Cette méthode renvoie un objet `Fichier` dont le chemin pointe vers le répertoire `sdk_resources` (répertoire des ressources du Sdk) où le Sdk va sauvegarder les fichiers associés aux ressources du fichier.

- `getFileCacheResourceDirectory()`. Cette méthode renvoie un objet `File` (fichier) dont le chemin pointe vers le répertoire `sdk_cache_resources` (ressources de cache sdk). Il s'agit de l'endroit où sont stockés les fichiers volatils, tels que les photos de l'appareil photo ou les images à redimensionner. Étant donné que le répertoire est contenu dans le répertoire cache, Android peut supprimer automatiquement les fichiers du répertoire cache lorsque le système est sur le point de manquer de mémoire. Les applications tierces peuvent également supprimer des fichiers du répertoire cache. L'utilisateur peut même effacer manuellement le cache à partir des paramètres. Cependant, le fait que le cache puisse être vidé par les méthodes expliquées ci-dessus ne signifie pas que le cache sera automatiquement vidé ; par conséquent, le cache devra être nettoyé de temps en temps de manière proactive.


