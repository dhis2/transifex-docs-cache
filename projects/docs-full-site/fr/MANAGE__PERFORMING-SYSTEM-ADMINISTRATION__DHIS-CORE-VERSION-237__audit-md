---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.37/src/sysadmin/audit.md"
revision_date: '2021-12-02'
tags:
- DHIS core version 2.37
- Gestion
---

# Audit { #audit }

## Introduction { #introduction } 

DHIS2 prend en charge un nouveau service d'audit basé sur _Apache ActiveMQ Artemis_. Artemis est utilisé comme système de messagerie asynchrone par DHIS2.

Une fois qu'une entité est enregistrée dans la base de données, un message d'audit sera généré et envoyé au service utilisateur de la messagerie Artemis. Le message sera ensuite traité dans un autre fil de discussion.

Les journaux d'audit peuvent être récupérés à partir de la base de données de DHIS2. Actuellement, aucun point d'extrémité d'une interface utilisateur ou d'une API n’est disponible pour récupérer les entrées d’audit.


## Table d'audit unique { #audit_table }

All audit entries will be saved into one single table named `audit`

| Colonne     | Type                        | Description |   |
|------------|-----------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---|
| Identifiant de l'audit    | entier                     | Clé primaire. |   |
| type d'audit  | texte                        | LIRE, CRÉER, METTRE À JOUR, SUPPRIMER, RECHERCHER                                                                                                                  |   |
| champ d'application de l'audit | texte                        | MÉTADONNÉES, AGRÉGÉ, TRACKER                                                                                                                        |   |
| classe      | texte                        | Nom de classe Java de l’entité d’audit.                                                                                                                     |   |
| les attributs | jsonb                       | Une chaîne JSON avec les attributs de l'objet audité. Exemple : `{"valueType": "TEXT", "categoryCombo": "SWQW313FQY", "domainType": "TRACKER"}`. |   |
| données       | bytea                       | Chaîne JSON compressée de l'entité d'audit au format "tableau d'octets" (non lisible par l'homme).                                                                                             |   |
| créé à  | horodatage sans fuseau horaire | Temps de création. |   |
| créé par  | texte                        | Nom d'utilisateur de l'utilisateur effectuant l'opération auditée. |   |
| uid        | texte                        | L'UID de l'objet audité. |   |
| code       | texte                        | Le code de l'objet audité. |   |

Le service d'audit utilise deux nouveaux concepts : *Champ d'application de l'audit* et *Type d'audit*.

## Champ d'application de l'audit { #audit_scope }

Un champ d'application d'audit est une zone logique de l'application qui peut être auditée. Il existe actuellement trois champs d'application d'audit.

| **Portée** | Clé       | Objets audités                                              |
| --------- | --------- | ------------------------------------------------------------ |
| Tracker   | tracker   | Instance d'entité suivie, Valeur d'attribut d'entité suivie, inscription, Événement. |
| Métadonnées  | métadonnées  | Tous les objets de métadonnées (par exemple, les éléments de données, les unités d'organisation). |
| Agrégat | agrégation | Valeur de données agrégée.                                        |


## Type d'audit { #audit_type }

Un type d'audit est une action qui déclenche une opération d'audit. Actuellement, nous prenons en charge les quatre types suivants.

| Nom     | Clé      | Description         |
| -------- | -------- | ------------------- |
| Lire     | LIRE     | L'objet a été lu.    |
| Créer   | CRÉER   | L'objet a été créé. |
| Mise à jour   | METTRE À JOUR   | L'objet a été mis à jour. |
| Supprimer   | SUPPRIMER   | L'objet a été supprimé. |
| Désactivé | DÉSACTIVÉ | Désactiver l'audit.      |

> **Attention**
>
> Le type d'audit LIRE peut générer beaucoup de données dans la base de données et avoir un impact sur les performances.

## Setup { #audit_configuration } 

The audit system is enabled by default for the following scopes and types.

Scopes:

- `CREATE`
- `UPDATE`
- `DELETE`

Types:

- `METADATA`
- `TRACKER`
- `AGGREGATE`

This means that **no action is required** to enable the default audit system. The default setting is equivalent to the following `dhis.conf` configuration.

```properties
audit.metadata = CREATE;UPDATE;DELETE
audit.tracker = CREATE;UPDATE;DELETE
audit.aggregate = CREATE;UPDATE;DELETE
```

The audit can be configured using the _audit matrix_. The audit matrix represents the valid combinations of scopes and types, and is defined with the following properties in the `dhis.conf` configuration file. Each property accepts a semicolon (`;`) delimited list of audit types.

* `audit.metadata`
* `audit.tracker`
* `audit.aggregate`

## Examples { #examples } 

This section demonstrates how to configure the audit system in `dhis.conf`.

To enable audit of create and update of metadata and tracker only:

```properties
audit.metadata = CREATE;UPDATE
audit.tracker = CREATE;UPDATE
audit.aggregate = DISABLED
```

To only audit tracker related objects create and delete:

```properties
audit.metadata = DISABLED
audit.tracker = CREATE;DELETE
audit.aggregate = DISABLED
```

To completely disable audit for all scopes:
```properties
audit.metadata = DISABLED
audit.tracker = DISABLED
audit.aggregate = DISABLED
```

