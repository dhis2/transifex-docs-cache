---
edit_url: "https://github.com/dhis2-metadata/AH_EBS/blob/master/docs/ah_ebs-installation.md"
revision_date: '2024-05-31'
tags:
- Implémentation
---

# Animal Health - Event Based Surveillance Tracker Installation Guide { #ah-ebs-installation }

Package Version 1.0.0

Langue par défaut du système : anglais

## Installation { #installation }

L'installation du module se fait en plusieurs étapes :

1. [Préparation](#preparing-the-metadata-file) du fichier de métadonnées.
2. [Importer](#importing-metadata) le fichier de métadonnées DHIS2.
3. [Configuration](#configuration) des métadonnées importées.
4. [Adaptation](#adapting-the-tracker-program) du programme après son importation

It is recommended to first read through each section of the installation guide before starting the installation and configuration process in DHIS2. Identify applicable sections depending on the type of your import:
The steps outlined in this document should be tested in a test/staging DHIS2 instance and only then applied to a production environment.

## Conditions requises { #requirements } 

Pour installer le module, il faut nécessairement un compte d'utilisateur administrateur sur DHIS2. La procédure décrite dans le présent document doit être testée dans un environnement de test et de simulation avant d'être exécutée sur une instance de production du DHIS2.

Il convient de veiller à ce que le serveur lui-même et l'application DHIS2 soient bien sécurisés, afin de limiter l'accès aux données collectées. Les détails relatifs à la sécurisation d'un système DHIS2 ne sont pas abordés dans le présent document, et nous renvoyons donc à la [documentation DHIS2] (http://dhis2.org/documentation).

## Préparation du fichier de métadonnées { #preparing-the-metadata-file } 

**REMARQUE :** Si vous installez le package sur une nouvelle instance de DHIS2, vous pouvez alors ignorer la section "Préparation du fichier de métadonnées" et passer immédiatement à la section "[Importer un fichier de métadonnées dans DHIS2](#importing-metadata)".

Bien que ce ne soit pas toujours nécessaire, il peut souvent être avantageux d'apporter certaines modifications au fichier de métadonnées avant son importation dans DHIS2.

### Dimension des données par défaut (le cas échéant) { #default-data-dimension-if-applicable } 

Dans les premières versions de DHIS2, l'UID de la dimension des données par défaut était généré automatiquement. Ainsi, alors que toutes les instances du DHIS2 ont une option de catégorie par défaut, une catégorie d'élément de données, une combinaison de catégories et une combinaison d'options de catégories, les UID de ces valeurs par défaut peuvent être différents. Les versions plus récentes de DHIS2 ont des UID codés en dur pour la dimension par défaut, et ce sont ces UID qui sont utilisés dans les packages de configuration.

Pour éviter les conflits lors de l'importation des métadonnées, il est conseillé de rechercher et de remplacer l'ensemble du fichier .json pour toutes les occurrences de ces objets par défaut, en remplaçant les UID du fichier .json par les UID de la base de données dans laquelle le fichier sera importé. Le tableau 1 indique les UID qui doivent être remplacés, ainsi que les point d'extrémité de l'API pour l'identification des UID existants.

| Objet                      | UID         | Chemin vers l'API                                              |
|:----------------------------|:------------|:----------------------------------------------------------|
| Catégorie                    | GLevLNI9wkl | `../api/categories.json?filter=name:eq:default`           |
| Option de catégorie             | xYerKDKCefk | `../api/categoryOptions.json?filter=name:eq:default`      |
| la combinaison de catégories.        | bjDvmb4bfuf | `../api/categoryCombos.json?filter=name:eq:default`       |
| Combinaison d’options catégorie | HllvX50cXC0 | `../api/categoryOptionCombos.json?filter=name:eq:default` |

Par exemple, si l'on importe un package de configuration dans <https://play.dhis2.org/demo>, l'UID de la combinaison d'options de catégorie par défaut peut être identifié à partir de <https://play.dhis2.org/demo/api/categoryOptionCombos.json?filter=name:eq:default> comme étant bRowv6yZOF2.

Vous pourriez alors rechercher et remplacer toutes les occurrences de `HllvX50cXC0` par `bRowv6yZOF2` dans le fichier .json, puisque c'est l'ID par défaut du système dans lequel vous importez. **_Notez que cette opération de recherche et de remplacement doit être effectuée avec un éditeur de texte brut_**, et non avec un logiciel de traitement de textes comme Microsoft Word.

### Types d'indicateurs { #indicator-types } 

Le type d'indicateur est un autre type d'objet pouvant créer un conflit d'importation puisque certains noms sont utilisés dans différentes bases de données de DHIS2 ("Pourcentage", par exemple). Étant donné que les types d'indicateurs sont définis simplement par leur facteur et par le fait qu'il s'agisse ou non de simples nombres sans dénominateur, ils sont sans aucune ambiguïté et peuvent être remplacés par une recherche et un remplacement des UID. Cela permet d'éviter d'éventuels conflits d'importation et de ne pas créer de types d'indicateurs dupliqués. Le tableau 2 montre les UID qui pourraient être remplacés, ainsi que les points d'extrémité de l'API pour identifier les UID existants.

| Objet     | UID         | Chemin vers l'API                                                             |
|:-----------|:------------|:-------------------------------------------------------------------------|
| Pourcentage | hmSnCXmLYwt | `../api/indicatorTypes.json?filter=number:eq:false&filter=factor:eq:100` |
| Numérateur seulement (nombre) | kHy61PbChXr | `..api/indicatorTypes.json?filter=number:eq:true`|

### TrackedEntityType (Type d'entité suivie) { #tracked-entity-type } 

Comme pour les types d'indicateurs, il se peut que vous ayez déjà des types d'entités suivies dans votre base de données DHIS2. Les références au type d'entité suivie doivent être modifiées pour refléter ce qui se trouve dans votre système afin d'éviter la création de doublons. Le tableau 3 indique les UID qui pourraient être remplacés, ainsi que les points point d'extrémité de l'API permettant d'identifier les UID existants.

| Objet | UID         | Chemin vers l'API                                           |
|:-------|:------------|:-------------------------------------------------------|
| Health Event | DnxQe1mgmlp | `../api/trackedEntityTypes.json?filter=name:eq:Event` |

### Visualisations à l'aide de l’UID de l’unité d’organisation de base { #visualizations-using-root-organisation-unit-uid }

Les visualisations, les rapports d’événements, les tableaux de rapports et les cartes affectés à un niveau d’unité d’organisation spécifique ou à un groupe d’unités d’organisation comportent un renvoi à l’unité d’organisation de base (niveau 1). Ces objets, s’ils sont présents dans le fichier de métadonnées, contiennent une balise `<OU_ROOT_UID>`. Utilisez la fonction de recherche de l’éditeur de fichiers .json pour trouver cette balise et la remplacer par l’UID de l’unité d’organisation de niveau 1 dans l’instance cible.

Certaines visualisations et cartes peuvent contenir des références à des niveaux d'unité d'organisation. Les cartes composées de plusieurs visualisations cartographiques peuvent contenir diverses références à des niveaux d'unité d'organisation en fonction de la configuration de la couche cartographique. Ajustez les références de niveau d'unité d'organisation dans le fichier json des métadonnées pour qu'elles correspondent à la structure de l'unité d'organisation dans l'instance cible avant d'importer le fichier de métadonnées.

## Importation de métadonnées { #importing-metadata } 

Le fichier de métadonnées .json est importé via l'application [Importer/Exporter](https://docs.dhis2.org/master/en/user/html/import_export.html) de DHIS2. Il est conseillé d'utiliser la fonction "test" pour identifier les problèmes avant d'effectuer une importation réelle des métadonnées. Si le "test" signale des problèmes ou des conflits, voir la section [importer des conflits] (#manipulation-importation-de-conflits) ci-dessous.

Si l'importation "d'essai"/"de validation fonctionne sans erreur, essayez d'importer les métadonnées. Si l'importation réussit sans aucune erreur, vous pouvez alors passer à la [configuration](#configuration) du module. Dans certains cas, les conflits ou les problèmes d'importation ne sont pas affichés pendant le "test", mais apparaissent lorsque l'on tente l'importation proprement dite. Dans ce cas, le résumé de l'importation énumère les erreurs à résoudre.

### Gestion des conflits d'importation { #handling-import-conflicts } 

> REMARQUE : Si vous importez vers une nouvelle instance DHIS2, vous n'aurez pas de conflits d'importation, car il n'y a rien dans cette base de données qui puisse entrer en conflit avec l'importation. Suivez les instructions pour importer les métadonnées, puis passez à la section "[Configuration](#configuration)".

Plusieurs de conflits peuvent survenir, mais le plus courant est le fait qu'il y ait des objets de métadonnées dans le package de configuration avec un nom, un nom abrégé et/ou un code existant déjà dans la base de données cible. Il existe plusieurs solutions alternatives à ces problèmes, avec de différents avantages et inconvénients. La solution la plus appropriée dépendra, par exemple, du type d'objet pour lequel un conflit survient.

#### Option 1 { #alternative-1 } 

Renommez l'objet de votre base de données de DHIS2 pour lequel il y a un conflit. L'avantage de cette approche est que vous n'avez pas besoin de modifier le fichier .json, puisque les modifications sont effectuées par l'interface utilisateur de DHIS2. Cette méthode est probablement moins sujette aux erreurs. Cela signifie également que le package de configuration est laissé tel quel, ce qui peut être un avantage, par exemple, lorsque du matériel de formation et de la documentation basés sur le package de configuration seront utilisés.

#### Option 2 { #alternative-2 } 

Renommez l'objet pour lequel il y a un conflit dans le fichier .json. L'avantage de cette approche est que les métadonnées DHIS2 existantes sont laissées telles quelles. Cela peut être un facteur lorsqu'il y a du matériel de formation ou de la documentation, comme les procédure normale d'exploitation des dictionnaires de données liés à l'objet en question, et cela n'implique aucun risque de confusion pour les utilisateurs lors de la modification des métadonnées qui leur sont familières.

Notez que pour les deux options 1 et 2, la modification peut être aussi simple que l'ajout d'un petit pré/post-fixe au nom, pour minimiser le risque de confusion.

#### Option 3 { #alternative-3 } 

Une troisième approche, plus complexe, consiste à modifier le fichier .json pour réutiliser les métadonnées existantes. Par exemple, dans les cas où un ensemble d'options existe déjà pour un certain concept (par exemple "sexe"), cet ensemble d'options pourrait être supprimé du fichier .json et toutes les références à son UID remplacées par l'ensemble d'options correspondant existant déjà dans la base de données. Le grand avantage de cette méthode (qui n'est pas limitée aux seuls cas où il y a un conflit d'importation directe) est d'éviter de créer des métadonnées dupliquées dans la base de données. Il y a des aspects essentiels à prendre en compte lors de ce type de modification :

* il nécessite une connaissance approfondie de la structure détaillée des métadonnées du DHIS2
* Cette approche ne fonctionne pas pour tous les types d'objets. En particulier, certains types d'objets ont des dépendances compliquées à résoudre de cette manière, par exemple en ce qui concerne les désagrégations.
* il sera compliqué de procéder aux futures mises à jour du package de configuration.

## Configuration { #configuration }

Une fois que toutes les métadonnées sont importées avec succès, des étapes doivent être mises en oeuvre avant que le module ne soit fonctionnel.

### Partage { #sharing } 

Tout d'abord, vous devrez utiliser la fonctionnalité _Partage_ du DHIS2 pour configurer quels utilisateurs (groupes d'utilisateurs) doivent voir les métadonnées et les données associées au programme ainsi que qui peut enregistrer/saisir des données dans le programme. Par défaut, le partage a été configuré pour ce qui suit :

* Type d'entité suivie
* Programme
* Étapes du programme
* Tableaux de bord

Un package de métadonnées contient généralement plusieurs groupes d’utilisateurs :

* AH_EBS - Accès
* AH_EBS - Administrateur
* AH_EBS - Data capture

Les éléments suivants sont attribués par défaut à ces groupes d'utilisateurs

| Objet              | Groupes d'utilisateurs                             |                                                  |                                                     |
|---------------------|-----------------------------------------|--------------------------------------------------|-----------------------------------------------------|
|                     | AH_EBS - Accès                         | AH_EBS - Administrateur                                   | AH_EBS - Data capture                               |
| Type d'entité suivie | Métadonnées : peuvent être visualisées <br>Données : peuvent être visualisées | Métadonnées : peuvent être modifiées et visualisées <br>Données : peuvent être visualisées  | Métadonnées : peuvent être visualisées <br>Données : peuvent être capturées et visualisées |
| Programme             | Métadonnées : peuvent être visualisées <br>Données : peuvent être visualisées | Métadonnées : peuvent être modifiées et visualisées <br>Données : peuvent être visualisées  | Métadonnées : peuvent être visualisées <br>Données : peuvent être capturées et visualisées |
| Étapes du programme      | Métadonnées : peuvent être visualisées <br>Données : peuvent être visualisées | Métadonnées : peuvent être modifiées et visualisées <br>Données : peuvent être visualisées  | Métadonnées : peuvent être visualisées <br>Données : peuvent être capturées et visualisées |
| Tableaux de bord          | Métadonnées : peuvent être visualisées <br>Données : peuvent être visualisées | Métadonnées : peuvent être modifiées et visualisées <br>Données : peuvent être visualisées  | Métadonnées : peuvent être visualisées <br>Données : peuvent être visualisées             |

Vous voudrez bien affecter vos utilisateurs au groupe d'utilisateurs approprié en fonction de leur rôle dans le système. Vous pouvez également activer le partage pour d'autres objets du paquet en fonction de votre configuration. Reportez-vous à la [Documentation DHIS2] (https://docs.dhis2.org/master/en/dhis2_user_manual_en/about-sharing-of-objects.html) pour plus d'informations sur la configuration du partage.

### Rôles des utilisateurs { #user-roles } 

Les utilisateurs auront besoin de rôles utilisateur pour pouvoir utiliser les différentes applications du DHIS2. Les rôles minimums suivants sont recommandés :

1. Analyse des données Tracker : Il peut visualiser des analyses d'événements et accéder à des tableaux de bord, des rapports d'événements, un visualiseur d'événements, un visualiseur de données, des tableaux croisés dynamiques, des rapports et des cartes.
2. Saisie de données Tracker : possibilité d'ajouter des valeurs de données, de mettre à jour les entités suivies, de rechercher des entités suivies dans les unités d'organisation et d'accéder à l'application Saisie Tracker

Reportez-vous à la [Documentation DHIS2] (http://dhis2.org/documentation) pour plus d'informations sur la configuration des rôles des utilisateurs.

### Unités d’Organisation { #organisation-units } 

Vous devez assigner le programme à des unités d'organisation au sein de votre propre hiérarchie afin de pouvoir le visualiser dans Saisie Tracker.

### Métadonnées dupliquées { #duplicated-metadata } 

> **REMARQUE**
>
> Cette section ne s’applique que si vous importez dans une base de données DHIS2 qui comporte déjà des métadonnées. Si vous travaillez avec une nouvelle instance du système DHIS2, veuillez ignorer cette section et accédez à [Adaptation du programme Tracker](#adapting-the-tracker-program). 
> Si vous utilisez des applications tierces qui reposent sur les métadonnées actuelles, sachez que cette mise à jour pourrait les interrompre."

Même lorsque les métadonnées sont importées avec succès sans aucun conflit d'importation, il peut y avoir des doublons dans les métadonnées - éléments de données, attributs d'entités suivies ou ensembles d'options qui existent déjà. Comme indiqué dans la section ci-dessus sur la résolution des conflits, il est important de garder à l'esprit que les décisions relatives à la modification des métadonnées dans le DHIS2 doivent également tenir compte d'autres documents et ressources associés de différentes manières aux métadonnées existantes et aux métadonnées importées par le biais du package de configuration. La résolution des doublons ne consiste donc pas seulement à "nettoyer la base de données", mais aussi à s'assurer que cela est fait sans, par exemple, briser le potentiel d'intégration avec d'autres systèmes, la possibilité d'utiliser du matériel de formation, la rupture des SOP, etc. Cela dépend beaucoup du contexte.

## Adapter le programme tracker { #adapting-the-tracker-program } 

Une fois le programme importé, il est possible que vous souhaitiez y apporter certaines modifications. Voici quelques exemples d'adaptations locales que vous _pourrez_ effectuer :

* Ajout de variables supplémentaires au formulaire.
* Adaptation des noms des éléments de données/options en fonction des usages au niveau national.
* Ajout des traductions aux variables et/ou au formulaire de saisie des données.
* Modification des indicateurs du programme en fonction des définitions de cas locales.

Toutefois, il est fortement recommandé de faire preuve d'une grande prudence si vous décidez de modifier ou de supprimer l'un des formulaires/métadonnées inclus. Il y a donc un risque que des modifications brisent des fonctionnalités, par exemple les règles du programme et les indicateurs du programme.

