---
edit_url: "https://github.com/dhis2-metadata/REHAB_AGG/blob/master/docs/rehab_agg-installation.md"
revision_date: "2022-05-25"
---

# Rehabilitation - Aggregate Installation Guide { #rehab-installation }

This document includes an installation guide for the Rehabilitation aggregate package.

Langue par défaut du système : anglais

Available translations: French, Spanish, Portuguese, Arabic

## Aperçu { #overview }

=== "DHIS2.35"

    ```json
    "package": {
        "DHIS2Build": "834b25f",
        "DHIS2Version": "2.35.8",
        "code": "RHAG00",
        "description": "",
        "lastUpdated": "20220221T181704",
        "locale": "en",
        "name": "RHAG00_DHIS2.35",
        "type": "AGG",
        "version": "1.0.0"
    }
    ```

=== "DHIS2.36"

    ```json
    "package": {
        "DHIS2Build": "aa38c7f",
        "DHIS2Version": "2.36.8",
        "code": "RHAG00",
        "description": "",
        "lastUpdated": "20220222T131957",
        "locale": "en",
        "name": "RHAG00_DHIS2.36",
        "type": "AGG",
        "version": "1.0.0"
    }
    ```

=== "DHIS2.37"

    ```json
    "package": {
        "DHIS2Build": "a7328e1",
        "DHIS2Version": "2.37.3",
        "code": "RHAG00",
        "description": "",
        "lastUpdated": "20220222T132004",
        "locale": "en",
        "name": "RHAG00_DHIS2.37",
        "type": "AGG",
        "version": "1.0.0"
    }
    ```

## Installation { #installation }

L'installation du module se fait en plusieurs étapes :

1. [Préparation du fichier de métadonnées avec les métadonnées DHIS2](#preparing-the-metadata-file).
2. [Importation de métadonnées dans DHIS2](#importing-metadata).
3. [Configuration des métadonnées importées](#configuration).
4. [Adaptation du programme après importation](#adaptation-du-programme)

Nous vous recommandons de lire tout d’abord chaque section du guide d’installation avant de commencer le processus d’installation et de configuration dans le système DHIS2. Identifiez les sections applicables en fonction du type d’importation :

1. importation dans une instance DHIS2 vide
2. Importation dans une instance DHIS2 avec des métadonnées existantes.

Les étapes décrites dans ce document doivent être testées dans une instance DHIS2 de test/transit avant d’être appliquées à un environnement de production.

## Conditions requises { #requirements }

Pour installer le module, vous devez avoir un compte administrateur dans le système DHIS2.

Il est important de s’assurer que le serveur et l’application DHIS2 sont bien sécurisés et de configurer les droits d’accès aux données collectées. Les détails sur la sécurisation d’un système DHIS2 sortent du cadre de ce document. Veuillez consulter le site [Documentation sur le DHIS2](https://docs.dhis2.org/).

## Fichiers de métadonnées { #metadata-files }

Bien que ce ne soit pas toujours nécessaire, il peut souvent être avantageux d'apporter certaines modifications au fichier de métadonnées avant son importation dans DHIS2.

## Préparation du fichier de métadonnées { #preparing-the-metadata-file }

### Dimension de données par défaut { #default-data-dimension }

Dans les premières versions du système DHIS2, les UID des dimensions de données par défaut étaient générés automatiquement. Ainsi, bien que toutes les instances du système DHIS2 possèdent une option de catégorie par défaut, une catégorie d’élément de données, une combinaison de catégories et une combinaison d’options de catégorie, les UID de ces valeurs par défaut peuvent être différents. Les versions ultérieures du système DHIS2 utilisent des UID codés en dur pour la taille par défaut, lesquels sont utilisés dans les packages de configuration.

Pour éviter tout conflit lors de l’importation des métadonnées, nous vous recommandons de rechercher et de remplacer toutes les occurrences de ces objets par défaut dans l’ensemble du fichier .json, en remplaçant les UID du fichier .json par ceux de l’instance dans laquelle le fichier sera importé. Le tableau 1 présente les UID à remplacer, ainsi que les points de terminaison d’API permettant d’identifier les UID existants.

| Objet | UID | Point d'extrémité d’API |
| --- | --- | --- |
| Catégorie | `GLevLNI9wkl` | `../api/categories.json?filter=name:eq:default` |
| Option de catégorie | `xYerKDKCefk` | `../api/categoryOptions.json?filter=name:eq:default` |
| Combinaison de catégories | `bjDvmb4bfuf` | `../api/categoryCombos.json?filter=name:eq:default` |
| Combinaison d’options de catégorie | `HllvX50cXC0` | `../api/categoryOptionCombos.json?filter=name:eq:default` |

Identifiez les UID des tailles par défaut de votre instance à l’aide des requêtes API affichées et remplacez les UID dans le fichier .json par ceux de l’instance.

> **REMARQUE**
>
> Notez que cette opération de recherche et de remplacement doit être effectuée via un éditeur de texte brut, et non un traitement de texte comme Microsoft Word.

### Types d'indicateurs { #indicator-types }

Le type d’indicateur est également un type d’objet susceptible de créer un conflit lors de l’importation, car certains noms sont utilisés dans différentes bases de données DHIS2 (par ex. « Pourcentage »). Comme les types d’indicateurs sont définis par leur facteur (y compris 1 pour les indicateurs « numérateur seulement »), ils ne laissent aucune ambiguïté et peuvent être remplacés en recherchant et remplaçant des UID. Cette méthode permet d’éviter les éventuels conflits d’importation et empêche le responsable de la mise en œuvre de créer des doublons de types d’indicateurs. Le tableau ci-dessous contient les UID pouvant être remplacés, ainsi que les points de terminaison d’API permettant d’identifier les UID existants :

| Objet | UID | Point d'extrémité d’API |
| --- | --- | --- |
| Numérateur seulement | `kHy61PbChXr` | `../api/indicatorTypes.json?filter=number:eq:true&filter=factor:eq:1` |

### Visualisations à l'aide de l’UID de l’unité d’organisation de base { #visualizations-using-root-organisation-unit-uid }

Les visualisations, les rapports d’événements, les tableaux de rapports et les cartes affectés à un niveau d’unité d’organisation spécifique ou à un groupe d’unités d’organisation comportent un renvoi à l’unité d’organisation de base (niveau 1). Ces objets, s’ils sont présents dans le fichier de métadonnées, contiennent une balise `<OU_ROOT_UID>`. Utilisez la fonction de recherche de l’éditeur de fichiers .json pour trouver cette balise et la remplacer par l’UID de l’unité d’organisation de niveau 1 dans l’instance cible.

### Codes d’option { #option-codes }

Selon les conventions d'affectation de noms du système  DHIS2, les codes de métadonnées utilisent des lettres majuscules, des caractères de soulignement et aucun espace. Certaines exceptions susceptibles de survenir sont spécifiées dans la documentation du package correspondant. Tous les codes inclus dans les objets de métadonnées du package actuel correspondent aux conventions d'affectation de noms. Il peut arriver que les codes des objets de métadonnées existants utilisés dans la base de données cible utilisent des caractères minuscules. Dans ce cas, il est important de mettre à jour ces valeurs directement dans la base de données.

> **Important**
>
> Pendant l’importation, les codes d’option existants seront remplacés par les nouveaux codes en majuscules. Afin de mettre à jour les valeurs des données existantes dans la base de données, vous devez mettre à jour les valeurs stockées dans la base de données en utilisant les commandes de la base de données. Assurez-vous de mapper les anciens codes d’option et les nouveaux avant de remplacer les valeurs. Utilisez d’abord l’instance de transit, avant d’effectuer des modifications sur le serveur de production.

Pour les valeurs des éléments de données, utilisez :

```SQL
UPDATE programstageinstance
SET eventdatavalues = jsonb_set(eventdatavalues, '{"<affected data element uid>","value"}', '"<new value>"')
WHERE eventdatavalues @> '{"<affected data element uid>":{"value": "<old value>"}}'::jsonb
AND programstageid=<database_programsatgeid>;
```

### Ordre de tri pour les options { #sort-order-for-options }

Vérifiez si l’ordre de tri `sortOrder` des options de votre système correspond à celui inclus dans le package de métadonnées. Cela ne s’applique que si le fichier .json et l’instance cible contiennent des options et des ensembles d’options avec le même UID.

Après l’importation, assurez-vous que l’ordre de tri des options d’un ensemble d’options commence par 1. Les valeurs de l’ordre de tri ne doivent avoir aucun écart (par exemple 1, 2, 3, 5, 6).

L’ordre de tri peut être modifié dans l’application Maintenance.

1. Accédez à l’ensemble d’options applicable
2. Ouvrez la section « Options »
3. Utilisez « TRIER PAR NOM », « TRIER PAR CODE/VALEUR » ou « TRIER MANUELLEMENT » comme alternative.

The Rehabilitation package contains one option set and two options:

```json
{
    "optionSets": [
        {
            "name": "YES/NO (numeric)",
            "id": "TdDqpX1kdd2",
            "code": "YES_NO_NUM",
            "valueType": "INTEGER_ZERO_OR_POSITIVE",
            "options": [
                {
                    "id": "VavIEUmBv8j"
                },
                {
                    "id": "Xu8ieCbS7jH"
                }
            ]
        }
    ],
    "options": [
        {
            "name": "Yes",
            "id": "VavIEUmBv8j",
            "code": "1",
            "sortOrder": 1,
            "optionSet": {
                "id": "TdDqpX1kdd2"
            }
        },
        {
            "name": "No",
            "id": "Xu8ieCbS7jH",
            "code": "0",
            "sortOrder": 2,
            "optionSet": {
                "id": "TdDqpX1kdd2"
            }
        }
    ]
}
```

This Yes/No option set is based on "INTEGER_ZERO_OR_POSITIVE" option values that are evaluated in predictors in order to determine **Rehabilitation essential package availability at PHC level** and count number of facilities offering essential packages.

### Organisation unit groups and group sets { #rehab-orgunitgroups }

The package includes the following Organisation Unit Groups:

| Nom | UID | Description | Objectif |
| --- | --- | --- | --- |
| SSB | `aT5pkgRLbw5` | Primary health care facilities | data set assignment, analytics |
| REHAB - Master Facility List | `Uvefj6bDfzo` | Includes all facilities reporting on rehabilitation | data set assignment, analytics |
| REHAB - PHC | `bbsxlCu3Vya` | Includes all primary health care facilities reporting on rehabilitation | Analyses |
| REHAB - SHC | `wZJCB2cj9jg` | Includes all secondary health care facilities reporting on rehabilitation | Analyses |
| REHAB - THC | `Re0iJ3vtBzE` | Includes all tertiary health care facilities reporting on rehabilitation | Analyses |
| Rehab inpatient ward | `AGK6oOK4ncb` | Includes all facilities with a dedicated rehabilitation ward | Analyses |
| Hospital district | `Y9lBaYVm9j7` | Includes all district hospitals | Analyses |

and the following Organisation Unit Group Sets:

| Nom | UID | Description | Objectif |
| --- | --- | --- | --- |
| Administrative levels of care | `dSwpdHITQ85` | Administrative levels of care eg. PHC, SHC, THC | Analyses |
| REHAB - Administrative levels | `wkjpdklqOIt` | Rehabilitation levels of care eg. REHAB PHC, REHAB SHC, REHAB THC | Analyses |
| Type | `VQT2m5uMawR` | Includes types of facilities eg. District Hospitals, Health centres, etc. | Analyses |

These metadata objects have to be configured.

1. If the target instance does not contain any organisation unit groups that match the description of the groups included in the package, follow the steps below during configuration and import:

    1. Import the package together with the included organisation unit groups.
    2. Assign applicable facilities to the new organisation unit groups in the Maintenance app.

2. If the target instance already contains organisation unit groups that match the description for the given metadata objects, follow the steps below during configuration and import:

    1. Note the UIDs of the matching organisation unit groups in the target instance.
    2. Replace all occurences of the organisationUnitGrop UIDs in the metadata json file with the corresponding UIDs noted in step 1.
    3. Remove the organisationUnitGroup metadata objects from the metadata json file before import. This step is very important, otherwise the current assignment of the organisation units to existing groups in the target instance will be overwritten.
    4. Proceed to importing the package if no other pre-configuration / editing is required.

3. If the target instance does not contain organisation unit group sets that match the description provided, these organisation unit groups have to be imported into the target instance. The applicable organisation unit groups have to be added to the organisation unit group sets in the user interface or using the API.

4. If the target instance already contains organisation unit group sets that match the description provided, follow the steps below during configuration and import:

    1. Replace the UIDs of the matching organisation unit group sets in the metadata file with the corresponding UIDs of the organisation unit group sets from the target instance.
    2. Remove the organisation unit group set objects from the metadata file before import. This step is very important, otherwise the current assignment of the organisation unit groups to existing group sets in the target instance will be overwritten.
    3. Add the newly imported organisation unit groups to the organisation unit group sets. (See tables above).

> **Example**
>
> The target instance may already contain the PHC organisation unit group. In this case, replace the UID `aT5pkgRLbw5` of the group and all its occurences in the json file with the corresponding UID from the target instance before import. Then, remove the orgUnitGroup "PHC" metadata object from the json file. You will find it under `"organisationUnitGroups":`

### Population, incidence and personnel density data { #population-incidence-and-personnel-density-data }

The Rehabilitation package includes data elements, indicators and other metadata objects that use on **population**, **incidence** and **personnel density** data.

The organisation unit levels at which the population data is entered in the target instance may vary.

In the generic Rehabilitation package, this metadata is added to the to the facility level data sets listed in the table below.

| Élément de données | UID | Data Set name | Data Set UID | Data set period type | Data Set organisation Unit Group |
| --- | --- | --- | --- | --- | --- |
| GEN - Population | `DkmMEcubiPv` | REHAB - personnel density | `Sm2fALTZROS` | Annuel | REHAB - Master Facility List |
| REHAB - Amputation incidence % | `jEc1P0VAPcs` | REHAB - bed density and incidence data | `giKizLegiUW` | Annuel | Rehab inpatient ward |
| REHAB - Burns incidence % | `rtYJONzb7OY` | REHAB - bed density and incidence data | `giKizLegiUW` | Annuel | Rehab inpatient ward |
| REHAB - MMT incidence % | `jlS0RS2LplZ` | REHAB - bed density and incidence data | `giKizLegiUW` | Annuel | Rehab inpatient ward |
| REHAB - SCI incidence % | `Iy6ylb65g4V` | REHAB - bed density and incidence data | `giKizLegiUW` | Annuel | Rehab inpatient ward |
| REHAB - Stroke incidence % | `OIADGq0kCHW` | REHAB - bed density and incidence data | `giKizLegiUW` | Annuel | Rehab inpatient ward |
| REHAB - TBI incidence % | `rzVRv6GpduW` | REHAB - bed density and incidence data | `giKizLegiUW` | Annuel | Rehab inpatient ward |

If the target instance already has metadata infrastructure, which is used for collecting **Population, personnel or incidence data**, please refer to the steps listed below:

1. Choisissez la stratégie permettant d'aligner les métadonnées de population dans l'instance cible et dans le fichier .json.

    - Option 1 : Remplacer les UID des éléments de données et de toutes leurs occurrences dans le fichier json par les UID du système cible
    - Option 2 : Envisager de remplacer les UID de ces éléments de données dans le système cible par les UID du fichier json. Les éléments de données GEN font partie de la bibliothèque de métadonnées de base DHIS2 et sont utilisés dans d'autres packages de métadonnées.

2. Indicators that use the **Population, personnel or incidence data** will be aggregating data at the level/levels where the data is entered.

3. Un mappage et une configuration supplémentaires peuvent être nécessaires après l'importation du package. Reportez-vous à la section [configuration des ensembles de données] (#rehab-dataset-config).

> **NOTE**
>
> When updating the UID of a metadata element in the existing DHIS2 instamce, you will need to run an SQL command in the database and additionally replace all occurances and references of its UID in other metadata objects: predictor, indicator, validation rule expressions, etc.

### Predictors { #rehab-predictors }

Le package comprend les prédicteurs suivants :

| Nom | UID | Type de période | Stratégie de valeur manquante | Élément de données de sortie - nom | Élément de données de sortie - UID | Niveaux d'unité d'organisation |
| --- | --- | --- | --- | --- | --- | --- |
| REHAB - Availability (Essential package) | `zYbrCP7xGtk` | yearly | Ignorer si toutes les valeurs sont manquantes | REHAB - Package availability (overall) | `bUJKsy9u2xv` | Facility level |
| REHAB - Availability (occupational therapists) | `MaWSMzXDLkm` | yearly | Ignorer si toutes les valeurs sont manquantes | REHAB - Availability (occupational therapists) | `RPKfAe7voO3` | Facility level |
| REHAB - Availability (other personnel) | `aphqcwJiK5s` | yearly | Ignorer si toutes les valeurs sont manquantes | REHAB - Availability (other personnel) | `qVvudaOdniT` | Facility level |
| REHAB - Availability (physiotherapists) | `ydlTJLDcFBj` | yearly | Ignorer si toutes les valeurs sont manquantes | REHAB - Availability (physiotherapists) | `N6ru55bPe1o` | Facility level |
| REHAB - Availability (prosthetists/orthotists) | `K3QZ2zs0opc` | yearly | Ignorer si toutes les valeurs sont manquantes | REHAB - Availability (prosthetists/orthotists) | `klLHQzY0lw2` | Facility level |
| REHAB - Availability (psychologists) | `RpxclhlYJxw` | yearly | Ignorer si toutes les valeurs sont manquantes | REHAB - Availability (psychologists) | `pNNIXV0kOus` | Facility level |
| REHAB - Availability (rehabilitation doctors) | `CbnJeF5K1cM` | yearly | Ignorer si toutes les valeurs sont manquantes | REHAB - Availability (rehabilitation doctors) | `LQ10SQqGKyf` | Facility level |
| REHAB - Availability (speech language therapists) | `qHJTzQcMSd4` | yearly | Ignorer si toutes les valeurs sont manquantes | REHAB - Availability (speech language therapists) | `SuZDPYOgFbN` | Facility level |

Les métadonnées du prédicteur comprennent les niveaux d'unité d'organisation utilisés pour l'agrégation des valeurs des données. Le fichier de métadonnées du package contient des caractères de remplacement qui doivent être remplacés par les UID des niveaux d'unités d'organisation correspondants dans la base de données cible.

Les étapes à suivre pour préparer les prédicteurs à l'importation sont décrites ci-dessous :

1. Identify the organisationUnitLevel UID of the Facility level at which the data for the predictors will be aggregated. Use the following API endpoint to identify the required UID: `../api/organisationUnitLevels.json?fields=id,name`
2. Find the following organisationUnitLevel placeholders in the json file: `<OU_LEVEL_FACILITY_UID>`
3. Remplacer les caractères génériques par l'UID du niveau de l'établissement identifié dans l'instance cible.
4. Identify the number of the Facility level in the target instance.
5. Find the properties of the **output data elements** in the json file, using the UIDs provided in the "Output data element - UID" column.
6. Look for property: `"aggregationLevels": [4]`
7. If the level matches the level in the target instance, keep the number as is. If the Facility level number in the target nstance is different, then adjust the number accordingly.

### Validation rules { #rehab-validation-rules }

Validation rules included in the package are grouped by data sets for which they have been configured.

All validation rule groups and the corresponding validation rules are listed in the appendix to this installation guide:

[Rehabilitation - validation rules](resources/rehab_validation_rules.xlsx)

The organisation unit groups for all validation rules are set to facility level. The facility level value is located in the `"organisationUnitLevels"` property of each validation rule. It is set to `4` by default. Adjust these levels in the metadata file to match the facility level in the target instance befre importing the package.

## Importation des métadonnées { #importing-metadata }

Utilisez l’application DHIS2 [Import/Export](#import_export) pour importer des packages de métadonnées. Nous vous recommandons d’utiliser la fonction « test » pour identifier les problèmes avant de tenter d’effectuer une importation réelle des métadonnées. Si le « test » signale des problèmes ou des conflits, consultez la section [conflits lors de l’importation](#handling-import-conflicts) ci-dessous. Si aucune erreur n’est signalée lors de l’importation « test »/« validée », essayez d’importer les métadonnées. Si l’importation s’est déroulée sans erreur, vous pouvez passer à la [configuration](#configuration) du module. Dans certains cas, les conflits ou les problèmes d’importation n’apparaissent pas pendant le test, mais durant l’importation réelle. Dans ce cas, le résumé de l’importation indiquera les erreurs à résoudre.

### Gestion des conflits d'importation { #handling-import-conflicts }

> **REMARQUE**
>
> Si vous importez le package dans une nouvelle instance du système DHIS2, il n’y aura aucun conflit lors de l’importation, car ia base de données cible ne contient aucune métadonnée. Après avoir importé les métadonnées, passez à la section « [Configuration](#configuration) ».

Différents types de conflit peuvent survenir, mais le plus courant est le fait que le nom, le nom abrégé et/ou le code des objets de métadonnées du package de configuration existent déjà dans la base de données cible. Il existe plusieurs solutions alternatives à ces problèmes, chacun avec ses avantages et ses inconvénients. La solution la plus appropriée dépend, par exemple, du type d’objet à l’origine du conflit.

#### Option 1 { #alternative-1 }

Renommez l’objet existant dans votre base de données DHIS2 qui est en conflit. L’avantage de cette approche est qu’il n’est pas nécessaire de modifier le fichier .json, les modifications étant effectués par l’interface utilisateur du système DHIS2. Cette méthode semble présenter moins de risques d’erreur. De plus, comme le package de configuration est laissé tel quel, cela peut être un avantage, par exemple en cas de mise à jour du package. Les objets du package initial sont également souvent référencés dans les supports de formation et la documentation.

#### Option 2 { #alternative-2 }

Renommez l'objet pour lequel il y a un conflit dans le fichier .json. L'avantage de cette approche est que les métadonnées DHIS2 existantes sont laissées telles quelles. Cela peut être un facteur lorsqu'il y a du matériel de formation ou de la documentation, comme les procédure normale d'exploitation des dictionnaires de données liés à l'objet en question, et cela n'implique aucun risque de confusion pour les utilisateurs lors de la modification des métadonnées qui leur sont familières.

Notez que pour les deux options 1 et 2, la modification peut être aussi simple que l'ajout d'un petit pré/post-fixe au nom, pour minimiser le risque de confusion.

#### Option 3 { #alternative-3 }

Une troisième approche, plus complexe, consiste à modifier le fichier .json pour réutiliser les métadonnées existantes. Par exemple, dans les cas où un ensemble d'options existe déjà pour un certain concept (par exemple "sexe"), cet ensemble d'options pourrait être supprimé du fichier .json et toutes les références à son UID remplacées par l'ensemble d'options correspondant existant déjà dans la base de données. Le grand avantage de cette méthode (qui n'est pas limitée aux seuls cas où il y a un conflit d'importation direct) est d'éviter de créer des métadonnées dupliquées dans la base de données. Il y a des aspects essentiels à prendre en compte lors de ce type de modification :

-   il nécessite une connaissance approfondie de la structure détaillée des métadonnées du DHIS2
-   Cette approche ne fonctionne pas pour tous les types d'objets. En particulier, certains types d'objets ont des dépendances compliquées à résoudre de cette manière, par exemple en ce qui concerne les désagrégations.
-   il sera compliqué de procéder aux futures mises à jour du package de configuration..

## Configuration { #configuration }

Une fois que toutes les métadonnées sont importées avec succès, des étapes doivent être mises en oeuvre avant que le module ne soit fonctionnel.

### Partage { #sharing }

Tout d’abord, vous devrez utiliser la fonctionnalité _Partage_ du DHIS2 pour configurer les utilisateurs (groupes d’utilisateurs) qui doivent avoir accès aux métadonnées et aux données associées au programme ainsi que ceux qui peuvent enregistrer/saisir des données dans le programme. Par défaut, le partage a été configuré pour les personnes suivantes :

-   Tableaux de bord
-   Visualisations, cartes, rapports d’événement et tableaux de rapports
-   Ensembles de données
-   Options de catégorie

Veuillez consulter le site [Documentation du DHIS2](#sharing) pour plus d’informations sur le partage.

Trois groupes d'utilisateurs de base sont inclus dans le package :

-   Rehab access (view metadata/view data)
-   Rehab admin (view and edit metadata/no access to data)
-   Rehab - (view metadata/capture and view data)

Les utilisateurs sont attribués au groupe d’utilisateurs approprié en fonction de leur rôle dans le système. Le partage des autres objets du package peut être ajusté en fonction de la configuration. Consultez le site [Documentation sur le partage de DHIS2](#sharing) pour plus d’informations.

### Rôles des utilisateurs { #user-roles }

Les utilisateurs auront besoin de rôles d'utilisateur pour pouvoir utiliser les différentes applications du DHIS2. Les rôles minimums suivants sont recommandés :

1. Analyse des données Tracker : Il peut visualiser des analyses d'événements et accéder à des tableaux de bord, des rapports d'événements, un visualiseur d'événements, un visualiseur de données, des tableaux croisés dynamiques, des rapports et des cartes.
2. Saisie de données de suivi : possibilité d'ajouter des valeurs de données, de mettre à jour les entités suivies, de rechercher des entités suivies dans les unités d'organisation et d'accéder à l'application Saisie Tracker

Consultez le site [Documentation de DHIS2](https://docs.dhis2.org/) pour plus d’informations sur la configuration des rôles des utilisateurs.

### Affectation aux unités d'organisation { #organisation-unit-assignment }

The data sets must be assigned to organisation units within existing hierarchy in order to be accessible via capture app. The table below provides information about organisation unit assignment for Rehabilitation data sets:

| Ensemble de données | UID | Data set form type | Data collection period | Facility types |
| --- | --- | --- | --- | --- |
| Bed Density and Incidence Data | `giKizLegiUW` | défaut | yearly | Rehabilitation facilities with a dedicated rehabilitation inpatient ward |
| Essential Package Availability at PHC | `MGzqZDWvPhL` | Relative Periods (Périodes relatives) | yearly | Primary Healthcare Facilities reporting on Rehabilitation (Rehab PHC) |
| Personnel Density | `Sm2fALTZROS` | Relative Periods (Périodes relatives) | yearly | All facilities reporting on Rehab (Master Facility List) |
| Inpatient Report | `WjN1YoDtlOd` | custom | monthly | All facilities with an inpatient ward (not dedicated Rehab ward) reporting on Rehab (Master Facility List) |
| Rehab Ward Report | `tP8et8TNWgF` | custom | monthly | All facilities with a dedicated rehabilitation inpatient ward reporting on Rehab (Master Facility List) |
| Outpatient Report | `zInFVXb98JD` | custom | monthly | All facilities with an outpatient department reporting on Rehab (Master Facility List) |

### Organisation unit group assignment { #organisation-unit-group-assignment }

The organisation units in the target system have to be assigned to the Rehab organisation unit groups based on the overview in the [Organisation unit groups](#rehab-orgunitgroups) section.

### Data sets { #rehab-dataset-config }

The following data sets require additional configuration after import:

#### Bed density { #bed-density }

If the annual data for total number of rehabilitation beds is already collected in the existing HMIS, the Rehab Bed density data set is not needed. Make sure to replace all occurences of the data element **"Available rehabilitation beds (total)"** `K0Y94lADtGw` with the existing data element UID in all metadata objects, where this data element is referenced:

| Metadata object UID | Metadata object type | Détails |
| --- | --- | --- |
| `VOdQ2YRmSzf` | Indicateur | Data element is referenced in the numerator |

#### Personnel density { #personnel-density }

If the annual population data is already collected in the existing HMIS, the **"GEN - Population"** data element `DkmMEcubiPv` may be removed from the data set `Sm2fALTZROS`. Make sure to replace all occurences of the \*"GEN - Population"\*\* data element with the existing data element UID in all metadata objects, where this data element is referenced:

| Metadata object UID | Metadata object type | Détails |
| --- | --- | --- |
| `OnxT9nXB9yB` | Indicateur | Data element is referenced in the denominator |
| `hLkZBsoxgwG` | Indicateur | Data element is referenced in the denominator |
| `VOdQ2YRmSzf` | Indicateur | Data element is referenced in the denominator |
| `n0cE7LiP4j8` | Indicateur | Data element is referenced in the denominator |
| `peWxNUcIjZw` | Indicateur | Data element is referenced in the denominator |
| `dXNfY2I7umm` | Indicateur | Data element is referenced in the denominator |
| `hpP5GW43n1J` | Indicateur | Data element is referenced in the denominator |
| `s9SRcnMtI0K` | Indicateur | Data element is referenced in the denominator |
| `RRCtatVRlI0` | Indicateur | Data element is referenced in the denominator |
| `PuSDjaFs2we` | Indicateur | Data element is referenced in the denominator |
| `tsIeJwq6x8L` | Indicateur | Data element is referenced in the denominator |
| `U5tL3Eqq3Vj` | Indicateur | Data element is referenced in the denominator |
| `NcA1znaVgFH` | Indicateur | Data element is referenced in the denominator |
| `M0UPequfEYf` | Indicateur | Data element is referenced in the denominator |
| `U5WwSS3zxlX` | Indicateur | Data element is referenced in the denominator |
| `fhZ9MI3qTaA` | Indicateur | Data element is referenced in the denominator |
| `YEjkkya4JCJ` | Indicateur | Data element is referenced in the denominator |
| `xW6TcvEMhwG` | Indicateur | Data element is referenced in the denominator |
| `TNjjTJr7fLe` | Indicateur | Data element is referenced in the denominator |
| `uKK11dDx8HH` | Indicateur | Data element is referenced in the denominator |
| `qTq20E3B08y` | Indicateur | Data element is referenced in the denominator |
| `ePjfu6Fr4Jq` | Indicateur | Data element is referenced in the denominator |
| `zNzm3AUiQ3B` | Indicateur | Data element is referenced in the denominator |
| `Vq98oh9BIB1` | Indicateur | Data element is referenced in the denominator |
| `klNqjksyNAL` | Indicateur | Data element is referenced in the denominator |
| `bW75ZyPq9aZ` | Indicateur | Data element is referenced in the denominator |
| `ME2YCnift7x` | Indicateur | Data element is referenced in the denominator |
| `HTZ7STQR648` | Indicateur | Data element is referenced in the denominator |
| `Z2f5wDvVxUL` | Indicateur | Data element is referenced in the denominator |
| `XlISfeHbzxc` | Indicateur | Data element is referenced in the denominator |
| `NVbwb4XlTVo` | Indicateur | Data element is referenced in the denominator |
| `t26ObhmhjOb` | Indicateur | Data element is referenced in the denominator |
| `FjVJNnVOu6S` | Indicateur | Data element is referenced in the denominator |
| `fDj7xDywd5C` | Indicateur | Data element is referenced in the denominator |
| `BLUTcTXPhts` | Indicateur | Data element is referenced in the denominator |
| `RFVOIDIULVO` | Indicateur | Data element is referenced in the denominator |

The level of data collection for **incidence** data has to be the same or lower than the level of data collection for **population** data.

The organisation unit assignmnet of the **Personnel density** data set should remain at facility level for the purpose of analytical outputs.

### Métadonnées dupliquées { #duplicated-metadata }

> **NOTE**
>
> This section only applies if you are importing into a DHIS2 database in which there is already meta-data present. If you are working with a new DHIS2 instance, please skip this section and go to [Adapting the tracker program](#adapting-the-tracker-program). If you are using any third party applications that rely on the current metadata, please take into account that this update could break them”

Même lorsque les métadonnées sont importées avec succès sans aucun conflit d'importation, il peut y avoir des doublons dans les métadonnées - éléments de données, attributs d'entités suivies ou ensembles d'options qui existent déjà. Comme indiqué dans la section ci-dessus sur la résolution des conflits, il est important de garder à l'esprit que les décisions relatives à la modification des métadonnées dans le DHIS2 doivent également tenir compte d'autres documents et ressources associés de différentes manières aux métadonnées existantes et aux métadonnées importées par le biais du progiciel de configuration. La résolution des doublons ne consiste donc pas seulement à "nettoyer la base de données", mais aussi à s'assurer que cela est fait sans, par exemple, casser le potentiel d'intégration avec d'autres systèmes, la possibilité d'utiliser du matériel de formation, la rupture des SOP, etc. Cela dépend beaucoup du contexte.

Il est important de garder à l’esprit que le DHIS2 dispose d’outils pouvant dissimuler certaines des complexités des duplications potentielles dans les métadonnées. Par exemple, lorsqu’il existe des ensembles d’options en double, ils peuvent être masqués pour des groupes d’utilisateurs par le biais de [Partage](#sharing).

## Adaptation du programme { #adapting-the-program }

Une fois le programme importé, vous pouvez apporter certaines modifications au programme. Voici quelques exemples d’adaptations locales _pouvant_ être faites :

-   Ajout de variables supplémentaires au formulaire.
-   Adapter les noms des éléments de données/options en fonction des usages au niveau national.
-   Ajouter des traductions aux variables et/ou au formulaire de saisie des données.
-   Modification des indicateurs en fonction des définitions de cas au niveau local

Toutefois, il est fortement recommandé de faire preuve d'une grande prudence si vous décidez de modifier ou de supprimer l'un des formulaires/métadonnées inclus. Il y a donc un risque que des modifications brisent des fonctionnalités, par exemple les règles du programme et les indicateurs du programme.

### Mapping des indicateurs { #indicator-mapping }

For partial implementation of the Rehabilitation package, i.e. implementation of a customized WHO core indicator set, please refer to the [WHO-to-DHIS2 indicator mapping table](resources/rehab_indicator_mapping.xlsx).

When adapting metadata, make sure to identify visualizations and dashboards where applicable indicators are used, as well as data elements and category combinations used in the corresponding data sets.

## Suppression des métadonnées { #removing-metadata }

Pour maintenir votre instance propre et éviter les erreurs, il est recommandé de supprimer les métadonnées inutiles de votre instance. La suppression des métadonnées inutiles nécessite une connaissance avancée de DHIS2 et de ses différentes ressources.
