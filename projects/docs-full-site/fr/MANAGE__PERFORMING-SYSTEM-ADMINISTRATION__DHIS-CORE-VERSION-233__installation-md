---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.33/src/commonmark/en/content/sysadmin/installation.md"
revision_date: '2020-04-27'
---

# Installation { #installation }

<!--DHIS2-SECTION-ID:installation-->

Le chapitre sur l'installation fournit des informations sur comment installer DHIS2 dans différents contextes, notamment sur le serveur central en ligne, le réseau local hors ligne, l'application autonome et le package autonome appelé DHIS2 Live.

## Présentation { #install_introduction }

<!--DHIS2-SECTION-ID:install_introduction-->

DHIS2 runs on all platforms for which there exists a Java Runtime
Environment version 8 or higher, which includes most popular operating
systems such as Windows, Linux and Mac. DHIS2 runs on the PostgreSQL
database system. DHIS2 is packaged as a standard Java Web Archive
(WAR-file) and thus runs on any Servlet containers such as Tomcat and
Jetty.

The DHIS2 team recommends Ubuntu 16.04 LTS operating system, PostgreSQL
database system and Tomcat Servlet container as the preferred
environment for server installations.

Ce chapitre fournit un guide pour la configuration de la teck stack (pile technologique) ci-dessus. Il doit cependant être lu comme un guide opérationnel et non comme une documentation complète pour l'environnement mentionné. Nous nous référons à la documentation officielle d'Ubuntu, PostgreSQL et Tomcat pour des informations détaillées.

The dhis2-tools Ubuntu package automates many of the tasks described in
the guide below and is recommended for most users, especially those who
are not familiar with the command line or administration of servers. It
is described in detail in a separate chapter in this guide.

## Spécifications du serveur { #install_server_specifications }

<!--DHIS2-SECTION-ID:install_server_specifications-->

DHIS2 est une application très exigeante en matière de base de données et nécessite que votre serveur ait suffisamment de mémoire vive, de cœurs d'unité centrale et de disques rapides. Ces recommandations doivent être considérées comme des règles de base et non comme des mesures exactes. DHIS2 évolue de façon linéaire en fonction de la quantité de RAM et du nombre de cœurs de CPU. Plus vous en avez, mieux l'application performe.

  - *RAM:* At least 1 GB memory per 1 million captured data records per
    month or per 1000 concurrent users. At least 4 GB for a small
    instance, 12 GB for a medium instance.

  - *CPU cores:* 4 CPU cores for a small instance, 8 CPU cores for a
    medium or large instance.

  - *Disk:* Ideally use an SSD. Otherwise use a 7200 rpm disk. Minimum
    minimum est de 150 Mb/s ; 200 Mb/s est bon ; 350 Mb/s ou plus est
    ideal. In terms of disk space, at least 60 GB is reccomended, but
    cela dépendra entièrement de la quantité de données contenues dans le
    tableaux des valeurs de données. Les tables d'analyse nécessitent une quantité importante
    disk space. Plan ahead and ensure that your server can be upgraded
    with more disk space as it becomes needed.

## Configuration logicielle requise { #install_software_requirements }

<!--DHIS2-SECTION-ID:install_software_requirements-->

Les versions ultérieures de DHIS2 nécessitent les versions logicielles suivantes pour fonctionner.

  - Java JDK or JRE version 8 or later.

  - Any operating system for which a Java JDK or JRE version 8 exists.

  - PostgreSQL database version 9.6 or later.

  - Extension de base de données PostGIS version 2.2 ou plus.

  - Conteneur de servlet Tomcat version 8.5.50 ou plus, ou autre API de servlet
    Conteneurs de servlets compatibles 3.1.

## Configuration du serveur { #install_server_setup }

<!--DHIS2-SECTION-ID:install_server_setup-->

This section describes how to set up a server instance of DHIS2 on
Ubuntu 16.04 64 bit with PostgreSQL as database system and Tomcat as
Servlet container. This guide is not meant to be a step-by-step guide
per se, but rather to serve as a reference to how DHIS2 can be deployed
on a server. There are many possible deployment strategies, which will
differ depending on the operating system and database you are using, and
other factors. The term *invoke* refers to executing a given command in
a terminal.

For a national server the recommended configuration is a quad-core 2 Ghz
processor or higher and 12 Gb RAM or higher. Note that a 64 bit
operating system is required for utilizing more than 4 Gb of RAM.

For this guide we assume that 8 Gb RAM is allocated for PostgreSQL and 8
GB RAM is allocated for Tomcat/JVM, and that a 64-bit operating system
is used. *If you are running a different configuration please adjust the
suggested values accordingly\!* We recommend that the available memory
is split roughly equally between the database and the JVM. Remember to
leave some of the physical memory to the operating system for it to
perform its tasks, for instance around 2 GB. The steps marked as
*optional*, like the step for performance tuning, can be done at a later
stage.

### Création d'un utilisateur pour exécuter DHIS2 { #install_creating_user }

<!--DHIS2-SECTION-ID:install_creating_user-->

Vous devriez créer un utilisateur dédié pour lancer DHIS2

> **Important**
>
> Vous ne devez pas exécuter le serveur DHIS2 en tant qu'utilisateur privilégié tel que super-utilisateur.

Créez un nouvel utilisateur appelé "dhis" en appelant :

```sh
sudo useradd -d /home/dhis -m dhis -s /bin/false
```

Ensuite, pour définir le mot de passe de votre compte, appelez :

```sh
sudo passwd dhis
```

Créez un mot de passe sécurisé comportant au moins 15 caractères aléatoires.

### Création du répertoire de configuration { #install_creating_config_directory }

<!--DHIS2-SECTION-ID:install_creating_config_directory-->

Commencez par créer un répertoire adapté aux fichiers de configuration de DHIS2. Ce répertoire sera également utilisé pour les applications, les fichiers et les fichiers journaux. Voici un exemple de répertoire :

```sh
mkdir /home/dhis/config
chown dhis:dhis /home/dhis/config
```

DHIS2 will look for an environment variable called *DHIS2\_HOME* to
locate the DHIS2 configuration directory. This directory will be
referred to as *DHIS2\_HOME* in this installation guide. We will define
the environment variable in a later step in the installation process.

### Définition du fuseau horaire et de l'emplacement du serveur { #install_setting_server_tz }

<!--DHIS2-SECTION-ID:install_setting_server_tz-->

Il peut être nécessaire de reconfigurer le fuseau horaire du serveur pour qu'il corresponde au fuseau horaire de l'endroit que le serveur DHIS2 couvrira. Si vous utilisez un serveur privé virtuel, le fuseau horaire par défaut peut ne pas correspondre au fuseau horaire de l'emplacement de votre DHIS2. Vous pouvez facilement reconfigurer le fuseau horaire en appelant la commande ci-dessous et en suivant les instructions.

```sh
sudo dpkg-reconfigure tzdata
```

PostgreSQL est sensible aux paramètres régionaux. Vous devrez donc installer votre emplacement en premier. Pour vérifier les paramètres régionaux existants et en installer de nouveaux (par exemple, Norvégien):

```sh
locale -a
sudo locale-gen nb_NO.UTF-8
```

### Installation de PostgreSQL { #install_postgresql_installation }

<!--DHIS2-SECTION-ID:install_postgresql_installation-->

Install PostgreSQL by
    invoking:

```sh
sudo apt-get install postgresql-10 postgresql-contrib-10 postgresql-10-postgis-2.4
```

Créez un utilisateur non privilégié appelé *dhis* en appelant :

```sh
sudo -u postgres createuser -SDRP dhis
```

Entrez un mot de passe sécurisé à l'invite. Créez une base de données en appelant :

```sh
sudo -u postgres createdb -O dhis dhis2
```

Revenez à votre session en appelant `exit` (sortir). Vous avez maintenant un utilisateur PostgreSQL appelé *dhis* et une base de données appelée *dhis2*.

L'extension *PostGIS* est nécessaire au fonctionnement de plusieurs fonctions SIG/cartographie. DHIS 2 tentera d'installer l'extension PostGIS lors du démarrage. Si l'utilisateur de la base de données DHIS 2 n'a pas l'autorisation de créer des extensions, vous pouvez la créer à partir de la console en utilisant l'utilisateur *postgres* avec les commandes suivantes :

```sh
sudo -u postgres psql -c "create extension postgis;" dhis2
```

Quittez la console et revenez à votre utilisateur précédent en entrant *\\q* suivi de *exit* (quitter).

### Optimisation des performances de PostgreSQL { #install_postgresql_performance_tuning }

<!--DHIS2-SECTION-ID:install_postgresql_performance_tuning-->

Tuning PostgreSQL is necessary to achieve a high-performing system but
is optional in terms of getting DHIS2 to run. PostgreSQL is configured
and tuned through the *postgresql.conf* file which can be edited like
this:

```sh
sudo nano /etc/postgresql/10/main/postgresql.conf
```

et modifez la propriété suivante:

```properties
max_connections = 200
```

Détermine le nombre maximum de connexions autorisées par PostgreSQL.

```properties
shared_buffers = 3200MB
```

Détermine la quantité de mémoire à allouer exclusivement à la mise en cache de PostgreSQL. Ce paramètre contrôle la taille de la mémoire partagée du noyau qui doit être réservée à PostgreSQL. Il doit être fixé à environ 40% de la mémoire totale dédiée à PostgreSQL.

```properties
work_mem = 20MB
```

Détermine la quantité de mémoire utilisée pour les opérations internes de tri et de hachage. Ce paramètre s'applique à chaque connexion et à chaque requête, de sorte qu'une grande quantité de mémoire peut être consommée si cette valeur est trop élevée. Il est essentiel de définir correctement cette valeur pour optimiser les performances d'agrégation de DHIS2.

```properties
maintenance_work_mem = 512MB
```

Determines the amount of memory PostgreSQL can use for maintenance
operations such as creating indexes, running vacuum, adding foreign
keys. Incresing this value might improve performance of index creation
during the analytics generation processes.

```properties
effective_cache_size = 8000MB
```

An estimate of how much memory is available for disk caching by the
operating system (not an allocation) and isdb.no used by PostgreSQL to
determine whether a query plan will fit into memory or not. Setting it
to a higher value than what is really available will result in poor
performance. This value should be inclusive of the shared\_buffers
setting. PostgreSQL has two layers of caching: The first layer uses the
kernel shared memory and is controlled by the shared\_buffers setting.
PostgreSQL delegates the second layer to the operating system disk cache
and the size of available memory can be given with the
effective\_cache\_size setting.

```properties
checkpoint_completion_target = 0.8
```

Définit la mémoire utilisée pour la mise en mémoire tampon pendant le processus d'écriture WAL. Augmenter cette valeur peut améliorer le débit dans les systèmes à forte densité d'écriture.

```properties
synchronous_commit = off
```

Spécifie si les transactions doivent attendre que les enregistrements WAL soient écrits sur le disque avant d'être renvoyées au client ou non. Si cette option est désactivée, les performances seront considérablement améliorées. Cela implique également qu'il y aura un léger décalage entre le moment où la transaction au client est déclarée réussie et le moment où elle est réellement sûre, mais l'état de la base de données ne peut pas être corrompu et c'est une bonne alternative pour les systèmes exigeants en termes de performances et d'écriture comme DHIS2.

```properties
wal_writer_delay = 10000ms
```

Spécifie le décalage entre les opérations d'écriture WAL. Y définir une valeur élevée permettra d'améliorer les performances des systèmes à forte densité d'écriture, car de nombreuses opérations d'écriture peuvent être exécutées en un seul vidage sur le disque.

```properties
random_page_cost = 1.1
```

*SSD uniquement*: Définit l'estimation par le planificateur de requêtes du coût d'une page de disque non extraite de manière séquentielle. Une valeur faible incitera le système à préférer les scans d'index aux scans séquentiels. Une valeur faible convient aux bases de données qui fonctionnent sur des disques SSD ou qui sont massivement mises en cache dans la mémoire. La valeur par défaut est 4.0, ce qui est raisonnable pour les disques traditionnels.

```properties
max_locks_per_transaction = 96
```

Spécifie le nombre moyen de verrous d'objets alloués pour chaque transaction. Cette valeur est principalement définie pour permettre la réalisation des mises à niveau de routine qui touchent un grand nombre de tableaux.

Redémarrez PostgreSQL en appelant la commande suivante :

```sh
sudo /etc/init.d/postgresql restart
```

### System configuration { #install_database_configuration } 

<!--DHIS2-SECTION-ID:install_database_configuration-->

The database connection information is provided to DHIS2 through a
configuration file called *dhis.conf*. Create this file and save it in
the *DHIS2\_HOME* directory. As an example this location could be:

```sh
sudo -u dhis nano /home/dhis/config/dhis.conf
```

Un fichier de configuration pour PostgreSQL correspondant à la configuration ci-dessus a les propriétés suivantes :

```properties
# ---------------------------------------------------------------------- { #- } 
# Database connection { #database-connection } 
# ---------------------------------------------------------------------- { #- } 

# Hibernate SQL dialect { #hibernate-sql-dialect } 
connection.dialect = org.hibernate.dialect.PostgreSQLDialect

# JDBC driver class { #jdbc-driver-class } 
connection.driver_class = org.postgresql.Driver

# Database connection URL { #database-connection-url } 
connection.url = jdbc:postgresql:dhis2

# Database username { #database-username } 
connection.username = dhis

# Database password { #database-password } 
connection.password = xxxx

# ---------------------------------------------------------------------- { #- } 
# Server { #server } 
# ---------------------------------------------------------------------- { #- } 

# Enable secure settings if deployed on HTTPS, default 'off', can be 'on' { #enable-secure-settings-if-deployed-on-https-default-off-can-be-on } 
# server.https = on { #serverhttps-on } 

# Server base URL { #server-base-url } 
# server.base.url = https://server.com/ { #serverbaseurl-httpsservercom } 
```

It is strongly recommended to enable the *server.https* setting and deploying DHIS 2 over the encrypted HTTPS protocol. This setting will enable e.g. secure cookies. HTTPS deployment is required when this setting is enabled.

The *server.base.url* setting refers to the URL at which the system is accessed by end users over the network.

Note that the configuration file supports environment variables. This
means that you can set certain properties as environment variables and
have them resolved by DHIS 2, e.g. like this where *DB\_PASSWD* is the
name of the environment variable:

```properties
connection.password = ${DB_PASSWD}
```


Note that this file contains the password for your DHIS2 database in clear
text so it needs to be protected from unauthorized access. To do this, 
invoke the following command which ensures that only the dhis user
which owns the file is allowed to read it:

```sh
chmod 0600 dhis.conf
```

### Installation de Java { #install_java_installation }

<!--DHIS2-SECTION-ID:install_java_installation-->

The recommended Java JDK for DHIS 2 is OpenJDK 8. You can issue the following command to install OpenJDK 8:

```
sudo apt-get install openjdk-8-jdk
```

Verify that your installation is okay by invoking:

```
java -version
```

### Installation de Tomcat et DHIS2 { #install_tomcat_dhis2_installation }

<!--DHIS2-SECTION-ID:install_tomcat_dhis2_installation-->

Pour installer le conteneur de servlet Tomcat, nous utiliserons le package utilisateur de Tomcat en appelant :

```sh
sudo apt-get install tomcat8-user
```

This package lets us easily create a new Tomcat instance. The instance
will be created in the current directory. An appropriate location is the
home directory of the dhis user:

```sh
cd /home/dhis/
sudo tomcat8-instance-create tomcat-dhis
sudo chown -R dhis:dhis tomcat-dhis/
```

This will create an instance in a directory called *tomcat-dhis*. Note
that the tomcat7-user package allows for creating any number of dhis
instances if that is desired.

Next edit the file *tomcat-dhis/bin/setenv.sh* and add the lines below.
The first line will set the location of your Java Runtime Environment,
the second will dedicate memory to Tomcat and the third will set the
location for where DHIS2 will search for the *dhis.conf* configuration
file. Please check that the path the Java binaries are correct as they
might vary from system to system, e.g. on AMD systems you might see
*/java-8-openjdk-amd64* Note that you should adjust this to your
environment:

```sh
export JAVA_HOME='/usr/lib/jvm/java-1.8.0-openjdk-amd64/'
export JAVA_OPTS='-Xmx7500m -Xms4000m'
export DHIS2_HOME='/home/dhis/config'
```

The Tomcat configiration file is located in
*tomcat-dhis/conf/server.xml*. The element which defines the connection
to DHIS is the *Connector* element with port 8080. You can change the
port number in the Connector element to a desired port if necessary. 
The *relaxedQueryChars* attribute is necessary to allow certain characters 
in URLs used by the DHIS2 front-end.

```xml
<Connector port="8080" protocol="HTTP/1.1"
  connectionTimeout="20000"
  redirectPort="8443"
  relaxedQueryChars="[]" />
```

The next step is to download the DHIS2 WAR file and place it into the
webapps directory of Tomcat. You can download the DHIS2 version 2.31 WAR
release like this (replace 2.31 with your preferred version if
necessary):

```sh
wget https://releases.dhis2.org/2.33/dhis.war
```

Alternatively, for patch releases, the folder structure is based on the patch
release ID in a subfolder under the main release. E.g. you can download
the DHIS2 version 2.31.1 WAR release like this (replace 2.31 with your
preferred version, and 2.31.1 with you preferred patch, if necessary):

```
wget https://releases.dhis2.org/2.33/2.33.1/dhis.war
```

Move the WAR file into the Tomcat webapps directory. We want to call the
WAR file ROOT.war in order to make it available at localhost directly
without a context path:

```sh
mv dhis.war tomcat-dhis/webapps/ROOT.war
```

DHIS2 should never be run as a privileged user. After you have modified
the setenv.sh file, modify the startup script to check and verify that the
script has not been invoked as root.

```sh
#!/bin/sh { #binsh } 
set -e

if [ "$(id -u)" -eq "0" ]; then
  echo "This script must NOT be run as root" 1>&2
  exit 1
fi

export CATALINA_BASE="/home/dhis/tomcat-dhis"
/usr/share/tomcat8/bin/startup.sh
echo "Tomcat started"
```

### Fonctionnement de DHIS2 { #install_running_dhis2 }

<!--DHIS2-SECTION-ID:install_running_dhis2-->

DHIS2 peut désormais être lancé en appelant :

    sudo -u dhis tomcat-dhis/bin/startup.sh

> **Important**
>
> Le serveur DHIS2 ne doit jamais être exécuté en mode super-utilisateur ou autre utilisateur privilégié.

DHIS2 peut être arrêté en appelant :

    sudo -u dhis tomcat-dhis/bin/shutdown.sh

Pour surveiller le comportement de Tomcat, le journal est la principale source d'information. Le journal peut être consulté avec la commande suivante :

    tail -f tomcat-dhis/logs/catalina.out

En supposant que le fichier WAR s'appelle ROOT.war, vous pouvez maintenant accéder à votre instance DHIS2 à l'URL suivante :

    http://localhost:8080

## Base URL configuration { #base-url-configuration } 

To set the base URL of the DHIS2 instance, you can specify the following property in the `dhis.conf` configuration file. This URL should point to the location where end users can reach DHIS2 over the network.

```properties
server.base.url = https://play.dhis2.org/dev
```

## Configuration de l'entrepôt de fichiers { #install_file_store_configuration }

<!--DHIS2-SECTION-ID:install_file_store_configuration-->

DHIS2 is capable of capturing and storing files. By default, files will
be stored on the local file system of the server which runs DHIS2 in a *files*
directory under the *DHIS2\_HOME* external directory location. 

You can also configure DHIS2 to store files on cloud-based storage
providers. AWS S3 is the only supported provider currently. To enable
cloud-based storage you must define the following addtional properties
in your *dhis.conf* file:

```properties
# File store provider. Currently 'filesystem' and 'aws-s3' are supported. { #file-store-provider-currently-filesystem-and-aws-s3-are-supported } 
filestore.provider = 'aws-s3'

# Directory in external directory on local file system and bucket on AWS S3 { #directory-in-external-directory-on-local-file-system-and-bucket-on-aws-s3 } 
filestore.container = files

# The following configuration is applicable to cloud storage only (AWS S3) { #the-following-configuration-is-applicable-to-cloud-storage-only-aws-s3 } 

# Datacenter location. Optional but recommended for performance reasons. { #datacenter-location-optional-but-recommended-for-performance-reasons } 
filestore.location = eu-west-1

# Username / Access key on AWS S3 { #username-access-key-on-aws-s3 } 
filestore.identity = xxxx

# Password / Secret key on AWS S3 (sensitive) { #password-secret-key-on-aws-s3-sensitive } 
filestore.secret = xxxx
```

This configuration is an example reflecting the defaults and should be
changed to fit your needs. In other words, you can omit it entirely if
you plan to use the default values. If you want to use an external
provider the last block of properties need to be defined, as well as the
*provider* property being set to a supported provider (currently only
AWS S3).

> **Remarque**
>
> Si vous avez configuré le stockage SUR cloud dans dhis.conf, tous les fichiers que vous téléchargez
> ou les fichiers générés par le système utiliseront le stockage sur cloud.

Pour un système de production, la configuration initiale de l'entrepôt de fichiers doit être soigneusement étudiée, car le déplacement des fichiers entre les fournisseurs de stockage tout en conservant l'intégrité des références de la base de données peut s'avérer complexe. Gardez à l'esprit que le contenu de l'entrepôt de fichiers peut contenir des informations sensibles et intégrales et qu'il est recommandé de protéger l'accès au dossier et de s'assurer qu'un plan de sauvegarde est prévu dans le cadre d'une implémentation de production.

> **Remarque**
>
> AWS S3 est le seul fournisseur pris en charge, mais d'autres fournisseurs devraient
> être ajoutés à l'avenir, comme Google Cloud Store et Azure Blob Storage.
> Faites-nous savoir si vous avez un cas d'utilisation pour des fournisseurs supplémentaires.

## Configuration du compte de service Google { #install_google_service_account_configuration }

<!--DHIS2-SECTION-ID:install_google_service_account_configuration-->

DHIS2 peut se connecter à plusieurs API de services Google. Par exemple, le SIG de DHIS2 peut utiliser l'API de Google Earth Engine pour charger des couches de cartes. Pour fournir des jetons d'accès à l'API, vous devez configurer un compte de service Google et créer une clé privée :

  - Créez un compte de service Google. Veuillez consulter la [plateforme d'identification
    plateforme](https://developers.google.com/identity/protocols/OAuth2ServiceAccount#overview)
     

  - Visitez la [Console Google Cloud](https://console.cloud.google.com)
    et allez dans API Manager \> Identifiants \> Créer des identifiants \>
    Clé du compte de service. Sélectionnez votre compte de service et JSON comme type de
    clé et cliquez sur Créer.

  - Renommez la clé JSON en *dhis-google-auth.json*.

After downloading the key file, put the *dhis-google-auth.json* file in
the DHIS2\_HOME directory (the same location as the *dhis.conf* file).
As an example this location could be:

    /home/dhis/config/dhis-google-auth.json

## Configuration de LDAP { #install_ldap_configuration }

<!--DHIS2-SECTION-ID:install_ldap_configuration-->

DHIS2 peut utiliser un serveur LDAP pour l'authentification des utilisateurs.
L'authentification LDAP nécessite que chaque entrée corresponde à un utilisateur dans la base de données DHIS2. L'utilisateur DHIS2 sera utilisé pour représenter des autorités / rôles d’utilisateur.

To set up LDAP authentication you need to configure the LDAP server URL,
a manager user and an LDAP search base and search filter. This
configuration should be done in the main DHIS 2 configuration file
(dhis.conf). LDAP users, or entries, are identified by distinguished
names (DN from now on). An example configuration looks like this:

```properties
# LDAP server URL { #ldap-server-url } 
ldap.url = ldaps://domain.org:636

# LDAP manager entry distinguished name { #ldap-manager-entry-distinguished-name } 
ldap.manager.dn = cn=johndoe,dc=domain,dc=org

# LDAP manager entry password { #ldap-manager-entry-password } 
ldap.manager.password = xxxx

# LDAP base search { #ldap-base-search } 
ldap.search.base = dc=domain,dc=org

# LDAP search filter { #ldap-search-filter } 
ldap.search.filter = (cn={0})
```

Les propriétés de configuration LDAP sont expliquées ci-dessous :

  - *ldap.url :* L'URL du serveur LDAP avec lequel s'authentifier
    L'utilisation du SSL ou du cryptage est fortement recommandée afin de
    sécuriser l’authentification. Prenons l'exemple de l'URL suivant
    *ldaps://domain.org:636*, où ldaps fait référence au protocole,
    *domain.org* fait référence au nom de domaine ou à l'adresse IP, et *636*
    fait référence au port (636 est la valeur par défaut pour LDAPS).

  - *ldap.manager.dn:* Un utilisateur du gestionnaire LDAP doit être relié au 
    serveur LDAP pour permettre le processus d'authentification des utilisateurs. 
    fait référence au DN de cette entrée, c'est à dire que ce n'est pas l'utilisateur qui va
    authentifié lors de la connexion à DHIS2, mais plutôt l'utilisateur qui
    est relié au serveur LDAP afin d'effectuer l'authentification.

  - *ldap.manager.password :* Le mot de passe de l'utilisateur du gestionnaire LDAP.

  - *ldap.search.base :* La base de recherche ou le nom unique de
    l'objet de la base de recherche, qui définit l'emplacement dans le répertoire
    à partir duquel commence la recherche LDAP.

  - *ldap.search.filter :* Le filtre permettant de faire correspondre les DN des entrées dans le
    répertoire LDAP. La variable {0} sera remplacée par le nom d'utilisateur DHIS2,
    ou autrement, l'identifiant LDAP défini pour l'utilisateur
    avec le nom d'utilisateur fourni.

DHIS2 utilisera le nom d'utilisateur et le mot de passe fournis pour essayer de s'authentifier avec une entrée du serveur LDAP, puis recherchera des rôles/autorités d'utilisateur auprès d'un utilisateur DHIS2 correspondant. Cela implique qu'un utilisateur doit avoir une entrée correspondante dans le répertoire LDAP ainsi qu'un utilisateur DHIS2 pour pouvoir se connecter.

Lors de l'authentification, DHIS2 essaiera de se connecter au serveur LDAP en utilisant l'URL du serveur LDAP configuré ainsi que le DN et le mot de passe du gestionnaire. Une fois la connexion établie, il recherche une entrée dans le répertoire à l'aide de la base de recherche LDAP et du filtre de recherche configurés.

The {0} variable in the configured filter will be substituted beforing
applying the filter. By default, it will be substituted by the supplied
username. You can also set a custom LDAP identifier on the relevant
DHIS2 user account. This can be done throught the DHIS2 user module user
interface in the add or edit screen by setting the "LDAP identifier"
property. When set, the LDAP identifier will be subsituted for the {0}
variable in the filter. This feature is useful when the LDAP common name
is not suitable or cannot for some reason be used as a DHIS2 username.

## Configuration du cryptage{ #install_encryption_configuration }

<!--DHIS2-SECTION-ID:install_encryption_configuration-->

DHIS2 allows for encryption of data. This however requires some extra
setup.

### Java Cryptography Extension { #install_java_cryptography_extension } 

<!--DHIS2-SECTION-ID:install_java_cryptography_extension-->

DHIS2 uses an encryption algorithm classified as strong and therefore
requires the *Java Cryptography Extension (JCE) Unlimited Strength
Jurisdiction Policy Files* to be installed. These files can be installed
through these steps:

1.  Download the JCE Unlimited Strength Jurisdiction Policy Files for
    your java version of Java from the Oracle Web site. Scroll down to
    the "Java Cryptography Extension (JCE) Unlimited Strength
    Jurisdiction Policy Files" section. It is important that the version
    of the files match the version of Java on your
     

    [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.htm)

2.  Extract the downloaded ZIP archive. It contains two JAR files:
    *local\_policy.jar* and *US\_export\_policy.jar*.

3.  Locate the JDK directory of your Java installation. From there,
    navigate into the *jre/security* directory. On Ubuntu it is often
    found at */usr/lib/jvm/java-8-oracle/jre/lib/security*.

4.  (Optional) Back up your existing *local\_policy.jar* and
    *US\_export\_policy.jar* in case you want to revert to them later.

5.  Copy the *local\_policy.jar* and *US\_export\_policy.jar* files into
    the security folder. You should now have the following files which
    completes the installation. Remember to restart your servlet
    container for it to take effect.

        /usr/lib/jvm/java-8-oracle/jre/lib/security/local_policy.jar
        /usr/lib/jvm/java-8-oracle/jre/lib/security/US_export_policy.jar

### Password configuration { #install_password_configuration } 

<!--DHIS2-SECTION-ID:install_password_configuration-->

To provide security to the encryption algorithm you will have to set a
password in the *dhis.conf* configuration file through the
*encryption.password* property:

```properties
    encryption.password = xxxx
```

The *encryption.password* property is the password used when encrypting
and decrypting data in the database. Note that the password must not be
changed once it has been set and data has been encrypted as the data can
then no longer be decrypted. 

The password must be at least **24 characters long**. A mix of numbers 
and lower- and uppercase letters are recommended. The encryption password 
must be kept secret.

### Considerations for encryption { #install_considerations_for_encryption } 

<!--DHIS2-SECTION-ID:install_considerations_for_encryption-->

*A word of caution:* It is not possible to recover encrypted data if the
encryption password is lost or changed. Conversely, the encryption
provides no security if the password is compromised. Hence, great
consideration should be given to storing the password in a safe place.

## Configuration de la base de données réplica en lecture { #install_read_replica_configuration }

<!--DHIS2-SECTION-ID:install_read_replica_configuration-->

DHIS 2 permet d'utiliser des réplicas en lecture seule de la base de données principale (la base de données principale de DHIS 2). L'objectif des réplicas en lecture est d'améliorer les performances des requêtes en lecture de la base de données et d'augmenter les capacités au-delà des contraintes d'une seule base de données. Les opérations à forte intensité de lecture en bénéficieront, notamment les requêtes d'analyse et les requêtes d'événements.

La configuration exige que vous ayez créé une ou plusieurs instances répliquées de la base de données principale de DHIS 2. PostgreSQL permet de le faire grâce à un concept appelé *réplication en flux*. La configuration des réplicas en lecture pour PostgreSQL n'est pas abordée dans ce guide.

Read replicas can be defined in the *dhis.conf* configuration file. You
can specify up to 5 read replicas per DHIS 2 instance. Each read replica
is denoted with a number between 1 and 5. The JDBC connection URL must
be defined per replica. The username and password can be specified; if
not, the username and password for the master database will be used
instead.

The configuration for read replicas in *dhis.conf* looks like the below.
Each replica is specified with the configuration key *readN* prefix,
where N refers to the replica number.

```properties
# Read replica 1 configuration { #read-replica-1-configuration } 

# Database connection URL, username and password { #database-connection-url-username-and-password } 
read1.connection.url = jdbc:postgresql://127.0.0.11/dbread1
read1.connection.username = dhis
read1.connection.password = xxxx

# Read replica 2 configuration { #read-replica-2-configuration } 

# Database connection URL, username and password { #database-connection-url-username-and-password } 
read2.connection.url = jdbc:postgresql://127.0.0.12/dbread2
read2.connection.username = dhis
read2.connection.password = xxxx

# Read replica 3 configuration { #read-replica-3-configuration } 

# Database connection URL, fallback to master for username and password { #database-connection-url-fallback-to-master-for-username-and-password } 
read3.connection.url = jdbc:postgresql://127.0.0.13/dbread3
```

Vous devez redémarrer votre conteneur de servlets pour que les modifications s'appliquent. DHIS 2 répartira automatiquement la charge entre les réplicas en lecture. L'ordre des réplicas n'a pas d'importance.

## Configuration du cluster de serveur Web { #install_web_server_cluster_configuration }

<!--DHIS2-SECTION-ID:install_web_server_cluster_configuration-->

Cette section décrit comment configurer l'application  DHIS 2 pour qu'elle s'exécute dans un cluster.

### Présentation du clustering { #install_cluster_configuration_introduction }

<!--DHIS2-SECTION-ID:install_cluster_configuration_introduction-->

Le clustering est une technique courante permettant d'améliorer l'évolutivité et la disponibilité du système. Elle consiste à installer plusieurs serveurs web, par exemple des instances Tomcat, pour qu'ils servent une seule application. Le clustering permet d'*étendre* une application de manière à ce que de nouveaux serveurs puissent être ajoutés afin d'améliorer ses performances. Elle garantit également une *grande disponibilité*, car le système peut tolérer que des instances tombent en panne sans pour autant rendre le système inaccessible aux utilisateurs.

Quelques paramètres doivent être configurés pour que DHIS 2 s'exécute dans un cluster.

* Each DHIS 2 instance must specify the other DHIS 2 instance members of 
the cluster in *dhis.conf*.

* Un entrepôt de données Redis doit être installé et les informations de connexion doivent
be provided for each DHIS 2 application instance in *dhis.conf*.

* Les instances et les serveurs DHIS 2 doivent partager le même dossier *fichiers* utilisé pour 
les applications et les téléchargements de fichiers, soit par l'intermédiaire de l'option de *stockage de fichiers cloud AWS S3*, 
soit par un lecteur réseau partagé.

* A load balancer such as nginx must be configured to distribute Web requests
dans les instances du cluster.

### DHIS 2 instance cluster configuration { #install_cluster_configuration } 

<!--DHIS2-SECTION-ID:install_cluster_configuration-->

When setting up multiple Tomcat instances there is a need for making the
instances aware of each other. This awareness will enable DHIS 2 to keep
the local data (Hibernate) caches in sync and in a consistent state.
When an update is done on one instance, the caches on the other
instances must be notified so that they can be invalidated and avoid
becoming stale.

A DHIS 2 cluster setup is based on manual configuration of each
instance. For each DHIS 2 instance one must specify the public
*hostname* as well as the hostnames of the other instances participating
in the cluster.

The hostname of the server is specified using the *cluster.hostname*
configuration property. Additional servers which participate in the
cluster are specified using the *cluster.members* configuration
property. The property expects a list of comma separated values where
each value is of the format *host:port*.

The hostname must be visible to the participating servers on the network
for the clustering to work. You might have to allow incoming and
outgoing connections on the configured port numbers in the firewall.

The port number of the server is specified using the*cluster.cache.port*
configuration property. The remote object port used for registry receive
calls is specified using *cluster.cache.remote.object.port*. Specifying
the port numbers is typically only useful when you have multiple cluster
instances on the same server / virtual machine or if you need to
explicitly specify the ports to be used so as to have them configured in
firewall. When running cluster instances on separate servers / virtual
machines it is often appropriate to use the default port number and omit
the ports configuration properties. If omitted, 4001 will be assigned as
the listener port and a random free port will be assigned as the remote
object port.

An example setup for a cluster of two web servers is described below.
For *server A* available at hostname *193.157.199.131* the following can
be specified in *dhis.conf*:

```properties
# Cluster configuration for server A { #cluster-configuration-for-server-a } 

# Hostname for this web server { #hostname-for-this-web-server } 
cluster.hostname = 193.157.199.131

# Ports for cache listener, can be omitted { #ports-for-cache-listener-can-be-omitted } 
cluster.cache.port = 4001
cluster.cache.remote.object.port = 5001

# List of Host:port participating in the cluster { #list-of-hostport-participating-in-the-cluster } 
cluster.members = 193.157.199.132:4001
```

For *server B* available at hostname *193.157.199.132* the following can
be specified in *dhis.conf* (notice how port configuration is omitted):

```properties
# Cluster configuration for server B { #cluster-configuration-for-server-b } 

# Hostname for this web server { #hostname-for-this-web-server } 
cluster.hostname = 193.157.199.132

# List of servers participating in cluster { #list-of-servers-participating-in-cluster } 
cluster.members = 193.157.199.131:4001
```

You must restart each Tomcat instance to make the changes take effect.
The two instances have now been made aware of each other and DHIS 2 will
ensure that their caches are kept in sync.

### Configuration du cluster de stockage de données partagé Redis { #install_cluster_configuration_redis }

<!--DHIS2-SECTION-ID:install_cluster_configuration_redis-->

In a cluster setup, a *Redis* instance is required and will handle
shared user sessions, application cache and cluster node leadership.

For optimum performance, *Redis Keyspace events* for _generic commands_ and _expired events_ need to be enabled in the Redis Server. If you are using a cloud platform-managed Redis server (like AWS ElastiCache for Redis or Azure Cache for Redis) you will have to enable keyspace event notifications using the respective cloud interfaces. If you are setting up a standalone Redis server, enabling keyspace event notifications can be done in the *redis.conf* file by adding or uncommenting the following line:

```
notify-keyspace-events Egx
```

DHIS2 will connect to Redis if the *redis.enabled* configuration
property in *dhis.conf* is set to *true* along with the following properties:

- *redis.host* : Spécifie où le serveur Redis est exécuté. La valeur par défaut est *localhost*. Obligatoire.

- *redis.port* : Spécifie le port sur lequel le serveur Redis écoute. La valeur par défaut est *6379*. Facultatif.

- *redis.password* : Spécifie le mot de passe d'authentification. Si un mot de passe n'est pas nécessaire, il peut rester vide.

- *redis.use.ssl* : Spécifie si SSL est activé sur le serveur Redis. La valeur par défaut est *faux*. Facultatif.

When Redis is enabled, DHIS2 will automatically assign one of the
running instances as the leader of the cluster. The leader instance will
be used to execute jobs or scheduled tasks that should be run
exclusively by one instance. Optionally you can configure the
*leader.time.to.live.minutes* property in *dhis.conf* to set up how
frequently the leader election needs to occur. It also gives an
indication of how long it would take for another instance to take over
as the leader after the previous leader has shutdown/crashed. The
default value is 2 minutes. Note that assigning a leader in the cluster
is only done if Redis is enabled. An example snippet of the *dhis.conf*
configuration file with Redis enabled and leader election time
configured is shown below.

```properties
# Redis Configuration { #redis-configuration } 

redis.enabled = true

redis.host = 193.158.100.111

redis.port = 6379

redis.password = <your password>

redis.use.ssl = false

# Optional, defaults to 2 minutes { #optional-defaults-to-2-minutes } 
leader.time.to.live.minutes=4 
```

### Configuration du dossier de fichiers { #files-folder-configuration }

DHIS 2 va stocker plusieurs types de fichiers hors de l'application elle-même, tels que des applications, des fichiers sauvegardés lors de saisies de données et des avatars d'utilisateurs. Lorsqu'il est déployé dans un cluster, l'emplacement de ces fichiers doit être partagé entre toutes les instances. Sur le système de fichiers local, l'emplacement est le suivant :

```
{DHIS2_HOME}/files
```

Here, `DHIS2_HOME` refers to the location of the DHIS 2 configuration file
as specifiec by the DHIS 2 environment variable, and `files` is the file
folder immediately below.

Il existe deux manières d'obtenir un emplacement partagé :

* Utiliser l'option *Stockage de fichiers cloud AWS S3*. Les fichiers seront stockés dans un
compartiment S3 qui est automatiquement partagé entre toutes les instances DHIS 2 présentes dans le cluster.
Consulter la section *Configuration de l'entrepôt de fichiers* pour obtenir des conseils.
* Set up a shared folder which are shared among all DHIS 2 instances and
présents dans le cluster. Sur Linux, cela peut être réalisé avec *NFS* (Network File System)
qui est un protocole de système de fichiers en réseau. Notez que seuls les sous-dossiers `fichiers`
sous `DHIS2_HOME` doit être partagé, pas le dossier parent.

### Configuration de l'équilibreur de charge { #install_load_balancing }

<!--DHIS2-SECTION-ID:install_load_balancing-->

Lorsqu'un cluster d'instances Tomcat est installé, un *équilibreur de charge* peut être utilisé pour acheminer les requêtes web entrantes vers les instances backend du cluster. Un équilibreur de charge veille à ce que la charge soit répartie uniformément entre les instances du cluster. Il détectera également l'indisponibilité d'une instance et, le cas échéant, arrêtera les requêtes de routine vers cette instance et utilisera les autres instances disponibles.

L'équilibrage de la charge peut être réalisé de plusieurs manières. *nginx* est une approche simple. En l'utilisant, vous devrez définir un élément *upstream* qui énumère l'emplacement des instances backend, puis utiliser cet élément dans le bloc d'emplacement *proxy*.

```text
http {

  # Upstream element with sticky sessions

  upstream dhis_cluster {
    ip_hash;
    server 193.157.199.131:8080;
    server 193.157.199.132:8080;
  }

  # Proxy pass to backend servers in cluster

  server {
    listen 80;

    location / {
      proxy_pass   http://dhis_cluster/;
    }
  }
}  
```

DHIS 2 conserve l'état des sessions utilisateur côté serveur dans une certaine mesure. L'utilisation de "sessions persistantes" est une approche simple qui permet d'éviter de reproduire l'état de la session du serveur en acheminant les demandes d'un même client vers le même serveur. La directive *ip\_hash* de l'élément upstream garantit cette fonction.

Plusieurs instructions ont été omises par souci de concision dans l'exemple ci-dessus. Consultez la section proxy inverse pour obtenir un guide détaillé.

## Analytics cache configuration { #install_analytics_cache_configuration } 

<!--DHIS2-SECTION-ID:install_analytics_cache_configuration-->

DHIS 2 supports a server-side cache for analytics API responses, used by all of the analytics web apps. This cache sits within the DHIS 2 application and hence is protected by the DHIS 2 authentication and security layer. You can configure the expiration of cached entries in seconds. To enable the cache you can define the `analytics.cache.expiration` property in `dhis.conf`. The example below enabled the cache and sets expiration to one hour.

```properties
analytics.cache.expiration = 3600
```

## Starting Tomcat at boot time { #install_starting_tomcat_boot_time } 

<!--DHIS2-SECTION-ID:install_starting_tomcat_boot_time-->

In certain situations a server might reboot unexpectedly. It is hence
preferable to have Tomcat start automatically when the server starts. To
achieve that the first step is to create init scripts. Create a new file
called `tomcat` and paste the below content into it (adjust the HOME
variable to your environment):

```sh
#!/bin/sh { #binsh } 
#Tomcat init script { #tomcat-init-script } 

HOME=/home/dhis/tomcat/bin

case $1 in
start)
        sh ${HOME}/startup.sh
        ;;
stop)
        sh ${HOME}/shutdown.sh
        ;;
restart)
        sh ${HOME}/shutdown.sh
        sleep 5
        sh ${HOME}/startup.sh
        ;;
esac
exit 0
```

Move the script to the init script directory and make them executable by
invoking:

    sudo mv tomcat /etc/init.d
    sudo chmod +x /etc/init.d/tomcat

Next make sure the tomcat init script will be invoked during system
startup and shutdown:

    sudo /usr/sbin/update-rc.d -f tomcat defaults 81

Tomcat will now be started at system startup and stopped at system
shutdown. If you later need to revert this you can replace `defaults`
with `remove` and invoke the above commands again.

## Configuration du proxy inverse { #install_reverse_proxy_configuration }

<!--DHIS2-SECTION-ID:install_reverse_proxy_configuration-->

Un proxy inverse est un serveur proxy qui agit pour le compte d'un autre serveur. L'utilisation d'un proxy inverse en combinaison avec un conteneur de servlets n'est pas obligatoire mais présente de nombreux avantages :

  - Les requêtes peuvent être mises en correspondance et transmises à plusieurs conteneurs de servlets.
    Cela rend le système plus flexible et facilite l'exécution de plusieurs
    instances DHIS2 sur un même serveur. Cela permet également de
    modifier la configuration du serveur interne sans affecter les clients.

  - L'application DHIS2 peut être exécutée dans un mode autre que super-utilisateur sur un port
    différent de 80, ce qui réduit la vulnérabilité face au piratage de
    détournement.

  - Le proxy inverse peut agir comme un serveur SSL unique et être configuré
    pour inspecter les demandes de contenu malveillant, enregistrer les demandes et
    les réponses et fournir des messages d'erreur non sensibles qui
    améliorer la sécurité.

### Configuration de base de Nginx { #install_basic_nginx_setup }

<!--DHIS2-SECTION-ID:install_basic_nginx_setup-->

We recommend using [nginx](http://www.nginx.org) as reverse proxy due to
its low memory footprint and ease of use. To install invoke the
following:

    sudo apt-get install nginx

nginx peut maintenant être lancé, rechargé et arrêté avec les commandes suivantes :

    sudo /etc/init.d/nginx start
    sudo /etc/init.d/nginx reload
    sudo /etc/init.d/nginx stop

Now that we have installed nginx we will now continue to configure
regular proxying of requests to our Tomcat instance, which we assume
runs at *http://localhost:8080*. To configure nginx you can open the
configuration file by invoking:

    sudo nano /etc/nginx/nginx.conf

nginx configuration is built around a hierarchy of blocks representing
http, server and location, where each block inherit settings from parent
blocks. The following snippet will configure nginx to proxy pass
(redirect) requests from port 80 (which is the port nginx will listen on
by default) to our Tomcat instance. Include the following configuration
in nginx.conf:

```text
http {
  gzip on; # Enables compression, incl Web API content-types
  gzip_types
    "application/json;charset=utf-8" application/json
    "application/javascript;charset=utf-8" application/javascript text/javascript
    "application/xml;charset=utf-8" application/xml text/xml
    "text/css;charset=utf-8" text/css
    "text/plain;charset=utf-8" text/plain;

  server {
    listen               80;
    client_max_body_size 10M;

    # Proxy pass to servlet container

    location / {
      proxy_pass                http://localhost:8080/;
      proxy_redirect            off;
      proxy_set_header          Host               $host;
      proxy_set_header          X-Real-IP          $remote_addr;
      proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto  http;
      proxy_buffer_size         128k;
      proxy_buffers             8 128k;
      proxy_busy_buffers_size   256k;
      proxy_cookie_path         ~*^/(.*) "/$1; SameSite=Lax";
    }
  }
}
```

Vous pouvez désormais accéder à votre instance DHIS2 à l'adresse *http://localhost*. Etant donné que le proxy inverse a été installé, nous pouvons améliorer la sécurité en configurant Tomcat pour qu'il n'écoute que les connexions locales. Dans */conf/server.xml*, vous pouvez ajouter un attribut *address* avec la valeur *localhost* à l'élément Connector pour HTTP 1.1 comme suit :

```xml
<Connector address="localhost" protocol="HTTP/1.1" />
```

### Activation de SSL avec nginx { #install_enabling_ssl_on_nginx }

<!--DHIS2-SECTION-ID:install_enabling_ssl_on_nginx-->

In order to improve security it is recommended to configure the server
running DHIS2 to communicate with clients over an encrypted connection
and to identify itself to clients using a trusted certificate. This can
be achieved through SSL which is an cryptographic communication protocol
running on top of TCP/IP. First, install the required *openssl* library:

    sudo apt-get install openssl

Pour configurer nginx de manière à ce qu'il utilise SSL, vous aurez besoin d'un certificat SSL approprié provenant d'un fournisseur SSL. Le coût d'un certificat varie en fonction de la puissance du cryptage. Un certificat abordable de [Rapid SSL Online (http://www.rapidsslonline.com) devrait répondre à la plupart des besoins. Pour générer le CSR (demande de signature de certificat), vous pouvez appeler la commande ci-dessous. À l'invite du *Nom commun*, entrez le nom du domaine qualifié pour le site que vous sécurisez.

    openssl req -new -newkey rsa:2048 -nodes -keyout server.key -out server.csr

Après avoir reçu vos fichiers de certificat (.pem ou .crt), vous devez les placer avec le fichier server.key généré, dans un emplacement accessible par nginx. Le répertoire où se trouve votre fichier nginx.conf peut servir d'emplacement à cet effet.

Below is an nginx server block where the certificate files are named
server.crt and server.key. Since SSL connections usually occur on port
443 (HTTPS) we pass requests on that port (443) on to the DHIS2 instance
running on *http://localhost:8080* The first server block will rewrite
all requests connecting to port 80 and force the use of HTTPS/SSL. This
is also necessary because DHIS2 is using a lot of redirects internally
which must be passed on to use HTTPS. Remember to replace
*\<server-ip\>* with the IP of your server. These blocks should replace
the one from the previous section.

```text
http {
  gzip on; # Enables compression, incl Web API content-types
  gzip_types
    "application/json;charset=utf-8" application/json
    "application/javascript;charset=utf-8" application/javascript text/javascript
    "application/xml;charset=utf-8" application/xml text/xml
    "text/css;charset=utf-8" text/css
    "text/plain;charset=utf-8" text/plain;

  # HTTP server - rewrite to force use of SSL

  server {
    listen     80;
    rewrite    ^ https://<server-url>$request_uri? permanent;
  }

  # HTTPS server

  server {
    listen               443 ssl;
    client_max_body_size 10M;

    ssl                  on;
    ssl_certificate      server.crt;
    ssl_certificate_key  server.key;

    ssl_session_cache    shared:SSL:20m;
    ssl_session_timeout  10m;

    ssl_protocols              TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers                RC4:HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers  on;

    # Proxy pass to servlet container

    location / {
      proxy_pass                http://localhost:8080/;
      proxy_redirect            off;
      proxy_set_header          Host               $host;
      proxy_set_header          X-Real-IP          $remote_addr;
      proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto  https;
      proxy_buffer_size         128k;
      proxy_buffers             8 128k;
      proxy_busy_buffers_size   256k;
      proxy_cookie_path         ~*^/(.*) "/$1; SameSite=Lax";
    }
  }
}
```

Note the last `https` header value which is required to inform the
servlet container that the request is coming over HTTPS. In order for
Tomcat to properly produce `Location` URL headers using HTTPS you also need t
o add two other parameters to the Connector in the Tomcat `server.xml` file:

```xml
<Connector scheme="https" proxyPort="443" />
```

### Activation de la mise en cache avec nginx { #install_enabling_caching_ssl_nginx }

<!--DHIS2-SECTION-ID:install_enabling_caching_ssl_nginx-->

Les demandes de rapports, de graphiques, de cartes et d'autres ressources liées à l'analyse mettent souvent un certain temps avant de recevoir des réponses et peuvent utiliser une grande partie des ressources du serveur. Afin d'améliorer les temps de réponse, de réduire la charge sur le serveur et d'éviter d'éventuels temps d'arrêt, nous pouvons introduire un proxy de cache dans notre configuration de serveur. Le contenu mis en cache sera stocké dans le répertoire /var/cache/nginx, et jusqu'à 250 Mo de stockage y seront alloués. Nginx créera ce répertoire automatiquement.

```text
http {
  ..
  proxy_cache_path  /var/cache/nginx  levels=1:2  keys_zone=dhis:250m  inactive=1d;


  server {
    ..

    # Proxy pass to servlet container and potentially cache response

    location / {
      proxy_pass                http://localhost:8080/;
      proxy_redirect            off;
      proxy_set_header          Host               $host;
      proxy_set_header          X-Real-IP          $remote_addr;
      proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto  https;
      proxy_buffer_size         128k;
      proxy_buffers             8 128k;
      proxy_busy_buffers_size   256k;
      proxy_cookie_path         ~*^/(.*) "/$1; SameSite=Lax";
      proxy_cache               dhis;
    }
  }
}
```

**Important**
> >>>>>>>>
Sachez qu'un cache côté serveur court-circuite les fonctions de sécurité de DHIS2 dans le sens où les requêtes qui atteignent le cache côté serveur seront servies directement à partir du cache hors de contrôle de DHIS2 et du conteneur de servlets. Cela signifie que les URL des requêtes peuvent être devinées de même que les rapports récupérés dans le cache par des utilisateurs non autorisés. Par conséquent, si vous collectez des informations sensibles, la mise en place d'un cache côté serveur n'est pas recommandée.

### Limitation de débit avec nginx { #install_rate_limiting }

<!--DHIS2-SECTION-ID:install_rate_limiting-->

Certains appels d'API web dans DHIS 2, tels que les API d'`analyses`, nécessitent beaucoup de calculs. Par conséquent, il est préférable de limiter le débit de ces API afin d'équilibrer l'utilisation des ressources du serveur par les utilisateurs du système. La limitation de débit peut être effectuée avec `nginx`. Il existe plusieurs approches pour effectuer la limitation de débit et ceci est destiné à documenter l'approche basée sur nginx.

La configuration nginx ci-dessous limitera le débit de l'API Web des `analyses` et comporte les éléments suivants au niveau des blocs *http* et *emplacement* (la configuration est abrégée par souci de concision) :

```text
http {
  ..
  limit_req_zone $binary_remote_addr zone=limit_analytics:10m rate=5r/s;

  server {
    ..

    location ~ ^/api/(\d+/)?analytics(.*)$ {
      limit_req    zone=limit_analytics burst=20;
      proxy_pass   http://localhost:8080/api/$1analytics$2$is_args$args;
      ..
    }
  }
}
```

Les différents éléments de la configuration peuvent être décrits comme suit :

- *limit_req_zone $binary_remote_addr* : la limitation du débit est effectuée par adresse IP de requête.
- *zone=limit_analytics:20m* : une zone de limite de débit pour l'API des analyses qui peut contenir jusqu'à 10 Mo d'adresses IP de requête.
- *taux=20r/s* : Chaque IP reçoit 5 requêtes par seconde.
- *emplacement ~ ^/api/(\d+/)?analytics(.\*)$* : les requêtes pour le point d'extrémité de l'API des analyses sont limitées en débit.
- *burst=20* : des rafales contenant jusqu'à 20 requêtes seront mises en file d'attente et traitées ultérieurement ; des demandes supplémentaires conduiront à un `503`.

Pour obtenir une explication complète, veuillez consulter la [documentation nginx](https://www.nginx.com/blog/rate-limiting-nginx/).

### Additional resources on SSL { #install_additional_resources_ssl } 

<!--DHIS2-SECTION-ID:install_additional_resources_ssl-->

The configuration demonstrated above should be regarded as the absolute
minumum in order to establish a secure server. However, encryption
methods are constantly being updated, so implementers who are
administerting their own server, show ensure that the server is
regularly updated with recent security patches (particularly the HTTP
server and SSL libraries).

There are numerous additional tutorials and information available on the
web, including a helpful [step-by-step
guide](https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04)
for using the free [Lets Encrypt SSL certifcate
system](https://letsencrypt.org/) . It may also be useful to regularly
test your SSL security with [this
website](https://www.ssllabs.com/ssltest/).

### Rendre les ressources disponibles avec nginx { #install_making_resources_available_with_nginx }

<!--DHIS2-SECTION-ID:install_making_resources_available_with_nginx-->

Dans certains cas, il est souhaitable de rendre certaines ressources accessibles au public sur le web sans exiger une quelconque authentification. C'est le cas, par exemple, lorsque vous souhaitez rendre les ressources liées à l'analyse des données de l'API Web disponibles dans un portail Web. L'exemple suivant permet d'accéder aux graphiques, aux cartes, aux rapports, aux tableaux de rapports et aux ressources documentaires par le biais d'une authentification de base en insérant un en-tête HTTP d'*Autorisation* dans la demande. Il supprimera l'en-tête Cookie de la requête et l'en-tête Set-Cookie de la réponse afin d'éviter de modifier l'utilisateur connecté. Il est recommandé de créer un utilisateur à cette fin, en ne lui accordant que les autorisations minimales requises. La valeur d'autorisation peut être construite en codant le nom d'utilisateur avec base64, suivi de deux points et le mot de passe et en lui ajoutant le préfixe "Basic", plus précisément "Basic base64_encode(nom d'utilisateur:mot de passe)". Il vérifiera la méthode HTTP utilisée pour les requêtes et renverra *405 Method Not Allowed* s'il détecte autre chose que GET.

En utilisant cette approche, il peut être avantageux de créer un domaine séparé pour les utilisateurs publics. En effet, nous ne voulons pas modifier les informations d'identification des utilisateurs déjà connectés lorsqu'ils accèdent aux ressources publiques. Par exemple, si votre serveur est déployé à l'adresse somedomain.com, vous pouvez créer un sous-domaine dédié à api.somedomain.com et orienter les URL de votre portail vers ce sous-domaine.

```text
http {
  ..

  server {
    listen       80;
    server_name  api.somedomain.com;

    location ~ ^/(api/(charts|chartValues|reports|reportTables|documents|maps|organisationUnits)|dhis-web-commons/javascripts|images|dhis-web-commons-ajax-json|dhis-web-mapping|dhis-web-visualizer) {
    if ($request_method != GET) {
        return 405;
      }

      proxy_pass         http://localhost:8080;
      proxy_redirect     off;
      proxy_set_header   Host               $host;
      proxy_set_header   X-Real-IP          $remote_addr;
      proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Proto  http;
      proxy_set_header   Authorization      "Basic YWRtaW46ZGlzdHJpY3Q=";
      proxy_set_header   Cookie             "";
      proxy_hide_header  Set-Cookie;
    }
  }
}
```

### Basic reverse proxy setup with Apache { #install_basic_reverse_proxy_setup_with_apache } 

<!--DHIS2-SECTION-ID:install_basic_reverse_proxy_setup_with_apache-->

The Apache HTTP server is a popular HTTP server. Depending on your exact 
nature of deployment, you may need to use Apache as a reverse proxy for 
your DHIS2 server. In this section, we will describe how to implement a 
simple reverse proxy setup with Apache.

> **Important**
> 
> Using nginx is the preferred option as reverse proxy with DHIS2 and
> you should not attempt to install both nginx and Apache on the same
> server. If you have installed nginx please ignore this section.

First we need to install a few necessary programs modules for Apache and
enable the modules.

    sudo apt-get install apache2 libapache2-mod-proxy-html libapache2-mod-jk
    a2enmod proxy proxy_ajp proxy_connect

Lets define an AJP connector which Apache HTTP server will use to
connect to Tomcat with. The Tomcat `server.xml` file should be located
in the /conf/ director of your Tomcat installation. Be sure this line is
uncommented.You can set the port to anything you like which is unused.

```xml
<Connector port="8009" protocol="AJP/1.3" redirectPort="8443" />
```

Now, we need to make the adjustments to the Apache HTTP server which
will answer requests on port 80 and pass them to the Tomcat server
through an AJP connector. Edit the file
`/etc/apache2/mods-enabled/proxy.conf` so that it looks like the example
below. Be sure that the port defined in the configuration file matches
the one from Tomcat.

```apache_conf
<IfModule mod_proxy.c>

ProxyRequests Off
ProxyPass /dhis  ajp://localhost:8009/dhis
ProxyPassReverse /dhis  ajp://localhost:8009/dhis

<Location "/dhis">
  Order allow,deny
  Allow from all
</Location>     
</IfModule>
```

You now can restart Tomcat and the Apache HTTPD server and your DHIS2
instance should be available on http://*myserver*/dhis where *myserver*
is the hostname of your server.

### SSL encryption with Apache { #install_ssl_encryption_with_apache } 

<!--DHIS2-SECTION-ID:install_ssl_encryption_with_apache-->

Using Apache and the reverse proxy setup described in the previous
section, we can easily implement encrypted transfer of data between
clients and the server over HTTPS. This section will describe how to use
self-signed certificates, although the same procedure could be used if
you have fully-signed certificates as well.

First (as root), generate the necessary private key files and CSR
(Certificate Signing Request)

    mkdir /etc/apache2/ssl
    cd /etc/apache2/ssl
    openssl genrsa -des3 -out server.key 1024
    openssl req -new -key server.key -out server.csr

We need to remove the password from the key, otherwise Apache will not
be able to use it.

    cp server.key server.key.org
    openssl rsa -in server.key.org -out server.key

Next, generate a self-signed certificate which will be valid for one
year.

    openssl x509 -req -days 365 -in server.csr -signkey \ server.key -out server.crt

Now, lets configure Apache by enabling the SSL modules and creating a
default site.

    a2enmod ssl
    a2ensite default-ssl

Now, we need to edit the default-ssl (located at
`/etc/apache2/sites-enabled/default-ssl`) file in order to enable the
SSL transfer functionality of Apache.

```apache_conf
<VirtualHost *:443>
    ServerAdmin wemaster@mydomain.org
    SSLEngine On
    SSLCertificateFile /etc/apache2/ssl/server.crt
    SSLCertificateKeyFile /etc/apache2/ssl/server.key
    ...
```

Be sure that the \*:80 section of this file is changed to port \*:443,
which is the default SSL port. Also, be sure to change the ServerAdmin
to the webmaster's email. Lastly, we need to be sure that the hostname
is setup properly in /etc/hosts. Just under the "localhost" line, be
sure to add the server's IP address and domain name.

    127.0.0.1 localhost
    XXX.XX.XXX.XXX foo.mydomain.org

Now, just restart Apache and you should be able to view
https://foo.mydomain.org/dhis.

    /etc/init.d/apache2 restart

## DHIS2 configuration reference { #install_dhis2_configuration_reference } 

<!--DHIS2-SECTION-ID:install_dhis2_configuration_reference-->

The following describes the full set of configuration options for the *dhis.conf* configuration file. The configuration file should be placed in a directory which is pointed to by a *DHIS2\_HOME* environment variable.

> **Remarque**
>
> Vous ne devez pas utiliser ce fichier de configuration directement, mais plutôt comme référence pour les options de configuration disponibles. Plusieurs propriétés sont facultatives.

```properties
# ---------------------------------------------------------------------- { #- } 
# Database connection for PostgreSQL [Mandatory] { #database-connection-for-postgresql-mandatory } 
# ---------------------------------------------------------------------- { #- } 

# Hibernate SQL dialect { #hibernate-sql-dialect } 
connection.dialect = org.hibernate.dialect.PostgreSQLDialect

# JDBC driver class { #jdbc-driver-class } 
connection.driver_class = org.postgresql.Driver

# Database connection URL { #database-connection-url } 
connection.url = jdbc:postgresql:dhis2

# Database username { #database-username } 
connection.username = dhis

# Database password (sensitive) { #database-password-sensitive } 
connection.password = xxxx

# Database schema behavior, can be 'validate', 'update', 'create', 'create-drop' { #database-schema-behavior-can-be-validate-update-create-create-drop } 
connection.schema = update

# Max size of connection pool (default: 40) { #max-size-of-connection-pool-default-40 } 
# connection.pool.max_size = 40 { #connectionpoolmax_size-40 } 

# ---------------------------------------------------------------------- { #- } 
# Server [Mandatory] { #server-mandatory } 
# ---------------------------------------------------------------------- { #- } 

# Base URL to the DHIS 2 instance { #base-url-to-the-dhis-2-instance } 
server.base.url = https://play.dhis2.org/dev 

# Enable secure settings if system is deployed on HTTPS, can be 'off', 'on' { #enable-secure-settings-if-system-is-deployed-on-https-can-be-off-on } 
server.https = off

# ---------------------------------------------------------------------- { #- } 
# System [Optional] { #system-optional } 
# ---------------------------------------------------------------------- { #- } 

# System mode for database read operations only, can be 'off', 'on' { #system-mode-for-database-read-operations-only-can-be-off-on } 
system.read_only_mode = off

# Session timeout in seconds, default is 3600 { #session-timeout-in-seconds-default-is-3600 } 
system.session.timeout = 3600

# SQL view protected tables, can be 'on', 'off' { #sql-view-protected-tables-can-be-on-off } 
system.sql_view_table_protection = on

# ---------------------------------------------------------------------- { #- } 
# Encryption [Optional] { #encryption-optional } 
# ---------------------------------------------------------------------- { #- } 

# Encryption password (sensitive) { #encryption-password-sensitive } 
encryption.password = xxxx

# ---------------------------------------------------------------------- { #- } 
# File store [Optional] { #file-store-optional } 
# ---------------------------------------------------------------------- { #- } 

# File store provider, currently 'filesystem' and 'aws-s3' are supported { #file-store-provider-currently-filesystem-and-aws-s3-are-supported } 
filestore.provider = filesystem

# Directory / bucket name, folder below DHIS2_HOME on file system, 'bucket' on AWS S3 { #directory-bucket-name-folder-below-dhis2_home-on-file-system-bucket-on-aws-s3 } 
filestore.container = files

# Datacenter location (not required) { #datacenter-location-not-required } 
filestore.location = eu-west-1

# Public identity / username { #public-identity-username } 
filestore.identity = dhis2-id

# Secret key / password (sensitive) { #secret-key-password-sensitive } 
filestore.secret = xxxx

# ---------------------------------------------------------------------- { #- } 
# LDAP [Optional] { #ldap-optional } 
# ---------------------------------------------------------------------- { #- } 

# LDAP server URL { #ldap-server-url } 
ldap.url = ldaps://300.20.300.20:636

# LDAP manager user distinguished name { #ldap-manager-user-distinguished-name } 
ldap.manager.dn = cn=JohnDoe,ou=Country,ou=Admin,dc=hisp,dc=org

# LDAP manager user password (sensitive) { #ldap-manager-user-password-sensitive } 
ldap.manager.password = xxxx

# LDAP entry distinguished name search base { #ldap-entry-distinguished-name-search-base } 
ldap.search.base = dc=hisp,dc=org

# LDAP entry distinguished name filter { #ldap-entry-distinguished-name-filter } 
ldap.search.filter = (cn={0})

# ---------------------------------------------------------------------- { #- } 
# Node [Optional] { #node-optional } 
# ---------------------------------------------------------------------- { #- } 

# Node identifier, optional, useful in clusters { #node-identifier-optional-useful-in-clusters } 
node.id = 'node-1'

# ---------------------------------------------------------------------- { #- } 
# Analytics [Optional] { #analytics-optional } 
# ---------------------------------------------------------------------- { #- } 

# Analytics server-side cache expiration in seconds { #analytics-server-side-cache-expiration-in-seconds } 
analytics.cache.expiration = 3600

# ---------------------------------------------------------------------- { #- } 
# System monitoring [Optional] { #system-monitoring-optional } 
# ---------------------------------------------------------------------- { #- } 

# System monitoring URL { #system-monitoring-url } 
system.monitoring.url = 

# System monitoring username { #system-monitoring-username } 
system.monitoring.username = 

# System monitoring password (sensitive) { #system-monitoring-password-sensitive } 
system.monitoring.password = xxxx
```

## Journalisation des applications { #install_application_logging }

<!--DHIS2-SECTION-ID:install_application_logging-->

Cette section traite de la journalisation des applications dans DHIS 2.

### Fichiers journaux { #log-files }

La sortie du journal de l'application DHIS2 est dirigée vers plusieurs fichiers et emplacements. Tout d'abord, la sortie du journal est envoyée à la sortie standard. Le conteneur de servlets Tomcat envoie généralement la sortie standard vers un fichier sous "logs" (journaux) :

    <tomcat-dir>/logs/catalina.out

Second, log output is written to a "logs" directory under the DHIS2 home directory as defined by the the DHIS2\_HOME environment variables. There is a main log file for all output, and separate log files for various
background processes. The main file includes the background process logs as well. The log files are capped at 50 Mb and log content is continuously appended.

    <DHIS2_HOME>/logs/dhis.log    
    <DHIS2_HOME>/logs/dhis-analytics-table.log
    <DHIS2_HOME>/logs/dhis-data-exchange.log
    <DHIS2_HOME>/logs/dhis-data-sync.log

### Configuration des journaux { #log-configuration }

In order to override the default log configuration you can specify a Java system property with the name *log4j.configuration* and a value pointing to the Log4j configuration file on the classpath. If you want to point to a
file on the file system (i.e. outside Tomcat) you can use the *file* prefix e.g. like this:

```properties
-Dlog4j.configuration=file:/home/dhis/config/log4j.properties
```

Les propriétés du système Java peuvent être définies, par exemple via la variable d'environnement *JAVA\_OPTS* ou dans le script de démarrage Tomcat.

A second approach to overriding the log configuration is to specify logging properties in the *dhis.conf* configuration file. The supported properties are:

```properties
# Max size for log files, default is '100MB' { #max-size-for-log-files-default-is-100mb } 
logging.file.max_size = 250MB

# Max number of rolling log archive files, default is 0 { #max-number-of-rolling-log-archive-files-default-is-0 } 
logging.file.max_archives = 2
```

DHIS2 will eventually phase out logging to standard out / catalina.out and as a result it is recommended to rely on the logs under DHIS2\_HOME.

## Travailler avec la base de données PostgreSQL { #install_working_with_the_postgresql_database }

<!--DHIS2-SECTION-ID:install_working_with_the_postgresql_database-->

Common operations when managing a DHIS2 instance are dumping and
restoring databases. To make a dump (copy) of your database, assuming
the setup from the installation section, you can invoke the following:

    pg_dump dhis2 -U dhis -f dhis2.sql

The first argument (dhis2) refers to the name of the database. The
second argument (dhis) refers to the database user. The last argument
(dhis2.sql) is the file name of the copy. If you want to compress the
file copy immediately you can do:

    pg_dump dhis2 -U dhis | gzip > dhis2.sql.gz

To restore this copy on another system, you first need to create an
empty database as described in the installation section. You also need
to gunzip the copy if you created a compressed version. You can the
invoke:

    psql -d dhis2 -U dhis -f dhis2.sql

## DHIS2 Live setup { #install_dhis2_live_setup } 

<!--DHIS2-SECTION-ID:install_dhis2_live_setup-->

The DHIS2 Live package is extremely convenient to install and run. It is
intended for demonstrations, for users who want to explore the system
and for small, offline installations typically at districts or
facilities. It only requires a Java Runtime Environment and runs on all
browsers except Internet Explorer 7 and lower.

To install start by downloading DHIS2 Live from *http://dhis2.org* and
extract the archive to any location. On Windows click the executable
archive. On Linux invoke the startup.sh script. After the startup
process is done your default web browser will automtically be pointed to
*http://localhost:8082* where the application is accessible. A system
tray menu is accessible on most operating systems where you can start
and stop the server and start new browser sesssions. Please note that if
you have the server running there is no need to start it again, simply
open the application from the tray menu.

DHIS2 Live is running on an embedded Jetty servlet container and an
embedded H2 database. However it can easily be configured to run on
other database systems such as PostgreSQL. Please read the section above
about server installations for an explanation of the database
configuration. The *dhis.conf* configuration file is located in the
*conf* folder. Remember to restart the Live package for your changes to
take effect. The server port is 8082 by default. This can be changed by
modifying the value in the*jetty.port* configuration file located in the
*conf* directory.
