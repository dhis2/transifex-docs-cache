---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/master/src/developer/web-api/tracker.md"
revision_date: '2024-10-25'
tags:
- Développement
- Version Master de DHIS2 Central
---

# Tracker { #webapi_tracker }

> **Caution**
>
> Tracker has been re-implemented in DHIS2 2.36. This document describes the new tracker endpoints
>
> * `POST /api/tracker`
> * `GET  /api/tracker/trackedEntities`
> * `GET  /api/tracker/enrollments`
> * `GET  /api/tracker/events`
> * `GET  /api/tracker/relationships`
>
> The deprecated tracker endpoints
>
> * `GET/POST/PUT/DELETE /api/trackedEntityInstance`
> * `GET/POST/PUT/DELETE /api/enrollments`
> * `GET/POST/PUT/DELETE /api/events`
> * `GET/POST/PUT/DELETE /api/relationships`
>
> have been removed in version **42**!
>
> [Migrating to new tracker
> endpoints](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker-deprecated.html#webapi_tracker_migration)
> should help you get started with your migration. Reach out on the [community of
> practice](https://community.dhis2.org) if you need further assistance.

## Tracker Objects { #webapi_tracker_objects }

Le Tracker est constitué de différents types d'objets interconnectés destinés à représenter les données. 
Dans cette section, nous montrerons et décrirons chacun des objets utilisés dans l'API du Tracker.

### Les entités suivies { #tracked-entities } 

Les `entités suivies` constituent la base du modèle Tracker.

| Propriété | Description | Obligatoire | Immuable | Type | Exemple |
|---|---|---|---|---|---|
| Entité suivie | L’identifiant de l’entité suivie. Il est généré au cas où il n'est pas fourni | Non | Oui | Chaîne : Uid | ABCDEF12345 |
| TrackedEntityType (Type d'entité suivie) | Le type d’entité suivie. | Oui | Oui | Chaîne : Uid | ABCDEF12345 |
| créé à | Date à laquelle l'utilisateur a créé l'entité suivie. Elle est définie sur le serveur. | Non | Non | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| crééAtClient (Création au niveau du client) | Date à laquelle l'utilisateur a créé l'entité suivie au niveau du client. | Non | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| updatedAt (mis à jour à) | Date de la dernière mise à jour de l'objet. Elle est définie sur le serveur. | Non | Non | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| updatedAtClient (mise à jour au niveau du client) | Date de la dernière mise à jour de l'objet au niveau du client. | Non | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| orgUnit (Unité d'organisation) | L'unité d'organisation dans laquelle l'utilisateur a créé l'entité suivie. | Oui | Oui | Chaîne : Uid | ABCDEF12345 |
| inactif | Indique si l'entité suivie est inactive ou non. | Non | Oui | Booléen | Par défaut: faux, vrai |
| supprimé | Indique si l'entité suivie a été supprimée. Ne peut être modifié qu'au moment de la suppression. | Non | Non | Booléen | Faux jusqu'à suppression |
| potentialDuplicate (doublon potentiel) | Indique si l'entité suivie est un doublon potentiel | Non | Non | Booléen | Par défaut: faux |
| géométrie | Il s'agit d'une représentation géographique de l'entité suivie. Elle est basée sur le « type de fonctionnalité » du type d'entité suivie. | Non | Oui | GeoJson | {<br>"type": "POINT",<br>"coordonnées": [123.0, 123.0]<br>} |
| Stocké par | Référence client indiquant celui a stocké/créé l’entité suivie. | Non | Oui | Chaîne : Toute | John Doe |
| createdBy (créé par) | Uniquement pour lire des données. Il s'agit de l'utilisateur qui a créé l'objet. Défini sur le serveur | Non | Oui | Utilisateur | {<br>"uid": "ABCDEF12345",<br>"Nom d'utilisateur": "Nom d'utilisateur",<br>"Prénom": "John",<br>"Nom de famille": "Doe"<br>} |
| updatedBy (mis à jour par) | Uniquement pour lire des données. Il s'agit de l'utilisateur qui a mis à jour l'objet. Défini sur le serveur | Non | Oui | Utilisateur | {<br>"uid": "ABCDEF12345",<br>"Nom d'utilisateur": "Nom d'utilisateur",<br>"Prénom": "John",<br>"Nom de famille": "Doe"<br>} |
| les attributs | Une liste de valeurs d'attributs d'entité suivie appartenant à l'entité suivie. | Non | Oui | Liste des valeurs d'attributs d'entités suivies | Voir l'attribut |
| inscriptions | Une liste des inscriptions appartenant à l’entité suivie. | Non | Oui | Liste des inscriptions | Voir les inscriptions |
| relations | Une liste de relations connectées à l'entité suivie. | Non | Oui | Liste des relations | Voir les relations |
| Propriétaires du programme | Liste des unités d'organisation qui ont accès via des programmes spécifiques à cette entité suivie. Voir « Propriété du programme » pour en savoir plus. | Non | Oui | Liste des propriétaires du programme | Voir la section « Propriété du programme » |

> **Remarque**
>
> Les `entités suivies` "possèdent" toutes les `Valeurs d'attribut d'entités suivies` (ou les "attributs" décrits dans 
> le tableau précédent). Cependant, les `attributs d'entités suivies` sont soit connectés à une `entité 
> suivie` via son `type d'entité suivie` soit à un `programme`. Nous désignons souvent cette séparation par 
> `Attributs de type d'entité suivi` et `Attributs de programme d'entité suivi`. L'importance de cette 
> distinction est liée au contrôle d'accès et à la limitation des informations que l'utilisateur peut voir.
>
> Les "attributs" mentionnés dans `Entité suivie` sont des `Attributs de type d'entité suivie`.

### Inscriptions { #enrollments } 

Les `Entités suivies` peuvent s'inscrire aux `Programmes` pour lesquels elles sont éligibles. Les entités suivies sont éligibles tant que le programme est configuré avec le même `Type d'entité suivie` que l'entité 
suivie. Nous représentons l'inscription avec l'objet `Inscription`, que nous décrivons dans cette section.

| Propriété | Description | Obligatoire | Immuable | Type | Exemple |
|---|---|---|---|---|---|
| inscription | L’identifiant de l'inscription. Il est généré au cas où il n'est pas fourni | Non | Oui | Chaîne : Uid | ABCDEF12345 |
| de paludisme) ». | Le programme que représente l’inscription. | Oui | Non | Chaîne : Uid | ABCDEF12345 |
| Entité suivie | Une référence à l’entité suivie inscrite. | Oui | Oui | Chaîne : Uid | ABCDEF12345 |
| statut | Statut de l'inscription. Il est ACTIF au cas où n'est pas fourni. | Non | Non | Énumération | ACTIF, EFFECTUÉ, ANNULÉ |
| orgUnit (Unité d'organisation) | L'unité d'organisation dans laquelle l'utilisateur a inscrit l'entité suivie. | Oui | Non | Chaîne : Uid | ABCDEF12345 |
| créé à | Date et heure à laquelle l'utilisateur a créé l'objet. Elle est définie sur le serveur. | Non | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| crééAtClient (Création au niveau du client) | Date à laquelle l'utilisateur a créé l'objet au niveau du client | Non | Non | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| updatedAt (mis à jour à) | Date et heure de la dernière mise à jour de l'objet. Elle est définie sur le serveur. | Non | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| updatedAtClient (mise à jour au niveau du client) | Date et heure de la dernière mise à jour de l'objet au niveau du client. | Non | Non | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| inscrit à | Date et heure à laquelle l'utilisateur a inscrit l'entité suivie. | Oui | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| occurredAt (s'est produit à) | Date et heure à laquelle l'inscription a eu lieu. | Non | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| completedAt (effectué à) | Timestamp when the user completed the enrollment. Set on the server if not passed by the client | Non | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| completedBy (effectué par) | Only for reading data. User that completed the enrollment. Set on the server | Non | Non | Chaîne : Toute | John Doe |
| Suivi | Indique si l'inscription nécessite un suivi. La valeur est "Faux" si rien n'est fourni | Non | Non | Booléen | Par défaut : Faux, Vrai |
| supprimé | Indique si l'inscription a été supprimée. Ne peut être modifié qu'au moment de la suppression. | Non | Oui | Booléen | Faux jusqu'à suppression |
| géométrie | Il s'agit d'une représentation géographique de l'inscription. Elle se base sur le « type de fonctionnalité » du programme. | Non | Non | GeoJson | {<br>"type": "POINT",<br>"coordonnées": [123.0, 123.0]<br>} |
| storedBy (Stockée par) | Référence client indiquant celui a stocké/créé l'inscription. | Non | Non | Chaîne : Toute | John Doe |
| createdBy (créé par) | Uniquement pour lire des données. Il s'agit de l'utilisateur qui a créé l'objet. Défini sur le serveur | Non | Oui | Utilisateur | {<br>"uid": "ABCDEF12345",<br>"Nom d'utilisateur": "Nom d'utilisateur",<br>"Prénom": "John",<br>"Nom de famille": "Doe"<br>} |
| updatedBy (mis à jour par) | Uniquement pour lire des données. Il s'agit de l'utilisateur qui a mis à jour l'objet. Défini sur le serveur | Non | Oui | Utilisateur | {<br>"uid": "ABCDEF12345",<br>"Nom d'utilisateur": "Nom d'utilisateur",<br>"Prénom": "John",<br>"Nom de famille": "Doe"<br>} |
| attributs | Liste des valeurs d'attributs d'entité suivie associées à l'inscription. | Non | Non | Liste des valeurs d'attributs d'entité suivie | Voir les attributs |
| événements | Liste des événements appartenant à l'inscription. | Non | Non | Liste des événements | Voir les évènements |
| relations | Liste des relations liées à l'inscription. | Non | Non | Liste des relations | Voir les relations |
| notes | Notes liées à l'inscription. Elles ne peuvent qu'être créées. | Non | Oui | Liste des notes | Voir les notes |

> **Remarque**
>
> Les `entités suivies` "possèdent" toutes les `Valeurs d'attribut d'entités suivies` (ou les "attributs" décrits dans 
> le tableau précédent). Cependant, les `attributs d'entités suivies` sont soit connectés à une `entité 
> suivie` via son `type d'entité suivie` soit à un `programme`. Nous désignons souvent cette séparation par 
> `Attributs de type d'entité suivi` et `Attributs de programme d'entité suivi`. L'importance de cette 
> distinction est liée au contrôle d'accès et à la limitation des informations que l'utilisateur peut voir.
>
> Les "attributs" mentionnés dans `Inscription` sont des `Attributs de programmes d'entités suivies`.

### Événements { #events } 

Les `Événements` font partie d'un `PROGRAMME D'ÉVÉNEMENT` ou d'un `PROGRAMME TRACKER`. Pour le `PROGRAMME TRACKER`, les événements 
appartiennent à une `Inscription`, laquelle appartient à une `Entité suivie`. D'un autre côté, `PROGRAMME 
D'ÉVÉNEMENT` concerne les `Événements` non rattachées à une `Inscription` ou à une `Entité suivie` spécifique. La différence réside 
dans le fait que nous effectuons ou non un suivi pour une `Entité suivie` spécifique. Nous désignons parfois les événements `PROGRAMME 
D'ÉVÉNEMENT` "événements anonymes "ou "événements uniques" puisqu'ils ne se représentent qu'eux-mêmes et 
non une autre `Entité suivie`.

Dans l'API, la différence majeure est que tous les événements sont soit rattachés à la même 
inscription (`PROGRAMME D'ÉVÈNEMENT`), soit à des inscriptions différentes (`PROGRAMME TRACKER`). Le tableau ci-dessous 
signalera les cas exceptionnels entre ces deux.

| Propriété | Description ; | Obligatoire | Immuable | Type | Exemple |
|---|---|---|---|---|---|
| événement | L'identifiant de l'événement. Il est généré au cas où il n'est pas fourni | Non | Oui | Chaîne : Uid | ABCDEF12345 |
| Étape du programme | L'étape du programme que représente l'événement. | Oui | Non | Chaîne : Uid | ABCDEF12345 |
| inscription | Il s'agit d'une référence à l’inscription qui à laquelle appartient l’événement. Ceci ***ne s'applique pas au `PROGRAMME D'ÉVÉNEMENT`*** | Oui | Oui | Chaîne : Uid | ABCDEF12345 |
| programme | Uniquement pour lire les données. Il s'agit du type de programme de l'inscription qui possède l'événement. | Non | Oui | Chaîne : Uid | ABCDEF12345 |
| Entité suivie | Uniquement pour lire les données. Il s'agit de l'entité suivie propriétaire de l'événement. Ceci ***ne s'applique pas au `PROGRAMME D'ÉVÉNEMENT`*** | Non | Non | Chaîne : Uid | ABCDEF12345 |
| statut | Statut de l'évènement. Il est ACTIF au cas où n'est pas fourni. | Non | Non | Énumération | ACTIF, EFFECTUÉ, VISITÉ, HORAIRE, EN RETARD, SAUTÉ |
| orgUnit (Unité d'organisation) | Il s'agit de l'unité d'organisation dans laquelle l'utilisateur a enregistré l'événement. | Oui | Non | Chaîne : Uid | ABCDEF12345 |
| créé à | Uniquement pour lire des données. Date et heure à laquelle l'utilisateur a créé l'évènement. Elle est définie sur le serveur. | Non | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| crééAtClient (Création au niveau du client) | Date et heure à laquelle l'utilisateur a créé l'évènement au niveau du client | Non | Non | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| updatedAt (mis à jour à) | Uniquement pour lire des données. Date et heure de la dernière mise à jour de l'évènement. Elle est définie sur le serveur. | Non | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| updatedAtClient (mise à jour au niveau du client) | Date et heure de la dernière mise à jour de l'évènement au niveau du client. | Non | Non | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| scheduledAt (programmé à) | Date et heure à laquelle l'évènement a été programmée. | Non | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| occurredAt (s'est produit à) | Date et heure à laquelle quelque chose se passe. | Oui | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| completedAt (effectué à) | Timestamp when the user completed the event. Set on the server if not passed by the client | Non | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| completedBy (effectué par) | Only for reading data. User that completed the event. Set on the server | Non | Non | Chaîne : Toute | John Doe |
| Suivi | Uniquement pour lire les données. Indique si l'événement a été marqué pour un suivi. | Non | Non | Booléen | Faux, Vrai |
| supprimé | Uniquement pour lire les données. Indique si l'évènement a été supprimée. Ne peut être modifié qu'au moment de la suppression. | Non | Oui | Booléen | Faux jusqu'à suppression |
| géométrie | Il s'agit d'une représentation géographique de l'évènement. Elle se base sur le « type de fonctionnalité » de l'étape de programme. | Non | Non | GeoJson | {<br>"type": "POINT",<br>"coordonnées": [123.0, 123.0]<br>} |
| storedBy (Stockée par) | Référence client indiquant celui a stocké/créé l'évènement. | Non | Non | Chaîne : Toute | John Doe |
| createdBy (créé par) | Uniquement pour lire des données. Il s'agit de l'utilisateur qui a créé l'objet. Défini sur le serveur | Non | Oui | Utilisateur | {<br>"uid": "ABCDEF12345",<br>"Nom d'utilisateur": "Nom d'utilisateur",<br>"Prénom": "John",<br>"Nom de famille": "Doe"<br>} |
| updatedBy (mis à jour par) | Uniquement pour lire des données. Il s'agit de l'utilisateur qui a mis à jour l'objet. Défini sur le serveur | Non | Oui | Utilisateur | {<br>"uid": "ABCDEF12345",<br>"Nom d'utilisateur": "Nom d'utilisateur",<br>"Prénom": "John",<br>"Nom de famille": "Doe"<br>} |
| attributeOptionCombo (combinaison d'options d'attribut) | Il s'agit de la combinaison d'options d'attribut pour l'événement. Utiliser l'option par défaut si rien n’est fourni ou configuré. | Non | Non | Chaîne : Uid | ABCDEF12345
| attributeCategoryOptions (options de catégorie d'attribut) | Il s'agit de l'option de catégorie d'attribut pour l'événement. Utiliser l'option par défaut si rien n’est fourni ou configuré. | Non | Non | Chaîne : Uid | ABCDEF12345
| assignedUser (Utilisateur assigné) | Fait référence à un utilisateur qui a été assigné à l'événement. | Non | Non | Utilisateur | {<br>"uid": "ABCDEF12345",<br>"Nom d'utilisateur": "Nom d'utilisateur",<br>"Prénom": "John",<br>"Nom de famille": "Doe"<br>} |
| dataValues (Valeurs de données) | Liste des valeurs de données liées à l'événement. | Non | Non | Liste des valeurs d'attributs d'entité suivie | Voir les attributs |
| relations | Liste des relations liées à l'évènement. | Non | Non | Liste des relations | Voir les relations |
| notes | Notes liées à l'évènement. Elles ne peuvent qu'être créées. | Non | Oui | Liste des notes | Voir les notes |

### Relations { #relationships } 

Les `Relations` sont des objets qui relient deux autres objets Tracker. Les contraintes auxquelles chaque côté 
de la relation doit se conformer sont basées sur le `Type de relation` de la `Relation`.

| Propriété | Description ; | Obligatoire | Immuable | Type | Exemple |
|---|---|---|---|---|---|
| relation | L'identifiant de la relation. Il est généré au cas où il n'est pas fourni | Non | Oui | Chaîne : Uid | ABCDEF12345 |
| Type de relation | Il s'agit du type de relation. Il détermine quels objets peuvent être reliés dans une relation. | Oui | Oui | Chaîne : Uid | ABCDEF12345 |
| Nom de la relation | Uniquement pour lire les données. Il s'agit du nom du type de relation de cette relation | Non | Non | Chaîne : Toute | Sibling |
| créé à | Date et heure à laquelle l'utilisateur a créé la relation. Elle est définie sur le serveur. | Non | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| updatedAt (mis à jour à) | Date et heure de la dernière mise à jour de la relation. Elle est définie sur le serveur. | Non | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| crééAtClient (Création au niveau du client) | Date et heure à laquelle l'utilisateur a créé la relation au niveau du client. | Non | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| bidirectionnel | Uniquement pour lire les données. Indique si le type de relation est bidirectionnel ou non. | Non | Non | Booléen | Vrai ou faux |
| de, à | Fait référence à chaque côté de la relation. Doit être conforme aux contraintes définies dans le type de relation | Oui | Oui | Élément de la relation | {"trackedEntity": {"trackedEntity": "ABCEF12345"}}, {"enrollment": {"enrollment": "ABCDEF12345"}} or {"event": {"event": "ABCDEF12345" }} |

> **Remarque**
>
> Un `Élément de relation` représente un lien vers un objet. Étant donné qu'il peut y avoir une `relation` entre n'importe 
> quel objet Tracker tel qu'une `entité suivie`, une `inscription` et un `évènement`, la valeur dépend du 
> `type de relation`. Par exemple, si le `type de relation` relie un `événement` et une `entité 
> suivie`, le format est strict:
>```json
> {
> "de": {
> "événement": { "événement": "ABCDEF12345" }
> },
> "à": {
> "Entité suivie": { "Entité suivie": "FEDCBA12345" }
> }
>}
>```

### Les attributs { #attributes } 

Attributes are the values describing the tracked entities. Attributes can be associated either
through a tracked entity type or a program. This implies that attributes can be part of both a
tracked entity and an enrollment. Importantly, an attribute can only have one value, even if a
tracked entity has multiple enrollments that define that attribute. This is because the tracked
entity ultimately owns the attribute value.

| Propriété | Description ; | Obligatoire | Immuable | Type | Exemple |
|---|---|---|---|---|---|
| attribut | Fait référence à l’attribut d’entité suivi représenté. | Oui | Oui | Chaîne : Uid | ABCDEF12345 |
| code | Uniquement pour lire les données. Il s'agit du code de l'attribut de l'entité suivie. | Non | Non | Chaîne : Toute | ABC |
| Nom d'affichage | Uniquement pour lire les données. Il s'agit du nom d'affichage de l'attribut de l'entité suivie. | Non | Non | Chaîne : Toute | Nom ; |
| créé à | Date et heure à laquelle la valeur a été ajoutée. Elle est définie sur le serveur. | Non | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| updatedAt (mis à jour à) | Date et heure de la dernière mise à jour de la valeur. Elle est définie sur le serveur. | Non | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| storedBy (Stockée par) | Référence client indiquant celui a stocké/créé la valeur. | Non | Non | Chaîne : Toute | John Doe |
| Type de valeur | Uniquement pour lire les données. Il s'agit du type de valeur que l'attribut représente. | Non | Non | Énumération | TEXTE, ENTIER et plus |
| valeur | La valeur de l'attribut d'entité suivi. | Non | Non | Chaîne : Toute | John Doe |

> **Note**
>
> When adding or updating an attribute, only the `attribute` and `value` properties are required. To
> remove an attribute from a tracked entity or enrollment, set the `value` to `null` [see
> example](#delete-attribute-values).
>
> In the context of the tracker, we refer to `Tracked Entity Attributes` and `Tracked Entity
> Attribute Values` simply as attributes. However, it's important to note that attributes and
> attribute values are also concepts within metadata. Therefore, distinguishing between tracker
> attributes and metadata attributes is essential. In the tracker API, you can reference metadata
> attributes by specifying the `idScheme` (see [request
> parameters](#webapi_tracker_import_request_parameters) for more information).

### Valeurs de données { #data-values }

While attributes describe a tracked entity, data values describe an event.

| Propriété | Description ; | Obligatoire | Immuable | Type | Exemple |
|---|---|---|---|---|---|
| élément de données | L'élément de données que cette valeur représente. | Oui | Oui | Chaîne : Uid | ABCDEF12345 |
| valeur | La valeur de données. | Non | Non | Chaîne : Toute | 123 |
| Fourni ailleurs | Indique si l'utilisateur a fourni la valeur ailleurs ou non. Faux si la valeur n'a pas été fournie. | Non | Non | Booléen | Faux ou vrai |
| créé à | Date et heure à laquelle l'utilisateur a ajouté la valeur. Elle est définie sur le serveur. | Non | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| updatedAt (mis à jour à) | Date et heure de la dernière mise à jour de la valeur. Elle est définie sur le serveur. | Non | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| storedBy (Stockée par) | Référence client indiquant celui a stocké/créé la valeur. | Non | Non | Chaîne : Toute | John Doe |
| createdBy (créé par) | Uniquement pour lire des données. Il s'agit de l'utilisateur qui a créé l'objet. Défini sur le serveur | Non | Oui | Utilisateur | {<br>"uid": "ABCDEF12345",<br>"Nom d'utilisateur": "Nom d'utilisateur",<br>"Prénom": "John",<br>"Nom de famille": "Doe"<br>} |
| updatedBy (mis à jour par) | Uniquement pour lire des données. Il s'agit de l'utilisateur qui a mis à jour l'objet. Défini sur le serveur | Non | Oui | Utilisateur | {<br>"uid": "ABCDEF12345",<br>"Nom d'utilisateur": "Nom d'utilisateur",<br>"Prénom": "John",<br>"Nom de famille": "Doe"<br>} |

> **Note**
>
> When adding or updating a data value, only the `dataElement` and `value` properties are required. To
> remove a data value from an event, set the `value` to `null` [see example](#delete-data-values).

### Remarques { #notes }

The Tracker system enables the capture of data using data elements and tracked entity attributes.
However, there are situations where additional information or notes about specific issues need to be
recorded. These additional details can be captured using notes, similar to data value notes in the
DHIS2 aggregate side.

There are two types of notes: enrollment-level notes and event-level notes. An enrollment can
consist of one or more events, and notes can be recorded for each event to document reasons such as
why an event was missed, rescheduled, or partially completed. Each event within an enrollment can
have its own notes. Additionally, overall observations of these events can be recorded using a
parent enrollment note. Enrollment notes are useful for documenting reasons such as why an
enrollment was canceled. The use of notes is flexible and can be tailored to the user's needs and
specific use cases.

Both enrollment and event notes can have an unlimited number of entries; there is no limit to the
number of notes that can be added. However, it is not possible to delete or update these notes once
they are created. They function like a logbook. To amend a note, a new note can be created. The only
way to delete a note is by deleting the parent object, either the event or the enrollment.

Notes do not have a dedicated endpoint; they are exchanged as part of the parent event and/or
enrollment payload. Below is a sample payload:

```json
{
  "trackedEntity": "oi3PMIGYJH8",
  "enrollments": [
    {
      "enrollment": "EbRsJr8LSSO",
      "notes": [
        {
          "note": "vxmCvYcPdaW",
          "value": "Enrollment note 1"
        },
        {
          "value": "Enrollment note 2."
        }
      ],
      "events": [
        {
          "event": "zfzS9WeO0uM",
          "notes": [
            {
              "note": "MAQFb7fAggS",
              "value": "Event Note 1."
            },
            {
              "value": "Event Note 2."
            }
          ]
        }
      ]
    }
  ]
}
```

| Propriété | Description ; | Obligatoire | Immuable | Type | Exemple |
|---|---|---|---|---|---|
| note | La référence de la note. Elle est générée si rien n'est fourni | Non | Oui | Chaîne : Uid | ABCDEF12345 |
| valeur | Le contenu de la note. | Oui | Oui | Chaîne : Toute | Ceci est une note |
| Stocké à | Date et heure à laquelle l'utilisateur a ajouté la note. Elle est définie sur le serveur. | Non | Oui | Date : ISO 8601 | AAAA-MM-JJThh:mm:ss |
| storedBy (Stockée par) | Référence client indiquant celui a stocké/créé la note. | Non | Non | Chaîne : Toute | John Doe |
| createdBy (créé par) | Uniquement pour lire des données. Il s'agit de l'utilisateur qui a créé l'objet. Défini sur le serveur | Non | Oui | Utilisateur | {<br>"uid": "ABCDEF12345",<br>"Nom d'utilisateur": "Nom d'utilisateur",<br>"Prénom": "John",<br>"Nom de famille": "Doe"<br>} |

### Utilisateurs { #users } 

| Propriété | Description ; | Obligatoire | Immuable | Type | Exemple |
|---|---|---|---|---|---|
| uid | L'identifiant de l'utilisateur. | Oui* | Oui | Chaîne : Uid | ABCDEF12345 |
| Nom d'utilisateur | Le nom d'utilisateur utilisé par l'utilisateur. | Oui* | Oui | Chaîne : Toute | 123 |
| Prénom | Uniquement pour lire les données. Il s'agit du prénom de l'utilisateur. | Non | Oui | Chaîne : Toute | John |
| Nom de famille | Uniquement pour lire les données. Il s'agit du nom de famille de l'utilisateur. | Non | Oui | Chaîne : Toute | Doe |

> L'`uid` ou le `nom d'utilisateur` doit être fourni. Si les deux sont fournis, seul le nom d’utilisateur est 
> pris en compte.

## Tracker Import (`POST /api/tracker`) { #webapi_tracker_import }

The endpoint `POST /api/tracker` is also called the tracker importer. This endpoint allows clients
to import i.e. create, update and delete

* **Entités suivies**
* **Inscriptions**
* **Événements**
* **Relations**
* and data embedded in other [tracker objects](#webapi_tracker_objects)

### Request parameters { #webapi_tracker_import_request_parameters }

The tracker importer supports the following parameters:

| Nom du paramètre | Description ; | Type | Valeurs autorisées |
|---|---|---|---|
| async | Indique si l’importation doit avoir lieu de manière asynchrone ou synchrone. | Booléen | `VRAI`, `FAUX` |
| Mode de rapport | Uniquement lors d'une importation synchrone. Voir le "Récapitulatif de l'importation" pour plus d’informations. | Énumération | `COMPLET`, `ERREURS`, `AVERTISSEMENTS` |
| Mode d'importation  | Peut être soit `VALIDATE` qui rapportera les erreurs dans la charge sans faire de changements dans la base de données, soit `COMMIT` (par défaut) qui validera la charge et fera des changements dans la base de données. | Énumération | `VALIDER`, `COMMITER` |
| idScheme (schéma d'identification) | Indique le 'schéma d'identification' global à utiliser pour les références de métadonnées lors de l'importation. La valeur par défaut est UID. Elle peut être remplacée pour des métadonnées spécifiques (voir la liste ci-dessous). | Énumération | `UID`, `CODE`, `NOM`, `ATTRIBUT` |
| dataElementIdScheme (Schéma d'identification de l'élément de données) | Indique le schéma d'identification à utiliser pour les éléments de données lors de l'importation. | Énumération | `UID`, `CODE`, `NOM`, `ATTRIBUT` |
| orgUnitIdScheme (Schéma d'identification de l'unité d'organisation) | Indique le schéma d'identification à utiliser pour les unités d'organisation lors de l'importation. | Énumération | `UID`, `CODE`, `NOM`, `ATTRIBUT` |
| programIdScheme (Schéma d'identification des programmes) | Indique le schéma d'identification à utiliser pour les programmes lors de l'importation. | Énumération | `UID`, `CODE`, `NOM`, `ATTRIBUT` |
| programmeStageIdScheme (Schéma d'identification des étapes de programme) | Indique le schéma d'identification à utiliser pour les étapes de programme lors de l'importation. | Énumération | `UID`, `CODE`, `NOM`, `ATTRIBUT` |
| categoryOptionComboIdScheme (Schéma d'identification de la combinaison d'options de catégorie) | Indique le schéma d'identification à utiliser pour les combinaisons d'options de catégorie lors de l'importation. | Énumération | `UID`, `CODE`, `NOM`, `ATTRIBUT` |
| categoryOptionIdScheme (Schéma d'identification des options de catégorie) | Indique le schéma d'identification à utiliser pour les options de catégorie lors de l'importation. | Énumération | `UID`, `CODE`, `NOM`, `ATTRIBUT` |
| importStrategy (stratégie d'importation) | Indique l'effet que l'importation doit avoir. Les différentes possibilités sont `CRÉER`, `METTRE À JOUR`, `CRÉER_ET_METTRE À JOUR` et `SUPPRIMER`. Respectivement, elles permettent d'importer de nouvelles données, d'importer des modifications à des données existantes, d'importer de nouvelles données ou des mises à jour à des données existantes et, enfin, de supprimer des données. | Énumération | `CRÉER`, `METTRE À JOUR`, `CRÉER_ET_METTRE À JOUR` et `SUPPRIMER` |
| Mode atomique | Indique comment l'importation répond aux erreurs de validation. S'il est défini sur `TOUS`, toutes les données importées doivent être valides avant que chaque donnée ne soit commitée. Par contre s'il est défini sur `OBJET`, seules les données commitées doivent être valides, tandis que d'autres données peuvent être invalides. | Énumération | `TOUS`, `OBJET` |
| flushMode (mode de vidage) | Indique la fréquence de vidange. Il s'agit de la fréquence à laquelle les données sont introduites dans la base de données au cours de l'importation. Il est principalement utilisé à des fins de débogage et ne doit pas être modifié dans un environnement de production. | Énumération | `AUTO`, `OBJET` |
| Mode de validation | Indique l'intégralité de l'étape de validation. Il peut être sauté, configuré pour échouer rapidement (retour à la première erreur) ou complet (par défaut), ce qui renverra toutes les erreurs trouvées. | Énumération | `COMPLET`, `ÉCHOUER_RAPIDEMENT`, `SAUTER` |
| Validation du modèle de saut | S'il est défini sur 'vrai', la validation du modèle des attributs générés sera sautée. | Booléen | `VRAI`, `FAUX` |
| Sauter les effets secondaires | Si défini sur 'vrai', les effets secondaires de l'importation seront ignorés. | Booléen | `VRAI`, `FAUX` |
| Sauter les règles | Si défini sur 'vrai', l'exécution des règles de programme pour l'importation sera ignorée. | Booléen | `VRAI`, `FAUX` |

**NOTE**: idScheme and its metadata specific idScheme parameters like orgUnitIdScheme,
programIdScheme, ... used to allow and use the default `AUTO`. `AUTO` has been removed. The default
idScheme has already been `UID`. Any requests sent with idScheme `AUTO` will see the same behavior
as before, namely matching done using `UID`.

#### SYNC et ASYNC { #sync-and-async }

The main difference for the user between synchronous and asynchronous imports is the timing of the
API's response. Synchronous imports provide an immediate [import
summary](#webapi_tracker_import_summary) once the import is finished. In contrast, asynchronous imports
return a reference to the import job right away. The progress of the import job can be tracked using
this `response.location`. Here is an example of an asynchronous import response:

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Tracker job added",
  "response": {
    "id": "cHh2OCTJvRw",
    "location": "https://play.im.dhis2.org/dev/api/tracker/jobs/cHh2OCTJvRw"
  }
}
```

For large imports, opting for asynchronous import can be advantageous for clients, as it prevents
prolonged waiting periods for a response.

### Payload { #payload } 

The importer supports both flat and nested payloads.

#### Charge utile ***PLATE*** { #flat-payload }

The flat payload can include collections for each of the core tracker objects: tracked entities,
enrollments, events, and relationships. This format integrates well with existing data that already
has UIDs assigned. However, for new data, the client must provide new UIDs for any references
between objects. For instance, if you import a new tracked entity with a new enrollment, the client
must provide a UID for the tracked entity so that the enrollment can be linked to it.

```json
{
  "trackedEntities": [
    {
      "orgUnit": "y77LiPqLMoq",
      "trackedEntity": "Kj6vYde4LHh",
      "trackedEntityType": "nEenWmSyUEp"
    },
    {
      "orgUnit": "y77LiPqLMoq",
      "trackedEntity": "Gjaiu3ea38E",
      "trackedEntityType": "nEenWmSyUEp"
    }
  ],
  "enrollments": [
    {
      "enrolledAt": "2019-08-19T00:00:00.000",
      "enrollment": "MNWZ6hnuhSw",
      "occurredAt": "2019-08-19T00:00:00.000",
      "orgUnit": "y77LiPqLMoq",
      "program": "IpHINAT79UW",
      "status": "ACTIVE",
      "trackedEntity": "Kj6vYde4LHh",
      "trackedEntityType": "nEenWmSyUEp"
    }
  ],
  "events": [
    {
      "attributeCategoryOptions": "xYerKDKCefk",
      "attributeOptionCombo": "HllvX50cXC0",
      "dataValues": [
        {
          "dataElement": "bx6fsa0t90x",
          "value": "true"
        },
        {
          "dataElement": "UXz7xuGCEhU",
          "value": "5.7"
        }
      ],
      "enrollment": "MNWZ6hnuhSw",
      "enrollmentStatus": "ACTIVE",
      "event": "ZwwuwNp6gVd",
      "occurredAt": "2019-08-01T00:00:00.000",
      "orgUnit": "y77LiPqLMoq",
      "program": "IpHINAT79UW",
      "programStage": "A03MvHHogjR",
      "scheduledAt": "2019-08-19T13:59:13.688",
      "status": "ACTIVE",
      "trackedEntity": "Kj6vYde4LHh"
    },
    {
      "attributeCategoryOptions": "xYerKDKCefk",
      "attributeOptionCombo": "HllvX50cXC0",
      "enrollment": "MNWZ6hnuhSw",
      "enrollmentStatus": "ACTIVE",
      "event": "XwwuwNp6gVE",
      "occurredAt": "2019-08-01T00:00:00.000",
      "orgUnit": "y77LiPqLMoq",
      "program": "IpHINAT79UW",
      "programStage": "ZzYYXq4fJie",
      "scheduledAt": "2019-08-19T13:59:13.688",
      "status": "ACTIVE",
      "trackedEntity": "Kj6vYde4LHh"
    }
  ],
  "relationships": [
    {
      "from": {
        "trackedEntity": {
          "trackedEntity": "Kj6vYde4LHh"
        }
      },
      "relationshipType": "dDrh5UyCyvQ",
      "to": {
        "trackedEntity": {
          "trackedEntity": "Gjaiu3ea38E"
        }
      }
    }
  ]
}
```

#### Charge utile ***IMBRIQUÉES*** { #nested-payload }

Nested payloads are the most commonly used structure, where tracker objects are embedded within
their parent objects, such as an enrollment within a tracked entity. The advantage of this structure
is that the client does not need to provide UIDs for these references, as this is handled
automatically.

> **NOTE**
>
> Although nested payloads can be easier for clients to manage, the payload will always be flattened
> before the import. For large imports, using a flat structured payload offers more control and
> reduces overhead during the import process.
>
> That being said, you cannot nest new tracked entities, enrollments or events in a relationship.

```json
{
  "trackedEntities": [
    {
      "enrollments": [
        {
          "attributes": [
            {
              "attribute": "zDhUuAYrxNC",
              "displayName": "Last name",
              "value": "Kelly"
            },
            {
              "attribute": "w75KJ2mc4zz",
              "displayName": "First name",
              "value": "John"
            }
          ],
          "enrolledAt": "2019-08-19T00:00:00.000",
          "events": [
            {
              "attributeCategoryOptions": "xYerKDKCefk",
              "attributeOptionCombo": "HllvX50cXC0",
              "dataValues": [
                {
                  "dataElement": "bx6fsa0t90x",
                  "value": "true"
                },
                {
                  "dataElement": "UXz7xuGCEhU",
                  "value": "5.7"
                }
              ],
              "enrollmentStatus": "ACTIVE",
              "notes": [
                {
                  "value": "need to follow up"
                }
              ],
              "occurredAt": "2019-08-01T00:00:00.000",
              "orgUnit": "y77LiPqLMoq",
              "program": "IpHINAT79UW",
              "programStage": "A03MvHHogjR",
              "scheduledAt": "2019-08-19T13:59:13.688",
              "status": "ACTIVE"
            }
          ],
          "occurredAt": "2019-08-19T00:00:00.000",
          "orgUnit": "y77LiPqLMoq",
          "program": "IpHINAT79UW",
          "status": "ACTIVE",
          "trackedEntityType": "nEenWmSyUEp"
        }
      ],
      "orgUnit": "y77LiPqLMoq",
      "trackedEntityType": "nEenWmSyUEp"
    }
  ]
}
```

### Create { #create } 

Make a `POST` to `/api/tracker` with the `importStrategy` set to `CREATE` or `CREATE_AND_UPDATE` and
a payload as described [here](#payload).

### Update { #update } 

Make a `POST` to `/api/tracker` with the `importStrategy` set to `UPDATE` or `CREATE_AND_UPDATE` and
a payload as described [here](#payload).

The payload must include all fields of the object you are updating, even if they have not been
modified. The only exception is collections. Items in a collection that should not be changed can be
omitted, as demonstrated in [update attribute values](#update-data-values) and [update data
values](#update-data-values).

> **Note**
>
> * Deleted tracker objects cannot be updated.
> * Relationships cannot be updated.

#### Update attribute values { #update-attribute-values } 

The following updates one of the attribute values of a [tracked entity](#payload):

    POST /api/tracker?async=false

```json
{
  "trackedEntities": [
    {
      "trackedEntity": "PQfMcpmXeFE",
      "trackedEntityType": "nEenWmSyUEp",
      "orgUnit": "DiszpKrYNg8",
      "attributes": [
        {
          "attribute": "w75KJ2mc4zz",
          "code": "MMD_PER_NAM",
          "displayName": "First name",
          "createdAt": "2016-08-03T23:49:43.308",
          "updatedAt": "2016-08-03T23:49:43.308",
          "valueType": "TEXT",
          "value": "Johnny"
        }
      ]
    }
  ]
}
```

Note that it is not necessary to specify the tracked entity's enrollments. However, you must specify
the non-collection fields of the tracked entity, even if you are not changing them.

#### Delete attribute values { #delete-attribute-values } 

The following deletes one of the attribute values of a [tracked entity](#payload):

    POST /api/tracker?async=false

```json
{
  "trackedEntities": [
    {
      "trackedEntity": "PQfMcpmXeFE",
      "trackedEntityType": "nEenWmSyUEp",
      "orgUnit": "DiszpKrYNg8",
      "attributes": [
        {
          "attribute": "w75KJ2mc4zz",
          "value": null
        }
      ]
    }
  ]
}
```

#### Update data values { #update-data-values } 

The following updates one of the data values of an [event](#payload):

    POST /api/tracker?async=false

```json
{
  "events": [
    {
      "event": "ZwwuwNp6gVd",
      "dataValues": [
        {
          "dataElement": "bx6fsa0t90x",
          "value": "true"
        }
      ],
      "attributeOptionCombo": "HllvX50cXC0",
      "attributeCategoryOptions": "xYerKDKCefk",
      "enrollment": "MNWZ6hnuhSw",
      "enrollmentStatus": "ACTIVE",
      "occurredAt": "2019-08-01T00:00:00.000",
      "orgUnit": "y77LiPqLMoq",
      "program": "IpHINAT79UW",
      "programStage": "A03MvHHogjR",
      "scheduledAt": "2019-08-19T13:59:13.688",
      "status": "ACTIVE",
      "trackedEntity": "Kj6vYde4LHh"
    }
  ]
}
```

#### Delete data values { #delete-data-values } 

The following deletes one of the data values of an [event](#payload):

    POST /api/tracker?async=false

```json
{
  "events": [
    {
      "event": "ZwwuwNp6gVd",
      "dataValues": [
        {
          "dataElement": "bx6fsa0t90x",
          "value": null
        }
      ],
      "attributeOptionCombo": "HllvX50cXC0",
      "attributeCategoryOptions": "xYerKDKCefk",
      "enrollment": "MNWZ6hnuhSw",
      "enrollmentStatus": "ACTIVE",
      "occurredAt": "2019-08-01T00:00:00.000",
      "orgUnit": "y77LiPqLMoq",
      "program": "IpHINAT79UW",
      "programStage": "A03MvHHogjR",
      "scheduledAt": "2019-08-19T13:59:13.688",
      "status": "ACTIVE",
      "trackedEntity": "Kj6vYde4LHh"
    }
  ]
}
```

### Delete { #delete } 

Make a `POST` to `/api/tracker` with `importStrategy` set to `DELETE`. The payload should include
only the UIDs of the `trackedEntities`, `enrollments`, `events` or `relationships` you wish to
delete.

The following deletes the events created with [this payload](#payload):

    POST /api/tracker?async=false&importStrategy=delete

```json
{
  "events": [
    {
      "event": "ZwwuwNp6gVd",
    },
    {
      "event": "XwwuwNp6gVE",
    }
  ]
}
```

The following deletes the tracked entities and all its child tracker objects which are enrollments,
events and relationships:

    POST /api/tracker?async=false&importStrategy=delete

```json
{
  "trackedEntities": [
    {
      "trackedEntity": "Kj6vYde4LHh",
    },
    {
      "trackedEntity": "Gjaiu3ea38E",
    }
  ]
}
```

All the children of a tracker object will be deleted if the user making the request has the
authorities `F_TEI_CASCADE_DELETE` and `F_ENROLLMENT_CASCADE_DELETE`.
Relationships linked to an entity are always deleted, without the need of any authority.

### Importation CSV { #csv-import } 

To import events using CSV make a `POST` request with CSV body file and the `Content-Type` set to
***application/csv*** or ***text/csv***.

#### Événements { #events } 

Every row of the CSV payload represents an event and a data value. So, for events with multiple
data values, the CSV file will have `x` rows per event, where `x` is the number of data values
in that event.

##### *** Exemple de charge utile CSV *** { #csv-payload-example }

Votre fichier CSV peut se présenter comme suit :

```csv
event,status,program,programStage,enrollment,orgUnit,occurredAt,scheduledAt,geometry,latitude,longitude,followUp,deleted,createdAt,createdAtClient,updatedAt,updatedAtClient,completedBy,completedAt,updatedBy,attributeOptionCombo,attributeCategoryOptions,assignedUser,dataElement,value,storedBy,providedElsewhere,storedByDataValue,updatedAtDataValue,createdAtDataValue
A7rzcnZTe2T,ACTIVE,eBAyeGv0exc,Zj7UnCAulEk,RiLEKhWHlxZ,DwpbWkiqjMy,2023-02-12T23:00:00Z,2023-02-12T23:00:00Z,"POINT (-11.468912037323042 7.515913998868316)",7.515913998868316,-11.468912037323042,false,false,2017-09-08T19:40:22Z,,2017-09-08T19:40:22Z,,,,,HllvX50cXC0,xYerKDKCefk,,F3ogKBuviRA,"[-11.4880220438585,7.50978830548003]",admin,false,,2016-12-06T17:22:34.438Z,2016-12-06T17:22:34.438Z
```

Voir [ Événements CSV ](#events-csv) dans la section relative à l'exportation pour une définition plus détaillée des champs CSV.

### Import Summary { #webapi_tracker_import_summary }

L'API du Tracker dispose de deux endpoints de base qui permettent aux consommateurs d'obtenir des commentaires sur leurs importations. 
Ces endpoints concernent plus les tâches d'importation asynchrone, mais ils sont également disponibles pour les importations synchrones. 
Ces endpoints renverront soit le journal de l'importation, soit le récapitulatif de l'importation lui-même.

> **Remarque**
>
> Ces endpoints s'appuient sur des informations stockées dans la mémoire de l'application. Cela signifie que les informations 
> seront indisponibles après certaines situations, telle qu'un redémarrage de l'application ou après un grand nombre de 
> requêtes d'importation qui commencent après celle-ci.

Après avoir soumis une requête d'importation Tracker, nous pouvons accéder aux endpoints suivants afin de surveiller 
la progression de la tâche en fonction des journaux:

`GET /tracker/jobs/{uid}`

| Paramètre|Description ;|Exemple
|---|---|---|
|`{uid}`| L'UID d'une tâche d'importation Tracker existante | ABCDEF12345

#### exemple de ***REQUÊTE*** { #request-example }

`GET /tracker/jobs/PQK63sMwjQp`

#### Exemple de ***RÉPONSE*** { #response-example }

```json
[
  {
    "uid": "PQK63sMwjQp",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.370",
    "message": "Import complete with status OK, 0 created, 0 updated, 0 deleted, 0 ignored",
    "completed": true,
    "id": "PQK63sMwjQp"
  },
  {
    "uid": "XIfTJ1UUNcd",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.369",
    "message": "PostCommit",
    "completed": false,
    "id": "XIfTJ1UUNcd"
  },
  {
    "uid": "uCG4FNJLLBJ",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.364",
    "message": "Commit Transaction",
    "completed": false,
    "id": "uCG4FNJLLBJ"
  },
  {
    "uid": "xfOUv2Lk2MC",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.361",
    "message": "Running Rule Engine Validation",
    "completed": false,
    "id": "xfOUv2Lk2MC"
  },
  {
    "uid": "cSPfA776obb",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.325",
    "message": "Running Rule Engine",
    "completed": false,
    "id": "cSPfA776obb"
  },
  {
    "uid": "mru3HJrFGKA",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.313",
    "message": "Running Validation",
    "completed": false,
    "id": "mru3HJrFGKA"
  },
  {
    "uid": "oTbCUJ2RnA6",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.312",
    "message": "Running PreProcess",
    "completed": false,
    "id": "oTbCUJ2RnA6"
  },
  {
    "uid": "lcUNbWTn6uh",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.312",
    "message": "Calculating Payload Size",
    "completed": false,
    "id": "lcUNbWTn6uh"
  },
  {
    "uid": "l4jQiSS9qdK",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:15.903",
    "message": "Running PreHeat",
    "completed": false,
    "id": "l4jQiSS9qdK"
  },
  {
    "uid": "qGbiuqgwPX5",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:15.850",
    "message": "Loading file content",
    "completed": false,
    "id": "qGbiuqgwPX5"
  },
  {
    "uid": "eWNHzVf7iAj",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:15.838",
    "message": "Loading file resource",
    "completed": false,
    "id": "eWNHzVf7iAj"
  },
  {
    "uid": "t9gOjotekQt",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:15.837",
    "message": "Tracker import started",
    "completed": false,
    "dataType": "PARAMETERS",
    "data": {
      "userId": "xE7jOejl9FI",
      "importMode": "VALIDATE",
      "idSchemes": {
        "dataElementIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "orgUnitIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "programIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "programStageIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "idScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "categoryOptionComboIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "categoryOptionIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        }
      },
      "importStrategy": "CREATE_AND_UPDATE",
      "atomicMode": "ALL",
      "flushMode": "AUTO",
      "validationMode": "FULL",
      "skipPatternValidation": false,
      "skipSideEffects": false,
      "skipRuleEngine": false,
      "filename": null,
      "reportMode": "ERRORS"
    },
    "id": "t9gOjotekQt"
  }
]
```

De plus, le endpoint suivant renverra le récapitulatif de la tâche d’importation. Ce récapitulatif 
ne sera disponible qu'une fois l'importation terminée:

`GET /tracker/jobs/{uid}/report`

| Paramètre|Description ;|Exemple
|---|---|---|
|path `/{uid}`|L'UID d'une tâche d'importation Tracker existante.|ABCDEF12345|
|`reportMode` (Mode de rapport)|Le niveau de détail du rapport.|`COMPLET`&#124;`ERREURS`&#124;`AVERTISSEMENT`|

#### exemple de ***REQUÊTE*** { #request-example }

`GET /tracker/jobs/mEfEaFSCKCC/report`

#### Exemple de ***RÉPONSE*** { #response-example }

La charge de la réponse est la même que celle renvoyée après une requête d'importation synchrone.

> **Remarque**
>
> Les deux endpoints sont principalement utilisés pour l'importation asynchrone. Cependant, `GET /tracker/jobs/{uid}` devrait également 
> fonctionner pour les requêtes synchrones car au final il utilise le même processus d'importation et la même journalisation que les requêtes 
> asynchrones.

### Structure du récapitulatif d'importation { #import-summary-structure }

La structure globale des récapitulatifs d'importation se présente comme suit, en fonction du `mode de rapport` faisant l'objet de la requête :

```json
{
  "status": "OK",
  "validationReport": {
    "errorReports": [],
    "warningReports": []
  },
  "stats": {
    "created": 3,
    "updated": 0,
    "deleted": 0,
    "ignored": 0,
    "total": 3
  },
  "bundleReport": {
    "typeReportMap": {
      "EVENT": {
        "trackerType": "EVENT",
        "stats": {
          "created": 1,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 1
        },
        "objectReports": [
          {
            "trackerType": "EVENT",
            "uid": "gTZBPT3Jq39",
            "errorReports": []
          }
        ]
      },
      "ENROLLMENT": {
        "trackerType": "ENROLLMENT",
        "stats": {
          "created": 1,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 1
        },
        "objectReports": [
          {
            "trackerType": "ENROLLMENT",
            "uid": "ffcvJvWjiNZ",
            "errorReports": []
          }
        ]
      },
      "RELATIONSHIP": {
        "trackerType": "RELATIONSHIP",
        "stats": {
          "created": 0,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 0
        },
        "objectReports": []
      },
      "TRACKED_ENTITY": {
        "trackerType": "TRACKED_ENTITY",
        "stats": {
          "created": 1,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 1
        },
        "objectReports": [
          {
            "trackerType": "TRACKED_ENTITY",
            "uid": "aVcGf9iO8Xp",
            "errorReports": []
          }
        ]
      }
    }
  }
}
```

***statut***

La propriété `statut` du récapitulatif d'importation indique l'état global de l'importation. Si aucune 
erreur ou avertissement n'est signalé(e) lors de l'importation, le `statut` est `OK`. Par contre, si une 
erreur ou un avertissement est signalé(e) lors de l'importation, le statut devient `ERREUR` ou `AVERTISSEMENT`.

Le `statut` dépend de la présence du `Rapport de validation` le plus important. `ERREUR` est le 
plus important, suivi de `AVERTISSEMENT` et enfin `OK`. Cela signifie que le statut est `ERREUR` si une 
seule erreur est détectée lors de l'importation, quel que soit le nombre d'avertissements.

> **Remarque**
>
> Si l'importation est faite selon le mode atomique "OBJET", où les données sont importées 
> sans erreurs de validation, le statut sera toujours `ERREUR` si des erreurs sont détectées.

***Rapport de validation***

Le `Rapport de validation` peut inclure des `Rapports d'erreur` et des `Rapports d'avertissement` si des erreurs ou 
des avertissements étaient présents lors de l'importation. Lorsqu'ils sont présents, ils fournissent une liste détaillée des erreurs ou avertissements 
rencontrés.

Prenons l'exemple d'une erreur de validation lors de l'importation d'une `ENTIÉE_SUIVIE` :

```json
{
  "validationReport": {
    "errorReports": [
      {
        "message": "Could not find TrackedEntityType: `Q9GufDoplCL`.",
        "errorCode": "E1005",
        "trackerType": "TRACKED_ENTITY",
        "uid": "Kj6vYde4LHh"
      },
      ...
    ],
    "warningReports" : [ ... ]
  }
}
```

Le rapport contient un message et un code décrivant l'erreur (voir la section [codes 
d'erreur] (#error-codes) pour plus d'informations sur les erreurs). Il contient également 
le `type de tracker` et l'`uid`, lesquels permettent d'identifier l'emplacement de l'erreur dans les données. Dans ce 
cas, il y avait une `ENTITÉ_SUIVIE` avec l'uid `Kj6vYde4LHh` qui renvoyait à un type d'entité 
suivi qui n'a pas été trouvé.

> **Remarque**
>
> Les `uid` des objets trackers servent de noms à ces objets dans la 
> charge. Par exemple, l'`uid` d'une entité suivie dans la charge serait 
> "trackedEntity". La même chose s'applique aux inscriptions, aux événements et aux relations qui portent 
> respectivement les noms "enrollment", "event" et "relationship".
>
> Si aucun uid n'est fourni dans la charge, le processus d'importation générera de nouveaux uids. Cela signifie 
> que le rapport d'erreur peut faire référence à un uid qui n'existe pas dans votre charge.
>
> Les erreurs signalent des problèmes avec la charge que l'importateur ne peut pas contourner. Toute erreur 
> empêchera l'importation de ces données. Les avertissements, en revanche, sont des problèmes qui peuvent être contournés 
> en toute sécurité, mais dont l'utilisateur doit être informé. Les avertissements ne bloquent 
> pas l'importation des données.

***Statistiques***

Les statistiques donnent un aperçu rapide de l'importation. Une fois l'importation terminée, ces statistiques 
indiqueront la quantité de données créées, mises à jour, supprimées ou ignorées.

Exemple:

```json
{
  "stats": {
    "created": 2,
    "updated": 2,
    "deleted": 1,
    "ignored": 5,
    "total": 10
  }
}
```

`created` fait référence au nombre de nouveaux objets créés. En général, les objets sans UID présents 
dans la charge seront considérés comme de nouveaux objets.

`updated` fait référence au nombre d'objets mis à jour. Si un objet a un UID défini dans la charge, il 
sera considéré comme étant à jour tant que ce même UID se trouve dans la base de données.

`deleted` fait référence au nombre d'objets supprimés lors de l'importation. La suppression ne se produit que lorsque 
l'importation est configurée pour supprimer des données et uniquement lorsque les objets présents dans la charge ont des UID 
définis.

`ignored` fait référence aux objets qui n'ont pas été conservés. Les objets peuvent être ignorés pour plusieurs raisons, par 
exemple pour éviter de créer un objet qui existe déjà. Ignorer des objets ne pose pas de réel problème, car si 
un objet est ignoré, c'est parce que sa création n'était pas nécessaire ou cela lié à la configuration de l'importation.

***bundleRapport*** (Rapport d'ensemble)

Une fois l'importation terminée, le `bundleReport` contient tous les [objets 
tracker](#tracker-objects) importés.

Prenons en exemple l'`ENTITÉ_SUIVIE` :

```json
{
  "bundleReport": {
    "typeReportMap": {
      "TRACKED_ENTITY": {
        "trackerType": "TRACKED_ENTITY",
        "stats": {
          "created": 1,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 1
        },
        "objectReports": [
          {
            "trackerType": "TRACKED_ENTITY",
            "uid": "aVcGf9iO8Xp",
            "errorReports": []
          }
        ]
      }
    }
  }
}
```

Comme nous l'avons vu, chaque type d'objet Tracker sera rapporté, et chacun a ses propres statistiques et 
`objectReports`(rapports d'objets). Ces `rapports d'objets` fourniront des détails sur chaque objet importé, notamment son 
type, son UID et tout rapport d'erreur ou d'avertissement qui le concerne.

***message***

Si l'importation se termine brusquement, le `message`  va contenir des informations supplémentaires sur ce qui 
s'est passé.

### Niveau du rapport récapitulatif de l'importation { #import-summary-report-level }

Comme indiqué précédemment, `GET /tracker/jobs/{uid}/report` peut être récupéré à l'aide d'un paramètre 
`reportMode` spécifique. Par défaut, le endpoint renverra un `importSummary` avec `pour reportMode` 
`ERREUR`.

| Paramètre | Description ; |
|---|---|
| `COMPLET` | Renvoie tout à partir de `AVERTISSEMENTS`, en plus des `timingsStats` |
| `AVERTISSEMENTS` | Renvoie tout à partir de `ERREURS`, en plus de `warningReports` (rapports d'avertissements) dans `validationReports` (rapports de validation) |
| `ERREURS` (par défaut) | Renvoie uniquement `errorReports` (rapports d'erreurs) dans `validationReports` |

De plus, tous les `reportModes` (modes de rapports) renverront `statut`, `statistiques`, `bundleReport` et `message` le cas 
échéant.

### Error Codes { #webapi_tracker_error_codes }

Il existe plusieurs codes d'erreur pour différents scénarios d'erreur. Le tableau suivant contient la liste des 
codes d'erreur générés par la nouvelle API du Tracker, ainsi que les messages d'erreur et quelques descriptions 
supplémentaires. Les espaces réservés dans les messages d'erreur (`{0}`, `{1}`, `{2}`..) sont généralement des uids, sauf 
indication contraire.

| Code d'erreur | Message d'erreur | Description ; |
|:--|:----|:----|
| E1000 | L'utilisateur : `{0}` n'a pas d'accès en écriture sur l'unité d'organisation : `{1}`. | Cela signifie que l'unité d'organisation `{1}` ne fait pas partie du champ de saisie de l'utilisateur `{0}` pour que l'opération d'écriture soit autorisée. |
| E1001 | L'utilisateur : `{0}` n'a pas d'accès en écriture de données sur le Type d'entité suivie : `{1}`. | L'erreur se produit lorsque l'utilisateur n'est pas autorisé à créer ou à modifier les données du Type d'entité suivie `{1}`
| E1002 | L'entité suivie `{0}` existe déjà. | Cette erreur se produit lorsque l'on essaie de créer une nouvelle entité suivie avec un uid déjà existant. Veillez à utiliser un nouvel uid lors de l'ajout d'une nouvelle entité suivie. |
| E1003 | L'unité d'organisation : `{0}` de l'entité suivie (TrackedEntity) est en dehors du champ de recherche de l'utilisateur (User) : `{1}`. | |
| E1005 | Impossible de trouver le Type d'entité suivie : `{0}`. | L'erreur se produit lorsque l'on essaie de récupérer un Type d'entité suivie qui n'existe pas avec l'uid `{0}`. Cela peut également signifier que l'utilisateur n'a pas d'accès en lecture à ce Type d'entité suivie. |
| E1006 | L'attribut : `{0}` n'existe pas. | L'erreur se produit lorsque le système n'a pas pu trouver un attribut d'entité suivie correspondant avec l'uid `{0}`. Cela peut également signifier que l'utilisateur n'a pas accès à l'attribut d'entité suivie. |
| E1007 | Erreur de validation du type de valeur d'attribut : `{0}` ; Erreur : `{1}`. | Incompatibilité entre le type de valeur d'un attribut d'entité suivie et la valeur d'attribut qui lui est fournie. L'erreur de validation réelle sera affichée dans `{1}`. |
| E1008 | L'étape de programme `{0}` n'a pas de référence à un programme. Vérifiez la configuration de l'étape du programme | |
| E1009 | La ressource de fichier : `{0}` a déjà été attribuée à un autre objet. | L'uid de ressource de fichier `{0}` est déjà attribué à un autre objet du système. |
| E1010 | Impossible de trouver le programme : `{0}` lié à l'événement. | Le système n'a pas pu trouver un programme avec l'uid `{0}` spécifié dans la charge utile de l'événement. Cela peut également signifier que l'utilisateur connecté n'a pas accès à ce programme. |
| E1011 | Impossible de trouver l'unité d'organisation : `{0}` lié à l'événement. | Le système n'a pas pu trouver une unité d'organisation avec l'uid `{0}` spécifié dans la charge utile de l'événement.  |
| E1012 | La géométrie n'est pas conforme au FeatureType (type de fonctionnalité) : `{0}`. | Le type de fonctionnalité fourni est soit NONE (aucun), soit incompatible avec la valeur géométrique fournie. |
| E1013 | Impossible de trouver le ProgramStage (étape de programme) : `{0}` lié à l'événement. | Le système n'a pas pu trouver une étape de programme avec l'uid `{0}` spécifié dans la charge utile de l'événement. Cela peut également signifier que l'utilisateur connecté n'a pas accès à l'étape de programme.  |
| E1014 | Un programme identifié `{0}` est un programme sans enregistrement. Aucune inscription ne peut être créée dans un programme sans enregistrement. | Les inscriptions ne peuvent être créées que pour les programmes avec des enregistrements. |
| E1015 | L'entité suivie : `{0}` a déjà une inscription active dans le programme `{1}`. | Il est impossible de s'inscrire à un programme si une autre inscription active existe déjà pour le programme. L’inscription active devra au moins être terminée au préalable.|
| E1016 | L'entité suivie : `{0}` a déjà une inscription active dans le programme: `{1}`, et ce programme n'autorise qu'une seule inscription . | Conformément à la configuration du programme `{1}`, une entité suivie ne peut être inscrite qu'une seule fois à ce programme. Il semble que l'entité suivie `{0}` ait déjà une inscription ACTIVE ou TERMINÉE dans ce programme. Une autre inscription ne peut donc pas être ajoutée. |
| E1018 | L'attribut : `{0}` est obligatoire dans le programme `{1}` mais il n'est pas déclaré dans l'inscription `{2}`. | La valeur de l'attribut est manquante dans la charge utile, pour un attribut défini comme obligatoire pour un programme. Assurez-vous que les valeurs des attributs obligatoires sont fournies dans la charge utile.  |
| E1019 | Seuls les attributs du programme sont autorisés pour l'inscription ; attributs non valides : `{0}`. | L'uid d'attribut `{0}` spécifié dans la charge utile d'inscription n'est pas associé au programme.  |
| E1020 | La date d'inscription identifiée `{0}` ne peut pas être une date ultérieure.` | Il est impossible de créer une inscription à une date ultérieure à moins que le Programme ne le permette dans sa configuration. |
| E1021 | La date d'incidence identifiée `{0}` ne peut pas être une date ultérieure.` | La date d'incidence ne peut pas être une date ultérieure à moins que le Programme ne le permette dans sa configuration. |
| E1022 | L'entité suivie `{0}` doit avoir le même type d'entité suivie que le programme `{1}`. | Le programme est configuré pour accepter un UID de type d'entité suivie différent de celui fourni dans la charge utile d’inscription. |
| E1023 | DisplayIncidentDate is true but property occurredAt is null. | Program is configured with DisplayIncidentDate but it is null in the payload. |
| E1025 | Property enrolledAt is null. | EnrolledAt Date is mandatory for an Enrollment. Make sure it is not null. |
| E1029 | L'unité d'organisation Évènement identifiée `{0}` et le Programme `{1}` ne correspondent pas. | La charge utile de l'événement utilise un programme `{1}` qui n'est pas configuré pour être accessible par l'unité d'organisation `{0}`. |
| E1030 | L'Événement `{0}` existe déjà. | Cette erreur se produit lorsque l'on essaie d'ajouter un nouvel événement avec un uid déjà existant. Veillez à utiliser un nouvel uid lors de l'ajout d'un nouvel événement. |
| E1031 | La date à laquelle l'événement est survenu (OccurredAt) est manquante. | La propriété OccuredAt (est survenue) est nulle ou a un format de date invalide dans la charge utile. |
| E1032 | L'Événement `{0}` n'existe pas. | |
| E1033 | La valeur d'inscription de l'Événement `{0}`  est NULLE. | |
| E1035 | La valeur d'inscription de l'Étape de programme `{0}`  est NULLE. | |
| E1039 | L'Étape de programme `{0}` n'est pas répétable et un événement existe déjà. | Un événement existe déjà pour l'étape de programme de l’inscription. Étant donné que l'étape de programme est configuré pour être non répétable, un autre événement ne peut pas être ajouté pour la même étape de programme.  |
| E1041 | L'unité d'organisation Inscription `{0}` et le Programme `{1}` ne correspondent pas. | La charge utile de l'inscription contient un programme `{1}` qui n'est pas configuré pour être accessible par l'unité d'organisation `{0}`. |
| E1043 | La date de fin de l'événement : `{0}`, a expiré ; il n'est donc  plus possible d'apporter des modifications à cet événement. | Un utilisateur qui ne dispose pas de l'autorité 'F_EDIT_EXPIRED' ne peut pas mettre à jour un événement dont les jours d'expiration, tels que configurés dans son programme, sont dépassés. |
| E1045 | la date d'expiration du programme : `{0}`,  est passée. Il est impossible d'apporter des modifications à cet événement. | |
| E1046 | L'Événement : `{0}`, doit avoir au moins une date (d'événement ou de programmation). | La propriété occuredAt (survenu à) ou selectedAt (sélectionné à) doit figurer dans la charge utile de l’événement. |
| E1047 | La date de l'événement : `{0}`, appartient à une période expirée. Un tel événement ne peut être créé. | Les propriétés occuredAt et scheduledAt de l'événement ont une valeur antérieure à la date de début du type de période (PeriodType).  |
| E1048 | L'objet : `{0}`, uid : `{1}`, a un format d'uid invalide. | Un uid valide comporte 11 caractères. Le premier caractère doit être une lettre de l'alphabet (a-z ou A-Z) et les 10 caractères restants peuvent être alphanumériques (a-z ou A-Z ou 0-9). |
| E1049 | Impossible de trouver l'unité d'organisation : `{0}` lié à l'entité suivie. | Le système n'a pas trouvé une Unité d'Organisation avec l'uid `{0}`. |
| E1050 | La date à laquelle l'événement est programmé (ScheduledAt) est manquante. | La propriété "ScheduledAt" dans la charge utile de l'événement est soit manquante, soit son format de date est invalide. |
| E1051 | Event: `{0}`, completedAt must be null when status is `{1}`. | Event completedAt can only be passed in the payload if status is COMPLETED |
| E1052 | Enrollment: `{0}`, completedAt must be null when status is `{1}`. | Enrollment completedAt can only be passed in the payload if status is COMPLETED |
| E1054 | La combinaison d'options d'attributs `{0}` n'est pas dans la combinaison de catégories de programmes d'événements `{1}`. |
| E1055 | La combinaison d'options d'attribut (AttributeOptionCombo) par défaut n'est pas autorisée car le programme ne dispose pas d'une combinaison de catégories (CategoryCombo) par défaut. | Le programme est configuré pour contenir une combinaison de catégories différente de celle par défaut, mais la requête utilise la combinaison d'options d'attribut par défaut. |
| E1056 | La date d'événement : `{0}`, est antérieure à la date de début : `{1}`, pour l'option d'attribut (AttributeOption) : `{2}`. | L'option de catégorie a une date de début configurée ; la date de l'événement dans la charge utile ne peut pas être antérieure à cette date de début. |
| E1057 | La date d'événement : `{0}`, est postérieure à la date de fin : `{1}`, pour l'option d'attribut (AttributeOption) : `{2}`. | L'option de catégorie a une date de fin configurée ; la date de l'événement dans la charge utile ne peut pas être postérieure à cette date de fin.  |
| E1063 | L'entité suivie `{0}` n'existe pas. | L'erreur se produit lorsque l'on essaie de récupérer une Entité suivie qui n'existe pas avec l'uid `{0}`. Cela peut également signifier que l'utilisateur n'a pas d'accès en lecture à cette Entité suivie. |
| E1064 | Valeur d'attribut non unique `{0}` pour l'attribut `{1}` | La valeur de l'attribut doit être unique dans le champ d'application défini. L'erreur indique que la valeur de l'attribut existe déjà pour une autre Entité suivie. |
| E1068 | Impossible de trouver l'entité suivie : `{0}`, lié à l'inscription. | Le système n'a pas pu trouver l'entité suivie spécifiée dans la charge utile d'inscription. Cela peut également signifier que l'utilisateur n'a pas d'accès en lecture à cette entité suivie. |
| E1069 | Impossible de trouver le programme : `{0}` lié à l'inscription. | Le système n'a pas pu trouver le programme spécifié dans la charge utile d'inscription. Cela peut également signifier que l'utilisateur n'a pas d'accès en lecture à ce programme. |
| E1070 | Impossible de trouver l'unité d'organisation : `{0}` lié à l'inscription. | Le système n'a pas pu trouver l'unité d'organisation spécifiée dans la charge utile d'inscription. |
| E1074 | FeatureType (Type de fonctionnalité) est manquant. | |
| E1075 | L'attribut : `{0}`, n'a pas d'uid. | |
| E1076 | `{0}` `{1}` est obligatoire et ne peut pas être nul | |
| E1077 | La valeur du texte de l'attribut : `{0}`, dépasse la longueur maximale autorisée : `{0}`. | |
| E1079 | Événement : `{0}`, le programme : `{1}` est différent du programme défini dans l'inscription `{2}`. | |
| E1080 | L'Inscription `{0}` existe déjà. | Cette erreur se produit lorsque l'on essaie de créer une nouvelle inscription avec un uid déjà existant. Veillez à utiliser un nouvel uid pour une nouvelle inscription. |
| E1081 | L'Inscription `{0}` n'existe pas. | L'erreur se produit lorsque l'on essaie de récupérer une Inscription qui n'existe pas avec l'uid `{0}`. Cela peut également signifier que l'utilisateur n'a pas d'accès en lecture à cette Inscription. |
| E1082 | L'Événement : `{0}`, est déjà supprimé et ne peut donc plus être modifié. | Si l’événement est supprimé de façon réversible (soft delete), aucune modification n’est autorisée sur cet événement. |
| E1083 | L'Utilisateur : `{0}`, n'est pas autorisé à modifier les événements terminés. | Seul un super utilisateur ou un utilisateur disposant de l'autorité "F_UNCOMPLETE_EVENT" peut modifier les événements terminés. Les événements terminés sont les événements dont le statut est "TERMINÉ". |
| E1084 | La référence de la ressource de fichier : `{0}`, est introuvable. | |
| E1085 | La valeur de l'Attribut : `{0}`, ne correspond pas au type de valeur : `{1}`. | Incompatibilité entre le type de valeur d'un attribut et la valeur d'attribut fournie. |
| E1086 | L'événement : `{0}`, a un programme : `{1}`, qui est un enregistrement mais dont l'étape de programme n'est pas valide ou est manquante. | |
| E1087 | Événement : `{0}`, impossible de trouver l'élément de données : `{1}`, lié à une donnée. | |
| E1088 | L'événement : `{0}`, le programme : `{1}`, et l'étape du programme : `{2}`, n'ont pas été trouvés. | |
| E1089 | L'Événement : `{0}`, fait référence à une Étape de programme `{1}` qui n'appartient pas au Programme `{2}`. | L’uid de l'Étape de programme et l’uid de Programme présent dans la charge utile de l’Événement sont incompatibles. |
| E1090 | L'attribut : `{0}` est obligatoire dans le type d'entité suivie `{1}` mais il n'est pas déclaré dans l'entité suivie `{2}`. | Des valeurs manquent dans la charge utile pour les attributs de type d'entité suivie obligatoires. |
| E1091 | L'utilisateur : `{0}` n'a pas d'accès en écriture de données sur le Programme : `{1}`. | La configuration du partage du Programme est telle que l'utilisateur n'a pas d'accès en écriture pour ce programme. |
| E1094 | Il n'est pas permis de mettre à jour l'Inscription : `{0}`, Programme existant `{1}`. | La charge utile d’inscription pour une inscription existante a un uid de programme différent de celui avec lequel l'inscription a été initialement faite. |
| E1095 | L'utilisateur : `{0}` n'a pas d'accès en écriture de données sur l'Étape de programme : `{1}`. | La configuration du partage de l'Étape de programme est telle que l'utilisateur n'a pas d'accès en écriture pour cette Étape de programme.  |
| E1096 | L'utilisateur : `{0}` n'a pas d'accès en lecture de données sur le Programme : `{1}`. | La configuration du partage du Programme est telle que l'utilisateur n'a pas d'accès en lecture pour ce programme. |
| E1099 | L'utilisateur : `{0}` n'a pas d'accès en écriture sur l'Option de catégorie : `{1}`. | La configuration du partage de l'Option de catégorie est telle que l'utilisateur n'a pas d'accès en écriture pour cette Option de catégorie. |
| E1100 | L'Utilisateur: `{0}`, ne dispose pas de l'autorité 'F_TEI_CASCADE_DELETE' pour supprimer l'entité suivie : `{1}`. | Certaines Inscriptions n'ont pas été supprimées pour cette Entité suivie. Si l'utilisateur ne dispose pas de l'autorité "F_TEI_CASCADE_DELETE", ces inscriptions devront d'abord être supprimées explicitement avant qu'il puisse supprimer l'Entité suivie. |
| E1102 | L'Utilisateur : `{0}`, n'a pas accès à la combinaison de l'Entité suivie : `{1}` et du Programme : `{2}`. | Cette erreur se produit lorsque l'unité d'organisation de l'utilisateur ne possède pas cette entité suivie, pour ce programme spécifique. L'unité d'organisation propriétaire de la combinaison Entité Suivie-Programme (TrackedEntity-Program) doit se trouver dans le champ de saisie (dans certains cas, dans le champ de recherche) de l'utilisateur. |
| E1103 | L'Utilisateur : `{0}`, ne dispose pas de l'autorité 'F_ENROLLMENT_CASCADE_DELETE' pour supprimer l'Inscription : `{1}`. | Certains Événements n'ont pas été supprimées pour cette Inscription. Si l'utilisateur ne dispose pas de l'autorité 'F_ENROLLMENT_CASCADE_DELETE', ces Événements devront d'abord être supprimées explicitement avant qu'il puisse supprimer l'Inscription. |
| E1104 | L'utilisateur : `{0}` n'a pas d'accès en lecture de données sur le programme : `{1}` et le type d'entité suivie : `{2}`. | La configuration du partage du Type d'entité suivie associé au Programme est telle que l'utilisateur n'a pas d'accès en lecture de données pour ce type d'entité suivie. |
| E1110 | Il n'est pas permis de mettre à jour l'Événement : `{0}`, Programme existant `{1}`. | La charge d'Événement pour un Événement existant a un uid de programme différent de celui avec lequel il a été initialement créé.  |
| E1112 | La Valeur d'attribut : `{0}`, est définie sur 'confidentiel' mais le système n'est pas correctement configuré pour crypter les données. | Soit les fichiers JCE sont manquants, soit la propriété de configuration `encryption.password` peut être manquante dans `dhis.conf`. |
| E1113 | L'Inscription : `{0}`, est déjà supprimée et ne peut donc plus être modifiée. | Si l'inscription est supprimée de façon réversible, aucune modification n’est autorisée sur cette inscription. |
| E1114 | L'Entité suivie : `{0}`, est déjà supprimée et ne peut donc plus être modifiée. | Si l'entité suivie est supprimée de façon réversible, aucune modification n’est autorisée sur cette entité suivie. |
| E1115 | Impossible de trouver la Combinaison d'options de catégorie : `{0}`. | |
| E1116 | Impossible de trouver la l'Option de catégorie : `{0}`. | Cela peut également signifier que l'utilisateur n'a pas accès à cette option de catégorie.|
| E1117 | La Combinaison d'options de catégorie n'existe pas pour la combinaison de catégories et les options de catégorie fournies : `{0}`. | |
| E1118 | L'utilisateur assigné `{0}` n'est pas un uid valide. | |
| E1119 | Une note de Tracker avec l'uid `{0}` existe déjà. | |
| E1120 | L'Étape de programme `{0}` n'autorise pas l'assignation d'utilisateurs | La charge utile d'événement a attribué un identifiant d'utilisateur (uid) mais l'étape de programme n’est pas configurée pour autoriser l'assignation d’utilisateurs. |
| E1121 | La propriété d'entité suivie requise est manquante : `{0}`. | |
| E1122 | La propriété d'inscription requise est manquante : `{0}`. | |
| E1123 | La propriété d'événement requise est manquante : `{0}`. | |
| E1124 | La propriété de relation requise est manquante : `{0}`. | |
| E1125 | La valeur `{0}` n'est pas un code d'option valide dans l'ensemble d'options `{1}` | |
| E1126 | Il n'est pas autorisé de mettre à jour la propriété de l'entité suivie : {0}. | |
| E1127 | Il n'est pas autorisé de mettre à jour la propriété d'inscription : {0}. | |
| E1128 | Il n'est pas autorisé de mettre à jour la propriété de l'événement : {0}. | |
| E1300 | Généré par la règle de programme (`{0}`) - `{1}` | |
| E1301 | Généré par la règle de programme (`{0}`) - L'élément de données obligatoire `{1}` n'est pas présent | |
| E1302 | Généré par la règle de programme (`{0}`) - L'élément de données `{1}` n'est pas valide : `{2}` | |
| E1303 | Mandatory DataElement `{0}` is not present | |
| E1304 | Généré par la règle de programme (`{0}`) - L'élément de données `{1}` n'est pas valide | |
| E1305 | Généré par la règle de programme (`{0}`) - L'élément de données `{1}` ne fait pas partie de l'étape de programme `{2}` | |
| E1306 | Généré par la règle de programme (`{0}`) - L'attribut obligatoire `{1}` n'est pas présent | |
| E1307 | Généré par la règle de programme (`{0}`) - Impossible d'attribuer une valeur à l'élément de données `{1}`. La valeur fournie doit être vide ou correspondre à la valeur calculée `{2}` | |
| E1308 | Généré par la règle de programme (`{0}`) - L'élément de données `{1}` est remplacé dans l'événement `{2}` | |
| E1309 | Généré par la règle de programme (`{0}`) - Impossible d'attribuer une valeur à l'attribut `{1}`. La valeur fournie doit être vide ou correspondre à la valeur calculée `{2}` | |
| E1310 | Generated by program rule (`{0}`) - Attribute `{1}` is being replaced in te `{2}` | |
| E1311 | Les événements d'orientation doivent avoir au moins une relation complète. | |
| E1312 | Les événements d'orientation doivent présenter les deux côtés d'une relation | |
| E1313 | L'événement {0} d'une inscription ne renvoie pas à une entité suivie existante. Les données de votre système sont peut-être corrompues. | Il s'agit d'une anomalie dans les données existantes, où les inscriptions peuvent ne pas faire référence à une entité suivie. |
| E1314 | Generated by program rule (`{0}`) - DataElement `{1}` is mandatory and cannot be deleted. | |
| E4000 | La relation : `{0}` ne peut pas être reliée à elle-même | |
| E4001 | L'élément de relation `{0}` n'est pas valide pour la relation `{1}`  : un élément ne peut être relié qu'à une seule entité Tracker. | |
| E4006 | Impossible de trouver le Type de relation : `{0}`. | |
| E4010 | La contrainte du type de relation `{0}` nécessite un {1} mais un {2} a été trouvé . | |
| E4011 | La relation : `{0}` ne peut pas être maintenue car {1} {2} référencé par cette relation n'est pas valide. | |
| E4012 | Impossible de trouver `{0}` : `{1}`, liés à la relation. | |
| E4014 | La contrainte du type de relation `{0}` nécessite une entité suivie de type `{1}` mais c'est un type `{2} ` qui a été trouvé. | |
| E4015 | La relation `{0}` existe déjà. | |
| E4016 | La relation `{0}`  n'existe pas. | |
| E4017 | La relation: `{0}`, est déjà supprimé et ne peut donc plus être modifié. | |
| E4018 | La relation : `{0}`, liant {1} : `{2}` à {3} : `{4}` existe déjà. | |
| E4019 | L'utilisateur : `{0}` n'a pas d'accès en écriture de données sur le Type de relation : `{1}`. | |
| E5000 | "{0}" `{1}` ne peut pas être maintenu car "{2}" `{3}` référencé par lui ne peut pas être maintenu. | L'importateur ne peut pas maintenir un objet tracker car une référence ne peut pas être maintenue. |
| E5001 | "{0}" `{1}` ne peut pas être supprimer car "{2}" `{3}` référencé par lui ne peut pas être supprimer. | L'importateur ne peut pas supprimer un objet tracker car une référence ne peut pas être supprimé. |
| E9999 | N/A | Message d'erreur non défini. |

### Validation { #webapi_tracker_validation }

Lors de l'importation de données à l'aide de l'importateur du Tracker, une série de validations est effectuée pour garantir la 
validité des données. Cette section décrit certains types de validation effectués 
afin que vous puissiez mieux comprendre un échec de validation lors de votre importation.

#### Propriétés requises { #required-properties }

Each of the tracker objects has a few required properties that need to be present when importing
data. For an exhaustive list of required properties, have a look at the [Tracker Object
section](#webapi_tracker_objects).

Lors de la validation des propriétés requises, nous parlons généralement de références à d'autres données ou 
métadonnées. Dans ces cas, on note trois critères principaux :

1. La référence est présente dans la charge utile et est non nulle.
2. La référence indique le bon type de données et existe dans la base de données
3. L'utilisateur est autorisé à voir la référence

Si la première condition n'est pas remplie, l'importation échouera et un message indiquant une référence manquante sera généré. 
Cependant, si la référence indique un objet qui n'existe pas ou auquel l'utilisateur n'a pas 
accès, le message généré indiquera que la référence n'a pas été trouvée.

#### Formats { #formats }

Certaines propriétés des objets Tracker requièrent un format spécifique. Lors de l'importation des données, chacune de 
ces propriétés est validée au regard du format attendu et renvoie des erreurs en fonction de 
la propriété dont le format est incorrect. Voici quelques exemples de propriétés validées de cette manière :

- Les identifiants d'utilisateur ou UID (Ils couvrent toutes les références à d’autres données ou métadonnées dans DHIS2.)
- Dates
- Géométrie (Les coordonnées doivent correspondre au format spécifié par son type)

#### Accès des utilisateurs { #user-access }

All data imported will be validated based on the metadata  ([Sharing](#webapi_tracker_metadata_sharing))
and the organisation units ([Organisation Unit Scopes](#webapi_tracker_orgunit_scope)) referenced in the
data. You can find more information about sharing and organisation unit scopes in the following
sections.

Le partage est validé en même temps que la recherche des références dans la base de données. Les métadonnées auxquelles 
l'utilisateur n'a pas accès seront traitées comme si elles n'existaient pas. L'importation validera toutes les métadonnées 
référencées dans les données.

Les unités d'organisation, quant à elles, servent un double objectif. D'une part, elles permettent de s'assurer que les données 
ne soient importées que pour une unité d'organisation figurant dans le "champ de 
saisie" de l'utilisateur. D'autre part, elles sont également utilisées pour restreindre les programmes disponibles. Cela 
signifie que si vous essayez d'importer des données pour une unité d'organisation qui n'a pas accès au 
programme que vous importez, l'importation ne sera pas valide.

Les utilisateurs disposant de l'autorité `TOUS` ne sont pas affectés par les limites des champs d'application de partage et d'unité d'organisation lorsqu'ils 
importent des données. Cependant, ils ne peuvent pas importer d'inscriptions dans des unités d'organisation qui n'ont 
pas accès au programme d'inscription.

#### Valeurs d'attribut et de données { #attribute-and-data-values }

Les attributs et les valeurs de données font partie respectivement d'une entité suivie et d'un événement. Cependant, 
les attributs peuvent être liés à une entité suivie soit par son type (TrackedEntityType), soit par son 
programme (Program). Les attributs peuvent également être uniques.

La première validation effectuée lors de l'importation consiste à s'assurer que la valeur fournie pour un attribut ou 
un élément de données est conforme au type de valeur attendu. Par exemple, supposons que vous importiez une valeur pour un 
élément de données de type numérique. Dans ce cas, la valeur doit être numérique. Toute erreur 
liée à une non-concordance entre un type et une valeur se traduira par le même code d'erreur, mais avec un 
message spécifique lié au type de violation.

Mandatory attributes and data values are also checked on creation, on update mandatory attributes
and data values are not required in the payload. Currently, removing mandatory attributes and data values is
never allowed. Some use-cases require values to be sent separately, while others require all values to
be sent as one. Programs can be configured to either validate mandatory attributes `ON_COMPLETE` or
`ON_UPDATE_AND_INSERT` to accommodate these use-cases.

The import will validate unique attributes at the time of import. That means as long as the provided
value is unique for the attribute in the whole system, it will pass. However, if the unique value is
found to be used by any other tracked entity other than the one being imported, it will fail.

#### Configuration { #configuration }

Les dernières validations dans l'importateur sont des validations basées sur la configuration des 
métadonnées pertinentes par l'utilisateur. Pour plus d'informations sur chaque configuration, consultez les sections correspondantes. 
Trouvez ci-après quelques exemples de validations configurables :

- Type de fonctionnalité (pour la géométrie)
- Événements attribuables à l'utilisateur
- Autoriser les dates futures
- Inscrire une fois
- Et plus.

Ces configurations apporteront des modifications supplémentaires à la manière dont la validation est effectuée lors de l'importation.

### Generated tracked entity attributes { #webapi_generate_te_attributes }

Tracked entity attributes that use automatic generation of unique values
have three endpoints utilized by apps for generating and reserving these values.
> More info on how TextPattern works can be found [here](https://docs.dhis2.org/en/use/user-guides/dhis-core-version-master/additional-information/dhis2-tutorials.html#working-with-textpattern)

#### Finding Required Values { #finding-required-values } 

A TextPattern may include variables that change based on different factors. Some of these factors are unknown to the server;
thus, the values for these variables must be supplied when generating and reserving values.

This endpoint returns a map of required and optional values that the server will inject into the TextPattern when generating new values.
Required variables must be supplied for generation, whereas optional variables should only be provided if necessary.

  GET /api/33/trackedEntityAttributes/Gs1ICEQTPlG/requiredValues

```json
{
  "REQUIRED": [
    "ORG_UNIT_CODE"
  ],
  "OPTIONAL": [
    "RANDOM"
  ]
}
```

####   Generate value endpoint { #webapi_generate_values }

Online web apps and other clients can use this endpoint to generate a unique value for immediate use.
The generated value is guaranteed to be unique at the time of generation and is reserved for 3 days.
If your TextPattern includes required values, they can be passed as parameters.

To override the expiration time, add `?expiration=<number-of-days>` to the request.

    GET /api/33/trackedEntityAttributes/Gs1ICEQTPlG/generate?ORG_UNIT_CODE=OSLO

```json
{
  "ownerObject": "TRACKEDENTITYATTRIBUTE",
  "ownerUid": "Gs1ICEQTPlG",
  "key": "RANDOM(X)-OSL",
  "value": "C-OSL",
  "created": "2018-03-02T12:01:36.680",
  "expiryDate": "2018-03-05T12:01:36.678"
}
```

#### Point d'extrémité de génération et de réservation de valeur { #webapi_generate_reserve_values }

Offline clients can use this endpoint to reserve a number of unique IDs for later use when registering new tracked entity instances.
The number of IDs to generate can be specified with the `numberToReserve` parameter (default is 1).

To override the default expiration time of 60 days, add `?expiration=<number-of-days>` to the request.

    GET /api/33/trackedEntityAttributes/Gs1ICEQTPlG/generateAndReserve?numberToReserve=3&ORG_UNIT_CODE=OSLO

```json
[
  {
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "B-OSL",
    "created": "2018-03-02T13:22:35.175",
    "expiryDate": "2018-05-01T13:22:35.174"
  },
  {
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "Q-OSL",
    "created": "2018-03-02T13:22:35.175",
    "expiryDate": "2018-05-01T13:22:35.174"
  },
  {
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "S-OSL",
    "created": "2018-03-02T13:22:35.175",
    "expiryDate": "2018-05-01T13:22:35.174"
  }
]
```

#### Valeurs réservées { #reserved-values } 

Les valeurs réservées ne sont actuellement pas accessibles via l'API, mais elles sont renvoyées par les points d'extrémité `generate` (génération) et `generate And Reserve` (génération et réservation). Le tableau suivant explique les propriétés de l'objet de valeur réservée :

Tableau : Valeurs réservées

| Propriété | Description |
|---|---|
| ownerObject  | Le type de métadonnées référencé lors de la génération et de la réservation de la valeur. Actuellement, seul TRACKEDENTITYATTRIBUTE (attribut d'entité suivie) est pris en charge. |
| ownerUid | L'uid de l'objet de métadonnées référencé lors de la génération et de la réservation de la valeur. |
| key | Une valeur partiellement générée où les segments générés ne sont pas encore ajoutés. |
| value | La valeur réservée. C'est la valeur que vous envoyez au serveur lorsque vous stockez des données. |
| created | Date et heure à laquelle la réservation a été effectuée |
| expiryDate | Date et heure à partir de laquelle la réservation ne sera plus valable. |

Les réservations expirées sont supprimées quotidiennement. Si un modèle change, les valeurs déjà réservées seront acceptées lors du stockage des données, même si elles ne correspondent pas au nouveau modèle, tant que la réservation n'a pas expiré.

### Program Rules { #webapi_tracker_program_rules }

Les utilisateurs peuvent configurer des [Règles de programme](#webapi_program_rules), qui vont ajouter un fonctionnement conditionnel aux 
formulaires du Tracker. En plus d'exécuter ces règles dans les applications du Tracker, l'importateur du Tracker va 
également procéder à une sélection de ces règles. Puisque l'importateur exécute également ces règles, nous pouvons garantir 
un niveau de validation supplémentaire.

Toutes les actions de règles de programme ne sont pas prises en charge, car elles ne sont adaptées qu'à une présentation de type « frontend ». 
Une liste complète des actions de règles de programme prises en charge est présentée ci-dessous.

  |Action de règle de programme|Pris en charge|
  |---|:---:|
  |**DISPLAYTEXT** (afficher le texte)| |
  |**DISPLAYKEYVALUEPAIR** (afficher la paire clé-valeur)| |
  |**HIDEFIELD** (cacher le champ)||
  |**HIDESECTION** (cacher la section)||
  |**ASSIGN** (attribuer )|**X**|
  |**SHOWWARNING** (afficher un avertissement)|**X**|
  |**SHOWERROR** (afficher l'erreur)|**X**|
  |**WARNINGONCOMPLETION** (avertissement à la fin)|**X**|
  |**ERRORONCOMPLETION** (erreur à la fin)|**X**|
  |**CREATEEVENT** (créer un événement)||
  |**SETMANDATORYFIELD** (définir un champ obligatoire)|**X**|
  |**SENDMESSAGE** (envoyer un message)|**X**|
  |**SCHEDULEMESSAGE** (planifier un message)|**X**|

Les règles de programme sont évaluées dans l'importateur de la même manière que dans les applications du Tracker. 
En résumé, les conditions suivantes sont prises en compte lors de l'application des règles de programme:

* La règle de programme doit être liée aux données importées ; par exemple, une étape de programme ou un élément de 
données.
* La condition de la règle de programme doit être évaluée comme étant vraie

Les résultats des règles de programme dépendent des actions définies dans ces règles :

* Les actions des règles de programme peuvent aboutir à 2 résultats différents : avertissements ou erreurs.
  * Les erreurs feront échouer la validation, tandis que les avertissements seront rapportés sous forme de message dans le 
  résumé de l'importation.
    * Les actions SHOWWARNING (afficher l'avertissement) et WARNINGONCOMPLETION (avertissement à la fin) ne peuvent générer que des avertissements.
    * Les actions SHOWERROR (afficher l'erreur), ERRORONCOMPLETION (erreur à la fin), et SETMANDATORYFIELD (définir un champ obligatoire) ne peuvent générer que des erreurs.
    * L'action ASSIGN (attribuer) peut générer à la fois des avertissements et des erreurs.
      * Lorsque l'action attribue une valeur à un attribut/élément de données vide, un avertissement est 
      généré.
      * Lorsque l'action attribue une valeur à un attribut/élément de données qui a déjà la même 
      valeur à attribuer, un avertissement est généré.
      * Lorsque l'action attribue une valeur à un attribut/élément de données qui a déjà une valeur 
      et que la valeur à attribuer est différente, une erreur est générée à moins que le 
      paramètre système `RULE_ENGINE_ASSIGN_OVERWRITE` ne soit défini à "true".

Les règles de programme peuvent également entraîner des effets secondaires, telles que l'envoi et la planification de messages. Pour plus 
d’informations sur les actions non voulues, veuillez consulter la section suivante.

> **REMARQUE**
>
> Les règles de programme peuvent être ignorées lors de l'importation à l'aide du paramètre `skipProgramRules` (ignorer les règles de programme).

### Side Effects { #webapi_tracker_side_effects }

Une fois qu'une importation est terminée, des tâches spécifiques peuvent être déclenchées du fait de cette importation. 
Ces tâches sont ce que nous appelons des « effets secondaires ». Ces tâches exécutent des opérations qui n'affectent pas 
l'importation elle-même.

Les effets secondaires sont des tâches qui s'exécutent séparément de l'importation, mais qui sont toujours déclenchées par une importation. Étant donné 
que les effets secondaires sont dissociés de l'importation, ils peuvent échouer même si l'importation réussit. 
De plus, les effets secondaires ne sont exécutés que lorsque l'importation réussit ; ils ne peuvent donc pas échouer dans 
l'autre sens.

Voici donc les effets secondaires actuellement pris en charge :

|Effets secondaires|Pris en charge|Description|
|---|:---:|---|
|**Notification de Tracker**|**X**| Les mises à jour peuvent déclencher des notifications. Celles qui déclenchent des notifications sont **inscription**, **mise à jour d'événement**, **achèvement d'événement ou d'inscription**. |
|**Notification de règle de programme**|**X**| Les règles de programme peuvent déclencher des notifications. Notez que ces notifications font partie des effets des règles de programme qui sont générés via le moteur de règles de DHIS2.|

  > **REMARQUE**
  >
  > Certaines configurations peuvent contrôler l'exécution des effets secondaires. La fonction `skipSideEffects` (ignorer les effets secondaires) peut être activée lors de l'importation pour ignorer complètement les effets secondaires. Par exemple, vous pouvez utiliser ce paramètre lors de l'importation d'un objet pour lequel vous ne voulez pas déclencher de notifications.

### Assign user to events { #webapi_tracker_user_event_assignment }

Certains processus bénéficient du fait que des événements soient traités comme des tâches, et pour cette raison, vous pouvez assigner un 
utilisateur à un événement.

L'assignation d'un utilisateur à un événement ne modifie pas l'accès ou les autorisations des utilisateurs, mais crée 
un lien entre l'événement et l'utilisateur. Lorsqu'un utilisateur est assigné à un événement, vous pouvez lancer des requêtes sur les événements à partir 
de l'API en utilisant le champ `assignedUser` (utilisateur attribué) en tant que paramètre.

Lorsque vous voulez assigner un utilisateur à un événement, fournissez simplement l'UID de cet utilisateur 
dans le champ `assignedUser`. Voir l'exemple suivant:

```json
{
  ...
  "events": [
    {
      "event": "ZwwuwNp6gVd",
      "programStage": "nlXNK4b7LVr",
      "orgUnit": "O6uvpzGd5pu",
      "enrollment": "MNWZ6hnuhSw",
      "assignedUser" : "M0fCOxtkURr"
    }
  ],
  ...
}
```

Dans cet exemple, l'utilisateur avec l'uid `M0fCOxtkURr` sera assigné à l'événement avec l'uid 
`ZwwuwNp6gVd`. Un seul utilisateur peut être assigné à un événement.

Pour utiliser cette fonctionnalité, l'assignation d'utilisateurs doit être activée pour l'étape de programme concernée et l'uid 
fourni pour l'utilisateur doit renvoyer à un utilisateur existant et valide.

## Tracker Export { #webapi_tracker_export }

Les points d'extrémité de l'exportation Tracker vous permettent de récupérer les objets précédemment importés, à savoir :

- **entités suivies**
- **événements**
- **inscriptions**
- **relations**

> **NOTE**
>
> * All tracker export endpoints default to a `JSON` response content. `CSV` is only supported
>   by tracked entities and events.
> * You can export a CSV file by adding the `Accept` header ***text/csv*** or ***application/csv***
>   to the request.
> * You can download in zip and gzip formats:
>     *  CSV for Tracked entities
>     *  JSON and CSV for Events
> * You can export a Gzip file by adding the `Accept` header ***application/csv+gzip*** for CSV
> or ***application/json+gzip*** for JSON.
> * You can export a Zip file by adding the `Accept` header ***application/csv+zip*** for CSV or  
> ***application/json+zip*** for JSON.

### Paramètres de requête courants { #common-request-parameters }

Le point d'extrémité suivant prend en charge les paramètres normalisés pour la pagination.

- **Entités suivies** `GET /api/tracker/trackedEntities`
- **Évènements** `GET /api/tracker/events`
- **Inscriptions** `GET /api/tracker/enrollments`
- **Relations** `GET /api/tracker/relationships`

#### Paramètres de requête pour la pagination { #request-parameters-for-pagination }

|Paramètre de requête|Type|Valeurs autorisées|Description|
|---|---|---|---|
|`page`|`Integer`|Tout entier positif|Numéro de page à renvoyer. La valeur par défaut est 1 .|
|`pageSize`|`Integer`|Tout entier positif|Taille de la page. La valeur par défaut est 50.|
|`totalPages` (pages totales)|`Boolean`|`true`&#124;`false`|Indique s'il faut renvoyer le nombre total d'éléments et de pages. La valeur par défaut est `false` car l'obtention des totaux est une opération coûteuse.|
|`paging`|`Boolean`|`true`&#124;`false`|Indique si la pagination doit être ignorée et si toutes les lignes doivent être renvoyées. La valeur par défaut est `true`, ce qui signifie que par défaut toutes les requêtes sont paginées, sauf si  `paging=false` (c'est-à-dire si le paramètre "pagination" est défini sur "faux")|
|`skipPaging` **est devenu obsolète et sera supprimé dans la version 42 ; utilisez `paging`**|`Boolean`|`true`&#124;`false`|Indique si la pagination doit être ignorée et si toutes les lignes doivent être renvoyées. La valeur par défaut est `faux`, ce qui signifie que par défaut toutes les requêtes sont paginées, sauf si `skipPaging=true` (c'est-à-dire si le paramètre "ignorer la pagination" est défini sur "vrai")|
|`order`|`String`|Comma-separated list of property name and sort direction pairs in format `propName:sortDirection`.<br><br>Example: `createdAt:desc`<br><br>Entities are ordered by newest (internal id desc) by default, meaning when no order parameter is provided.<br><br>**Note:** `propName` is case sensitive. Valid `sortDirections` are `asc` and `desc`. `sortDirection` is case-insensitive. `sortDirection` defaults to `asc` for properties or UIDs without explicit `sortDirection`.||

> **Attention**
>
> Sachez que les performances sont directement liées à la quantité de données qui fait l'objet de la requête. Le renvoi des pages plus volumineuses 
> prendra plus de temps.

#### Paramètres de requête pour le mode de sélection des unités d'organisation{ #request-parameters-for-organisational-unit-selection-mode }

The available organisation unit selection modes are `SELECTED`, `CHILDREN`, `DESCENDANTS`,
`ACCESSIBLE`, `CAPTURE` and `ALL`. Each mode is explained in detail in [this
section](#webapi_tracker_orgunit_scope).

#### Request parameter to filter responses { #webapi_tracker_field_filter }

Tous les points d'extrémité d'exportation acceptent un paramètre `fields` (champs) qui contrôle les champs qui seront renvoyés dans la réponse JSON. Le paramètre `fields` accepte une liste de noms de champs ou de modèles séparés par des virgules. Quelques filtres `fields` possibles sont présentés ci-dessous. Consultez la section [filtre de champ de métadonnées (#webapi_metadata_field_filter)] pour obtenir un guide plus complet sur l'utilisation du paramètre `fields`.

##### Exemples { #examples }

|Exemple de paramètre|Signification|
|:---|:---|
|`fields=*`|renvoie tous les champs|
|`fields=createdAt,uid`|renvoie uniquement les champs `createdAt` et `uid`|
|`fields=inscriptions[*,!uid]`|renvoie tous les champs des `inscriptions` sauf les `uid`|
|`fields=enrollments[uid]`|renvoie uniquement l'`uid` du champ `inscriptions`|
|`fields=enrollments[uid,enrolledAt]`|renvoie uniquement l'`uid` des champs `inscriptions` et `enrolledAt` (inscrit à)|

### Entités suivies (`GET /api/tracker/trackedEntities`) { #tracked-entities-get-apitrackertrackedentities }

Deux points d'extrémité sont dédiés aux entités suivies :

- `GET /api/tracker/trackedEntities`
  - récupère les entités suivies correspondant aux critères donnés
- `GET /api/tracker/trackedEntities/{id}`
  - récupère une entité suivie en fonction de l'identifiant fourni

If not otherwise specified, JSON is the default response for the `GET` method.
The API also supports CSV export for single and collection endpoints. Furthermore, compressed
CSV types is an option for the collection endpoint.

#### CSV { #csv } 

In the case of CSV, the `fields` request parameter has no effect, and the response will always
contain the following fields:

  - Entité suivie (UID)
  - Type d'entité suivie (UID)
  - createdAt (Date et heure)
  - createdAtClient (Date et heure)
  - updatedAt (Date et heure)
  - updatedAtClient (Date et heure)
  - Unité d'organisation (UID)
  - inactif (booléen)
  - supprimé (booléen)
  - potentialDuplicate (booléen)
  - geometry (WKT, https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry.
    Vous pouvez l'omettre dans le cas d'un type de `Point` et si la `latitude` et la `longitude` sont fournies)
  - latitude (Latitude d'un type de géométrie `Point`)
  - longitude (Longitude d'un type de géométrie `Point`)
  - attribut (UID)
  - Afficher le nom (Chaîne)
  - attrCreatedAt (Date de création de l'attribut)
  - attrUpdatedAt (Date de la dernière mise à jour de l'attribut)
  - type de valeur (Chaîne)
  - valeur (Chaîne)
  - stockéBy (Chaîne)
  - createdBy (Nom d'utilisateur de l'utilisateur)
  - updatedBy (Nom d'utilisateur de l'utilisateur)

Voir [Entités suivies](#tracked-entities) et [Attributs](#attributes) pour plus de descriptions de champs.

#### GZIP { #gzip } 

La réponse est le fichier `trackedEntities.csv.gz` contenant le fichier `trackedEntities.csv`.

#### ZIP { #zip } 

La réponse est le fichier `trackedEntities.csv.zip` contenant le fichier `trackedEntities.csv`.

#### Point d'extrémité de la collection d'entités suivies `GET /api/tracker/trackedEntities` { #tracked-entities-collection-endpoint-get-apitrackertrackedentities }

Le but de ce point d'extrémité est de récupérer les entités suivies correspondant aux critères fournis par le client.

Le point d'extrémité renvoie une liste d'entités suivies qui correspondent aux paramètres de la requête.

|Paramètre de requête|Type|Valeurs autorisées|Description|
|---|---|---|---|
|`filtre`|`String`|Valeurs des filtres d'attribut séparées par des virgules |Narrows response to tracked entities matching given filters. A filter is a colon separated property or attribute UID with optional operator and value pairs. Example: `filter=H9IlTX2X6SL:sw:A` with operator starts with `sw` followed by a value. Special characters like `+` need to be percent-encoded so `%2B` instead of `+`. Characters such as `:` (colon) or `,` (comma), as part of the filter value, need to be escaped by `/` (slash). Likewise, `/` needs to be escaped. Multiple operator/value pairs for the same property/attribute like `filter=AuPLng5hLbE:gt:438901703:lt:448901704` are allowed. Repeating the same attribute UID is not allowed. User needs access to the attribute to filter on it.|
|`orgUnits` (unités d'organisation)|`String`|Liste des unités d'organisation `UID` séparées par des virgules.|Renvoie uniquement les d'entités suivies appartenant aux unités d'organisation fournies|
|`orgUnit` **est devenu obsolète et sera supprimé dans la version 42 ; utilisez `orgUnits`**.|`String`|Liste des unités d'organisation `UID` séparées par des points-virgules.|Renvoie uniquement les d'entités suivies appartenant aux unités d'organisation fournies.|
|`orgUnitMode` see [orgUnitModes](#webapi_tracker_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|Le mode de sélection des unités d'organisation peut l'être. La valeur par défaut est `SÉLECTIONNÉ`, qui fait uniquement référence aux unités d'organisation sélectionnées.|
|`ouMode` **deprecated for removal in version 42 use `orgUnitMode`** see [orgUnitModes](#webapi_tracker_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|Le mode de sélection des unités d'organisation peut l'être. La valeur par défaut est `SÉLECTIONNÉ`, qui fait uniquement référence aux unités d'organisation sélectionnées.|
|`programme`|`String`|`UID` de programme|un `UID` de programme dans lequel les entités suivies présentes dans la réponse doivent être inscrites.|
|`programStatus` **deprecated for removal in version 43 use `enrollmentStatus`**|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|The status of the tracked entities enrollment in the given program.|
|`programStage` (étape de programme)|`String`|`UID`|un `UID` d'étape de programme pour lequel les entités suivies présentes dans la réponse doivent avoir des événements.|
|`followUp` (suivi)|`Boolean`|`true`&#124;`false`|Indique si l'entité suivie est marquée pour le suivi du programme spécifié.|
|`updatedAfter` (mis à jour après)|`DateTime` (date et heure)|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | Date et heure de début de la dernière mise à jour|
|`updatedBefore` (mis à jour avant)|`DateTime` (date et heure)|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | Date et heure de fin de la dernière mise à jour|
|`updatedWithin` (mis à jour pendant)|`Durée`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) | Returns tracked entities not older than specified Duration|
|`enrollmentStatus`|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|The status of the tracked entities enrollment in the given program.|
|`enrollmentEnrolledAfter` (Inscription après)|`DateTime` (date et heure)|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Date et heure de début de l’inscription au programme donné|
|`enrollmentEnrolledBefore` (Inscription avant)|`DateTime` (date et heure)|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Date et heure de fin de l’inscription au programme donné|
|`enrollmentOccurredAfter` (Inscription survenue après)|`DateTime` (date et heure)|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Date et heure de début de l'événement dans le programme donné|
|`enrollmentOccurredBefore` (inscription survenue avant)|`DateTime` (date et heure)|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Date et heure de fin de l'événement dans le programme donné|
|`TrackedEntityType` (Type d'entité suivie)|`String`|UID du type d'entité suivi|Renvoie uniquement les entités suivies d'un type donné|
|`trackedEntities` (entités suivies)|`String`|Liste des `UID` des entités suivies, séparée par des virgules.|Il est possible de filtrer le résultat de manière à obtenir un ensemble limité d'entités suivies qui utilisent les uids explicites des entités suivies. Vous pouvez le en utilisant le paramètre `trackedEntity=id1;id2`. Ce paramètre créera, au minimum, la limite externe des résultats, en constituant la liste de toutes les entités suivies à l'aide des uids fournis. Si d'autres paramètres/filtres de ce tableau sont utilisés, ils limiteront davantage les résultats à partir de la limite externe explicite.|
|`trackedEntity` **est devenu obsolète et sera supprimé dans la version 42 ; utilisez `trackedEntities`**.|`String`|Liste des `UID` des entités suivies séparées par des points-virgules.|Il est possible de filtrer le résultat de manière à obtenir un ensemble limité d'entités suivies qui utilisent les uids explicites des entités suivies. Vous pouvez le en utilisant le paramètre `trackedEntity=id1;id2`. Ce paramètre créera, au minimum, la limite externe des résultats, en constituant la liste de toutes les entités suivies à l'aide des uids fournis. Si d'autres paramètres/filtres de ce tableau sont utilisés, ils limiteront davantage les résultats à partir de la limite externe explicite.|
|`assignedUserMode` (mode d'utilisateur assigné)|`String`|`CURRENT`&#124;`PROVIDED`&#124;`NONE`&#124;`ANY`|Restreint le résultat aux entités suivies à qui des événements sont attribués, en fonction du mode de sélection de l'utilisateur assigné. Voir le tableau ci-dessous "Modes d'utilisateur assigné" pour les explications. |
|`assignedUsers` (utilisateurs affectés)|`String`|Liste des UID d'utilisateurs séparés par des virgules, à filtrer sur la base des événements affectés aux utilisateurs.|Il est possible de filtrer le résultat pour obtenir un ensemble limité d'entités suivies avec des événements attribués aux UID donnés, à l'aide du paramètre `assignedUser=id1;id2`. Ce paramètre ne sera pris en compte que si le `mode d'utilisateur assigné` est `FOURNI` ou `nul`. L'API va générer une erreur si, par exemple, `assignedUserMode=CURRENT` et `assignedUser=someId`|
|`assignedUser` **est devenu obsolète et sera supprimé dans la version 42 ; utilisez `assignedUsers`**.|`String`|Liste des UID d'utilisateurs séparés par des points virgules, à filtrer sur la base des événements affectés aux utilisateurs.|Il est possible de filtrer le résultat pour obtenir un ensemble limité d'entités suivies avec des événements attribués aux UID donnés, à l'aide du paramètre `assignedUser=id1;id2`. Ce paramètre ne sera pris en compte que si le "mode d'utilisateur assigné" est `FOURNI` ou `nul`. L'API va générer une erreur si, par exemple, `assignedUserMode=CURRENT` et `assignedUser=someId`|
|`order`|`String`|Liste séparée par des virgules de paires de noms de propriétés, d'attributs ou d'UID et de directions de tri au format `propName:sortDirection`.|Les valeurs prises en charge sont: `createdAt (créé à) createdAtClient (créé au niveau du client), enrolledAt (inscrit à), inactive (inactif), trackedEntity (entité suivie), updatedAt (mis à jour à)`, updatedAtClient (mis à jour au niveau du client), .|
|`eventStatus` (statut d'événement)|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`VISITED`&#124;`SCHEDULE`&#124;`OVERDUE`&#124;`SKIPPED`|Il s'agit du statut de tous les événements présents dans le programme spécifié|
|`eventOccurredAfter` (événement survenu après)|`DateTime` (date et heure)|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Date et heure de début de l'événement pour le programme donné|
|`eventOccurredBefore` (événement survenu avant)|`DateTime` (date et heure)|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Date et heure de fin de l'événement pour le programme donné|
|`includeDeleted` (inclure les éléments supprimés)|`Boolean`|`true`&#124;`false`|Indique s’il faut inclure les éléments supprimés de façon réversible|
|`potentialDuplicate` (doublon potentiel)|`Boolean`|`true`&#124;`false`| Filter the result based on the fact that a tracked entities is a Potential Duplicate. true: return tracked entities flagged as Potential Duplicates. false: return tracked entities NOT flagged as Potential Duplicates. If omitted, we don't check whether a tracked entities is a Potential Duplicate or not. |

Les modes d'utilisateur assigné disponibles sont expliqués dans le tableau suivant.

Tableau : Modes d'utilisateur assigné

| Mode | Description |
|---|---|
| CURRENT | Inclut les événements attribués à l’utilisateur actuellement connecté. |
| PROVIDED | Inclut les événements attribués à l’utilisateur indiqué dans la requête. |
| NONE | Inclut uniquement les événements non attribués. |
| ANY | Inclut tous les événements attribués, peu importe à qui ils sont attribués. |

La requête n'est pas sensible à la casse. Les règles suivantes s'appliquent aux paramètres de requête.

- Au moins une unité d'organisation doit être spécifiée avec le paramètre `orgUnit`
  (un ou plusieurs), ou `orgUnitMode=ALL` doit être spécifié.

- Un seul des paramètres `program` et `trackedEntity` peut être
  spécifié (zéro ou un).

- If `programStatus` is specified, then `program` must also be specified.

- If `enrollmentStatus` is specified, then `program` must also be specified.

- Si `followUp` est spécifié, alors `program` doit également être spécifié.

- Si `enrollmentEnrolledAfter` ou `enrollmentEnrolledBefore` est spécifié, alors
  `program` doit également être spécifié.

- Les éléments du filtre ne peuvent être spécifiés qu'une seule fois.

##### Exemples de requêtes { #example-requests }

Une requête concernant toutes les entités suivies associées à une unité d'organisation et à un programme spécifiques peut ressembler 
à ce qui suit :

    GET /api/tracker/trackedEntities?program=IpHINAT79UW&orgUnits=DiszpKrYNg8

Pour lancer une requête sur les entités suivies en utilisant un attribut avec un filtre et un attribut sans filtre,
avec une unité d'organisation en utilisant le mode de requête par unité d'organisation descendante :

    GET /api/tracker/trackedEntities?program=IpHINAT79UW&orgUnits=DiszpKrYNg8&filter=w75KJ2mc4zz:EQ:John

Une requête dans laquelle plusieurs opérandes et filtres sont spécifiés pour un élément de filtre :

    GET /api/tracker/trackedEntities?orgUnits=DiszpKrYNg8&program=ur1Edk5Oe2n&filter=lw1SqmMlnfh:GT:150&filter=lw1SqmMlnfh:LT:190

Un filtre de requête avec une valeur qui doit être échappée et qui sera interprétée comme ` :,/` :

    GET /api/tracker/trackedEntities?orgUnits=DiszpKrYNg8&program=ur1Edk5Oe2n&filter=lw1SqmMlnfh:EQ:/:/,//

Pour spécifier les dates d'inscription au programme dans la requête :

    GET /api/tracker/trackedEntities?orgUnits=DiszpKrYNg8&program=IpHINAT79UW&fields=trackedEntity,enrollments[enrolledAt]&enrollmentEnrolledAfter=2024-01-01

Pour effectuer une requête sur un attribut en utilisant plusieurs valeurs dans un filtre *IN* :

    GET /api/tracker/trackedEntities?trackedEntityType=nEenWmSyUEp&orgUnits=DiszpKrYNg8&filter=w75KJ2mc4zz:IN:Scott;Jimmy;Santiago

Vous pouvez utiliser une gamme d'opérateurs pour effectuer le filtrage :

|Opérateur|  Description|
|---|---|
|`EQ`|Egal à|
|`GE`|Supérieur ou égal à|
|`GT`|Supérieur à|
|`IN`|Égal à l'une des multiples valeurs séparées par ";"|
|`LE`|inférieur ou égal à|
|`LIKE`|Pareil (correspondance textuelle)|
|`LT`|Inférieur à|
|`NE`|Pas égal à|

##### Exemple de réponse des entités suivies { #tracked-entities-response-example } 

The API supports CSV and JSON response for `GET /api/tracker/trackedEntities`.

##### JSON { #json } 

Responses can be filtered on desired fields, see [Request parameter to filter
responses](#webapi_tracker_field_filter)

Une réponse `JSON` peut ressembler à ce qui suit:

```json
{
  "pager": {
    "page": 1,
    "pageSize": 1
  },
  "trackedEntities": [
    {
      "trackedEntity": "F8yKM85NbxW",
      "trackedEntityType": "Zy2SEgA61ys",
      "createdAt": "2019-08-21T13:25:38.022",
      "createdAtClient": "2019-03-19T01:12:16.624",
      "updatedAt": "2019-08-21T13:31:33.410",
      "updatedAtClient": "2019-03-19T01:12:16.624",
      "orgUnit": "DiszpKrYNg8",
      "inactive": false,
      "deleted": false,
      "potentialDuplicate": false,
      "geometry": {
        "type": "Point",
        "coordinates": [
          -11.7896,
          8.2593
        ]
      },
      "attributes": [
        {
          "attribute": "B6TnnFMgmCk",
          "displayName": "Age (years)",
          "createdAt": "2019-08-21T13:25:38.477",
          "updatedAt": "2019-08-21T13:25:38.477",
          "storedBy": "braimbault",
          "valueType": "INTEGER_ZERO_OR_POSITIVE",
          "value": "30"
        },
        {
          "attribute": "TfdH5KvFmMy",
          "displayName": "First Name",
          "createdAt": "2019-08-21T13:25:38.066",
          "updatedAt": "2019-08-21T13:25:38.067",
          "storedBy": "josemp10",
          "valueType": "TEXT",
          "value": "Sarah"
        },
        {
          "attribute": "aW66s2QSosT",
          "displayName": "Last Name",
          "createdAt": "2019-08-21T13:25:38.388",
          "updatedAt": "2019-08-21T13:25:38.388",
          "storedBy": "karoline",
          "valueType": "TEXT",
          "value": "Johnson"
        }
      ]
    }
  ]
}
```

##### CSV { #csv } 

Une réponse CSV peut ressembler à ce qui suit:

```
trackedEntity,trackedEntityType,createdAt,createdAtClient,updatedAt,updatedAtClient,orgUnit,inactive,deleted,potentialDuplicate,geometry,latitude,longitude,storedBy,createdBy,updatedBy,attrCreatedAt,attrUpdatedAt,attribute,displayName,value,valueType
F8yKM85NbxW,Zy2SEgA61ys,2019-08-21T11:25:38.022Z,2019-03-19T00:12:16.624Z,2019-08-21T11:31:33.410Z,2019-03-19T00:12:16.624Z,DiszpKrYNg8,false,false,false,"POINT (-11.7896 8.2593)",8.2593,-11.7896,,,,2019-08-21T11:25:38.477Z,2019-08-21T11:25:38.477Z,B6TnnFMgmCk,"Age (years)",30,INTEGER_ZERO_OR_POSITIVE
F8yKM85NbxW,Zy2SEgA61ys,2019-08-21T11:25:38.022Z,2019-03-19T00:12:16.624Z,2019-08-21T11:31:33.410Z,2019-03-19T00:12:16.624Z,DiszpKrYNg8,false,false,false,"POINT (-11.7896 8.2593)",8.2593,-11.7896,,,,2019-08-21T11:25:38.066Z,2019-08-21T11:25:38.067Z,TfdH5KvFmMy,"First Name",Sarah,TEXT
F8yKM85NbxW,Zy2SEgA61ys,2019-08-21T11:25:38.022Z,2019-03-19T00:12:16.624Z,2019-08-21T11:31:33.410Z,2019-03-19T00:12:16.624Z,DiszpKrYNg8,false,false,false,"POINT (-11.7896 8.2593)",8.2593,-11.7896,,,,2019-08-21T11:25:38.388Z,2019-08-21T11:25:38.388Z,aW66s2QSosT,"Last Name",Johnson,TEXT
```

#### Point d'extrémité d'objet unique d'entités suivies `GET /api/tracker/trackedEntities/{uid}`

Le but de ce point d'extrémité est de récupérer une entité suivie en se basant sur son UID.

##### Syntaxe de la requête { #request-syntax }

`GET /api/tracker/trackedEntities/{uid}?program={programUid}&fields={fields}`

|Paramètre de requête|Type|Valeurs autorisées|Description|
|---|---|---|---|
|`uid`|`String`|`uid`|Renvoie l'entité suivie disposant de l'`uid` spécifié|
|`programme`|`String`|`uid`| Inclut les attributs du programme dans la réponse (seuls ceux auxquels l'utilisateur a accès) |
|`champs`|`String`| Tout filtre de champ valide (par défaut `*,!relationships,!enrollments,!events,!programOwners`) |Inclut les sous-objets spécifiés dans la réponse|

##### Exemples de requêtes { #example-requests }

Une requête pour une entité suivie:

    GET /api/tracker/trackedEntities/PQfMcpmXeFE

##### Exemple de réponse de l'entité suivie { #tracked-entity-response-example } 

The API supports CSV and JSON response for `GET /api/tracker/trackedEntities/{uid}`

###### JSON { #json } 

Exemple de réponse json :

```json
{
  "trackedEntity": "PQfMcpmXeFE",
  "trackedEntityType": "nEenWmSyUEp",
  "createdAt": "2014-03-06T05:49:28.256",
  "createdAtClient": "2014-03-06T05:49:28.256",
  "updatedAt": "2016-08-03T23:49:43.309",
  "orgUnit": "DiszpKrYNg8",
  "inactive": false,
  "deleted": false,
  "potentialDuplicate": false,
  "attributes": [
    {
      "attribute": "w75KJ2mc4zz",
      "code": "MMD_PER_NAM",
      "displayName": "First name",
      "createdAt": "2016-08-03T23:49:43.308",
      "updatedAt": "2016-08-03T23:49:43.308",
      "valueType": "TEXT",
      "value": "John"
    },
    {
      "attribute": "zDhUuAYrxNC",
      "displayName": "Last name",
      "createdAt": "2016-08-03T23:49:43.309",
      "updatedAt": "2016-08-03T23:49:43.309",
      "valueType": "TEXT",
      "value": "Kelly"
    }
  ],
  "enrollments": [
    {
      "enrollment": "JMgRZyeLWOo",
      "createdAt": "2017-03-06T05:49:28.340",
      "createdAtClient": "2016-03-06T05:49:28.340",
      "updatedAt": "2017-03-06T05:49:28.357",
      "trackedEntity": "PQfMcpmXeFE",
      "program": "IpHINAT79UW",
      "status": "ACTIVE",
      "orgUnit": "DiszpKrYNg8",
      "enrolledAt": "2024-03-06T00:00:00.000",
      "occurredAt": "2024-03-04T00:00:00.000",
      "followUp": false,
      "deleted": false,
      "events": [
        {
          "event": "Zq2dg6pTNoj",
          "status": "ACTIVE",
          "program": "IpHINAT79UW",
          "programStage": "ZzYYXq4fJie",
          "enrollment": "JMgRZyeLWOo",
          "trackedEntity": "PQfMcpmXeFE",
          "relationships": [],
          "scheduledAt": "2023-03-10T00:00:00.000",
          "followUp": false,
          "deleted": false,
          "createdAt": "2017-03-06T05:49:28.353",
          "createdAtClient": "2016-03-06T05:49:28.353",
          "updatedAt": "2017-03-06T05:49:28.353",
          "attributeOptionCombo": "HllvX50cXC0",
          "attributeCategoryOptions": "xYerKDKCefk",
          "dataValues": [],
          "notes": [],
          "followup": false
        }
      ],
      "relationships": [],
      "attributes": [
        {
          "attribute": "w75KJ2mc4zz",
          "code": "MMD_PER_NAM",
          "displayName": "First name",
          "createdAt": "2016-08-03T23:49:43.308",
          "updatedAt": "2016-08-03T23:49:43.308",
          "valueType": "TEXT",
          "value": "John"
        },
        {
          "attribute": "zDhUuAYrxNC",
          "displayName": "Last name",
          "createdAt": "2016-08-03T23:49:43.309",
          "updatedAt": "2016-08-03T23:49:43.309",
          "valueType": "TEXT",
          "value": "Kelly"
        },
        {
          "attribute": "AuPLng5hLbE",
          "code": "National identifier",
          "displayName": "National identifier",
          "createdAt": "2016-08-03T23:49:43.301",
          "updatedAt": "2016-08-03T23:49:43.301",
          "valueType": "TEXT",
          "value": "245435245"
        },
        {
          "attribute": "ruQQnf6rswq",
          "displayName": "TB number",
          "createdAt": "2016-08-03T23:49:43.308",
          "updatedAt": "2016-08-03T23:49:43.308",
          "valueType": "TEXT",
          "value": "1Z 1F2 A84 59 4464 173 6"
        },
        {
          "attribute": "cejWyOfXge6",
          "displayName": "Gender",
          "createdAt": "2016-08-03T23:49:43.307",
          "updatedAt": "2016-08-03T23:49:43.307",
          "valueType": "TEXT",
          "value": "Male"
        },
        {
          "attribute": "VqEFza8wbwA",
          "code": "MMD_PER_ADR1",
          "displayName": "Address",
          "createdAt": "2016-08-03T23:49:43.307",
          "updatedAt": "2016-08-03T23:49:43.307",
          "valueType": "TEXT",
          "value": "Main street 2"
        }
      ],
      "notes": []
    }
  ],
  "programOwners": [
    {
      "orgUnit": "DiszpKrYNg8",
      "trackedEntity": "PQfMcpmXeFE",
      "program": "ur1Edk5Oe2n"
    },
    {
      "orgUnit": "DiszpKrYNg8",
      "trackedEntity": "PQfMcpmXeFE",
      "program": "IpHINAT79UW"
    }
  ]
}
```

###### CSV { #csv } 

The response will be the same as the collection endpoint but referring to a single tracked
entity, although it might have multiple rows for each attribute.

#### Tracked entity attribute value change logs { #webapi_tracker_attribute_change_logs }
`GET /api/tracker/trackedEntities/{uid}/changeLogs`

This endpoint retrieves change logs for the attributes of a specific tracked entity. It returns a list of all tracked entity attributes that have changed over time for that entity.

|Paramètre|Type|Valeurs autorisées|
|---|---|---|
|path `/{uid}`|`String`|Tracked entity `UID`.|
|`programme`|`String`|Program `UID` (optional).|

##### Tracked entity attribute value change logs response example { #tracked-entity-attribute-value-change-logs-response-example } 

Exemple de réponse json :

```json
{
   "pager":{
      "page":1,
      "pageSize":10
   },
   "changeLogs":[
      {
         "createdBy":{
            "uid":"AIK2aQOJIbj",
            "username":"tracker",
            "firstName":"Tracker demo",
            "surname":"User"
         },
         "createdAt":"2024-06-20T14:51:16.433",
         "type":"UPDATE",
         "change":{
            "dataValue":{
               "dataElement":"bx6fsa0t90x",
               "previousValue":"true",
               "currentValue":"false"
            }
         }
      },
      {
         "createdBy":{
            "uid":"AIK2aQOJIbj",
            "username":"tracker",
            "firstName":"Tracker demo",
            "surname":"User"
         },
         "createdAt":"2024-06-20T14:50:32.966",
         "type":"CREATE",
         "change":{
            "dataValue":{
               "dataElement":"ebaJjqltK5N",
               "currentValue":"0"
            }
         }
      }
   ]
}
```

The change log type can be `CREATE`, `UPDATE`, or `DELETE`.
`CREATE` and `DELETE` will always hold a single value: the former shows the current value, and the latter shows the value that was deleted. UPDATE will hold two values: the previous and the current.

### Inscriptions (`GET /api/tracker/enrollments`) { #enrollments-get-apitrackerenrollments }

Deux points d'extrémité sont dédiés aux inscriptions :

- `GET /api/tracker/enrollments`
    - récupère les inscriptions correspondant aux critères donnés
- `GET /api/tracker/enrollments/{id}`
    - récupère une inscription en fonction de l'identifiant fourni

#### Point d'extrémité de la collecte d'inscriptions `GET /api/tracker/enrollments` { #enrollment-collection-endpoint-get-apitrackerenrollments }

Renvoie une liste d'événements en fonction des filtres.

|Paramètre de requête|Type|Valeurs autorisées|Description|
|---|---|---|---|
|`orgUnits` (unités d'organisation)|`String`|Liste des unités d'organisation `UID` séparées par des virgules.|Renvoie uniquement les inscriptions appartenant aux unités d'organisation fournies.|
|`orgUnit` **est devenu obsolète et sera supprimé dans la version 42 ; utilisez `orgUnits`**.|`String`|Liste des unités d'organisation `UID` séparées par des points-virgules.|Renvoie uniquement les inscriptions appartenant aux unités d'organisation fournies.|
|`orgUnitMode` see [orgUnitModes](#webapi_tracker_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|Le mode de sélection des unités d'organisation peut l'être. La valeur par défaut est `SÉLECTIONNÉ`, qui fait uniquement référence aux unités d'organisation sélectionnées.|
|`ouMode` **deprecated for removal in version 42 use `orgUnitMode`** see [orgUnitModes](#webapi_tracker_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|Le mode de sélection des unités d'organisation peut l'être. La valeur par défaut est `SÉLECTIONNÉ`, qui fait uniquement référence aux unités d'organisation sélectionnées.|
|`programme`|`String`|`uid`| Identifiant du programme|
|`programStatus` **deprecated for removal in version 43 use `status`**|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|The status of the enrollment.|
|`statut`|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|The status of the enrollment.|
|`followUp` (suivi)|`boolean`| `true`&#124;`false` | Statut du suivi de l'entité suivie du programme donné. Peut être `vrai`&#124; `faux` ou omis.|
|`updatedAfter` (mis à jour après)|`DateTime` (date et heure)|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | Seules les inscriptions mises à jour après cette date|
|`updatedWithin` (mis à jour pendant)|`Durée`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| Seules les inscriptions mises à jour depuis une durée donnée |
|`enrolledAfter` (inscrits après)|`DateTime` (date et heure)| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|  Seules les inscriptions plus récentes que cette date|
|`enrolledBefore` (inscrits avant)|`DateTime` (date et heure)| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| Seules les inscriptions antérieures à cette date|
|`TrackedEntityType` (Type d'entité suivie)|`String`|`uid`| Identifiant du type d'entité suivie|
|`trackedEntity`|`String`|`uid`| Identifiant d'une entité suivie|
|`order`|`String`|Liste séparée par des virgules de paires de noms de propriétés, d'attributs ou d'UID et de directions de tri au format `propName:sortDirection`.|Champs pris en charge : `completedAt,(terminé à), createdAt (créé à), createdAtClient (créé au niveau du client), enrolledAt (inscrit à), updatedAt (mis à jour à), updatedAtClient (mis à jour au niveau du client)`.|
|`inscriptions`|`String`|Liste des `UID` des inscriptions, séparée par des virgules.|Filtre le résultat pour obtenir un ensemble limité d’identifiants en utilisant  `enrollments=id1,id2`.|
|`enrollment` **est devenu obsolète et sera supprimé dans la version 42 ; utilisez `enrollments`**|`String`|Liste de `uid` séparés par un point-virgule|Filtre le résultat pour obtenir un ensemble limité d’identifiants en utilisant  `enrollments=id1,id2`.|
|`includeDeleted` (inclure les éléments supprimés)|`Boolean`| |S'il est défini sur "vrai", les événements supprimés de façon réversible seront inclus dans le résultat de votre requête.|

La requête n'est pas sensible à la casse. Les règles suivantes s'appliquent aux paramètres de la requête.

- Au moins une unité d'organisation doit être spécifiée à l'aide du paramètre `orgUnit` (une ou plusieurs), ou 
*orgUnitMode=ALL* doit être spécifié.

- Un seul des paramètres *program* et *trackedEntity* peut être spécifié (zéro ou un)

- Si *programStatus* est spécifié, alors *program* doit également être spécifié.
- If *enrollmentStatus* is specified, then *program* must also be specified.

- Si *followUp* est spécifié, alors *program* doit également être spécifié.

- Si *enrolledAfter* ou *enrolledBefore* est spécifié, alors *program* doit également être spécifié.

##### Exemples de requêtes { #example-requests }

Une requête pour toutes les inscriptions associées à une unité d'organisation spécifique peut ressembler à ceci :

    GET /api/tracker/enrollments?orgUnits=DiszpKrYNg8

Pour limiter la réponse aux inscriptions qui font partie d'un programme spécifique, vous pouvez inclure un 
paramètre de requête de programme :

    GET /api/tracker/enrollments?orgUnits=O6uvpzGd5pu&orgUnitMode=DESCENDANTS&program=ur1Edk5Oe2n

Pour spécifier les dates d'inscription au programme dans la requête :

    GET /api/tracker/enrollments?orgUnits=DiszpKrYNg8&program=M3xtLkYBlKI&enrolledAfter=2023-11-14&enrolledBefore=2024-02-07

Pour limiter la réponse aux inscriptions d'une entité suivie spécifique, vous pouvez inclure un paramètre 
de requête d'entité suivie:

    GET /api/tracker/enrollments?trackedEntity=ClJ3fn47c4s

Pour limiter la réponse aux inscriptions d'une entité suivie spécifique, vous pouvez inclure un paramètre 
de requête d'entité suivie. Dans ce cas, nous avons limité la réponse aux inscriptions disponibles pour 
l'utilisateur actuel :

    GET /api/tracker/enrollments?orgUnitMode=ACCESSIBLE&trackedEntity=tphfdyIiVL6

##### Format de réponse { #response-format }

La réponse `JSON` peut ressembler à ceci :

```json
{
  "pager": {
    "page": 1,
    "pageSize": 1
  },
  "enrollments": [
    {
      "enrollment": "TRE0GT7eh7Q",
      "createdAt": "2019-08-21T13:28:00.056",
      "createdAtClient": "2018-11-13T15:06:49.009",
      "updatedAt": "2019-08-21T13:29:44.942",
      "updatedAtClient": "2019-08-21T13:29:44.942",
      "trackedEntity": "s4NfKOuayqG",
      "program": "M3xtLkYBlKI",
      "status": "COMPLETED",
      "orgUnit": "DiszpKrYNg8",
      "enrolledAt": "2023-11-13T00:00:00.000",
      "occurredAt": "2023-11-13T00:00:00.000",
      "followUp": false,
      "deleted": false,
      "storedBy": "healthworker1",
      "notes": []
    }
  ]
}
```

#### Point d'extrémité d'objet unique d'inscriptions `GET /api/tracker/enrollments/{uid}`

Le but de ce point d'extrémité est de récupérer une inscription en se basant sur son UID.

##### Syntaxe de la requête { #request-syntax }

`GET /api/tracker/enrollment/{uid}`

|Paramètre de requête|Type|Valeurs autorisées|Description|
|---|---|---|---|
|`uid`|`String`|`uid`|Renvoie l'inscription disposant de l'`uid` spécifié|
|`champs`|`String`| Tout filtre de champ valide (par défaut `*,!relationships,!events,!attributes`) |Inclut
les sous-objets spécifiés dans la réponse

##### Exemples de requêtes { #example-requests }

Une requête pour une inscription:

    GET /api/tracker/enrollments/JMgRZyeLWOo

##### Format de réponse { #response-format }

```json
{
  "enrollment": "JMgRZyeLWOo",
  "createdAt": "2017-03-06T05:49:28.340",
  "createdAtClient": "2016-03-06T05:49:28.340",
  "updatedAt": "2017-03-06T05:49:28.357",
  "trackedEntity": "PQfMcpmXeFE",
  "program": "IpHINAT79UW",
  "status": "ACTIVE",
  "orgUnit": "DiszpKrYNg8",
  "enrolledAt": "2024-03-06T00:00:00.000",
  "occurredAt": "2024-03-04T00:00:00.000",
  "followUp": false,
  "deleted": false,
  "notes": []
}
```

### Événements (`GET /api/tracker/events`) { #events-get-apitrackerevents }

Deux points d'extrémité sont dédiés aux événements :

- `GET /api/tracker/events`
    - récupère les événements correspondant aux critères donnés
- `GET /api/tracker/events/{id}`
    - récupère un événement en fonction de l'identifiant fourni

If not otherwise specified, JSON is the default response for the `GET` method.
The API also supports CSV export for single and collection endpoints. Furthermore, it supports
compressed JSON and CSV for the collection endpoint.

#### Événements CSV { #events-csv } 

In the case of CSV, the `fields` request parameter has no effect, and the response will always
contain the following fields:

  - Événement (UID)
  - statut (Chaîne)
  - programme (UID)
  - Étape de programme (UID)
  - Inscription (UID)
  - Unité d'organisation (UID)
  - Survenue à ( date/heure)
  - programmé à (date/heure)
  - geometry (WKT, https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry.
    Vous pouvez l'omettre dans le cas d'un type de `Point` et si la `latitude` et la `longitude` sont fournies)
  - latitude (Latitude d'un type de géométrie `Point`)
  - longitude (Longitude d'un type de géométrie `Point`)
  - suivi (booléen)
  - supprimé (booléen)
  - createdAt (Date et heure)
  - createdAtClient (Date et heure)
  - updatedAt (Date et heure)
  - updatedAtClient (Date et heure)
  - terminépar (Chaîne)
  - terminéà (Date et heure)
  - updatedBy (Nom d'utilisateur de l'utilisateur)
  - attributeOptionCombo (combinaison d'options d'attribut) (UID) 
  - attributeCategoryOptions (options de catégorie d'attribut) (UID)
  - assignedUser (Nom d'utilisateur de l'utilisateur)
  - dataElement (Élément de données) (UID)
  - valeur (Chaîne)
  - stockéBy (Chaîne)
  - providedElsewhere (Fourni ailleurs) (booléen)
  - storedByDataValue (String) (stockéParValeurdeDonnée (Chaîne))
  - createAtDataValue (Date et heure)
  - updatedAtDataValue (Date et heure)

Voir [Événements](#événements) et [Valeurs des données](#valeurs des données) pour plus de détails sur les champs.

#### Événements GZIP { #events-gzip } 

The response is file `events.json.gz` or `events.csv.gzip` containing the `events.json`
or `events.csv` file.

#### Événements ZIP { #events-zip } 

The response is file`events.json.gz` or `events.json.zip` containing the `events.json`
or `events.csv` file.

#### Point d'extrémité de la collecte d'événements `GET /api/tracker/events` { #events-collection-endpoint-get-apitrackerevents }

Renvoie une liste d'événements en fonction des filtres fournis.

|Paramètre de requête|Type|Valeurs autorisées|Description|
|---|---|---|---|
|`programme`|`String`|`uid`| Identifiant du programme|
|`programStage` (étape de programme)|`String`|`uid`| Identifiant de l'étape de programme|
|`programStatus` **deprecated for removal in version 43 use `enrollmentStatus`**|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|The status of the events enrollment.|
|`filtre`|`String`|Valeurs des filtres d'éléments de données, séparées par des virgules |Restreint la réponse aux événements correspondant aux filtres indiqués. Un filtre est un UID de propriété ou d'élément de données séparé par deux points (:) avec des paires d'opérateurs et de valeurs optionnelles. Exemple : `filter=fazCI2ygYkq:eq:PASSIVE` avec un opérateur commençant par `eq` suivi d'une valeur. Les caractères tels que `:` (deux points) ou `,` (virgule), qui font partie de la valeur du filtre, doivent être échappés par `/` (barre oblique). De même, `/` doit être échappé. Plusieurs paires opérateur/valeur pour la même propriété/élément de données comme `filter=qrur9Dvnyt5:gt:70:lt:80` sont autorisées. Par contre, il n'est pas autorisé de répéter l'UID d'un même élément de données. L'utilisateur doit avoir accès à l'élément de données pour pouvoir effectuer un filtrage dessus.|
|`filterAttributes` (attributs de filtres)|`String`|Valeurs des filtres d'attribut séparées par des virgules |Narrows response to tracked entities matching given filters. A filter is a colon separated property or attribute UID with optional operator and value pairs. Example: `filter=H9IlTX2X6SL:sw:A` with operator starts with `sw` followed by a value. Special characters like `+` need to be percent-encoded so `%2B` instead of `+`. Characters such as `:` (colon) or `,` (comma), as part of the filter value, need to be escaped by `/` (slash). Likewise, `/` needs to be escaped. Multiple operator/value pairs for the same property/attribute like `filter=AuPLng5hLbE:gt:438901703:lt:448901704` are allowed. Repeating the same attribute UID is not allowed. User needs access to the attribute to filter on it.|
|`followUp` (suivi)|`boolean`| `true`&#124;`false` | Détermine si l'événement est pris en compte pour un suivi dans le programme. La valeur par défaut est `vrai`|
|`trackedEntity`|`String`|`uid`|Identifiant d'une entité suivie|
|`orgUnit` (unité d'organisation)|`String`|`uid`|Identifiant de l'unité d'organisation|
|`orgUnitMode` see [orgUnitModes](#webapi_tracker_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|Le mode de sélection des unités d'organisation peut l'être. La valeur par défaut est `SÉLECTIONNÉ`, qui fait uniquement référence aux unités d'organisation sélectionnées.|
|`ouMode` **deprecated for removal in version 42 use `orgUnitMode`** see [orgUnitModes](#webapi_tracker_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|Le mode de sélection des unités d'organisation peut l'être. La valeur par défaut est `SÉLECTIONNÉ`, qui fait uniquement référence aux unités d'organisation sélectionnées.|
|`statut`|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`VISITED`&#124;`SCHEDULE`&#124;`OVERDUE`&#124;`SKIPPED` | Statut de l'événement|
|`occurredAfter` (survenu après)|`DateTime` (date et heure)|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | Filtre pour les événements survenus après cette date.|
|`occurredBefore` (survenu avant)|`DateTime` (date et heure)| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| Filtre pour les événements survenus jusqu'à cette date.|
|`scheduledAfter` (programmé après)|`DateTime` (date et heure)|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | Filtre pour les événements programmés après cette date.|
|`scheduledBefore` (programmé av|`DateTime` (date et heure)| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| Filtre pour les événements programmés avant cette date.|
|`updatedAfter` (mis à jour après)|`DateTime` (date et heure)| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| Filtre pour les événements qui ont été mis à jour après cette date. Ne peut pas être utilisé avec `updatedWithin` (mis à jour pendant).|
|`updatedBefore` (mis à jour avant)|`DateTime` (date et heure)|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | Filtre pour les événements qui ont été mis à jour jusqu'à cette date. Ne peut pas être utilisé avec `updatedWithin`.|
|`updatedWithin` (mis à jour pendant)|`Durée`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Durations)| Incluez uniquement les éléments mis à jour pendant la durée indiquée.<br><br> Le format est [ISO-8601#Duration](https://en.wikipedia.org/wiki/ISO_8601#Durations)|
|`enrollmentStatus`|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|The status of the events enrollment.|
|`enrollmentEnrolledAfter` (Inscription après)|`DateTime` (date et heure)|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Date et heure de début de l’inscription au programme donné|
|`enrollmentEnrolledBefore` (Inscription avant)|`DateTime` (date et heure)|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Date et heure de fin de l’inscription au programme donné|
|`enrollmentOccurredAfter` (Inscription survenue après)|`DateTime` (date et heure)|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Date et heure de début de l'événement dans le programme donné|
|`enrollmentOccurredBefore` (inscription survenue avant)|`DateTime` (date et heure)|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Date et heure de fin des événements survenus dans le programme donné|
|`dataElementIdScheme` (Schéma d'identification d'élément de données)|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| Schéma d’identification d'élément de données à utiliser pour l’exportation.|
|`categoryOptionComboIdScheme` (Schéma d'identification de combinaison d'options de catégorie)|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| Schéma d'identification de combinaison d'options de catégorie à utiliser pour l'exportation|
|`orgUnitIdScheme` (Schéma d'identification d'unité d'organisation)|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| Schéma d'identification d'unité d'organisation à utiliser pour l'exportation|
|`programIdScheme` (Schéma d'identification de programme)|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| Schéma d’identification de programme à utiliser pour l’exportation.|
|`programStageIdScheme` (Schéma d'identification d'étape de programme)|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| Schéma d’identification d'étape de programme à utiliser pour l’exportation.|
|`idScheme` (Schéma d'identification)|`chaîne`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| Permet de définir le schéma d'identification  à la fois pour l'élément de données, la combinaison d'options de catégorie, l'unité d'organisation, le programme et l'étape de programme.|
|`order`|`String`|Liste de paires de noms de propriétés, d'attributs ou d'éléments de données UID et de directions de tri, séparées par des virgules, au format `propName:sortDirection`.|Champs pris en charge : `assignedUser, assignedUserDisplayName, attributeOptionCombo, completedAt, completedBy, createdAt, createdAtClient, createdBy, deleted, enrolledAt, enrollment, enrollmentStatus, event, followUp, followup (deprecated), occurredAt, orgUnit, program, programStage, scheduledAt, status, storedBy, trackedEntity, updatedAt, updatedAtClient, updatedBy`.|
|`événements`|`String`|Liste des `UID` des événements, séparée par des virgules.|Filtre le résultat pour obtenir un ensemble limité d’identifiants en utilisant `event=id1,id2`.|
|`event`**est devenu obsolète et sera supprimé dans la version 42 ; utilisez `events`**.|`String`|Liste de `uid` séparés par un point-virgule| Filtre le résultat pour obtenir un ensemble limité d’identifiants en utilisant `event=id1,id2`.|
|`attributeCategoryCombo` (voir la remarque)|`String`|Identifiant de la combinaison de catégories d'attributs. Doit être combiné avec `attributeCategoryOptions`.|
|`attributeCc` **est devenu obsolète et sera supprimé dans la version 42 ; utilisez `attributeCategoryCombo`**|`String`|Identifiant de la combinaison de catégories d'attribut (doit être utilisé avec les options de catégorie d'attribut (attributCos))|
|`attributeCategoryOptions` (voir la remarque)|`String`|Identifiants d'options de catégories d'attributs séparés par des virgules. Doit être combiné avec `attributeCategoryCombo`.|
|`attributeCos` **est devenu obsolète et sera supprimé dans la version 42 ; utilisez `attributeCategoryOptions`**|`String`|Identifiants d'options de catégories d'attributs séparés par des points-virgules. Doit être combiné avec `attributeCc`.|
|`includeDeleted` (inclure les éléments supprimés)|`Boolean`| |  S'il est défini sur "vrai", les événements supprimés de façon réversible seront inclus dans le résultat de votre requête.|
|`assignedUserMode` (mode d'utilisateur assigné)|`String`| `CURRENT`&#124;`PROVIDED`&#124;`NONE`&#124;`ANY`| Mode de sélection de l'utilisateur assigné|
|`assignedUsers` (utilisateurs affectés)|`String`|Liste des UID d'utilisateurs séparés par des virgules, à filtrer sur la base des événements affectés aux utilisateurs.|Il est possible de filtrer le résultat pour obtenir un ensemble limité d'entités suivies avec des événements attribués aux UID donnés, à l'aide du paramètre `assignedUser=id1;id2`. Ce paramètre ne sera pris en compte que si le `mode d'utilisateur assigné` est `FOURNI` ou `nul`. L'API va générer une erreur si, par exemple, `assignedUserMode=CURRENT` et `assignedUser=someId`|
|`assignedUser` **est devenu obsolète et sera supprimé dans la version 42 ; utilisez `assignedUsers`**.|`String`|Liste des UID d'utilisateurs séparés par des points virgules, à filtrer sur la base des événements affectés aux utilisateurs.|Il est possible de filtrer le résultat pour obtenir un ensemble limité d'entités suivies avec des événements attribués aux UID donnés, à l'aide du paramètre `assignedUser=id1;id2`. Ce paramètre ne sera pris en compte que si le "mode d'utilisateur assigné" est `FOURNI` ou `nul`. L'API va générer une erreur si, par exemple, `assignedUserMode=CURRENT` et `assignedUser=someId`|

> **Remarque**
>
> Si la requête ne contient ni `attributeCategoryOptions` ni `attributeCategoryOptions`,
> le serveur renvoie des événements pour toutes les combinaisons d'options d'attribut pour lesquelles l'utilisateur a un accès en lecture.

##### Exemples de requêtes { #example-requests }

La requête pour tous les événements associés aux subordonnées d'une unité d'organisation donnée :

    GET /api/tracker/events?orgUnit=YuQRtpLP10I&orgUnitMode=CHILDREN

La requête pour tous les événements associés à tous les descendants d'une unité d'organisation donnée, c'est-à-dire toutes les unités d'organisation qui lui sont inférieurs dans la hiérarchie :

    GET /api/tracker/events?orgUnit=O6uvpzGd5pu&orgUnitMode=DESCENDANTS

Requête pour tous les événements associés à un programme et à une unité d'organisation :

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc

La requête pour tous les événements disposant d'un programme et d'une unité d'organisation, ordonnés par date programmée en ordre croissant :

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&order=scheduledAt

La requête pour les 10 événements dont la date de déroulement est la plus récente dans un programme et une unité d'organisation donné -
par pagination et ordonnés par date de déroulement en ordre décroissant :

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&order=occurredAt:desc&pageSize=10&page=1

La requête pour tous les événements avec un programme et une unité d'organisation pour une entité suivie donnée :

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=M3xtLkYBlKI&trackedEntity=dNpxRu1mWG5

Recherche de tous les événements antérieurs ou égaux à 2024-02-03 qui sont liés à un programme et à une unité 
d'organisation :

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&occurredBefore=2024-02-03

Une requête dans laquelle plusieurs opérandes et filtres sont spécifiés pour un UID d'élément de données :

    GET /api/tracker/events?orgUnit=g8upMTyEZGZ&program=M3xtLkYBlKI&filter=rFQNCGMYud2:GT:35&filter=rFQNCGMYud2:LT:50

Un filtre de requête avec une valeur qui doit être échappée et qui sera interprétée comme ` :,/` :

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=lxAQ7Zs9VYR&filter=DanTR5x0WDK:EQ:/:/,//

##### Exemple de réponse des événements  { #events-response-example } 

L'API prend en charge les réponses CSV et JSON pour `GET /api/tracker/events`.

###### JSON { #json } 

La réponse JSON peut ressembler à ce qui suit:

```json
{
  "pager": {
    "page": 1,
    "pageSize": 1
  },
  "events": [
    {
      "event": "A7rzcnZTe2T",
      "status": "ACTIVE",
      "program": "eBAyeGv0exc",
      "programStage": "Zj7UnCAulEk",
      "enrollment": "RiLEKhWHlxZ",
      "orgUnit": "DwpbWkiqjMy",
      "occurredAt": "2023-02-13T00:00:00.000",
      "scheduledAt": "2023-02-13T00:00:00.000",
      "followUp": false,
      "deleted": false,
      "createdAt": "2017-09-08T21:40:22.000",
      "createdAtClient": "2016-09-08T21:40:22.000",
      "updatedAt": "2017-09-08T21:40:22.000",
      "attributeOptionCombo": "HllvX50cXC0",
      "attributeCategoryOptions": "xYerKDKCefk",
      "geometry": {
        "type": "Point",
        "coordinates": [
          -11.468912037323042,
          7.515913998868316
        ]
      },
      "dataValues": [
        {
          "createdAt": "2016-12-06T18:22:34.438",
          "updatedAt": "2016-12-06T18:22:34.438",
          "storedBy": "bjorn",
          "providedElsewhere": false,
          "dataElement": "F3ogKBuviRA",
          "value": "[-11.4880220438585,7.50978830548003]"
        },
        {
          "createdAt": "2013-12-30T14:23:57.423",
          "updatedAt": "2013-12-30T14:23:57.423",
          "storedBy": "lars",
          "providedElsewhere": false,
          "dataElement": "eMyVanycQSC",
          "value": "2018-02-07"
        },
        {
          "createdAt": "2013-12-30T14:23:57.382",
          "updatedAt": "2013-12-30T14:23:57.382",
          "storedBy": "lars",
          "providedElsewhere": false,
          "dataElement": "oZg33kd9taw",
          "value": "Male"
        }
      ],
      "notes": [],
      "followup": false
    }
  ]
}
```

###### CSV { #csv } 

La réponse CSV peut ressembler à ce qui suit:

```csv
event,status,program,programStage,enrollment,orgUnit,occurredAt,scheduledAt,geometry,latitude,longitude,followUp,deleted,createdAt,createdAtClient,updatedAt,updatedAtClient,completedBy,completedAt,updatedBy,attributeOptionCombo,attributeCategoryOptions,assignedUser,dataElement,value,storedBy,providedElsewhere,storedByDataValue,updatedAtDataValue,createdAtDataValue
A7rzcnZTe2T,ACTIVE,eBAyeGv0exc,Zj7UnCAulEk,RiLEKhWHlxZ,DwpbWkiqjMy,2023-02-12T23:00:00Z,2023-02-12T23:00:00Z,"POINT (-11.468912037323042 7.515913998868316)",7.515913998868316,-11.468912037323042,false,false,2017-09-08T19:40:22Z,,2017-09-08T19:40:22Z,,,,,HllvX50cXC0,xYerKDKCefk,,F3ogKBuviRA,"[-11.4880220438585,7.50978830548003]",admin,false,,2016-12-06T17:22:34.438Z,2016-12-06T17:22:34.438Z
A7rzcnZTe2T,ACTIVE,eBAyeGv0exc,Zj7UnCAulEk,RiLEKhWHlxZ,DwpbWkiqjMy,2023-02-12T23:00:00Z,2023-02-12T23:00:00Z,"POINT (-11.468912037323042 7.515913998868316)",7.515913998868316,-11.468912037323042,false,false,2017-09-08T19:40:22Z,,2017-09-08T19:40:22Z,,,,,HllvX50cXC0,xYerKDKCefk,,eMyVanycQSC,2018-02-07,admin,false,,2013-12-30T13:23:57.423Z,2013-12-30T13:23:57.423Z
A7rzcnZTe2T,ACTIVE,eBAyeGv0exc,Zj7UnCAulEk,RiLEKhWHlxZ,DwpbWkiqjMy,2023-02-12T23:00:00Z,2023-02-12T23:00:00Z,"POINT (-11.468912037323042 7.515913998868316)",7.515913998868316,-11.468912037323042,false,false,2017-09-08T19:40:22Z,,2017-09-08T19:40:22Z,,,,,HllvX50cXC0,xYerKDKCefk,,msodh3rEMJa,2018-02-13,admin,false,,2013-12-30T13:23:57.467Z,2013-12-30T13:23:57.467Z
```

#### Point d'extrémité d'objet unique d'événements `GET /api/tracker/events/{uid}`

Le but de ce point d'extrémité est de récupérer un événement en se basant sur son UID.

##### Syntaxe de la requête { #request-syntax }

`GET /api/tracker/events/{uid}?fields={fields}`

|Paramètre de requête|Type|Valeurs autorisées|Description|
|---|---|---|---|
|`uid`|`String`|`uid`|Renvoie l'événement disposant de l'`uid` spécifié|
|`champs`|`String`| Tout filtre de champ valide (par défaut `*,!relationships`) |Inclut les sous-objets spécifiés dans la réponse|

##### Exemples de requêtes { #example-requests }

Une requête pour un événement :

    GET /api/tracker/events/rgWr86qs0sI

##### Exemple de réponse d'un événement { #event-response-example } 

The API supports CSV and JSON response for `GET /api/tracker/trackedEntities`

###### JSON { #json } 

```json
{
  "event": "rgWr86qs0sI",
  "status": "ACTIVE",
  "program": "kla3mAPgvCH",
  "programStage": "aNLq9ZYoy9W",
  "enrollment": "Lo3SHzCnMSm",
  "orgUnit": "DiszpKrYNg8",
  "occurredAt": "2024-10-12T00:00:00.000",
  "followUp": false,
  "deleted": false,
  "createdAt": "2018-10-20T12:09:19.492",
  "createdAtClient": "2017-10-20T12:09:19.492",
  "updatedAt": "2018-10-20T12:09:19.492",
  "attributeOptionCombo": "amw2rQP6r6M",
  "attributeCategoryOptions": "RkbOhHwiOgW",
  "dataValues": [
    {
      "createdAt": "2015-10-20T12:09:19.640",
      "updatedAt": "2015-10-20T12:09:19.640",
      "storedBy": "system",
      "providedElsewhere": false,
      "dataElement": "HyJL2Lt37jN",
      "value": "12"
    }
  ],
  "notes": [],
  "followup": false
}
```

###### CSV { #csv } 

The response will be the same as the collection endpoint but referring to a single event,
although it might have multiple rows for each data element value.

#### Event data value change logs { #webapi_event_data_value_change_logs }
`GET /api/tracker/events/{uid}/changeLogs`

This endpoint retrieves change logs for the data values of a specific event. It returns a list of all event data values that have changed over time for that particular event.

|Paramètre|Type|Valeurs autorisées|
|---|---|---|
|path `/{uid}`|`String`|Event `UID`.|

##### Event data value change logs response example { #event-data-value-change-logs-response-example } 

Exemple de réponse json :

```json
{
   "pager":{
      "page":1,
      "pageSize":10
   },
   "changeLogs":[
      {
         "createdBy":{
            "uid":"AIK2aQOJIbj",
            "username":"tracker",
            "firstName":"Tracker demo",
            "surname":"User"
         },
         "createdAt":"2024-06-20T15:43:36.342",
         "type":"DELETE",
         "change":{
            "dataValue":{
               "dataElement":"UXz7xuGCEhU",
               "previousValue":"12"
            }
         }
      },
      {
         "createdBy":{
            "uid":"AIK2aQOJIbj",
            "username":"tracker",
            "firstName":"Tracker demo",
            "surname":"User"
         },
         "createdAt":"2024-06-20T15:43:27.175",
         "type":"CREATE",
         "change":{
            "dataValue":{
               "dataElement":"UXz7xuGCEhU",
               "currentValue":"12"
            }
         }
      },
      {
         "createdBy":{
            "uid":"AIK2aQOJIbj",
            "username":"tracker",
            "firstName":"Tracker demo",
            "surname":"User"
         },
         "createdAt":"2024-06-20T14:51:16.433",
         "type":"UPDATE",
         "change":{
            "dataValue":{
               "dataElement":"bx6fsa0t90x",
               "previousValue":"true",
               "currentValue":"false"
            }
         }
      }
   ]
}
```

The change log type can be `CREATE`, `UPDATE`, or `DELETE`.
`CREATE` and `DELETE` will always hold a single value: the former shows the current value, and the latter shows the value that was deleted. UPDATE will hold two values: the previous and the current.


### Relations (`GET /api/tracker/relationships`) { #relationships-get-apitrackerrelationships }

Les relations sont des liens entre deux entités dans le Tracker.
Ces entités peuvent être des entités suivies, des inscriptions et des événements.

Le but de ce point d'extrémité est de récupérer les relations entre les objets.

Contrairement aux autres points d'extrémité d'objets suivis, les relations n'exposent qu'un seul point d'extrémité :

- `GET /api/tracker/relationships?[trackedEntity={trackedEntityUid}|enrollment={enrollmentUid}|event={eventUid}]&fields=[fields]`

#### Paramètres de requête { #request-parameters }

|Paramètre de requête|Type|Valeurs autorisées|Description|
|---|---|---|---|
|`trackedEntity`|`String`|`uid`|Identifiant d'une entité suivie|
|`enrollment`|`String`|`uid`|Identifiant d'une inscription|
|`event`|`String`|`uid`|Identifiant d'un événement|
|`champs`|`String`|Tout filtre de champ valide (par défaut `relationship,relationshipType,createdAtClient,from[trackedEntity[trackedEntity],enrollment[enrollment],event[event]],to[trackedEntity[trackedEntity],enrollment[enrollment],event[event]]`) |Inclut les sous-objets spécifiés dans la réponse|
|`order`|`String`|Liste séparée par des virgules de paires de noms de propriétés, d'attributs ou d'UID et de directions de tri au format `propName:sortDirection`.|Champs pris en charge : `createdAt, createdAtClient`.|
|`includeDeleted` (inclure les éléments supprimés)|`Boolean`|`true`&#124;`false`| détermine s'il faut inclure dans le résultat de votre requête, des éléments supprimés mais pas définitivement|

Les règles suivantes s'appliquent aux paramètres de requête.

- un seul paramètre parmi `trackedEntity`, `enrollment` et `event` peut être transmis

> **REMARQUE**
>
> L'utilisation des paramètres "tracked entity", "Enrollment" ou "Event" renverra toute relation à laquelle fait partie 
> l'entité suivie, l'inscription ou l'événement (que ce soit 'à partir de' ou 'vers'), à condition que 
> l'utilisateur y ait accès. 

#### Exemple de réponse { #example-response }

```json
{
  "pager": {
    "page": 1,
    "pageSize": 2
  },
  "relationships": [
    {
      "relationship": "oGtgtJpp6fG",
      "relationshipType": "Mv8R4MPcNcX",
      "from": {
        "trackedEntity": {
          "trackedEntity": "neR4cmMY22o"
        }
      },
      "to": {
        "trackedEntity": {
          "trackedEntity": "DsSlC54GNXy"
        }
      }
    },
    {
      "relationship": "SSfIicJKbh5",
      "relationshipType": "Mv8R4MPcNcX",
      "from": {
        "trackedEntity": {
          "trackedEntity": "neR4cmMY22o"
        }
      },
      "to": {
        "trackedEntity": {
          "trackedEntity": "rEYUGH97Ssd"
        }
      }
    }
  ]
}
```

## Tracker Access Control { #webapi_tracker_access_control }

Le Tracker dispose de quelques concepts en ce qui concerne le contrôle d'accès, tels que le partage, les champs d'application des 
unités d'organisation, la propriété et les niveaux d'accès. Les sections suivantes fournissent une brève introduction aux 
différents sujets.

### Metadata Sharing { #webapi_tracker_metadata_sharing }

Le paramètre de partage est une fonctionnalité standard de DHIS2 qui s'applique aux métadonnées/données du Tracker et de l'Agrégé, ainsi qu'aux tableaux de bord et aux éléments de visualisation. Au cœur du partage 
se trouve la possibilité de définir qui peut voir/faire quoi. En général, il existe cinq configurations de partage possibles : aucun 
accès, lecture des métadonnées, écriture des métadonnées, lecture des données et écriture des données. Ces configurations d'accès peuvent être 
accordées au niveau de l'utilisateur et/ou du groupe d'utilisateurs (pour plus de flexibilité). En ce qui concerne le Tracker, les métadonnées suivantes et leur configuration de partage sont d'une importance particulière : Élément de données, option de 
catégorie, programme, étape de programme, type d'entité suivie, attribut d'entité suivie, ainsi que les tableaux de bord et les éléments 
de tableau de bord liés au Tracker.

Le fonctionnement des paramètres de partage est simple : les paramètres sont appliqués lors des processus 
d'importation/exportation des données Tracker. Pour lire des valeurs, il faut disposer d'un accès en lecture aux données. Un utilisateur qui souhaite 
modifier des données doit disposer d'un accès en écriture. De même, un utilisateur qui souhaite modifier 
des métadonnées doit disposer d'un accès en écriture aux métadonnées.

Un point essentiel concernant les données Tracker est la nécessité d'adopter une approche holistique. Par exemple, un utilisateur 
ne pourra pas voir la valeur de l'élément de données s'il n'a accès qu'à l'élément de données en lecture. L'utilisateur 
doit disposer d'un accès en lecture aux données pour accéder au stade du programme parent et au programme auquel l'élément de données 
appartient. Il en va de même pour la combinaison d'options de catégorie. Dans Tracker, l'événement est lié à 
AttributeOptionCombo, qui se compose d'une combinaison d'options de catégorie. Par conséquent, pour qu'un utilisateur puisse 
lire les données d'un événement, il doit avoir un accès en lecture à toutes les options de catégorie et aux 
catégories correspondantes qui constituent la combinaison d'options d'attributs de l'événement en question. Si un 
utilisateur n'a pas accès à une seule option de catégorie ou à une seule catégorie, il n'a pas accès à l'ensemble de 
l'événement.

Lorsqu'il s'agit d'accéder aux données d'inscription, il est essentiel d'avoir d'abord accès à l'entité 
suivie. L'accès à une entité suivie est contrôlé par le partage des paramètres du programme, du type d'entité 
suivie et de l'attribut d'entité suivie. Une fois que l'on a accédé à l'inscription, il est possible d'accéder aux données 
d'événement, là encore en fonction de l'étape du programme et des paramètres de partage des éléments de données.

Un autre point essentiel à prendre en considération est la manière de définir l'accès aux différentes étapes d'un programme. 
Il peut arriver que nous devions accorder l'accès à une étape spécifique - par 
exemple, « Résultat de laboratoire » - à un groupe d'utilisateurs spécifique (techniciens de laboratoire). Dans ce cas, nous pouvons 
accorder un accès en écriture aux données de l'étape « Résultat du laboratoire », probablement un accès en lecture à une ou plusieurs étapes au 
cas où nous voudrions que les techniciens de laboratoire lisent d'autres résultats médicaux, ou aucun accès si nous pensons qu'il n'est pas nécessaire 
qu'ils consultent des données autres que celles relatives au laboratoire.

En résumé, DHIS2 dispose d'un paramètre de partage très précis que nous pouvons utiliser pour implémenter les mécanismes de contrôle d'accès 
au niveau des données et des métadonnées. Ces paramètres de partage peuvent être appliqués directement au 
niveau de l'utilisateur ou du groupe d'utilisateurs. Le paramètre de partage à appliquer dépend du cas 
d'utilisation.

Pour plus d'informations sur le partage de données, consultez [Partage 
de données](https://docs.dhis2.org/en/use/user-guides/dhis-core-version-master/configuring-the-system/about-sharing-of-objects.html#data-sharing-for-event-based-programs).

### Organisation Unit Scopes { #webapi_tracker_orgunit_scope }

Organisation units are one of the most fundamental objects in DHIS2. They define a universe under
which a user is allowed to record and/or read data. There are three types of organisation units that
can be assigned to a user. These are data capture, data view (not used in tracker), and tracker
search. As the name implies, these organisation units define a scope under which a user is allowed
to conduct the respective operations. A user can search for data in their search scope and capture
scope organisation units.

Cependant, pour mieux affiner le champ d'application, DHIS2 Tracker introduit un concept que nous appelons 
**OrganisationUnitSelectionMode** (mode de sélection de l'unité d'organisation). Ce mode est souvent utilisé lors de l'exportation d'objets Tracker. 
Par exemple, si un utilisateur dispose d'un champ de recherche particulier, cela signifie-t-il que nous devons 
utiliser ce champ chaque fois que l'utilisateur tente de rechercher un objet Tracker, d'inscription ou d'événement ? Ou bien 
l'utilisateur souhaite-t-il limiter la recherche à l'unité d'organisation sélectionnée, ou à l'ensemble de 
l'unité d'organisation de saisie, etc.

Les utilisateurs peuvent affiner un champ d'application en transmettant une valeur spécifique de `orgUnitMode` (mode d'unité d'organisation) dans leur requête API:

*api/tracker/trackedEntities?orgUnit=UID&orgUnitMode=specific_organisation_unit_selection_mode*

Actuellement, six modes de sélection sont disponibles: *SÉLECTIONNÉ, SUBORDONNÉES, DESCENDANTS, SAISIE, 
ACCESSIBLE et TOUS*.

1. **SÉLECTIONNÉ** : Comme son nom l'indique, ce mode limite toutes les opérations lancées par
   l'API qui effectue la demande à l'unité d'organisation spécifiée dans la requête.
2. **SUBORDONNÉES** : Dans ce mode, le périmètre de l'unité d'organisation est construit à partir de l'unité d'organisation sélectionnée 
   et de ses subordonnées immédiates, c'est-à-dire les unités d'organisation du niveau inférieur.
3. **DESCENDANTS** : Dans ce mode, l'unité d'organisation sélectionnée et tout ce qui se trouve en dessous d'elle, 
   englobant non seulement les descendants immédiats mais aussi toutes les subordonnées, constituent l'univers d'exploitation des 
données.
4. **SAISIE** : Ce mode inclut les unités d'organisation de saisie des données associées à l'utilisateur actuel 
   et à tous ses descendants. Il englobe toutes les unités d'organisation de la sous-hiérarchie.
5. **ACCESSIBLE** : Ce mode est conçu pour récupérer des données dans les unités d'organisation du champ de recherche 
   de l'utilisateur. Cela comprend tout ce qui est visible par l'utilisateur, y compris les programmes ouverts et audités 
dans son champ de recherche, ainsi que les données des programmes protégés et fermés dans le champ de 
saisie de l'utilisateur. Si un utilisateur n'a pas d'unités d'organisation de recherche, le système passe par défaut au champ de saisie, 
ce qui garantit que l'utilisateur a toujours accès à au moins un univers. Le champ de saisie, qui est 
obligatoire, sert d'élément fondamental pour garantir un environnement de données à l'utilisateur.
6. **TOUS** : Ce mode est réservé aux utilisateurs autorisés, notamment ceux ayant l'autorité TOUS 
   (super utilisateurs). Les utilisateurs ayant l'autorité F_TRACKED_ENTITY_INSTANCE_SEARCH_IN_ALL_ORGUNITS peuvent également 
effectuer des recherches dans l'ensemble du système, mais doivent partager l'accès au programme, à l'étape du programme et/ou au 
type d'entité suivi. Pour les utilisateurs non autorisés, une exception sera levée.

Les trois premiers modes, *SÉLECTIONNÉ*, *ASCENDANTS* et *DESCENDANTS* attendent qu'une unité d'organisation 
soit fournie dans la demande, tandis que les trois derniers, *SAISIE*, *ACCESSIBLE* et *TOUS* ne l'attendent pas 
et, en fait, la requête échouera si une unité d'organisation est fournie.

Le mode d'unité d'organisation sera l'un des modes énumérés ci-dessus s'il est explicitement fourni dans la 
demande d'API. Comme il ne s'agit pas d'un champ obligatoire, s'il n'est pas spécifié, la valeur par défaut 
sera *SÉLECTIONNÉ* si une unité d'organisation est présente, et *ACCESSIBLE* dans le cas contraire.

Il n'est pas judicieux de transmettre ces modes lors des opérations d'importation du Tracker. En effet, lors de 
l'écriture des données Tracker, chaque objet doit être rattaché à une unité d'organisation 
spécifique. Le système vérifiera alors si chacune des unités d'organisation mentionnées relève du champ d'application de la 
SAISIE. Si ce n'est pas le cas, le système rejettera simplement l'opération d'écriture.

Notez qu'il existe 4 types d'associations d'unités d'organisation pour les objets Tracker. Une 
entité suivie a une unité d'organisation, communément appelée unité d'organisation d'enregistrement. 
Les inscriptions ont une unité d'organisation qui leur est associée, pareil pour les 
événements. Pour finir, il existe également une unité d'organisation "propriétaire" pour une combinaison Entité 
Suivie-Programme. 

Lors de la récupération des objets Tracker, selon le contexte, le champ d'application de l'unité d'organisation est appliquée à 
l'une des quatre associations d'unités d'organisation ci-dessus.

Par exemple, lors de la récupération d'entités suivies en dehors d'un programme, le champ d'application de l'unité d'organisation 
est appliquée à l'unité d'organisation d'enregistrement de l'entité suivie. Par contre, lors de 
la récupération d'entités suivies, en plus de données de programme spécifiques, le champ d'application de l'unité d'organisation est appliquée 
à l'unité d'organisation "propriétaire".

### Tracker Program Ownership { #webapi_tracker_ownership }

A new concept called Tracker Ownership is introduced from 2.30. This introduces a new organisation
unit association for a TrackedEntity - Program combination. We call this the Owner (or Owning)
Organisation unit of a TrackedEntity in the context of a Program. The Owner organisation unit is
used to decide access privileges when reading and writing tracker data related to a program. This,
along with the Program's [Access Level](#webapi_tracker_access_level) configuration, decides the access
behavior for Program-related data (Enrollments and Events). A user can access a TrackedEntity's
Program data if the corresponding Owner OrganisationUnit for that TrackedEntity-Program combination
falls under the user's organisation unit scope (Search/Capture). For Programs that are configured
with access level  *OPEN* or *AUDITED* , the Owner OrganisationUnit has to be in the user's search
scope. For Programs that are configured with access level  *PROTECTED* or *CLOSED* , the Owner
OrganisationUnit has to be in the user's capture scope to be able to access the corresponding
program data for the specific tracked entity. Irrespective of the program access level, to access
Tracker objects, the requested organisation unit must always be within either the user's search
scope or capture scope. A user cannot request objects outside these two scopes unless they are
using the organisation unit mode ALL and have sufficient privileges to use that mode.

When requesting tracked entities without specifying a program, the response will include only
tracked entities that satisfy [metadata sharing settings](#webapi_tracker_metadata_sharing) and
one of the following criteria:

* The tracked entity is enrolled in at least one program the user has data access to, and the user
 has access to the owner organisation unit.
* The tracked entity is not enrolled in any program the user has data access to, but the user has
 access to the tracked entity registering organisation unit.

#### Tracker Ownership Override: Break the Glass { #webapi_tracker_ownership_override }

Il est possible d'annuler temporairement ce privilège de propriété pour un programme configuré 
avec un niveau d'accès *PROTÉGÉ*. Tout utilisateur sera en mesure d'obtenir temporairement l'accès aux données relatives au 
programme si l'utilisateur fournit une raison d'accéder aux données de la combinaison Entité suivie - Programme. Ce fait 
d'obtenir temporairement l'accès est appelé *briser la glace*. Actuellement, l'accès temporaire est 
accordé pour une durée de 3 heures. DHIS2 vérifie l'aspect "briser la glace" ainsi que la raison fournie par l'utilisateur. Il 
n'est pas possible d'obtenir un accès temporaire à un programme qui a été configuré avec un niveau 
d'accès *FERMÉ*. Pour briser la glace d'une combinaison Entité suivie - Programme, la requête POST suivante 
peut être utilisée :

    /api/tracker/ownership/override?trackedEntity=DiszpKrYNg8&program=eBAyeGv0exc&reason=patient+showed+up+for+emergency+care

#### Tracker Ownership Transfer { #webapi_tracker_ownership_transfer }

Il est possible de transférer la propriété d'une combinaison Entité suivie - Programme d'une unité d'organisation à une 
autre. Cela peut s'avérer utile en cas de transfert de patients ou de migration. Seul un utilisateur disposant 
d'un accès à la propriété (ou d'un accès temporaire en brisant la glace) peut transférer 
la propriété. Pour transférer la propriété d'une combinaison Entité suivie - Programme à une autre unité d'organisation, la requête "PUT" suivante peut être 
utilisée :

    /api/tracker/ownership/transfer?trackedEntity=DiszpKrYNg8&program=eBAyeGv0exc&ou=EJNxP3WreNP

### Access Level { #webapi_tracker_access_level }

DHIS2 traite les données Tracker avec un niveau de protection supplémentaire. En plus de la protection standard des 
métadonnées et des données via les paramètres de partage, les données Tracker sont protégées par des mécanismes supplémentaires 
en matière de niveau d'accès. Actuellement, quatre niveaux d'accès peuvent être configurés 
pour un programme : Ouvert, Audité, Protégé et Fermé.

Ces niveaux d'accès ne sont déclenchés que lorsque les utilisateurs tentent d'interagir avec les données du programme, c'est-à-dire 
les données relatives aux inscriptions et aux événements. La configuration des différents niveaux d'accès du programme correspond à un degré 
d'ouverture (ou de fermeture) des données du programme. Notez que tous les autres paramètres de partage sont toujours respectés 
et que le niveau d'accès n'est qu'une couche supplémentaire de contrôle d'accès. Voici une brève description 
des quatre niveaux d'accès qui peuvent être configurés pour un programme. 

#### Ouvrir { #open } 

Ce niveau d'accès est le moins restrictif des niveaux d'accès. Les utilisateurs peuvent 
accéder aux données d'un programme OUVERT et les modifier si l'unité d'organisation propriétaire fait partie du champ de recherche 
de l'utilisateur. Avec ce niveau d'accès, il est possible d'accéder à des données qui se trouvent hors du champ de saisie et de les modifier 
sans justification ni conséquence. 

#### Audité { #audited } 

Il s'agit du même niveau d'accès que le niveau Ouvert. La différence est que le système ajoutera automatiquement 
une entrée dans le journal d'audit sur les données auxquelles l'utilisateur accède.

#### Protégé { #protected } 

This access level is slightly more restricted. Data inside a PROTECTED program can only be accessed
by users if the Owner organisation unit falls under the user's capture scope. However, a user who
only has the Owner organisation unit in the search scope can gain temporary ownership by [breaking
the glass](#webapi_tracker_ownership_override). The user has to provide a justification of why
they are accessing the data at hand. The system will then put a log of both the justification and
access audit and provide temporary access for 3 hours to the user. Note that when breaking the
glass, the Owner Organisation Unit remains unchanged, and only the user who has broken the glass
gains temporary access.

#### Fermé { #closed } 

This is the most restricted access level. Data recorded under programs configured with access level
CLOSED will not be accessible if the Owner Organisation Unit does not fall within the user's capture
scope. It is also not possible to break the glass or gain temporary ownership in this configuration.
Note that it is still possible to transfer the ownership to another organisation unit. Only a user
who has access to the data can transfer the ownership of a TrackedEntity-Program combination to
another Organisation Unit. If ownership is transferred, the Owner Organisation Unit is updated.
trackedEntities

## Working Lists { #working-lists } 

Working lists allow users to efficiently organize their workflow by saving filters and sorting
preferences for tracked entities, enrollments, and events. Each type of working list—tracked
entities, enrollments, and events—has a dedicated API for management.

Working lists are [metadata](#webapi_metadata), making them shareable and subject to the same
[sharing](#webapi_sharing) patterns as other metadata. When using the
[`/api/sharing`](#webapi_sharing) endpoint, the type parameter should be set to the name of the
working list API. For example, use trackedEntityInstanceFilter for [tracked entity working
lists](#tracked-entity-instance-filters).

Since working lists are metadata refer to [metadata](#webapi_metadata) on how to create, update and
delete metadata. The following sections describe the payloads of each of the working lists
endpoints.

### Tracked entity working lists { #tracked-entity-working-lists } 

Create, update and delete tracked entity working lists using

    /api/trackedEntityInstanceFilters

#### Payload { #payload } 

Tableau : Charge

| Propriété | Description | Exemple |
|---|---|---|
|name|Nom de la liste de tâches. Obligatoire.||
|description|Il s'agit d'une description de la liste de tâches.||
|sortOrder|The sort order of the working list.||
|style|Objet contenant un style css.|`{"color": "blue", "icon": "fa fa-calendar"}`|
|program|Objet contenant l'identifiant du programme. Obligatoire.|`{ "id" : "uy2gU8kTjF"}`|
|entityQueryCriteria|Un objet représentant diverses valeurs de filtrage possibles. Voir le tableau de définition des *Critères de requête sur les entités* ci-dessous.
|eventFilters|Une liste de filtres d'événements. Voir le tableau de définition des *filtres d'événements* ci-dessous.|`[{"programStage": "eaDH9089uMp", "eventStatus": "OVERDUE", "eventCreatedPeriod": {"periodFrom": -15, "periodTo": 15}}]`|

Tableau : Définition des critères de requêtes sur les entités

| Propriété | Description | Exemple |
|---|---|---|
|attributeValueFilters|Une liste de filtres de valeurs d'attribut. Elle est utilisée pour spécifier des filtres pour les valeurs d'attributs lors de l'établissement de la liste des instances d'entités suivies.|`"attributeValueFilters"=[{"attribute": "abcAttributeUid","le": "20","ge": "10","lt": "20","gt": "10","in": ["India", "Norway"],"like": "abc","sw": "abc","ew": "abc","dateFilter": {"startDate": "2014-05-01","endDate": "2019-03-20","startBuffer": -5,"endBuffer": 5,"period": "LAST_WEEK","type": "RELATIVE"}}]`|
|enrollmentStatus|The tracked entities enrollment status. Can be none(any enrollmentstatus) or ACTIVE&#124;COMPLETED&#124;CANCELLED||
|followUp|When this parameter is true, the working list only returns tracked entities that have an enrollment with `folloWup=true`.||
|organisationUnit|Permet de spécifier l'identifiant de l'unité d'organisation|`{"organisationUnit": "a3kGcGDCuk7"}`|
|ouMode|To specify the organisation unit selection mode. Possible values are SELECTED&#124; CHILDREN&#124;DESCENDANTS&#124;ACCESSIBLE&#124;CAPTURE&#124;ALL|`"ouMode": "SELECTED"`|
|assignedUserMode|Utilisée pour spécifier le mode de sélection de l'utilisateur pour les événements. Les valeurs possibles sont CURRENT| PROVIDED| NONE | ANY. Voir le tableau ci-dessous pour comprendre ce que chaque valeur indique. Si elle est définie sur PROVIDED (ou "null"), les sections assignedUsers non vides dans la charge seront prises en compte.|"assignedUserMode": "PROVIDED"|
|assignedUser|Permet de spécifier une liste d'utilisateurs assignés à des événements. À utiliser avec le mode d'utilisateur assigné PROVIDED ci-dessus.|`"assignedUsers": ["a3kGcGDCuk7", "a3kGcGDCuk8"]`|
|displayColumnOrder|Permet de spécifier l'ordre de sortie des colonnes|`"displayOrderColumns": ["enrollmentDate", "program"]`|
|order|To specify ordering/sorting of fields and its directions in comma separated values. A single item in order is of the form "orderDimension:direction". Note: Supported orderDimensions are trackedEntity, created, createdAt, createdAtClient, updatedAt, updatedAtClient, enrolledAt, inactive and the tracked entity attributes|`"order"="a3kGcGDCuk6:desc"`|
|programStage|To specify a programStage uid to filter on. tracked entities will be filtered based on presence of enrollment in the specified program stage.|`"programStage"="a3kGcGDCuk6"`|
|TrackedEntityType|To specify a trackedEntityType filter tracked entities on.|`{"trackedEntityType"="a3kGcGDCuk6"}`|
|trackedEntities|To specify a list of trackedEntityInstances to use when querying tracked entities.|`"trackedEntityInstances"=["a3kGcGDCuk6","b4jGcGDCuk7"]`|
|enrollmentCreatedDate|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) object date filtering based on enrollment created date.|`"enrollmentCreatedDate": {     "period": "LAST_WEEK",     "type": "RELATIVE"   }`|
|enrollmentIncidentDate|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) object date filtering based on enrollment incident date.|`"enrollmentIncidentDate": {     "startDate": "2014-05-01",     "endDate": "2019-03-20",     "startBuffer": -5,     "endBuffer": 5,     "period": "LAST_WEEK",     "type": "RELATIVE"   }`|
|eventStatus|Il s'agit du statut de l'événement. Les valeurs possibles sont ACTIF, EFFECTUÉ, VISITÉ, PROGRAMMÉ, EN RETARD, SAUTÉ et VISITÉ.|`"status":"VISITED"`|
|eventDate|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) object date filtering based on event date.|`"eventDate": {"startBuffer": -5,"endBuffer": 5,     "type": "RELATIVE"   }`|
|lastUpdatedDate|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) object date filtering based on last updated date.|`"lastUpdatedDate": {"startDate": "2014-05-01",     "endDate": "2019-03-20",     "type": "ABSOLUTE"   }`|

Tableau : Définition des filtres d'événements

| Propriété | Description | Exemple |
|---|---|---|
|programStage|Which programStage the tracked entity needs an event in to be returned.|`"eaDH9089uMp"`|
|eventStatus|Le statut de l'événement ; peut être "none" (n'importe quel statut d'événement) ou ACTIVE | COMPLETED | SCHEDULE | OVERDUE.|`ACTIVE`|
|eventCreatedPeriod|FilterPeriod object containing a period in which the event must be created. See *Period* definition below.|`{ "periodFrom": -15, "periodTo": 15}`|
|assignedUserMode|Utilisée pour spécifier le mode de sélection des utilisateurs assignés à des événements. Les valeurs possibles sont CURRENT (événements attribués à l'utilisateur actuel)| PROVIDED (événements attribués aux utilisateurs figurant dans la liste "assignedUsers") | NONE (événements attribués à personne) | ANY (événements attribués à tout utilisateur). Si cette valeur est définie sur PROVIDED (ou null), les sections assignedUsers non vides dans la charge seront pris en compte.|`"assignedUserMode": "PROVIDED"`|
|assignedUser|Permet de spécifier une liste d'utilisateurs assignés à des événements. À utiliser avec le mode d'utilisateur assigné PROVIDED ci-dessus.|`"assignedUsers": ["a3kGcGDCuk7", "a3kGcGDCuk8"]`|

Table: FilterPeriod definition

| Propriété | Description | Exemple |
|---|---|---|
|periodFrom|Nombre de jours à partir du jour actuel. Il peut s'agir d'un nombre entier positif ou négatif.|-15|
|periodTo|Nombre de jours à partir du jour actuel. Doit être supérieur à periodFrom. Peut être un nombre entier positif ou négatif.|15|

#### Query Request Parameters { #query-request-parameters } 

Tableau : Paramètres de requête pour les filtres d'instances d'entités suivies

| Paramètre de requête | Description |
|---|---|
|program|Identifiant du programme. Il limite le filtrage au programme donné.|

### Program stage working lists { #program-stage-working-lists } 

Create, update and delete program stage working lists using

    /api/programStageWorkingLists

#### Payload { #payload } 

Tableau : Charge

| Valeurs de la charge | Description | Exemple |
|---|---|---|
|name|Nom de la liste de tâches. Obligatoire.||
|description|Il s'agit d'une description de la liste de tâches.||
|program|Objet contenant l'identifiant du programme. Obligatoire.|`{"id" : "uy2gU8kTjF"}`|
|programStage|Objet contenant l'identifiant de l'étape de programme. Obligatoire.|`{"id" : "oRySG82BKE6"}`|
|programStageQueryCriteria (Critères de requête de l'étape de programme)|Un objet représentant diverses valeurs de filtrage possibles. Voir le tableau de définition des *Critères de requête sur les étapes de programme* ci-dessous.

Tableau : Critères de requête de l'étape de programme

| Valeurs des critères | Description | Exemple |
|---|---|---|
|eventStatus|Il s'agit du statut de l'événement. Les valeurs possibles sont ACTIF, EFFECTUÉ, VISITÉ, PROGRAMMÉ, EN RETARD, SAUTÉ et VISITÉ.|`"status":"VISITED"`|
|Évènement créé à|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) object filtering based on the event creation date.|`{"type":"ABSOLUTE","startDate":"2020-03-01","endDate":"2022-12-30"}`|
|eventOccurredAt|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) object filtering based on the event occurred date.|`{"type":"RELATIVE","period":"TODAY"}`|
|eventScheduledAt|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) object filtering based on the event scheduled date.|`{"type":"RELATIVE","period":"TODAY"}`|
|enrollmentStatus|Any valid EnrollmentStatus. Possible values are ACTIVE, COMPLETED and CANCELLED.|`"enrollmentStatus": "COMPLETED"`|
|followUp|Indique s'il faut filtrer ou non les inscriptions marquées pour le suivi|`"followUp":true`|
|inscrit à|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) object filtering based on the event enrollment date.|`"enrolledAt": {"type":"RELATIVE","period":"THIS_MONTH"}`|
|Inscription effectué à|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) object filtering based on the event occurred date.|`{"type":"RELATIVE","period":"THIS_MONTH"}`|
|orgUnit|Un UID d'unité d'organisation valide|`"orgUnit": "Rp268JB6Ne4"`|
|ouMode|Un mode de sélection d'unités d'organisation valide|`"ouMode": "SELECTED"`|
|assignedUserMode|Il s'agit d'un mode de sélection d'utilisateur valide pour les événements. Les valeurs possibles sont ACTUEL, FOURNI, AUCUN, TOUT et TOUS. S’il est FOURNI (ou nul), il sera attendu dans la charge utile des utilisateurs assignés non vides.|"Mode d'utilisateur assigné" : "FOURNI"|
|assignedUser|Une liste des utilisateurs assignés aux événements. À utiliser avec le mode d'utilisateur assigné, fourni ci-dessus.|"Utilisateurs assignés":["DXyJmlo9rge"]|
|order|Liste des champs et de leurs directions en valeurs séparées par des virgules, les résultats seront triés en fonction de cette liste. Un seul élément dans l'ordre est de la forme « orderDimension:direction ».|"ordre": "w75KJ2mc4zz:asc"|
|displayColumnOrder|Ordre de sortie des colonnes|"Ordre de sortie des colonnes":["w75KJ2mc4zz","zDhUuAYrxNC"]|
|dataFilters|Une liste d'éléments contenant les filtres à utiliser lors de requêtes d'événements|"Filtres de données":[{"dataItem": "GXNUsigphqK","ge": "10","le": "20"}]|
|attributeValueFilters|Une liste de filtres de valeurs d'attribut. Elle est utilisée pour définir des filtres pour les valeurs d'attributs lors de l'établissement de la liste des entités suivies.|"Filtres de valeurs d'attribut":[{"attribute": "ruQQnf6rswq","eq": "15"}]|

Ci-dessous, un exemple de charge :

```json
{
  "name": "Test WL",
  "description": "Test WL definition",
  "program": {
    "id": "uy2gU8kT1jF"
  },
  "programStage": {
    "id": "oRySG82BKE6"
  },
  "programStageQueryCriteria": {
    "eventStatus": "VISITED",
    "eventCreatedAt": {
      "type": "ABSOLUTE",
      "startDate": "2020-03-01",
      "endDate": "2022-12-30"
    },
    "eventScheduledAt": {
      "type": "RELATIVE",
      "period": "TODAY"
    },
    "enrollmentStatus": "COMPLETED",
    "followUp": true,
    "enrolledAt": {
      "type": "RELATIVE",
      "period": "THIS_MONTH"
    },
    "enrollmentOccurredAt": {
      "type": "RELATIVE",
      "period": "THIS_MONTH"
    },
    "orgUnit": "Rp268JB6Ne4",
    "ouMode": "SELECTED",
    "assignedUserMode": "PROVIDED",
    "assignedUsers": [
      "DXyJmlo9rge"
    ],
    "order": "w75KJ2mc4zz:asc",
    "displayColumnOrder": [
      "w75KJ2mc4zz",
      "zDhUuAYrxNC"
    ],
    "dataFilters": [
      {
        "dataItem": "GXNUsigphqK",
        "ge": "10",
        "le": "20"
      }
    ],
    "attributeValueFilters": [
      {
        "attribute": "ruQQnf6rswq",
        "eq": "15"
      }
    ]
  }
}
```

### Event working lists { #event-working-lists } 

Create, update and delete event working lists using

    /api/eventFilters

#### Payload { #payload } 

Tableau : Charge

| Propriété | Description | Exemple |
|---|---|---|
|name|Name of the working list.|"name":"My working list"|
|description|Il s'agit d'une description de la liste de tâches.|"description":"for listing all events assigned to me".|
|program|L'uid du programme.|"program" : "a3kGcGDCuk6"|
|programStage|L'uid de l'étape de programme.|"programStage" : "a3kGcGDCuk6"|
|eventQueryCriteria|Objet contenant des paramètres pour les requêtes, le tri et le filtrage des événements.|"eventQueryCriteria": {     "organisationUnit":"a3kGcGDCuk6",     "status": "COMPLETED",     "createdDate": {       "from": "2014-05-01",       "to": "2019-03-20"     },     "dataElements": ["a3kGcGDCuk6:EQ:1", "a3kGcGDCuk6"],     "filters": ["a3kGcGDCuk6:EQ:1"],     "programStatus": "ACTIVE",     "ouMode": "SELECTED",     "assignedUserMode": "PROVIDED",     "assignedUsers" : ["a3kGcGDCuk7", "a3kGcGDCuk8"],     "followUp": false,     "trackedEntityInstance": "a3kGcGDCuk6",     "events": ["a3kGcGDCuk7", "a3kGcGDCuk8"],     "fields": "eventDate,dueDate",     "order": "dueDate:asc,createdDate:desc"   }|

Tableau : Définition des critères de requêtes d'événements

| Propriété | Description | Exemple |
|---|---|---|
|followUp|Permet de filtrer les événements en fonction de l'indicateur de suivi de l'inscription. Les valeurs possibles sont true | false.|"followUp": true|
|organisationUnit|Permet de spécifier l'identifiant de l'unité d'organisation|"organisationUnit": "a3kGcGDCuk7"|
|ouMode|Permet de spécifier le mode de sélection des unités d'organisation. Les valeurs possibles sont SELECTED| CHILDREN|DESCENDANTS|ACCESSIBLE|CAPTURE|ALL|"ouMode": "SELECTED"|
|assignedUserMode|Utilisée pour spécifier le mode de sélection de l'utilisateur pour les événements. Les valeurs possibles sont CURRENT| PROVIDED| NONE | ANY. Voir le tableau ci-dessous pour comprendre ce que chaque valeur indique. Si elle est définie sur PROVIDED (ou "null"), les sections assignedUsers non vides dans la charge seront prises en compte.|"assignedUserMode": "PROVIDED"|
|assignedUser|Permet de spécifier une liste d'utilisateurs assignés à des événements. À utiliser avec le mode d'utilisateur assigné PROVIDED ci-dessus.|"assignedUsers": ["a3kGcGDCuk7", "a3kGcGDCuk8"]|
|displayColumnOrder |Permet de spécifier l'ordre de sortie des colonnes|"displayOrderColumns": ["eventDate", "dueDate", "program"]|
|order|To specify ordering/sorting of fields and its directions in comma separated values. A single item in order is of the form "dataItem:direction".|"order"="a3kGcGDCuk6:desc,eventDate:asc"|
|dataFilters|Permet de spécifier les filtres à appliquer lors de l'établissement de la liste des événements|"dataFilters"=[{       "dataItem": "abcDataElementUid",       "le": "20",       "ge": "10",       "lt": "20",       "gt": "10",       "in": ["India", "Norway"],       "like": "abc",       "dateFilter": {         "startDate": "2014-05-01",         "endDate": "2019-03-20",         "startBuffer": -5,         "endBuffer": 5,         "period": "LAST_WEEK",         "type": "RELATIVE"       }     }]|
|status|Tout statut d'événement valide|"eventStatus": "COMPLETED"|
|events|permet de spécifier une liste d'événements|"events"=["a3kGcGDCuk6"]|
|completedDate|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) object date filtering based on completed date.|"completedDate": {     "startDate": "2014-05-01",     "endDate": "2019-03-20",     "startBuffer": -5,     "endBuffer": 5,     "period": "LAST_WEEK",     "type": "RELATIVE"   }|
|eventDate|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) object date filtering based on event date.|"eventDate": {     "startBuffer": -5,     "endBuffer": 5,     "type": "RELATIVE"   }|
|dueDate|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) object date filtering based on due date.|"dueDate": {     "period": "LAST_WEEK",     "type": "RELATIVE"   }|
|lastUpdatedDate|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) object date filtering based on last updated date.|"lastUpdatedDate": {     "startDate": "2014-05-01",     "endDate": "2019-03-20",     "type": "ABSOLUTE"   }|

Ci-dessous, un exemple de charge :

```json
{
  "name": "event working list",
  "program": "VBqh0ynB2wv",
  "eventQueryCriteria": {
    "eventDate": {
      "period": "LAST_WEEK",
      "type": "RELATIVE"
    },
    "dataFilters": [
      {
        "ge": "35",
        "le": "70",
        "dataItem": "qrur9Dvnyt5"
      }
    ],
    "assignedUserMode": "PROVIDED",
    "assignedUsers": [
      "CotVI2NX0rI",
      "xE7jOejl9FI"
    ],
    "status": "ACTIVE",
    "order": "occurredAt:desc",
    "displayColumnOrder": [
      "occurredAt",
      "status",
      "assignedUser",
      "qrur9Dvnyt5",
      "oZg33kd9taw"
    ]
  }
}
```

### Common Objects { #webapi_tracker_workinglists_common_objects }

Tableau : Définition de l'objet DateFilterPeriod

| Propriété | Description | Exemple |
|---|---|---|
|type|Spécifie si le type de période "date" est ABSOLUTE (absolu) ou RELATIVE (relatif)|`"type" : "RELATIVE"`|
|period|Specify if a relative system defined period is to be used. Applicable only when `type` is RELATIVE. (see [Relative Periods](#webapi_date_relative_period_values) for supported relative periods)|`"period" : "THIS_WEEK"`|
|startDate|Absolute start date. Applicable only when `type` is ABSOLUTE|`"startDate":"2014-05-01"`|
|endDate|Absolute end date. Applicable only when `type` is ABSOLUTE|`"startDate":"2014-05-01"`|
|startBuffer|Relative custom start date. Applicable only when `type` is RELATIVE|`"startBuffer":-10`|
|endBuffer|Relative custom end date. Applicable only when `type` is RELATIVE|`"startDate":+10`|


## Doublons potentiels { #potential-duplicates } 

Potential duplicates are records identified by the data deduplication feature as possibly being
duplicates. Due to the nature of this feature, the API endpoint has certain restrictions. A
potential duplicate represents a pair of records suspected to be duplicates.

To retrieve a list of potential duplicates, use the following endpoint:

    GET /api/potentialDuplicates

The response payload for a potential duplicate looks like this:

```json
{
  "created": "2024-06-04T10:11:29.110",
  "lastUpdated": "2024-06-04T10:11:29.110",
  "original": "<UID>",
  "duplicate": "<UID>",
  "status": "OPEN|INVALID|MERGED",
  "id": "<id>"
}
```

These are the parameters this endpoint accepts:

| Nom du paramètre | Description | Type | Valeurs autorisées |
|---|---|---|---|
| trackedEntities | List of tracked entities | Liste de chaînes (séparées par une virgule)| existing tracked entity UIDs |
| status | Statut de doublon potentiel | chaîne | `OPEN`, `INVALID`, `MERGED`, `ALL` |

To inspect individual potential duplicate records, use the following endpoint:

    GET /api/potentialDuplicates/<id>

To create a new potential duplicate, use this endpoint:

    POST /api/potentialDuplicates

The payload you provide must include the UIDs of the original and duplicate tracked entities. New
potential duplicates are open by default.

```json
{
  "original": "<UID>",
  "duplicate": "<UID>"
}
```

| Code de statut | Description
|---|---|
| 400 | Input original or duplicate is null or has invalid uid
| 403 | User do not have access to read original or duplicate TEs
| 404 | TE not found
| 409 | Pair of original and duplicate TEs already existing

To update the status of a potential duplicate, use the following endpoint:

    PUT /api/potentialDuplicates/<id>

| Nom du paramètre | Description | Type | Valeurs autorisées |
|---|---|---|---|
| status | Statut de doublon potentiel | chaîne | `OPEN`, `INVALID` |

| Code de statut | Description
|---|---|
| 400 | Vous ne pouvez pas mettre à jour un doublon potentiel en le faisant passer à MERGED. Pour ce faire, vous devez effectuer une requête de fusion.
| 400 | Vous ne pouvez pas mettre à jour un doublon potentiel qui a déjà le statut MERGED.

### Merging Tracked Entities { #merging-tracked-entities } 

Tracked entities can be merged together if they are deemed viable. To initiate a merge, the first
step is to define two tracked entities as a Potential Duplicate. The merge endpoint moves data from
the duplicate tracked entity to the original tracked entity and deletes the remaining data of the
duplicate.

To merge a Potential Duplicate, i.e. the two tracked entities the Potential Duplicate represents,
use the following endpoint:

    POST /api/potentialDuplicates/<id>/merge

| Nom du paramètre | Description | Type | Valeurs autorisées |
|---|---|---|---|
| mergeStrategy | Stratégie à utiliser pour fusionner le doublon potentiel  | chaîne | AUTO (par défaut) ou MANUAL |

The endpoint accepts a single parameter, `mergeStrategy`, which determines the strategy used when merging. For the `AUTO` strategy, the server will attempt to merge the two tracked entities automatically without user input. This strategy only allows merging tracked entities without conflicting data (see examples below). The `MANUAL` strategy requires the user to send in a payload describing how the merge should be done. For examples and rules for each strategy, see their respective sections below.

#### Stratégie de fusion AUTO { #merge-strategy-auto } 

The automatic merge evaluates the mergability of the two tracked entities and merges them if they
are deemed mergeable. The mergability is based on whether the two tracked entities have any
conflicts. Conflicts refer to data that cannot be merged automatically. Examples of possible
conflicts include:

- The same attribute has different values in each tracked entity.
- Both tracked entities are enrolled in the same program.
- Tracked entities have different types.

If any conflict is encountered, an error message is returned to the user.

When no conflicts are found, all data in the duplicate that is not already in the original will be
moved to the original. This includes attribute values, enrollments (including events), and
relationships. After the merge completes, the duplicate is deleted and the Potential Duplicate is
marked as `MERGED`. When requesting an automatic merge, a payload is not required and will be
ignored.

#### Stratégie de fusion MANUAL { #merge-strategy-manual } 

The manual merge is suitable when there are resolvable conflicts or when not all the data needs to
be moved during the merge. For example, if an attribute has different values in both tracked entity
instances, the user can specify whether to keep the original value or move over the duplicate's
value. Since the manual merge involves the user explicitly requesting to move data, there are some
additional checks:

- Relationship cannot be between the original and the duplicate (This results in an invalid
self-referencing relationship)
- Relationship cannot be of the same type and to the same object in both tracked entities (IE.
between original and other, and duplicate and other; This would result in a duplicate relationship)

Il existe deux façons d'effectuer une fusion manuelle : Avec et sans charge.

When a manual merge is requested without a payload, we are telling the API to merge the two tracked
entities without moving any data. In other words, we are just removing the duplicate and marking the
potentialDuplicate MERGED. This might be valid in a lot of cases where the tracked entity was just
created, but not enrolled for example.

Otherwise, if a manual merge is requested with a payload, the payload refers to what data should be
moved from the duplicate to the original. The payload looks like this:

```json
{
  "trackedEntityAttributes": ["B58KFJ45L9D"],
  "enrollments": ["F61SJ2DhINO"],
  "relationships": ["ETkkZVSNSVw"]
}
```

This payload contains three lists, one for each of the types of data that can be moved.
`trackedEntityAttributes` is a list of uids for tracked entity attributes, `enrollments` is a list
of uids for enrollments and `relationships` a list of uids for relationships. The uids in this
payload have to refer to data that actually exists on the duplicate. There is no way to add new data
or change data using the merge endpoint - Only moving data.

#### Informations complémentaires sur la fusion { #additional-information-about-merging } 

Currently it is not possible to merge tracked entities that are enrolled in the same program, due to
the added complexity. A workaround is to manually remove the enrollments from one of the tracked
entities before starting the merge.

All merging is based on data already persisted in the database, which means the current merging
service is not validating that data again. This means if data was already invalid, it will not be
reported during the merge. The only validation done in the service relates to relationships, as
mentioned in the previous section.

