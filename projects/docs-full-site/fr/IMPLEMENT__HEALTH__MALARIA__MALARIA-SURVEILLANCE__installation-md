---
edit_url: "https://github.com/dhis2-metadata/MAL_CS/blob/master/docs/mal_cs-installation.md"
revision_date: '2023-11-28'
tags:
- Implémentation
---

# Guide d'installation de la Surveillance des Cas de Paludisme et d'Enquête et Réponse sur les Foyers de Paludisme { #mal-cs-installation }

Ce document comprend un guide d'installation des packages pour la Surveillance des cas de paludisme et d'Enquête sur les foyers.

Langue par défaut du système : anglais

## Aperçu { #overview } 


## Installation { #installation }

L'installation du module se fait en plusieurs étapes :

1. [Préparation du fichier de métadonnées avec les métadonnées DHIS2](#preparing-the-metadata-file).
2. [Importation des métadonnées dans DHIS2](#importing-metadata).
3. [Configuration des métadonnées importées](#configuration).
4. [Adaptation du programme après importation](#adaptation-du-programme)

Nous vous recommandons de lire tout d’abord chaque section du guide d’installation avant de commencer le processus d’installation et de configuration dans le système DHIS2. Identifiez les sections applicables en fonction du type d’importation :

1. importation dans une instance DHIS2 vide
2. importation dans une instance DHIS2 avec des métadonnées existantes.

Les étapes décrites dans ce document doivent être testées dans une instance DHIS2 de test/transit avant d’être appliquées à un environnement de production.

## Conditions requises { #requirements } 

Pour installer le module, vous devez avoir un compte administrateur dans le système DHIS2.

Il faut veiller à ce que le serveur lui-même et l'application DHIS2 soient bien sécurisés, et que les droits d'accès aux données collectées soient définis. Les détails sur la sécurisation d'un système DHIS2 dépassent le cadre de ce document et nous renvoyons à l'adresse [Documentation sur DHIS2] (https://docs.dhis2.org/).

## Fichiers de métadonnées { #metadata-files } 

Bien que ce ne soit pas toujours nécessaire, il peut souvent être avantageux d'apporter certaines modifications au fichier de métadonnées avant son importation dans DHIS2.

## Préparation du fichier de métadonnées { #preparing-the-metadata-file } 

Il est nécessaire d'apporter certaines modifications au fichier de métadonnées avant de pouvoir l'importer. Le travail à effectuer peut varier d'un package à un autre.

### Dimension de données par défaut { #default-data-dimension } 

Dans les premières versions du système DHIS2, les UID des dimensions de données par défaut étaient générés automatiquement. Ainsi, bien que toutes les instances du système DHIS2 possèdent une option de catégorie par défaut, une catégorie d’élément de données, une combinaison de catégories et une combinaison d’options de catégorie, les UID de ces valeurs par défaut peuvent être différents. Les versions ultérieures du système DHIS2 utilisent des UID codés en dur pour la taille par défaut, lesquels sont utilisés dans les packages de configuration.

Pour éviter tout conflit lors de l’importation des métadonnées, nous vous recommandons de rechercher et de remplacer toutes les occurrences de ces objets par défaut dans l’ensemble du fichier .json, en remplaçant les UID du fichier .json par ceux de l’instance dans laquelle le fichier sera importé. Le tableau 1 présente les UID à remplacer, ainsi que les points de terminaison d’API permettant d’identifier les UID existants.

|Objet                       | UID           | Chemin vers l'API                                              |
|-----------------------------|---------------|-----------------------------------------------------------|
| Catégorie                    | `GLevLNI9wkl` | `../api/categories.json?filter=name:eq:default`           |
| Option de catégorie             | `xYerKDKCefk` | `../api/categoryOptions.json?filter=name:eq:default`      |
| Combinaison de catégories        | `bjDvmb4bfuf` | `../api/categoryCombos.json?filter=name:eq:default`       |
| Combinaison d’options catégorie | `HllvX50cXC0` | `../api/categoryOptionCombos.json?filter=name:eq:default` |

Identifiez les UID des tailles par défaut de votre instance à l’aide des requêtes API affichées et remplacez les UID dans le fichier .json par ceux de l’instance.

> **N.B.**
>
> Notez que cette opération de recherche et de remplacement doit être effectuée via un éditeur de texte brut, et non un traitement de texte comme Microsoft Word.

### Types d'indicateurs { #indicator-types } 

Le type d’indicateur est également un type d’objet susceptible de créer un conflit lors de l’importation, car certains noms sont utilisés dans différentes bases de données DHIS2 (par ex. « Pourcentage »). Comme les types d’indicateurs sont définis par leur facteur (y compris 1 pour les indicateurs « numérateur seulement »), ils ne laissent aucune ambiguïté et peuvent être remplacés en recherchant et remplaçant des UID. Cette méthode permet d’éviter les éventuels conflits d’importation et empêche le responsable de la mise en œuvre de créer des doublons de types d’indicateurs. Le tableau ci-dessous contient les UID pouvant être remplacés, ainsi que les points de terminaison d’API permettant d’identifier les UID existants :

|Objet                  | UID           | Chemin vers l'API                                                          |
|------------------------|---------------|-----------------------------------------------------------------------|
| Numérateur seulement (nombre)| `CqNPn5KzksS` | `../api/indicatorTypes.json?filter=number:eq:true&filter=factor:eq:1` |

### Visualisations à l'aide de l’UID de l’unité d’organisation de base { #visualizations-using-root-organisation-unit-uid }

Les visualisations, les rapports d’événements, les tableaux de rapports et les cartes affectés à un niveau d’unité d’organisation spécifique ou à un groupe d’unités d’organisation comportent un renvoi à l’unité d’organisation de base (niveau 1). Ces objets, s’ils sont présents dans le fichier de métadonnées, contiennent une balise `<OU_ROOT_UID>`. Utilisez la fonction de recherche de l’éditeur de fichiers .json pour trouver cette balise et la remplacer par l’UID de l’unité d’organisation de niveau 1 dans l’instance cible.

### Codes d'option { #option-codes } 

Selon les conventions d'affectation de noms du système  DHIS2, les codes de métadonnées utilisent des lettres majuscules, des caractères de soulignement et aucun espace. Certaines exceptions susceptibles de survenir sont spécifiées dans la documentation du package correspondant. Tous les codes inclus dans les objets de métadonnées du package actuel correspondent aux conventions d'affectation de noms. Il peut arriver que les codes des objets de métadonnées existants utilisés dans la base de données cible utilisent des caractères minuscules. Dans ce cas, il est important de mettre à jour ces valeurs directement dans la base de données.

> **Important**
>
> Pendant l’importation, les codes d’option existants seront remplacés par les nouveaux codes en majuscules. 
> Afin de mettre à jour les valeurs des données existantes dans la base de données, vous devez mettre à jour les valeurs stockées dans la base de données en utilisant les commandes de la base de données. 
> Assurez-vous de mapper les anciens codes d’option et les nouveaux avant de remplacer les valeurs. Utilisez d’abord l’instance de transit, avant d’effectuer des modifications sur le serveur de production.

Pour les valeurs des éléments de données, utilisez :

    ```SQL
    UPDATE programstageinstance
    SET eventdatavalues = jsonb_set(eventdatavalues, ’{"<affected data element uid>","value"}’, ’"<new value>"’)
    WHERE eventdatavalues @> ’{"<affected data element uid>":{"value": "<old value>"}}’::jsonb
    AND programstageid=<database_programsatgeid>;
    ```

### Ordre de tri pour les options { #sort-order-for-options } 

Vérifiez si l’ordre de tri `sortOrder` des options de votre système correspond à celui inclus dans le package de métadonnées. Cela ne s’applique que si le fichier .json et l’instance cible contiennent des options et des ensembles d’options avec le même UID.

Après l’importation, assurez-vous que l’ordre de tri des options d’un ensemble d’options commence par 1. Les valeurs de l’ordre de tri ne doivent avoir aucun écart (par exemple 1, 2, 3, 5, 6).

L’ordre de tri peut être modifié dans l’application Maintenance.

1. Accédez à l’ensemble d’options applicable
2. Ouvrez la section « Options »
3. Utilisez « TRIER PAR NOM », « TRIER PAR CODE/VALEUR » ou « TRIER MANUELLEMENT » comme alternative.

Le package SC et FOYER du Paludisme contient dix ensembles d'options :

| Nom de l'ensemble d'option | UID |
|---|---|
| Médicaments antipaludiques | HB33RvLvVZe |
| Pays | ynHtyLDVeJO |
| Lieu où le cas de paludisme est enquêté | IC5LgpRR9zH |
| Occupation du Paludisme | nIhvUns2noK |
| Résultat du Paludisme | XawHdgVomWy |
| Espèces de parasites du paludisme | Frutvn1xgE2 |
| Raison de l'orientation des patients atteints de paludisme | r4qwUWuWRdO |
| Motif de conduite de l'enquête sur le cas et/ou les foyers d'infection | FcJkStOMubb |
| Oui/Non | WDUwjiW2rGH |

> **REMARQUE.**
>
> Lorsque vous mettez à jour l'UID d'un élément de métadonnées dans l'instance DHIS2 existante, vous devez exécuter une commande SQL dans la base de données et remplacer en outre toutes les occurrences et références de son UID dans d'autres objets de métadonnées : prédicteurs, indicateurs, expressions de règles de validation, etc.

## Importation de métadonnées { #importing-metadata } 

Utilisez l’application DHIS2 [Import/Export](#import_export) pour importer des packages de métadonnées. Nous vous recommandons d’utiliser la fonction « test » pour identifier les problèmes avant de tenter d’effectuer une importation réelle des métadonnées. Si le « test » signale des problèmes ou des conflits, consultez la section [conflits lors de l’importation](#handling-import-conflicts) ci-dessous. Si aucune erreur n’est signalée lors de l’importation « test »/« validée », essayez d’importer les métadonnées. Si l’importation s’est déroulée sans erreur, vous pouvez passer à la [configuration](#configuration) du module. Dans certains cas, les conflits ou les problèmes d’importation n’apparaissent pas pendant le test, mais durant l’importation réelle. Dans ce cas, le résumé de l’importation indiquera les erreurs à résoudre.

### Gestion des conflits d'importation { #handling-import-conflicts } 

> **REMARQUE**
>
> Si vous importez le package dans une nouvelle instance du système DHIS2, il n’y aura aucun conflit lors de l’importation, car ia base de données cible ne contient aucune métadonnée. Après avoir importé les métadonnées, passez à la section « [Configuration](#configuration) ».

Différents types de conflit peuvent survenir, mais le plus courant est le fait que le nom, le nom abrégé et/ou le code des objets de métadonnées du package de configuration existent déjà dans la base de données cible. Il existe plusieurs solutions alternatives à ces problèmes, chacun avec ses avantages et ses inconvénients. La solution la plus appropriée dépend, par exemple, du type d’objet à l’origine du conflit.

#### Option 1 { #alternative-1 } 

Renommez l'objet existant dans votre base de données DHIS2 pour lequel il existe un conflit. L'avantage de cette approche est qu'il n'est pas nécessaire de modifier le fichier .json, les changements étant effectués par l'interface utilisateur de DHIS2. Il est probable que cela soit moins sujet à des erreurs. Cela signifie également que le paquet de configuration est laissé tel quel, ce qui peut être un avantage, par exemple lorsque des mises à jour du package sont publiées. Les objets du package d'origine sont également souvent référencés dans le matériel de formation et la documentation.

#### Option 2 { #alternative-2 } 

Renommez l'objet pour lequel il y a un conflit dans le fichier .json. L'avantage de cette approche est que les métadonnées DHIS2 existantes sont laissées telles quelles. Cela peut être un facteur lorsqu'il y a du matériel de formation ou de la documentation, comme les procédure normale d'exploitation des dictionnaires de données liés à l'objet en question, et cela n'implique aucun risque de confusion pour les utilisateurs lors de la modification des métadonnées qui leur sont familières.

Notez que pour les deux options 1 et 2, la modification peut être aussi simple que l'ajout d'un petit pré/post-fixe au nom, pour minimiser le risque de confusion.

#### Option 3 { #alternative-3 } 

Une troisième approche, plus complexe, consiste à modifier le fichier .json pour réutiliser les métadonnées existantes. Par exemple, dans les cas où un ensemble d'options existe déjà pour un certain concept (par exemple "sexe"), cet ensemble d'options pourrait être supprimé du fichier .json et toutes les références à son UID remplacées par l'ensemble d'options correspondant existant déjà dans la base de données. Le grand avantage de cette méthode (qui n'est pas limitée aux seuls cas où il y a un conflit d'importation directe) est d'éviter de créer des métadonnées dupliquées dans la base de données. Il y a des aspects essentiels à prendre en compte lors de ce type de modification :

- il nécessite une connaissance approfondie de la structure détaillée des métadonnées du DHIS2
- Cette approche ne fonctionne pas pour tous les types d'objets. En particulier, certains types d'objets ont des dépendances compliquées à résoudre de cette manière, par exemple en ce qui concerne les désagrégations.
- il sera compliqué de procéder aux futures mises à jour du package de configuration.

## Configuration { #configuration }

Une fois que toutes les métadonnées sont importées avec succès, des étapes doivent être mises en oeuvre avant que le module ne soit fonctionnel.

### Partage { #sharing } 

Tout d'abord, vous devrez utiliser la fonctionnalité *Partage* de DHIS2 pour configurer quels utilisateurs (groupes d'utilisateurs) doivent voir les métadonnées et les données associées au programme ainsi que qui peut enregistrer/saisir des données dans le programme. Par défaut, le partage a été configuré pour ce qui suit :

- Tableaux de bord
- Visualisations, cartes, rapports d’événement et tableaux de rapports
- Des ensembles de données
- Les options de catégorie

Veuillez consulter le site [Documentation du DHIS2](#sharing) pour plus d’informations sur le partage.

Trois groupes d'utilisateurs de base sont inclus dans le package :

PAL-SC- Analyse de données : a accès à tous les tableaux de bord mais ne peut pas modifier les métadonnées ou saisir de nouvelles données.
PAL-SC- Saisie des données : Peut saisir des données et créer de nouveaux dossiers pour les patients
PAL-SC- Admin des métadonnées : Peut modifier les métadonnées
PAL-FOYER- Analyses de données : A accès à tous les tableaux de bord mais ne peut pas modifier les métadonnées ou saisir de nouvelles données.
PAL-FOYER- Saisie de données : Peut saisir des données et créer de nouveaux dossiers pour les patients
PAL-FOYER- Admin des métadonnées: Peut modifier les métadonnées

Les utilisateurs sont attribués au groupe d’utilisateurs approprié en fonction de leur rôle dans le système. Le partage des autres objets du package peut être ajusté en fonction de la configuration. Consultez le site [Documentation sur le partage de DHIS2](#sharing) pour plus d’informations.

### Ajouter des types de relations { #add-relationship-types } 

Les types de relations pour "PAL - cas à cas" et "PAL - cas à foyer" ont été supprimés du fichier .json afin de faciliter le processus d'importation et les erreurs qui y sont liées. Il est recommandé de configurer et d'attribuer ces types de relations.

**PAL - Cas à cas** : ce type de relation est conçu comme une relation bidirectionnelle. Voir le Guide de conception du système pour une capture d'écran détaillée sur la façon de configurer ce type de relation qui relie un cas de paludisme à un autre cas de paludisme, basé sur :
* De la contrainte : Instance d'entité suivie, utilisant le type d'entité suivie "Cas de Paludisme" dans le Programme "Notification des Cas de Paludisme, Enquête et Réponse"
* À la contrainte : Instance d'entité suivie, utilisant le type d'entité suivie "Cas de Paludisme" dans le Programme "Notification des Cas de Paludisme, Enquête et Réponse"

![Configurer la relation cas-à-cas du paludisme "à partir de" la contrainte](resources/images/MAL_CS_relationshipType_casetocase.png)

![Configurer la relation cas-à-cas du paludisme "à" la contrainte](resources/images/MAL_CS_relationshipType_casetocase2.png)

**PAL - Cas-au-foyer** : ce type de relation est destiné à être une relation bidirectionnelle. Voir le Guide de conception du système pour une capture d'écran détaillée sur la façon de configurer ce type de relation qui relie un cas de paludisme (suivi dans un programme tracker) à un foyer paludique (suivi dans un programme tracker séparé). 
* De la contrainte : Instance d'entité suivie, utilisant le type d'entité suivie "Cas de Paludisme" dans le Programme "Notification des Cas de Paludisme, Enquête et Réponse"
* À la contrainte : Instance d'entité suivie, qui utilise le type d'entité suivie "Zone du foyer " dans le cadre du programme " Enquête sur les foyers de paludisme "

![Configurer la relation cas-à-cas du paludisme "à partir de" la contrainte](resources/images/MAL_CS_relationshipType_casetofocus.png)

![Configurer la relation cas-à-cas du paludisme "à partir de" la contrainte](resources/images/MAL_CS_relationshipType_casetofocus2.png)

### Rôles des utilisateurs { #user-roles } 

Les utilisateurs auront besoin de rôles utilisateur pour pouvoir utiliser les différentes applications du DHIS2. Les rôles minimums suivants sont recommandés :

1. Analyse des données Tracker : Il peut visualiser des analyses d'événements et accéder à des tableaux de bord, des rapports d'événements, un visualiseur d'événements, un visualiseur de données, des tableaux croisés dynamiques, des rapports et des cartes.
2. Saisie de données Tracker : possibilité d'ajouter des valeurs de données, de mettre à jour les entités suivies, de rechercher des entités suivies dans les unités d'organisation et d'accéder à l'application Saisie Tracker

Consultez le site [Documentation de DHIS2](https://docs.dhis2.org/) pour plus d’informations sur la configuration des rôles des utilisateurs.

### Affectation aux unités d'organisation{ #organisation-unit-assignment } 

Les ensembles de données doivent être attribués à des unités d'organisation dans la hiérarchie existante afin d'être accessibles via l'application de saisie. Pour plus d'informations sur la configuration de l'accès aux unités d'organisation, veuillez consulter la [Documentation DHIS2] (https://docs.dhis2.org/).

### Métadonnées dupliquées { #duplicated-metadata } 

> **REMARQUE**
>
> Cette section ne s’applique que si vous importez dans une base de données DHIS2 qui comporte déjà des métadonnées. Si vous travaillez avec une nouvelle instance du système DHIS2, veuillez ignorer cette section et accédez à [Adaptation du programme Tracker](#adapting-the-tracker-program). 
> Si vous utilisez des applications tierces qui reposent sur les métadonnées actuelles, sachez que cette mise à jour pourrait les interrompre."

Même lorsque les métadonnées sont importées avec succès sans aucun conflit d'importation, il peut y avoir des doublons dans les métadonnées - éléments de données, attributs d'entités suivies ou ensembles d'options qui existent déjà. Comme indiqué dans la section ci-dessus sur la résolution des conflits, il est important de garder à l'esprit que les décisions relatives à la modification des métadonnées dans le DHIS2 doivent également tenir compte d'autres documents et ressources associés de différentes manières aux métadonnées existantes et aux métadonnées importées par le biais du package de configuration. La résolution des doublons ne consiste donc pas seulement à "nettoyer la base de données", mais aussi à s'assurer que cela est fait sans, par exemple, briser le potentiel d'intégration avec d'autres systèmes, la possibilité d'utiliser du matériel de formation, la rupture des SOP, etc. Cela dépend beaucoup du contexte.

Il est important de garder à l’esprit que le DHIS2 dispose d’outils pouvant dissimuler certaines des complexités des duplications potentielles dans les métadonnées. Par exemple, lorsqu’il existe des ensembles d’options en double, ils peuvent être masqués pour des groupes d’utilisateurs par le biais de [Partage](#sharing).

## Adaptation du programme { #adapting-the-program } 

Une fois le programme importé, il est possible que vous souhaitiez y apporter certaines modifications. Voici quelques exemples d'adaptations locales que vous *pourrez* effectuer :

- Ajout de variables supplémentaires au formulaire.
- Adaptation des noms des éléments de données/options en fonction des usages au niveau national.
- Ajout des traductions aux variables et/ou au formulaire de saisie des données.
- Modification des indicateurs en fonction des définitions de cas au niveau local

Toutefois, il est fortement recommandé de faire preuve d'une grande prudence si vous décidez de modifier ou de supprimer l'un des formulaires/métadonnées inclus. Il y a donc un risque que des modifications brisent des fonctionnalités, par exemple les règles du programme et les indicateurs du programme.

## Suppression des métadonnées { #removing-metadata } 

Pour maintenir votre instance propre et éviter les erreurs, il est recommandé de supprimer les métadonnées inutiles de votre instance. La suppression des métadonnées inutiles nécessite une connaissance avancée de DHIS2 et de ses différentes ressources.

