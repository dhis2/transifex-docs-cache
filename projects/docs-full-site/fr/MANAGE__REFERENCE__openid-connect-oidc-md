---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/new_install_docs/src/sysadmin/reference/oauth.md"
revision_date: '2024-01-30'
tags:
- Gestion
---

# Configuration d'OpenID Connect (OIDC) { #install_oidc_configuration } 

DHIS2 prend en charge la couche d'identité d'OpenID Connect (OIDC) pour une identification unique (IU). OIDC est un protocole d'authentification standard qui permet aux utilisateurs de se connecter à un fournisseur d'identité (IdP) comme Google. Une fois que les utilisateurs parviennent à se connecter à leur IdP, ils sont donc automatiquement connectés à DHIS2.

Cette section fournit des informations générales sur l'utilisation de DHIS2 avec un fournisseur d'OIDC, ainsi que des exemples de configuration complets.

L'authentification du 'code d’autorisation' de DHIS2 OIDC se présente comme suit :

1. Un utilisateur tente de se connecter à DHIS2 et clique sur le bouton du fournisseur d'OIDC sur la page de connexion.

2. DHIS2 redirige le navigateur vers la page de connexion de l'IdP.

3. S'il n'est pas déjà connecté, l'utilisateur est invité à fournir ses informations d'identification. Une fois authentifié avec succès, l'IdP le redirige vers le serveur DHIS2. La redirection comprend un code d'autorisation unique généré pour l'utilisateur.

4. Le serveur DHIS2 renvoie en interne le code d'autorisation de l'utilisateur au serveur IdP avec son propre identifiant client et ses informations d'identification secrètes client.

5. L'IdP renvoie un jeton d'identification au serveur DHIS2. Ce dernier valide le jeton.

6. Le serveur DHIS2 recherche l'utilisateur interne de DHIS2 avec les informations trouvées dans le jeton d'identification (par défaut, e-mail), autorise l'utilisateur et termine le processus de connexion.

## Conditions requises pour utiliser OIDC avec DHIS2 : { #requirements-for-using-oidc-with-dhis2 }

### Compte du serveur IdP { #idp-server-account }

Vous devez disposer d'un compte administrateur sur un fournisseur d'identité en ligne (IdP) ou sur un serveur autonome pris en charge par DHIS2.

Les IdP suivants sont actuellement pris en charge et testés :

* Google
* Azure AD
* WSO2
* Okta (Voir le tutoriel : [ici](#configure-openid-connect-with-okta))

Il existe également une configuration de **fournisseur générique** qui peut prendre en charge "n'importe quel" fournisseur compatible avec OIDC.

### Compte utilisateur DHIS2 { #dhis2-user-account }

Vous devez créer expressément les utilisateurs sur le serveur DHIS2 avant qu'ils puissent se connecter au fournisseur d'identité. Leur importation à partir d'un répertoire externe tel qu'Active Directory n'est pas prise en charge actuellement. La création et la gestion d'utilisateurs avec un magasin d'identités externe ne sont pas pris en charge par la norme OIDC.

### Requêtes d'IdP et mapping des utilisateurs { #idp-claims-and-mapping-of-users } 

Pour se connecter à DHIS2 avec OIDC, l'utilisateur doit être enregistré dans l'IdP et ensuite connecté à un compte utilisateur précréé dans DHIS2. OIDC utilise une méthode basée sur les requêtes pour partager les attributs des comptes utilisateurs avec d'autres applications. Les requêtes comportent des attributs de compte utilisateur tels que l'adresse électronique, le numéro de téléphone, le nom, etc. DHIS2 utilise une requête IdP pour établir des liens de correspondance entre les comptes utilisateurs de l'IdP et ceux hébergés dans le serveur DHIS2. Par défaut, DHIS2 exige que l'IdP transmette la requête _email_. En fonction de votre IdP, vous devrez peut-être configurer DHIS2 de manière à ce qu'il utilise une requête IdP différente.

Si vous utilisez Google ou Azure AD comme IdP, par défaut, le système va utiliser _email_ pour faire correspondre les identités IdP avec les comptes utilisateurs DHIS2.

> **Remarque**
>
> Pour qu'un utilisateur DHIS2 puisse se connecter avec un IdP, la case du profil d'utilisateur : *Authentification externe, uniquement OpenID ou LDAP* doit être cochée et le champ *OpenID* doit correspondre à la revendication (revendication de mise en correspondance) renvoyée par l'IdP. L'email est la revendication par défaut utilisée par Google et Azure AD.

## Configurer le fournisseur d'identité pour l'OIDC { #configure-the-identity-provider-for-oidc } 

Cette section fournit des informations générales sur la configuration d'un fournisseur d'identité (IdP) pour utiliser OIDC avec DHIS2. Il s'agit d'une des étapes de tout un processus. Chaque fournisseur d'identité a des méthodes de configuration légèrement différentes. Consultez la documentation de votre IdP pour savoir comment créer et configurer une application OIDC. Ici, le serveur DHIS2 va nous servir d'"application" OIDC.

### Rediriger l'URL { #redirect-url } 

Tous les IdP nécessiteront une URL de redirection vers votre serveur DHIS2. 
Vous pouvez le construire en utilisant le modèle suivant :

```
(protocol):/(your DHIS2 host)/oauth2/code/PROVIDER_KEY
```

Exemple d'utilisation de Google IdP :

```
https://mydhis2-server.org/oauth2/code/google
```

Liens externes vers des instructions pour configurer votre IdP :

* [Google](https://developers.google.com/identity/protocols/oauth2/openid-connect)
* [Tutoriel Azure AD](https://medium.com/xebia-engineering/authentication-and-authorization-using-azure-active-directory-266980586ab8)


## Exemple de configuration Google { #example-setup-for-google }

1. Créez un compte et connectez-vous. Pour Google, par exemple, vous pouvez vous rendre sur la [console des développeurs] à l'adresse suivante :  (https://console.developers.google.com).
2. Dans le tableau de bord des développeurs Google, cliquez sur 'Créer un nouveau projet'.
3. Suivez les instructions pour créer un ID client et un secret client OAuth 2.0.
4. Définissez votre "URL de redirection autorisée" à l'adresse suivante : `https://mydhis2-server.org/oauth2/code/google`
5. Copiez et conservez l' "identifiant client" et le "secret client" dans un endroit sécurisé.

> **Conseil**
>
> Lors des tests sur une instance DHIS2 locale exécutée par exemple sur votre ordinateur portable, vous pouvez utiliser localhost comme URL de redirection, comme suit : `https://localhost:8080/oauth2/code/google`
> *N'oubliez pas d'ajouter également l'URL de redirection dans la console des développeurs Google*

### Exemple Google dhis.conf : { #google-dhisconf-example }
```propriétés

# Permet la connexion à OIDC
oidc.oauth2.login.enabled = activé

# Identifiant client, qui vous est fourni dans la console des développeurs Google
oidc.provider.google.client_id = mon identifiant client

# Secret client, qui vous est fourni dans la console des développeurs Google
oidc.provider.google.client_secret = mon secret client

# [Facultatif] URI de redirection autorisé, identique à celui défini dans la console des développeurs Google
# Si votre nom d'hôte public est différent de ce qui se trouve dans le serveur,
# vous devez fournir votre URL publique complète, comme dans l'exemple ci-dessous.
oidc.provider.google.redirect_url = https://mydhis2-server.org/oauth2/code/google

# [Facultatif] Où serez-vous redirigé après déconnexion ?
# Si votre nom d'hôte public est différent de ce qui se trouve dans le serveur,
# vous devez fournir votre URL publique complète, comme dans l'exemple ci-dessous.
oidc.logout.redirect_url = https://mydhis2-server.org

```

## Exemple de configuration pour Azure AD { #example-setup-for-azure-ad }

Assurez-vous que votre compte Azure AD dans le portail Azure est configuré avec une URL de redirection comme celle-ci : `(protocol):/(host)/oauth2/code/PROVIDER_KEY`.
Pour enregistrer votre serveur DHIS2 en tant qu' "application" dans le portail Azure, suivez les étapes suivantes :

> **Remarque**
>
> PROVIDER_KEY est la partie "nom" de la clé de configuration, par exemple : "oidc.provider.PROVIDER_KEY.tenant = My Azure SSO"
> Si vous voulez configurer plusieurs fournisseurs Azure, vous pouvez utiliser ce formulaire de nom : (azure.0), (azure.1) etc.
> Exemple d'URL de redirection : https://mydhis2-server.org/oauth2/code/azure.0

1. Recherchez et sélectionnez *Inscriptions d’applications*.
2. Cliquez sur *Nouvelle inscription*.
3. Dans le champ *Nom*, entrez un nom qui décrit votre instance DHIS2.
4. Dans le champ *URI de redirection*, entrez l'URL de redirection tel que spécifié ci-dessus.
5. Cliquez sur *S'inscrire*.

### Exemple Azure AD dhis.conf : { #azure-ad-dhisconf-example }
```propriétés

# Permet la connexion à OIDC
oidc.oauth2.login.enabled = activé

# Premier fournisseur (azure.0) :

# Alias ou nom qui s'affichera sur le bouton de connexion sur l'écran de connexion de DHIS2.
oidc.provider.azure.0.tenant = nom de l'organisation

# ID client, qui vous est fourni dans le portail Azure
oidc.provider.azure.0.client_id = mon ID client

# Secret client, qui vous est fourni dans le portail Azure
oidc.provider.azure.0.client_secret = mon secret client

# [Facultatif] URI de redirection autorisé, tel que défini dans le portail Azure
# Si votre nom d'hôte public est différent de ce qui se trouve sur le serveur,
# vous devez fournir votre URL publique complète, comme dans l'exemple ci-dessous.
oidc.provider.azure.0.redirect_url = https://mydhis2-server.org/oauth2/code/azure.0

# [Facultatif] Où serez-vous redirigé après déconnexion ?
# Si votre nom d'hôte public est différent de ce qui se trouve sur le serveur,
# vous devez fournir votre URL publique complète, comme dans l'exemple ci-dessous.
oidc.logout.redirect_url = https://mydhis2-server.org

# [Facultatif], par défaut 'e-mail'
oidc.provider.azure.0.mapping_claim = e-mail

# [Facultatif], par défaut "activé"
oidc.provider.azure.0.support_logout = activé


# Deuxième fournisseur (azure.1) :

oidc.provider.azure.1.tenant = autre nom d'organisation
...
```

## Fournisseurs génériques { #generic-providers }

Le fournisseur générique peut être utilisé pour configurer "n'importe quel" fournisseur d'OIDC standard qui est compatible avec "Spring Security".

Dans l'exemple ci-dessous, nous allons configurer le fournisseur du gouvernement norvégien _HelseID_ OIDC à l'aide de la clé du fournisseur `helseid`.

Le fournisseur défini apparaîtra sous forme de bouton sur la page de connexion avec la clé du fournisseur comme nom par défaut, ou la valeur de `display_alias` si elle est définie. La clé du fournisseur est arbitraire et peut consister en n'importe quelle chaîne alphanumérique, excepté les noms réservés utilisés par les fournisseurs spécifiques (`google`, `azure.0,azure.1...`, `wso2`).

> **Remarque**
> Le fournisseur générique utilise les valeurs de configuration par défaut codées en dur suivantes :
> **(Ne peuvent pas subir de modifications)**
> * Authentification du client, `ClientAuthenticationMethod.BASIC` : [rfc](https://tools.ietf.org/html/rfc6749#section-2.3)
> * Requêtes authentifiées, `AuthenticationMethod.HEADER` : [rfc](https://tools.ietf.org/html/rfc6750#section-2)

### Exemple de dhis.conf générique (helseid) : { #generic-helseid-dhisconf-example }

```propriétés

# Permet la connexion OIDC
oidc.oauth2.login.enabled = activé

# Variables obligatoires :
oidc.provider.helseid.client_id = CLIENT_ID
oidc.provider.helseid.client_secret = CLIENT_SECRET
oidc.provider.helseid.mapping_claim = helseid://claims/identity/email
oidc.provider.helseid.authorization_uri = https://helseid.no/connect/authorize
oidc.provider.helseid.token_uri = https://helseid.no/connect/token
oidc.provider.helseid.user_info_uri = https://helseid.no/connect/userinfo
oidc.provider.helseid.jwk_uri = https://helseid.no/.well-known/openid-configuration/jwks
oidc.provider.helseid.end_session_endpoint = https://helseid.no/connect/endsession
oidc.provider.helseid.scopes = helseid://scopes/identity/email

# [Facultatif] URI de redirection autorisé, tel que défini dans le portail Azure
# Si votre nom d'hôte public est différent de ce qui se trouve sur le serveur,
# vous devez fournir votre URL publique complète, comme dans l'exemple ci-dessous.
oidc.provider.helseid.redirect_url = https://mydhis2-server.org/oauth2/code/helseid

# [Facultatif], par défaut "activé"
oidc.provider.helseid.enable_logout = activé

# [Facultatif] Où serez-vous redirigé après déconnexion ?
# Si votre nom d'hôte public est différent de ce qui se trouve sur le serveur,
# vous devez fournir votre URL publique complète, comme dans l'exemple ci-dessous.
oidc.logout.redirect_url = https://mydhis2-server.org

# [Facultatif] Prise en charge de PKCE, voir : https://oauth.net/2/pkce/), la valeur par défaut est 'fausse'
oidc.provider.helseid.enable_pkce = activé

# [Facultatif] Variables supplémentaires ajoutées à la requête.
# Doivent être des paires clé/valeur telles que : "KEY1 VALUE1,KEY2 VALUE2,..."
oidc.provider.helseid.extra_request_parameters = acr_values lvl4, other_key value2

# [Facultatif] Il s'agit de l'alias/nom affiché sur le bouton de connexion sur la page de connexion de DHIS2
oidc.provider.helseid.display_alias = HelseID

# [Facultatif] Lien vers une URL pour obtenir un logo. (Peut utiliser des URL absolues ou relatives)
oidc.provider.helseid.logo_image = ../security/btn_helseid.svg
# [Facultatif] Remplissage CSS pour l'image du logo
oidc.provider.helseid.logo_image_padding = 0px 1px
```

## Authentification du jeton du porteur JWT { #jwt-bearer-token-authentication }

L'authentification avec des *jetons bearer JWT* peut être activée pour les clients basés sur l'API lorsque OIDC est configuré. 
Le client DHIS2 Android est le type de client qui doit utiliser l'authentification JWT si la connexion OIDC est activée.

>**Note**
>
> DHIS2 ne prend actuellement en charge que le flux d'attribution du code d'autorisation OAuth2 pour l'authentification avec JWT (également connu sous le nom de "OAuth à trois niveaux" (three-legged OAuth en anglais)).
> Actuellement, avec DHIS2, seul Google peut être utilisé en tant que fournisseur d'OIDC lors de l'utilisation de jetons JWT.


## Conditions requises { #requirements } 
* Configurez votre fournisseur Google OIDC comme décrit ci-dessus
* Désactivez le paramètre de configuration ```oauth2.authorization.server.enabled``` en le réglant sur 'off' (désactiver)
* Activez le paramètre de configuration ```oidc.jwt.token.authentication.enabled``` en le réglant sur 'on' (activer)
* Générez un Id_client pour Android OAuth2 tel que décrit [ici](https://developers.google.com/identity/protocols/oauth2/native-app#creatingcred)

## Exemple d'authentification JWT { #jwt-authentication-example }

La section `dhis.conf` suivante montre un exemple de la façon d'activer l'authentification JWT pour un client basé sur API.

```propriétés

# Permet la connexion à OIDC
oidc.oauth2.login.enabled = activé

# Variables de configuration minimales requises :
oidc.provider.google.client_id = mon_client_id
oidc.provider.google.client_secret = mon_client_secret

# Activer la prise en charge de JWT
oauth2.authorization.server.enabled = désactivé
oidc.jwt.token.authentication.enabled = activé

# Définir le client 1 à l'aide des jetons JWT
oidc.provider.google.ext_client.0.client_id = JWT_CLIENT_ID

# Définir le client 2 à l'aide des jetons JWT
oidc.provider.google.ext_client.1.client_id = JWT_CLIENT_ID

```

> **Note**
>
> [Check out our tutorial for setting up Okta as a generic OIDC provider.](../../../topics/tutorials/configure-oidc-with-okta.md)

## Connecting a single identity provider account to multiple DHIS2 accounts { #connecting-a-single-identity-provider-account-to-multiple-dhis2-accounts } 

DHIS2 has the ability to map a single identity provider account to multiple DHIS2 accounts. API calls are available to list the linked accounts and also switch between then.

When this option is selected, the `openid` database field in the `userinfo` table does not need to be unique.  When presented with an `openid` value from the identity provider, DHIS2 will log in the user that most recently logged in.

The following `dhis.conf` section shows how to enable linked accounts.

```properties
# Enable a single OIDC account to log in as one of several DHIS2 accounts
linked_accounts.enabled = on
```

For instructions on how to list linked accounts and switch between them, see [*Switching between user accounts connected to the same identity provider account* in the Users chapter of the developer documentation.](../../../develop/using-the-api/dhis-core-version-master/users.html#switching-between-user-accounts-connected-to-the-same-identity-provider-account)

