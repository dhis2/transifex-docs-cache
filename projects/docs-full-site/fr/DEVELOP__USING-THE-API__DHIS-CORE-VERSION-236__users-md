---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.36/src/developer/web-api/users.md"
revision_date: "2021-06-25"
tags:
    - Développer
    - DHIS core version 2.36
---

# Utilisateurs { #users }

## Utilisateurs { #webapi_users }

Cette section couvre les méthodes de ressources de l'utilisateur.

    /api/33/users

### User query { #webapi_users_query }

The _users_ resource offers additional query parameters beyond the standard parameters (e.g. paging). To query for users at the users resource you can use the following parameters.

<table>
<caption>User query parameters</caption>
<colgroup>
<col style="width: 18%" />
<col style="width: 17%" />
<col style="width: 63%" />
</colgroup>
<thead>
<tr class="header">
<th>Parameter</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>query</td>
<td>Text</td>
<td>Query value for first name, surname, username and email, case in-sensitive.</td>
</tr>
<tr class="even">
<td>phoneNumber</td>
<td>Text</td>
<td>Query for phone number.</td>
</tr>
<tr class="odd">
<td>canManage</td>
<td>false | true</td>
<td>Filter on whether the current user can manage the returned users through the managed user group relationships.</td>
</tr>
<tr class="even">
<td>authSubset</td>
<td>false | true</td>
<td>Filter on whether the returned users have a subset of the authorities of the current user.</td>
</tr>
<tr class="odd">
<td>lastLogin</td>
<td>Date</td>
<td>Filter on users who have logged in later than the given date.</td>
</tr>
<tr class="even">
<td>inactiveMonths</td>
<td>Number</td>
<td>Filter on users who have not logged in for the given number of months.</td>
</tr>
<tr class="odd">
<td>inactiveSince</td>
<td>Date</td>
<td>Filter on users who have not logged in later than the given date.</td>
</tr>
<tr class="even">
<td>selfRegistered</td>
<td>false | true</td>
<td>Filter on users who have self-registered their user account.</td>
</tr>
<tr class="odd">
<td>invitationStatus</td>
<td>none | all | expired</td>
<td>Filter on user invitations, including all or expired invitations.</td>
</tr>
<tr class="even">
<td>ou</td>
<td>Identifier</td>
<td>Filter on users who are associated with the organisation unit with the given identifier.</td>
</tr>
<tr class="odd">
<td>userOrgUnits</td>
<td>false | true</td>
<td>Filter on users who are associated with the organisation units linked to the currently logged in user.</td>
</tr>
<tr class="even">
<td>includeChildren</td>
<td>false | true</td>
<td>Includes users from all children organisation units of the ou parameter.</td>
</tr>
<tr class="odd">
<td>page</td>
<td>Number</td>
<td>The page number.</td>
</tr>
<tr class="even">
<td>pageSize</td>
<td>Number</td>
<td>The page size.</td>
</tr>
</tbody>
</table>

A query for max 10 users with "konan" as first name or surname (case in-sensitive) who have a subset of authorities compared to the current user:

    /api/33/users?query=konan&authSubset=true&pageSize=10

### Recherche d'utilisateurs { #user-lookup }

L'API de recherche d'utilisateurs propose un système de récupération des utilisateurs lorsque la réponse comporte un minimum d'informations. Aucune autorité spécifique n'est requise et elle permet aux clients de rechercher des informations telles que le prénom et le nom de famille de l'utilisateur, sans pour autant révéler des informations potentiellement sensibles.

```
/api/userLookup
```

Le système de recherche de l'utilisateur comporte deux méthodes.

#### Recherche des utilisateurs par identifiant { #user-lookup-by-identifier }

Vous pouvez effectuer une recherche d'utilisateur par identifiant en utilisant la requête API suivante :

```
GET /api/userLookup/{id}
```

L'`ID` de l'utilisateur sera recherché par rapport aux propriétés d'utilisateur suivantes dans l'ordre indiqué :

-   UID
-   UUID
-   Nom d'utilisateur

Voici donc un exemple de requête :

```
/api/userLookup/QqvaU7JjkUV
```

La réponse comportera un minimum d'informations relatives à l'utilisateur.

```json
{
    "id": "QqvaU7JjkUV",
    "username": "nkono",
    "firstName": "Thomas",
    "surname": "Nkono",
    "displayName": "Thomas Nkono"
}
```

#### Requête de recherche d'utilisateurs { #user-lookup-query }

Vous pouvez réaliser une requête des utilisateurs à partir de la requête API suivante :

```
GET /api/userLookup?query={string}
```

Le paramètre de requête `query` est obligatoire. La chaîne de requête `query` sera comparée aux propriétés utilisateur suivantes :

-   Prénom
-   Nom
-   Adresses électronique
-   Nom d'utilisateur

Voici donc un exemple de requête :

```
/api/userLookup?query=John
```

La réponse comportera des informations relatives aux utilisateurs et correspondants à la requête.

```json
{
    "users": [
        {
            "id": "DXyJmlo9rge",
            "username": "jbarnes",
            "firstName": "John",
            "surname": "Barnes",
            "displayName": "John Barnes"
        },
        {
            "id": "N3PZBUlN8vq",
            "username": "jkamara",
            "firstName": "John",
            "surname": "Kamara",
            "displayName": "John Kamara"
        }
    ]
}
```

### User account create and update { #webapi_users_create_update }

Creating and updating users are supported through the API. A basic payload to create a user looks like the below example. Note that the password will be sent in plain text so remember to enable SSL/HTTPS for network transport.

```json
{
    "id": "Mj8balLULKp",
    "firstName": "John",
    "surname": "Doe",
    "email": "johndoe@mail.com",
    "userCredentials": {
        "id": "lWCkJ4etppc",
        "userInfo": {
            "id": "Mj8balLULKp"
        },
        "username": "johndoe123",
        "password": "Your-password-123",
        "skype": "john.doe",
        "telegram": "joh.doe",
        "whatsApp": "+1-541-754-3010",
        "facebookMessenger": "john.doe",
        "avatar": {
            "id": "<fileResource id>"
        },
        "userRoles": [
            {
                "id": "Ufph3mGRmMo"
            }
        ]
    },
    "organisationUnits": [
        {
            "id": "Rp268JB6Ne4"
        }
    ],
    "userGroups": [
        {
            "id": "wl5cDMuUhmF"
        }
    ]
}
```

```bash
curl -X POST -d @u.json "http://server/api/33/users" -u user:pass
  -H "Content-Type: application/json"
```

In the user creation payload, user groups are only supported when importing or _POSTing_ a single user at a time. If you attempt to create more than one user while specifying user groups, you will not receive an error and the users will be created but no user groups will be assigned. This is by design and is limited because of the many-to-many relationship between users and user groups whereby user groups is the owner of the relationship. To update or create multiple users and their user groups, consider a program to _POST_ one at a time, or _POST_ all users followed by another action to update their user groups while specifying the new user's identifiers.

After the user is created, a _Location_ header is sent back with the newly generated ID (you can also provide your own using the `/api/system/id` endpoint). The same payload can then be used to do updates, but remember to then use _PUT_ instead of _POST_ and the endpoint is now `/api/users/ID`.

```bash
curl -X PUT -d @u.json "http://server/api/33/users/ID" -u user:pass
  -H "Content-Type: application/json"
```

Pour plus d'informations sur l'ensemble des données disponibles, voir `/api/schemas/user`.

For more info about uploading and retrieving user avatars, please see the `/fileResources` endpoint.

### User account invitations { #webapi_user_invitations }

The Web API supports inviting people to create user accounts through the `invite` resource. To create an invitation you should POST a user in XML or JSON format to the invite resource. A specific username can be forced by defining the username in the posted entity. By omitting the username, the person will be able to specify it herself. The system will send out an invitation through email. This requires that email settings have been properly configured.

The invite resource is useful in order to securely allow people to create accounts without anyone else knowing the password or by transferring the password in plain text. The payload to use for the invite is the same as for creating users. An example payload in JSON looks like this:

```json
{
    "firstName": "John",
    "surname": "Doe",
    "email": "johndoe@mail.com",
    "userCredentials": {
        "username": "johndoe",
        "userRoles": [
            {
                "id": "Euq3XfEIEbx"
            }
        ]
    },
    "organisationUnits": [
        {
            "id": "ImspTQPwCqd"
        }
    ],
    "userGroups": [
        {
            "id": "vAvEltyXGbD"
        }
    ]
}
```

L'entité d'invitation de l'utilisateur peut être affichée comme suit :

```bash
curl -d @invite.json "localhost/api/33/users/invite" -u admin:district
  -H "Content-Type:application/json"
```

To send out invites for multiple users at the same time you must use a slightly different format. For JSON:

```json
{
    "users": [
        {
            "firstName": "John",
            "surname": "Doe",
            "email": "johndoe@mail.com",
            "userCredentials": {
                "username": "johndoe",
                "userRoles": [
                    {
                        "id": "Euq3XfEIEbx"
                    }
                ]
            },
            "organisationUnits": [
                {
                    "id": "ImspTQPwCqd"
                }
            ]
        },
        {
            "firstName": "Tom",
            "surname": "Johnson",
            "email": "tomj@mail.com",
            "userCredentials": {
                "userRoles": [
                    {
                        "id": "Euq3XfEIEbx"
                    }
                ]
            },
            "organisationUnits": [
                {
                    "id": "ImspTQPwCqd"
                }
            ]
        }
    ]
}
```

To create multiple invites you can post the payload to the api/users/invites resource like this:

```bash
curl -d @invites.json "localhost/api/33/users/invites" -u admin:district
  -H "Content-Type:application/json"
```

There are certain requirements for user account invitations to be sent out:

-   Le serveur SMTP doit être configuré correctement sur le serveur.

-   L'utilisateur à inviter doit avoir indiqué un e-mail valide.

-   If username is specified it must not be already taken by another existing user.

If any of these requirements are not met the invite resource will return with a _409 Conflict_ status code together with a descriptive message.

### User replication { #webapi_user_replication }

To replicate a user you can use the _replica_ resource. Replicating a user can be useful when debugging or reproducing issues reported by a particular user. You need to provide a new username and password for the replicated user which you will use to authenticate later. Note that you need the ALL authority to perform this action. To replicate a user you can post a JSON payload looking like below:

```json
{
    "username": "user_replica",
    "password": "SecretPassword"
}
```

This payload can be posted to the replica resource, where you provide the identifier of the user to replicate in the URL:

    /api/33/users/<uid>/replica

Voici un exemple de reproduction d'un utilisateur à l'aide de curl :

```bash
curl -d @replica.json "localhost/api/33/users/N3PZBUlN8vq/replica"
  -H "Content-Type:application/json" -u admin:district
```

### Disable and enable user accounts { #webapi_user_disable }

User accounts can be marked disabled. A disabled user can no longer log in.

Pour marquer un utilisateur avec l'UID `tH7WIiIJ0O3` comme désactivé (nécessite un utilisateur avec les droits appropriés) :

    POST /api/36/users/tH7WIiIJ0O3/disabled

Pour permettre à un utilisateur désactivé d'utiliser à nouveau l'outil en question (l'utilisateur doit disposer des droits appropriés) :

    POST /api/36/users/tH7WIiIJ0O3/enabled

### User expiration { #webapi_user_expiration }

An expiration date can be set for an user account. It marks the point in time from which the user account has expired and can no longer be used. Expired user can no longer log in.

To update the expiration date of user with UID `tH7WIiIJ0O3` and set it to the date `2021-01-01` use (requires user with appropriate rights):

    POST /api/36/users/tH7WIiIJ0O3/expired?date=2021-01-01

To unset the expiration date so that the account never expires use accordingly (requires user with appropriate rights):

    POST /api/36/users/tH7WIiIJ0O3/unexpired

### User data approval workflows { #user-data-approval-workflows }

To see which data approval workflows and levels a user may access, you can use the _dataApprovalWorkflows_ resource as follows:

```
GET /api/users/{id}/dataApprovalWorkflows
```

## Current user information { #webapi_current_user_information }

In order to get information about the currently authenticated user and its associations to other resources you can work with the _me_ resource (you can also refer to it by its old name _currentUser_). The current user related resources gives your information which is useful when building clients for instance for data entry and user management. The following describes these resources and their purpose.

Provides basic information about the user that you are currently logged in as, including username, user credentials, assigned organisation units:

    /api/me

Donne des informations sur les messages non lus et les interprétations :

    /api/me/tableau de bord

In order to change password, this end point can be used to validate newly entered password. Password validation will be done based on PasswordValidationRules configured in the system. This end point support POST and password string should be sent in POST body.

    /api/me/valider le mot de passe

While changing password, this end point (support POST) can be used to verify old password. Password string should be sent in POST body.

    /api/me/verifier le mot de passe

Renvoie l'ensemble des autorisations accordées à l'utilisateur actuel :

    /api/me/authorisation

Returns true or false, indicating whether the current user has been granted the given `<auth>` authorization:

    /api/me/authorisation/<auth>

Indique les niveaux d'approbation des données correspondant à l'utilisateur actuel :

    /api/me/Niveaux d'approbation des données

Gives the data approval workflows which are accessible to the current user. For each workflow, shows which data approval levels the user may see, and what permissions they have at each level:

    /api/me/dataApprovalWorkflows
