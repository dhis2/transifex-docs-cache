---
edit_url: "https://github.com/dhis2-metadata/TB_HH/blob/master/docs/tb_hh-installation.md"
revision_date: '2024-03-26'
tags:
- Implémentation
---

# TB Household Investigation Installation Guide { #tb-hh-installation }

Package Version 1.0.0

Langue par défaut du système : anglais

## Installation { #installation }

L'installation du module se fait en plusieurs étapes :

1. [Preparing](#preparing-the-metadata-file) the metadata file.
2. [Importer](#importing-metadata) le fichier de métadonnées DHIS2.
4. [Configuring](#configuration) the imported metadata.
5. [Adaptation](#adapting-the-tracker-program) du programme après son importation

Nous vous recommandons de lire tout d’abord chaque section du guide d’installation avant de commencer le processus d’installation et de configuration dans le système DHIS2. Identifiez les sections applicables en fonction du type d’importation :

1. Import into a blank DHIS2 instance
2. Import into a DHIS2 instance with existing metadata (No other versions of TB Case Surveillance tracker imported previously).
3. Update existing/older version of the TB Case Surveillance tracker.

Les étapes décrites dans ce document doivent être testées dans une instance DHIS2 de test/transit avant d’être appliquées à un environnement de production.

## Conditions requises { #requirements } 

In order to install the module, a DHIS2 administrator user account is required.

Great care should be taken to ensure that the server itself and the DHIS2 application are well secured, access rights to collected data should be defined. Details on securing a DHIS2 system are outside the scope of this document, and we refer to the [DHIS2 documentation](https://docs.dhis2.org/).

## Metadata files { #metadata-files } 

Les fichiers metadata reference et metadata json fournissent des détails techniques sur la version et le contenu du package.

While not always necessary, it can often required to make certain modifications to the metadata file before importing it into DHIS2.

## Préparation du fichier de métadonnées { #preparing-the-metadata-file } 

It is recommended to import the DHIS2 Common HIS metadata library into the target instance before using and adapting any DHIS2 metadata packages.
Common HIS Metadata package is available for download in the supported versions of DHIS2 at [Metadata Package Downloads](https://dhis2.org/metadata-package-downloads)

### Dimension de données par défaut { #default-data-dimension } 

Dans les premières versions du système DHIS2, les UID des dimensions de données par défaut étaient générés automatiquement. Ainsi, bien que toutes les instances du système DHIS2 possèdent une option de catégorie par défaut, une catégorie d’élément de données, une combinaison de catégories et une combinaison d’options de catégorie, les UID de ces valeurs par défaut peuvent être différents. Les versions ultérieures du système DHIS2 utilisent des UID codés en dur pour la taille par défaut, lesquels sont utilisés dans les packages de configuration.

Pour éviter tout conflit lors de l’importation des métadonnées, nous vous recommandons de rechercher et de remplacer toutes les occurrences de ces objets par défaut dans l’ensemble du fichier .json, en remplaçant les UID du fichier .json par ceux de l’instance dans laquelle le fichier sera importé. Le tableau 1 présente les UID à remplacer, ainsi que les points de terminaison d’API permettant d’identifier les UID existants.

| Objet                      | UID           | Chemin vers l'API                                              |
|-----------------------------|---------------|-----------------------------------------------------------|
| Catégorie                    | `GLevLNI9wkl` | `../api/categories.json?filter=name:eq:default`           |
| Option de catégorie             | `xYerKDKCefk` | `../api/categoryOptions.json?filter=name:eq:default`      |
| La combinaison de catégories        | `bjDvmb4bfuf` | `../api/categoryCombos.json?filter=name:eq:default`       |
| Combinaison d’options catégorie | `HllvX50cXC0` | `../api/categoryOptionCombos.json?filter=name:eq:default` |

Identify the UIDs of the default dimensions in your instance using the listed API requests and replace the UIDs in the json file with the UIDs from the instance.

> **N.B.**
>
> Notez que cette opération de recherche et de remplacement doit être effectuée via un éditeur de texte brut, et non un traitement de texte comme Microsoft Word.

### Types d'indicateurs { #indicator-types } 

Le type d’indicateur est également un type d’objet susceptible de créer un conflit lors de l’importation, car certains noms sont utilisés dans différentes bases de données DHIS2 (par ex. « Pourcentage »). Comme les types d’indicateurs sont définis par leur facteur (y compris 1 pour les indicateurs « numérateur seulement »), ils ne laissent aucune ambiguïté et peuvent être remplacés en recherchant et remplaçant des UID. Cette méthode permet d’éviter les éventuels conflits d’importation et empêche le responsable de la mise en œuvre de créer des doublons de types d’indicateurs. Le tableau ci-dessous contient les UID pouvant être remplacés, ainsi que les points de terminaison d’API permettant d’identifier les UID existants :

|Objet                  | UID           | Chemin vers l'API                                                          |
|------------------------|---------------|-----------------------------------------------------------------------|
| Numérateur seulement (nombre)| `CqNPn5KzksS` | `../api/indicatorTypes.json?filter=number:eq:true&filter=factor:eq:1` |

### TrackedEntityType (Type d'entité suivie) { #tracked-entity-type } 

Comme pour les types d’indicateurs, il se peut que des types d’entités suivies existent déjà dans votre base de données DHIS2. Pour éviter de créer des doublons, les références au type d’entité suivie doivent être modifiées pour refléter les éléments de votre système. Le tableau ci-dessous contient les UID pouvant être remplacés, ainsi que les points de terminaison d’API permettant d’identifier les UID existants :

|Objet  | UID           | Chemin vers l'API                                           |
|------------------------|---------------|----------------------------------------|
| Personne | `MCPQUTHX1Ze` | `../api/trackedEntityTypes.json?filter=name:eq:Person` |

### Option codes { #option-codes } 

According to the DHIS2 naming conventions, the metadata codes use capital letters, underscores and no spaces. Some exceptions that may occur are specified in the corresponding package documentation.
All codes included in the metadata objects in the current package match the naming conventions. It may occur that the codes of existing metadata objects used in the target database use lower case characters. In this case, it is important to update those values directly in the database.

> **Important**
>
> During the import, the existing option codes will be overwritten with the updated upper case codes.
> In order to update the data values for existing data in the database, it is necessary to update the values stored in the database using database commands.
> Make sure to map existing old option codes and new option codes before replacing the values. Use staging instance first, before making adjustments on the production server.

Pour les valeurs des éléments de données, utilisez :

    ```SQL
    UPDATE programstageinstance
    SET eventdatavalues = jsonb_set(eventdatavalues, ’{"<affected data element uid>","value"}’, ’"<new value>"’)
    WHERE eventdatavalues @> ’{"<affected data element uid>":{"value": "<old value>"}}’::jsonb
    AND programstageid=<database_programsatgeid>;
    ```

> **NOTE**
>
> When updating the UID of a metadata element in the existing DHIS2 instance, you will need to run an SQL command in the database and additionally replace all occurrences and references of its UID in other metadata objects: predictor, indicator, validation rule expressions, etc.

### Sort order of options { #sort-order-of-options } 

Vérifiez si l’ordre de tri `sortOrder` des options de votre système correspond à celui inclus dans le package de métadonnées. Cela ne s’applique que si le fichier .json et l’instance cible contiennent des options et des ensembles d’options avec le même UID.

After import, make sure that the sort order of options within an option set starts at 1. There should be no gaps (eg. 1,2,3,5,6) in the sort order values.

L’ordre de tri peut être modifié dans l’application Maintenance.

1. Accédez à l’ensemble d’options applicable
2. Ouvrez la section « Options »
3. Utilisez « TRIER PAR NOM », « TRIER PAR CODE/VALEUR » ou « TRIER MANUELLEMENT » comme alternative.

Make sure that no options within an option set have the same sort order. This can be checked using the following api endpoint:

`../api/options.json?paging=false&fields=id,name,sortOrder&filter=optionSet.id:in:[<optionSet UID>]`

In order to fix sort order in option sets containing large numbers of options, please refer to this [SQL script](https://github.com/dhis2/dhis2-utils/blob/master/resources/sql/clean_up_option_sort_order.sql).

### Visualizations using Root Organisation Unit UID { #visualizations-using-root-organisation-unit-uid } 

Les visualisations, les rapports d’événements, les tableaux de rapports et les cartes affectés à un niveau d’unité d’organisation spécifique ou à un groupe d’unités d’organisation comportent un renvoi à l’unité d’organisation de base (niveau 1). Ces objets, s’ils sont présents dans le fichier de métadonnées, contiennent une balise `<OU_ROOT_UID>`. Utilisez la fonction de recherche de l’éditeur de fichiers .json pour trouver cette balise et la remplacer par l’UID de l’unité d’organisation de niveau 1 dans l’instance cible.

Some visualizations and maps may contain references to organisation unit levels. Maps that consist of several map views may contain vaious Organisation unit level references based on the configuration of the map layer. Adjust the organisation unit level references in the metadata json file to match the organisation unit structure in the target instance before importing the metadata file.

### Upgrading metadata package { #upgrading-metadata-package } 

The process of upgrading an existing package to a newer version in a working DHIS2 instance is a complex operation that has to be taken with precaution. Such process has to be run in development and staging instances first, before upgrading the configuration on the production server. As metadata objects may have been removed, added or changed, it is important to ensure that:

   - the format of existing data can be mapped and adjusted to the new configuration;
   - the discontinued metadata objects are deleted from the instance; 
   - The existing objects are updated;
   - the new objects are created;
   - assignment of users to relevant user groups is reviewed.

## Importation de métadonnées { #importing-metadata } 

Utilisez l’application DHIS2 [Import/Export](#import_export) pour importer des packages de métadonnées. Nous vous recommandons d’utiliser la fonction « test » pour identifier les problèmes avant de tenter d’effectuer une importation réelle des métadonnées. Si le « test » signale des problèmes ou des conflits, consultez la section [conflits lors de l’importation](#handling-import-conflicts) ci-dessous. Si aucune erreur n’est signalée lors de l’importation « test »/« validée », essayez d’importer les métadonnées. Si l’importation s’est déroulée sans erreur, vous pouvez passer à la [configuration](#configuration) du module. Dans certains cas, les conflits ou les problèmes d’importation n’apparaissent pas pendant le test, mais durant l’importation réelle. Dans ce cas, le résumé de l’importation indiquera les erreurs à résoudre.

### Gestion des conflits d'importation { #handling-import-conflicts } 

> **REMARQUE**
>
> Si vous importez le package dans une nouvelle instance du système DHIS2, il n’y aura aucun conflit lors de l’importation, car ia base de données cible ne contient aucune métadonnée. Après avoir importé les métadonnées, passez à la section « [Configuration](#configuration) ».

Différents types de conflit peuvent survenir, mais le plus courant est le fait que le nom, le nom abrégé et/ou le code des objets de métadonnées du package de configuration existent déjà dans la base de données cible. Il existe plusieurs solutions alternatives à ces problèmes, chacun avec ses avantages et ses inconvénients. La solution la plus appropriée dépend, par exemple, du type d’objet à l’origine du conflit.

#### Option 1 { #alternative-1 } 

Renommez l'objet existant dans votre base de données DHIS2 pour lequel il existe un conflit. L'avantage de cette approche est qu'il n'est pas nécessaire de modifier le fichier .json, les changements étant effectués par l'interface utilisateur de DHIS2. Il est probable que cela soit moins sujet à des erreurs. Cela signifie également que le paquet de configuration est laissé tel quel, ce qui peut être un avantage, par exemple lorsque des mises à jour du package sont publiées. Les objets du package d'origine sont également souvent référencés dans le matériel de formation et la documentation.

#### Option 2 { #alternative-2 } 

Renommez l'objet pour lequel il y a un conflit dans le fichier .json. L'avantage de cette approche est que les métadonnées DHIS2 existantes sont laissées telles quelles. Cela peut être un facteur lorsqu'il y a du matériel de formation ou de la documentation, comme les procédure normale d'exploitation des dictionnaires de données liés à l'objet en question, et cela n'implique aucun risque de confusion pour les utilisateurs lors de la modification des métadonnées qui leur sont familières.

Notez que pour les deux options 1 et 2, la modification peut être aussi simple que l'ajout d'un petit pré/post-fixe au nom, pour minimiser le risque de confusion.

#### Option 3 { #alternative-3 } 

Une troisième approche, plus complexe, consiste à modifier le fichier .json pour réutiliser les métadonnées existantes. Par exemple, dans les cas où un ensemble d'options existe déjà pour un certain concept (par exemple "sexe"), cet ensemble d'options pourrait être supprimé du fichier .json et toutes les références à son UID remplacées par l'ensemble d'options correspondant existant déjà dans la base de données. Le grand avantage de cette méthode (qui n'est pas limitée aux seuls cas où il y a un conflit d'importation directe) est d'éviter de créer des métadonnées dupliquées dans la base de données. Il y a des aspects essentiels à prendre en compte lors de ce type de modification :

* il nécessite une connaissance approfondie de la structure détaillée des métadonnées du DHIS2
* Cette approche ne fonctionne pas pour tous les types d'objets. En particulier, certains types d'objets ont des dépendances compliquées à résoudre de cette manière, par exemple en ce qui concerne les désagrégations.
* il sera compliqué de procéder aux futures mises à jour du package de configuration.

### Linking the TB Household Contacts Investigation package to an existing TB Case Surveillance module { #linking-the-tb-household-contacts-investigation-package-to-an-existing-tb-case-surveillance-module } 

This section provides guidance on adding the TB Household Contacts Investigation packag to the functioning instance with the TB CS tracker.

For existing implementations, direct upgrade of metadata packages in the instance is not recommended.

TB Household Contacts Investigation package reuses several metadata objects from the TB Case Surveillance package. These include tracked entity type, tracked entity attributes, data elements, option sets, options and user groups. Comparing metadata reference files for both packages will help the user identify these elements before merging baseline metadata in the instance with the metadata objects in the package.

It is recommended to use version 2.1.0 of the TB Case Surveillance package when linking it with the TB Household Contacts Investigation module. The configuration of the relationship type to support enrollment of the household contacts through the relationship widget in the TB Case Surveillance tracker is described below.

```json
{
    "relationshipTypes": [
        {
            "code": "TB_CS_INDEX_HH",
            "name": "TB - Index case --> Household contact",
            "externalAccess": false,
            "publicAccess": "rw------",
            "userGroupAccesses": [],
            "userAccesses": [],
            "access": {
                "manage": true,
                "externalize": true,
                "write": true,
                "read": true,
                "update": true,
                "delete": true,
                "data": {
                    "write": true,
                    "read": true
                }
            },
            "favorites": [],
            "sharing": {
                "owner": "Ia1Xtxa5eG8",
                "external": false,
                "users": {},
                "userGroups": {},
                "public": "rw------"
            },
            "fromConstraint": {
                "relationshipEntity": "TRACKED_ENTITY_INSTANCE",
                "trackedEntityType": {
                    "id": "MCPQUTHX1Ze"
                },
                "program": {
                    "id": "Lt6P15ps7f6"
                },
                "trackerDataView": {
                    "attributes": [
                        "sB1IHYu2xQT",
                        "ENRjVGxVL6l",
                        "Ewi7FUfcHAD"
                    ],
                    "dataElements": []
                }
            },
            "toConstraint": {
                "relationshipEntity": "TRACKED_ENTITY_INSTANCE",
                "trackedEntityType": {
                    "id": "MCPQUTHX1Ze"
                },
                "program": {
                    "id": "cQsXTtAJ3HW"
                },
                "trackerDataView": {
                    "attributes": [
                        "Ewi7FUfcHAD",
                        "sB1IHYu2xQT",
                        "ENRjVGxVL6l"
                    ],
                    "dataElements": []
                }
            },
            "description": "Household contacts of confirmed TB cases",
            "bidirectional": true,
            "fromToName": "Household contact",
            "toFromName": "Index case",
            "referral": false,
            "displayFromToName": "Household contact",
            "displayToFromName": "Index case",
            "displayName": "TB - Index case --> Household contact",
            "favorite": false,
            "id": "l0wf8ZWv9nX",
            "attributeValues": []
        }
    ]
}
```
This configuration creates a bidirectional relationship between Tracked Entity Instances and allows the user to see the following data in the relationship widget:

1. For the TB Case:

   | Name | Object | UID |
   |-|-|-|
   | Household Contact | Relationship |  |
   | Given name | Tracked Entity Attribute | `sB1IHYu2xQT` |
   | Family name | Tracked Entity Attribute | `ENRjVGxVL6l` |
   | National ID | Tracked Entity Attribute | `Ewi7FUfcHAD` |

3. For the Household contact:

   | Name | Object | UID |
   |-|-|-|
   | Index case | Relationship |  |
   | Given name | Tracked Entity Attribute | `sB1IHYu2xQT` |
   | Family name | Tracked Entity Attribute | `ENRjVGxVL6l` |
   | National ID | Tracked Entity Attribute | `Ewi7FUfcHAD` |

It is possible to edit the list of displayed attributes in the relationship widget.

Tracked Entity Attributes that are displayed in the relationship widget have to be assigned to the Tracked Entity Type. 'Display in list' option has to be activated for them.

Tracked Entity Attributes to be displayed in the relationship widget have to be assigned to the corresponding programmes.

'Display in list without program' option has to be activated for the relevant Tracked Entity Attributes.

## Configuration { #configuration }

Une fois que toutes les métadonnées sont importées avec succès, des étapes doivent être mises en oeuvre avant que le module ne soit fonctionnel.

### Partage { #sharing } 

First, you will have to use the *Sharing* functionality of DHIS2 to configure which users (user groups) should see the metadata and data associated with the program as well as who can register/enter data into the program. By default, sharing has been configured for the following:

* Dashboards (Visualizations, maps, event reports and report tables)
* Des ensembles de données
* Les options de catégorie
* Programs and program stages

These core user groups are included in the package:

* TB admin
* TB access
* TB data capture

Les éléments suivants sont attribués par défaut à ces groupes d'utilisateurs

|Objet|Groupes d'utilisateurs| | | | |
|:-|:-|:-|:-|:-|:-|
| | TB access | TB admin | TB data capture |
| Type d'entité suivie | **Metadata:** can view <br> **Data:** can view | **Metadata:** can edit and view <br> **Data:** no access | **Metadata:** can view <br> **Data:** can capture and view |
| Programme | **Metadata:** can view <br> **Data:** can view | **Metadata:** can edit and view <br> **Data:** no access | **Metadata:** can view <br> **Data:** can capture and view |
| Étapes du programme | **Metadata:** can view <br> **Data:** can view |  **Metadata:** can edit and view <br> **Data:** no access | **Metadata:** can view <br> **Data:** can capture and view |
| Tableaux de bord | **Metadata:** can view <br> **Data:** can view | **Metadata:** can edit and view <br> **Data:** no access | no access |

Users need to be assigned to the aplicable user group based on their role within the system. Sharing for other objects in the package should be set up depending on requirements. Refer to the [DHIS2 Documentation](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/sharing.html) for more information on configuring sharing.

### Rôles des utilisateurs { #user-roles } 

Les utilisateurs auront besoin de rôles utilisateur pour pouvoir utiliser les différentes applications du DHIS2. Les rôles minimums suivants sont recommandés :

1. Analyse des données Tracker : Il peut visualiser des analyses d'événements et accéder à des tableaux de bord, des rapports d'événements, un visualiseur d'événements, un visualiseur de données, des tableaux croisés dynamiques, des rapports et des cartes.
2. Saisie de données Tracker : possibilité d'ajouter des valeurs de données, de mettre à jour les entités suivies, de rechercher des entités suivies dans les unités d'organisation et d'accéder à l'application Saisie Tracker

Reportez-vous à la [Documentation DHIS2] (http://dhis2.org/documentation) pour plus d'informations sur la configuration des rôles des utilisateurs.

### Unités d’Organisation { #organisation-units } 

Program must be assigned to applicable organisation units within the organisation unit hierarchy.

### Métadonnées dupliquées { #duplicated-metadata } 

> **NOTE**
>
> This section only applies if you are importing into a DHIS2 database in which there is already meta-data present. If you are working with a new DHIS2 instance, please skip this section and go to [Adapting the tracker program](#adapting-the-tracker-program).
> If you are using any third party applications that rely on the current metadata, please take into account that this update could break them”

Même lorsque les métadonnées sont importées avec succès sans aucun conflit d'importation, il peut y avoir des doublons dans les métadonnées - éléments de données, attributs d'entités suivies ou ensembles d'options qui existent déjà. Comme indiqué dans la section ci-dessus sur la résolution des conflits, il est important de garder à l'esprit que les décisions relatives à la modification des métadonnées dans le DHIS2 doivent également tenir compte d'autres documents et ressources associés de différentes manières aux métadonnées existantes et aux métadonnées importées par le biais du package de configuration. La résolution des doublons ne consiste donc pas seulement à "nettoyer la base de données", mais aussi à s'assurer que cela est fait sans, par exemple, briser le potentiel d'intégration avec d'autres systèmes, la possibilité d'utiliser du matériel de formation, la rupture des SOP, etc. Cela dépend beaucoup du contexte.

### Configuring tracker capture interface, widgets and top bar { #configuring-tracker-capture-interface-widgets-and-top-bar } 

Tracker capture dashboard must be configured after the package has been installed. This configuration includes data entry forms, widgets and top bar.

#### Modèles de saisie de données { #data-entry-forms } 

* After registering the first (test) case, access the **Settings** menu in the tracker capture form and select **Show/Hide Widgets**
* Use **Tabular Data Entry**
* Make sure that **Enrollment**, **Feedback**,  **Profile** and **Relationships** widgets are selected. Click **Close**.
* Click "Saved dashboard layout as default"
* Click "Lock layout for all users"

#### Top Bar { #top-bar } 

Top bar activation and configuration allows the user to have a clear overview of key case data displayed at the top of the tracker capture dashboard. 

### Reporting case-based data into aggregate data sets { #reporting-case-based-data-into-aggregate-data-sets } 

The TB Household Contacts Investigation tracker includes an Aggregate Data Exchange configuration that can aggregate case-based data and populate the quarterly "TB Household Contacts" data sets included in the TB HMIS package.

The **program indicators** are mapped with **data elements** and **category option combinations** in the aggregate package.

The default configuration is set to internal data exchange, i.e. when the tracker and the aggregate data sets are located in the same instance. It is possible to change this configuration in the json component. The user working with data exchange has to have access to both tracker and aggregate data. More information can be found in the [Data Exchange documentation](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/data-exchange.html#data-exchange)

## Adapter le programme tracker { #adapting-the-tracker-program } 

Une fois le programme importé, il est possible que vous souhaitiez y apporter certaines modifications. Voici quelques exemples d'adaptations locales que vous _pourrez_ effectuer :

* Ajout de variables supplémentaires au formulaire.
* Adaptation des noms des éléments de données/options en fonction des usages au niveau national.
* Ajout des traductions aux variables et/ou au formulaire de saisie des données.
* Modifying program indicators based on local case definitions.

Toutefois, il est fortement recommandé de faire preuve d'une grande prudence si vous décidez de modifier ou de supprimer l'un des formulaires/métadonnées inclus. Il y a donc un risque que des modifications brisent des fonctionnalités, par exemple les règles du programme et les indicateurs du programme.

