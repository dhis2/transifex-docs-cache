---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.39/src/developer/web-api/settings-and-configuration.md"
revision_date: '2023-12-14'
tags:
- Développement
- DHIS version 2.39
---

# Paramètres et configuration { #settings-and-configuration } 

## Paramètres du système { #webapi_system_settings } 

Vous pouvez manipuler les paramètres du système en interagissant avec la ressource
*systemSettings*. Un paramètre système est une simple paire clé-valeur,
où la clé et la valeur sont des chaînes de texte en clair. Pour enregistrer ou
mettre à jour un paramètre système, vous pouvez envoyer une requête *POST* à l'URL suivante :

    /api/33/systemSettings/my-key?value=my-val

Vous pouvez également soumettre la valeur du paramètre dans le corps de la requête,
où le type de contenu est défini sur "texte/clair". Par exemple, vous pouvez utiliser
curl comme suit :

```bash
curl "play.dhis2.org/demo/api/33/systemSettings/my-key" -d "My long value"
  -H "Content-Type: text/plain" -u admin:district
```

Pour définir les paramètres du système en bloc, vous pouvez envoyer un objet JSON avec une 
propriété et une valeur pour chaque paire clé-valeur de paramètre du système à l'aide d'une requête POST :

```json
{
  "notification de l'application clé" : "Bienvenue",
  "intro de l'application clé": "DHIS2",
  "pied de page de l'application clé" : "En savoir plus sur dhis2.org"
}
```

Les traductions pour les clés de paramétrage traduisibles peuvent être définies en spécifiant  le paramètre local  comme 
paramètre de requête et la valeur traduite qui peut être spécifiée 
soit comme paramètre de requête, soit dans la charge utile du corps. Voir un exemple d'URL :

    /api/33/systemSettings/<my-key>?locale=<my-locale>&value=<my-translated-value>

Vous devez remplacer my-key par votre clé réelle et my-val par votre valeur 
réelle. Pour récupérer la valeur d'une clé donnée (en JSON ou en texte brut)
vous pouvez envoyer une requête *GET* à l'URL suivante :

    /api/33/systemSettings/my-key

Alternativement, vous pouvez spécifier la clé en tant que paramètre de requête :

    /api/33/systemSettings?key=my-key

Vous pouvez récupérer des paramètres système spécifiques sous forme de JSON en répétant la clé
paramètre de la requête :

```bash
curl "play.dhis2.org/demo/api/33/systemSettings?key=keyApplicationNotification&key=keyApplicationIntro"
  -u admin:district
```

Vous pouvez récupérer tous les paramètres du système à l'aide d'une requête GET :

    /api/33/systemSettings

Pour récupérer une traduction spécifique pour une clé traduisible donnée, vous pouvez spécifier
un paramètre local comme paramètre de requête :

    /api/33/systemSettings/<my-key>?locale=<my-locale>

Si elle est présente, la traduction pour le paramètre local donné est renvoyée. Sinon, une valeur
est renvoyée. Si aucun paramètre local n'est spécifié pour la clé traduisible, le paramètre local par défaut de 
l'interface utilisateur est utilisé pour obtenir la traduction correcte. Si la traduction donnée n'est pas
présente, la valeur par défaut est renvoyée.

La priorité pour les clés traduisibles est la suivante :

 locale spécifiée > UI local par défaut de l'utilisateur > valeur par défaut

Pour supprimer un paramètre du système, vous pouvez envoyer une requête *DELETE* à l'URL
similaire à celle utilisée ci-dessus pour la récupération. Si une clé traduisible est
utilisée, toutes les traductions présentes seront également supprimées.

Pour supprimer uniquement une traduction spécifique d'une clé traduisible, il convient d'utiliser la même URL
que pour l'ajout d'une traduction et la valeur vide doit être
fournie :

    /api/33/systemSettings/<my-key>?locale=<my-locale>&value=

Les paramètres système disponibles sont énumérés ci-dessous.

Tableau : Paramètres du système

| Clé | Description | Traduisible |
|---|---|---|
| cléUiLocale | Paramètre local pour l'interface utilisateur | Non |
| cléDbLocale | Paramètre local de la base de données | Non |
| Propriété d'affichage de l'analyse clé | La propriété à afficher dans l'analyse. Par défaut : " nom " | Non |
| Séparateur de groupes de chiffres de l'analyse clé | Le séparateur utilisé pour séparer les groupes de chiffres | Non |
| type clé du domaine actuel | Pas encore en service | Non |
| présentation du tableau de bord clé du tracker | Used by tracker capture | Non |
| applicationTitle | The application title. Default: "DHIS2" | Oui |
| keyApplicationIntro | La présentation de l'application | Oui |
| Notification clé de l'application | Notification de l'application | Oui |
| keyApplicationFooter | Application left footer | Oui |
| keyApplicationRightFooter | Application right footer | Oui |
| keyFlag | Application flag | Non |
| keyFlagImage | Flag used in dashboard menu | Non |
| startModule | La page de démarrage de l'application. Par défaut :  " Intégration du-tableau de bord-de dhis-web  " | Non |
| startModuleEnableLightweight | L'application de la page de départ pour le rendu d'une page de destination légère. Par défaut : " faux " | Non |
| factorDeviation | Facteur d'écart-type de l'analyse des données. Par défaut :"2d" | Non |
| keyEmailHostName | Email server hostname | Non |
| keyEmailPort | Email server port | Non |
| keyEmailTls | Use TLS. Default: "true" | Non |
| keyEmailSender | Email sender | Non |
| keyEmailUsername | Email server username | Non |
| keyEmailPassword | Email server password | Non |
| minPasswordLength | Minimum length of password | Non |
| maxPasswordLength | Maximum length of password | Non |
| keySmsSetting | Configuration de SMS | Non |
| keyCacheStrategy | Stratégie de mise en cache. Par défaut : " MIS EN CACHE_6H_DEMAIN " | Non |
| keyCacheability | PUBLIC ou PRIVÉ. Détermine si les serveurs proxy sont autorisés à mettre des données en cache ou non. | Non |
| phoneNumberAreaCode | Phonenumber area code | Non |
| multiOrganisationUnitForms | Permet d'activer les formulaires d'unités multi-organisations. Par défaut :  " faux  " | Non |
| keyConfig || Non |
| keyAccountRecovery | Active la récupération des comptes d'utilisateurs. Par défaut : " faux " | Non |
| keyLockMultipleFailedLogins | Active le verrouillage de l'accès après plusieurs échecs de connexion | Non |
| googleAnalyticsUA | Google Analytic UA key for tracking site-usage | Non |
| credentialsExpires | Require user account password change. Default: "0" (Never) | Non |
| credentialsExpiryAlert | Enable alert when credentials are close to expiration date | Non |
| credentialsExpiresReminderInDays | Nombre de jours pendant lesquels l'alerte relative à l'expiration des informations d'identification doit être envoyée avant l'expiration effective. Par défaut : 28 | Non |
| alerte d'expiration du compte | Envoi un e-mail d'alerte aux utilisateurs dont le compte est sur le point d'expirer en raison d'une date d'expiration définie. Par défaut : " faux " | Non |
| expiration du compte en jours | Nombre de jours pendant lesquels l'alerte d'expiration du compte doit être envoyée avant l'expiration réelle. Par défaut : 7 | Non |
| keySelfRegistrationNoRecaptcha | Ne pas exiger de recaptcha pour l'auto-inscription. Par défaut : " faux " | Non |
| secret de recaptcha | Secret de recaptcha de l'API Google. Par défaut : l'API secret de l'instance de jeu dhis2, mais cela ne fonctionnera que sur votre instance locale et pas en production. | Non |
| site de recaptcha | Site de recaptcha de l'API Google. Par défaut : l'API du site de l'instance de jeu dhis2, mais cela ne fonctionnera que sur votre instance locale et pas en production. | Non |
| keyCanGrantOwnUserAuthorityGroups | Permet aux utilisateurs d'attribuer leurs propres rôles. Par défaut : " faux " | Non |
| keySqlViewMaxLimit | Limite maximale pour la vue SQL | Non |
| keyRespectMetaDataStartEndDatesInAnalyticsTableExport | Lorsque cette option est " vraie ", l'outil d'analyse ignore les données qui ne sont pas comprises dans les dates de début et de fin de l'option de catégorie. Par défaut : " faux " | Non |
| keySkipDataTypeValidationInAnalyticsTableExport | Ne pas valider le type de données dans l'exportation de tableaux analytiques | Non |
| keyCustomLoginPageLogo | Logo for custom login page | Non |
| keyCustomTopMenuLogo | Logo for custom top menu | Non |
| keyCacheAnalyticsDataYearThreshold | Les données analytiques plus anciennes que cette valeur (en années) seront toujours mises en cache. La valeur « 0 » désactive ce paramètre. Par défaut : 0 | Non |
| analyticsFinancialYearStart | Set financial year start. Default: October | Non |
| keyIgnoreAnalyticsApprovalYearThreshold | « 0 » vérifie l'approbation de toutes les données. « -1 » désactive le contrôle de l'approbation. « 1 » ou plus vérifie l'approbation de toutes les données qui sont plus récentes que « 1 » année. | Non |
| keyAnalyticsMaxLimit | Nombre maximal d'enregistrements analytiques. Par défaut : « 50000 » | Non |
| keyAnalyticsMaintenanceMode | Put analytics in maintenance mode. Default: "false" | Non |
| keyAnalyticsPeriodYearsOffset | Définit le décalage des années à utiliser dans le processus d'exportation des données analytiques. Si l'année d'une date donnée est en dehors du décalage, le système renvoie un message d'avertissement au cours du processus. À ce stade, l'étape de génération de la période est ignorée. Par exemple : supposons que l'utilisateur du système définisse la valeur du décalage à `5`, et que nous soyons en l'an 2023. Cela signifie que l'analyse acceptera d'exporter des dates allant de 2018 (inclus) à 2028 (inclus). Ce qui se traduit par : [2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028]. REMARQUE : Le décalage aura une influence significative sur l'utilisation des ressources. Des valeurs plus élevées entraîneront une utilisation plus importante de la mémoire RAM/HEAP et de l'unité centrale. La définition de nombres négatifs pour cette clé désactivera tout type de validation (ce qui signifie qu'il n'y aura pas d'avertissement) et la plage interne d'années sera utilisée (1970 à l'année en cours plus 10) Par défaut : 22 | Non |
| keyDatabaseServerCpus | Nombre d'unités centrales du serveur de base de données. Par défaut : « 0 » (Automatique) | Non |
| keyLastSuccessfulAnalyticsTablesRuntime | Conserve l'horodatage de la dernière exécution réussie des tables d'analyse. | Non |
| keyLastSuccessfulLatestAnalyticsPartitionRuntime | Conserve l'horodatage de la dernière exécution réussie de la partition analytique | Non |
| keyLastMonitoringRun | Conserve l'horodatage de la dernière exécution de la surveillance | Non |
| keyLastSuccessfulDataSynch | Conserve l'horodatage de la dernière synchronisation réussie des valeurs de données | Non |
| keyLastSuccessfulEventsDataSynch | Conserve l'horodatage de la dernière synchronisation réussie des données des programmes d'événements. | Non |
| keyLastCompleteDataSetRegistrationSyncSuccess | Conserve l'horodatage de la dernière synchronisation réussie de l'exhaustivité | Non |
| syncSkipSyncForDataChangedBefore | Spécifie l'horodatage utilisé pour ignorer la synchronisation de toutes les données modifiées avant ce point dans le temps | Non |
| keyLastSuccessfulAnalyticsTablesUpdate | Conserve l'horodatage de la dernière mise à jour réussie des tableaux d'analyse | Non |
| keyLastSuccessfulLatestAnalyticsPartitionUpdate | Conserve l'horodatage de la dernière mise à jour réussie de la partition analytique | Non |
| keyLastSuccessfulResourceTablesUpdate | Conserve l'horodatage de la dernière mise à jour réussie des tableaux de ressources | Non |
| keyLastSuccessfulSystemMonitoringPush | Conserve l'horodatage de du dernier push réussi de la surveillance du système | Non |
| keyLastSuccessfulMonitoring | Conserve l'horodatage de la dernière surveillance réussie | Non |
| keyNextAnalyticsTableUpdate | Conserve l'horodatage de la prochaine mise à jour du tableau d'analyse | Non |
| Lien de la page d'aide | Lien vers la page d'aide. Par défaut : "[https://dhis2.github.io/dhis2-docs/master/en/user/html/dhis2_user_manual_en.html](http://dhis2.github.io/dhis2-docs/master/en/user/html/dhis2_user_manual_en.html) | Non |
| keyAcceptanceRequiredForApproval | L'acceptation est requise avant la validation. Par défaut "faux" | Non |
| keySystemNotificationsEmail | Où envoyer les notifications du système par e-mail | Non |
| keyAnalysisRelativePeriod | Période relative par défaut pour l'analyse. Par défaut : « 12_DERNIERS_MOIS ». | Non |
| keyRequireAddToView | Autorisation requise pour l'ajout de listes d'objets à visualiser. Par défaut : « faux » | Non |
| keyAllowObjectAssignment | Autoriser l'affectation d'un objet à des objets apparentés lors d'un ajout ou d'une mise à jour. Par défaut "faux" | Non |
| keyUseCustomLogoFront | Permet l'utilisation d'un logo personnalisé sur la page d'accueil. Par défaut : « faux » | Non |
| keyUseCustomLogoBanner | Enables the usage of a custom banner on the website. Default: "false" | Non |
| keyDataImportStrictPeriods || Non |
| keyDataImportStrictPeriods | Require periods to match period type of data set. Default: "false" | Non |
| keyDataImportStrictDataElements | Require data elements to be part of data set. Default: "false" | Non |
| keyDataImportStrictCategoryOptionCombos | Require category option combos to match category combo of data element. Default: "false" | Non |
| keyDataImportStrictOrganisationUnits | Require organisation units to match assignment of data set. Default: "false" | Non |
| keyDataImportStrictAttributeOptionsCombos | Require attribute option combis to match category combo of data set. Default: "false" | Non |
| keyDataImportRequireCategoryOptionCombo | Require category option combo to be specified. Default: "false" | Non |
| keyDataImportRequireAttributeOptionCombo | Require attribute option combo to be specified. Default: "false" | Non |
| keyCustomJs | Custom JavaScript to be used on the website | Non |
| keyCustomCss | Custom CSS to be used on the website | Non |
| keyCalendar | The calendar type. Default: "iso8601". | Non |
| keyDateFormat | The format in which dates should be displayed. Default: "yyyy-MM-dd". | Non |
| cléStyle | The style used on the DHIS2 webpages. Default: "light_blue/light_blue.css". | Non |
| keyRemoteInstanceUrl | Url used to connect to remote instance | Non |
| keyRemoteInstanceUsername | Username used to connect to remote DHIS2 instance | Non |
| keyRemoteInstancePassword | Password used to connect to remote DHIS2 instance | Non |
| keyGoogleMapsApiKey | Google Maps API key | Non |
| keyGoogleCloudApiKey | Google Cloud API key | Non |
| keyLastMetaDataSyncSuccess | Keeps timestamp of last successful metadata synchronization | Non |
| keyVersionEnabled | Enables metadata versioning | Non |
| keyMetadataFailedVersion | Keeps details about failed metadata version sync | Non |
| keyMetadataLastFailedTime | Keeps timestamp of last metadata synchronization failure | Non |
| keyLastSuccessfulScheduledProgramNotifications || Non |
| keyLastSuccessfulScheduledDataSetNotifications || Non |
| keyRemoteMetadataVersion | Details about metadata version of remote instance | Non |
| keySystemMetadataVersion | Details about metadata version of the system | Non |
| keyStopMetadataSync | Flag to stop metadata synchronization | Non |
| keyFileResourceRetentionStrategy | Détermine la durée de conservation des ressources du fichier associées aux valeurs supprimées ou mises à jour. AUCUNE, TROIS_MOIS, UNE_ANNÉE ou INDÉFINIMENT. | Non |
| syncMaxRemoteServerAvailabilityCheckAttempts | Specifies how many times the availability of remote server will be checked before synchronization jobs fail. | Non |
| syncMaxAttempts | Spécifie le nombre maximum de tentatives pour les tâches de synchronisation | Non |
| syncDelayBetweenRemoteServerAvailabilityCheckAttempts | Délai entre les contrôles de disponibilité du serveur distant | Non |
| lastSuccessfulDataStatistics | Conserve l'horodatage de la dernière analyse de données réussie | Non |
| keyHideDailyPeriods | Not in use | Non |
| keyHideWeeklyPeriods || Non |
| keyHideBiWeeklyPeriods | Indicateur booléen utilisé pour masquer/afficher les périodes bihebdomadaires | Non |
| keyHideMonthlyPeriods || Non |
| keyHideBiMonthlyPeriods || Non |
| keyGatherAnalyticalObjectStatisticsInDashboardViews | Si l'on souhaite recueillir des statistiques analytiques sur les objets lorsqu'ils sont visualisés dans un tableau de bord. | Non |
| keyCountPassiveDashboardViewsInUsageAnalytics | Comptabilise les consultations « passives » des tableaux de bord (sans sélection d'un tableau de bord particulier) dans l'analyse de l'utilisation. | Non |
| keyDashboardContextMenuItemSwitchViewType | Allow users to switch dashboard favorites' view type | Oui |
| keyDashboardContextMenuItemOpenInRelevantApp | Allow users to open dashboard favorites in relevant apps | Oui |
| keyDashboardContextMenuItemShowInterpretationsAndDetails | Allow users to show dashboard favorites' interpretations and details | Oui |
| keyDashboardContextMenuItemViewFullscreen | Allow users to view dashboard favorites in fullscreen | Oui |
| keyParallelJobsInAnalyticsTableExport | Renvoie le nombre de tâches parallèles à utiliser pour traiter les tableaux analytiques. Il est prioritaire sur « keyDatabaseServerCpus ». Par défaut : -1 | Non |

## Paramètres de l'utilisateur { #webapi_user_settings } 

Vous pouvez manipuler les paramètres de l'utilisateur en interagissant avec la ressource *userSettings*. Un paramètre utilisateur est une simple paire clé-valeur, où la clé et la valeur sont des chaînes de texte en clair. Le paramètre utilisateur sera lié à l'utilisateur authentifié pour la requête de l'API Web. Pour obtenir une liste de tous les paramètres utilisateur, vous pouvez envoyer une requête *GET* à l'URL suivante :

    /api/33/userSettings

Les paramètres non définis par l'utilisateur seront remplacés par les paramètres équivalents 
du système. Pour ne renvoyer que les valeurs définies explicitement par l'utilisateur, 
vous pouvez ajouter ?useFallback=false à l'URL ci-dessus, comme ceci :

    /api/33/userSettings?useFallback=false

Pour enregistrer ou mettre à jour un paramètre pour l'utilisateur actuellement authentifié, vous pouvez
envoyer une requête *POST* à l'URL suivante :

    /api/33/userSettings/my-key?value=my-val

Vous pouvez spécifier explicitement l'utilisateur pour lequel le paramètre doit être sauvegardé en utilisant 
cette syntaxe :

    /api/33/userSettings/my-key?user=username&value=my-val

Vous pouvez également soumettre la valeur du paramètre dans le corps de la requête,
où le type de contenu est défini sur "texte/clair". Par exemple, vous pouvez utiliser
curl comme suit :

```bash
curl "https://play.dhis2.org/demo/api/33/userSettings/my-key" -d "My long value"
  -H "Content-Type: text/plain" -u admin:district
```

Par exemple, pour définir les paramètres linguistiques de l'interface utilisateur de l'utilisateur actuel en français, vous 
pouvez utiliser la commande suivante.

```bash
curl "https://play.dhis2.org/demo/api/33/userSettings/keyUiLocale?value=fr"
  -X POST -u admin:district
```

Vous devez remplacer my-key par votre véritable clé et my-val par votre valeur 
réelle. Pour récupérer la valeur d'une clé donnée en texte brut, vous pouvez envoyer une 
requête *GET* à l'URL suivante :

    /api/33/userSettings/my-key

Pour supprimer un paramètre utilisateur, vous pouvez envoyer une requête *DELETE* à l'URL
similaire à celle utilisée ci-dessus pour la récupération.

Les paramètres système disponibles sont énumérés ci-dessous.



Tableau : Paramètres de l'utilisateur

| Clé | Options | Description |
|---|---|---|
| cléStyle | light_blue/light_blue.css &#124; green/green.css &#124; vietnam/vietnam.css | Feuille de style de l'interface utilisateur. |
| Clé Message de notification par Email | faux &#124; vrai | Whether to send email notifications. |
| keyMessageSmsNotification | faux &#124; vrai | Whether to send SMS notifications. |
| cléUiLocale | Valeur locale | User interface locale. |
| cléDbLocale | Valeur locale | Database content locale. |
| Propriété d'affichage de l'analyse clé | nom &#124; Nom court | Property to display for metadata in analysis apps. |
| type clé du domaine actuel | all &#124; aggregate &#124; tracker | Data element domain type to display in lists. |
| keyAutoSaveCaseEntryForm | faux &#124; vrai | Save case entry forms periodically. |
| keyAutoSaveTrackedEntityForm | faux &#124; vrai | Save person registration forms periodically. |
| keyAutoSaveDataEntryForm | faux &#124; vrai | Save aggregate data entry forms periodically. |
| présentation du tableau de bord clé du tracker | faux &#124; vrai | Tracker dasboard layout. |

## Configuration { #webapi_configuration } 

Pour accéder à la configuration, vous pouvez interagir avec la ressource 
*configuration*. Vous pouvez obtenir des réponses XML et JSON via l'en-tête *Accepter* 
ou en utilisant les extensions .json ou .xml. Vous pouvez *OBTENIR* toutes les propriétés 
de la configuration depuis : 

    /api/33/configuration

Vous pouvez envoyer des requêtes *GET* et *POST* aux ressources spécifiques 
suivantes :

    GET /api/33/configuration/systemId

    GET POST DELETE /api/configuration/feedbackRecipients

    GET POST DELETE /api/configuration/offlineOrganisationUnitLevel

    GET POST /api/configuration/infrastructuralDataElements

    GET POST /api/configuration/infrastructuralIndicators

    GET POST /api/configuration/infrastructuralPeriodType

    GET POST DELETE /api/configuration/selfRegistrationRole

    GET POST DELETE /api/configuration/selfRegistrationOrgUnit

    GET POST /api/facilityOrgUnitGroupSet

    GET POST /api/facilityOrgUnitLevel

Pour la configuration de la liste blanche CORS, vous pouvez effectuer une requête POST avec  
une série  d'URL à inscrire sur la liste blanche comme charge utile en utilisant « application/json » comme 
type de contenu, par exemple :

```json
["www.google.com", "www.dhis2.org", "www.who.int"]
```

    GET POST /api/33/configuration/corsWhitelist

Pour les requêtes POST, la valeur de configuration doit être envoyée sous forme de texte 
dans la charge utile de la requête. Le tableau suivant indique les valeurs de configuration 
appropriées pour chaque propriété.



Tableau : Valeurs de configuration

| Configuration property | Valeur |
|---|---|
| feedbackRecipients | User group ID |
| offlineOrganisationUnitLevel | Organisation unit level ID |
| infrastructuralDataElements | Data element group ID |
| infrastructuralIndicators | Indicator group ID |
| infrastructuralPeriodType | Period type name (e.g. "Monthly") |
| selfRegistrationRole | User role ID |
| selfRegistrationOrgUnit | Organisation unit ID |
| smtpPassword | SMTP email server password |
| remoteServerUrl | URL to remote server |
| remoteServerUsername | Username for remote server authentication |
| remoteServerPassword | Password for remote server authentication |
| corsWhitelist | JSON list of URLs |

Par exemple, pour définir le groupe d'utilisateurs des destinataires du retour d'information, vous pouvez invoquer 
la commande curl suivante :

```bash
curl "localhost/api/33/configuration/feedbackRecipients" -d "wl5cDMuUhmF"
  -H "Content-Type:text/plain"-u admin:district
```

## Configuration en lecture uniquement { #webapi_readonly_configuration_interface } 

Pour accéder à tous les paramètres et propriétés de configuration, vous pouvez utiliser le point d'extrémité de configuration en lecture uniquement. Cela permet l'accès en lecture uniquement aux *Paramètres de l'utilisateur, Paramètres du système et aux paramètres de configuration du serveur DHIS2*. Vous pouvez obtenir des réponses XML et JSON grâce à l'en-tête *Accept*. Vous pouvez *OBTENIR* tous les paramètres à partir de :

    /api/33/configuration/settings

You can get filtered settings based on setting type:

    GET /api/33/configuration/settings/filter?type=USER_SETTING

    GET /api/33/configuration/settings/filter?type=CONFIGURATION

More than one type can be provided:

    GET /api/33/configuration/settings/filter?type=USER_SETTING&type=SYSTEM_SETTING



Table: SettingType values

| Valeur | Description |
|---|---|
| USER_SETTING | To get user settings |
| SYSTEM_SETTING | To get system settings |
| CONFIGURATION | To get DHIS server settings |

> **Remarque**
>
> Les champs confidentiels seront fournis dans le résultat, mais sans valeur.

## Jetons { #webapi_tokens } 

La ressource *tokens* fournit des jetons d'accès à différents services.

### Compte Google Service { #webapi_tokens_google_service_account } 

Vous pouvez récupérer un jeton d'accès OAuth 2.0 du compte de service Google à l'aide 
d'une requête GET vers la ressource suivante.

    GET /api/tokens/google

Le jeton est valable pendant un certain temps, après quoi 
un autre jeton doit être demandé à cette ressource. La réponse 
contient un en-tête de contrôle de cache qui correspond à l'expiration du jeton. La 
réponse contiendra les propriétés suivantes au format JSON.



Table: Token response

| Propriété | Description |
|---|---|
| access_token | The OAuth 2.0 access token to be used when authentication against Google services. |
| expires_in | Nombre de secondes avant l'expiration du jeton d'accès, généralement 3600 secondes (1 heure). |
| client_id | L'identifiant du client du compte du service Google. |

Cela suppose qu'un compte de service Google a été créé et configuré pour DHIS2. Veuillez consulter le guide d'installation pour plus d'informations.

## Contenu statique { #webapi_static_content } 

La ressource *staticContent* vous permet de télécharger et d'extraire des logos 
personnalisés utilisés dans DHIS2. La ressource permet à l'utilisateur de télécharger un fichier avec une 
clé associée, qui peut ensuite être extraite à l'aide de la clé. Seuls les fichiers PNG 
sont pris en charge et ne peuvent être téléchargés que vers les clés `logo_banner` et 
`logo_front`.

    /api/33/staticContent



Table: Static content keys

| Clé | Description |
|---|---|
| logo_banner | Logo in the application top menu on the left side. |
| logo_front | Logo on the login-page above the login form. |

To upload a file, send the file with a *POST* request to:

    POST /api/33/staticContent/<key>

Example request to upload logo.png to the `logo_front` key:

```bash
curl -F "file=@logo.png;type=image/png" "https://play.dhis2.org/demo/api/33/staticContent/logo_front"
  -X POST -H "Content-Type: multipart/form-data" -u admin:district
```

Uploading multiple files with the same key will overwrite the existing
file. This way, retrieving a file for any given key will only return the
latest file uploaded.

To retrieve a logo, you can *GET* the following:

    GET /api/33/staticContent/<key>

Example of requests to retrieve the file stored for `logo_front`:

* Adding "Accept: text/html" to the HTTP header.*__ In this case, the endpoint will return a default image if nothing is defined. Will return an image stream when a custom or default image is found.

```bash
curl "https://play.dhis2.org/demo/api/33/staticContent/logo_front"
  -H "Accept: text/html" -L -u admin:district
```

* Adding "Accept: application/json" to the HTTP header.*__ With this parameter set, the endpoint will never return a default image if the custom logo is not found. Instead, an error message will be returned. When the custom image is found this endpoint will return a JSON response containing the path/URL to the respective image.

```bash
curl "https://play.dhis2.org/demo/api/33/staticContent/logo_front"
  -H "Accept: application/json" -L -u admin:district
```

Success and error messages will look like this:

```json
{
  "images": {
    "png": "http://localhost:8080/dhis/api/staticContent/logo_front"
  }
}
```

```json
{
  "httpStatus": "Non trouvé",
  "httpStatusCode": 404,
  "statut": "ERREUR",
  "message": "Aucun fichier personnalisé n'a été trouvé."
}
```

To use custom logos, you need to enable the corresponding system
settings by setting it to *true*. If the corresponding setting is false,
the default logo will be served.

## Personnalisation de l'IU { #webapi_ui_customization } 

Pour personnaliser l'interface utilisateur de l'application DHIS2, vous pouvez insérer des styles JavaScript et CSS personnalisés via la ressource *files*.

```
POST GET DELETE /api/33/files/script
POST GET DELETE /api/33/files/style
```

Le contenu JavaScript et CSS inséré par le biais de cette ressource sera chargé par 
l'application web DHIS2. Cela peut être particulièrement utile dans certaines situations :

  - Overriding the CSS styles of the DHIS2 application, such as the
    login page or main page.

  - Defining JavaScript functions which are common to several custom
    data entry forms and HTML-based reports.

  - Including CSS styles which are used in custom data entry forms and
    HTML-based reports.

### Javascript { #webapi_customization_javascript } 

Pour insérer Javascript à partir d'un fichier appelé *script.js*, vous pouvez interagir 
avec la ressource *files/script* à l'aide d'une requête POST :

```bash
curl --data-binary @script.js "localhost/api/33/files/script"
  -H "Content-Type:application/javascript" -u admin:district
```

Notez que nous utilisons l'option `--data-binary` pour préserver le formatage du 
contenu du fichier. Vous pouvez récupérer le contenu du JavaScript à l'aide d'une requête GET :

    /api/33/files/script

Pour supprimer le contenu JavaScript, vous pouvez utiliser une requête de type SUPPRIMER (DELETE).

### CSS { #webapi_customization_css } 

Pour insérer une feuille de style CSS à partir d'un fichier appelé *style.css*, vous pouvez interagir avec la ressource
*files/style* en utilisant une requête POST :

```bash
curl --data-binary @style.css "localhost/api/33/files/style"
  -H "Content-Type:text/css" -u admin:district
```

Vous pouvez récupérer le contenu CSS à l'aide d'une requête GET :

    /api/33/files/style

Pour supprimer le contenu JavaScript, vous pouvez utiliser une requête de type SUPPRIMER (DELETE).

