---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/master/src/developer/web-api/data-exchange.md"
revision_date: '2023-09-27'
tags:
- Version Master de DHIS2 Central
- Développement
---

# Échange de données { #data-exchange } 

## Échange de données agrégées { #aggregate-data-exchange } 

Cette section décrit le système d'échange de données agrégées et l'API.

### Introduction { #introduction } 

Le service d'échange de données agrégées permet d'échanger des données entre des instances de DHIS 2, et éventuellement d'autres logiciels qui prennent en charge le format JSON de l'ensemble des valeurs de données de DHIS 2. Il permet également l'échange de données au sein d'une seule instance de DHIS 2, par exemple pour l'agrégation de données de suivi et l'enregistrement du résultat en tant que données agrégées. 

Le service d'échange de données agrégées est adapté à des cas d'utilisation tels que :

* L'échange de données entre une instance HMIS et un portail de données ou une instance d'entrepôt de données de DHIS 2.
* L'échange de données entre une instance de suivi DHIS 2 contenant des données individuelles et une instance HMIS agrégée.
* Le calcul préalable des données de suivi avec les indicateurs de programme sauvegardés en tant que valeurs de données agrégées.
* La déclaration des données d'un HMIS national à un bailleur de fonds mondial.

### Aperçu { #overview } 

Le service d'échange de données agrégées permet l'échange de données entre une instance *source* du DHIS 2 et une instance *cible* du DHIS 2. Un échange de données peut être *externe*, c'est-à-dire que l'instance cible est différente/externe à l'instance source. Un échange de données peut également être *interne*, l'instance cible étant la même que l'instance source. La source d'échange de données agrégées peut contenir plusieurs requêtes de source, une requête de source correspondant à peu près à une requête d'API analytique.

La valeur des données sera récupérée et transformée dans le format *ensemble de valeurs de données*, puis transmise à l'instance cible de DHIS 2. Le service d'échange de données agrégées prend en charge les *systèmes d'identification* pour permettre une certaine souplesse dans le mapping des métadonnées entre les instances.

Les données seront récupérées et agrégées à partir de l'instance source à l'aide du moteur d'analyse. Cela implique que les éléments de données, les indicateurs agrégés, les taux de déclaration des ensembles de données et les indicateurs de programme peuvent être référencés dans la requête adressée à l'instance source. Une demande de source contient également des périodes, où les périodes fixes et relatives sont prises en charge, et des unités d'organisation. Un nombre quelconque de *filtres* peut être appliqué à une requête source.

Un échange de données peut être exécuté en tant que tâche planifiée, c'est-à-dire que l'échange de données peut être programmé pour être exécuté à un intervalle spécifique. Un échange de données peut également être exécuté sur demande via l'API.

To create and manipulate aggregate data exchanges, the `F_AGGREGATE_DATA_EXCHANGE_PUBLIC_ADD` / `F_AGGREGATE_DATA_EXCHANGE_PRIVATE_ADD` and `F_AGGREGATE_DATA_EXCHANGE_DELETE` authorities are required.

Les définitions d'échange de données agrégées sont des métadonnées normales dans DHIS 2, ce qui signifie que les définitions peuvent être importées et exportées entre les instances de DHIS 2, à l'exception des informations d'identification (noms d'utilisateur et jetons d'accès) qui ne seront pas exposées dans les exportations de métadonnées. Les informations d'identification sont cryptées lors du stockage afin de fournir une couche de sécurité supplémentaire.

Le service d'échange de données agrégées a été introduit dans la version 2.39, ce qui signifie que l'instance source de DHIS 2 doit être la version 2.39 ou ultérieure. L'instance cible du DHIS 2 doit être la version 2.38 ou ultérieure.

### Authentification { #authentication } 

Pour les échanges de données de type externe, l'URL de base et les informations d'authentification de l'instance DHIS 2 cible doivent être spécifiées. Pour l'authentification, l'authentification de base et les jetons d'accès personnels (PAT) sont pris en charge.

Il est recommandé de spécifier soit l'authentification de base, soit l'authentification PAT. Si les deux sont spécifiées, l'authentification PAT est prioritaire.

Notez que la prise en charge de PAT a été introduite dans la version 2.38.1, ce qui signifie que pour utiliser l'authentification PAT, l'instance DHIS 2 cible doit être la version 2.38.1 ou une version ultérieure.

### API { #api } 

L'API d'échange de données agrégées est abordée dans la section qui suit.

#### Créer un échange de données agrégées { #create-aggregate-data-exchange } 

```
POST /api/aggregateDataExchanges
```

```
Content-Type: application/json
```

Exemple de charge utile d'échange de données internes, où les données d'événement sont calculées avec les indicateurs de programme et sauvegardées en tant que valeurs de données agrégées : 

```json
{
  "name": "Internal data exchange",
  "source": {
    "params": {
      "periodTypes": [
        "MONTHLY",
        "QUARTERLY"
      ]
    },
    "requests": [
      {
        "name": "ANC",
        "visualization": null,
        "dx": [
          "fbfJHSPpUQD",
          "cYeuwXTCPkU",
          "Jtf34kNZhzP"
        ],
        "pe": [
          "LAST_12_MONTHS",
          "202201"
        ],
        "ou": [
          "ImspTQPwCqd"
        ],
        "filters": [
          {
            "dimension": "Bpx0589u8y0",
            "items": [
              "oRVt7g429ZO", 
              "MAs88nJc9nL"
            ]
          }
        ],
        "inputIdScheme": "UID",
        "outputDataElementIdScheme": "UID",
        "outputOrgUnitIdScheme": "UID",
        "outputIdScheme": "UID"
      }
    ]
  },
  "target": {
    "type": "INTERNAL",
    "request": {
      "dataElementIdScheme": "UID",
      "orgUnitIdScheme": "UID",
      "categoryOptionComboIdScheme": "UID",
      "idScheme": "UID"
    }
  }
}
```

Exemple de charge utile d'échange de données externes avec authentification de base et schéma d'identification *code*, où les données sont transmises à une instance DHIS 2 externe :

```json
{
  "name": "External data exchange with basic authentication",
  "source": {
    "requests": [
      {
        "name": "ANC",
        "visualization": null,
        "dx": [
          "fbfJHSPpUQD",
          "cYeuwXTCPkU",
          "Jtf34kNZhzP"
        ],
        "pe": [
          "LAST_12_MONTHS",
          "202201"
        ],
        "ou": [
          "ImspTQPwCqd"
        ],
        "inputIdScheme": "UID",
        "outputIdScheme": "CODE"
      }
    ]
  },
  "target": {
    "type": "EXTERNAL",
    "api": {
        "url": "https://play.dhis2.org/2.38.2.1",
        "username": "admin",
        "password": "district"
    },
    "request": {
      "idScheme": "CODE"
    }
  }
}
```

Exemple de charge utile d'échange de données externes avec authentification PAT et schéma d'identification *code*, où les données sont transmises à une instance DHIS 2 externe :

```json
{
  "name": "External data exchange with PAT authentication",
  "source": {
    "requests": [
      {
        "name": "ANC",
        "dx": [
          "fbfJHSPpUQD",
          "cYeuwXTCPkU",
          "Jtf34kNZhzP"
        ],
        "pe": [
          "LAST_12_MONTHS",
          "202201"
        ],
        "ou": [
          "ImspTQPwCqd"
        ],
        "inputIdScheme": "UID",
        "outputIdScheme": "CODE"
      }
    ]
  },
  "target": {
    "type": "EXTERNAL",
    "api": {
        "url": "https://play.dhis2.org/2.38.2.1",
        "accessToken": "d2pat_XIrqgAGjW935LLPuSP2hXSZwpTxTW2pg3580716988"
    },
    "request": {
      "idScheme": "CODE"
    }
  }
}
```

La syntaxe des demandes de source suit la syntaxe de l'API du point d'extrémité de l'analyse. Cela signifie que pour la partie `dx`, les éléments de données, les indicateurs, les taux de déclaration des ensembles de données, les éléments de données de programme et les indicateurs de programme sont pris en charge. Notez que pour les éléments de données de programme, l'élément de données doit être préfixé avec l'identifiant du programme. Pour la partie `pe`, les périodes relatives ainsi que les périodes fixes sont prises en charge. Pour la partie `ou`, les unités d'organisation d'utilisateurs, les niveaux d'unités d'organisation et les groupes d'unités d'organisation ainsi que les unités d'organisation individuelles sont pris en charge. Pour une explication complète, veuillez consulter le chapitre *Analytiques* > les sections *Dimensions et éléments* et *La dimension dx*.

##### Réponse { #response } 

```
201 Crées
```

```json
{
  "httpStatus": "Created",
  "httpStatusCode": 201,
  "status": "OK",
  "response": {
    "responseType": "ObjectReport",
    "uid": "pG4bBTMiCqO",
    "klass": "org.hisp.dhis.dataexchange.aggregate.AggregateDataExchange",
    "errorReports": []
  }
}
```

#### Mettre à jour l'échange de données agrégées { #update-aggregate-data-exchange } 

```
PUT /api/aggregateDataExchanges/{id}
```

```
Content-Type: application/json
```

Le contenu de la requête est identique à celui de l'opération de création.

##### Réponse { #response } 

```
200 OK
```

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "response": {
    "responseType": "ObjectReport",
    "uid": "pG4bBTMiCqO",
    "klass": "org.hisp.dhis.dataexchange.aggregate.AggregateDataExchange",
    "errorReports": []
  }
}
```

#### Obtenir l'échange de données agrégées { #get-aggregate-data-exchange } 

```
GET /api/aggregateDataExchanges/{id}
```

``` 
Accept: application/json
```

Les points d'extrémité de récupération suivent la sémantique habituelle de filtrage des champs et des objets des points d'extrémité de métadonnées. JSON est le seul format de réponse pris en charge.

##### Réponse { #response } 

```
200 OK
```

#### Supprimer l'échange de données agrégées { #delete-aggregate-data-exchange } 

```
DELETE /api/aggregateDataExchanges/{id}
```

##### Réponse { #response } 

```
204 No Content
```

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "response": {
    "responseType": "ObjectReport",
    "uid": "pG4bBTMiCqO",
    "klass": "org.hisp.dhis.dataexchange.aggregate.AggregateDataExchange",
    "errorReports": []
  }
}
```

#### Exécuter l'échange de données agrégées { #run-aggregate-data-exchange } 

Un échange de données agrégées peut être exécuté directement à l'aide d'une requête POST au point d'extrémité suivant :

```
POST /api/aggregateDataExchanges/{id}/exchange
```

##### Réponse { #response } 

```
200 OK
```

```json
{
  "responseType": "ImportSummaries",
  "status": "SUCCESS",
  "imported": 36,
  "updated": 0,
  "deleted": 0,
  "ignored": 0,
  "importSummaries": ["<import summaries here>"]
}
```

Un résumé d'importation décrivant le résultat de l'échange de données sera renvoyé, y compris le nombre de valeurs de données qui ont été importées, mises à jour, supprimées et ignorées.

#### Obtenir les données sources { #get-source-data } 

Les données agrégées pour la requête source d'un échange de données agrégées peuvent être récupérées dans le format de données analytiques avec une requête GET au point d'extrémité suivant :

```
GET /api/aggregateDataExchanges/{id}/sourceData
```

```
Accept: application/json
```

##### Réponse { #response } 

```
200 OK
```

##### Paramètres de la requête { #query-parameters } 

| Paramètre de requête | Obligatoire | Description                                                  | Options                       |
| --------------- | -------- | ------------------------------------------------------------ | ----------------------------- |
| outputIdScheme (schéma d'identification de la sortie)  | Non       | Remplacer le schéma d'identification de la sortie pour la réponse aux données. | UID \| CODE \| ATTRIBUT:{ID} |

Le format de la charge utile de la réponse est identique à celui du point d'extrémité de l'API d'analyse. Ce point final est utile à des fins de débogage. Veuillez consulter le guide de l'API d'analyse pour plus de détails.

#### Obtenir les ensembles de valeurs des données sources { #get-source-data-value-sets } 

Les données agrégées pour la requête source d'un échange de données agrégées peuvent être récupérées dans le format de l'ensemble de valeurs de données avec une requête GET au point d'extrémité suivant :

```
GET /api/aggregateDataExchanges/{id}/sourceDataValueSets
```

```
Accept: application/json
```

##### Réponse { #response } 

```
200 OK
```

##### Paramètres de la requête { #query-parameters } 

| Paramètre de requête | Obligatoire | Description                                                  | Options                       |
| --------------- | -------- | ------------------------------------------------------------ | ----------------------------- |
| outputIdScheme (schéma d'identification de la sortie)  | Non       | Remplacer le schéma d'identification de la sortie pour la réponse aux données. | UID \| CODE \| ATTRIBUT:{ID} |

Le format de la charge utile de la réponse est identique à celui du point d'extrémité de l'API relatif aux ensembles de valeurs de données. Ce point d'extrémité est utile à des fins de débogage. Veuillez consulter le guide de l'API sur les ensembles de valeurs de données pour plus d'informations.

### Modèle de données  { #data-model } 

Le modèle de données d'échange de données agrégées / charge utile est décrit dans la section qui suit.

| Champ                                             | Type de données      | Obligatoire   | Description                                                  |
| ------------------------------------------------- | -------------- | ----------- | ------------------------------------------------------------ |
| nom                                              | Chaîne         | Oui         | Nom de l'échange de données agrégées. Unique.                     |
| source                                            | Objet         | Oui         | Source d'échange de données agrégées.                          |
| source.params                                     | Objet         | Non          | Parameters for source request.                               |
| source.params.periodTypes                         | Tableau/Chaîne   | Non          | Types de période autorisés pour remplacer les périodes dans la requête source. |
| source.requests                                   | Array/Object   | Oui         | Source requests.                                             |
| source.requests.name                              | Chaîne         | Oui         | Name of source request.                                      |
| source.requests.visualization                     | Chaîne         | Non          | Identifier of associated visualization object.               |
| source.requests.dx                                | Tableau/Chaîne   | Oui         | Identifiants des éléments de données, des indicateurs, des ensembles de données et des indicateurs de programme pour la requête source. |
| source.requests.pe                                | Tableau/Chaîne   | Oui         | Identifiants des périodes fixes et relatives pour la requête source. |
| source.requests.ou                                | Tableau/Chaîne   | Oui         | Identifiants des unités d'organisation pour la requête source.    |
| source.requests.filters                           | Array (Object) | Non          | Filters for the source request.                              |
| source.requests.filters.dimension                 | Chaîne         | Non          | Dimension identifier for the filter.                         |
| source.requests.filters.items                     | Tableau/Chaîne   | Non          | Item identifiers for the filter.                             |
| source.requests.inputIdScheme                     | Chaîne         | Non          | Input ID scheme, can be `UID`, `CODE`, `ATTRIBUTE:{ID}`.     |
| source.requests.outputDataElementIdScheme         | Chaîne         | Non          | Output data element ID scheme, can be `UID`, `CODE`, `ATTRIBUTE:{ID}`. |
| source.requests.outputOrgUnitIdScheme             | Chaîne         | Non          | Output org unit ID scheme, can be `UID`, `CODE`, `ATTRIBUTE:{ID}`. |
| source.requests.outputIdScheme                    | Chaîne         | Non          | Output general ID scheme, can be `UID`, `CODE`, `ATTRIBUTE:{ID}`. |
| source.target                                     | Objet         | Oui         | Target for  aggregate data exchange.                         |
| source.target.type                                | Chaîne         | Oui         | Type of target, can be `EXTERNAL`, `INTERNAL`.               |
| source.target.api                                 | Objet         | Conditionnel | Informations sur l'API cible, obligatoires uniquement pour le type `EXTERNAL`.  |
| source.target.api.url                             | Chaîne         | Conditionnel | URL de base de l'instance DHIS 2 ciblée, ne pas inclure la partie `/api`. |
| source.target.api.accessToken                     | Chaîne         | Conditionnel | Jeton d'accès (PAT) pour l'instance DHIS 2 ciblée, utilisé pour l'authentification PAT. |
| source.target.api.username                        | Chaîne         | Conditionnel | Nom d'utilisateur de l'instance DHIS 2 ciblée, utilisé pour l'authentification de base. |
| source.target.api.password                        | Chaîne         | Conditionnel | Mot de passe de l'instance DHIS 2 ciblée, utilisé pour l'authentification de base. |
| source.target.request                             | Objet         | Non          | Target request information.                                  |
| source.target.request.dataElementIdScheme         | Chaîne         | Non          | Le schéma d'identification de l'élément de données d'entrée peut être `UID`, `CODE`, `ATTRIBUTE:{ID}`. |
| source.target.request.orgUnitIdScheme             | Chaîne         | Non          | Le schéma d'identification de l'unité d'organisation d'entrée, peut être `UID`, `CODE`, `ATTRIBUTE:{ID}`. |
| source.target.request.categoryOptionComboIdScheme | Chaîne         | Non          | Le schéma d'identification de la combinaison d'options de catégorie d'entrée peut être `UID`, `CODE`, `ATTRIBUTE:{ID}`. |
| source.target.request.idScheme                    | Chaîne         | Non          | Le schéma d'identification général de l'entrée peut être `UID`, `CODE`, `ATTRIBUTE:{ID}`. |

### Gerer les erreurs { #error-handling } 

Lors de l'exécution d'un échange de données par identifiant, des informations sur le résultat de l'opération seront disponibles dans la charge utile de la réponse. La réponse contiendra une liste de résumés d'importation, c'est-à-dire un résumé d'importation par requête source. Le résumé d'importation indiquera tout conflit potentiel résultant de l'extraction des données de l'instance source et de l'importation des données dans l'instance cible.

### Exemples { #examples }

#### Échange de données externes avec le code du schéma d'identification { #external-data-exchange-with-identifier-scheme-code } 

Cet exemple montre comment échanger des données basées sur des indicateurs de programme dans l'instance source de DHIS 2 et des éléments de données dans l'instance cible. Le schéma d'identification `code` signifie que l'échange de données utilisera la propriété `code` des métadonnées pour référencer les données. L'utilisation de codes est utile lorsque les propriétés de l'identifiant ne correspondent pas d'une instance DHIS 2 à l'autre. L'exemple montre comment les données peuvent être agrégées dans l'instance source, y compris l'agrégation dans le temps et la hiérarchie des unités, avant d'être échangées avec l'instance cible.

The example will exchange data using the DHIS 2 play environment, and refer to the 2.39 version at `https://play.dhis2.org/2.39` as the *source instance*, and the 2.38 version at `https://play.dhis2.org/2.38.2.1` as the *target instance*. Note that the URLs will change over time as new patch versions are released, so make sure to update the target URLs.

* Log in to the **source** instance, navigate to the Maintenance app and observe that three program indicators exist.

  * _BCG doses_ with code `BCG_DOSE`
  * _Measles doses_ with code `MEASLES_DOSE` 
  * _Yellow fever doses_ with code `YELLOW_FEVER_DOSE`

* Observe that the root org unit is `Sierra Leone` with code `OU_525`.

* Log in to the **target** instance and navigate to the *Maintenance* app. Create three data elements, where the codes match the previously mentioned program indicators:

  * Name _BCG doses_ and code `BCG_DOSE`
  * Name _Measles doses_ and code `MEASLES_DOSE`
  * Name _Yellow fever doses_ with code `YELLOW_FEVER_DOSE`

* In the **target** instance, create a new data set with any name, e.g. _Data exchange_, select the tree newly created data elements, and assign the data set to the root org unit _Sierra Leone_.

* Observe that the root org unit `Sierra Leone` has the code `OU_525`, which is equal to the source instance.

* Open an HTTP tool such as _Postman_ and put together the following aggregate data exchange payload in JSON.
  ```
  POST /api/aggregateDataExchanges
  ```

  ```
  Content-Type: application/json
  ```

  ```json
  {
    "name": "Immunization doses program indicators to data elements",
    "source": {
      "requests": [
        {
          "name": "Immunization doses",
          "dx": [
            "BCG_DOSE",
            "MEASLES_DOSE",
            "YELLOW_FEVER_DOSE"
          ],
          "pe": [
            "202201"
          ],
          "ou": [
            "OU_525"
          ],
          "inputIdScheme": "code",
          "outputIdScheme": "code"
        }
      ]
    },
    "target": {
      "type": "EXTERNAL",
      "api": {
        "url": "https://play.dhis2.org/2.38.2.1",
        "username": "admin",
        "password": "district"
      },
      "request": {
        "idScheme": "code"
      }
    }
  }
  ```

* In this payload, observe that for the source request, program indicators are referred to using codes. The `inputIdScheme` is set to `code`, which means that the DHIS 2 analytics engine will use the `code` property to reference metadata, such as program indicators. The `outputIdScheme` is set to `code`, which means that the `code` property will be used to reference metadata in the output. For the target request, the `idScheme` is also set to `code`, which means that the `code` property will be used to reference metadata during the data value import. Note that ID schemes can be specified per entity type, such as `dataElementIdScheme` and `orgUnitIdScheme`. 

* Note that the period is `202201` or _January 2022_. Note that the period might have to be updated over time.

* Run the POST request to create the aggregate data exchange definition. Confirm that the API response status code is 201. Note that the name of the data exchange is unique. Take a note of the ID of the newly created object by looking at `response` > `uid` in the response body.

* Run the newly created data exchange with a POST request (replace `{id}` with the ID of the data exchange):
  ```
  POST /api/aggregateDataExchanges/{id}/exchange
  ```

* Confirm that the API response indicates that three data values were successfully imported. 
  ```json
  {
    "responseType": "ImportSummaries",
    "status": "SUCCESS",
    "imported": 3,
    "updated": 0,
    "deleted": 0,
    "ignored": 0
  }
  ```

* In the **target** instance, navigate to the *Data entry* app, select org unit _Sierra Leone_, data set _Data exchange_ and period _January 2022_. Observe that the exchanged data values are visible in the form.

To summarize, in this example, event data records were aggregated from the facility level to the national level in the org unit hierarchy and from event data to monthly data values using program indicators. The data values were exchanged with a target DHIS 2 instance by using the `code` property to reference metadata.

