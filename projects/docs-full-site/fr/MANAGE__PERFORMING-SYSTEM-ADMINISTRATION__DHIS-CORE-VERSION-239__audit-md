---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.39/src/sysadmin/audit.md"
revision_date: '2022-10-23'
tags:
- DHIS version 2.39
- Gestion
---

# Audit { #audit }

## Introduction { #introduction } 

DHIS2 prend en charge un nouveau service d'audit basé sur _Apache ActiveMQ Artemis_. Artemis est utilisé comme système de messagerie asynchrone par DHIS2.

Une fois qu'une entité est enregistrée dans la base de données, un message d'audit sera généré et envoyé au service utilisateur de la messagerie Artemis. Le message sera ensuite traité dans un autre fil de discussion.

Les journaux d'audit peuvent être récupérés à partir de la base de données de DHIS2. Actuellement, aucun point d'extrémité d'une interface utilisateur ou d'une API n’est disponible pour récupérer les entrées d’audit.

Vous trouverez une explication détaillée de l'architecture du système d'audit [ici](https://github.com/dhis2/wow-backend/blob/master/guides/auditing.md).

## Ce que nous enregistrons { #what_we_log }

Voici la liste des opérations que nous enregistrons dans le cadre du système d'audit :

- Opérations sur les comptes d'utilisateurs (comme, mais sans s'y limiter, la création, les modifications de profil)
- Opérations sur les rôles d'utilisateurs, les groupes et les groupes d'autorités
- Opérations sur les objets de métadonnées (par exemple, mais sans s'y limiter, les catégories, les unités d'organisation, les rapports)
- Opérations sur les objets suivis (par exemple, mais sans s'y limiter, les instances, les attributs, les valeurs de données)
- Configuration des tâches
- Opérations "Briser le verre"

## Table d'audit unique { #audit_table }

Toutes les entrées d'audit, à l'exception de celles liées aux entités suivies, seront sauvegardées dans un même tableau nommée `audit`

| Colonne     | Type                        | Description |
|------------|-----------------------------|---------------------------------------------------------------------------------------------------------------------------------------------|
| Identifiant de l'audit    | entier                     | Clé primaire. |
| type d'audit  | texte                        | LIRE, CRÉER, METTRE À JOUR, SUPPRIMER, RECHERCHER |
| champ d'application de l'audit | texte                        | MÉTADONNÉES, AGRÉGÉ, TRACKER |
| classe      | texte                        | Nom de classe Java de l’entité d’audit. |
| les attributs | jsonb                       | Une chaîne JSON avec les attributs de l'objet audité. Exemple : `{"valueType": "TEXT", "categoryCombo": "SWQW313FQY", "domainType": "TRACKER"}`. |
| données       | bytea                       | Chaîne JSON compressée de l'entité d'audit au format "tableau d'octets" (non lisible par l'homme). |
| créé à  | horodatage sans fuseau horaire | Temps de création. |
| créé par  | texte                        | Nom d'utilisateur de l'utilisateur effectuant l'opération auditée. |
| uid        | texte                        | L'UID de l'objet audité. |
| code       | texte                        | Le code de l'objet audité. |

Le service d'audit utilise deux nouveaux concepts : *Champ d'application de l'audit* et *Type d'audit*.

## Champ d'application de l'audit { #audit_scope }

Un champ d'application d'audit est une zone logique de l'application qui peut être auditée. Il existe actuellement trois champs d'application d'audit.

| **Portée** | Clé       | Objets audités                                              |
| --------- | --------- | ------------------------------------------------------------ |
| Tracker   | tracker   | Instance d'entité suivie, Valeur d'attribut d'entité suivie, inscription, Événement. |
| Métadonnées  | métadonnées  | Tous les objets de métadonnées (par exemple, les éléments de données, les unités d'organisation). |
| Agrégat | agrégation | Valeur de données agrégée.                                        |


## Type d'audit { #audit_type }

Un type d'audit est une action qui déclenche une opération d'audit. Actuellement, nous prenons en charge les quatre types suivants.

| Nom     | Clé      | Description         |
| -------- | -------- | ------------------- |
| Lire     | LIRE     | L'objet a été lu.    |
| Créer   | CRÉER   | L'objet a été créé. |
| Mise à jour   | METTRE À JOUR   | L'objet a été mis à jour. |
| Supprimer   | SUPPRIMER   | L'objet a été supprimé. |
| Désactivé | DÉSACTIVÉ | Désactiver l'audit.      |

> **Attention**
>
> Le type d'audit LIRE peut générer beaucoup de données dans la base de données et avoir un impact sur les performances.


## Audits d'entités suivies { #tracked-entity-audits }

Les opérations sur les entités suivies telles que les instances, les attributs et les valeurs, sont stockées respectivement dans les tableaux `trackedentityinstanceaudit` (audit d'instance d'entité suivie), `trackedentityattributevalueaudit` (audit de valeur d'attribut d'entité suivie), et `trackedentitydatavalueaudit` (audit de valeur de données d'entité suivie).

### audit d'instance d'entité suivie { #trackedentityinstanceaudit }

| Colonne     | Type                        | Description |
|------------|-----------------------------|-------------|
| trackedentityinstanceauditid | entier | Clé primaire. |
| trackedentityinstance | texte  | Nom de l'instance d'entité suivie.  |
| créé  | horodatage sans fuseau horaire | Temps de création. |
| accessible par | texte | Nom d'utilisateur de l'utilisateur effectuant l'opération auditée. |
| type d'audit | texte | LIRE, CRÉER, METTRE À JOUR, SUPPRIMER, RECHERCHER |
| commentaire | texte | Le code de l'objet audité. |

Ces données peuvent être récupérées via [API](#webapi_tracked_entity_instance_audits).

### trackedentityattributevalueaudit { #trackedentityattributevalueaudit } 

| Colonne     | Type                        | Description |
|------------|-----------------------------|-------------|
| trackedentityattributevalueauditid | entier | Clé primaire. |
| trackedentityinstanceid | entier | ID de l'instance à laquelle appartient la valeur d'attribut.  |
| trackedentityattributeid (ID d'attribut d'entité suivi) | entier | ID d'attribut.  |
| créé  | horodatage sans fuseau horaire | Temps de création. |
| modifié par  | texte | Nom d'utilisateur de l'utilisateur effectuant l'opération auditée. |
| type d'audit | texte  | LIRE, CRÉER, METTRE À JOUR, SUPPRIMER, RECHERCHER |
| valeur | texte | La valeur de l'objet audité. |
| valeur cryptée | texte | La valeur cryptée si l'indicateur de confidentialité est activé. |


Ces données peuvent être récupérées via [API](#webapi_tracked_entity_attribute_value_audits).

### trackedentitydatavalueaudit { #trackedentitydatavalueaudit } 

| Colonne     | Type                        | Description |
|------------|-----------------------------|-------------|
| trackedentitydatavalueauditid | entier | Clé primaire. |
| ID d'instance de l'étape de programme | entier | ID de l'étape de programme à laquelle appartient la valeur des données.  |
| Id d'élément de données | entier | ID de l'élément de données.  |
| créé | horodatage sans fuseau horaire | Temps de création. |
| modifié par | texte | Nom d'utilisateur de l'utilisateur effectuant l'opération auditée. |
| type d'audit | texte | LIRE, CRÉER, METTRE À JOUR, SUPPRIMER, RECHERCHER |
| valeur | texte | La valeur de l'objet audité. |
| fourni ailleurs | bool | Indique si l'utilisateur a fourni la valeur ailleurs ou non. |

Ces données peuvent être récupérées via [API](#webapi_tracked_entity_data_value_audits).

## Briser le verre { #breaking-the-glass } 
Les fonctionnalités "Briser le verre" permettent d'accéder aux enregistrements auxquels un utilisateur de DHIS2 n'a pas accès dans des circonstances particulières. En conséquence, les utilisateurs doivent fournir par écrit une raison pour justifier leur accès à ces enregistrements.

Vous trouverez une vidéo explicative sur notre chaîne Youtube [ici](https://www.youtube.com/watch?v=rTwg5Ix_E_M).

L'événement "briser le verre" est stocké dans le tableau `programtempownershipaudit`, présenté ci-dessous :

| Colonne     | Type  | Description |
|------------|-------|-------------|
| programtempownershipauditid | entier | Clé primaire. |
| Id du programme | entier | ID du programme auquel appartient l’entité suivie.  |
| trackedentityinstanceid | entier | ID de l'instance à laquelle appartient la valeur d'attribut.  |
| créé  | horodatage sans fuseau horaire | Temps de création. |
| accessible par  | texte | Nom d'utilisateur de l'utilisateur effectuant l'opération auditée. |
| raison       | texte | La raison telle qu'insérée dans la boîte de dialogue. |


## Configuration { #audit_configuration }

Le système d'audit est activé par défaut pour les portées et types suivants.

Scopes (case sensitive):

- `CRÉER`
- `METTRE À JOUR`
- `SUPPRIMER`

Les types:

- `MÉTADONNÉES`
- `TRACKER`
- `AGRÉGÉ`

Cela signifie qu'**aucune action n'est requise** pour activer le système d'audit par défaut. Le paramètre par défaut équivaut à la configuration `dhis.conf` suivante.

```propriétés
audit.metadata = CRÉER; METTRE À JOUR; SUPPRIMER
audit.tracker = CRÉER; METTRE À JOUR; SUPPRIMER
audit.aggregate = CRÉER; METTRE À JOUR; SUPPRIMER
```

L'audit peut être configuré à l'aide du _référentiel d'audit_. Le référentiel d'audit représente les combinaisons valides de portées et de types, et est défini avec les propriétés suivantes dans le fichier de configuration `dhis.conf`. Chaque propriété accepte une liste de types d'audit délimitée par un point-virgule (`;`).

* `audit.metadata`
* `audit.tracker`
* `audit.aggregate`

### Artemis { #artemis } 
[Apache ActiveMQ Artemis] (https://activemq.apache.org/components/artemis/documentation/) est un projet open source qui vise à développer un système de messagerie asynchrone multi-protocoles, intégrable, très performant et en grappe. Il figure dans DHIS2 depuis la version 2.31 et est utilisé comme système de consommation des journaux d'audit.

Par défaut, DHIS2 démarrera un serveur Artemis intégré, qui est utilisé en interne par l'application pour stocker et accéder aux événements d'audit.

Cependant, si vous disposez déjà d'un serveur Artemis, vous pouvez vous y connecter depuis DHIS2 pour envoyer des événements d'audit, tel que décrit dans notre [documentation officielle](#webapi_amqp_configuration) : dans cette configuration, les événements d'audit circuleront de DHIS2 vers le système Artemis externe.

### log4j2 { #log4j2 } 
[log4j2](https://logging.apache.org/log4j/2.x/index.html) est la bibliothèque de journalisation de DHIS2 par défaut, utilisée pour gérer les messages de sorties. Elle est utilisée pour contrôler quels événements sont enregistrés dans quel fichier.

L'application fournit un [fichier de configuration par défaut de log4j2] (https://github.com/dhis2/dhis2-core/blob/master/dhis-2/dhis-web/dhis-web-commons-resources/src/main/webapp/WEB-INF/classes/log4j2.xml), qui indique quelles informations doivent être enregistrées et où (console). DHIS2 se charge ensuite d'importer ce fichier et de journaliser les instructions, tel que décrit dans la [classe de configuration log4j](https://github.com/dhis2/dhis2-core/blob/2.38/dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/log/Log4JLogConfigInitializer.java), c'est-à-dire qu'il redirige la sortie de la console vers les fichiers.

De la version 2.36 à la version 2.38, le fichier de journalisation d'audit `dhis-audit.log` fait l'objet d'une rotation [tous les jours à minuit](https://github.com/dhis2/dhis2-core/blob/2.38/dhis-2/dhis-support/ dhis-support-system/src/main/java/org/hisp/dhis/system/log/Log4JLogConfigInitializer.java#L171).

Vous trouverez un exemple de configuration personnalisée de log4j2 [ici]() : l'exemple montre comment configurer DHIS2 pour qu'il enregistre tous les journaux dans un dispositif de stockage externe, effectue une rotation hebdomadaire et les conserve pendant 30 jours. Veuillez lire la [section sur la journalisation des applications](#install_application_logging) pour savoir comment utiliser cette fonction.

## Exemples { #examples }

Cette section montre comment configurer le système d'audit dans `dhis.conf`.

Pour activer l'audit de création et de mise à jour des métadonnées et du tracker uniquement :

```properties
audit.metadata = CREATE;UPDATE
audit.tracker = CREATE;UPDATE
audit.aggregate = DISABLED
```

Pour auditer uniquement les objets liés au tracker "créer" et "supprimer" :

```properties
audit.metadata = DISABLED
audit.tracker = CREATE;DELETE
audit.aggregate = DISABLED
```

Pour désactiver complètement l'audit pour toutes les portées :
```properties
audit.metadata = DISABLED
audit.tracker = DISABLED
audit.aggregate = DISABLED
```

Nous recommandons de conserver les pistes d'audit dans un fichier, comme c'est le cas par défaut dans la version 2.38. Pour les versions plus anciennes, la configuration suivante enregistre les journaux d'audit dans le fichier `$DHIS2_HOME/logs/dhis-audit.log` :
```properties
audit.database = off
audit.logger = on
```

Pour stocker les données d'audit dans la base de données, ajoutez ce qui suit à votre fichier `dhis.conf` (par défaut jusqu'à la version 2.38) :
```properties
audit.database = on
audit.logger = off
```

Pour extraire les journaux du tableau `audit`, vous pouvez utiliser [`dhis2-audit-data-extractor`](https://github.com/dhis2/dhis2-utils/tree/master/tools/dhis2-audit-data -extracteur) à partir du système sur lequel DHIS2 est exécuté :
```
$ python extract_audit.py extract
```

Veuillez lire la documentation pour plus de détails.

Pour analyser les entrées du fichier journal, vous pouvez utiliser le script python comme suit :
```
$ grep "auditType" dhis-audit.log | python extract_audit.py parse
```

Ou utilisez `jq` comme suit :

```
$ grep "auditType" dhis-audit.log | jq -r .
```

Pour sélectionner des événements à une date spécifique, vous pouvez utiliser `jq` comme suit (dans cet exemple, nous sélectionnons tous les événements survenus entre janvier 2022 et fin juin 2022) :

```
$ grep "auditType" dhis-audit.log | jq -r '.[] | select ( (.datetime >="2022-01-01") and (.datetime <= "2022-06-30") )'
```

Idem avec `extract_audit` :
```
$ python3 extract_audit.py extract -m stdout -f JSON | jq -r '.[] | select ( (.datetime >="2022-01-01") and (.datetime <= "2022-06-30") )'
```

