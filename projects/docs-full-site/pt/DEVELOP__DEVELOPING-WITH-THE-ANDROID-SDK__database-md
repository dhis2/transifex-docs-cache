---
edit_url: "https://github.com/dhis2/dhis2-android-sdk/blob/master/docs/content/developer/database.md"
revision_date: '2024-05-09'
tags:
- Desenvolver
---

# Banco de Dados { #android_sdk_database }

## Database scope { #android_sdk_database_scope }
O SDK mantém um par de [servidor, utilizador] numa base de dados isolada. Assim como na versão 1.6.0, o SDK suporta múltiplas contas(pares de [servidor, utilizador]) e  informação de cada conta é armazenada numa base de dados isolada. A base de dados apenas é eliminada quando elimina-se a conta.. As base de dados são criadas automaticamente quando um login é feito com sucesso.

## Encryption { #android_sdk_database_encryption }
A partir da versão 1.1.0, do SDK, é possível armazenar os dados em um banco de dados criptografado. A chave de criptografia é gerada aleatoriamente
pelo SDK e mantido em segurança.

O status de criptografia (se o banco de dados está criptografado ou não) pode ser configurado no nível do servidor no android-settings-app.
O status padrão é falso: se o aplicativo não estiver instalado, o banco de dados não será criptografado.

Durante o primeiro login para um determinado servidor e usuário, o status da criptografia será baixado da API e um
banco de dados do tipo fornecido será criado.

Em logins posteriores ou sincronizações de metadados, o SDK baixará novamente o status de criptografia do servidor e,
se alterado, criptografará ou descriptografará o banco de dados atual sem perda de dados.

### Desempenho de criptografia { #encryption-performance } 
- Tamanho do banco de dados: o tamanho do banco de dados é aproximadamente o mesmo, independentemente de ser criptografado ou não.
- Velocidade: leituras e gravações são em média 5 a 10% mais lentas usando um banco de dados criptografado.

## Import / export { #android_sdk_database_import_export }
The database can be exported and imported in a different device. 

One of the main use cases of this functionality is debugging: sometimes it is hard to know the reason for a sync problem or a bug, and it is very useful to replicate the issue in an emulator or a different device.  

```kt
// Export database
val database = d2.maintenanceModule().databaseImportExport().exportLoggedUserDatabase()

// Import database
val metadata = d2.maintenanceModule().databaseImportExport().importDatabase(database)

// The metadata object contains information about the database (serverUrl, username,...) 

// Once the database is imported, it is possible to login as usual
d2.userModule().login("username", "password", "serverUrl")
```

The export process encrypts the database using ZIP encryption, so the database file can't be read unless the right user credentials are provided. 

Things to consider:
- The exported file only contains the database, it does not contain file resources (images, icons, files,...).
- The receiver device must run an **SDK version that is equal or higher** than the SDK version used to export the database.

