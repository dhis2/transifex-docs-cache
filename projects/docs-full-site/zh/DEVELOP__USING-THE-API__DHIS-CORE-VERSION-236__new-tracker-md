---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.36/src/developer/web-api/new-tracker.md"
revision_date: "2021-06-25"
tags:
    - Develop
    - DHIS 核心版本 2.36
---

# 新跟踪器 { #new-tracker }

DHIS2 版本 2.36 引入了一组新的跟踪器端点，专用于导入和查询跟踪器对象（包括跟踪的实体、注册、事件和关系）。这些新的端点与早期的实现形成了不连续性。重新设计端点使开发人员能够改进、重新设计和规范 API 的行为，以改进 Tracker 服务。

新引入的端点包括：

-   `POST /api/tracker`
-   `GET /api/tracker/enrollments`
-   `GET /api/tracker/events`
-   `GET /api/tracker/trackedEntities`
-   `GET /api/tracker/relationships`

> **注意**
>
> - 旧的端点已被标记为过时，但仍能正常工作。
> - 新端点的某些功能尚未就绪，但它们支持主要用例。
> - 这些端点目前只支持 `JSON` 格式作为输入/输出。
> - 未来还将支持 `CSV` 格式。

## API 中的更改{ #changes-in-the-api }

API 中使用的属性名称已更改为在所有新端点上使用一致的命名。

### 跟踪器导入变更日志 (`POST`) { #tracker-import-changelog-post }

下表重点介绍了以前的跟踪器导入端点（/api/trackedEntityInstance、/api/enrollments、/api/events 和 /api/relatiosnhips）与新端点 (/api/tracker) 之间的差异。所有端点当前仍然可用。

| 追踪器对象 | Previously | Now |
| --- | --- | --- |
| **属性** | `created`<br>`lastUpdated` | `createdAt`<br>`updatedAt` |
| **数据值** | `created`<br>`lastUpdated` | `createdAt`<br>`updatedAt` |
| **注册** | `created`<br>`createdAtClient`<br>`lastUpdated`<br>`lastUpdatedAtClient`<br>`trackedEntityInstance`<br>`enrollmentDate`<br>`incidentDate`<br>`completedDate` | `createdAt`<br>`createdAtClient`<br>`updatedAt`<br>`updatedAtClient`<br>`trackedEntity`<br>`enrolledAt`<br>`occurredAt`<br>`completedAt` |
| **事件** | `trackedEntityInstance`<br>`eventDate`<br>`dueDate`<br>`created`<br>`createdAtClient`<br>`lastUpdated`<br>`lastUpdatedAtClient`<br>`completedDate` | `trackedEntity`<br>`occurredAt`<br>`scheduledAt`<br>`createdAt`<br>`createdAtClient`<br>`updatedAt`<br>`updatedAtClient`<br>`completedAt` |
| **笔记** | `storedDate`<br>`lastUpdated` | `storedAt`<br>`updatedAt` |
| **ProgramOwner** | `ownerOrgUnit`<br>`trackedEntityInstance` | `orgUnit`<br>`trackedEntity` |
| **RelationshipItem** | `trackedEntityInstance.trackedEntityInstance`<br>`enrollment.enrollment`<br>`event.event` | `trackedEntity`<br>`enrollment`<br>`event` |
| **Relationship** | `created`<br>`lastUpdated` | `createdAt`<br>`updatedAt` |
| **TrackedEntity** | `trackedEntityInstance`<br>`created`<br>`createdAtClient`<br>`lastUpdated`<br>`lastUpdatedAtClient` | `trackedEntity`<br>`createdAt`<br>`createdAtClient`<br>`updatedAt`<br>`updatedAtClient` |

### Tracker Export changelog (`GET`) { #tracker-export-changelog-get }

The `GET` endpoints all conform to the same naming conventions reported in the previous paragraph. Additionally, we made some changes regarding the request parameters to respect the same naming conventions here as well.

这些表格强调了旧端点与新端点在 `GET` 端点的请求参数方面的差异。

#### Request parameter changes for `GET /api/tracker/enrollments` { #request-parameter-changes-for-get-apitrackerenrollments }

| Previously                             | Now                                 |
| -------------------------------------- | ----------------------------------- |
| `ou`                                   | `orgUnit`                           |
| `lastUpdated`<br>`lastUpdateDuration`  | `updatedAfter`<br>`updatedWithin`   |
| `programStartDate`<br>`programEndDate` | `enrolledAfter`<br>`enrolledBefore` |
| `trackedEntityInstance`                | `trackedEntity`                     |

#### Request parameter changes for `GET /api/tracker/events` { #request-parameter-changes-for-get-apitrackerevents }

| Previously | Now |
| --- | --- |
| `trackedEntityInstance` | `trackedEntity` |
| `startDate`<br>`endDate` | `occurredAfter`<br>`occurredBefore` |
| `dueDateStart`<br>`dueDateEnd` | `scheduledAfter`<br>`scheduledBefore` |
| `lastUpdated` | Removed - obsolete, see: <br><ul><li>`updatedAfter`</li><li>`updatedBefore`</li></ul> |
| `lastUpdatedStartDate`<br>`lastUpdateEndDate`<br>`lastUpdateDuration` | `updatedAfter`<br>`updatedBefore`<br>`updatedWithin` |

#### Request parameter changes for `GET /api/tracker/trackedEntities` { #request-parameter-changes-for-get-apitrackertrackedentities }

| Previously | Now |
| --- | --- |
| `trackedEntityInstance` | `trackedEntity` |
| `ou` | `orgUnit` |
| `programStartDate`<br>`programEndDate` | Removed - obsolete, see <br><ul><li>`enrollmentEnrolledAfter`</li><li>`enrollmentEnrolledBefore`</li></ul> |
| `programEnrollmentStartDate`<br>`programEnrollmentEndDate` | `enrollmentEnrolledAfter`<br>`enrollmentEnrolledBefore` |
| `programIncidentStartDate`<br>`programIncidentEndDate` | `enrollmentOccurredAfter`<br>`enrollmentOccurredBefore` |
| `eventStartDate`<br>`eventEndDate` | `eventOccurredAfter`<br>`eventOccurredBefore` |
| `lastUpdatedStartDate`<br>`lastUpdateEndDate`<br>`lastUpdateDuration` | `updatedAfter`<br>`updatedBefore`<br>`updatedWithin` |

## 跟踪器对象 { #webapi_nti_tracker_objects }

跟踪器由几种不同类型的对象组成，这些对象嵌套在一起以表示数据。在本节中，我们将展示并描述 Tracker API 中使用的每个对象。

### 跟踪实体{ #tracked-entity }

`跟踪实体`是跟踪器模型的根对象。

| 财产 | 描述 | 需要 | 可更新 | 类型 | 例 |
| --- | --- | --- | --- | --- | --- |
| 跟踪实体 | 被跟踪实体的标识符。如果未提供则生成 | 不 | 是的 | String:Uid | ABCDEF12345 |
| trackedEntityType | 跟踪实体的类型。 | 是的 | 不 | String:Uid | ABCDEF12345 |
| createdAt | 用户创建跟踪实体时的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| createdAtClient | 用户在客户端上创建跟踪实体时的时间戳。 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 上次更新对象的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAtClient | 对象上次在客户端更新的时间戳。 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| orgUnit | 用户创建跟踪实体的组织部门。 | 是的 | 不 | String:Uid | ABCDEF12345 |
| inactive | 指示跟踪的实体是否处于非活动状态。 | 不 | 不 | Boolean | Default: False, True |
| deleted | 指示跟踪的实体是否已被删除。只有删除时才能改变。 | 不 | 是的 | Boolean | 错误直到被删除 |
| geometry | 被跟踪实体的地理表示。基于 TrackedEntityType 的“featureType”。 | 不 | 不 | GeoJson | {<br>"type": "POINT",<br>"coordinates": [123.0, 123.0]<br>} |
| 存储者 | 存储/创建被跟踪实体的客户参考。 | 不 | 不 | 字符串：任意 | 约翰·多伊 |
| 属性 | 被跟踪实体拥有的被跟踪实体属性值的列表。 | 不 | 不 | TrackedEntityAttributeValue 列表 | 查看属性 |
| 入学人数 | 被跟踪实体拥有的注册列表。 | 不 | 不 | 招生名单 | 查看报名 |
| 关系 | 连接到被跟踪实体的关系列表。 | 不 | 不 | 关系列表 | 查看关系 |
| 程序所有者 | 可以通过特定程序访问此跟踪实体的组织单位列表。有关详细信息，请参阅“程序所有权”。 | 不 | 不 | 程序所有者列表 | 请参阅“程序所有权”部分 |

> **注意**
>
> `被跟踪实体`"拥有"所有`被跟踪实体属性值`（或上表中所述的"属性"）。然而，`被跟踪实体属性`要么通过`被跟踪实体类型`或`程序`连接到`被跟踪实体`。我们经常将这种分离称为`跟踪实体类型属性`和`跟踪实体程序属性`。这种分离的重要性与访问控制和限制用户可以看到的信息有关。
>
> `被跟踪实体`中提到的"属性"是`被跟踪实体类型属性`。

### 注册 { #enrollment }

`被跟踪实体`可以注册其符合资格的`项目`。只要程序配置了与被跟踪实体相同的`被跟踪实体类型`，被跟踪实体就符合资格。我们用`Enrollment`对象来表示注册，我们将在本节中对此进行描述。

| 财产 | 描述 | 需要 | 不可变的 | 类型 | 例 |
| --- | --- | --- | --- | --- | --- |
| 注册 | 注册的标识符。如果未提供则生成 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 程序 | 注册代表的计划。 | 是的 | 不 | String:Uid | ABCDEF12345 |
| 跟踪实体 | 对注册的跟踪实体的引用。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| trackedEntityType | 仅用于读取数据。注册的跟踪实体的类型 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 地位 | 注册状态。如果未提供，则处于活动状态。 | 不 | 不 | 枚举 | 有效、已完成、已取消 |
| orgUnit | 用户注册跟踪实体的组织部门。 | 是的 | 不 | String:Uid | ABCDEF12345 |
| 组织单位名称 | 仅用于读取数据。进行注册的组织单位的名称。 | 不 | 不 | 字符串：任意 | 塞拉利昂 |
| createdAt | 用户创建对象时的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| createdAtClient | 用户在客户端创建对象时的时间戳 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 上次更新对象的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAtClient | 对象上次在客户端更新的时间戳 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 注册于 | 用户注册跟踪实体时的时间戳。 | 是的 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 发生于 | 注册发生时的时间戳。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 完成时间 | 用户完成注册时的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 完成者 | 参考谁完成了注册 | 不 | 不 | 约翰·多伊 |
| 跟进 | 指示注册是否需要跟进。如果未提供则为假 | 不 | 不 | Boolean | Default: False, True |
| deleted | 指示注册是否已被删除。只有删除时才能改变。 | 不 | 是的 | Boolean | 错误直到被删除 |
| geometry | 招生的地理代表性。基于程序的“featureType” | 不 | 不 | GeoJson | {<br>"type": "POINT",<br>"coordinates": [123.0, 123.0]<br>} |
| 存储者 | 存储/创建注册的客户参考。 | 不 | 不 | 字符串：任意 | 约翰·多伊 |
| 属性 | 与注册相关的跟踪实体属性值的列表。 | 不 | 不 | TrackedEntityAttributeValue 列表 | 查看属性 |
| 事件 | 注册拥有的事件列表。 | 不 | 不 | 活动一览 | 查看活动 |
| 关系 | 与注册相关的关系列表。 | 不 | 不 | 关系列表 | 查看关系 |
| 笔记 | 与注册相关的注释。它只能被创建。 | 不 | 是的 | 注意事项清单 | 看注释 |

> **Note**
>
> `Tracked Entities` "owns" all `Tracked Entity Attribute Values` (Or "attributes" as described in the previous table). However, `Tracked Entity Attributes` are either connected to a `Tracked Entity` through its `Tracked Entity Type` or a `Program`. We often refer to this separation as `Tracked Entity Type Attributes` and `Tracked Entity Program Attributes`. The importance of this separation is related to access control and limiting what information the user can see.
>
> The "attributes" referred to in the `Enrollment` are `Tracked Entity Program Attributes`.

### 大事记 { #events }

`Events` are either part of an `EVENT PROGRAM` or `TRACKER PROGRAM`. For `TRACKER PROGRAM`, events belong to an `Enrollment`, which again belongs to a `Tracked Entity`. On the other hand, `EVENT PROGRAM` is `Events` not connected to a specific `Enrollment` or `Tracked Entity`. The difference is related to whether we track a specific `Tracked Entity` or not. We sometimes refer to `EVENT PROGRAM` events as "anonymous events" or "single events" since they only represent themselves and not another `Tracked Entity`.

In the API, the significant difference is that all events are either connected to the same enrollment (`EVENT PROGRAM`) or different enrollments (`TRACKER PROGRAM`). The table below will point out any exceptional cases between these two.

| 财产 | 描述 | 需要 | 不可变的 | 类型 | 例 |
| --- | --- | --- | --- | --- | --- |
| 事件 | 事件的标识符。如果未提供则生成 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 节目阶段 | 事件代表的节目阶段。 | 是的 | 不 | String:Uid | ABCDEF12345 |
| 注册 | 对拥有该活动的注册的引用。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| 程序 | 仅用于读取数据。拥有该活动的注册所拥有的计划类型。 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 跟踪实体 | 仅用于读取数据。拥有事件的被跟踪实体。**_不适用于 `EVENT PROGRAM`_** | 不 | 不 | String:Uid | ABCDEF12345 |
| 地位 | 事件的状态。如果未提供，则处于活动状态。 | 不 | 不 | 枚举 | 活动、已完成、已访问、已安排、逾期、已跳过 |
| 入学状态 | 仅用于读取数据。拥有事件的注册状态。**_不适用于 `EVENT PROGRAM`_** | 不 | 不 | 枚举 | 有效、已完成、已取消 |
| orgUnit | 用户注册事件的组织单位。 | 是的 | 不 | String:Uid | ABCDEF12345 |
| 组织单位名称 | 仅用于读取数据。用户注册事件的组织单位的名称。 | 不 | 不 | 字符串：任意 | 塞拉利昂 |
| createdAt | 用户创建事件的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| createdAtClient | 用户在客户端创建事件的时间戳 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 事件上次更新的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAtClient | 事件上次在客户端更新的时间戳 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 预定时间 | 安排活动的时间戳。 | 是的 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 发生于 | 发生某事时的时间戳。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 完成时间 | 用户完成事件时的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 完成者 | 参考谁完成了事件 | 不 | 不 | 字符串：任意 | 约翰·多伊 |
| 跟进 | 指示事件是否已标记为后续操作。如果未提供则为假 | 不 | 不 | Boolean | Default: False, True |
| deleted | 指示事件是否已被删除。只有删除时才能改变。 | 不 | 是的 | Boolean | 错误直到被删除 |
| geometry | 事件的地理代表。基于节目阶段的“featureType” | 不 | 不 | GeoJson | {<br>"type": "POINT",<br>"coordinates": [123.0, 123.0]<br>} |
| 存储者 | 存储/创建事件的客户参考。 | 不 | 不 | 字符串：任意 | 约翰·多伊 |
| 属性选项组合 | 事件的属性选项组合。如果未提供或配置，则为默认值。 | 不 | 不 | String:Uid | ABCDEF12345 |
| 属性类别选项 | 事件的属性类别选项。如果未提供或配置，则为默认值。 | 不 | 不 | String:Uid | ABCDEF12345 |
| 分配的用户 | 对已分配给事件的用户的引用。 | 不 | 不 | String:Uid | ABCDEF12345 |
| 数据值 | 与事件相关的数据值列表。 | 不 | 不 | TrackedEntityAttributeValue 列表 | 查看属性 |
| 关系 | 与事件相关的关系列表。 | 不 | 不 | 关系列表 | 查看关系 |
| 笔记 | 与事件相关的注释。它只能被创建。 | 不 | 是的 | 注意事项清单 | 看注释 |

### 关系{ #relationship }

`Relationships` are objects that link together two other tracker objects. The constraints each side of the relationship must conform to are based on the `Relationship Type` of the `Relationship`.

| 财产 | 描述 | 需要 | 不可变的 | 类型 | 例 |
| --- | --- | --- | --- | --- | --- |
| 关系 | 关系的标识符。如果未提供则生成。 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 关系类型 | 关系的类型。决定哪些对象可以在关系中链接。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| 关系名称 | 仅用于读取数据。该关系的关系类型的名称 | 不 | 不 | 字符串：任意 | 兄弟 |
| createdAt | 用户创建关系时的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 上次更新关系的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 双向 | 仅用于读取数据。指示关系类型是否是双向的。 | 不 | 不 | Boolean | 对或错 |
| 从到 | 对关系每一方的引用。必须符合关系类型中设置的约束 | 是的 | 是的 | 关系项目 | {"trackedEntity": "ABCEF12345"}, {"enrollment": "ABCDEF12345"} or {"event": "ABCDEF12345"} |

> **Note**
>
> `Relationship item` represents a link to an object. Since a `relationship` can be between any tracker object like `tracked entity`, `enrollment`, and `event`, the value depends on the `relationship type`. For example, if the `relationship type` connects from an `event` to a `tracked entity`, the format is strict:
>
> ```json
> {
>     "from": {
>         "event": "ABCDEF12345"
>     },
>     "to": {
>         "trackedEntity": "FEDCBA12345"
>     }
> }
> ```

### 属性 { #attribute }

`Attributes` are the actual values describing the `tracked entities`. They can either be connected through a `tracked entity type` or a `program`. Implicitly this means `attributes` can be part of both a `tracked entity` and an `enrollment`.

| 财产 | 描述 | 需要 | 不可变的 | 类型 | 例 |
| --- | --- | --- | --- | --- | --- |
| 属性 | 对所表示的跟踪实体属性的引用。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| 码 | 仅用于读取数据。被跟踪实体属性的代码。 | 不 | 不 | 字符串：任意 | ABC |
| 显示名称 | 仅用于读取数据。跟踪实体属性的显示名称。 | 不 | 不 | 字符串：任意 | 名称 |
| createdAt | 添加值时的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 上次更新值的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 存储者 | 存储/创造价值的客户参考。 | 不 | 不 | 字符串：任意 | 约翰·多伊 |
| 值类型 | 仅用于读取数据。属性表示的值的类型。 | 不 | 不 | 枚举 | 文本、整数等 |
| 价值 | 被跟踪实体属性的值。 | 不 | 不 | 字符串：任意 | 约翰·多伊 |

> **Note**
>
> For `attributes` only the "attribute" and "value" properties are required when adding data. "value" can be null, which implies the user should remove the value.
>
> In the context of tracker objects, we refer to `Tracked Entity Attributes` and `Tracked Entity Attribute Values` as "attributes". However, attributes are also their own thing, related to metadata. Therefore it's vital to separate Tracker attributes and metadata attributes. In the tracker API, it is possible to reference the metadata attributes when specifying `idScheme` (See request parameters for more information).

### 数据值{ #data-values }

While `Attributes` describes a `tracked entity` or an `enrollment`, `data values` describes an `event`. The major difference is that `attributes` can only have a single value for a given `tracked entity`. In contrast, `data values` can have many different values across different `events` - even if the `events` all belong to the same `enrollment` or `tracked entity`.

| 财产 | 描述 | 需要 | 不可变的 | 类型 | 例 |
| --- | --- | --- | --- | --- | --- |
| 数据元素 | 该值表示的数据元素。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| 价值 | 数据值的值。 | 不 | 不 | 字符串：任意 | 123 |
| 在别处提供 | 指示用户是否在其他地方提供了该值。如果未提供则为假。 | 不 | 不 | Boolean | 是真是假 |
| createdAt | 用户添加值时的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 上次更新值的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 存储者 | 存储/创造价值的客户参考。 | 不 | 不 | 字符串：任意 | 约翰·多伊 |

> **Note**
>
> For `data elements` only the "dataElement" and "value" properties are required when adding data. "value" can be null, which implies the user should remove the value.

### 跟踪器备注 { #tracker-notes }

DHIS2 跟踪器允许使用数据元素和跟踪实体属性捕获数据。然而，有时可能存在需要记录有关当前问题的附加信息或评论的情况。可以使用跟踪器注释捕获此类附加信息。跟踪器注释相当于聚合 DHIS2 端的数据值注释。

有两种类型的跟踪器注释 - 在事件级别记录的注释和在注册级别记录的注释。一次注册可以包含一个或多个事件。关于每个事件的评论 - 例如，为什么事件被错过、重新安排，或者为什么只填充了几个数据元素等等 - 可以使用事件注释来记录。注册中的每个事件都可以有自己的故事/注释。然后，例如，可以使用家长注册记录记录对这些事件的总体观察。注册注释也有助于记录，例如，注册被取消的原因。这是用户的想象力和用例何时以及如何使用笔记。

注册和活动都可以根据需要添加任意数量的注释 - 没有限制。但是，无法删除或更新这些注释。它们就像一本日志。如果想要修改注释，可以通过创建另一注释来实现。删除注释的唯一方法是删除父对象 - 事件或注册。

跟踪笔记没有专用端点；它们作为父事件和/或注册有效负载的一部分进行交换。下面是一个示例有效负载。

```json
{
  "trackedEntityInstance": "oi3PMIGYJH8",
  <entity_details>,
  ],
  "enrollments": [
    {
      "enrollment": "EbRsJr8LSSO",
      <enrollment_details>
      "notes": [
        {
          "note": "vxmCvYcPdaW",
          "value": "Enrollment note 2.",
        },
        {
          "value": "Enrollment note 1",
        }
      ],

      "events": [
        {
          "event": "zfzS9WeO0uM",
          <event_details>,
          "notes": [
            {
              "note": "MAQFb7fAggS",
              "value": "Event Note 1.",
            },
            {
              "value": "Event Note 2.",
            }
          ],
        },
        {
          ...
        }
      ]
    }
  ]
}
```

| 财产 | 描述 | 需要 | 不可变的 | 类型 | 例 |
| --- | --- | --- | --- | --- | --- |
| 笔记 | 注释的参考。如果为空则生成 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 价值 | 注释的内容。 | 是的 | 是的 | 字符串：任意 | 这是一个注释 |
| 存储于 | 用户添加注释时的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 笔记上次更新的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 存储者 | 存储/创建注释的客户参考。 | 不 | 不 | 字符串：任意 | 约翰·多伊 |

## Tracker Import (`POST /api/tracker`) { #webapi_nti_import }

The `POST /api/tracker` endpoint allows clients to import the following tracker objects into DHIS2:

-   **跟踪的实体**
-   **报名人数**
-   **活动**
-   **关系**
-   嵌入其他[跟踪器对象](#webapi_nti_tracker_objects)中的数据

与跟踪器导入的其他端点相比，主要变化是：

1. 导入负载可以是 **_nested_** 或 **_flat_**
2. 调用可以是 **_synchronous_** 或 **_asynchronous_**

### 请求参数{ #request-parameters }

目前，Tracker导入端点支持以下参数：

| 参数名称 | 描述 | 类型 | 允许值 |
| --- | --- | --- | --- |
| 异步 | 指示导入应该异步还是同步进行。 | Boolean | `TRUE`, `FALSE` |
| 报告模式 | 仅在执行同步导入时。有关详细信息，请参阅 importSummary。 | 枚举 | `FULL`, `ERRORS`, `WARNINGS` |
| 导入模式 | 表示导入方式。可以仅验证或提交（默认） | 枚举 | `验证`、`提交` |
| 方案 | 指示导入时要使用的整体 idScheme。默认为自动 (UID)。可以覆盖特定元数据（如下所列） | 枚举 | `UID`、`代码`、`名称`、`属性`、`自动` |
| 数据元素标识方案 | 指示导入时用于数据元素的 idScheme。 | 枚举 | `UID`、`代码`、`名称`、`属性`、`自动` |
| 组织单位 ID 方案 | 指示导入时用于组织单位的 idScheme。 | 枚举 | `UID`、`代码`、`名称`、`属性`、`自动` |
| 程序标识方案 | 指示导入时用于程序的 idScheme。 | 枚举 | `UID`、`代码`、`名称`、`属性`、`自动` |
| 程序阶段标识方案 | 指示导入时用于程序阶段的 idScheme。 | 枚举 | `UID`、`代码`、`名称`、`属性`、`自动` |
| 类别选项组合 ID 方案 | 指示导入时用于类别选项组合的 idScheme。 | 枚举 | `UID`、`代码`、`名称`、`属性`、`自动` |
| 类别选项Id方案 | 指示导入时用于类别选项的 idScheme。 | 枚举 | `UID`、`代码`、`名称`、`属性`、`自动` |
| 导入策略 | Indicates the effect the import should have. Can either be `CREATE`, `UPDATE`, `CREATE_AND_UPDATE` and `DELETE`, which respectively only allows importing new data, importing changes to existing data, importing any new or updates to existing data, and finally deleting data. | 枚举 | `CREATE`, `UPDATE`, `CREATE_AND_UPDATE`, `DELETE` |
| 原子模式 | 表示导入如何响应验证错误。如果是 `ALL`，则导入的所有数据必须有效，才能提交任何数据。如果是 `OBJECT`，只有提交的数据必须有效，其他数据可以无效。 | 枚举 | `ALL`, `OBJECT` |
| 冲洗模式 | 指示冲洗频率。这与导入期间将数据推入数据库的频率有关。主要用于调试原因，不应在生产设置中更改 | 枚举 | `AUTO`, `OBJECT` |
| 验证模式 | 指示验证步骤的完整性。它可以被跳过，设置为快速失败（返回第一个错误）或完整（默认），这将返回发现的任何错误 | 枚举 | `FULL`, `FAIL_FAST`, `SKIP` |
| 跳过模式验证 | 如果为 true，它将跳过验证生成属性的模式。 | Boolean | `TRUE`, `FALSE` |
| 跳过副作用 | 如果为 true，它将跳过运行导入的任何副作用 | Boolean | `TRUE`, `FALSE` |
| 跳过规则引擎 | 如果为 true，它将跳过运行导入的任何程序规则 | Boolean | `TRUE`, `FALSE` |

### 平面和嵌套负载 { #flat-and-nested-payloads }

导入器支持平面和嵌套负载。主要区别在于客户要求如何构建数据。

**扁平**：扁平结构的有效负载很简单。它可以包含我们拥有的每个核心跟踪器对象的集合。这可以与已分配 UID 的现有数据无缝协作。但是，对于新数据，客户端必须为对象之间的任何引用提供新的 UID。例如，如果您导入具有新注册的新跟踪实体，则跟踪实体要求客户端提供 UID，以便注册可以链接到该 UID。

**嵌套**：嵌套有效负载是最常用的结构。在这里，跟踪器对象嵌入到其父对象中；例如，跟踪实体内的注册。此结构的优点是客户端不需要为这些连接提供 UID，因为它们嵌套在一起，因此在导入过程中将为其提供此连接。

> **注意**
>
> 虽然嵌套有效负载对于客户端来说可能更容易处理，但有效负载在导入之前始终会被展平。这意味着对于大型导入，提供扁平结构的有效负载将为导入过程本身提供更多的控制和更低的开销。

下面列出了有效负载的 **FLAT** 和 **NESTED** 版本的示例。两种情况都使用相同的数据。

#### **_FLAT_** 负载 { #flat-payload }

```json
{
    "trackedEntities": [
        {
            "orgUnit": "O6uvpzGd5pu",
            "trackedEntity": "Kj6vYde4LHh",
            "trackedEntityType": "Q9GufDoplCL"
        }
    ],
    "enrollments": [
        {
            "orgUnit": "O6uvpzGd5pu",
            "program": "f1AyMswryyQ",
            "trackedEntity": "Kj6vYde4LHh",
            "enrollment": "MNWZ6hnuhSw",
            "trackedEntityType": "Q9GufDoplCL",
            "enrolledAt": "2019-08-19T00:00:00.000",
            "deleted": false,
            "occurredAt": "2019-08-19T00:00:00.000",
            "status": "ACTIVE",
            "notes": [],
            "attributes": []
        }
    ],
    "events": [
        {
            "scheduledAt": "2019-08-19T13:59:13.688",
            "program": "f1AyMswryyQ",
            "event": "ZwwuwNp6gVd",
            "programStage": "nlXNK4b7LVr",
            "orgUnit": "O6uvpzGd5pu",
            "trackedEntity": "Kj6vYde4LHh",
            "enrollment": "MNWZ6hnuhSw",
            "enrollmentStatus": "ACTIVE",
            "status": "ACTIVE",
            "occurredAt": "2019-08-01T00:00:00.000",
            "attributeCategoryOptions": "xYerKDKCefk",
            "deleted": false,
            "attributeOptionCombo": "HllvX50cXC0",
            "dataValues": [
                {
                    "updatedAt": "2019-08-19T13:58:37.477",
                    "storedBy": "admin",
                    "dataElement": "BuZ5LGNfGEU",
                    "value": "20",
                    "providedElsewhere": false
                },
                {
                    "updatedAt": "2019-08-19T13:58:40.031",
                    "storedBy": "admin",
                    "dataElement": "ZrqtjjveTFc",
                    "value": "Male",
                    "providedElsewhere": false
                },
                {
                    "updatedAt": "2019-08-19T13:59:13.691",
                    "storedBy": "admin",
                    "dataElement": "mB2QHw1tU96",
                    "value": "[-11.566044,9.477801]",
                    "providedElsewhere": false
                }
            ],
            "notes": []
        },
        {
            "scheduledAt": "2019-08-19T13:59:13.688",
            "program": "f1AyMswryyQ",
            "event": "XwwuwNp6gVE",
            "programStage": "PaOOjwLVW23",
            "orgUnit": "O6uvpzGd5pu",
            "trackedEntity": "Kj6vYde4LHh",
            "enrollment": "MNWZ6hnuhSw",
            "enrollmentStatus": "ACTIVE",
            "status": "ACTIVE",
            "occurredAt": "2019-08-01T00:00:00.000",
            "attributeCategoryOptions": "xYerKDKCefk",
            "deleted": false,
            "attributeOptionCombo": "HllvX50cXC0",
            "notes": []
        }
    ],
    "relationships": [
        {
            "relationshipType": "Udhj3bsdHeT",
            "from": {
                "trackedEntity": "Kj6vYde4LHh"
            },
            "to": {
                "trackedEntity": "Gjaiu3ea38E"
            }
        }
    ]
}
```

#### **_NESTED_** 负载 { #nested-payload }

```json
{
    "trackedEntities": [
        {
            "orgUnit": "O6uvpzGd5pu",
            "trackedEntity": "Kj6vYde4LHh",
            "trackedEntityType": "Q9GufDoplCL",
            "relationships": [
                {
                    "relationshipType": "Udhj3bsdHeT",
                    "from": {
                        "trackedEntity": "Kj6vYde4LHh"
                    },
                    "to": {
                        "trackedEntity": "Gjaiu3ea38E"
                    }
                }
            ],
            "enrollments": [
                {
                    "orgUnit": "O6uvpzGd5pu",
                    "program": "f1AyMswryyQ",
                    "trackedEntity": "Kj6vYde4LHh",
                    "enrollment": "MNWZ6hnuhSw",
                    "trackedEntityType": "Q9GufDoplCL",
                    "enrolledAt": "2019-08-19T00:00:00.000",
                    "deleted": false,
                    "occurredAt": "2019-08-19T00:00:00.000",
                    "status": "ACTIVE",
                    "notes": [],
                    "relationships": [],
                    "attributes": [],
                    "events": [
                        {
                            "scheduledAt": "2019-08-19T13:59:13.688",
                            "program": "f1AyMswryyQ",
                            "event": "ZwwuwNp6gVd",
                            "programStage": "nlXNK4b7LVr",
                            "orgUnit": "O6uvpzGd5pu",
                            "trackedEntity": "Kj6vYde4LHh",
                            "enrollment": "MNWZ6hnuhSw",
                            "enrollmentStatus": "ACTIVE",
                            "status": "ACTIVE",
                            "occurredAt": "2019-08-01T00:00:00.000",
                            "attributeCategoryOptions": "xYerKDKCefk",
                            "deleted": false,
                            "attributeOptionCombo": "HllvX50cXC0",
                            "dataValues": [
                                {
                                    "updatedAt": "2019-08-19T13:58:37.477",
                                    "storedBy": "admin",
                                    "dataElement": "BuZ5LGNfGEU",
                                    "value": "20",
                                    "providedElsewhere": false
                                },
                                {
                                    "updatedAt": "2019-08-19T13:58:40.031",
                                    "storedBy": "admin",
                                    "dataElement": "ZrqtjjveTFc",
                                    "value": "Male",
                                    "providedElsewhere": false
                                },
                                {
                                    "updatedAt": "2019-08-19T13:59:13.691",
                                    "storedBy": "admin",
                                    "dataElement": "mB2QHw1tU96",
                                    "value": "[-11.566044,9.477801]",
                                    "providedElsewhere": false
                                }
                            ],
                            "notes": [],
                            "relationships": []
                        },
                        {
                            "scheduledAt": "2019-08-19T13:59:13.688",
                            "program": "f1AyMswryyQ",
                            "event": "XwwuwNp6gVE",
                            "programStage": "PaOOjwLVW23",
                            "orgUnit": "O6uvpzGd5pu",
                            "trackedEntity": "Kj6vYde4LHh",
                            "enrollment": "MNWZ6hnuhSw",
                            "enrollmentStatus": "ACTIVE",
                            "status": "ACTIVE",
                            "occurredAt": "2019-08-01T00:00:00.000",
                            "attributeCategoryOptions": "xYerKDKCefk",
                            "deleted": false,
                            "attributeOptionCombo": "HllvX50cXC0",
                            "notes": [],
                            "relationships": []
                        }
                    ]
                }
            ]
        }
    ]
}
```

### 同步和异步{ #sync-and-async }

对于用户来说，同步导入与异步导入的主要区别在于 API 的立即响应。对于同步导入，导入完成后将立即返回响应并包含 importSummary。但是，对于异步导入，响应将是立即的，并且包含一个引用，客户端可以在其中轮询导入的更新。

对于重要的导入，客户端使用异步导入可能有益，以避免等待响应太长时间。

**ASYNC** 响应的示例如下所示。对于 **SYNC** 响应，请查看 [importSummary 部分](#webapi_nti_import_summary)。

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Tracker job added",
    "response": {
        "responseType": "TrackerJob",
        "id": "LkXBUdIgbe3",
        "location": "https://play.dhis2.org/dev/api/tracker/jobs/LkXBUdIgbe3"
    }
}
```

### 导入摘要{ #webapi_nti_import_summary }

Tracker API 有两个主要端点，供消费者从其进口产品中获取反馈。这些端点与异步导入作业最相关，但也可用于同步作业。这些端点将返回与导入相关的日志或导入摘要本身。

> **注意**
>
> 这些端点依赖于应用程序内存中存储的信息。这意味着在某些情况下，例如应用程序重新启动或在此之后启动大量导入请求后，该信息将不可用。

提交跟踪器导入请求后，我们可以访问以下端点，以便根据日志监控作业进度：

`GET /tracker/jobs/{uid}`

| 范围 | 描述                               | 例     |
| --------- | ----------------------------------------- | ----------- |
| `{uid}`   | 现有跟踪器导入作业的 UID | ABCDEF12345 |

#### **_REQUEST_** 示例 { #request-example }

`获取/tracker/jobs/mEfEaFSCKCC`

#### **_RESPONSE_** 示例 { #response-example }

```json
[
    {
        "uid": "mEfEaFSCKCC",
        "level": "INFO",
        "category": "TRACKER_IMPORT_JOB",
        "time": "2021-01-01T00:00:06.00",
        "message": "TRACKER_IMPORT_JOB ( mEfEaFSCKCC ) finished in 6.00000 sec. Import:Done",
        "completed": true,
        "id": "mEfEaFSCKCC"
    },
    {
        "uid": "mEfEaFSCKCC",
        "level": "DEBUG",
        "category": "TRACKER_IMPORT_JOB",
        "time": "2021-01-01T00:00:05.00",
        "message": "TRACKER_IMPORT_JOB ( mEfEaFSCKCC ) commit completed in 1.00000 sec. Import:commit",
        "completed": true,
        "id": "mEfEaFSCKCC"
    },
    {
        "uid": "mEfEaFSCKCC",
        "level": "DEBUG",
        "category": "TRACKER_IMPORT_JOB",
        "time": "2021-01-01T00:00:04.00",
        "message": "TRACKER_IMPORT_JOB ( mEfEaFSCKCC ) programruleValidation completed in 1.00000 sec. Import:programruleValidation",
        "completed": true,
        "id": "mEfEaFSCKCC"
    },
    {
        "uid": "mEfEaFSCKCC",
        "level": "DEBUG",
        "category": "TRACKER_IMPORT_JOB",
        "time": "2021-01-01T00:00:03.00",
        "message": "TRACKER_IMPORT_JOB ( mEfEaFSCKCC ) programrule completed in 1.00000 sec. Import:programrule",
        "completed": true,
        "id": "mEfEaFSCKCC"
    },
    {
        "uid": "mEfEaFSCKCC",
        "level": "DEBUG",
        "category": "TRACKER_IMPORT_JOB",
        "time": "2021-01-01T00:00:02.00",
        "message": "TRACKER_IMPORT_JOB ( mEfEaFSCKCC ) validation completed in 1.00000 sec. Import:validation",
        "completed": true,
        "id": "mEfEaFSCKCC"
    },
    {
        "uid": "mEfEaFSCKCC",
        "level": "DEBUG",
        "category": "TRACKER_IMPORT_JOB",
        "time": "2021-01-01T00:00:01.00",
        "message": "TRACKER_IMPORT_JOB ( mEfEaFSCKCC ) preheat completed in 1.00000 sec. Import:preheat",
        "completed": true,
        "id": "mEfEaFSCKCC"
    },
    {
        "uid": "mEfEaFSCKCC",
        "level": "INFO",
        "category": "TRACKER_IMPORT_JOB",
        "time": "2021-01-01T00:00:00.00",
        "message": "TRACKER_IMPORT_JOB ( mEfEaFSCKCC ) started by admin ( xE7jOejl9FI ) Import:Start",
        "completed": true,
        "id": "mEfEaFSCKCC"
    }
]
```

此外，以下端点将返回导入作业的导入摘要。此导入摘要仅在导入完成后才可用：

`GET /tracker/jobs/{uid}/report`

| 范围 | 描述 | 例 |
| --- | --- | --- |
| 路径 `/{uid}` | 现有跟踪器导入作业的 UID | ABCDEF12345 |
| `报告模式` | 返回的报告级别 | `FULL`&#124;`ERRORS`&#124;`WARNINGS` |

#### **_REQUEST_** 示例 { #request-example }

`获取 /tracker/jobs/mEfEaFSCKCC/report`

#### **_RESPONSE_** 示例 { #response-example }

[响应负载](#sample-responses) 与同步导入请求后返回的响应负载相同。

> **注意**
>
> 两个端点主要用于异步导入；但是，`GET /tracker/jobs/{uid}` 也适用于同步请求，因为它最终使用相同的导入过程并记录为异步请求。

### 导入摘要结构{ #import-summary-structure }

Import summaries have the following overall structure, depending on the requested `reportMode`:

```json
{
    "status": "...",
    "validationReport": {},
    "stats": {},
    "timingsStats": {},
    "bundleReport": {},
    "message": {}
}
```

**_地位_**

The property, `status`, of the import summary indicates the overall status of the import. If no errors or warnings were raised during the import, the `status` is reported as `OK`. The presence of any error or warnings in the import will result in a status of type `ERROR` or `WARNING`.

`status` is based on the presence of the most significant `validationReport`. `ERROR` has the highest significance, followed by `WARNING` and finally `OK`. This implies that `ERROR` is reported as long as a single error was found during the import, regardless of how many warnings occurred.

> **Note**
>
> If the import is performed using the AtomicMode "OBJECT", where the import will import any data without validation errors, the overall status will still be `ERROR` if any errors were found.

**_验证报告_**

The `validationReport` might include `errorReports` and `warningReports` if any errors or warnings were present during the import. When present, they provide a detailed list of any errors or warnings encountered.

例如，导入 `TRACKED_ENTITY` 时出现验证错误：

```json
{
  "validationReport": {
    "errorReports": [
      {
        "message": "Could not find TrackedEntityType: `Q9GufDoplCL`.",
        "errorCode": "E1005",
        "trackerType": "TRACKED_ENTITY",
        "uid": "Kj6vYde4LHh"
      },
      ...
    ],
    "warningReports" : [ ... ]
  }
}
```

The report contains a message and a code describing the actual error (See the [error codes](#error-codes) section for more information about errors). Additionally, the report includes the `trackerType` and `uid`, which aims to describe where in the data the error was found. In this case, there was a `TRACKED_ENTITY` with the uid `Kj6vYde4LHh`, which had a reference to a tracked entity type that was not found.

> **注**
>
> 当提及跟踪对象的 `uid` 时，它们在有效载荷中被标记为对象名称。例如，被跟踪实体的 `uid` 在有效载荷中的名称是 "trackedEntity"。同样，"注册"、"事件 "和 "关系 "也分别代表注册、事件和关系。
>
> 如果有效负载中没有提供 uid，导入过程将生成新的 uid。这意味着错误报告可能会提到一个不存在于有效负载中的 uid。
>
> 错误代表有效载荷中存在导入程序无法规避的问题。任何错误都会阻止数据的导入。另一方面，警告是指可以安全规避的问题，但应让用户知道发生了这种情况。警告不会阻止数据导入。

**_统计数据_**

统计数据提供了导入的快速概览。导入完成后，这些将是代表创建、更新、删除或忽略的数据量的实际计数。

例：

```json
{
    "stats": {
        "created": 2,
        "updated": 2,
        "deleted": 1,
        "ignored": 5,
        "total": 10
    }
}
```

`created` 表示创建了多少个新对象。一般来说，有效载荷中没有 uid 的对象将被视为新对象。

`updated` 指更新对象的数量。如果一个对象在有效负载中设置了 uid，只要数据库中存在相同的 uid，就会被视为更新。

`deleted` refers to the number of objects deleted during the import. Deletion only happens when the import is configured to delete data and only then when the objects in the payload have existing uids set.

`ignored` refers to objects that were not persisted. Objects can be ignored for several reasons, for example trying to create something that already exists. Ignores should always be safe, so if something was ignored, it was not necessary, or it was due to the configuration of the import.

**_timingsStats_**

`timingStats` 表示导入的不同步骤所花费的时间。这些统计数据并不提供准确的导入总时间，而是提供不同步骤的代码所花费的时间。

The `timingStats` are primarily helpful in debugging imports that are causing issues to see which part of the import is having issues.

```json
{
  "timingsStats": {
    "timers": {
      "preheat": "0.234086 sec.",
      "preprocess": "0.000058 sec.",
      ...
      "totalImport": "0.236810 sec.",
      "validation": "0.001533 sec."
    }
  }
}
```

**_bundleReport_**

When the import is completed, the `bundleReport` contains all the [tracker objects](#tracker-objects) imported.

例如，`TRACKED_ENTITY`：

```json
{
  "bundleReport": {
    "status": "OK",
    "typeReportMap": {
      "TRACKED_ENTITY": {
        "trackerType": "TRACKED_ENTITY",
        "stats": {
          "created": 1,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 1
        },
        "objectReports": [
          {
            "trackerType": "TRACKED_ENTITY",
            "uid": "FkxTQC4EAKK",
            "index": 0,
            "errorReports": []
          }
        ]
      },
      ...
    }
  }
}
```

如图所示，每种类型的跟踪器对象都将被报告，每种类型都有自己的统计信息和 `对象报告`。这些 `objectReports` 将提供每个导入对象的详细信息，如类型、uid 以及任何适用的错误或警告报告。

**_信息_**

If the import ended abruptly, the `message` would contain further information in relation to what happened.

### 导入摘要报告级别 { #import-summary-report-level }

如前所述，可以使用特定的 `reportMode` 参数检索 `GET /tracker/jobs/{uid}/report`。默认情况下，该端点将返回一个`reportMode``ERROR`的`importSummary`。

| 范围 | 描述 |
| --- | --- |
| `已满` | 返回 `WARNINGS` 和 `timingsStats` 中的所有内容 |
| `警告` | 返回 `ERRORS` 中的所有内容，以及 `validationReports` 中的 `warningReports` 内容 |
| `错误`（默认） | Returns only `errorReports` in `validationReports` |

此外，所有 `reportMode` 都会在适用时返回 `status`、`stats`、`bundleReport` 和 `message` 。

### 错误代码{ #webapi_nti_error_codes }

不同的错误场景有不同的错误代码。下表列出了新 Tracker API 抛出的错误代码以及错误消息和一些附加说明。错误消息中的占位符 (`{0}`、`{1}`、`{2}`..) 通常是 uid，除非另有说明。

| 错误代码 | 错误信息 | 描述 |
| :-- | :-- | :-- |
| E1000 | User: `{0}`, has no write access to OrganisationUnit: `{1}`. | 这通常意味着组织单位 `{1}` 不在用户 `{0}` 的捕获范围内，因此写操作没有授权。 |
| E1001 | User: `{0}`, has no data write access to TrackedEntityType: `{1}`. | 当用户无权创建或修改 TrackedEntityType `{1}` 的数据时，会出现此错误 |
| E1002 | TrackedEntityInstance：`{0}`，已存在。 | 当尝试使用已存在的 uid 创建新的 TrackedEntity 时，会引发此错误。确保添加新的 TrackedEntity 时使用新的 uid。 |
| E1005 | 找不到 TrackedEntityType：`{0}`。 | 尝试使用 uid `{0}` 获取不存在的 TrackedEntityType 时抛出错误。这也可能意味着用户没有对 TrackedEntityType 的读取访问权限。 |
| E1006 | 属性：`{0}`，不存在。 | 当系统无法找到 uid `{0}` 匹配的 TrackedEntityAttribute 时抛出的错误。这也可能意味着用户没有访问 TrackedEntityAttribute 的权限。 |
| E1007 | 验证属性值类型时出错：`{0}`；错误：`{1}`。 | TrackedEntityAttribute 的值类型与其提供的属性值不匹配。实际的验证错误将显示在`{1}`中。 |
| E1009 | 文件资源：`{0}`，已分配给其他对象。 | 文件资源 uid `{0}` 已分配给系统中的另一个对象。 |
| E1010 | Could not find Program: `{0}`, linked to Event. | 系统无法找到在事件有效负载中指定了 uid `{0}` 的程序。这也可能意味着登录用户无法访问特定程序。 |
| E1011 | 找不到链接到事件的组织单位：`{0}`。 | 系统无法找到在事件有效载荷中指定了 uid `{0}` 的 OrganisationUnit。 |
| E1012 | 几何形状不符合FeatureType：`{0}`。 | 提供的要素类型要么是“无”，要么是与所提供的几何值不兼容的类型。 |
| E1013 | 找不到与事件相关联的 ProgramStage: `{0}`。 | 系统无法找到在事件有效载荷中指定了 uid `{0}` 的 ProgramStage。这也可能意味着登录用户无法访问 ProgramStage。 |
| E1014 | 提供的程序：`{0}`，是一个无需注册的程序。未经注册，无法将注册创建到计划中。 | 只能为已注册的计划创建注册。 |
| E1015 | TrackedEntityInstance: `{0}`, 已经在计划 `{1}` 中注册。 | 如果该计划已存在另一个有效注册，则无法注册该计划。至少必须首先完成主动注册。 |
| E1016 | TrackedEntityInstance：`{0}`，已在计划中有效注册：`{1}`，并且此计划仅允许注册一次。 | 根据程序 `{1}` 配置，一个 TrackedEntity 只能注册该程序一次。看起来 TrackedEntity `{0}` 已经在该程序中注册过一次了。因此不能再添加另一个注册。 |
| E1018 | Attribute: `{0}`, is mandatory in program `{1}` but not declared in enrollment `{2}`. | 对于定义为程序强制的属性，有效负载中缺少属性值。确保有效负载中提供了强制属性的属性值。 |
| E1019 | 仅允许注册项目属性；无效属性：`{0}`。 | 注册有效负载中指定的属性 uid `{0}` 与程序无关。 |
| E1020 | Enrollment date: `{0}`, can`t be future date. | 除非本程序在其配置中允许，否则无法注册未来的日期。 |
| E1021 | Incident date: `{0}`, can`t be future date. | 事件日期不能是未来的日期，除非程序在其配置中允许。 |
| E1022 | TrackedEntityInstance: `{0}`，必须与 Program `{1}` 具有相同的 TrackedEntityType。 | 本程序配置为接受与注册有效负载中提供的不同的 TrackedEntityType uid。 |
| E1023 | DisplayIncidentDate 为 true，但属性发生At 为 null 或格式无效：`{0}`。 | 程序配置了 DisplayIncidentDate，但其负载中的日期为空或无效。 |
| E1025 | 属性 enrollAt 为 null 或格式无效：`{0}`。 | 注册日期对于注册是强制性的。确保它不为空并且具有有效的日期格式。 |
| E1029 | Event OrganisationUnit: `{0}`, and Program: `{1}`, don't match. | 事件有效载荷使用程序 `{1}`，该程序未配置为可被组织单位 `{0}` 访问。 |
| E1030 | 事件：`{0}`，已存在。 | 尝试使用已存在的 uid 添加新事件时会引发此错误。确保添加新事件时使用新的 uid。 |
| E1031 | 缺少事件发生日期。 | OccuredAt 属性要么为 null，要么在负载中具有无效的日期格式。 |
| E1032 | 事件：`{0}`，不存在。 |  |
| E1033 | 事件：`{0}`，注册值为 NULL。 |  |
| E1035 | 事件：`{0}`，ProgramStage 值为 NULL。 |  |
| E1036 | 事件：`{0}`，TrackedEntityInstance 未指向现有对象。 | 系统无法找到具有事件负载中指定的 uid 的 TrackedEntity。这也可能意味着用户没有对 TrackedEntity 的读取访问权限。 |
| E1039 | ProgramStage：`{0}`，不可重复且事件已存在。 | 特定注册的 ProgramStage 已存在一个事件。由于 ProgramStage 配置为不可重复，因此无法添加同一 ProgramStage 的另一个事件。 |
| E1041 | 注册组织单位：`{0}`，与计划：`{1}`，不匹配。 | 注册有效载荷包含一个程序 `{1}`，该程序未配置为可被组织单位 `{0}` 访问。 |
| E1042 | 事件：`{0}`，需要有完成日期。 | 如果程序配置为具有completeExpiryDays，则CompletedDate 对于COMPLETED 事件负载是必需的。状态为“已完成”的事件应具有非空的completedDate 属性和有效的日期格式。 |
| E1048 | 对象：`{0}`，uid：`{1}`，具有无效的 uid 格式。 | 有效的 uid 有 11 个字符。第一个字符必须是字母（a-z 或 A-Z），其余 10 个字符可以是字母数字（a-z 或 A-Z 或 0-9）。 |
| E1049 | Could not find OrganisationUnit: `{0}`, linked to Tracked Entity. | 系统无法找到 uid `{0}` 的 OrganisationUnit。 |
| E1050 | 缺少活动计划日期。 | 事件负载中的 ScheduledAt 属性丢失或日期格式无效。 |
| E1055 | 不允许使用默认 AttributeOptionCombo，因为程序具有非默认 CategoryCombo。 | 该程序配置为包含非默认 CategoryCombo，但请求使用默认 AttributeOptionCombo。 |
| E1056 | 事件日期：`{0}`，早于开始日期：`{1}`，对于 AttributeOption：`{2}`。 | CategoryOption 配置了开始日期，负载中的事件日期不能早于该开始日期。 |
| E1057 | 事件日期：`{0}`，在结束日期之后：`{1}`，对于 AttributeOption； `{2}`。 | CategoryOption 配置了结束日期，负载中的事件日期不能晚于该结束日期。 |
| E1063 | TrackedEntityInstance：`{0}`，不存在。 | 尝试使用 uid `{0}` 获取不存在的 TrackedEntity 时抛出错误。这也可能意味着用户没有对 TrackedEntity 的读取访问权限。 |
| E1064 | 属性 `{1}` 的非唯一属性值 `{0}` | 属性值在定义的范围内必须是唯一的。该错误表明另一个 TrackedEntity 的属性值已存在。 |
| E1068 | 找不到 TrackedEntityInstance: `{0}`，链接到 Enrollment。 | 系统找不到注册有效负载中指定的 TrackedEntity。这也可能意味着用户没有对 TrackedEntity 的读取访问权限。 |
| E1069 | Could not find Program: `{0}`, linked to Enrollment. | 系统找不到注册有效负载中指定的程序。这也可能意味着用户没有本程序的读取权限。 |
| E1070 | Could not find OrganisationUnit: `{0}`, linked to Enrollment. | 系统找不到注册有效负载中指定的 OrganizationUnit。 |
| E1074 | 缺少功能类型。 |  |
| E1075 | 属性：`{0}`，缺少 uid。 |  |
| E1076 | `{0}` `{1}` 是强制性的，不能为空 |  |
| E1077 | 属性：`{0}`，文本值超出允许的最大长度：`{0}`。 |  |
| E1080 | 注册：`{0}`，已存在。 | 当尝试使用已存在的 uid 创建新的 Enrollmentt 时，会引发此错误。确保添加新注册时使用新的 uid。 |
| E1081 | 注册：`{0}`，不存在。 | 尝试使用 uid `{0}` 获取不存在的注册时引发错误。这也可能意味着用户没有注册的读取权限。 |
| E1082 | Event: `{0}`, is already deleted and can't be modified. | 如果事件被软删除，则不允许对其进行修改。 |
| E1083 | 用户：`{0}`，无权修改已完成的事件。 | 只有超级用户或具有“F_UNCOMPLETE_EVENT”权限的用户才能修改已完成的事件。已完成的事件是指状态为“已完成”的事件。 |
| E1084 | 文件资源：`{0}`，找不到参考。 |  |
| E1085 | 属性：`{0}`，值与值类型不匹配：`{1}`。 | 属性的值类型与其提供的属性值不匹配。 |
| E1089 | Event: `{0}`, references a Program Stage `{1}` that does not belong to Program `{2}`. | 事件负载中的 ProgramStage uid 和 Program uid 不兼容。 |
| E1090 | 属性：`{0}`，在被跟踪实体类型 `{1}` 中是强制性的，但在被跟踪实体 `{2}` 中没有声明。 | 有效负载缺少强制 TrackedEntityTypeAttributes 的值。 |
| E1091 | User: `{0}`, has no data write access to Program: `{1}`. | 程序共享配置使得用户没有该程序的写入权限。 |
| E1095 | User: `{0}`, 没有数据写入 ProgramStage: `{1}` 的权限。 | ProgramStage 共享配置使得用户没有对此 ProgramStage 的写访问权限。 |
| E1096 | User: `{0}`, has no data read access to Program: `{1}`. | 程序共享配置使得用户没有该程序的读取访问权限。 |
| E1099 | User: `{0}`, 没有 CategoryOption: `{1}` 的写入权限。 | CategoryOption 共享配置使得用户没有对此 CategoryOption 的写入权限 |
| E1100 | User: `{0}`, is lacking 'F_TEI_CASCADE_DELETE' authority to delete TrackedEntityInstance: `{1}`. | 此 TrackedEntity 存在未删除的注册。如果用户没有“F_TEI_CASCADE_DELETE”权限，则必须首先显式删除这些注册才能删除 TrackedEntity。 |
| E1102 | 用户：`{0}`，无权访问所跟踪的实体：`{1}`，程序：`{2}`，组合。 | 当用户的 OrganizationUnit 不具有此特定程序的此 TrackedEntity 的所有权时，会引发此错误。 TrackedEntity-Program 组合的所属 OrganizationUnit 应落入用户的捕获范围（在某些情况下为搜索范围）。 |
| E1103 | 用户: `{0}`, 没有'F_ENROLLMENT_CASCADE_DELETE'权限删除注册 : `{1}`。 | 此注册存在未删除的事件。如果用户没有“F_ENROLLMENT_CASCADE_DELETE”权限，则必须首先显式删除这些事件才能删除注册。 |
| E1104 | 用户：`{0}`，没有程序的数据读取权限：`{1}`，TrackedEntityType：`{2}`。 | 与程序关联的 TrackedEntityType 的共享配置使得用户没有数据读取权限。 |
| E1112 | 属性值：`{0}`，设置为机密，但系统未正确配置为加密数据。 | Either JCE files is missing or the configuration property `encryption.password` might be missing in `dhis.conf`. |
| E1113 | 注册：`{0}`，已删除且无法修改。 | 如果注册被软删除，则不允许对其进行修改。 |
| E1114 | TrackedEntity：`{0}`，已删除且无法修改。 | 如果 TrackedEntity 被软删除，则不允许对其进行任何修改。 |
| E1115 | 找不到 CategoryOptionCombo：`{0}`。 |  |
| E1116 | 找不到 CategoryOption：`{0}`。 | 这也可能意味着用户无法访问 CategoryOption。 |
| E1117 | 给定类别组合和类别选项不存在 CategoryOptionCombo：`{0}`。 |  |
| E1118 | 指定用户 `{0}` 不是有效的 uid。 |  |
| E1119 | 已存在 uid `{0}` 的 Tracker Note。 |  |
| E1120 | ProgramStage `{0}` 不允许用户分配 | 事件负载已分配用户 ID，但 ProgramStage 未配置为允许用户分配。 |
| E1121 | 缺少必需的跟踪实体属性：`{0}`。 |  |
| E1122 | 缺少必需的注册属性：`{0}`。 |  |
| E1123 | 缺少必需的事件属性：`{0}`。 |  |
| E1124 | 缺少必需的关系属性：`{0}`。 |  |
| E1125 | 值 `{0}` 不是选项集 `{3}` 中 `{1}` `{2}` 的有效选项。 |  |
| E1017 | 属性：`{0}`，不存在。 |  |
| E1093 | User: `{0}`, has no search access to OrganisationUnit: `{1}`. |  |
| E1094 | 不允许更新注册：`{0}`，现有计划`{1}`。 | 现有注册的注册有效负载具有与其最初注册时不同的计划 uid。 |
| E1110 | Not allowed to update Event: `{0}`, existing Program `{1}`. | 现有事件的事件负载具有与最初创建时不同的程序 uid。 |
| E1111 | 我们有一个生成的属性：`{0}`，但没有模式。 |  |
| E1043 | 事件：`{0}`，完整性日期已过期。无法对此事件进行更改。 | 没有“F_EDIT_EXPIRED”权限的用户无法更新已超过其程序中配置的到期日的事件。 |
| E1046 | 事件：`{0}`，需要至少有一个（事件或时间表）日期。 | occurredAt 或 ScheduledAt 属性应出现在事件负载中。 |
| E1047 | 事件：`{0}`，日期属于过期时间段。不可能创建此类事件。 | 事件“occurredAt”或“scheduledAt”的值早于“PeriodType”开始日期。 |
| E1300 | 由程序规则生成 (`{0}`) - `{1}` |  |
| E1302 | 由程序规则生成 (`{0}`) - DataElement `{1}` 无效：`{2}` |  |
| E1303 | 由程序规则生成 (`{0}`) - 强制数据元素 `{1}` 不存在 |  |
| E1304 | 由程序规则生成 (`{0}`) - DataElement `{1}` 不是有效的数据元素 |  |
| E1305 | 由程序规则生成 (`{0}`) - DataElement `{1}` 不是 `<span class='notranslate' 的一部分>{2}</span>` 程序阶段 |  |
| E1306 | 由程序规则生成 (`{0}`) - 强制属性 `{1}` 不存在 |  |
| E1307 | 由程序规则生成 (`{0}`) - 无法为数据元素 `{1}` 赋值。提供的值必须为空或与计算值 `{2}` 匹配。 |  |
| E1308 | 由程序规则生成 (`{0}`) - DataElement `{1}` 在事件 `<span class='notranslate' 中被替换'>{2}</span>` |  |
| E1309 | 由程序规则 (`{0}`) 生成 - 无法为属性 `{1}` 赋值。提供的值必须为空或与计算值 `{2}` 匹配。 |  |
| E1310 | 由程序规则生成 (`{0}`) - 属性 `{1}` 在 tei `<span class='notranslate 中被替换'>{2}</span>` |  |
| E4000 | 关系：`{0}` 无法链接到自身 |  |
| E4001 | 关系 `{1}` 的关系项 `{0}` 无效：一个项只能链接一个 Tracker 实体。 |  |
| E4006 | 找不到关系类型：`{0}`。 |  |
| E4009 | 关系类型 `{0}` 无效。 |  |
| E4010 | 关系类型 `{0}` 约束需要{1} ，但找到了{2} 。 |  |
| E4011 | 关系：`{0}` 无法持久化，因为此引用了 {1} {2}关系无效。 |  |
| E4012 | 无法找到 `{0}`： `{1}`，链接到 "关系"。 |  |
| E4013 | 关系类型 `{0}` 约束缺失{1} 。 |  |
| E4014 | 关系类型 `{0}` 约束要求跟踪实体具有 `{1}` 类型，但找到了 `{2}`。 |  |
| E9999 | 不适用 | 未定义的错误消息。 |

### 验证方式 { #webapi_nti_validation }

使用跟踪器导入器导入数据时，会执行一系列验证以确保数据的有效性。本节将描述所执行的一些不同类型的验证，以便更好地了解导入验证是否失败。

#### 必需属性{ #required-properties }

每个跟踪器对象都有一些导入数据时需要提供的必需属性。有关所需属性的详尽列表，请查看 [Tracker Object 部分](#webapi_nti_tracker_objects)。

在验证所需属性时，我们通常谈论对其他数据或元数据的引用。在这些情况下，有三个主要标准：

1. 该引用在有效负载中存在且不为空。
2. 引用指向正确的数据类型并且存在于数据库中
3. 用户有权查看参考

如果第一个条件失败，导入将失败，并显示一条有关缺少引用的消息。但是，假设引用指向不存在或用户无法访问的内容。在这种情况下，这两种情况都会导致一条有关未找到引用的消息。

#### 格式 { #formats }

跟踪器对象的某些属性需要特定的格式。导入数据时，每个属性都会根据预期格式进行验证，并将根据哪个属性的格式错误返回不同的错误。以这种方式验证的属性的一些示例：

-   UID（涵盖对 DHIS2 中其他数据或元数据的所有引用。）
-   日期
-   几何（坐标必须与其类型指定的格式匹配）

#### 用户访问权限 { #user-access }

所有导入的数据都将根据数据中引用的元数据 ([Sharing](#webapi_nti_metadata_sharing)) 和组织单位 ([组织单位范围](#webapi_nti_ou_scope)) 进行验证。您可以在以下部分中找到有关共享和组织单位范围的更多信息。

在数据库中查找参考文献的同时验证共享。用户访问权限之外的元数据将被视为不存在。导入将验证数据中引用的任何元数据。

另一方面，组织单位有双重目的。它主要确保只有在为用户“捕获范围”内的组织单位导入数据时才能导入数据。其次，组织单位还用于限制可用的程序。这意味着，如果您尝试为无权访问您正在导入的程序的组织单位导入数据，则导入将无效。

Users with the `ALL` authority will ignore the limits of sharing and organisation unit scopes when they import data. However, they can not import enrollments in organisation units that do not have access to the enrollment program.

#### 属性和数据值 { #attribute-and-data-values }

属性和数据值分别是跟踪实体和事件的一部分。但是，属性可以通过其类型 (TrackedEntityType) 或其程序 (Program) 链接到跟踪实体。此外，属性也可以是唯一的。

导入中完成的初始验证是为了确保为属性或数据元素提供的值符合预期值的类型。例如，假设您导入数值类型的数据元素的值。在这种情况下，该值应为数字。与类型和值之间不匹配相关的任何错误都将导致相同的错误代码，但带有与违规类型相关的特定消息。

Mandatory attributes and data values are also checked. Currently, removing mandatory attributes is not allowed. Some use-cases require values to be sent separately, while others require all values to be sent as one. Programs can be configured to either validate mandatory attributes `ON_COMPLETE` or `ON_UPDATE_AND_INSERT` to accommodate these use-cases.

导入将在导入时验证唯一属性。这意味着只要提供的值对于整个系统中的属性来说是唯一的，它就会通过。但是，如果发现该唯一值被除导入实体之外的任何其他跟踪实体使用，则该操作将会失败。

#### 组态 { #configuration }

导入器中验证的最后一部分是基于用户对相关元数据的配置进行验证。有关每种配置的更多信息，请查看相关部分。可配置验证的一些示例：

-   特征类型（对于几何）
-   用户可分配的事件
-   允许未来的日期
-   报名一次
-   和更多。

这些配置将进一步改变导入期间执行验证的方式。

### 计划规则 { #webapi_nti_program_rules }

用户可以配置[程序规则](#webapi_program_rules)，这会向跟踪器表单添加条件行为。除了在跟踪器应用程序中运行这些规则之外，跟踪器导入器还将运行这些规则的选择。由于进口商也在运行这些规则，因此我们可以确保额外的验证级别。

并非所有程序规则操作都受支持，因为它们仅适合前端演示。下面列出了受支持的程序规则操作的完整列表。

| 程序规则动作     | 支持的 |
| ----------------------- | :-------: |
| **显示文本**         |           |
| **显示键值对** |           |
| **海德菲尔德**           |           |
| **隐藏部分**         |           |
| **分配**              |   **X**   |
| **显示警告**         |   **X**   |
| **淋浴间**           |   **X**   |
| **完成警告** |   **X**   |
| **完成错误**   |   **X**   |
| **创建事件**         |           |
| **设置强制字段**   |   **X**   |
| **发信息**         |   **X**   |
| **安排消息**     |   **X**   |

程序规则在导入器中的评估方式与在 Tracker 应用程序中的评估方式相同。总而言之，执行计划规则时会考虑以下条件：

-   程序规则必须链接到正在导入的数据。例如，程序阶段或数据元素。
-   程序规则的条件必须评估为 true

程序规则的结果取决于这些规则中定义的操作：

-   程序规则操作可能以 2 种不同的结果结束：警告或错误。
    -   错误将使验证失败，而警告将在导入摘要中作为消息报告。
        -   SHOWWARNING 和 WARNINGONCOMPLETION 操作只能生成警告。
        -   SHOWERROR、ERRORONCOMPLETION 和 SETMANDATORYFIELD 操作只能生成错误。
        -   ASSIGN 操作可以生成警告和错误。
            -   当操作为空属性/数据元素分配值时，会生成警告。
            -   当操作正在为已具有要分配的相同值的属性/数据元素分配值时，会生成警告。
            -   当操作要为一个已有值的属性/数据元素赋值，而要赋的值不同时，除非 `RULE_ENGINE_ASSIGN_OVERWRITE` 系统设置为 true，否则会产生错误。

此外，程序规则还可能导致副作用，例如发送和安排消息。有关副作用的更多信息可以在以下部分中找到。

> **注意**
>
> 在导入过程中，可以使用 `skipProgramRules` 参数跳过程序规则。

### 副作用{ #webapi_nti_side_effects }

导入完成后，导入可能会触发特定任务。这些任务就是我们所说的“副作用”。这些任务执行的操作不会影响导入本身。

副作用是与导入分离运行但始终由导入触发的任务。由于副作用与导入无关，因此即使导入成功，副作用也可能会失败。此外，副作用仅在导入成功时运行，因此它们不会以相反的方式失败。

目前支持以下副作用：

| 副作用 | 支持的 | 描述 |
| --- | :-: | --- |
| **追踪器通知** | **X** | 更新可以触发通知。触发通知的更新是**注册**、**事件更新**、**事件或注册完成**。 |
| **程序规则通知** | **X** | 程序规则可以触发通知。请注意，这些通知是通过 DHIS2 规则引擎生成的程序规则效果的一部分。 |

> **注意**
>
> 某些配置可以控制副作用的执行。可以在导入过程中设置 `skipSideEffects` 标志，以完全跳过副作用。例如，如果你导入了一些不想触发通知的内容，这个参数就很有用。

### 将用户分配给事件 { #webapi_nti_user_event_assignment }

特定工作流程受益于像任务一样处理事件，因此，您可以将用户分配给事件。

Assigning a user to an event will not change the access or permissions for users but will create a link between the Event and the user. When an event has a user assigned, you can query events from the API using the `assignedUser` field as a parameter.

要为事件分配用户时，只需在 `assignedUser` 字段中提供要分配的用户的 UID 即可。请参阅以下示例：

```json
{
  ...
  "events": [
    {
      "event": "ZwwuwNp6gVd",
      "programStage": "nlXNK4b7LVr",
      "orgUnit": "O6uvpzGd5pu",
      "enrollment": "MNWZ6hnuhSw",
      "assignedUser" : "M0fCOxtkURr"
    }
  ],
  ...
}
```

在本例中，uid 为 `M0fCOxtkURr` 的用户将被分配给uid 为 `ZwwuwNp6gVd` 的事件。一个事件只能分配一个用户。

要使用此功能，相关程序阶段需要启用用户分配，并且为用户提供的 uid 必须引用有效的现有用户。

## 跟踪器导出 { #webapi_nti_export }

跟踪器导出端点是一组服务，允许客户端查询和检索使用导入端点存储的对象。

除了 **[API 中的更改](#Changes-in-the-API)** 中突出显示的差异之外，这些端点的请求参数与旧端点相匹配。

These endpoints are still being developed and are subject to change. However, the `request` and `response` interfaces will most likely not undergo significant changes.

Tracker 导出端点处理以下 Tracker 对象：

-   **跟踪的实体**
-   **活动**
-   **报名人数**
-   **关系**

> **注意**
>
> - 这些端点目前只支持 `JSON`，但不久的将来会支持 `CSV`。
>
> - 这些端点采用了**[API 中的更改](#Changes-the-API)** 中记录的新命名约定。
>
> - 以下功能在旧版端点中仍然缺失但可用：
>
> - 字段过滤

### 常用请求参数{ #common-request-parameters }

以下端点支持分页的标准参数。

-   **Tracked Entities** `GET /api/tracker/trackedEntities`
-   **Events** `GET /api/tracker/events`
-   **Enrollments** `GET /api/tracker/enrollments`

#### 分页请求参数 { #request-parameters-for-pagination }

| 请求参数 | 类型 | 允许值 | 描述 |
| --- | --- | --- | --- |
| `页面` | `整数` | 任意正整数 | 要返回的页码。如果缺失则默认为 1 |
| `页面大小` | `整数` | 任意正整数 | 页面大小。默认为 50。 |
| `总页数` | `Boolean` | `true`&#124;`false` | 指示是否返回响应中的总页数 |
| `跳过分页` | `Boolean` | `true`&#124;`false` | 指示是否应忽略分页并返回所有行 |
| `寻呼` | `Boolean` | `true`&#124;`false` | 是否启用分页 |
| `订单` | `字符串` | 以逗号分隔的`propName:sortDirection`形式的`OrderCriteria`列表。<br><br> 示例：`createdAt:desc`  **注意：** `propName`区分大小写，`sortDirection`不区分大小写。<br><br> | Sort the response based on given `OrderCriteria` |

> **注意**
>
> 请注意，性能与请求的数据量直接相关。较大的页面将花费更多时间返回。

#### 组织部门选择模式的请求参数 { #request-parameters-for-organisational-unit-selection-mode }

可用的组织单元选择模式在
下表。

| 模式 | 描述 |
| --- | --- |
| `已选择` | 请求中定义的组织单位。 |
| `CHILDREN` | 选定的组织单位及其直接子级，即下一级的组织单位。 |
| `DESCENDANTS` | 选定的组织单位和所有子组织单位，即子层次结构中的所有组织单位。 |
| `ACCESSIBLE` | 与当前用户和所有子级关联的数据视图组织单位，即子层次结构中的所有组织单位。如果未定义前者，则将回退到与当前用户关联的数据捕获组织单位。 |
| `捕获` | 与当前用户和所有子级关联的数据捕获组织单元，即子层次结构中的所有组织单元。 |
| `全部` | 系统中的所有组织单位。需要 ALL 权限。 |

### 跟踪的实体{ #tracked-entities }

两个端点专用于被跟踪的实体：

-   `GET /api/tracker/trackedEntities`
    -   检索匹配给定条件的跟踪实体
-   `GET /api/tracker/trackedEntities/{id}`
    -   根据提供的 id 检索被跟踪的实体

#### Tracked Entities Collection endpoint `GET /api/tracker/trackedEntities` { #tracked-entities-collection-endpoint-get-apitrackertrackedentities }

此端点的目的是检索与客户端提供的标准匹配的跟踪实体。

端点返回与请求参数匹配的跟踪实体的列表。

##### 请求语法 { #request-syntax }

| 请求参数 | 类型 | 允许值 | 描述 |
| --- | --- | --- | --- |
| `查询` | `字符串` | `{运算符}：{过滤器值}` | 创建跟踪实体属性的过滤器。只有过滤器值是必须的。如果未指定 `operator` 操作符，则使用 `EQ` 操作符。 |
| `属性` | `字符串` | 以逗号分隔的属性 `UID` 值 | 对于响应中的每个跟踪实体，仅返回指定的属性 |
| `过滤器` | `字符串` | 过滤器的逗号分隔值 | Filter is properties or attributes with operator and value.<br>Example: `filter=updatedAfter:lt:2000-01-01`<br>Multiple filters are allowed. User needs access to attribute to being able to have a filter on it |
| `orgUnit` | `字符串` | 以分号分隔的组织单位`UID`列表 | 仅返回属于所提供组织单位的跟踪实体实例 |
| `ouMode` 请参阅 [ouModes](#Request-parameters-for-Organisingal-Unit-selection-mode) | `字符串` | `SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL` | The mode of selecting organisation units, can be. Default is `SELECTED`, which refers to the selected organisation units only. |
| `程序` | `字符串` | 程序 `UID` | 程序 `UID` ，响应中的实例必须注册到该程序中。 |
| `程序状态` | `字符串` | `ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED` | 给定程序中跟踪实体实例的 ProgramStatus |
| `程序阶段` | `字符串` | `UID` | 一个程序阶段 `UID`，响应中的实例必须有以下事件 |
| `跟进` | `Boolean` | `true`&#124;`false` | 指示跟踪的实体实例是否被标记为针对指定程序进行跟进 |
| `更新后` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 上次更新的开始日期 |
| `更新前` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 上次更新的结束日期 |
| `更新内` | `持续时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) | 返回不早于指定持续时间的 TEI |
| `注册注册后` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 给定计划中事件的开始日期 |
| `注册之前注册` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 给定计划中事件的结束日期 |
| `注册发生后` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 给定计划中事件的开始日期 |
| `注册发生之前` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 给定计划中事件的结束日期 |
| `trackedEntityType` | `字符串` | 跟踪实体类型的 UID | 仅返回给定类型的跟踪实体实例 |
| `trackedEntity` | `字符串` | 以分号分隔的跟踪实体实例`UID`列表 | Filter the result down to a limited set of tracked entities using explicit uids of the tracked entity instances by using `trackedEntity=id1;id2`. This parameter will, at the very least, create the outer boundary of the results, forming the list of all tracked entities using the uids provided. If other parameters/filters from this table are used, they will further limit the results from the explicit outer boundary. |
| `分配的用户模式` | `字符串` | `CURRENT`&#124;`PROVIDED`&#124;`NONE`&#124;`ANY` | 将结果限制为跟踪实体，并根据分配的用户选择模式分配事件 |
| `指定用户` | `字符串` | 以分号分隔的用户 UID 列表，用于根据分配给用户的事件进行过滤。 | Filter the result down to a limited set of tracked entities with events that are assigned to the given user IDs by using `assignedUser=id1;id2`.This parameter will only be considered if assignedUserMode is either `PROVIDED` or `null`. The API will error out, if for example, `assignedUserMode=CURRENT` and `assignedUser=someId` |
| `事件状态` | `字符串` | `ACTIVE`&#124;`COMPLETED`&#124;`VISITED`&#124;`SCHEDULE`&#124;`OVERDUE`&#124;`SKIPPED` | 指定程序中任何事件的状态 |
| `事件发生后` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 给定计划的活动开始日期 |
| `事件发生之前` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 给定计划的活动结束日期 |
| `跳过元` | `Boolean` | `true`&#124;`false` | 指示是否不在响应中包含元数据。 |
| `包含已删除` | `Boolean` | `true`&#124;`false` | 指示是否包含软删除元素 |
| `包含所有属性` | `Boolean` | `true`&#124;`false` | 指示是否包含所有TEI属性 |
| `附件` | `字符串` |  | 导出为文件时的文件名 |

查询不区分大小写。以下规则适用于查询
参数。

-   必须使用 `orgUnit` 参数（一个或多个）指定至少一个组织单位，或指定 `ouMode=ALL`。

-   只能指定 `program` 和 `trackedEntity` 参数中的一个（0 或 1）。

-   If `programStatus` is specified, then `program` must also be specified.

-   If `followUp` is specified, then `program` must also be specified.

-   If `enrollmentEnrolledAfter` or `enrollmentEnrolledBefore` is specified then `program` must also be specified.

-   过滤器项目只能指定一次。

##### 请求示例 { #example-requests }

查询与特定组织单位关联的所有实例
看起来像这样：

    GET /api/tracker/trackedEntities?orgUnit=DiszpKrYNg8

使用一个带有过滤器的属性和一个属性来查询实例
没有过滤器的属性，一个组织单位使用
后代组织单位查询方式：

    GET /api/tracker/trackedEntities?filter=zHXD5Ve1Efw:EQ:A
        &attribure=AMpUYgxuCaE&orgUnit=DiszpKrYNg8;yMCshbaVExv

对响应中包含属性且将一个属性用作过滤器的实例的查询：

    GET /api/tracker/trackedEntities?filter=zHXD5Ve1Efw:EQ:A
        &filter=AMpUYgxuCaE:LIKE:Road
        &orgUnit=DiszpKrYNg8

为过滤器指定了多个操作数和过滤器的查询
物品：

    GET /api/tracker/trackedEntities?orgUnit=DiszpKrYNg8
        &program=ur1Edk5Oe2n
        &filter=lw1SqmMlnfh:GT:150
        &filter=lw1SqmMlnfh:LT:190

要在 _IN_ 过滤器中使用多个值查询属性：

    GET /api/tracker/trackedEntities?orgUnit=DiszpKrYNg8
        &filter=dv3nChNSIxy:IN:Scott;Jimmy;Santiago

限制对属于特定事件一部分的实例的响应
program 你可以包含一个 program 查询参数：

    GET GET /api/tracker/trackedEntities?filter=zHXD5Ve1Efw:EQ:A
        &orgUnit=O6uvpzGd5pu&ouMode=DESCENDANTS
        &program=ur1Edk5Oe2n

要将程序注册日期指定为查询的一部分，请执行以下操作：

    GET /API/tracker/trackedEntities?
        &orgUnit=O6uvpzGd5pu&program=ur1Edk5Oe2n
        &enrollmentEnrolledAfter=2013-01-01
        &enrollmentEnrolledBefore=2013-09-01

要限制对特定跟踪实体实例的响应，您
可以包含跟踪实体查询参数：

    GET /api/tracker/trackedEntities?filter=zHXD5Ve1Efw:EQ:A
        &orgUnit=O6uvpzGd5pu
        &ouMode=DESCENDANTS
        &trackedEntity=cyl5vuJ5ETQ

默认情况下，实例以大小为 50 的页面返回，以更改
您可以使用 page 和 pageSize 查询参数：

    GET /api/tracker/trackedEntities?filter=zHXD5Ve1Efw:EQ:A
        &orgUnit=O6uvpzGd5pu
        &ouMode=DESCENDANTS
        &page=2&pageSize=3

您可以使用一系列运算符进行过滤：

| 操作员 | 描述                                          |
| -------- | ---------------------------------------------------- |
| `EQ`     | 等于                                             |
| `GT`     | 比...更棒                                         |
| `GE`     | 大于或等于                             |
| `LT`     | 少于                                            |
| `LE`     | 小于或等于                                |
| `NE`     | 不等于                                         |
| `LIKE`   | 喜欢（自由文本匹配）                               |
| `在`     | 等于以“;”分隔的多个值之一 |

##### 回应格式 { #response-format }

The `JSON` response can look like the following.

请注意，字段过滤（`fields=...`）支持已计划但尚未实现。

```json
{
  "instances": [
    {
      "trackedEntity": "IzHblRD2sDH",
      "trackedEntityType": "nEenWmSyUEp",
      "createdAt": "2014-03-26T15:40:36.669",
      "createdAtClient": "2014-03-26T15:40:36.669",
      "updatedAt": "2014-03-28T12:28:17.544",
      "orgUnit": "g8upMTyEZGZ",
      "inactive": false,
      "deleted": false,
      "relationships": [],
      "attributes": [
        {
          "attribute": "VqEFza8wbwA",
          "code": "MMD_PER_ADR1",
          "displayName": "Address",
          "createdAt": "2016-01-12T00:00:00.000",
          "updatedAt": "2016-01-12T00:00:00.000",
          "valueType": "TEXT",
          "value": "1061 Marconi St"
        },
        {
          "attribute": "RG7uGl4w5Jq",
          "code": "Longitude",
          "displayName": "Longitude",
          "createdAt": "2016-01-12T00:00:00.000",
          "updatedAt": "2016-01-12T00:00:00.000",
          "valueType": "TEXT",
          "value": "27.866613"
        },
        ...,
        ...,
      ],
      "enrollments": [],
      "programOwners": []
    }
  ],
  "page": 1,
  "total": 39,
  "pageSize": 1
}
```

#### Tracked Entities single object endpoint `GET /api/tracker/trackedEntities/{uid}`

该端点的目的是根据给定的 uid 检索一个被跟踪实体。

##### 请求语法 { #request-syntax }

`GET /api/tracker/trackedEntities/{uid}?program={programUid}&fields={fields}`

| 请求参数 | 类型 | 允许值 | 描述 |
| --- | --- | --- | --- |
| `uid` | `字符串` | `uid` | 返回具有指定 `uid` 的跟踪实体实例 |
| `程序` | `字符串` | `uid` | 在响应中包含程序属性（仅限用户有权访问的属性） |
| `字段` | `字符串` | **Currently:** <br>`*`&#124;`relationships`&#124;`enrollments`&#124;`events`&#124;`programOwners`<br><br>**Planned:**<br> a `String` specifying which fields to include in the response | 在响应中包含指定的子对象 |

##### 请求示例 { #example-requests }

对跟踪实体实例的查询：

    GET /api/tracker/trackedEntities/IzHblRD2sDH?program=ur1Edk5Oe2n&fields=*

##### 回应格式 { #response-format }

请注意，尽管尚未实现字段过滤（`fields=...`）支持，但当传递`fields`请求参数时，该端点仍支持返回子对象。

```json
{
    "trackedEntity": "IzHblRD2sDH",
    "trackedEntityType": "nEenWmSyUEp",
    "createdAt": "2014-03-26T15:40:36.669",
    "updatedAt": "2014-03-28T12:28:17.544",
    "orgUnit": "g8upMTyEZGZ",
    "inactive": false,
    "deleted": false,
    "relationships": [],
    "attributes": [
        {
            "attribute": "w75KJ2mc4zz",
            "code": "MMD_PER_NAM",
            "displayName": "First name",
            "createdAt": "2016-01-12T09:10:26.986",
            "updatedAt": "2016-01-12T09:10:35.884",
            "valueType": "TEXT",
            "value": "Wegahta"
        },
        {
            "attribute": "zDhUuAYrxNC",
            "displayName": "Last name",
            "createdAt": "2016-01-12T09:10:26.986",
            "updatedAt": "2016-01-12T09:10:35.884",
            "valueType": "TEXT",
            "value": "Goytiom"
        }
    ],
    "enrollments": [
        {
            "enrollment": "uT5ZysTES7j",
            "createdAt": "2017-03-28T12:28:17.539",
            "createdAtClient": "2016-03-28T12:28:17.539",
            "updatedAt": "2017-03-28T12:28:17.544",
            "trackedEntity": "IzHblRD2sDH",
            "trackedEntityType": "nEenWmSyUEp",
            "program": "ur1Edk5Oe2n",
            "status": "ACTIVE",
            "orgUnit": "g8upMTyEZGZ",
            "orgUnitName": "Njandama MCHP",
            "enrolledAt": "2020-11-10T12:28:17.532",
            "occurredAt": "2020-10-12T12:28:17.532",
            "followUp": false,
            "deleted": false,
            "events": [
                {
                    "event": "ixDYEGrNQeH",
                    "status": "ACTIVE",
                    "program": "ur1Edk5Oe2n",
                    "programStage": "ZkbAXlQUYJG",
                    "enrollment": "uT5ZysTES7j",
                    "enrollmentStatus": "ACTIVE",
                    "trackedEntity": "IzHblRD2sDH",
                    "relationships": [],
                    "scheduledAt": "2019-10-12T12:28:17.532",
                    "followup": false,
                    "deleted": false,
                    "createdAt": "2017-03-28T12:28:17.542",
                    "createdAtClient": "2016-03-28T12:28:17.542",
                    "updatedAt": "2017-03-28T12:28:17.542",
                    "attributeOptionCombo": "HllvX50cXC0",
                    "attributeCategoryOptions": "xYerKDKCefk",
                    "dataValues": [],
                    "notes": []
                }
            ],
            "relationships": [],
            "attributes": [],
            "notes": []
        }
    ],
    "programOwners": [
        {
            "orgUnit": "g8upMTyEZGZ",
            "trackedEntity": "IzHblRD2sDH",
            "program": "ur1Edk5Oe2n"
        }
    ]
}
```

### Events (`GET /api/tracker/events`) { #events-get-apitrackerevents }

两个端点专用于事件：

-   `GET /api/tracker/events`
    -   检索匹配给定条件的事件
-   `GET /api/tracker/events/{id}`
    -   检索给定提供的 id 的事件

#### Events Collection endpoint `GET /api/tracker/events` { #events-collection-endpoint-get-apitrackerevents }

根据提供的过滤器返回事件列表。

| 请求参数 | 类型 | 允许值 | 描述 |
| --- | --- | --- | --- |
| `程序` | `字符串` | `uid` | 程序标识符 |
| `程序阶段` | `字符串` | `uid` | 程序阶段标识符 |
| `程序状态` | `枚举` | `ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED` | 程序中事件的状态 |
| `跟进` | `boolean` | `true`&#124;`false` | Whether event is considered for follow up in program. Defaults to `true` |
| `trackedEntityInstance` | `字符串` | `uid` | 被跟踪实体实例的标识符 |
| `orgUnit` | `字符串` | `uid` | 组织单位标识符 |
| `ouMode` 请参阅 [ouModes](#Request-parameters-for-Organisingal-Unit-selection-mode) | `字符串` | `SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS` | 组织单位选择模式 |
| `发生之后` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 仅限比该日期更新的事件 |
| `发生在之前` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 仅限早于该日期的事件 |
| `状态` | `字符串` | `COMPLETED`&#124;`VISITED`&#124;`SCHEDULED`&#124;`OVERDUE`&#124;`SKIPPED` | 事件状态 |
| `发生之后` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 过滤该日期之后发生的事件。 |
| `发生在之前` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 过滤截至该日期发生的事件。 |
| `预定之后` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 筛选在此日期之后安排的事件。 |
| `预定之前` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 筛选截至该日期已安排的事件。 |
| `更新后` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 筛选在此日期后更新的事件。不能与 `updatedWithin` 一起使用。 |
| `更新前` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 筛选在此日期之前更新的事件。不能与 `updatedWithin` 一起使用。 |
| `更新内` | `持续时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) | Include only items which are updated within the given duration.<br><br> The format is [ISO-8601#Duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) |
| `跳过元` | `Boolean` | `true`&#124;`false` | 排除响应的元数据部分（提高性能） |
| `dataElementIdScheme` | `字符串` | `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}` | 用于导出的数据元素 ID 方案。 |
| `categoryOptionComboIdScheme` | `字符串` | `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}` | 用于导出的类别选项组合 ID 方案 |
| `orgUnitIdScheme` | `字符串` | `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}` | 用于导出的组织单位 ID 方案 |
| `programIdScheme` | `字符串` | `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}` | 用于导出的程序 ID 方案 |
| `programStageIdScheme` | `字符串` | `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}` | 用于导出的程序阶段 ID 方案 |
| `id方案` | `字符串` | `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}` | 允许同时设置数据元素、类别选项组合、orgUnit、程序和程序阶段的 ID 方案。 |
| `订单` | `字符串` | 以逗号分隔的`propName:sortDirection`形式的`OrderCriteria`列表。<br><br> 示例：`createdAt:desc`  **注意：** `propName`区分大小写，`sortDirection`不区分大小写。<br><br> | Sort the response based on given `OrderCriteria` |
| `事件` | `字符串` | 以逗号分隔的 `uid` 列表 | Filter the result down to a limited set of IDs by using event=id1;id2. |
| `跳过事件Id` | `Boolean` |  | 跳过响应中的事件标识符 |
| `attributeCc`（见注释） | `字符串` | 属性类别组合标识符（必须与 attributeCos 组合） |
| `attributeCos`（见注释） | `字符串` | 属性类别选项标识符，用 ; 分隔（必须与attributeCc结合使用） |
| `包含已删除` | `Boolean` |  | 如果为 true，软删除事件将包含在您的查询结果中。 |
| `分配的用户模式` | `字符串` | `CURRENT`&#124;`PROVIDED`&#124;`NONE`&#124;`ANY` | 指定用户选择模式 |
| `指定用户` | `字符串` | 逗号分隔列表 od `uid` | 使用`assignedUser=id1;id2`将结果筛选到分配给给定用户 ID 的有限事件集。<br><br> 只有当 assignedUserMode 为`PROVIDED`或`null`时，才会考虑该参数。<br><br> 如果出现`assignedUserMode=CURRENT`和`assignedUser=someId`等情况，API 将出错。 |

> **注意**
>
>如果查询既不包含`attributeCC`也不包含`attributeCos`，则服务器将为用户具有读取访问权限的所有属性选项组合返回事件。

##### 请求示例 { #example-requests }

查询具有特定组织单位子级的所有事件：

    GET /api/tracker/events?orgUnit=YuQRtpLP10I&ouMode=CHILDREN

查询具有特定组织单位的所有后代的所有事件，这意味着子层次结构中的所有组织单位：

    GET /api/tracker/events?orgUnit=O6uvpzGd5pu&ouMode=DESCENDANTS

使用特定程序和组织单位查询所有事件：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc

查询具有一定节目和组织单位的所有事件，
按截止日期排序
    上升：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&order=dueDate

查询某节目中活动日期最新的10个活动
和组织单位 - 按到期日降序分页和排序：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc
      &order=eventDate:desc&pageSize=10&page=1

查询具有特定节目和组织单位的所有事件
特定的跟踪实体实例：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8
      &program=eBAyeGv0exc&trackedEntityInstance=gfVxE3ALA9m

查询某个程序和组织单位较旧的所有事件
或等于
    2014-02-03：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&endDate=2014-02-03

查询具有一定节目阶段、组织单位和
2014年被跟踪实体实例：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc
      &trackedEntityInstance=gfVxE3ALA9m&occurredAfter=2014-01-01&occurredBefore=2014-12-31

Retrieve events with specified Organisation unit and Program, and use `Attribute:Gq0oWTf2DtN` as identifier scheme

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=lxAQ7Zs9VYR&idScheme=Attribute:Gq0oWTf2DtN

Retrieve events with specified Organisation unit and Program, and use UID as identifier scheme for organisation units, Code as identifier scheme for Program stages, and _Attribute:Gq0oWTf2DtN_ as the identifier scheme for the rest of the metadata with assigned attributes.

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=lxAQ7Zs9VYR&idScheme=Attribute:Gq0oWTf2DtN
      &orgUnitIdScheme=UID&programStageIdScheme=Code

##### 回应格式 { #response-format }

The `JSON` response can look like the following.

请注意，字段过滤（`fields=...`）支持已计划但尚未实现。

```json
{
    "instances": [
        {
            "href": "https://play.dhis2.org/dev/api/tracker/events/rgWr86qs0sI",
            "event": "rgWr86qs0sI",
            "status": "ACTIVE",
            "program": "kla3mAPgvCH",
            "programStage": "aNLq9ZYoy9W",
            "orgUnit": "DiszpKrYNg8",
            "orgUnitName": "Ngelehun CHC",
            "relationships": [],
            "occurredAt": "2021-10-12T00:00:00.000",
            "followup": false,
            "deleted": false,
            "createdAt": "2018-10-20T12:09:19.492",
            "updatedAt": "2018-10-20T12:09:19.492",
            "attributeOptionCombo": "amw2rQP6r6M",
            "attributeCategoryOptions": "RkbOhHwiOgW",
            "dataValues": [
                {
                    "createdAt": "2015-10-20T12:09:19.640",
                    "updatedAt": "2015-10-20T12:09:19.640",
                    "storedBy": "system",
                    "providedElsewhere": false,
                    "dataElement": "HyJL2Lt37jN",
                    "value": "12"
                },
              ...
            ],
            "notes": []
        }
    ],
    "page": 1,
    "pageSize": 1
}
```

#### Events single object endpoint `GET /api/tracker/events/{uid}`

此端点的目的是根据给定的 uid 检索一个事件。

##### 请求语法 { #request-syntax }

`GET /api/tracker/events/{uid}?fields={fields}`

| 请求参数 | 类型 | 允许值 | 描述 |
| --- | --- | --- | --- |
| `uid` | `字符串` | `uid` | 返回指定 `uid` 的事件 |
| `字段` | `字符串` | **尚未实施** | 在响应中包含指定的属性 |

##### 请求示例 { #example-requests }

事件查询：

    GET /api/tracker/events/rgWr86qs0sI

##### 回应格式 { #response-format }

```json
{
    "href": "https://play.dhis2.org/dev/api/tracker/events/rgWr86qs0sI",
    "event": "rgWr86qs0sI",
    "status": "ACTIVE",
    "program": "kla3mAPgvCH",
    "programStage": "aNLq9ZYoy9W",
    "enrollment": "Lo3SHzCnMSm",
    "enrollmentStatus": "ACTIVE",
    "orgUnit": "DiszpKrYNg8",
    "orgUnitName": "Ngelehun CHC",
    "relationships": [],
    "occurredAt": "2021-10-12T00:00:00.000",
    "followup": false,
    "deleted": false,
    "createdAt": "2018-10-20T12:09:19.492",
    "createdAtClient": "2017-10-20T12:09:19.492",
    "updatedAt": "2018-10-20T12:09:19.492",
    "attributeOptionCombo": "amw2rQP6r6M",
    "attributeCategoryOptions": "RkbOhHwiOgW",
    "dataValues": [
        {
            "createdAt": "2015-10-20T12:09:19.640",
            "updatedAt": "2015-10-20T12:09:19.640",
            "storedBy": "system",
            "providedElsewhere": false,
            "dataElement": "HyJL2Lt37jN",
            "value": "12"
        },
        {
            "createdAt": "2015-10-20T12:09:19.514",
            "updatedAt": "2015-10-20T12:09:19.514",
            "storedBy": "system",
            "providedElsewhere": false,
            "dataElement": "b6dOUjAarHD",
            "value": "213"
        },
        {
            "createdAt": "2015-10-20T12:09:19.626",
            "updatedAt": "2015-10-20T12:09:19.626",
            "storedBy": "system",
            "providedElsewhere": false,
            "dataElement": "UwCXONyUtGs",
            "value": "3"
        },
        {
            "createdAt": "2015-10-20T12:09:19.542",
            "updatedAt": "2015-10-20T12:09:19.542",
            "storedBy": "system",
            "providedElsewhere": false,
            "dataElement": "fqnXmRYo5Cz",
            "value": "123"
        },
        {
            "createdAt": "2015-10-20T12:09:19.614",
            "updatedAt": "2015-10-20T12:09:19.614",
            "storedBy": "system",
            "providedElsewhere": false,
            "dataElement": "Qz3kfeKgLgL",
            "value": "23"
        },
        {
            "createdAt": "2015-10-20T12:09:19.528",
            "updatedAt": "2015-10-20T12:09:19.528",
            "storedBy": "system",
            "providedElsewhere": false,
            "dataElement": "W7aC8jLASW8",
            "value": "12"
        },
        {
            "createdAt": "2015-10-20T12:09:19.599",
            "updatedAt": "2015-10-20T12:09:19.599",
            "storedBy": "system",
            "providedElsewhere": false,
            "dataElement": "HrJmqlBqTFG",
            "value": "3"
        }
    ],
    "notes": []
}
```

### Enrollments (`GET /api/tracker/enrollments`) { #enrollments-get-apitrackerenrollments }

两个端点专用于注册：

-   `GET /api/tracker/enrollments`
    -   检索符合给定条件的注册
-   `GET /api/tracker/enrollments/{id}`
    -   根据提供的 ID 检索注册

#### Enrollment Collection endpoint `GET /api/tracker/enrollments` { #enrollment-collection-endpoint-get-apitrackerenrollments }

返回基于过滤器的事件列表。

| 请求参数 | 类型 | 允许值 | 描述 |
| --- | --- | --- | --- |
| `orgUnit` | `字符串` | `uid` | 组织单位标识符 |
| `ouMode` 请参阅 [ouModes](#Request-parameters-for-Organisingal-Unit-selection-mode) | `字符串` | `SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL | 组织单位选择模式 |
| `程序` | `字符串` | `uid` | 程序标识符 |
| `程序状态` | `枚举` | `ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED` | 计划状态 |
| `跟进` | `boolean` | `true`&#124;`false` | 跟踪给定程序的实例状态。可以是 `true`&#124;`false` 或省略。 |
| `更新后` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 仅在此日期之后更新注册 |
| `更新内` | `持续时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 仅自给定持续时间以来更新的注册 |
| `注册后` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 仅此日期之后的注册 |
| `之前注册` | `日期时间` | [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 仅限早于该日期的注册 |
| `trackedEntityType` | `字符串` | `uid` | 跟踪实体类型的标识符 |
| `trackedEntity` | `字符串` | `uid` | 被跟踪实体实例的标识符 |
| `注册` | `字符串` | 以逗号分隔的 `uid` 列表 | Filter the result down to a limited set of IDs by using enrollment=id1;id2. |
| `包含已删除` | `Boolean` |  | 如果为 true，软删除事件将包含在您的查询结果中。 |

查询不区分大小写。以下规则适用于查询参数。

-   必须使用 `orgUnit` 参数（一个或多个）指定至少一个组织单位，或者指定 _ouMode=ALL_。

-   只能指定 _program_ 和 _trackedEntity_ 参数之一（零或一）。

-   如果指定了_programStatus_，则还必须指定_program_。

-   如果指定了 _followUp_，则还必须指定 _program_。

-   如果指定了 _enrolledAfter_ 或 _enrolledBefore_，则还必须指定 _program_。

##### 请求示例 { #example-requests }

查询与特定组织单位关联的所有注册
看起来像这样：

    GET /api/tracker/enrollments?orgUnit=DiszpKrYNg8

限制对作为特定活动一部分的注册的响应
程序，您可以包含程序查询
    范围：

    GET /api/tracker/enrollments?orgUnit=O6uvpzGd5pu&ouMode=DESCENDANTS&program=ur1Edk5Oe2n

要将程序注册日期指定为查询的一部分，请执行以下操作：

    GET /api/tracker/enrollments?&orgUnit=O6uvpzGd5pu&program=ur1Edk5Oe2n
      &enrolledAfter=2013-01-01&enrolledBefore=2013-09-01

限制对特定被跟踪实体的注册的响应
您可以包含跟踪实体查询
    范围：

    GET /api/tracker/enrollments?orgUnit=O6uvpzGd5pu&ouMode=DESCENDANTS&trackedEntity=cyl5vuJ5ETQ

要限制对特定跟踪实体的注册的响应，您可以包含跟踪实体实例查询参数，在本例中，我们将其限制为当前用户可查看的可用注册：

    GET /API/tracker/enrollments?ouMode=ACCESSIBLE&trackedEntity=tphfdyIiVL6

##### 回应格式 { #response-format }

The `JSON` response can look like the following.

请注意，字段过滤（`fields=...`）支持已计划但尚未实现。

```json
{
    "instances": [
        {
            "enrollment": "iKaBMOyq7QQ",
            "createdAt": "2017-03-28T12:28:19.812",
            "createdAtClient": "2016-03-28T12:28:19.812",
            "updatedAt": "2017-03-28T12:28:19.817",
            "trackedEntity": "PpqV8ytvW5i",
            "trackedEntityType": "nEenWmSyUEp",
            "program": "ur1Edk5Oe2n",
            "status": "ACTIVE",
            "orgUnit": "NnQpISrLYWZ",
            "orgUnitName": "Govt. Hosp. Bonthe",
            "enrolledAt": "2020-10-23T12:28:19.805",
            "occurredAt": "2020-10-07T12:28:19.805",
            "followUp": false,
            "deleted": false,
            "events": [],
            "relationships": [],
            "attributes": [],
            "notes": []
        }
    ],
    "page": 1,
    "total": 1,
    "pageSize": 5
}
```

#### Enrollments single object endpoint `GET /api/tracker/enrollments/{uid}`

此端点的目的是根据给定的 uid 检索一个注册。

##### 请求语法 { #request-syntax }

`GET /api/tracker/enrollment/{uid}`

| 请求参数 | 类型 | 允许值 | 描述 |
| --- | --- | --- | --- |
| `uid` | `字符串` | `uid` | 返回指定`uid`的注册信息 |
| `字段` | `字符串` | **尚未实施** | 在响应中包含指定的子对象 |

##### 请求示例 { #example-requests }

报名查询：

    GET /api/tracker/enrollments/iKaBMOyq7QQ

##### 回应格式 { #response-format }

```json
{
    "enrollment": "iKaBMOyq7QQ",
    "createdAt": "2017-03-28T12:28:19.812",
    "createdAtClient": "2016-03-28T12:28:19.812",
    "updatedAt": "2017-03-28T12:28:19.817",
    "trackedEntity": "PpqV8ytvW5i",
    "trackedEntityType": "nEenWmSyUEp",
    "program": "ur1Edk5Oe2n",
    "status": "ACTIVE",
    "orgUnit": "NnQpISrLYWZ",
    "orgUnitName": "Govt. Hosp. Bonthe",
    "enrolledAt": "2020-10-23T12:28:19.805",
    "occurredAt": "2020-10-07T12:28:19.805",
    "followUp": false,
    "deleted": false,
    "events": [],
    "relationships": [],
    "attributes": [],
    "notes": []
}
```

### Relationships (`GET /api/tracker/relationships`) { #relationships-get-apitrackerrelationships }

关系是跟踪器中两个实体之间的链接。可以跟踪这些实体的实体实例、注册和事件。

该端点的目的是检索对象之间的关系。

与其他跟踪对象端点不同，关系仅公开一个端点：

-   `GET /api/tracker/relationships?[tei={teiUid}|enrollment={enrollmentUid}|event={eventUid}]&fields=[fields]`

#### 请求参数{ #request-parameters }

| 请求参数 | 类型 | 允许值 | 描述 |
| --- | --- | --- | --- |
| `泰伊` | `字符串` | `uid` | 被跟踪实体实例的标识符 |
| `注册` | `字符串` | `uid` | 注册标识符 |
| `事件` | `字符串` | `uid` | 事件标识符 |
| `字段` | `字符串` |  | **尚未实现：** 仅在响应中包含指定的属性 |

以下规则适用于查询参数。

-   只能传递 `tei`,`enrollment`,`event` 中的一个参数

> **注意**
>
> 使用跟踪实体、注册或事件参数，将返回 tei、注册或事件属于关系一部分的任何关系（无论是从还是到）。只要用户有权访问，就是这样。

#### 响应示例 { #example-response }

```json
[
  {
    "relationshipType": "dDrh5UyCyvQ",
    "relationshipName": "Mother-Child",
    "relationship": "t0HIBrc65Rm",
    "bidirectional": false,
    "from": {
      "trackedEntity": {
        "trackedEntity": "vOxUH373fy5"
      }
    },
    "to": {
      "trackedEntity": {
        "trackedEntity": "pybd813kIWx"
      }
    },
    "created": "2019-04-26T09:30:56.267",
    "lastUpdated": "2019-04-26T09:30:56.267"
  },
  ...,
]
```

## 跟踪器访问控制{ #webapi_nti_access_control }

Tracker 在访问控制方面有一些不同的概念，例如共享、组织单位范围、所有权和访问级别。以下各节对不同主题进行简短介绍。

### 元数据共享{ #webapi_nti_metadata_sharing }

共享设置是标准 DHIS2 功能，适用于跟踪器和聚合元数据/数据以及仪表板和可视化项目。共享的核心是定义谁可以看到/做什么的能力。一般来说，有五种可能的共享配置——无访问、元数据读取、元数据写入、数据读取和数据写入。这些访问配置可以在用户和/或用户组级别授予（以获得更大的灵活性）。重点关注 Tracker，以下元数据及其共享设置尤为重要：数据元素、类别选项、程序、程序阶段、被跟踪实体类型、被跟踪实体属性以及与 Tracker 相关的仪表板和仪表板项。

共享设置的工作原理很简单——这些设置是在跟踪器数据导入/导出过程中强制执行的。要读取值，需要具有数据读取访问权限。如果用户需要修改数据，他/她需要具有数据写入权限。同样，如果用户需要修改元数据，则必须授予元数据写入权限。

Tracker 数据的一个关键点是需要采用整体方法。例如，用户仅具有对数据元素的读取访问权限，将无法查看数据元素值。用户需要读取数据才能访问该数据元素所属的父程序阶段和程序。与类别选项组合相同。在Tracker中，Event与AttributeOptionCombo相关，AttributeOptionCombo是由Category Options的组合而成。因此，对于读取事件数据的用户，他/她需要对构成相关事件的AttributeOptionCombo的所有类别选项和相应类别具有数据读取访问权限。如果用户仅无法访问一个类别选项或类别，则该用户无权访问整个活动。

在访问注册数据时，首先必须访问被跟踪实体。对被跟踪实体的访问是通过程序、被跟踪实体类型和被跟踪实体属性的共享设置来控制的。一旦访问注册，就可以访问事件数据，这同样取决于程序阶段和数据元素共享设置。

另一个需要考虑的重要点是如何规划对程序的不同程序阶段的访问。有时，我们可能会遇到需要向特定用户组（实验室技术人员）授予特定阶段（例如“实验室结果”）访问权限的情况。在这种情况下，我们可以提供对“实验室结果”阶段的数据写入访问权限，也可以将数据读取到一个或多个阶段，以防万一我们希望实验室技术人员读取其他医疗结果，或者如果我们认为实验室技术人员没有必要，则不提供访问权限查看实验室相关以外的数据。

总之，DHIS2 具有细粒度的共享设置，我们可以使用它来实现数据和元数据级别的访问控制机制。这些共享设置可以直接应用于用户级别或用户组级别。究竟如何应用共享设置取决于当前的用例。

有关数据共享的更多详细信息，请查看[数据共享](https://docs.dhis2.org/en/use/user-guides/dhis-core-version-master/configuring-the-system/about-sharing -of-objects.html#基于事件的程序的数据共享）。

### 组织单位范围{ #webapi_nti_ou_scope }

组织单位是 DHIS2 中最基本的对象之一。它们定义了一个允许用户记录和/或读取数据的范围。可以为用户分配三种类型的组织单位。这些是数据捕获、数据查看和跟踪器搜索。顾名思义，这些组织单元定义了允许用户进行相应操作的范围。

然而，为了进一步微调范围，DHIS2 Tracker 引入了一个我们称之为 **OrganizationUnitSelectionMode** 的概念。这种模式常用于导出Tracker对象时。例如，假设用户具有特定的跟踪器搜索范围，这是否意味着每次用户尝试搜索跟踪器、注册或事件对象时我们都必须使用此范围？或者用户是否有兴趣将搜索仅限于选定的组织单位，或整个捕获组织单位范围，等等。

用户可以通过在 API 请求中传递 ouMode 的特定值来进行微调：

_api/tracker/trackedEntities?orgUnit=UID&ouMode=specific_organisation_unit_selection_mode_

目前，有六种选择模式可用：_SELECTED、CHILDREN、DESCENDANTS、CAPTURE、ACCESSIBLE 和 ALL_。

1. **选定**：顾名思义，请求 API 预期的所有操作都会缩小到选定的组织单位。
2. **CHILDREN**：在此模式下，将使用选定的组织单元及其直接子级构建组织单元范围。
3. **后代**：在这里，选定的组织单元及其下面的所有内容，而不仅仅是直接子级，构成了数据操作宇宙。
4. **CAPTURE**：顾名思义，作为用户数据捕获分配的组织单位构成了宇宙。请注意，可以分配给用户数据捕获的三个组织单位是强制性的。如果用户没有数据视图和跟踪器搜索组织单位，系统将回退到数据捕获。这样，我们始终确定用户至少拥有一个宇宙。
5. **可访问**：从技术上讲，这与用户的跟踪器搜索组织单位的范围相同。
6. **ALL**：如果我们处理的是超级用户，那么 ALL 这个名字就非常有意义。对于超级用户来说，此范围意味着系统中可用的整个组织单位。但是，对于非超级用户，所有内容都归结为可访问的组织单位。

在跟踪器导入操作时传递这些模式没有什么意义。因为在写入跟踪器数据时，每个对象都需要附加一个特定的组织单元。然后，系统将确保每个提到的组织单位是否属于 CAPTURE 范围。如果不是，系统将简单地拒绝写入操作。

请注意，有 4 种与 Tracker 对象相关的组织单位关联类型。 TrackedEntity 有一个组织单元，通常称为注册组织单元。注册有一个与其关联的组织单位。事件还有一个与其关联的组织单位。 TrackedEntity-Program 组合还有一个所有者组织单元。

获取 Tracker 对象时，根据上下文，组织单元范围将应用于上述四个组织单元关联之一。

例如，在没有程序上下文的情况下检索 TrackedEntities 时，组织单元范围将应用于 TrackedEntity 的注册组织单元。然而，在检索 TrackedEntities（包括特定程序数据）时，组织单位范围将应用于所有者组织单位。

-   **解释它们与所有权的关系 - 链接到计划所有权**

### 跟踪器计划所有权{ #webapi_nti_ownership }

从 2.30 开始引入了一个名为 Tracker Ownership 的新概念。这为 TrackedEntity - 程序组合引入了新的组织单位关联。我们将其称为程序上下文中 TrackedEntity 的所有者（或拥有）组织单元。所有者组织单元用于决定读写与程序相关的跟踪器数据时的访问权限。这与程序的[访问级别](#webapi_nti_access_level) 配置一起决定程序相关数据（注册和事件）的访问行为。如果 TrackedEntity-Program 组合的相应所有者组织单位属于用户的组织单位范围（搜索/捕获），则用户可以访问 TrackedEntity 的计划数据。对于配置了访问级别 _OPEN_ 或 _AUDITED_ 的计划，所有者组织单位必须位于用户的搜索范围内。对于配置了访问级别 _PROTECTED_ 或 _CLOSED_ 的程序，所有者组织单位必须位于用户的捕获范围内，才能访问特定跟踪实体的相应程序数据。

#### 跟踪器所有权优先：打破常规 { #webapi_nti_tracker_ownership_override }

对于访问级别配置为 _PROTECTED_ 的程序，可以临时覆盖此所有权权限。如果用户指定了访问 TrackedEntity-Program 数据的理由，任何用户都可以临时访问与程序相关的数据。这种临时访问行为被称为_breaking the glass_。目前，允许临时访问的时间为 3 小时。DHIS2 将根据用户指定的理由对 "打破玻璃 "进行审核。临时访问已配置为_CLOSED_访问级别的程序是不可能的。要打破 TrackedEntity-Program 组合的玻璃，可使用以下 POST 请求：

    /API/33/tracker/ownership/override?trackedEntityInstance=DiszpKrYNg8
      &program=eBAyeGv0exc&reason=patient+showed+up+for+emergency+care

#### 跟踪器所有权转移 { #webapi_nti_tracker_ownership_transfer }

可以将 TrackedEntity-Program 的所有权从一个组织单位转移到另一个组织单位。这对于患者转诊或迁移非常有用。只有拥有所有权访问权限（或通过打破玻璃进行临时访问）的用户才能转让所有权。要将 TrackedEntity-Program 的所有权转移到另一个组织单位，可以使用以下 PUT 请求：

    /API/33/tracker/ownership/transfer?trackedEntityInstance=DiszpKrYNg8
      &program=eBAyeGv0exc&ou=EJNxP3WreNP

### 访问级别 { #webapi_nti_access_level }

DHIS2 以额外级别的保护对待跟踪器数据。除了通过共享设置进行元数据和数据保护的标准功能外，Tracker 数据还通过附加访问级别保护机制进行屏蔽。目前，可以为程序配置四种访问级别：开放、审核、受保护和关闭。

仅当用户尝试与程序数据（即注册和事件数据）交互时才会触发这些访问级别。程序的不同访问级别配置是程序数据的开放（或封闭）程度。请注意，仍然尊重所有其他共享设置，并且访问级别只是额外的访问控制层。以下是可以为程序配置的四个访问级别的简短描述。

1. 开放：此访问级别是访问级别中限制最少的。如果所有者组织单位属于用户的搜索范围，则用户可以访问和修改 OPEN 程序内的数据。通过此访问级别，可以访问和修改捕获范围之外的数据，而无需任何理由或后果。
2. 已审核：这与开放访问级别相同。这里的区别在于，系统会自动在特定用户访问的数据上添加审核日志条目。
3. 受保护：此访问级别的限制稍微严格一些。仅当所有者组织单位属于用户的捕获范围时，用户才能访问受保护程序内的数据。但是，在搜索范围内仅具有所有者组织单位的用户可以通过[打破玻璃](#webapi_nti_tracker_ownership_override) 获得临时所有权。用户必须提供他们访问手头数据的理由。然后系统将记录理由和访问审核的日志，并为用户提供 3 小时的临时访问权限。请注意，打破玻璃时，所有者组织单位保持不变，只有打破玻璃的用户才能获得临时访问权限。
4. 关闭：这是最受限制的访问级别。如果所有者组织单位不属于用户的捕获范围，则配置为 CLOSED 访问级别的程序下记录的数据将无法访问。在此配置中也不可能打破玻璃或获得临时所有权。请注意，仍然可以将所有权转移给另一个组织单位。只有有权访问数据的用户才能将 TrackedEntity-Program 组合的所有权转让给另一个组织单位。如果所有权转移，则所有者组织单位会更新。
