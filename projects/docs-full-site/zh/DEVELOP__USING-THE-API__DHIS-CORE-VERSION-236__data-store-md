---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.36/src/developer/web-api/data-store.md"
revision_date: "2021-06-14"
tags:
    - Develop
    - DHIS 核心版本 2.36
---

# 数据存储 { #data-store }

## 数据存储 { #webapi_data_store }

使用 _dataStore_ 资源，开发人员可以为其应用程序存储任意数据。对数据存储密钥的访问基于其共享设置。默认情况下，创建的所有密钥均可公开访问（读取和写入）。此外，如果应用程序保留了命名空间，则对数据存储命名空间的访问仅限于用户对相应应用程序的访问。例如，有权访问“sampleApp”应用程序的用户也将能够使用数据存储中的sampleApp 命名空间。如果未保留命名空间，则无需特定访问权限即可使用它。

    / api / 33 / dataStore

### 数据存储结构 { #webapi_data_store_structure }

数据存储条目由命名空间、键和值组成。这
命名空间和键的组合是唯一的。值数据类型为 JSON。

 <table>
 <caption> 数据存储结构 </caption>
 <colgroup>
 <col style="width: 22%" />
 <col style="width: 40%" />
 <col style="width: 36%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 项目 </th>
 <th> 说明 </th>
 <th> 数据类型 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 命名空间 </td>
 <td> 条目组织的命名空间。 </td>
 <td> 字符串 </td>
 </tr>
 <tr class="even">
 <td> 密钥 </td>
 <td> 用于识别值的键。 </td>
 <td> 字符串 </td>
 </tr>
 <tr class="odd">
 <td> 值 </td>
 <td> 保存条目信息的值。 </td>
 <td> JSON </td>
 </tr>
 <tr class="even">
 <td> 加密 </td>
 <td> 指示是否应加密给定密钥的值 </td>
 <td> 布尔值 </td>
 </tr>
 </tbody>
 </table>

### 获取键和名称空间 { #webapi_data_store_get_keys_and_namespaces }

有关所有现有名称空间的列表：

    GET /api/33/dataStore

清单示例curl请求：

```bash
curl "play.dhis2.org/demo/api/33/dataStore" -u admin:district
```

响应示例：

```json
[
  "foo",
  "bar"
]
```

有关命名空间中所有键的列表：

    GET /api/33/dataStore/<namespace>

清单示例curl请求：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo" -u admin:district
```

响应示例：

```json
[
  "key_1",
  "key_2"
]
```

要从名称空间检索现有键的值：

    GET /api/33/dataStore/<namespace>/<key>

卷曲请求检索示例：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo/key_1"-u admin:district
```

响应示例：

```json
{
    "foo": "bar"
}
```

要从名称空间检索现有键的元数据：

    GET /api/33/dataStore/<namespace>/<key>/metaData

卷曲请求检索示例：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo/key_1/metaData" -u admin:district
```

响应示例：

```json
{
  "id": "dsKeyUid001",
  "created": "...",
  "user": {...},
  "namespace": "foo",
  "key": "key_1"
}
```

### 创造价值 { #webapi_data_store_create_values }

为命名空间创建新的键和值：

    POST / api / 33 / dataStore / <namespace> / <key>

假设有效的JSON有效负载，创建示例的curl请求：

```bash
curl "https://play.dhis2.org/demo/api/33/dataStore/foo/key_1" -X POST
  -H "Content-Type: application/json" -d "{\"foo\":\"bar\"}" -u admin:district
```

响应示例：

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 201,
    "status": "OK",
    "message": "Key 'key_1' created."
}
```

如果您需要加密存储的数据（例如用户
凭据或类似的），您可以像这样将查询附加到 url：

    GET /api/33/dataStore/<namespace>/<key>?encrypt=true

### 更新值 { #webapi_data_store_update_values }

更新命名空间中存在的密钥：

    PUT /api/33/dataStore/<namespace>/<key>

假设有效的JSON有效负载，示例curl请求更新：

```bash
curl "https://play.dhis2.org/demo/api/33/dataStore/foo/key_1" -X PUT -d "[1, 2, 3]"
  -H "Content-Type: application/json" -u admin:district
```

响应示例：

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Key 'key_1' updated."
}
```

### 删除键 { #webapi_data_store_delete_keys }

要从名称空间中删除现有键：

    删除/ api / 33 / dataStore / <namespace> / <key>

删除示例curl请求：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo/key_1" -X DELETE -u admin:district
```

响应示例：

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Key 'key_1' deleted from namespace 'foo'."
}
```

要删除名称空间中的所有键：

    删除/ api / 33 / dataStore / <namespace>

删除示例curl请求：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo" -X DELETE -u admin:district
```

响应示例：

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Namespace 'foo' deleted."
}
```

### 共享数据存储区密钥 { #webapi_data_store_sharing }

数据存储键的共享遵循与其他元数据共享相同的原则（请参阅
[分享](#webapi_sharing))。

要获取特定数据存储区密钥的共享设置，请执行以下操作：

    GET /api/33/sharing?type=dataStore&id=<uid>

其中数据存储键的 id 来自该键的 `/metaData` 端点：

    /api/33/dataStore/<namespace>/<key>/metaData

要修改特定数据存储项的共享设置：

    POST / api / 33 / sharing？type = dataStore＆id = <uid>

具有以下要求：

```json
{
  "object": {
    "publicAccess": "rw------",
    "externalAccess": false,
    "user": {},
    "userAccesses": [],
    "userGroupAccesses": [
      {
        "id": "hj0nnsVsPLU",
        "access": "rw------"
      },
      {
        "id": "qMjBflJMOfB",
        "access": "r-------"
      }
    ]
  }
}
```

## 用户数据存储 { #webapi_user_data_store }

除了系统所有用户共享的_dataStore_之外，还可以使用基于用户的数据存储。存储到 _userDataStore_ 的数据与各个用户相关联，因此每个用户可以在相同的命名空间和键组合上拥有不同的数据。针对 _userDataStore_ 的所有调用都将与登录的用户关联。这意味着人们只能查看、更改、删除和添加与当前登录用户关联的值。

    / api / 33 / userDataStore

### 用户数据存储结构 { #webapi_user_data_store_structure }

_userDataStore_ 由用户、命名空间、键和关联值组成。用户、命名空间和密钥的组合是唯一的。

 <table>
 <caption>用户数据存储结构</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>项目</th>
 <th>说明</th>
 <th>数据类型</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>用户</td>
 <td>用户此数据与</td>相关联
 <td>字符串</td>
 </tr>
 <tr class="even">
 <td>命名空间</td>
 <td>密钥所属的名称空间</td>
 <td>字符串</td>
 </tr>
 <tr class="odd">
 <td>键</td>
 <td>密钥a值存储在</td>上
 <td>字符串</td>
 </tr>
 <tr class="even">
 <td>值</td>
 <td>存储的值</td>
 JSON <td> </td>
 </tr>
 <tr class="odd">
 <td>加密的</td>
 <td>指示是否应加密该值</td>
 <td>布尔值</td>
 </tr>
 </tbody>
 </table>

### 获取名称空间 { #webapi_user_data_store_get_namespaces }

返回所有现有名称空间的数组

    GET /api/33/userDataStore

请求示例：

```bash
curl -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/33/userDataStore"
```

```json
[
  "foo",
  "bar"
]
```

### 取得金钥 { #webapi_user_data_store_get_keys }

返回给定名称空间中所有现有键的数组

    GET /api/userDataStore/<namespace>

请求示例：

```bash
curl -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/33/userDataStore/foo"
```

```json
[
  "key_1",
  "key_2"
]
```

### 获取价值 { #webapi_user_data_store_get_values }

返回给定名称空间和键的值

    GET /api/33/userDataStore/<namespace>/<key>

请求示例：

```bash
curl -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
    "some": "value"
}
```

### 创造价值 { #webapi_user_data_store_create_values }

向给定名称空间中的给定键添加新值。

    POST / api / 33 / userDataStore / <namespace> / <key>

请求示例：

```bash
curl -X POST -H "Content-Type: application/json" -u admin:district -d "['some value']"
  "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
    "httpStatus": "Created",
    "httpStatusCode": 201,
    "status": "OK",
    "message": "Key 'bar' in namespace 'foo' created."
}
```

如果您需要加密该值（例如用户凭据
等等）您可以像这样将查询附加到网址：

    GET /api/33/userDataStore/<namespace>/<key>?encrypt=true

### 更新值 { #webapi_user_data_store_update_values }

更新现有值

    PUT /api/33/userDataStore/<namespace>/<key>

请求示例：

```bash
curl -X PUT -H "Content-Type: application/json" -u admin:district -d "['new value']"
  "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
    "httpStatus": "Created",
    "httpStatusCode": 201,
    "status": "OK",
    "message": "Key 'bar' in namespace 'foo' updated."
}
```

### 删除键 { #webapi_user_data_store_delete_key }

删除金钥

    删除/ api / 33 / userDataStore / <namespace> / <key>

请求示例：

```bash
curl -X DELETE -u admin:district "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Key 'bar' deleted from the namespace 'foo."
}
```

### 删除名称空间 { #webapi_user_data_store_delete_namespace }

删除给定名称空间中的所有键

    删除/ api / 33 / userDataStore / <namespace>

请求示例：

```bash
curl -X DELETE -u admin:district "play.dhis2.org/api/33/userDataStore/foo"
```

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "All keys from namespace 'foo' deleted."
}
```
