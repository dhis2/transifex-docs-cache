---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.32/src/commonmark/en/content/developer/web-api.md"
revision_date: '2020-03-31'
---

# 网络API { #webapi } 

 <!--DHIS2-SECTION-ID:webapi-->

Web API 是一个组件，它使外部系统成为可能
访问和操作存储在 DHIS2 实例中的数据。更多的
准确地说，它为广泛的
为第三方等应用程序公开数据和服务方法
软件客户端、门户网站和内部 DHIS2 模块。

## 介绍 { #webapi_introduction } 

 <!--DHIS2-SECTION-ID:webapi_introduction-->

Web API 遵循 REST 背后的许多原则
建筑风格。提几个重要的：

1.  基本构建块称为*资源*。
    资源可以是任何暴露在 Web 上的东西，从文档到
    业务流程 - 客户可能想要与之交互的任何内容。
    可以检索或交换资源的信息方面
    通过资源*表示*。表示是一个视图
    任何给定时间的资源状态。例如，*reportTable*
    DHIS2 中的资源代表汇总数据的表格报告
    一组特定的参数。该资源可以在
    各种表示格式，包括 HTML、PDF 和 MS Excel。

2.  所有资源都可以由 *URI* 唯一标识（也称为
    到* URL *）。所有资源都有默认表示。你可以
    通过以下方式表明您对特定表示感兴趣
    提供 *Accept* HTTP 标头、文件扩展名或 *格式*
    查询参数。所以为了检索一个的 PDF 表示
    报告表您可以提供 *Accept: application/pdf* 标题或
    将 *.pdf* 或 *?format=pdf* 附加到您的请求 URL。

3.  与 API 的交互需要正确使用 HTTP *方法* 或
    *动词*。这意味着对于资源，您必须发出 *GET*
    当你想要检索它时请求，当你想要时 *POST* 请求
    要创建一个，* PUT *（当您要更新时），* DELETE *（当您要更新时）
    你想删除它。所以如果你想检索默认值
    报告表的表示，您可以向例如发送 GET 请求
    */reportTable/iu8j/hYgF6t*，其中最后一部分是报告表
    标识符。

4.  资源表示形式是*可链接的*，这意味着
    陈述宣传与该相关的其他资源
    当前通过将链接嵌入到自身中（请注意，您
    需要在您的字段过滤器中请求 *href* 才能使其正常工作。
    这个特性极大地提高了系统的可用性和健壮性。
    API，我们稍后会看到。例如，您可以轻松导航到
    与报告表相关的指标
    *reportTable* 资源通过使用您的嵌入式链接
    首选表示格式。

虽然所有这些听起来可能很复杂，但 Web API 实际上非常
使用简单。我们将继续在一个实际的例子中
分钟。

## 认证方式 { #webapi_authentication } 

 <!--DHIS2-SECTION-ID:webapi_authentication-->

DHIS2 Web API 支持两种身份验证协议，Basic
身份验证和 OAuth 2. 您可以验证并获取有关
通过向以下对象发出 GET 请求，当前已通过身份验证的用户
网址：

    /api/26/我

以及有关权限的更多信息（以及如果用户有一定的权限）
权限）通过使用端点：

    /api/26/me/当局
    /api/26/me/authorities/ALL

### 基本认证 { #webapi_basic_authentication } 

 <!--DHIS2-SECTION-ID:webapi_basic_authentication-->

DHIS2 Web API 支持*基本身份验证*。基本身份验证
是一种客户端通过 HTTP 向 Web 发送登录凭据的技术
服务器。从技术上讲，用户名后面附加一个冒号和
密码，Base64 编码，前缀为 Basic 并作为值提供
*授权* HTTP 标头的。更正式地说是`
授权：基本
base64encode(用户名:密码)` 大多数网络感知开发
框架提供了使用 Basic 进行身份验证的支持，例如
Apache HttpClient、Spring RestTemplate 和 C# WebClient。一个重要的
请注意，此身份验证方案不提供安全性，因为
用户名和密码以纯文本形式发送，可以轻松解码。
仅当服务器使用 SSL/TLS (HTTPS) 时，才建议使用它
加密自身和客户端之间的通信。认为这是一个困难
提供与 Web API 的安全交互的要求。

### 两因素验证 { #webapi_2fa } 

 <!--DHIS2-SECTION-ID:webapi_2fa-->

自 2.30 起，DHIS2 支持双因素身份验证。这意味着你
可以在您的用户设置中启用 2FA，这意味着您将
登录时提示输入 2FA 代码。您可以在此处阅读有关 2FA 的更多信息：

    https://www.google.com/landing/2step/

### OAuth2 { #webapi_oauth2 }

 <!--DHIS2-SECTION-ID:webapi_oauth2-->

DHIS2 支持 OAuth2 身份验证协议。 OAuth2是一个开放的
授权标准，允许第三方客户端
代表 DHIS2 用户进行连接并获取可重复使用的不记名令牌
对 Web API 的后续请求。 DHIS 2 不支持细粒度
OAuth2 角色而是根据用户角色提供应用程序访问权限
DHIS2 用户的。

您想要允许 OAuth 2 身份验证的每个客户端都必须是
在 DHIS2 中注册。要添加新的 OAuth2 客户端，请转至 *Apps \> Settings
\> OAuth2 客户端*，单击添加新并输入所需的客户端名称并
补助金类型。

#### 使用Web API添加客户端 { #adding-a-client-using-the-web-api } 

可以通过 Web API 添加 OAuth2 客户端。举个例子，我们可以
发送这样的有效负载：

    {
       "name" : "OAuth2 Demo Client",
       "cid" : "demo",
       "secret" : "1e6db50c-0fee-11e5-98d0-3c15c2c6caf6",
       "grantTypes" : [
          "password",
          "refresh_token",
          "authorization_code"
       ],
       "redirectUris" : [
          "http://www.example.org"
       ]
    }

    SERVER="https://play.dhis2.org/dev"
    curl -X POST -H "Content-Type: application/json" -d @client.json
      -u admin:district $SERVER/api/oAuth2Clients

我们将使用此客户端作为下一个赠款类型示例的基础。

#### 授权类型密码 { #webapi_oauth2_password } 

 <!--DHIS2-SECTION-ID:webapi_oauth2_password-->

所有授权类型中最简单的是 **密码** 授权类型。这
授予类型与基本身份验证类似，因为它
要求客户端收集用户的用户名和密码。作为一个
例如我们可以使用我们的演示服务器：

    服务器=“https://play.dhis2.org/dev”
    秘密=“1e6db50c-0fee-11e5-98d0-3c15c2c6caf6”

    curl -X POST -H "接受：application/json" -u demo:$SECRET $SERVER/uaa/oauth/token
    -d grant_type=密码 -d 用户名=admin -d 密码=地区

这将给您类似的响应：

    {
       "expires_in" : 43175、
       "scope" : "ALL"、
       "access_token" : "07fc551c-806c-41a4-9a8c-10658bd15435"、
       "refresh_token" : "a4e4de45-4743-481d-9345-2cfe34732fcc"、
       "token_type"（令牌类型）："bearer"（不记名令牌
    }

现在，我们将重点关注 **access\_token**，这就是我们要处理的内容
将用作我们的身份验证（承载）令牌。作为一个例子，我们将得到
使用我们的令牌的所有数据元素：

    服务器=“https://play.dhis2.org/dev”
    curl -H“授权：承载07fc551c-806c-41a4-9a8c-10658bd15435”$SERVER/api/26/dataElements.json

#### 授予类型refresh \ _token { #webapi_refresh_token } 

 <!--DHIS2-SECTION-ID:webapi_refresh_token-->

一般来说，访问令牌的有效性有限。你可以看看
在上一个示例中响应的 **expires\_in** 属性处
了解令牌何时过期。要获得新的**访问\_令牌**，您
可以再次往返服务器并使用 **refresh\_token**
这允许您获得更新的令牌，而无需询问
再次输入用户凭据。

    服务器=“https://play.dhis2.org/dev”
    秘密=“1e6db50c-0fee-11e5-98d0-3c15c2c6caf6”
    REFRESH_TOKEN="a4e4de45-4743-481d-9345-2cfe34732fcc"

    curl -X POST -H "接受：application/json" -u demo:$SECRET $SERVER/uaa/oauth/token
    -d grant_type=refresh_token -d refresh_token=$REFRESH_TOKEN

响应将与您获得令牌启动时完全相同
和。

#### 授予类型授权\_code { #webapi_authorization_code }

 <!--DHIS2-SECTION-ID:webapi_authorization_code-->

如果您不想，建议使用授权代码授予类型
外部存储用户凭据。它允许 DHIS2 收集
用户名/密码直接来自用户而不是客户端
收集它们，然后代表用户进行身份验证。请
意识到这种方法使用客户端的 **redirect\_uris** 部分
有效负载。

第 1 步：使用浏览器访问此 URL（如果您有多个
重定向 URI，您可能需要添加
\&redirect\_uri=http://www.example.org) :

    服务器=“https://play.dhis2.org/dev”

    $SERVER/uaa/oauth/authorize?client_id=demo&response_type=code

第2步：用户成功登录并接受您的
客户端访问，它将重定向回您的重定向uri，如下所示：

    http://www.example.org/?code=XYZ

步骤3：这一步与我们在密码授予类型中所做的类似，
使用给定的代码，我们现在将请求访问令牌：

    SERVER="https://play.dhis2.org/dev"
    SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"

    curl -X POST -u demo:$SECRET -H "Accept: application/json" $SERVER/uaa/oauth/token
      -d grant_type=authorization_code -d code=XYZ

## 错误和信息消息 { #webapi_error_info_messages } 

 <!--DHIS2-SECTION-ID:webapi_error_info_messages-->

Web API 对所有错误/警告和
信息性消息：

    {
       "httpStatus" : "禁止",
       "message" : "您没有适当的权限来读取此类型的对象。",
       “http状态代码”：403，
       “状态”：“错误”
    }

这里我们可以从消息中看到用户尝试访问
我无法访问的资源。它使用http状态代码403，
http 状态消息 **禁止** 和描述性消息。

<table>
<caption>WebMessage 属性</caption>
<colgroup>
<col style="width: 13%" />
<col style="width: 86%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>httpStatus</td>
<td>此响应的 HTTP 状态信息，更多信息请参见 RFC 2616（第 10 节）。</td>
</tr>
<tr class="even">
<td>httpStatusCode</td>
<td>此响应的 HTTP 状态代码，详见 RFC 2616（第 10 节）。</td>
</tr>
<tr class="odd">
<td>状态</td>
<td>DHIS2 状态，可能的值为<em>OK</em> |<em>WARNING</em> |<em>ERROR</em> ，其中<strong>OK</strong> 表示一切成功，<strong>ERROR</strong> 表示操作未完成，<strong>WARNING</strong> 表示操作部分成功，如果消息中包含<strong>response</strong> 属性，请查看该属性以获取更多信息。</td>
</tr>
<tr class="even">
<td>信息</td>
<td>用户友好型信息，说明操作是否成功。</td>
</tr>
<tr class="odd">
<td>devMessage</td>
<td>技术性更强、对开发人员更友好的信息（目前未使用）。</td>
</tr>
<tr class="even">
<td>响应</td>
<td>未来扩展 WebMessage 格式的扩展点。开始使用时将记录在案。</td>
</tr>
</tbody>
</table>

## 日期和期间格式 { #webapi_date_perid_format } 

 <!--DHIS2-SECTION-ID:webapi_date_perid_format-->

在整个Web API中，我们指的是日期和期间。日期格式
是：

    年-月-日

例如，如果您想表达2014年3月20日的情况，则必须使用
* 2014-03-20 *。

下表中描述了期间格式（也可在
API端点* / api / periodTypes *）

<table style="width:100%;">
<caption>周期格式</caption>
<colgroup>
<col style="width: 24%" />
<col style="width: 21%" />
<col style="width: 18%" />
<col style="width: 35%" />
</colgroup>
<thead>
<tr class="header">
<th>时间间隔</th>
<th>格式</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>日</td>
<td><em>yyyyMMdd</em></td>
<td>20040315</td>
<td>2004 年 3 月 15 日</td>
</tr>
<tr class="even">
<td>周次</td>
<td><em>yyyy</em>W<em>n</em></td>
<td>2004W10</td>
<td>2004 年第 10 周</td>
</tr>
<tr class="odd">
<td>周三</td>
<td><em>yyyy</em>WedW<em>n</em></td>
<td>2015WedW5</td>
<td>第 5 周，周三开始</td>
</tr>
<tr class="even">
<td>周四</td>
<td><em>yyyy</em>ThuW<em>n</em></td>
<td>2015ThuW6</td>
<td>第 6 周，周四开始</td>
</tr>
<tr class="odd">
<td>周 星期六</td>
<td><em>yyyy</em>SatW<em>n</em></td>
<td>2015SatW7</td>
<td>第 7 周星期六开始</td>
</tr>
<tr class="even">
<td>星期日</td>
<td><em>yyyy</em>SunW<em>n</em></td>
<td>2015SunW8</td>
<td>第 8 周，周日开始</td>
</tr>
<tr class="odd">
<td>双周</td>
<td><em>yyyy</em>BiW<em>n</em></td>
<td>2015BiW1</td>
<td>第 1-2 周 20015</td>
</tr>
<tr class="even">
<td>月</td>
<td><em>yyyyMM</em></td>
<td>200403</td>
<td>2004 年 3 月</td>
</tr>
<tr class="odd">
<td>双月</td>
<td><em>yyyyMM</em>B</td>
<td>200401B</td>
<td>2004 年 1-2 月</td>
</tr>
<tr class="even">
<td>季度</td>
<td><em>yyyy</em>Q<em>n</em></td>
<td>2004Q1</td>
<td>2004 年 1 月至 3 月</td>
</tr>
<tr class="odd">
<td>六个月</td>
<td><em>yyyy</em>S<em>n</em></td>
<td>2004S1</td>
<td>2004 年 1-6 月</td>
</tr>
<tr class="even">
<td>半年四月</td>
<td><em>yyyy</em>AprilSn</td>
<td>2004年4月1日</td>
<td>2004年4月至9月</td>
</tr>
<tr class="odd">
<td>年份</td>
<td>年</td>
<td>2004</td>
<td>2004</td>
</tr>
<tr class="even">
<td>财政年度 4 月</td>
<td>年4月</td>
<td>2004年4月</td>
<td>2004年4月-2005年3月</td>
</tr>
<tr class="odd">
<td>财政年度 7 月</td>
<td>年7月</td>
<td>2004年7月</td>
<td>2004 年 7 月至 2005 年 6 月</td>
</tr>
<tr class="even">
<td>财政年度 10 月</td>
<td>年10月</td>
<td>2004年10月</td>
<td>2004年10月-2005年9月</td>
</tr>
</tbody>
</table>


### 相对时期 { #webapi_date_relative_period_values } 

 <!--DHIS2-SECTION-ID:webapi_date_relative_period_values-->


在API的某些部分（例如分析资源），您可以
除了固定期间（如上定义）外，还利用相对期间。
相对期间是相对于当前日期的，并且允许例如
用于创建动态报告。可用的相对期间值为：

    THIS_WEEK，LAST_WEEK，LAST_4_WEEKS，LAST_12_WEEKS，LAST_52_WEEKS，
    THIS_MONTH，LAST_MONTH，THIS_BIMONTH，LAST_BIMONTH，THIS_QUARTER，LAST_QUARTER，
    THIS_SIX_MONTH，LAST_SIX_MONTH，MONTHS_THIS_YEAR，QUARTERS_THIS_YEAR，
    THIS_YEAR，MONTHS_LAST_YEAR，QUARTERS_LAST_YEAR，LAST_YEAR，LAST_5_YEARS，LAST_12_MONTHS，
    LAST_3_MONTHS，LAST_6_BIMONTHS，LAST_4_QUARTERS，LAST_2_SIXMONTHS，THIS_FINANCIAL_YEAR，
    LAST_FINANCIAL_YEAR，LAST_5_FINANCIAL_YEARS

## 标识符方案 { #webapi_identifier_schemes } 

 <!--DHIS2-SECTION-ID:webapi_identifier_schemes-->

本节提供标识符方案概念的解释。
标识符方案用于将元数据对象映射到其他元数据
在导入期间，并将元数据呈现为导出的一部分。请注意
并非所有方案都适用于所有 Web-API 调用，也并非所有方案都适用
方案可用于输入和输出（这在
解释各种 Web API 的部分）。

列出了可用的全套标识符方案对象类型
下面，使用在查询中使用的属性名称：

  - 方案

  - 数据元素标识方案

  - 类别选项组合 ID 方案

  - 组织单位 ID 方案

  - 程序标识方案

  - 程序阶段标识方案

  - 跟踪实体 ID 方案

  - trackedEntityAttributeIdScheme

通用 idScheme 适用于所有类型的对象。有可能
被特定的对象类型覆盖。

所有参数的默认方案是 UID（稳定的 DHIS2
身份标识）。支持的标识符方案在
下表。

 <table>
 <caption>方案值</caption>
 <colgroup>
 <col style="width: 14%" />
 <col style="width: 85%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>方案</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ID，UID </td>
 <td>在DHIS2稳定标识符上匹配，这是默认的ID方案。 </td>
 </tr>
 <tr class="even">
 <td>代码</td>
 DHIS2代码上的<td>匹配，主要用于与外部系统交换数据。 </td>
 </tr>
 <tr class="odd">
 <td>名称</td>
 <td>与DHIS2名称匹配，请不要使用与<em> object.name </em>相同的名称，而不是翻译后的名称。同样不是说名称并不总是唯一的，在这种情况下就不能使用它们。 </td>
 </tr>
 <tr class="even">
 <td>属性：ID </td>
 <td>匹配元数据属性，此属性需要分配给您要匹配的类型，并且unique属性设置为<em> true </em>。此方法的主要用途还在于与外部系统交换数据，与<em>代码</em>相比，它具有一些优点，因为可以添加多个属性，因此可以用于与多个系统同步。 </td>
 </tr>
 </tbody>
 </table>

请注意，标识符方案不是一个独立的功能，但需要
与数据值导入、元数据导入等资源结合使用。

例如，指定 CODE 作为通用 id 方案并覆盖
使用 UID 作为组织单位 ID 方案，您可以使用这些查询
参数：

    ？idScheme = CODE＆orgUnitIdScheme = UID

再举一个例子，为组织单位 id 指定一个属性
方案，数据元素 id 方案的代码并使用默认 UID id
您可以使用这些参数的所有其他对象的方案：

    ？orgUnitIdScheme =属性：j38fk2dKFsG＆dataElementIdScheme = CODE

## 浏览Web API { #webapi_browsing_the_web_api } 

 <!--DHIS2-SECTION-ID:webapi_browsing_the_web_api-->

浏览Web API的入口点是*/api/*。这个资源
提供所有可用资源的链接。四种资源表示
所有资源的格式一致：HTML、XML、JSON
和 JSONP。有些资源会有其他可用格式，例如 MS
Excel、PDF、CSV 和 PNG。要从 Web 浏览器探索 API，请导航
到 */api/* 入口点并点击链接到您想要的
资源，例如*/api/dataElements*。对于所有资源
返回元素列表某些查询参数可用于修改
响应：

 <table style="width:100%;">
 <caption>查询参数 </caption>
 <colgroup>
 <col style="width: 11%" />
 <col style="width: 20%" />
 <col style="width: 12%" />
 <col style="width: 54%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
<th> 选项值</th>
<th> 默认选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>分页</td>
 <td>是|假</td>
 <td>是</td>
 <td>指示是否返回页面中的元素列表。 </td>
 </tr>
 <tr class="even">
 <td>页面</td>
 <td>编号</td>
 <td> 1 </td>
 <td>定义要返回的页码。 </td>
 </tr>
 <tr class="odd">
 <td>页面大小</td>
 <td>编号</td>
 <td> 50 </td>
 <td>定义每个页面要返回的元素数。 </td>
 </tr>
 <tr class="even">
 <td>订单</td>
 <td>property:asc/iasc/desc/ides</td>
  <td></td>
 <td>使用指定的顺序对输出进行排序，仅支持持久和简单的属性（不支持集合，idObjects等）。 iasc和idec是不区分大小写的排序。</td> 
 </tr>
 </tbody>
 </table>

如何使用这些参数获取完整列表的示例
XML 响应格式的数据元素组是：

    /api/26/dataElementGroups.xml?links=false&paging=false

您可以在name属性上查询元素，而不必返回
使用* query *查询变量的元素的完整列表。在这个例子中
我们查询名称中带有“贫血”一词的所有数据元素：

    /api/26/dataElements?query=贫血

您可以像这样获取特定页面和对象的页面大小：

    /api/26/dataElements.json?page=2&pageSize=20

您可以像这样完全禁用分页：

    /api/26/indicatorGroups.json?paging=false

要基于特定属性对结果进行排序：

    /api/26/indicators.json?order=shortName:desc

您可以通过以下方式在所有对象类型中根据对象的 ID 查找对象
*identifiableObjects* 资源：

    /api/26/identifyingObjects/<id>

### 翻译 { #webapi_translation } 

 <!--DHIS2-SECTION-ID:webapi_translation-->

DHIS2 支持数据库内容的翻译，例如数据元素、
指标和计划。 Web API 中的所有元数据对象都具有
用于显示/UI 目的的属性，其中包括
*显示名称*、*显示短名称*和*显示描述*。

 <table>
 <caption>翻译选项</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 16%" />
 <col style="width: 62%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>值</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>翻译</td>
 <td>是|假</td>
 <td>转换元数据输出中的display *属性（数据元素的displayName，displayShortName，displayDescription和displayFormName）。默认值为true。 </td>
 </tr>
 <tr class="even">
 <td>语言环境</td>
 <td>使用</td>的语言环境
 <td>使用指定的语言环境转换元数据输出（需要translate = true）。 </td>
 </tr>
 </tbody>
 </table>

### 翻译API { #webapi_translation_api } 

 <!--DHIS2-SECTION-ID:webapi_translation_api-->

对象的翻译被渲染为对象本身的一部分
在 *translations* 数组中。请注意，*translations* 数组在
JSON/XML 有效负载通常会为您预先过滤，这意味着它们
不能直接用于导入/导出翻译（因为那样会
通常会覆盖当前用户以外的区域设置）。

*具有根据用户过滤的翻译数组的数据元素示例
区域设置：*

    {
      "id": "FTRrcoaog83",
      "displayName": "精确法语",
      “翻译”：[
        {
          “属性”：“SHORT_NAME”，
          “语言环境”：“fr”，
          "value": "准确法语"
        },
        {
          “属性”：“名称”，
          “语言环境”：“fr”，
          "value": "准确法语"
        }
      ]
    }

*关闭翻译的数据元素示例：*

    {
      "id": "FTRrcoaog83",
      "displayName": "急性弛缓性麻痹（死亡 < 5 岁）",
      “翻译”：[
        {
          “属性”：“FORM_NAME”，
          "区域设置": "en_FK",
          “值”：“aa”
        },
        {
          “属性”：“SHORT_NAME”，
          “区域设置”：“en_GB”，
          "value": "急性松弛帕拉尔"
        },
        {
          “属性”：“SHORT_NAME”，
          “语言环境”：“fr”，
          "value": "准确法语"
        },
        {
          “属性”：“名称”，
          “语言环境”：“fr”，
          "value": "准确法语"
        },
        {
          “属性”：“名称”，
          "区域设置": "en_FK",
          “值”：“aa”
        },
        {
          “属性”：“描述”，
          "区域设置": "en_FK",
          “值”：“aa”
        }
      ]
    }

请注意，即使您获得未过滤的结果，并且正在使用
适当的类型端点，即 */api/26/dataElements* 我们不允许
更新，因为很容易犯错误并覆盖
其他可用的区域设置。

要阅读和更新翻译，您可以使用特殊翻译
每个对象资源的端点。这些可以通过 **GET** 或
**PUT** 放在适当的位置
*/api/26/\<object-type\>/\<object-id\>/translations* 端点。作为一个
例如，对于具有标识符 *FTRrcoaog83* 的数据元素，您可以使用
*/api/26/dataElements/FTRrcoaog83/translations* 获取和更新
翻译。可用字段是 *property* 和选项 **NAME**，
**SHORT\_NAME**、**DESCRIPTION**、支持任何有效的*区域设置*
区域设置 ID 和*值*本身。

*法语语言环境的 NAME 属性示例：*

    {
      “属性”：“名称”，
      “语言环境”：“fr”，
      "value": "Paralysie Flasque Aiguë (Décès <5 ans)"
    }

然后将此有效负载添加到翻译数组中，并发回
到适当的端点：

    {
      “翻译”：[
        {
          “属性”：“名称”，
          “语言环境”：“fr”，
          "value": "Paralysie Flasque Aiguë (Décès <5 ans)"
        }
      ]
    }

对于 ID 为 *FTRrcoaog83* 的数据元素，您可以将其 **PUT** 到
*/api/26/dataElements/FTRrcoaog83/translations*。确保发送全部
针对特定对象的翻译，而不仅仅是针对单个语言环境的翻译
（如果没有，您可能会覆盖其他区域的现有区域设置
语言环境）。

### Web API版本 { #webapi_api_versions } 

 <!--DHIS2-SECTION-ID:webapi_api_versions-->

Web API 的版本从 DHIS 2.25 开始。 API 版本控制
遵循 DHIS 2 主要版本编号。举个例子，API
DHIS 2.25 的版本是 *25*。

您可以通过包含版本号来访问特定的 API 版本
在 */api* 组件之后，如下所示：

    /api/26/dataElements

如果省略 URL 的 version 部分，系统将使用当前的
API 版本。例如，对于 DHIS 2.25，在省略 API 部分时，
系统将使用 API 版本 25。在开发 API 客户端时，它是
建议使用显式 API 版本（而不是省略 API
版本），因为这将保护客户端免受不可预见的 API 更改。

将支持最后三个 API 版本。例如，DHIS
2.27 版本将支持 API 版本 27、26 和 25。

请注意，元数据模型未版本化，您可能会
经历变化在对象之间的关联中。这些变化
将在DHIS2主版本发行说明中进行记录。

## 元数据对象过滤器 { #webapi_metadata_object_filter } 

 <!--DHIS2-SECTION-ID:webapi_metadata_object_filter-->

要过滤元数据，可以执行多种过滤操作
应用于返回的元数据列表。过滤器的格式
本身是直接的并且遵循模式
*property:operator:value*，其中 *property* 是
您要过滤的元数据，*operator* 是比较运算符
您想要执行的操作，*value* 是要检查的值（并非所有
运营商需要价值）。请参阅 *schema* 部分来了解
哪些属性可用。递归过滤，即。过滤
还支持关联对象或对象集合。

 <table>
 <caption> 可用运算符 </caption>
 <thead>
 <tr class="header">
 <th> 操作员 </th>
 <th> 类型 </th>
 <th> 需要值 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> eq </td>
 <td> 字符串 |布尔值 |整数 |浮动|枚举 |集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 相等 </td>
 </tr>
 <tr class="even">
 <td> !eq </td>
 <td> 字符串 |布尔值 |整数 |浮动|枚举 |集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 不等式 </td>
 </tr>
 <tr class="odd">
 <td> ne </td>
 <td> 字符串 |布尔值 |整数 |浮动|枚举 |集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 不等式 </td>
 </tr>
 <tr class="even">
 <td> 像 </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 区分大小写的字符串，匹配任何地方 </td>
 </tr>
 <tr class="odd">
 <td> !like </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 区分大小写的字符串，不匹配任何地方 </td>
 </tr>
 <tr class="even">
 <td> \$like </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 区分大小写的字符串，匹配开始 </td>
 </tr>
 <tr class="odd">
 <td> !\$like </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 区分大小写的字符串，不匹配开始 </td>
 </tr>
 <tr class="even">
 <td> 喜欢\$ </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 区分大小写的字符串，匹配结束 </td>
 </tr>
 <tr class="odd">
 <td> !like\$ </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 区分大小写的字符串，不匹配结束 </td>
 </tr>
 <tr class="even">
 <td> 喜欢 </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 不区分大小写的字符串，匹配任何地方 </td>
 </tr>
 <tr class="odd">
 <td> !ilike </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 不区分大小写的字符串，不匹配任何地方 </td>
 </tr>
 <tr class="even">
 <td> \$ilike </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 不区分大小写的字符串，匹配开始 </td>
 </tr>
 <tr class="odd">
 <td> !\$ilike </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 不区分大小写的字符串，不匹配开始 </td>
 </tr>
 <tr class="even">
 <td> ilike\$ </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 不区分大小写的字符串，匹配结束 </td>
 </tr>
 <tr class="odd">
 <td> !ilike\$ </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 不区分大小写的字符串，不匹配结束 </td>
 </tr>
 <tr class="even">
 <td> gt </td>
 <td> 字符串 |布尔值 |整数 |浮动|集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 大于 </td>
 </tr>
 <tr class="odd">
 <td> ge </td>
 <td> 字符串 |布尔值 |整数 |浮动|集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 大于或等于 </td>
 </tr>
 <tr class="even">
 <td> lt </td>
 <td> 字符串 |布尔值 |整数 |浮动|集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 小于</td>
 </tr>
 <tr class="odd">
 <td> le </td>
 <td> 字符串 |布尔值 |整数 |浮动|集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 小于或等于 </td>
 </tr>
 <tr class="even">
 <td> 空 </td>
 <td> 全部 </td>
 <td> 假 </td>
 <td> 属性为空 </td>
 </tr>
 <tr class="odd">
 <td> !null </td>
 <td> 全部 </td>
 <td> 假 </td>
 <td> 属性不为空 </td>
 </tr>
 <tr class="even">
 <td> 空 </td>
 <td> 集合 </td>
 <td> 假 </td>
 <td> 集合为空 </td>
 </tr>
 <tr class="odd">
 <td> 代币 </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 匹配搜索属性中的多个标记 </td>
 </tr>
 <tr class="even">
 <td> !token </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 与搜索属性中的多个标记不匹配 </td>
 </tr>
 <tr class="odd">
 <td> 在 </td>
 <td> 字符串 |布尔值 |整数 |浮动|日期 </td>
 <td> 真 </td>
 <td> 查找匹配 1 个或多个值的对象 </td>
 </tr>
 <tr class="even">
 <td> !in </td>
 <td> 字符串 |布尔值 |整数 |浮动|日期 </td>
 <td> 真 </td>
 <td> 查找与 1 个或多个值不匹配的对象 </td>
 </tr>
 </tbody>
 </table>

如果您需要 **or**，则运算符将应用为逻辑 **and** 查询
查询，您可以查看我们的 *in* 过滤器（也可以查看
下一节）。过滤机制允许递归。见下文
举一些例子。

获取ID属性为ID1或ID2的数据元素：

    /api/26/dataElements?filter=id:eq:ID1&filter=id:eq:ID2

获取所有具有ID为ID1的dataSet的数据元素：

    /api/26/dataElements?filter=dataSetElements.dataSet.id:eq:ID1

使用聚合运算符“sum”和值类型获取所有数据元素
“内部”：

    /api/26/dataElements.json?filter=aggregationOperator:eq:sum&filter=type:eq:int

您可以在集合中进行过滤，例如获取数据元素
是“ANC”数据元素组的成员，您可以使用以下内容
使用关联数据元素组的 id 属性查询：

    /api/26/dataElements.json?filter=dataElementGroups.id:eq:qfxEYY9xAl6

由于默认所有运算符都是**和**，所以找不到数据
匹配多个 id 的元素，为此目的，您可以使用 *in*
操作员。

    /api/26/dataElements.json?filter=id:in:[fbfJHSPpUQD,cYeuwXTCPkU]

### 逻辑运算符 { #webapi_metadata_logical_operator } 

 <!--DHIS2-SECTION-ID:webapi_metadata_logical_operator-->

如前一节所述，应用了默认逻辑运算符
过滤器是 **AND** 这意味着所有对象过滤器必须是
匹配。然而，在某些情况下，您想要匹配其中之一
几个过滤器（可能是 id 和代码字段），在这些情况下它是
可以将根逻辑运算符从 **AND** 切换为 **OR**
使用 *rootJunction* 参数。

示例：正常过滤，其中 id 和 code 必须匹配才能具有
结果返回

    /api/dataElements.json?filter=id:in:[id1,id2]&filter=code:eq:code1

示例：过滤逻辑运算符已切换为 OR 的位置
现在只有一个过滤器必须匹配才能产生结果
    回

    /api/dataElements.json?filter=id:in:[id1,id2]&filter=code:eq:code1&rootJunction=OR

### 可识别的令牌过滤器 { #identifiable-token-filter } 

除了上述基于特定属性的过滤外、
我们还有基于**令牌**的**和**过滤功能。
属性：ID、代码和名称（如果有，也包括短名）。这些
属性通常被称为**可识别**。我们的想法是
过滤其 id、名称、代码或简称包含某些内容的元数据。

示例：过滤所有包含 *2nd* 的数据元素
如下： id,name,code,shortName

    api/dataElements.json?filter=identific:token:2nd

也可以指定多个过滤值。

示例：获取在任何 **可识别** 属性中找到 *ANC 访问* 的所有数据元素。系统返回在可识别属性中的任何位置找到两个令牌（ANC 和访问）的所有数据元素。

    api/dataElements.json?filter=identific:token:ANC 访问

还可以将可识别过滤器与基于属性的过滤器结合起来，并期望应用*rootJunction*。

    api/dataElements.json?filter=identabilible:token:ANC 访问&filter=displayName:ilike:tt1

    api/dataElements.json?filter=identific:token:ANC 访问&filter=displayName:ilike:tt1&rootJunction=OR

## 元数据字段过滤器 { #webapi_metadata_field_filter } 

 <!--DHIS2-SECTION-ID:webapi_metadata_field_filter-->

在某些情况下，元数据的默认视图也可能太
冗长。客户端可能只需要每个对象中的几个字段并且想要
从响应中删除不必要的字段。发现哪些字段
适用于每个对象，请参阅 *schema* 部分。

包含/排除的格式非常简单，并且允许无限
递归。要在“根”级别进行过滤，您只需使用以下名称即可
字段，即 *?fields=id,name* ，它只会显示 *id* 和
每个对象的*名称*。对于集合或集合的对象
具有自身属性的复杂对象，您可以使用以下格式
*?fields=id,name,dataSets\[id,name\]* 它将返回 *id*, *name*
根，以及该对象上每个数据集的 *id* 和 *name*。
否定可以用感叹号运算符来完成，我们有一组
字段选择的预设（见下文）。 XML 和 JSON 均受支持。

**示例**：获取指标资源上的 *id* 和 *name*：

    /api/26/indicators?fields=id,名称

**示例**：从dataElements获取*id*和*name*，以及*id*和*name*
来自 dataElements 上的数据集：

    /api/26/dataElements?fields=id,名称,dataSets[id,名称]

要从输出中排除字段，可以使用感叹号 (\!)
操作员。这在查询中的任何地方都是允许的，并且根本不会
包含该属性（因为它可能已插入到某些
预设）。

一些预设（选定的字段组）可用并且可以应用
使用“：”运算符。

<table>
<caption>物业经营者</caption>
<colgroup>
<col style="width: 25%" />
<col style="width: 74%" />
</colgroup>
<thead>
<tr class="header">
<th>操作员</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>&lt;字段名&gt;</td>
<td>如果存在，包含带有名称的属性。</td>
</tr>
<tr class="even">
<td>&lt;object&gt;[&lt;field-name&gt;, ...]</td>
<td>包含一个集合中的字段（将应用于该集合中的每个对象），或只包含一个对象上的字段。</td>
</tr>
<tr class="odd">
<td>&lt;字段名&gt;,&lt;对象&gt;[!&lt;字段名&gt;</td>
<td>不包含此字段名，也适用于对象/集合内部。在使用预设包含字段时非常有用。</td>
</tr>
<tr class="even">
<td>*,&lt;对象&gt;[*]</td>
<td>包含某个对象上的所有字段，如果应用于某个集合，则会包含该集合中所有对象上的所有字段。</td>
</tr>
<tr class="odd">
<td>：&lt;预设&gt;</td>
<td>用于选择多个字段的别名。目前有三种预设，请参阅下表了解说明。</td>
</tr>
</tbody>
</table>

<table>
<caption>字段预设</caption>
<colgroup>
<col style="width: 25%" />
<col style="width: 74%" />
</colgroup>
<thead>
<tr class="header">
<th>预设</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>全部</td>
<td>对象的所有字段</td>
</tr>
<tr class="even">
<td>*</td>
<td>所有人的别名</td>
</tr>
<tr class="odd">
<td>可识别</td>
<td>包括 id、name、code、created 和 lastUpdated 字段</td>
</tr>
<tr class="even">
<td>可命名</td>
<td>包括 id、name、shortName、code、description、created 和 lastUpdated 字段</td>
</tr>
<tr class="odd">
<td>持续</td>
<td>返回对象上的所有持久属性，不考虑该对象是否是关系的所有者。</td>
</tr>
<tr class="even">
<td>所有者</td>
<td>返回对象上的所有持久属性，其中该对象是所有属性的所有者，此负载可用于通过 web-api 进行更新。</td>
</tr>
</tbody>
</table>

**示例**：包括dataSet中的所有字段（organizationunits除外）：

    /api/26/dataSets?fields=:all,!organizationUnits

**示例**：仅包含ID，名称和数据集中的组织单位集合，但不包含组织单位中的ID：

    /api/26/dataSets/BfMAe6Itzgt?fields=id,名称,organizationUnits[:all,!id]

**示例**：包括所有指标的可命名属性：

    /api/26/indicators.json?fields=:nameable

### 现场变压器 { #webapi_field_transformers } 

 <!--DHIS2-SECTION-ID:webapi_field_transformers-->

在DHIS2.17中，我们引入了现场变压器，其思想是允许
在服务器端进一步定制属性。

    /api/26/dataElements/ID?fields=id~重命名(i),名称~重命名(n)

这会将 *id* 属性重命名为 *i*，将 *name* 属性重命名为 *n*。

可以通过重复变压器语法来使用多个变压器：

    /api/26/dataElementGroups.json?fields=id,displayName,dataElements~isNotEmpty~rename(haveDataElements)

<table>
<caption>可用的 Transformer</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 21%" />
<col style="width: 44%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>尺寸</td>
<td></td>
<td>给出字符串的大小（长度）和集合</td>
</tr>
<tr class="even">
<td>isEmpty</td>
<td></td>
<td>字符串或集合是否为空</td>
</tr>
<tr class="odd">
<td>isNotEmpty</td>
<td></td>
<td>字符串或集合是否不为空</td>
</tr>
<tr class="even">
<td>重命名</td>
<td>Arg1：名称</td>
<td>重命名属性名称</td>
</tr>
<tr class="odd">
<td>寻呼</td>
<td>Arg1：页面，Arg2：页面大小</td>
<td>分页集合，默认 pageSize 为 50。</td>
</tr>
</tbody>
</table>

#### 例子 { #webapi_field_transformers_examples } 

 <!--DHIS2-SECTION-ID:webapi_field_transformers_examples-->

变压器用法示例。

    /api/26/dataElements?fields=dataSets~size

    /api/26/dataElements?fields=dataSets~isEmpty

    /api/26/dataElements?fields=dataSets~isNotEmpty

    /api/26/dataElements/ID?fields=id~重命名(i),名称~重命名(n)

    /api/26/dataElementGroups?fields=id,displayName,dataElements~paging(1;20)

## 元数据创建，读取，更新，删除，验证 { #webapi_metadata_crud } 

 <!--DHIS2-SECTION-ID:webapi_metadata_crud-->

虽然一些 web-api 端点已经包含对 CRUD 的支持
（创建、读取、更新、删除），从 2.15 版本开始支持
在所有端点上。它应该按您的预期工作，并且各小节将
提供有关创建、更新和删除的更多详细信息（阅读为
已经在其他地方介绍过，并且已经得到了很长一段时间的支持）。

### 创建/更新参数 { #webapi_metadata_create_update } 

 <!--DHIS2-SECTION-ID:webapi_metadata_create_update-->

以下查询参数可用于自定义您的
要求。

 <table>
 <caption>可用的查询过滤器</caption>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>类型</th>
 <th>必需</th>
 <th>选项（默认为默认）</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> preheatCache </td>
 <td>布尔</td>
 <td>否</td>
 <td>是|假</td>
 <td>开启/关闭缓存地图预热。默认情况下处于启用状态，关闭此选项将使导入程序的初始加载时间短得多（但会使导入本身变慢）。这主要用于以下情况：您要导入的XML / JSON文件很小，并且不想等待缓存映射表预热。 </td>
 </tr>
 <tr class="even">
 <td>策略</td>
 <td>枚举</td>
 <td>否</td>
 <td> CREATE_AND_UPDATE |创建|更新|删除</td>
 <td>使用的导入策略，请参阅下面的更多信息。 </td>
 </tr>
 <tr class="odd">
 <td> mergeMode </td>
 <td>枚举</td>
 <td>否</td>
 替换，合并<td> </td>
 <td>执行更新时合并对象的策略。 REPLACE只会使用提供的新值覆盖该属性，MERGE仅在属性不为null时设置该属性（仅在提供了该属性的情况下）。 </td>
 </tr>
 </tbody>
 </table>

### 创建和更新对象 { #webapi_creating_updating_objects } 

 <!--DHIS2-SECTION-ID:webapi_creating_updating_objects-->

为了创建新对象，您需要知道端点、类型
格式，并确保您拥有所需的权限。作为一个
例如，我们将创建并更新一个*常量*。为了弄清楚
格式，我们可以使用新的 *schema* 端点来获取格式
描述。因此，我们将从获取该信息开始：

    http://<<server>>/api/schemas/constant.json

从输出中，您可以看到创建所需的权限
是 F\_CONSTANT\_ADD，重要的属性是： *name* 和
*价值*。由此我们可以创建一个 JSON 有效负载并将其保存为文件
称为constant.json：

    {
      “名称”：“PI”，
      “值”：“3.14159265359”
    }

与XML有效内容相同的内容：

    <constant name="PI" xmlns="http://dhis2.org/schema/dxf/2.0">
      <value>3.14159265359</value>
    </constant>

我们现在准备通过发送 POST 请求来创建新的*常量*
使用curl 的带有JSON 负载的*constants*端点：

    卷曲-d@constant.json“http://server/api/26/constants”-X POST
    -H“内容类型：application/json”-u 用户：密码

将常量发布到演示中的具体示例
    服务器：

    卷曲-d@constant.json“https://play.dhis2.org/api/26/constants”-X POST
    -H“内容类型：application/json”-u admin：区

如果一切顺利，您应该看到类似以下的输出：

```json
{
  "status": "SUCCESS",
  "importCount": {
    "imported": 1,
    "updated": 0,
    "ignored": 0,
    "deleted": 0
  },
  "type": "Constant"
}
```

更新过程将完全相同，您进行更改
到 JSON/XML 负载，找出常量的 *ID*，然后
向端点发送包含 ID 的 PUT 请求：

`` 重击
curl -X PUT -d @pi.json -H“内容类型：application/json”
-u 用户：密码 http://server/api/26/constants/ID
````

### 删除物件 { #webapi_deleting_objects } 

 <!--DHIS2-SECTION-ID:webapi_deleting_objects-->

删除对象非常简单，您需要知道
*ID* 和您要删除的类型的端点，让我们继续我们的
上一节的示例并使用*常量*。我们假设
id 是 *abc123*，那么您需要做的就是发送 DELETE
请求端点+id：

    卷曲 -X 删除 -u 用户:密码
    http://服务器/api/26/常量/ID

成功删除应返回HTTP状态204（无内容）。

### 在集合中添加和删除对象 { #webapi_adding_removing_objects_collections } 

 <!--DHIS2-SECTION-ID:webapi_adding_removing_objects_collections-->

集合资源允许您修改集合
对象。

#### 添加或删除单个对象 { #webapi_collections_adding_removing_single_objects } 

 <!--DHIS2-SECTION-ID:webapi_collections_adding_removing_single_objects-->

为了在对象集合中添加或删除对象，您
可以使用以下
    图案：

    /api/26/{集合对象}/{集合对象ID}/{集合名称}/{对象ID}

应该使用POST方法添加，使用DELETE方法删除
一个东西。当对象之间存在多对多关系时，
您必须首先确定哪个对象拥有该关系。如果不是
清除这是哪个对象，尝试两种方式调用以查看哪个有效。

模式的组成部分是：

  - 集合对象：拥有您的集合的对象类型
    想修改。

  - 集合对象 id：拥有该对象的对象的标识符
    要修改的集合。

  - 集合名称：您要修改的集合的名称。

  - object id：要添加或删除的对象的标识符
    从集合。

例如，为了删除标识符为 IDB 的数据元素
从具有标识符 IDA 的数据元素组中，您可以执行 DELETE
要求：

    删除 /api/26/dataElementGroups/IDA/dataElements/IDB

将带有标识符 IDB 的类别选项添加到带有
标识符 IDA 你可以做一个 POST
要求：

    POST /api/26/categories/IDA/categoryOptions/IDB

#### 添加或删除多个对象 { #webapi_collections_adding_removing_multiple_objects } 

 <!--DHIS2-SECTION-ID:webapi_collections_adding_removing_multiple_objects-->

您可以在一个请求中从集合中添加或删除多个对象
具有这样的有效载荷：

    {
      “可识别对象”：[
        {“id”：“IDA”}，
        {“id”：“IDB”}，
        {“id”：“IDC”}
      ]
    }

使用此有效负载，您可以添加，替换或删除项目：

*添加项目：*

    POST /api/26/categories/IDA/categoryOptions

*更换物品：*

    PUT /api/26/categories/IDA/categoryOptions

*删除
项目：*

    删除 /api/26/categories/IDA/categoryOptions

#### 在单个请求中添加和删除对象 { #webapi_collections_adding_removing_objects_single_request } 

 <!--DHIS2-SECTION-ID:webapi_collections_adding_removing_objects_single_request-->

您可以在单个 POST 中从集合中添加和删除对象
具有以下类型有效负载的请求：

    POST /api/26/categories/IDA/categoryOptions

    {
      “补充”：[
        {“id”：“IDA”}，
        {“id”：“IDB”}，
        {“id”：“IDC”}
      ],
      “删除”：[
        { "id": "国际长途电话" },
        {“id”：“IDE”}，
        {“id”：“IDF”}
      ]
    }

### 验证有效载荷 { #webapi_validating_payloads } 

 <!--DHIS2-SECTION-ID:webapi_validating_payloads-->

从 2.19 开始启用元数据有效负载的系统范围验证
发布，这意味着在 web-api 上创建/更新操作
在允许更改之前，将检查端点的有效负载
已完成，要了解端点有哪些验证，请
查看 /api/schemas 端点，即找出哪个
数据元素具有的约束，你会去
/api/schemas/dataElement.

您还可以手动验证您的有效负载，方法是将其发送到适当的
架构端点。如果您想从创建中验证常量
之前的部分，您可以这样发送：

    POST /api/schemas/常量
    { 有效负载 }

一个简单的（非验证）示例为：

    curl -X POST -d "{\"name\": \"some name\"}" -H "Content-Type: application/json"
    -u 管理员：区 https://play.dhis2.org/dev/api/schemas/dataElement

这将产生结果：

    [
       {
          "message" : "缺少必需的属性。",
          “财产种类”
       },
       {
          “属性”：“聚合运算符”，
          "message" : "缺少必需的属性。"
       },
       {
          “属性”：“域类型”，
          "message" : "缺少必需的属性。"
       },
       {
          “属性”：“短名称”，
          "message" : "缺少必需的属性。"
       }
    ]

### 部分更新 { #webapi_partial_updates } 

 <!--DHIS2-SECTION-ID:webapi_partial_updates-->

对于您不想或不需要更新所有属性的情况
对象（这意味着下载一个潜在的巨大有效负载，更改一个
属性，然后再次上传）我们现在支持部分更新，对于一个或
更多的属性。

进行部分更新的有效负载与您执行时相同
做一个完整的更新，唯一的区别是你只包括
您要更新的属性，即：

    { // 文件.json
      "name": "更新后的名称",
      “zeroIsSignificant”：true
    }

    curl -X PATCH -d @file.json -H“内容类型：application/json”
    -u 管理员：区 https://play.dhis2.org/dev/api/26/dataElements/fbfJHSPpUQD

## 元数据导出 { #webapi_metadata_export } 

 <!--DHIS2-SECTION-ID:webapi_metadata_export-->

本节介绍元数据 API，该 API 位于
*/api/23/metadata* 和 */api/26/metadata* 端点。 XML 和 JSON
支持资源表示。

最常见的参数在下面的“导出参数”中描述
桌子。您还可以通过使用将其应用于所有可用类型
*type:fields=\<filter\>* 和 *type:filter=\<filter\>*- 您还可以
通过设置 *type=true/false* 启用/禁用某些类型的导出。

<table>
<caption>导出参数</caption>
<colgroup>
<col style="width: 17%" />
<col style="width: 21%" />
<col style="width: 61%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>字段</td>
<td>与元数据字段过滤器相同</td>
<td>适用于所有类型的默认字段过滤器，默认为<strong>:owner</strong> 。</td>
</tr>
<tr class="even">
<td>过滤器</td>
<td>与元数据对象过滤器相同</td>
<td>适用于所有类型的默认对象过滤器，默认为<strong>none</strong> 。</td>
</tr>
<tr class="odd">
<td>顺序</td>
<td>与元数据顺序相同</td>
<td>应用于所有类型的默认顺序，默认为<strong>名称</strong> （如果有），或<strong>创建的</strong> （如果没有）。</td>
</tr>
<tr class="even">
<td>翻译</td>
<td>假/真</td>
<td>启用翻译。请注意，默认情况下是关闭的（在其他端点，默认情况下是打开的）。</td>
</tr>
<tr class="odd">
<td>语言</td>
<td>&lt;本地语言&gt;</td>
<td>将用户语言更改为自定义语言。</td>
</tr>
<tr class="even">
<td>默认值</td>
<td>包含/排除</td>
<td>是否应在有效载荷中包含自动生成的类别对象。如果要在 2 个非同步实例之间移动元数据，可能需要将其设置为 EXCLUDE，以方便处理这些生成的对象。</td>
</tr>
<tr class="odd">
<td>跳过共享</td>
<td>假/真</td>
<td>启用此选项将从导出对象中删除共享属性。这包括<em>user</em>,<em>publicAccess</em>,<em>userGroupAccesses</em>,<em>userAccesses</em>, 和<em>externalAccess</em> 。</td>
</tr>
<tr class="odd">
<td>下载</td>
<td>假/真</td>
<td>启用此选项将添加 HTTP 标头 Content-Disposition，指定数据应作为附件处理，并由网络浏览器提供下载。</td>
</tr>
</tbody>
</table>

### 元数据导出示例 { #webapi_metadata_export_examples } 

 <!--DHIS2-SECTION-ID:webapi_metadata_export_examples-->

导出所有元数据：

    curl -u 用户：传递 http://server/api/26/metadata

导出由lastUpdated降序排列的所有元数据：

    curl -u 用户：传递 http://server/api/26/metadata?defaultOrder=lastUpdated:desc

导出所有数据元素的id和displayName，按displayName排序：

    curl -u 用户：传递 http://server/api/26/metadata?dataElements:fields=id,name&dataElements:order=displayName:desc

导出名称以“ ANC”开头的数据元素和指示符：

    curl -u 用户：传递 http://server/api/26/metadata?filter=name:^like:ANC&dataElements=true&indicators=true

### 具有依赖项的元数据导出 { #webapi_dataset_program_export_dependencies } 

 <!--DHIS2-SECTION-ID:webapi_dataset_program_export_dependencies-->

当您想要移动整套数据集、程序或类别组合时
从一台服务器到另一台（可能是空的）服务器的元数据，我们有
为此目的设置了三个特殊端点：

    /api/<version>/dataSets/ID/metadata.json

    /api/<version>/programs/ID/metadata.json

    /api/<version>/categoryCombos/ID/metadata.json

    /api/<version>/dashboards/{uid}/metadata.json

然后可以使用 */api/<version>/metadata* 导入这些导出。

这些端点还支持以下参数：

 <table>
 <caption> 导出参数 </caption>
 <colgroup>
 <col style="width: 17%" />
 <col style="width: 21%" />
 <col style="width: 61%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 名称 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 跳过共享 </td>
 <td> 假/真 </td>
 <td> 启用此选项将从导出的对象中剥离共享属性。这包括用户<em> </em>，<em> publicAccess </em>，<em> userGroupAccesses </em>，<em> userAccesses </em>，和<em> externalAccess </em>。 </td>
 </tr>
 <tr class="odd">
 <td> 下载 </td>
 <td> 假/真 </td>
 <td> 启用此功能将添加 HTTP 标头 Content-Disposition，该标头指定数据应作为附件处理，并由 Web 浏览器作为下载提供。 </td>
 </tr>
 </tbody>
 </table>

## 元数据导入 { #webapi_metadata_import } 

 <!--DHIS2-SECTION-ID:webapi_metadata_import-->

本节介绍了元数据 API，该 API 位于
*/api/23/metadata* 和 */api/26/metadata* 端点。 XML 和 JSON
支持资源表示。

导入程序允许您导入随新版本一起导出的元数据
出口商。下面列出了各种参数。

<table>
<caption>Import Parameter</caption>
<colgroup>
<col style="width: 17%" />
<col style="width: 21%" />
<col style="width: 61%" />
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>Options (first is default)</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>importMode</td>
<td>COMMIT, VALIDATE</td>
<td>Sets overall import mode, decides whether or not to only <strong>VALIDATE</strong> or also <strong>COMMIT</strong> the metadata, this has similar functionality as our old dryRun flag.</td>
</tr>
<tr class="even">
<td>identifier</td>
<td>UID, CODE, AUTO</td>
<td>Sets the identifier scheme to use for reference matching. <strong>AUTO</strong> means try <strong>UID</strong> first, then <strong>CODE</strong>.</td>
</tr>
<tr class="odd">
<td>importReportMode</td>
<td>ERRORS, FULL, DEBUG</td>
<td>Sets the <strong>ImportReport</strong> mode, controls how much is reported back after the import is done. <strong>ERRORS</strong> only includes <em>ObjectReports</em> for object which has errors. <strong>FULL</strong> returns an <em>ObjectReport</em> for all objects imported, and <strong>DEBUG</strong> returns the same plus a name for the object (if available).</td>
</tr>
<tr class="even">
<td>preheatMode</td>
<td>REFERENCE, ALL, NONE</td>
<td>Sets the preheater mode, used to signal if preheating should be done for <strong>ALL</strong> (as it was before with <em>preheatCache=true</em>) or do a more intelligent scan of the objects to see what to preheat (now the default), setting this to <strong>NONE</strong> is not recommended.</td>
</tr>
<tr class="odd">
<td>importStrategy</td>
<td>CREATE_AND_UPDATE, CREATE, UPDATE, DELETE</td>
<td>Sets import strategy, <strong>CREATE_AND_UPDATE</strong> will try and match on identifier, if it doesn't exist, it will create the object.</td>
</tr>
<tr class="even">
<td>atomicMode</td>
<td>ALL, NONE</td>
<td>Sets atomic mode, in the old importer we always did a <em>best effort</em> import, which means that even if some references did not exist, we would still import (i.e. missing data elements on a data element group import). Default for new importer is to not allow this, and similar reject any validation errors. Setting the <strong>NONE</strong> mode emulated the old behavior.</td>
</tr>
<tr class="odd">
<td>mergeMode</td>
<td>MERGE, REPLACE</td>
<td>Sets the merge mode, when doing updates we have two ways of merging the old object with the new one, <strong>MERGE</strong> mode will only overwrite the old property if the new one is not-null, for <strong>REPLACE</strong> mode all properties are overwritten regardless of null or not.</td>
</tr>
<tr class="even">
<td>flushMode</td>
<td>AUTO, OBJECT</td>
<td>Sets the flush mode, which controls when to flush the internal cache. It is <em>strongly</em> recommended to keep this to <strong>AUTO</strong> (which is the default). Only use <strong>OBJECT</strong> for debugging purposes, where you are seeing hibernate exceptions and want to pinpoint the exact place where the stack happens (hibernate will only throw when flushing, so it can be hard to know which object had issues).</td>
</tr>
<tr class="odd">
<td>skipSharing</td>
<td>false, true</td>
<td>Skip sharing properties, does not merge sharing when doing updates, and does not add user group access when creating new objects.</td>
</tr>
<tr class="even">
<td>skipValidation</td>
<td>false, true</td>
<td>Skip validation for import. <strong>NOT RECOMMENDED</strong>.</td>
</tr>
<tr class="odd">
<td>async</td>
<td>false, true</td>
<td>Asynchronous import, returns immediately with a <em>Location</em> header pointing to the location of the <em>importReport</em>. The payload also contains a json object of the job created.</td>
</tr>
<tr class="even">
<td>inclusionStrategy</td>
<td>NON_NULL, ALWAYS, NON_EMPTY</td>
<td><em>NON_NULL</em> includes properties which are not null, <em>ALWAYS</em> include all properties, <em>NON_EMPTY</em> includes non empty properties (will not include strings of 0 length, collections of size 0, etc.)</td>
</tr>
<tr class="odd">
<td>userOverrideMode</td>
<td>NONE, CURRENT, SELECTED</td>
<td>Allows you to override the user property of every object you are importing, the options are NONE (do nothing), CURRENT (use import user), SELECTED (select a specific user using overrideUser=X)</td>
</tr>
<tr class="even">
<td>overrideUser</td>
<td>User ID</td>
<td>If userOverrideMode is SELECTED, use this parameter to select the user you want override with.</td>
</tr>
</tbody>
</table>

## 元数据审核 { #webapi_metadata_audit } 

 <!--DHIS2-SECTION-ID:webapi_metadata_audit-->

如果您需要有关谁创建、编辑或删除 DHIS2 的信息
您可以启用元数据审计的元数据对象。那里有两个
您可以启用配置选项 (dhis.conf) 以支持此功能：

    元数据.审核.log = 开

这会在您的 servlet 容器中启用额外的日志输出（例如
tomcat catalina.log)，其中包含有关对象的完整信息
创建、编辑对象或删除对象，包括完整的 JSON 负载，
审计事件的日期，以及执行操作的用户。

    元数据.审计.坚持=开

这将启用持久审计，即保存到数据库的审计。这
存储的信息与审计日志相同；然而这
信息现在被放入 *metadataaudit* 表中
数据库。

我们不建议在空数据库上启用这些选项，如果您
打算引导您的系统，因为它减慢了导入和
审计可能没有那么有用。

### 元数据审核查询 { #webapi_metadata_audit_query } 

 <!--DHIS2-SECTION-ID:webapi_metadata_audit_query-->

如果您在 DHIS2 实例上启用了持久化元数据审计，
您可以在以下端点访问元数据审计：

    /api/29/metadataAudits

端点支持以下查询参数：

 <table>
 <caption> 元数据审计 API 查询参数 </caption>
 <colgroup>
 <col style="width: 22%" />
 <col style="width: 27%" />
 <col style="width: 51%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 名称 </th>
 <th> 值 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> uid </td>
 <td> </td>
 <td> 要查询的对象 uid（可以是多个） </td>
 </tr>
 <tr class="even">
 <td> 代码 </td>
 <td> </td>
 <td> 查询对象代码（可以多个） </td>
 </tr>
 <tr class="odd">
 <td> klass </td>
 <td> </td>
 <td> 要查询的对象类（可以不止一个），请注意这里需要完整的java包名（以避免名称冲突）</td>
 </tr>
 <tr class="even">
 <td> createdAt </td>
 <td> </td>
 <td> 按创建日期查询 </td>
 </tr>
 <tr class="odd">
 <td> createdBy </td>
 <td> </td>
 <td> 由谁进行更改的查询（用户名） </td>
 </tr>
 <tr class="even">
 <td> 类型 </td>
 <td> 创建、更新、删除 </td>
 <td> 按审计类型查询 </td>
 </tr>
 </tbody>
 </table>

## 渲染类型（实验性） { #webapi_render_type } 

 <!--DHIS2-SECTION-ID:webapi_render_type-->

某些元数据类型具有名为 *renderType* 的属性。渲染类型
属性是 *device* 和 *renderingType* 之间的映射。应用
可以使用此信息作为有关如何呈现对象的提示
在特定设备上。例如，移动设备可能想要渲染
与台式计算机不同的数据元素。

当前有两种不同的renderingTypes可用：

1.  值类型渲染

2.  程序阶段部分渲染

还提供2种设备类型：

1.  移动

2.  桌面

下表列出了可用的元数据和呈现类型。
值类型呈现具有基于元数据的附加约束
配置，这将显示在第二个表中。

<table>
<caption>Metadata and RenderingType overview</caption>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>Metadata type</th>
<th>Available RenderingTypes</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Program Stage Section</td>
<td><ul>
<li><p>LISTING (default)</p></li>
<li><p>SEQUENTIAL</p></li>
<li><p>MATRIX</p></li>
</ul></td>
</tr>
<tr class="even">
<td>Data element</td>
<td><ul>
<li><p>DEFAULT</p></li>
<li><p>DROPDOWN</p></li>
<li><p>VERTICAL_RADIOBUTTONS</p></li>
<li><p>HORIZONTAL_RADIOBUTTONS</p></li>
<li><p>VERTICAL_CHECKBOXES</p></li>
<li><p>HORIZONTAL_CHECKBOXES</p></li>
<li><p>SHARED_HEADER_RADIOBUTTONS</p></li>
<li><p>ICONS_AS_BUTTONS</p></li>
<li><p>SPINNER</p></li>
<li><p>ICON</p></li>
<li><p>TOGGLE</p></li>
<li><p>VALUE</p></li>
<li><p>SLIDER</p></li>
<li><p>LINEAR_SCALE</p></li>
</ul></td>
</tr>
<tr class="odd">
<td>Tracked entity attribute</td>
</tr>
</tbody>
</table>

由于处理数据元素和跟踪实体的默认呈现
属性取决于对象的值类型，还有
DEFAULT 类型告诉客户端应该正常处理。
程序阶段部分默认为列表。

<table>
<caption>基于值类型允许的 RenderingType</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>值类型</th>
<th>对象是选项集吗？</th>
<th>允许的渲染类型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>TRUE_ONLY</td>
<td>否</td>
<td>默认、VERTICAL_RADIOBUTTONS、HORIZONTAL_RADIOBUTTONS、VERTICAL_CHECKBOXES、HORIZONTAL_CHECKBOXES、切换</td>
</tr>
<tr class="even">
<td>布尔值</td>
<td>否</td>
</tr>
<tr class="odd">
<td>-</td>
<td>是</td>
<td>DEFAULT、DROPDOWN、VERTICAL_RADIOBUTTONS、HORIZONTAL_RADIOBUTTONS、VERTICAL_CHECKBOXES、HORIZONTAL_CHECKBOXES、SHARED_HEADER_RADIOBUTTONS、ICONS_AS_BUTTONS、SPINNER、ICON</td>
</tr>
<tr class="even">
<td>INTEGER</td>
<td>否</td>
<td>默认、值、滑块、LINEAR_SCALE、旋转</td>
</tr>
<tr class="odd">
<td>INTEGER_POSITIVE</td>
<td>否</td>
</tr>
<tr class="even">
<td>INTEGER_NEGATIVE</td>
<td>否</td>
</tr>
<tr class="odd">
<td>INTEGER_ZERO_OR_POSITIVE</td>
<td>否</td>
</tr>
<tr class="even">
<td>NUMBER</td>
<td>否</td>
</tr>
<tr class="odd">
<td>UNIT_INTERVAL</td>
<td>否</td>
</tr>
<tr class="even">
<td>百分比</td>
<td>否</td>
</tr>
</tbody>
</table>

上表的完整参考也可以使用
以下端点：

    GET /api/staticConfiguration/renderingOptions

值类型渲染也有一些额外的属性，可以
设置，通常在渲染某些特定类型时需要：

 <table>
 <caption> renderType对象属性</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 属性<th> </th>
 <th>说明</th>
 <th>类型</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>类型</td>
 <td>对象的RenderingType，如第一个表所示。值类型和程序阶段部分的此属性相同，但是是程序阶段部分可用的唯一属性。 </td>
 <td>枚举（请参见元数据和呈现类型表中的列表）</td>
 </tr>
 <tr class="even">
 min </td> <td>
 <td>仅用于值类型呈现。表示此字段可以具有的最小值。 </td>
 <td>整数</td>
 </tr>
 <tr class="odd">
 <td> max </td>
 <td>仅用于值类型呈现。表示此字段可以具有的最大值。 </td>
 <td>整数</td>
 </tr>
 <tr class="even">
 <td>步骤</td>
 <td>仅用于值类型呈现。表示值应增加的步长，例如对于SLIDER和LINEAR_SCALE </td>
 <td>整数</td>
 </tr>
 <tr class="odd">
 <td>小数点</td>
 <td>仅用于值类型呈现。表示该值应使用的小数点位数。 </td>
 <td>整数</td>
 </tr>
 </tbody>
 </table>

*renderingType* 可以在创建或更新列出的元数据时设置
在第一个表中。渲染类型的示例有效负载如下所示
这：

    节目阶段部分：
    {
      ...
      “渲染类型”：{
        “类型”：“矩阵”
      }
      ...
    }

    值类型（数据元素、跟踪实体属性）
    {
      ...
      “渲染类型”：{
        “类型”：“滑块”，
        “分钟”：0，
        “最大”：1000，
        “步数”：50，
        “小数点”：0
      }
      ...
    }

## 对象样式（实验性） { #webapi_object_style } 

 <!--DHIS2-SECTION-ID:webapi_object_style-->

大多数元数据都有一个属性名称“样式”。可以使用此属性
由客户以某种方式表示对象。属性
目前支持的样式如下：

 <table>
 <caption>样式属性</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 属性<th> </th>
 <th>说明</th>
 <th>类型</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>颜色</td>
 <td>一种颜色，以十六进制表示。 </td>
 <td>字符串（＃000000）</td>
 </tr>
 <tr class="even">
 <td>图标</td>
 <td>一个图标，由图标名称表示。 </td>
 <td>字符串</td>
 </tr>
 </tbody>
 </table>

目前没有官方列表或对图标库的支持，所以
目前这由客户提供。以下列表显示
所有支持样式的对象：

  - 数据元素

  - 数据元素类别选项

  - 资料集

  - 指示符

  - 选项

  - 程序

  - 计划指标

  - 计划科

  - 程序阶段

  - 程序阶段部分

  - 关系（跟踪器）

  - 跟踪实体属性

  - 追踪实体类型

在创建或更新任何这些对象时，您可以包括
以下有效负载更改样式：

    {
      ...
      “风格”： {
        “颜色”：“#ffffff”，
        "icon": "我的美丽图标"
      }
      ...
    }

## ActiveMQ Artemis / AMQP 1.0集成 { #webapi_amqp_integration } 

 <!--DHIS2-SECTION-ID:webapi_amqp_integration-->

默认情况下，DHIS2 将在以下情况下启动 ActiveMQ Artemis 的嵌入式实例：
实例正在启动。对于大多数用例，您不需要配置任何内容
来利用它，但如果您的基础设施有一个现有的 AMQP 1.0 兼容
您想要使用的服务，您可以使用以下命令更改 *dhis.conf* 文件中的默认值
下表中的按键。

 <table>
   <caption>
    AMQP 配置键
   </caption>
   <colgroup>
     <col style="width: 15%" />
     <col style="width: 30%" />
     <col style="width: 55%" />
   </colgroup>
   <thead>
     <tr class="header">
       <th> 密钥 </th>
       <th> 值（默认第一个） </th>
       <th> 说明 </th>
     </tr>
   </thead>
   <tbody>
     <tr class="odd">
       <td> amqp.mode </td>
       <td> <code> 嵌入式 </code> | <code> 原生 </code> </td>
       <td> 默认 <code> EMBEDDED </code> 启动内部 AMQP 服务时
      DHIS2 实例正在启动。如果要连接到外部 AMQP 服务
      您需要将模式设置为 <code> NATIVE </code> 。 </td>
     </tr>
     <tr class="odd">
       <td> amqp.host </td>
       <td> <code> 127.0.0.1 </code> </td>
       <td> 要绑定到的主机。 </td>
     </tr>
     <tr class="even">
       <td> amqp.port </td>
       <td> <code> 15672 </code> </td>
       <td> 如果模式是 <code> EMBEDDED </code> 然后在这个端口上启动嵌入式服务器，
      如果 <code> NATIVE </code> 那么客户端将使用这个端口来连接。 </td>
     </tr>
     <tr class="odd">
       <td> amqp.username </td>
       <td> <code> 客人 </code> </td>
       <td> 如果使用 <code> NATIVE </code> 模式要连接的用户名。 </td>
     </tr>
     <tr class="even">
       <td> amqp.password </td>
       <td> <code> 客人 </code> </td>
       <td> 如果使用 <code> NATIVE </code> 模式连接到的密码。 </td>
     </tr>
     <tr class="odd">
       <td> amqp.embedded.persistence </td>
       <td> <code> 假 </code> | <code> 真 </code> </td>
       <td> 如果 mode 为 <code> EMBEDDED </code> ，则此属性控制
      内部队列。 </td>
     </tr>
   </tbody>
 </table>

## CSV元数据导入 { #webapi_csv_metadata_import } 

 <!--DHIS2-SECTION-ID:webapi_csv_metadata_import-->

DHIS2 支持导入 CSV 格式的元数据。列是
CSV 文件中不需要的可以省略，但顺序将是
做作的。如果您想指定出现在后面的列
排序但不指定按顺序出现较早的列
为它们包含空列（“”）。以下对象类型是
支持的：

  - 资料元素

  - 数据元素组

  - 类别选项

  - 类别选项组

  - 组织单位

  - 组织单位组

  - 验证规则

  - 翻译

  - 选项集

以下各节列出了CSV导入当前支持的对象类型的格式。

### 资料元素 { #webapi_csv_data_elements } 

 <!--DHIS2-SECTION-ID:webapi_csv_data_elements-->

<table>
<caption>Data Element CSV Format</caption>
<colgroup>
<col style="width: 13%" />
<col style="width: 7%" />
<col style="width: 27%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>Column</th>
<th>Required</th>
<th>Value (default first)</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Name</td>
<td>Yes</td>
<td></td>
<td>Name. Max 230 char. Unique.</td>
</tr>
<tr class="even">
<td>UID</td>
<td>No</td>
<td>UID</td>
<td>Stable identifier. Exactly 11 alpha-numeric characters, beginning with a character. Will be generated by system if not specified.</td>
</tr>
<tr class="odd">
<td>Code</td>
<td>No</td>
<td></td>
<td>Stable code. Max 50 char.</td>
</tr>
<tr class="even">
<td>Short name</td>
<td>No</td>
<td>50 first char of name</td>
<td>Will fall back to first 50 characters of name if unspecified. Max 50 char. Unique.</td>
</tr>
<tr class="odd">
<td>Description</td>
<td>No</td>
<td></td>
<td>Free text description.</td>
</tr>
<tr class="even">
<td>Form name</td>
<td>No</td>
<td></td>
<td>Max 230 char.</td>
</tr>
<tr class="odd">
<td>Domain type</td>
<td>No</td>
<td>AGGREGATE | TRACKER</td>
<td>Domain type for data element, can be aggregate or tracker. Max 16 char.</td>
</tr>
<tr class="even">
<td>Value type</td>
<td>No</td>
<td>INTEGER | NUMBER | UNIT_INTERVAL | PERCENTAGE | INTEGER_POSITIVE | INTEGER_NEGATIVE | INTEGER_ZERO_OR_POSITIVE | FILE_RESOURCE | COORDINATE |TEXT | LONG_TEXT | LETTER | PHONE_NUMBER | EMAIL | BOOLEAN | TRUE_ONLY | DATE | DATETIME</td>
<td>Value type. Max 16 char.</td>
</tr>
<tr class="odd">
<td>Aggregation operator</td>
<td>No</td>
<td>SUM | AVERAGE | AVERAGE_SUM_ORG_UNIT | COUNT | STDDEV | VARIANCE | MIN | MAX | NONE</td>
<td>Operator indicating how to aggregate data in the time dimension. Max 16 char.</td>
</tr>
<tr class="even">
<td>Category combination UID</td>
<td>No</td>
<td>UID</td>
<td>UID of category combination. Will default to default category combination if not specified.</td>
</tr>
<tr class="odd">
<td>Url</td>
<td>No</td>
<td></td>
<td>URL to data element resource. Max 255 char.</td>
</tr>
<tr class="even">
<td>Zero is significant</td>
<td>No</td>
<td>false | true</td>
<td>Indicates whether zero values will be stored for this data element.</td>
</tr>
<tr class="odd">
<td>Option set</td>
<td>No</td>
<td>UID</td>
<td>UID of option set to use for data.</td>
</tr>
<tr class="even">
<td>Comment option set</td>
<td>No</td>
<td>UID</td>
<td>UID of option set to use for comments.</td>
</tr>
</tbody>
</table>

下面是数据元素的 CSV 文件示例。首先
行将始终被忽略。请注意如何跳过列并依赖
系统使用的默认值。您还可以跳过列
你不使用出现在右边的

    名称、uid、代码、简称、描述
    “女性参加技能发展培训”,,“D0001”,“女性参加发展培训”
    "妇女参加社区组织",,"D0002","妇女参加社区组织"

### 组织单位 { #webapi_csv_org_units } 

 <!--DHIS2-SECTION-ID:webapi_csv_org_units-->

<table>
<caption>Organisation Unit CSV Format</caption>
<colgroup>
<col style="width: 14%" />
<col style="width: 10%" />
<col style="width: 21%" />
<col style="width: 53%" />
</colgroup>
<thead>
<tr class="header">
<th>Column</th>
<th>Required</th>
<th>Value (default first)</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Name</td>
<td>Yes</td>
<td></td>
<td>Name. Max 230 characters. Unique.</td>
</tr>
<tr class="even">
<td>UID</td>
<td>No</td>
<td>UID</td>
<td>Stable identifier. Max 11 char. Will be generated by system if not specified.</td>
</tr>
<tr class="odd">
<td>Code</td>
<td>No</td>
<td></td>
<td>Stable code. Max 50 char.</td>
</tr>
<tr class="even">
<td>Parent UID</td>
<td>No</td>
<td>UID</td>
<td>UID of parent organisation unit.</td>
</tr>
<tr class="odd">
<td>Short name</td>
<td>No</td>
<td>50 first char of name</td>
<td>Will fall back to first 50 characters of name if unspecified. Max 50 characters. Unique.</td>
</tr>
<tr class="even">
<td>Description</td>
<td>No</td>
<td></td>
<td>Free text description.</td>
</tr>
<tr class="odd">
<td>Opening date</td>
<td>No</td>
<td>1970-01-01</td>
<td>Opening date of organisation unit in YYYY-MM-DD format.</td>
</tr>
<tr class="even">
<td>Closed date</td>
<td>No</td>
<td></td>
<td>Closed date of organisation unit in YYYY-MM-DD format, skip if currently open.</td>
</tr>
<tr class="odd">
<td>Comment</td>
<td>No</td>
<td></td>
<td>Free text comment for organisation unit.</td>
</tr>
<tr class="even">
<td>Feature type</td>
<td>No</td>
<td>NONE | MULTI_POLYGON | POLYGON | POINT | SYMBOL</td>
<td>Geospatial feature type.</td>
</tr>
<tr class="odd">
<td>Coordinates</td>
<td>No</td>
<td></td>
<td>Coordinates used for geospatial analysis in Geo JSON format.</td>
</tr>
<tr class="even">
<td>URL</td>
<td>No</td>
<td></td>
<td>URL to organisation unit resource. Max 255 char.</td>
</tr>
<tr class="odd">
<td>Contact person</td>
<td>No</td>
<td></td>
<td>Contact person for organisation unit. Max 255 char.</td>
</tr>
<tr class="even">
<td>Address</td>
<td>No</td>
<td></td>
<td>Address for organisation unit. Max 255 char.</td>
</tr>
<tr class="odd">
<td>Email</td>
<td>No</td>
<td></td>
<td>Email for organisation unit. Max 150 char.</td>
</tr>
<tr class="even">
<td>Phone number</td>
<td>No</td>
<td></td>
<td>Phone number for organisation unit. Max 150 char.</td>
</tr>
</tbody>
</table>

使用父单位导入组织单位的最小示例
看起来像这样：

    名称、uid、代码、父级
    "西部省",,"WESTP","ImspTQPwCqd"
    "东部省",,"EASTP","ImspTQPwCqd"

### 验证规则 { #webapi_csv_validation_rules } 

 <!--DHIS2-SECTION-ID:webapi_csv_validation_rules-->

<table>
<caption>验证规则 CSV 格式</caption>
<colgroup>
<col style="width: 17%" />
<col style="width: 7%" />
<col style="width: 28%" />
<col style="width: 46%" />
</colgroup>
<thead>
<tr class="header">
<th>专栏</th>
<th>必填</th>
<th>值（默认为先）</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>名称</td>
<td>是</td>
<td></td>
<td>名称。最多 230 个字符。唯一。</td>
</tr>
<tr class="even">
<td>UID</td>
<td>无</td>
<td>UID</td>
<td>稳定的标识符。最多 11 个字符。如果未指定，将由系统生成。</td>
</tr>
<tr class="odd">
<td>代码</td>
<td>无</td>
<td></td>
<td>稳定代码。最多 50</td>
</tr>
<tr class="even">
<td>说明</td>
<td>无</td>
<td></td>
<td>自由文本描述。</td>
</tr>
<tr class="odd">
<td>说明</td>
<td>无</td>
<td></td>
<td>自由文本教学。</td>
</tr>
<tr class="even">
<td>重要性</td>
<td>不重要</td>
<td>中 | 高 | 低</td>
<td></td>
</tr>
<tr class="odd">
<td>规则类型</td>
<td>无</td>
<td>验证</td>
<td></td>
</tr>
<tr class="even">
<td>操作员</td>
<td>无</td>
<td>equal_to | not_equal_to | greater_than | greater_than_or_equal_to | less_than | less_than_or_equal_to | compulsory_pair | exclusive_pair</td>
<td></td>
</tr>
<tr class="odd">
<td>周期类型</td>
<td>无</td>
<td>月刊 | 日刊 | 周刊 | 季刊 | 半年刊 | 年刊</td>
<td></td>
</tr>
<tr class="even">
<td>左侧表达</td>
<td>左侧表达式</td>
<td></td>
<td>基于数据元素和选项组合 UID 的数学公式。</td>
</tr>
<tr class="odd">
<td>左侧表达式描述</td>
<td>左侧表达式</td>
<td></td>
<td>自由文本。</td>
</tr>
<tr class="even">
<td>如为空白，左侧为空</td>
<td>无</td>
<td>false | true</td>
<td>布尔值。</td>
</tr>
<tr class="odd">
<td>右侧表达式</td>
<td>是</td>
<td></td>
<td>基于数据元素和选项组合 UID 的数学公式。</td>
</tr>
<tr class="even">
<td>右侧表达式描述</td>
<td>是</td>
<td></td>
<td>自由文本。</td>
</tr>
<tr class="odd">
<td>如为空白，右侧为空</td>
<td>无</td>
<td>false | true</td>
<td>布尔值。</td>
</tr>
</tbody>
</table>

### 选项集 { #webapi_csv_option_sets } 

 <!--DHIS2-SECTION-ID:webapi_csv_option_sets-->

<table style="width:100%;">
<caption>选项集 CSV 格式</caption>
<colgroup>
<col style="width: 14%" />
<col style="width: 11%" />
<col style="width: 15%" />
<col style="width: 59%" />
</colgroup>
<thead>
<tr class="header">
<th>列</th>
<th>必填</th>
<th>值（默认为第一个）</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>OptionSetName</td>
<td>是</td>
<td></td>
<td>名称。最多 230 个字符。独特的。每个选项均应重复。</td>
</tr>
<tr class="even">
<td>OptionSetUID</td>
<td>否</td>
<td>UID</td>
<td>稳定的标识符。最多 11 个字符。如果不指定则由系统生成。每个选项均应重复。</td>
</tr>
<tr class="odd">
<td>OptionSetCode</td>
<td>否</td>
<td></td>
<td>稳定的代码。最多 50 个字符。每个选项均应重复。</td>
</tr>
<tr class="even">
<td>选项名称</td>
<td>是</td>
<td></td>
<td>选项名称。最多 230 个字符。</td>
</tr>
<tr class="odd">
<td>OptionUID</td>
<td>否</td>
<td>UID</td>
<td>稳定的标识符。最多 11 个字符。如果未指定，将由系统生成。</td>
</tr>
<tr class="even">
<td>选项代码</td>
<td>是</td>
<td></td>
<td>稳定的代码。最多 50 个字符。</td>
</tr>
</tbody>
</table>

选项集的格式很特殊。前三个值代表
一个选项集。最后三个值代表一个选项。首先
代表选项集的三个值应该对每个值重复
选项。

    选项集名称、选项集UID、选项集代码、选项名称、选项UID、选项代码
    “颜色”,,“颜色”,“蓝色”,,“蓝色”
    “颜色”,,“颜色”,“绿色”,,“绿色”
    “颜色”,,“颜色”,“黄色”,,“黄色”
    “性别”,,,“男”,,“男”
    “性别”,,,“女性”,,“女性”
    “性别”,,,“未知”,,“未知”
    “结果”,,,“高”,,“高”
    “结果”,,,“中等”,,“中等”
    “结果”,,,“低”,,“低”
    “影响”，“cJ82jd8sd32”，“影响”，“很棒”，，“很棒”
    “影响”，“cJ82jd8sd32”，“影响”，“中”，，“中”
    “影响”，“cJ82jd8sd32”，“影响”，“差”，，“差”

### 收藏会员 { #collection-membership } 

除了导入对象之外，您还可以选择仅导入
对象和组之间的组成员关系。目前
支持以下组和对象对

  - 组织单位组-组织单位

  - 数据元素组-数据元素

  - 指标组-指标

这些导入的CSV格式相同

<table>
<caption>集合成员 CSV 格式</caption>
<colgroup>
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th>列</th>
<th>必填</th>
<th>值（默认为第一个）</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>UID</td>
<td>是</td>
<td>UID</td>
<td>要添加对象的集合的 UID</td>
</tr>
<tr class="even">
<td>UID</td>
<td>是</td>
<td>UID</td>
<td>要添加到集合中的对象的 UID</td>
</tr>
</tbody>
</table>

### 其他物件 { #webapi_csv_other_objects } 

 <!--DHIS2-SECTION-ID:webapi_csv_other_objects-->

<table>
<caption>数据元素组、类别选项、类别选项组、组织单位组 CSV 格式</caption>
<colgroup>
<col style="width: 17%" />
<col style="width: 12%" />
<col style="width: 14%" />
<col style="width: 55%" />
</colgroup>
<thead>
<tr class="header">
<th>列</th>
<th>必填</th>
<th>值（默认为第一个）</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>名称</td>
<td>是</td>
<td></td>
<td>名称。最多 230 个字符。独一无二。</td>
</tr>
<tr class="even">
<td>UID</td>
<td>否</td>
<td>UID</td>
<td>稳定的标识符。最多 11 个字符。如果未指定，将由系统生成。</td>
</tr>
<tr class="odd">
<td>代码</td>
<td>否</td>
<td></td>
<td>稳定的代码。最多 50 个字符。</td>
</tr>
<tr class="even">
<td>简称</td>
<td>否</td>
<td></td>
<td>简称。最多 50 个字符。</td>
</tr>
</tbody>
</table>

类别选项的示例如下所示：

    名称、uid、代码、简称
    “男”,,“男”
    “女”,,“女”

## 删除的对象 { #webapi_deleted_objects } 

 <!--DHIS2-SECTION-ID:webapi_deleted_objects-->

删除的对象资源提供了元数据对象的日志
删除。

    / api / deletedObjects

每当删除元数据类型的对象时，都会保留一个日志
uid、代码、类型和删除时间。这个API是
可在 */api/deletedObjects* 获取字段过滤和对象过滤
与其他元数据资源的工作方式类似。

获取类型为数据元素的已删除对象：

    GET /api/deletedObjects.json?klass=DataElement

获取在 2015 年删除的指标类型的已删除对象和
向前：

    GET /api/deletedObjects.json?klass=指示器&deletedAt=2015-01-01

## 收藏夹 { #webapi_favorites } 

 <!--DHIS2-SECTION-ID:webapi_favorites-->

某些类型的元数据对象可以标记为收藏夹
当前登录的用户。这目前适用于仪表板。

    /api/29/dashboards/<uid>/favorite

要使仪表板成为收藏夹，您可以发出 *POST* 请求（无内容
type required) 到这样的 URL：

    /api/29/仪表板/iMnYyBfSxmM/收藏夹

要将仪表板删除为收藏夹，您可以发出 *DELETE* 请求
使用与上面相同的 URL。

收藏夹状态将显示为布尔值 *收藏夹* 字段
元数据响应中的对象（例如仪表板）。

## 订阅内容 { #webapi_subscription } 

 <!--DHIS2-SECTION-ID:webapi_subscription-->

登录的用户可以订阅某些类型的对象。目前
可订阅的对象是Chart，EventChart，EventReport，
地图和ReportTable。

要获取对象的订阅者（返回用户 ID 数组），您
可以发出 *GET* 请求：

    /api/30/<object-type>/<object-id>/订阅者

请参见以下示例：

    /api/30/charts/DkPKc1EUmC2/订阅者

检查当前用户是否订阅了一个对象（返回一个
boolean) 您可以执行 *GET* 调用：

    /api/30/<object-type>/<object-id>/已订阅

请参见以下示例：

    /api/30/charts/DkPKc1EUmC2/订阅

要订阅/取消订阅对象，请执行 *POST/DELETE*
请求（不需要内容类型）：

    /api/30/<object-type>/<object-id>/订阅者

## 文件资源 { #webapi_file_resources } 

 <!--DHIS2-SECTION-ID:webapi_file_resources-->

*文件资源*是用于表示和存储二进制内容的对象。
*FileResource* 对象本身包含文件元数据（名称、
内容类型、大小等）以及允许检索
来自数据库外部文件存储的内容。 *FileResource* 对象
与其他数据库一样存储在数据库中，但内容（文件）是
存储在别处并可使用包含的引用检索
*（存储密钥）*。

    /api/26/文件资源

文件资源的内容不能直接访问，但可以
从其他对象（例如数据值）引用来存储二进制
内容的大小几乎不受限制。

文件资源本身的创建是通过
*api/fileResources* 端点作为分段上传
    后请求：

    curl -X POST -v -F“file=@/Path/to/file;filename=name-of-file.png” https://server/api/26/fileResources

唯一需要的表单参数是 *file*，它是要发送的文件
上传。文件名和内容类型也应包含在
请求（任何 Web 浏览器都会为您处理），但将
未提供时替换为默认值。

成功创建文件资源后，返回的数据将包含
一个 *response* 字段，该字段又包含 *fileResource* ，如下所示：

    {
      "httpStatus": "已接受",
      “http状态代码”：202，
      “状态”：“正常”，
      “回复”： {
        "responseType": "文件资源",
        “文件资源”：{
          "name": "文件名.png",
          “创建”：“2015-10-16T16：34：20.654+0000”，
          "最后更新": "2015-10-16T16:34:20.667+0000",
          “外部访问”：假，
          “公共访问”： ” -  -  -  - ”，
          “用户”：{...}，
          "displayName": "文件名.png",
          "contentType": "图片/png",
          “内容长度”：512571，
          "contentMd5": "4e1fc1c3f999e5aa3228d531e4adde58",
          “存储状态”：“待处理”，
          “id”：“xm4JwRwke0i”
        }
      }
    }

请注意，响应是*202 Accepted*，表示返回
资源已提交后台处理（持续到
在本例中为外部文件存储）。另请注意 *storageStatus* 字段
指示内容是否已存储。在这
指向外部存储的持久化尚未完成（它是
可能被上传到某个基于云的商店），如
*待处理*状态。

即使文件资源的内容还没有完全存储
现在可以使用，例如作为数据值中的引用内容（请参阅
[使用文件数据值](#datavalue_file))。如果我们需要检查
更新的 *storageStatus* 或以其他方式检索元数据
文件，*fileResources* 端点可以是
    询问。

    curl -v https://server/api/26/fileResources/xm4JwRwke0i -H“接受：application/json”

此请求将返回 *FileResource* 对象，如以下所示
上面例子的响应。

### 文件资源限制 { #webapi_file_resources_constraints } 

 <!--DHIS2-SECTION-ID:webapi_file_resources_constraints-->

  - 文件资源**必须**从另一个对象引用（分配）
    以便长期坚持。一个文件资源是
    创建但未被其他对象（例如数据值）引用
    被认为处于*分期*。此中的任何文件资源
    状态并且早于**两小时**将被标记为删除
    并将最终从系统中清除。

  - 文件资源初始创建返回的ID不是
    可从任何其他位置检索，除非文件资源具有
    已被引用（其中 ID 将被存储为引用），
    所以丢失它需要重复 POST 请求和一个新的
    要创建的对象。 *孤立*文件资源将被清理
    自动起来。

  - 文件资源对象是*不可变的*，意味着修改不是
    允许并需要创建一个全新的资源。

## 元数据版本控制 { #webapi_metadata_versioning } 

 <!--DHIS2-SECTION-ID:webapi_metadata_versioning-->

本节介绍了可用的元数据版本控制 API
2.24

  - /api/metadata/version - 此 api 将返回当前元数据
    调用它的系统的版本。

<table>
<caption>Query Parameters</caption>
<colgroup>
<col style="width: 19%" />
<col style="width: 23%" />
<col style="width: 57%" />
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>versionName</td>
<td>false</td>
<td>If this parameter is not specified, it will return the current version of the system or otherwise it will return the details of the versionName passed as parameter. (versionName is of the syntax &quot;Version_&lt;id&gt;&quot;</td>
</tr>
</tbody>
</table>

### 获取元数据版本示例 { #webapi_metadata_versioning_examples } 

 <!--DHIS2-SECTION-ID:webapi_metadata_versioning_examples-->

**示例：获取该系统当前的元数据版本**

**样本
    要求：**

    curl -u admin:district "https://play.dhis2.org/dev/api/metadata/version"

**回复示例：**

    {
        "名称"："版本_4"、
        "创建"："2016-06-30T06:01:28.684+0000",
        "lastUpdated"："2016-06-30T06:01:28.685+0000",
        "externalAccess": false、
        "显示名称"："Version_4"、
        "类型"："BEST_EFFORT"、
        "hashCode"： "848bf6edbaf4faeb7d1"848bf6edbaf4faeb7d1a1169445357b0",
        "id"："Ayz2AEMB6"Ayz2AEMB6ry" }
    }

**示例：获取名称为“Version\_2”的版本详细信息**

**样本
    要求：**

    curl -u admin:district "https://play.dhis2.org/dev/api/metadata/version?versionName=Version_2"

**回复示例：**

    {
        "name": "Version_2",
        "created": "2016-06-30T05:59:33.238+0000",
        "lastUpdated": "2016-06-30T05:59:33.239+0000",
        "externalAccess": false,
        "displayName": "Version_2",
        "type": "BEST_EFFORT",
        "hashCode": "8050fb1a604e29d5566675c86d02d10b",
        "id": "SaNyhusVxBG"
    }

  - /api/metadata/version/history - 此 api 将返回所有的列表
    调用它的系统的元数据版本。

 <table>
 查询参数<caption> </caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 23%" />
 <col style="width: 57%" />
 </colgroup>
 <thead>
 <tr class="header">
 名称<th> <p>名称</p> </th>
 <th> <p>必需</p> </th>
 <th> <p>说明</p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 基线<td> <p>基线</p> </td>
 <td> <p>否</p> </td>
 <td> <p>如果未指定此参数，它将返回所有元数据版本的列表。否则，我们需要传递形式为&quot;Version_&lt;id&gt;&quot;的versionName参数。然后，它将返回系统中存在的版本列表，这些版本是在作为查询参数提供的版本名称之后创建的。 </p> </td>
 </tr>
 </tbody>
 </table>

### 获取所有元数据版本的列表 { #webapi_get_list_of_metadata_versions }

 <!--DHIS2-SECTION-ID:webapi_get_list_of_metadata_versions-->

**示例：获取本系统所有版本列表**

**样本
    要求：**

    curl -u admin:district "https://play.dhis2.org/dev/api/metadata/version/history"

**回复示例：**

    {
        "metadataversions": [{
            "name": "Version_1",
            "type": "BEST_EFFORT",
            "created": "2016-06-30T05:54:41.139+0000",
            "id": "SjnhUp6r4hG",
            "hashCode": "fd1398ff7ec9fcfd5b59d523c8680798"
         }, {
             "name": "Version_2",
             "type": "BEST_EFFORT",
             "created": "2016-06-30T05:59:33.238+0000",
             "id": "SaNyhusVxBG",
             "hashCode": "8050fb1a604e29d5566675c86d02d10b"
         }, {
             "name": "Version_3",
             "type": "BEST_EFFORT",
             "created": "2016-06-30T06:01:23.680+0000",
             "id": "FVkGzSjAAYg",
             "hashCode": "70b779ea448b0da23d8ae0bd59af6333"
         }]
    }

**示例：获取此系统创建后的所有版本列表
“版本\_2”**

**样本
    要求：**

    curl -u admin:district "https://play.dhis2.org/dev/api/metadata/version/history?baseline=Version_2"

**回复示例：**

    {
        "元数据版本"：[{
            "name"："Version_3"、
            "类型"："BEST_EFFORT"、
            "创建"："2016-06-30T06:01:23.680+0000",
            "id"："FVkGzSjAAYg"、
            "哈希代码"："70b779ea448"："70b779ea448b0da23d8ae0bd59af6333"
        }, {
            "名称"："版本_4"、
            "类型"："BEST_EFFORT"、
            "创建"："2016-06-30T06:01:28.684+0000",
            "id"："Ayz2AEMB6ry"、
            "hashCode"："848bf6edbaf4faeb7d1a1169445357b0"
        }]
     }

  - /api/metadata/version/create - 此 api 将创建元数据
    version 参数中指定的版本类型。

 <table>
 查询参数<caption> </caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 23%" />
 <col style="width: 57%" />
 </colgroup>
 <thead>
 <tr class="header">
 名称<th> <p>名称</p> </th>
 <th> <p>必需</p> </th>
 <th> <p>说明</p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> <p>类型</p> </td>
 <td> <p>是</p> </td>
 <td> <p>需要创建的元数据版本的类型。 </p>
 <ul>
 <li> <p> BEST_EFFORT </p> </li>
 <li> <p> ATOMIC </p> </li>
 </ul> </td>
 </tr>
 </tbody>
 </table>

用户可以选择需要创建的元数据类型。
元数据版本类型决定了进口商应该如何对待给定的
版本。导入元数据时将使用此类型。有
两种类型的元数据。

  - BEST\_EFFORT - 这种类型表明可能会丢失引用
    忽略，导入器可以继续导入元数据（例如
    数据元素组导入中缺少数据元素）。

  - ATOMIC - 确保对元数据引用进行严格的类型检查
    如果任何引用不符合，元数据导入将会失败
    存在。

> **注意**
>
> 建议使用 ATOMIC 类型的版本，以确保所有
> 系统（中央和本地）具有相同的元数据。如有遗漏
> 引用在验证阶段本身被捕获。请参阅
> 进口商详细信息以便更好地了解。

### 创建元数据版本 { #webapi_create_metadata_version } 

 <!--DHIS2-SECTION-ID:webapi_create_metadata_version-->

**示例：创建 BEST\_EFFORT 类型的元数据版本**

**样本
    要求：**

    curl -X POST -u admin:district "https://play.dhis2.org/dev/api/metadata/version/create?type=BEST_EFFORT"

**回复示例：**

    {
        "名称"："版本_1"、
        "创建"："2016-06-30T05:54:41.139+0000",
        "lastUpdated"："2016-06-30T05:54:41.333+0000",
        "externalAccess": false、
        "publicAccess"："--------",
        "用户"：{
            "name"："John Traore"、
            "创建"："2013-04-18T17:15:08.407+0000",
            "最后更新"："2016-04-06T00:06:06.571+0000",
            "externalAccess": false、
            "displayName"："John Traore"、
            "id"："xE7jOejl9FI" }.
        },
        "displayName"（显示名称）："版本_1"、
        "类型"："BEST_EFFORT"、
        "hashCode"："fd1398ff7ec9fcfd5b59d523c8680798",
        "id"："SjnhUp6r4hG" }
    }

  - /api/metadata/version/{versionName}/data - 此 api 将下载
    特定于作为路径传递的版本名称的实际元数据
    范围。

  - /api/metadata/version/{versionName}/data.gz - 此 api 将下载
    特定于作为路径传递的版本名称的实际元数据
    压缩格式（gzipped）的参数。

<table>
<caption>路径参数</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th><p>姓名</p></th>
<th><p>必须填写</p></th>
<th><p>说明</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>版本名称</p></td>
<td><p>true</p></td>
<td><p> &quot;Version_ id  形式的路径参数，以便 api 下载特定版本


&lt;&gt;&quot;</p></td></tr></tbody></table>

### 下载版本元数据 { #webapi_download_version_metadata } 

 <!--DHIS2-SECTION-ID:webapi_download_version_metadata-->

**示例：获取“Version\_5”的实际元数据**

**样本
    要求：**

    卷曲 -u 管理：区“https://play.dhis2.org/dev/api/metadata/version/Version_5/data”

**回复示例：**

```
{
    "date"："2016-06-30T06:10:23.120+0000",
    "数据元素"：[{
        "代码"："ANC 第五次访问"、
        "创建"："2016-06-30T06:10:09.870+0000",
        "lastUpdated"："2016-06-30T06:10:09.870+0000",
        "名称"："ANC 第五次访问"、
        "id"："sCuZKDsix7Y"、
        "shortName"："ANC 5th Visit"、
        "aggregationType"："SUM"、
        "domainType"："AGGREGATE"、
        "zeroIsSignificant": false、
        "valueType"： "数值"："数值"、
        "categoryCombo"：{
            "id"："p0KPaWEg3cf"
        },
        "用户"：{
            "id"："xE7jOejl9FI"
        }
    }]
}
```

## 元数据同步 { #webapi_metadata_synchronization } 

 <!--DHIS2-SECTION-ID:webapi_metadata_synchronization-->

本节介绍了可用的元数据同步 API
2.24 开始

  - /api/metadata/sync - 此 api 执行元数据同步
    通过下载和在查询参数中传递的版本名称
    从远程服务器导入指定的版本，如定义
    设置应用程序。

 <table>
 查询参数<caption> </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 名称<th> <p>名称</p> </th>
 <th> <p>必需</p> </th>
 <th> <p>说明</p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> <p>版本名称</p> </td>
 <td> <p>是</p> </td>
 <td> <p> versionName查询参数，格式为&quot;Version_&lt;id&gt;&quot;。 api从远程服务器下载此版本，并将其导入本地系统。 </p> </td>
 </tr>
 </tbody>
 </table>

  - 使用此 API 时应格外小心。请注意，有
    以完全自动化的方式实现同步的另一种方法
    利用“数据管理”中的元数据同步任务
    应用程序。详见用户手册第 22 章 22.17 节
    关于元数据同步任务。

  - 此同步 API 也可用于同步元数据
    从元数据同步调度程序失败的版本。由于
    它依赖于给定的元数据版本号，应该注意
    为调用 this 的顺序而采用。例如。如果这个api是
    用于从中央实例同步一些更高版本，然后
    同步可能会失败，因为元数据依赖项不存在于
    本地实例。

  - 假设本地实例版本为\_12，如果使用该api
    从中央同步版本\_15（类型为BEST\_EFFORT）
    例如，调度程序将从以下位置开始同步元数据
    版本\_16。所以本地实例不会有元数据
    版本\_12 和版本\_15 之间的版本。你需要手动
    仅使用此 API 同步缺失的版本。

### 同步元数据版本 { #webapi_metadata_synchronization_version } 

 <!--DHIS2-SECTION-ID:webapi_metadata_synchronization_version-->

**示例：将版本\_6从中央系统同步到此系统**

**样本
    要求：**

    curl -u admin:district "https://play.dhis2.org/dev/api/metadata/sync?versionName=Version_6"

## 数据值 { #webapi_data_values } 

 <!--DHIS2-SECTION-ID:webapi_data_values-->

本节关于发送和读取数据值。

    /api/26/dataValueSets

### 发送数据值 { #webapi_sending_data_values } 

 <!--DHIS2-SECTION-ID:webapi_sending_data_values-->

系统集成的一个常见用例是需要发送一组
将数据值从第三方系统导入 DHIS。在这个例子中我们将
使用 <http://play.dhis2.org/demo> 上的 DHIS2 演示作为基础，我们
建议您使用网络浏览器访问提供的链接
阅读（使用 *admin/district* 作为用户名/密码登录）。我们猜测
我们使用简单的软件客户端收集了基于案例的数据
在手机上运行*死亡率<5年*数据集
*Ngelehun CHC* 社区（*Badjia* 酋邦，*Bo* 区）
2014 年 1 月。我们现在已将数据汇总成
统计报告并希望将该数据发送给国家 DHIS2
实例。

最适合我们发送数据目的的资源
值是 *dataValueSets* 资源。一个数据值集代表一个
具有逻辑关系的一组数据值，通常来自
从相同的数据输入表格中捕获。我们点击 HTML 链接
代表将带我们去
<http://play.dhis2.org/demo/api/24/dataValueSets>。格式看起来像
这：

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataSet="dataSetID"
  completeDate="date" period="period" orgUnit="orgUnitID" attributeOptionCombo="aocID">
  <dataValue dataElement="dataElementID" 
    categoryOptionCombo="cocID" value="1" comment="comment1"/>
  <dataValue dataElement="dataElementID" 
    categoryOptionCombo="cocID" value="2" comment="comment2"/>
  <dataValue dataElement="dataElementID" 
    categoryOptionCombo="cocID" value="3" comment="comment3"/>
</dataValueSet>
```

JSON支持以下格式：

    {
      "数据集": "数据集ID",
      “完整日期”：“日期”，
      “期间”：“期间”，
      "orgUnit": "orgUnitID",
      “attributeOptionCombo”，“aocID”，
      “数据值”：[
        { "dataElement": "dataElementID", "categoryOptionCombo": "cocID", "value": "1", "comment": "comment1" },
        { "dataElement": "dataElementID", "categoryOptionCombo": "cocID", "value": "2", "comment": "comment2" },
        { "dataElement": "dataElementID", "categoryOptionCombo": "cocID", "value": "3", "comment": "comment3" }
      ]
    }

CSV支持以下格式：

    “数据元素”，“期间”，“组织单元”，“catoptcombo”，“attroptcombo”，“值”，“存储者”，“lastupd”，“注释”
    "dataElementID","period","orgUnitID","cocID","aocID","1","用户名","2015-04-01","comment1"
    "dataElementID","period","orgUnitID","cocID","aocID","2","用户名","2015-04-01","comment2"
    "dataElementID","period","orgUnitID","cocID","aocID","3","用户名","2015-04-01","comment3"

*注：*时间请参阅上面的日期和时段部分
格式。

从示例中我们可以看出，我们需要识别时期、
数据集、组织单位（设施）和数据元素
报告。

为了获取数据集的标识符，我们返回入口点
在 <http://play.dhis2.org/demo/api/24> 并点击嵌入的链接
指向位于的 *dataSets* 资源
<http://play.dhis2.org/demo/api/24/dataSets>。从那里我们发现并
点击*死亡率\< 5 年*数据集的链接，我们可以得到
<http://play.dhis2.org/demo/api/24/dataSets/pBOMPrpg1QX>。资源
方便地表示*死亡率\< 5 年*数据集
通告作为其成员的数据元素的链接。从这里
我们可以点击这些链接并获取数据的标识符
元素。为简洁起见，我们将仅报告三个数据元素：
*麻疹*，ID 为 *f7n9E0hX8qk*，*痢疾*，ID 为 *Ix2HsbDMLea* 和
*霍乱*，ID为*eY5ehpbEsB7*。

剩下的就是获取设施的标识符（org
单元）。 *dataSet* 表示方便地提供了到组织的链接
对此进行报告的单位，因此我们搜索*Ngelehun CHC* 并遵循
链接到 HTML 表示形式
<http://play.dhis2.org/demo/api/24/organisationUnits/DiszpKrYNg8>，其中
告诉我们该组织单位的标识符是 *DiszpKrYNg8*。

根据基于病例的数据，我们假设有 12 例麻疹病例，14 例
痢疾病例和霍乱病例 16 例。我们现在已经聚集了足够多的人
能够将 XML 数据值集组合在一起的信息
信息：

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataSet="pBOMPrpg1QX"
  completeDate="2014-02-03" period="201401" orgUnit="DiszpKrYNg8">
  <dataValue dataElement="f7n9E0hX8qk" value="12"/>
  <dataValue dataElement="Ix2HsbDMLea" value="14"/>
  <dataValue dataElement="eY5ehpbEsB7" value="16"/>
</dataValueSet>
```

JSON格式：

```json
{
  "dataSet": "pBOMPrpg1QX",
  "completeDate": "2014-02-03",
  "period": "201401",
  "orgUnit": "DiszpKrYNg8",
  "dataValues": [
    {
      "dataElement": "f7n9E0hX8qk", 
      "value": "1"
    },
    {
      "dataElement": "Ix2HsbDMLea", 
      "value": "2"
    },
    {
      "dataElement": "eY5ehpbEsB7", 
      "value": "3"
    }
  ]
}
```

为了执行功能测试，我们将使用 cURL 工具，它提供了
一种使用 HTTP 传输数据的简单方法。首先我们保存数据
值集 XML 内容位于名为 *datavalueset.xml* 的文件中。来自
该文件所在的目录我们调用以下命令
命令
    线：

    卷曲-d@datavalueset.xml“https://play.dhis2.org/demo/api/26/dataValueSets”
      -H“内容类型：application/xml”-u admin：区-v

要发送 JSON 内容，您必须设置 content-type 标头
因此：

    卷曲-d @datavalueset.json“https://play.dhis2.org/demo/api/26/dataValueSets”
      -H“内容类型：application/json”-u admin：区-v

该命令将向演示 Web API 发送请求，设置
*application/xml* 作为内容类型并使用进行身份验证
管理员/地区作为用户名/密码。如果一切顺利，这将返回
*200 OK* HTTP 状态代码。您可以验证数据是否已被
通过打开 DHIS2 中的数据输入模块并选择组织来接收
本例中使用的单位、数据集和期间。

API 遵循错误处理和 HTTP 状态的正常语义
代码。如果您提供无效的用户名或密码，*401 Unauthorized*
被返回。如果您提供 application/xml 以外的内容类型，
返回*415 不支持的媒体类型*。如果 XML 内容无效
根据 DXF 命名空间，返回 *400 Bad Request*。如果你
在 XML 内容中提供无效标识符，*409 冲突* 是
与描述性消息一起返回。

### 发送大量数据值 { #webapi_sending_bulks_data_values } 

 <!--DHIS2-SECTION-ID:webapi_sending_bulks_data_values-->

前面的例子向我们展示了如何发送一组相关的数据值
共享同一时期和组织单位。这个例子将向我们展示
如何发送大量不一定是的数据值
逻辑相关。

我们将再次与
<http://play.dhis2.org/demo/api/24/dataValueSets> 资源。这次我们
不会指定 dataSet 和completeDate 属性。此外，我们还将
指定单个数据值的 period 和 orgUnit 属性
元素而不是外部数据值集元素。这会
使我们能够发送不同时期和组织单位的数据值：

    <dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0">
      <dataValue dataElement="f7n9E0hX8qk" period="201401" orgUnit="DiszpKrYNg8" value="12"/>
      <dataValue dataElement="f7n9E0hX8qk" period="201401" orgUnit="FNnj3jKGS7i" value="14"/>
      <dataValue dataElement="f7n9E0hX8qk" period="201402" orgUnit="DiszpKrYNg8" value="16"/>
      <dataValue dataElement="f7n9E0hX8qk" period="201402" orgUnit="Jkhdsf8sdf4" value="18"/>
    </dataValueSet>

JSON格式：

    {
      “数据值”：[
        {“dataElement”：“f7n9E0hX8qk”，“期间”：“201401”，“orgUnit”：“DiszpKrYNg8”，“值”：“12”}，
        {“dataElement”：“f7n9E0hX8qk”，“期间”：“201401”，“orgUnit”：“FNnj3jKGS7i”，“值”：“14”}，
        {“dataElement”：“f7n9E0hX8qk”，“期间”：“201402”，“orgUnit”：“DiszpKrYNg8”，“值”：“16”}，
        {“dataElement”：“f7n9E0hX8qk”，“期间”：“201402”，“orgUnit”：“Jkhdsf8sdf4”，“值”：“18”}
      ]
    }

CSV格式：

    “数据元素”、“期间”、“组织单位”、“类别选项组合”、“属性选项组合”、“值”
    “f7n9E0hX8qk”，“201401”，“DiszpKrYNg8”，“bRowv6yZOF2”，“bRowv6yZOF2”，“1”
    “Ix2HsbDMLea”，“201401”，“DiszpKrYNg8”，“bRowv6yZOF2”，“bRowv6yZOF2”，“2”
    “eY5ehpbEsB7”，“201401”，“DiszpKrYNg8”，“bRowv6yZOF2”，“bRowv6yZOF2”，“3”

我们通过使用 cURL 发送 XML 中的数据值进行测试
    格式：

    卷曲-d@datavalueset.xml“https://play.dhis2.org/demo/api/26/dataValueSets”
      -H“内容类型：应用程序/xml”-u admin：区-v

请注意，使用 CSV 格式时，您必须使用二进制数据选项
保留 CSV 文件中的换行符：

    卷曲--data-binary @datavalueset.csv“https://play.dhis2.org/demo/24/api/dataValueSets”
      -H“内容类型：应用程序/csv”-u admin：区-v

数据值集资源提供有用的 XML 响应
当您想要验证您的请求所产生的影响时。我们第一次
发送上面的数据值设置请求，服务器将响应
以下*导入摘要*：

    <importSummary>
      <dataValueCount imported="2" updated="1" ignored="1"/>
      <dataSetComplete>假</dataSetComplete>
    </importSummary>

此消息告诉我们已导入 3 个数据值，已导入 1 个数据值
更新，同时忽略零数据值。单一更新如下
我们在上一个示例中发送该数据值的结果。一个数据
如果值引用不存在的数据元素，则该值将被忽略，
期间、组织单位或数据集。在我们的例子中，这个被忽略的值是
由于最后一个数据值对组织单位的引用无效而导致。
数据集完整元素将显示数据的日期
值设置已完成，如果没有数据元素属性，则为 false
提供。

### 导入参数 { #webapi_data_values_import_parameters } 

 <!--DHIS2-SECTION-ID:webapi_data_values_import_parameters-->

可以使用一组导入参数来自定义导入过程：

<table>
<caption>Import parameters</caption>
<thead>
<tr class="header">
<th>Parameter</th>
<th>Values (default first)</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>dataElementIdScheme</td>
<td>id | name | code | attribute:ID</td>
<td>Property of the data element object to use to map the data values.</td>
</tr>
<tr class="even">
<td>orgUnitIdScheme</td>
<td>id | name | code | attribute:ID</td>
<td>Property of the org unit object to use to map the data values.</td>
</tr>
<tr class="odd">
<td>categoryOptionComboIdScheme</td>
<td>id | name | code | attribute:ID</td>
<td>Property of the category option combo and attribute option combo objects to use to map the data values.</td>
</tr>
<tr class="even">
<td>idScheme</td>
<td>id | name | code| attribute:ID</td>
<td>Property of all objects including data elements, org units and category option combos, to use to map the data values.</td>
</tr>
<tr class="odd">
<td>preheatCache</td>
<td>false | true</td>
<td>Indicates whether to preload metadata caches before starting to import data values, will speed up large import payloads with high metadata cardinality.</td>
</tr>
<tr class="even">
<td>dryRun</td>
<td>false | true</td>
<td>Whether to save changes on the server or just return the import summary.</td>
</tr>
<tr class="odd">
<td>importStrategy</td>
<td>CREATE | UPDATE | CREATE_AND_UPDATE | DELETE</td>
<td>Save objects of all, new or update import status on the server.</td>
</tr>
<tr class="even">
<td>skipExistingCheck</td>
<td>false | true</td>
<td>Skip checks for existing data values. Improves performance. Only use for empty databases or when the data values to import do not exist already.</td>
</tr>
<tr class="even">
<td>skipAudit</td>
<td>false | true</td>
<td>Skip audit, meaning audit values will not be generated. Improves performance at the cost of ability to audit changes. Requires authority "F_SKIP_DATA_IMPORT_AUDIT".</td>
</tr>
<tr class="odd">
<td>async</td>
<td>false | true</td>
<td>Indicates whether the import should be done asynchronous or synchronous. The former is suitable for very large imports as it ensures that the request does not time out, although it has a significant performance overhead. The latter is faster but requires the connection to persist until the process is finished.</td>
</tr>
<tr class="even">
<td>force</td>
<td>false | true</td>
<td>Indicates whether the import should be forced. Data import could be rejected for various reasons of data set locking for example due to approval, data input period, expiry days, etc. In order to override such locks and force data input one can use data import with force=true. However, one needs to be a **superuser** for this parameter to work.</td>
</tr>
</tbody>
</table>

所有参数都是可选的，可以作为查询参数提供
请求 URL 是这样的：

    /api/26/dataValueSets?dataElementIdScheme=代码&orgUnitIdScheme=名称&dryRun=true&importStrategy=CREATE

它们也可以作为数据值集上的 XML 属性提供
元素如下。 XML 属性将覆盖查询字符串
参数。

    <dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataElementIdScheme="code"
      orgUnitIdScheme="名称" dryRun="true" importStrategy="CREATE">
      ..
    </dataValueSet>

请注意，*preheatCache* 参数会对
表现。对于小的导入文件，将其保留为 false 会很快。
对于包含大量不同数据的大型导入文件
元素和组织单位，将其设置为 true 将是以下命令
速度更快。

#### 数据值要求 { #webapi_data_values_import_requirement } 

 <!--DHIS2-SECTION-ID:webapi_data_values_import_requirement-->

数据值导入支持一组值类型。对于每个值类型
有一个特殊要求。下表列出了边缘情况
对于值类型。有关所有其他案例的信息，请参阅
[数据元素](#webapi_csv_data_elements)。

<table>
<caption>值类型要求</caption>
<thead>
<tr class="header">
<th>值类型</th>
<th>要求</th>
<th>评论</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>布尔值</td>
<td>true |假 | 1 | 0 | t | f |</td>
<td>当值为布尔值、true 或 false 值时使用。导入服务不关心输入的首字母是大写还是小写。</td>
</tr>
</tbody>
</table>

#### 标识符方案 { #webapi_data_values_identifier_schemes } 

 <!--DHIS2-SECTION-ID:webapi_data_values_identifier_schemes-->

关于 id 方案，默认情况下 XML 中使用的标识符
消息使用 DHIS2 稳定对象标识符（称为 *uid*）。
在某些互操作性情况下，我们可能会遇到外部
系统决定对象的标识符。在这种情况下我们可以使用
组织单位和其他要设置的对象的 *code* 属性
固定标识符。因此，当导入数据值时，我们需要引用
这些元数据的代码属性而不是标识符属性
对象。标识符方案也可以在 XML 消息中指定
就像在请求中作为查询参数一样。在 XML 有效负载中指定它
你可以这样做：

    <dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0"
      dataElementIdScheme =“代码”orgUnitIdScheme =“UID”idScheme =“代码”>
      ..
    </dataValueSet>

上面的参数表解释了如何指定 id 方案
作为查询参数。以下规则适用于
优先级：

  - XML 或 JSON 负载中定义的 ID 方案优先于
    id 方案定义为 URL 查询参数。

  - 特定的 id 方案，包括 dataElementIdScheme 和
    orgUnitIdScheme 优先于一般 idScheme。

  - 默认的 id 方案是 UID，如果没有明确的 id 将使用
    方案被定义。

以下标识符方案可用。

  - uid（默认）

  - 码

  - 名称

  - 属性（后跟属性的UID）

attribute 选项比较特殊，指的是元数据属性，
已被标记为“独特”。使用此选项时，“属性”必须
紧随其后的是属性的 uid，例如
“属性DnrLSdo4hMl”。

#### 异步数据值导入 { #webapi_data_values_async_import } 

 <!--DHIS2-SECTION-ID:webapi_data_values_async_import-->

数据值可以通过异步方式发送和导入
提供设置为 *true* 的 *async* 查询参数：

    /api/26/dataValueSets?async=true

这将启动一个异步导入作业，您可以对其进行监控
任务摘要 API 中的状态。 API 响应表明
作业的唯一标识符、作业类型和可用于的 URL
监控导入作业状态。响应将类似于以下内容：

    {
      "httpStatus": "确定",
      “http状态代码”：200，
      “状态”：“正常”，
      "message": "已启动 dataValueImport",
      “回复”： {
        “名称”：“数据值导入”，
        “id”：“YR1UxOUXmzT”，
        “创建”：“2018-08-20T14：17：28.429”，
        “作业类型”：“DATAVALUE_IMPORT”，
        “relativeNotifierEndpoint”：“/api/system/tasks/DATAVALUE_IMPORT/YR1UxOUXmzT”
      }

请阅读有关*异步任务状态*的部分了解更多信息
信息。

### CSV数据值格式 { #webapi_data_values_csv } 

 <!--DHIS2-SECTION-ID:webapi_data_values_csv-->

以下部分描述了 DHIS2 中使用的 CSV 格式。首先
行被假定为标题行，在导入期间将被忽略。

 <table>
 <caption> DHIS2 的 CSV 格式 </caption>
 <tbody>
 <tr class="odd">
 <td> 列 </td>
 <td> 需要 </td>
 <td> 说明 </td>
 </tr>
 <tr class="even">
 <td> 数据元素 </td>
 <td> 是 </td>
 <td> 默认指的是ID，也可以是基于选择的id方案的名称和代码 </td>
 </tr>
 <tr class="odd">
 <td> 期间 </td>
 <td> 是 </td>
 <td> ISO 格式 </td>
 </tr>
 <tr class="even">
 <td> 组织单位 </td>
 <td> 是 </td>
 <td> 默认指的是ID，也可以是基于选择的id方案的名称和代码 </td>
 </tr>
 <tr class="odd">
 <td> 类别选项组合 </td>
 <td> 否 </td>
 <td> 指的是 ID </td>
 </tr>
 <tr class="even">
 <td> 属性选项组合 </td>
 <td> 否 </td>
 <td> 指的是 ID（从 2.16 版开始） </td>
 </tr>
 <tr class="odd">
 <td> 值 </td>
 <td> 否 </td>
 <td> 数据值 </td>
 </tr>
 <tr class="even">
 <td> 由 </td> 存储
 <td> 否 </td>
 <td> 指输入值 </td> 的用户的用户名
 </tr>
 <tr class="odd">
 <td> 最后更新 </td>
 <td> 否 </td>
 <td> ISO 格式的日期 </td>
 </tr>
 <tr class="even">
 <td> 评论 </td>
 <td> 否 </td>
 <td> 自由文本评论 </td>
 </tr>
 <tr class="odd">
 <td> 跟进 </td>
 <td> 否 </td>
 <td> 真假 </td>
 </tr>
 </tbody>
 </table>

可以导入DHIS2的CSV文件示例如下所示。

    “数据元素”，“期间”，“组织单位”，“类别选项组合”，“属性选项组合”，“值”，“存储者”，“时间戳”
    "DUSpd8Jq3M7","201202","gP6hn503KUX","Prlt0C1RF0s",,"7","邦巴里","2010-04-17"
    "DUSpd8Jq3M7","201202","gP6hn503KUX","V6L425pT3A0",,"10","邦巴里","2010-04-17"
    "DUSpd8Jq3M7","201202","OjTS752GbZE","V6L425pT3A0",,"9","邦巴里","2010-04-06"

### 生成数据值集模板 { #webapi_data_values_template } 

 <!--DHIS2-SECTION-ID:webapi_data_values_template-->

要为特定数据集生成数据值集模板，您可以使用
*/api/dataSets/\<id\>/dataValueSet* 资源。 XML 和 JSON 响应
支持格式。例子：

    /api/26/dataSets/BfMAe6Itzgt/dataValueSet.json

描述了可用于进一步调整输出的参数
以下：

 <table style="width:100%;">
 <caption>数据值查询参数</caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 19%" />
 <col style="width: 64%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>周期</td>
 <td>否</td>
 <td>使用期限，将被包括在内，无需任何检查。 </td>
 </tr>
 <tr class="even">
 <td> orgUnit </td>
 <td>否</td>
 <td>要使用的组织单位，支持多个orgUnit，id和代码均可使用。 </td>
 </tr>
 <tr class="odd">
 <td>评论</td>
 <td>否</td>
 <td>应包含注释，默认为：是。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitIdScheme </td>
 <td>否</td>
 <td>使用的组织单位方案，支持id |码。 </td>
 </tr>
 <tr class="odd">
 <td> dataElementIdScheme </td>
 <td>否</td>
 要使用的数据元素方案，支持id | <td>码。 </td>
 </tr>
 </tbody>
 </table>

### 读取数据值 { #webapi_reading_data_values } 

 <!--DHIS2-SECTION-ID:webapi_reading_data_values-->

本节介绍如何通过以下方式从 Web API 检索数据值
与 *dataValueSets* 资源交互。数据值可以是
以 *XML*、*JSON* 和 *CSV* 格式检索。因为我们要读取数据
我们将使用 *GET* HTTP 动词。我们还将指定我们是
通过包含 *Accept* 对 XML 资源表示感兴趣
带有我们请求的 HTTP 标头。以下查询参数是
必需的：

 <table>
 <caption>数据值设置查询参数</caption>
 <colgroup>
 <col style="width: 27%" />
 <col style="width: 72%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>数据集</td>
 <td>数据集标识符。可以重复多次。 </td>
 </tr>
 <tr class="even">
 <td> dataElementGroup </td>
 <td>数据元素组标识符。可以重复多次。 </td>
 </tr>
 <tr class="odd">
 <td>周期</td>
 <td> ISO格式的期间标识符。可以重复多次。 </td>
 </tr>
 <tr class="even">
 <td>开始日期</td>
 <td>导出值的时间范围的开始日期。 </td>
 </tr>
 <tr class="odd">
 <td>结束日期</td>
 <td>导出值的时间跨度的结束日期。 </td>
 </tr>
 <tr class="even">
 <td> orgUnit </td>
 <td>组织单位标识符。可以重复多次。 </td>
 </tr>
 <tr class="odd">
 <td>儿童</td>
 <td>是否将子级包括在组织单位的层次结构中。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitGroup </td>
 <td>组织单位组标识符。可以重复多次。 </td>
 </tr>
 <tr class="odd">
 <td> attributeOptionCombo </td>
 <td>属性选项组合标识符。可以重复多次。 </td>
 </tr>
 <tr class="even">
 <td> include已删除</td>
 <td>是否包括已删除的数据值。 </td>
 </tr>
 <tr class="odd">
 <td>最后更新</td>
 <td>仅包含自给定时间戳记以来已更新的数据值。 </td>
 </tr>
 <tr class="even">
 <td> lastUpdatedDuration </td>
 <td>仅包含在给定持续时间内更新的数据值。格式是&lt;value&gt;&lt;time-unit&gt;，其中所支持的时间单位是&quot;d&quot;（天），&quot;h&quot;（小时），&quot;m&quot;（分钟）和&quot;s&quot;（秒）。 </td>
 </tr>
 <tr class="odd">
 <td>限制</td>
 <td>响应中的最大结果数。 </td>
 </tr>
 <tr class="even">
 <td> idScheme </td>
 <td>用于响应的数据值的元数据对象的属性。 </td>
 </tr>
 <tr class="odd">
 <td> dataElementIdScheme </td>
 <td>用于响应的数据值的数据元素对象的属性。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitIdScheme </td>
 <td>用于响应中的数据值的组织单位对象的属性。 </td>
 </tr>
 <tr class="odd">
 <td>类别选项组合ID方案</td>
 <td>类别选项组合和属性选项组合对象的属性，用于响应数据值。 </td>
 </tr>
 <tr class="even">
 <td> dataSetIdScheme </td>
 <td>在响应中使用的数据集对象的属性。 </td>
 </tr>
 </tbody>
 </table>

支持以下响应格式：

  - xml（应用程序/ xml）

  - json（应用程序/ json）

  - csv（应用程序/ csv）

  - adx（应用程序/ adx + xml）

假设我们已根据以下规则将数据值发布到 DHIS2：
上一节称为“发送数据值”，我们现在可以将其放在一起
我们对单个数据值集的请求并使用
    卷曲：

    卷曲“https://play.dhis2.org/demo/api/26/dataValueSets?dataSet=pBOMPrpg1QX&period=201401&orgUnit=DiszpKrYNg8”
      -H“接受：应用程序/xml”-u管理：区-v

我们还可以使用开始和结束日期查询参数来请求一个
大量的数据值。 IE。您还可以请求数据值
多个数据集和组织单位以及一个时间跨度以便导出
更大的数据块。请注意，期间查询参数采用
优先于开始和结束日期参数。一个例子看起来像
这：

    卷曲“https://play.dhis2.org/demo/api/26/dataValueSets?dataSet=pBOMPrpg1QX&dataSet=BfMAe6Itzgt
      &startDate=2013-01-01&endDate=2013-01-31&orgUnit=YuQRtpLP10I&orgUnit=vWbkYPRmKyS&children=true"
      -H“接受：应用程序/xml”-u管理：区-v

检索已创建或更新的数据值
过去 10 天，您可以提出这样的请求：

    https://play.dhis2.org/demo/api/26/dataValueSets?dataSet=pBOMPrpg1QX&orgUnit=DiszpKrYNg8&lastUpdatedDuration=10d

响应将如下所示：

    <?xml version='1.0' encoding='UTF-8'?>
    <dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataSet="pBOMPrpg1QX"
      完整日期=“2014-01-02”期间=“201401”orgUnit=“DiszpKrYNg8”>
    <dataValue dataElement="eY5ehpbEsB7" period="201401" orgUnit="DiszpKrYNg8"
      categoryOptionCombo=“bRowv6yZOF2”值=“10003”/>
    <dataValue dataElement="Ix2HsbDMLea" period="201401" orgUnit="DiszpKrYNg8"
      categoryOptionCombo=“bRowv6yZOF2”值=“10002”/>
    <dataValue dataElement="f7n9E0hX8qk" period="201401" orgUnit="DiszpKrYNg8"
      categoryOptionCombo=“bRowv6yZOF2”值=“10001”/>
    </dataValueSet>

您可以使用JSON格式请求数据，如下所示：

    https://play.dhis2.org/demo/api/26/dataValueSets.json?dataSet=pBOMPrpg1QX&period=201401&orgUnit=DiszpKrYNg8

响应如下所示：

    {
      “数据集”：“pBOMPrpg1QX”，
      “完成日期”：“2014-02-03”，
      “期间”：“201401”，
      "orgUnit": "DiszpKrYNg8",
      “数据值”：[
        {“dataElement”：“eY5ehpbEsB7”，“categoryOptionCombo”：“bRowv6yZOF2”，“期间”：“201401”，
          “orgUnit”：“DiszpKrYNg8”，“值”：“10003”}，
        {“dataElement”：“Ix2HsbDMLea”，“categoryOptionCombo”：“bRowv6yZOF2”，“期间”：“201401”，
          “orgUnit”：“DiszpKrYNg8”，“值”：“10002”}，
        {“dataElement”：“f7n9E0hX8qk”，“categoryOptionCombo”：“bRowv6yZOF2”，“期间”：“201401”，
          “orgUnit”：“DiszpKrYNg8”，“值”：“10001”}
      ]
    }

请注意，数据值是软删除的，即删除的值具有
*deleted* 属性设置为 true 而不是永久删除。
当集成多个系统以进行通信时，这非常有用
删除。您可以在响应中包含已删除的值，例如
    这：

    /api/26/dataValueSets.json?dataSet=pBOMPrpg1QX&period=201401&orgUnit=DiszpKrYNg8&includeDeleted=true

您还可以请求CSV格式的数据，如下所示：

    https://play.dhis2.org/demo/api/26/dataValueSets.csv?dataSet=pBOMPrpg1QX&period=201401&orgUnit=DiszpKrYNg8

响应将如下所示：

    数据元素、期间、组织单位、类别选项组合、属性选项组合、值、存储者、上次更新、评论、后续
    f7n9E0hX8qk,201401,DiszpKrYNg8,bRowv6yZOF2,bRowv6yZOF2,12,系统,2015-04-05T19:58:12.000,comment1,false
    Ix2HsbDMLea,201401,DiszpKrYNg8,bRowv6yZOF2,bRowv6yZOF2,14,系统,2015-04-05T19:58:12.000,comment2,false
    eY5ehpbEsB7,201401,DiszpKrYNg8,bRowv6yZOF2,bRowv6yZOF2,16,系统,2015-04-05T19:58:12.000,comment3,false
    FTRrcoaog83,201401,DiszpKrYNg8,bRowv6yZOF2,bRowv6yZOF2,12,系统,2014-03-02T21:45:05.519,comment4,false

以下约束适用于数据值集资源：

  - 必须至少指定一个数据集。

  - 必须是至少一个期间或开始日期和结束日期
    指定的。

  - 必须至少指定一个组织单位。

  - 组织单位必须在组织的层次结构内
    认证用户的单位。

  - 限制不能小于零。

### 发送，读取和删除单个数据值 { #webapi_sending_individual_data_values } 

 <!--DHIS2-SECTION-ID:webapi_sending_individual_data_values-->

此示例将展示如何发送要保存的单个数据值
一个要求。这可以通过发送 *POST* 请求到
*数据值*资源：

    https://play.dhis2.org/demo/api/26/dataValues

此资源支持以下查询参数：

<table style="width:100%;">
<caption>数据值查询参数</caption>
<colgroup>
<col style="width: 15%" />
<col style="width: 19%" />
<col style="width: 64%" />
</colgroup>
<thead>
<tr class="header">
<th>查询参数</th>
<th>必填</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>de</td>
<td>是</td>
<td>数据元素标识符</td>
</tr>
<tr class="even">
<td>pe</td>
<td>是</td>
<td>期间标识符</td>
</tr>
<tr class="odd">
<td>ou</td>
<td>是</td>
<td>组织部门标识符</td>
</tr>
<tr class="even">
<td>co</td>
<td>否</td>
<td>类别选项组合标识符，如果省略则使用默认值</td>
</tr>
<tr class="odd">
<td>cc</td>
<td>否（必须与 cp 结合使用）</td>
<td>属性组合标识符</td>
</tr>
<tr class="even">
<td>cp</td>
<td>否（必须与 cc 结合使用）</td>
<td>属性选项标识符，用 ; 分隔对于多个值</td>
</tr>
<tr class="odd">
<td>ds</td>
<td>否</td>
<td>数据集，用于检查期间和组织单位是否允许 POST 或 DELETE。如果指定，则必须将数据元素分配给该数据集。如果未指定，将选择包含该数据元素的数据集来检查是否允许该操作。</td>
</tr>
<tr class="even">
<td>值</td>
<td>否</td>
<td>数据值</td>
</tr>
<tr class="odd">
<td>评论</td>
<td>否</td>
<td>数据评论</td>
</tr>
<tr class="even">
<td>followUp</td>
<td>否</td>
<td>跟踪数据值，将切换当前布尔值</td>
</tr>
</tbody>
</table>

如果给定的任何标识符无效，如果数据值或
注释无效或者数据被锁定，响应将包含
*409 冲突*状态代码和描述性文本消息。如果
操作导致保存或更新值，将返回*200 OK*。
请求的示例如下所示：

    卷曲“https://play.dhis2.org/demo/api/26/dataValues?de=s46m5MS0hxu
      &pe=201301&ou=DiszpKrYNg8&co=Prlt0C1RF0s&值=12"
      -X POST -u 管理员:区 -v

该资源还允许使用特殊语法将值关联到
属性选项组合。这可以通过发送
属性组合的标识符，以及标识符
该值代表的属性选项
组合。一个例子看起来像
    这：

    卷曲“https://play.dhis2.org/demo/api/26/dataValues?de=s46m5MS0hxu&ou=DiszpKrYNg8
      &pe=201308&cc=dzjKKQq0cSO&cp=wbrDrL2aYEc;btOyqprQ9e8&值=26"
      -X POST -u 管理员:区 -v

您可以使用 *GET* 方法通过请求检索数据值。这
value、comment 和 followUp 参数在这方面不适用：

    卷曲“https://play.dhis2.org/demo/api/26/dataValues?de=s46m5MS0hxu
      &pe=201301&ou=DiszpKrYNg8&co=Prlt0C1RF0s"
      -X GET -u 管理员:区 -v

您可以使用 *DELETE* 方法通过请求删除数据值。

#### 处理文件数据值 { #datavalue_file } 

 <!--DHIS2-SECTION-ID:datavalue_file-->

处理具有 *file* 类型数据元素的数据值时
与上述方法存在一些偏差。这些数据
值的特殊之处在于值的内容是一个 UID 引用
到 *FileResource* 对象而不是自包含常量。这些
数据值的行为就像其他存储文本的数据值一样
内容，但应以不同方式处理以产生
有意义的输入和输出。

存储这些数据值之一的过程大致如下：

1.  按照描述将文件上传到 */api/26/fileResources* 端点
    在文件资源部分。

2.  检索返回的 *FileResource* 的“id”属性。

3.  使用任何方法将检索到的 id **作为值**存储到数据值
    上面描述的方法。

数据值和文件资源之间只有一对一的关系
允许。这是在内部强制执行的，以便保存文件资源 ID
在多个数据值中是不允许的，并且会返回错误。删除
数据值将删除引用的文件资源。直接删除
的文件资源是不可能的。

现在可以像除返回的数据之外的任何其他值一样检索数据值
将是文件资源的 UID。为了检索实际的
内容（表示存储在映射的文件资源中的文件
到数据值）必须向 *api/dataValues/files* 发出 GET 请求
镜像查询参数，因为它们将用于数据值
本身。 *dataValues/files* 端点仅支持 GET 请求。

值得注意的是，由于底层存储机制的工作
异步地，文件内容可能无法立即准备好
从 *dataValues/files* 端点下载。这尤其正确
对于可能需要耗时上传的大文件
后台到外部文件存储（取决于系统
配置）。从文件资源元数据中检索
*api/fileResources/\<id\>* 端点允许检查 *storageStatus*
在尝试下载内容之前。

## ADX数据格式 { #webapi_adx_data_format } 

 <!--DHIS2-SECTION-ID:webapi_adx_data_format-->

从 2.20 版本开始，我们加入了对国际标准的支持
用于称为 ADX 的聚合数据交换。 ADX 的开发和维护
由 IHE 质量研究和公共卫生委员会
（整合医疗保健企业）。详细介绍 QRPH 的 wiki 页面
活动可以在以下位置找到
[wiki.ihe.net](http://wiki.ihe.net/index.php?title=Quality,_Research_and_Public_Health#Current_Domain_Activities)。
ADX 仍在积极开发中，现已发布
试行实施。请注意 DHIS2 当前实施的内容
是读取和写入 adx 格式数据的功能，即什么是
在 ADX 中被描述为内容消费者和内容生产者参与者
轮廓。

ADX 数据消息的结构与您可能的结构非常相似
从前面描述的 DXF 2 数据中已经熟悉了。有一个
几个重要的区别。我们将描述这些差异
参考一个小例子：

    <adx xmlns="urn:ihe:qrph:adx:2015" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi：schemaLocation =“urn：ihe：qrph：adx：2015 ../schema/adx_loose.xsd”导出=“2015-02-08T19：30：00Z”>

      <group orgUnit="OU_559" period="2015-06-01/P1M" completeDate="2015-07-01" dataSet="(TB/HIV)VCCT">

        <dataValue dataElement="VCCT_0" GENDER="FMLE" HIV_AGE="AGE0-14" value="32"/>
        <dataValue dataElement="VCCT_1" GENDER="FMLE" HIV_AGE="AGE0-14" value="20"/>
        <dataValue dataElement="VCCT_2" GENDER="FMLE" HIV_AGE="AGE0-14" value="10"/>
        <dataValue dataElement="PLHIV_TB_0" GENDER="FMLE" HIV_AGE="AGE0-14" value="10"/>
        <dataValue dataElement="PLHIV_TB_1" GENDER="FMLE" HIV_AGE="AGE0-14" value="10"/>

        <dataValue dataElement="VCCT_0" GENDER="MLE" HIV_AGE="AGE0-14" value="32"/>
        <dataValue dataElement="VCCT_1" GENDER="MLE" HIV_AGE="AGE0-14" value="20"/>
        <dataValue dataElement="VCCT_2" GENDER="MLE" HIV_AGE="AGE0-14" value="10"/>
        <dataValue dataElement="PLHIV_TB_0" GENDER="MLE" HIV_AGE="AGE0-14" value="10"/>
        <dataValue dataElement="PLHIV_TB_1" GENDER="MLE" HIV_AGE="AGE0-14" value="10"/>

        <dataValue dataElement="VCCT_0" GENDER="FMLE" HIV_AGE="AGE15-24" value="32"/>
        <dataValue dataElement="VCCT_1" GENDER="FMLE" HIV_AGE="AGE15-24" value="20"/>
        <dataValue dataElement="VCCT_2" GENDER="FMLE" HIV_AGE="AGE15-24" value="10"/>
        <dataValue dataElement="PLHIV_TB_0" GENDER="FMLE" HIV_AGE="AGE15-24" value="10"/>
        <dataValue dataElement="PLHIV_TB_1" GENDER="FMLE" HIV_AGE="AGE15-24" value="10"/>

        <dataValue dataElement="VCCT_0" GENDER="MLE" HIV_AGE="AGE15-24" value="32"/>
        <dataValue dataElement="VCCT_1" GENDER="MLE" HIV_AGE="AGE15-24" value="20"/>
        <dataValue dataElement="VCCT_2" GENDER="MLE" HIV_AGE="AGE15-24" value="10"/>
        <dataValue dataElement="PLHIV_TB_0" GENDER="MLE" HIV_AGE="AGE15-24" value="10"/>
        <dataValue dataElement="PLHIV_TB_1" GENDER="MLE" HIV_AGE="AGE15-24" value="10"/>

      </group>
    </adx>

### adx根元素 { #the-adx-root-element } 

adx 根元素只有一个强制属性，即
*导出*时间戳。与其他 adx 元素一样，架构是
可扩展性，因为它不限制额外的特定于应用程序
属性。

### 组元素 { #the-group-element } 

与 dxf2 不同，adx 要求数据值根据以下条件进行分组
orgUnit、期间和数据集。上面的例子显示了一个数据报告
来自在线演示数据库的“(TB/HIV) VCCT”数据集。这个例子
使用代码作为标识符而不是 dhis2 uids。代码是
使用 adx 时标识符的首选形式。

orgUnit、period 和 dataSet 属性在 adx 中是必需的。这
group 元素可以包含附加属性。在我们的 DHIS2 中
实现任何附加属性都简单地传递给
底层进口商。这意味着当前的所有属性
在dxf2中有意义（如上例中的completeDate）可以
继续在adx中使用，它们将以相同的方式处理。

adx 和 dxf2 之间的显着区别在于句点
被编码。 Adx 严格使用 ISO8601 并对报告进行编码
期间为（日期|日期时间）/（持续时间）。所以上面例子中的句点
是从 2015-06-01 开始的 1 个月 (P1M) 期间。所以是数据
2015 年 6 月。符号有点冗长，但它非常
灵活并允许我们支持 DHIS2 中的所有现有期间类型

### ADX期间定义 { #adx-period-definitions } 

DHIS2 在导入过程中支持有限数量的周期或持续时间。
期间应从持续时间开始的日期开始，后跟
“/”，然后是表中注明的持续时间符号。这
下表详细介绍了所有 ADX 支持的周期类型，以及
并举例说明。

<table>
<caption>ADX 周期</caption>
<colgroup>
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th>期间类型</th>
<th>持续时间符号</th>
<th>示例</th>
<th>持续时间</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>每日</td>
<td>P1D</td>
<td>2017-10-01/P1M</td>
<td>2017 年 10 月 1 日</td>
</tr>
<tr class="even">
<td>每周</td>
<td>P7D</td>
<td>2017-10-01/P7D</td>
<td>2017 年 10 月 1 日 - 2017 年 10 月 7 日</td>
</tr>
<tr class="odd">
<td>每月</td>
<td>P1M</td>
<td>2017-10-01/P1M</td>
<td>2017 年 10 月 1 日 - 2017 年 10 月 31 日</td>
</tr>
<tr class="even">
<td>双月</td>
<td>P2M</td>
<td>2017-11-01/P1M</td>
<td>2017 年 11 月 1 日 - 2017 年 12 月 31 日</td>
</tr>
<tr class="odd">
<td>每季度</td>
<td>P3M</td>
<td>2017-09-01/P3M</td>
<td>2017 年 9 月 1 日 - 2017 年 12 月 31 日</td>
</tr>
<tr class="even">
<td>每六个月</td>
<td>P6M</td>
<td>2017-01-01/P6M</td>
<td>2017 年 1 月 1 日 - 2017 年 6 月 30 日</td>
</tr>
<tr class="odd">
<td>每年</td>
<td>P1Ý</td>
<td>2017-01-01/P1Y</td>
<td>2017 年 1 月 1 日 - 2017 年 12 月 31 日</td>
</tr>
<tr class="even">
<td>10 月财务</td>
<td>P1Y</td>
<td>2017-10-01/P1Y</td>
<td>2017 年 10 月 1 日 - 2018 年 9 月 30 日</td>
</tr>
<tr class="odd">
<td>4 月财务</td>
<td>P1Y</td>
<td>2017-04-01/P1Y</td>
<td>2017 年 4 月 1 日 - 2018 年 3 月 31 日</td>
</tr>
<tr class="even">
<td>7 月财务</td>
<td>P1Y</td>
<td>2017-07-01/P1Y</td>
<td>2017 年 7 月 1 日 - 2018 年 6 月 30 日</td>
</tr>
</tbody>
</table>

### 数据值 { #data-values } 

adx 中的 dataValue 元素与 DXF 中的对应元素非常相似。
强制属性是*dataElement* 和*value*。 *组织单位*和
*period* 属性不会出现在 dataValue 中，因为它们是必需的
在*组*级别。

最显着的区别是分解的方式
代表。 DXF 使用categoryOptionCombo 来指示分解
数据的。在 adx 中，分解（例如 AGE\_GROUP 和 SEX）是
明确表示为属性。使用的一个重要限制
adx 是数据集中用于数据元素的类别必须
为它们分配一个代码，并且该代码必须采用以下形式
它适合用作 XML 属性。的精确约束
W3C XML 标准中描述了 XML 属性名称 - 实践
这意味着没有空格，没有除 '\_' 之外的非字母数字字符，并且
它可能不是以字母开头。上面的示例显示了以下示例
“好”类别代码（“GENDER”和“HIV\_AGE”）。

这种对代码形式的限制仅适用于类别。
目前，当您分配时，DHIS2 不强制执行该约定
代码，但如果您尝试这样做，您将收到一条信息性错误消息
导入 adx 数据并且类别代码未分配或未分配
合适的。

使用分解数据的显式维度的主要好处是
那

  - 生成数据的系统不必与
    DHIS2 中的 categoryOptionCombo。

  - 生产者和消费者可以将他们的代码与第三方进行匹配
    权威来源，例如 vterminology 服务。请注意，在
    上面的性别和年龄组代码示例使用的是代码列表
    来自[世界卫生组织全球卫生
    观察站](http://apps.who.int/gho/data/node.resources.api)。

请注意，此功能可能非常有用，例如当
从 EMR 系统生成分类数据，但可能存在以下情况
其中 *categoryOptionCombo* 映射更容易或更理想。这
adx 的 DHIS2 实现将检查是否存在
*categoryOptionCombo* 属性，如果存在，它将使用它
优先选择分解维度属性。同样，一个
*group* 元素上的 *attributeOptionCombo* 属性将是
以传统方式处理。否则 attributeOptionCombo 可以是
正如 *dataValue* 上一样，被视为分解类别。

在上面的简单示例中，数据集中的每个数据元素
具有相同的维度（categorycombo）所以数据是整齐的
长方形。不必如此。数据集可能包含
具有不同类别组合的数据元素，导致
*参差不齐的* adx 数据消息。

### 导入数据 - HTTP POST { #importing-data-http-post }

DHIS2在* / api / dataValueSets *处公开POST adx数据的端点
使用* application / xml + adx *作为内容类型。因此，例如
以下curl命令可用于将上面的示例数据发布到
DHIS2演示服务器：

    curl -u admin:district -X POST -H“内容类型：application/adx+xml”
    -d @data.xml“https://play.dhis2.org/demo/api/26/dataValueSets?dataElementIdScheme=code&orgUnitIdScheme=code”

请注意，查询参数与用于 DXF 数据的参数相同。这
adx 端点应该解释所有现有的 DXF 参数
与 DXF 相同的语义。

### 导出数据 - HTTP GET { #exporting-data-http-get }

DHIS2在* / api / dataValueSets *下向端点公开GET adx数据集
使用* application / xml + adx *作为接受的内容类型。因此对于
例如，以下curl命令可用于检索adx
数据：

    curl -u admin:district -H "接受: application/adx+xml"
     “https://play.dhis2.org/demo/api/26/dataValueSets?dataValueSets?orgUnit=M_CLINIC&dataSet=MALARIA&period=201501”

请注意，查询参数与用于 DXF 数据的参数相同。一个
重要的区别是 dataSet 和 orgUnit 的标识符是
假定为代码而不是 uid。

## 计划规则 { #webapi_program_rules } 

 <!--DHIS2-SECTION-ID:webapi_program_rules-->

本节是关于发送和读取程序规则，并解释
程序规则数据模型。程序规则赋予功能
在 DHIS2 中的程序中配置动态行为。

### 程序规则模型 { #webapi_program_rule_model } 

 <!--DHIS2-SECTION-ID:webapi_program_rule_model-->

程序规则数据模型由 programRuleVariables、
程序规则和程序规则操作。 programRule 包含一个
表达式 - 当这个表达式为真时，子程序RuleActions
被触发。 programRuleVariables 用于寻址数据元素，
跟踪实体数据值和运行所需的其他数据值
表达式。一个程序中的所有程序规则共享同一个程序库
programRuleVariables，一个 programRuleVariable 可以用于多个
程序规则的表达式。


![](resources/images/program_rules/program-rule-model.jpg)

#### 程序规则模型详细信息 { #program-rule-model-details } 

下表给出了程序规则的详细概述
模型。

 <table style="width:100%;">
 <caption> 程序规则 </caption>
 <colgroup>
 <col style="width: 16%" />
 <col style="width: 66%" />
 <col style="width: 16%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 名称 </th>
 <th> 描述 </th>
 <th> 强制性 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 程序 </td>
 <td> 执行programRule的程序。</td>
 <td> 强制性 </td>
 </tr>
 <tr class="even">
 <td> 名称 </td>
 <td> 程序规则将显示给 dhis2 配置器的名称。程序的最终用户不可见。 </td>
 <td> 强制性 </td>
 </tr>
 <tr class="odd">
 <td> 描述 </td>
 <td> 程序规则的描述，可供配置者用来描述规则。程序的最终用户不可见。 </td>
 <td> 强制性 </td>
 </tr>
 <tr class="even">
 <td> programStage </td>
 <td> 如果为程序规则设置了 programStage，则将仅在指定的程序阶段内评估该规则。 </td>
 <td> 可选 </td>
 </tr>
 <tr class="odd">
 <td> 条件 </td>
 <td> 需要评估为真以便程序规则触发其子操作的表达式。表达式是使用运算符、函数调用、硬编码值、常量和程序规则变量编写的。
 <pre> <code> D2：hasValue的（＆＃39;血红蛋白＆＃39;）&amp;&amp;＃{hemoglobin} &lt; = 7 </code> </pre> </td>
 <td> 强制性 </td>
 </tr>
 <tr class="even">
 <td> 优先级 </td>
 <td> 在规则顺序很重要的情况下运行规则的优先级。在大多数情况下，规则不依赖于在其他规则之前或之后运行，在这些情况下，可以省略优先级。如果未设置优先级，则规则将在定义了优先级的任何规则之后运行。如果设置了优先级（整数），则优先级最低的规则将在优先级较高的规则之前运行。 </td>
 <td> 可选 </td>
 </tr>
 </tbody>
 </table>

#### 计划规则操作模型详细信息 { #program-rule-action-model-details } 

下表给出了对 programRuleAction 的详细概述
模型。

<table style="width:100%;">
<caption>程序规则行动</caption>
<colgroup>
<col style="width: 16%" />
<col style="width: 66%" />
<col style="width: 16%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>描述</th>
<th>强制性</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>程序规则</td>
<td>该操作的父程序规则。</td>
<td>强制</td>
</tr>
<tr class="even">
<td>programRule- ActionType</td>
<td>要执行的操作类型。
<ul>
<li><p><strong>DISPLAYTEXT</strong> - 在给定的 widget 中显示文本。</p></li>
<li><p><strong>DISPLAYKEYVALUEPAIR</strong> - 在给定的 widget 中显示键值对（如程序指示器）。</p></li>
<li><p><strong>HIDEFIELD</strong> - 隐藏指定的 dataElement 或 trackedEntityAttribute。</p>
<ul>
<li><p><em>content</em> - 如果已定义，则<em>content</em> 中的文本将显示给最终用户，前提是之前已在即将隐藏（因此空白）的字段中输入了值。如果未定义<em>content</em> ，则将在这种情况下向用户显示标准信息。</p></li>
<li><p><em>dataElement</em> - 如果已定义*，HIDEFIELD 操作将在规则生效时隐藏此 dataElement。</p></li>
<li><p><em>trackedEntityDataValue</em> - 如果已定义*，当规则生效时，HIDEFIELD 操作将隐藏此 trackedEntityDataValue。</p></li>
</ul></li>
<li><p><strong>HIDESECTION</strong> - 隐藏指定的部分。</p>
<ul>
<li><p><em>programStageSection</em> - 必须定义。这是父级规则生效时将被隐藏的 programStageSection。</p></li>
</ul></li>
<li><p><strong>ASSIGN</strong> - 为数据元素赋值（帮助用户计算或填写某个明显的值）</p>
<ul>
<li><p><em>content</em> - 如果已定义*，<em>data</em> 中的值将分配给此变量。如果定义了 content id，并因此分配了一个变量供其他规则使用，则必须同时分配<em>programRule.priority</em> ，以确保带有 ASSIGN 操作的规则先于评估所分配变量的规则运行。</p></li>
<li><p><em>data</em> - 必须定义，data 构成一个表达式，该表达式将被评估并赋值给一个变量(#{myVariable})、一个 dataElement 或两者。</p></li>
<li><p><em>dataElement</em> - 如果已定义*，<em>数据</em> 中的值将分配给该数据元素。</p></li>
</ul>
<p>* 要使 ASSIGN 操作有效，必须定义内容或 dataElement。</p></li>
<li><p><strong>SHOWWARNING</strong> - 向用户显示警告，但不阻止用户完成事件或注册。</p>
<ul>
<li><p><em>content</em> - 如果已定义，content 是静态部分，显示在错误信息的末尾。</p></li>
<li><p><em>data</em> - 如果已定义，数据构成一个表达式，该表达式将被评估并添加到警告消息的末尾。</p></li>
<li><p><em>dataElement</em> - 如果已定义*，警告信息将显示在该数据元素旁边。</p></li>
<li><p><em>trackedEntityAttribute</em> - 如果已定义*，警告信息将显示在此跟踪实体属性旁边。</p></li>
</ul>
<p>*必须指定 dataElement 或 trackedEntityAttribute。</p></li>
<li><p><strong>SHOWERROR</strong> - 向用户显示错误，阻止用户完成事件或注册。</p>
<ul>
<li><p><em>content</em> - 如果已定义，content 是静态部分，显示在错误信息的开头。</p></li>
<li><p><em>data</em> - 如果已定义，数据构成一个表达式，该表达式将被评估并添加到错误消息的末尾。</p></li>
<li><p><em>dataElement</em> - 如果已定义*，错误信息将链接到此数据元素。</p></li>
<li><p><em>trackedEntityAttribute</em> - 如果已定义*，错误消息将链接到此跟踪实体属性。</p></li>
</ul>
<p>*必须指定 dataElement 或 trackedEntityAttribute。</p></li>
<li><p><strong>WARNINGONCOMPLETINON</strong> - 在&quot;Complete form&quot; 对话框上向用户显示警告，但允许用户完成事件。</p>
<ul>
<li><p><em>content</em> - 如果已定义，content 是静态部分，显示在错误消息的末尾。</p></li>
<li><p><em>data</em> - 如果已定义，数据构成一个表达式，该表达式将被评估并添加到警告消息的末尾。</p></li>
<li><p><em>dataElement</em> - 如果已定义，警告信息将以数据元素的名称/表单名作为前缀。</p></li>
</ul></li>
<li><p><strong>ERRORONCOMPLETION</strong> - 当用户试图完成事件时，在模态窗口中向用户显示错误。阻止用户完成事件。</p>
<ul>
<li><p><em>content</em> - 如果已定义，content 是静态部分，显示在错误消息的开头。</p></li>
<li><p><em>data</em> - 如果已定义，data 会形成一个表达式，该表达式会被评估并添加到错误消息的末尾。</p></li>
<li><p><em>dataElement</em> - 如果已定义，错误消息将与此数据元素相关联。</p></li>
</ul></li>
<li><p><strong>CREATEEVENT</strong> - 在同一注册中创建一个事件。</p>
<ul>
<li><p><em>内容</em></p></li>
<li><p><em>data</em> - 如果已定义，包含分配给已创建事件的数据值。格式为&lt;uid&gt;:&lt;数据值&gt; 。如果指定了多个值，则用逗号分隔。</p>
<pre><code>AcMrnleqHqc:100,AqK1IHqCkEE:'多血症</code></pre></li>
<li><p><em>programStage</em> - 必须定义，指定规则应创建事件的程序阶段。</p></li>
</ul></li>
<li><p><strong>SETMANDATORYFIELD</strong> - 设置一个字段为必填字段。</p>
<ul>
<li><p><em>dataElement</em> - 如果已定义，该数据元素将在数据输入表单中设置为必填项。</p></li>
<li><p><em>trackedEntityAttribute</em> - 如果已定义，此跟踪实体属性将在注册表单或配置文件中设置为必填项。</p></li>
</ul></li>
<li><p><strong>SENDMESSAGE</strong> - 在活动/注册完成或数据值更新时发送消息。</p>
<ul>
<li><p><em>messageTemplate</em> - 如果已定义，此模板将根据消息模板中的 DeliveryChannel 值以 SMS 或 EMAIL 方式发送。</p></li>
</ul></li>
<li><p><strong>SCHEDULEMESSAGE</strong> - 在活动/注册完成或数据值更新时发送消息。</p>
<ul>
<li><p><em>messageTemplate</em> - 如果已定义，该模板将根据信息模板中的 DeliveryChannel 值以 SMS 或 EMAIL 方式发送。</p></li>
<li><p><em>发送信息的日期</em> - 用于评估预定日期的表达式。</p></li>
</ul></li>
</ul></td>
<td>必须</td>
</tr>
<tr class="odd">
<td>位置</td>
<td>用于动作类型 DISPLAYKEYVALUEPAIR 和 DISPLAYTEXT，指定在哪个部件中显示文本或按键对。必须用于 DISPLAYKEYVALUEPAIR 和 DISPLAYTEXT。</td>
<td>参见说明</td>
</tr>
<tr class="even">
<td>内容</td>
<td>用于不同操作中的用户信息。有关在每种操作类型中如何使用的详细说明，请参阅操作类型概述。SHOWWARNING、SHOWERROR、WARNINGONCOMPLETION、ERRORONCOMPLETION、DISPLAYTEXT 和 DISPLAYKEYVALUEPAIR 必须使用。HIDEFIELD 和 ASSIGN 可选。</td>
<td>参见说明</td>
</tr>
<tr class="odd">
<td>数据</td>
<td>用于不同操作中的表达式。请参阅 actionType 概述，了解各操作类型中的详细使用说明。ASSIGN 必须使用。SHOWWARNING、SHOWERROR、WARNINGONCOMPLETION、ERRORONCOMPLETION、DISPLAYTEXT、CREATEEVENT 和 DISPLAYKEYVALUEPAIR 可选。</td>
<td>参见说明</td>
</tr>
<tr class="even">
<td>数据元素</td>
<td>用于将规则操作链接到数据元素。有关在每种操作类型中如何使用的详细说明，请参阅操作类型概述。SHOWWARNING、SHOWERROR、WARNINGONCOMPLETION、ERRORONCOMPLETION、ASSIGN 和 HIDEFIELD 的可选项。</td>
<td>参见说明</td>
</tr>
<tr class="odd">
<td>跟踪实体属性</td>
<td>用于将规则操作链接到跟踪实体属性（trackedEntityAttributes）。有关在每种操作类型中如何使用该属性的详细说明，请参阅操作类型概述。SHOWWARNING、SHOWERROR 和 HIDEFIELD 的可选属性。</td>
<td>请参阅说明</td>
</tr>
<tr class="even">
<td>选项</td>
<td>用于将规则操作链接到选项。有关在每种操作类型中如何使用的详细说明，请参阅操作类型概述。HIDEOPTION 的可选项</td>
<td>参见描述</td>
</tr>
<tr class="odd">
<td>选项组</td>
<td>用于将规则操作链接到选项组。有关如何在每种操作类型中使用该选项的详细说明，请参阅操作类型概述。SHOWOPTIONGROUP 和 HIDEOPTIONGROUP 必须使用。</td>
<td>参见说明</td>
</tr>
<tr class="even">
<td>程序阶段</td>
<td>仅用于 CREATEEVENT 规则操作。CREATEEEVENT 必须使用。</td>
<td>参见说明</td>
</tr>
<tr class="odd">
<td>程序阶段-部分</td>
<td>仅用于 HIDESECTION 规则操作。必须用于 HIDESECTION</td>
<td>参见说明</td>
</tr>
</tbody>
</table>

#### 程序规则变量模型的详细信息 { #program-rule-variable-model-details } 

下表详细概述了
程序规则变量模型。

<table style="width:100%;">
<caption>programRuleVariable</caption>
<colgroup>
<col style="width: 16%" />
<col style="width: 66%" />
<col style="width: 16%" />
</colgroup>
<thead>
<tr class="header">
<th>name</th>
<th>description</th>
<th>Compulsory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>name</td>
<td>the name for the programRuleVariable - this name is used in expressions.
<pre><code>#{myVariable} &gt; 5</code></pre></td>
<td>Compulsory</td>
</tr>
<tr class="even">
<td>sourceType</td>
<td>Defines how this variable is populated with data from the enrollment and events.
<ul>
<li><p>DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE - In tracker capture, gets the newest value that exists for a data element, within the events of a given program stage in the current enrollment. In event capture, gets the newest value among the 10 newest events on the organisation unit.</p></li>
<li><p>DATAELEMENT_NEWEST_EVENT_PROGRAM - In tracker capture, get the newest value that exists for a data element across the whole enrollment. In event capture, gets the newest value among the 10 newest events on the organisation unit.</p></li>
<li><p>DATAELEMENT_CURRENT_EVENT - Gets the value of the given data element in the current event only.</p></li>
<li><p>DATAELEMENT_PREVIOUS_EVENT - In tracker capture, gets the newest value that exists among events in the program that precedes the current event. In event capture, gets the newvest value among the 10 preceeding events registered on the organisation unit.</p></li>
<li><p>CALCULATED_VALUE - Used to reserve a variable name that will be assigned by a ASSIGN program rule action</p></li>
<li><p>TEI_ATTRIBUTE - Gets the value of a given tracked entity attribute</p></li>
</ul></td>
<td>Compulsory</td>
</tr>
<tr class="odd">
<td>dataElement</td>
<td>Used for linking the programRuleVariable to a dataElement. Compulsory for all sourceTypes that starts with DATAELEMENT_.</td>
<td>See description</td>
</tr>
<tr class="even">
<td>trackedEntity- Attribute</td>
<td>Used for linking the programRuleVariable to a trackedEntityAttribute. Compulsory for sourceType TEI_ATTRIBUTE.</td>
<td>See description</td>
</tr>
<tr class="odd">
<td>useCodeFor- OptionSet</td>
<td>If checked, the variable will be populated with the code - not the name - from any linked option set. Default is unchecked, meaning that the name of the option is populated.</td>
<td></td>
</tr>
<tr class="even">
<td>programStage</td>
<td>Used for specifying a specific program stage to retreive the programRuleVariable value from. Compulsory for DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE.</td>
<td>See description</td>
</tr>
</tbody>
</table>

### 创建程序规则 { #webapi_creating_program_rules } 

 <!--DHIS2-SECTION-ID:webapi_creating_program_rules-->

\-未来-

## 形式 { #webapi_forms } 

 <!--DHIS2-SECTION-ID:webapi_forms-->

检索有关表单的信息（对应于数据集
及其部分）您可以与 *form* 资源进行交互。表格
响应可以 XML 和 JSON 形式访问，并将提供信息
关于表单中的每个部分（组）以及表单中的每个字段
部分，包括标签和标识符。按供应期和
表单响应将填充的组织单位标识符
数据值。

 <table>
 <caption>表单查询参数</caption>
 <colgroup>
 <col style="width: 12%" />
 <col style="width: 12%" />
 <col style="width: 74%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> pe </td>
 <td> ISO周期</td>
 <td>填充表单数据值的时间段。 </td>
 </tr>
 <tr class="even">
 <td> ou </td>
 <td> UID </td>
 <td>要为其填充表单数据值的组织单位。 </td>
 </tr>
 <tr class="odd">
 <td>元数据</td>
 否| <td>假|真</td>
 <td>是否包括有关表单节每个数据元素的元数据。 </td>
 </tr>
 </tbody>
 </table>

要检索数据集的表单，您可以执行GET请求，如下所示：

    /api/26/dataSets/<dataset-id>/form.json

检索具有标识符“BfMAe6Itzgt”的数据集的表单
XML：

    /api/26/dataSets/BfMAe6Itzgt/form

要检索包含JSON中的元数据的表单，请执行以下操作：

    /api/26/dataSets/BfMAe6Itzgt/form.json?metaData=true

检索填充了特定时期数据值的表单，并
XML 中的组织单位：

    /api/26/dataSets/BfMAe6Itzgt/form.xml?ou=DiszpKrYNg8&pe=201401

当涉及自定义数据输入表单时，此资源还允许
直接为数据集创建此类表单。这可以通过一个
内容类型为 text/html 的 POST 或 PUT 请求，其中有效负载是
自定义表单标记，例如：

    卷曲-d @form.html“localhost/api/26/dataSets/BfMAe6Itzgt/form”
      -H“内容类型：text/html”-u admin：区-X PUT -v

## 文件资料 { #webapi_documents } 

 <!--DHIS2-SECTION-ID:webapi_documents-->

对文件的引用可以与文档资源一起存储。

 <table>
 <caption>文档字段</caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>字段名称</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>名称</td>
 <td>文档的唯一名称</td>
 </tr>
 <tr class="even">
 <td>外部</td>
 <td>标志，用于标识文档的位置。外部文件为TRUE，内部文件为FALSE </td>
 </tr>
 <tr class="odd">
 <td>网址</td>
 <td>文件的位置。外部文件的URL。内部资源的文件资源ID（请参阅<a href="#webapi_file_resources">文件资源</a>）</td>
 </tr>
 </tbody>
 </table>

对文档端点的GET请求将返回所有文档：

    /api/29/文档

对文档端点的 POST 请求将创建一个新文档：

    curl -X POST -d @document.json -H“内容类型：application/json”
      http://dhis.domain/api/29/documents

    {
      "name": "这个家",
      “外部”：真实，
      “url”：“https://www.dhis2.org”
    }

带有附加文档 ID 的 GET 请求将返回信息
关于文件。对同一端点的 PUT 请求将更新
文档的字段：

    /api/29/documents/<documentId>

将 */data* 附加到 GET 请求将返回实际文件内容
文件的：

    /api/29/documents/<documentId>/data

## 验证方式 { #webapi_validation } 

 <!--DHIS2-SECTION-ID:webapi_validation-->

要生成数据验证摘要，您可以与
验证资源。数据集资源针对数据输入进行了优化
用于验证数据集/表单的客户端，可以像这样访问：

    /api/26/validation/dataSet/QX4ZTUbOt3a.json?pe=201501&ou=DiszpKrYNg8

除了基于数据集验证规则外，还有两种
执行验证的其他方法：自定义验证和
预定验证。

自定义验证可以通过“数据质量”应用程序启动，其中
您可以配置期间、验证规则组和组织
要包含在分析中的单位以及是否要发送
通知和/或保留找到的结果。这样做的结果
分析将是使用您的标准发现的违规列表。

服务器作业的调度方式在 2.29 中发生了变化。现在它有
配置选项。请参阅[调度](#webapi_scheduling) api
了解更多信息。

第一个路径变量是引用数据集的标识符
证实。支持 XML 和 JSON 资源表示。这
响应包含违反验证规则的行为。这将被延长
未来版本中将提供更多验证类型。

要检索与特定数据集相关的验证规则，
意味着带有公式的验证规则，其中所有数据元素都是一部分
的具体数据集，您可以发出 GET 请求到
*validationRules* 资源如下：

    /api/26/validationRules?dataSet=<dataset-id>

验证规则有左边和右边，也就是
根据运营商比较有效性。有效的运算符
值见下表。

<table>
<caption>Operators</caption>
<colgroup>
<col style="width: 28%" />
<col style="width: 71%" />
</colgroup>
<thead>
<tr class="header">
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>equal_to</td>
<td>Equal to</td>
</tr>
<tr class="even">
<td>not_equal_to</td>
<td>Not equal to</td>
</tr>
<tr class="odd">
<td>greater_than</td>
<td>Greater than</td>
</tr>
<tr class="even">
<td>greater_than_or_equal_to</td>
<td>Greater than or equal to</td>
</tr>
<tr class="odd">
<td>less_than</td>
<td>Less than</td>
</tr>
<tr class="even">
<td>less_than_or_equal_to</td>
<td>Less than or equal to</td>
</tr>
<tr class="odd">
<td>compulsory_pair</td>
<td>If either side is present, the other must also be</td>
</tr>
<tr class="even">
<td>exclusive_pair</td>
<td>If either side is present, the other must not be</td>
</tr>
</tbody>
</table>

左边和右边的表达式是数学表达式
其中可以包含对数据元素和类别选项的引用
以下格式的组合：

    $ {<dataelement-id>。 <catoptcombo-id>}

左侧和右侧表达式有一个 *missing 值
战略*。这是指系统应该如何处理数据值
缺少数据元素/类别选项组合引用
在公式中是否应该检查验证规则
为有效性或跳过。有效的缺失值策略见于
下表。

<table>
<caption>Missing value strategies</caption>
<colgroup>
<col style="width: 28%" />
<col style="width: 71%" />
</colgroup>
<thead>
<tr class="header">
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>SKIP_IF_ANY_VALUE_MISSING</td>
<td>Skip validation rule if any data value is missing</td>
</tr>
<tr class="even">
<td>SKIP_IF_ALL_VALUES_MISSING</td>
<td>Skip validation rule if all data values are missing</td>
</tr>
<tr class="odd">
<td>NEVER_SKIP</td>
<td>Never skip validation rule irrespective of missing data values</td>
</tr>
</tbody>
</table>

## 验证结果 { #webapi_validation_results } 

 <!--DHIS2-SECTION-ID:webapi_validation_results-->

验证结果是在执行期间发现的违规的持久结果
验证分析。如果您在开始时选择“持久结果”或
安排验证分析，发现的任何违规将存储在
数据库。当结果存储在数据库中时，它将被使用
对于 3 件事：

1.  根据存储的结果生成分析。

2.  尚未生成通知的持久结果将生成通知，
    一次。

3.  跟踪结果是否产生了
    通知。

4.  跳过运行时已经检查过的规则
    验证分析。

这意味着如果你不坚持你的结果，你将无法
为验证结果生成分析，如果选中，结果将
每次找到并运行验证时生成通知
分析可能会更慢。

持久化的验证结果可以在下面查看
端点：

    /api/26/validationResults 验证结果

您还可以使用验证结果 ID 检查单个结果
在这个端点：

    /api/26/validationResults/<id>

验证结果每天发送给适当的用户一次，
但也可以使用以下方法手动触发以按需运行
api端点：

    /api/26/validation/sendNotifications

使用此端点仅发送未发送的结果。

## 数据分析 { #webapi_data_analysis } 

 <!--DHIS2-SECTION-ID:webapi_data_analysis-->

用于执行数据分析和查找数据质量的多种资源
并提供验证问题。

### 验证规则分析 { #webapi_data_analysis_validation_rules } 

 <!--DHIS2-SECTION-ID:webapi_data_analysis_validation_rules-->

要运行验证规则并检索违规：

    / api / dataAnalysis / validationRules

支持以下查询参数：

 <table>
 <caption> 验证规则分析查询参数 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 说明 </th>
 <th> 选项 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> vrg </td>
 <td> 验证规则组 </td>
 <td> ID </td>
 </tr>
 <tr class="even">
 <td> 或 </td>
 <td> 组织单位 </td>
 <td> ID </td>
 </tr>
 <tr class="odd">
 <td> 开始日期 </td>
 <td> 时间跨度的开始日期 </td>
 <td> 日期 </td>
 </tr>
 <tr class="even">
 <td> 结束日期 </td>
 <td> 时间跨度的结束日期 </td>
 <td> 日期 </td>
 </tr>
 <tr class="odd">
 <td> 坚持 </td>
 <td> 是否在系统中持久化违规 </td>
 <td> 假 |真 </td>
 </tr>
 <tr class="even">
 <td> 通知 </td>
 <td> 是否发送违规通知 </td>
 <td> 假 |真 </td>
 </tr>
 </tbody>
 </table>

### 基于标准差的离群分析 { #webapi_data_analysis_std_dev_outlier } 

 <!--DHIS2-SECTION-ID:webapi_data_analysis_std_dev_outlier-->

根据平均值的标准偏差识别数据异常值
价值：

    / api / dataAnalysis / stdDevOutlier

支持以下查询参数：

 <table>
 <caption> 标准差异常值分析查询参数 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 说明 </th>
 <th> 选项 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 或 </td>
 <td> 组织单位 </td>
 <td> ID </td>
 </tr>
 <tr class="even">
 <td> 开始日期 </td>
 <td> 时间跨度的开始日期 </td>
 <td> 日期 </td>
 </tr>
 <tr class="odd">
 <td> 结束日期 </td>
 <td> 时间跨度的结束日期 </td>
 <td> 日期 </td>
 </tr>
 <tr class="even">
 <td> ds </td>
 <td> 数据集，参数可重复 </td>
 <td> ID </td>
 </tr>
 <tr class="odd">
 <td> 标准偏差 </td>
 <td> 与平均值的标准偏差数 </td>
 <td> 数值 </td>
 </tr>
 </tbody>
 </table>

### 基于最小值/最大值的离群值分析 { #webapi_data_analysis_min_max_outlier } 

 <!--DHIS2-SECTION-ID:webapi_data_analysis_min_max_outlier-->

要基于最小/最大值来识别数据离群值：

    / api / dataAnalysis / minMaxOutlier

支持的查询参数等于基于 *std dev 的异常值
上面描述的分析*资源。

### 后续数据分析 { #follow-up-data-analysis } 

要识别标记为后续的数据：

    / api / dataAnalysis / followup

支持的查询参数等于基于 *std dev 的异常值
上面描述的分析*资源。

## 数据的完整性 { #webapi_data_integrity } 

 <!--DHIS2-SECTION-ID:webapi_data_integrity-->

数据管理模块的数据完整性功能是
可通过 Web API 获得。本节介绍如何运行
数据完整性过程以及检索结果。详情
执行的分析在用户手册中进行了描述。

### 运行数据完整性 { #webapi_data_integrity_run } 

 <!--DHIS2-SECTION-ID:webapi_data_integrity_run-->

测量数据完整性的操作是一种相当资源（和
时间）要求苛刻的任务。因此它作为一个异步进程运行并且
仅在明确要求时。启动任务是通过形成一个
像这样向 *dataIntegrity* 端点发出空的 POST 请求（演示
在卷曲语法中）：

    卷曲 -X POST https://dhis.domain/api/26/dataIntegrity

如果成功，请求将立即返回 HTTP 202。那个地点
响应头指向用于检查状态的资源
的请求。负载还包含作业的 json 对象
创建。对给定位置形成 GET 请求会产生一个空的
任务尚未完成时的 JSON 响应和 JSON taskSummary
任务完成时的对象。轮询（保守地）此资源
因此可用于等待任务完成。

### 取得结果 { #webapi_data_integrity_fetch_results } 

 <!--DHIS2-SECTION-ID:webapi_data_integrity_fetch_results-->

一旦数据完整性完成运行，就可以从以下位置获取结果
*system/taskSummaries* 资源，例如
    所以：

    卷曲-X GET https://dhis.domain/api/26/system/taskSummaries/DATAINTEGRITY

返回的对象包含每个分析点的摘要，
列出相关完整性违规的名称。正如在
本节的前导段落分析的细节（以及
结果数据）可以在用户手册的数据章节中找到
行政。

## 指标 { #webapi_indicators } 

 <!--DHIS2-SECTION-ID:webapi_indicators-->

本节介绍指标和指标表达式。

### 综合指标 { #webapi_aggregate_indicators } 

 <!--DHIS2-SECTION-ID:webapi_aggregate_indicators-->

要检索指标，您可以向指标发出 GET 请求
像这样的资源：

    /api/26/指标

指标代表可以计算和表示的表达式
因此。指标表达式被分为分子和
分母。分子和分母是数学的
可以包含对数据元素，常量和
组织单位组。变量将替换为数据
使用时的值在报告中。允许的变量
下表中描述了这些表达式。

<table>
<caption>指示变量</caption>
<colgroup>
<col style="width: 39%" />
<col style="width: 22%" />
<col style="width: 37%" />
</colgroup>
<thead>
<tr class="header">
<th>变量</th>
<th>对象</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>#{&lt;dataelement-id&gt;。&lt;categoryoptcombo-id&gt;。&lt;attributeoptcombo-idb0012c7dcbe08 7z0 }</td>
<td>数据元素操作数</td>
<td>指聚合数据元素和类别选项组合的组合。类别和属性选项组合 ID 都是可选的，通配符 &quot;*&quot; 符号可用于指示任何值。</td>
</tr>
<tr class="even">
<td>#{&lt;dataelement-id&gt;}</td>
<td>聚合数据元素</td>
<td>指所有类别选项组合中聚合数据元素的总价值。</td>
</tr>
<tr class="odd">
<td>D{&lt;节目 ID&gt;。&lt;数据元素-id&gt;</td>
<td>程序数据元素</td>
<td>指程序中跟踪器数据元素的值。</td>
</tr>
<tr class="even">
<td>A{&lt;节目 ID&gt;。&lt;属性 ID&gt;</td>
<td>程序跟踪的实体属性</td>
<td>指的是程序中跟踪的实体属性的值。</td>
</tr>
<tr class="odd">
<td>I{program-indicator-id&gt;</td>
<td>节目指示器</td>
<td>指的是程序指示器的值。</td>
</tr>
<tr class="even">
<td>R{&lt;数据集-id&gt;。&lt;指标&gt;}</td>
<td>报告率</td>
<td>指报告率指标。该指标可以是 REPORTING_RATE、REPORTING_RATE_ON_TIME、ACTUAL_REPORTS、ACTUAL_REPORTS_ON_TIME、EXPECTED_REPORTS。</td>
</tr>
<tr class="odd">
<td>C{&lt;常量 ID&gt;}</td>
<td>常量</td>
<td>指的是常量值。</td>
</tr>
<tr class="even">
<td>N{&lt;指示器-id&gt;}</td>
<td>指示器</td>
<td>引用现有指标。</td>
</tr>
<tr class="odd">
<td>OUG{&lt;orgunitgroup-id&gt;}</td>
<td>组织部门组</td>
<td>指组织部门组内的组织部门数量。</td>
</tr>
</tbody>
</table>

语法看起来像
    这：

＃

相应的示例如下所示：

＃

请注意，对于数据元素变量，类别选项组合
标识符可以省略。该变量将代表总数
对于数据元素，例如在所有类别选项组合中。例子：

＃

数据元素操作数可以包括任何类别选项组合和
属性选项组合，并使用通配符表示任何
    价值：

＃

使用程序数据元素和程序的示例
    属性：

    （D {eBAyeGv0exc.vV9UWAZohSf} * A {IpHINAT79UW.cejWyOfXge6}）/ D {eBAyeGv0exc.GieVkTxp4HH}

结合了计划指标和汇总指标的示例：

    I {EMOt6Fwhs1n} * 1000 /＃{WUg3MYWQ7pt}

使用报告率的示例如下所示：

    R {BfMAe6Itzgt.REPORTING_RATE} *＃{P3jJH5Tu5VC.S34ULMcHMca}

使用实际数据集报告的另一个示例：

    R {BfMAe6Itzgt.ACTUAL_REPORTS} / R {BfMAe6Itzgt.EXPECTED_REPORTS}

使用现有指标的示例如下所示：

    N {Rigf2d2Zbjp} *＃{P3jJH5Tu5VC.S34ULMcHMca}

表达式可以是任何类型的有效数学表达式，作为
例子：

    （2 *＃{P3jJH5Tu5VC.S34ULMcHMca}）/（＃{FQ2o8UBlcrS.S34ULMcHMca}-200）* 25

### 计划指标 { #webapi_program_indicators } 

 <!--DHIS2-SECTION-ID:webapi_program_indicators-->

要检索程序指标，您可以向程序发出 GET 请求
像这样的指标资源：

    /api/26/programIndicators

程序指示器可以包含在程序中收集的信息。
指标有一个表达式，可以包含对数据的引用
元素、属性、常量和程序变量。变量
下表中描述了允许在表达式中使用。

 <table>
 <caption> 程序指示变量 </caption>
 <colgroup>
 <col style="width: 31%" />
 <col style="width: 68%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 变量 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> #{&lt;programstage-id&gt;.&lt;dataelement-id&gt;} </td>
 <td> 指程序阶段和数据元素 id 的组合。 </td>
 </tr>
 <tr class="even">
 <td> A{&lt;attribute-id&gt;} </td>
 <td> 指的是被跟踪的实体属性。 </td>
 </tr>
 <tr class="odd">
 <td> V{&lt;variable-id&gt;} </td>
 <td> 指程序变量。 </td>
 </tr>
 <tr class="even">
 <td> C{&lt;constant-id&gt;} </td>
 <td> 指一个常数。 </td>
 </tr>
 </tbody>
 </table>

语法看起来像
    这：

＃

一个相应的例子看起来像
    这：

＃

### 表达方式 { #webapi_expressions } 

 <!--DHIS2-SECTION-ID:webapi_expressions-->

表达式是数学公式，可以包含对
数据元素、常量和组织单位组。为了验证和
获取表达式的文本描述，您可以发出 GET 请求
到表达式资源：

    /api/26/表达式/描述？表达式=<expression-string>

响应遵循标准的 JSON Web 消息格式。 *状态*
属性表示验证的结果，如果
成功和“错误”如果失败。 *message* 属性将为“有效”
如果成功并提供原因的文字描述
如果不是，则验证失败。 *描述*提供了文字说明
表达式的描述。

    {
        "httpStatus": "确定",
        “http状态代码”：200，
        “状态”：“正常”，
        "message": "有效",
        “描述”：“急性弛缓性麻痹”
    }

## 完整的数据集注册 { #webapi_complete_data_set_registrations } 

 <!--DHIS2-SECTION-ID:webapi_complete_data_set_registrations-->

本节是关于数据集的完整数据集注册。一种
注册标记作为完全捕获的数据集。

### 完成数据集 { #webapi_completing_data_sets } 

 <!--DHIS2-SECTION-ID:webapi_completing_data_sets-->

本节说明如何将数据集注册为完整。这是
通过与 *completeDataSetRegistrations* 交互实现
资源：

    /api/26/completeDataSetRegistrations

端点支持*POST*方法注册数据集
完成。端点在功能上非常类似于
*dataValueSets* 端点，支持批量导入完整
注册。

支持导入 *XML* 和 *JSON* 格式的有效负载。这
这个有效负载的基本格式，在这个例子中以 *XML* 给出，就像
所以：

    <completeDataSetRegistrations xmlns="http://dhis2.org/schema/dxf/2.0">
      <completeDataSetRegistration period =“200810”dataSet =“eZDhcZi6FLP”organizationUnit =“qhqAxPSTUXp”
        attributeOptionCombo=“bRowv6yZOF2”storedBy=“导入”/>
      <completeDataSetRegistration period =“200811”dataSet =“eZDhcZi6FLP”organizationUnit =“qhqAxPSTUXp”
        attributeOptionCombo=“bRowv6yZOF2”storedBy=“导入”/>
    </completeDataSetRegistrations>

*storedBy* 属性是可选的（因为它是
完整的注册对象）。您还可以选择设置
*date* 属性（注册时间）作为属性。是时候了
未设置，将使用当前时间。

导入过程支持以下查询参数：

 <table>
 <caption> 完整的数据集注册查询参数 </caption>
 <colgroup>
 <col style="width: 16%" />
 <col style="width: 18%" />
 <col style="width: 64%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 值 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> dataSetIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射完整注册的数据集的属性。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射完整注册的组织单位的属性。 </td>
 </tr>
 <tr class="odd">
 <td> attributeOptionComboIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射完整注册的属性选项组合的属性。 </td>
 </tr>
 <tr class="even">
 <td> idScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 所有对象的属性，包括数据集、组织单位和属性选项组合，用于映射完整的注册。 </td>
 </tr>
 <tr class="odd">
 <td> preheatCache </td>
 <td> 假 |真 </td>
 <td> 是在服务器上保存更改还是只返回导入摘要。 </td>
 </tr>
 <tr class="even">
 <td> dryRun </td>
 <td> 假 |真 </td>
 <td> 子单位是否适用注册 </td>
 </tr>
 <tr class="odd">
 <td> 导入策略 </td>
 <td> 创建 |更新 | CREATE_AND_UPDATE |删除 </td>
 <td> 在服务器上保存所有对象、新对象或更新导入状态。 </td>
 </tr>
 <tr class="even">
 <td>skipExistingCheck </td>
 <td> 假 |真 </td>
 <td> 跳过检查现有的完整注册。提高性能。仅用于空数据库或当要导入的注册不存在时。 </td>
 </tr>
 <tr class="odd">
 <td> 异步 </td>
 <td> 假 |真 </td>
 <td> 指示导入是异步还是同步。前者适用于非常大的导入，因为它确保请求不会超时，尽管它具有显着的性能开销。后者速度更快，但需要连接持续到进程完成。 </td>
 </tr>
 </tbody>
 </table>

### 读取完整的数据集注册 { #webapi_reading_complete_data_sets } 

 <!--DHIS2-SECTION-ID:webapi_reading_complete_data_sets-->

本节说明如何检索数据集完整性
注册。我们将使用 *completeDataSetRegistrations*
资源。要使用的查询参数如下：

 <table>
 <caption>数据值设置查询参数</caption>
 <colgroup>
 <col style="width: 18%" />
 <col style="width: 81%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>数据集</td>
 <td>数据集标识符，允许多个数据集</td>
 </tr>
 <tr class="even">
 <td>周期</td>
 <td> ISO格式的期间标识符。允许多个时期。 </td>
 </tr>
 <tr class="odd">
 <td>开始日期</td>
 <td>导出值的时间跨度的开始日期</td>
 </tr>
 <tr class="even">
 <td>结束日期</td>
 <td>导出值的时间跨度的结束日期</td>
 </tr>
 <tr class="odd">
 <td>创建了</td>
 <td>仅包括自给定时间戳记</td>创建的注册
 </tr>
 <tr class="even">
 <td>创建的持续时间</td>
 <td>仅包括在给定期限内创建的注册。格式是&lt;value&gt;&lt;time-unit&gt;，其中所支持的时间单位是&quot;d&quot;，&quot;h&quot;，&quot;m&quot;，&quot;s&quot; <em>（日，时，分，秒）。 </em>时间单位是相对于当前时间的。 </td>
 </tr>
 <tr class="odd">
 <td> orgUnit </td>
 <td>组织单位标识符，可以多次指定。如果给出了orgUnitGroup，则不适用。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitGroup </td>
 <td>组织单位组标识符，可以多次指定。如果给出了orgUnit，则不适用。 </td>
 </tr>
 <tr class="odd">
 <td>儿童</td>
 <td>是否在组织单位的层次结构中包括子级</td>
 </tr>
 <tr class="even">
 <td>限制</td>
 <td>响应中要包括的最大注册数量。 </td>
 </tr>
 <tr class="odd">
 <td> idScheme </td>
 <td>响应中用于元数据对象的标识符属性。 </td>
 </tr>
 <tr class="even">
 <td> dataSetIdScheme </td>
 <td>响应中用于数据集的标识符属性。覆盖idScheme。 </td>
 </tr>
 <tr class="odd">
 <td> orgUnitIdScheme </td>
 <td>响应中用于组织单位的标识符属性。覆盖idScheme。 </td>
 </tr>
 <tr class="even">
 <td> attributeOptionComboIdScheme </td>
 <td>响应中用于属性选项组合的标识符属性。覆盖idScheme。 </td>
 </tr>
 </tbody>
 </table>

可以重复 dataSet 和 orgUnit 参数以包含
多个数据集和组织单位。

期间、开始/结束日期、 created 和 createdDuration 参数
提供多种方式设置请求的时间维度，因此仅
一个可以用。例如，同时设置
开始/结束日期并设置期间。

请求示例如下所示：

    卷曲“https://play.dhis2.org/demo/api/26/completeDataSetRegistrations?dataSet=pBOMPrpg1QX&dataSet=pBOMPrpg1QX
      &startDate=2014-01-01&endDate=2014-01-31&orgUnit=YuQRtpLP10I&orgUnit=vWbkYPRmKyS&children=true"
      -H“接受：应用程序/xml”-u管理：区-v

您可以获得 *xml* 和 *json* 格式的响应。你可以指出
通过 *Accept* HTTP 标头，您更喜欢哪种响应格式
在上面的例子中。对于 xml，您使用 *application/xml*；对于 json 你
使用*应用程序/json*。

### 未完成的数据集 { #webapi_uncompleting_data_sets } 

 <!--DHIS2-SECTION-ID:webapi_uncompleting_data_sets-->

本节说明如何取消注册数据的完整性
放。要取消完成数据集，您将与
completeDataSetRegistrations 资源：

    /api/26/completeDataSetRegistrations

此资源支持*DELETE* 取消注册。以下查询
支持参数：

 <table>
 <caption>完整数据集注册查询参数</caption>
 <colgroup>
 <col style="width: 16%" />
 <col style="width: 18%" />
 <col style="width: 64%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ds </td>
 <td>是</td>
 <td>数据集标识符</td>
 </tr>
 <tr class="even">
 <td> pe </td>
 <td>是</td>
 <td>期间标识符</td>
 </tr>
 <tr class="odd">
 <td> ou </td>
 <td>是</td>
 <td>组织单位标识符</td>
 </tr>
 <tr class="even">
 <td> cc </td>
 <td>否（必须与cp结合使用）</td>
 <td>属性组合标识符（用于锁定检查）</td>
 </tr>
 <tr class="odd">
 <td> cp </td>
 <td>否（必须与cp结合使用）</td>
 <td>属性选项标识符，用;分隔对于多个值（用于锁定检查）</td>
 </tr>
 <tr class="even">
 <td>多块</td>
 <td>否（默认为false）</td>
 <td>注册是否适用于子单元</td>
 </tr>
 </tbody>
 </table>

## 数据审批 { #webapi_data_approval } 

 <!--DHIS2-SECTION-ID:webapi_data_approval-->

本节说明如何批准、取消批准和检查批准
使用 *dataApprovals* 资源的状态。批准是按数据完成的
审批工作流、期间、组织单位和属性选项组合。

    /api/26/dataApprovals

### 获取批准状态 { #webapi_data_approval_get_status } 

 <!--DHIS2-SECTION-ID:webapi_data_approval_get_status-->

要获取数据集的批准信息，您可以发出 GET 请求
如同
    这：

    获取 http://server.com/api/dataApprovals?wf=rIUL3hYOjJc&pe=201801&ou=YuQRtpLP10I

 <table style="width:100%;">
 <caption> 数据审批查询参数 </caption>
 <colgroup>
 <col style="width: 16%" />
 <col style="width: 18%" />
 <col style="width: 64%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 需要 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> wf </td>
 <td> 是 </td>
 <td> 数据审批工作流标识符 </td>
 </tr>
 <tr class="even">
 <td> pe </td>
 <td> 是 </td>
 <td> 期间标识符 </td>
 </tr>
 <tr class="odd">
 <td> 或 </td>
 <td> 是 </td>
 <td> 组织单位标识符 </td>
 </tr>
 <tr class="even">
 <td> aoc </td>
 <td> 否 </td>
 <td> 属性选项组合标识符 </td>
 </tr>
 </tbody>
 </table>

（注：为了向后兼容，数据集的参数 ds 可以是
在本次数据审批和其他数据审批中为工作流程提供代替 wf
请求如下所述。如果给定数据集，则工作流程
将使用与该数据集关联的数据。）

这会给你一个类似这样的响应：

    {
      “可能批准”：假，
      “可能不批准”：假，
      “可以接受”：假，
      “可能不接受”：假，
      “状态”：“UNAPPROVED_ELSEWHERE”
    }

返回的参数是：

<table>
<caption>数据审批查询参数</caption>
<colgroup>
<col style="width: 25%" />
<col style="width: 75%" />
</colgroup>
<thead>
<tr class="header">
<th>返回参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>可能批准</td>
<td>当前用户是否可以批准此数据选择。</td>
</tr>
<tr class="even">
<td>可能不批准</td>
<td>当前用户是否可以不批准此数据选择。</td>
</tr>
<tr class="odd">
<td>mayAccept</td>
<td>当前用户是否可以接受此数据选择。</td>
</tr>
<tr class="even">
<td>可能不接受</td>
<td>当前用户是否可以不接受此数据选择。</td>
</tr>
<tr class="odd">
<td>状态</td>
<td>下表中的其中一项数据批准状态。</td>
</tr>
</tbody>
</table>

<table>
<caption>数据审批状态</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 66%" />
</colgroup>
<thead>
<tr class="header">
<th>州</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>不可批准</td>
<td>数据审批不适用于此选择。 （数据既不是&quot;已批准&quot;，也不是&quot;未批准&quot;。）</td>
</tr>
<tr class="even">
<td>UNAPPROVED_WAITING</td>
<td>此选择的数据可能会获得批准，但正在等待一些较低级别的批准才能准备好获得批准。</td>
</tr>
<tr class="odd">
<td>UNAPPROVED_ELSEWHERE</td>
<td>数据未获批准，正在其他地方等待批准（此处未批准。）</td>
</tr>
<tr class="even">
<td>UNAPPROVED_READY</td>
<td>数据尚未批准，已准备好接受此选择的批准。</td>
</tr>
<tr class="odd">
<td>APPROVED_HERE</td>
<td>数据已获得批准，并且已在此处获得批准（因此可能在此未获得批准。）</td>
</tr>
<tr class="even">
<td>APPROVED_ELSEWHERE</td>
<td>数据已获批准，但未在此处获得批准（因此不能在此处取消批准。）这涵盖以下情况：
<ul>
<li><p>数据已获得更高级别的批准。</p></li>
<li><p>数据已获批准用于更广泛的类别选项。</p></li>
<li><p>已批准所选期间内所有子期间的数据。</p></li>
</ul>
在前两种情况下，有一个涵盖选择的数据批准对象。第三种情况则没有。</td>
</tr>
<tr class="odd">
<td>ACCEPTED_HERE</td>
<td>数据已在此处获得批准并接受（因此可能在此未获得批准。）</td>
</tr>
<tr class="even">
<td>ACCEPTED_ELSEWHERE</td>
<td>数据已获得批准并接受，但在其他地方。</td>
</tr>
</tbody>
</table>

注意查询数据审批状态时，可以指定
查询参数的任意组合。您指定的组合
不需要描述数据被批准的地方
审批级别。例如：

  - 组织单位可能不在审批级别。这
    批准状态取决于数据是否在某个时间被批准
    组织单位上级的批准级别。

  - 您可以指定单个属性类别选项。批准
    状态取决于数据是否被批准用于属性
    包含其中一项或多项的类别选项组合
    选项。

  - 您可以指定一个时间段，该时间段长于
    数据输入和批准的数据集。批准
    状态取决于数据是否被批准用于所有
    指定期间内的数据集期间。

对于与类别组合相关联的数据集，您可能需要
获取单个属性选项组合的数据批准记录
来自以下资源：

    获取 api/dataApprovals/categoryOptionCombos?wf=rIUL3hYOjJc&pe=201801&ou=YuQRtpLP10I

### 批准数据 { #webapi_data_approval_approve_data } 

 <!--DHIS2-SECTION-ID:webapi_data_approval_approve_data-->

To approve data you can issue a *POST* request to the *dataApprovals*
resource. To un-approve data you can issue a *DELETE* request to the
dataApprovals resource.

    删除后 /api/26/dataApprovals

要接受已批准的数据，您可以发出 *POST* 请求
到 *dataAcceptances* 资源。要取消接受数据，您可以发出
对 *dataAcceptances* 资源的 *DELETE* 请求。

    删除后 /api/26/dataAcceptances

这些请求包含以下参数：

 <table style="width:100%;">
 <caption> 数据审批动作参数 </caption>
 <colgroup>
 <col style="width: 16%" />
 <col style="width: 18%" />
 <col style="width: 64%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 动作参数 </th>
 <th> 需要 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> wf </td>
 <td> 是 </td>
 <td> 数据审批工作流标识符 </td>
 </tr>
 <tr class="even">
 <td> pe </td>
 <td> 是 </td>
 <td> 期间标识符 </td>
 </tr>
 <tr class="odd">
 <td> 或 </td>
 <td> 是 </td>
 <td> 组织单位标识符 </td>
 </tr>
 <tr class="even">
 <td> aoc </td>
 <td> 否 </td>
 <td> 属性选项组合标识符 </td>
 </tr>
 </tbody>
 </table>

注意，与查询数据审批状态不同，必须指定
对应于可以选择的数据的参数
得到正式认可的。特别是，以下两项都必须为真：

  - 组织单位的级别必须由审批级别指定
    在工作流程中。

  - 指定的时间段必须与
    工作流程。

### 批量批准数据 { #webapi_data_approval_bulk_approve_data } 

 <!--DHIS2-SECTION-ID:webapi_data_approval_bulk_approve_data-->

您可以通过发布到批准大量数据记录
*api/dataApprovals/approvals* 资源。

    POST /api/26/dataApprovals/approvals

您可以通过发布到
*api/dataApprovals/unapprovals* 资源。

    POST /api/26/dataApprovals/unapprovals

您可以通过发布到
*api/dataAcceptances/acceptances* 资源。

    POST /api/26/dataAcceptances/acceptances

您可以通过发布到
*api/dataAcceptances/unacceptances* 资源。

    POST /api/26/dataAcceptances/unacceptances

批准有效负载受JSON支持，如下所示：

    {
      “wf”：[
        “pBOMPrpg1QX”，“lyLU2wR22tC”
      ],
      “pe”：[
        “201601”、“201602”
      ],
      “批准”：[{
          "ou": "cDw53Ej8rju",
          “aoc”：“ranftQIH5M9”
        }, {
          "ou": "cDw53Ej8rju",
          “aoc”：“fC3z1lcAW5x”
        }]
    }

## 稽核 { #webapi_auditing } 

 <!--DHIS2-SECTION-ID:webapi_auditing-->

DHIS2 对聚合的所有更新和删除进行自动审核
数据值、跟踪实体数据值、跟踪实体属性
值和数据批准。本节介绍如何获取此内容
数据。

### 汇总数据价值审核 { #webapi_auditing_aggregate_audits } 

 <!--DHIS2-SECTION-ID:webapi_auditing_aggregate_audits-->

汇总数据值审核的端点位于
* / api / audits / dataValue *，并且可用参数显示在
下表。

 <table>
 <caption> 汇总数据值查询参数 </caption>
 <colgroup>
 <col style="width: 12%" />
 <col style="width: 14%" />
 <col style="width: 72%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ds </td>
 <td> 数据集 </td>
 <td> 要从中获取数据元素的一个或多个数据集标识符。 </td>
 </tr>
 <tr class="even">
 <td> 德 </td>
 <td> 数据元素 </td>
 <td> 一个或多个数据元素标识符。 </td>
 </tr>
 <tr class="odd">
 <td> pe </td>
 <td> ISO 周期 </td>
 <td> 一个或多个句点 ISO 标识符。 </td>
 </tr>
 <tr class="even">
 <td> 或 </td>
 <td> 组织单位 </td>
 <td> 一个或多个组织单位标识符。 </td>
 </tr>
 <tr class="odd">
 <td> 审计类型 </td>
 <td> 更新 |删除 </td>
 <td> 按审计类型过滤。 </td>
 </tr>
 <tr class="even">
 <td> 跳过分页 </td>
 <td> 假 |真 </td>
 <td> 打开/关闭分页 </td>
 </tr>
 <tr class="odd">
 <td> 页面 </td>
 <td> 1（默认）</td>
 <td> 如果启用分页，此参数决定显示哪个页面 </td>
 </tr>
 </tbody>
 </table>

获取ID为“ lyLU2wR22tC”的数据集的所有审核：

    /api/26/audits/dataValue?ds=lyLU2wR22tC

### 跟踪实体数据价值审核 { #webapi_tracked_entity_data_value_audits } 

 <!--DHIS2-SECTION-ID:webapi_tracked_entity_data_value_audits-->

跟踪的实体数据值审核的端点位于
* / api / audits / trackedEntityDataValue *，并且可用参数为
显示在下表中。

 <table>
 <caption> 跟踪实体数据值查询参数 </caption>
 <colgroup>
 <col style="width: 12%" />
 <col style="width: 16%" />
 <col style="width: 71%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 德 </td>
 <td> 数据元素 </td>
 <td> 一个或多个数据元素标识符。 </td>
 </tr>
 <tr class="even">
 <td> ps </td>
 <td> 程序阶段实体 </td>
 <td> 一个或多个程序阶段实例标识符。 </td>
 </tr>
 <tr class="odd">
 <td> 审计类型 </td>
 <td> 更新 |删除 </td>
 <td> 按审计类型过滤。 </td>
 </tr>
 <tr class="even">
 <td> 跳过分页 </td>
 <td> 假 |真 </td>
 <td> 打开/关闭分页 </td>
 </tr>
 <tr class="odd">
 <td> 页面 </td>
 <td> 1（默认）</td>
 <td> 如果启用分页，此参数决定显示哪个页面 </td>
 </tr>
 </tbody>
 </table>

获取所有具有数据元素ID eMyVanycQSC或qrur9Dvnyt5的审计：

    /api/26/audits/trackedEntityDataValue?de=eMyVanycQSC&de=qrur9Dvnyt5

### 跟踪实体属性值审核 { #webapi_tracked_entity_attribute_value_audits } 

 <!--DHIS2-SECTION-ID:webapi_tracked_entity_attribute_value_audits-->

跟踪的实体属性值审核的端点位于
* / api / audits / trackedEntityAttributeValue *，以及可用参数
如下表所示。

 <table>
 <caption>跟踪实体属性值查询参数</caption>
 <colgroup>
 <col style="width: 12%" />
 <col style="width: 16%" />
 <col style="width: 70%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>茶</td>
 <td>跟踪的实体属性</td>
 <td>一个或多个跟踪的实体属性标识符。 </td>
 </tr>
 <tr class="even">
 <td> te </td>
 <td>跟踪的实体实例</td>
 <td>一个或多个跟踪的实体实例标识符。 </td>
 </tr>
 <tr class="odd">
 <td>审核类型</td>
 <td>更新|删除</td>
 <td>按审核类型过滤。 </td>
 </tr>
 <tr class="even">
 <td> skipPaging </td>
 否| <td>假|真</td>
 <td>打开/关闭分页</td>
 </tr>
 <tr class="odd">
 <td>页面</td>
 <td> 1（默认）</td>
 <td>如果启用了分页，则此参数决定显示哪个页面</td>
 </tr>
 </tbody>
 </table>

获取所有具有ID VqEFza8wbwA的属性的审核：

    /api/26/audits/trackedEntityAttributeValue?tea=VqEFza8wbwA

### 跟踪实体实例审核 { #webapi_tracked_entity_instance_audits } 

 <!--DHIS2-SECTION-ID:webapi_tracked_entity_instance_audits-->

为跟踪实体实例启用审计后（通过设置
被跟踪实体类型的allowAuditLog为true），全部读取和搜索
操作被记录。访问审计日志的端点是
api/审计/trackedEntityInstance。以下是可用的参数
与此端点交互。

 <table>
 <caption> 被跟踪实体实例审计查询参数 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> tei </td>
 <td> 跟踪实体实例 </td>
 <td> 一个或多个被跟踪实体实例标识符 </td>
 </tr>
 <tr class="even">
 <td> 用户 </td>
 <td> 用户 </td>
 <td> 一个或多个用户标识符 </td>
 </tr>
 <tr class="odd">
 <td> 审计类型 </td>
 <td> 搜索 |阅读 </td>
 <td> 审核类型以筛选 </td>
 </tr>
 <tr class="even">
 <td> 开始日期 </td>
 <td> 开始日期 </td>
 <td> yyyy-mm-dd 格式的审计过滤的开始日期。 </td>
 </tr>
 <tr class="odd">
 <td> 结束日期 </td>
 <td> 结束日期 </td>
 <td> yyyy-mm-dd 格式的审计过滤的结束日期。 </td>
 </tr>
 <tr class="even">
 <td> 跳过分页 </td>
 <td> 假 |真 </td>
 <td> 打开/关闭分页。 </td>
 </tr>
 <tr class="odd">
 <td> 页面 </td>
 <td> 1（默认）</td>
 <td> 要请求的特定页面。 </td>
 </tr>
 <tr class="even">
 <td> 页面大小 </td>
 <td> 50（默认）</td>
 <td> 页面大小。 </td>
 </tr>
 </tbody>
 </table>

获取所有类型为 READ 的跟踪实体实例审计
startDate=2018-03-01 和 endDate=2018-04-24，页面大小为 5：

    api/27/audits/trackedEntityInstance.json?startDate=2018-03-01&endDate=2018-04-24&auditType=READ&pageSize=5

### 入学审核 { #webapi_enrollment_audits } 

 <!--DHIS2-SECTION-ID:webapi_enrollment_audits-->

一旦启用注册审核（**通过设置allowAuditLog
跟踪器程序设置为 true**），所有读取操作都会被记录。这
访问审核日志的端点是 api/audits/enrollment。以下是
与此端点交互的可用参数。

 <table>
 <caption> 注册审核查询参数 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> zh </td>
 <td> 注册 </td>
 <td> 一个或多个被跟踪实体实例标识符 </td>
 </tr>
 <tr class="even">
 <td> 用户 </td>
 <td> 用户 </td>
 <td> 一个或多个用户标识符 </td>
 </tr>
 <tr class="odd">
 <td> 开始日期 </td>
 <td> 开始日期 </td>
 <td> yyyy-mm-dd 格式的审计过滤的开始日期。 </td>
 </tr>
 <tr class="even">
 <td> 结束日期 </td>
 <td> 结束日期 </td>
 <td> yyyy-mm-dd 格式的审计过滤的结束日期。 </td>
 </tr>
 <tr class="odd">
 <td> 跳过分页 </td>
 <td> 假 |真 </td>
 <td> 打开/关闭分页。 </td>
 </tr>
 <tr class="even">
 <td> 页面 </td>
 <td> 1（默认）</td>
 <td> 要请求的特定页面。 </td>
 </tr>
 <tr class="odd">
 <td> 页面大小 </td>
 <td> 50（默认）</td>
 <td> 页面大小。 </td>
 </tr>
 </tbody>
 </table>

获取 startDate=2018-03-01 的所有注册审核和
endDate=2018-04-24，页面大小为 5：

    api/audits/enrollment.json?startDate=2018-03-01&endDate=2018-04-24&pageSize=5

获取用户管理员的所有注册审核

    api/audits/enrollment.json?user=admin

### 数据审批审核 { #data-approval-audits } 

数据审批审核的端点位于
/api/audits/dataApproval，可用参数显示在
下表。

<table>
<caption><strong>数据审批查询参数</strong></caption>
<colgroup>
<col style="width: 12%" />
<col style="width: 16%" />
<col style="width: 70%" />
</colgroup>
<thead>
<tr class="header">
<th>参数</th>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>dal</td>
<td>数据审批级别</td>
<td>一个或多个数据审批级别标识符。</td>
</tr>
<tr class="even">
<td>wf</td>
<td>工作流程</td>
<td>一个或多个数据审批工作流程标识符。</td>
</tr>
<tr class="odd">
<td>ou</td>
<td>组织单位</td>
<td>一个或多个组织单位标识符。</td>
</tr>
<tr class="even">
<td>aoc</td>
<td>属性选项组合</td>
<td>一个或多个属性选项组合标识符。</td>
</tr>
<tr class="odd">
<td>开始日期</td>
<td>开始日期</td>
<td>批准的起始日期，格式为 yyyy-mm-dd。</td>
</tr>
<tr class="even">
<td>结束日期</td>
<td>结束日期</td>
<td>审批的结束日期，格式为 "年-月-日"。</td>
</tr>
<tr class="odd">
<td>跳过分页</td>
<td>假 | 真</td>
<td>打开/关闭分页</td>
</tr>
<tr class="even">
<td>分页</td>
<td>1（默认值）</td>
<td><p>如果启用了分页功能，该参数将决定显示哪一页。</p></td>
</tr>
</tbody>
</table>

获取数据批准工作流RwNpkAM7Hw7的所有审核：

    /api/27/audits/dataApproval?wf=RwNpkAM7Hw7

## 讯息对话 { #webapi_message_conversations } 

 <!--DHIS2-SECTION-ID:webapi_message_conversations-->

DHIS2 具有一种出于以下目的发送消息的机制：
用户反馈、通知和一般信息。留言
被分组为对话。与消息对话进行交互
您可以将 POST 和 GET 请求发送到 *messageConversations*
资源。

    /api/26/message对话

消息将传送到 DHIS2 消息收件箱，但也可以发送
以短信形式发送到用户的电子邮件地址和手机。在这个例子中
我们将了解如何利用 Web API 来发送、读取和管理
消息。我们将假装是 *DHIS2 管理员* 用户并发送
给*移动*用户的消息。然后我们将假装是移动设备
用户并阅读我们的新消息。接下来我们将管理管理员
通过标记和删除邮件来用户收件箱。

### 撰写和阅读邮件 { #webapi_writing_messages } 

 <!--DHIS2-SECTION-ID:webapi_writing_messages-->

我们在发送和阅读消息时需要交互的资源
是 *messageConversations* 资源。我们首先访问 Web API
在 <http://play.dhis2.org/demo/api> 的入口点我们找到并跟随
*messageConversations* 资源的链接位于
 <http://play.dhis2.org/demo/api/messageConversations> 。说明
告诉我们可以使用 POST 请求来创建新消息
发送给多个用户的以下 XML 格式：

    <message xmlns="http://dhis2.org/schema/dxf/2.0">
      <subject>这是主题</subject>
      <text>这是文本</text>
      <users>
        <user id="user1ID" />
        <user id="user2ID" />
        <user id="user3ID" />
      </users>
    </message>

为了发送给一个或多个用户组中的所有用户，我们可以
用：

    <message xmlns="http://dhis2.org/schema/dxf/2.0">
      <subject>这是主题</subject>
      <text>这是文本</text>
      <userGroups>
        <userGroup id="userGroup1ID" />
        <userGroup id="userGroup2ID" />
        <userGroup id="userGroup3ID" />
      </userGroups>
    </message>

为了发送给连接到一个或多个组织单位的所有用户，我们
可以使用：

   <message xmlns="http://dhis2.org/schema/dxf/2.0">
     <subject>这是主题</subject>
     <text>这是文本</text>
     <organisationUnits>
       <organisationUnit id="ou1ID" />
       <organisationUnit id="ou2ID" />
       <organisationUnit id="ou3ID" />
     </organisationUnits>
   </message>

由于我们想向我们的朋友（移动用户）发送消息，因此我们需要
查找她的标识符。我们通过访问 Web API 入口点来实现这一点
点击链接到 *users* 资源：
<http://play.dhis2.org/demo/api/24/users>。我们通过以下链接继续
发送给移动用户
<http://play.dhis2.org/demo/api/24/users/PhzytPW3g2J> 我们学习的地方
她的标识符是 *PhzytPW3g2J*。我们现在准备好放置我们的 XML
一起发送消息以形成我们要询问移动用户的消息
她是否报告了2014年1月的数据：

    <message xmlns="http://dhis2.org/schema/dxf/2.0">
      <subject>死亡率数据报告</subject>
      <text>您是否报告了 2014 年 1 月死亡率数据集的数据？</text>
      <users>
        <user id="PhzytPW3g2J" />
      </users>
    </message>

为了测试这一点，我们将 XML 内容保存到名为 *message.xml* 的文件中。
我们使用 cURL 将消息分派到我们所在的 DHIS2 演示实例
指示内容类型是 XML 并以 *admin* 身份进行身份验证
用户：

    卷曲-d @message.xml“https://play.dhis2.org/demo/api/26/messageConversations”
      -H“内容类型：application/xml”-u admin：区-X POST -v

JSON 和 POST 命令中对应的有效负载如下所示：

```
{
  "主题"："Hey"、
  "文字"："How are you?"、
  "用户"：[
    {
      "id"："OYLGMiazHtW"
    },
    {
      "id"："N3PZBUlN8vq"
    }
  ],
  "userGroups"：[
    {
      "id"："ZoHNWQajIoe"
    }
  ],
  "organisationUnits"：[
    {
      "id"："DiszpKrYNg8"
    }
  ]
}
```

    卷曲-d @message.json“https://play.dhis2.org/demo/api/26/messageConversations”
      -H“内容类型：application/json”-u admin：区-X POST -v

如果一切顺利，我们会收到 *201 Created* HTTP 状态代码。另请注意
我们收到一个 *Location*HTTP 标头，该标头的值告诉我们
新创建的消息对话资源的 URL - 这可以是
消费者使用它来执行进一步的操作。

我们现在将假装是移动用户并阅读消息
刚刚通过向 *messageConversations* 发送 GET 请求发送
资源。我们提供一个带有 *application/xml* 的 *Accept* 标头作为
表示我们对 XML 资源感兴趣的值
表示，我们以*移动*用户身份进行身份验证：

    卷曲“https://play.dhis2.org/demo/api/26/messageConversations”
      -H“接受：应用程序/xml” -u 移动设备：地区 -X GET -v

作为响应，我们得到以下XML：

    <messageConversations xmlns="http://dhis2.org/schema/dxf/2.0"
      链接=“https://play.dhis2.org/demo/api/messageConversations”>
      <messageConversation name="死亡率数据报告" id="ZjHHSjyyeJ2"
        链接=“https://play.dhis2.org/demo/api/messageConversations/ZjHHSjyyeJ2”/>
      <messageConversation name="DHIS2 版本 2.7 已部署" id="GDBqVfkmnp2"
        链接=“https://play.dhis2.org/demo/api/messageConversations/GDBqVfkmnp2”/>
    </messageConversations>

从响应中我们可以读取新发送的标识符
消息是 *ZjHHSjyyeJ2*。请注意，具体的链接
资源已嵌入，可以跟随以阅读完整内容
信息。从描述来看
<http://play.dhis2.org/demo/api/24/messageConversations> 我们了解到
一旦我们知道，我们可以直接回复现有的消息对话
通过包含消息文本作为请求负载（正文）来获取 URL。我们
现在可以构建一个 URL 来发送我们的回复：

    curl -d“是的，死亡率数据集已报告”
      “https://play.dhis2.org/demo/api/26/messageConversations/ZjHHSjyyeJ2”
      -H“内容类型：文本/纯文本”-u 移动设备：地区-X POST -v

如果一切按计划进行，您将收到 *200 OK* 状态代码。

在2.30中，我们添加了URL搜索参数：

    queryString =？＆queryOperator =？

过滤器搜索主题、邮件文本和邮件中的匹配项
消息对话的发件人。默认查询运算符是 token
由于更好的文本搜索，但您可以提供自己的运算符。

### 管理讯息 { #webapi_managing_messages } 

 <!--DHIS2-SECTION-ID:webapi_managing_messages-->

*注意：本节中讨论的 Web-API 调用是在
DHIS 2.17*

当用户接收和发送消息时，对话将开始堆积
在他们的收件箱中，最终变得难以追踪。我们现在将
看看通过删除和标记来管理用户消息收件箱
通过 Web-API 进行对话。我们将通过执行一些操作来做到这一点
*DHIS 管理员* 用户收件箱中的维护。

首先，让我们看一下从收件箱中删除一些邮件。是
请务必注意，此处描述的所有删除操作仅删除
用户和消息对话之间的关系。实际上
这意味着我们不会删除消息本身（或任何消息）
内容），但只是从其中删除消息线程
用户，使其不再列在
*/api/messageConversations* 资源。

要从用户收件箱中删除消息对话，我们需要发出
*DELETE* 对由消息 ID 标识的资源的请求
对话和参与的用户。例如，删除用户
与 ID *xE7jOejl9FI* 的对话来自 ID *jMe43trzrdi*：

    卷曲 https://play.dhis2.org/demo/api/26/messageConversations/jMe43

如果请求成功，服务器将回复 *200 OK*。这
响应正文包含一个 XML 或 JSON 对象（根据接受
请求的标头）包含已删除用户的 ID。

    {“已删除”：[“xE7jOejl9FI”]}

失败时，返回的对象将包含一个消息有效负载
描述错误。

    { "message" : "没有 uid 为 dMV6G0tPAEa 的用户" }

细心的读者已经注意到返回的对象
在我们的例子中，成功实际上是一个 id 列表（包含一个
入口）。这是因为端点也支持批量删除。这
请求是向相同的 *messageConversations* 资源发出的，但遵循
语义略有不同。对于批量操作，对话 ID
作为查询字符串参数给出。以下示例删除了两个
当前的单独消息对话
    用户：

    卷曲“https://play.dhis2.org/demo/api/26/messageConversations?mc=WzMRrCosqc0&mc=lxCjiigqrJm”
      -X 删除 -u 管理员:区

如果您有足够的权限，可以删除对话
通过提供可选的用户 ID 参数代表另一个用户。

    卷曲“https://play.dhis2.org/demo/api/26/messageConversations?mc=WzMRrCosqc0&mc=lxCjiigqrJm&user=PhzytPW3g2J”
      -X 删除 -u 管理员:区

如上所述，批量删除将返回与
单一操作。删除的对象列表将反映成功
执行的移除。部分错误的请求（即不存在的 ID）
因此不会取消整个批处理操作。

消息带有布尔 *read* 属性。这允许跟踪是否
用户是否看到（打开）了一条消息。在典型应用中
场景（例如 DHIS2 网络门户），消息将被标记为已读
用户第一次打开它。然而，用户可能想要
管理他们的消息的已读或未读状态，以保持
跟踪某些对话。

将消息标记为已读或未读遵循与批处理类似的语义
删除，还支持批量操作。将消息标记为已读
我们向 *messageConversations/read* 资源发出一个 *POST*，其中包含
包含一个或多个消息 ID 的请求正文。将消息标记为
未读，我们向
*messageConversations/未读*资源。与拆除的情况一样，
可以给出可选的 *user* 请求参数。

让我们将几条消息标记为当前用户已读：

    卷曲“https://play.dhis2.org/dev/api/messageConversations/read”
    -d '["ZrKML5WiyFm","Gc03smoTm6q"]' -X POST
    -H“内容类型：application/json”-u admin：区-v

响应是带有以下 JSON 正文的 *200 OK*：

    {“markedRead”：[“ZrKML5WiyFm”，“Gc03smoTm6q”]}

在 2.30 中，我们添加了将收件人添加到现有的选项
消息对话。资源位于
    在

    https://play.dhis2.org/demo/api/30/messageConversations/id/recipients

此资源的选项是用户、用户组和
组织单位。请求应如下所示：

```
{
    "用户"：[
        {
        "id"："OYLGMiazHtW"
        },
        {
        "id"："N3PZBUlN8vq"
        }
    ],
    "userGroups"：[
        {
        "id"："DiszpKrYNg8"
        }
    ],
    "organisationUnits"：[
        {
        "id"："DiszpKrYNg8"
        }
    ]
}

```

### 邮件附件 { #webapi_message_attachments } 

 <!--DHIS2-SECTION-ID:webapi_message_attachments-->

创建带附件的消息分两步完成：上传
文件添加到 *attachments* 资源，然后包括一个或几个
创建新邮件时的附件 ID。

对 *attachments* 资源的 POST 请求会将文件上传到
服务器。

    curl -F file=@attachment.png -u admin:district https://play.dhis2.org/demo/api/messageConversations/attachments

该请求返回一个表示附件的对象。的标识
创建消息时必须使用此对象以链接
邮件附件。

    {
       “创建”：“2018-07-20T16：54：18.210”，
       "lastUpdated":"2018-07-20T16:54:18.212",
       “外部访问”：假，
       “公共访问”：” -  -  -  - ”，
       “用户”：{
          "name":"约翰·特拉奥雷",
          "创建":"2013-04-18T17:15:08.407",
          "lastUpdated":"2018-03-09T23:06:54.512",
          “外部访问”：假，
          "displayName":"约翰·特拉奥雷",
          “最喜欢的”：假的，
          “id”：“xE7jOejl9FI”
       },
       “最后更新者”：{
          "id":"xE7jOejl9FI",
          “姓名”：“约翰·特拉奥雷”
       },
       “最喜欢的”：假的，
       “id”：“fTpI4GOmujz”
    }

创建新消息时，可以在请求正文中传递 id
将上传的文件链接到正在创建的消息。

```
{
  "主题"："Hey"、
  "文字"："How are you?"、
  "用户"：[
    {
      "id"："OYLGMiazHtW"
    },
    {
      "id"："N3PZBUlN8vq"
    }
  ],
  "userGroups"：[
    {
      "id"："ZoHNWQajIoe"
    }
  ],
  "organisationUnits"：[
    {
      "id"："DiszpKrYNg8"
    }
  ],
  "附件"：[
    {
      "fTpI4GOmujz"、
      "h2ZsOxMFMfq"
  ]
}
```

回复消息时，可以将 id 作为请求传递
范围。

    curl -d“是的，死亡率数据集已报告”
      “https://play.dhis2.org/demo/api/26/messageConversations/ZjHHSjyyeJ2?attachments=fTpI4GOmujz,h2ZsOxMFMfq”
      -H“内容类型：文本/纯文本”-u 移动设备：地区-X POST -v

创建带有附件的消息后，附件文件
可以通过 GET 请求访问以下内容
    网址。

    https://play.dhis2.org/demo/api/26/messageConversations/<mcId>/<msgId>/attachments/<attachmentId>

其中 \<mcId\> 是 *messageConversation* ID，\<msgId\> 是
包含附件的 *message*，而 \<attachmentId\> 是
特定 *messageAttachment* 的 ID。

### 票证和验证结果通知 { #webapi_messaging_tickets } 

 <!--DHIS2-SECTION-ID:webapi_messaging_tickets-->

您可以使用“写反馈”工具来创建票证和消息。
票证和消息之间的唯一区别是您可以提供
票证的状态和优先级。为此，请使用这些
    应用程序编程接口

    发布 https://play.dhis2.org/demo/api/26/messageConversations/<uid>/status

    发布 https://play.dhis2.org/demo/api/26/messageConversations/<uid>/priority

在 2.29 中，验证分析生成的消息现在也用于
状态和优先级属性。默认情况下，消息由
验证分析将继承验证规则的优先级
问题，或者如果消息包含多个最重要的
规则。

在 2.30 中，可以将验证规则分配给任何用户，同时工单
仍然需要分配给系统反馈接收者中的一个用户
团体。

 <table>
 <caption> 有效状态和优先级值的列表 </caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 状态 </th>
 <th> 优先级 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 打开 </td>
 <td> 低 </td>
 </tr>
 <tr class="even">
 <td> 待定 </td>
 <td> 中等 </td>
 </tr>
 <tr class="odd">
 <td> 无效 </td>
 <td> 高 </td>
 </tr>
 <tr class="even">
 <td> 已解决 </td>
 <td> </td>
 </tr>
 </tbody>
 </table>

也可以给工单添加内部消息，只能看到
拥有“管理票证”权限的用户。创建一个内部
回复，包括“内部”参数，并将其设置为

    curl -d“这是内部消息”
      “https://play.dhis2.org/demo/api/26/messageConversations/ZjHHSjyyeJ2?internal=true”
      -H“内容类型：文本/纯文本”-u admin：区-X POST -v

## 释义 { #webapi_interpretations } 

 <!--DHIS2-SECTION-ID:webapi_interpretations-->

对于DHIS2中数据分析相关的资源，例如数据透视表，
图表、地图、事件报告和事件图表，您可以编写和分享
数据解释。解释可以是评论、问题、
关于数据报告或可视化的观察或解释。

    /api/30/解释

### 阅读口译 { #webapi_reading_interpretations } 

 <!--DHIS2-SECTION-ID:webapi_reading_interpretations-->

为了阅读解释，我们将与
*/api/30/interpretations* 资源。使用字段的典型 GET 请求
过滤可以如下所示：

    GET /api/30/interpretations?fields=*,comments[id,text,user,mentions]

JSON 响应格式的输出可能如下所示（附加
为简洁起见省略了字段）：

    {
        “解释”：[{
            "id": "XSHiFlHAhhh",
            “创建”：“2013-05-30T10：24：06.181 + 0000”，
            "text": "数据看起来可疑，可能是数据输入错误。",
            “类型”：“REPORT_TABLE”，
            “喜欢”：2，
            “用户”：{
              “id”：“uk7diLujYif”
            },
            “报告表”：{
              “id”：“LcSxnfeBxyi”
            }
        }, {
            “id”：“kr4AnZmYL43”，
            “创建”：“2013-05-29T14：47：13.081 + 0000”，
            "text": "博城的送货率看起来很高。",
            “类型”：“图表”，
            “喜欢”：3，
            “用户”：{
              “id”：“uk7diLujYif”
            },
            “图表”： {
              “id”：“HDEDqV3yv3H”
            },
            提到：[
            {
              “创建”：“2018-06-25T10：25：54.498”，
              “用户名”：“博阿滕”
            }
            ],
            “评论”： [{
                “id”：“iB4Etq8yTE6”，
                "text": "这份报告显示激增。",
                “用户”：{
                    “id”：“B4XIfwOcGyI”
                }, {
                “id”：“iB4Etq8yTE6”，
                "text": "可能是大雨造成的。",
                “用户”：{
                    “id”：“B4XIfwOcGyI”
                },
                {
                "id": "SIjkdENan8p",
                "text": "看看这个@boateng。",
                “用户”：{
                  “id”：“xE7jOejl9FI”
                },
                “提及”：[{
                  “创建”：“2018-06-25T10：03：52.316”，
                  “用户名”：“博阿滕”
                }]
                }
              }]
            }
        }]
    }

 <table>
 <caption>解释字段</caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 75%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>字段</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> id </td>
 <td>解释标识符。 </td>
 </tr>
 <tr class="even">
 <td>创建了</td>
 <td>创建解释的时间。 </td>
 </tr>
 <tr class="odd">
 <td>类型</td>
 <td>解释的分析对象的类型。有效选项：REPORT_TABLE，CHART，MAP，EVENT_REPORT，EVENT_CHART，DATASET_REPORT。 </td>
 </tr>
 <tr class="even">
 <td>用户</td>
 <td>与创建解释的用户的关联。 </td>
 </tr>
 <tr class="odd">
 <td>报告表</td>
 <td>如果类型为REPORT_TABLE，则与报表表关联。 </td>
 </tr>
 <tr class="even">
 <td>图表</td>
 <td>如果类型为CHART，则与图表关联。 </td>
 </tr>
 <tr class="odd">
 <td>地图</td>
 <td>如果类型为MAP，则与地图关联。 </td>
 </tr>
 <tr class="even">
 <td>事件报告</td>
 <td>与事件报告的关联类型为EVENT_REPORT。 </td>
 </tr>
 <tr class="odd">
 <td>事件图表</td>
 <td>如果类型为EVENT_CHART，则与事件图表关联。 </td>
 </tr>
 <tr class="even">
 <td>数据集</td>
 <td>如果类型为DATASET_REPORT，则与数据集关联。 </td>
 </tr>
 <tr class="odd">
 <td>评论</td>
 <td>解释的注释数组。文本字段包含实际注释。 </td>
 </tr>
 <tr class="even">
 <td>提到</td>
 <td>提及的解释数组。用户标识符列表。 </td>
 </tr>
 </tbody>
 </table>

对于所有分析对象，您可以将 */data* 附加到 URL 以检索
与资源关联的数据（相对于元数据）。作为
一个例子，通过跟随地图链接并附加 /data 可以
通过检索主题地图的 PNG（图像）表示
以下网址：

    https://play.dhis2.org/demo/api/30/maps/bhmHJ4ZCdCd/data

对于所有分析对象，您可以通过*提及*进行过滤。检索所有
您提到的用户的解释/评论
三个选项。您可以通过解释提及（提及
在解释中
    描述）：

    GET /api/30/interpretations?fields=*,comments[*]&filter=mentions.username:in:[boateng]

您可以通过解释评论提及（在任何
评论）：

    GET /api/30/interpretations?fields=*,comments[*]&filter=comments.mentions.username:in:[boateng]

或者您可以通过包含提及的解释进行过滤
在解释或任何评论中（或
    交界处）：

    GET /api/30/interpretations?fields=*,comments[*]&filter=mentions:in:[boateng]

### 写作解释 { #webapi_writing_interpretations } 

 <!--DHIS2-SECTION-ID:webapi_writing_interpretations-->

编写解释时，您将提供解释文本：
使用内容类型为“text/plain”的 POST 请求的请求正文。
URL 模式如下所示，其中 {object-type} 指的是
被解释的对象的类型，{object-id} 指的是
正在解释的对象的标识符。

    /api/26/interpretations/{对象类型}/{对象 ID}

对象类型的有效选项是 *reportTable*、*chart*、*map*、
*eventReport*、*eventChart* 和 *dataSetReport*。

下面列出了一些有效的解释示例。

    /api/26/interpretations/reportTable/yC86zJxU1i1
    /api/26/interpretations/chart/ZMuYVhtIceD
    /api/26/interpretations/map/FwLHSMCejFu
    /api/26/interpretations/eventReport/xJmPLGP3Cde
    /api/26/interpretations/eventChart/nEzXB2M9YBz
    /api/26/interpretations/dataSetReport/tL7eCjmDIgM

作为示例，我们将首先为图表编写解释
带有标识符 *EbRN2VIbPdV*。为了编写图表解释，我们将
与 */api/26/interpretations/chart/{chartId}* 资源交互。
解释将是请求正文。基于此我们可以把
使用 cURL 组合以下请求：

    curl -d“此图表显示 ANC 1-3 显着下降”-X POST
      “https://play.dhis2.org/demo/api/26/interpretations/chart/EbRN2VIbPdV”
      -H“内容类型：文本/纯文本”-u admin：地区

请注意，响应提供了一个带有值的 Location 标头
指示创建的解释的位置。这很有用
从客户的角度来看，当您想向
解释。

### 更新和删除解释 { #webapi_updating_removing_interpretations } 

 <!--DHIS2-SECTION-ID:webapi_updating_removing_interpretations-->

要更新现有解释，您可以使用 PUT 请求，其中
解释文本是使用以下 URL 模式的请求正文，
其中 {id} 指的是解释标识符：

    /api/26/interpretations/{id}

基于此，我们可以使用curl来更新解释：

    curl -d“此图表显示较高的丢失率”-X PUT
      “https://play.dhis2.org/demo/api/26/interpretations/chart/EV08iI1cJRA”
      -H“内容类型：文本/纯文本”-u admin：地区

您可以使用与上面相同的 URL 模式使用 DELETE 请求来
删除解释。

### 创建解释注释 { #webapi_creating_interpretation_comments } 

 <!--DHIS2-SECTION-ID:webapi_creating_interpretation_comments-->

在为解释撰写评论时，您将提供评论
text 作为使用内容类型的 POST 请求的请求正文
“文本/纯文本”。 URL 模式如下所示，其中
{interpretation-id} 指的是解释标识符。

    /api/26/interpretations/{interpretation-id}/comments

其次，我们将对我们在
上面的例子。通过查看解释响应，您将看到
返回 *Location* 标头。该标头告诉我们的 URL
新创建的解释，从中我们可以读到它的
标识符。该标识符是随机生成的，因此您必须
将以下命令中的命令替换为您自己的命令。写评论
我们可以与 */api/26/interpretations/{id}/comments"* 进行交互
像这样的资源：

    curl -d“需要干预”-X POST
      “https://play.dhis2.org/demo/api/26/interpretations/j8sjHLkK8uY/comments”
      -H“内容类型：文本/纯文本”-u admin：区-v

### 更新和删除解释注释 { #webapi_updating_removing_interpretation_comments } 

 <!--DHIS2-SECTION-ID:webapi_updating_removing_interpretation_comments-->

要更新解释注释，您可以使用 PUT 请求，其中
评论文本是使用以下 URL 模式的请求正文：

    /api/26/interpretations/{interpretation-id}/comments/{comment-id}

基于此，我们可以使用curl来更新注释：

    卷曲-d“我同意这一点。” -X 放置
      https://play.dhis2.org/demo/api/26/interpretations/j8sjHLkK8uY/comments/idAzzhVWvh2”
      -H“内容类型：文本/纯文本”-u admin：区-v

您可以使用与上面相同的 URL 模式，使用 DELETE 请求到
删除解释注释。

### 喜欢的解释 { #webapi_liking_interpretations } 

 <!--DHIS2-SECTION-ID:webapi_liking_interpretations-->

要喜欢一个解释，你可以使用一个空的 POST 请求到
*喜欢*资源：

    POST /api/26/interpretations/{id}/like

将为当前经过身份验证的用户添加一个赞。一个用户可以
只喜欢解释一次。

要删除解释的赞，您可以使用 DELETE 请求
与类似操作相同的资源。

可以通过查看解释的类似状态来查看
常规 Web API 表示：

    GET /api/26/interpretations/{id}

在 *likes* 字段中可以找到喜欢的信息，它代表
喜欢的数量，以及 *likedBy* 数组，它枚举了喜欢的用户
喜欢这个解释。

    {
        "id": "XSHiFlHAhhh",
        "text": "数据看起来可疑，可能是数据输入错误。",
        “类型”：“REPORT_TABLE”，
        “喜欢”：2，
        “喜欢的人”：[{
            “id”：“k7Hg12fJ2f1”
        }, {
            “id：”gYhf26fFkjFS”
        }]
    }

## 查看分析性资源表示 { #webapi_viewing_analytical_resource_representations } 

 <!--DHIS2-SECTION-ID:webapi_viewing_analytical_resource_representations-->

DHIS2 有多种数据分析资源。这些资源包括
*图表*、*地图*、*报告表*、*报告*和*文档*。通过访问
通过这些资源您将检索有关该资源的信息。为了
例如，通过导航到 *api/charts/R0DVGvXDUNP* 响应将
包含图表的名称、最后修改日期等。到
检索分析表示，例如 PNG
图表的表示形式，您可以将 */data* 附加到所有这些
资源。例如，通过访问 *api/charts/R0DVGvXDUNP/data*
系统将返回图表的 PNG 图像。

<table>
<caption>分析资源</caption>
<colgroup>
<col style="width: 17%" />
<col style="width: 17%" />
<col style="width: 32%" />
<col style="width: 32%" />
</colgroup>
<thead>
<tr class="header">
<th>资源</th>
<th>说明</th>
<th>数据网址</th>
<th>资源表示</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>图表</td>
<td>图表</td>
<td>api/charts/&lt;标识符&gt;/data</td>
<td>png</td>
</tr>
<tr class="even">
<td>事件图表</td>
<td>事件图表</td>
<td>api/eventCharts/&lt;标识符&gt;/data</td>
<td>png</td>
</tr>
<tr class="odd">
<td>地图</td>
<td>地图</td>
<td>api/maps/&lt;标识符&gt;/data</td>
<td>png</td>
</tr>
<tr class="even">
<td>报表</td>
<td>数据透视表</td>
<td>api/reportTables/&lt;标识符&gt;/data</td>
<td>json | jsonp | html | xml| pdf | .xls | csv</td>
</tr>
<tr class="odd">
<td>报告</td>
<td>标准报告</td>
<td>api/reports/&lt;标识符&gt;/data</td>
<td>pdf | .xls | html</td>
</tr>
<tr class="even">
<td>文档</td>
<td>资源</td>
<td>api/documents/&lt;标识符&gt;/data</td>
<td>&lt;遵循文档&gt;</td> 
</tr>
</tbody>
</table>

解析表示的数据内容可以通过以下方式修改
提供 *date* 查询参数。这就要求分析
为期间维度的相对期间设置资源。

 <table>
 <caption>数据查询参数</caption>
 <colgroup>
 <col style="width: 21%" />
 <col style="width: 28%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>值</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>日期</td>
 <td> yyyy-MM-dd格式的日期</td>
 <td>报告中相对期间的依据（需要相对期间）</td>
 </tr>
 </tbody>
 </table>

 <table>
 <caption> png /图像类型（图表，地图）的查询参数</caption>
 <colgroup>
 <col style="width: 21%" />
 <col style="width: 78%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>宽度</td>
 <td>图像的宽度（以像素为单位）</td>
 </tr>
 <tr class="even">
 <td>高度</td>
 <td>以像素为单位的图像高度</td>
 </tr>
 </tbody>
 </table>

用于检索各种分析的有效 URL 的一些示例
代表如下。

    /api/26/charts/R0DVGvXDUNP/数据
    /api/26/charts/R0DVGvXDUNP/data?date=2013-06-01

    /api/26/reportTables/jIISuEWxmoI/data.html
    /api/26/reportTables/jIISuEWxmoI/data.html?date=2013-01-01
    /api/26/reportTables/FPmvWs7bn2P/data.xls
    /api/26/reportTables/FPmvWs7bn2P/data.pdf

    /api/26/maps/DHE98Gsynpr/数据
    /api/26/maps/DHE98Gsynpr/data?date=2013-07-01

    /api/26/reports/OeJsA6K1Otx/data.pdf
    /api/26/reports/OeJsA6K1Otx/data.pdf?date=2014-01-01

## 外挂程式 { #webapi_plugins } 

 <!--DHIS2-SECTION-ID:webapi_plugins-->

DHIS2 带有插件，使您能够将实时数据直接嵌入到
您的门户网站或网站。目前，存在图表、地图插件
和数据透视表。

请注意，**本节中的所有代码示例均适用于
仅用于演示目的**。它们不应该按原样使用
生产系统。为了简单起见，凭证
（管理员/区）已嵌入到脚本中。在真实场景中
你不应该在 javascript 中公开凭据，因为它会打开一个
应用程序的漏洞。此外，您还需要创建一个用户
具有更小的权限而不是使用超级用户
为您的门户获取资源。

可以通过使用反向来解决公开凭据
nginx 或 apache2 等代理。代理可以配置为注入
仅您希望的端点所需的授权标头
公开。有一些文档可以帮助您入门
实施者手册中描述 [反向
代理](https://docs.dhis2.org/master/en/implementer/html/install_reverse_proxy_configuration.html#install_making_resources_available_with_nginx)
配置。

### 使用数据透视表插件嵌入数据透视表 { #webapi_pivot_table_plugin } 

 <!--DHIS2-SECTION-ID:webapi_pivot_table_plugin-->

在这个例子中，我们将看到如何嵌入美观、轻量的
html 数据透视表，其中数据从 DHIS2 后端提供到 Web
页。为了实现这一点，我们将使用数据透视表插件。这
该插件是用 Javascript 编写的，仅依赖于 jQuery 库。
完整的工作示例可以在以下位置找到
<http://play.dhis2.org/portal/table.html>。在网页中打开页面
浏览器并查看源代码以了解它是如何设置的。

我们首先看看完整的 html 文件会是什么样子
喜欢。此设置在我们的网页中放置了两个表。第一个是
引用现有表。第二个是内联配置的。

    <!DOCTYPE html>
    <html>
    <head>
      <script src="https://dhis2-cdn.org/v227/plugin/jquery-2.2.4.min.js"></script>
      <script src="https://dhis2-cdn.org/v227/plugin/reporttable.js"></script>

      <script>
        reportTablePlugin.url = "https://play.dhis2.org/demo";
        reportTablePlugin.username = "admin";
        reportTablePlugin.password = "地区";
        reportTablePlugin.loadingIndicator = true;

        // 通过id参数引用已有的表，渲染到“report1”div

        var r1 = { el: "report1", id: "R0DVGvXDUNP" };

        // 表配置，渲染到“report2”div

        变量 r2 = {
          el: "报告2",
          列： [
            {维度：“dx”，项目：[{id：“YtbsuPPo010”}，{id：“l6byfWFUGaP”}]}
          ],
          行：[
            {维度：“pe”，项目：[{id：“LAST_12_MONTHS”}]}
          ],
          过滤器：[
            {维度：“ou”，项目：[{id：“USER_ORGUNIT”}]}
          ],

          // 以下所有属性都是可选的
          title: "我的自定义标题",
          showColTotals：假，
          显示行总计：假，
          showColSubTotals：假，
          showRowSubTotals：假，
          显示维度标签：假，
          隐藏空行：true，
          跳过舍入：真，
          聚合类型：“平均”，
          显示层次结构：正确，
          仅完成：真实，
          显示密度：“舒适”，
          字体大小：“小”，
          数字组分隔符：“逗号”，
          legendSet: {id: "fqs276KXCXi"}
        };

        reportTablePlugin.load([r1, r2]);
      </script>
    </head>

    <body>
      <div id="report1"></div>
      <div id="report2"></div>
    </body>
    </html>

HTML 文档的标题部分包含两个文件。这
第一个文件是 jQuery JavaScript 库（我们使用 DHIS2 内容
在这种情况下，交付网络）。第二个文件是数据透视表
插入。确保路径指向您的 DHIS2 服务器
安装。

现在让我们看看数据透视表的各种选项。一
属性是必需的：*el*（请参考下表）。现在，如果
你想参考已经在 DHIS2 中制作的预定义表格
足以提供额外的 *id* 参数。如果你想要
要动态配置数据透视表，您应该省略 id 参数
并在 *columns* 数组、*rows* 数组和
可选的 *filters* 数组代替。

数据维度被定义为具有称为文本属性的对象
*尺寸*。此属性接受以下值：*dx*
（指标、数据元素、数据元素操作数、数据集、事件数据
项目和计划指示符）、*pe*（句点）、*ou*（组织单位）或
任何组织单元组集或数据元素组集的 id（可以
可以在 web api 中找到）。数据维度也有一个数组属性
称为 *items*，它接受具有 *id* 属性的对象。

总而言之，如果你想拥有例如“ANC 1 覆盖范围”、“ANC 2 覆盖范围”
和表格列上的“ANC 3 Coverage”，您可以
以下*列*配置：

    列： [{
      尺寸：“dx”，
      项目： [
        {id: "Uvn6LCg7dVU"}, // ANC 1 覆盖范围的 id
        {id: "OdiHJayrsKo"}, // ANC 2 覆盖范围的 id
        {id: "sB79w2hiLp8"} // ANC 3 覆盖范围的 id
      ]
    }]

 <table>
 <caption> 数据透视表插件配置 </caption>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> </th>型
 <th> 需要 </th>
 <th> 选项（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 网址 </td>
 <td> 字符串 </td>
 <td> 是 </td>
 <td> </td>
 <td> DHIS2 服务器的基本 URL </td>
 </tr>
 <tr class="even">
 <td> 用户名 </td>
 <td> 字符串 </td>
 <td> 是（如果跨域） </td>
 <td> </td>
 <td> 如果服务器在不同的域上运行，则用于身份验证 </td>
 </tr>
 <tr class="odd">
 <td> 密码 </td>
 <td> 字符串 </td>
 <td> 是（如果跨域） </td>
 <td> </td>
 <td> 如果服务器在不同的域上运行，则用于身份验证 </td>
 </tr>
 <tr class="even">
 <td> loadingIndicator </td>
 <td> 布尔值 </td>
 <td> 否 </td>
 <td> </td>
 <td> 是否在表格出现前显示加载指示器 </td>
 </tr>
 </tbody>
 </table>

<table>
<caption>Pivot table configuration</caption>
<thead>
<tr class="header">
<th>Param</th>
<th>Type</th>
<th>Required</th>
<th>Options (default first)</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>el</td>
<td>string</td>
<td>Yes</td>
<td></td>
<td>Identifier of the HTML element to render the table in your web page</td>
</tr>
<tr class="even">
<td>id</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Identifier of a pre-defined table (favorite) in DHIS2</td>
</tr>
<tr class="odd">
<td>columns</td>
<td>array</td>
<td>Yes (if no id provided)</td>
<td></td>
<td>Data dimensions to include in table as columns</td>
</tr>
<tr class="even">
<td>rows</td>
<td>array</td>
<td>Yes (if no id provided)</td>
<td></td>
<td>Data dimensions to include in table as rows</td>
</tr>
<tr class="odd">
<td>filter</td>
<td>array</td>
<td>No</td>
<td></td>
<td>Data dimensions to include in table as filters</td>
</tr>
<tr class="even">
<td>title</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Show a custom title above the table</td>
</tr>
<tr class="odd">
<td>showColTotals</td>
<td>boolean</td>
<td>No</td>
<td>true | false</td>
<td>Whether to display totals for columns</td>
</tr>
<tr class="even">
<td>showRowTotals</td>
<td>boolean</td>
<td>No</td>
<td>true | false</td>
<td>Whether to display totals for rows</td>
</tr>
<tr class="odd">
<td>showColSubTotals</td>
<td>boolean</td>
<td>No</td>
<td>true | false</td>
<td>Whether to display sub-totals for columns</td>
</tr>
<tr class="even">
<td>showRowSubTotals</td>
<td>boolean</td>
<td>No</td>
<td>true | false</td>
<td>Whether to display sub-totals for rows</td>
</tr>
<tr class="odd">
<td>showDimensionLabels</td>
<td>boolean</td>
<td>No</td>
<td>true | false</td>
<td>Whether to display the name of the dimension top-left in the table</td>
</tr>
<tr class="even">
<td>hideEmptyRows</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to hide rows with no data</td>
</tr>
<tr class="odd">
<td>skipRounding</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to skip rounding of data values</td>
</tr>
<tr class="even">
<td>completedOnly</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to only show completed events</td>
</tr>
<tr class="odd">
<td>showHierarchy</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to extend orgunit names with the name of all anchestors</td>
</tr>
<tr class="even">
<td>aggregationType</td>
<td>string</td>
<td>No</td>
<td>&quot;SUM&quot; |&quot;AVERAGE&quot; | &quot;AVERAGE_SUM_ORG_UNIT&quot;|&quot;LAST&quot;|&quot;LAST_AVERAGE_ORG_UNIT&quot;| &quot;COUNT&quot; | &quot;STDDEV&quot; | &quot;VARIANCE&quot; | &quot;MIN&quot; | &quot;MAX&quot;</td>
<td>Override the data element's default aggregation type</td>
</tr>
<tr class="odd">
<td>displayDensity</td>
<td>string</td>
<td>No</td>
<td>&quot;NORMAL&quot; | &quot;COMFORTABLE&quot; | &quot;COMPACT&quot;</td>
<td>The amount of space inside table cells</td>
</tr>
<tr class="even">
<td>fontSize</td>
<td>string</td>
<td>No</td>
<td>&quot;NORMAL&quot; | &quot;LARGE&quot; | &quot;SMALL&quot;</td>
<td>Table font size</td>
</tr>
<tr class="odd">
<td>digitGroupSeparator</td>
<td>string</td>
<td>No</td>
<td>&quot;SPACE&quot; | &quot;COMMA&quot; | &quot;NONE&quot;</td>
<td>How values are formatted: 1 000 | 1,000 | 1000</td>
</tr>
<tr class="even">
<td>legendSet</td>
<td>object</td>
<td>No</td>
<td></td>
<td>Color the values in the table according to the legend set</td>
</tr>
<tr class="odd">
<td>userOrgUnit</td>
<td>string / array</td>
<td>No</td>
<td></td>
<td>Organisation unit identifiers, overrides organisation units associated with curretn user, single or array</td>
</tr>
<tr class="even">
<td>relativePeriodDate</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Date identifier e.g: &quot;2016-01-01&quot;. Overrides the start date of the relative period</td>
</tr>
</tbody>
</table>

### 使用Visualizer图表插件嵌入图表 { #webapi_chart_plugin } 

 <!--DHIS2-SECTION-ID:webapi_chart_plugin-->

在此示例中，我们将了解如何嵌入美观的 Highcharts
包含 DHIS2 提供的数据的图表 (<http://www.highcharts.com>)
后端到网页中。为了实现这一点，我们将使用 DHIS2
可视化插件。该插件是用 JavaScript 编写的，依赖于
jQuery 库。完整的工作示例可以在以下位置找到
<http://play.dhis2.org/portal/chart.html>。在网页中打开页面
浏览器并查看源代码以了解它是如何设置的。

我们首先看一下完整的 html 文件是什么样的
喜欢。此设置在我们的网页中放置了两个图表。第一个是
参考现有图表。第二个是内联配置的。

    <!DOCTYPE html>
    <html>
    <head>
      <script src="https://dhis2-cdn.org/v227/plugin/jquery-2.2.4.min.js"></script>
      <script src="https://dhis2-cdn.org/v227/plugin/chart.js"></script>

      <script>
        ChartPlugin.url = "https://play.dhis2.org/demo";
        ChartPlugin.用户名 = "管理员";
        ChartPlugin.password = "地区";
        ChartPlugin.loadingIndicator = true;

        // 通过id参数引用现有图表，渲染到“report1”div

        var r1 = { el: "report1", id: "R0DVGvXDUNP" };

        // 图表配置，渲染到“report2”div

        变量 r2 = {
          el: "报告2",
          列： [
            {维度：“dx”，项目：[{id：“YtbsuPPo010”}，{id：“l6byfWFUGaP”}]}
          ],
          行：[
            {维度：“pe”，项目：[{id：“LAST_12_MONTHS”}]}
          ],
          过滤器：[
            {维度：“ou”，项目：[{id：“USER_ORGUNIT”}]}
          ],

          // 以下所有属性都是可选的
          title: "自定义标题",
          类型：“线”，
          显示值：假，
          隐藏空行：true，
          回归类型：“线性”，
          仅完成：真实，
          目标线值：100，
          targetLineTitle: "我的目标行标题",
          基线值：20，
          baseLineTitle: "我的基线标题",
          聚合类型：“平均”，
          范围轴最大值：100，
          范围轴最小值：20，
          范围轴步数：5，
          范围轴小数：2，
          rangeAxisTitle: "我的范围轴标题",
          domainAxisTitle: "我的域轴标题",
          隐藏图例：true
        };

        // 渲染图表

        ChartPlugin.load(r1, r2);
      </script>
    </head>

    <body>
      <div id="report1"></div>
      <div id="report2"></div>
    </body>
    </html>

HTML 文档的标题部分包含两个文件。这
第一个文件是 jQuery JavaScript 库（我们使用 DHIS2 内容
在这种情况下，交付网络）。第二个文件是 Visualizer 图表
插入。确保路径指向您的 DHIS2 服务器
安装。

现在让我们看看图表的各种选项。一
属性是必需的：*el*（请参考下表）。现在，如果
您想参考 DHIS2 中已经制作的预定义图表
足以提供额外的 *id* 参数。如果你想要
要动态配置图表，您应该省略 id 参数和
在 *columns* 数组、*rows* 数组和
可选的 *filters* 数组代替。

数据维度被定义为具有称为文本属性的对象
*尺寸*。此属性接受以下值：*dx*
（指标、数据元素、数据元素操作数、数据集、事件数据
项目和计划指示符）、*pe*（句点）、*ou*（组织单位）或
任何组织单元组集或数据元素组集的 id（可以
可以在 web api 中找到）。数据维度也有一个数组属性
称为 *items*，它接受具有 *id* 属性的对象。

总而言之，如果你想拥有例如“ANC 1 覆盖范围”、“ANC 2 覆盖范围”
和图表列上的“ANC 3 Coverage”，您可以
以下*列*配置：

    列： [{
      尺寸：“dx”，
      项目： [
        {id: "Uvn6LCg7dVU"}, // ANC 1 覆盖范围的 id
        {id: "OdiHJayrsKo"}, // ANC 2 覆盖范围的 id
        {id: "sB79w2hiLp8"} // ANC 3 覆盖范围的 id
      ]
    }]

 <table>
 <caption> 图表插件配置 </caption>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> </th>型
 <th> 需要 </th>
 <th> 选项（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 网址 </td>
 <td> 字符串 </td>
 <td> 是 </td>
 <td> </td>
 <td> DHIS2 服务器的基本 URL </td>
 </tr>
 <tr class="even">
 <td> 用户名 </td>
 <td> 字符串 </td>
 <td> 是（如果跨域） </td>
 <td> </td>
 <td> 如果服务器在不同的域上运行，则用于身份验证 </td>
 </tr>
 <tr class="odd">
 <td> 密码 </td>
 <td> 字符串 </td>
 <td> 是（如果跨域） </td>
 <td> </td>
 <td> 如果服务器在不同的域上运行，则用于身份验证 </td>
 </tr>
 <tr class="even">
 <td> loadingIndicator </td>
 <td> 布尔值 </td>
 <td> 否 </td>
 <td> </td>
 <td> 是否在图表出现前显示加载指标 </td>
 </tr>
 </tbody>
 </table>

<table>
<caption>Chart configuration</caption>
<thead>
<tr class="header">
<th>Param</th>
<th>Type</th>
<th>Required</th>
<th>Options (default first)</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>el</td>
<td>string</td>
<td>Yes</td>
<td></td>
<td>Identifier of the HTML element to render the chart in your web page</td>
</tr>
<tr class="even">
<td>id</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Identifier of a pre-defined chart (favorite) in DHIS</td>
</tr>
<tr class="odd">
<td>type</td>
<td>string</td>
<td>No</td>
<td>column | stackedcolumn | bar | stackedbar | line | area | pie | radar | gauge</td>
<td>Chart type</td>
</tr>
<tr class="even">
<td>columns</td>
<td>array</td>
<td>Yes (if no id provided)</td>
<td></td>
<td>Data dimensions to include in chart as series</td>
</tr>
<tr class="odd">
<td>rows</td>
<td>array</td>
<td>Yes (if no id provided)</td>
<td></td>
<td>Data dimensions to include in chart as category</td>
</tr>
<tr class="even">
<td>filter</td>
<td>array</td>
<td>No</td>
<td></td>
<td>Data dimensions to include in chart as filters</td>
</tr>
<tr class="odd">
<td>title</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Show a custom title above the chart</td>
</tr>
<tr class="even">
<td>showValues</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to display data values on the chart</td>
</tr>
<tr class="odd">
<td>hideEmptyRows</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to hide empty categories</td>
</tr>
<tr class="even">
<td>completedOnly</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to only show completed events</td>
</tr>
<tr class="odd">
<td>regressionType</td>
<td>string</td>
<td>No</td>
<td>&quot;NONE&quot; | &quot;LINEAR&quot;</td>
<td>Show trend lines</td>
</tr>
<tr class="even">
<td>targetLineValue</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Display a target line with this value</td>
</tr>
<tr class="odd">
<td>targetLineTitle</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Display a title on the target line (does not apply without a target line value)</td>
</tr>
<tr class="even">
<td>baseLineValue</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Display a base line with this value</td>
</tr>
<tr class="odd">
<td>baseLineTitle</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Display a title on the base line (does not apply without a base line value)</td>
</tr>
<tr class="even">
<td>rangeAxisTitle</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Title to be displayed along the range axis</td>
</tr>
<tr class="odd">
<td>rangeAxisMaxValue</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Max value for the range axis to display</td>
</tr>
<tr class="even">
<td>rangeAxisMinValue</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Min value for the range axis to display</td>
</tr>
<tr class="odd">
<td>rangeAxisSteps</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Number of steps for the range axis to display</td>
</tr>
<tr class="even">
<td>rangeAxisDecimals</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Bumber of decimals for the range axis to display</td>
</tr>
<tr class="odd">
<td>domainAxisTitle</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Title to be displayed along the domain axis</td>
</tr>
<tr class="even">
<td>aggregationType</td>
<td>string</td>
<td>No</td>
<td>&quot;SUM&quot; |&quot;AVERAGE&quot; | &quot;AVERAGE_SUM_ORG_UNIT&quot;|&quot;LAST&quot;|&quot;LAST_AVERAGE_ORG_UNIT&quot;| &quot;COUNT&quot; | &quot;STDDEV&quot; | &quot;VARIANCE&quot; | &quot;MIN&quot; | &quot;MAX&quot;</td>
<td>Override the data element's default aggregation type</td>
</tr>
<tr class="odd">
<td>hideLegend</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to hide the series legend</td>
</tr>
<tr class="even">
<td>hideTitle</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to hide the chart title</td>
</tr>
<tr class="odd">
<td>userOrgUnit</td>
<td>string / array</td>
<td>No</td>
<td></td>
<td>Organisation unit identifiers, overrides organisation units associated with curretn user, single or array</td>
</tr>
<tr class="even">
<td>relativePeriodDate</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Date identifier e.g: &quot;2016-01-01&quot;. Overrides the start date of the relative period</td>
</tr>
</tbody>
</table>

### 使用GIS地图插件嵌入地图 { #webapi_map_plugin } 

 <!--DHIS2-SECTION-ID:webapi_map_plugin-->

在这个例子中，我们将看到如何将地图与来自
DHIS2 后端转换成网页。为此，我们将使用 GIS
地图插件。插件是用 JavaScript 编写的，依赖于 Ext
仅限 JS 库。可以在以下位置找到完整的工作示例
 <http://play.dhis2.org/portal/map.html> 。在网络浏览器中打开页面
并查看源代码以了解它是如何设置的。

我们首先看一下完整的 html 文件是什么样的
喜欢。此设置在我们的网页中放置了两张地图。第一个是
参考现有地图。第二个是内联配置的。

    <!DOCTYPE html>
    <html>
    <head>
      <link rel="stylesheet" type="text/css" href="http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css" />
      <script src="http://dhis2-cdn.org/v215/ext/ext-all.js"></script>
      <script src="https://maps.google.com/maps/api/js?sensor=false"></script>
      <script src="http://dhis2-cdn.org/v215/openlayers/OpenLayers.js"></script>
      <script src="http://dhis2-cdn.org/v215/plugin/map.js"></script>

      <script>
        var base = "https://play.dhis2.org/demo";

        // 登录 - 如果正常，调用 setLinks 函数

        Ext.onReady( 函数() {
          Ext.Ajax.请求({
            url: 基础 + "dhis-web-commons-security/login.action",
            方法：“POST”，
            params: { j_username: "portal", j_password: "Portal123" },
            成功：设置链接
          });
        });

        函数 setLinks() {
          DHIS.getMap({ url: base, el: "map1", id: "ytkZY3ChM6J" });

          DHIS.getMap({
            网址： 基地，
            el: "地图2",
            地图视图：[{
              columns: [{dimension: "in", items: [{id: "Uvn6LCg7dVU"}]}], // 数据
              rows: [{dimension: "ou", items: [{id: "LEVEL-3"}, {id: "ImspTQPwCqd"}]}], // 组织单位,
              过滤器：[{dimension：“pe”，项目：[{id：“LAST_3_MONTHS”}]}]，//周期
              // 以下所有选项都是可选的
              班级: 7,
              颜色低：“02079c”，
              颜色高：“e5ecff”，
              不透明度：0.9，
              legendSet: {id: "fqs276KXCXi"}
            }]
          });
        }
      </script>
    </head>

    <body>
      <div id="map1"></div>
      <div id="map2"></div>
    </body>
    </html>

四个文件和谷歌地图包含在标题部分
HTML 文档。前两个文件是 Ext JS JavaScript 库（我们
在这种情况下使用 DHIS2 内容交付网络）及其样式表。
第三个文件是 OpenLayers JavaScript 映射框架
( <http://openlayers.org> ) 最后我们包含了 GIS 地图插件。
确保路径指向您的 DHIS2 服务器
    安装。

     <link rel="stylesheet" type="text/css" href="http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css" />
     <script src="http://dhis2-cdn.org/v215/ext/ext-all.js"> </script>
     <script src="https://maps.google.com/maps/api/js?sensor=false"> </script>
     <script src="http://dhis2-cdn.org/v215/openlayers/OpenLayers.js"> </script>
     <script src="http://dhis2-cdn.org/v215/plugin/map.js"> </script>

为了向 DHIS2 服务器进行身份验证，我们使用与
上一节。在 HTML 文档的标题中，我们包含
在脚本元素中跟随 Javascript。 *setLinks* 方法将
稍后实施。确保 *base* 变量指向您的
DHIS2 安装。

    Ext.onReady（function（）{
      Ext.Ajax.request（{
        网址：基本+“ dhis-web-commons-security / login.action”，
        方法：“ POST”，
        参数：{j_username：“门户”，j_password：“ Portal123”}，
        成功：setLinks
      }）;
    }）;

现在让我们看看 GIS 插件的各种选项。二
属性是必需的：*el* 和 *url*（请参考表格
以下）。现在，如果您想参考已经在
在 DHIS2 GIS 中，提供额外的 *id* 参数就足够了。
如果您想动态配置地图，则应省略 id
参数并提供 *mapViews*（图层）。他们应该是
在 *columns* 数组、*rows* 数组中配置数据维度
和可选的 *filters* 数组代替。

数据维度被定义为具有称为文本属性的对象
*尺寸*。此属性接受以下值：*in*
（指标）、*de*（数据元素）、*ds*（数据集）、*dc*（数据元素）
操作数）、*pe*（句点）、*ou*（组织单位）或任何
组织单元组集或数据元素组集（可以在
网络 API）。数据维度还有一个名为的数组属性
*items* 接受具有 *id* 属性的对象。

总而言之，如果你想有一个层，例如“ANC 1 覆盖范围”在
您的地图可以进行以下*列*配置：

    列： [{
      Dimension: "in", // 可以是 "in"、"de"、"ds"、"dc"、"pe"、"ou" 或任何维度 id
      items: [{id: "Uvn6LCg7dVU"}], // ANC 1 覆盖范围的 id
    }]

 <table>
 <caption> GIS地图插件配置</caption>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> </th>型
 <th> 需要 </th>
 <th> 选项（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> el </td>
 <td> 字符串 </td>
 <td> 是 </td>
 <td> </td>
 <td> 用于在网页中呈现地图的 HTML 元素的标识符 </td>
 </tr>
 <tr class="even">
 <td> 网址 </td>
 <td> 字符串 </td>
 <td> 是 </td>
 <td> </td>
 <td> DHIS2 服务器的基本 URL </td>
 </tr>
 <tr class="odd">
 <td> ID </td>
 <td> 字符串 </td>
 <td> 否 </td>
 <td> </td>
 <td> DHIS 中预定义地图（收藏夹）的标识符 </td>
 </tr>
 <tr class="even">
 <td> baseLayer </td>
 <td> 字符串/布尔值 </td>
 <td> 否 </td>
 <td> 'gs', 'googlestreets' | 'gh', 'googlehybrid' | 'osm', 'openstreetmap' |假，空，“无”，“关”</td>
 <td> 显示背景图 </td>
 </tr>
 <tr class="odd">
 <td> hideLegend </td>
 <td> 布尔值 </td>
 <td> 否 </td>
 <td> 假 |真 </td>
 <td> 隐藏图例面板 </td>
 </tr>
 <tr class="even">
 <td> 地图视图 </td>
 <td> 阵列 </td>
 <td> 是（如果未提供 ID） </td>
 <td> </td>
 <td> 层数组 </td>
 </tr>
 </tbody>
 </table>

如果未提供 id，则必须添加具有以下内容的地图视图对象
配置选项：

 <table>
 <caption> 地图插件配置 </caption>
 <tbody>
 <tr class="odd">
 <td> 层 </td>
 <td> 字符串 </td>
 <td> 否 </td>
 <td> &quot;thematic1&quot; | &quot;thematic2&quot; | &quot;thematic3&quot; | &quot;thematic4&quot; | &quot;boundary&quot; | &quot;facility&quot; | </td>
 <td> 应添加地图视图内容的图层 </td>
 </tr>
 <tr class="even">
 <td> 列 </td>
 <td> 阵列 </td>
 <td> 是 </td>
 <td> </td>
 <td> 指标、数据元素、数据操作数或数据集（仅使用一个） </td>
 </tr>
 <tr class="odd">
 <td> 行 </td>
 <td> 阵列 </td>
 <td> 是 </td>
 <td> </td>
 <td> 组织单位（允许多个） </td>
 </tr>
 <tr class="even">
 <td> 过滤器 </td>
 <td> 阵列 </td>
 <td> 是 </td>
 <td> </td>
 <td> 句号（只用一个） </td>
 </tr>
 <tr class="odd">
 <td> 类 </td>
 <td> 整数 </td>
 <td> 否 </td>
 <td> 5 | 1-7 </td>
 <td> 自动图例类的数量 </td>
 </tr>
 <tr class="even">
 <td> 方法 </td>
 <td> 整数 </td>
 <td> 否 </td>
 <td> 2 | 3 </td>
 <td> 图例计算方法，其中 2 = 等间隔和 3 = 等计数 </td>
 </tr>
 <tr class="odd">
 <td> 颜色低 </td>
 <td> 字符串 </td>
 <td> 否 </td>
 <td> &quot;ff0000&quot;（红色）|任何十六进制颜色 </td>
 <td> 代表第一个自动图例类的颜色 </td>
 </tr>
 <tr class="even">
 <td> 颜色高 </td>
 <td> 字符串 </td>
 <td> 否 </td>
 <td> &quot;00ff00&quot;（绿色） |任何十六进制颜色 </td>
 <td> 代表最后一个自动图例类的颜色 </td>
 </tr>
 <tr class="odd">
 <td> 半径低 </td>
 <td> 整数 </td>
 <td> 否 </td>
 <td> 5 |任何整数 </td>
 <td> 仅适用于设施点（点） - 具有最小值的点的半径 </td>
 </tr>
 <tr class="even">
 <td> 半径高 </td>
 <td> 整数 </td>
 <td> 否 </td>
 <td> 15 |任何整数 </td>
 <td> 仅适用于设施点（点） - 具有最大值的点的半径 </td>
 </tr>
 <tr class="odd">
 <td> 不透明度 </td>
 <td> 双 </td>
 <td> 否 </td>
 <td> 0.8 | 0 - 1 </td>
 <td> 图层内容的不透明度/透明度 </td>
 </tr>
 <tr class="even">
 <td> legendSet </td>
 <td> 对象 </td>
 <td> 否 </td>
 <td> </td>
 <td> 预定义的图例集。将覆盖自动图例集。 </td>
 </tr>
 <tr class="odd">
 <td> 标签 </td>
 <td> 布尔值/对象 </td>
 <td> 否 </td>
 <td> 假 |真实|对象属性：fontSize（整数）、color（十六进制字符串）、strong（布尔值）、斜体（布尔值）</td>
 <td> 在地图上显示标签 </td>
 </tr>
 <tr class="even">
 <td> 宽度 </td>
 <td> 整数 </td>
 <td> 否 </td>
 <td> </td>
 <td> 地图宽度 </td>
 </tr>
 <tr class="odd">
 <td> 高度 </td>
 <td> 整数 </td>
 <td> 否 </td>
 <td> </td>
 <td> 地图高度 </td>
 </tr>
 <tr class="even">
 <td> userOrgUnit </td>
 <td> 字符串/数组 </td>
 <td> 否 </td>
 <td> </td>
 <td> 组织单位标识符，覆盖与当前用户、单个或阵列关联的组织单位 </td>
 </tr>
 </tbody>
 </table>

我们继续添加一张预定义的地图和一张动态配置的地图
到我们的 HTML 文档。您可以使用以下方式浏览可用地图列表
Web API 位于：<http://play.dhis2.org/demo/api/24/maps>。

    函数 setLinks() {
      DHIS.getMap({ url: base, el: "map1", id: "ytkZY3ChM6J" });

      DHIS.getMap({
     网址： 基地，
     el: "地图2",
     地图视图：[
       columns: [ // 图表系列
      columns: [{dimension: "in", items: [{id: "Uvn6LCg7dVU"}]}], // 数据
       ],
       rows: [ // 图表类别
      rows: [{dimension: "ou", items: [{id: "LEVEL-3"}, {id: "ImspTQPwCqd"}]}], // 组织单位
       ],
       过滤器：[
      过滤器：[{dimension：“pe”，项目：[{id：“LAST_3_MONTHS”}]}]，//周期
       ],
       // 以下所有选项都是可选的
       班级: 7,
       颜色低：“02079c”，
       颜色高：“e5ecff”，
       不透明度：0.9，
       legendSet: {id: "fqs276KXCXi"}
     ]
      });
    }

最后我们在 HTML 的 body 部分包含一些 *div* 元素
带有插件 JavaScript 中引用的标识符的文档。

    <div id="map1"></div>
    <div id="map2"></div>

要查看完整的工作示例，请访问
 <http://play.dhis2.org/portal/map.html> 。

### 使用轮播插件{ #webapi_carousel_plugin }创建图表轮播 { #webapi_carousel_plugin } 

 <!--DHIS2-SECTION-ID:webapi_carousel_plugin-->

图表插件还可以创建图表轮播
例如，它可以用来在网站上创建吸引人的首页
网络门户。要使用轮播，我们需要在
HTML的头部
    页：

    <link rel="stylesheet" type="text/css" href="http://dhis2-cdn.org/v213/ext/resources/css/ext-plugin-gray.css" />
    <link rel="stylesheet" type="text/css" href="https://play.dhis2.org/demo/dhis-web-commons/javascripts/ext-ux/carousel/css/carousel.css" />
    <script type="text/javascript" src="https://extjs-public.googlecode.com/svn/tags/extjs-4.0.7/release/ext-all.js"></script>
    <script type="text/javascript" src="https://play.dhis2.org/demo/dhis-web-commons/javascripts/ext-ux/carousel/Carousel.js"></script>
    <script type="text/javascript" src="https://play.dhis2.org/demo/dhis-web-commons/javascripts/plugin/plugin.js"></script>

第一个文件是图表插件的CSS样式表。第二
文件是轮播小部件的CSS样式表。第三个文件是
该插件依赖的Ext JavaScript框架。第四个
文件是轮播插件JavaScript文件。第五档是
图表插件JavaScript文件。本示例中的路径指向
DHIS2演示站点，请确保将其更新为指向您自己的DHIS2
安装。

请参阅有关图表插件的部分以了解如何操作
验证。

为了创建图表轮播，我们将首先渲染我们想要的图表
使用图表插件中所述的方法将其包含在轮播中
部分。然后，我们创建图表轮播本身。图表将是
呈现为* div *元素，这些元素都有一个名为* chart *的CSS类。
然后，在轮播配置中，我们可以定义一个* selector *表达式
指的是这样的div元素：

    DHIS.getChart({ uid: 'R0DVGvXDUNP', el: 'chartA1', url: base });
    DHIS.getChart({ uid: 'X0CPnV6uLjR', el: 'chartA2', url: 基础 });
    DHIS.getChart({ uid: 'j1gNXBgwKVm', el: 'chartA3', url: 基础 });
    DHIS.getChart({ uid: 'X7PqaXfevnL', el: 'chartA4', url: 基础 });

    new Ext.ux.carousel.Carousel( 'chartCarousel', {
      自动播放：真，
      itemSelector: 'div.chart',
      间隔：5，
      显示播放按钮：true
    });

配置中的第一个参数是div元素的ID
您要渲染轮播的图片。 * autoPlay *配置
选项是指我们是否希望用户启动轮播
加载网页。 * interval *选项定义每个秒数
图表应显示。 * showPlayButton *定义我们是否要
为用户提供启动和停止轮播的按钮。最后
我们需要在HTML文档的正文中插入div元素：

    <div id="chartCarousel">

    <div id="chartA1"></div>
    <div id="chartA2"></div>
    <div id="chartA3"></div>
    <div id="chartA4"></div>

要查看完整的工作示例，请访问
 <http://play.dhis2.org/portal/carousel.html>。

## SQL视图 { #webapi_sql_views } 

 <!--DHIS2-SECTION-ID:webapi_sql_views-->

SQL 视图资源允许您创建和检索结果集
SQL 视图。 SQL 视图可以直接针对
数据库并通过 Web API 资源呈现结果集。

    /api/26/sqlViews

SQL 视图对于创建可能更容易的数据视图很有用
用SQL构造比较结合Web的多个对象
应用程序接口。举个例子，假设我们被要求提供一个视图
所有组织单位及其名称、父名称、组织单位
级别和名称，以及数据库中列出的坐标。风景
可能看起来像这样：

    从组织单元 ou 中选择 ou.name 作为组织单位、par.name 作为父级、ou.坐标、ous.level、oul.name
    INNER JOIN _orgunitstruct ous ON ou.organizationunitid = ous.organizationunitid
    INNER JOIN 组织单元 par ON ou.parentid = par.organizationunitid
    INNER JOIN orgunitlevel oul ON ous.level = oul.level
    WHERE ou.坐标不为空
    ORDER BY oul.level、par.name、ou.name

我们将使用 *curl* 首先在 DHIS2 服务器上执行视图。这
本质上是一个物化过程，并确保我们拥有
检索时可通过 SQL 视图获得的最新数据
从服务器。您可以先从 SQL 视图中查找
api/sqlViews 资源，然后使用以下命令进行 POST：

    卷曲“https://play.dhis2.org/demo/api/26/sqlViews/dI68mLkP1wN/execute”-X POST -u admin:district -v

该过程的下一步是检索数据。基本
URL的结构如下

    http://{server}/api/26/sqlViews/{id}/data(.csv)

`{server}` 参数应替换为您自己的服务器。这
URL `/api/sqlViews/` 的下一部分应该附加
特定的 SQL 视图标识符。为 XML 数据附加 `data` 或
`data.csv` 用于逗号分隔值。支持响应格式是
json、xml、csv、xls、html 和 html+css。例如，以下
命令将为上面定义的 SQL 视图检索 XML 数据。

    卷曲“https://play.dhis2.org/demo/api/26/sqlViews/dI68mLkP1wN/data.csv”-u admin:district -v

SQL视图有三种类型：

  - *SQL 视图：* 标准 SQL 视图。

  - *物化的SQL视图：*物化的SQL视图，意思是
    写入磁盘。需要更新以反映变化
    底层表。支持过滤结果集的标准。

  - *SQL 查询：* 普通 SQL 查询。支持内联变量
    自定义查询。

### 标准 { #webapi_sql_view_criteria } 

 <!--DHIS2-SECTION-ID:webapi_sql_view_criteria-->

您可以通过以下方式对结果集中的列进行简单过滤
使用列名将 *criteria* 查询参数附加到 URL
并过滤由列分隔的值作为参数值，在
以下格式：

    /api/26/sqlViews/{id}/data?criteria=col1:value1&criteria=col2:value2

举个例子，过滤上面设置的SQL视图结果只返回
在第 4 级的组织单位，您可以使用以下内容
    网址：

    https://play.dhis2.org/demo/api/26/sqlViews/dI68mLkP1wN/data.csv?criteria=level:4

### 变数 { #webapi_sql_view_variables } 

 <!--DHIS2-SECTION-ID:webapi_sql_view_variables-->

SQL 视图支持变量替换。变量替换只是
可用于 *query* 类型的 SQL 视图，这意味着 SQL 视图不是
在数据库中创建，但只是作为常规 SQL 查询执行。
变量可以直接插入到 SQL 查询中，并且必须在
这种格式：

    $ {variable-key}

例如，检索给定的所有数据元素的 SQL 查询
通过变量定义值类型的值类型可以看
像这样：

    从dataelement中选择*，其中valuetype ='$ {valueType}';

然后可以在请求时将这些变量作为 URL 的一部分提供
通过 *sqlViews* Web API 资源。可以提供变量
以下格式：

    / api / sqlViews / {id} / data？var = key1：value1＆var = key2：value2

与上面的示例相对应的示例查询如下所示：

    /api/26/sqlViews/dI68mLkP1wN/data.json?var=valueType:int

*valueType* 变量将替换为 *int* 值，并且
查询将返回具有 int 值类型的数据元素。

变量参数必须仅包含字母数字字符。这
变量必须包含字母数字、破折号、下划线和空格
仅字符。

### 筛选 { #webapi_sql_view_filtering } 

 <!--DHIS2-SECTION-ID:webapi_sql_view_filtering-->

SQL视图api支持数据过滤，相当于[元数据对象
过滤器](#webapi_metadata_object_filter)。过滤器的完整列表
运算符，您可以查看 [元数据对象
过滤器](#webapi_metadata_object_filter)。

要使用过滤器，只需在请求末尾添加它们作为参数
您的 SQL 视图的 url，例如
    这：

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_level:eq:2&filter=orgunit_name:ilike:bo

此请求将返回一个结果，其中包括在
名称且组织单位级别为 2。

以下示例将返回 orgunit\_level 2 或的所有组织单位
4：

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_level:in:[2,4]

最后，返回所有不以开头的组织单位的示例
“博”

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_name:!like:Bo

## 仪表板 { #webapi_dashboard } 

 <!--DHIS2-SECTION-ID:webapi_dashboard-->

仪表板旨在为您提供多个分析的概览
地图、图表、数据透视表和报告等项目，它们一起可以
提供您数据的全面概览。仪表板可用
通过 *dashboards* 资源在 Web API 中。仪表板包含一个
仪表板*项目*列表。一个项目可以代表一个单一的资源，比如
图表、地图或报告表，或表示指向分析的链接列表
资源，如报告、资源、表格报告和用户。一种
仪表板项目最多可以包含八个链接。通常，仪表板
客户可以选择直接在一个
用户界面，同时将多对象项目渲染为可点击
链接。

    /api/26/仪表板

### 浏览仪表板 { #webapi_browsing_dashboards } 

 <!--DHIS2-SECTION-ID:webapi_browsing_dashboards-->

获取包含基本信息的仪表板列表，包括
JSON 格式的标识符、名称和链接，您可以向其发出 *GET* 请求
以下网址：

    /api/26/dashboards.json

仪表板资源将提供仪表板列表。请记住
仪表板对象是共享的，因此列表将受
当前已验证的用户。您可以检索有关一个的更多信息
特定的仪表板，请点击其链接，类似于：

    /api/26/dashboards/vQFhmLJU5sK.json

仪表板包含名称和创建日期等信息以及
仪表板项目数组。 JSON 格式的响应看起来类似
对此回复（某些信息已被删除，以便
简洁）。

    {
    “最后更新”：“2013-10-15T18：17：34.084 + 0000”，
    “id”：“vQFhmLJU5sK”，
    “创建”：“2013-09-08T20：55：58.060+0000”，
    "name" : "母婴健康",
    “href”：“https://play.dhis2.org/demo/api/dashboards/vQFhmLJU5sK”，
    “公共访问” ： ” -  -  -  - ”，
    “外部访问”：假，
    “项目数”：17，
    "displayName" : "母婴健康",
    “使用权” ： {
    “更新”：正确，
    “外部化”：正确，
    “删除”：正确，
    “写”：真实，
    “读”：正确，
    “管理”：正确
    },
    “用户”：{
    “id”：“xE7jOejl9FI”，
    “姓名”：“约翰·特拉奥雷”，
    “创建”：“2013-04-18T15：15：08.407 + 0000”，
    “最后更新”：“2014-12-05T03：50：04.148 + 0000”，
    “href”：“https://play.dhis2.org/demo/api/users/xE7jOejl9FI”
    },
    “仪表板项目”：[{
    “id”：“bu1IAnPFa9H”，
    “创建”：“2013-09-09T12：12：58.095 + 0000”，
    “最后更新”：“2013-09-09T12：12：58.095 + 0000”
    }, {
    “id”：“ppFEJmWWDa1”，
    “创建”：“2013-09-10T13：57：02.480+0000”，
    “最后更新”：“2013-09-10T13：57：02.480 + 0000”
    }
    ],
    “用户组访问”：[]
    }

通过指定特定字段可以获得更定制的响应
在请求中。下面提供了一个示例，它将返回更多
有关用户仪表板上每个对象的详细信息。

    /api/26/dashboards/vQFhmLJU5sK/?fields=:全部,dashboardItems[:全部]

### 搜索仪表板 { #webapi_searching_dasboards } 

 <!--DHIS2-SECTION-ID:webapi_searching_dasboards-->

设置仪表板时，从消费者的角度来看很方便
能够使用搜索各种分析资源
*/dashboards/q* 资源。此资源可让您搜索匹配项
以下对象的名称属性：图表、地图、报告表、
用户、报告和资源。您可以通过 *GET* 进行搜索
对以下资源 URL 模式的请求，其中 my-query 应该是
替换为首选搜索查询：

    /api/26/dashboards/q/my-query.json

支持 JSON 和 XML 响应格式。 JSON 格式的响应
将包含对匹配资源的引用和数量
总共找到匹配项，并为每种类型的资源找到匹配项。它会看起来
类似于：

    {
        “图表”：[{
            "name": "ANC：每年 1-3 的辍学率",
            “id”：“LW0O27b7TdD”
        }, {
            "name": "ANC：每年 1 和 3 覆盖范围",
            “id”：“UlfTKWZWV4u”
        }, {
            "name": "ANC：每月第一和第三趋势",
            “id”：“gnROK20DfAA”
        }],
        “地图”：[{
            "name": "ANC：2013 年第一次访问设施（已修复）",
            “id”：“YOEGBvxjAY0”
        }, {
            "name": "ANC：2014 年第 3 次访问报道（按地区）",
            “id”：“ytkZY3ChM6J”
        }],
        “报告表”：[{
            "name": "ANC：ANC 1 访问累计次数",
            “id”：“tWg9OiyV7mu”
        }],
        “报告”：[{
            "name": "ANC：第一次访问累积图表",
            “id”：“Kvg1AhYHM8Q”
        }, {
            "name": "ANC：今年的覆盖范围",
            “id”：“qYVNH1wkZR0”
        }],
        “搜索计数”：8，
        “图表计数”：3，
        “地图计数”：2，
        “报告表计数”：1，
        “报告计数”：2，
        “用户数”：0，
        “患者表格报告计数”：0，
        “资源数”：0
    }

### 创建，更新和删除仪表板 { #webapi_creating_updating_removing_dashboards } 

 <!--DHIS2-SECTION-ID:webapi_creating_updating_removing_dashboards-->

创建，更新和删除仪表板遵循标准REST
语义。为了创建新的信息中心，您可以进行* POST *
请求到* / api / dashboard *资源。从消费者的角度
首先创建仪表板然后添加项目可能会很方便
对此。请求有效负载支持JSON和XML格式。到
创建名称为“我的仪表盘”的仪表盘，您可以在其中使用有效负载
像这样的JSON：

    {
      “名称”：“我的仪表板”
    }

更新，例如重命名，仪表板，您可以使用 *PUT* 请求
类似的请求负载相同的 api/dashboards 资源。

要删除仪表板，您可以向特定的人发出 *DELETE* 请求
与此类似的仪表板资源：

    /api/26/仪表板/vQFhmLJU5sK

### 添加，移动和删除仪表板项目和内容 { #webapi_adding_moving_removing_dashboard_items } 

 <!--DHIS2-SECTION-ID:webapi_adding_moving_removing_dashboard_items-->

为了添加仪表板项目，消费者可以使用
*/api/dashboards/\<dashboard-id\>/items/content* 资源，其中
\<dashboard-id\> 应替换为相关仪表板
标识符。该请求必须使用 *POST* 方法。 URL 语法和
参数详细说明如下表。

 <table>
 <caption>项目内容参数</caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 44%" />
 <col style="width: 35%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>说明</th>
 <th>选项</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>类型</td>
 <td>仪表板项目</td>表示的资源类型
 <td>图表|地图| reportTable |用户|报告| reportTables |资源| PatientTabularReports |应用程式</td>
 </tr>
 <tr class="even">
 <td> id </td>
 <td>由仪表板项目</td>表示的资源的标识符
 <td>资源标识符</td>
 </tr>
 </tbody>
 </table>

用于将图表添加到特定仪表板的 *POST* 请求 URL 可以
看起来像这样，其中最后一个 id 查询参数值是图表
资源
    标识符：

    /api/26/dashboards/vQFhmLJU5sK/items/content?type=chart&id=LW0O27b7TdD

添加地图、图表、报表和应用程序类型的资源时，API
将创建一个新项目并将其添加到仪表板。添加资源时
类型的用户、报告、报告表和资源，API 将尝试
将资源添加到相同类型的现有仪表板项目。如果不
资源少于八个的相同类型的项目或没有相同类型的项目
与它相关联的存在，API 将创建一个新的仪表板项目和
将资源添加到其中。

为了将仪表板项目移动到列表中的新位置
仪表板中的项目，消费者可以向仪表板发出 *POST* 请求
以下资源 URL，其中 \<dashboard-id\> 应替换为
仪表板的标识符， \<item-id\> 应替换为
仪表板项目的标识符和 \<index\> 应替换为
仪表板中项目的新位置，其中索引为
从零开始：

    /api/26/dashboards/<dashboard-id>/items/<item-id>/position/<index>

要从特定仪表板中完全删除仪表板项目
消费者可以向以下资源 URL 发出 *DELETE* 请求，其中
\<dashboard-id\> 应替换为仪表板的标识符
和 \<item-id\> 应替换为仪表板的标识符
物品。可以通过 GET 检索仪表板项目标识符
向仪表板资源 URL 发出请求。

    /api/26/dashboards/<dashboard-id>/items/<item-id>

要删除消费者仪表板项目中的特定内容资源
可以向以下资源 URL 发出 *DELETE* 请求，其中
\<content-resource-id\> 应替换为
与仪表板项目关联的资源；例如的标识符
报告或用户。例如，这可用于删除单个
从报告类型的仪表板项目中生成报告，而不是删除
仪表板项目
    完全地：

    /api/26/dashboards/<dashboard-id>/items/<item-id>/content/<content-resource-id>

## 分析工具 { #webapi_analytics } 

 <!--DHIS2-SECTION-ID:webapi_analytics-->

要访问 DHIS2 中的分析汇总数据，您可以使用
*分析*资源。分析资源非常强大，因为它可以让您
查询和检索沿所有可用数据维度聚合的数据。
例如，您可以要求分析资源提供
一组数据元素、时间段和
组织单位。此外，您可以检索聚合数据
基于数据元素的任意数量维度的组合和
组织单位组集。

    /api/26/分析

### 请求查询参数 { #webapi_analytics_query_parameters } 

 <!--DHIS2-SECTION-ID:webapi_analytics_query_parameters-->

分析资源可让您指定一系列查询参数：

<table>
<caption>查询参数</caption>
<colgroup>
<col style="width: 17%" />
<col style="width: 10%" />
<col style="width: 45%" />
<col style="width: 27%" />
</colgroup>
<thead>
<tr class="header">
<th>查询参数</th>
<th>必填</th>
<th>说明</th>
<th>选项（默认为先）</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>尺寸</td>
<td>是</td>
<td>要检索的维度和维度项，每个维度和维度项重复。</td>
<td>任意标注</td>
</tr>
<tr class="even">
<td>过滤</td>
<td>无</td>
<td>应用于查询的筛选器和筛选项，每个筛选器和筛选项重复。</td>
<td>任意维度</td>
</tr>
<tr class="odd">
<td>聚合类型</td>
<td>无</td>
<td>聚合过程中使用的聚合类型。</td>
<td>sum | average | average_sum_org_unit | last | last_average_org_unit | count | stddev | variance | min | max</td>
</tr>
<tr class="even">
<td>测量标准</td>
<td>无</td>
<td>数据/度量的过滤器。</td>
<td>eq | gt | ge | lt | le</td>
</tr>
<tr class="odd">
<td>预聚合测量标准</td>
<td>无</td>
<td>数据/度量的过滤器，在执行聚合之前应用。</td>
<td>eq | gt | ge | lt | le</td>
</tr>
<tr>
<td>开始日期</td>
<td>无</td>
<td>日期范围的起始日期。将作为筛选器使用。不能与周期维度或筛选器一起使用。</td>
<td>日期</td>
</tr>
<tr>
<td>结束日期</td>
<td>无</td>
<td>日期范围的结束日期。将作为筛选器使用。不能与周期维度或筛选器一起使用。</td>
<td>日期</td>
</tr>
<tr class="even">
<td>skipMeta</td>
<td>无</td>
<td>排除响应的元数据部分（提高性能）。</td>
<td>假 | 真</td>
</tr>
<tr class="odd">
<td>跳过数据</td>
<td>无</td>
<td>排除响应的数据部分。</td>
<td>假 | 真</td>
</tr>
<tr class="even">
<td>skipRounding</td>
<td>无</td>
<td>跳过数据值的四舍五入，即提供全精度。</td>
<td>false | true</td>
</tr>
<tr class="odd">
<td>层次结构</td>
<td>无</td>
<td>在元数据中包含组织单位祖先的名称和组织单位的层次路径。</td>
<td>假 | 真</td>
</tr>
<tr class="even">
<td>忽略限制</td>
<td>无</td>
<td>忽略响应中最多 50 000 条记录的限制--谨慎使用。</td>
<td>false | true</td>
</tr>
<tr class="odd">
<td>表格布局</td>
<td>无</td>
<td>响应时使用纯数据源或表格布局。</td>
<td>false | true</td>
</tr>
<tr class="even">
<td>隐藏空行</td>
<td>否</td>
<td>隐藏响应中的空行，适用于表格布局为 true 时。</td>
<td>false | true</td>
</tr>
<tr class="odd">
<td>隐藏空列</td>
<td>否</td>
<td>隐藏响应中的空列，适用于表格布局为 true 时。</td>
<td>false | true</td>
</tr>
<tr class="even">
<td>显示层次结构</td>
<td>不显示</td>
<td>显示完整的组织单位层次路径和组织单位名称。</td>
<td>false | true</td>
</tr>
<tr class="odd">
<td>includeNumDen</td>
<td>无</td>
<td>在响应中包含用于计算值的分子和分母。</td>
<td>false | true</td>
</tr>
<tr class="even">
<td>includeMetadataDetails</td>
<td>不包含</td>
<td>在原始数据响应中包含元数据详情。</td>
<td>假 | 真</td>
</tr>
<tr class="odd">
<td>displayProperty</td>
<td>无</td>
<td>元数据要显示的属性。</td>
<td>名称</td>
</tr>
<tr class="even">
<td>outputIdScheme</td>
<td>无</td>
<td>用于查询响应元数据项的标识符方案，可以是标识符、代码或属性。</td>
<td>uid | 代码 | 名称 | 属性：&lt;id&gt;</td>
</tr>
<tr class="odd">
<td>inputIdScheme</td>
<td>无</td>
<td>查询请求中元数据项使用的标识符方案，可以是标识符、代码或属性。</td>
<td>uid | 代码 | 属性：&lt;id&gt;</td>
</tr>
<tr class="even">
<td>批准级别</td>
<td>无</td>
<td>包括至少在给定批准级别之前已获批准的数据，指批准级别标识符。</td>
<td>批准级别标识符</td>
</tr>
<tr class="odd">
<td>相对日期</td>
<td>无</td>
<td>用作相对期间基础的日期。</td>
<td>日期。</td>
</tr>
<tr class="even">
<td>用户单位</td>
<td>无</td>
<td>明确定义要使用的用户组织单位，覆盖与当前用户相关的组织单位，多个标识符可用分号分隔。</td>
<td>组织单位标识符。</td>
</tr>
<tr class="odd">
<td>列</td>
<td>无</td>
<td>用作表格布局列的维度。</td>
<td>任意维度（必须是查询维度）</td>
</tr>
<tr class="even">
<td>行数</td>
<td>无</td>
<td>在表格布局中用作行的维度。</td>
<td>任意维度（必须是查询维度）</td>
</tr>
<tr class="odd">
<td>顺序</td>
<td>无</td>
<td>根据值指定行的排序。</td>
<td>ASC | DESC</td>
</tr>
<tr class="even">
<td>时间字段</td>
<td>无</td>
<td>事件聚合所依据的时间字段。仅适用于事件数据项。可以是预定义选项，也可以是具有基于时间的值类型的属性或数据元素的 ID。</td>
<td>EVENT_DATE | ENROLLMENT_DATE | INCIDENT_DATE | DUE_DATE | COMPLETED_DATE | CREATED | LAST_UPDATED |&lt;属性 ID&gt; |&lt;数据元素 ID&gt;</td>
</tr>
<tr>
<td>orgUnitField</td>
<td>数据元素 ID</td>
<td>事件聚合所依据的组织单位字段。仅适用于事件数据项。可以是具有组织单位值类型的属性或数据元素的 ID。默认选项为省略查询参数。
<td>&lt;属性 ID&gt; |&lt;数据元素 ID&gt;</td>
</tr>
</tbody>
</table>

*dimension* 查询参数定义了哪些维度应该是
包含在分析查询中。可以是任意数量的维度
指定的。每个维度都应该重复维度参数
包含在查询响应中。查询响应可能
包含指定的所有组合的聚合值
维度项。

*filter* 参数定义应将哪些维度用作
在分析查询中检索到的数据的过滤器。任意数量
可以指定过滤器。过滤器参数应该重复
要在查询中使用的每个过滤器。过滤器与维度的不同之处在于
过滤器维度不会成为查询响应的一部分
内容，并且响应中的聚合值将是
在过滤器尺寸上折叠。换句话说，数据在
响应将在过滤器维度上聚合，但过滤器
不会作为维度包含在实际响应中。作为
例如，查询按句点过滤的某些数据元素和
您可以使用以下 URL 的组织单位：

    /api/26/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&filter=pe:2014Q1;2014Q2&filter=ou:O6uvpzGd5pu;lc3eMKXaEfw

*aggregationType* 查询参数可让您定义哪个聚合
应使用运算符进行查询。默认情况下聚合
将使用为查询中包含的数据元素定义的运算符。
如果您的查询不包含任何数据元素，但包含数据
元素组，第一个数据元素的聚合运算符
将使用第一组。组和数据元素的顺序是
不明确的。此查询参数允许您覆盖默认值和
指定特定的聚合运算符。作为示例，您可以设置
使用以下 URL 进行“计数”的聚合运算符：

    /api/26/analytics?dimension=dx:fbfJHSPpUQD&dimension=pe:2014Q1&dimension=ou:O6uvpzGd5pu&aggregationType=COUNT

使用* measureCriteria *查询参数可以过滤出数据范围
记录返回。您可以指示系统仅返回记录
汇总数据值等于，大于，大于或等于
等于，小于或小于或等于某些值。您可以指定任何
以下格式的标准数量，其中* critieria *和
* value *应替换为实际值：

    /api/26/analytics?measureCriteria=标准：值；标准：值

例如，以下查询将仅返回以下记录
数据值大于或等于 6500 且小于 33000：

    /api/26/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&dimension=pe:2014
      &dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw&measureCriteria=GE:6500;LT:33000

类似于 *measureCriteria*，*preAggregationMeasureCriteria* 查询
参数让你过滤掉数据，只有在聚合之前
执行。例如，以下查询仅聚合数据，其中
原始值在定义的标准内：

    /api/26/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&dimension=pe:2014
      &dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw&preAggregationMeasureCriteria=GE:10;LT:100

*startDate* 和 *endDate* 参数可用于指定自定义
要汇总的日期范围。指定日期范围时，您不能
将相对或固定期间指定为维度或过滤器。日期范围
将过滤分析响应。你可以这样使用它：

    /api/29/analytics.json?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      &dimension=ou:ImspTQPwCqd&startDate=2018-01-01&endDate=2018-06-01

为了使分析资源生成形状的数据
对于现成的表格，您可以通过以下方式提供* tableLayout *参数：
价值真实。而不是生成普通的，标准化的数据源，
分析资源现在将以表布局生成数据。你
可以将* columns *和* rows *参数与尺寸标识符一起使用
以分号分隔为值，以指示要用作
表的列和行。列和行的尺寸必须存在
作为查询中的数据维度（不是过滤器）。这样的要求可以看
像这样：

    /api/26/analytics.html?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&dimension=pe:2014Q1;2014Q2
      &dimension=ou:O6uvpzGd5pu&tableLayout=true&columns=dx;ou&rows=pe

*order* 参数可用于分析资源生成
有序数据。数据将按升序（或降序）排序
值。以降序对值进行排序的示例请求
顺序是：

    /api/26/analytics?dimension=dx:fbfJHSPpUQD&dimension=pe:LAST_12_MONTHS&dimension=ou:O6uvpzGd5pu&order=DESC

### 尺寸和项目 { #webapi_analytics_dimensions_and_items } 

 <!--DHIS2-SECTION-ID:webapi_analytics_dimensions_and_items-->

DHIS2 具有多维数据模型，具有多个固定和
动态数据维度。固定维度是数据元素，
期间（时间）和组织单位维度。您可以动态添加
通过类别、数据元素组集和组织的维度
单元组集。下表显示了可用的数据维度
在 DHIS2 中。每个数据维度都有一个对应的*维度
标识符*，每个维度可以有一组*维度项*：

<table>
<caption>尺寸和尺寸项</caption>
<colgroup>
<col style="width: 38%" />
<col style="width: 12%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>尺寸</th>
<th>维度 id</th>
<th>维度项目</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>数据元素、指标、数据集报告率度量、数据元素操作数、程序指标、程序数据元素、程序属性、验证规则</td>
<td>dx</td>
<td>数据元素、指标、数据集报告率度量、数据元素操作数、程序指标、程序属性标识符、关键字 DE_GROUP-&lt;group-id&gt;, IN_GROUP-&lt;group-id&gt;, use&lt;dataelement-id&gt; 。&lt;选项组合-id&gt; 用于数据元素操作数，&lt;program-id&gt;.&lt;dataelement-id&gt; 用于程序数据元素，&lt;program-id&gt;.&lt;attribute-id&gt; 用于程序属性，&lt;validationrule-id&gt; 用于验证结果。</td>
</tr>
<tr class="even">
<td>周期（时间）</td>
<td>时间</td>
<td>ISO 期间和相对期间，参见&quot;日期和期间格式&quot;</td>
</tr>
<tr class="odd">
<td>组织单位层次</td>
<td>ou</td>
<td>组织单位标识符，以及关键字 USER_ORGUNIT、USER_ORGUNIT_CHILDREN、USER_ORGUNIT_GRANDCHILDREN、LEVEL-&lt;level&gt; 和 OU_GROUP-&lt;group-id&gt;</td>
</tr>
<tr class="even">
<td>类别选项组合</td>
<td>组</td>
<td>类别选项组合标识符（省略可获得所有项目）</td>
</tr>
<tr class="odd">
<td>属性选项组合</td>
<td>ao</td>
<td>类别选项组合标识符（省略可获得所有项目）</td>
</tr>
<tr class="even">
<td>类别</td>
<td>&lt;类别 ID&gt;</td>
<td>类别选项标识符（省略以获取所有项目）</td>
</tr>
<tr class="odd">
<td>数据元素组集</td>
<td>&lt;组套 ID&gt;</td>
<td>数据元素组标识符（省略以获取所有项目）</td>
</tr>
<tr class="even">
<td>组织单位组集</td>
<td>&lt;组集 ID&gt;</td>
<td>组织单位组标识符（省略以获取所有项目）</td>
</tr>
<tr class="odd">
<td>类别选项组集</td>
<td>&lt;组套 ID&gt;</td>
<td>类别选项组标识符（省略以获取所有项目）</td>
</tr>
</tbody>
</table>

没有必要知道哪些对象用于
设计分析查询时的各种动态维度。你可以得到
通过访问 Web API 中的此 URL 获得动态维度的完整列表：

    /api/26/尺寸

分析资源的基本 URL 是 *api/analytics*。请求
您可以使用查询字符串的特定维度和维度项目
以下格式，其中 *dim-id* 和 *dim-item* 应为
替换为真实的
    价值观：

    /api/26/analytics?dimension=dim-id:dim-item;dim-item&dimension=dim-id:dim-item;dim-item

如上所示，维度标识符后跟一个冒号
而维度项之间用分号分隔。例如，一个
查询两个数据元素，两个期间和两个组织单位可以
使用以下 URL 完成：

    /api/26/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      &维度=pe:2016Q1;2016Q2&维度=ou:O6uvpzGd5pu;lc3eMKXaEfw

查询按类别选项组合细分的数据，而不是
您可以在查询中包含类别维度的数据元素总计
字符串，例如像这样：

    /api/26/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      &尺寸=co&尺寸=pe:201601&尺寸=ou:O6uvpzGd5pu;lc3eMKXaEfw

选择数据元素时，您还可以选择一个中的所有数据元素
使用 DE\_GROUP-\<id\> 语法将其分组为项目：

    /api/26/analytics?dimension=dx:DE_GROUP-h9cuJOkOwY2
      &维度=pe:201601&维度=ou:O6uvpzGd5pu

选择数据集报告率时，语法包含数据
设置标识符，后跟报告率指标：

    /api/26/analytics?dimension=dx:BfMAe6Itzgt.REPORTING_RATE;BfMAe6Itzgt.ACTUAL_REPORTS
      &维度=pe:201601&维度=ou:O6uvpzGd5pu

要查询程序数据元素（跟踪器域类型），您可以获得
通过使用以下命令为每个数据元素指定程序
\<program-id\>.\<dataelement-id\>
    句法：

    /api/26/analytics.json?dimension=dx:eBAyeGv0exc.qrur9Dvnyt5;eBAyeGv0exc.GieVkTxp4HH
      &dimension=pe:LAST_12_MONTHS&filter=ou:ImspTQPwCqd

要查询程序属性（跟踪实体属性），您可以获得
通过使用以下命令为每个属性指定程序
\<program.id\>.\<attribute-id\>
    句法：

    /api/26/analytics.json?dimension=dx:IpHINAT79UW.a3kGcGDCuk6;IpHINAT79UW.UXz7xuGCEhU
      &dimension=pe:LAST_4_QUARTERS&dimension=ou:ImspTQPwCqd

要查询可以使用的组织单位组集和数据元素
以下 URL - 请注意组集标识符如何用作
维度标识符和作为维度项的组：

    /api/26/analytics?dimension=Bpx0589u8y0:oRVt7g429ZO;MAs88nJc9nL
      &维度=pe:2016&维度=ou:ImspTQPwCqd

要查询数据元素和类别，可以使用此URL。使用
类别标识符为维度标识符，类别选项为
尺寸项目：

    /api/26/analytics?dimension=dx:s46m5MS0hxu;fClA2Erf6IO&dimension=pe:2016
      &dimension=YNZyaJHiHYq:btOyqprQ9e8;GEqzEKCHoGA&filter=ou:ImspTQPwCqd

使用相关期间和组织单位进行查询
当前用户可以使用这样的 URL：

    /api/26/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      &dimension=pe:LAST_12_MONTHS&dimension=ou:USER_ORGUNIT

为维度选择组织单位时，您可以选择
整个级别可选地受任意数量的边界约束
使用 LEVEL-\<level\> 语法的组织单位。边界是指
子层次结构中的顶级节点，这意味着位于该子层次结构中的所有组织单位
层次结构中给定边界组织单元下方的给定级别
将包含在响应中，并作为常规组织单位提供
维度项目。级别值可以是数字级别或引用标识符
组织单位级实体。对第三级所有组织部门的简单查询：

    /api/26/analytics?dimension=dx:fbfJHSPpUQD&dimension=pe:2016&dimension=ou:LEVEL-3

具有两个边界组织单位的三级和四级查询可以是
指定如下：

    /api/26/analytics?dimension=dx:fbfJHSPpUQD&dimension=pe:2016
      &dimension=ou:LEVEL-3;LEVEL-4;O6uvpzGd5pu;lc3eMKXaEf

选择组织单位时，您还可以选择所有组织
组织单位组中的单位将作为维度项目包含在内
使用 OU\_GROUP-\<id\> 语法。团体内的组织单位
可以选择受到任意数量的边界组织的约束
单位。级别和组项目都可以重复任意次数
次数：

    /api/26/analytics?dimension=dx:fbfJHSPpUQD&dimension=pe:2016
      &dimension=ou:OU_GROUP-w0gFTTmsUcF;OU_GROUP-EYbopBOJWSW;O6uvpzGd5pu;lc3eMKXaEf

您可以将标识符方案用于元数据部分
具有 outputIdScheme 属性的分析响应，如下所示。你可以
使用 ID、代码和属性作为标识符方案：

    /api/26/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      &dimension=pe:2017Q1;2017Q2&dimension=ou:O6uvpzGd5pu&outputIdScheme=CODE

列出了使用分析资源时需要注意的一些事项
以下。

  - 数据元素、指标、数据集报告率、计划数据
    要素和计划指标是共同数据维度的一部分，
    标识为“dx”。这意味着您可以使用任何数据
    元素、指标和数据集标识符以及“dx”
    查询中的维度标识符。

  - 对于类别、数据元素组集和组织单元组
    设置维度，如果没有，将在查询中使用所有维度项
    维度项目被指定。

  - 对于期间维度，维度项为 ISO 期间
    标识符和/或相对周期。请参阅部分
    上面称为“日期和期间格式”的期间格式和
    可用的相对时期。

  - 对于组织单位维度，您可以指定要
    组织单位或组织单位的子单位
    与当前针对请求进行身份验证的用户相关联
    使用 USER\_ORGUNIT 或 USER\_ORGUNIT\_CHILDREN 键作为项目，
    分别。您还可以指定组织单位标识符
    直接，或两者结合。

  - 对于组织单位维度，您可以指定组织
    层次结构级别和用于请求的边界单元
    格式 LEVEL-\<level\>-\<boundary-id\>;举个例子
    LEVEL-3-ImspTQPwCqd 表示低于给定值的所有组织单位
    层次结构中第 3 级的边界单元。

  - 对于组织单位维度，维度项目为
    组织单位及其子层次结构 - 数据将被聚合
    对于指定组织单位下的所有组织单位
    等级制度。

  - 您不能为类别选项指定维度项目
    组合尺寸。相反，响应将包含项目
    链接到数据值。

### dx尺寸 { #webapi_analytics_dx_dimension } 

 <!--DHIS2-SECTION-ID:webapi_analytics_dx_dimension-->

*dx* 维度是一个特殊维度，可以包含所有
以下数据类型。

<table>
<caption>数据 dx 尺寸类型</caption>
<colgroup>
<col style="width: 25%" />
<col style="width: 23%" />
<col style="width: 27%" />
<col style="width: 23%" />
</colgroup>
<thead>
<tr class="header">
<th>类型</th>
<th>语法</th>
<th>说明</th>
<th>数据源</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>指标</td>
<td>&lt;indicator-id&gt;</td>
<td>指标标识符。</td>
<td>汇总数据</td>
</tr>
<tr class="even">
<td>指标 grop</td>
<td>IN_GROUP-&lt;indicatorgroup-id&gt;</td>
<td>关键词，后跟指标组标识符。将在回复中包含该组中的所有指标。</td>
<td>汇总数据</td>
</tr>
<tr class="odd">
<td>数据元素</td>
<td>&lt;dataelement-id&gt;</td>
<td>数据元素标识符。</td>
<td>汇总数据</td>
</tr>
<tr class="even">
<td>数据元素组</td>
<td>DE_GROUP-&lt;dataelementgroup-id&gt;</td>
<td>关键词，后跟数据元素组标识符。将在响应中包含该组中的所有数据元素。</td>
<td>汇总数据</td>
</tr>
<tr class="odd">
<td>数据元素操作符</td>
<td>&lt;dataelement-id&gt;.&lt;categoryoptcombo-id&gt;.&lt;attributeoptcombo-id&gt;</td>
<td>数据元素标识符，后跟类别选项组合和属性选项组合标识符中的一个或两个。通配符&quot;*&quot; 符号可用于表示任何选项组合值。属性选项组合标识符可以完全省略。</td>
<td>汇总数据</td>
</tr>
<tr class="even">
<td>数据集</td>
<td>&lt;dataset-id&gt;.&lt;reporting-rate-metric&gt;</td>
<td>数据集标识符，后跟报告率指标。可以是 REPORTING_RATE | REPORTING_RATE_ON_TIME | ACTUAL_REPORTS | ACTUAL_REPORTS_ON_TIME | EXPECTED_REPORTS。</td>
<td>数据集完整性登记</td>
</tr>
<tr class="odd">
<td>计划数据元素</td>
<td>&lt;program-id&gt;.&lt;dataelement-id&gt;</td>
<td>程序标识符，后跟数据元素标识符。读取指定程序中的事件。</td>
<td>指定程序中的事件</td>
</tr>
<tr class="even">
<td>程序指示符</td>
<td>&lt;programindicator-id&gt;</td>
<td>程序指示器标识符。从与程序标识符相关的程序中读取事件。</td>
<td>从程序指示符的程序中读取事件</td>
</tr>
<tr class="odd">
<td>验证结果</td>
<td>&lt;validationrule-id&gt;</td>
<td>验证规则标识符。将包括违反验证规则的验证规则，要求生成并持久保存验证结果。</td>
<td>验证结果</td>
</tr>
</tbody>
</table>

所有不同 *dx* 类型的项目都可以合并到分析中
要求。一个例子如下：

    /api/26/analytics.json
      ?维度=dx:Uvn6LCg7dVU;BfMAe6Itzgt.REPORTING_RATE;BfMAe6Itzgt.ACTUAL_REPORTS;IpHINAT79UW.a3kGcGDCuk6
      &dimension=pe:LAST_12_MONTHS&filter=ou:ImspTQPwCqd

组语法也可以与任何其他项目一起使用。一个
示例如下所示：

    /api/26/analytics.json
      ?dimension=dx:DE_GROUP-qfxEYY9xAl6;IN_GROUP-oehv9EO3vP7;BfMAe6Itzgt.REPORTING_RATE
      &dimension=pe:LAST_12_MONTHS&filter=ou:ImspTQPwCqd

数据元素操作数可以选择性地指定属性选项
组合并使用通配符，例如指定所有类别选项
组合值：

    /api/26/analytics.json
      ?尺寸=dx:Uvn6LCg7dVU.*j8vBiBqGf6O;Uvn6LCg7dVU.Z4oQs46iTeR;Uvn6LCg7dVU.Z4oQs46iTeR.j8vBiBqGf6O
      &dimension=pe:LAST_12_MONTHS&filter=ou:ImspTQPwCqd

> **提示**
>
> 学习如何使用分析 API 的一个好方法是使用 DHIS2
> *数据透视表*应用程序。您可以使用数据透视表进行操作
> 各种维度和项目，然后单击下载 \> 纯数据源
> \> JSON 以在地址栏中查看生成的分析 API 调用
> 您的网络浏览器。

### 回应格式 { #webapi_analytics_response_formats } 

 <!--DHIS2-SECTION-ID:webapi_analytics_response_formats-->

包含聚合数据的分析响应可以返回
各种表示格式。像往常一样，您可以表明对某个
通过将文件扩展名附加到 URL 来指定格式
*接受* HTTP 标头或通过 *format* 查询参数。这
默认格式为 JSON。可用的格式和内容类型是
下面列出。

  - json（应用程序/ json）

  - jsonp（应用程序/ javascript）

  - xml（应用程序/ xml）

  - csv（应用程序/ csv）

  - html（text / html）

  - html + css（text / html）

  - xls（application / vnd.ms-excel）

例如，要请求 XML 格式的分析响应，您可以
使用以下网址：

    /api/26/analytics.xml?dimension=dx:fbfJHSPpUQD
      &维度=pe:2016&维度=ou:O6uvpzGd5pu;lc3eMKXaEfw

必须使用 HTTP *GET* 方法检索分析响应。
这允许直接链接到来自网页的分析响应，如
以及其他启用 HTTP 的客户端。要进行功能测试，我们可以使用
卷曲库。通过对演示数据库执行此命令
您将获得 JSON 格式的分析响应：

    卷曲“play.dhis2.org/demo/api/26/analytics.json?dimension=dx:eTDtyyaSA7f;FbKK4ofIv5R
      &dimension=pe:2016Q1;2016Q2&filter=ou:ImspTQPwCqd" -u admin:区

JSON响应如下所示：

    {
        “标题”：[
            {
                “名称”：“dx”，
                “列”：“数据”，
                “元”：真实，
                “类型”：“java.lang.String”
            },
            {
                “名称”：“pe”，
                "column": "期间",
                “元”：真实，
                “类型”：“java.lang.String”
            },
            {
                “名称”：“值”，
                “列”：“值”，
                “元”：假，
                “类型”：“java.lang.Double”
            }
        ],
        “高度”：4，
        “元数据”：{
            “pe”：[
                “2016年第一季度”,
                “2016年第二季度”
            ],
            “欧”：[
                “ImspTQPwCqd”
            ],
            “名称”：{
                "2016Q1": "2016 年 1 月至 3 月",
                "2016Q2": "2016 年 4 月至 6 月",
                "FbKK4ofIv5R": "麻疹覆盖率 <1 年",
                "ImspTQPwCqd": "塞拉利昂",
                "eTDtyyaSA7f": "完全免疫覆盖"
            }
        },
        “行”：[
            [
                “eTDtyyaSA7f”，
                “2016年第二季度”,
                “81.1”
            ],
            [
                “eTDtyyaSA7f”，
                “2016年第一季度”,
                “74.7”
            ],
            [
                “FbKK4ofIv5R”，
                “2016年第二季度”,
                “88.9”
            ],
            [
                “FbKK4ofIv5R”，
                “2016年第一季度”,
                “84.0”
            ]
        ],
        “宽度”：3
    }

响应表示维数据表。 * headers *数组
概述了表中包括哪些列以及哪些内容
列包含。 * column *属性显示列尺寸
标识符，或者如果该列包含度量，则为单词“值”。这
如果列包含维度项目，则* meta *属性为* true *或
如果列包含度量（汇总数据值），则为* false *。这
* name *属性类似于column属性，但它显示
如果列包含度量，则为“值”。 * type *属性
指示列值的Java类类型。

*height* 和 *width* 属性表示有多少数据列和
行分别包含在响应中。

*metaData period* 属性包含一个唯一的有序数组
响应中包含的时间段。 *metaData ou* 属性包含一个
响应中包含的组织单位标识符数组。
*metaData names* 属性包含标识符之间的映射
用于数据响应和它们代表的对象的名称。
客户端可以使用它来替换数据中的标识符
响应名称以提供更有意义的数据视图
桌子。

*rows* 数组包含维度数据表。它包含
具有维度项（对象或期间标识符）和一列的列
具有聚合数据值。上面的示例响应有一个
数据/指标列、期间列和值列。首先
列包含指标标识符，第二列包含 ISO 句点
标识符，第三个包含聚合数据值。

### 约束 { #webapi_analytics_constraints } 

 <!--DHIS2-SECTION-ID:webapi_analytics_constraints-->

您可以提供给输入的一些约束
分析资源。

  - 查询中必须至少指定一个维度。

  - 尺寸不能指定为尺寸和过滤器
    同时。

  - 必须至少指定一个期间作为维度或过滤器。

  - 类别不能指定为过滤器。

  - 只能将一个指标指定为过滤器。

  - 只能将单个报告率指定为过滤器。

  - 不能与数据集一起指定数据元素组集。

  - 类别只能与数据元素一起指定，不能与数据元素一起指定
    指标或数据集。

  - 不能多次指定尺寸。

  - 固定尺寸（“ dx”，“ pe”，“ ou”）必须至少具有一个选项
    包含在查询中。

  - 一个表默认不能包含超过5万个单元格，这可以
    在系统设置下进行配置。

当查询请求违反任何这些约束时，服务器将
返回状态码为409且内容类型为“文本/纯文本”的响应
以及问题的文字描述。

### 数据值设定格式 { #webapi_analytics_data_value_set_format } 

 <!--DHIS2-SECTION-ID:webapi_analytics_data_value_set_format-->

分析 *dataValueSet* 资源允许返回聚合
数据值集格式的数据。这种格式代表原始数据
值，而不是按照各种方式汇总的数据
方面。将聚合数据导出为常规数据值很有用
当目标系统包含数据时，用于系统之间的数据交换
与目标系统存储的内容相比具有更精细的粒度。

作为一个例子，我们可以在目标系统中指定一个指标来
汇总多个数据元素的数据并将该数据导入
目标系统中的单个数据元素。作为另一个例子
可以聚合在目标中组织单位级别 4 收集的数据
系统级别为 2 并将该数据导入到目标系统中。

您可以从原始数据值集格式中检索数据
数据值集资源：

    /api/26/analytics/dataValueSet

支持以下资源表示形式：

  - json（应用程序/ json）

  - xml（应用程序/ xml）

使用数据值集格式时，必须正好三个维度
指定为分析维度，每个维度至少有一个维度项目：

  - 资料（dx）

  - 周期（pe）

  - 组织单位（ou）

任何其他维度都将被忽略。过滤器将被应用
定期分析请求。请注意，任何数据维度类型都可以
指定，包括指示符、数据元素、数据元素操作数、
数据集和计划指标。

汇总特定指标数据的示例请求，
期间和组织单位并将其作为常规数据值返回
XML 看起来像这样：

    api / analytics / dataValueSet.xml？dimension = dx：Uvn6LCg7dVU; OdiHJayrsKo
      ＆dimension = pe：LAST_4_QUARTERS＆dimension = ou：lc3eMKXaEfw; PMa2VCrupOd

聚合数据元素操作数的数据并使用 CODE 的请求
因为输出标识符方案如下所示。当定义
输出标识符方案，响应的所有元数据对象部分都是
做作的：

    api / analytics / dataValueSet.json？dimension = dx：fbfJHSPpUQD.pq2XI5kz2BY; fbfJHSPpUQD.PT59n8BQbqM
      ＆dimension = pe：LAST_12_MONTHS＆dimension = ou：ImspTQPwCqd＆outputIdScheme = CODE

使用基于属性的标识符方案进行导出时存在风险
产生重复的数据值。布尔查询参数
duplicatesOnly 可用于调试目的仅返回
重复数据值。此响应可用于清理
重复：

    api / analytics / dataValueSet.xml？dimension = dx：Uvn6LCg7dVU; OdiHJayrsKo
      ＆dimension = pe：LAST_4_QUARTERS＆dimension = ou：lc3eMKXaEfw＆duplicatesOnly = true

### 原始数据格式 { #webapi_analytics_raw_data } 

 <!--DHIS2-SECTION-ID:webapi_analytics_raw_data-->

分析 *rawData* 资源允许返回存储在
未执行任何聚合的分析数据表。这
对于想要执行聚合和的客户很有用
自行过滤，而无需对数据进行非规范化
可用的数据维度本身。

    / api / analytics / rawData

支持以下资源表示形式：

  - json（应用程序/ json）

  - csv（应用程序/ csv）

此资源遵循常规分析资源的语法。仅有的
支持查询参数的子集。此外，一个
*startDate* 和 *endDate* 参数可用。支持的
参数如下表所示。

 <table>
 查询参数<caption> </caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需/注释</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>尺寸</td>
 <td>是</td>
 </tr>
 <tr class="even">
 <td>开始日期</td>
 <td>否/ yyyy-MM-dd </td>
 </tr>
 <tr class="odd">
 <td>结束日期</td>
 <td>否/ yyyy-MM-dd </td>
 </tr>
 <tr class="even">
 <td> skipMeta </td>
 <td>否</td>
 </tr>
 <tr class="odd">
 <td> skipData </td>
 <td>否</td>
 </tr>
 <tr class="even">
 <td>层次结构元</td>
 <td>否</td>
 </tr>
 <tr class="odd">
 <td> showHierarchy </td>
 <td>否</td>
 </tr>
 <tr class="even">
 <td> displayProperty </td>
 <td>否</td>
 </tr>
 <tr class="odd">
 <td> outputIdScheme </td>
 <td>否</td>
 </tr>
 <tr class="even">
 <td> inputIdScheme </td>
 <td>否</td>
 </tr>
 <tr class="odd">
 <td> userOrgUnit </td>
 <td>否</td>
 </tr>
 </tbody>
 </table>

* dimension *查询参数定义了哪些尺寸（表列）
应该包含在响应中。可以选择将其约束
与项目。 * filter *查询参数定义哪些项目和
尺寸（表格列）应用作响应的过滤器。

对于组织单位维度，响应将包含数据
与组织单位和该组织中的所有组织单位相关联
子层次结构（树中的孩子）。这与
常规分析资源，其中只有明确选择的
包括组织单位。

要检索具有特定数据元素、特定时间段的响应，
两个自定义维度的特定组织单位和所有数据
可以发出这样的请求：

    /api/analytics/rawData.json?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU;Jtf34kNZhzP
      ＆dimension = J5jldMd8OHv＆dimension = Bpx0589u8y0
      ＆dimension = pe：LAST_12_MONTHS
      ＆dimension = ou：O6uvpzGd5pu; fdc6uOvgoji

*startDate* 和 *endDate* 参数允许获取链接的数据
到这些日期之间的任何时间段。这避免了定义所有
期间明确在
    要求：

    /api/analytics/rawData.json?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU;Jtf34kNZhzP
      ＆dimension = J5jldMd8OHv＆dimension = Bpx0589u8y0
      ＆startDate = 2015-01-01＆endDate = 2015-12-31
      ＆dimension = ou：O6uvpzGd5pu; fdc6uOvgoji

*filter* 参数可用于过滤响应，而无需
包括该维度作为响应的一部分，这次是在 CSV 中
格式：

    /api/analytics/rawData.csv?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU;Jtf34kNZhzP
      ＆filter = J5jldMd8OHv：uYxK4wmcPqA; tDZVQ1WtwpA
      ＆startDate = 2015-01-01＆endDate = 2015-12-31
      ＆dimension = ou：O6uvpzGd5pu

如果您想要人类可读的数据，*outputIdScheme* 参数很有用
响应，因为它可以像这样设置为 *NAME*：

    /api/analytics/rawData.csv?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      ＆filter = J5jldMd8OHv：uYxK4wmcPqA; tDZVQ1WtwpA
      ＆startDate = 2017-01-01＆endDate = 2017-12-31
      ＆dimension = ou：O6uvpzGd5pu
      ＆outputIdScheme = NAME

* rawData *资源的响应看起来与
常规分析资源；不同之处在于响应包含
原始的非汇总数据，适合于进一步汇总
第三方系统。

### 调试 { #webapi_analytics_debugging } 

 <!--DHIS2-SECTION-ID:webapi_analytics_debugging-->

调试分析请求时，检查数据可能很有用
汇总分析响应的价值来源。这
* analytics / debug / sql *资源将提供一条SQL语句，该语句
返回datavalue表的相关内容。你可以生产
通过执行内容类型为“ text / html”的GET请求来执行此SQL或
如下所示的“文本/纯文本”。维度和过滤器语法与
常规分析查询：

    /api/26/analytics/debug/sql?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      &filter=pe:2016Q1;2016Q2&filter=ou:O6uvpzGd5pu

## 事件分析 { #webapi_event_analytics } 

 <!--DHIS2-SECTION-ID:webapi_event_analytics-->

事件分析 API 允许您访问聚合的事件数据和查询
*事件*在 DHIS2 中捕获。此资源可让您检索基于事件的
在程序和可选的程序阶段，并让您检索和
在任何事件维度上过滤事件。

    /api/26/分析/事件

### 尺寸和项目 { #webapi_event_analytics_dimensions_items } 

 <!--DHIS2-SECTION-ID:webapi_event_analytics_dimensions_items-->

事件维度包括数据元素、属性、组织单位
和时期。聚合的事件分析资源将返回
聚合信息，例如计数或平均值。查询分析
资源将简单地返回匹配一组条件的事件，并且不会
不执行任何聚合。您可以在表单中指定维度项
来自选项集的选项和来自数据图例集的图例
与此相关的元素和属性。事件
尺寸如下表所示。

<table>
<caption>Event dimensions</caption>
<colgroup>
<col style="width: 27%" />
<col style="width: 11%" />
<col style="width: 60%" />
</colgroup>
<thead>
<tr class="header">
<th>Dimension</th>
<th>Dimension id</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Data elements</td>
<td>&lt;id&gt;</td>
<td>Data element identifiers</td>
</tr>
<tr class="even">
<td>Attributes</td>
<td>&lt;id&gt;</td>
<td>Attribute identifiers</td>
</tr>
<tr class="odd">
<td>Periods</td>
<td>pe</td>
<td>ISO periods and relative periods, see &quot;date and period format&quot;</td>
</tr>
<tr class="even">
<td>Organisation units</td>
<td>ou</td>
<td>Organisation unit identifiers and keywords USER_ORGUNIT, USER_ORGUNIT_CHILDREN, USER_ORGUNIT_GRANDCHILDREN, LEVEL-&lt;level&gt; and OU_GROUP-&lt;group-id&gt;</td>
</tr>
<tr class="odd">
<td>Organisation unit group sets</td>
<td>&lt;org unit group set id&gt;</td>
<td>Organisation unit group set identifiers</td>
</tr>
<tr class="even">
<td>Categories</td>
<td>&lt;category id&gt;</td>
<td>Category identifiers (program attribute categories only)</td>
</tr>
</tbody>
</table>

### 请求查询参数 { #webapi_event_analytics_request_query_parameters } 

 <!--DHIS2-SECTION-ID:webapi_event_analytics_request_query_parameters-->

Analytics事件API使您可以指定一系列查询参数。

 <table>
 <caption> 事件查询和聚合分析的查询参数 </caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 11%" />
 <col style="width: 48%" />
 <col style="width: 19%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 需要 </th>
 <th> 说明 </th>
 <th> 选项（默认第一个） </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 程序 </td>
 <td> 是 </td>
 <td> 程序标识符。 </td>
 <td> 任何程序标识符 </td>
 </tr>
 <tr class="even">
 <td> 阶段 </td>
 <td> 否 </td>
 <td> 节目阶段标识符。 </td>
 <td> 任何程序阶段标识符 </td>
 </tr>
 <tr class="odd">
 <td> 开始日期 </td>
 <td> 是 </td>
 <td> 活动的开始日期。 </td>
 <td> yyyy-MM-dd 格式的日期 </td>
 </tr>
 <tr class="even">
 <td> 结束日期 </td>
 <td> 是 </td>
 <td> 活动的结束日期。 </td>
 <td> yyyy-MM-dd 格式的日期 </td>
 </tr>
 <tr class="odd">
 <td> 尺寸 </td>
 <td> 是 </td>
 <td> 维标识符，包括数据元素、属性、计划指标、期间、组织单位和组织单位组集。参数可以重复任意次数。项目过滤器可以应用于 &lt;item-id&gt;:&lt;operator&gt;:&lt;filtera001087z0.过滤器值不区分大小写。 </td>
 <td> 算子可以EQ | GT |通用电气 | LT |乐 |东北 |喜欢 |在 </td>
 </tr>
 <tr class="even">
 <td> 过滤器 </td>
 <td> 否 </td>
 <td> 维度标识符，包括数据元素、属性、期间、组织单位和组织单位组集。参数可以重复任意次数。项目过滤器可以应用于 &lt;item-id&gt;:&lt;operator&gt;:&lt;filtera001087z0.过滤器值不区分大小写。 </td>
 <td> </td>
 </tr>
 <tr class="odd">
 <td>hierarchyMeta </td>
 <td> 否 </td>
 <td> 在元数据中包含组织单元祖先的名称和组织单元的层次结构路径。 </td>
 <td> 假 |真 </td>
 </tr>
 <tr class="even">
 <td> eventStatus </td>
 <td> 否 </td>
 <td> 指定要包括的事件的状态。 </td>
 <td> ACTIVE |已完成 |日程 |逾期 |跳过 </td>
 </tr>
 <tr class="odd">
 <td> 程序状态 </td>
 <td> 否 </td>
 <td> 指定要包括的事件的注册状态。 </td>
 <td> ACTIVE |已完成 |取消 </td>
 </tr>
 <tr class="even">
 <td> relativePeriodDate </td>
 <td> 字符串 </td>
 <td> 否 </td>
 <td> 日期标识符，例如：&quot;2016-01-01&quot;。覆盖相对时间段 </td> 的开始日期
 </tr>
 <tr class="odd">
 <td> 列 </td>
 <td> 否 </td>
 <td> 用作表格布局列的尺寸。 </td>
 <td> 任意维度（必须是查询维度） </td>
 </tr>
 <tr class="even">
 <td> 行 </td>
 <td> 否 </td>
 <td> 用作表格布局行的尺寸。 </td>
 <td> 任意维度（必须是查询维度） </td>
 </tr>
 </tbody>
 </table>

 <table>
 <caption> 仅用于事件查询分析的查询参数 </caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 11%" />
 <col style="width: 48%" />
 <col style="width: 19%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 需要 </th>
 <th> 说明 </th>
 <th> 选项 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ouMode </td>
 <td> 否 </td>
 <td> 选择组织单位的方式。默认值为 DESCENDANTS，表示层次结构中的所有子单元。 CHILDREN 是指层次结构中的直系孩子； SELECTED 仅指选定的组织单位。 </td>
 <td> 后代，儿童，选定 </td>
 </tr>
 <tr class="even">
 <td> 升序 </td>
 <td> 否 </td>
 <td> 要升序排序的维度，可以参考事件日期、组织单位名称和代码以及任何项目标识符。 </td>
 <td> 事件日期 | OUNAME |欧码 |项目标识符 </td>
 </tr>
 <tr class="odd">
 <td> 描述 </td>
 <td> 否 </td>
 <td> 降序排列的维度，可以参考事件日期、组织单位名称和代码以及任何项目标识符。 </td>
 <td> 事件日期 | OUNAME |欧码 |项目标识符 </td>
 </tr>
 <tr class="even">
 <td>坐标只有</td>
 <td> 否 </td>
 <td> 是否只返回有坐标的事件。 </td>
 <td> 假 |真 </td>
 </tr>
 <tr class="odd">
 <td> dataIdScheme </td>
 <td> 否 </td>
 <td> 用于数据的 Id 方案，更具体地说是具有选项集或图例集的数据元素和属性，例如在数据响应中返回选项的名称而不是代码，或图例的名称而不是图例 ID。 </td>
 <td> 名称 |代码 | UID </td>
 </tr>
 <tr class="even">
 <td> 页面 </td>
 <td> 否 </td>
 <td> 页码。默认页面为 1。</td>
 <td> 数字正值 </td>
 </tr>
 <tr class="odd">
 <td> 页面大小 </td>
 <td> 否 </td>
 <td> 页面大小。默认大小为每页 50 个项目。 </td>
 <td> 数字零或正值 </td>
 </tr>
 </tbody>
 </table>

 <table>
 <caption>仅用于汇总事件分析的查询参数</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 11%" />
 <col style="width: 48%" />
 <col style="width: 19%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 <th>选项</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>值</td>
 <td>否</td>
 <td>值维度标识符。可以是数据元素或必须为数值类型的属性。 </td>
 <td>数据元素或属性标识符</td>
 </tr>
 <tr class="even">
 <td>聚合类型</td>
 <td>否</td>
 <td>值维的聚合类型。默认值为AVERAGE。 </td>
 总和| <td>平均AVERAGE_SUM_ORG_UNIT |最后| LAST_AVERAGE_ORG_UNIT | COUNT | STDDEV |差异| MIN |最大</td>
 </tr>
 <tr class="odd">
 <td> showHierarchy </td>
 <td>否</td>
 <td>显示完整的组织单位层次结构路径以及组织单位名称。 </td>
 否| <td>假|真</td>
 </tr>
 <tr class="even">
 <td> displayProperty </td>
 <td>否</td>
 <td>为元数据显示的属性。 </td>
 名称| <td>简称：</td>
 </tr>
 <tr class="odd">
 <td> sortOrder </td>
 <td>否</td>
 <td>按升序或降序对value列上的记录进行排序。 </td>
 <td> ASC | DESC </td>
 </tr>
 <tr class="even">
 <td>限制</td>
 <td>否</td>
 <td>要返回的最大记录数。不能大于10000。</td>
 <td>数值正值</td>
 </tr>
 <tr class="odd">
 <td>输出类型</td>
 <td>否</td>
 <td>指定分析数据的输出类型，可以是事件，注册或跟踪的实体实例。最后两个选项仅适用于注册程序。 </td>
 事件| <td>事件|报名| TRACKED_ENTITY_INSTANCE </td>
 </tr>
 <tr class="even">
 <td> crashDataDimensions </td>
 <td>否</td>
 <td>将所有数据维度（数据元素和属性）折叠为响应中的单个维度。 </td>
 否| <td>假|真</td>
 </tr>
 <tr class="odd">
 <td> skipMeta </td>
 <td>否</td>
 <td>排除响应的元数据部分（提高性能）。 </td>
 否| <td>假|真</td>
 </tr>
 <tr class="even">
 <td> skipData </td>
 <td>否</td>
 <td>排除响应的数据部分。 </td>
 否| <td>假|真</td>
 </tr>
 <tr class="odd">
 <td> skipRounding </td>
 <td>否</td>
 <td>跳过汇总数据值的舍入。 </td>
 否| <td>假|真</td>
 </tr>
 <tr class="even">
 <td>聚合数据</td>
 <td>否</td>
 <td>生成数据维度的汇总值（与维度项目相反）。 </td>
 否| <td>假|真</td>
 </tr>
 <tr class="odd">
 <td> timeField </td>
 <td>否</td>
 <td>事件聚合所基于的时间字段。仅适用于事件数据项。可以是预定义的选项，也可以是具有基于时间的值类型的属性或数据元素的ID。 </td>
 EVENT_DATE | <td> ENROLLMENT_DATE | INCIDENT_DATE | DUE_DATE | COMPLETED_DATE |属性ID&gt; | &lt; &lt;数据元素ID&gt; </td>
 </tr>
 <tr>
 <td> orgUnitField </td>
 <td>否</td>
 <td>事件汇总所基于的组织单位字段。仅适用于事件数据项。可以是具有组织单位值类型的属性或数据元素的ID。默认选项被指定为省略查询参数。
 属性ID&gt; | <td> &lt; &lt;数据元素ID&gt; </td>
 </tr>
 </tbody>
 </table>

 <table>
 <caption>仅用于集群事件分析的查询参数</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 11%" />
 <col style="width: 49%" />
 <col style="width: 19%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 <th>选项</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> clusterSize </td>
 <td>是</td>
 <td>集群的大小（以米为单位）。 </td>
 <td>数值正值</td>
 </tr>
 <tr class="even">
 <td>坐标字段</td>
 <td>否</td>
 <td>地理空间事件分析的基础字段。默认为事件。可以设置为属性的标识符和值类型坐标的数据元素。 </td>
 事件| <td>事件| &lt;attribute-id&gt; | &lt;dataelement-id&gt; </td>
 </tr>
 <tr class="odd">
 <td> bbox </td>
 <td>是</td>
 <td>响应中要包括的边界框/事件区域，格式为&quot;min经度，最小纬度，最大经度，最大纬度&quot;。 </td>
 <td>字符串</td>
 </tr>
 <tr class="even">
 <td> includeClusterPoints </td>
 <td>否</td>
 <td>包括有关每个群集的基础点的信息，如果群集代表的点数量非常多，请小心。 </td>
 否| <td>假|真</td>
 </tr>
 </tbody>
 </table>

### 事件查询分析 { #webapi_event_query_analytics } 

 <!--DHIS2-SECTION-ID:webapi_event_query_analytics-->

*analytics/events/query* 资源可让您查询捕获的
事件。此资源不执行任何聚合，而是让
您查询和过滤有关事件的信息。

    /api/26/analytics/events/query

您可以指定任意数量的维度和任意数量的过滤器
询问。维度项标识符可以引用任何数据元素，
人员属性、人员标识符、固定和相对时间段以及
组织单位。维度可以选择有一个查询运算符和
一个过滤器。事件查询应采用所描述的格式
    以下。

    /api/26/analytics/events/query/<program-id>?startDate=yyyy-MM-dd&endDate=yyyy-MM-dd
      &dimension=ou:<ou-id>;<ou-id>&dimension=<item-id>&dimension=<item-id>:<operator>:<filter>

例如，要从“住院发病率和
2016 年 1 月至 10 月期间的死亡率”计划，其中“性别”
和“年龄”数据元素被包括在内并且“年龄”维度被过滤
在“18”上，您可以使用以下内容
    询问：

    /api/26/analytics/events/query/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31
      &尺寸=ou:O6uvpzGd5pu;fdc6uOvgoji&尺寸=oZg33kd9taw&尺寸=qrur9Dvnyt5:EQ:18

检索“Child”的“Birth”程序阶段的事件
2016 年 3 月至 12 月期间的“计划”计划，其中“重量”
数据元素，过滤大于
    2000年：

    /api/26/analytics/events/query/IpHINAT79UW?stage=A03MvHHogjR&startDate=2016-03-01&endDate=2016-12-31
      &维度=ou:O6uvpzGd5pu&维度=UXz7xuGCEhU:GT:2000

排序可以应用于查询事件的事件日期和
任何尺寸。按事件日期降序和升序排序
您可以使用的“年龄”数据元素维度
    用：

    /api/26/analytics/events/query/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31
      &dimension=ou:O6uvpzGd5pu&dimension=qrur9Dvnyt5&desc=EVENTDATE&asc=qrur9Dvnyt5

分页可以通过指定页码和
页面大小参数。如果指定了页码但未指定页面大小，
将使用 50 的页面大小。如果指定了页面大小但页面
number 不是，将使用页码 1。获取第三页
页面大小为 20 的响应，您可以使用类似的查询
    这：

    /api/26/analytics/events/query/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31
      &dimension=ou:O6uvpzGd5pu&dimension=qrur9Dvnyt5&page=3&pageSize=20

#### 筛选 { #filtering } 

过滤器可以应用于数据元素，人员属性和人员标识符。过滤是通过以下格式的查询参数值完成的：

    ＆dimension = <item-id>：<operator>：<filter-value>

例如，您可以过滤“ Weight”数据元素以获取大于2000且小于4000的值，如下所示：

    ＆dimension = UXz7xuGCEhU：GT：2000＆dimension = UXz7xuGCEhU：LT：4000

您可以使用以下方法过滤多个特定年龄的“年龄”数据元素
像这样的 IN 运算符：

    ＆dimension = qrur9Dvnyt5：IN：18; 19; 20

您可以通过重复运算符和过滤器组件为给定项目指定多个过滤器，所有组件均用分号分隔：

    ＆dimension = qrur9Dvnyt5：GT：5：LT：15

下面列出了可用的运算符。

 <table>
 <caption> 过滤运算符 </caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 80%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 操作员 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> EQ </td>
 <td> 等于 </td>
 </tr>
 <tr class="even">
 <td> GT </td>
 <td> 大于 </td>
 </tr>
 <tr class="odd">
 <td> GE </td>
 <td> 大于等于</td>
 </tr>
 <tr class="even">
 <td> LT </td>
 <td> 小于</td>
 </tr>
 <tr class="odd">
 <td> LE </td>
 <td> 小于等于</td>
 </tr>
 <tr class="even">
 <td> NE </td>
 <td> 不等于 </td>
 </tr>
 <tr class="odd">
 <td> LIKE </td>
 <td> 喜欢（自由文本匹配） </td>
 </tr>
 <tr class="even">
 <td> 在 </td>
 <td> 等于由 &quot;;&quot; </td> 分隔的多个值之一
 </tr>
 </tbody>
 </table>

#### 回应格式 { #response-formats } 

默认的响应表示格式是 JSON。请求必须使用 HTTP *GET* 方法。支持以下响应格式。

  - json（应用程序/ json）

  - jsonp（应用程序/ javascript）

  - xls（application / vnd.ms-excel）

例如，要获得Excel格式的响应，可以在请求URL中使用文件扩展名，如下所示：

    /api/26/analytics/events/query/eBAyeGv0exc.xls?startDate=2016-01-01&endDate=2016-10-31
      &尺寸=ou:O6uvpzGd5pu&尺寸=oZg33kd9taw&尺寸=qrur9Dvnyt5

您可以将hierarchyMeta 查询参数设置为true，以便
在元部分中包括所有祖先组织单位的名称
响应：

    /api/26/analytics/events/query/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31
      &dimension=ou:YuQRtpLP10I&dimension=qrur9Dvnyt5:EQ:50&hierarchyMeta=true

默认响应JSON格式将类似于以下内容：

    {
        “标题”：[
        {
            “名称”：“psi”，
            "column": "事件",
            "type": "java.lang.String",
            “隐藏”：假，
            “元”：假
        },
        {
            “名称”：“ps”，
            "column": "节目阶段",
            "type": "java.lang.String",
            “隐藏”：假，
            “元”：假
        },
        {
            “名称”：“事件日期”，
            "column": "活动日期",
            "type": "java.lang.String",
            “隐藏”：假，
            “元”：假
        },
        {
            “名称”：“坐标”，
            "column": "坐标",
            "type": "java.lang.String",
            “隐藏”：假，
            “元”：假
        },
        {
            “名称”：“乌名称”，
            "column": "组织单位名称",
            "type": "java.lang.String",
            “隐藏”：假，
            “元”：假
        },
        {
            "名称": "oucode",
            "column": "组织单位代码",
            "type": "java.lang.String",
            “隐藏”：假，
            “元”：假
        },
        {
            “名字”：“欧”，
            "column": "组织单位",
            "type": "java.lang.String",
            “隐藏”：假，
            “元”：假
        },
        {
            “名称”：“oZg33kd9taw”，
            “列”：“性别”，
            "type": "java.lang.String",
            “隐藏”：假，
            “元”：假
        },
        {
            “名称”：“qrur9Dvnyt5”，
            "column": "年龄",
            "type": "java.lang.String",
            “隐藏”：假，
            “元”：假
        }],
        “元数据”：{
            “名称”：{
                "qrur9Dvnyt5": "年龄",
                "eBAyeGv0exc": "住院患者发病率和死亡率",
                "ImspTQPwCqd": "塞拉利昂",
                "O6uvpzGd5pu": "博",
                "YuQRtpLP10I": "坏家",
                "oZg33kd9taw": "性别"
            },
            “ouHierarchy”：{
                "YuQRtpLP10I": "/ImspTQPwCqd/O6uvpzGd5pu"
            },
        },
        “宽度”：8，
        “高度”：4，
        “行”：[
            ["yx9IDINf82o", "Zj7UnCAulEk", "2016-08-05", "[5.12, 1.23]", "Ngelehun", "OU_559", "YuQRtpLP10I", "女", "50"],
            ["IPNa7AsCyFt", "Zj7UnCAulEk", "2016-06-12", "[5.22, 1.43]", "Ngelehun", "OU_559", "YuQRtpLP10I", "女", "50"],
            ["ZY9JL9dkhD2", "Zj7UnCAulEk", "2016-06-15", "[5.42, 1.33]", "Ngelehun", "OU_559", "YuQRtpLP10I", "女", "50"],
            [“MYvh4WAUdWt”，“Zj7UnCAulEk”，“2016-06-16”，“[5.32，1.53]”，“Ngelehun”，“OU_559”，“YuQRtpLP10I”，“女”，“50”]
        ]
    }

响应的* header *部分描述了查询的内容
结果。事件唯一标识符，程序阶段标识符，
活动日期，组织单位名称，组织单位代码和
组织单位标识符显示为中的前六个维度
回应，并将永远存在。接下来是数据元素
人员属性和人员标识符，指定为
请求中的尺寸，在这种情况下为“性别”和“年龄”数据
元素尺寸。标头部分包含
“名称”属性中的尺寸项和可读尺寸
“列”属性中的说明。

*metaData* 部分，*ou* 对象包含映射到表示层次结构的字符串的响应中存在的所有组织单位的标识符。此层次结构字符串从根开始列出组织单位的祖先（父）的标识符。 *names* 对象包含响应中映射到其名称的所有项目的标识符。

*rows* 部分包含查询产生的事件。每一行
正好代表一个事件。

为了让事件分析资源在
一个现成的表格的形状，你可以提供*行*和*列*
具有请求的维度标识符的参数以分号分隔
作为值来指示哪些用作表列和行。
事件不是生成一个普通的、规范化的数据源
分析资源现在将生成表格布局中的数据。这
列和行维度必须作为数据维度出现在
查询（不是过滤器）。这样的请求可能如下所示：

    /api/29/analytics.html+css?dimension=dx:cYeuwXTCPkU;fbfJHSPpUQD&dimension=pe:WEEKS_THIS_YEAR&filter=ou:ImspTQPwCqd&displayProperty=SHORTNAME&columns=dx&rows=pe

### 事件汇总分析 { #webapi_event_aggregate_analytics } 

 <!--DHIS2-SECTION-ID:webapi_event_aggregate_analytics-->

*analytics/events/aggregate* 资源可让您检索 *aggregate
DHIS2 中捕获的事件数量*。该资源可让您检索
基于程序和可选的程序阶段聚合数据，以及
允许您过滤任何事件维度。

    /api/26/analytics/events/aggregate

事件聚合资源不返回事件信息
本身，而不是与请求匹配的事件总数
询问。事件维度包括数据元素、人员属性、人员
标识符、期间和组织单位。聚合事件查询
应该是下面描述的格式。

    /api/26/analytics/events/aggregate/<program-id>?startDate=yyyy-MM-dd&endDate=yyyy-MM-dd
      &dimension=ou:<ou-id>;<ou-id>&dimension=<item-id>&dimension=<item-id>:<operator>:<filter>

例如，要从
1 月至 10 月期间的“住院发病率和死亡率”计划
2016 年，其中包含“性别”和“年龄”数据元素，“年龄”
维度项目在“18”上过滤，“性别”项目在过滤上
“女性”，您可以使用以下查询：

    /api/26/analytics/events/aggregate/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31
      &尺寸=ou:O6uvpzGd5pu&尺寸=oZg33kd9taw:EQ:女&尺寸=qrur9Dvnyt5:GT:50

检索固定和相对期间的数据，而不是开始和结束
日期（在这种情况下为2016年5月并持续12个月），以及该组织
与当前用户相关联的广告单元，您可以使用以下查询：

    /api/26/analytics/events/aggregate/eBAyeGv0exc?dimension=pe:201605;LAST_12_MONTHS
      &dimension=ou:USER_ORGUNIT;fdc6uOvgo7ji&dimension=oZg33kd9taw

为了将“女性”指定为数据的“性别”过滤器
响应，意思是“性别”不会是响应的一部分，但会
过滤其中的聚合数字，您可以使用以下语法：

    /api/26/analytics/events/aggregate/eBAyeGv0exc?dimension=pe:2016;
      &dimension=ou:O6uvpzGd5pu&filter=oZg33kd9taw:EQ:女

要将“Bo”组织单位和期间“2016”指定为过滤器，
和“放电方式”和“性别”作为维度，其中“性别”是
在“男性”项目上过滤，您可以使用这样的查询：

    /api/26/analytics/events/aggregate/eBAyeGv0exc?filter=pe:2016&filter=ou:O6uvpzGd5pu
      &dimension=fWIAEtYVEGk&dimension=oZg33kd9taw:EQ:男

要为“放电模式”创建“前 3 名报告”，您可以使用限制
与 sortOrder 查询参数类似
    这：

    /api/26/analytics/events/aggregate/eBAyeGv0exc?filter=pe:2016&filter=ou:O6uvpzGd5pu
      &dimension=fWIAEtYVEGk&limit=3&sortOrder=DESC

要指定具有相应聚合类型的值维度，您
可以使用 value 和aggregationType 查询参数。指定一个
值维度将使分析引擎返回聚合值
对于响应中该维度的值，而不是计数
事件。

    /api/26/analytics/events/aggregate/eBAyeGv0exc.json?stage=Zj7UnCAulEk&dimension=ou:ImspTQPwCqd
      &dimension=pe:LAST_12_MONTHS&dimension=fWIAEtYVEGk&value=qrur9Dvnyt5&aggregationType=AVERAGE

将事件分析聚合基于特定数据元素或属性
对于值类型日期或日期时间，您可以使用 *timeField* 参数：

    /api/29/analytics/events/aggregate/IpHINAT79UW.json?dimension=ou:ImspTQPwCqd
    &dimension=pe:LAST_12_MONTHS&dimension=cejWyOfXge6&stage=A03MvHHogjR&timeField=ENROLLMENT_DATE

将事件分析聚合基于特定数据元素或属性
对于值类型组织单位，您可以使用 *orgUnitField* 参数：

    /api/29/analytics/events/aggregate/eBAyeGv0exc.json?dimension=ou:ImspTQPwCqd
    &dimension=pe:THIS_YEAR&dimension=oZg33kd9taw&stage=Zj7UnCAulEk&orgUnitField=S33cRBsnXPo

#### 范围/图例集 { #ranges-legend-sets } 

对于汇总查询，您可以为数字指定范围/图例集
数据元素和属性维度。目的是将
数值分成范围。例如，代替生成数据
对于不同年份的“年龄”数据元素，您可以将
将信息分为年龄段。为此，数据元素或
属性必须与图例集相关联。格式是
如下面所描述的：

    ？dimension = <item-id>-<legend-set-id>

一个示例如下所示：

    /api/26/analytics/events/aggregate/eBAyeGv0exc.json?stage=Zj7UnCAulEk&dimension=qrur9Dvnyt5-Yf6UHoPkdS6
      &dimension=ou:ImspTQPwCqd&dimension=pe:LAST_12_MONTHS

#### 回应格式 { #response-formats } 

默认的响应表示格式是 JSON。请求必须是
使用 HTTP *GET* 方法。响应将类似于以下内容：

    {
        “标题”：[
            {
                “名称”：“oZg33kd9taw”，
                “列”：“性别”，
                "type": "java.lang.String",
                “元”：假
            },
            {
                “名称”：“qrur9Dvnyt5”，
                "column": "年龄",
                "type": "java.lang.String",
                “元”：假
            },
            {
                “名称”：“pe”，
                "column": "期间",
                "type": "java.lang.String",
                “元”：假
            },
            {
                “名字”：“欧”，
                "column": "组织单位",
                "type": "java.lang.String",
                “元”：假
            },
            {
                “名称”：“值”，
                “列”：“值”，
                "type": "java.lang.String",
                “元”：假
            }
        ],
        “元数据”：{
            “名称”：{
                "eBAyeGv0exc": "住院患者发病率和死亡率"
            }
        },
        “宽度”：5，
        “身高”：39，
        “行”：[
            [
                “女性”，
                “95”，
                “201605”，
                “O6uvpzGd5pu”，
                “2”
            ],
            [
                “女性”，
                “63”，
                “201605”，
                “O6uvpzGd5pu”，
                “2”
            ],
            [
                “女性”，
                “67”，
                “201605”，
                “O6uvpzGd5pu”，
                “1”
            ],
            [
                “女性”，
                “71”，
                “201605”，
                “O6uvpzGd5pu”，
                “1”
            ],
            [
                “女性”，
                “75”，
                “201605”，
                “O6uvpzGd5pu”，
                “14”
            ],
            [
                “女性”，
                “73”，
                “201605”，
                “O6uvpzGd5pu”，
                “5”
            ],
        ]
    }

请注意，单个响应中返回的行数的最大限制为 10
000. 如果查询产生的结果超过最大限制，则会出现 *409 冲突*
将返回状态码。

### 事件聚类分析 { #webapi_event_clustering_analytics } 

 <!--DHIS2-SECTION-ID:webapi_event_clustering_analytics-->

*analytics/events/cluster* 资源提供集群地理空间
事件数据。请求如下所示：

    /api/26/analytics/events/cluster/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31&dimension=ou:LEVEL-2
      &clusterSize=100000&bbox=-13.2682125,7.3721619,-10.4261178,9.904012&includeClusterPoints=false

簇响应提供了底层点的计数，中心点
每个簇的点和范围。如果 *includeClusterPoints* 查询
参数设置为 true，带有标识符的逗号分隔字符串
包括基础事件。示例响应如下所示：

    {
        “标题”：[{
            “名称”：“计数”，
            "column": "计数",
            "type": "java.lang.Long",
            “元”：假
        }, {
            “名称”：“中心”，
            “列”：“中心”，
            "type": "java.lang.String",
            “元”：假
        }, {
            “名称”：“范围”，
            "column": "范围",
            "type": "java.lang.String",
            “元”：假
        }, {
            “名称”：“点”，
            "column": "点",
            "type": "java.lang.String",
            “元”：假
        }],
        “宽度”：3，
        “高度”：4，
        “行”：[
            [“3”，“点（-13.15818 8.47567）”，“盒子（-13.26821 8.4St7215，-13.08711 8.47807）”，“”]，
            [“9”，“点（-13.11184 8.66424）”，“框（-13.24982 8.51961，-13.05816 8.87696）”，“”]，
            [“1”，“点（-12.46144 7.50597）”，“框（-12.46144 7.50597，-12.46144 7.50597）”，“”]，
            [“7”，“点（-12.47964 8.21533）”，“框（-12.91769 7.66775，-12.21011 8.49713）”，“”]
        ]
    }

### 事件计数和范围分析 { #webapi_event_count_extent_analytics } 

 <!--DHIS2-SECTION-ID:webapi_event_count_extent_analytics-->

*analytics/events/count* 资源适用于几何相关的
检索事件的计数和范围（边界框）的请求
对于特定查询。查询语法等于 *events/query*
资源。请求看起来像
    这：

    /api/26/analytics/events/count/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31&dimension=ou:O6uvpzGd5pu

响应将以JSON格式提供计数和范围：

    {
        范围：“框（-13.2682125910096 7.38679562779441，-10.4261178860988 9.90401290212795）”，
        数量：59
    }

## 入学分析 { #webapi_enrollment_analytics } 

 <!--DHIS2-SECTION-ID:webapi_enrollment_analytics-->

注册分析 API 允许您访问聚合事件数据并查询 DHIS2 中捕获的*注册及其事件数据*。除了跟踪的实体属性之外，此资源还允许您根据程序阶段和数据元素检索程序的数据。当查询每个注册中特定计划阶段的事件数据时，每个计划阶段的数据元素值将作为 api 响应中的一行返回。如果在可重复的程序阶段查询数据元素，则 api 响应中的该数据元素将使用最新的数据元素值。

### 尺寸和项目 { #webapi_enrollment_analytics_dimensions } 

 <!--DHIS2-SECTION-ID:webapi_enrollment_analytics_dimensions-->

注册维度包括数据元素，属性，组织单位和期间。查询分析资源将仅返回符合一组条件的注册，并且不执行任何汇总。

<table>
<caption>Enrollment dimensions</caption>
<colgroup>
<col style="width: 27%" />
<col style="width: 11%" />
<col style="width: 60%" />
</colgroup>
<thead>
<tr class="header">
<th>Dimension</th>
<th>Dimension id</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Data elements in program stages</td>
<td>&lt;program stage id&gt;.&lt;data element id&gt;</td>
<td>Data element identifiers must include the program stage when querying data for enrollments.

    dimension=edqlbukwRfQ.vANAXwtLwcT

</td>
</tr>
<tr>
<td>Attributes</td>
<td>&lt;id&gt;</td>
<td>Attribute identifiers</td>
</tr>
<tr>
<td>Periods</td>
<td>pe</td>
<td>ISO periods and relative periods, see &quot;date and period format&quot;</td>
</tr>
<tr>
<td>Organisation units</td>
<td>ou</td>
<td>Organisation unit identifiers and keywords USER_ORGUNIT, USER_ORGUNIT_CHILDREN, USER_ORGUNIT_GRANDCHILDREN, LEVEL-&lt;level&gt; and OU_GROUP-&lt;group-id&gt;</td>
</tr>
</tbody>
</table>

### 注册查询分析 { #webapi_enrollment_query_analytics } 

 <!--DHIS2-SECTION-ID:webapi_enrollment_query_analytics-->

*analytics/enrollments/query* 资源允许您查询捕获的注册。此资源不执行任何聚合，而是让您查询和过滤有关注册的信息。

    /api/32/analytics/enrollments/query

您可以在查询中指定任意数量的维度和任意数量的过滤器。维项目标识符可以引用程序阶段中的任何数据元素，跟踪的实体属性，固定和相对期间以及组织单位。维度可以选择具有查询运算符和过滤器。注册查询应采用以下所述的格式。

    /api/32/analytics/enrollments/query/<program-id>?startDate=yyyy-MM-dd&endDate=yyyy-MM-dd
      &dimension=ou:<ou-id>;<ou-id>&dimension=<item-id>&dimension=<item-id>:<operator>:<filter>

例如，要检索 2019 年 1 月以来“产前护理”计划的注册情况，其中“名字”是从属性中选取的，“慢性病”和“吸烟”数据元素包含在第一个计划阶段中，并且来自以下程序阶段的“血红蛋白值” - 并且仅包含患有“慢性病症”的女性，您可以使用以下查询：

    /api/32/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=ou:ImspTQPwCqd&dimension=w75KJ2mc4zz
        &尺寸=WZbXY0S00lP.de0FEHSIoxh:eq:1&尺寸=w75KJ2mc4zz&尺寸=WZbXY0S00lP.sWoqcoByYmD
        &dimension=edqlbukwRfQ.vANAXwtLwcT&startDate=2019-01-01&endDate=2019-01-31

要检索上个月（相对于执行查询的时间点）“产前护理”计划的注册情况，其中“慢性病”和“吸烟”数据元素包含在第一个计划阶段，并且“随访计划阶段的“血红蛋白值”——仅包括血红蛋白低于 20 的吸烟女性：

    api/32/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=ou:ImspTQPwCqd
        &尺寸=WZbXY0S00lP.de0FEHSIoxh&尺寸=w75KJ2mc4zz&尺寸=WZbXY0S00lP.sWoqcoByYmD:eq:1
        &dimension=edqlbukwRfQ.vANAXwtLwcT:lt:20&dimension=pe:LAST_MONTH

可以将排序应用于注册的查询和注册的事件日期：

        /api/32/analytics/enrollments/query/WSGAb5XwJ3Y.xls?dimension=ou:ImspTQPwCqd
        &列=w75KJ2mc4zz&维度=WZbXY0S00lP.sWoqcoByYmD&维度=pe:LAST_MONTH&阶段=WZbXY0S00lP
        &pageSize=10&page=1&asc=注册日期&ouMode=后代

通过指定页码和页面大小参数，可以将分页应用于查询。如果指定了页码，但未指定页码，则将使用50页码。如果指定了页面大小，但未指定页面号，则将使用页面号1。要获得页面大小为10的响应的第二页，可以使用如下查询：

    api/32/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=ou:ImspTQPwCqd
        &尺寸=WZbXY0S00lP.de0FEHSIoxh&尺寸=w75KJ2mc4zz&尺寸=pe:LAST_MONTH
        &dimension=WZbXY0S00lP.sWoqcoByYmD&pageSize=10&page=2

#### 筛选 { #filtering } 

过滤器可以应用于数据元素，人员属性和人员标识符。过滤是通过以下格式的查询参数值完成的：

    ＆dimension = <item-id>：<operator>：<filter-value>

例如，您可以过滤“ Weight”数据元素以获取大于2000且小于4000的值，如下所示：

    ＆dimension = WZbXY0S00lP.UXz7xuGCEhU：GT：2000＆dimension = WZbXY0S00lP.UXz7xuGCEhU：LT：4000

您可以使用IN运算符过滤多个特定年龄的“年龄”属性，如下所示：

    ＆dimension = qrur9Dvnyt5：IN：18; 19; 20

您可以通过重复运算符和过滤器组件为给定项目指定多个过滤器，所有组件均用分号分隔：

    ＆dimension = qrur9Dvnyt5：GT：5：LT：15

下面列出了可用的运算符。

 <table>
 <caption> 过滤运算符 </caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 80%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 操作员 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr>
 <td> EQ </td>
 <td> 等于 </td>
 </tr>
 <tr>
 <td> GT </td>
 <td> 大于 </td>
 </tr>
 <tr>
 <td> GE </td>
 <td> 大于等于</td>
 </tr>
 <tr>
 <td> LT </td>
 <td> 小于</td>
 </tr>
 <tr>
 <td> LE </td>
 <td> 小于等于</td>
 </tr>
 <tr>
 <td> NE </td>
 <td> 不等于 </td>
 </tr>
 <tr>
 <td> LIKE </td>
 <td> 喜欢（自由文本匹配） </td>
 </tr>
 <tr>
 <td> 在 </td>
 <td> 等于由 &quot;;&quot; </td> 分隔的多个值之一
 </tr>
 </tbody>
 </table>

### 请求查询参数 { #webapi_enrollment_analytics_query_parameters } 

 <!--DHIS2-SECTION-ID:webapi_enrollment_analytics_query_parameters-->

通过分析注册查询API，您可以指定一系列查询参数。

<table>
<caption>注册查询 enpoint 的查询参数</caption>
<colgroup>
<col style="width: 20%" />
<col style="width: 11%" />
<col style="width: 48%" />
<col style="width: 19%" />
</colgroup>
<thead>
<tr class="header">
<th>查询参数</th>
<th>必填</th>
<th>说明</th>
<th>选项（默认为第一个）</th>
</tr>
</thead>
<tbody>
<tr>
<td>程序</td>
<td>是</td>
<td>程序标识符。</td>
<td>任何程序标识符</td>
</tr>
<tr>
<td>开始日期</td>
<td>否</td>
<td>注册开始日期。</td>
<td>yyyy-MM-dd 格式的日期</td>
</tr>
<tr>
<td>结束日期</td>
<td>否</td>
<td>注册结束日期。</td>
<td>yyyy-MM-dd 格式的日期</td>
</tr>
<tr>
<td>尺寸</td>
<td>是</td>
<td>维度标识符，包括数据元素、属性、计划指标、期间、组织单位和组织单位组集。参数可以重复任意次。项目过滤器可以应用于以下格式的维度：&lt;item-id&gt;:&lt; 运算符&gt;：&lt;过滤器&gt;。过滤器值不区分大小写。</td>
<td>运算符可以是 EQ | GT |通用电气| LT | LE |东北 |喜欢 | IN</td>
</tr>
<tr>
<td>过滤器</td>
<td>否</td>
<td>维度标识符，包括数据元素、属性、期间、组织单位和组织单位组集。参数可以重复任意次。项目过滤器可以应用于以下格式的维度：&lt;item-id&gt;:&lt; 运算符&gt;：&lt;过滤器&gt;。过滤器值不区分大小写。</td>
<td></td>
</tr>
<tr>
<td>节目状态</td>
<td>否</td>
<td>指定要包含的注册的注册状态。</td>
<td>活动 |已完成 |已取消</td>
</tr>
<tr>
<td>relativePeriodDate</td>
<td>字符串</td>
<td>否</td>
<td>日期标识符，例如：&quot;2016-01-01&quot;。覆盖相对期间的开始日期</td>
</tr>
<tr>
<td>ouMode</td>
<td>否</td>
<td>选择组织单位的方式。默认为 DESCENDANTS，表示层次结构中的所有子单元。 CHILDREN 是指层次结构中的直接子级； SELECTED 仅指选定的组织部门。</td>
<td>后代，儿童，选定</td>
</tr>
<tr>
<td>asc</td>
<td>否</td>
<td>维度按升序排序，可以引用注册日期、事件日期、组织单位名称和代码。</td>
<td> 注册日期 |事件日期|欧纳姆 | OUCODE </td>
</tr>
<tr>
<td>desc</td>
<td>否</td>
<td>维度按降序排序，可以引用注册日期、事件日期、组织单位名称和代码。</td>
<td> 注册日期 |事件日期|欧纳姆 | OUCODE </td>
</tr>
<td>hierarchyMeta</td>
<td>否</td>
<td>在元数据中包含组织单位祖先的名称和组织单位的层次结构路径。</td>
<td>假 | true</td>
</tr>
<tr>
<td>仅坐标</td>
<td>否</td>
<td>是否仅返回具有坐标的注册。</td>
<td>假 | true</td>
</tr>
<tr>
<td>页面</td>
<td>否</td>
<td>页码。默认页面为 1。</td>
<td>正数值</td>
</tr>
<tr>
<td>页面大小</td>
<td>否</td>
<td>页面大小。默认大小为每页 50 项。</td>
<td>数字零或正值</td>
</tr>
</tbody>
</table>

#### 回应格式 { #response-formats } 

默认的响应表示格式是 JSON。请求必须使用 HTTP *GET* 方法。支持以下响应格式。

  - json（应用程序/ json）
  - xml（应用程序/ xml）
  - xls（application / vnd.ms-excel）
  - csv（应用程序/ csv）
  - html（text / html）
  - html + css（text / html）

例如，要获得Excel格式的响应，可以在请求URL中使用文件扩展名，如下所示：

    /api/32/analytics/enrollments/query/WSGAb5XwJ3Y.xls?dimension=ou:ImspTQPwCqd&dimension=WZbXY0S00lP.de0FEHSIoxh
        &列=w75KJ2mc4zz&维度=WZbXY0S00lP.sWoqcoByYmD&维度=pe:LAST_MONTH&阶段=WZbXY0S00lP
        &pageSize=10&page=1&asc=注册日期&ouMode=后代

默认响应JSON格式将类似于以下内容：

    {
        “标题”：[
            {
                “名称”：“pi”，
                "column": "入学情况",
                “值类型”：“文本”，
                "type": "java.lang.String",
                “隐藏”：假，
                “元”：正确
            },
            {
                “姓名”：“泰”，
                "column": "跟踪的实体实例",
                “值类型”：“文本”，
                "type": "java.lang.String",
                “隐藏”：假，
                “元”：正确
            },
            {
                "name": "注册日期",
                "column": "入学日期",
                “值类型”：“日期”，
                “类型”：“java.util.Date”，
                “隐藏”：假，
                “元”：正确
            },
            {
                “名称”：“事件日期”，
                "column": "事件发生日期",
                “值类型”：“日期”，
                “类型”：“java.util.Date”，
                “隐藏”：假，
                “元”：正确
            },
            {
                “名称”：“几何”，
                “列”：“几何”，
                “值类型”：“文本”，
                "type": "java.lang.String",
                “隐藏”：假，
                “元”：正确
            },
            {
                “名称”：“经度”，
                "column": "经度",
                “值类型”：“数字”，
                “类型”：“java.lang.Double”，
                “隐藏”：假，
                “元”：正确
            },
            {
                “名称”：“纬度”，
                "column": "纬度",
                “值类型”：“数字”，
                “类型”：“java.lang.Double”，
                “隐藏”：假，
                “元”：正确
            },
            {
                “名称”：“乌名称”，
                "column": "组织单位名称",
                “值类型”：“文本”，
                "type": "java.lang.String",
                “隐藏”：假，
                “元”：正确
            },
            {
                "名称": "oucode",
                "column": "组织单位代码",
                “值类型”：“文本”，
                "type": "java.lang.String",
                “隐藏”：假，
                “元”：正确
            },
            {
                “名字”：“欧”，
                "column": "组织单位",
                “值类型”：“文本”，
                "type": "java.lang.String",
                “隐藏”：假，
                “元”：正确
            },
            {
                “名称”：“de0FEHSIoxh”，
                "column": "WHOMCH 慢性病",
                “值类型”：“布尔值”，
                “类型”：“java.lang.Boolean”，
                “隐藏”：假，
                “元”：正确
            },
            {
                “名称”：“sWoqcoByYmD”，
                "column": "WHOMCH 吸烟",
                “值类型”：“布尔值”，
                “类型”：“java.lang.Boolean”，
                “隐藏”：假，
                “元”：正确
            }
        ],
        “元数据”：{
            “寻呼机”： {
                “第2页，
                “总计”：163，
                “页面大小”：4，
                “页数”：41
            },
            “项目”： {
                “ImspTQPwCqd”：{
                    “名称”：“塞拉利昂”
                },
                “PFDfvmGpsR3”：{
                    “name”：“出生时的护理”
                },
                “bbKtnxRZKEP”：{
                    "name": "产后护理就诊"
                },
                “欧”：{
                    "name": "组织单位"
                },
                “PUZaKR0Jh2k”：{
                    "name": "之前的交付"
                },
                “edqlbukwRfQ”：{
                    "name": "产前检查"
                },
                “WZbXY0S00lP”：{
                    "name": "第一次产前检查"
                },
                “sWoqcoByYmD”：{
                    “name”：“WHOMCH 吸烟”
                },
                “WSGAb5XwJ3Y”：{
                    “名称”：“世界卫生组织 RMNCH 追踪器”
                },
                “de0FEHSIoxh”：{
                    “name”：“WHOMCH 慢性病”
                }
            },
            “方面”： {
                “pe”：[]，
                “欧”：[
                    “ImspTQPwCqd”
                ],
                "sWoqcoByYmD": [],
                “de0FEHSIoxh”：[]
            }
        },
        “宽度”：12，
        “行”：[
            [
                “A0cP533hIQv”，
                “to8G9jAprnx”，
                “2019-02-02 12:05:00.0”,
                “2019-02-02 12:05:00.0”,
                "",
                “0.0”，
                “0.0”，
                “Tonkomba MCHP”，
                “OU_193264”，
                “xIMxph4NMP1”，
                “0”,
                “1”
            ],
            [
                “ZqiUn2uXmBi”，
                “SJtv0WzoYki”，
                “2019-02-02 12:05:00.0”,
                “2019-02-02 12:05:00.0”,
                "",
                “0.0”，
                “0.0”，
                “Mawoma MCHP”，
                “OU_254973”，
                “Srnpwq8jKbp”，
                “0”,
                “0”
            ],
            [
                “lE747mUAtbz”，
                “PGzTv2A1xzn”，
                “2019-02-02 12:05:00.0”,
                “2019-02-02 12:05:00.0”,
                "",
                “0.0”，
                “0.0”，
                “群翔热电联产”，
                “OU_193254”，
                “tdhB1JXYBx2”，
                "",
                “0”
            ],
            [
                “nmcqu9QF8ow”，
                “pav3tGLjYuq”，
                “2019-02-03 12:05:00.0”,
                “2019-02-03 12:05:00.0”,
                "",
                “0.0”，
                “0.0”，
                “科尔布 MCHP”，
                “OU_678893”，
                “m73lWmo5BDG”，
                "",
                “1”
            ]
        ],
        “高度”：4
    }

响应的* header *部分描述了查询结果的内容。注册唯一标识符，跟踪的实体实例标识符，注册日期，事件日期，几何形状，纬度，对数，组织单位名称和组织单位代码显示为响应中的第一个维度，并将始终存在。接下来是数据元素，以及在请求中指定为维度的跟踪实体属性，在本例中为“ WHOMCH慢性病”和“ WHOMCH吸烟”数据元素的维度。标题部分在“名称”属性中包含维度项目的标识符，在“列”属性中包含可读的维度描述。

*metaData* 部分，*ou* 对象包含映射到表示层次结构的字符串的响应中存在的所有组织单位的标识符。此层次结构字符串从根开始列出组织单位的祖先（父）的标识符。 *names* 对象包含响应中映射到其名称的所有项目的标识符。

*rows* 部分包含查询生成的注册。每一行正好代表一个注册。

## 组织单位分析 { #webapi_org_unit_analytics } 

 <!--DHIS2-SECTION-ID:webapi_org_unit_analytics-->

组织单位分析API提供有关按组织单位组集分类的组织单位的统计信息，即组织单位组集中每个组织单位组的组织单位计数。

    GET /api/orgUnitAnalytics?ou=<org-unit-id>&ougs=<org-unit-group-set-id>

该API需要至少一个组织单位和至少一个组织单位组集。可以提供多个组织单位和组集，以分号分隔。

### 请求查询参数 { #request-query-parameters } 

组织单位分析资源使您可以指定一系列查询参数：

 <table>
 <caption>组织单位分析查询参数</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 60%" />
 <col style="width: 20%" />
 </colgroup>
 <thead>
 <tr class="header">
 属性<th> </th>
 <th>说明</th>
 <th>必需</th>
 </tr>
 </thead>
 <tbody>
 <tr>
 <td> ou </td>
 <td>组织单位标识符，可能用分号分隔。 </td>
 <td>是</td>
 </tr>
 <tr>
 <td> ougs </td>
 <td>组织单位组标识符，可能用分号分隔。 </td>
 <td>是</td>
 </tr>
 <tr>
 <td>列</td>
 <td>组织单位组标识符，可能用分号分隔。定义哪些组集在表布局中呈现为列。 </td>
 <td>否</td>
 </tr>
 </tbody>
 </table>

响应将包含用于父组织单位的列，用于请求的每个组织单位组集部分的列以及用于计数的列。统计信息包括组织单位的数量，该组织单位是请求中指定的组织单位的子层次结构的一部分。该响应包含一个元数据部分，该元数据部分指定由其标识符引用的响应的每个组织单位和组织单位组部分的名称。

默认响应以单一的 `count` 列进行规范化。通过使用 `columns` 查询参数指定至少一个 org 单元组集，可以用表格布局呈现响应。

### 回应格式 { #response-formats } 

组织单位分析端点支持以下表示格式：

- json（应用程序/ json）
- csv（应用程序/ csv）
- xls（application / vnd.ms-excel）
- pdf（应用程序/ pdf）

### 例子 { #examples } 

要获取组织单位和组织单位组集的组织单位分析，请执行以下操作：

    GET /api/orgUnitAnalytics?ou=lc3eMKXaEfw&ougs=J5jldMd8OHv

要获取两个组织单位和两个组织单位组集合的组织单位分析数据：

    GET /api/orgUnitAnalytics?ou=lc3eMKXaEfw;PMa2VCrupOd&ougs=J5jldMd8OHv;Bpx0589u8y0

要以表格模式获取组织单位分析数据，并将一组设置为列：

    GET /api/orgUnitAnalytics?ou=fdc6uOvgoji;jUb8gELQApl;lc3eMKXaEfw;PMa2VCrupOd&ougs=J5jldMd8OHv&columns=J5jldMd8OHv

## 数据集报告 { #webapi_data_set_report } 

 <!--DHIS2-SECTION-ID:webapi_data_set_report-->

可以使用以下方法通过 Web API 生成数据集报告
*/dataSetReport* 资源。该资源生成数据集报告
并以 HTML 表格的形式返回结果。

    /api/31/dataSetReport

### 请求查询参数 { #request-query-parameters } 

该请求支持以下参数：

 <table>
 <caption>数据集报告查询参数</caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 50%" />
 <col style="width: 17%" />
 <col style="width: 17%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>说明</th>
 <th>类型</th>
 <th>必需</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ds </td>
 <td>用于创建报告的数据集。 </td>
 <td>数据集UID </td>
 <td>是</td>
 </tr>
 <tr class="even">
 <td> pe </td>
 <td>创建报告所依据的期间。 </td>
 <td> ISO字符串</td>
 <td>是</td>
 </tr>
 <tr class="odd">
 <td> ou </td>
 <td>用于创建报告的组织单位。 </td>
 <td>组织单位UID </td>
 <td>是</td>
 </tr>
 <tr class="even">
 <td>过滤器</td>
 <td>用作报表过滤器的过滤器。可以重复多次。遵循分析API语法。 </td>
 <td>一个或多个UID </td>
 <td>否</td>
 </tr>
 <tr class="odd">
 <td> selectedUnitOnly </td>
 <td>是仅使用捕获的数据还是聚合的数据。 </td>
 <td>布尔值</td>
 <td>否</td>
 </tr>
 </tbody>
 </table>

The data set report resource accepts `GET` requests only. The response content type is `application/json` and returns data in a grid. This endpoint works for all types of data sets, including default, section and custom forms.

检索2018年数据集和组织单位报告的示例请求如下所示：

    GET /api/31/dataSetReport?ds=BfMAe6Itzgt&pe=201810&ou=ImspTQPwCqd&selectedUnitOnly=false

要获得带有过滤器的数据集报告，可以使用`filter`参数。在这种情况下，过滤器基于一个组织单位组集和两个组织单位组：

    GET /api/31/dataSetReport?ds=BfMAe6Itzgt&pe=201810&ou=ImspTQPwCqd&filter=J5jldMd8OHv:RXL3lPSK8oG;tDZVQ1WtwpA

### 回应格式 { #response-formats } 

数据集报告端点支持以下格式的输出。您可以使用文件扩展名或 `Accept` HTTP 标头检索特定端点。

- json（应用程序/ json）
- pdf（应用程序/ pdf）
- xls（application / vnd.ms-excel）

### 自订表格 { #custom-forms } 

有一个专用端点可用于带有自定义 HTML 表单的数据集。该端点会返回内容类型为 `text/html`、已插入数据的 HTML 表单内容。请注意，您也可以对带有自定义表单的数据集使用通用数据集报告端点；但这将以 JSON 格式返回网格报告。该端点仅适用于带有自定义 HTML 表单的数据集。

    获取 /api/31/dataSetReport/custom

否则，此端点的语法等于常规数据集报告端点。要检索自定义HTML数据集报告，您可以发出如下请求：

    GET /api/31/dataSetReport/custom?ds=lyLU2wR22tC&pe=201810&ou=ImspTQPwCqd


## 推送分析 { #webapi_push_analysis } 

 <!--DHIS2-SECTION-ID:webapi_push_analysis-->

推送分析 API 包括用于预览推送分析的端点
报告登录用户并手动触发系统
生成和发送推送分析报告，除了正常的 CRUD
操作。使用创建和更新端点进行推送时
分析，推送分析将根据
推分析的性质。删除或更新一个
禁用推送分析，作业也将停止运行
将来。

要获取现有推送分析的HTML预览，您可以执行GET
请求到以下端点：

    /api/26/pushAnalysis/<id>/render

要手动触发推送分析作业，您可以执行 POST 请求以
这个端点：

    /api/26/pushAnalysis/<id>/run

推送分析包含以下属性，其中一些是
自动运行推送分析作业所需的资源：

<table>
<caption>Push analysis properties</caption>
<colgroup>
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th>Property</th>
<th>Description</th>
<th>Type</th>
<th>Required</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>dashboard</td>
<td>Dashboard on which reports are based</td>
<td>Dashboard UID</td>
<td>Yes</td>
</tr>
<tr class="even">
<td>message</td>
<td>Appears after title in reports</td>
<td>String</td>
<td>No</td>
</tr>
<tr class="odd">
<td>recipientUserGroups</td>
<td>A set of user groups who should receive the reports</td>
<td>One or more user Group UID</td>
<td>No. Scheduled jobs without any recipient will be skipped.</td>
</tr>
<tr class="even">
<td>enabled</td>
<td>Indicated whether this push analysis should be scheduled or not. False by default.</td>
<td>Boolean</td>
<td>Yes. Must be true to be scheduled.</td>
</tr>
<tr class="odd">
<td>schedulingFrequency</td>
<td>The frequency of which reports should be scheduled.</td>
<td>&quot;DAILY&quot;, &quot;WEEKLY&quot;, &quot;MONTHLY&quot;</td>
<td>No. Push analysis without a frequency will not be scheduled</td>
</tr>
<tr class="even">
<td>schedulingDayOfFrequency</td>
<td>The day in the frequency the job should be scheduled.</td>
<td>Integer. Any value when frequency is &quot;DAILY&quot;. 0-7 when frequency is &quot;WEEKLY&quot;. 1-31 when frequency is &quot;MONTHLY&quot;</td>
<td>No. Push analysis without a valid day of frequency for the frequency set will not be scheduled.</td>
</tr>
</tbody>
</table>

## 数据使用情况分析 { #webapi_usage_analytics } 

 <!--DHIS2-SECTION-ID:webapi_usage_analytics-->

使用情况分析 API 可让您访问有关人们使用情况的信息
使用基于数据分析的 DHIS2。当用户访问收藏夹时，
事件被记录。事件由用户名、UID 组成
最喜欢的、事件发生的时间以及事件的类型。这
表中列出了不同类型的事件。

    /api/26/dataStatistics

使用情况分析 API 可让您检索使用情况的汇总快照
基于时间间隔的分析。 API 捕获用户视图（对于
例如，图表或数据透视表被用户查看的次数
用户）和保存的分析收藏夹（例如收藏夹图表和
数据透视表）。 DHIS2 将捕获夜间快照，然后
应要求汇总。

### 请求查询参数 { #webapi_usage_analytics_request_query_parameters } 

 <!--DHIS2-SECTION-ID:webapi_usage_analytics_request_query_parameters-->

使用情况分析（数据统计）API支持两种操作：

  - POST：创建一个视图事件

  - GET：检索聚合统计信息

### 创建视图事件（POST） { #webapi_usage_analytics_create_view_events } 

 <!--DHIS2-SECTION-ID:webapi_usage_analytics_create_view_events-->

使用情况分析 API 可让您创建事件视图。这
dataStatisticsEventType 参数描述了项目的类型
看过。最喜欢的参数表示相关的标识符
最喜欢的。

创建新事件视图的 URL
    图表：

    POST /api/24/dataStatistics?eventType=CHART_VIEW&favorite=LW0O27b7TdD

成功的保存操作将返回HTTP状态代码201。该表
下面显示了受支持的事件类型。

<table>
<caption>Supported event types</caption>
<colgroup>
<col style="width: 38%" />
<col style="width: 61%" />
</colgroup>
<thead>
<tr class="header">
<th>Key</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>REPORT_TABLE_VIEW</td>
<td>Report table (pivot table) view</td>
</tr>
<tr class="even">
<td>CHART_VIEW</td>
<td>Chart view</td>
</tr>
<tr class="odd">
<td>MAP_VIEW</td>
<td>Map view (GIS)</td>
</tr>
<tr class="even">
<td>EVENT_REPORT_VIEW</td>
<td>Event report view</td>
</tr>
<tr class="odd">
<td>EVENT_CHART_VIEW</td>
<td>Event chart view</td>
</tr>
<tr class="even">
<td>DASHBOARD_VIEW</td>
<td>Dashboard view</td>
</tr>
<tr class="odd">
<td>DATA_SET_REPORT_VIEW</td>
<td>Data set report view</td>
</tr>
</tbody>
</table>

### 检索汇总的使用情况分析报告（GET） { #webapi_aggregated_usage_analytics } 

 <!--DHIS2-SECTION-ID:webapi_aggregated_usage_analytics-->

使用情况分析（数据统计）API 允许您指定特定查询
请求汇总报告时的参数。

 <table>
 <caption>查询参数以进行汇总使用情况分析（数据统计）</caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 <th>选项</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>开始日期</td>
 <td>是</td>
 <td>期间</td>的开始日期
 <td> yyyy-MM-dd格式的日期</td>
 </tr>
 <tr class="even">
 <td>结束日期</td>
 <td>是</td>
 <td>期间</td>的结束日期
 <td> yyyy-MM-dd格式的日期</td>
 </tr>
 <tr class="odd">
 <td>间隔</td>
 <td>是</td>
 <td>要汇总的间隔类型</td>
 年，月，月，日的星期天<td> </td>
 </tr>
 </tbody>
 </table>

startDate 和 endDate 参数指定期间
将在聚合中使用快照。您必须格式化日期
如上图所示。如果在指定时间段内没有保存快照，则
空列表被送回。称为间隔的参数指定了什么
将进行聚合类型。

用于创建每月查询的 API 查询
    聚合：

    GET /api/24/dataStatistics?startDate=2014-01-02&endDate=2016-01-01&interval=MONTH

### 检索热门收藏夹 { #webapi_usage_analytics_top_favorites } 

 <!--DHIS2-SECTION-ID:webapi_usage_analytics_top_favorites-->

使用情况分析 API 可让您检索最常用的
DHIS2，并由用户。

 <table>
 <caption>热门收藏夹的查询参数</caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 <th>选项</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> eventType </td>
 <td>是</td>
 <td>数据统计事件类型</td>
 <td>参见上表</td>
 </tr>
 <tr class="even">
 <td>页面大小</td>
 <td>否</td>
 <td>返回的列表大小</td>
 <td>例如5、10、25。默认值为25 </td>
 </tr>
 <tr class="odd">
 <td> sortOrder </td>
 <td>否</td>
 <td>下降或上升</td>
 <td> ASC或DESC。默认为DESC。 </td>
 </tr>
 <tr class="even">
 <td>用户名</td>
 <td>否</td>
 <td>如果指定，则响应将仅包含此用户的收藏夹。 </td>
 <td>例如'admin'</td>
 </tr>
 </tbody>
 </table>

无需用户名即可使用API查询，然后会找到最上面的
系统的收藏夹。如果指定了用户名，则响应将
只包含最喜欢的
    用户。

    /api/24/dataStatistics/favorites?eventType=CHART_VIEW&pageSize=25&sortOrder=ASC

    /api/24/dataStatistics/favorites?eventType=CHART_VIEW&pageSize=25&sortOrder=ASC&用户名=admin

### 回应格式 { #webapi_usage_analytics_response_format } 

 <!--DHIS2-SECTION-ID:webapi_usage_analytics_response_format-->

您可以在使用情况分析响应中返回聚合数据
几种表示格式。默认格式为 JSON。这
可用的格式和内容类型有：

  - json（应用程序/ json）

  - xml（应用程序/ xml）

  - html（text / html）

API查询，请求XML的使用情况分析响应
    格式：

    /api/24/dataStatistics.xml?startDate=2014-01-01&endDate=2016-01-01&interval=WEEK

您必须使用 HTTP 检索聚合使用情况分析响应
获取方法。这允许您直接从网页和其他
启用 HTTP 的客户端对使用情况分析响应。做功能性
测试使用 cURL 库。

对演示数据库执行此命令以获取使用情况分析
JSON格式的响应：

    卷曲“play.dhis2.org/demo/api/24/dataStatistics?startDate=2016-02-01&endDate=2016-02-14&
    间隔=周”-u 管理:区

JSON响应如下所示：

    [
      {
        “年份”：2016年，
        “周”：5，
        “地图视图”：2181，
        “图表视图”：2227，
        “报告表视图”：5633，
        “事件报告视图”：6757，
        “事件图表视图”：9860，
        “仪表板视图”：10082，
        “总观看次数”：46346，
        “平均观看次数”：468，
        “平均地图浏览次数”：22，
        “平均图表视图”：22，
        “平均报告表视图”：56，
        “平均事件报告浏览次数”：68，
        “平均事件图表视图”：99，
        “平均仪表板视图”：101，
        “保存的地图”：1805，
        “保存的图表”：2205，
        “保存的报告表”：1995，
        “保存的事件报告”：1679，
        “保存的事件图表”：1613，
        “保存的仪表板”：0，
        “保存的指标”：1831，
        “活跃用户”：99，
        “用户”：969
      },
      {
        “年份”：2016年，
        “周”：6，
        “地图视图”：2018，
        “图表视图”：2267，
        “报告表视图”：4714，
        “事件报告视图”：6697，
        “事件图表视图”：9511，
        “仪表板视图”：12181，
        “总观看次数”：47746，
        “平均观看次数”：497，
        “平均地图浏览次数”：21，
        “平均图表视图”：23，
        “平均报告表视图”：49，
        “平均事件报告浏览次数”：69，
        “平均事件图表视图”：99，
        “平均仪表板视图”：126，
        “保存的地图”：1643，
        “保存的图表”：1935，
        “保存的报告表”：1867，
        “保存的事件报告”：1977，
        第1714章
        “保存的仪表板”：0，
        “保存的指标”：1646，
        “活跃用户”：96，
        “用户”：953
      }
    ]

### 检索收藏的统计信息 { #webapi_usage_analytics_retrieve_favorite_statistics } 

 <!--DHIS2-SECTION-ID:webapi_usage_analytics_retrieve_favorite_statistics-->

您可以使用
*收藏夹* 资源，其中 *{favorite-id}* 应替换为
感兴趣的收藏夹的标识符：

    /api/24/dataStatistics/favorites/{favorite-id}.json

响应将包含给定收藏的观看次数和
看起来像这样：

    {
      “观看次数”：3
    }

## 地理空间特征 { #webapi_geospatial_features } 

 <!--DHIS2-SECTION-ID:webapi_geospatial_features-->

* geoFeatures *资源使您可以从以下位置检索地理空间信息
DHIS2。地理空间要素与组织单位一起存储。
检索要素的语法与用于
分析资源的组织单位维度。它是
建议您先阅读Analytics API资源，然后再继续
阅读本节。您必须使用GET请求类型，并且只能使用JSON
支持响应格式。

例如，在以下位置检索所有组织单位的地理特征
组织单位层次结构中的第 3 级，您可以使用 GET 请求
使用以下网址：

    /api/26/geoFeatures.json?ou=ou:LEVEL-3

在以下级别检索组织单位的地理特征
您可以使用单位网址的边界（例如，第2级）：

    /api/26/geoFeatures.json?ou=ou:LEVEL-4;O6uvpzGd5pu

响应属性的语义描述如下
桌子。

 <table>
 <caption> 地理特征响应 </caption>
 <colgroup>
 <col style="width: 14%" />
 <col style="width: 85%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 属性 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ID </td>
 <td> 组织单位/地理特征标识符 </td>
 </tr>
 <tr class="even">
 <td> na </td>
 <td> 组织单位/地理要素名称 </td>
 </tr>
 <tr class="odd">
 <td> hcd </td>
 <td> 具有向下的坐标，指示是否存在一个或多个具有坐标的子组织单位（层次结构中的下方）</td>
 </tr>
 <tr class="even">
 <td> hcu </td>
 <td> 有坐标向上，表示上级组织单位是否有坐标（层级上） </td>
 </tr>
 <tr class="odd">
 <td> le </td>
 <td> 此组织单位/地理特征的级别。 </td>
 </tr>
 <tr class="even">
 <td> pg </td>
 <td> 父图，父组织单元标识符的图直到层次结构中的根 </td>
 </tr>
 <tr class="odd">
 <td> pi </td>
 <td> Parent identifier，该组织单元的父标识 </td>
 </tr>
 <tr class="even">
 <td> pn </td>
 <td> Parent name，该组织单位的父名称 </td>
 </tr>
 <tr class="odd">
 <td> ty </td>
 <td> 地理要素类型，1 = 点，2 = 多边形或多多边形 </td>
 </tr>
 <tr class="even">
 <td> co </td>
 <td> 此地理要素的坐标 </td>
 </tr>
 </tbody>
 </table>

### GeoJSON { #geojson }

要导出GeoJSON，您可以简单地将* .geosjon *添加为
端点* / api / organisationUnits *，或者您可以使用* Accept *标头
* application / json + geojson *。

支持两个参数**level**（默认为1）和**parent**
（默认为根组织单位），两者都可以添加多次，
下面是一些例子。

获得第2级和第4级的所有功能：

    /api/26/organizationUnits.geojson?level=2&level=4

使用边界组织单位获取级别3的所有功能：

    /api/26/organizationUnits.geojson?parent=fdc6uOvgoji&level=3

## 生成资源和分析表 { #webapi_generating_resource_analytics_tables } 

 <!--DHIS2-SECTION-ID:webapi_generating_resource_analytics_tables-->

DHIS2具有一组生成的数据库表，这些表用作
各种系统功能的基础。这些表可以执行
立即或计划通过以下方式定期执行
用户界面。它们也可以通过Web API生成为
在本节中说明。此任务通常是系统任务
管理员，而不消耗客户。

资源表由 DHIS2 应用程序内部使用
各种分析功能。这些表对用户也很有价值
编写高级 SQL 报告。它们可以通过 POST 或 PUT 生成
请求到以下 URL：

    /api/26/resourceTables

分析表针对数据聚合进行了优化并使用
目前在 DHIS2 中用于数据透视表模块。分析表可以
使用 POST 或 PUT 请求生成：

    /api/26/resourceTables/analytics

 <table>
 <caption>分析表可选查询参数</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 14%" />
 <col style="width: 52%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> skipResourceTables </td>
 否| <td>假|真</td>
 <td>跳过资源表的生成</td>
 </tr>
 <tr class="even">
 <td> skipAggregate </td>
 否| <td>假|真</td>
 <td>跳过汇总数据和完整性数据的生成</td>
 </tr>
 <tr class="odd">
 <td> skipEvents </td>
 否| <td>假|真</td>
 <td>跳过事件数据的生成</td>
 </tr>
 <tr class="even">
 <td> skipEnrollment </td>
 否| <td>假|真</td>
 <td>跳过注册数据的生成</td>
 </tr>
 <tr class="odd">
 <td>最近年份</td>
 <td>整数</td>
 <td>包含</td>的最近数据年数
 </tr>
 </tbody>
 </table>

“数据质量”和“数据监控”可通过监控运行
任务，由以下端点触发：

    /api/26/resourceTables/监控

此任务将分析您的验证规则，查找任何违规并
将它们保存为验证结果。

这些请求将立即返回并启动服务器端
过程。

## 保养 { #webapi_maintenance } 

 <!--DHIS2-SECTION-ID:webapi_maintenance-->

要执行维护，您可以与* maintenance *资源进行交互。您应该使用* POST *或* PUT *作为请求的方法。可以使用以下方法。

清除分析表将删除所有分析表。

    POST PUT /api/26/maintenance/analyticsTablesClear

分析表分析将收集有关数据库中分析表内容的统计信息。

    POST PUT /api/26/maintenance/analyticsTablesAnalyze

清除过期邀请将删除所有用户帐户邀请
已过期。

    POST PUT /api/26/maintenance/expiredInvitationsClear

期间修剪将删除未链接到任何数据的期间
值。

    POST PUT /api/26/maintenance/periodPruning

零数据值删除将删除链接到数据的零数据值
零数据被定义为不重要的元素：

    POST PUT /api/26/maintenance/zeroDataValueRemoval

软删除的数据值删除将永久删除软删除的数据值。

    POST PUT /api/26/maintenance/softDeletedDataValueRemoval

软删除的程序阶段实例删除将永久删除软删除的事件。

    POST PUT /api/26/maintenance/softDeletedProgramStageInstanceRemoval

软删除程序实例的删除将永久删除软删除的注册。

    POST PUT /api/26/maintenance/softDeletedProgramInstanceRemoval

软删除的跟踪实体实例的删除将永久删除软删除的跟踪实体实例。

    POST PUT /api/26/maintenance/softDeletedTrackedEntityInstanceRemoval

删除SQL视图将删除数据库中的所有SQL视图。请注意，它不会删除DHIS2 SQL视图实体。

    POST PUT /api/26/maintenance/sqlViewsDrop

创建SQL视图将重新创建数据库中的所有SQL视图。

    POST PUT /api/26/maintenance/sqlViewsCreate

类别选项组合更新将删除过时并为所有类别组合生成缺少的类别选项组合。

    POST PUT /api/26/maintenance/categoryOptionComboUpdate

也可以使用以下端点为单个类别组合更新类别选项组合。

    开机自检/ api / maintenance / categoryOptionComboUpdate / categoryCombo / <category-combo-uid>

缓存清除将清除应用程序Hibernate缓存和分析分区缓存。

    POST PUT /api/26/maintenance/cacheClear

组织单位路径更新将重新生成组织单位路径属性。这可能是有用的，例如如果您使用SQL导入组织单位。

    POST PUT /api/26/maintenance/ouPathsUpdate

数据修剪将删除完整的数据集注册，数据批准，数据价值审核和数据价值，在这种情况下是组织单位。

    POST PUT /api/26/maintenance/dataPruning/organizationUnits/<org-unit-id>

数据元素的数据修剪，这将删除数据值审核和数据值。

    POST PUT /api/26/maintenance/dataPruning/dataElement/<data-element-uid>

元数据验证将应用所有元数据验证规则，并返回操作结果。

    POST PUT /api/26/metadataValidation

应用程序重新加载将通过从文件系统读取来刷新已安装应用程序的DHIS2托管缓存。

    POST PUT /api/26/appReload

通过对api / maintenance资源的POST请求以批处理方式支持维护操作，在api / maintenance资源中，该操作作为查询参数提供：

    POST PUT /api/26/maintenance?analyticsTablesClear=true&expiredInvitationsClear=true&periodPruning=true
      &zeroDataValueRemoval=true&sqlViewsDrop=true&sqlViewsCreate=true&categoryOptionComboUpdate=true
      &cacheClear=true&ouPathsUpdate=true

## 系统资源 { #webapi_system_resource } 

 <!--DHIS2-SECTION-ID:webapi_system_resource-->

系统资源为您提供方便的信息和
职能。系统资源可以在 */api/system* 中找到。

### 产生识别码 { #webapi_system_resource_generate_identifiers } 

 <!--DHIS2-SECTION-ID:webapi_system_resource_generate_identifiers-->

要生成有效的随机 DHIS2 标识符，您可以执行 GET 请求
此资源：

    /api/26/system/id?limit=3

* limit *查询参数是可选的，它指示有多少
您希望与响应一起返回的标识符。默认为
返回一个标识符。响应将包含一个带有
数组命名代码，类似于此：

    {
      “代码”：[
        “Y0moqFplrX4”，
        “WI0VHXuWQuV”，
        “BRJNBBpu4ki”
      ]
    }

DHIS2 UID格式具有以下要求：

  - 长11个字符。

  - 仅字母数字字符，即。字母或数字字符
    (A-Za-z0-9)。

  - 以字母字符（A-Za-z）开头。

### 查看系统信息 { #webapi_system_resource_view_system_information } 

 <!--DHIS2-SECTION-ID:webapi_system_resource_view_system_information-->

要获取有关当前系统的信息，您可以执行 GET 请求
这个网址：

    /api/26/系统/信息

支持 JSON 和 JSONP 响应格式。系统信息响应
目前包括以下属性。请注意，如果用户是
那么请求该资源在系统中没有完全的权限
仅包含前七个属性，因为此信息是
安全敏感。

    {
        contextPath: "http://yourdomain.com",
        userAgent: "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 Chrome/29.0.1547.62 Safari/537.36",
        版本：“2.13-快照”，
        修订：“11852”，
        构建时间: "2013-09-01T21:36:21.000+0000",
        服务器日期：“2013-09-02T12：35：54.311 + 0000”，
        环境变量：“DHIS2_HOME”，
        java版本：“1.7.0_06”，
        javaVendor：“甲骨文公司”，
        javaIoTmpDir: "/tmp",
        javaOpts: "-Xms600m -Xmx1500m -XX:PermSize=400m -XX:MaxPermSize=500m",
        操作系统名称：“Linux”，
        操作系统架构：“amd64”，
        操作系统版本：“3.2.0-52-generic”，
        外部目录：“/home/dhis/config/dhis2”，
        数据库信息：{
            类型：“PostgreSQL”，
            名称：“dhis2”，
            用户：“dhis”，
            空间支持：假
        },
        memoryInfo: "JVM 中的内存总数: 848 JVM 中的可用内存: 581 最大限制: 1333",
        CPU核心数：8
    }

获取有关系统上下文的信息（*contextPath* 和
*userAgent*) 只有您可以对以下 URL 执行 GET 请求。 JSON 和
支持 JSONP 响应格式：

    /api/26/系统/上下文

### 检查用户名和密码组合是否正确 { #webapi_system_resource_check_username_password } 

 <!--DHIS2-SECTION-ID:webapi_system_resource_check_username_password-->

检查某些用户凭据（用户名和密码组合）
是正确的，您可以使用以下资源向以下资源发出 *GET* 请求
*基本认证*：

    /api/26/系统/ping

您可以通过检查* HTTP来检测认证的结果
响应标头的状态代码*。可能状态的含义
代码在下面列出。请注意，这适用于中的Web API请求
一般的。

<table>
<caption>HTTP 状态代码</caption>
<colgroup>
<col style="width: 13%" />
<col style="width: 12%" />
<col style="width: 74%" />
</colgroup>
<thead>
<tr class="header">
<th>HTTP 状态代码</th>
<th>说明</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>200</td>
<td>好的</td>
<td>身份验证成功</td>
</tr>
<tr class="even">
<td>302</td>
<td>已找到</td>
<td>请求中未提供凭据 - 未进行身份验证</td>
</tr>
<tr class="odd">
<td>401</td>
<td>未经授权</td>
<td>用户名和密码组合不正确 - 身份验证失败</td>
</tr>
</tbody>
</table>

### 查看异步任务状态 { #webapi_system_resource_view_async_task_status } 

 <!--DHIS2-SECTION-ID:webapi_system_resource_view_async_task_status-->

可以执行通常需要很长时间才能完成的任务
异步地。启动异步任务后，您可以轮询状态
通过*系统/任务*资源提供任务类别和
感兴趣的任务标识符。

轮询任务状态时，您需要进行身份验证
启动任务的用户。以下任务类别是
支持的：

<table>
<caption>Task categories</caption>
<colgroup>
<col style="width: 21%" />
<col style="width: 78%" />
</colgroup>
<thead>
<tr class="header">
<th>Identifier</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ANALYTICS_TABLE</td>
<td>Generation of the analytics tables.</td>
</tr>
<tr class="even">
<td>RESOURCE_TABLE</td>
<td>Generation of the resource tables.</td>
</tr>
<tr class="odd">
<td>MONITORING</td>
<td>Processing of data surveillance/monitoring validation rules.</td>
</tr>
<tr class="even">
<td>DATAVALUE_IMPORT</td>
<td>Import of data values.</td>
</tr>
<tr class="odd">
<td>EVENT_IMPORT</td>
<td>Import of events.</td>
</tr>
<tr class="even">
<td>ENROLLMENT_IMPORT</td>
<td>Import of enrollments.</td>
</tr>
<tr class="odd">
<td>TEI_IMPORT</td>
<td>Import of tracked entity instances.</td>
</tr>
<tr class="even">
<td>METADATA_IMPORT</td>
<td>Import of metadata.</td>
</tr>
<tr class="odd">
<td>DATA_INTEGRITY</td>
<td>Processing of data integrity checks.</td>
</tr>
</tbody>
</table>

每个异步任务都会自动分配一个标识符，该标识符可以
用于监视任务的状态。这个任务标识符是
当您通过各种方式启动异步任务时由 API 返回
启用异步的端点。

#### 监控任务 { #monitoring-a-task } 

您可以通过对系统任务的 GET 请求轮询任务状态
像这样的资源：

    /api/29/system/tasks/{任务类别 ID}/{任务 ID}

一个示例请求可能看起来像这样：

    /api/29/system/tasks/DATAVALUE_IMPORT/j8Ki6TgreFw

响应将提供有关状态的信息，例如
通知级别、类别、时间和状态。 *已完成的*属性
指示该过程是否被认为是完整的。

    [{
        “uid”：“hpiaeMy7wFX”，
        “级别”：“信息”，
        “类别”：“DATAVALUE_IMPORT”，
        "时间": "2015-09-02T07:43:14.595+0000",
        "message": "导入完成",
        “已完成”：正确
    }]

#### 监视类别的所有任务 { #monitoring-all-tasks-for-a-category } 

您可以通过 GET 请求轮询特定类别的所有任务
系统任务资源：

    /api/26/system/tasks/{任务类别 ID}

轮询数据值导入任务状态的示例请求
看起来像这样：

    /api/26/system/tasks/DATAVALUE_IMPORT

#### 监控所有任务 { #monitor-all-tasks } 

您可以使用以下命令请求系统中所有当前正在运行的任务的列表
对系统任务资源的 GET 请求：

    /api/29/系统/任务

响应将类似于以下内容：

    [{
        "EVENT_IMPORT": {},
        "DATA_STATISTICS": {},
        "RESOURCE_TABLE": {},
        "FILE_RESOURCE_CLEANUP": {},
        "METADATA_IMPORT": {},
        "CREDENTIALS_EXPIRY_ALERT": {},
        "SMS_SEND": {},
        "MOCK": {},
        "ANALYTICSTABLE_UPDATE": {},
        "COMPLETE_DATA_SET_REGISTRATION_IMPORT": {},
        "DATAVALUE_IMPORT": {},
        "DATA_SET_NOTIFICATION": {},
        "DATA_INTEGRITY": {
            "OB1qGRlCzap": [{
                "uid": "LdHQK0PXZyF",
                "level": "INFO",
                "category": "DATA_INTEGRITY",
                "time": "2018-03-26T15:02:32.171",
                "message": "Data integrity checks completed in 38.31 seconds.",
                "completed": true
            }]
        },
        "PUSH_ANALYSIS": {},
        "MONITORING": {},
        "VALIDATION_RESULTS_NOTIFICATION": {},
        "REMOVE_EXPIRED_RESERVED_VALUES": {},
        "DATA_SYNC": {},
        "SEND_SCHEDULED_MESSAGE": {},
        "DATAVALUE_IMPORT_INTERNAL": {},
        "PROGRAM_NOTIFICATIONS": {},
        "META_DATA_SYNC": {},
        "ANALYTICS_TABLE": {},
        "PREDICTOR": {}
    }]

### 查看异步任务摘要 { #view-asynchronous-task-summaries } 

任务摘要资源允许您检索任务摘要
异步任务调用。您需要指定类别和
可选的任务标识符。任务标识符可以是
从发起请求的 API 请求的响应中检索
异步任务。

要检索特定任务的摘要，您可以发出以下请求：

    /api/29/system/taskSummaries/{任务类别 ID}/{任务 ID}

一个示例请求可能看起来像这样：

    /api/29/system/taskSummaries/DATAVALUE_IMPORT/k72jHfF13J1

响应将类似于以下内容：

    {
        "responseType": "导入摘要",
        “状态”：“成功”，
        “导入选项”：{
            “idSchemes”：{}，
            “干运行”：假，
            “异步”：正确，
            "importStrategy": "CREATE_AND_UPDATE",
            "mergeMode": "替换",
            “报告模式”：“完整”，
            “跳过现有检查”：假，
            “共享”：错误，
            “跳过通知”：假，
            “datasetAllowsPeriods”：假，
            “strictPeriods”：假，
            “strictCategoryOptionCombos”：假，
            “strictAttributeOptionCombos”：假，
            “严格组织单位”：假，
            “requireCategoryOptionCombo”：假，
            “requireAttributeOptionCombo”：假，
            “skipPatternValidation”：假
        },
        "description": "导入过程成功完成",
        “导入数量”：{
            “进口”：0，
            “更新”：431，
            “忽略”：0，
            “已删除”：0
        },
        “数据集完成”：“假”
    }

您还可以检索多个任务的导入摘要
具有类似请求的特定类别
这：

    /api/29/system/taskSummaries/{任务类别 ID}

### 获取外观信息 { #webapi_system_resource_get_appearance_information } 

 <!--DHIS2-SECTION-ID:webapi_system_resource_get_appearance_information-->

您可以使用 GET 以 JSON 格式检索可用的标志图标
要求：

    /api/26/系统/标志

您可以使用 GET 以 JSON 格式检索可用的 UI 样式
要求：

    /api/26/系统/样式

## 语言环境 { #webapi_locales } 

 <!--DHIS2-SECTION-ID:webapi_locales-->

DHIS2 支持用户界面和数据库的翻译
内容。

### UI语言环境 { #ui-locales } 

您可以通过以下方式检索用户界面的可用区域设置
以下资源带有 GET 请求。 XML 和 JSON 资源
支持表示。

    /api/26/locales/ui

### 数据库内容语言环境 { #database-content-locales } 

您可以使用GET和检索和创建数据库内容的语言环境
通过以下资源发出POST请求。 XML和JSON资源
支持表示形式。

    /api/26/语言环境/db

## 翻译 { #webapi_translations } 

 <!--DHIS2-SECTION-ID:webapi_translations-->

DHIS2 允许翻译数据库内容。你可以与
使用 *translations* 资源通过 Web API 进行翻译。

    /api/26/翻译

### 创建翻译 { #create-translation } 

您可以使用JSON格式的POST请求创建翻译：

    {
      "objectId": "P3jJH5Tu5VC",
      “类名”：“数据元素”，
      “语言环境”：“es”，
      “财产”：“名称”，
      "value": "Casos de fiebre amarilla"
    }

    发布 /api/26/translations

下表列出了支持翻译的属性。

 <table>
 <caption>属性名称</caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>属性名称</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>名称</td>
 <td>对象名称</td>
 </tr>
 <tr class="even">
 <td>短名称</td>
 <td>对象简称</td>
 </tr>
 <tr class="odd">
 <td>说明</td>
 <td>对象描述</td>
 </tr>
 </tbody>
 </table>

下表列出了支持翻译的类。

 <table>
 <caption>类名称</caption>
 <colgroup>
 <col style="width: 34%" />
 <col style="width: 65%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>类名称</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> DataElementCategoryOption </td>
 <td>类别选项</td>
 </tr>
 <tr class="even">
 <td> DataElementCategory </td>
 <td>类别</td>
 </tr>
 <tr class="odd">
 <td> DataElementCategoryCombo </td>
 <td>类别组合</td>
 </tr>
 <tr class="even">
 <td>数据元素</td>
 <td>数据元素</td>
 </tr>
 <tr class="odd">
 <td> DataElementGroup </td>
 <td>数据元素组</td>
 </tr>
 <tr class="even">
 <td> DataElementGroupSet </td>
 <td>数据元素组集</td>
 </tr>
 <tr class="odd">
 <td>指示灯</td>
 <td>指示灯</td>
 </tr>
 <tr class="even">
 <td>指标类型</td>
 <td>指示器类型</td>
 </tr>
 <tr class="odd">
 <td>指标组</td>
 <td>指标组</td>
 </tr>
 <tr class="even">
 <td> IndicatorGroupSet </td>
 <td>指标组设置</td>
 </tr>
 <tr class="odd">
 <td>组织单位</td>
 <td>组织单位</td>
 </tr>
 <tr class="even">
 <td> OrganisationUnitGroup </td>
 <td>组织单位组</td>
 </tr>
 <tr class="odd">
 <td> OrganisationUnitGroupSet </td>
 <td>组织单位组设置</td>
 </tr>
 <tr class="even">
 <td>数据集</td>
 <td>数据集</td>
 </tr>
 <tr class="odd">
 <td>部分</td>
 <td>数据集部分</td>
 </tr>
 <tr class="even">
 <td>验证规则</td>
 <td>验证规则</td>
 </tr>
 <tr class="odd">
 <td> ValidationRuleGroup </td>
 <td>验证规则组</td>
 </tr>
 <tr class="even">
 <td>程序</td>
 <td>程序</td>
 </tr>
 <tr class="odd">
 <td>程序阶段</td>
 <td>程序阶段</td>
 </tr>
 <tr class="even">
 <td> TrackedEntityAttribute </td>
 <td>跟踪的实体属性</td>
 </tr>
 <tr class="odd">
 <td> TrackedEntity </td>
 <td>跟踪的实体</td>
 </tr>
 <tr class="even">
 <td> RelationshipType </td>
 <td>跟踪实体实例的关系类型</td>
 </tr>
 <tr class="odd">
 <td>选项设置</td>
 <td>选项集</td>
 </tr>
 <tr class="even">
 <td>属性</td>
 <td>元数据的属性</td>
 </tr>
 </tbody>
 </table>

### 获取翻译 { #get-translations } 

您可以通过翻译资源浏览所有翻译：

    获取/api/26/翻译

您可以使用标准过滤技术来获取翻译
兴趣。例如。获取西班牙语数据元素的所有翻译
您可以使用此请求的语言环境：

    /api/26/translations.json?fields=*&filter=className:eq:DataElement&filter=locale:eq:es

要获取所有属性的特定对象的翻译，请执行以下操作：

    /api/26/translations.json?fields=*&filter=className:eq:DataElement&filter=locale:eq:fr&filter=objectId:eq:fbfJHSPpUQD

## 短消息服务（SMS） { #webapi_sms } 

 <!--DHIS2-SECTION-ID:webapi_sms-->

本节介绍用于发送和接收短文本的 SMS Web API
消息。

### 出站短信服务 { #outbound-sms-service } 

Web API支持使用POST方法发送传出SMS。短信可以
被发送到一个或多个目的地。一个或多个网关需要
在使用服务之前进行配置。如果无法发送短信
没有配置网关。它需要一组收件人，并且
JSON格式的消息文本，如下所示。

注意：如果收件人列表的大小超过了
MAX\_ALLOWED\_RECIPIENTS 限制，即 200。

    /api/26/sms/出站

    {
      "message":"短信文本",
      “收件人”：[
        “47XXXXXX1”，
        “47XXXXXX2”
      ]
    }

Web API还支持查询参数版本，但是
参数化的API仅可用于将SMS发送到单个
目的地。

    /api/26/sms/outbound?message=text&recipient=47XXXXXX

#### 网关响应码 { #gateway-response-codes } 

网关可以使用以下响应代码进行响应。

 <table>
 <caption> 网关响应代码 </caption>
 <colgroup>
 <col style="width: 13%" />
 <col style="width: 13%" />
 <col style="width: 73%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 响应码 </th>
 <th> 响应消息 </th>
 <th> 详细说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> RESULT_CODE_0 </td>
 <td> 成功 </td>
 <td> 消息已成功发送 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_1 </td>
 <td> 预定 </td>
 <td> 消息已成功调度 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_22 </td>
 <td> 内部致命错误 </td>
 <td> 内部致命错误 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_23 </td>
 <td> 认证失败 </td>
 <td> 身份验证凭据不正确 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_24 </td>
 <td> 数据验证失败 </td>
 <td> 请求中提供的参数不正确 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_25 </td>
 <td> 积分不足 </td>
 <td> 信用不够发送消息 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_26 </td>
 <td> 上游信用不可用 </td>
 <td> 上游信用不可用 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_27 </td>
 <td> 超出了您的每日配额 </td>
 <td> 您已超出每日配额 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_40 </td>
 <td> 暂时不可用 </td>
 <td> 服务暂时关闭 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_201 </td>
 <td> 超过最大批量大小 </td>
 <td> 超过最大批量大小 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_200 </td>
 <td> 成功 </td>
 <td> 请求成功完成 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_202 </td>
 <td> 接受 </td>
 <td> 消息将被处理 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_207 </td>
 <td> 多状态 </td>
 <td> 向 API 提交了不止一条消息；但是，并非所有消息都具有相同的状态 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_400 </td>
 <td> 错误请求 </td>
 <td> 验证失败（例如缺少/无效的参数或标头） </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_401 </td>
 <td> 未授权 </td>
 <td> 认证失败。这也可能是由 IP 锁定设置引起的 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_402 </td>
 <td> 需要付款 </td>
 <td> 没有足够的信用来发送消息 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_404 </td>
 <td> 未找到 </td>
 <td> 资源不存在 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_405 </td>
 <td> 方法不允许 </td>
 <td> 资源 </td> 不支持 Http 方法
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_410 </td>
 <td> 消失了 </td>
 <td> 手机号码被屏蔽 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_429 </td>
 <td> 请求过多 </td>
 <td> 通用速率限制错误 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_503 </td>
 <td> 服务不可用 </td>
 <td> 我们的平台出现临时错误 - 请重试 </td>
 </tr>
 </tbody>
 </table>

### 入站短信服务 { #inbound-sms-service } 

Web API 支持使用 POST 收集传入的 SMS 消息
方法。路由到 DHIS2 Web API 的传入消息可以是
使用此 API 接收。 API 收集入站 SMS 消息和
根据短信内容（SMS
命令）。下面给出了 JSON 格式的示例负载。文本，
发起者、接收日期和发送日期是强制性参数。这
其余是可选的，但系统将使用这些默认值
参数。

    /api/26/sms/入站

    {
      "text": "示例文本",
      “发起者”：“47XXXXXXXX”，
      "gatewayid": "未知",
      “收到日期”：“2016-05-01”，
      "发送日期":"2016-05-01",
      “短信编码”：“1”，
      “短信状态”：“1”
    }

Web API还支持基于查询参数的版本。

    /api/26/sms/inbound?message=text&originator=47XXXXXX&gateway=clickatel

 <table>
 <caption> 用户查询参数 </caption>
 <colgroup>
 <col style="width: 13%" />
 <col style="width: 13%" />
 <col style="width: 73%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> </th>型
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 消息 </td>
 <td> 字符串 </td>
 <td> 这是携带实际文本消息的强制性参数。 </td>
 </tr>
 <tr class="even">
 <td> 发起人 </td>
 <td> 字符串 </td>
 <td> 这是强制性参数，显示此消息实际上是由谁发送的。 </td>
 </tr>
 <tr class="odd">
 <td> 网关 </td>
 <td> 字符串 </td>
 <td> 这是一个可选参数，提供网关 ID。如果不存在默认文本 &quot;UNKNOWN&quot; 将存储 </td>
 </tr>
 <tr class="even">
 <td> 接收时间 </td>
 <td> 日期 </td>
 <td> 这是一个可选参数。它是网关收到消息的时间戳。 </td>
 </tr>
 </tbody>
 </table>

### 网关服务管理 { #gateway-service-administration } 

Web API 公开资源，这些资源提供了一种配置和
更新短信网关配置。

可以使用 GET 检索配置的不同网关的列表
方法。

    获取/api/26/网关

还可以使用特定网关类型检索配置
获取方法。

    GET /api/26/gateways/{uid}

可以使用POST添加新的网关配置。 POST api需要类型请求参数，当前其值可以具有* HTTP，bulksms，clickatell *中的任意一个。首先添加的网关将设置为默认。一次只能允许一个网关成为默认网关。默认网关只能通过其api进行更改。如果默认网关被删除，则下一个网关将自动成为默认网关。

    POST /api/26/gateways?type=http

可以通过提供如下所述的uid和网关配置来更新配置

    PUT /api/26/gateways/{uids}

可以使用 DELETE 删除特定网关类型的配置
方法。

    删除 /api/26/gateways/{uid}

可以检索和更新默认网关。

    获取 /api/26/gateways/default

可以使用PUT方法设置默认网关。

    PUT /api/26/gateways/default/{uid}

### 网关配置 { #gateway-configuration } 

Web API 允许您创建和更新网关配置。对于每个
网关类型 JSON 有效负载中有不同的参数。
下面给出了每个网关的示例 JSON 有效负载。 POST 用于
create 和 PUT 以更新配置。标头参数可用于
GenericHttpGateway 将一个或多个参数作为 http 标头发送的情况。

*点击告诉*

    {
      “名称”：“点击”，
      “用户名”：“clickatelluser”，
      “密码”：“abc123”，
      “authtoken”：“XXXXXXXXXXXXXXXXXXXXX”，
      “urlTemplate”：“https://platform.clickatell.com/messages”
    }

*批量短信*

    {
      “名称”：“批量短信”，
      “用户名”：“批量用户”，
      “密码”：“abc123”
    }

*SMPP 网关*

    {
        “名称”：“smpp网关2”，
        "systemId": "smppclient1",
        “主机”：“本地主机”，
        “系统类型”：“cp”，
        "numberPlanIndicator": "未知",
        "typeOfNumber": "未知",
        "bindType": "BIND_TX",
        “端口”：2775，
        "密码":"密码",
        “压缩”：假
    }

*通用Http*

    {
      “名称”：“通用”，
      "messageParameter": "消息",
      "recipientParameter": "msisdn",
      "urlTemplate": "http://localhost:模板",
      "useGet":"true",
      “参数”： [
        {
          “密钥”：“用户名”，
          “值”：“用户12”，
          “分类”：“假”，
          “标题”：“假”
        },
        {
          “密钥”：“密码”，
          “值”：“XXX”，
          “分类”：“真实”，
                “标题”：“假”
        }
      ]
    }

在通用 http 网关中，可以添加任意数量的参数。如果需要在 http header 中发送其中任何一个，则可以将 header 设置为 true。
配置保存成功则返回HTTP.OK，否则*错误*

## 短信命令 { #webapi_sms_commands } 

 <!--DHIS2-SECTION-ID:webapi_sms_commands-->

SMSCommands 用于通过 SMS 收集数据。这些命令
属于特定的解析器类型。每个解析器都有不同的功能。

### API 端点 { #api-end-points }

可以使用GET检索命令列表。

    GET /api/sms命令

可以使用GET检索一个特定的命令。

    GET /api/smsCommands/uid

可以使用PUT更新一个特定的命令。

    PUT /api/smsCommands/uid

可以使用POST创建命令。

    POST / api / smsCommands

可以使用DELETE删除一个特定命令。

    删除/ api / smsCommands / uid

#### SMSCommand 解析器类型 { #smscommand-parser-types }

  - KEY\_VALUE\_PARSER

  - J2ME_解析器

  - 警报\_解析器

  - 未注册\_PARSER

  - 已跟踪\_ENTITY\_REGISTRATION\_PARSER

  - 程序\_阶段\_数据条目\_解析器

  - 活动\_注册\_解析器

## 计划讯息 { #webapi_program_messages } 

 <!--DHIS2-SECTION-ID:webapi_program_messages-->

程序消息允许您将消息发送到跟踪的实体实例，
与组织单位相关的联系地址、电话号码和
电子邮件地址。您可以通过 *messages* 资源发送消息。

    /api/26/消息

### 发送程序信息 { #sending-program-messages } 

程序消息可以使用两个传递渠道发送：

  - 短信（SMS）

  - 电子邮件地址（EMAIL）

程序消息可以发送给各种收件人：

  - 跟踪实体实例：系统将查找值的属性
    输入 PHONE\_NUMBER 或 EMAIL（取决于指定的递送方式）
    通道）并使用相应的属性值。

  - 组织单位：系统将使用电话号码或邮箱
    为组织单位注册的信息。

  - 电话号码列表：系统将使用明确定义的
    电话号码。

  - 电子邮件地址列表：系统将使用明确定义的
    电子邮件地址。

下面是使用 POST 请求发送消息的示例 JSON 负载。
请注意，消息资源接受名为的包装对象
*programMessages* 可以包含任意数量的程序消息。

    POST /api/26/messages

    {
        “程序消息”：[{
            “收件人”：{
                “trackedEntityInstance”：{
                    “id”：“UN810PwyVYO”
                },
                “组织单位”：{
                    “id”：“Rp268JB6Ne4”
                },
                “电话号码”： [
                    “55512345”，
                    “55545678”
                ],
                “电子邮件地址”： [
                    “johndoe@mail.com”，
                    “markdoe@mail.com”
                ]
            },
            “程序实例”：{
                “id”：“f3rg8gFag8j”
            },
            “程序阶段实例”：{
                “id”：“pSllsjpfLH2”
            },
            “交付渠道”：[
                “短信”、“电子邮件”
            ],
            "subject": "爆发警报",
            "text": "已检测到爆发",
            “商店复制”：假
        }]
    }

下表中说明了这些字段。

 <table>
 <caption>程序消息有效负载</caption>
 <colgroup>
 <col style="width: 21%" />
 <col style="width: 21%" />
 <col style="width: 31%" />
 <col style="width: 26%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>字段</th>
 <th>必需</th>
 <th>说明</th>
 <th>值</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>收件人</td>
 <td>是</td>
 <td>程序消息的收件人。必须至少指定一个收件人。可以为邮件指定任意数量的收件人/类型。 </td>
 <td>可以跟踪EntityInstance，organizationunit，phoneNumbers数组或emailAddresses数组。 </td>
 </tr>
 <tr class="even">
 <td>程序实例</td>
 <td>这或programStageInstance必需</td>
 <td>程序实例/注册。 </td>
 <td>注册ID。 </td>
 </tr>
 <tr class="odd">
 <td>程序舞台实例</td>
 <td>这个或programInstance必需</td>
 <td>程序阶段实例/事件。 </td>
 <td>事件ID。 </td>
 </tr>
 <tr class="even">
 <td>交付渠道</td>
 <td>是</td>
 <td>交付渠道数组。 </td>
 SMS | <td>电子邮件</td>
 </tr>
 <tr class="odd">
 <td>主题</td>
 <td>否</td>
 <td>邮件主题。不适用于短信传送渠道。 </td>
 <td>文本。 </td>
 </tr>
 <tr class="even">
 <td>文字</td>
 <td>是</td>
 <td>消息文本。 </td>
 <td>文本。 </td>
 </tr>
 <tr class="odd">
 <td>商店复制</td>
 <td>否</td>
 <td>是否在DHIS2中存储程序消息的副本。 </td>
 <td>否（默认）|真</td>
 </tr>
 </tbody>
 </table>

通过 SMS 向被跟踪对象发送消息的简约示例
实体实例如下所示：

    卷曲-d @message.json“https://play.dhis2.org/demo/api/26/messages”
      -H“内容类型：application/json”-u admin：区-v

    {
        “程序消息”：[{
            “收件人”：{
                “trackedEntityInstance”：{
                    “id”：“PQfMcpmXeFE”
                }
            },
            “程序实例”：{
                “id”：“JMgRZyeLWOo”
            },
            “交付渠道”：[
                “短信”
            ],
            "text": "请周四来访"
        }]
    }

### 检索和删除程序消息 { #retrieving-and-deleting-program-messages } 

可以使用GET检索消息列表。

    获取/api/26/消息

也可以使用GET检索一条特定的消息。

    GET /api/26/messages/{uid}

可以使用DELETE删除消息。

    删除 /api/26/messages/{uid}

### 查询程序信息 { #querying-program-messages } 

程序消息API支持基于
请求参数。可以根据下面提到的过滤消息
查询参数。所有请求都应使用 GET HTTP 动词
检索信息。

<table>
<caption>查询程序消息API</caption>
<colgroup>
<col style="width: 25%" />
<col style="width: 75%" />
</colgroup>
<thead>
<tr class="header">
<th>参数</th>
<th>网址</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>programInstance</td>
<td>/api/26/messages?programInstance=6yWDMa0LP7</td>
</tr>
<tr class="even">
<td>programStageInstance</td>
<td>/api/26/messages?programStageInstance=SllsjpfLH2</td>
</tr>
<tr class="odd">
<td>trackedEntityInstance</td>
<td>/api/26/messages?trackedEntityInstance=xdfejpfLH2</td>
</tr>
<tr class="even">
<td>组织单位</td>
<td>/api/26/messages?ou=Sllsjdhoe3</td>
</tr>
<tr class="odd">
<td>处理日期</td>
<td>/api/26/messages?processedDate=2016-02-01</td>
</tr>
</tbody>
</table>

## 用户数 { #webapi_users } 

 <!--DHIS2-SECTION-ID:webapi_users-->

本节介绍用户资源方法。

    /api/26/用户

### 用户查询 { #webapi_users_query } 

 <!--DHIS2-SECTION-ID:webapi_users_query-->

*users* 资源提供了额外的查询参数
标准参数（例如分页）。在用户处查询用户
资源可以使用以下参数。

 <table>
 <caption> 用户查询参数 </caption>
 <colgroup>
 <col style="width: 18%" />
 <col style="width: 17%" />
 <col style="width: 63%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> </th>型
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 查询 </td>
 <td> 文字 </td>
 <td> 名字、姓氏、用户名和电子邮件的查询值，不区分大小写。 </td>
 </tr>
 <tr class="even">
 <td> 电话号码 </td>
 <td> 文字 </td>
 <td> 查询电话号码。 </td>
 </tr>
 <tr class="odd">
 <td> canManage </td>
 <td> 假 |真 </td>
 <td> 过滤当前用户是否可以通过管理的用户组关系管理返回的用户。 </td>
 </tr>
 <tr class="even">
 <td> authSubset </td>
 <td> 假 |真 </td>
 <td> 过滤返回的用户是否拥有当前用户的权限子集。 </td>
 </tr>
 <tr class="odd">
 <td> lastLogin </td>
 <td> 日期 </td>
 <td> 筛选晚于给定日期登录的用户。 </td>
 </tr>
 <tr class="even">
 <td> inactiveMonths </td>
 <td> 编号 </td>
 <td> 过滤给定月数未登录的用户。 </td>
 </tr>
 <tr class="odd">
 <td> 不活动自 </td>
 <td> 日期 </td>
 <td> 过滤未晚于给定日期登录的用户。 </td>
 </tr>
 <tr class="even">
 <td> 自注册 </td>
 <td> 假 |真 </td>
 <td> 过滤已自行注册其用户帐户的用户。 </td>
 </tr>
 <tr class="odd">
 <td> 邀请状态 </td>
 <td> 无 |所有 |过期 </td>
 <td> 过滤用户邀请，包括所有邀请或过期邀请。 </td>
 </tr>
 <tr class="even">
 <td> 或 </td>
 <td> 标识符 </td>
 <td> 过滤与具有给定标识符的组织单位相关联的用户。 </td>
 </tr>
 <tr class="odd">
 <td> userOrgUnits </td>
 <td> 假 |真 </td>
 <td> 筛选与链接到当前登录用户的组织单位相关联的用户。 </td>
 </tr>
 <tr class="even">
 <td> 包括儿童 </td>
 <td> 假 |真 </td>
 <td> 包括来自 ou 参数的所有子组织单位的用户。 </td>
 </tr>
 <tr class="odd">
 <td> 页面 </td>
 <td> 编号 </td>
 <td> 页码。 </td>
 </tr>
 <tr class="even">
 <td> 页面大小 </td>
 <td> 编号 </td>
 <td> 页面大小。 </td>
 </tr>
 </tbody>
 </table>

以“konan”作为名字或姓氏的最多 10 个用户的查询（案例
不敏感）与当前相比拥有部分权限的人
用户：

    /api/26/users?query=konan&authSubset=true&pageSize=10

### 用户凭证查询 { #webapi_users_credentials_query } 

 <!--DHIS2-SECTION-ID:webapi_users_credentials_query-->

先前用户查询的替代方法是直接查询用户
凭据（用户名等所在的部分）使用
* / api / userCredentials *端点，它支持所有常规字段和
对象过滤器作为其他端点。

获取用户名为admin的用户凭据：

    /api/26/userCredentials?filter=用户名:eq:admin

从用户名开始的所有用户凭据中获取用户名和代码
和
    * adm *：

    /api/26/userCredentials?fields=用户名,code&filter=用户名:^like:adm

### 用户帐户创建和更新 { #webapi_users_create_update } 

 <!--DHIS2-SECTION-ID:webapi_users_create_update-->

通过 web-api 支持创建和更新用户。这
有效负载本身与 web-api 中的其他有效负载类似，因此它们
支持集合引用等。创建一个简单的有效负载示例
是的，密码应该以纯文本形式发送（记住只
在启用 SSL 的服务器上使用它）并将在后端加密：

    {
      “id”：“Mj8balLULKp”，
      “名字”：“约翰”，
      “姓氏”：“多伊”，
      “电子邮件”：“johndoe@mail.com”，
      “用户凭据”：{
        “id”：“lWCkJ4etppc”，
        “用户信息”： {
          “id”：“Mj8balLULKp”
        },
        “用户名”：“johndoe123”，
        "password": "您的密码-123",
        "skype": "约翰.多伊",
        "电报": "joh.doe",
        "whatsApp": "+1-541-754-3010",
        "facebookMessenger": "约翰.多伊",
        “头像”：{
          "id": "<fileResource id>"
        },
        “用户角色”：[
          {
            “id”：“Ufph3mGRmMo”
          }
        ]
      },
      “组织单位”：[
        {
          “id”：“Rp268JB6Ne4”
        }
      ],
      “用户组”：[
        {
          “id”：“wl5cDMuUhmF”
        }
      ]
    }

    curl -X POST -u user:pass -d @u.json -H "Content-Type: application/json" http://server/api/26/users

创建用户后，将发送回一个 *Location* 标头
新生成的 ID（您也可以使用 /api/system/id 提供自己的 ID）
终点）。然后可以使用相同的有效负载进行更新，但请记住
然后使用 **PUT** 而不是 **POST** ，端点现在是
*/api/用户/ID*.

    curl -X PUT -u user:pass -d @u.json -H "Content-Type: application/json" http://server/api/26/users/ID

有关可用完整有效负载的更多信息，请参阅
*/api/模式/用户*

有关上传和检索用户头像的更多信息，请参阅
*/fileResources* 端点。

### 用户帐户邀请 { #webapi_user_invitations } 

 <!--DHIS2-SECTION-ID:webapi_user_invitations-->

Web API 支持邀请人们通过以下方式创建用户帐户
*邀请*资源。要创建邀请，您应该在 XML 中发布用户
或 JSON 格式的邀请资源。可以强制使用特定的用户名
通过在发布的实体中定义用户名。通过省略用户名，
该人将能够自己指定。系统会发出
通过电子邮件发出邀请。这要求电子邮件设置已
正确配置。邀请资源对于安全地很有用
允许人们在其他人不知道密码的情况下创建帐户
或者以明文形式传输密码。用于的有效负载
邀请与创建用户相同。 JSON 格式的负载示例
看起来像这样：

    {
      “名字”：“约翰”，
      “姓氏”：“多伊”，
      “电子邮件”：“johndoe@mail.com”，
      “用户凭据”：{
        “用户名”：“johndoe”，
        “用户角色”：[ {
          “id”：“Euq3XfEIEbx”
        }]
      },
      “组织单位”：[ {
        “id”：“ImspTQPwCqd”
      }],
      “用户组”：[ {
        “id”：“vAvEltyXGbD”
      }]
    }

用户邀请实体可以这样发布：

    curl -d @invite.json“localhost/api/26/users/invite”-H“内容类型：application/json”-u admin：区-v

要同时向多个用户发送邀请，您必须使用
格式略有不同。对于 JSON：

    {
      “用户”：[ {
        “名字”：“约翰”，
        “姓氏”：“多伊”，
        “电子邮件”：“johndoe@mail.com”，
        “用户凭据”：{
          “用户名”：“johndoe”，
          “用户角色”：[ {
            “id”：“Euq3XfEIEbx”
          }]
        },
        “组织单位”：[ {
          “id”：“ImspTQPwCqd”
          }]
        }, {
        “名字”：“汤姆”，
        “姓”：“约翰逊”，
        “电子邮件”：“tomj@mail.com”，
        “用户凭据”：{
          “用户角色”：[ {
            “id”：“Euq3XfEIEbx”
          }]
        },
        “组织单位”：[ {
          “id”：“ImspTQPwCqd”
          }]
        }
      ]
    }

要创建多个邀请，您可以将有效负载发布到
api/users/invites 资源如下：

    curl -d @invites.json“localhost/api/26/users/invites”-H“内容类型：application/json”
      -u 管理员:区

发送用户账号邀请有一定的要求
出去：

  - 电子邮件SMTP服务器必须在服务器上正确配置。

  - 被邀请的用户必须指定了有效的电子邮件。

  - 不得授予要邀请的用户具有严重权限的用户角色
    权限（请参见下文）。

  - 如果指定了用户名，则它不得已被其他人使用
    现有用户。

如果不满足这些要求中的任何一个，邀请资源将返回
带有 *409 Conflict* 状态代码和描述性消息。

无法授予邀请的关键权限包括：

  - 全部

  - 计划管理

  - 设定系统设定

  - 添加，更新，删除和列出用户角色

  - 添加，更新，删除和查看SQL视图

### 用户复制 { #webapi_user_replication } 

 <!--DHIS2-SECTION-ID:webapi_user_replication-->

要复制用户，您可以使用 *replica* 资源。复制一个
用户在调试或重现报告的问题时很有用
特定用户。您需要提供新的用户名和密码
您稍后将用于验证的复制用户。请注意，您
需要 ALL 权限才能执行此操作。要复制用户，您
可以发布如下所示的 JSON 有效负载：

    {
      “用户名”：“副本”，
      "密码": "副本.1234"
    }

此有效负载可以发布到您提供的副本资源
要在 URL 中复制的用户标识符：

    /api/26/users/<uid>/replica

使用curl复制用户的示例如下所示：

    卷曲-d @replica.json“localhost/api/26/users/N3PZBUlN8vq/replica”
      -H“内容类型：application/json”-u admin：区-v

## 当前用户信息和关联 { #webapi_current_user_information } 

 <!--DHIS2-SECTION-ID:webapi_current_user_information-->

为了获取有关当前已验证用户的信息和
它与其他资源的关联，您可以使用 *me* 资源
（您也可以通过其旧名称 *currentUser* 来引用它）。目前
用户相关资源为您提供有用的信息
构建客户端，例如用于数据输入和用户管理。这
下面描述了这些资源及其用途。

提供有关您当前登录的用户的基本信息
in as，包括用户名、用户凭据、分配的组织
单位：

    / api / me

提供有关当前未读消息和解释的信息：

    / api / me / dashboard

列出收件箱中的所有消息和解释（包括回复）：

    / api / me / inbox

为了更改密码，此端点可用于验证
新输入的密码。密码验证将基于
系统中配置的 PasswordValidationRules。这个端点支持
POST 和密码字符串应在 POST 正文中发送。

    / api / me / validatePassword

更改密码时，此端点（支持 POST）可用于
验证旧密码。密码字符串应在 POST 正文中发送。

    / api / me / verifyPassword

提供当前用户的完整个人资料信息。这个终点
同时支持* GET *检索配置文件和* POST *更新配置文件（
使用完全相同的格式）：

    / api / me / user-account

返回授予当前用户的权限集：

    / api / me / authorization

返回true或false，表示当前用户是否已经
授予给定的 \<auth\> 授权：

    / api / me / authorization / <auth>

列出直接分配给用户的所有组织单位：

    / api / me / organisationUnits

提供分配给用户组织单位的所有数据集，以及
他们的直系子女。该端点包含所有必需的信息
根据我们的一个数据集构建表单。如果你想要全部
您分配的组织单位的后代，您可以使用查询
参数* includeDescendants = true *：

    / api / me / dataSets

提供分配给用户组织单位的所有程序，以及
他们的直系子女。该端点包含所有必需的信息
根据我们的一个数据集构建表单。如果你想要全部
您分配的组织单位的后代，您可以使用查询
参数* includeDescendants = true *：

    / api / me / programs

给出与当前用户相关的数据批准级别：

    / api / me / dataApprovalLevels

## 系统设置 { #webapi_system_settings } 

 <!--DHIS2-SECTION-ID:webapi_system_settings-->

您可以通过与
*系统设置*资源。系统设置是一个简单的键值对，
其中键和值都是纯文本字符串。保存或
更新系统设置，您可以向以下 URL 发出 *POST* 请求：

    /api/32/systemSettings/my-key?value=my-val

或者，您可以将设置值作为请求正文提交，
其中内容类型设置为“文本/纯文本”。例如，您可以使用
像这样卷曲：

    卷曲“play.dhis2.org/demo/api/32/systemSettings/my-key”-d“我的长值”
      -H“内容类型：文本/纯文本”-u admin：区-v

要批量设置系统设置，您可以发送带有
使用 POST 请求的每个系统设置键值对的属性和值：

```
{
  "keyApplicationNotification"："欢迎"、
  "keyApplicationIntro"："DHIS2"、
  "keyApplicationFooter"："阅读更多信息请访问 dhis2.org
}
```

可以通过指定语言环境来设置可翻译设置键的翻译
可以指定的查询参数和翻译值
作为查询参数或与正文有效负载一起使用。查看示例网址：

    /api/32/systemSettings/<my-key>?locale=<my-locale>&value=<my-translated-value>

您应该将 my-key 替换为您的真实密钥，并将 my-val 替换为您的真实密钥
价值。检索给定键的值（以 JSON 或纯文本形式）
您可以向以下 URL 发出 *GET* 请求：

    /api/32/systemSettings/my-key

或者，您可以将键指定为查询参数：

    /api/32/systemSettings?key=my-key

您可以通过重复键以 JSON 形式检索特定的系统设置
查询参数：

    卷曲“play.dhis2.org/demo/api/32/systemSettings?key=keyApplicationNotification&key=keyApplicationIntro”
      -u 管理员:区 -v

您可以使用GET请求检索所有系统设置：

    /api/32/系统设置

要检索给定可翻译键的特定翻译，您可以指定
语言环境作为查询参数：

    /api/32/systemSettings/<my-key>?locale=<my-locale>

如果存在，则返回给定语言环境的翻译。否则，默认
返回值。如果未为可翻译键指定语言环境，则用户默认
UI语言环境用于获取正确的翻译。如果给定的翻译不是
再次出现时，将返回默认值。

可翻译键的优先级如下：

    指定的区域设置>用户的默认UI区域设置> defaut值

要删除系统设置，您可以向 URL 发出 *DELETE* 请求
类似于上面用于检索的那个。如果一个可翻译的键是
使用，所有现有的翻译也将被删除。

仅删除可翻译键的特定翻译，相同的 URL
至于添加翻译应该使用，空值应该是
假如：

    /api/32/systemSettings/<my-key>?locale=<my-locale>&value=

可用的系统设置在下面列出。

<table>
<caption>System settings</caption>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>Key</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>keyMessageEmailNotification</td>
<td>Send email notification for messages</td>
</tr>
<tr class="even">
<td>keyMessageSmsNotification</td>
<td>Send sms notification for messages</td>
</tr>
<tr class="odd">
<td>keyUiLocale</td>
<td>Locale for the user interface</td>
</tr>
<tr class="even">
<td>keyDbLocale</td>
<td>Locale for the database</td>
</tr>
<tr class="odd">
<td>keyAnalysisDisplayProperty</td>
<td>The property to display in analysis. Default: &quot;name&quot;</td>
</tr>
<tr class="even">
<td>keyCurrentDomainType</td>
<td>Not yet in use</td>
</tr>
<tr class="odd">
<td>keyAutoSaveCaseEntryForm</td>
<td>Autosave case entry forms</td>
</tr>
<tr class="even">
<td>keyAutoSaveDataEntryForm</td>
<td>Autosave data entry forms</td>
</tr>
<tr class="odd">
<td>keyTrackerDashboardLayout</td>
<td>Used by tracker capture</td>
</tr>
<tr class="even">
<td>keyAutoSavetTrackedEntityForm</td>
<td>Autosave tracked entity forms</td>
</tr>
<tr class="odd">
<td>applicationTitle</td>
<td>The application title. Default: &quot;DHIS2&quot;</td>
</tr>
<tr class="even">
<td>keyApplicationIntro</td>
<td>The application introduction</td>
</tr>
<tr class="odd">
<td>keyApplicationNotification</td>
<td>Application notification</td>
</tr>
<tr class="even">
<td>keyApplicationFooter</td>
<td>Application left footer</td>
</tr>
<tr class="odd">
<td>keyApplicationRightFooter</td>
<td>Application right footer</td>
</tr>
<tr class="even">
<td>keyFlag</td>
<td>Application flag</td>
</tr>
<tr class="odd">
<td>keyFlagImage</td>
<td>Flag used in dashboard menu</td>
</tr>
<tr class="even">
<td>startModule</td>
<td>The startpage of the application. Default: &quot;dhis-web-dashboard-integration&quot;</td>
</tr>
<tr class="odd">
<td>factorDeviation</td>
<td>Data analysis standard deviation factor. Default: &quot;2d&quot;</td>
</tr>
<tr class="even">
<td>keyEmailHostName</td>
<td>Email server hostname</td>
</tr>
<tr class="odd">
<td>keyEmailPort</td>
<td>Email server port</td>
</tr>
<tr class="even">
<td>keyEmailTls</td>
<td>Use TLS. Default: &quot;true&quot;</td>
</tr>
<tr class="odd">
<td>keyEmailSender</td>
<td>Email sender</td>
</tr>
<tr class="even">
<td>keyEmailUsername</td>
<td>Email server username</td>
</tr>
<tr class="odd">
<td>keyEmailPassword</td>
<td>Email server password</td>
</tr>
<tr class="even">
<td>keyInstanceBaseUrl</td>
<td>The base url of the application instance</td>
</tr>
<tr class="odd">
<td>keySmsConfig</td>
<td>SMS configuration</td>
</tr>
<tr class="even">
<td>keyCacheStrategy</td>
<td>Cache strategy. Default: &quot;CACHE_6AM_TOMORROW&quot;</td>
</tr>
<tr class="odd">
<td>keyCacheability</td>
<td>PUBLIC or PRIVATE. Determines if proxy servers are allowed to cache data or not.</td>
</tr>
<tr class="even">
<td>phoneNumberAreaCode</td>
<td>Phonenumber area code</td>
</tr>
<tr class="odd">
<td>multiOrganisationUnitForms</td>
<td>Enable multi-organisation unit forms. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keyAccountRecovery</td>
<td>Enable user account recovery. Default: &quot;false&quot;</td>
</tr>
<tr class="odd">
<td>googleAnalyticsUA</td>
<td>Google Analytic UA key for tracking site-usage</td>
</tr>
<tr class="even">
<td>credentialsExpires</td>
<td>Require user account password change. Default: &quot;0&quot; (Never)</td>
</tr>
<tr class="odd">
<td>keySelfRegistrationNoRecaptcha</td>
<td>Do not require recaptcha for self registration. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>recaptchaSecret</td>
<td>Google API recaptcha secret. Default: dhis2 play instance API secret, but this will only works on you local instance and not in production.</td>
</tr>
<tr class="odd">
<td>recaptchaSite</td>
<td>Google API recaptcha site. Default: dhis2 play instance API site, but this will only works on you local instance and not in production.</td>
</tr>
<tr class="even">
<td>keyOpenIdProvider</td>
<td>OpenID provider</td>
</tr>
<tr class="odd">
<td>keyCanGrantOwnUserAuthorityGroups</td>
<td>Allow users to grant own user roles. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keyRespectMetaDataStartEndDatesInAnalyticsTableExport</td>
<td>When &quot;true&quot;, analytics will skip data not within category option's start and end dates. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keySkipZeroValuesInAnalyticsTableExport</td>
<td>When &quot;true&quot;, analytics will skip zero data values for sum aggregation type data elements, ignoring the "zeroIsSignificant" setting for data elements. Default: &quot;false&quot;</td>
</tr>
<tr class="odd">
<td>keyCacheAnalyticsDataYearThreshold</td>
<td>Analytics data older than this value (in years) will always be cached. &quot;0&quot; disabled this setting. Default: 0</td>
</tr>
<tr class="even">
<td>analyticsFinancialYearStart</td>
<td>Set financial year start. Default: October</td>
</tr>
<tr class="odd">
<td>keyIgnoreAnalyticsApprovalYearThreshold</td>
<td>&quot;0&quot; check approval for all data. &quot;-1&quot; disable approval checking. &quot;1&quot; or higher checks approval for all data that is newer than &quot;1&quot; year.</td>
</tr>
<tr class="even">
<td>keyAnalyticsMaxLimit</td>
<td>Maximum number of analytics recors. Default: &quot;50000&quot;</td>
</tr>
<tr class="odd">
<td>keyAnalyticsMaintenanceMode</td>
<td>Put analytics in maintenance mode. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keyDatabaseServerCpus</td>
<td>Number of database server CPUs. Default: &quot;0&quot; (Automatic)</td>
</tr>
<tr class="odd">
<td>helpPageLink</td>
<td>Link to help page. Default: &quot;<a href="http://dhis2.github.io/dhis2-docs/master/en/user/html/dhis2_user_manual_en.html">https://dhis2.github.io/dhis2-docs/master/en/user/html/dhis2_user_manual_en.html</a></td>
</tr>
<tr class="even">
<td>keyAcceptanceRequiredForApproval</td>
<td>Acceptance required before approval. Default: &quot;false&quot;</td>
</tr>
<tr class="odd">
<td>keySystemNotificationsEmail</td>
<td>Where to email system notifications</td>
</tr>
<tr class="even">
<td>keyAnalysisRelativePeriod</td>
<td>Default relative period for analysis. Default: &quot;LAST_12_MONTHS&quot;</td>
</tr>
<tr class="odd">
<td>keyRequireAddToView</td>
<td>Require authority to add to view object lists. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keyAllowObjectAssignment</td>
<td>Allow assigning object to related objects during add or update. Default: &quot;false&quot;</td>
</tr>
<tr class="odd">
<td>keyUseCustomLogoFront</td>
<td>Enables the usage of a custom logo on the front page. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keyUseCustomLogoBanner</td>
<td>Enables the usage of a custom banner on the website. Default: &quot;false&quot;</td>
</tr>
<tr class="odd">
<td>keyDataImportStrictPeriods</td>
<td>Require periods to match period type of data set. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keyDataImportStrictDataElements</td>
<td>Require data elements to be part of data set. Default: &quot;false&quot;</td>
</tr>
<tr class="odd">
<td>keyDataImportStrictCategoryOptionCombos</td>
<td>Require category option combos to match category combo of data element. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keyDataImportStrictOrganisationUnits</td>
<td>Require organisation units to match assignment of data set. Default: &quot;false&quot;</td>
</tr>
<tr class="odd">
<td>keyDataImportStrictAttributeOptionsCombos</td>
<td>Require attribute option combis to match category combo of data set. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keyDataImportRequireCategoryOptionCombo</td>
<td>Require category option combo to be specified. Default: &quot;false&quot;</td>
</tr>
<tr class="odd">
<td>keyDataImportRequireAttributeOptionCombo</td>
<td>Require attribute option combo to be specified. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keyCustomJs</td>
<td>Custom JavaScript to be used on the website</td>
</tr>
<tr class="odd">
<td>keyCustomCss</td>
<td>Custom CSS to be used on the website</td>
</tr>
<tr class="even">
<td>keyCalendar</td>
<td>The calendar type. Default: &quot;iso8601&quot;.</td>
</tr>
<tr class="odd">
<td>keyDateFormat</td>
<td>The format in which dates should be displayed. Default: &quot;yyyy-MM-dd&quot;.</td>
</tr>
<tr class="even">
<td>appStoreUrl</td>
<td>The url used to point to the app store. Default: &quot;https://www.dhis2.org/appstore&quot;</td>
</tr>
<tr class="odd">
<td>keyStyle</td>
<td>The style used on the DHIS2 webpages. Default: &quot;light_blue/light_blue.css&quot;.</td>
</tr>
<tr class="even">
<td>keyRemoteInstanceUrl</td>
<td>Url used to connect to remote instance</td>
</tr>
<tr class="odd">
<td>keyRemoteInstanceUsername</td>
<td>Username used to connect to remote DHIS2 instance</td>
</tr>
<tr class="even">
<td>keyRemoteInstancePassword</td>
<td>Password used to connect to remote DHIS2 instance</td>
</tr>
<tr class="odd">
<td>keyMapzenSearchApiKey</td>
<td>Key for the Mapzen geo search API</td>
</tr>
<tr class="even">
<td>keyFileResourceRetentionStrategy</td>
<td>Determines how long file resources associated with deleted or updated values are kept. NONE, THREE_MONTHS, ONE_YEAR, or FOREVER.</td>
</tr>
</tbody>
</table>

## 用户设置 { #webapi_user_settings } 

 <!--DHIS2-SECTION-ID:webapi_user_settings-->

您可以通过与 *userSettings* 交互来操作用户设置
资源。用户设置是一个简单的键值对，其中键
并且值是纯文本字符串。用户设置将链接到
已针对 Web API 请求进行身份验证的用户。返回列表
在所有用户设置中，您可以向以下 URL 发送 *GET* 请求：

    /api/26/用户设置

用户未设置的用户设置，将回退到等效的
系统设置。只返回用户明确设置的值，
您可以将 ?useFallback=false 附加到上述 URL，如下所示：

    /api/26/userSettings?useFallback=false

要为当前经过身份验证的用户保存或更新设置，您可以
向以下 URL 发出 *POST* 请求：

    /api/26/userSettings/my-key?value=my-val

您可以指定要为其显式保存设置的用户
这个语法：

    /api/26/userSettings/my-key?user=用户名&值=my-val

或者，您可以将设置值作为请求正文提交，
其中内容类型设置为“文本/纯文本”。例如，您可以使用
像这样卷曲：

    卷曲“https://play.dhis2.org/demo/api/26/userSettings/my-key”-d“我的长值”
      -H“内容类型：文本/纯文本”-u admin：区-v

例如，要将当前用户的 UI 语言环境设置为法语，您
可以使用以下命令。

    卷曲“https://play.dhis2.org/demo/api/26/userSettings/keyUiLocale?value=fr”-X POST -u admin:district -v

您应该将 my-key 替换为您的真实密钥，并将 my-val 替换为您的真实密钥
价值。要以纯文本形式检索给定键的值，您可以
对以下 URL 的 *GET* 请求：

    /api/26/userSettings/my-key

要删除用户设置，您可以向 URL 发出 *DELETE* 请求
类似于上面用于检索的那个。

可用的系统设置在下面列出。

 <table style="width:100%;">
 <caption>用户设置</caption>
 <colgroup>
 <col style="width: 21%" />
 <col style="width: 28%" />
 <col style="width: 49%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>键</th>
 <th>选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> keyStyle </td>
 <td> light_blue / light_blue.css | green / green.css |越南/vietnam.css </td>
 <td>用户界面样式表。 </td>
 </tr>
 <tr class="even">
 <td> keyMessageEmailNotification </td>
 否| <td>假|真</td>
 <td>是否发送电子邮件通知。 </td>
 </tr>
 <tr class="odd">
 <td> keyMessageSmsNotification </td>
 否| <td>假|真</td>
 <td>是否发送短信通知。 </td>
 </tr>
 <tr class="even">
 <td> keyUiLocale </td>
 <td>语言环境值</td>
 <td>用户界面区域设置。 </td>
 </tr>
 <tr class="odd">
 <td> keyDbLocale </td>
 <td>语言环境值</td>
 <td>数据库内容区域设置。 </td>
 </tr>
 <tr class="even">
 <td>键AnalysisDisplayProperty </td>
 名称| <td> shortName </td>
 <td>为分析应用程序中的元数据显示的属性。 </td>
 </tr>
 <tr class="odd">
 <td> keyCurrentDomainType </td>
 全部| <td> |聚合|追踪器</td>
 <td>要显示在列表中的数据元素域类型。 </td>
 </tr>
 <tr class="even">
 <td> keyAutoSaveCaseEntryForm </td>
 否| <td>假|真</td>
 <td>定期保存案例输入表格。 </td>
 </tr>
 <tr class="odd">
 <td> keyAutoSaveTrackedEntityForm </td>
 否| <td>假|真</td>
 <td>定期保存人员注册表格。 </td>
 </tr>
 <tr class="even">
 <td> keyAutoSaveDataEntryForm </td>
 否| <td>假|真</td>
 <td>定期保存汇总数据输入表单。 </td>
 </tr>
 <tr class="odd">
 <td> keyTrackerDashboardLayout </td>
 否| <td>假|真</td>
 <td>跟踪器仪表板布局。 </td>
 </tr>
 </tbody>
 </table>

## 组织单位 { #webapi_organisation_units } 

 <!--DHIS2-SECTION-ID:webapi_organisation_units-->

*organisationUnits* 资源遵循标准约定，如
DHIS2 中的其他元数据资源。该资源支持一些
附加查询参数。

### 获取组织单位列表 { #webapi_list_of_organisation_units } 

 <!--DHIS2-SECTION-ID:webapi_list_of_organisation_units-->

要获取组织单位的列表，可以使用以下资源。

    /api/26/organizationUnits

 <table>
 <caption>组织单位查询参数</caption>
 <colgroup>
 <col style="width: 17%" />
 <col style="width: 17%" />
 <col style="width: 65%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>用户仅</td>
 否| <td>假|真</td>
 <td>仅与当前用户关联的数据捕获组织单位。 </td>
 </tr>
 <tr class="even">
 <td> userDataViewOnly </td>
 否| <td>假|真</td>
 <td>仅与当前用户关联的数据视图组织单位。 </td>
 </tr>
 <tr class="odd">
 <td> userDataViewFallback </td>
 否| <td>假|真</td>
 <td>仅与当前用户相关联的数据视图组织单位，并回退到数据捕获组织单位。 </td>
 </tr>
 <tr class="even">
 查询<td> </td>
 <td>字符串</td>
 <td>查询名称，代码和ID属性。 </td>
 </tr>
 <tr class="odd">
 <td>级别</td>
 <td>整数</td>
 <td>层次结构中给定级别的组织单位。 </td>
 </tr>
 <tr class="even">
 <td> maxLevel </td>
 <td>整数</td>
 <td>给定的最高级别或更高层次结构中的级别的组织单位。 </td>
 </tr>
 <tr class="odd">
 用户层次结构内的<td> </td>
 否| <td>假|真</td>
 <td>将搜索和检索限制为用户数据捕获范围内的组织单位。 </td>
 </tr>
 <tr class="even">
 UserSearchHierarchy中的<td> </td>
 否| <td>假|真</td>
 <td>将搜索和检索限制为当前用户搜索范围内的组织单位。注意：如果为true，则“ withinUserHierarchy”具有更高的优先级。 </td>
 </tr>
 <tr class="odd">
 <td> memberCollection </td>
 <td>字符串</td>
 <td>要显示集合中的成员数，请参阅与组织单位关联的集合的名称。 </td>
 </tr>
 <tr class="even">
 <td> memberObject </td>
 <td> UID </td>
 <td>用于显示集合中成员的数量，是指集合中对象成员的标识符。 </td>
 </tr>
 </tbody>
 </table>

### 获取具有关系的组织单位 { #webapi_organisation_units_with_relations } 

 <!--DHIS2-SECTION-ID:webapi_organisation_units_with_relations-->

要获取具有相关组织单位的组织单位，您可以使用
以下资源。

    /api/24/organizationUnits/{id}

 <table>
 <caption>组织单位参数</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 20%" />
 <col style="width: 58%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> includeChild </td>
 否| <td>假|真</td>
 <td>包括指定组织单位的直接子级，即子层次结构中下方直接级别的单位。 </td>
 </tr>
 <tr class="even">
 <td>包括后代</td>
 否| <td>假|真</td>
 <td>包括指定组织单位的所有子级，即子层次结构中的所有单位。 </td>
 </tr>
 <tr class="odd">
 <td>包括祖先</td>
 否| <td>假|真</td>
 <td>包括指定组织单位的所有父母。 </td>
 </tr>
 <tr class="even">
 <td>级别</td>
 <td>整数</td>
 <td>在子层次结构的给定级别（相对于下面的直接级别为1的组织单位）包括指定组织单位的子级。 </td>
 </tr>
 </tbody>
 </table>

## 数据集 { #webapi_data_sets } 

 <!--DHIS2-SECTION-ID:webapi_data_sets-->

*dataSets* 资源遵循标准约定作为其他
DHIS2 中的元数据资源。此资源支持一些额外的
查询参数。

    /api/26/数据集

要检索数据集的版本，您可以发出GET请求：

    GET /api/26/dataSets/<uid>/version

要提高（增加一个）数据集的版本，您可以发出 POST
要求：

    POST /api/26/dataSets/<uid>/version

### 数据集通知模板 { #webapi_dataset_notifications } 

 <!--DHIS2-SECTION-ID:webapi_dataset_notifications-->

*数据集通知模板*资源遵循标准
DHIS2 中其他元数据资源的约定。

    获取 /api/26/dataSetNotificationTemplates

要检索数据集通知模板，您可以发出GET请求：

    GET /api/26/dataSetNotficationTemplates/<uid>

要添加数据集通知模板，您可以发出POST请求：

    POST /api/26/dataSetNotificationTemplates

要删除数据集通知模板，您可以发出DELETE请求：

    删除 /api/26/dataSetNotficationTemplates/<uid>

JSON 负载示例如下

```
{
    "name": "dataSetNotificationTemplate1",
    "notificationTrigger": "COMPLETION",
    "relativeScheduledDays": 0,
    "notificationRecipient": "ORGANISATION_UNIT_CONTACT",
    "dataSets": [{
        "id": "eZDhcZi6FLP"
    }],
    "deliveryChannels": ["SMS"],
    "subjectTemplate": "V{data_name}",
    "messageTemplate": "V{data_name}V{complete_registration_period}",
    "sendStrategy": "SINGLE_NOTIFICATION"
}

```

## 填充的组织单位级别 { #webapi_filled_organisation_unit_levels } 

 <!--DHIS2-SECTION-ID:webapi_filled_organisation_unit_levels-->

*fillOrganisationUnitLevels* 资源提供了一个有序的列表
组织单元级别，其中生成的级别被注入到
列表以填充不存在持久级别的位置。

    获取 /api/26/filledOrganizationUnitLevels

要设置组织单位级别，您可以使用
JSON 负载看起来像这样。

    {
      “组织单位级别”：[{
        “名称”：“国家”，
        “1级，
        “离线级别”：3
      }, {
        "name": "区",
        “级别”：2
      }, {
        "name": "酋长",
        “级别”：3
      }, {
        “名称”：“设施”，
        “级别”：4
      }]
    }

要使用curl进行功能测试，您可以发出以下命令。

    卷曲“http://localhost/api/26/filledOrganizationUnitLevels”-H“内容类型：application/json”
      -d @levels.json -u 管理员:区 -v

## 静态内容 { #webapi_static_content } 

 <!--DHIS2-SECTION-ID:webapi_static_content-->

*staticContent* 资源允许您上传和检索自定义内容
DHIS2 中使用的徽标。该资源允许用户上传带有
关联的密钥，稍后可以使用该密钥检索该密钥。仅限PNG
文件受支持且只能上传到“logo\_banner”并且
“logo\_front”键。

    /api/26/static内容

 <table>
 <caption>静态内容密钥</caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>键</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> logo_banner </td>
 左侧应用程序顶部菜单中的<td>徽标。 </td>
 </tr>
 <tr class="even">
 <td> logo_front </td>
 登录表单上方登录页面上的<td>徽标。 </td>
 </tr>
 </tbody>
 </table>

要上传文件，请将带有 *POST* 请求的文件发送至：

    POST /api/26/staticContent/<key>

将 logo.png 上传到 logo\_front 的示例请求
    钥匙：

    卷曲 -F“file=@logo.png;type=image/png”“https://play.dhis2.org/demo/api/26/staticContent/logo_front”
      -X POST -H“内容类型：多部分/表单数据”-u admin:district -v

使用相同的密钥上传多个文件将覆盖现有的
文件。这样，检索任何给定键的文件只会返回
最新上传的文件。

要检索徽标，您可以*获取*以下内容：

    GET /api/26/staticContent/<key>

检索为 logo\_front 存储的文件的请求示例：

__*a) 将“Accept: text/html”添加到 HTTP 标头。*__ 在这种情况下，如果未定义任何内容，端点将返回默认图像。当找到自定义或默认图像时将返回图像流。

    卷曲“https://play.dhis2.org/demo/api/26/staticContent/logo_front”-H“接受：text/html”-L -X GET -u admin：district -v

__*b) 将“Accept: application/json”添加到 HTTP 标头。*__ 设置此参数后，如果未找到自定义徽标，端点将永远不会返回默认图像。相反，将返回一条错误消息。当找到自定义图像时，此端点将返回一个 JSON 响应，其中包含相应图像的路径/URL。

    卷曲“https://play.dhis2.org/demo/api/26/staticContent/logo_front”-H“接受：application/json”-L -X GET -u admin：district -v

```javascript
// Example of a success message.
{
    "images": {
        "png": "http://localhost:8080/dhis/api/staticContent/logo_front"
    }
}
```

```javascript
// Example of an error message.
{
    "httpStatus": "Not Found",
    "httpStatusCode": 404,
    "status": "ERROR",
    "message": "No custom file found."
}
```

要使用自定义标志，您需要启用相应的系统
通过将其设置为 *true* 来设置。如果相应的设置为false，
将提供默认徽标。

## 组态 { #webapi_configuration } 

 <!--DHIS2-SECTION-ID:webapi_configuration-->

要访问配置，您可以与 *configuration* 交互
资源。您可以通过 *Accept* 标头获取 XML 和 JSON 响应
或使用 .json 或 .xml 扩展名。你可以*GET*所有属性
配置来自：

    /api/26/配置

您可以将 *GET* 和 *POST* 请求发送到以下特定
资源：

    获取 /api/26/configuration/systemId

    获取帖子删除 /api/26/configuration/feedbackRecipients

    获取帖子删除 /api/26/configuration/offlineOrganizationUnitLevel

    获取帖子 /api/26/configuration/infrastructuralDataElements

    获取帖子 /api/26/configuration/infrastructuralIndicators

    获取 POST /api/26/configuration/infrastructuralPeriodType

    获取帖子删除 /api/26/configuration/selfRegistrationRole

    获取帖子删除 /api/26/configuration/selfRegistrationOrgUnit

对于 CORS 白名单配置，您可以使用
使用“application/json”作为有效负载的 URL 数组
内容类型，例如：

    [“www.google.com”、“www.dhis2.org”、“www.who.int”]

    获取帖子 /api/26/configuration/corsWhitelist

对于 POST 请求，配置值应作为请求发送
有效载荷为文本。下表显示了适当的配置
每个属性的值。

 <table>
 <caption> 配置值 </caption>
 <colgroup>
 <col style="width: 30%" />
 <col style="width: 69%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 配置属性 </th>
 <th> 值 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 反馈收件人 </td>
 <td> 用户组 ID </td>
 </tr>
 <tr class="even">
 <td> offlineOrganisationUnitLevel </td>
 <td> 组织单位级别 ID </td>
 </tr>
 <tr class="odd">
 <td> 基础设施数据元素 </td>
 <td> 数据元素组 ID </td>
 </tr>
 <tr class="even">
 <td> 基础设施指标 </td>
 <td> 指标组 ID </td>
 </tr>
 <tr class="odd">
 <td> infrastructuralPeriodType </td>
 <td> 期间类型名称（例如 &quot;Monthly&quot;） </td>
 </tr>
 <tr class="even">
 <td> selfRegistrationRole </td>
 <td> 用户角色 ID </td>
 </tr>
 <tr class="odd">
 <td> selfRegistrationOrgUnit </td>
 <td> 组织单位 ID </td>
 </tr>
 <tr class="even">
 <td> smtp密码 </td>
 <td> SMTP 电子邮件服务器密码 </td>
 </tr>
 <tr class="odd">
 <td> remoteServerUrl </td>
 <td> 远程服务器的 URL </td>
 </tr>
 <tr class="even">
 <td> 远程服务器用户名 </td>
 <td> 远程服务器认证的用户名 </td>
 </tr>
 <tr class="odd">
 <td> 远程服务器密码 </td>
 <td> 远程服务器认证密码 </td>
 </tr>
 <tr class="even">
 <td> corsWhitelist </td>
 <td> URL 的 JSON 列表 </td>
 </tr>
 </tbody>
 </table>

例如，要设置反馈接收者用户组，您可以调用
以下 curl 命令：

    卷曲“localhost/api/26/configuration/feedbackRecipients”-d“wl5cDMuUhmF”
      -H“内容类型：文本/纯文本”-u admin：区-v

## 只读配置服务 { #webapi_readonly_configuration_interface } 

 <!--DHIS2-SECTION-ID:webapi_readonly_configuration_interface-->

要访问配置，您现在可以使用只读服务。这项服务
将提供对 *UserSettings、SystemSettings 和 DHIS2 的只读访问
服务器配置* 您可以通过以下方式获得 XML 和 JSON 响应
*接受*标题。您可以*获取*所有设置：

    /api/28/配置/设置

您可以根据设置类型获得过滤设置：

    获取 /api/28/configuration/settings/filter?type=USER_SETTING

    获取 /api/28/configuration/settings/filter?type=CONFIGURATION

可以有不止一种类型
    假如

    获取 /api/28/configuration/settings/filter?type=USER_SETTING&type=SYSTEM_SETTING

<table>
<caption>SettingType values</caption>
<colgroup>
<col style="width: 30%" />
<col style="width: 69%" />
</colgroup>
<thead>
<tr class="header">
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>USER_SETTING</td>
<td>To get user settings</td>
</tr>
<tr class="even">
<td>SYSTEM_SETTING</td>
<td>To get system settings</td>
</tr>
<tr class="odd">
<td>CONFIGURATION</td>
<td>To get DHIS server settings</td>
</tr>
</tbody>
</table>

*注意：*机密字段将在输出中提供，但
没有价值观。

## 国际化 { #webapi_i18n } 

 <!--DHIS2-SECTION-ID:webapi_i18n-->

为了检索翻译字符串的键值对，您可以使用
*i18n* 资源。

    /api/26/i18n

端点位于*api/i18n*，请求格式很简单
键值对数组：

    [
      "access_denied",
      "uploading_data_notification"
    ]

请求的类型必须是 *POST* 并使用 *application/json* 作为
内容类型。使用curl的示例，假设保存了请求数据
作为文件keys.json：

    卷曲-d @keys.json“play.dhis2.org/demo/api/26/i18n”-X POST
      -H“内容类型：application/json”-u admin：区-v

结果将如下所示：

    {
      "access_denied":"访问被拒绝",
      "uploading_data_notification":"上传本地存储的数据到服务器"
    }

## SVG转换 { #webapi_svg_conversion } 

 <!--DHIS2-SECTION-ID:webapi_svg_conversion-->

Web API 提供了可用于转换 SVG 内容的资源
转换为更广泛使用的格式，例如 PNG 和 PDF。理想情况下这个
转换应该发生在客户端，但不是所有客户端
技术能够完成这项任务。目前有 PNG 和 PDF
支持输出格式。 SVG 内容本身应该通过
一个 *svg* 查询参数，和一个可选的查询参数 *filename* 可以
用于指定响应附件文件的文件名。笔记
应省略文件扩展名。对于 PNG，您可以发送 *POST*
请求以下带有 Content-type 的 URL
*application/x-www-form-urlencoded*，与常规 HTML 表单相同
提交。

    api / svg.png

对于 PDF，您可以将 *POST* 请求发送到以下 URL：
内容类型 *application/x-www-form-urlencoded*。

    api / svg.pdf

 <table>
 <caption> 查询参数 </caption>
 <colgroup>
 <col style="width: 21%" />
 <col style="width: 11%" />
 <col style="width: 67%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 需要 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> svg </td>
 <td> 是 </td>
 <td> SVG 内容 </td>
 </tr>
 <tr class="even">
 <td> 文件名 </td>
 <td> 否 </td>
 <td> 返回的附件的文件名，没有文件扩展名 </td>
 </tr>
 </tbody>
 </table>

## 跟踪器Web API { #webapi_tracker_api } 

<!--DHIS2-SECTION-ID:webapi_tracker_api-->

Tracker Web API 由 3 个具有完整 CRUD 的端点组成（创建、
读取、更新、删除）支持。 3个端点是
*/api/29/trackedEntityInstances* */api/29/enrollments* 和
*/api/29/events* 他们负责 Tracked 实体实例，
报名和活动项目。

### 跟踪实体实例管理 { #webapi_tracked_entity_instance_management } 

<!--DHIS2-SECTION-ID:webapi_tracked_entity_instance_management-->

跟踪的实体实例在 Web-API 中具有完整的 CRUD 支持。一起
与注册 API 一起使用所需的大多数操作
支持跟踪的实体实例和程序。

    /api/29/trackedEntityInstances

#### 创建一个新的跟踪实体实例 { #webapi_creating_tei } 

<!--DHIS2-SECTION-ID:webapi_creating_tei-->

要在系统中创建新人员，您将使用
* trackedEntityInstances *资源。模板有效负载如下所示：

    {
        "trackedEntity": "跟踪实体 ID",
        "orgUnit": "组织单位 ID",
        “几何”：<GeoJson>，
        “属性”： [ {
            "属性": "属性 ID",
            "value": "属性值"
        }]
    }

字段“ geometry”接受一个GeoJson对象，其中
GeoJson必须匹配TrackedEntityType的featureType
定义。一个示例GeoJson对象如下所示：

    {
      “类型”：“点”，
      “坐标”：[1, 1]
    }

> **注意**
>
> “坐标”字段是在 2.29 中引入的，并且接受
> 坐标或多边形作为值。

要获取*关系*、*属性* 的 ID，您可以查看
在相应的资源*relationshipTypes*处，
*trackedEntityAttributes*。要创建跟踪的实体实例，您必须
使用 HTTP **POST** 方法。您可以通过以下方式发布有效负载
网址：

    / api / trackedEntityInstances

例如，让我们创建一个人员跟踪实体的新实例，然后
指定其名字和姓氏属性：

    {
      “trackedEntity”：“nEenWmSyUEp”，
      "orgUnit": "DiszpKrYNg8",
      “属性”： [
        {
          “属性”：“w75KJ2mc4zz”，
          “值”：“乔”
        },
        {
          “属性”：“zDhUuAYrxNC”，
          “值”：“史密斯”
        }
      ]
    }

要将其推送到服务器，您可以使用cURL命令，如下所示：

    卷曲-d @tei.json“https://play.dhis2.org/demo/api/trackedEntityInstances”-X POST
    -H“内容类型：application/json”-u admin:district -v

要在一个请求中创建多个实例，您可以将有效负载包装在
像这样的外部数组并 POST 到与上面相同的资源：[]()

    {
      “trackedEntityInstances”：[
        {
          “trackedEntity”：“nEenWmSyUEp”，
          "orgUnit": "DiszpKrYNg8",
          “属性”： [
            {
              “属性”：“w75KJ2mc4zz”，
              “值”：“乔”
            },
            {
              “属性”：“zDhUuAYrxNC”，
              “值”：“史密斯”
            }
          ]
        },
        {
          “trackedEntity”：“nEenWmSyUEp”，
          "orgUnit": "DiszpKrYNg8",
          “属性”： [
            {
              “属性”：“w75KJ2mc4zz”，
              “值”：“詹妮弗”
            },
            {
              “属性”：“zDhUuAYrxNC”，
              “值”：“约翰逊”
            }
          ]
        }
      ]
    }

系统不允许创建跟踪实体实例
（以及注册和活动）以及已用于
系统。这意味着UID无法重复使用。

#### 更新跟踪的实体实例 { #webapi_updating_tei } 

<!--DHIS2-SECTION-ID:webapi_updating_tei-->

为了更新被跟踪的实体实例，有效负载等于
上一节。不同之处在于您必须使用 HTTP **PUT**
发送有效负载时请求的方法。您还需要
将人员标识符附加到 *trackedEntityInstances* 资源中
像这样的 URL，其中 \<tracked-entity-instance-identifier\> 应该
被跟踪实体实例的标识符替换：

    / api / trackedEntityInstances / <tracked-entity-instance-id>

有效负载必须包含所有（甚至未经修改的）属性和
关系。之前存在的属性或关系
当前有效负载中不再存在的内容将从中删除
系统。这意味着如果属性/关系在
当前有效负载，所有现有属性/关系将被删除
从系统中。从2.31开始，可以忽略空
当前有效负载中的属性/关系。请求参数为
*ignoreEmptyCollection* 设置为 **true** 可以在您不这样做的情况下使用
希望发送任何属性/关系但又不想要它们
要从系统中删除。

不允许更新已删除的跟踪实体实例。
此外，不允许通过以下方式将跟踪的实体实例标记为已删除
更新请求。相同的规则适用于注册和活动。

#### 删除跟踪的实体实例 { #webapi_deleting_tei } 

 <!--DHIS2-SECTION-ID:webapi_deleting_tei-->

要删除跟踪的实体实例，请向 URL 发出请求
使用 HTTP **DELETE** 识别跟踪的实体实例
方法。该 URL 与上面用于更新的 URL 相同。

#### 创建并注册跟踪的实体实例 { #webapi_create_enroll_tei } 

 <!--DHIS2-SECTION-ID:webapi_create_enroll_tei-->

也可以创建（和更新）一个被跟踪的实体
实例，同时注册一个程序。

    {
        "trackedEntity": "跟踪实体 ID",
        "orgUnit": "组织单位 ID",
        “属性”： [ {
            "属性": "属性 ID",
            "value": "属性值"
        }],
        “注册人数”：[ {
            "orgUnit": "组织单位 ID",
            "program": "program-id",
            "入学日期": "2013-09-17",
            “事件日期”：“2013-09-17”
         }, {
            "orgUnit": "组织单位 ID",
            "program": "program-id",
            "入学日期": "2013-09-17",
            “事件日期”：“2013-09-17”
         }]
    }

您可以像通常在创建或
更新一个新的跟踪实体实例。

    curl -X POST -d @tei.json -H“内容类型：application/json”
      -u 用户：传递 http://server/api/29/trackedEntityInstances

#### 有效负载的完整示例包括：跟踪的实体实例，注册和事件 { #webapi_create_enroll_tei_create_event } 

 <!--DHIS2-SECTION-ID:webapi_create_enroll_tei_create_event-->

也可以创建（和更新）一个被跟踪的实体实例，在
同时注册一个程序并创建一个事件。

    {
        "trackedEntityType": "nEenWmSyUEp",
        "orgUnit": "DiszpKrYNg8",
        “属性”： [
          {
            “属性”：“w75KJ2mc4zz”，
            “值”：“乔”
          },
          {
            “属性”：“zDhUuAYrxNC”，
            “价值”：“鲁弗斯”
          },
          {
             "属性":"cejWyOfXge6",
             "value":"男"
          }
        ],
        “注册”：[
          {
             "orgUnit":"DiszpKrYNg8",
             "程序":"ur1Edk5Oe2n",
             "报名日期":"2017-09-15",
             "事件日期":"2017-09-15",
             “事件”：[
                {
                   "程序":"ur1Edk5Oe2n",
                   "orgUnit":"DiszpKrYNg8",
                   "事件日期":"2017-10-17",
                   “状态”：“已完成”，
                   “存储者”：“管理员”，
                   "programStage":"EPEcjy3FWmI",
                   “协调”：{
                      "纬度":"59.8",
                      “经度”：“10.9”
                   },
                   “数据值”：[
                      {
                         "dataElement":"qrur9Dvnyt5",
                         “值”：“22”
                      },
                      {
                         "dataElement":"oZg33kd9taw",
                         "value":"男"
                      }
                   ]
                },
                {
                   "程序":"ur1Edk5Oe2n",
                   "orgUnit":"DiszpKrYNg8",
                   "事件日期":"2017-10-17",
                   “状态”：“已完成”，
                   “存储者”：“管理员”，
                   "programStage":"EPEcjy3FWmI",
                   “协调”：{
                      "纬度":"59.8",
                      “经度”：“10.9”
                   },
                   “数据值”：[
                      {
                         "dataElement":"qrur9Dvnyt5",
                         “值”：“26”
                      },
                      {
                         "dataElement":"oZg33kd9taw",
                         "值":"女"
                      }
                   ]
                }
             ]
          }
       ]
    }

注意：如果提供的 UID 不存在于以下示例中，则上面的示例可能会失败
系统。

您可以像通常在创建或
更新一个新的跟踪实体实例。

    curl -X POST -d @tei.json -H“内容类型：application/json”
      -u 用户：传递 http://server/api/29/trackedEntityInstances

#### 生成的跟踪实体实例属性 { #webapi_generate_tei_attributes } 

 <!--DHIS2-SECTION-ID:webapi_generate_tei_attributes-->

使用自动生成的跟踪实体实例属性
唯一值具有应用程序使用的三个端点。端点
全部用于生成和保留值。

在 2.29 中，我们引入了 TextPattern 来定义和生成这些
模式。所有现有模式都将转换为有效的 TextPattern
升级到 2.29 时。

> **注意**
>
> 从 2.29 开始，所有这些端点将要求您包含任何
> *requireValues* 端点报告的变量列出为
> 必需。仅由“\#”组成的现有模式将被升级
> 到新的 TextPattern 语法“RANDOM(\<old-pattern\>)”。随机
> TextPattern 的段不是必需的变量，所以这
> 对于 2.29 之前定义的模式，端点将像以前一样工作。

##### 寻找所需的值 { #finding-required-values } 

TextPattern 可以包含根据不同的变量而变化的变量
因素。其中一些因素对服务器来说是未知的，因此
这些变量的值必须在生成和
保留值。

此端点将返回必需值和可选值的映射，即
服务器将在生成新值时注入 TextPattern。
必须为生成提供必需的变量，但可选
仅当您知道自己在做什么时才应提供变量。

    GET /api/29/trackedEntityAttributes/Gs1ICEQTPlG/requiredValues

    {
        “必需的”： [
            “ORG_UNIT_CODE”
        ],
        “选修的”： [
            “随机的”
        ]
    }

##### 产生价值终点 { #webapi_generate_values } 

 <!--DHIS2-SECTION-ID:webapi_generate_values-->

在线Web应用程序和其他希望产生价值的客户
可以立即使用，可以使用简单的生成端点。这
端点将生成一个值，该值在
生成时间。该值也保证不保留。作为
对于2.29，此端点还将保留3天生成的值。

如果您的 TextPattern 包含必需的值，您可以将它们作为
参数如下例：

过期时间也可以在生成时被覆盖，方法是
将 ?expiration=\<number-of-days\> 添加到
    要求。

    GET /api/29/trackedEntityAttributes/Gs1ICEQTPlG/generate?ORG_UNIT_CODE=OSLO

    {
        “ownerObject”：“TRACKEDENTITYATTRIBUTE”，
        “ownerUid”：“Gs1ICEQTPlG”，
        "key": "随机(X)-OSL",
        “值”：“C-OSL”，
        “创建”：“2018-03-02T12：01：36.680”，
        “到期日期”：“2018-03-05T12：01：36.678”
    }

##### 产生并保留价值终点 { #webapi_generate_reserve_values } 

 <!--DHIS2-SECTION-ID:webapi_generate_reserve_values-->

生成和保留端点供需要的脱机客户端使用
才能使用唯一ID注册跟踪的实体。他们会
保留此设备将在以下情况下使用的许多唯一ID
注册新的跟踪实体实例。端点被称为
检索多个跟踪的实体实例保留值。一个
可选参数numberToReserve指定要生成多少个ID
（默认为1）。

如果您的 TextPattern 包含必需的值，您可以将它们作为
参数如下例：

与 /generate 端点类似，该端点也可以指定
过期时间以同样的方式。通过添加
?expiration=\<number-of-days\> 您可以覆盖默认的 60
    天。

    GET /api/29/trackedEntityAttributes/Gs1ICEQTPlG/generateAndReserve?numberToReserve=3&ORG_UNIT_CODE=OSLO

    [
        {
            “ownerObject”：“TRACKEDENTITYATTRIBUTE”，
            “ownerUid”：“Gs1ICEQTPlG”，
            "key": "随机(X)-OSL",
            “值”：“B-OSL”，
            “创建”：“2018-03-02T13：22：35.175”，
            “到期日期”：“2018-05-01T13：22：35.174”
        },
        {
            “ownerObject”：“TRACKEDENTITYATTRIBUTE”，
            “ownerUid”：“Gs1ICEQTPlG”，
            "key": "随机(X)-OSL",
            “值”：“Q-OSL”，
            “创建”：“2018-03-02T13：22：35.175”，
            “到期日期”：“2018-05-01T13：22：35.174”
        },
        {
            “ownerObject”：“TRACKEDENTITYATTRIBUTE”，
            “ownerUid”：“Gs1ICEQTPlG”，
            "key": "随机(X)-OSL",
            “值”：“S-OSL”，
            “创建”：“2018-03-02T13：22：35.175”，
            “到期日期”：“2018-05-01T13：22：35.174”
        }
    ]

##### 保留值 { #reserved-values } 

目前无法通过 api 访问保留值，但是它们
由 *generate* 和 *generateAndReserve* 端点返回。这
下表解释了保留值对象的属性：

##### {#}

 <table style="width:100%;">
 <caption>保留值</caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 84%" />
 </colgroup>
 <thead>
 <tr class="header">
 属性<th> </th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ownerObject </td>
 <td>生成和保留值时引用的元数据类型。目前仅支持TRACKEDENTITYATTRIBUTE。 </td>
 </tr>
 <tr class="even">
 <td> ownerUid </td>
 <td>生成和保留值时引用的元数据对象的uid。 </td>
 </tr>
 <tr class="odd">
 <td>键</td>
 <td>部分生成的值，其中尚未添加生成的段。 </td>
 </tr>
 <tr class="even">
 <td>值</td>
 <td>保留完全解析的值。这是存储数据时发送给服务器的值。 </td>
 </tr>
 <tr class="odd">
 <td>创建了</td>
 <td>进行预订的时间戳记</td>
 </tr>
 <tr class="even">
 <td>到期日期</td>
 <td>不再保留保留的时间戳</td>
 </tr>
 </tbody>
 </table>

过期的预订每天删除。如果模式改变，则值
即使已保留的数据也将在存储数据时接受，即使
他们不符合新的模式，只要预订没有
已到期。

#### 图片属性 { #image-attributes } 

使用图像属性很像使用文件数据
价值观。具有图像值类型的属性的值是
关联的文件资源。向
*/api/trackedEntityInstances/\<entityId\>/\<attributeId\>/image*
端点将返回实际图像。可选的高度和宽度
参数可用于指定尺寸
    图像。

    卷曲 http://server/api/29/trackedEntityInstances/ZRyCnJ1qUXS/zDhUuAYrxNC/image?height=200&width=200
      > 图片.jpg

#### 跟踪实体实例查询 { #webapi_tracked_entity_instance_query } 

 <!--DHIS2-SECTION-ID:webapi_tracked_entity_instance_query-->

要查询跟踪的实体实例，您可以与
*/api/trackedEntityInstances* 资源。

    /api/29/trackedEntityInstances

##### 请求语法 { #webapi_tei_query_request_syntax } 

 <!--DHIS2-SECTION-ID:webapi_tei_query_request_syntax-->

 <table style="width:100%;">
 <caption>跟踪实体实例查询参数</caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 84%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>过滤器</td>
 <td>用作查询过滤器的属性。参数可以重复多次。过滤器可以应用到格式为&lt;attribute-id&gt;：&lt;operator&gt;：&lt;filtera0012c7dcbe0zz0z0z过滤器值不区分大小写，并且可以与运算符一起重复多次。运算符可以是EQ | GT | GE | LT | LE | NE |赞|在。 </td>
 </tr>
 <tr class="even">
 <td> ou </td>
 <td>组织单位标识符，以&quot;; &quot;分隔。 </td>
 </tr>
 <tr class="odd">
 <td> ouMode </td>
 <td>选择组织单位的模式可以选择|儿童|后裔|可访问|捕捉|全部。默认值为“已选择”，它仅引用选定的所选组织单位。有关说明，请参见下表。 </td>
 </tr>
 <tr class="even">
 <td>程序</td>
 <td>程序标识符。将实例限制为注册到给定程序中。 </td>
 </tr>
 <tr class="odd">
 <td>程序状态</td>
 <td>给定程序的实例状态。可以处于活动状态|已完成取消。 </td>
 </tr>
 <tr class="even">
 <td>跟进</td>
 <td>给定程序的实例的跟踪状态。可以是真的错误或省略。 </td>
 </tr>
 <tr class="odd">
 <td>程序启动日期</td>
 <td>跟踪的实体实例在给定程序中注册的开始日期。 </td>
 </tr>
 <tr class="even">
 <td>程序结束日期</td>
 <td>跟踪的实体实例在给定程序中的注册结束日期。 </td>
 </tr>
 <tr class="odd">
 <td> trackedEntity </td>
 <td>跟踪的实体标识符。将实例限制为给定的跟踪实例类型。 </td>
 </tr>
 <tr class="even">
 <td>页面</td>
 <td>页码。默认页面为1。</td>
 </tr>
 <tr class="odd">
 <td>页面大小</td>
 <td>页面大小。默认大小是每页50行。 </td>
 </tr>
 <tr class="even">
 <td>总页数</td>
 <td>指示是否在寻呼响应中包括总页数（意味着响应时间更长）。 </td>
 </tr>
 <tr class="odd">
 <td> skipPaging </td>
 <td>指示是否应忽略分页并应返回所有行。 </td>
 </tr>
 <tr class="even">
 <td> lastUpdatedStartDate </td>
 <td>过滤此日期之后更新的事件。不能与<em> lastUpdatedDuration </em>一起使用。 </td>
 </tr>
 <tr class="odd">
 <td> lastUpdatedEndDate </td>
 <td>过滤到此日期之前已更新的事件。不能与<em> lastUpdatedDuration </em>一起使用。 </td>
 </tr>
 <tr class="even">
 <td> lastUpdatedDuration </td>
 <td>仅包括在给定持续时间内更新的项目。格式为<value> <time-unit>，其中支持的时间单位为“ d”（天），“ h”（小时），“ m”（分钟）和“ s”（秒）。不能与<em> lastUpdatedStartDate </em>和/或<em> lastUpdatedEndDate </em>一起使用。 </td>
 </tr>
 <tr class="odd">
 <td> AssignedUserMode </td>
 <td>将结果限制为tei，事件是基于分配的用户选择模式分配的，可以是CURRENT |提供无|任何。 </td>
 </tr>
 <tr class="even">
 <td>已分配用户</td>
 <td>使用<em> AssignedUser = id1; id2 </em>将结果过滤到一组有限的teis事件，这些事件已分配给给定的用户ID。 API会出错，例如，如果assignedUserMode = CURRENT和assignedUser = someId </td>
 </tbody>
 </table>

可用的组织单元选择模式在
下表。

 <table>
 <caption>组织单位选择模式</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 79%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>模式</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>已选择</td>
 <td>请求中定义的组织单位。 </td>
 </tr>
 <tr class="even">
 儿童<td>儿童</td>
 <td>所选组织单位和直属子级，即以下级别的组织单位。 </td>
 </tr>
 <tr class="odd">
 <td>后裔</td>
 <td>所选组织单位和所有子级，即子层次结构中的所有组织单位。 </td>
 </tr>
 <tr class="even">
 <td>可访问</td>
 <td>数据视图与当前用户和所有子级关联的组织单位，即子层次结构中的所有组织单位。如果未定义当前用户，它将退回到与当前用户关联的数据捕获组织单位。 </td>
 </tr>
 <tr class="odd">
 <td>捕获</td>
 <td>与当前用户和所有子级关联的数据捕获组织单位，即子层次结构中的所有组织单位。 </td>
 </tr>
 <tr class="even">
 <td>所有</td>
 <td>系统中的所有组织单位。需要ALL权限。 </td>
 </tr>
 </tbody>
 </table>

查询不区分大小写。以下规则适用于查询
参数。

  - 必须使用 *ou* 指定至少一个组织单位
    参数（一个或多个）或 *ouMode=ALL* 必须指定。

  - 只能使用 *program* 和 *trackedEntity* 参数之一
    指定（零或一）。

  - 如果指定了 *programStatus* 那么 *program* 也必须是
    指定的。

  - 如果指定了 *followUp*，则还必须指定 *program*。

  - 如果指定了 *programStartDate* 或 *programEndDate*，则
    *程序* 也必须指定。

  - 过滤器项目只能指定一次。

查询与特定组织单位关联的所有实例
看起来像这样：

    api/29/trackedEntityInstances.json?ou=DiszpKrYNg8

使用一个带有过滤器的属性和一个属性来查询实例
没有过滤器的属性，一个组织单位使用
后代组织单位查询方式：

    api/29/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&filter=AMpUYgxuCaE&ou=DiszpKrYNg8;yMCshbaVExv

查询响应中包含一个属性的实例
还有一个属性，我们用作
    筛选：

    api/29/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&filter=AMpUYgxuCaE:LIKE:Road&ou=DiszpKrYNg8

为过滤器指定了多个操作数和过滤器的查询
物品：

    api/29/trackedEntityInstances.json?ou=DiszpKrYNg8&program=ur1Edk5Oe2n&filter=lw1SqmMlnfh:GT:150:LT:190

使用 IN 中的多个值查询属性
    筛选：

    api/29/trackedEntityInstances.json?ou=DiszpKrYNg8&filter=dv3nChNSIxy:IN:斯科特；吉米；圣地亚哥

限制对属于特定事件一部分的实例的响应
program 你可以包含一个 program 查询参数：

    api/29/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&ou=O6uvpzGd5pu
    &ouMode=后代&program=ur1Edk5Oe2n

要将程序注册日期指定为查询的一部分，请执行以下操作：

    api/29/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&ou=O6uvpzGd5pu&program=ur1Edk5Oe2n
    &programStartDate=2013-01-01&programEndDate=2013-09-01

要限制对特定跟踪实体实例的响应，您
可以包含跟踪实体查询参数：

    api/29/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&ou=O6uvpzGd5pu
    &ouMode=后代&trackedEntity=cyl5vuJ5ETQ

默认情况下，实例以大小为 50 的页面返回，以更改
您可以使用 page 和 pageSize 查询参数：

    api/29/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&ou=O6uvpzGd5pu
    &ouMode=后代&page=2&pageSize=3

您可以使用一系列运算符进行过滤：

 <table>
 <caption> 过滤运算符 </caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 80%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 操作员 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> EQ </td>
 <td> 等于 </td>
 </tr>
 <tr class="even">
 <td> GT </td>
 <td> 大于 </td>
 </tr>
 <tr class="odd">
 <td> GE </td>
 <td> 大于等于</td>
 </tr>
 <tr class="even">
 <td> LT </td>
 <td> 小于</td>
 </tr>
 <tr class="odd">
 <td> LE </td>
 <td> 小于等于</td>
 </tr>
 <tr class="even">
 <td> NE </td>
 <td> 不等于 </td>
 </tr>
 <tr class="odd">
 <td> LIKE </td>
 <td> 喜欢（自由文本匹配） </td>
 </tr>
 <tr class="even">
 <td> 在 </td>
 <td> 等于由 &quot;;&quot; </td> 分隔的多个值之一
 </tr>
 </tbody>
 </table>

##### 回应格式 { #webapi_tei_query_response_format } 

 <!--DHIS2-SECTION-ID:webapi_tei_query_response_format-->

此资源支持 JSON、JSONP、XLS 和 CSV 资源
表示。

  - json（应用程序/ json）

  - jsonp（应用程序/ javascript）

  - xml（应用程序/ xml）

JSON/XML 中的响应采用对象格式，看起来像
以下（请注意，支持字段过滤，因此如果您想要
完整视图，您可能需要添加 fields=\*)：

    {
        “trackedEntityInstances”：[
            {
                "最后更新": "2014-03-28 12:27:52.399",
                “trackedEntity”：“cyl5vuJ5ETQ”，
                “创建”：“2014-03-26 15:40:19.997”，
                "orgUnit": "ueuQlqb8ccl",
                "trackedEntityInstance": "tphfdyIiVL6",
                “关系”：[]，
                “属性”： [
                    {
                        "显示名称": "地址",
                        “属性”：“AMpUYgxuCaE”，
                        “类型”：“字符串”，
                        "value": "2033 阿卡西亚街"
                    },
                    {
                        "displayName": "TB 编号",
                        "属性": "ruQQnf6rswq",
                        “类型”：“字符串”，
                        “值”：“1Z 989 408 56 9356 521 9”
                    },
                    {
                        "displayName": "重量（公斤）",
                        “属性”：“OvY4VVhSDeJ”，
                        “类型”：“数字”，
                        “值”：“68.1”
                    },
                    {
                        "显示名称": "电子邮件",
                        “属性”：“NDXw0cluzSw”，
                        “类型”：“字符串”，
                        “价值”：“LiyaEfrem@armyspy.com”
                    },
                    {
                        "显示名称": "性别",
                        “属性”：“cejWyOfXge6”，
                        “类型”：“选项集”，
                        “值”：“女性”
                    },
                    {
                        "displayName": "电话号码",
                        “属性”：“P2cwLGskgxn”，
                        "type": "电话号码",
                        “值”：“085 813 9447”
                    },
                    {
                        "displayName": "名字",
                        “属性”：“dv3nChNSIxy”，
                        “类型”：“字符串”，
                        “价值”：“莉亚”
                    },
                    {
                        "displayName": "姓氏",
                        “属性”：“hwlRTFIFSUq”，
                        “类型”：“字符串”，
                        “价值”：“埃弗雷姆”
                    },
                    {
                        "code": "身高（厘米）",
                        "displayName": "高度（厘米）",
                        “属性”：“lw1SqmMlnfh”，
                        “类型”：“数字”，
                        “值”：“164”
                    },
                    {
                        “代码”：“城市”，
                        "显示名称": "城市",
                        “属性”：“VUvgVao8Y5z”，
                        “类型”：“字符串”，
                        “价值”：“克兰斯科普”
                    },
                    {
                        “代码”：“状态”，
                        "显示名称": "状态",
                        “属性”：“GUOBQt5K2WI”，
                        “类型”：“数字”，
                        "value": "夸祖鲁-纳塔尔省"
                    },
                    {
                        "code": "邮政编码",
                        "displayName": "邮政编码",
                        “属性”：“n9nUvfpTsxQ”，
                        “类型”：“数字”，
                        “值”：“3282”
                    },
                    {
                        "code": "母亲婚前姓名",
                        "displayName": "母亲婚前姓名",
                        “属性”：“o9odfev2Ty5”，
                        “类型”：“字符串”，
                        “价值”：“加布里埃尔”
                    },
                    {
                        "code": "国家标识符",
                        "displayName": "国家标识符",
                        “属性”：“AuPLng5hLbE”，
                        “类型”：“字符串”，
                        “值”：“465700042”
                    },
                    {
                        "代码": "职业",
                        "displayName": "职业",
                        “属性”：“A4xFHyieXys”，
                        “类型”：“字符串”，
                        “value”：“生物物理学家”
                    },
                    {
                        “代码”：“公司”，
                        "显示名称": "公司",
                        “属性”：“kyIzQsj96BD”，
                        “类型”：“字符串”，
                        “价值”：“保存中心”
                    },
                    {
                        “代码”：“车辆”，
                        "displayName": "车辆",
                        “属性”：“VHfUeXpawmE”，
                        “类型”：“字符串”，
                        "value": "2008 雪铁龙毕加索"
                    },
                    {
                        "code": "血型",
                        "displayName": "血型",
                        “属性”：“H9IlTX2X6SL”，
                        “类型”：“字符串”，
                        “值”：“B-”
                    },
                    {
                        "代码": "纬度",
                        "显示名称": "纬度",
                        “属性”：“Qo571yj6Zcn”，
                        “类型”：“字符串”，
                        “值”：“-30.659626”
                    },
                    {
                        "code": "经度",
                        "displayName": "经度",
                        “属性”：“RG7uGl4w5Jq”，
                        “类型”：“字符串”，
                        “值”：“26.916172”
                    }
                ]
            }
        ]
    }

#### 跟踪实体实例网格查询 { #webapi_tracked_entity_instance_grid_query } 

 <!--DHIS2-SECTION-ID:webapi_tracked_entity_instance_grid_query-->

要查询跟踪的实体实例，您可以与
*/api/trackedEntityInstances/grid* 资源。有两种类型
查询：其中一个 *query* 查询参数和可选的 *attribute*
参数已定义，其中 *attribute* 和 *filter*
定义了参数。此端点使用更紧凑的“网格”格式，
并且是上一节中查询的替代方法。

    api/29/trackedEntityInstances/查询

##### 请求语法 { #webapi_tei_grid_query_request_syntax } 

 <!--DHIS2-SECTION-ID:webapi_tei_grid_query_request_syntax-->

 <table style="width:100%;">
 <caption>跟踪实体实例查询参数</caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 84%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 查询<td> </td>
 <td>查询字符串。属性查询参数可用于定义响应中包括哪些属性。如果未定义任何属性，但定义了程序，则将使用该程序中的属性。如果未定义任何程序，则将使用所有属性。有两种格式。第一个是计划查询字符串。第二个格式为&lt;operator&gt;：&lt;query&gt;。运算符可以是EQ |喜欢。 EQ表示单词完全匹配，LIKE表示单词部分匹配。该查询将在空间上分割，每个单词将形成一个逻辑AND查询。 </td>
 </tr>
 <tr class="even">
 <td>属性</td>
 <td>要包含在响应中的属性。也可以用作查询的过滤器。参数可以重复多次。过滤器可以应用到格式为&lt;attribute-id&gt;：&lt;operator&gt;：&lt;filtera0012c7dcbe0zz0z0z过滤器值不区分大小写，并且可以与运算符一起重复多次。运算符可以是EQ | GT | GE | LT | LE | NE |赞|在。可以省略过滤器，以便在响应中简单地包含属性而没有任何约束。 </td>
 </tr>
 <tr class="odd">
 <td>过滤器</td>
 <td>用作查询过滤器的属性。参数可以重复多次。过滤器可以应用到格式为&lt;attribute-id&gt;：&lt;operator&gt;：&lt;filtera0012c7dcbe0zz0z0z过滤器值不区分大小写，并且可以与运算符一起重复多次。运算符可以是EQ | GT | GE | LT | LE | NE |赞|在。 </td>
 </tr>
 <tr class="even">
 <td> ou </td>
 <td>组织单位标识符，以&quot;; &quot;分隔。 </td>
 </tr>
 <tr class="odd">
 <td> ouMode </td>
 <td>选择组织单位的模式可以选择|儿童|后裔|可访问|全部。默认值为SELECTED，它仅引用所选的组织单位。有关说明，请参见下表。 </td>
 </tr>
 <tr class="even">
 <td>程序</td>
 <td>程序标识符。将实例限制为注册到给定程序中。 </td>
 </tr>
 <tr class="odd">
 <td>程序状态</td>
 <td>给定程序的实例状态。可以处于活动状态|已完成取消。 </td>
 </tr>
 <tr class="even">
 <td>跟进</td>
 <td>给定程序的实例的跟踪状态。可以是真的错误或省略。 </td>
 </tr>
 <tr class="odd">
 <td>程序启动日期</td>
 <td>跟踪的实体实例在给定程序中注册的开始日期。 </td>
 </tr>
 <tr class="even">
 <td>程序结束日期</td>
 <td>跟踪的实体实例在给定程序中的注册结束日期。 </td>
 </tr>
 <tr class="odd">
 <td> trackedEntity </td>
 <td>跟踪的实体标识符。将实例限制为给定的跟踪实例类型。 </td>
 </tr>
 <tr class="even">
 <td> eventStatus </td>
 <td>与给定程序和被跟踪实体实例相关联的任何事件的状态。可以处于活动状态|已完成已访问|预定|逾期|跳过。 </td>
 </tr>
 <tr class="odd">
 <td> eventStartDate </td>
 <td>与给定程序和事件状态关联的事件的开始日期。 </td>
 </tr>
 <tr class="even">
 <td> eventEndDate </td>
 <td>与给定程序和事件状态关联的事件的结束日期。 </td>
 </tr>
 <tr class="odd">
 <td> skipMeta </td>
 <td>指示是否应包含响应的元数据。 </td>
 </tr>
 <tr class="even">
 <td>页面</td>
 <td>页码。默认页面为1。</td>
 </tr>
 <tr class="odd">
 <td>页面大小</td>
 <td>页面大小。默认大小是每页50行。 </td>
 </tr>
 <tr class="even">
 <td>总页数</td>
 <td>指示是否在寻呼响应中包括总页数（意味着响应时间更长）。 </td>
 </tr>
 <tr class="odd">
 <td> skipPaging </td>
 <td>指示是否应忽略分页并应返回所有行。 </td>
 </tr>
 </tbody>
 </table>

可用的组织单元选择模式在
下表。

 <table>
 <caption>组织单位选择模式</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 79%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>模式</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>已选择</td>
 <td>请求中定义的组织单位。 </td>
 </tr>
 <tr class="even">
 儿童<td>儿童</td>
 <td>请求中定义的组织单位的直接子级，即仅位于下面的第一级。 </td>
 </tr>
 <tr class="odd">
 <td>后裔</td>
 <td>所有孩子，即仅低于以下水平的孩子，例如包括请求中定义的组织单位的孩子的孩子。 </td>
 </tr>
 <tr class="even">
 <td>可访问</td>
 <td>与当前用户关联的数据视图组织单位的所有后代。如果未定义当前用户，它将退回到与当前用户关联的数据捕获组织单位。 </td>
 </tr>
 <tr class="odd">
 <td>捕获</td>
 <td>与当前用户和所有子级关联的数据捕获组织单位，即子层次结构中的所有组织单位。 </td>
 </tr>
 <tr class="even">
 <td>所有</td>
 <td>系统中的所有组织单位。需要权限。 </td>
 </tr>
 </tbody>
 </table>

请注意，您可以使用过滤器指定“属性”或直接使用“过滤器”参数来限制
实例返回。

某些规则适用于返回的属性。

  - 如果在没有任何属性或程序的情况下指定“查询”，则所有属性
    标记为“在没有程序的列表中显示”包含在响应中。

  - 如果指定了程序，则链接到该程序的所有属性都将
    包含在响应中。

  - 如果指定了被跟踪实体类型，则所有被跟踪实体类型属性
    将包含在响应中。

您可以使用由空格分隔的单词来指定查询 - 即
情况系统会独立查询每个单词并返回
每个词都包含在任何属性中的记录。一个查询项可以
一次指定为属性，一次指定为过滤器（如果需要）。这
查询不区分大小写。以下规则适用于查询
参数。

  - 必须使用 *ou* 指定至少一个组织单位
    参数（一个或多个）或 *ouMode=ALL* 必须指定。

  - 只能使用 *program* 和 *trackedEntity* 参数之一
    指定（零或一）。

  - 如果指定了 *programStatus* 那么 *program* 也必须是
    指定的。

  - 如果指定了 *followUp*，则还必须指定 *program*。

  - 如果指定了 *programStartDate* 或 *programEndDate*，则
    *程序* 也必须指定。

  - 如果指定了 *eventStatus*，则 *eventStartDate* 和
    *eventEndDate* 也必须指定。

  - 不能与过滤器一起指定查询。

  - 属性项目只能指定一次。

  - 过滤器项目只能指定一次。

查询与特定组织单位关联的所有实例
看起来像这样：

    /api/29/trackedEntityInstances/query.json?ou=DiszpKrYNg8

查询特定值和组织单位的所有属性，
使用精确的单词匹配：

    /api/29/trackedEntityInstances/query.json?query=scott&ou=DiszpKrYNg8

使用部分词查询特定值的所有属性
比赛：

    /api/29/trackedEntityInstances/query.json?query=LIKE:scott&ou=DiszpKrYNg8

您可以查询多个用URL字符分隔的单词
空格为％20，将对每个空格使用逻辑AND查询
    单词：

    /api/29/trackedEntityInstances/query.json?query=isabel%20may&ou=DiszpKrYNg8

指定要包含在响应中的属性的查询：

    /api/29/trackedEntityInstances/query.json?query=isabel&attribute=dv3nChNSIxy&attribute=AMpUYgxuCaE&ou=DiszpKrYNg8

使用一个带有过滤器的属性和一个属性来查询实例
没有过滤器的属性，一个组织单位使用
后代组织单位查询方式：

    /api/29/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      &attribute=AMpUYgxuCaE&ou=DiszpKrYNg8;yMCshbaVExv

查询响应中包含一个属性的实例
还有一个属性，我们用作
    筛选：

    /api/29/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A&filter=AMpUYgxuCaE:LIKE:Road&ou=DiszpKrYNg8

为过滤器指定了多个操作数和过滤器的查询
物品：

    /api/29/trackedEntityInstances/query.json?ou=DiszpKrYNg8&program=ur1Edk5Oe2n&filter=lw1SqmMlnfh:GT:150:LT:190

使用 IN 中的多个值查询属性
    筛选：

    /api/29/trackedEntityInstances/query.json?ou=DiszpKrYNg8&attribute=dv3nChNSIxy:IN:斯科特；吉米；圣地亚哥

限制对属于特定事件一部分的实例的响应
program 你可以包含一个 program 查询参数：

    /api/29/trackedEntityInstances/query.json?filter=zHXD5Ve1Efw:EQ:A
      &ou=O6uvpzGd5pu&ouMode=后代&program=ur1Edk5Oe2n

要将程序注册日期指定为查询的一部分，请执行以下操作：

    /api/29/trackedEntityInstances/query.json?filter=zHXD5Ve1Efw:EQ:A
      &ou=O6uvpzGd5pu&program=ur1Edk5Oe2n&programStartDate=2013-01-01&programEndDate=2013-09-01

要限制对特定跟踪实体实例的响应，您
可以包含跟踪实体查询参数：

    /api/29/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      &ou=O6uvpzGd5pu&ouMode=后代&trackedEntity=cyl5vuJ5ETQ

默认情况下，实例以大小为 50 的页面返回，以更改
您可以使用 page 和 pageSize 查询参数：

    /api/29/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      &ou=O6uvpzGd5pu&ouMode=后代&page=2&pageSize=3

查询具有给定状态的事件的实例
给定的时间跨度：

    /api/29/trackedEntityInstances/query.json?ou=O6uvpzGd5pu
      &program=ur1Edk5Oe2n&eventStatus=LATE_VISIT
      &eventStartDate=2014-01-01&eventEndDate=2014-09-01

您可以使用一系列运算符进行过滤：

 <table>
 <caption> 过滤运算符 </caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 80%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 操作员 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> EQ </td>
 <td> 等于 </td>
 </tr>
 <tr class="even">
 <td> GT </td>
 <td> 大于 </td>
 </tr>
 <tr class="odd">
 <td> GE </td>
 <td> 大于等于</td>
 </tr>
 <tr class="even">
 <td> LT </td>
 <td> 小于</td>
 </tr>
 <tr class="odd">
 <td> LE </td>
 <td> 小于等于</td>
 </tr>
 <tr class="even">
 <td> NE </td>
 <td> 不等于 </td>
 </tr>
 <tr class="odd">
 <td> LIKE </td>
 <td> 喜欢（自由文本匹配） </td>
 </tr>
 <tr class="even">
 <td> 在 </td>
 <td> 等于由 &quot;;&quot; </td> 分隔的多个值之一
 </tr>
 </tbody>
 </table>

##### 回应格式 { #webapi_tei_grid_query_response_format } 

 <!--DHIS2-SECTION-ID:webapi_tei_grid_query_response_format-->

此资源支持 JSON、JSONP、XLS 和 CSV 资源
表示。

  - json（应用程序/ json）

  - jsonp（应用程序/ javascript）

  - xml（应用程序/ xml）

  - csv（应用程序/ csv）

  - xls（application / vnd.ms-excel）

JSON 中的响应采用表格格式，看起来像
下列的。 *headers* 部分描述了每列的内容。
实例、创建、上次更新、组织单位和跟踪实体列
总是存在。以下列对应属性
在查询中指定。 *rows* 部分包含一行
实例。

    {
        “标题”：[{
            “名称”：“实例”，
            "column": "实例",
            “类型”：“java.lang.String”
        }, {
            “名称”：“创建”，
            "column": "已创建",
            “类型”：“java.lang.String”
        }, {
            “名称”：“最后更新”，
            "column": "最后更新",
            “类型”：“java.lang.String”
        }, {
            “名字”：“欧”，
            "column": "组织单位",
            “类型”：“java.lang.String”
        }, {
            “名称”：“te”，
            "column": "跟踪的实体",
            “类型”：“java.lang.String”
        }, {
            "名称": "zHXD5Ve1Efw",
            "column": "出生日期类型",
            “类型”：“java.lang.String”
        }, {
            “名称”：“AMpUYgxuCaE”，
            "column": "地址",
            “类型”：“java.lang.String”
        }],
        “元数据”：{
            “名称”：{
                "cyl5vuJ5ETQ": "人"
            }
        },
        “宽度”：7，
        “高度”：7，
        “行”：[
            [“yNCtJ6vhRJu”，“2013-09-08 21:40:28.0”，“2014-01-09 19:39:32.19”，“DiszpKrYNg8”，“cyl5vuJ5ETQ”，“A”，“肯雅塔路21号”]，
            ["fSofnQR6lAU", "2013-09-08 21:40:28.0", "2014-01-09 19:40:19.62", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "上路56号"],
            [“X5wZwS5lgm2”，“2013-09-08 21:40:28.0”，“2014-01-09 19:40:31.11”，“DiszpKrYNg8”，“cyl5vuJ5ETQ”，“A”，“主路56号”]，
            [“pCbogmlIXga”，“2013-09-08 21:40:28.0”，“2014-01-09 19:40:45.02”，“DiszpKrYNg8”，“cyl5vuJ5ETQ”，“A”，“下主路12号”] ,
            ["WnUXrY4XBMM", "2013-09-08 21:40:28.0", "2014-01-09 19:41:06.97", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "13 主路"],
            [“xLNXbDs9uDF”，“2013-09-08 21:40:28.0”，“2014-01-09 19:42:25.66”，“DiszpKrYNg8”，“cyl5vuJ5ETQ”，“A”，“蒙巴萨路14号”]，
            [“foc5zag6gbE”，“2013-09-08 21:40:28.0”，“2014-01-09 19:42:36.93”，“DiszpKrYNg8”，“cyl5vuJ5ETQ”，“A”，“15上山”]
        ]
    }

#### 跟踪实体实例过滤器 { #webapi_tei_filters } 

 <!--DHIS2-SECTION-ID:webapi_tei_filters-->

要创建、读取、更新和删除跟踪的实体实例过滤器，您
可以与 */api/trackedEntityInstanceFilters* 资源交互。

    /api/29/trackedEntityInstanceFilters

##### 创建和更新跟踪的实体实例过滤器定义 { #create-and-update-a-tracked-entity-instance-filter-definiton } 

为了在中创建和更新跟踪的实体实例过滤器
系统，您将使用* trackedEntityInstanceFilters *
资源。跟踪的实体实例过滤器定义用于
Tracker Capture应用程序可在其中显示相关的预定义“工作列表”
跟踪器用户界面。

<table>
<caption>有效负载</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>负载值</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>名称</td>
<td>过滤器的名称。必需。</td>
<td></td>
</tr>
<tr class="even">
<td>说明</td>
<td>过滤器的说明。</td>
<td></td>
</tr>
<tr class="odd">
<td>排序顺序</td>
<td>过滤器的排序顺序。在 Tracker Capture 中用于对程序仪表板中的过滤器进行排序。</td>
<td></td>
</tr>
<tr class="even">
<td>样式</td>
<td>包含 CSS 样式的对象。</td>
<td>( &quot;颜色&quot;:  &quot;蓝色&quot;，&quot;图标&quot;：&quot;fa fa-日历&quot;}</td>
</tr>
<tr class="odd">
<td>程序</td>
<td>包含程序 ID 的对象。必需。</td>
<td>{ &quot;id&quot; :  &quot;uy2gU8kTjF&quot;}</td>
</tr>
<tr class="even">
<td>注册状态</td>
<td>TEI 注册状态。可以是无（任何注册状态）或 ACTIVE|COMPLETED|CANCELED</td>
<td></td>
</tr>
<tr class="odd">
<td>后续</td>
<td>当此参数为 true 时，过滤器仅返回具有状态后续注册的 TEI。</td>
<td></td>
</tr>
<tr class="even">
<td>enrollmentCreatedPeriod</td>
<td>期间对象，包含必须创建注册的期间。请参阅下面的<em>周期</em>定义表。</td>
<td>{ &quot;periodFrom&quot;：-15，&quot;periodTo&quot;：15}</td>
</tr>
<tr class="odd">
<td>事件过滤器</td>
<td>事件过滤器列表。请参阅下面的<em>事件过滤器</em>定义表。</td>
<td>[{&quot;programStage&quot;：&quot;eaDH9089uMp&quot;，&quot;事件状态&quot;：&quot;逾期&quot;，&quot;eventCreatedPeriodb05d5c591f93ed z0 : {&quot;periodFrom&quot;: -15, &quot; periodTo&quot;：15}}]</td>
</tr>
</tbody>
</table>

<table>
<caption>Event filters definition</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td>programStage</td>
<td>Which programStage the TEI needs an event in to be returned.</td>
<td>&quot;eaDH9089uMp&quot;</td>
</tr>
<tr class="even">
<td>eventStatus</td>
<td>The events status. Can be none(any event status) or ACTIVE|COMPLETED|SCHEDULED|OVERDUE</td>
<td>ACTIVE</td>
</tr>
<tr class="odd">
<td>eventCreatedPeriod</td>
<td>Period object containing a period in which the event must be created. See <em>Period</em> definition below.</td>
<td>{ &quot;periodFrom&quot;: -15, &quot;periodTo&quot;: 15}</td>
</tr>
<tr class="even">
<td>assignedUserMode</td>
<td>To specify the assigned user selection mode for events. Possible values are CURRENT (events assigned to current user)| PROVIDED (events assigned to users provided in "assignedUsers" list) | NONE (events assigned to no one) | ANY (events assigned to anyone). If PROVIDED (or null), non-empty assignedUsers in the payload will be considered.</td>
<td>"assignedUserMode": "PROVIDED"</td>
</tr>
<tr class="odd">
<td>assignedUsers</td>
<td>To specify a list of assigned users for events. To be used along with PROVIDED assignedUserMode above.</td>
<td>"assignedUsers": ["a3kGcGDCuk7", "a3kGcGDCuk8"]</td>
</tr>
</tbody>
</table>

 <table>
 <caption>期间定义</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <tbody>
 <tr class="odd">
 <td>期间从</td>
 <td>从当天算起的天数。可以是正整数或负整数。 </td>
 <td> -15 </td>
 </tr>
 <tr class="even">
 <td>周期到</td>
 <td>从当天算起的天数。必须大于periodFrom。可以是正整数或负整数。 </td>
 <td> 15 </td>
 </tr>
 </tbody>
 </table>

##### 跟踪实体实例过滤器查询 { #tracked-entity-instance-filters-query } 

要在系统中查询被跟踪实体实例过滤器，您可以
与 */api/trackedEntityInstanceFilters* 资源交互。

 <table>
 <caption>跟踪的实体实例过滤器查询参数</caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>程序</td>
 <td>程序标识符。将过滤器限制为给定程序。 </td>
 </tr>
 </tbody>
 </table>

### 招生管理 { #webapi_enrollment_management } 

 <!--DHIS2-SECTION-ID:webapi_enrollment_management-->

注册在 Web-API 中具有完整的 CRUD 支持。与 API 一起
对于跟踪的实体实例，大多数操作需要使用
支持跟踪的实体实例和程序。

    /api/29/注册

#### 将跟踪的实体实例注册到程序中 { #webapi_enrolling_tei } 

 <!--DHIS2-SECTION-ID:webapi_enrolling_tei-->

要让人员加入计划，您首先需要获得
*trackedEntityInstances* 资源中人员的标识符。
然后，您需要从 *programs* 中获取程序标识符
资源。模板有效负载如下所示：

    {
      "trackedEntityInstance": "ZRyCnJ1qUXS",
      "orgUnit": "ImspTQPwCqd",
      “程序”：“S8uo8AlvYMz”，
      "入学日期": "2013-09-17",
      “事件日期”：“2013-09-17”
    }

此有效负载应在注册的 **POST** 请求中使用
由以下 URL 标识的资源：

    /api/29/注册

要取消或完成注册，您可以进行 **PUT**
对 *enrollments* 资源的请求，包括标识符和
您想要执行的操作。用于取消已跟踪的注册
实体实例：

    /api/29/enrollments/<enrollment-id>/已取消

要完成跟踪实体实例的注册，您可以创建
**PUT** 请求到以下 URL：

    /api/29/enrollments/<enrollment-id>/completed

要删除注册信息，您可以向以下 URL 发出**DELETE**请求
请求：

    /api/29/enrollments/<enrollment-id>

#### 注册实例查询 { #webapi_enrollment_instance_query } 

 <!--DHIS2-SECTION-ID:webapi_enrollment_instance_query-->

要查询注册，您可以与 */api/enrollments* 交互
资源。

    /api/29/注册

##### 请求语法 { #webapi_enrollment_query_request_syntax } 

 <!--DHIS2-SECTION-ID:webapi_enrollment_query_request_syntax-->

 <table style="width:100%;">
 <caption>注册查询参数</caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 84%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ou </td>
 <td>组织单位标识符，以&quot;; &quot;分隔。 </td>
 </tr>
 <tr class="even">
 <td> ouMode </td>
 <td>选择组织单位的模式可以选择|儿童|后裔|可访问|捕捉|全部。默认值为“已选择”，它仅引用选定的所选组织单位。有关说明，请参见下表。 </td>
 </tr>
 <tr class="odd">
 <td>程序</td>
 <td>程序标识符。将实例限制为注册到给定程序中。 </td>
 </tr>
 <tr class="even">
 <td>程序状态</td>
 <td>给定程序的实例状态。可以处于活动状态|已完成取消。 </td>
 </tr>
 <tr class="odd">
 <td>跟进</td>
 <td>给定程序的实例的跟踪状态。可以是真的错误或省略。 </td>
 </tr>
 <tr class="even">
 <td>程序启动日期</td>
 <td>跟踪的实体实例在给定程序中注册的开始日期。 </td>
 </tr>
 <tr class="odd">
 <td>程序结束日期</td>
 <td>跟踪的实体实例在给定程序中的注册结束日期。 </td>
 </tr>
 <tr class="even">
 <td> lastUpdatedDuration </td>
 <td>仅包括在给定持续时间内更新的项目。格式为<value> <time-unit>，其中支持的时间单位为“ d”（天），“ h”（小时），“ m”（分钟）和“ s”（秒）。 </td>
 </tr>
 <tr class="odd">
 <td> trackedEntity </td>
 <td>跟踪的实体标识符。将实例限制为给定的跟踪实例类型。 </td>
 </tr>
 <tr class="even">
 <td> trackedEntityInstance </td>
 <td>跟踪的实体实例标识符。不应与trackedEntity一起使用。 </td>
 </tr>
 <tr class="odd">
 <td>页面</td>
 <td>页码。默认页面为1。</td>
 </tr>
 <tr class="even">
 <td>页面大小</td>
 <td>页面大小。默认大小是每页50行。 </td>
 </tr>
 <tr class="odd">
 <td>总页数</td>
 <td>指示是否在寻呼响应中包括总页数（意味着响应时间更长）。 </td>
 </tr>
 <tr class="even">
 <td> skipPaging </td>
 <td>指示是否应忽略分页并应返回所有行。 </td>
 </tr>
 <tr class="odd">
 <td> include已删除</td>
 <td>指示是否包括软删除的注册。默认情况下为false。 </td>
 </tr>
 </tbody>
 </table>

可用的组织单元选择模式在
下表。

 <table>
 <caption>组织单位选择模式</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 79%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>模式</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>已选择</td>
 <td>请求中定义的组织单位（默认）。 </td>
 </tr>
 <tr class="even">
 儿童<td>儿童</td>
 <td>请求中定义的组织单位的直接子级，即仅位于下面的第一级。 </td>
 </tr>
 <tr class="odd">
 <td>后裔</td>
 <td>所有孩子，即仅低于以下水平的孩子，例如包括请求中定义的组织单位的孩子的孩子。 </td>
 </tr>
 <tr class="even">
 <td>可访问</td>
 <td>与当前用户关联的数据视图组织单位的所有后代。如果未定义当前用户，它将退回到与当前用户关联的数据捕获组织单位。 </td>
 </tr>
 <tr class="odd">
 <td>所有</td>
 <td>系统中的所有组织单位。需要权限。 </td>
 </tr>
 </tbody>
 </table>

查询不区分大小写。以下规则适用于查询
参数。

  - 必须使用 *ou* 指定至少一个组织单位
    参数（一个或多个）或 *ouMode=ALL* 必须指定。

  - 只能使用 *program* 和 *trackedEntity* 参数之一
    指定（零或一）。

  - 如果指定了 *programStatus* 那么 *program* 也必须是
    指定的。

  - 如果指定了 *followUp*，则还必须指定 *program*。

  - 如果指定了 *programStartDate* 或 *programEndDate*，则
    *程序* 也必须指定。

查询与特定组织单位关联的所有注册
看起来像这样：

    /api/29/enrollments.json?ou=DiszpKrYNg8

限制对作为特定活动一部分的注册的响应
程序，您可以包含程序查询
    范围：

    /api/29/enrollments.json?ou=O6uvpzGd5pu&ouMode=DESCENDANTS&program=ur1Edk5Oe2n

要将程序注册日期指定为查询的一部分，请执行以下操作：

    /api/29/enrollments.json?&ou=O6uvpzGd5pu&program=ur1Edk5Oe2n&programStartDate=2013-01-01&programEndDate=2013-09-01

限制对特定被跟踪实体的注册的响应
您可以包含跟踪实体查询
    范围：

    /api/29/enrollments.json?ou=O6uvpzGd5pu&ouMode=DESCENDANTS&trackedEntity=cyl5vuJ5ETQ

限制对特定被跟踪实体的注册的响应
例如，您可以包含一个跟踪实体实例查询参数，在
在这种情况下，我们已将其限制为可查看的可用注册
当前的
    用户：

    /api/29/enrollments.json?ouMode=ACCESSIBLE&trackedEntityInstance=tphfdyIiVL6

默认情况下，注册以 50 页大小的页面返回，以更改
这您可以使用 page 和 pageSize 查询
    参数：

    /api/29/enrollments.json?ou=O6uvpzGd5pu&ouMode=DESCENDANTS&page=2&pageSize=3

##### 回应格式 { #webapi_enrollment_query_response_format } 

 <!--DHIS2-SECTION-ID:webapi_enrollment_query_response_format-->

此资源支持 JSON、JSONP、XLS 和 CSV 资源
表示。

  - json（应用程序/ json）

  - jsonp（应用程序/ javascript）

  - xml（应用程序/ xml）

JSON/XML 中的响应采用对象格式，看起来像
以下（请注意，支持字段过滤，因此如果您想要
完整视图，您可能需要添加 fields=\*)：

    {
        “注册”：[
            {
                "最后更新": "2014-03-28T05:27:48.512+0000",
                “trackedEntity”：“cyl5vuJ5ETQ”，
                “创建”：“2014-03-28T05：27：48.500+0000”，
                "orgUnit": "DiszpKrYNg8",
                “程序”：“ur1Edk5Oe2n”，
                "注册": "HLFOK0XThjr",
                "trackedEntityInstance": "qv0j4JBXQX0",
                “后续”：假，
                "注册日期": "2013-05-23T05:27:48.490+0000",
                "事件日期": "2013-05-10T05:27:48.490+0000",
                “状态”：“活动”
            }
        ]
    }

### 大事记 { #webapi_events } 

 <!--DHIS2-SECTION-ID:webapi_events-->

本节关于发送和读取事件。

    /api/29/事件

#### 发送事件 { #webapi_sending_events } 

 <!--DHIS2-SECTION-ID:webapi_sending_events-->

DHIS2 支持三种事件： 没有注册的单一事件
（也称为匿名事件），注册的单一事件
和多个注册的事件。注册意味着
数据链接到使用标识的跟踪实体实例
某种标识符。

要将事件发送到 DHIS2，您必须与 *events* 资源进行交互。
发送事件的方法类似于发送聚合数据
值。您将需要一个*程序*，可以使用
*programs* 资源，一个 *orgUnit*，可以使用
*organisationUnits* 资源，以及有效数据元素的列表
可以使用 *dataElements* 资源查找的标识符。
对于注册的事件，*跟踪实体实例*标识符是
需要，请在有关
*trackedEntityInstances* 资源。用于向程序发送事件
多个阶段，您还需要包括 *programStage*
标识符，programStages 的标识符可以在
*programStages* 资源。

XML 格式的没有注册示例有效负载的简单单个事件
我们从“住院发病率和死亡率”发送事件的地方
可以看到演示数据库中“Ngelehun CHC”设施的程序
以下：

    <?xml version="1.0" encoding="utf-8"?>
    <事件程序=“eBAyeGv0exc”orgUnit=“DiszpKrYNg8”
      eventDate =“2013-05-17”状态=“已完成”storedBy =“admin”>
      <coordinate latitude="59.8" longitude="10.9" />
      <dataValues>
        <dataValue dataElement="qrur9Dvnyt5" value="22" />
        <dataValue dataElement="oZg33kd9taw" value="Male" />
        <dataValue dataElement="msodh3rEMJa" value="2013-05-18" />
      </dataValues>
    </event>

为了执行一些测试，我们可以将 XML 负载保存为文件
调用*event.xml* 并将其作为 POST 请求发送到事件资源
在 API 中使用 curl 和以下命令：

    卷曲-d @event.xml“https://play.dhis2.org/demo/api/29/events”
      -H“内容类型：应用程序/xml”-u admin：区-v

JSON格式的相同负载如下所示：

    {
      “程序”：“eBAyeGv0exc”，
      "orgUnit": "DiszpKrYNg8",
      "事件日期": "2013-05-17",
      “状态”：“已完成”，
      "完成日期": "2013-05-18",
      “存储者”：“管理员”，
      “协调”： {
        “纬度”：59.8，
        “经度”：10.9
      },
      “数据值”：[
        {“dataElement”：“qrur9Dvnyt5”，“值”：“22”}，
        { "dataElement": "oZg33kd9taw", "value": "男" },
        {“dataElement”：“msodh3rEMJa”，“值”：“2013-05-18”}
      ]
    }

要发送它，您可以将其保存到一个名为 *event.json* 的文件中并使用 curl
像这样：

    curl -d @event.json“localhost/api/29/events”-H“内容类型：application/json”-u admin：区-v

我们还支持同时发送多个事件。一个有效载荷
XML 格式可能如下所示：

    <?xml version="1.0" encoding="utf-8"?>
    <events>
        <事件程序=“eBAyeGv0exc”orgUnit=“DiszpKrYNg8”
          eventDate =“2013-05-17”状态=“已完成”storedBy =“admin”>
          <coordinate latitude="59.8" longitude="10.9" />
          <dataValues>
            <dataValue dataElement="qrur9Dvnyt5" value="22" />
            <dataValue dataElement="oZg33kd9taw" value="Male" />
          </dataValues>
        </event>
        <事件程序=“eBAyeGv0exc”orgUnit=“DiszpKrYNg8”
          eventDate =“2013-05-17”状态=“已完成”storedBy =“admin”>
          <coordinate latitude="59.8" longitude="10.9" />
          <dataValues>
            <dataValue dataElement="qrur9Dvnyt5" value="26" />
            <dataValue dataElement="oZg33kd9taw" value="Female" />
          </dataValues>
        </event>
    </events>

您将收到一份包含回复的导入摘要，该回复可以是
检查以获取有关请求结果的信息，
比如成功导入了多少值。 JSON 格式的负载
格式如下：

    {
      “事件”：[
      {
        “程序”：“eBAyeGv0exc”，
        "orgUnit": "DiszpKrYNg8",
        "事件日期": "2013-05-17",
        “状态”：“已完成”，
        “存储者”：“管理员”，
        “协调”： {
          “纬度”：“59.8”，
          “经度”：“10.9”
        },
        “数据值”：[
          {“dataElement”：“qrur9Dvnyt5”，“值”：“22”}，
          { "dataElement": "oZg33kd9taw", "value": "男" }
        ] },
      {
        “程序”：“eBAyeGv0exc”，
        "orgUnit": "DiszpKrYNg8",
        "事件日期": "2013-05-17",
        “状态”：“已完成”，
        “存储者”：“管理员”，
        “协调”： {
          “纬度”：“59.8”，
          “经度”：“10.9”
        },
        “数据值”：[
          {“dataElement”：“qrur9Dvnyt5”，“值”：“26”}，
          { "dataElement": "oZg33kd9taw", "value": "女" }
        ] }
      ]
    }

从 2.30 开始，您还可以使用 GeoJson 在您的计算机上存储任何类型的几何图形
事件。使用 GeoJson 而不是以前的纬度的示例有效负载
和经度属性可以在这里看到：

    {
      “程序”：“eBAyeGv0exc”，
      "orgUnit": "DiszpKrYNg8",
      "事件日期": "2013-05-17",
      “状态”：“已完成”，
      “存储者”：“管理员”，
      “几何学”： {
        “类型”：“点”，
        “坐标”：[59.8，10.9]
      },
      “数据值”：[
        {“dataElement”：“qrur9Dvnyt5”，“值”：“22”}，
        { "dataElement": "oZg33kd9taw", "value": "男" },
        {“dataElement”：“msodh3rEMJa”，“值”：“2013-05-18”}
      ]
    }

作为导入摘要的一部分，您还将获得标识符
*引用*您刚刚发送的事件，以及一个 *href* 元素
指向此事件的服务器位置。下表
描述每个元素的含义。

<table>
<caption>活动资源格式</caption>
<colgroup>
<col style="width: 13%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 30%" />
<col style="width: 38%" />
</colgroup>
<thead>
<tr class="header">
<th>参数</th>
<th>类型</th>
<th>必填</th>
<th>选项（默认为第一个）</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>程序</td>
<td>字符串</td>
<td>true</td>
<td></td>
<td>无注册程序的单个活动的标识符</td>
</tr>
<tr class="even">
<td>orgUnit</td>
<td>字符串</td>
<td>true</td>
<td></td>
<td>发生事件的组织部门的标识符</td>
</tr>
<tr class="odd">
<td>事件日期</td>
<td>日期</td>
<td>true</td>
<td></td>
<td>事件发生的日期</td>
</tr>
<tr class="even">
<td>完成日期</td>
<td>日期</td>
<td>假</td>
<td></td>
<td>事件完成的日期。如果未提供，则选择当前日期作为事件完成日期</td>
</tr>
<tr class="odd">
<td>状态</td>
<td>枚举</td>
<td>假</td>
<td>活动 |已完成 |访问 |时间表|逾期|已跳过</td>
<td>活动是否完成</td>
</tr>
<tr class="even">
<td>存储者</td>
<td>字符串</td>
<td>假</td>
<td>默认为当前用户</td>
<td>谁存储了此事件（可以是用户名、系统名称等）</td>
</tr>
<tr class="odd">
<td>坐标</td>
<td>双</td>
<td>假</td>
<td></td>
<td>指事件发生的地理位置（纬度和经度）</td>
</tr>
<tr class="even">
<td>dataElement</td>
<td>字符串</td>
<td>true</td>
<td></td>
<td>数据元素标识符</td>
</tr>
<tr class="odd">
<td>值</td>
<td>字符串</td>
<td>true</td>
<td></td>
<td>此事件的数据值或度量</td>
</tr>
</tbody>
</table>

**OrgUnit 匹配**：默认情况下，orgUnit 参数将在
ID，您还可以使用以下命令选择 orgUnit id 匹配方案
参数 orgUnitIdScheme=SCHEME，其中选项为：*ID*、*UID*、
*UUID*、*代码* 和*名称*。还有 *ATTRIBUTE:* 方案，该方案
匹配*唯一*元数据属性值。

#### 更新事件 { #webapi_updating_events } 

 <!--DHIS2-SECTION-ID:webapi_updating_events-->

要更新现有事件，有效负载的格式是相同的，但是
您要发布到的 URL 必须将标识符添加到 URL 的末尾
字符串并且请求必须是 PUT。

有效载荷必须包含所有属性，即使是未修改的属性。
以前存在但现在不存在的属性
系统将删除任何更多的有效载荷。

不允许更新已删除的事件。 （同样适用
跟踪的实体实例和注册。）

    curl -X PUT -d @updated_event.xml“localhost/api/29/events/ID”
      -H“内容类型：application/xml”-u admin：区

    卷曲 -X PUT -d @updated_event.json“localhost/api/29/events/ID”
      -H“内容类型：application/json”-u admin：区

#### 删除活动 { #webapi_deleting_events } 

 <!--DHIS2-SECTION-ID:webapi_deleting_events-->

要删除现有事件，您只需发送一个DELETE请求
带有指向您正在使用的服务器的标识符引用。

    curl -X 删除“localhost/api/29/events/ID”-u admin:district

#### 为用户分配事件 { #webapi_user_assign_event } 

 <!--DHIS2-SECTION-ID:webapi_user_assign_event-->

可以将用户分配给事件。这可以通过在更新或创建事件时在有效负载中包含适当的属性来完成。

      “ assignedUser”：“ <id>”

id是指用户的if。一次只能为一个事件分配一个用户。

必须先在程序阶段启用用户分配，然后才能将用户分配给事件。
#### 获取事件 { #webapi_getting_events } 

 <!--DHIS2-SECTION-ID:webapi_getting_events-->

要获取现有事件，您可以发出 GET 请求，包括
像这样的标识符：

    卷曲“localhost / api / 29 / events / ID”-H“内容类型：application / xml”-u admin：district

#### 查询和阅读事件 { #webapi_querying_reading_events } 

 <!--DHIS2-SECTION-ID:webapi_querying_reading_events-->

本节说明如何读取已存储的事件
在DHIS2实例中。有关事件数据的更高级用法，请
请参阅事件分析部分。来自的输出格式
* / api / events *端点将匹配用于发送事件的格式
对其（分析事件API不支持）。 XML和
通过添加.json / .xml或通过设置
适当的* Accept *标头。默认情况下该查询是分页的，
默认页面大小为50个事件，*字段*过滤与
元数据，添加* fields *参数并包括所需的属性，
即*？fields = program，status *。

<table>
<caption>事件资源查询参数</caption>
<thead>
<tr class="header">
<th>关键字</th>
<th>类型</th>
<th>必须</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>程序</td>
<td>标识符</td>
<td>true（如果未提供程序阶段）</td>
<td>程序的标识符</td>
</tr>
<tr class="even">
<td>程序阶段</td>
<td>标识符</td>
<td>假</td>
<td>程序阶段的标识符</td>
</tr>
<tr class="odd">
<td>程序状态</td>
<td>枚举</td>
<td>假</td>
<td>事件在程序中的状态，可以是 ACTIVE | COMPLETED | CANCELLED</td>
</tr>
<tr class="even">
<td>后续</td>
<td>布尔</td>
<td>假</td>
<td>事件在程序中是否被视为后续事件，可以是 true | false 或省略。</td>
</tr>
<tr class="odd">
<td>跟踪实体实例</td>
<td>标识符</td>
<td>假</td>
<td>被跟踪实体实例的标识符</td>
</tr>
<tr class="even">
<td>orgUnit</td>
<td>标识符</td>
<td>真</td>
<td>组织单位的标识符</td>
</tr>
<tr class="odd">
<td>ouMode</td>
<td>枚举</td>
<td>假</td>
<td>机构单位选择模式，可以是已选 | 儿童 | 后裔</td>
</tr>
<tr class="even">
<td>开始日期</td>
<td>日期</td>
<td>假</td>
<td>只有比该日期新的事件</td>
</tr>
<tr class="odd">
<td>结束日期</td>
<td>日期</td>
<td>假</td>
<td>只显示早于此日期的事件</td>
</tr>
<tr class="even">
<td>状态</td>
<td>枚举</td>
<td>假</td>
<td>事件的状态，可以是 ACTIVE | COMPLETED | VISITED | SCHEDULED | OVERDUE | SKIPPED</td>
</tr>
<tr class="odd">
<td>最后更新开始日期</td>
<td>日期</td>
<td>假</td>
<td>筛选在此日期后更新的事件。不能与<em>lastUpdatedDuration</em> 一起使用。</td>
</tr>
<tr class="even">
<td>lastUpdatedEndDate</td>
<td>日期</td>
<td>假</td>
<td>筛选更新至此日期的事件。不能与<em>lastUpdatedDuration</em> 一起使用。</td>
</tr>
<tr class="odd">
<td>最后更新持续时间</td>
<td>仅包含在给定时间内更新的项目。格式为<value><time-unit> ，支持的时间单位为 "d"（天）、"h"（小时）、"m"（分钟）和 "s"（秒）。不能与<em>lastUpdatedStartDate</em> 和/或<em>lastUpdatedEndDate</em> 一起使用。</td>
</tr>
<tr class="even">
<td>skipMeta</td>
<td>布尔</td>
<td>假</td>
<td>排除响应的元数据部分（提高性能）</td>
</tr>
<tr class="odd">
<td>页面</td>
<td>整数</td>
<td>假</td>
<td>页码</td>
</tr>
<tr class="even">
<td>页面大小</td>
<td>整数</td>
<td>假</td>
<td>每页中的项目数</td>
</tr>
<tr class="odd">
<td>总页数</td>
<td>布尔</td>
<td>假</td>
<td>表示是否在分页响应中包含总页数。</td>
</tr>
<tr class="even">
<td>跳过分页</td>
<td>布尔</td>
<td>假</td>
<td>指示是否在查询中跳过分页并返回所有事件。</td>
</tr>
<tr class="odd">
<td>dataElementIdScheme</td>
<td>字符串</td>
<td>假</td>
<td>导出时使用的数据元素 ID 方案，有效选项为 UID、CODE 和 ATTRIBUTE：{ID}</td>
</tr>
<tr class="even">
<td>categoryOptionComboIdScheme</td>
<td>字符串</td>
<td>假</td>
<td>导出时使用的类别选项组合 ID 方案，有效选项包括 UID、CODE 和 
属性：{ID}</td>
</tr>
<tr class="odd">
<td>orgUnitIdScheme</td>
<td>字符串</td>
<td>假</td>
<td>用于导出的组织单位 ID 方案，有效选项为 UID、CODE 和 
属性：{ID}</td>
</tr>
<tr class="even">
<td>程序 ID 方案</td>
<td>字符串</td>
<td>假</td>
<td>用于导出的程序 ID 方案，有效选项为 UID、CODE 和 ATTRIBUTE：{ID}</td>
</tr>
<tr class="odd">
<td>programStageIdScheme</td>
<td>字符串</td>
<td>假</td>
<td>导出时使用的程序阶段 ID 方案，有效选项为 UID、CODE 和 ATTRIBUTE：{ID}</td>
</tr>
<tr class="even">
<td>idScheme</td>
<td>字符串</td>
<td>假</td>
<td>允许一次性设置数据元素、类别选项组合、orgUnit、程序和程序阶段的 id 方案。 
阶段的 id 方案。</td>
</tr>
<tr class="odd">
<td>顺序</td>
<td>字符串</td>
<td>假</td>
<td>从 API 获取事件的顺序。使用方法：order=&lt;属性&gt;:asc/desc - 默认为升序。
<p>属性：事件 | 程序 | 程序阶段 | 注册 | 注册状态 | orgUnit | orgUnitName | 追踪实体实例 | 事件日期 | 跟进 | 状态 | 到期日 | 存储方式 | 创建 | 最后更新 | 完成方式 | 完成日期</p>
<pre><code>order=orgUnitName:DESC</code></pre>
<pre><code>order=lastUpdated:ASC</code></pre></td>
</tr>
<tr class="even">
<td>事件</td>
<td>逗号分隔字符串</td>
<td>错误</td>
<td>使用<em>event=id1;id2</em> 将结果筛选为有限的一组 ID。</td>
</tr>
<tr class="odd">
<td>属性Cc**</td>
<td>字符串</td>
<td>假</td>
<td>属性类别组合标识符（必须与<em>attributeCos</em> 结合使用 )</td>
</tr>
<tr class="even">
<td>attributeCos**</td>
<td>字符串</td>
<td>假</td>
<td>属性类别选项标识符，用;分隔（必须与<em>attributeCc</em> 结合使用 )</td>
</tr>
<tr class="odd">
<td>同步</td>
<td>false | true</td>
<td>假</td>
<td>表示导入是异步还是同步进行。</td>
</tr>
<tr class="even">
<td>包含删除</td>
<td>布尔</td>
<td>假</td>
<td>为真时，软删除事件将包含在查询结果中。</td>
</tr>
<tr class="odd">
<td>指定用户模式</td>
<td>枚举</td>
<td>假</td>
<td>指定用户选择模式，可以是 CURRENT | PROVIDED | NONE | ANY。</td>
</tr>
<tr class="even">
<td>assignedUser</td>
<td>逗号分隔字符串</td>
<td>错误</td>
<td>使用<em>assignedUser=id1;id2</em> 将结果筛选为分配给给定用户 ID 的有限事件集。只有 assignedUserMode 为 PROVIDED 或为空时，才会考虑该参数。例如，如果 assignedUserMode=CURRENT 和 assignedUser=someId 时，API 将出错。</td>
</tr>
</tbody>
</table>

\*\***注意：** 如果查询既不包含 *attributeCC* 也不包含
*attributeCos*，服务器返回所有属性选项的事件
用户具有读取访问权限的组合。

##### 例子 { #examples } 

查询具有特定组织单位的子级的所有事件：

    /api/29/events.json?orgUnit=YuQRtpLP10I&ouMode=CHILDREN

查询某个组织的所有后代的所有事件
单位，暗示子层次结构中的所有组织单位：

    /api/29/events.json?orgUnit=O6uvpzGd5pu&ouMode=后代

使用特定程序和组织单位查询所有事件：

    /api/29/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc

查询具有一定节目和组织单位的所有事件，
按截止日期排序
    上升：

    /api/29/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&order=dueDate

查询某节目中活动日期最新的10个活动
和组织单位 - 按到期日降序分页和排序：

    /api/29/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc
      &order=事件日期:desc&pageSize=10&page=1

查询具有特定节目和组织单位的所有事件
特定的跟踪实体实例：

    /api/29/events.json?orgUnit=DiszpKrYNg8
      &program=eBAyeGv0exc&trackedEntityInstance=gfVxE3ALA9m

查询某个程序和组织单位较旧的所有事件
或等于
    2014-02-03：

    /api/29/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&endDate=2014-02-03

查询具有一定节目阶段、组织单位和
2014年被跟踪实体实例：

    /api/29/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc
      &trackedEntityInstance=gfVxE3ALA9m&开始日期=2014-01-01&结束日期=2014-12-31

检索具有指定组织单位和程序的事件，并使用 _Attribute:Gq0oWTf2DtN_ 作为
标识符方案

    /api/events?orgUnit=DiszpKrYNg8&program=lxAQ7Zs9VYR&idScheme=属性：Gq0oWTf2DtN

检索具有指定组织单位和程序的事件，并使用 UID 作为标识符方案
orgUnits，代码作为程序阶段的标识符方案，以及 _Attribute:Gq0oWTf2DtN_ 作为标识符
具有指定属性的其余元数据的方案。

    api/events.json?orgUnit=DiszpKrYNg8&program=lxAQ7Zs9VYR&idScheme=属性：Gq0oWTf2DtN
      &orgUnitIdScheme=UID&programStageIdScheme=代码

#### 事件网格查询 { #event-grid-query } 

除了上面的事件查询端点，还有一个事件网格
查询终点，其中更紧凑的“网格”事件格式
回。这可以通过与
/api/events/query.json|xml|xls|csv 端点。

    /api/26/事件/查询

事件查询和读取中提到的大部分查询参数
上面的部分在此处有效。但是，由于要返回的网格
带有适用于所有行（事件）的特定列集，它
必须指定程序阶段。混合是不可能的
来自不同程序或程序阶段的事件返回。

从单个程序阶段返回事件，也为新的事件打开
功能 - 例如根据事件对事件进行排序和搜索
数据元素值。 api/events/query 对此有支持。以下是
一些例子

返回仅包含选定数据元素的事件网格的查询
对于一个程序阶段

    /api/28/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk&dataElement=qrur9Dvnyt5,fWIAEtYVEGk,K6uUAvq500H&order=lastUpdated:desc&pageSize=50&page=1&totalPages=true

返回包含所有数据元素的事件网格的查询
程序
    阶段

    /api/28/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk&includeAllDataElements=true

基于数据元素过滤事件的查询
    价值

    /api/28/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk&filter=qrur9Dvnyt5:GT:20:LT:50

除了过滤，上面的例子还说明了一个
事情：没有提到要返回的数据元素的事实
在网格中。发生这种情况时，系统默认返回只返回
在程序阶段标记为“在报告中显示”的那些数据元素
配置。

我们还可以扩展上面的查询以返回一个排序的网格（asc|desc）
基于数据元素
    价值

    /api/28/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk&filter=qrur9Dvnyt5:GT:20:LT:50&order=qrur9Dvnyt5:desc

#### 事件过滤器 { #webapi_event_filters } 

 <!--DHIS2-SECTION-ID:webapi_event_filters-->

要创建，读取，更新和删除事件过滤器，您需要
可以与* / api / eventFilters *资源进行交互。

    /api/32/eventFilters

##### 创建和更新事件过滤器定义 { #create-and-update-an-event-filter-definiton } 

用于创建和更新事件过滤器
系统，您将使用 *eventFilters*
资源。 *POST* 用于创建，*PUT* 方法用于更新。事件过滤器定义用于
Tracker Capture 应用程序显示相关的预定义“工作列表”
跟踪器用户界面。

 <table>
 <caption>请求有效负载</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>请求属性</th>
 <th>说明</th>
 <th>示例</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>名称</td>
 <td>过滤器的名称。 </td>
 <td>“名称”：“我的工作清单” </td>
 </tr>
 <tr class="even">
 <td>说明</td>
 <td>过滤器的描述。 </td>
 <td>“ description”：“用于列出分配给我的所有事件”。 </td>
 </tr>
 <tr class="odd">
 <td>程序</td>
 <td>程序的uid。 </td>
 <td>“程序”：“ a3kGcGDCuk6” </td>
 </tr>
 <tr class="even">
 <td>程序阶段</td>
 <td>程序阶段的uid。 </td>
 <td>“ programStage”：“ a3kGcGDCuk6” </td>
 </tr>
 <tr class="even">
 <td> eventQueryCriteria </td>
 <td>包含用于查询，排序和过滤事件的参数的对象。 </td>
 <td>
  “ eventQueryCriteria”：{
    “ organisationUnit”：“ a3kGcGDCuk6”，
    “ status”：“ COMPLETED”，
    “创建日期”： {
      “ from”：“ 2014-05-01”，
      “至”：“ 2019-03-20”
    }，
    “ dataElements”：[“ a3kGcGDCuk6：EQ：1”，“ a3kGcGDCuk6”]，
    “ filters”：[“ a3kGcGDCukuk：EQ：1”]，
    “ programStatus”：“ ACTIVE”，
    “ ouMode”：“已选择”，
    “ assignedUserMode”：“已提供”，
    “ assignedUsers”：[“ a3kGcGDCuk7”，“ a3kGcGDCuk8”]，
    “ followUp”：否，
    “ trackedEntityInstance”：“ a3kGcGDCuk6”，
    “事件”：[“ a3kGcGDCuk7”，“ a3kGcGDCuk8”]，
    “ fields”：“ eventDate，dueDate”，
    “ order”：“ dueDate：asc，createdDate：desc”
  }
 </td>
 </tr>
 </tbody>
 </table>

 <table>
 <caption>事件查询条件定义</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <tbody>
 <tr class="odd">
 <td>跟进</td>
 <td>用于基于注册followUp标志过滤事件。可能的值为true | false。 </td>
 <td>“ followUp”：真</td>
 </tr>
 <tr class="even">
 <td>组织单位</td>
 <td>指定组织单位的uid </td>
 <td>“ organizationUnit”：“ a3kGcGDCuk7” </td>
 </tr>
 <tr class="odd">
 <td> ouMode </td>
 <td>指定OU选择模式。可能的值是SELECTED |儿童|后裔|可访问性|捕获|所有</td>
 <td>“ ouMode”：“已选择” </td>
 </tr>
 <tr class="even">
 <td> AssignedUserMode </td>
 <td>为事件指定分配的用户选择模式。可能的值为CURRENT |提供|无|任何。请参阅下表以了解每个值表示什么。如果设置为PROVIDED（或为null），则将考虑有效负载中的非空AssignedUsers。 </td>
 <td>“ assignedUserMode”：“已提供” </td>
 </tr>
 <tr class="odd">
 <td>已分配用户</td>
 <td>指定事件的分配用户列表。与上面的PROVIDEDsignedUserMode一起使用。 </td>
 <td>“ assignedUsers”：[“ a3kGcGDCuk7”，“ a3kGcGDCuk8”] </td>
 </tr>
 <tr class="even">
 <td> displayOrderColumns </td>
 <td>指定列</td>的输出顺序
 <td>“ displayOrderColumns”：[“ eventDate”，“ dueDate”，“ program”] </td>
 </tr>
 <tr class="odd">
 <td>订单</td>
 <td>以逗号分隔值指定字段的排序/排序及其方向。单个项目的顺序为“ dataItem：direction”。 </td>
 <td>“ order” =“ a3kGcGDCuk6：desc，eventDate：asc” </td>
 </tr>
 <tr class="even">
 <td>数据过滤器</td>
 <td>指定在列出事件时要应用的过滤器</td>
 <td>“ dataFilters” = [{
      “ dataItem”：“ abcDataElementUid”，
      “ le”：“ 20”，
      “ ge”：“ 10”，
      “ lt”：“ 20”，
      “ gt”：“ 10”，
      “在”：[“印度”，“挪威”]，
      “ like”：“ abc”，
      “ dateFilter”：{
        “ startDate”：“ 2014-05-01”，
        “ endDate”：“ 2019-03-20”，
        “ startBuffer”：-5，
        “ endBuffer”：5
        “ period”：“ LAST_WEEK”，
        “ type”：“ RELATIVE”
      }
    }] </td>
 </tr>
 <tr class="odd">
 <td>状态</td>
 <td>任何有效的EventStatus </td>
 <td>“ eventStatus”：“已完成” </td>
 </tr>
 <tr class="even">
 <td>事件</td>
 <td>指定事件列表</td>
 <td>“事件” = [“ a3kGcGDCuk6”] </td>
 </tr>
 <tr class="odd">
 <td>完成日期</td>
 <td> DateFilterPeriod对象基于完成日期的日期过滤。 </td>
 <td>
  “ completedDate”：{
    “ startDate”：“ 2014-05-01”，
    “ endDate”：“ 2019-03-20”，
    “ startBuffer”：-5，
    “ endBuffer”：5
    “ period”：“ LAST_WEEK”，
    “ type”：“ RELATIVE”
  }
 </td>
 </tr>
 <tr class="even">
 <td>事件日期</td>
 <td> DateFilterPeriod基于事件日期的对象日期过滤。 </td>
 <td>
  “活动日期”： {
    “ startBuffer”：-5，
    “ endBuffer”：5
    “ type”：“ RELATIVE”
  }
 </td>
 </tr>
 <tr class="odd">
 <td>到期日期</td>
 <td> DateFilterPeriod对象基于到期日期的日期过滤。 </td>
 <td>
  “截止日期”： {
    “ period”：“ LAST_WEEK”，
    “ type”：“ RELATIVE”
  }
 </td>
 </tr>
 <tr class="even">
 <td> lastUpdatedDate </td>
 <td> DateFilterPeriod对象基于最近更新的日期进行日期过滤。 </td>
 <td>
  “ lastUpdatedDate”：{
    “ startDate”：“ 2014-05-01”，
    “ endDate”：“ 2019-03-20”，
    “ type”：“绝对”
  }
 </td>
 </tr>

 </tbody>
 </table>

 <table>
 <caption> DateFilterPeriod对象定义</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <tbody>
 <tr class="odd">
 <td>类型</td>
 指定日期期间类型是否为ABSOLUTE | <td>相关</td>
 <td>“ type”：“ RELATIVE” </td>
 </tr>
 <tr class="even">
 <td>周期</td>
 <td>指定是否使用相对系统定义的时间段。仅在“类型”为相对时适用。 （有关支持的相对周期，请参见<a href="#webapi_date_relative_period_values">相对周期</a>）</td>
 <td>“句点”：“ THIS_WEEK” </td>
 </tr>
 <tr class="odd">
 <td>开始日期</td>
 <td>绝对开始日期。仅当“类型”为绝对值时才适用</td>
 <td>“ startDate”：“ 2014-05-01” </td>
 </tr>
 <tr class="even">
 <td>结束日期</td>
 <td>绝对结束日期。仅当“类型”为绝对值时才适用</td>
 <td>“ startDate”：“ 2014-05-01” </td>
 </tr>
 <tr class="odd">
 <td> startBuffer </td>
 <td>相对的自定义开始日期。仅在“类型”为相对</td>时适用
 <td>“ startBuffer”：-10 </td>
 </tr>
 <tr class="even">
 <td> endBuffer </td>
 <td>相对自定义结束日期。仅在“类型”为相对</td>时适用
 <td>“ startDate”：+ 10 </td>
 </tr>
 </tbody>
 </table>

可用的分配用户选择模式在
下表。

 <table>
 <caption>分配的用户选择模式（事件分配）</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 79%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>模式</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>当前</td>
 <td>分配给当前登录的用户</td>
 </tr>
 <tr class="even">
 <td>提供了</td>
 <td>分配给“ assignedUser”参数中提供的用户</td>
 </tr>
 <tr class="odd">
 <td>无</td>
 <td>分配给任何用户。 </td>
 </tr>
 <tr class="even">
 <td>任意</td>
 <td>分配给任何用户。 </td>
 </tr>
 </tbody>
 </table>

下面显示了可用于创建/更新eventFilter的示例有效负载。

````
{
  “程序”：“ur1Edk5Oe2n”，
  "description": "结核病事件的简单过滤器",
  "name": "结核病事件",
  “事件查询条件”：{
    "organizationUnit":"DiszpKrYNg8",
    “事件状态”：“已完成”，
    “活动日期”： {
      “开始日期”：“2014-05-01”，
      “结束日期”：“2019-03-20”，
      “开始缓冲区”：-5，
      “结束缓冲区”：5，
      “期间”：“LAST_WEEK”，
      “类型”：“相对”
    },
    “数据过滤器”：[{
      "dataItem": "abcDataElementUid",
      “乐”：“20”，
      “格”：“10”，
      “lt”：“20”，
      “gt”：“10”，
      "in": ["印度"、"挪威"],
      “喜欢”：“abc”
    },
    {
      "dataItem": "dateDataElementUid",
      “日期过滤器”：{
        “开始日期”：“2014-05-01”，
        “结束日期”：“2019-03-20”，
        “类型”：“绝对”
      }
    },
    {
      "dataItem": "另一个DateDataElementUid",
      “日期过滤器”：{
        “开始缓冲区”：-5，
        “结束缓冲区”：5，
        “类型”：“相对”
      }
    },
    {
      "dataItem": "yetAnotherDateDataElementUid",
      “日期过滤器”：{
        “期间”：“LAST_WEEK”，
        “类型”：“相对”
      }
    }],
    “程序状态”：“活动”
  }
}
````


##### 检索和删除事件过滤器 { #retrieving-and-deleting-event-filters } 

可以使用以下api检索特定的事件过滤器

    [GET] /api/32/eventFilters/{uid}

可以使用以下api检索所有事件过滤器。

    [获取] /api/32/eventFilters?fields=*

可以使用以下api检索特定程序的所有事件过滤器

    [GET] /api/32/eventFilters?filter=program:eq:IpHINAT79UW

可以使用以下API删除事件过滤器

    [删除] /api/32/eventFilters/{uid}


### 人际关系 { #relationships } 
关系是跟踪器中两个实体之间的链接。这些实体可以跟踪实体实例，注册和事件。

有多个端点，可让您查看，创建，删除和更新关系。最常见的是/ api / trackedEntityInstances端点，您可以在其中将关系包括在有效负载中以创建，更新或删除它们（如果忽略它们）-类似于在同一端点中处理注册和事件的方式。如果在字段过滤器中请求，所有跟踪器端点，/ api / trackedEntityInstances，/ api / enrollments和/ api / events也会列出它们的关系。

但是，关系的标准端点是/ api / relationships。该端点为关系提供所有正常的CRUD操作。

列出所有关系要求您提供要列出以下所有关系的trackedEntityInstance，注册或事件的UID：

    GET / api / relationships？tei = ABCDEF12345
    GET / api / relationships？enrollment = ABCDEF12345
    GET / api / relationships？event = ABCDEF12345

该请求将返回您有权访问的任何关系的列表，其中包括您指定的trackedEntityInstance，注册或事件。每个关系都使用以下JSON表示：

    {
      "relationshipType": "dDrh5UyCyvQ",
      "relationshipName": "母子",
      “关系”：“t0HIBrc65Rm”，
      “双向”：假，
      “从”： {
        “trackedEntityInstance”：{
          “trackedEntityInstance”：“vOxUH373fy5”
        },
      “到”： {
        “trackedEntityInstance”：{
          “trackedEntityInstance”：“pybd813kIWx”
        },
      “创建”：“2019-04-26T09：30：56.267”，
      “最后更新”：“2019-04-26T09：30：56.267”
    }

您还可以使用以下端点查看指定的关系：

    GET /api/relationships/<id>

要创建或更新关系，可以使用以下端点：

    POST / api / relationships
    PUT / api /关系

并使用以下有效负载结构：

    {
      "relationshipType": "dDrh5UyCyvQ",
      “从”： {
        “trackedEntityInstance”：{
          “trackedEntityInstance”：“vOxUH373fy5”
        },
      “到”： {
        “trackedEntityInstance”：{
          “trackedEntityInstance”：“pybd813kIWx”
        }
    }

要删除关系，可以使用以下端点：

      删除/ api / relationships / <id>

在示例有效负载中，我们使用trackedEntityInstances之间的关系。因此，有效负载的“从”和“到”属性包括“ trackedEntityInstance”对象。如果您的关系包括其他实体，则可以使用以下属性：

      “注册”：{
        “注册”：<id>
      }

      “事件”： {
        “事件”：<id>
      }

### 更新策略 { #webapi_tei_update_strategies } 

 <!--DHIS2-SECTION-ID:webapi_tei_update_strategies-->

支持所有 3 个跟踪器端点的两种更新策略：
注册和事件创建。当您生成一个
客户端的标识符，不确定它是否被创建
在服务器上。

 <table>
 <caption>可用的跟踪器策略</caption>
 <colgroup>
 <col style="width: 24%" />
 <col style="width: 75%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>创建</td>
 <td>仅创建，这是默认行为。 </td>
 </tr>
 <tr class="even">
 <td> CREATE_AND_UPDATE </td>
 <td>尝试匹配该ID（如果存在），然后更新（如果未创建）。 </td>
 </tr>
 </tbody>
 </table>

要更改参数，请使用策略参数：

    POST /api/29/trackedEntityInstances?strategy=CREATE_AND_UPDATE

### 跟踪器批量删除 { #webapi_tracker_bulk_deletion } 

 <!--DHIS2-SECTION-ID:webapi_tracker_bulk_deletion-->

批量删除跟踪器对象的工作方式与添加和删除类似
更新跟踪器对象，唯一的区别是
*导入策略*是**删除**。

*示例：批量删除跟踪实体实例：*

    {
      “trackedEntityInstances”：[
        {“trackedEntityInstance”：“ID1”}，
        {“trackedEntityInstance”：“ID2”}，
        {“trackedEntityInstance”：“ID3”}
      ]
    }

    curl -X POST -d @data.json -H“内容类型：application/json”
      “http://server/api/29/trackedEntityInstances?strategy=DELETE”

*示例：批量删除注册：*

    {
      “注册”：[
        { "注册": "ID1" },
        { "注册": "ID2" },
        {“注册”：“ID3”}
      ]
    }

    curl -X POST -d @data.json -H“内容类型：application/json”
      “http://server/api/29/enrollments?strategy=DELETE”

*示例：批量删除事件：*

    {
      “事件”：[
        {“事件”：“ID1”}，
        {“事件”：“ID2”}，
        {“事件”：“ID3”}
      ]
    }

    curl -X POST -d @data.json -H“内容类型：application/json”
      “http://server/api/29/events?strategy=DELETE”

### 通过POST和PUT方法重复使用标识符和删除项目 { #webapi_updating_and_deleting_items } 

 <!--DHIS2-SECTION-ID:webapi_updating_and_deleting_items-->

跟踪器端点 */trackedEntityInstances*、*/enrollments*、*/events*
支持 CRUD 操作。系统跟踪使用的标识符。
因此，已创建然后删除的项目（例如事件、
注册）不能再次创建或更新。如果试图删除
已删除的项目，系统返回成功响应为
删除已删除的项目意味着没有更改。

系统不允许通过更新（* PUT *）删除项目或
创建（* POST *）方法。因此，中的* deleted *属性将被忽略
* PUT *和* POST *方法，并且在* POST *方法中默认设置
为* false *。

### 导入参数 { #webapi_import_parameters } 

 <!--DHIS2-SECTION-ID:webapi_import_parameters-->

可以使用一组导入参数来自定义导入过程：

<table>
<caption>Import parameters</caption>
<thead>
<tr class="header">
<th>Parameter</th>
<th>Values (default first)</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>dataElementIdScheme</td>
<td>id | name | code | attribute:ID</td>
<td>Property of the data element object to use to map the data values.</td>
</tr>
<tr class="even">
<td>orgUnitIdScheme</td>
<td>id | name | code | attribute:ID</td>
<td>Property of the org unit object to use to map the data values.</td>
</tr>
<tr class="odd">
<td>idScheme</td>
<td>id | name | code| attribute:ID</td>
<td>Property of all objects including data elements, org units and category option combos, to use to map the data values.</td>
</tr>
<tr class="even">
<td>dryRun</td>
<td>false | true</td>
<td>Whether to save changes on the server or just return the import summary.</td>
</tr>
<tr class="odd">
<td>strategy</td>
<td>CREATE | UPDATE | CREATE_AND_UPDATE | DELETE</td>
<td>Save objects of all, new or update import status on the server.</td>
</tr>
<tr class="even">
<td>skipNotifications</td>
<td>true | false</td>
<td>Indicates whether to send notifications for completed events.</td>
</tr>
<tr class="odd">
<td>skipFirst</td>
<td>true | false</td>
<td>Relevant for CSV import only. Indicates whether CSV file contains a header row which should be skipped.</td>
</tr>
<tr class="even">
<td>importReportMode</td>
<td>FULL, ERRORS, DEBUG</td>
<td>Sets the <strong>ImportReport</strong> mode, controls how much is reported back after the import is done. <strong>ERRORS</strong> only includes <em>ObjectReports</em> for object which has errors. <strong>FULL</strong> returns an <em>ObjectReport</em> for all objects imported, and <strong>DEBUG</strong> returns the same plus a name for the object (if available).</td>
</tr>
</tbody>
</table>

#### CSV导入/导出 { #webapi_events_csv_import_export } 

 <!--DHIS2-SECTION-ID:webapi_events_csv_import_export-->

除了用于事件导入/导出的 XML 和 JSON 之外，在 DHIS2.17 中我们
引入了对 CSV 格式的支持。对这种格式的支持建立在
上一节已经描述过，所以这里我们只写
CSV 特定部分是什么。

要使用CSV格式，您必须使用* / api / events.csv *
端点，或添加*内容类型：text / csv *进行导入，并*接受：
使用* / api / events *端点时要导出的text / csv *。

CSV 中用于导出和导入的列的顺序
如下：

 <table>
 <caption> CSV 列 </caption>
 <thead>
 <tr class="header">
 <th> 索引 </th>
 <th> 密钥 </th>
 <th> </th>型
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 1 </td>
 <td> 事件 </td>
 <td> 标识符 </td>
 <td> 事件标识符 </td>
 </tr>
 <tr class="even">
 <td> 2 </td>
 <td> 状态 </td>
 <td> 枚举 </td>
 <td> 事件状态，可以是ACTIVE |已完成 |访问 |预定 |逾期 |跳过 </td>
 </tr>
 <tr class="odd">
 <td> 3 </td>
 <td> 程序 </td>
 <td> 标识符 </td>
 <td> 程序标识符 </td>
 </tr>
 <tr class="even">
 <td> 4 </td>
 <td> programStage </td>
 <td> 标识符 </td>
 <td> 程序阶段标识符 </td>
 </tr>
 <tr class="odd">
 <td> 5 </td>
 <td> 注册 </td>
 <td> 标识符 </td>
 <td> 注册标识符（程序实例） </td>
 </tr>
 <tr class="even">
 <td> 6 </td>
 <td> 组织单位 </td>
 <td> 标识符 </td>
 <td> 组织单元标识符 </td>
 </tr>
 <tr class="odd">
 <td> 7 </td>
 <td> eventDate </td>
 <td> 日期 </td>
 <td> 事件日期 </td>
 </tr>
 <tr class="even">
 <td> 8 </td>
 <td> 到期日期 </td>
 <td> 日期 </td>
 <td> 到期日 </td>
 </tr>
 <tr class="odd">
 <td> 9 </td>
 <td> 纬度 </td>
 <td> 双 </td>
 <td> 事件发生的纬度 </td>
 </tr>
 <tr class="even">
 <td> 10 </td>
 <td> 经度 </td>
 <td> 双 </td>
 <td> 事件发生的经度 </td>
 </tr>
 <tr class="odd">
 <td> 11 </td>
 <td> 数据元素 </td>
 <td> 标识符 </td>
 <td> 数据元素的标识符 </td>
 </tr>
 <tr class="even">
 <td> 12 </td>
 <td> 值 </td>
 <td> 字符串 </td>
 <td> 事件的值/度量 </td>
 </tr>
 <tr class="odd">
 <td> 13 </td>
 <td> 由 </td> 存储
 <td> 字符串 </td>
 <td> 事件由（默认为当前用户）存储 </td>
 </tr>
 <tr class="even">
 <td> 14 </td>
 <td> 提供其他地方 </td>
 <td> 布尔值 </td>
 <td> 这个值是不是在其他地方收集的 </td>
 </tr>
 <tr class="odd">
 <td> 14 </td>
 <td> 完成日期 </td>
 <td> 日期 </td>
 <td> 事件完成日期 </td>
 </tr>
 <tr class="even">
 <td> 14 </td>
 <td>已完成</td>
 <td> 字符串 </td>
 <td> 完成事件的用户的用户名 </td>
 </tr>
 </tbody>
 </table>

*具有 2 个不同数据值的 2 个事件的示例
    每个：*

    EJNxP3WreNP，已完成，<pid>，<psid>，<enrollment-id>，<ou>,2016-01-01,2016-01-01,,,<de>,1,,
    EJNxP3WreNP，已完成，<pid>，<psid>，<enrollment-id>，<ou>,2016-01-01,2016-01-01,,,<de>,2,,
    qPEdI1xn7k0,已完成,<pid>,<psid>,<enrollment-id>,<ou>,2016-01-01,2016-01-01,,,<de>,3,,
    qPEdI1xn7k0,已完成,<pid>,<psid>,<enrollment-id>,<ou>,2016-01-01,2016-01-01,,,<de>,4,,

#### 导入策略：SYNC { #webapi_sync_import_strategy } 

 <!--DHIS2-SECTION-ID:webapi_sync_import_strategy-->

导入策略 SYNC 应仅用于内部同步
任务而不是常规导入。 SYNC 策略允许所有 3
操作：CREATE、UPDATE、DELETE 出现在有效载荷中
同时。

### 跟踪器所有权管理 { #webapi_tracker_ownership_management } 

 <!--DHIS2-SECTION-ID:webapi_tracker_ownership_management-->

从 2.30 开始引入了一个名为 Tracker Ownership 的新概念。那里
现在将成为跟踪实体实例的一个所有者组织单位
程序的上下文。配置了访问权限的程序
*PROTECTED* 或 *CLOSED* 的级别将遵守所有权
特权。仅属于所属组织单位的用户
被跟踪的实体-程序组合将能够访问数据
与该被跟踪实体的该计划相关。

#### 跟踪器所有权优先：打破常规 { #webapi_tracker_ownership_override_api } 

 <!--DHIS2-SECTION-ID:webapi_tracker_ownership_override_api-->

可以临时覆盖此所有权特权
访问级别配置为 *PROTECTED* 的程序。任何用户
将能够临时访问程序相关数据，如果
用户指定访问被跟踪实体程序的原因
数据。这种暂时获得访问权限的行为被称为*破坏
玻璃*。目前，临时访问权限为 3 小时。 DHIS2
审计打破玻璃以及用户指定的原因。
无法临时访问已被删除的程序
配置访问级别为 *CLOSED*。打破玻璃
被跟踪的实体程序组合，您可以发出 POST 请求作为
显示：

    /api/30/tracker/ownership/override?trackedEntityInstance=DiszpKrYNg8&program=eBAyeGv0exc&reason=患者+显示+向上+for+紧急+护理

#### 跟踪器所有权转移 { #webapi_tracker_ownership_transfer_api } 

 <!--DHIS2-SECTION-ID:webapi_tracker_ownership_transfer_api-->

可以转移被跟踪实体程序的所有权
从一个组织单位到另一个组织单位。这将有助于患者
转介或迁移。只有所有者（或破坏了
glass）可以转让所有权。转移被跟踪的所有权
entity-program 到另一个组织单位，你可以发出 PUT 请求
如图所示：

    /api/30/tracker/所有权/转让？trackedEntityInstance=DiszpKrYNg8&program=eBAyeGv0exc&ou=EJNxP3WreNP


## 潜在的重复 API { #potential-duplicate-api }
潜在重复项是我们在 DHIS 2 的重复数据删除功能中使用的记录。由于重复数据删除功能的性质，用于处理潜在重复项的 API 受到一定限制。

潜在重复项表示单个记录或怀疑重复的一对记录。

潜在重复的基本负载如下所示：

      {
        "teiA": "<id>",
        "teiB": "<id>|null"
        "status": "打开|无效|已合并"
      }

您可以使用以下端点检索潜在重复项的列表：

          GET /api/潜在重复项

此外，您可以使用以下方法检查个人记录：

          GET /api/潜在重复项/<id>

要创建新的潜在重复项，您可以使用此端点：

    POST / api / potentialDuplicates

您提供的有效负载至少需要 teiA 是有效的 trackedEntityInstance，但 teiB 是可选的。如果设置了 teiB，它还需要指向现有的 trackedEntityInstance。

          {
              "teiA": "<id>",（必填）
              "teiB": "<id>"（可选）
          }

您无法更新或删除潜在的重复项。但是，您可以将它们标记为无效。您可以使用以下端点将记录标记为无效：

          PUT /api/potentialDuplicates/<id>/invalidate

将潜在重复标记为无效将表明该记录不是有效的重复，并且可以被视为与删除该记录相同。该记录仍保留在数据库中。

## 电子邮件 { #webapi_email } 

 <!--DHIS2-SECTION-ID:webapi_email-->

Web API 具有用于发送电子邮件的资源。对于电子邮件
发送 需要已正确设置 SMTP 配置
并且 DHIS2 实例的系统通知电子邮件地址具有
被定义。您可以从电子邮件设置屏幕设置 SMTP 设置
和来自常规设置屏幕的系统通知电子邮件地址
在 DHIS2 中。

    /api/26/电子邮件

### 系统通知 { #webapi_email_system_notification } 

 <!--DHIS2-SECTION-ID:webapi_email_system_notification-->

*notification* 资源可让您发送系统电子邮件通知
使用 JSON 或 XML 格式的给定主题和文本。电子邮件将发送至
DHIS2 通用系统中定义的通知电子邮件地址
设置：

    {
      "subject": "完整性检查摘要",
      "text": "所有检查均成功运行"
    }

您可以通过发布到通知来发送系统电子邮件通知
像这样的资源：

    curl -d @email.json“localhost/api/26/email/notification”-X POST -H“内容类型：application/json”-u admin：区-v

### 出站电子邮件 { #outbound-emails } 

您还可以通过发布到
通知资源如下所述。 “F\_SEND\_EMAIL”或“全部”
必须有系统权限才能使用此 api。主题
参数是可选的。 “DHIS 2”字符串将作为默认主题发送
如果 url 中没有提供。应该对 URL 进行编码才能使用它
API。

    卷曲“localhost/api/26/email/notification?recipients=xyz%40abc.com&message=sample%20email&subject=Test%20Email" -X POST -u admin:district -v

### 测试讯息 { #webapi_email_test_message } 

 <!--DHIS2-SECTION-ID:webapi_email_test_message-->

通过发送测试电子邮件来测试 SMTP 设置是否正确
您可以自己与 *test* 资源进行交互。发送测试邮件
您的 DHIS2 用户帐户必须具有有效的电子邮件地址
与之相关。您可以像这样发送测试电子邮件：

    卷曲“本地主机/ api / 26 /电子邮件/测试”-X POST -H“内容类型：应用程序/ json”-u管理：地区-v

## 分享中 { #webapi_sharing } 

 <!--DHIS2-SECTION-ID:webapi_sharing-->

共享解决方案允许您共享系统中的大多数对象
特定的用户组并定义对象是否应该公开
可访问或私有。要获取和设置对象的共享状态，您可以
与*共享*资源互动。

    /api/26/共享

### 获取共享状态 { #webapi_get_sharing_status } 

 <!--DHIS2-SECTION-ID:webapi_get_sharing_status-->

要请求对象的共享状态，请使用GET请求执行以下操作：

    /api/26/sharing?type=dataElement&id=fbfJHSPpUQD

响应如下所示。

    {
        “元”：{
            “allowPublicAccess”：真，
            “允许外部访问”：假
        },
        “目的”： {
            "id": "fbfJHSPpUQD",
            "name": "ANC 第一次访问",
            "publicAccess": "rw------",
            “外部访问”：假，
            “用户”：{}，
            “用户组访问”：[
                {
                    "id": "hj0nnsVsPLU",
                    “访问”：“RW------”
                },
                {
                    "id": "qMjBflJMOfB",
                    “访问”：“r--------”
                }
            ]
        }
    }

### 设定分享状态 { #webapi_set_sharing_status } 

 <!--DHIS2-SECTION-ID:webapi_set_sharing_status-->

您可以使用相同的 URL 定义对象的共享状态
一个 POST 请求，其中 JSON 格式的有效负载如下所示：

    {
        “目的”： {
            "publicAccess": "rw------",
            “外部访问”：假，
            “用户”：{}，
            “用户组访问”：[
                {
                    "id": "hj0nnsVsPLU",
                    “访问”：“RW------”
                },
                {
                    "id": "qMjBflJMOfB",
                    “访问”：“r--------”
                }
            ]
        }
    }

在此示例中，有效负载定义了具有读写权限的对象
公共访问，无外部访问（无需登录），读写访问
一个用户组和另一个用户组的只读访问权限。你可以
使用 curl 将其提交到共享资源：

    curl -d @sharing.json“localhost/api/26/sharing?type=dataElement&id=fbfJHSPpUQD”
      -H“内容类型：application/json”-u admin：区-v

## 调度（实验）{ #webapi_scheduling }

 <!--DHIS2-SECTION-ID:webapi_scheduling-->

在 2.29 中，我们引入了一种在服务器上调度作业的新方法。每个
作业类型具有不同的配置属性，为您提供更多
控制作业的运行方式。此外，您还可以配置相同的
作业以不同的配置和不同的时间间隔运行，如果
必需的。

<table>
<caption>主要属性</caption>
<thead>
<tr class="header">
<th>属性</th>
<th>说明</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>名称</td>
<td>作业名称</td>
<td>字符串</td>
</tr>
<tr class="even">
<td>cronExpression</td>
<td>cron 表达式类似于时间间隔。它必须遵循特定模式，请参阅 <a href="https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm" class="uri">https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm</a> 了解指南</td>
<td>字符串（Cron 表达式）</td>
</tr>
<tr class="odd">
<td>工作类型</td>
<td>作业类型表示运行的任务。在下表中，您可以了解现有作业类型的概述。每种作业类型都可以有一组特定的作业配置参数 https://play.dhis2.org/dev/api/jobConfigurations/jobTypesExtended 用于概述为作业类型设计的参数。 JobConfiguration 具有作业类型采用的&quot;可配置&quot;属性。有些作业是系统作业，只允许更改 cron 表达式。</td>
<td>字符串（枚举）</td>
</tr>
<tr class="even">
<td>jobParameters</td>
<td>作业参数（如果适用于作业类型）</td>
<td>（查看职位类型列表）</td>
</tr>
<tr class="odd">
<td>连续执行</td>
<td>作业可以添加为连续作业，这意味着作业完成后，将立即安排再次运行。如果需要连续执行，请在负载中将 &quot;continuouseExecution&quot; 设置为 true</td>
<td>布尔值</td>
</tr>
<tr class="even">
<td>已启用</td>
<td>通过设置&quot;启用&quot;，可以将作业添加到系统中而不进行调度JSON 负载中的  为 false。如果您想暂时停止调度作业，或者作业配置尚未完成，请使用此选项。</td>
<td>布尔值</td>
</tr>
</tbody>
</table>

<table>
<caption>可用的职位类型</caption>
<thead>
<tr class="header">
<th>职位类型</th>
<th>参数</th>
<th>参数（类型：默认）</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>DATA_INTEGRITY</td>
<td>无</td>
<td></td>
</tr>
<tr class="even">
<td>ANALYTICS_TABLE</td>
<td><ul>
<li><p>lastYears：包含的年份数</p></li>
<li><p>skipTableTypes：跳过生成表</p>
<ul>
<li><p>可能的值：DATA_VALUE、COMLETENESS、COMLETENESS_TARGET、ORG_UNIT_TARGET、EVENT、ENROLLMENT、VALIDATION_RESULT </p></li>
</ul></li>
<li><p>skipResourceTables：跳过生成资源表</p></li>
</ul></td>
<td><ul>
<li><p>lastYears（int:0）</p></li>
<li><p>skipTableTypes（字符串数组（枚举）：无）</p> </li>
<li><p>skipResourceTables（布尔值）</p></li>
</ul></td>
</tr>
<tr class="odd">
<td>DATA_SYNC</td>
<td>无</td>
<td></td>
</tr>
<tr class="even">
<td>META_DATA_SYNC</td>
<td>无</td>
<td></td>
</tr>
<tr class="odd">
<td>SEND_SCHEDULED_MESSAGE</td>
<td>无</td>
<td></td>
</tr>
<tr class="even">
<td>PROGRAM_NOTIFICATIONS</td>
<td>无</td>
<td></td>
</tr>
<tr class="odd">
<td>监控（验证规则分析）</td>
<td><ul>
<li><p>relativeStart：与执行日期相关的数字，类似于要监控的周期的开始时间</p></li>
<li><p>relativeEnd：与执行日期相关的数字，类似于要监控的周期结束时间</p></li>
<li><p>validationRuleGroups：要包含在作业中的验证规则组(UID)</p></li>
<li><p>sendNotification：设置&quot;true&quot; 作业是否应根据验证规则组发送通知</p></li>
<li><p>persistsResults：设置&quot;true&quot; 作业是否应保留验证结果</p></li>
</ul></td>
<td><ul>
<li><p>relativeStart (int:0)</p></li>
<li><p>relativeEnd (int:0)</p></li>
<li><p>validationRuleGroups（字符串数组 (UID)：无）</p> </li>
<li><p>sendNotification（布尔值：false）</p></li>
<li><p>persistsResults（布尔值：false）</p></li>
</ul></td>
</tr>
<tr class="even">
<td>PUSH_ANALYSIS</td>
<td><ul>
<li><p>pushAnalysis：您要运行的推送分析的 uid</p></li>
</ul></td>
<td><ul>
<li><p>pushAnalysis（字符串：无）</p></li>
</ul></td>
</tr>
<tr class="odd">
<td>预测器</td>
<td><ul>
<li><p>relativeStart：与执行日期相关的数字，类似于要监控的周期的开始时间</p></li>
<li><p>relativeEnd：与执行日期相关的数字，类似于要监控的周期的开始时间</p></li>
<li><p>预测变量：要包含在作业中的预测变量 (UID)</p></li>
</ul></td>
<td><ul>
<li><p>relativeStart (int:0)</p></li>
<li><p>relativeEnd (int:0)</p></li>
<li><p>预测变量（字符串数组 (UID)：无）</p> </li>
</ul></td>
</tr>
</tbody>
</table>

要配置作业，您可以对以下资源发出POST请求：

    / api / jobConfigurations

添加不带JSON格式参数的作业：

```
        {
          "名称"："",
          "jobType"："JOBTYPE"、
          "cronExpression"："0 * * ?* *",
        }

```

添加带有 JSON 格式参数的作业（ANALYTICS\_TABLE 示例）：

```
        {
          "名称"："过去两年的分析"、
          "jobType"："analytics_table"、
          "cronExpression"："0 * * ?* *",
          "jobParameters"：
          {
              "lastYears"："2",
              "skipTableTypes"：[],
              "skipResourceTables": false
          }
        }

```

列出所有jobConfigurations：

    GET /api/jobConfigurations

检索作业：（ANALYTICS\_TABLE 示例）：

    获取 /api/jobConfigurations/KBcP6Qw37gT

```
        {
          "lastUpdated"："2018-02-22T15:15:34.067",
          "id"："KBcP6Qw37gT"、
          "href"："http://localhost:8080/api/jobConfigurations/KBcP6Qw37gT"、
          "创建"："2018-02-22T15:15:34.067",
          "名称"："过去两年的分析"、
          "jobStatus"："SCHEDULED"、
          "displayName"："过去两年的分析"、
          "enabled": true、
          "externalAccess": false、
          "continuousExecution": false、
          "jobType"："analytics_table"、
          "nextExecutionTime"（下一次执行时间"2018-02-26T03:00:00.000",
          "cronExpression"："0 0 3 ?* MON"、
          "jobParameters"：{
            "lastYears"：2,
            "skipTableTypes"：[],
            "skipResourceTables": false
          },
          "收藏"：false
          "configurable": true、
          "访问"：{
            "read": true、
            "更新": true
            "外部化": true
            "删除"：true
            "写入"：true
            "管理"：true
          },
          "lastUpdatedBy"：{
            "id"："GOLswS44mh8"
          },
          "收藏夹"：[],
          "翻译"：[],
          "用户组访问权限"： []：[],
          "属性值"： []：[],
          "用户访问权限"： []：[]
        }

```

使用 JSON 格式的参数更新作业（ANALYTICS\_TABLE 示例）：

    PUT /api/jobConfiguration/KBcP6Qw37gT

```
        {
          "名称"："过去两年的分析"、
          "enabled": true、
          "cronExpression"："0 0 3 ?* MON"、
          "continuousExecution": false、
          "jobType"："analytics_table"、
          "jobParameters"：{
            "lastYears"："3",
            "skipTableTypes"：[],
            "skipResourceTables": false
          }
        }

```

删除工作：

    删除/ api / jobConfiguration / KBcP6Qw37gT

如果使用自定义配置参数，则某些作业可能无法添加。
未配置所需的系统设置。数据的一个例子
同步，这需要远程服务器配置。

## 架构图 { #webapi_schema } 

 <!--DHIS2-SECTION-ID:webapi_schema-->

可用于内省所有可用DXF 2对象的资源
可以在* / api / schemas *上找到。对于特定资源，您可以
查看* / api / schemas / TYPE *。

要获取XML中所有可用的模式：

    获取/api/schemas.xml

要获取JSON中所有可用的模式，请执行以下操作：

    获取/api/schemas.json

要获取特定类的JSON模式：

    获取 /api/schemas/dataElement.json

## 用户界面定制 { #webapi_ui_customization } 

 <!--DHIS2-SECTION-ID:webapi_ui_customization-->

要自定义DHIS2应用程序的UI，您可以插入自定义
通过* files *资源的JavaScript和CSS样式。 JavaScript
并且通过此资源插入的CSS内容将由
DHIS2 Web应用程序。在某些情况下这可能特别有用
情况：

  - 覆盖 DHIS2 应用程序的 CSS 样式，例如
    登录页面或主页。

  - 定义几个自定义的通用 JavaScript 函数
    数据输入表单和基于 HTML 的报告。

  - 包括用于自定义数据输入表单的 CSS 样式和
    基于 HTML 的报告。

### Java脚本 { #webapi_customization_javascript } 

 <!--DHIS2-SECTION-ID:webapi_customization_javascript-->

要从名为* script.js *的文件中插入Javascript，您可以进行交互
使用带有POST请求的* files / script *资源：

    卷曲--data-binary @script.js“localhost/api/26/files/script”
      -H“内容类型：应用程序/javascript”-u admin：区-v

请注意，我们使用 --data-binary 选项来保留格式
文件内容。您可以使用 GET 请求获取 JavaScript 内容：

    /api/26/文件/脚本

要删除JavaScript内容，可以使用DELETE请求。

### 的CSS { #webapi_customization_css } 

 <!--DHIS2-SECTION-ID:webapi_customization_css-->

要从名为 *style.css* 的文件插入 CSS，您可以与
带有 POST 请求的 *files/style* 资源：

    卷曲--data-binary @style.css“localhost/api/26/files/style”
      -H“内容类型：文本/css”-u admin：区-v

您可以通过GET请求获取CSS内容：

    /api/26/文件/样式

要删除JavaScript内容，您可以使用DELETE-e“请求。

## 同步化 { #webapi_synchronization } 

 <!--DHIS2-SECTION-ID:webapi_synchronization-->

本节介绍数据和元数据的提取和推送。

### 数据推送{ #webapi_sync_data_push }

 <!--DHIS2-SECTION-ID:webapi_sync_data_push-->

要向远程服务器发起数据推送，必须首先配置
系统设置中相关服务器的 URL 和凭据 \>
同步，然后向以下资源发出POST请求：

    /api/26/同步/dataPush

### 元数据拉取 { #webapi_sync_metadata_pull } 

 <!--DHIS2-SECTION-ID:webapi_sync_metadata_pull-->

要从远程 JSON 文档中启动元数据拉取，您可以创建一个
使用 *url* 作为请求负载的 POST 请求到以下资源：

    /api/26/同步/metadataPull

### 可用性检查 { #webapi_sync_availability_check } 

 <!--DHIS2-SECTION-ID:webapi_sync_availability_check-->

检查远程数据服务器的可用性并验证用户
您可以向以下资源发出 GET 请求：

    /api/26/同步/可用性

## 应用 { #webapi_apps } 

 <!--DHIS2-SECTION-ID:webapi_apps-->

*/api/apps* 端点可用于安装、删除和
列出应用程序。应用程序密钥基于应用程序名称，但与所有
删除了非字母数字字符，并将空格替换为破折号。
*我的应用程序\！*将返回密钥*我的应用程序*。

> **注意**
>
> 在 2.28 之前，应用密钥是从 ZIP 的名称派生的
> 存档，不包括文件扩展名。使用旧格式的 URL
> 仍应在 api 中返回正确的应用程序。

    /api/26/应用程序

### 获取应用 { #webapi_get_apps } 

 <!--DHIS2-SECTION-ID:webapi_get_apps-->

> **注意**
>
> 2.28之前的app属性folderName指的是实际
> 已安装应用程序的路径。能够在云上存储应用程序
> 服务，folderName 的用途已更改，现在将引用应用程序
> 键。

您可以通过列出应用程序中的所有应用程序来读取应用程序的密钥
资源并查找 *key* 属性。列出所有已安装的应用程序
JSON：

    curl -X GET -u 用户：pass -H“接受：application/json”http://server.com/api/26/apps

您也可以简单地将Web浏览器指向资源URL：

    http://server.com/api/26/apps

应用列表也可以按应用类型和名称过滤，通过附加
URL 的一个或多个 *filter* 参数：

    http://server.com/api/26/apps?filter=appType:eq:DASHBOARD_APP&filter=name:ilike:youtube

应用程序名称支持 *eq* 和 *ilike* 过滤器运算符，而 *appType*
仅支持 *eq*。

### 安装应用 { #webapi_install_app } 

 <!--DHIS2-SECTION-ID:webapi_install_app-->

要安装应用程序，可以发出以下命令：

    curl -X POST -u 用户：pass -F file=@app.zip http://server.com/api/26/apps

### 删除应用 { #webapi_delete_app } 

 <!--DHIS2-SECTION-ID:webapi_delete_app-->

要删除一个应用程序，您可以发出以下命令：

    curl -X DELETE -u 用户：通过 http://server.com/api/26/apps/<app-key>

### 重新加载应用 { #webapi_reload_apps } 

 <!--DHIS2-SECTION-ID:webapi_reload_apps-->

要强制重新加载当前安装的应用程序，您可以发出
以下命令。如果您直接手动添加文件，这很有用
到文件系统，而不是通过 DHIS2 用户上传
界面。

    curl -X PUT -u 用户：通过 http://server.com/api/26/apps

### 在实例之间共享应用 { #webapi_share_apps_between_instances } 

 <!--DHIS2-SECTION-ID:webapi_share_apps_between_instances-->

> **注意**
>
> 在 2.28 之前，安装的应用程序只会存储在实例的
> 本地文件系统。

如果 DHIS2 实例已配置为使用云存储，应用程序
现在将安装并存储在云服务上。这将启用
多个实例在已安装的应用程序上共享相同的版本，而不是
在每个单独的实例上安装相同的应用程序。

> **注意**
>
> 2.28 之前安装的应用程序仍可在
>实例已安装，但不会与其他实例共享
> 实例，因为它仍然位于实例本地文件系统上。

## 应用商店 { #webapi_app_store } 

 <!--DHIS2-SECTION-ID:webapi_app_store-->

Web API 将 DHIS2 应用商店的内容公开为 JSON
可以在 *api/appStore* 资源中找到的表示形式。

    /api/26/appStore

### 获取应用 { #webapi_get_app_store_apps } 

 <!--DHIS2-SECTION-ID:webapi_get_app_store_apps-->

您可以使用GET请求检索应用程序：

    获取 /api/28/appStore

JSON响应示例如下所述。

    {
       [
        {
          "name": "表格跟踪器捕获",
          "description": "Tabular Tracker Capture 是一款可以让您更加高效的应用程序。",
          "sourceUrl": "https://github.com/dhis2/App-repository",
          "appType": "DASHBOARD_WIDGET",
          “状态”：“待处理”，
          “id”：“NSD06BVoV21”，
          “开发人员”：{
              “名称”：“DHIS”，
              “组织”：“Uio”，
              “地址”：“奥斯陆”，
              “电子邮件”：“dhis@abc.com”，
            }
          “版本”：[
            {
              "id": "upAPqrVgwK6",
              “版本”：“1.2”，
              "minDhisVersion": "2.17",
              "maxDhisVersion": "2.20",
              "downloadUrl": "https://www.dhis2.org/download/appstore/tabular-tracker-capture-12.zip",
              “demoUrl”：“http://play.dhis2.org/demo”
            }
          ]
          “图片”： [
            {
              "id": "upAPqrVgwK6",
              “标志”：“真实”，
              "imageUrl": "https://www.dhis2.org/download/appstore/tabular-tracker-capture-12.png",
              "description": "添加的功能快照",
              “标题”：“对话框”，
            }
          ]
        }
      ]
    }

### 安装应用 { #webapi_install_app_store_apps } 

 <!--DHIS2-SECTION-ID:webapi_install_app_store_apps-->

您可以在 DHIS2 实例上安装应用程序，假设您有
适当的权限。使用 *id* 属性引用应用程序
*应用程序*的相关*版本*。应用程序通过 POST 进行安装
使用版本 ID 向以下资源发出请求：

    POST /api/26/appStore/{app-version-id}

## 数据存储 { #webapi_data_store } 

 <!--DHIS2-SECTION-ID:webapi_data_store-->

使用 *dataStore* 资源，开发人员可以存储任意数据
他们的应用程序。对数据存储密钥的访问基于其共享设置。
默认情况下，所有创建的密钥都可以公开访问（读取和写入）。
此外，对数据存储命名空间的访问仅限于用户的
访问相应的应用程序，如果应用程序保留了命名空间。
例如，有权访问“sampleApp”应用程序的用户也将
能够使用数据存储中的 sampleApp 命名空间。如果一个命名空间
没有保留，使用它不需要特定的访问权限。

    /api/26/数据存储

### 数据存储结构 { #webapi_data_store_structure } 

 <!--DHIS2-SECTION-ID:webapi_data_store_structure-->

数据存储条目由命名空间、键和值组成。这
命名空间和键的组合是唯一的。值数据类型为 JSON。

 <table>
 <caption> 数据存储结构 </caption>
 <colgroup>
 <col style="width: 22%" />
 <col style="width: 40%" />
 <col style="width: 36%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 项目 </th>
 <th> 说明 </th>
 <th> 数据类型 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 命名空间 </td>
 <td> 条目组织的命名空间。 </td>
 <td> 字符串 </td>
 </tr>
 <tr class="even">
 <td> 密钥 </td>
 <td> 用于识别值的键。 </td>
 <td> 字符串 </td>
 </tr>
 <tr class="odd">
 <td> 值 </td>
 <td> 保存条目信息的值。 </td>
 <td> JSON </td>
 </tr>
 <tr class="even">
 <td> 加密 </td>
 <td> 指示是否应加密给定密钥的值 </td>
 <td> 布尔值 </td>
 </tr>
 </tbody>
 </table>

### 获取键和名称空间 { #webapi_data_store_get_keys_and_namespaces } 

 <!--DHIS2-SECTION-ID:webapi_data_store_get_keys_and_namespaces-->

有关所有现有名称空间的列表：

    获取 /api/26/dataStore

清单示例curl请求：

    卷曲“play.dhis2.org/demo/api/26/dataStore”-X GET -u admin:district -v

响应示例：

    [
        “富”，
        “酒吧”
    ]

有关命名空间中所有键的列表：

    GET /api/26/dataStore/<namespace>

清单示例curl请求：

    卷曲“play.dhis2.org/demo/api/26/dataStore/foo”-X GET -u admin:district -v

响应示例：

    [
        “键_1”，
        “钥匙_2”
    ]

要从名称空间检索现有键的值：

    GET /api/26/dataStore/<namespace>/<key>

卷曲请求检索示例：

    卷曲“play.dhis2.org/demo/api/26/dataStore/foo/key_1”-X GET -u admin:district -v

响应示例：

    {
        “富”：“酒吧”
    }

要从名称空间检索现有键的元数据：

    GET /api/26/dataStore/<namespace>/<key>/metaData

卷曲请求检索示例：

    卷曲“play.dhis2.org/demo/api/26/dataStore/foo/key_1/metaData”-X GET -u admin:district -v

响应示例：

    {
        “创建”：“...”，
        “用户”：{...}，
        “命名空间”：“foo”，
        “密钥”：“key_1”
    }

### 创造价值 { #webapi_data_store_create_values } 

 <!--DHIS2-SECTION-ID:webapi_data_store_create_values-->

为命名空间创建新的键和值：

    POST /api/26/dataStore/<namespace>/<key>

创建的示例curl请求，假设有效的json
    有效负载：

    卷曲“https://play.dhis2.org/demo/api/26/dataStore/foo/key_1”-X POST
      -H "内容类型：application/json" -d "{\"foo\":\"bar\"}" -u admin:district -v

响应示例：

    {
        "httpStatus": "确定",
        “http状态代码”：201，
        “状态”：“正常”，
        "message": "密钥'key_1'已创建。"
    }

如果您需要加密存储的数据（例如用户
凭据或类似的），您可以像这样将查询附加到 url：

    GET /api/26/dataStore/<namespace>/<key>?encrypt=true

### 更新值 { #webapi_data_store_update_values } 

 <!--DHIS2-SECTION-ID:webapi_data_store_update_values-->

更新命名空间中存在的密钥：

    PUT /api/26/dataStore/<namespace>/<key>

假设有效的JSON有效负载，示例curl请求更新：

    卷曲“https://play.dhis2.org/demo/api/26/dataStore/foo/key_1”-X PUT -d“[1,2,3]”
      -H“内容类型：application/json”-u admin：区-v

响应示例：

    {
        "httpStatus": "确定",
        “http状态代码”：200，
        “状态”：“正常”，
        "message": "密钥'key_1'已更新。"
    }

### 删除键 { #webapi_data_store_delete_keys } 

 <!--DHIS2-SECTION-ID:webapi_data_store_delete_keys-->

要从名称空间中删除现有键：

    删除 /api/26/dataStore/<namespace>/<key>

删除示例curl请求：

    卷曲“play.dhis2.org/demo/api/26/dataStore/foo/key_1”-X删除-u管理：区-v

响应示例：

    {
        "httpStatus": "确定",
        “http状态代码”：200，
        “状态”：“正常”，
        "message": "键 'key_1' 从命名空间 'foo' 中删除。"
    }

要删除名称空间中的所有键：

    删除 /api/26/dataStore/<namespace>

删除示例curl请求：

    卷曲“play.dhis2.org/demo/api/26/dataStore/foo”-X删除-u管理：区-v

响应示例：

    {
        "httpStatus": "确定",
        “http状态代码”：200，
        “状态”：“正常”，
        "message": "命名空间 'foo' 已删除。"
    }

### 共享数据存储区密钥 { #webapi_data_store_sharing } 

 <!--DHIS2-SECTION-ID:webapi_data_store_sharing-->

数据存储键的共享遵循与其他元数据共享相同的原则（请参阅
[分享](#webapi_sharing))。

要获取特定数据存储区密钥的共享设置，请执行以下操作：

    GET /api/31/sharing?type=dataStore&id=<uid>

要修改特定数据存储项的共享设置：

    POST /api/31/sharing?type=dataStore&id=<uid>

具有以下要求：

    {
    “目的”： {
        "publicAccess": "rw------",
        “外部访问”：假，
        “用户”：{}，
        “用户访问”：[]，
        “用户组访问”：[
            {
                "id": "hj0nnsVsPLU",
                “访问”：“RW------”
            },
            {
                "id": "qMjBflJMOfB",
                “访问”：“r--------”
            }
        ]
    }
    }


## 用户数据存储 { #webapi_user_data_store } 

 <!--DHIS2-SECTION-ID:webapi_user_data_store-->

除了在所有用户之间共享的 *dataStore*
系统，还可以使用基于用户的数据存储。数据存储到
*userDataStore* 与单个用户相关联，以便每个用户
在相同的命名空间和组合键上可以有不同的数据。全部
对 *userDataStore* 的调用将与登录的
用户。这意味着只能查看、更改、删除和添加值
与当前登录的用户相关联。

    /api/26/userDataStore

### 用户数据存储结构 { #webapi_user_data_store_structure } 

 <!--DHIS2-SECTION-ID:webapi_user_data_store_structure-->

*userDataStore* 由用户、命名空间、键和关联的
值。用户、命名空间和密钥的组合是唯一的。

 <table>
 <caption>用户数据存储结构</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>项目</th>
 <th>说明</th>
 <th>数据类型</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>用户</td>
 <td>用户此数据与</td>相关联
 <td>字符串</td>
 </tr>
 <tr class="even">
 <td>命名空间</td>
 <td>密钥所属的名称空间</td>
 <td>字符串</td>
 </tr>
 <tr class="odd">
 <td>键</td>
 <td>密钥a值存储在</td>上
 <td>字符串</td>
 </tr>
 <tr class="even">
 <td>值</td>
 <td>存储的值</td>
 JSON <td> </td>
 </tr>
 <tr class="odd">
 <td>加密的</td>
 <td>指示是否应加密该值</td>
 <td>布尔值</td>
 </tr>
 </tbody>
 </table>

### 获取名称空间 { #webapi_user_data_store_get_namespaces } 

 <!--DHIS2-SECTION-ID:webapi_user_data_store_get_namespaces-->

返回所有现有名称空间的数组

    获取 /api/26/userDataStore

请求示例：

    curl -X GET -H“内容类型：application/json”-u admin：区“play.dhis2.org/api/26/userDataStore”-v

    [
      “富”，
      “酒吧”
    ]

### 取得金钥 { #webapi_user_data_store_get_keys } 

 <!--DHIS2-SECTION-ID:webapi_user_data_store_get_keys-->

返回给定名称空间中所有现有键的数组

    GET /api/userDataStore/<namespace>

请求示例：

    curl -X GET -H“内容类型：application/json”-u admin：区“play.dhis2.org/api/26/userDataStore/foo”-v

    [
      “键_1”，
      “钥匙_2”
    ]

### 获取价值 { #webapi_user_data_store_get_values } 

 <!--DHIS2-SECTION-ID:webapi_user_data_store_get_values-->

返回给定名称空间和键的值

    GET /api/26/userDataStore/<namespace>/<key>

请求示例：

    curl -X GET -H“内容类型：application/json”-u admin：区“play.dhis2.org/api/26/userDataStore/foo/bar”

    {
      “一些”：“值”
    }

### 创造价值 { #webapi_user_data_store_create_values } 

 <!--DHIS2-SECTION-ID:webapi_user_data_store_create_values-->

向给定名称空间中的给定键添加新值。

    POST /api/26/userDataStore/<namespace>/<key>

请求示例：

    curl -X POST -H“内容类型：application/json”-u admin：district -d“['某个值']”
      “play.dhis2.org/api/26/userDataStore/foo/bar”

    {
      "httpStatus": "已创建",
      “http状态代码”：201，
      “状态”：“正常”，
      "message": "已创建名称空间 'foo' 中的键 'bar'。"
    }

如果您要求加密该值（例如，用户凭据
等等），您可以像这样将查询附加到网址：

    GET /api/26/userDataStore/<namespace>/<key>?encrypt=true

### 更新值 { #webapi_user_data_store_update_values } 

 <!--DHIS2-SECTION-ID:webapi_user_data_store_update_values-->

更新现有值

    PUT /api/26/userDataStore/<namespace>/<key>

请求示例：

    curl -X PUT -H“内容类型：application/json”-u admin：district -d“['新值']”
      “play.dhis2.org/api/26/userDataStore/foo/bar”

    {
      "httpStatus":"已创建",
      “http状态代码”：201，
      “状态”：“确定”，
      "message":"名称空间'foo'中的键'bar'已更新。"
    }

### 删除键 { #webapi_user_data_store_delete_key } 

 <!--DHIS2-SECTION-ID:webapi_user_data_store_delete_key-->

删除金钥

    删除 /api/26/userDataStore/<namespace>/<key>

请求示例：

    curl -X DELETE -u admin:district "play.dhis2.org/api/26/userDataStore/foo/bar"

    {
      "httpStatus":"确定",
      “http状态代码”：200，
      “状态”：“确定”，
      "message":"键 'bar' 已从名称空间 'foo 中删除。"
    }

### 删除名称空间 { #webapi_user_data_store_delete_namespace } 

 <!--DHIS2-SECTION-ID:webapi_user_data_store_delete_namespace-->

删除给定名称空间中的所有键

    删除 /api/26/userDataStore/<namespace>

请求示例：

    curl -X DELETE -u admin:district "play.dhis2.org/api/26/userDataStore/foo"

    {
      "httpStatus":"确定",
      “http状态代码”：200，
      “状态”：“确定”，
      "message":"命名空间'foo'中的所有键均已删除。"
    }

## 预测变量 { #webapi_predictors } 

 <!--DHIS2-SECTION-ID:webapi_predictors-->

预测器允许您基于表达式生成数据值。
这可用于生成目标、阈值和估计值。
您可以通过 */api/26/predictors* 与预测器交互
资源。

    /api/26/预测器

### 创建预测变量 { #webapi_create_predictor } 

 <!--DHIS2-SECTION-ID:webapi_create_predictor-->

您可以使用对预测器的 POST 请求创建预测器
资源：

    POST /api/26/predictors

有效负载样本如下所示：

    {
        "id": "AG10KUJCrRk",
        "name": "疟疾爆发阈值预测器",
        "shortName": "疟疾爆发预测器",
        "description": "根据平均值加上 1.5 倍标准差计算潜在疟疾爆发的阈值",
        “输出”： {
            “id”：“nXJJZNVAy0Y”
        },
        “发电机”： {
            "表达式": "AVG(#{r6nrJANOqMw})+1.5*STDDEV(#{r6nrJANOqMw})",
            “数据元素”：[]，
            “样本元素”：[{
                “id”：“r6nrJANOqMw”
            }]
        },
        "periodType": "每月",
        “顺序样本计数”：4，
        “顺序跳过计数”：1，
        “年度样本计数”：3，
        “组织单位级别”：[4]
    }

输出元素是指数据元素的标识符
其中保存预测数据值。生成器元素是指
计算预测值时使用的表达式。

### 生成预测值 { #webapi_generating_predicted_values } 

 <!--DHIS2-SECTION-ID:webapi_generating_predicted_values-->

要运行所有预测器（生成预测值），您可以进行 POST
请求运行资源：

    POST /api/26/predictors/run

要运行单个预测器，您可以向运行发出 POST 请求
预测器的资源：

    POST /api/26/predictors/AG10KUJCrRk/run

## 最小-最大数据元素 { #webapi_min_max_data_elements } 

 <!--DHIS2-SECTION-ID:webapi_min_max_data_elements-->

min-max 数据元素资源允许您设置最小值和最大值
数据元素的值范围。它是独一无二的
组织单位、数据元素和类别选项组合。

    / api / minMaxDataElements

 <table>
 <caption> 最小-最大数据元素数据结构 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 项目 </th>
 <th> 说明 </th>
 <th> 数据类型 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 源 </td>
 <td> 组织单位标识符 </td>
 <td> 字符串 </td>
 </tr>
 <tr class="even">
 <td> 数据元素 </td>
 <td> 数据元素标识符 </td>
 <td> 字符串 </td>
 </tr>
 <tr class="odd">
 <td> optionCombo </td>
 <td> 数据元素类别选项组合标识符 </td>
 <td> 字符串 </td>
 </tr>
 <tr class="even">
 <td> 分钟 </td>
 <td> 最小值 </td>
 <td> 整数 </td>
 </tr>
 <tr class="odd">
 <td> 最大 </td>
 <td> 最大值 </td>
 <td> 整数 </td>
 </tr>
 <tr class="even">
 <td> 生成 </td>
 <td> 表示该对象是否由系统生成（而非手动设置）。 </td>
 <td> 布尔值 </td>
 </tr>
 </tbody>
 </table>

您可以从以下位置检索所有最小-最大数据元素的列表
资源：

    获取 /api/minMaxDataElements.json

您可以像这样过滤响应：

    GET /api/minMaxDataElements.json?filter=dataElement.id:eq:UOlfIjgN8X6

    GET /api/minMaxDataElements.json?filter=dataElement.id:in:[UOlfIjgN8X6,xc8gmAKfO95]

最小-最大数据元素的过滤器参数支持两个运算符：
eq 和 in.

**使用字段参数**

    GET /api/minMaxDataElements.json?fields=:all,dataElement[id,name]

### 添加/更新最小-最大数据元素 { #webapi_add_update_min_max_data_element } 

 <!--DHIS2-SECTION-ID:webapi_add_update_min_max_data_element-->

要添加新的最小-最大数据元素，请使用带有 JSON 内容的 POST 请求
格式如下：

    POST /api/minMaxDataElements.json

    {
      “分钟”：1，
      “生成”：假，
      “最大”：100，
      “数据元素”：{
        “id”：“UOlfIjgN8X6”
       },
      “来源”： {
        “id”：“DiszpKrYNg8”
      },
      “选项组合”：{
        “id”：“psbwp3CQEhs”
      }
    }

如果数据元素、组织单位和类别的组合
选项组合存在，最小值-最大值将被更新。

### 删除最小-最大数据元素 { #webapi_delete_min_max_data_element } 

 <!--DHIS2-SECTION-ID:webapi_delete_min_max_data_element-->

要删除最小-最大数据元素，请使用 DELETE 方法发送请求并
JSON内容与上面的格式相同：

    删除 /api/minMaxDataElements.json

    {
      “分钟”：1，
      “生成”：假，
      “最大”：100，
      “数据元素”：{
        “id”：“UOlfIjgN8X6”
       },
      “来源”： {
        “id”：“DiszpKrYNg8”
      },
      “选项组合”：{
        “id”：“psbwp3CQEhs”
      }
    }

## 锁定异常 { #webapi_lock_exceptions } 

 <!--DHIS2-SECTION-ID:webapi_lock_exceptions-->

锁定异常资源允许您打开其他锁定的数据
用于特定数据集、时期和组织的数据输入集
单元。您可以从以下资源中读取锁定异常：

    / api / lockExceptions

要创建新的锁例外，您可以使用POST请求并指定
数据集，期间和组织单位：

    POST / api / lockExceptions？ds = BfMAe6Itzgt＆pe = 201709＆ou = DiszpKrYNg8

要删除锁定异常，您可以使用类似的请求语法
删除请求：

    删除/ api / lockExceptions？ds = BfMAe6Itzgt＆pe = 201709＆ou = DiszpKrYNg8

## 代币 { #webapi_tokens } 

 <!--DHIS2-SECTION-ID:webapi_tokens-->

*tokens* 资源提供对各种服务的访问令牌。

### Google服务帐号 { #webapi_tokens_google_service_account } 

 <!--DHIS2-SECTION-ID:webapi_tokens_google_service_account-->

您可以使用以下命令检索 Google 服务帐户 OAuth 2.0 访问令牌
对以下资源的 GET 请求。

    获取 /api/tokens/google

令牌将在一定时间内有效，之后
必须从此资源请求另一个令牌。响应
包含匹配令牌到期的缓存控制标头。这
响应将包含以下 JSON 格式的属性。

 <table>
 <caption>令牌响应</caption>
 <colgroup>
 <col style="width: 40%" />
 <col style="width: 59%" />
 </colgroup>
 <thead>
 <tr class="header">
 属性<th> </th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> access_token </td>
 <td>针对Google服务进行身份验证时要使用的OAuth 2.0访问令牌。 </td>
 </tr>
 <tr class="even">
 <td> expires_in </td>
 <td>直到访问令牌到期的秒数，通常为3600秒（1小时）。 </td>
 </tr>
 <tr class="odd">
 <td> client_id </td>
 <td> Google服务帐户客户端ID。 </td>
 </tr>
 </tbody>
 </table>

假定已为DHIS2设置并配置了Google服务帐户。请查阅安装指南以获取更多信息。

## 分析表挂钩 { #webapi_analytics_table_hooks } 

 <!--DHIS2-SECTION-ID:webapi_analytics_table_hooks-->

Analytics表挂钩提供了调用SQL脚本的机制
在分析表生成过程的不同阶段。这
可用于自定义资源和分析表中的数据，例如在
为了实现用于计算和聚合的特定逻辑。
可以在以下API端点上操作Analytics（分析）表挂钩：

    / api / analyticsTableHooks

分析表钩子 API 支持标准的 HTTP CRUD 操作
用于创建（POST）、更新（PUT）、检索（GET）和删除
（删除）实体。

### 钩场 { #webapi_analytics_table_hook_fields } 

 <!--DHIS2-SECTION-ID:webapi_analytics_table_hook_fields-->

Analytics表挂钩具有以下字段：

<table style="width:100%;">
<caption>Analytics table hook fields</caption>
<colgroup>
<col style="width: 22%" />
<col style="width: 30%" />
<col style="width: 46%" />
</colgroup>
<thead>
<tr class="header">
<th>Field</th>
<th>Options</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>name</td>
<td>Text</td>
<td>Name of the hook.</td>
</tr>
<tr class="even">
<td>phase</td>
<td>RESOURCE_TABLE_POPULATED, ANALYTICS_TABLE_POPULATED</td>
<td>The phase for when the SQL script should be invoked.</td>
</tr>
<tr class="odd">
<td>resourceTableType</td>
<td><p>See column &quot;Table type&quot; in table &quot;Phases, table types and temporary tables&quot; below</p></td>
<td>The type of resource table for which to invoke the SQL script. Applies only for hooks defined with the RESOURCE_TABLE_POPULATED phase.</td>
</tr>
<tr class="even">
<td>analyticsTableType</td>
<td>See column &quot;Table type&quot; in table &quot;Phases, table types and temporary tables&quot; below</td>
<td>The type of analytics table for which to invoke the SQL script. Applies only for hooks defined with the ANALYTICS_TABLE_POPULATED phase.</td>
</tr>
<tr class="odd">
<td>sql</td>
<td>Text</td>
<td>The SQL script to invoke.</td>
</tr>
</tbody>
</table>

*ANALYTICS\_TABLE\_POPULATED* 阶段发生在分析之后
表已填充，但在创建索引之前
临时表已与主表交换。结果，SQL
脚本应引用分析临时表，例如*分析\_temp*，
*分析\_完整性\_临时*。

这也适用于 *RESOURCE\_TABLE\_POPULATED* 阶段，该阶段需要
放置在资源表填充之后、索引之前
已创建并且临时表已与主表交换
桌子。因此，SQL 脚本应该引用资源 temp
表，例如*\_orgunitstruct\_temp*、*\_categorystruct\_temp*。

您应该只定义 *resourceTableType* 和
*analyticsTableType* 字段，取决于定义的 *phase*。

可以参考临时数据库表匹配
仅指定挂钩表类型（其他临时表不会
可用的）。例如，如果您指定 *ORG\_UNIT\_STRUCTURE* 作为
资源表类型，可以参考*\_orgunitstruct\_temp*
仅临时数据库表。

下表显示了阶段、表格类型的有效组合
和临时表。

 <table>
 <caption> 阶段、表类型和临时表 </caption>
 <colgroup>
 <col style="width: 27%" />
 <col style="width: 39%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 相 </th>
 <th> 表型 </th>
 <th> 临时表 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td rowspan="12"> RESOURCE_TABLE_POPULATED </td>
 <td> ORG_UNIT_STRUCTURE </td>
 <td> _orgunitstructure_temp </td>
 </tr>
 <tr class="even">
 <td> DATA_SET_ORG_UNIT_CATEGORY </td>
 <td> _datasetorgunitcategory_temp </td>
 </tr>
 <tr class="odd">
 <td> CATEGORY_OPTION_COMBO_NAME </td>
 <td> _categoryoptioncomboname_temp </td>
 </tr>
 <tr class="even">
 <td> DATA_ELEMENT_GROUP_SET_STRUCTURE </td>
 <td> _dataelementgroupsetstructure_temp </td>
 </tr>
 <tr class="odd">
 <td> INDICATOR_GROUP_SET_STRUCTURE </td>
 <td> _indicatorgroupsetstructure_temp </td>
 </tr>
 <tr class="even">
 <td> ORG_UNIT_GROUP_SET_STRUCTURE </td>
 <td> _organisationunitgroupsetstructure_temp </td>
 </tr>
 <tr class="odd">
 <td> CATEGORY_STRUCTURE </td>
 <td> _categorystructure_temp </td>
 </tr>
 <tr class="even">
 <td> DATA_ELEMENT_STRUCTURE </td>
 <td> _dataelementstructure_temp </td>
 </tr>
 <tr class="odd">
 <td> PERIOD_STRUCTURE </td>
 <td> _periodstructure_temp </td>
 </tr>
 <tr class="even">
 <td> DATE_PERIOD_STRUCTURE </td>
 <td> _dateperiodstructure_temp </td>
 </tr>
 <tr class="odd">
 <td> DATA_ELEMENT_CATEGORY_OPTION_COMBO </td>
 <td> _dataelementcategoryoptioncombo_temp </td>
 </tr>
 <tr class="even">
 <td> DATA_APPROVAL_MIN_LEVEL </td>
 <td> _dataapprovalminlevel_temp </td>
 </tr>
 <tr class="odd">
 <td rowspan="7"> ANALYTICS_TABLE_POPULATED </td>
 <td> DATA_VALUE </td>
 <td> analytics_temp </td>
 </tr>
 <tr class="even">
 <td> 完整性 </td>
 <td> analytics_completeness_temp </td>
 </tr>
 <tr class="odd">
 <td> COMPLETENESS_TARGET </td>
 <td> analytics_completenesstarget_temp </td>
 </tr>
 <tr class="even">
 <td> ORG_UNIT_TARGET </td>
 <td> analytics_orgunittarget_temp </td>
 </tr>
 <tr class="odd">
 <td> 事件 </td>
 <td> analytics_event_temp_&lt;program-uid&gt; </td>
 </tr>
 <tr class="even">
 <td> 注册 </td>
 <td> analytics_enrollment_temp_&lt;program-uid&gt; </td>
 </tr>
 <tr class="odd">
 <td> VALIDATION_RESULT </td>
 <td> analytics_validationresult_temp </td>
 </tr>
 </tbody>
 </table>

### 创建钩子 { #webapi_create_analytics_table_hook } 

 <!--DHIS2-SECTION-ID:webapi_create_analytics_table_hook-->

创建一个应该在资源表完成后运行的钩子
填充后，您可以使用 *JSON* 格式执行 *POST* 请求：

    curl -d @hooks.json“localhost/api/analyticsTableHooks”-H“内容类型：application/json”-u admin：区-v

    {
      "name": "更新组织单位组集资源表中的'区域'",
      “阶段”：“RESOURCE_TABLE_POPULATED”，
      "resourceTableType": "ORG_UNIT_GROUP_SET_STRUCTURE",
      “sql”：“更新_organizationunitgroupsetstructural_temp设置\“uIuxlbV1vRT \”='b0EsAxm8Nge'”
    }

创建一个应该在数据值分析表之后运行的钩子
已填充，您可以使用 *JSON* 执行这样的 *POST* 请求
格式：

    {
      "name": "更新分析表中的'当前治疗'数据",
      “阶段”：“ANALYTICS_TABLE_POPULATED”，
      "analyticsTableType": "DATA_VALUE",
      “sql”：“更新analytics_temp设置每月='200212'，其中“每月”在（'200210'，'200211'）中”
    }

## 元数据存储库 { #webapi_metadata_repository } 

 <!--DHIS2-SECTION-ID:webapi_metadata_repository-->

DHIS2 提供了一个包含元数据包的元数据存储库
各种内容。元数据包是符合 DHIS2 的 JSON 文档
它描述了一组元数据对象。

要检索可用元数据包的索引，您可以发出
对 *metadataRepo* 资源的 GET 请求：

    GET /api/synchronization/metadataRepo

元数据包条目包含有关包的信息和
相关包的 URL。索引可能如下所示：

    {
      “包”：[ {
        "id": "塞拉利昂演示",
        "name": "塞拉利昂演示",
        "description": "塞拉利昂演示数据库",
        “版本”：“0.1”，
        “href”：“https://dhis2.org/metadata-repo/221/sierra-leone-demo/metadata.json”
      },
      {
        "id": "trainingland-org-units",
        "name": "训练地组织单位",
        "description": "四级训练地组织单位",
        “版本”：“0.1”，
        “href”：“https://dhis2.org/metadata-repo/221/trainingland-org-units/metadata.json”
      }
     ]
    }

客户端可以通过 URL 安装元数据包
带有元数据包的内容类型 *text/plain* 的 POST 请求
URL 作为 *metadataPull* 资源的有效负载：

    POST / api / synchronization / metadataPull

curl命令示例如下所示：

    卷曲“本地主机：8080/api/synchronization/metadataPull”-X POST
      -d“https://dhis2.org/metadata-repo/221/trainingland-org-units/metadata.json”
      -H“内容类型：文本/纯文本”-u admin：区-v

## 图示 { #webapi_icons } 

 <!--DHIS2-SECTION-ID:webapi_icons-->

DHIS2 包括一组可用于提供视觉效果的图标
元数据的上下文。这些图标可以通过图标访问
资源。

    获取/api/图标

此端点返回有关可用图标的信息列表。
每个条目都包含有关图标的信息，以及对图标的引用
实际图标。

    {
      键：“mosquito_outline”，
      描述： ””，
      关键词：[
        “疟疾”，
        “蚊子”，
        “登格”
      ],
      href: "<dhis server>/api/icons/mosquito_outline/icon.svg"
    }

关键字可用于过滤要返回的图标。传递一个列表
带有请求的关键字将只返回与所有匹配的图标
关键词：

    GET /api/icons?keywords=shape,小

可以在关键字资源中找到所有唯一关键字的列表：

    获取/api/图标/关键字
