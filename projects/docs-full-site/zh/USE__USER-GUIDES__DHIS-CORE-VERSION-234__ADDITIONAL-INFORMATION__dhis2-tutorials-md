---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.34/src/user/dhis2-tutorials.md"
revision_date: "2021-06-14"
---

# DHIS2教程 { #dhis2_tutorials }

## 使用数据透视表应用创建记分卡 { #create-scorecards-pivot-table }

**\*记分卡定义：** 在卫生部等公共卫生机构中，记分卡提供了一种有用且标准化的方法，用于将相关指标合并到一个表格中。记分卡提供了健康计划（例如疫苗接种计划）绩效的总体视图，突出了成功、弱点和需要改进的领域。典型的记分卡如下所示：\*

![](resources/images/tutorials/scorecards_pivot_result.png)

本教程说明了如何在DHIS2数据透视表应用程序中创建记分卡。使用数据透视表创建记分卡有几个优点，例如：

-   您可以将计分卡保存在仪表板上并离线使用。

-   您可以与其他DHIS2用户共享计分卡。

让我们开始吧\！

### 为记分卡创建图例 { #create-a-legend-for-your-scorecard }

首先，我们将为记分卡创建一个三色的“交通灯”图例。记分卡具有三种基本颜色，易于扫描且易于理解。

1.  Open the **Maintenance** app. Click the menu in the top right corner and select Maintenance from the list of apps. You can also type the first letters of the word maintenance in the search field to find the app.

    ![](resources/images/tutorials/scorecards_maintenance_app.png)

2.  In the Maintenance app, scroll to the bottom of the page right down to the **Other** section.

3.  Go to **Legend** and click the **+**.

    ![](resources/images/tutorials/scorecards_maintenance_legend.png)

4.  In the **Legend Management** page, scroll to the bottom of the page and create a new legend by clicking the blue + button.

    ![](resources/images/tutorials/scorecards_maintenance_addbtn.png)

5.  在字段中输入图例的名称，例如“ Traffic light”，开始值和结束值。您在此处输入的值取决于您希望为记分卡设置的性能等级。

6.  Change **Number of legend items** to 3 to display three colors in the scorecard. To change the legend item colors, click the blue + button and then edit the colors.

    ![](resources/images/tutorials/scorecards_maintenance_legend_color.png)

### 在数据透视表应用中创建记分卡 { #create-a-scorecard-in-the-pivot-table-app }

1.  Open the **Pivot Table** app from the top right menu of the dashboard. You can also enter the first letters of Pivot Table in the search field.

2.  Go to **Data** in the pane on the left side and select **Indicators** in the list.

3.  Select an **Indicator group** such as “ANC” in the second list.

4.  使用箭头选择您想要在记分卡中看到的指标类型。

    ![](resources/images/tutorials/scorecards_pivot_indicators.png)

5.  Click **Update**. This button is in the menu at the top of the workspace

6.  Go to **Periods** and select a period for which you want to display data. In this “traffic light” example, we’ll use the relative period section. In **Quarters**, select **This quarter**and **Last quarter**. Clear any other checkboxes and click **Update**.

    ![](resources/images/tutorials/scorecards_pivot_period.png)

7.  Go to **Organisation Units** in the same left side pane, and click the arrow next to the gear button.

8.  选择**选择级别**。

    ![](resources/images/tutorials/scorecards_pivot_orgunit_level.png)

9.  Select **District** from the list (next to the gear button). Click **Update**.

    ![](resources/images/tutorials/scorecards_pivot_orgunit_level2.png)

如您所见，记分卡在
工作区。现在该调整外观。

### 整理记分卡的布局和显示 { #organise-the-layout-and-display-of-your-scorecard }

1.  In the workspace, click **Layout**.

    ![](resources/images/tutorials/scorecards_pivot_layout.png)

2.  In **Table layout**, drag **Organisation units** down to the **Row dimensions** section.

3.  Drag **Data** to the **Column dimensions** section.

4.  In the **Column dimensions** pane, drag **Periods** below **Data**, and click **Update**.

5.  In the workspace, click **Options**.

    ![](resources/images/tutorials/scorecards_pivot_options.png)

6.  Go to **Data** and clear all the checkboxes.

7.  转到 **样式** \> **图例集**，然后从列表中选择您在维护应用程序中创建的图例。在此示例中，我们将其称为交通灯。

8.  Go to **Style** \> **Legend display style** and select **Background color**.

9.  点击**更新**。

记分卡已准备好\！

![](resources/images/tutorials/scorecards_pivot_result.png)

### 保存并分享您的计分卡 { #save-and-share-your-scorecard }

1.  In the workspace, go to the **Favorites** menu.

2.  点击**另存为**。输入您的记分卡名称。

3.  To share your Scorecard, select **Favorites**.

4.  Enter the name of a user group name, and click **Save**. Your scorecard can be viewed by people that you share a dashboard with.

## 使用TextPattern { #working-with-textpattern }

DHIS2版本2.29中引入了TextPattern，作为一种定义
包含变量，生成的值和原始文本的模式
然后可以生成一个文本值。当前用例
TextPattern是为跟踪的实体自动生成的属性，
您要在其中生成例如基于特定ID的唯一ID的位置
模式。

本指南将涵盖与之相关的基本和高级主题
TextPattern，但主要侧重于如何定义TextPatterns
以及存在哪些限制和警告。

### TextPattern语法 { #textpattern-syntax }

TextPattern 是由“+”字符连接在一起的_段_序列。段具有特定的符号，并且在大多数情况下具有参数_format_，它允许进一步操作该值。

<table>
<caption>TextPattern segments</caption>
<colgroup>
<col style="width: 20%" />
<col style="width: 36%" />
<col style="width: 12%" />
<col style="width: 30%" />
</colgroup>
<thead>
<tr class="header">
<th>Segment notation</th>
<th>Description</th>
<th>Paramenter (format)</th>
<th>Example (segment → input value → result)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>&quot;Plain text&quot;</td>
<td>The plain text segment will remain unchanged in all generated values. This special segment is defined by wrapping text between two double quotes. If your pattern should include separation symbols like a dash, you should use this &quot;-&quot;.
<p>The plain text segment also allows for placeholder text. That means you can specify that parts of the plain text segment should be any of a set of characters. Currently there are 4 supported special characters you can use:</p>
<ul>
<li><p>\d (0-9)</p></li>
<li><p>\x (a-z)</p></li>
<li><p>\X (A-Z)</p></li>
<li><p>\w (a-zA-Z0-9)</p></li>
</ul></td>
<td>None</td>
<td>&quot;Hello world&quot; → None → Hello world
<p>&quot;Hello \x\x\x&quot; → &quot;Hello you&quot; → Hello you</p>
<p>&quot;\d\d\d&quot; → &quot;123&quot; → 123</p></td>
</tr>
<tr class="even">
<td>CURRENT_DATE(format)</td>
<td>Current date segment will be generated by the server at the time of generation. This is useful if you want your patterns to have a time-constraint that is disconnected from the context. You should not use this if you need to control which date is injected into the pattern.</td>
<td>Date format</td>
<td>CURRENT_DATE(yyyy) → 01-01-2018 → 2018</td>
</tr>
<tr class="odd">
<td>ORG_UNIT_CODE(format)</td>
<td>This segment represents the organisation unit code associated with the generation.</td>
<td>Text format</td>
<td>ORG_UNIT_CODE(...) → OSLO → OSL</td>
</tr>
<tr class="even">
<td>RANDOM(format)</td>
<td>Random segments will be replaced by a value randomly generated by the server based on the format. Generated segments, like Random, bases its uniqueness on the rest of the pattern. That means a random value can appear twice, as long as the rest of the pattern is different, which means the generated text as a whole will be unique.</td>
<td>Generation format</td>
<td>RANDOM(X####) → None → A1234</td>
</tr>
<tr class="odd">
<td>SEQUENTIAL(format)</td>
<td>Sequential segments will be replaced by a number, based on a counting value on the server. Sequential segments will start at the value 1, and for each generated value count up until no more values are available, based on the format. Like Random segments, uniqueness is based on the rest of the pattern, so each possible version of the pattern will have it's own sequential counter starting from 1.</td>
<td>Generation format</td>
<td>&quot;A&quot;+SEQUENTIAL(###) → None → A001
<p>&quot;A&quot;-SEQUENTIAL(###) → None → A002</p>
<p>&quot;B&quot;-SEQUENTIAL(###) → None → B001</p>
<p>&quot;B&quot;-SEQUENTIAL(###) → None → B002</p></td>
</tr>
</tbody>
</table>

大多数段都有一个参数_format_，纯文本段除外。下表列出了可用的格式、它们的使用方式以及使用它们的示例符号。

<table>
<caption>Parameter formats</caption>
<colgroup>
<col style="width: 13%" />
<col style="width: 52%" />
<col style="width: 34%" />
</colgroup>
<thead>
<tr class="header">
<th>Format</th>
<th>Description</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Date format</td>
<td>This format is based directly on the java SimpleDateFormat, which means any pattern valid for SimpleDateFormat, will be valid as a date format in TextPattern</td>
<td>CURRENT_DATE(dd-MM-yyyy) → 31-12-2018
<p>CURRENT_DATE(MM-yyyy) → 12-2018</p></td>
</tr>
<tr class="even">
<td>Text format</td>
<td>The text format allows for some basic text manipulation. Leaving the format empty will return the value unmodified, but using "^", "." and "&#36;", you can modify the value before it is returned. Each "." represents a character, while "^" represents the start of the text and "&#36;" represents the end. When using formats, the input value must be at least the same length as the format.</td>
<td>
<p>ORG_UNIT_CODE(....) → OSLO</p>
<p>ORG_UNIT_CODE(..) → OS</p>
<p>ORG_UNIT_CODE(..&#36;) → LO</p>
<p>ORG_UNIT_CODE(^...&#36;) → OSLO</p>
<p>^....&#36; will require the input value to be exactly 4 characters.</p></td>
</tr>
<tr class="odd">
<td>Generation format</td>
<td>The generation format accepts a combination of one or more of he following characters: &quot;#&quot;, &quot;X&quot;, &quot;x&quot; and &quot;*&quot;. They respectively represent a number(0-9), an uppercase letter (A-Z), a lowercase letter(a-z) or any of the above(0-9,a-z,A-Z). The SEQUENTIAL segment only accepts &quot;#&quot;, since it will only generate numbers. The number of characters in the format decides the size of the value generated. Using just one &quot;#&quot; will in other words only allow for 10 values (0-9), while &quot;###&quot; will allow for 1000 values (000-999). SEQUENTIAL generated values have leading zeroes, so the length of the generated value will always match the format length.</td>
<td>RANDOM(X###) → A123
<p>RANDOM(****) → 1AbC</p>
<p>SEQUENTIAL(###) → 001</p>
<p>SEQUENTIAL(######) → 000001</p></td>
</tr>
</tbody>
</table>

有关格式的一些重要注意事项：

-   日期格式非常通用，但请注意您使用的是哪些日期或时间组件。即使可用，也不建议使用小于一天（例如几小时或几秒）的组件。

-   文本格式允许标记输入值的开始和结束，但“^...”和“...”实际上会给出完全相同的结果。唯一需要使用“^”的时候是当您想要强制输入值的长度时。例如，“^....$”将接受 OSLO，因为它在开始和结束之间有 4 个字符，但 PARIS 将被拒绝，因为它有 5 个字符。

-   当文本格式用于唯一值（例如组织单位代码）时，请确保该格式不会破坏唯一性。 （例如：“PARIS”和“PANAMA CITY”的 ORG_UNIT_CODE(..) 都会返回 PA，这意味着这两个组织单位实际上会共享生成的值）

-   生成格式是了解模式容量的主要方法。确保格式足够长以涵盖比您需要的更多的值。

要结束本教程的语法部分，这里有几个
例
    TextPattern：

    ORG_UNIT_CODE（...）+“-” + CURRENT_DATE（yyyyww）+“-” + SEQUENTIAL（#####）

该模式将有 99999 个可能的值（基于 SEQUENTIAL。00000 从未使用过，因为我们从 1 开始）。此外，剩余模式将针对生成值 (ORG_UNIT_CODE) 的每个不同组织单位以及每周（CURRENT_DATE(yyyyww) 表示年和周）而发生变化。这实际上意味着每个新的一周，每个组织单位都会有 99999 个可以使用的新值。

    “ ABC_” + RANDOM（****）

此模式的纯文本段不会对
模式的总容量，但是生成的段（RANDOM）
将允许14776336可能的值。原因是\ *
可以是62个可用字符中的任何一个（0-9，a-z，A-Z）。
您可以在下面进一步了解有关了解模式容量的信息
本教程。

### 设计用于生成ID的TextPattern { #designing-textpattern-for-generating-ids }

TextPattern的一种用例是生成唯一的ID。在这个部分
我们将介绍与设计相关的准则和常见问题
用于ID的TextPatterns。

ID不得包含敏感信息或包含以下内容的信息：
组合可以识别一个人。 TextPattern当前不
支持使用此类值的细分受众群，但可能会在
未来。

以下列表突出显示了一些特定于TextPattern的内容
设计id的TextPattern时需要考虑的限制：

-   确保 TextPattern 的容量（可能值的数量）涵盖您的用例。拥有比需要更多的值比拥有更少的值要好。使用 TextPattern 跟踪的实体属性将要求 TextPattern 中存在单个生成的段。

-   TextPattern 在整个系统中是唯一的，但仅限于使用它的对象。换句话说，如果您有一个带有 TextPattern 的跟踪实体属性，由多个跟踪实体使用（不要误认为跟踪实体实例），则生成的所有值将在使用该属性的所有跟踪实体之间共享。这也意味着，如果您有两个具有相同 TextPattern 语法的跟踪实体属性，则每个属性将能够生成与另一个属性相同的值，因为唯一性基于该属性。

<!-- end list -->

-   SEQUENTIAL 段在实现编号中从 1 开始，每个值按顺序增加 1，直到没有更多值可用。然而，实际上，当用户生成并保留从未使用过的值时，或者如果用户发送的值中 SEQUENTIAL 段的值高于服务器上记录的值，则很可能会出现间隙。

-   当前的实现依赖于用户客户端在存储新值时发送 TextPattern 中包含的值。这意味着生成正确的 ID 取决于用户和用户客户端，以提供正确的数据。

### 了解TextPattern容量 { #understanding-textpattern-capacity }

设计TextPattern时要记住的最重要的事情是，
是容量-表示潜在值的总数a
TextPattern可以产生。

在当前的TextPattern实现中，主要有三个
决定容量的因素：

1.  TextPattern中生成的段的容量

2.  CURRENT_DATE 段的存在

3.  ORG_UNIT_CODE 段的存在

日期段（如 CURRENT_DATE）的存在将在每次段更改时有效地重置容量。根据日期格式，它可以在任何地方更改为每年或每天。 **重要提示：如果您的日期格式不包含年份，则该模式每年都会解析为相同的值。**这意味着值已被使用。例如，如果您的 TextPattern 如下所示：

    CURRENT_DATE（ww）+“-” + RANDOM（＃）

此模式每周将为您提供最多 10 个唯一值，但 1 年后，CURRENT_DATE(ww) 将与去年相同，并且您将没有可用的新值。如果您使用“yyyy-ww”，那么它每年、每周都是唯一的。

组织单位代码将使您的价值观在每个不同的领域都独一无二
组织单位，这意味着您是否具有以下文本模式：

    ORG_UNIT_CODE（）+“-” + RANDOM（＃）

此模式将为您提供10种不同的唯一值
组织单位。

#### 计算生成段的容量 { #calculating-capacity-for-generated-segments }

在设计 TextPattern 时，了解如何计算 TextPattern 的容量至关重要。就容量而言，生成的段将是任何 TextPattern 的主要组成部分，然后根据 ORG_UNIT_CODE 或 CURRENT_DATE 的存在而增加。

让我们从SEQUENTIAL段开始。格式中的每个“ \＃”代表
一个0到9之间的数字。要计算总容量，请乘以
每个“ \＃”的可能值的数量。由于总是10（0-9）
数学很简单：

    SEQUENTIAL（＃）= 10 = 10
    序列（###）= 10 * 10 * 10 = 1000
    SEQUENTIAL（#####）= 10 * 10 * 10 * 10 * 10 = 100000

由于服务器上的SEQUENTIAL计数器从1开始而不是0，因此实际
容量为999，但在大多数情况下并不重要。

一旦涉及到RANDOM，计算就会变得更多
复杂。与SEQUENTIAL类似，“ \＃”具有10个可能的值，
另外，我们有“ X”和“ x”，每个都有26个可能的值，以及
“ \ *”可以是前面的任何一个，表示62（10 + 26 + 26）
可能的值。

要计算容量，您需要将每个字符
格式化并替换为可能的值数，然后相乘
它们都像我们在SEQUENTIAL中所做的一样：

    RANDOM（＃）= 10 = 10
    随机（X）= 26 = 26
    RANDOM（*）= 62 = 62

    RANDOM（X ##）= 26 * 10 * 10 = 2600
    随机（XXxx）= 26 * 26 * 26 * 26 = 456976

    随机（***）= 62 * 62 * 62 = 238328

如您所见，数学运算有时会变得更加复杂，但是
按照此配方，您可以看到潜在值的数量。

### 随机细分以及为什么应避免使用 { #random-segments-and-why-you-should-avoid-it }

在TextPattern中使用随机段会产生隐藏的成本
长期运行，但这并不意味着您永远不要使用它。这个部分
将突出显示使用随机片段的问题，并建议何时
可能更适合使用它。

本节是由上一代的问题引起的
策略，您只有随机生成。过了一会儿，实例
使用此功能实际上将无法生成和保留新的
值，因为要花很长时间才能找到可用的值。这个
本节着眼于随机产生的一些问题
造成了这种情况。

#### 产生随机值 { #generating-random-values }

在TextPattern中使用RANDOM段之前，应考虑
与使用RANDOM有关的以下问题：

-   从具有 RANDOM 段的 TextPattern 生成值将比其他 TextPattern 更复杂

### 基于TextPattern的元数据的数据输入 { #data-entry-for-textpattern-based-metadata }

如前所述，当前唯一支持的元数据
TextPattern是跟踪的实体属性。在本节中，我们将
描述TextPattern数据输入的不同方式，特别是
用于跟踪的实体属性。

#### 使用TextPattern验证值 { #validation-of-values-using-textpattern }

默认情况下，使用以下命令将所有值发送到服务器以获取元数据
TextPattern，将被验证。如果需要，可以跳过验证，但是
在正常情况下，您应该始终验证输入。的
验证将基于您定义的TextPattern并将
尽可能严格：

-   日期段必须与段参数中指定的格式匹配

-   纯文本段必须完全匹配

-   文本段值必须至少与格式字符串一样长。如果“^”和“$”同时存在，则该值必须与精确长度匹配。

-   生成的段值必须逐字符与格式完全匹配。

使用服务器首先生成和保留值时，服务器
将在注入之前修改TextPattern中使用的值，
这意味着在
服务器。

对于TextPattern验证，最后一个例外是特殊情况：
如果在保留原始值之后更改了TextPattern
模式，根据新的，发送到服务器的值无效
如果已保留TextPattern，则仍将接受它。

#### TextPattern的不同数据输入流 { #different-data-entry-flows-for-textpattern }

客户端目前有2种方法可以存储TextPattern的值
元数据：

1.  生成和保留值（应用程序应为您完成此操作）

2.  存储自定义值

首选方式是生成并保留所需的值（
生成和保留的值数量由应用处理）。那
表示您每次查看和存储值时，
由服务器生成并保留，并且将是有效的。

在特定情况下，另一种方法可能会有用。用户将提供
值本身，只要提供的值对
TextPattern，他们可以放置任何想要的东西。注意事项
这样，您可能会使用别人保留的值
如果您有一个SEQUENTIAL细分，则不会更新计数器。
