---
edit_url: "https://github.com/dhis2/dhis2-releases/blob/master/releases/2.34/README.md"
revision_date: "2021-03-11"
---

# 2.34升级说明 { #234-upgrade-notes }

## Tomcat支持 { #tomcat-support }

-   现在所需的最低Tomcat版本是** 8.5.50 **。现在不再支持Tomcat 7.0和8.0。进行此更改的主要原因是Tomcat 7.0和8.0在DHIS 2内部使用的某些应用程序开发框架（最重要的_Jackson_，用于JSON和XML序列化）方面存在多个问题。

## Web API和数据模型 { #web-api-and-data-model }

-   A new entity and API resource is introduced called `Visualization`, located at `/api/visualizations`. The visualization entity merges the previous `ReportTable` and `Chart` entities and API resources. The corresponding API endpoints `/api/reportTables` and `/api/charts` will be functional for some time but will be removed in the future and we recommend clients to migrate as soon as possible. This also implies that report tables and charts cannot be exchanged between systems using the `/api/metadata` endpoint, instead, metadata should be exchanged as visualizations.

-   `/ api / configuration / settings`和`/ api / configuration / settings / filter`端点已被删除。

## 功能 { #functionality }

-   Scheduler应用程序中作业的_continuous execute_选项已被删除，因为它经常被滥用并引起严重的问题。相反，作业现在可以是_fixed delay_类型，这意味着它们将在每次运行之间以固定的延迟被调用（例如新的_continuous analytics table_ job）。

## 预测变量 { #predictor }

-   现在，预测变量表达式中的函数名称区分大小写，并且必须与《 DHIS 2用户指南》中的预测变量函数名称匹配。以前，它们不区分大小写。作为升级到2.34的一部分，现有预测变量表达式中的函数名称会自动转换为正确的大小写。

-   为了与 DHIS 2 的其他部分和一般用法保持一致，预测表达式中的 `stddev` 函数现在与 `stddevSamp` 相同。以前，预测表达式中的 `stddev` 与 `stddevPop` 同义。作为升级到 2.34 的一部分，现有预测表达式中对 stddev 的引用将自动替换为 `stddevPop`。

## 流程 { #process }

-   请记住在升级之前从 **应用程序 > 数据管理 > 维护 > 删除 SQL 视图** 删除 SQL 视图，并在升级完成后重新创建它们。这是为了避免升级过程中出现数据库完整性问题，因为无法修改具有关联视图的数据库表/列。

## 特定于补丁的更改{ #patch-specific-changes }

### 2.34.4 数据库架构{ #2344-database-schema }

-   为表 `trackedentityprogramowner` 的列 `(trackedentityinstanceid,programid,organisationunitid)`新建索引。改进了在程序上下文中与组织单位范围有关的查找。
-   为表 `programinstance` 的列 `(programid)` 新建索引。改进了大多数情况下根据程序查找程序实例的一般方法。
-   在表 `trackedentityattributevalue` 中为`(trackedentityinstanceid, trackedentityattributeid, lower(value))`列建立新索引。这是对先前的`(trackedentityattributeid, lower(value))`列索引的补充。我们看到，在跟踪实体实例的情况下，postgres 会返回到顺序扫描，而使用现有索引会得到更好的结果。有了新索引，我们就能成功地鼓励 postgres 在对跟踪实体实例进行匹配时也使用该索引。
-   为表 `programstageinstance` 的列 `(status,executiondate)`新建索引。该表通常比跟踪的实体实例表和程序实例表大很多，当在搜索中将程序阶段实例作为过滤器时，我们发现一些查询出现了瓶颈。我们添加了这个索引，以提高我们最常用的过滤列 status 和 executiondate 的性能，后者在搜索事件时经常与 status 一起使用。

> **注意**
>
> 由于索引数量及其表的典型大小，请注意升级到此版本或更高版本可能需要大量时间。
