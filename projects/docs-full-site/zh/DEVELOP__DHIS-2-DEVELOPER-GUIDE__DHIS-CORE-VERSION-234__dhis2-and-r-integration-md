---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.34/src/commonmark/en/content/developer/dhis2-and-r-integration.md"
---

# DHIS2和R集成

 <!--DHIS2-SECTION-ID:rsetup-->

## 介绍

 <!--DHIS2-SECTION-ID:rsetup_intro-->

R是免费提供的开源统计计算环境。 [R
既指计算机编程语言，也指
可用于创建和运行R脚本的软件。有
[网络上的大量资源]（http://cran.r-project.org/）
R的广泛功能集。

R是DHIS2的自然扩展，因为它提供了强大的统计信息
例程，数据处理功能和可视化工具。这个
本章将介绍如何在同一服务器上设置R和DHIS2，以及
将提供有关如何从DHIS2检索数据的简单示例
将数据库存入R数据框并执行一些基本计算。

## 安装R

 <!--DHIS2-SECTION-ID:rsetup_install-->

如果将R与DHIS安装在同一服务器上，则应考虑
使用综合R存档网络（CRAN）获得最新的
R的分布。您需要做的就是添加以下内容，例如
您的`/ etc / apt / source.list`文件。

** deb \ <your R mirror\> / bin / linux / ubuntu \ <your Ubuntu distribution\> **

您将需要用列表中的一个替换** \ <your R mirror\> **
可在[此处。]（http://cran.r-project.org/mirrors.html）中使用
需要将** \ <your Ubuntu distribution\> **替换为
您正在使用的发行版。

完成此操作后，调用以下命令

    sudo apt-get更新
    gpg --keyserver pgp.mit.edu --recv-keys 51716619E084DAB9
    gpg-装甲-出口51716619E084DAB9 | apt键添加-
    须藤apt-get install r-base r-cran-dbi

此时，您应该在您的R上安装了功能性R
机。

接下来，通过简单地从命令行触发`R`。

```
R版本3.4.4（2018-03-15）-“精益求精的人”
版权所有（C）2018 The R Foundation for Statistical Computing
平台：x86_64-pc-linux-gnu（64位）

R是免费软件，并且绝对不提供保证。
欢迎您在某些情况下重新分发它。
输入“ license（）”或“ licence（）”以获取分发详细信息。

  自然语言支持，但以英语语言环境运行

R是与许多贡献者合作的项目。
键入“ contributors（）”以获取更多信息，以及
有关如何引用出版物中的R或R软件包的'citation（）'。

对于某些演示，请键入“ demo（）”，对于在线帮助，请键入“ help（）”，或者
用于HTML浏览器界面的“ help.start（）”。
输入“ q（）”退出R。

>
```

## 使用ODBC将数据从DHIS2检索到R中

 <!--DHIS2-SECTION-ID:rsetup_odbc-->

在此示例中，我们将使用系统范围的ODBC连接器
用于从DHIS2数据库检索数据。有一些
这种方法的缺点，因为ODBC比其他方法慢
并且通过提供全系统范围的确增加了一些安全问题
所有用户的连接器。但是，提供
与多个用户的连接。使用R包RODBC将
在这种情况下使用。其他替代方法是使用
[RPostgreSQL]（http://dirk.eddelbuettel.com/code/rpostgresql.html）
软件包，可以直接通过PostgreSQL驱动程序进行接口
在下一节中介绍。

假设您已经按照前面的步骤安装了R
部分。调用以下命令以添加所需的库
这个例子。

`apt-get install r-cran-rodbc r-cran-lattice odbc-postgresql`

接下来，我们需要配置ODBC连接。编辑文件以适合
使用以下模板作为您的本地情况。让我们
创建和编辑一个名为odbc.ini的文件

    [dhis2]
    说明= DHIS2数据库
    驱动程序= /usr/lib/odbc/psqlodbcw.so
    迹线=否
    TraceFile = /tmp/sql.log
    数据库= dhis2
    服务器名称= 127.0.0.1
    用户名= postgres
    密码= SomethingSecure
    端口= 5432
    协议= 9.0
    只读=是
    RowVersioning =否
    ShowSystemTables =否
    ShowOidColumn =否
    FakeOidIndex =否
    ConnSettings =
    调试= 0

最后，我们需要使用odbcinst -i -d -f安装ODBC连接`odbc.ini`

在R提示下，执行以下命令以连接到
DHIS2数据库。

    >库（RODBC）
    > channel <-odbcConnect（“ dhis2”）＃注意，该名称必须与ODBC连接器名称匹配
    > sqlTest <-c（“ SELECT dataelementid，名称为FROM dataelement LIMIT 10;”）
    > sqlQuery（channel，sqlTest）
                                                                            名称
    5岁以下的1名OPD初次参加
    5岁以上的2位OPD初次参加
    5岁以下3例贫血死亡
    5年以下4例疟疾死亡临床病例
    5 5岁以下住院
    6位5岁以下住院病人
    7个数字ITN
    5岁以下疟疾第一诊治8例
    5年以下9例IP排放疟疾临床病例
    提供1至5年的抗疟疾治疗的10例疟疾死亡病例
    >

看来R能够从DHIS2数据库检索数据。

举例来说，假设我们被要求计算
5岁以下就读者中OPD男性和女性的相对百分比
最后十二个月。首先，创建一个SQL查询，该查询将为我们提供
基本信息将是
    需要。

    OPD<-sqlQuery(channel,"SELECT p.startdate, de.name as de, sum(dv.value::双精度)
     FROM 数据值 dv
     INNER JOIN dv.periodid 上的周期 p = p.periodid
     dv.dataelementid = de.dataelementid 上的 INNER JOIN 数据元素 de
     WHERE p.startdate >= '2011-01-01'
     和 p.enddate <= '2011-12-31'
     and de.name ~*('出勤 OPD')
     GROUP BY p.startdate, de.name;")

我们已经将SQL查询的结果存储在称为
“ OPD”。让我们看一下数据的外观。

``` 
> head(OPD)
   startdate de sum
1 2011-12-01 出席 OPD <12 个月 女性 42557
2 2011-02-01 出勤 OPD<12 months female 127485
3 2011-01-01   Attendance OPD 12-59 months male 200734
4 2011-04-01   Attendance OPD 12-59 months male 222649
5 2011-06-01   Attendance OPD 12-59 months male 168896
6 2011-03-01 Attendance OPD 12-59 months female 268141
> unique(OPD$de)
[1] 出勤 OPD<12 months female   Attendance OPD 12-59 months male  
[3] Attendance OPD 12-59 months female Attendance OPD >5 年 男   
[5] 出席 OPD<12 months male     Attendance OPD >5 年 女性    
6 级：参加 OPD 12-59 个月的女性 ...出席 OPD >5 岁 男性
> 

```

我们可以看到，我们需要将两个年龄段（\ <12个月
和12-59个月），并根据性别将其分为一个变量。让我们
将数据重塑为交叉表，以使其更容易
可视化并计算摘要。

    >OPD.ct<-cast(OPD,开始日期 ~ de)
    >colnames(OPD.ct)
    [1]“开始日期”“12-59 个月女性 OPD 出勤”
    [3] “出勤 OPD 12-59 个月男性” “出勤 OPD <12 个月女性”
    [5]“出勤 OPD <12 months male"     "Attendance OPD >5 岁女性”
    [7]“出勤 OPD > 5 岁男性”

我们已经对数据进行了调整，以使数据元素是独立的
列。看来我们需要汇总第二和第四
专栏一起获得5岁以下的女性出勤率，然后
第三列和第五列，以使男性在5岁以下出席。之后，
让子集数据成为一个新的数据框架，只是为了获得所需的
信息并显示结果。

    > OPD.ct $ OPDUnder5Female <-OPD.ct [，2] + OPD.ct [，4] #Females
    > OPD.ct $ OPDUnder5Male <-OPD.ct [，3] + OPD.ct [，5] #males
    > OPD.ct.summary <-OPD.ct [，c（1,8,9）]＃new摘要数据框
    > OPD.ct.summary $ FemalePercent <-
    OPD.ct.summary $ OPDUnder5Female /
    （OPD.ct.summary $ OPDUnder5male + OPD.ct.summary $ OPDUnder5Male）* 100＃雌性
    > OPD.ct.summary $ MalePercent <-
    OPD.ct.summary $ OPDUnder5Male /
    （OPD.ct.summary $ OPDUnder5Female + OPD.ct.summary $ OPDUnder5Male）* 100＃男

当然，这可以更优雅地完成，但是对于
为了说明的目的，此代码相当冗长。
显示所需的信息。

    > OPD.ct.summary [，c（1,4,5）]
        开始日期女性百分比男性百分比
    1 2011-01-01 51.13360 48.86640
    2 2011-02-01 51.49154 48.50846
    3 2011-03-01 51.55651 48.44349
    4 2011-04-01 51.19867 48.80133
    5 2011-05-01 51.29902 48.70098
    6 2011-06-01 51.66519 48.33481
    7 2011-07-01 51.68762 48.31238
    8 2011-08-01 51.49467 48.50533
    9 2011-09-01 51.20394 48.79606
    10 2011-10-01 51.34465 48.65535
    11 2011-11-01 51.42526 48.57474
    12 2011-12-01 50.68933 49.31067

我们可以看到，男性和女性的出勤率非常相似
每年的每个月，男性上学相对较高
在十二月的女性出席率。

在此示例中，我们展示了如何从DHIS2数据库检索数据
并使用一些简单的R命令进行操作。基本模式
一起使用DHIS2和R，将从DHIS2中检索数据
SQL查询进入R数据框的数据库
可能需要的例行程序（统计分析，绘图等）。


## 使用R和PostgreSQL进行映射

 <!--DHIS2-SECTION-ID:rsetup_maps-->

一个更扩展的示例将使用RPostgreSQL库和
其他几个库可以根据存储在其中的坐标生成地图
数据库。我们将定义一些辅助函数以提供一个层
抽象，这将使R代码更可重用。

```
＃加载一些依赖库
 图书馆（地图）
 库（maptools）
 库（ColorBrewer）
 库（ClassInt）
 库（RPostgreSQL）

＃定义一些助手功能

＃从连接返回数据帧以获取有效的语句
dfFromSQL <-函数（con，sql）{
    rs <-dbSendQuery（con，sql）
    结果<-fetch（rs，n = -1）
    返回（结果）
}
＃返回纬度和
 组织单位表中的经度
dhisGetFacilityCoordinates <-function（con，levelLimit = 4）{
sqlCoords <-paste（“ SELECT ou.organisationunitid，ou.name，
子串（ou.E'（？= ,?）-[0-9] + \\。[0-9] +'的坐标）::双精度作为纬度，
子字符串（ou.E'[0-9 \\。] +'的坐标）：双精度为
 从Organisationunit ou经度，其中ou.organisationunitid
 在（SELECT DISTINCT idlevel“，levelLimit，”来自_orgunitstructure）
 和ou.featuretype ='Point'
 ;“，sep =”“）
 结果<-dfFromSQL（con，sqlCoords）
 返回（结果）
 }

＃获取指标值的数据框，
＃提供了指标的名称，
＃开始日期，期间类型和级别
dhisGetAggregatedIndicatorValues <-function（con，
indicatorName，
开始日期，
periodtype =“每年”，
等级= 4）
{
  sql <-paste（“ SELECT Organisationunitid，dv.value fromgregationdindicatorvalue dv
其中dv.indicatorid =
（从名称为\'“，indicatorName，” \'的指示器中选择SELECT指示器id）和dv.level
 =“，级别”和
 dv.periodid =
（从以下期间选择期间ID：
startdate = \'“，startdate，” \'
和periodtypeid =
（从periodtype中选择periodtypeid
 其中名称= \'“，句点类型，” \'））;“，sep =”“）
   结果<-dfFromSQL（con，sql）
 返回（结果）
 }

#Main函数，用于处理绘图。
#con是数据库连接
#IndicatorName是指标的名称
#StartDate是开始日期
#baselayer是基本层
plotIndicator <-function（con，
指标名称，
开始日期，
periodtype =“每年”，
级别= 4，基本层）
{
＃首先，获取所需的指标数据
myDF <-dhisGetAggregatedIndicatorValues（con，
IndicatorName，StartDate，句点类型，级别）
＃下一步，获取坐标
坐标<-dhisGetFacilityCoordinates（con，level）
＃将指标与坐标数据框合并
myDF <-合并（myDF，coords）
＃我们需要将新数据框架转换为空间数据
#frame以利用情节
myDF <-SpatialPointsDataFrame（myDF [，
c（“经度”，“纬度”）]，myDF）
＃定义一些色阶
IndColors <-c（“ firebrick4”，“ firebrick1”，“ gold”
，“ darkolivegreen1”，“暗绿色”）
＃定义班级休息时间。在这种情况下，我们要
＃使用6个分位数
class <-classIntervals（myDF $ value，n = 6，style =“ quantile”
，pal = IndColors）
＃定义用于颜色代码的向量
＃按等级着色点
colCode <-findColours（class，IndColors）
＃继续进行剧情
myPlot <-plot.new（）
＃首先，绘制基础层
情节（基本层）
＃下一步，添加点数据框
点数（myDF，col = colCode，pch = 19）
＃将指标名称添加到地图标题
标题（main = IndicatorName，sub = StartDate）
＃最后，从函数返回图
return（myPlot）}

```

到目前为止，我们已经定义了一些功能来帮助我们
地图。我们需要获取存储在数据库中的坐标并合并
这些与我们计划映射的指标。然后我们检索数据
从汇总指标表中，创建特殊类型的数据框
（SpatialPointsDataFrame），对此应用一些样式，然后创建
剧情。

    ＃现在我们定义实际要做的事情
    ＃让我们与数据库建立连接
    con <-dbConnect（PostgreSQL（），user =“ dhis”，password =“ SomethingSecure”，dbname =“ dhis”）
    ＃定义要绘制的指标的名称
    MyIndicatorName <-“ OPD总出席人数”
    MyPeriodType <-“每年”
    ＃这应与存储坐标的级别匹配
    MyLevel <-4
    ＃给出开始日期和期间类型，就足够了
    ＃确定时期
    MyStartDate <-“ 2010-01-01”
    ＃从GADM获取一些赞比亚一些地区数据
    ＃这将用作背景层
    con <-url（“ http://www.filefactory.com/file/c2a3898/n/ZMB_adm2_RData”）
    print（load（con））＃另存为gadm对象
    ＃制作地图
    plotIndicator（con，MyIndicatorName，MyStartDate，MyPeriodType，MyLevel，gadm）

plotIndicator函数的结果如下所示。

！[]（resources / images / r / OPDAttendance.png）

在这个例子中，我们展示了如何使用RPostgreSQL库和其他
辅助程序库（Maptools，ColorBrewer）可从
DHIS2数据集市。

## 使用R，DHIS2和Google Visualization API

 <!--DHIS2-SECTION-ID:rsetup_google_visualization_api-->

Google的Visualization API为用户提供了非常丰富的工具集
多维数据的可视化。在这个简单的例子中，我们将
展示如何使用Google Visualization创建简单的运动图
使用“ googleVis” R包的API。包装上的完整信息可以
可以在[此处。]（http://code.google.com/p/google-motion-charts-with-r/）找到。
与其他示例一样，基本原理是获取一些数据
从DHIS2数据库中，并将其带入R中，执行一些小的操作
对数据进行更改以使其易于使用，然后创建
图表。在这种情况下，我们将比较一段时间内的ANC1,2,3数据，然后查看
它们与运动图之间的关系。

    #加载一些库
    库（RPostgreSQL）
    库（googleVis）
    图书馆（重塑）
    #一个小辅助函数，用于从某些 SQL 中获取数据框
    dfFromSQL<-函数（con，sql）{
        rs<-dbSendQuery(con,sql)
        结果<-fetch(rs,n=-1)
        返回（结果）
    }

    #获取数据库连接
    用户<-“postgres”
    密码<-“postgres”
    主机<-“127.0.0.1”
    端口<-“5432”
    数据库名称<-"dhis2_demo"
    con <- dbConnect(PostgreSQL(), user=用户,
    密码=密码，主机=主机，端口=端口，数据库名称=数据库名称）
    #让我们从演示数据库中检索一些 ANC 数据
    sql<-"SELECT ou.shortname 作为省份，
    i.shortname 作为指示符，
    提取（p.startdate中的年份）作为年份，
     一个值
    FROM 聚合指标值 a
    INNER JOIN 组织单元 ou 上 a.组织单元 ID = ou.组织单元 ID
    INNER JOIN 指示符 i on a.indicatorid = i.indicatorid
    INNER JOIN period p on a.periodid = p.periodid
    WHERE a.indicatorid IN
    (从指标中选择不同的指标 ID，其中短名称 ~*('ANC [123] 覆盖范围'))
    AND a.organizationunitid IN
     （从 _orgunitstruct 中选择 DISTINCT idlevel2，其中 idlevel2 不为空）
    AND a.periodtypeid = (从 periodtype 中选择不同的 periodtypeid，其中 name = '每年')"
    #将其存储在数据框中
    anc<-dfFromSQL(con,sql)
    #将这些列更改为因子，以便重塑更容易

    anc$省<-as.factor(anc$省)
    anc$indicator<-as.factor(anc$indicator)
    #我们需要时间变量作为数字
    anc$year<-as.numeric(as.character(anc$year))
    #需要将表格转换为稍微不同的格式
    anc<-cast(anc,省份 + 年 ~ 指示符)
    #现在，创建运动图表并绘制它
    M<-gvisMotionChart(anc,idvar="省",timevar="年份")
    地块(M)

结果图显示在下面。


![](resources/images/r/google_vis_col_chart.PNG)

使用[brew]（http://cran.r-project.org/package=brew）之类的软件包或
[Rapache]（http://rapache.net），这些类型的图很容易
集成到外部网站中。的完整功能版本
上面显示的图表可以访问
[这里。]（http://dhis2.net/R/google-motion-chart.html）

## 在DHIS2中使用PL / R

 <!--DHIS2-SECTION-ID:rsetup_plr-->

R的过程语言是PostgreSQL核心的扩展
这允许将数据从数据库传递到R，其中
可以执行R中的计算。然后可以将数据传递回
数据库以供进一步处理。在此示例中，我们将创建一个
函数来计算一些不存在的汇总统计信息
默认情况下，使用R在SQL中。我们将在DHIS2中创建一个SQL视图，以
显示结果。在这种情况下利用R的优势是
我们不需要编写大量代码即可返回
这些摘要统计信息，但只需利用R的内置功能
为我们做工作。

首先，您需要安装[PL / R]（http://www.joeconway.com/plr/），
详细介绍
[这里。]（http://www.joeconway.com/plr/doc/plr-install.html）。以下
来自PL / R网站的示例，我们将创建一些自定义聚合
功能详细
[这里。]（http://www.joeconway.com/plr/doc/plr-aggregate-funcs.html）我们
将创建两个函数，以返回a的中值和偏度
值范围。

    创建或替换功能r_median（_float8）返回float为'
      中位数（arg1）
    '语言'plr';

    CREATE AGGREGATE中位数（
      sfunc = plr_array_accum，
      basetype = float8，
      stype = _float8，
      finalfunc = r_median
    ）;

    创建或替换功能r_skewness（_float8）返回float为'
      要求（e1071）
      偏度（arg1）
    '语言'plr';

    创建总体偏斜度（
      sfunc = plr_array_accum，
      basetype = float8，
      stype = _float8，
      finalfunc = r_skewness
    ）;

接下来，我们将定义一个SQL查询，该查询将用于检索两个
新的聚合函数（中值和偏度）将被计算
使用R。在这种情况下，我们只会从数据中获得一个指标
在区域级别的集市上，并根据
值所属的区域的名称。这个查询非常
特定的，但很容易适应您自己的数据库。

    选择ou.shortname，avg（dv.value），
    中值（dv.value），偏度（dv.value）来自aggregatedindicatorvalue dv
    内连接周期p on p.periodid = dv.periodid
    内部加入组织单位
    dv.organisationunitid = ou.organisationunitid
    dv.indicatorid = 112670
    AND dv.level = 3
    AND dv.periodtypeid = 3
    AND p.startdate> ='2009-01-01'
    GROUP BY ou.shortname;

然后，我们可以在DHIS2中以SQL View的形式保存该查询。一个修剪
结果的版本如下所示。


![](resources/images/r/r_plr.PNG)

在这个简单的例子中，我们展示了如何在DHIS2中使用PL / R
数据库和Web界面以使用R显示一些摘要统计信息
执行计算。

## 将此DHIS2 Web API与R一起使用

 <!--DHIS2-SECTION-ID:rsetup_web_api-->

DHIS2具有强大的Web API，可用于集成应用程序
一起。在本节中，我们将说明一些简单的例子
Web API的使用以及我们如何检索数据和元数据
在R中使用。WebAPI使用基本的HTTP身份验证（如
本文档的Web API部分）。使用两个R包“ RCurl”和
“ XML”，我们将能够使用R中的API输出。
第一个示例，我们将从数据库中获取一些元数据。

```
＃我们将需要这两个库
要求（httr）
要求（magrittr）
base.url <-“ https://play.dhis2.org/dev/”
url <-paste0（base.url，“ api / me”）
用户名<-“管理员”
密码<-“区”
登录<-GET（URL，）

url <-paste0（base.url，“ api / reportTables / KJFbpIymTAo / data.csv”，authenticate（用户名，密码）
mydata <-GET(url) %>％content（。，“ text / csv”）
头（mydata）
```

在这里，我们展示了如何从DHIS2演示中获取一些汇总数据
使用DHIS2的Web API的数据库。

在下一个代码示例中，我们将检索一些元数据，即一个列表
数据元素及其唯一标识符。

```

#Get the list of data elements. Turn off paging and only get a few attributes.
require(httr)


username<-"admin"
password<-"district"
base.url<-"https://play.dhis2.org/dev/"

login<-function(username,password,base.url) {
url<-paste0(base.url,"api/me")
r<-GET(url,authenticate(username,password))
if(r$status == 200L) { print("Logged in successfully!")} else {print("Could not login")}
}

getDataElements<-function(base.url) {

url<-paste0(base.url,"api/dataElements?fields=id,name,shortName")
r<-content(GET(url,authenticate(username,password)),as="parsed")
do.call(rbind.data.frame,r$dataElements)
}

login(username,password,base.url)
data_elements<-getDataElements(base.url)
head(data_elements)
```

现在，对象 `data_elements` 应包含系统中所有数据元素的数据帧。 

```
                                         名称编号
2次急性弛缓性麻痹（死亡<5年）FTRrcoaog83
210急性弛缓性麻痹（AFP）随访P3jJH5Tu5VC
3急性弛缓性麻痹（AFP）新的FQ2o8UBlcrS
4急性弛缓性麻痹（AFP）转诊M62VHgYT2n0
5与设施uF1DLnZNlWe有关的其他说明
6入学日期eMyVanycQSC
```
