---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.33/src/commonmark/en/content/developer/web-api.md"
revision_date: '2020-04-14'
---

# 网络API { #webapi } 

 <!--DHIS2-SECTION-ID:webapi-->

Web API是使外部系统成为可能的组件
访问和操作DHIS2实例中存储的数据。更多的
确切地讲，它为广泛的
第三方等应用程序的公开数据和服务方法
软件客户端，Web门户和内部DHIS2模块。

## 介绍 { #webapi_introduction } 

 <!--DHIS2-SECTION-ID:webapi_introduction-->

Web API遵循REST背后的许多原理
建筑风格。提及一些重要的方面：

1.  基本构建块称为*资源*。
    资源可以是任何公开到Web的东西，从文档到文档
    业务流程-客户可能想与之交互的任何事物。
    可以检索或交换资源的信息方面
    通过资源*表示*。表示是一个视图
    在任何给定时间的资源状态。例如，* reportTable *
    DHIS2中的资源代表以下表格的汇总数据表格报告：
    一组特定的参数。可以在
    多种表示格式，包括HTML，PDF和MS Excel。

2.  所有资源都可以通过* URI *唯一标识（也称为
    到* URL *）。所有资源都有默认表示。你可以
    表示您对特定的代表感兴趣
    提供* Accept * HTTP标头，文件扩展名或* format *
    查询参数。因此，为了检索PDF表示形式的
    报告表中，您可以提供* Accept：application / pdf *标头或
    将* .pdf *或*？format = pdf *附加到您的请求网址。

3.  与API的交互需要正确使用HTTP *方法*或
    *动词*。这意味着对于资源，您必须发出* GET *
    想要检索时请求，* POST *想要时请求
    要创建一个，* PUT *，当您要更新它时，* DELETE *，
    您要删除它。因此，如果要检索默认值
    报告表的表示形式，您可以将GET请求发送给例如
    * / reportTable / iu8j / hYgF6t *，其中最后一部分是报告表
    标识符。

4.  资源表示形式是*可链接的*，这意味着
    制图表达广告与
    通过将链接嵌入自身来实现当前链接（请注意，
    需要在您的字段过滤器中请求* href *才能使此工作正常。
    此功能大大提高了设备的可用性和健壮性
    API，我们将在后面看到。例如，您可以轻松导航到
    与报告表相关的指标
    使用您的嵌入式链接通过* reportTable *资源
    首选表示形式。

尽管所有这些听起来很复杂，但Web API实际上非常
易于使用。我们将在一个
分钟。

## 认证方式 { #webapi_authentication } 

 <!--DHIS2-SECTION-ID:webapi_authentication-->

DHIS2 Web API支持两种身份验证协议：基本
身份验证和OAuth2。您可以验证并获取有关
当前的已通过身份验证的用户，方法是向以下用户发出GET请求
网址：

    / api / 33 / me

以及有关权限的更多信息（以及用户是否具有特定权限
使用端点）：

    / api / 33 / me / authorities
    / api / 33 / me / authorities / ALL

### 基本认证 { #webapi_basic_authentication } 

 <!--DHIS2-SECTION-ID:webapi_basic_authentication-->

DHIS2 Web API支持*基本身份验证*。基本认证
是客户端通过HTTP将登录凭据发送到Web的一种技术
服务器。从技术上讲，用户名后面附加了一个冒号和
密码，以Base64编码，前缀为Basic，并作为值提供
*Authorization*HTTP标头。更正式地说是
授权：`基本base64encode（username：password）`大多数网络感知开发
框架为使用Basic的身份验证提供支持，例如
Apache HttpClient，Spring RestTemplate和C \＃WebClient。一个重要的
请注意，此验证方案不提供安全性，因为
用户名和密码以纯文本格式发送，并且可以轻松解码。
仅当服务器使用SSL / TLS（HTTPS）
加密自身与客户端之间的通信。认为很难
提供与Web API的安全交互的要求。

### 两因素验证 { #webapi_2fa } 

 <!--DHIS2-SECTION-ID:webapi_2fa-->

从2.30版本开始，DHIS2支持两因素身份验证。这意味着你
可以在用户设置中启用2FA，这意味着您将
在登录时提示输入2FA代码。您可以阅读有关2FA的更多信息
[此处]（https://www.google.com/landing/2step/）。

### OAuth2 { #webapi_oauth2 }

 <!--DHIS2-SECTION-ID:webapi_oauth2-->

DHIS2支持OAuth2身份验证协议。 OAuth2是开放的
授权标准，允许第三方客户
代表DHIS2用户进行连接，并获得可重复使用的承载令牌
对Web API的后续请求。 DHIS2不支持细粒度
OAuth2角色，而是根据用户角色提供应用程序访问权限
DHIS2用户的身份。

您要允许其OAuth 2身份验证的每个客户端必须为
在DHIS2中注册。要添加新的OAuth2客户端，请转到`应用>设置> OAuth2客户端`，
单击添加新，然后输入所需的客户端名称和授权类型。

#### 使用Web API添加客户端 { #adding-a-client-using-the-web-api } 

可以通过Web API添加OAuth2客户端。例如，我们可以
发送这样的有效载荷：

```json
{
  "name" : "OAuth2 Demo Client",
  "cid" : "demo",
  "secret" : "1e6db50c-0fee-11e5-98d0-3c15c2c6caf6",
  "grantTypes": [
    "password",
    "refresh_token",
    "authorization_code"
  ],
  "redirectUris": [
    "http://www.example.org"
  ]
}
```

可用以下命令发送有效负载：

```bash
SERVER="https://play.dhis2.org/dev"
curl -X POST -H "Content-Type: application/json" -d @client.json
  -u admin:district "$SERVER/api/oAuth2Clients"
```

我们将使用此客户端作为下一个赠款类型示例的基础。

#### 授权类型密码 { #webapi_oauth2_password } 

 <!--DHIS2-SECTION-ID:webapi_oauth2_password-->

所有授予类型中最简单的是* password *授予类型。这
授予类型在某种意义上类似于基本身份验证
要求客户端收集用户的用户名和密码。作为一个
例如，我们可以使用演示服务器：

```bash
SERVER="https://play.dhis2.org/dev"
SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"

curl -X POST -H "Accept: application/json" -u demo:$SECRET "$SERVER/uaa/oauth/token"
  -d grant_type=password -d username=admin -d password=district
```

这将给您类似的响应：

```json
{
  "expires_in": 43175,
  "scope": "ALL",
  "access_token": "07fc551c-806c-41a4-9a8c-10658bd15435",
  "refresh_token": "a4e4de45-4743-481d-9345-2cfe34732fcc",
  "token_type": "bearer"
}
```

现在，我们将专注于`access_token`，这就是我们
将用作我们的身份验证（承载）令牌。例如，我们将得到
使用我们的令牌的所有数据元素：

```bash
SERVER="https://play.dhis2.org/dev"
curl -H "Authorization: Bearer 07fc551c-806c-41a4-9a8c-10658bd15435" "$SERVER/api/33/dataElements.json"
```

#### 授予类型refresh \ _token { #webapi_refresh_token } 

 <!--DHIS2-SECTION-ID:webapi_refresh_token-->

通常，访问令牌的有效性有限。你可以看看
在上一个示例中，响应的`expires_in`属性
了解令牌何时过期。为了获得一个新的`access_token`
可以再次往返于服务器并使用`refresh_token`
这样您就可以获取更新的令牌，而无需要求
用户凭证再一次。

```bash
SERVER="https://play.dhis2.org/dev"
SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"
REFRESH_TOKEN="a4e4de45-4743-481d-9345-2cfe34732fcc"

curl -X POST -H "Accept: application/json" -u demo:$SECRET "$SERVER/uaa/oauth/token"
  -d "grant_type=refresh_token" -d "refresh_token=$REFRESH_TOKEN"
```

响应与获得令牌开始时的响应完全相同。

#### 授予类型authorization_code { #webapi_authorization_code } 

 <!--DHIS2-SECTION-ID:webapi_authorization_code-->

如果您不想的话，建议使用授权代码授予类型
在外部存储用户凭据。它允许DHIS2收集
用户名/密码直接来自用户而不是客户端
收集它们，然后代表用户进行身份验证。请成为
注意这种方法使用了客户端的` redirectUris`部分
有效载荷。

第1步：使用浏览器访问此网址（如果您有多个网址）
重定向URI，您可能希望添加`＆redirect_uri = http：// www.example.org`：

```bash
SERVER="https://play.dhis2.org/dev"
$SERVER/uaa/oauth/authorize?client_id=demo&response_type=code
```

第2步：用户成功登录并接受您的
客户端访问，它将重定向回您的重定向uri，如下所示：

    http://www.example.org/?code=XYZ

第3步：此步骤类似于我们在密码授予类型中所做的操作，
使用给定的代码，我们现在将要求访问令牌：

```bash
SERVER="https://play.dhis2.org/dev"
SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"

curl -X POST -u demo:$SECRET -H "Accept: application/json" $SERVER/uaa/oauth/token
-d "grant_type=authorization_code" -d "code=XYZ"
```

## 错误和信息消息 { #webapi_error_info_messages } 

 <!--DHIS2-SECTION-ID:webapi_error_info_messages-->

对于所有错误/警告和
参考消息：

```json
{
  "httpStatus": "Forbidden",
  "message": "You don't have the proper permissions to read objects of this type.",
  "httpStatusCode": 403,
  "status": "ERROR"
}
```

在这里，我们可以从消息中看到用户尝试访问一个
我无法访问的资源。它使用http状态代码403，
http状态消息*禁止*和描述性消息。

<table>
<caption>WebMessage 属性</caption>
<colgroup>
<col style="width: 13%" />
<col style="width: 86%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>httpStatus</td>
<td>此响应的 HTTP 状态信息，更多信息请参见 RFC 2616（第 10 节）。</td>
</tr>
<tr class="even">
<td>httpStatusCode</td>
<td>此响应的 HTTP 状态代码，详见 RFC 2616（第 10 节）。</td>
</tr>
<tr class="odd">
<td>状态</td>
<td>DHIS2 状态，可能的值有<em>OK</em> |<em>WARNING</em> |<em>ERROR</em> ，其中`OK`表示一切成功，`ERROR`表示操作未完成，`WARNING`表示操作部分成功，如果消息中包含`response`属性，请查看该属性以获取更多信息。</td>
</tr>
<tr class="even">
<td>消息</td>
<td>用户友好型信息，说明操作是否成功。</td>
</tr>
<tr class="odd">
<td>devMessage</td>
<td>技术性更强、对开发人员更友好的信息（目前未使用）。</td>
</tr>
<tr class="even">
<td>响应</td>
<td>未来扩展 WebMessage 格式的扩展点。开始使用时将记录在案。</td>
</tr>
</tbody>
</table>

## 日期和期间格式 { #webapi_date_perid_format } 

 <!--DHIS2-SECTION-ID:webapi_date_perid_format-->

在整个Web API中，我们指的是日期和期间。日期格式
是：

    yyyy-MM-dd

例如，如果您想表达2014年3月20日的情况，则必须使用
* 2014-03-20 *。

下表中描述了期间格式（也可在
API端点* / api / periodTypes *）

<table style="width:100%;">
<caption>周期格式</caption>
<colgroup>
<col style="width: 24%" />
<col style="width: 21%" />
<col style="width: 18%" />
<col style="width: 35%" />
</colgroup>
<thead>
<tr class="header">
<th>时间间隔</th>
<th>格式</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>日</td>
<td><em>yyyyMMdd</em></td>
<td>20040315</td>
<td>2004 年 3 月 15 日</td>
</tr>
<tr class="even">
<td>周次</td>
<td><em>yyyy</em>W<em>n</em></td>
<td>2004W10</td>
<td>2004 年第 10 周</td>
</tr>
<tr class="odd">
<td>周三</td>
<td><em>yyyy</em>WedW<em>n</em></td>
<td>2015WedW5</td>
<td>第 5 周，周三开始</td>
</tr>
<tr class="even">
<td>周四</td>
<td><em>yyyy</em>ThuW<em>n</em></td>
<td>2015ThuW6</td>
<td>第 6 周，周四开始</td>
</tr>
<tr class="odd">
<td>周 星期六</td>
<td><em>yyyy</em>SatW<em>n</em></td>
<td>2015SatW7</td>
<td>第 7 周星期六开始</td>
</tr>
<tr class="even">
<td>星期日</td>
<td><em>yyyy</em>SunW<em>n</em></td>
<td>2015SunW8</td>
<td>第 8 周，周日开始</td>
</tr>
<tr class="odd">
<td>双周</td>
<td><em>yyyy</em>BiW<em>n</em></td>
<td>2015BiW1</td>
<td>第 1-2 周 20015</td>
</tr>
<tr class="even">
<td>月</td>
<td><em>yyyyMM</em></td>
<td>200403</td>
<td>2004 年 3 月</td>
</tr>
<tr class="odd">
<td>双月</td>
<td><em>yyyyMM</em>B</td>
<td>200401B</td>
<td>2004 年 1-2 月</td>
</tr>
<tr class="even">
<td>季度</td>
<td><em>yyyy</em>Q<em>n</em></td>
<td>2004Q1</td>
<td>2004 年 1 月至 3 月</td>
</tr>
<tr class="odd">
<td>六个月</td>
<td><em>yyyy</em>S<em>n</em></td>
<td>2004S1</td>
<td>2004 年 1-6 月</td>
</tr>
<tr class="even">
<td>半年四月</td>
<td><em>yyyy</em>AprilSn</td>
<td>2004年4月1日</td>
<td>2004年4月至9月</td>
</tr>
<tr class="odd">
<td>年份</td>
<td>年</td>
<td>2004</td>
<td>2004</td>
</tr>
<tr class="even">
<td>财政年度 4 月</td>
<td>年4月</td>
<td>2004年4月</td>
<td>2004年4月-2005年3月</td>
</tr>
<tr class="odd">
<td>财政年度 7 月</td>
<td>年7月</td>
<td>2004年7月</td>
<td>2004 年 7 月至 2005 年 6 月</td>
</tr>
<tr class="even">
<td>财政年度 10 月</td>
<td>年10月</td>
<td>2004年10月</td>
<td>2004年10月-2005年9月</td>
</tr>
</tbody>
</table>


### 相对时期 { #webapi_date_relative_period_values } 

 <!--DHIS2-SECTION-ID:webapi_date_relative_period_values-->


在API的某些部分（例如分析资源），您可以
除了固定期间（如上定义）外，还利用相对期间。
相对期间是相对于当前日期的，并且允许例如
用于创建动态报告。可用的相对期间值为：

    THIS_WEEK，LAST_WEEK，LAST_4_WEEKS，LAST_12_WEEKS，LAST_52_WEEKS，
    THIS_MONTH，LAST_MONTH，THIS_BIMONTH，LAST_BIMONTH，THIS_QUARTER，LAST_QUARTER，
    THIS_SIX_MONTH，LAST_SIX_MONTH，MONTHS_THIS_YEAR，QUARTERS_THIS_YEAR，
    THIS_YEAR，MONTHS_LAST_YEAR，QUARTERS_LAST_YEAR，LAST_YEAR，LAST_5_YEARS，LAST_12_MONTHS，
    LAST_3_MONTHS，LAST_6_BIMONTHS，LAST_4_QUARTERS，LAST_2_SIXMONTHS，THIS_FINANCIAL_YEAR，
    LAST_FINANCIAL_YEAR，LAST_5_FINANCIAL_YEARS

## 标识符方案 { #webapi_identifier_schemes } 

 <!--DHIS2-SECTION-ID:webapi_identifier_schemes-->

本节说明标识符方案的概念。
标识符方案用于将元数据对象映射到其他元数据
在导入过程中，并将元数据呈现为导出的一部分。请注意
并非所有方案都适用于所有API调用，也不是全部
方案可用于输入和输出。这在
部分介绍了各种Web API。

列出了全部可用的标识符方案对象类型
下面，使用要在查询中使用的属性名称：

  - 方案

  - dataElementIdScheme

  - categoryOptionComboIdScheme

  - orgUnitIdScheme

  - programIdScheme

  - programStageIdScheme

  - trackedEntityIdScheme

  - trackedEntityAttributeIdScheme

常规idScheme适用于所有类型的对象。有可能
被特定的对象类型覆盖。

所有参数的默认方案是UID（稳定的DHIS2
身份标识）。支持的标识符方案在
下表。

 <table>
 <caption>方案值</caption>
 <colgroup>
 <col style="width: 14%" />
 <col style="width: 85%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>方案</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ID，UID </td>
 <td>在DHIS2稳定标识符上匹配，这是默认的ID方案。 </td>
 </tr>
 <tr class="even">
 <td>代码</td>
 DHIS2代码上的<td>匹配，主要用于与外部系统交换数据。 </td>
 </tr>
 <tr class="odd">
 <td>名称</td>
 <td>与DHIS2名称匹配，请不要使用与<em> object.name </em>相同的名称，而不是翻译后的名称。同样不是说名称并不总是唯一的，在这种情况下就不能使用它们。 </td>
 </tr>
 <tr class="even">
 <td>属性：ID </td>
 <td>匹配元数据属性，此属性需要分配给您要匹配的类型，并且unique属性设置为<em> true </em>。此方法的主要用途还在于与外部系统交换数据，与<em>代码</em>相比，它具有一些优点，因为可以添加多个属性，因此可以用于与多个系统同步。 </td>
 </tr>
 </tbody>
 </table>

请注意，标识符方案不是独立的功能，但需要
与数据值导入和元数据等资源结合使用
数据导入。

例如，将CODE指定为常规ID方案并覆盖
UID用于组织单位ID方案，您可以使用以下查询
参数：

    ？idScheme = CODE＆orgUnitIdScheme = UID

作为另一个示例，为组织单位标识指定属性
方案，数据元素id方案的代码，并使用默认的UID id
对于所有其他对象的方案，可以使用以下参数：

    ？orgUnitIdScheme =属性：j38fk2dKFsG＆dataElementIdScheme = CODE

## 浏览Web API { #webapi_browsing_the_web_api } 

 <!--DHIS2-SECTION-ID:webapi_browsing_the_web_api-->

浏览Web API的入口点是`/ api`。这个资源
提供指向所有可用资源的链接。四种资源表示
格式始终适用于所有资源：HTML，XML，JSON
和JSONP。某些资源将提供其他格式，例如MS
Excel，PDF，CSV和PNG。要通过网络浏览器浏览API，请导航
到`/ api`入口点，然后点击所需链接
资源，例如`/ api / dataElements`。对于所有资源
返回元素列表，某些查询参数可用于修改
响应：

 <table style="width:100%;">
 <caption>查询参数 </caption>
 <colgroup>
 <col style="width: 11%" />
 <col style="width: 20%" />
 <col style="width: 12%" />
 <col style="width: 54%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
<th> 选项值</th>
<th> 默认选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>分页</td>
 <td>是|假</td>
 <td>是</td>
 <td>指示是否返回页面中的元素列表。 </td>
 </tr>
 <tr class="even">
 <td>页面</td>
 <td>编号</td>
 <td> 1 </td>
 <td>定义要返回的页码。 </td>
 </tr>
 <tr class="odd">
 <td>页面大小</td>
 <td>编号</td>
 <td> 50 </td>
 <td>定义每个页面要返回的元素数。 </td>
 </tr>
 <tr class="even">
 <td>订单</td>
 <td>property:asc/iasc/desc/ides</td>
  <td></td>
 <td>使用指定的顺序对输出进行排序，仅支持持久和简单的属性（不支持集合，idObjects等）。 iasc和idec是不区分大小写的排序。</td> 
 </tr>
 </tbody>
 </table>

这些参数如何用于获取完整列表的示例
XML响应格式的数据元素组为：

    /api/dataElementGroups.xml?links=false&paging=false

您可以在name属性上查询元素，而不必返回
使用* query *查询变量的元素的完整列表。在这个例子中
我们查询名称中带有“贫血”一词的所有数据元素：

    / api / dataElements？query =贫血

您可以像这样获取特定页面和对象的页面大小：

    /api/dataElements.json?page=2&pageSize=20

您可以像这样完全禁用分页：

    /api/indicatorGroups.json?paging=false

要基于特定属性对结果进行排序：

    /api/indicators.json?order=shortName:desc

您可以通过以下对象找到基于所有对象类型的ID的对象：
* identifiableObjects *资源：

    / api / identifiableObjects / <id>

### 翻译 { #webapi_translation } 

 <!--DHIS2-SECTION-ID:webapi_translation-->

DHIS2支持数据库内容（例如数据元素，
指标和程序。 Web API中的所有元数据对象都具有
用于显示/ UI目的的属性，包括
* displayName *，* displayShortName *和* displayDescription *。

 <table>
 <caption>翻译选项</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 16%" />
 <col style="width: 62%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>值</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>翻译</td>
 <td>是|假</td>
 <td>转换元数据输出中的display *属性（数据元素的displayName，displayShortName，displayDescription和displayFormName）。默认值为true。 </td>
 </tr>
 <tr class="even">
 <td>语言环境</td>
 <td>使用</td>的语言环境
 <td>使用指定的语言环境转换元数据输出（需要translate = true）。 </td>
 </tr>
 </tbody>
 </table>

### 翻译API { #webapi_translation_api } 

 <!--DHIS2-SECTION-ID:webapi_translation_api-->

对象的翻译被渲染为对象本身的一部分
在 *translations* 数组中。请注意，*translations* 数组在
JSON/XML 有效负载通常会为您预先过滤，这意味着它们
不能直接用于导入/导出翻译（因为那样会
通常会覆盖当前用户以外的区域设置）。

在用户语言环境中过滤了转换数组的数据元素示例：

```json
{
  "id": "FTRrcoaog83",
  "displayName": "Accute French",
  "translations": [
    {
      "property": "SHORT_NAME",
      "locale": "fr",
      "value": "Accute French"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Accute French"
    }
  ]
}
```

转换关闭的数据元素示例：

```json
{
  "id": "FTRrcoaog83",
  "displayName": "Accute Flaccid Paralysis (Deaths < 5 yrs)",
  "translations": [
    {
      "property": "FORM_NAME",
      "locale": "en_FK",
      "value": "aa"
    },
    {
      "property": "SHORT_NAME",
      "locale": "en_GB",
      "value": "Accute Flaccid Paral"
    },
    {
      "property": "SHORT_NAME",
      "locale": "fr",
      "value": "Accute French"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Accute French"
    },
    {
      "property": "NAME",
      "locale": "en_FK",
      "value": "aa"
    },
    {
      "property": "DESCRIPTION",
      "locale": "en_FK",
      "value": "aa"
    }
  ]
}
```

请注意，即使您得到未过滤的结果，并且正在使用
适当的类型端点，即* / api / dataElements *，我们不允许
更新，因为这样做很容易出错并覆盖
其他可用的语言环境。

要阅读和更新翻译，您可以使用特殊翻译
每个对象资源的端点。可以通过*GET*或访问
在适当的`/ api / <object-type> / <object-id> / translations `端点上* PUT *。

As an example, for a data element with identifier `FTRrcoaog83` you could use
`/api/dataElements/FTRrcoaog83/translations` to get and update
translations. The fields available are `property` with options *NAME*,
*SHORT_NAME*, *DESCRIPTION*, `locale` which supports any valid
locale ID and the translated property `value`.

法语语言环境的NAME属性示例：

```json
{
  "property": "NAME",
  "locale": "fr",
  "value": "Paralysie Flasque Aiguë (Décès <5 ans)"
}
```

然后将此有效负载添加到转换数组中，并发送回去
到适当的端点：

```json
{
  "translations": [
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Paralysie Flasque Aiguë (Décès <5 ans)"
    }
  ]
}
```

对于ID为* FTRrcoaog83 *的数据元素，您可以* PUT *此代码为
`/ api / dataElements / FTRrcoaog83 / translations`。确保发送全部
特定对象的翻译，而不仅仅是单个语言环境的翻译
（否则，您可能会覆盖其他区域的现有语言环境
语言环境）。

### Web API版本 { #webapi_api_versions } 

 <!--DHIS2-SECTION-ID:webapi_api_versions-->

Web API的版本从DHIS 2.25开始。 API版本
遵循DHIS2主版本号。例如，API
DHIS 2.33的版本是`33`。

您可以通过添加特定的API版本号来访问它
在`/ api`组件之后，例如这样的示例：

    / api / 33 / dataElements

如果您省略网址的版本部分，系统将使用当前版本
API版本。例如，对于DHIS 2.25，当省略API部分时，
系统将使用API版本25。开发API客户端时
建议使用显式API版本（而不是忽略API）
版本），因为这将保护客户端免受不可预见的API更改。

将支持最后三个API版本。例如，DHIS
版本2.27将支持API版本27、26和25。

请注意，元数据模型未版本化，您可能会
经历变化在对象之间的关联中。这些变化
将在DHIS2主版本发行说明中进行记录。

## 元数据对象过滤器 { #webapi_metadata_object_filter } 

 <!--DHIS2-SECTION-ID:webapi_metadata_object_filter-->

要过滤元数据，可以执行几种过滤操作
应用于返回的元数据列表。过滤器的格式
本身是直截了当的并遵循模式
* property：operator：value *，其中* property *是
要过滤的元数据，* operator *是比较运算符
您要执行的值，而* value *是要检查的值（并非全部
运营商需要价值）。请参阅*模式*部分以发现
哪些属性可用。递归过滤，即过滤
也支持关联的对象或对象集合。

 <table>
 <caption> 可用运算符 </caption>
 <thead>
 <tr class="header">
 <th> 操作员 </th>
 <th> 类型 </th>
 <th> 需要值 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> eq </td>
 <td> 字符串 |布尔值 |整数 |浮动|枚举 |集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 相等 </td>
 </tr>
 <tr class="even">
 <td> !eq </td>
 <td> 字符串 |布尔值 |整数 |浮动|枚举 |集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 不等式 </td>
 </tr>
 <tr class="odd">
 <td> ne </td>
 <td> 字符串 |布尔值 |整数 |浮动|枚举 |集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 不等式 </td>
 </tr>
 <tr class="even">
 <td> 像 </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 区分大小写的字符串，匹配任何地方 </td>
 </tr>
 <tr class="odd">
 <td> !like </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 区分大小写的字符串，不匹配任何地方 </td>
 </tr>
 <tr class="even">
 <td> \$like </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 区分大小写的字符串，匹配开始 </td>
 </tr>
 <tr class="odd">
 <td> !\$like </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 区分大小写的字符串，不匹配开始 </td>
 </tr>
 <tr class="even">
 <td> 喜欢\$ </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 区分大小写的字符串，匹配结束 </td>
 </tr>
 <tr class="odd">
 <td> !like\$ </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 区分大小写的字符串，不匹配结束 </td>
 </tr>
 <tr class="even">
 <td> 喜欢 </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 不区分大小写的字符串，匹配任何地方 </td>
 </tr>
 <tr class="odd">
 <td> !ilike </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 不区分大小写的字符串，不匹配任何地方 </td>
 </tr>
 <tr class="even">
 <td> \$ilike </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 不区分大小写的字符串，匹配开始 </td>
 </tr>
 <tr class="odd">
 <td> !\$ilike </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 不区分大小写的字符串，不匹配开始 </td>
 </tr>
 <tr class="even">
 <td> ilike\$ </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 不区分大小写的字符串，匹配结束 </td>
 </tr>
 <tr class="odd">
 <td> !ilike\$ </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 不区分大小写的字符串，不匹配结束 </td>
 </tr>
 <tr class="even">
 <td> gt </td>
 <td> 字符串 |布尔值 |整数 |浮动|集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 大于 </td>
 </tr>
 <tr class="odd">
 <td> ge </td>
 <td> 字符串 |布尔值 |整数 |浮动|集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 大于或等于 </td>
 </tr>
 <tr class="even">
 <td> lt </td>
 <td> 字符串 |布尔值 |整数 |浮动|集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 小于</td>
 </tr>
 <tr class="odd">
 <td> le </td>
 <td> 字符串 |布尔值 |整数 |浮动|集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 小于或等于 </td>
 </tr>
 <tr class="even">
 <td> 空 </td>
 <td> 全部 </td>
 <td> 假 </td>
 <td> 属性为空 </td>
 </tr>
 <tr class="odd">
 <td> !null </td>
 <td> 全部 </td>
 <td> 假 </td>
 <td> 属性不为空 </td>
 </tr>
 <tr class="even">
 <td> 空 </td>
 <td> 集合 </td>
 <td> 假 </td>
 <td> 集合为空 </td>
 </tr>
 <tr class="odd">
 <td> 代币 </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 匹配搜索属性中的多个标记 </td>
 </tr>
 <tr class="even">
 <td> !token </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 与搜索属性中的多个标记不匹配 </td>
 </tr>
 <tr class="odd">
 <td> 在 </td>
 <td> 字符串 |布尔值 |整数 |浮动|日期 </td>
 <td> 真 </td>
 <td> 查找匹配 1 个或多个值的对象 </td>
 </tr>
 <tr class="even">
 <td> !in </td>
 <td> 字符串 |布尔值 |整数 |浮动|日期 </td>
 <td> 真 </td>
 <td> 查找与 1 个或多个值不匹配的对象 </td>
 </tr>
 </tbody>
 </table>

如果需要*或*，运算符将作为逻辑*和*查询应用
查询，您可以查看我们的* in *过滤器（也可以查看
以下部分）。过滤机制允许递归。见下文
对于一些例子。

获取ID属性为ID1或ID2的数据元素：

    / api / dataElements？filter = id：eq：ID1＆filter = id：eq：ID2

获取所有具有ID为ID1的dataSet的数据元素：

    /api/dataElements?filter=dataSetElements.dataSet.id:eq:ID1

获取具有聚合运算符“ sum”和值类型的所有数据元素
“ int”：

    /api/dataElements.json?filter=aggregationOperator:eq:sum&filter=type:eq:int

您可以在集合中进行过滤，例如获得哪些数据元素
是“ ANC”数据元素组的成员，可以使用以下命令
使用关联的数据元素组的id属性进行查询：

    /api/dataElements.json?filter=dataElementGroups.id:eq:qfxEYY9xAl6

由于默认情况下所有运算符均为*和*，因此您无法找到数据
元素匹配多个ID，为此，您可以使用* in *
操作员。

    /api/dataElements.json?filter=id:in:[fbfJHSPpUQD,cYeuwXTCPkU]

### 逻辑运算符 { #webapi_metadata_logical_operator } 

 <!--DHIS2-SECTION-ID:webapi_metadata_logical_operator-->

如前一节所述，默认逻辑运算符已应用
过滤器的* AND *表示所有对象过滤器必须
匹配。但是，在某些情况下，您想匹配以下一种
几个过滤器（可能是id和code字段），在这种情况下
可以将根逻辑运算符从* AND *切换为* OR *
使用* rootJunction *参数。

示例：正常过滤，其中ID和代码都必须匹配才能具有
结果返回

    /api/dataElements.json?filter=id:in:[id1,id2]&filter=code:eq:code1

示例：在逻辑运算符已切换为OR的位置进行过滤
现在只有一个过滤器必须匹配才能产生结果
    回来

    /api/dataElements.json?filter=id:in:[id1,id2]&filter=code:eq:code1&rootJunction=OR

### 可识别的令牌过滤器 { #identifiable-token-filter } 

除了上述基于特定属性的过滤之外，
我们还通过* token *基于* AND *过滤了一组
属性：ID，代码和名称（如果可用，还包括shortName）。这些
属性通常称为*可识别*。这个想法是为了
过滤ID，名称，代码或简称中包含某些内容的元数据。

示例：过滤任何包含* 2nd *的所有数据元素
以下：id，名称，代码，shortName

    /api/dataElements.json?filter=identifiable:token:2nd

也可以指定多个过滤值。

示例：获取在任何* identifiable *属性中找到* ANC访问*的所有数据元素。系统返回所有在可识别属性的任何位置都找到两个令牌（ANC和访问）的数据元素。

    /api/dataElements.json?filter=identifiable:token:ANC访问

也可以将可识别的过滤器与基于属性的过滤器结合使用，并期望应用* rootJunction *。

    /api/dataElements.json?filter=identifiable:token:ANC visit＆filter = displayName：ilike：tt1

    /api/dataElements.json?filter=identifiable:token:ANC访问
      ＆filter = displayName：ilike：tt1＆rootJunction = OR

## 元数据字段过滤器 { #webapi_metadata_field_filter } 

 <!--DHIS2-SECTION-ID:webapi_metadata_field_filter-->

在许多情况下，元数据的默认视图也可以
详细。客户端可能只需要每个对象的几个字段即可
从响应中删除不必要的字段。发现哪些领域
可用于每个对象，请参阅*模式*部分。

The format for include/exclude allows for infinite recursion. To filter 
at the "root" level you can just use the name of the field, 
i.e. `?fields=id,name` which would only display the `id` and
`name` fields for every object. For objects that are either collections or
complex objects with properties on their own, you can use the format
`?fields=id,name,dataSets[id,name]` which would return `id`, `name` of
the root, and the `id` and `name` of every data set on that object.
Negation can be done with the exclamation operator, and we have a set of
presets of field selected. Both XML and JSON are supported.

**示例**：在指标资源上获取`id`和`name`：

    / api / indicators？fields = id，名称

**示例**：从dataElements中获取`id`和`name`，以及`id`和`name`。
从dataElements上的dataSets中：

    / api / dataElements？fields = id，name，dataSets [id，name]

要从输出中排除字段，可以使用感叹号`!`。
操作符。这是在查询中的任何地方都允许的，而根本不会
包括该属性，因为它可能已经插入了某些
预设。

一些预设（选定的字段组）可用并且可以应用
使用`：`运算符。

<table>
<caption>物业经营者</caption>
<colgroup>
<col style="width: 25%" />
<col style="width: 74%" />
</colgroup>
<thead>
<tr class="header">
<th>操作员</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>&lt;字段名&gt;</td>
<td>如果存在，包含带有名称的属性。</td>
</tr>
<tr class="even">
<td>&lt;object&gt;[&lt;field-name&gt;, ...]</td>
<td>包含一个集合中的字段（将应用于该集合中的每个对象），或只包含一个对象上的字段。</td>
</tr>
<tr class="odd">
<td>&lt;字段名&gt;,&lt;对象&gt;[!&lt;字段名&gt;</td>
<td>不包含此字段名，也适用于对象/集合内部。在使用预设包含字段时非常有用。</td>
</tr>
<tr class="even">
<td>*,&lt;对象&gt;[*]</td>
<td>包含某个对象上的所有字段，如果应用于某个集合，则会包含该集合中所有对象上的所有字段。</td>
</tr>
<tr class="odd">
<td>：&lt;预设&gt;</td>
<td>用于选择多个字段的别名。目前有三种预设，请参阅下表了解说明。</td>
</tr>
</tbody>
</table>

 <table>
 <caption>字段预设</caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 74%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>预设</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>全部</td>
 <td>对象的所有字段</td>
 </tr>
 <tr class="even">
 <td> * </td>
 <td>所有</td>的别名
 </tr>
 <tr class="odd">
 <td>可识别</td>
 <td>包括ID，名称，代码，创建的和lastUpdated字段</td>
 </tr>
 <tr class="even">
 <td>可命名</td>
 <td>包括id，名称，shortName，代码，描述，创建的和lastUpdated字段</td>
 </tr>
 <tr class="odd">
 <td>持续了</td>
 <td>返回对象上的所有持久属性，如果对象是关系的所有者，则不考虑。 </td>
 </tr>
 <tr class="even">
 <td>所有者</td>
 <td>返回对象的所有持久属性，其中该对象是所有属性的所有者，此有效负载可用于通过API更新。 </td>
 </tr>
 </tbody>
 </table>

**示例**：包括dataSet中的所有字段（organizationunits除外）：

    / api / dataSets？fields =：all，！organizationUnits

**示例**：仅包含ID，名称和数据集中的组织单位集合，但不包含组织单位中的ID：

    / api / dataSets / BfMAe6Itzgt？fields = id，name，organisationUnits [：all，！id]

**示例**：包括所有指标的可命名属性：

    /api/indicators.json?fields=:nameable

### 现场变压器 { #webapi_field_transformers } 

 <!--DHIS2-SECTION-ID:webapi_field_transformers-->

在DHIS2.17中，我们引入了现场变压器，其思想是允许
在服务器端进一步定制属性。

    /api/dataElements/ID?fields=id~rename(i),name~rename(n)

这会将* id *属性重命名为* i *，并将* name *属性重命名为* n *。

可以通过重复变压器语法来使用多个变压器：

    /api/dataElementGroups.json?fields=id,displayName,dataElements~isNotEmpty~rename(haveDataElements）

<table>
<caption>可用的 Transformer</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 21%" />
<col style="width: 44%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>尺寸</td>
<td></td>
<td>给出字符串的大小（长度）和集合</td>
</tr>
<tr class="even">
<td>isEmpty</td>
<td></td>
<td>字符串或集合是否为空</td>
</tr>
<tr class="odd">
<td>isNotEmpty</td>
<td></td>
<td>字符串或集合是否不为空</td>
</tr>
<tr class="even">
<td>重命名</td>
<td>Arg1：名称</td>
<td>重命名属性名称</td>
</tr>
<tr class="odd">
<td>寻呼</td>
<td>Arg1：页面，Arg2：页面大小</td>
<td>分页集合，默认 pageSize 为 50。</td>
</tr>
<tr class="even">
<td>拨动</td>
<td>可选参数1：字段名称</td>
<td>将对象数组转换为该对象的选定字段的数组。默认情况下，使用集合返回的第一个字段（通常是 ID）。</td>
</tr>
</tbody>
</table>

#### 例子 { #webapi_field_transformers_examples } 

 <!--DHIS2-SECTION-ID:webapi_field_transformers_examples-->

变压器用法示例。

```
/api/dataElements?fields=dataSets~size

/api/dataElements?fields=dataSets~isEmpty

/api/dataElements?fields=dataSets~isNotEmpty

/api/dataElements/ID?fields=id~rename(i),name~rename(n)

/api/dataElementGroups?fields=id,displayName,dataElements~paging(1;20)

# Include array with IDs of organisation units: { #include-array-with-ids-of-organisation-units } 
/api/categoryOptions.json?fields=id,organisationUnits~pluck

# Include array with names of organisation units (collection only returns field name): { #include-array-with-names-of-organisation-units-collection-only-returns-field-name } 
/api/categoryOptions.json?fields=id,organisationUnits~pluck[name]
```

## 元数据创建，读取，更新，删除，验证 { #webapi_metadata_crud } 

 <!--DHIS2-SECTION-ID:webapi_metadata_crud-->

DHIS2中的所有元数据实体都有其自己的API端点，该端点支持
* CRUD *操作（创建，读取，更新和删除）。端点URL
遵循以下格式：

    / api / <entityName>

_entityName_使用驼峰表示法。例如，端点
对于_data elements_是：

    / api / dataElements

### 创建/更新参数 { #webapi_metadata_create_update } 

 <!--DHIS2-SECTION-ID:webapi_metadata_create_update-->

以下请求查询参数可用于所有元数据端点。

 <table>
 <caption>可用的查询过滤器</caption>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>类型</th>
 <th>必需</th>
 <th>选项（默认为默认）</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> preheatCache </td>
 <td>布尔</td>
 <td>否</td>
 <td>是|假</td>
 <td>开启/关闭缓存地图预热。默认情况下处于启用状态，关闭此选项将使导入程序的初始加载时间短得多（但会使导入本身变慢）。这主要用于以下情况：您要导入的XML / JSON文件很小，并且不想等待缓存映射表预热。 </td>
 </tr>
 <tr class="even">
 <td>策略</td>
 <td>枚举</td>
 <td>否</td>
 <td> CREATE_AND_UPDATE |创建|更新|删除</td>
 <td>使用的导入策略，请参阅下面的更多信息。 </td>
 </tr>
 <tr class="odd">
 <td> mergeMode </td>
 <td>枚举</td>
 <td>否</td>
 替换，合并<td> </td>
 <td>执行更新时合并对象的策略。 REPLACE只会使用提供的新值覆盖该属性，MERGE仅在属性不为null时设置该属性（仅在提供了该属性的情况下）。 </td>
 </tr>
 </tbody>
 </table>

### 创建和更新对象 { #webapi_creating_updating_objects } 

 <!--DHIS2-SECTION-ID:webapi_creating_updating_objects-->

为了创建新对象，您将需要知道端点，类型
格式，并确保您具有必需的权限。作为一个
例如，我们将创建并更新* constant *。找出
格式，我们可以使用新的* schema *端点获取格式
描述。因此，我们将从获取该信息开始：

    http：// <server> /api/schemas/constant.json

从输出中，您可以看到创建所需的权限
是`F_CONSTANT_ADD`，重要的属性是：* name *和
*价值*。由此，我们可以创建一个JSON有效负载并将其保存为文件
称为constant.json：

```json
{
  "name": "PI",
  "value": "3.14159265359"
}
```

与XML有效内容相同的内容：

```xml
<constant name="PI" xmlns="http://dhis2.org/schema/dxf/2.0">
  <value>3.14159265359</value>
</constant>
```

现在，我们准备通过发送POST请求来创建新的* constant *。
使用curl的JSON负载的* constants *端点：

```bash
curl -d @constant.json "http://server/api/constants" -X POST
  -H "Content-Type: application/json" -u user:password
```

将常量发布到演示的具体示例
    服务器：

```bash
curl -d @constant.json "https://play.dhis2.org/api/constants" -X POST
  -H "Content-Type: application/json" -u admin:district
```

如果一切顺利，您应该看到类似以下的输出：

```json
{
  "status": "SUCCESS",
  "importCount": {
    "imported": 1,
    "updated": 0,
    "ignored": 0,
    "deleted": 0
  },
  "type": "Constant"
}
```

更新的过程将完全相同，您进行更改
到JSON / XML有效内容，找出常量的* ID *，然后
向端点发送一个包含以下内容的PUT请求：

```bash
curl -X PUT -d @pi.json -H "Content-Type: application/json"
  -u user:password "http://server/api/constants/ID"
```

### 删除物件 { #webapi_deleting_objects } 

 <!--DHIS2-SECTION-ID:webapi_deleting_objects-->

删除对象非常简单，您需要了解
* ID *和您要删除的类型的端点，让我们继续
最后一部分的示例，并使用* constant *。假设
id是* abc123 *，那么您要做的就是发送DELETE
向端点请求+ ID：

```bash
curl -X DELETE -u user:password "http://server/api/constants/ID"
```

成功删除应返回HTTP状态204（无内容）。

### 在集合中添加和删除对象 { #webapi_adding_removing_objects_collections } 

 <!--DHIS2-SECTION-ID:webapi_adding_removing_objects_collections-->

集合资源可让您修改以下内容的集合
对象。

#### 添加或删除单个对象 { #webapi_collections_adding_removing_single_objects } 

 <!--DHIS2-SECTION-ID:webapi_collections_adding_removing_single_objects-->

为了在对象集合中添加或删除对象，您需要
可以使用以下
    图案：

    / api / {collection-object} / {collection-object-id} / {collection-name} / {object-id}

您应该使用POST方法添加，并使用DELETE方法删除
一个东西。当对象之间存在多对多关系时，
您必须首先确定哪个对象拥有该关系。如果不是
清除这是哪个对象，尝试两种方式的调用以查看哪个有效。

模式的组成部分是：

  - 集合对象：拥有您的集合的对象的类型
    要修改。

  - 集合对象ID：拥有该对象的对象的标识符
    您要修改的集合。

  - 集合名称：您要修改的集合的名称。

  - 对象ID：您要添加或删除的对象的标识符
    从集合中。

例如，为了删除具有标识符IDB的数据元素
从具有标识符IDA的数据元素组中，您可以执行DELETE
要求：

    删除/ api / dataElementGroups / IDA / dataElements / IDB

要将标识符为IDB的类别选项添加到具有
标识符IDA，您可以执行POST
要求：

    POST / api / categories / IDA / categoryOptions / IDB

#### 添加或删除多个对象 { #webapi_collections_adding_removing_multiple_objects } 

 <!--DHIS2-SECTION-ID:webapi_collections_adding_removing_multiple_objects-->

您可以在一个请求中从集合中添加或删除多个对象
具有这样的有效负载：

```json
{
  "identifiableObjects": [{
      "id": "IDA"
    }, {
      "id": "IDB"
    }, {
      "id": "IDC"
    }
  ]
}
```

使用此有效负载，您可以添加，替换或删除项目：

*添加项目：*

    POST / api / categories / IDA / categoryOptions

*更换物品：*

    PUT / api / categories / IDA / categoryOptions

*删除
项目：*

    删除/ api / categories / IDA / categoryOptions

#### 在单个请求中添加和删除对象 { #webapi_collections_adding_removing_objects_single_request } 

 <!--DHIS2-SECTION-ID:webapi_collections_adding_removing_objects_single_request-->

您可以在单个POST中添加和删除集合中的对象
请求以下网址：

    POST / api / categories / IDA / categoryOptions

有效负载格式为：

```json
{
  "additions": [{
      "id": "IDA"
    }, {
      "id": "IDB"
    }, {
      "id": "IDC"
    }
  ],
  "deletions": [{
      "id": "IDD"
    }, {
      "id": "IDE"
    }, {
      "id": "IDF"
    }
  ]
}
```

### 验证有效载荷 { #webapi_validating_payloads } 

 <!--DHIS2-SECTION-ID:webapi_validating_payloads-->

从2.19版本开始对元数据有效载荷进行系统范围的验证
发布，这意味着在API上创建/更新操作
在允许更改之前，将检查端点的有效负载
进行，以了解对端点进行了哪些验证
看一下/ api / schemas端点，即找出哪个
数据元素具有的约束，您将转到
/ api / schemas / dataElement。

您还可以通过将有效负载发送到适当的位置来手动验证其有效负载
模式端点。如果您想从创建中验证常量
之前的部分，您将像这样发送：

    POST / api / schemas / constant

一个简单的（非验证）示例为：

```bash
curl -X POST -d "{\"name\": \"some name\"}" -H "Content-Type: application/json"
  -u admin:district "https://play.dhis2.org/dev/api/schemas/dataElement"
```

这将产生结果：

```json
[
   {
      "message" : "Required property missing.",
      "property" : "type"
   },
   {
      "property" : "aggregationOperator",
      "message" : "Required property missing."
   },
   {
      "property" : "domainType",
      "message" : "Required property missing."
   },
   {
      "property" : "shortName",
      "message" : "Required property missing."
   }
]
```

### 部分更新 { #webapi_partial_updates } 

 <!--DHIS2-SECTION-ID:webapi_partial_updates-->

对于您不希望或不需要更新服务器上所有属性的情况
对象（这意味着下载潜在的巨大负载，请更改一个
属性，然后再次上传）我们现在支持部分或部分更新
更多属性。

进行部分更新的有效负载与您进行更新时相同
进行全面更新，唯一的不同是您仅包含了
您要更新的属性，即：

```json
{
  "name": "Updated Name",
  "zeroIsSignificant": true
}
```

curl命令示例如下所示：

```bash
curl -X PATCH -d @file.json -H "Content-Type: application/json"
  -u admin:district "https://play.dhis2.org/dev/api/dataElements/fbfJHSPpUQD"
```

## 元数据导出 { #webapi_metadata_export } 

 <!--DHIS2-SECTION-ID:webapi_metadata_export-->

本节介绍了可在以下位置获得的元数据 API
`/api/元数据`。支持 XML 和 JSON 资源表示。

    / api /元数据

最常用的参数在下面的“导出参数”中描述
桌子。您还可以使用以下方法将其应用于所有可用类型
`type:fields=<filter>` 和 `type:filter=<filter>`。你也可以
通过设置 `type=true|false` 启用/禁用某些类型的导出。

 <table>
 <caption> 导出参数 </caption>
 <colgroup>
 <col style="width: 17%" />
 <col style="width: 21%" />
 <col style="width: 61%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 名称 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 字段 </td>
 <td> 与元数据字段过滤器 </td> 相同
 <td> 适用于所有类型的默认字段过滤器，默认为`:owner`。 </td>
 </tr>
 <tr class="even">
 <td> 过滤器 </td>
 <td> 与元数据对象过滤器 </td> 相同
 <td> 适用于所有类型的默认对象过滤器，默认为`无`。 </td>
 </tr>
 <tr class="odd">
 <td> 订单 </td>
 <td> 与元数据顺序 </td> 相同
 <td> 适用于所有类型的默认顺序，如果可用，默认为`name`，否则为`created`。 </td>
 </tr>
 <tr class="even">
 <td> 翻译 </td>
 <td> 假/真 </td>
 <td> 启用翻译。请注意，默认情况下这是关闭的（在其他端点中，默认情况下是打开的）。 </td>
 </tr>
 <tr class="odd">
 <td> 区域设置 </td>
 <td> &lt;locale&gt; </td>
 <td> 从用户语言环境更改为您自己的自定义语言环境。 </td>
 </tr>
 <tr class="even">
 <td> 默认 </td>
 <td> 包括/排除 </td>
 <td> 自动生成的类别对象是否应包含在有效负载中。如果您在 2 个非同步实例之间移动元数据，将其设置为 EXCLUDE 以简化这些生成对象的处理可能是有意义的。 </td>
 </tr>
 <tr class="odd">
 <td> 跳过共享 </td>
 <td> 假/真 </td>
 <td> 启用此选项将从导出的对象中剥离共享属性。这包括用户<em> </em>，<em> publicAccess </em>，<em> userGroupAccesses </em>，<em> userAccesses </em>，和<em> externalAccess </em>。 </td>
 </tr>
 <tr class="odd">
 <td> 下载 </td>
 <td> 假/真 </td>
 <td> 启用此功能将添加 HTTP 标头 Content-Disposition，该标头指定数据应作为附件处理，并由 Web 浏览器作为下载提供。 </td>
 </tr>
 </tbody>
 </table>

### 元数据导出示例 { #webapi_metadata_export_examples } 

 <!--DHIS2-SECTION-ID:webapi_metadata_export_examples-->

导出所有元数据。小心，因为响应可能很大，具体取决于
在您的元数据配置上：

    / api /元数据

导出由lastUpdated降序排列的所有元数据：

    / api / metadata？defaultOrder = lastUpdated：desc

导出仅包括指标和指标组的元数据：

    / api / metadata？indicators = true＆indicatorGroups = true

导出所有数据元素的id和displayName，按displayName排序：

    / api / metadata？dataElements：fields = id，name＆dataElements：order = displayName：desc

导出名称以“ ANC”开头的数据元素和指示符：

    / api / metadata？filter = name：^ like：ANC＆dataElements = true＆indicators = true

### 具有依赖项的元数据导出 { #webapi_dataset_program_export_dependencies } 

 <!--DHIS2-SECTION-ID:webapi_dataset_program_export_dependencies-->

当您想为数据集，程序或类别组合交换元数据时
从一个DHIS2实例到另一个实例，有三个可用的专用端点：

```
/ api / <version> /dataSets/ID/metadata.json

/ api / <version> /programs/ID/metadata.json

/ api / <version> /categoryCombos/ID/metadata.json

/ api / <version> /dashboards/{uid}/metadata.json
```

然后可以使用 `/api/<version>/metadata` 导入这些导出内容。

这些端点还支持以下参数：

 <table>
 <caption> 导出参数 </caption>
 <colgroup>
 <col style="width: 17%" />
 <col style="width: 21%" />
 <col style="width: 61%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 名称 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 跳过共享 </td>
 <td> 假/真 </td>
 <td> 启用此选项将从导出的对象中剥离共享属性。这包括用户<em> </em>，<em> publicAccess </em>，<em> userGroupAccesses </em>，<em> userAccesses </em>，和<em> externalAccess </em>。 </td>
 </tr>
 <tr class="odd">
 <td> 下载 </td>
 <td> 假/真 </td>
 <td> 启用此功能将添加 HTTP 标头 Content-Disposition，该标头指定数据应作为附件处理，并由 Web 浏览器作为下载提供。 </td>
 </tr>
 </tbody>
 </table>

## 元数据导入 { #webapi_metadata_import } 

 <!--DHIS2-SECTION-ID:webapi_metadata_import-->

本节介绍了元数据 API，该 API 位于
`/api/元数据`。支持 XML 和 JSON 资源表示。

导入程序允许您导入随新版本一起导出的元数据
出口商。下面列出了各种参数。

<table>
<caption>Import Parameter</caption>
<colgroup>
<col style="width: 17%" />
<col style="width: 21%" />
<col style="width: 61%" />
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>Options (first is default)</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>importMode</td>
<td>COMMIT, VALIDATE</td>
<td>Sets overall import mode, decides whether or not to only `VALIDATE` or also `COMMIT` the metadata, this has similar functionality as our old dryRun flag.</td>
</tr>
<tr class="even">
<td>identifier</td>
<td>UID, CODE, AUTO</td>
<td>Sets the identifier scheme to use for reference matching. `AUTO` means try `UID` first, then `CODE`.</td>
</tr>
<tr class="odd">
<td>importReportMode</td>
<td>ERRORS, FULL, DEBUG</td>
<td>Sets the `ImportReport` mode, controls how much is reported back after the import is done. `ERRORS` only includes <em>ObjectReports</em> for object which has errors. `FULL` returns an <em>ObjectReport</em> for all objects imported, and `DEBUG` returns the same plus a name for the object (if available).</td>
</tr>
<tr class="even">
<td>preheatMode</td>
<td>REFERENCE, ALL, NONE</td>
<td>Sets the preheater mode, used to signal if preheating should be done for `ALL` (as it was before with <em>preheatCache=true</em>) or do a more intelligent scan of the objects to see what to preheat (now the default), setting this to `NONE` is not recommended.</td>
</tr>
<tr class="odd">
<td>importStrategy</td>
<td>CREATE_AND_UPDATE, CREATE, UPDATE, DELETE</td>
<td>Sets import strategy, `CREATE_AND_UPDATE` will try and match on identifier, if it doesn't exist, it will create the object.</td>
</tr>
<tr class="even">
<td>atomicMode</td>
<td>ALL, NONE</td>
<td>Sets atomic mode, in the old importer we always did a <em>best effort</em> import, which means that even if some references did not exist, we would still import (i.e. missing data elements on a data element group import). Default for new importer is to not allow this, and similar reject any validation errors. Setting the `NONE` mode emulated the old behavior.</td>
</tr>
<tr class="odd">
<td>mergeMode</td>
<td>REPLACE, MERGE</td>
<td>Sets the merge mode, when doing updates we have two ways of merging the old object with the new one, `MERGE` mode will only overwrite the old property if the new one is not-null, for `REPLACE` mode all properties are overwritten regardless of null or not.</td>
</tr>
<tr class="even">
<td>flushMode</td>
<td>AUTO, OBJECT</td>
<td>Sets the flush mode, which controls when to flush the internal cache. It is <em>strongly</em> recommended to keep this to `AUTO` (which is the default). Only use `OBJECT` for debugging purposes, where you are seeing hibernate exceptions and want to pinpoint the exact place where the stack happens (hibernate will only throw when flushing, so it can be hard to know which object had issues).</td>
</tr>
<tr class="odd">
<td>skipSharing</td>
<td>false, true</td>
<td>Skip sharing properties, does not merge sharing when doing updates, and does not add user group access when creating new objects.</td>
</tr>
<tr class="even">
<td>skipValidation</td>
<td>false, true</td>
<td>Skip validation for import. `NOT RECOMMENDED`.</td>
</tr>
<tr class="odd">
<td>async</td>
<td>false, true</td>
<td>Asynchronous import, returns immediately with a <em>Location</em> header pointing to the location of the <em>importReport</em>. The payload also contains a json object of the job created.</td>
</tr>
<tr class="even">
<td>inclusionStrategy</td>
<td>NON_NULL, ALWAYS, NON_EMPTY</td>
<td><em>NON_NULL</em> includes properties which are not null, <em>ALWAYS</em> include all properties, <em>NON_EMPTY</em> includes non empty properties (will not include strings of 0 length, collections of size 0, etc.)</td>
</tr>
<tr class="odd">
<td>userOverrideMode</td>
<td>NONE, CURRENT, SELECTED</td>
<td>Allows you to override the user property of every object you are importing, the options are NONE (do nothing), CURRENT (use import user), SELECTED (select a specific user using overrideUser=X)</td>
</tr>
<tr class="even">
<td>overrideUser</td>
<td>User ID</td>
<td>If userOverrideMode is SELECTED, use this parameter to select the user you want override with.</td>
</tr>
</tbody>
</table>

## 元数据审核 { #webapi_metadata_audit } 

 <!--DHIS2-SECTION-ID:webapi_metadata_audit-->

如果您需要有关谁创建，编辑或删除了DHIS2的信息
您可以启用元数据审核的元数据对象。那里有两个
您可以启用配置选项（dhis.conf）以支持此功能：

```属性
metadata.audit.log =开启
```

这样可以在Servlet容器中启用其他日志输出（例如
tomcat catalina.log），其中包含有关对象的完整信息
创建，编辑对象或删除对象（包括完整的JSON有效负载），
审核事件的日期以及执行操作的用户。

```属性
metadata.audit.persist =开启
```

这将启用持久审计，即保存到数据库的审计。这
存储的信息与审计日志相同；然而这
信息现在被放入 *metadataaudit* 表中
数据库。

不建议您在空数据库上启用这些选项
打算引导您的系统，因为它会减慢导入速度，并且
审核可能没有用。

### 元数据审核查询 { #webapi_metadata_audit_query } 

 <!--DHIS2-SECTION-ID:webapi_metadata_audit_query-->

如果您在DHIS2实例上启用了持久化元数据审核，
您可以在以下端点访问元数据审核：

    / api / 33 / metadataAudits

端点支持以下查询参数：

 <table>
 <caption> 元数据审计 API 查询参数 </caption>
 <colgroup>
 <col style="width: 22%" />
 <col style="width: 27%" />
 <col style="width: 51%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 名称 </th>
 <th> 值 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> uid </td>
 <td> </td>
 <td> 要查询的对象 uid（可以是多个） </td>
 </tr>
 <tr class="even">
 <td> 代码 </td>
 <td> </td>
 <td> 查询对象代码（可以多个） </td>
 </tr>
 <tr class="odd">
 <td> klass </td>
 <td> </td>
 <td> 要查询的对象类（可以不止一个），请注意这里需要完整的java包名（以避免名称冲突）</td>
 </tr>
 <tr class="even">
 <td> createdAt </td>
 <td> </td>
 <td> 按创建日期查询 </td>
 </tr>
 <tr class="odd">
 <td> createdBy </td>
 <td> </td>
 <td> 由谁进行更改的查询（用户名） </td>
 </tr>
 <tr class="even">
 <td> 类型 </td>
 <td> 创建、更新、删除 </td>
 <td> 按审计类型查询 </td>
 </tr>
 </tbody>
 </table>

## 渲染类型（实验性） { #webapi_render_type } 

 <!--DHIS2-SECTION-ID:webapi_render_type-->

一些元数据类型具有名为* renderType *的属性。渲染类型
属性是* device *和* renderingType *之间的映射。应用领域
可以使用此信息作为应如何呈现对象的提示
在特定设备上。例如，移动设备可能要渲染
与台式计算机不同的数据元素。

当前有两种不同的renderingTypes可用：

1.  值类型渲染

2.  程序阶段部分渲染

还提供2种设备类型：

1.  移动的

2.  桌面

下表列出了可用的元数据和渲染类型。
值类型呈现具有基于元数据的附加约束
配置，将在第二个表格中显示。

 <table>
 <caption>元数据和渲染类型概述</caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>元数据类型</th>
 <th>可用的渲染类型</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>程序阶段段</td>
 <td> <ul>
 <li> <p>列表（默认）</p> </li>
 <li> <p>顺序</p> </li>
 矩阵<li> <p>矩阵</p> </li>
 </ul> </td>
 </tr>
 <tr class="even">
 <td>数据元素</td>
 <td> <ul>
 <li> <p>默认</p> </li>
 <li> <p>下拉菜单</p> </li>
 <li> <p> VERTICAL_RADIOBUTTONS </p> </li>
 <li> <p> HORIZONTAL_RADIOBUTTONS </p> </li>
 <li> <p> VERTICAL_CHECKBOXES </p> </li>
 <li> <p> HORIZONTAL_CHECKBOXES </p> </li>
 <li> <p> SHARED_HEADER_RADIOBUTTONS </p> </li>
 <li> <p> ICONS_AS_BUTTONS </p> </li>
 <li> <p>旋转器</p> </li>
 <li> <p> ICON </p> </li>
 <li> <p>切换</p> </li>
 <li> <p>值</p> </li>
 滑块<li> <p>滑块</p> </li>
 <li> <p> LINEAR_SCALE </p> </li>
 </ul> </td>
 </tr>
 </tbody>
 </table>

由于处理了数据元素和跟踪实体的默认呈现
属性取决于对象的值类型，也有
一个DEFAULT类型，以告知客户端应按常规处理。
程序阶段部分默认为LISTING。

<table>
<caption>RenderingTypes allowed based on value types</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>Value type</th>
<th>Is object an optionset?</th>
<th>RenderingTypes allowed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>TRUE_ONLY</td>
<td>No</td>
<td>DEFAULT, VERTICAL_RADIOBUTTONS, HORIZONTAL_RADIOBUTTONS, VERTICAL_CHECKBOXES, HORIZONTAL_CHECKBOXES, TOGGLE</td>
</tr>
<tr class="even">
<td>BOOLEAN</td>
<td>No</td>
<td></td>
</tr>
<tr class="odd">
<td>-</td>
<td>Yes</td>
<td>DEFAULT, DROPDOWN, VERTICAL_RADIOBUTTONS, HORIZONTAL_RADIOBUTTONS, VERTICAL_CHECKBOXES, HORIZONTAL_CHECKBOXES, SHARED_HEADER_RADIOBUTTONS, ICONS_AS_BUTTONS, SPINNER, ICON</td>
</tr>
<tr class="even">
<td>INTEGER</td>
<td>No</td>
<td>DEFAULT, VALUE, SLIDER, LINEAR_SCALE, SPINNER</td>
</tr>
<tr class="odd">
<td>INTEGER_POSITIVE</td>
<td>No</td>
<td></td>
</tr>
<tr class="even">
<td>INTEGER_NEGATIVE</td>
<td>No</td>
<td></td>
</tr>
<tr class="odd">
<td>INTEGER_ZERO_OR_POSITIVE</td>
<td>No</td>
<td></td>
</tr>
<tr class="even">
<td>NUMBER</td>
<td>No</td>
<td></td>
</tr>
<tr class="odd">
<td>UNIT_INTERVAL</td>
<td>No</td>
<td></td>
</tr>
<tr class="even">
<td>PERCENTAGE</td>
<td>No</td>
<td></td>
</tr>
</tbody>
</table>

上表的完整引用也可以使用
以下端点：

    GET / api / staticConfiguration / renderingOptions

值类型呈现还具有一些其他属性，可以
设置，通常在呈现某些特定类型时需要：

 <table>
 <caption> renderType对象属性</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 属性<th> </th>
 <th>说明</th>
 <th>类型</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>类型</td>
 <td>对象的RenderingType，如第一个表所示。值类型和程序阶段部分的此属性相同，但是是程序阶段部分可用的唯一属性。 </td>
 <td>枚举（请参见元数据和呈现类型表中的列表）</td>
 </tr>
 <tr class="even">
 min </td> <td>
 <td>仅用于值类型呈现。表示此字段可以具有的最小值。 </td>
 <td>整数</td>
 </tr>
 <tr class="odd">
 <td> max </td>
 <td>仅用于值类型呈现。表示此字段可以具有的最大值。 </td>
 <td>整数</td>
 </tr>
 <tr class="even">
 <td>步骤</td>
 <td>仅用于值类型呈现。表示值应增加的步长，例如对于SLIDER和LINEAR_SCALE </td>
 <td>整数</td>
 </tr>
 <tr class="odd">
 <td>小数点</td>
 <td>仅用于值类型呈现。表示该值应使用的小数点位数。 </td>
 <td>整数</td>
 </tr>
 </tbody>
 </table>

在创建或更新第一个表中列出的元数据时，可以设置* renderingType *。程序阶段部分的呈现类型的有效负载示例如下：

```json
{
  "renderingType": {
    "type": "MATRIX"
  }
}
```

对于数据元素和跟踪的实体属性：

```json
{
  "renderingType": {
    "type": "SLIDER",
    "min": 0,
    "max": 1000,
    "step": 50,
    "decimalPoints": 0
  }
}
```

## 对象样式（实验性） { #webapi_object_style } 

 <!--DHIS2-SECTION-ID:webapi_object_style-->

大多数元数据的属性名称为“样式”。可以使用此属性
由客户以某种方式代表对象。属性
当前受样式支持的如下：

 <table>
 <caption>样式属性</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 属性<th> </th>
 <th>说明</th>
 <th>类型</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>颜色</td>
 <td>一种颜色，以十六进制表示。 </td>
 <td>字符串（＃000000）</td>
 </tr>
 <tr class="even">
 <td>图标</td>
 <td>一个图标，由图标名称表示。 </td>
 <td>字符串</td>
 </tr>
 </tbody>
 </table>

目前，尚无官方的列表或图标库支持，因此
当前由客户提供。以下列表显示
所有支持样式的对象：

  - 数据元素

  - 数据元素类别选项

  - 资料集

  - 指示符

  - 选项

  - 程序

  - 计划指标

  - 计划科

  - 程序阶段

  - 程序阶段部分

  - 关系（跟踪器）

  - 跟踪实体属性

  - 追踪实体类型

创建或更新任何这些对象时，您可以包括
以下有效载荷来更改样式：

```json
{
  "style": {
    "color": "#ffffff",
    "icon": "my-beautiful-icon"
  }
}
```

## ActiveMQ Artemis / AMQP 1.0集成 { #webapi_amqp_integration } 

 <!--DHIS2-SECTION-ID:webapi_amqp_integration-->

默认情况下，DHIS2将在以下情况下启动ActiveMQ Artemis的嵌入式实例：
实例正在启动。对于大多数用例，您无需配置任何内容
可以利用此功能，但是如果您的基础架构具有现有的AMQP 1.0兼容
您要使用的服务，可以使用以下命令更改* dhis.conf *文件中的默认设置
下表中的键。

 <table>
   <caption>
    AMQP 配置键
   </caption>
   <colgroup>
     <col style="width: 15%" />
     <col style="width: 30%" />
     <col style="width: 55%" />
   </colgroup>
   <thead>
     <tr class="header">
       <th> 密钥 </th>
       <th> 值（默认第一个） </th>
       <th> 说明 </th>
     </tr>
   </thead>
   <tbody>
     <tr class="odd">
       <td> amqp.mode </td>
       <td> <code> 嵌入式 </code> | <code> 原生 </code> </td>
       <td> 默认 <code> EMBEDDED </code> 启动内部 AMQP 服务时
      DHIS2 实例正在启动。如果要连接到外部 AMQP 服务
      您需要将模式设置为 <code> NATIVE </code> 。 </td>
     </tr>
     <tr class="odd">
       <td> amqp.host </td>
       <td> <code> 127.0.0.1 </code> </td>
       <td> 要绑定到的主机。 </td>
     </tr>
     <tr class="even">
       <td> amqp.port </td>
       <td> <code> 15672 </code> </td>
       <td> 如果模式是 <code> EMBEDDED </code> 然后在这个端口上启动嵌入式服务器，
      如果 <code> NATIVE </code> 那么客户端将使用这个端口来连接。 </td>
     </tr>
     <tr class="odd">
       <td> amqp.username </td>
       <td> <code> 客人 </code> </td>
       <td> 如果使用 <code> NATIVE </code> 模式要连接的用户名。 </td>
     </tr>
     <tr class="even">
       <td> amqp.password </td>
       <td> <code> 客人 </code> </td>
       <td> 如果使用 <code> NATIVE </code> 模式连接到的密码。 </td>
     </tr>
     <tr class="odd">
       <td> amqp.embedded.persistence </td>
       <td> <code> 假 </code> | <code> 真 </code> </td>
       <td> 如果 mode 为 <code> EMBEDDED </code> ，则此属性控制
      内部队列。 </td>
     </tr>
   </tbody>
 </table>

## CSV元数据导入 { #webapi_csv_metadata_import } 

 <!--DHIS2-SECTION-ID:webapi_csv_metadata_import-->

DHIS2支持以CSV格式导入元数据，例如数据元素，组织单位和验证规则。根据列顺序/列索引来标识各种元数据对象的属性（有关详细信息，请参见下文）。您可以省略不需要的对象属性/列，但是由于列顺序很重要，因此必须包括一个空列。换句话说，如果您要指定在列顺序中排在后面的属性/列，但不指定在列顺序中排在较早的位置的某些列，则可以为它们添加空白/空白列。

CSV文件的第一行被视为标题，在导入期间将被忽略。 _comma_字符应用作文本定界符。包含逗号的文本必须放在_双引号_中。

要上传CSV格式的元数据，您可以向元数据端点发出POST请求：

    POST / api / metadata？classKey = CLASS-KEY

支持以下对象类型。 `classKey` 查询参数是强制性的，可以在下表中的每个对象类型旁边找到。

 <table>
 <caption> 对象类型和键 </caption>
 <tr>
 <th> 对象类型 </th>
 <th> 类密钥 </th>
 </tr>
 <tr>
 <td> 数据元素 </td>
 <td> DATA_ELEMENT </td>
 </tr>
 <tr>
 <td> 数据元素组 </td>
 <td> DATA_ELEMENT_GROUP
 </tr>
 <tr>
 <td> 类别选项 </td>
 <td> CATEGORY_OPTION </td>
 </tr>
 <tr>
 <td> 类别选项组 </td>
 <td> CATEGORY_OPTION_GROUP </td>
 </tr>
 <tr>
 <td> 组织单位 </td>
 <td> ORGANISATION_UNIT </td>
 </tr>
 <tr>
 <td> 组织单位组 </td>
 <td> ORGANISATION_UNIT_GROUP </td>
 </tr>
 <tr>
 <td> 验证规则 </td>
 <td> VALIDATION_RULE </td>
 </tr>
 <tr>
 <td> 选项集 </td>
 <td> OPTION_SET </td>
 </tr>
 <tr>
 <td> 翻译 </td>
 <td> 翻译 </td>
 </tr>
 </table>

> **提示**
>
>如果使用* curl *，则应使用`--data-binary`选项，因为它保留了换行符和换行符，这对于CSV数据至关重要。

例如，要使用`curl`上传CSV格式的数据元素文件，可以使用以下命令：

```bash
curl --data-binary @data_elements.csv "http://localhost/api/metadata?classKey=DATA_ELEMENT"
  -H "Content-Type:application/csv" -u admin:district
```

以下各节列出了CSV导入当前支持的对象类型的格式。

### 资料元素 { #webapi_csv_data_elements } 

 <!--DHIS2-SECTION-ID:webapi_csv_data_elements-->

 <table>
 <caption> 数据元素 CSV 格式 </caption>
 <colgroup>
 <col />
 <col style="width: 13%" />
 <col style="width: 7%" />
 <col style="width: 27%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 索引 </th>
 <th> 列 </th>
 <th> 需要 </th>
 <th> 值（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 1 </td>
 <td> 名称 </td>
 <td> 是 </td>
 <td> </td>
 <td> 名称。最多 230 个字符。独特。 </td>
 </tr>
 <tr class="even">
 <td> 2 </td>
 <td> UID </td>
 <td> 否 </td>
 <td> UID </td>
 <td> 稳定标识符。正好 11 个字母数字字符，以字符开头。如果未指定，将由系统生成。 </td>
 </tr>
 <tr class="odd">
 <td> 3 </td>
 <td> 代码 </td>
 <td> 否 </td>
 <td> </td>
 <td> 稳定代码。最多 50 个字符。 </td>
 </tr>
 <tr class="even">
 <td> 4 </td>
 <td> 简称 </td>
 <td> 否 </td>
 <td> 50 名称的第一个字符 </td>
 <td> 如果未指定，将回退到名称的前 50 个字符。最多 50 个字符。独特。 </td>
 </tr>
 <tr class="odd">
 <td> 5 </td>
 <td> 说明 </td>
 <td> 否 </td>
 <td> </td>
 <td> 自由文本描述。 </td>
 </tr>
 <tr class="even">
 <td> 6 </td>
 <td> 表格名称 </td>
 <td> 否 </td>
 <td> </td>
 <td> 最多 230 个字符。 </td>
 </tr>
 <tr class="odd">
 <td> 7 </td>
 <td> 域类型 </td>
 <td> 否 </td>
 <td> 聚合 |跟踪器 </td>
 <td> 数据元素的域类型，可以是聚合或跟踪器。最多 16 个字符。 </td>
 </tr>
 <tr class="even">
 <td> 8 </td>
 <td> 值类型 </td>
 <td> 否 </td>
 <td> 整数 |数量 | UNIT_INTERVAL |百分比 | INTEGER_POSITIVE | INTEGER_NEGATIVE | INTEGER_ZERO_OR_POSITIVE | FILE_RESOURCE |坐标 |文本 | LONG_TEXT |信 | PHONE_NUMBER |电子邮件 |布尔值 | TRUE_ONLY |日期 |日期时间 </td>
 <td> 值类型。最多 16 个字符。 </td>
 </tr>
 <tr class="odd">
 <td> 9 </td>
 <td> 聚合类型 </td>
 <td> 否 </td>
 <td> 总和 |平均| AVERAGE_SUM_ORG_UNIT |计数 | STDDEV |方差|最小 |最大 |无 </td>
 <td> 聚合类型，指示如何聚合各个维度的数据。最多 16 个字符。 </td>
 </tr>
 <tr class="even">
 <td> 10 </td>
 <td> 类别组合 </td>
 <td> 否 </td>
 <td> UID </td>
 <td> 类别组合的 UID。如果未指定，将默认为默认类别组合。 </td>
 </tr>
 <tr class="odd">
 <td> 11 </td>
 <td> 网址 </td>
 <td> 否 </td>
 <td> </td>
 <td> 数据元素资源的 URL。最多 255 个字符。 </td>
 </tr>
 <tr class="even">
 <td> 12 </td>
 <td> 零是重要的 </td>
 <td> 否 </td>
 <td> 假 |真 </td>
 <td> 指示是否将为该数据元素存储零值。 </td>
 </tr>
 <tr class="odd">
 <td> 13 </td>
 <td> 选项集 </td>
 <td> 否 </td>
 <td> UID </td>
 <td> 设置为用于数据的选项的 UID。 </td>
 </tr>
 <tr class="even">
 <td> 14 </td>
 <td> 注释选项集 </td>
 <td> 否 </td>
 <td> UID </td>
 <td> 设置为用于注释的选项的 UID。 </td>
 </tr>
 </tbody>
 </table>

数据元素的CSV文件示例如下所示。首先
行将始终被忽略。注意如何跳过列并依靠
系统要使用的默认值。您还可以跳过哪些列
您不使用旁边的那个

```csv
名称，uid，代码，简称，描述
“妇女参加技能发展培训”，“ D0001”，“妇女参加培训”
“妇女参与社区组织”，“ D0002”，“妇女参与组织”
```

### 组织单位 { #webapi_csv_org_units } 

 <!--DHIS2-SECTION-ID:webapi_csv_org_units-->

 <table>
 <caption> 组织单位 CSV 格式 </caption>
 <colgroup>
 <col />
 <col style="width: 14%" />
 <col style="width: 10%" />
 <col style="width: 21%" />
 <col style="width: 53%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 索引 </th>
 <th> 列 </th>
 <th> 需要 </th>
 <th> 值（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 1 </td>
 <td> 名称 </td>
 <td> 是 </td>
 <td> </td>
 <td> 名称。最多 230 个字符。独特。 </td>
 </tr>
 <tr class="even">
 <td> 2 </td>
 <td> UID </td>
 <td> 否 </td>
 <td> UID </td>
 <td> 稳定标识符。最多 11 个字符。如果未指定，将由系统生成。 </td>
 </tr>
 <tr class="odd">
 <td> 3 </td>
 <td> 代码 </td>
 <td> 否 </td>
 <td> </td>
 <td> 稳定代码。最多 50 个字符。 </td>
 </tr>
 <tr class="even">
 <td> 4 </td>
 <td> 父级 </td>
 <td> 否 </td>
 <td> UID </td>
 <td> 上级组织单位的 UID。 </td>
 </tr>
 <tr class="odd">
 <td> 5 </td>
 <td> 简称 </td>
 <td> 否 </td>
 <td> 50 名称的第一个字符 </td>
 <td> 如果未指定，将回退到名称的前 50 个字符。最多 50 个字符。独特。 </td>
 </tr>
 <tr class="even">
 <td> 6 </td>
 <td> 说明 </td>
 <td> 否 </td>
 <td> </td>
 <td> 自由文本描述。 </td>
 </tr>
 <tr class="odd">
 <td> 7 </td>
 <td> 开业日期 </td>
 <td> 否 </td>
 <td> 1970-01-01 </td>
 <td> YYYY-MM-DD 格式的组织单元开始日期。 </td>
 </tr>
 <tr class="even">
 <td> 8 </td>
 <td> 关闭日期 </td>
 <td> 否 </td>
 <td> </td>
 <td> YYYY-MM-DD 格式的组织单元关闭日期，如果当前打开则跳过。 </td>
 </tr>
 <tr class="odd">
 <td> 9 </td>
 <td> 评论 </td>
 <td> 否 </td>
 <td> </td>
 <td> 组织单位的自由文本注释。 </td>
 </tr>
 <tr class="even">
 <td> 10 </td>
 <td> 特征类型 </td>
 <td> 否 </td>
 <td> 无 | MULTI_POLYGON |多边形 |点 |符号 </td>
 <td> 地理空间要素类型。 </td>
 </tr>
 <tr class="odd">
 <td> 11 </td>
 <td> 坐标 </td>
 <td> 否 </td>
 <td> </td>
 <td> 用于以 Geo JSON 格式进行地理空间分析的坐标。 </td>
 </tr>
 <tr class="even">
 <td> 12 </td>
 <td> 网址 </td>
 <td> 否 </td>
 <td> </td>
 <td> 组织单位资源的 URL。最多 255 个字符。 </td>
 </tr>
 <tr class="odd">
 <td> 13 </td>
 <td> 联系人 </td>
 <td> 否 </td>
 <td> </td>
 <td> 组织单位联系人。最多 255 个字符。 </td>
 </tr>
 <tr class="even">
 <td> 14 </td>
 <td> 地址 </td>
 <td> 否 </td>
 <td> </td>
 <td> 组织单位地址。最多 255 个字符。 </td>
 </tr>
 <tr class="odd">
 <td> 15 </td>
 <td> 电子邮件 </td>
 <td> 否 </td>
 <td> </td>
 <td> 组织单位的电子邮件。最多 150 个字符。 </td>
 </tr>
 <tr class="even">
 <td> 16 </td>
 <td> 电话号码 </td>
 <td> 否 </td>
 <td> </td>
 <td> 组织单位的电话号码。最多 150 个字符。 </td>
 </tr>
 </tbody>
 </table>

导入带有上级单位的单位部门的最小示例
看起来像这样：

```csv
名称，uid，代码，父项
“西部省份”，“ WESTP”，“ ImspTQPwCqd”
“东部省”，“ EASTP”，“ ImspTQPwCqd”
```

### 验证规则 { #webapi_csv_validation_rules } 

 <!--DHIS2-SECTION-ID:webapi_csv_validation_rules-->

<table>
<caption>Validation Rule CSV Format</caption>
<colgroup>
<col />
<col style="width: 17%" />
<col style="width: 7%" />
<col style="width: 28%" />
<col style="width: 46%" />
</colgroup>
<thead>
<tr class="header">
<th>Index</th>
<th>Column</th>
<th>Required</th>
<th>Value (default first)</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>Name</td>
<td>Yes</td>
<td></td>
<td>Name. Max 230 characters. Unique.</td>
</tr>
<tr class="even">
<td>2</td>
<td>UID</td>
<td>No</td>
<td>UID</td>
<td>Stable identifier. Max 11 char. Will be generated by system if not specified.</td>
</tr>
<tr class="odd">
<td>3</td>
<td>Code</td>
<td>No</td>
<td></td>
<td>Stable code. Max 50</td>
</tr>
<tr class="even">
<td>4</td>
<td>Description</td>
<td>No</td>
<td></td>
<td>Free text description.</td>
</tr>
<tr class="odd">
<td>5</td>
<td>Instruction</td>
<td>No</td>
<td></td>
<td>Free text instruction.</td>
</tr>
<tr class="even">
<td>6</td>
<td>Importance</td>
<td>No</td>
<td>MEDIUM | HIGH | LOW</td>
<td>Importance of validation rule.</td>
</tr>
<tr class="odd">
<td>7</td>
<td>Rule type (ignored)</td>
<td>No</td>
<td>VALIDATION | SURVEILLANCE</td>
<td>Type of validation rule.</td>
</tr>
<tr class="even">
<td>8</td>
<td>Operator</td>
<td>No</td>
<td>equal_to | not_equal_to | greater_than | greater_than_or_equal_to | less_than | less_than_or_equal_to | compulsory_pair | exclusive_pair</td>
<td>Expression operator.</td>
</tr>
<tr class="odd">
<td>9</td>
<td>Period type</td>
<td>No</td>
<td>Monthly | Daily | Weekly | Quarterly | SixMontly | Yearly</td>
<td>Period type.</td>
</tr>
<tr class="even">
<td>10</td>
<td>Left side expression</td>
<td>Yes</td>
<td></td>
<td>Mathematical formula based on data element and option combo UIDs.</td>
</tr>
<tr class="odd">
<td>11</td>
<td>Left side expression description</td>
<td>Yes</td>
<td></td>
<td>Free text.</td>
</tr>
<tr class="even">
<td>12</td>
<td>Left side missing value strategy</td>
<td>No</td>
<td>SKIP_IF_ANY_VALUE_MISSING | SKIP_IF_ALL_VALUES_MISSING | NEVER_SKIP</td>
<td>Behavior in case of missing values in left side expression.</td>
</tr>
<tr class="odd">
<td>13</td>
<td>Right side expression</td>
<td>Yes</td>
<td></td>
<td>Mathematical formula based on data element and option combo UIDs.</td>
</tr>
<tr class="even">
<td>14</td>
<td>Right side expression description</td>
<td>Yes</td>
<td></td>
<td>Free text.</td>
</tr>
<tr class="odd">
<td>15</td>
<td>Right side missing value strategy</td>
<td>No</td>
<td>SKIP_IF_ANY_VALUE_MISSING | SKIP_IF_ALL_VALUES_MISSING | NEVER_SKIP</td>
<td>Behavior in case of missing values in right side expression.</td>
</tr>
</tbody>
</table>

### 选项集 { #webapi_csv_option_sets } 

 <!--DHIS2-SECTION-ID:webapi_csv_option_sets-->

 <table style="width:100%;">
 <caption> 选项集 CSV 格式 </caption>
 <colgroup>
 <col />
 <col style="width: 14%" />
 <col style="width: 11%" />
 <col style="width: 15%" />
 <col style="width: 59%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 索引 </th>
 <th> 列 </th>
 <th> 需要 </th>
 <th> 值（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 1 </td>
 <td> OptionSetName </td>
 <td> 是 </td>
 <td> </td>
 <td> 名称。最多 230 个字符。独特。每个选项都应该重复。 </td>
 </tr>
 <tr class="even">
 <td> 2 </td>
 <td> OptionSetUID </td>
 <td> 否 </td>
 <td> UID </td>
 <td> 稳定标识符。最多 11 个字符。如果未指定，将由系统生成。每个选项都应该重复。 </td>
 </tr>
 <tr class="odd">
 <td> 3 </td>
 <td> OptionSetCode </td>
 <td> 否 </td>
 <td> </td>
 <td> 稳定代码。最多 50 个字符。每个选项都应该重复。 </td>
 </tr>
 <tr class="even">
 <td> 4 </td>
 <td> 选项名称 </td>
 <td> 是 </td>
 <td> </td>
 <td> 选项名称。最多 230 个字符。 </td>
 </tr>
 <tr class="odd">
 <td> 5 </td>
 <td> OptionUID </td>
 <td> 否 </td>
 <td> UID </td>
 <td> 稳定标识符。最多 11 个字符。如果未指定，将由系统生成。 </td>
 </tr>
 <tr class="even">
 <td> 6 </td>
 <td> OptionCode </td>
 <td> 是 </td>
 <td> </td>
 <td> 稳定代码。最多 50 个字符。 </td>
 </tr>
 </tbody>
 </table>

选项集的格式很特殊。前三个值代表
一个选项集。最后三个值代表一个选项。首先
代表选项集的三个值应分别重复
选项。

```csv
optionsetname，optionsetuid，optionsetcode，optionname，optionuid，optioncode
“颜色”，“颜色”，“蓝色”，“蓝色”
“颜色”，“颜色”，“绿色”，“绿色”
“颜色”，“颜色”，“黄色”，“黄色”
“性别”，“男”，“男”
“性别”，“女性”，“女性”
“性别”，“未知”，“未知”
“结果”，“高”，“高”
“结果”，“中”，“中”
“结果”，“低”，“低”
“ Impact”，“ cJ82jd8sd32”，“ IMPACT”，“ Great”，“ GREAT”
“影响”，“ cJ82jd8sd32”，“影响”，“中等”，“中等”
“影响”，“ cJ82jd8sd32”，“影响”，“不良”，“不良”
```

### 收藏会员 { #collection-membership } 

除了导入对象外，您还可以选择仅导入
对象和组之间的组成员关系。目前，
支持以下组和对象对

  - 组织单位组-组织单位

  - 数据元素组-数据元素

  - 指标组-指标

这些导入的CSV格式相同

 <table>
 <caption>集合成员资格CSV格式</caption>
 <colgroup>
 <col />
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>索引</th>
 <th>栏</th>
 <th>必需</th>
 <th>值（默认为默认值）</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 1 </td>
 <td> UID </td>
 <td>是</td>
 <td> UID </td>
 <td>要将对象添加到</td>的集合的UID
 </tr>
 <tr class="even">
 <td> 2 </td>
 <td> UID </td>
 <td>是</td>
 <td> UID </td>
 <td>要添加到集合</td>中的对象的UID
 </tr>
 </tbody>
 </table>

### 其他物件 { #webapi_csv_other_objects } 

 <!--DHIS2-SECTION-ID:webapi_csv_other_objects-->

<table>
<caption>数据元素组、类别选项、类别选项组、组织单位组 CSV 格式</caption>
<colgroup>
<col />
<col style="width: 17%" />
<col style="width: 12%" />
<col style="width: 14%" />
<col style="width: 55%" />
</colgroup>
<thead>
<tr class="header">
<th>索引</th>
<th>列</th>
<th>必填</th>
<th>值（默认为第一个）</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>名称</td>
<td>是</td>
<td></td>
<td>名称。最多 230 个字符。独一无二。</td>
</tr>
<tr class="even">
<td>2</td>
<td>UID</td>
<td>否</td>
<td>UID</td>
<td>稳定的标识符。最多 11 个字符。如果未指定，将由系统生成。</td>
</tr>
<tr class="odd">
<td>3</td>
<td>代码</td>
<td>否</td>
<td></td>
<td>稳定的代码。最多 50 个字符。</td>
</tr>
<tr class="even">
<td>4</td>
<td>简称</td>
<td>否</td>
<td></td>
<td>简称。最多 50 个字符。</td>
</tr>
</tbody>
</table>

类别选项的示例如下所示：

```csv
名称，uid，代码，简称
“男”，“男”
“女性”，“女性”
```

## 删除的对象 { #webapi_deleted_objects } 

 <!--DHIS2-SECTION-ID:webapi_deleted_objects-->

删除的对象资源提供了元数据对象的日志
已删除。

    / api / deletedObjects

每当删除元数据类型的对象时，都会保留一个日志
uid，代码，类型和删除时间。这个API是
在* / api / deletedObjects *字段过滤和对象过滤中可用
与其他元数据资源类似地工作。

获取类型为数据元素的已删除对象：

    GET /api/deletedObjects.json?klass=DataElement

获取类型指示器的已删除对象，该指示器在2015年被删除，并且
向前：

    GET /api/deletedObjects.json?klass=Indicator&deletedAt=2015-01-01

## 收藏夹 { #webapi_favorites } 

 <!--DHIS2-SECTION-ID:webapi_favorites-->

某些类型的元数据对象可以标记为
当前登录的用户。这目前适用于仪表板。

    / api / dashboards / <uid> /收藏

要使仪表板成为收藏夹，您可以发出* POST *请求（无内容）
输入必填项）到这样的网址：

    / api /仪表板/ iMnYyBfSxmM /收藏

要将仪表板删除为收藏夹，您可以发出* DELETE *请求
使用与上述相同的网址。

收藏夹状态将显示为布尔值 *收藏夹* 字段
元数据响应中的对象（例如仪表板）。

## 订阅内容 { #webapi_subscription } 

 <!--DHIS2-SECTION-ID:webapi_subscription-->

登录的用户可以订阅某些类型的对象。目前
可订阅的对象是Chart，EventChart，EventReport，
地图和ReportTable。

要获取对象的订户（返回用户ID的数组），您需要
可以发出* GET *请求：

    / api / <object-type> / <object-id> /订阅者

请参见以下示例：

    / api / charts / DkPKc1EUmC2 / subscribers

检查当前用户是否已订阅对象（返回一个
布尔值），您可以执行* GET *调用：

    / api / <object-type> / <object-id> /已订阅

请参见以下示例：

    / api / charts / DkPKc1EUmC2 /已订阅

要订阅/取消订阅对象，请执行* POST / DELETE *
请求（无需内容类型）：

    / api / <object-type> / <object-id> / subscriber

## 文件资源 { #webapi_file_resources } 

 <!--DHIS2-SECTION-ID:webapi_file_resources-->

*文件资源*是用于表示和存储二进制内容的对象。
* FileResource *对象本身包含文件元数据（名称，
内容类型，大小等）以及允许检索
数据库外部文件存储中的内容。 * FileResource *对象
像其他数据库一样存储在数据库中，但是内容（文件）是
存储在其他位置，并且可以使用所包含的引用进行检索
*（存储密钥）*。

    / api / fileResources

文件资源的内容不能直接访问，但可以
从其他对象（例如数据值）引用以存储二进制
内容几乎不受限制。

文件资源本身的创建是通过 `/api/fileResources` 端点作为分段上传 POST 请求完成的：

```bash
curl "https://server/api/fileResources" -X POST 
  -F "file=@/Path/to/file;filename=name-of-file.png" 
```

唯一需要的形式参数是* file *，它是要
上载。文件名和内容类型也应包含在
请求，但未提供时将替换为默认值。

成功创建文件资源后，返回的数据将包含
一个`response`字段，其中包含`fileResource`这样的内容：

```json
{
  "httpStatus": "Accepted",
  "httpStatusCode": 202,
  "status": "OK",
  "response": {
    "responseType": "FileResource",
    "fileResource": {
      "name": "name-of-file.png",
      "created": "2015-10-16T16:34:20.654+0000",
      "lastUpdated": "2015-10-16T16:34:20.667+0000",
      "externalAccess": false,
      "publicAccess": "--------",
      "user": { ... },
      "displayName": "name-of-file.png",
      "contentType": "image/png",
      "contentLength": 512571,
      "contentMd5": "4e1fc1c3f999e5aa3228d531e4adde58",
      "storageStatus": "PENDING",
      "id": "xm4JwRwke0i"
    }
  }
}
```

注意响应是*202 Accepted*，表示返回的
资源已提交后台处理（持续到
在这种情况下是外部文件存储）。另外，请注意 `storageStatus` 字段
指示内容是否已存储。在这
点，到外部存储的持久化还没有完成（它是
可能会上传到某个地方的基于云的商店）
`PENDING` 状态。

即使内容尚未完全存储，文件资源
现在可以用作数据值中的引用内容（请参见
[使用文件数据值]（＃datavalue_file））。如果我们需要检查
更新后的* storageStatus *或以其他方式检索
文件，可以查询`fileResources`端点。

```bash
curl "https://server/api/fileResources/xm4JwRwke0i" -H "Accept: application/json"
```

此请求将返回 `FileResource` 对象，如
上面例子的反应。

### 文件资源限制 { #webapi_file_resources_constraints } 

 <!--DHIS2-SECTION-ID:webapi_file_resources_constraints-->

  - *必须*从另一个对象引用（分配）文件资源
    为了长期坚持下去。一个文件资源是
    创建但未被其他对象（例如数据值）引用
    被视为处于*暂存*。此中的任何文件资源
    状态且早于*两个小时*的状态将被标记为删除
    并最终将其从系统中清除。

  - 最初创建文件资源返回的ID不是
    可以从任何其他位置检索，除非文件资源具有
    被引用（其中ID将作为引用存储），
    因此丢失它将需要重复POST请求和一个新的
    要创建的对象。 *孤立*文件资源将被清除
    自动上升。

  - 文件资源对象是*不可变的*，意味着修改不是
    允许，并且需要创建一个全新的资源。

## 元数据版本控制 { #webapi_metadata_versioning } 

 <!--DHIS2-SECTION-ID:webapi_metadata_versioning-->

本节说明了可从开始使用的元数据版本控制API
2.24

  - `/api/metadata/version`：这个端点将返回当前的元数据
    在其上调用系统的版本。

<table>
<caption>Query Parameters</caption>
<colgroup>
<col style="width: 19%" />
<col style="width: 23%" />
<col style="width: 57%" />
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>versionName</td>
<td>false</td>
<td>If this parameter is not specified, it will return the current version of the system or otherwise it will return the details of the versionName passed as parameter. (versionName is of the syntax &quot;Version_&lt;id&gt;&quot;</td>
</tr>
</tbody>
</table>

### 获取元数据版本示例 { #webapi_metadata_versioning_examples } 

 <!--DHIS2-SECTION-ID:webapi_metadata_versioning_examples-->

**示例：**获取此系统的当前元数据版本

要求：

```
/ api /元数据/版本
```

回复：

```json
{
  "name": "Version_4",
  "created": "2016-06-30T06:01:28.684+0000",
  "lastUpdated": "2016-06-30T06:01:28.685+0000",
  "externalAccess": false,
  "displayName": "Version_4",
  "type": "BEST_EFFORT",
  "hashCode": "848bf6edbaf4faeb7d1a1169445357b0",
  "id": "Ayz2AEMB6ry"
}
```

**示例：**获取名称为“ Version_2”的版本的详细信息

要求：

```
/ api / metadata / version？versionName = Version_2
```

回复：

```json
{
  "name": "Version_2",
  "created": "2016-06-30T05:59:33.238+0000",
  "lastUpdated": "2016-06-30T05:59:33.239+0000",
  "externalAccess": false,
  "displayName": "Version_2",
  "type": "BEST_EFFORT",
  "hashCode": "8050fb1a604e29d5566675c86d02d10b",
  "id": "SaNyhusVxBG"
}
```

  - `/api/metadata/version/history`：这个端点将返回所有
    在其上调用系统的元数据版本。

 <table>
 查询参数<caption> </caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 23%" />
 <col style="width: 57%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> <p>名称</p> </th>
 <th> <p>必需</p> </th>
 <th> <p>说明</p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 基线<td> <p>基线</p> </td>
 <td> <p>否</p> </td>
 <td> <p>如果未指定此参数，它将返回所有元数据版本的列表。否则，我们需要传递形式为&quot;Version_&lt;id&gt;&quot;的versionName参数。然后，它将返回系统中存在的版本列表，这些版本是在作为查询参数提供的版本名称之后创建的。 </p> </td>
 </tr>
 </tbody>
 </table>

### 获取所有元数据版本的列表 { #webapi_get_list_of_metadata_versions } 

 <!--DHIS2-SECTION-ID:webapi_get_list_of_metadata_versions-->

**示例：**获取此系统中所有版本的列表

要求：

```
/ api /元数据/版本/历史记录
```

回复：

```json
{
  "metadataversions": [{
    "name": "Version_1",
    "type": "BEST_EFFORT",
    "created": "2016-06-30T05:54:41.139+0000",
    "id": "SjnhUp6r4hG",
    "hashCode": "fd1398ff7ec9fcfd5b59d523c8680798"
  }, {
    "name": "Version_2",
    "type": "BEST_EFFORT",
    "created": "2016-06-30T05:59:33.238+0000",
    "id": "SaNyhusVxBG",
    "hashCode": "8050fb1a604e29d5566675c86d02d10b"
  }, {
    "name": "Version_3",
    "type": "BEST_EFFORT",
    "created": "2016-06-30T06:01:23.680+0000",
    "id": "FVkGzSjAAYg",
    "hashCode": "70b779ea448b0da23d8ae0bd59af6333"
  }]
}
```

**示例：**获取此系统在“ Version_2”之后创建的所有版本的列表

要求：

```
/ api / metadata / version / history？baseline = Version_2
```

回复：

```json
{
  "metadataversions": [{
    "name": "Version_3",
    "type": "BEST_EFFORT",
    "created": "2016-06-30T06:01:23.680+0000",
    "id": "FVkGzSjAAYg",
    "hashCode": "70b779ea448b0da23d8ae0bd59af6333"
  }, {
    "name": "Version_4",
    "type": "BEST_EFFORT",
    "created": "2016-06-30T06:01:28.684+0000",
    "id": "Ayz2AEMB6ry",
    "hashCode": "848bf6edbaf4faeb7d1a1169445357b0"
  }]
 }
```

  - `/ api / metadata / version / create`：此端点将创建元数据
    参数中指定的版本类型的版本。

 <table>
 查询参数<caption> </caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 23%" />
 <col style="width: 57%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> <p>名称</p> </th>
 <th> <p>必需</p> </th>
 <th> <p>说明</p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> <p>类型</p> </td>
 <td> <p>是</p> </td>
 <td> <p>需要创建的元数据版本的类型。 </p>
 <ul>
 <li> <p> BEST_EFFORT </p> </li>
 <li> <p> ATOMIC </p> </li>
 </ul> </td>
 </tr>
 </tbody>
 </table>

用户可以选择需要创建的元数据的类型。
元数据版本类型决定了导入者应如何对待给定的
版本。导入元数据时将使用此类型。有
两种类型的元数据。

  - * BEST_EFFORT *：此类型表明缺少的引用可能是
    忽略，导入程序可以继续导入元数据（例如
    数据元素组导入中缺少数据元素）。

  - * ATOMIC *：此类型可确保对元数据进行严格的类型检查
    引用，如果有任何引用，元数据导入将失败
    不存在。

> **注意**
>
>建议使用ATOMIC类型的版本，以确保所有版本
>系统（中央和本地）具有相同的元数据。任何遗失
>参考在验证阶段本身中被捕获。请看
>进口商详细信息以获取完整说明。

### 创建元数据版本 { #webapi_create_metadata_version } 

 <!--DHIS2-SECTION-ID:webapi_create_metadata_version-->

**示例：** 创建类型为 `BEST_EFFORT` 的元数据版本

要求：

```bash
curl -X POST -u admin:district "https://play.dhis2.org/dev/api/metadata/version/create?type=BEST_EFFORT"
```

回复：

```json
{
  "name": "Version_1",
  "created": "2016-06-30T05:54:41.139+0000",
  "lastUpdated": "2016-06-30T05:54:41.333+0000",
  "externalAccess": false,
  "publicAccess": "--------",
  "user": {
    "name": "John Traore",
    "created": "2013-04-18T17:15:08.407+0000",
    "lastUpdated": "2016-04-06T00:06:06.571+0000",
    "externalAccess": false,
    "displayName": "John Traore",
    "id": "xE7jOejl9FI"
  },
  "displayName": "Version_1",
  "type": "BEST_EFFORT",
  "hashCode": "fd1398ff7ec9fcfd5b59d523c8680798",
  "id": "SjnhUp6r4hG"
}
```

  - `/ api / metadata / version / {versionName} / data`：此端点将下载
    特定于版本名称的实际元数据作为路径传递
    范围。

  - `/ api / metadata / version / {versionName} / data.gz`：此端点将下载
    特定于版本名称的实际元数据作为路径传递
    压缩格式的参数（压缩）。

 <table>
 <caption> 路径参数 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> <p> 名称 </p> </th>
 <th> <p> 需要 </p> </th>
 <th> <p> 说明 </p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> <p> 版本名称 </p> </td>
 <td> <p> true </p> </td>
 <td>形式的<p> Path参数&quot;Version_&lt;id&gt;&quot;从而使API下载特定版本</p> </td>
 </tr>
 </tbody>
 </table>

### 下载版本元数据 { #webapi_download_version_metadata } 

 <!--DHIS2-SECTION-ID:webapi_download_version_metadata-->

**示例：**获取“版本5”的实际元数据

要求：

```bash
curl -u admin:district "https://play.dhis2.org/dev/api/metadata/version/Version_5/data"
```

回复：

```json
{
  "date": "2016-06-30T06:10:23.120+0000",
  "dataElements": [
    {
      "code": "ANC 5th Visit",
      "created": "2016-06-30T06:10:09.870+0000",
      "lastUpdated": "2016-06-30T06:10:09.870+0000",
      "name": "ANC 5th Visit",
      "id": "sCuZKDsix7Y",
      "shortName": "ANC 5th Visit ",
      "aggregationType": "SUM",
      "domainType": "AGGREGATE",
      "zeroIsSignificant": false,
      "valueType": "NUMBER",
      "categoryCombo": {
        "id": "p0KPaWEg3cf"
      },
      "user": {
        "id": "xE7jOejl9FI"
      }
    }
  ]
}
```

## 元数据同步 { #webapi_metadata_synchronization } 

 <!--DHIS2-SECTION-ID:webapi_metadata_synchronization-->

本节说明可用的元数据同步API
起始2.24

  - `/api/metadata/sync`：此端点执行元数据同步
    通过下载和传递到查询参数中的版本名称
    按照中的定义从远程服务器导入指定的版本
    设置应用。

 <table>
 查询参数<caption> </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> <p>名称</p> </th>
 <th> <p>必需</p> </th>
 <th> <p>说明</p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> <p>版本名称</p> </td>
 <td> <p>是</p> </td>
 <td> <p> versionName查询参数，格式为&quot;Version_&lt;id&gt;&quot;。 api从远程服务器下载此版本，并将其导入本地系统。 </p> </td>
 </tr>
 </tbody>
 </table>

  - 使用此API时应格外小心。请注意
    通过以下方式以完全自动化的方式实现同步的另一种方法
    利用“数据管理”中的元数据同步任务
    应用程序。有关更多详细信息，请参见《用户手册》第22章第22.17节。
    关于元数据同步任务。

  - 您也可以使用此同步API来同步
    元数据同步计划程序失败的版本。由于
    它依赖于给定的元数据版本号，应注意
    按照调用顺序进行。例如。如果此api是
    用于从中央实例同步一些更高版本，然后
    同步可能会失败，因为
    本地实例。

  - 假设本地实例在 `Version_12` 并且如果使用这个端点
    从中央同步`Version_15`（类型`BEST_EFFORT`）
    实例，调度程序将开始同步来自
    `版本_16`。所以本地实例不会有元数据
    `Version_12` 和 `Version_15` 之间的版本。你需要手动
    仅使用这些端点同步缺少的版本。

### 同步元数据版本 { #webapi_metadata_synchronization_version } 

 <!--DHIS2-SECTION-ID:webapi_metadata_synchronization_version-->

**示例：**将Version_6从中央系统同步到该系统

要求：

```bash
curl -u admin:district "https://play.dhis2.org/dev/api/metadata/sync?versionName=Version_6"
```

## 数据值 { #webapi_data_values } 

 <!--DHIS2-SECTION-ID:webapi_data_values-->

本节关于发送和读取数据值。

    / api / 33 / dataValueSets

### 发送数据值 { #webapi_sending_data_values } 

 <!--DHIS2-SECTION-ID:webapi_sending_data_values-->

A common use-case for system integration is the need to send a set of
data values from a third-party system into DHIS. In this example, we will
use the DHIS2 demo on `http://play.dhis2.org/demo` as basis. We assume
that we have collected case-based data using a simple software client
running on mobile phones for the *Mortality <5 years* data set in the
community of *Ngelehun CHC* (in *Badjia* chiefdom, *Bo* district) for
the month of January 2014. We have now aggregated our data into a
statistical report and want to send that data to the DHIS2 instance. The
base URL to the demo API is `http://play.dhis2.org/demo/api`. The following
links are relative to the base URL.


最适合我们发送数据的资源
values是`/ api / dataValueSets`资源。数据值集代表
有关系的一组数据值，通常是由于
从相同的数据输入表单中捕获。格式看起来像
这：

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataSet="dataSetID"
  completeDate="date" period="period" orgUnit="orgUnitID" attributeOptionCombo="aocID">
  <dataValue dataElement="dataElementID" 
    categoryOptionCombo="cocID" value="1" comment="comment1"/>
  <dataValue dataElement="dataElementID" 
    categoryOptionCombo="cocID" value="2" comment="comment2"/>
  <dataValue dataElement="dataElementID" 
    categoryOptionCombo="cocID" value="3" comment="comment3"/>
</dataValueSet>
```

JSON支持以下格式：

```json
{
  "dataSet": "dataSetID",
  "completeDate": "date",
  "period": "period",
  "orgUnit": "orgUnitID",
  "attributeOptionCombo": "aocID",
  "dataValues": [
    {
      "dataElement": "dataElementID", 
      "categoryOptionCombo": "cocID", 
      "value": "1", 
      "comment": "comment1"
    },
    {
      "dataElement": "dataElementID", 
      "categoryOptionCombo": "cocID", 
      "value": "2", 
      "comment": "comment2"
    },
    {
      "dataElement": "dataElementID", 
      "categoryOptionCombo": "cocID", 
      "value": "3", 
      "comment": "comment3"
    }
  ]
}
```

CSV支持以下格式：

```csv
“ dataelement”，“ period”，“ orgunit”，“ catoptcombo”，“ attroptcombo”，“ value”，“ strby”，“ lstupd”，“ cmt”
“ dataElementID”，“ period”，“ orgUnitID”，“ cocID”，“ aocID”，“ 1”，“用户名”，“ 2015-04-01”，“ comment1”
“ dataElementID”，“ period”，“ orgUnitID”，“ cocID”，“ aocID”，“ 2”，“用户名”，“ 2015-04-01”，“ comment2”
“ dataElementID”，“ period”，“ orgUnitID”，“ cocID”，“ aocID”，“ 3”，“用户名”，“ 2015-04-01”，“ comment3”
```

> **注意**
>
>有关时间格式，请参阅上面的日期和期间部分。

从示例中可以看出，我们需要确定周期，即
数据集，组织单位（设施）和要为其的数据元素
报告。

To obtain the identifier for the data set we make a request to the
`/api/dataSets` resource. From there we find and follow the link to 
the *Mortality < 5 years* data set which leads us to `/api/dataSets/pBOMPrpg1QX`. 
The resource representation for the *Mortality < 5 years* data set conveniently
advertises links to the data elements which are members of it. From here
we can follow these links and obtain the identifiers of the data
elements. For brevity we will only report on three data elements:
*Measles* with id `f7n9E0hX8qk`, *Dysentery* with id `Ix2HsbDMLea` and
*Cholera* with id `eY5ehpbEsB7`.

剩下的就是掌握组织的标识符
单元。 *dataSet* 表示方便地提供了到组织的链接
报告它的单位，所以我们搜索 *Ngelehun CHC* 并按照
链接到 `/api/organisationUnits/DiszpKrYNg8` 中的 HTML 表示，其中
告诉我们这个组织单位的标识符是`DiszpKrYNg8`。

从基于病例的数据中，我们假设有12例麻疹，14例
痢疾和霍乱16例。现在我们已经足够了
能够将XML数据值集合在一起的信息
信息：

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataSet="pBOMPrpg1QX"
  completeDate="2014-02-03" period="201401" orgUnit="DiszpKrYNg8">
  <dataValue dataElement="f7n9E0hX8qk" value="12"/>
  <dataValue dataElement="Ix2HsbDMLea" value="14"/>
  <dataValue dataElement="eY5ehpbEsB7" value="16"/>
</dataValueSet>
```

JSON格式：

```json
{
  "dataSet": "pBOMPrpg1QX",
  "completeDate": "2014-02-03",
  "period": "201401",
  "orgUnit": "DiszpKrYNg8",
  "dataValues": [
    {
      "dataElement": "f7n9E0hX8qk", 
      "value": "1"
    },
    {
      "dataElement": "Ix2HsbDMLea", 
      "value": "2"
    },
    {
      "dataElement": "eY5ehpbEsB7", 
      "value": "3"
    }
  ]
}
```

To perform functional testing we will use the _curl_ tool which provides
an easy way of transferring data using HTTP. First, we save the data
value set XML content in a file called `datavalueset.xml`. From the
directory where this file resides we invoke the following from the
command line:

```bash
curl -d @datavalueset.xml "https://play.dhis2.org/demo/api/33/dataValueSets"
  -H "Content-Type:application/xml" -u admin:district
```

要发送JSON内容，您必须设置content-type标头
因此：

```bash
curl -d @datavalueset.json "https://play.dhis2.org/demo/api/33/dataValueSets"
  -H "Content-Type:application/json" -u admin:district
```

该命令将向演示 Web API 发送请求，设置
`application/xml` 作为内容类型并使用
`admin`/`district` 作为用户名/密码。如果一切顺利，这将返回一个
`200 OK` HTTP 状态代码。您可以验证数据是否已
通过在 DHIS2 中打开数据输入模块并选择组织来接收
本例中使用的单位、数据集和期间。

The API follows normal semantics for error handling and HTTP status
codes. If you supply an invalid username or password, `401 Unauthorized`
is returned. If you supply a content-type other than `application/xml`,
`415 Unsupported Media Type` is returned. If the XML content is invalid
according to the DXF namespace, `400 Bad Request` is returned. If you
provide an invalid identifier in the XML content, `409 Conflict` is
returned together with a descriptive message.

### 发送大量数据值 { #webapi_sending_bulks_data_values } 

 <!--DHIS2-SECTION-ID:webapi_sending_bulks_data_values-->

前面的示例向我们展示了如何发送一组相关的数据值
共用同一时期和组织单位。这个例子将向我们展示
如何发送不一定是的大量数据值
逻辑上相关。

我们将再次与`/api/dataValueSets` 资源交互。这次我们
不会指定 `dataSet` 和 `completeDate` 属性。此外，我们将
在单个数据值上指定 `period` 和 `orgUnit` 属性
元素而不是外部数据值集元素。这会
使我们能够发送不同时期和组织单位的数据值：

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0">
  <dataValue dataElement="f7n9E0hX8qk" 
    period="201401" orgUnit="DiszpKrYNg8" value="12"/>
  <dataValue dataElement="f7n9E0hX8qk" 
    period="201401" orgUnit="FNnj3jKGS7i" value="14"/>
  <dataValue dataElement="f7n9E0hX8qk" 
    period="201402" orgUnit="DiszpKrYNg8" value="16"/>
  <dataValue dataElement="f7n9E0hX8qk" 
    period="201402" orgUnit="Jkhdsf8sdf4" value="18"/>
</dataValueSet>
```

JSON格式：

```json
{
  "dataValues": [
    {
      "dataElement": "f7n9E0hX8qk", 
      "period": "201401", 
      "orgUnit": "DiszpKrYNg8", 
      "value": "12"
    }, 
    {
      "dataElement": "f7n9E0hX8qk", 
      "period": "201401", 
      "orgUnit": "FNnj3jKGS7i", 
      "value": "14"
    }, 
    {
      "dataElement": "f7n9E0hX8qk", 
      "period": "201402", 
      "orgUnit": "DiszpKrYNg8", 
      "value": "16"
    }, 
    {
      "dataElement": "f7n9E0hX8qk", 
      "period": "201402", 
      "orgUnit": "Jkhdsf8sdf4", 
      "value": "18"
    }
  ]
}
```

CSV格式：

```csv
“ dataelement”，“ period”，“ orgunit”，“ categoryoptioncombo”，“ attributeoptioncombo”，“ value”
“ f7n9E0hX8qk”，“ 201401”，“ DiszpKrYNg8”，“ bRowv6yZOF2”，“ bRowv6yZOF2”，“ 1”
“ Ix2HsbDMLea”，“ 201401”，“ DiszpKrYNg8”，“ bRowv6yZOF2”，“ bRowv6yZOF2”，“ 2”
“ eY5ehpbEsB7”，“ 201401”，“ DiszpKrYNg8”，“ bRowv6yZOF2”，“ bRowv6yZOF2”，“ 3”
```

我们通过使用curl以XML格式发送数据值进行测试：

```bash
curl -d @datavalueset.xml "https://play.dhis2.org/demo/api/33/dataValueSets"
  -H "Content-Type:application/xml" -u admin:district
```

请注意，使用CSV格式时，必须使用二进制数据选项
将换行符保留在CSV文件中：

```bash
curl --data-binary @datavalueset.csv "https://play.dhis2.org/demo/24/api/dataValueSets"
  -H "Content-Type:application/csv" -u admin:district
```

数据值集资源提供了一个有用的XML响应
当您想验证请求的影响时。我们第一次
在服务器上方发送数据值设置请求时，服务器将响应
以下是导入摘要：

```xml
<importSummary>
  <dataValueCount imported="2" updated="1" ignored="1"/>
  <dataSetComplete>false</dataSetComplete>
</importSummary>
```

此消息告诉我们导入了3个数据值，其中1个数据值是
更新，而忽略零数据值。单个更新来自
在上一个示例中，我们发送该数据值的结果。资料
如果该值引用了不存在的数据元素，则将被忽略，
期间，组织单位或数据集。在我们的例子中，这个被忽略的值是
由最后一个数据值对组织单位的引用无效引起的。
数据集完成元素将显示数据的日期
值集已完成，如果没有数据元素属性，则返回false
提供。

### 导入参数 { #webapi_data_values_import_parameters } 

 <!--DHIS2-SECTION-ID:webapi_data_values_import_parameters-->

可以使用一组导入参数来自定义导入过程：

 <table>
 <caption> 导入参数 </caption>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 值（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> dataElementIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射数据值的数据元素对象的属性。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射数据值的组织单位对象的属性。 </td>
 </tr>
 <tr class="odd">
 <td> categoryOptionComboIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射数据值的类别选项组合和属性选项组合对象的属性。 </td>
 </tr>
 <tr class="even">
 <td> idScheme </td>
 <td> id |姓名 |代码|属性：ID </td>
 <td> 所有对象的属性，包括数据元素、组织单位和类别选项组合，用于映射数据值。 </td>
 </tr>
 <tr class="odd">
 <td> preheatCache </td>
 <td> 假 |真 </td>
 <td> 指示是否在开始导入数据值之前预加载元数据缓存，以加快具有高元数据基数的大型导入负载。 </td>
 </tr>
 <tr class="even">
 <td> dryRun </td>
 <td> 假 |真 </td>
 <td> 是在服务器上保存更改还是只返回导入摘要。 </td>
 </tr>
 <tr class="odd">
 <td> 导入策略 </td>
 <td> 创建 |更新 | CREATE_AND_UPDATE |删除 </td>
 <td> 在服务器上保存所有对象、新对象或更新导入状态。 </td>
 </tr>
 <tr class="even">
 <td>skipExistingCheck </td>
 <td> 假 |真 </td>
 <td> 跳过对现有数据值的检查。提高性能。仅用于空数据库或要导入的数据值不存在时。 </td>
 </tr>
 <tr class="even">
 <td> 跳过审核 </td>
 <td> 假 |真 </td>
 <td> 跳过审计，意味着不会生成审计值。以审计变更的能力为代价提高性能。需要权限“F_SKIP_DATA_IMPORT_AUDIT”。 </td>
 </tr>
 <tr class="odd">
 <td> 异步 </td>
 <td> 假 |真 </td>
 <td> 指示导入是异步还是同步。前者适用于非常大的导入，因为它确保请求不会超时，尽管它具有显着的性能开销。后者速度更快，但需要连接持续到进程完成。 </td>
 </tr>
 <tr class="even">
 <td> 强制 </td>
 <td> 假 |真 </td>
 <td> 指示是否应该强制导入。数据导入可能会因数据集锁定的各种原因而被拒绝，例如由于批准、数据输入期限、到期天数等。为了覆盖此类锁定并强制输入数据，可以使用 force=true 的数据导入。但是，要使此参数起作用，您必须是*超级用户*。 </td>
 </tr>
 </tbody>
 </table>

所有参数都是可选的，可以作为查询参数提供
请求网址如下：

    / api / 33 / dataValueSets？dataElementIdScheme = code＆orgUnitIdScheme = name
      ＆dryRun = true＆importStrategy =创建

也可以将它们作为XML属性提供给数据值集
元素如下。 XML属性将覆盖查询字符串
参数。

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataElementIdScheme="code"
  orgUnitIdScheme="name" dryRun="true" importStrategy="CREATE">
</dataValueSet>
```

请注意，`preheatCache`参数可能会对
表现。对于小型导入文件，将其设置为false将很快。
对于包含大量不同数据的大型导入文件
元素和组织单位，将其设置为true将是
幅度更快。

#### 数据值要求 { #webapi_data_values_import_requirement } 

 <!--DHIS2-SECTION-ID:webapi_data_values_import_requirement-->

数据值导入支持一组值类型。对于每种值类型，
有一个特殊的要求。下表列出了极端情况
对于值类型。

 <table>
 值类型要求<caption> </caption>
 <thead>
 <tr class="header">
 <th>值类型</th>
 <th>要求</th>
 <th>评论</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> BOOLEAN </td>
 <td>是|是的TRUE |错误错误|假| 1 | 0 | t | f | </td>
 <td>当值是布尔值，true或false时使用。导入服务不关心输入的内容是大写还是小写字母，或者全部是大写字母。 </td>
 </tr>
 </tbody>
 </table>

#### 标识符方案 { #webapi_data_values_identifier_schemes } 

 <!--DHIS2-SECTION-ID:webapi_data_values_identifier_schemes-->

Regarding the id schemes, by default the identifiers used in the XML
messages use the DHIS2 stable object identifiers referred to as `UID`.
In certain interoperability situations, we might experience that the external
system decides the identifiers of the objects. In that case, we can use
the `code` property of the organisation units and other objects to set
fixed identifiers. When importing data values we hence need to reference
the code property instead of the identifier property of these metadata
objects. Identifier schemes can be specified in the XML message as well
as in the request as query parameters. To specify it in the XML payload
you can do this:

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0"
  dataElementIdScheme="CODE" orgUnitIdScheme="UID" idScheme="CODE">
</dataValueSet>
```

上面的参数表说明了如何指定id方案
作为查询参数。以下规则适用于
优先顺序：

  - XML或JSON有效负载中定义的ID方案优先于
    定义为URL查询参数的id方案。

  - 特定的ID方案，包括dataElementIdScheme和
    orgUnitIdScheme优先于常规idScheme。

  - 默认ID方案是UID，如果没有显式ID，则将使用该方案
    方案已定义。

以下标识符方案可用。

  - uid（默认）

  - 代码

  - 姓名

  - 属性（后跟属性的UID）

属性选项是特殊的，指的是元数据属性
已被标记为*独特*。使用此选项时，`attribute` 必须
紧随其后的是属性的标识符，例如
“属性：DnrLSdo4hMl”。

#### 异步数据值导入 { #webapi_data_values_async_import } 

 <!--DHIS2-SECTION-ID:webapi_data_values_async_import-->

数据值可以通过以下方式以异步方式发送和导入：
提供设置为* true *的`async`查询参数：

    / api / 33 / dataValueSets？async = true

这将启动一个异步导入作业，您可以对其进行监视
任务摘要API的状态。 API响应指示
作业的唯一标识符，作业类型和可用于的URL
监视导入作业状态。响应将类似于以下内容：

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Initiated dataValueImport",
  "response": {
    "name": "dataValueImport",
    "id": "YR1UxOUXmzT",
    "created": "2018-08-20T14:17:28.429",
    "jobType": "DATAVALUE_IMPORT",
    "relativeNotifierEndpoint": "/api/system/tasks/DATAVALUE_IMPORT/YR1UxOUXmzT"
  }
}
```

请阅读有关*异步任务状态*的部分了解更多信息
信息。

### CSV数据值格式 { #webapi_data_values_csv } 

 <!--DHIS2-SECTION-ID:webapi_data_values_csv-->

以下部分描述了DHIS2中使用的CSV格式。首先
row被假定为标题行，并且在导入期间将被忽略。

 <table>
 <caption> DHIS2 的 CSV 格式 </caption>
 <tbody>
 <tr class="odd">
 <td> 列 </td>
 <td> 需要 </td>
 <td> 说明 </td>
 </tr>
 <tr class="even">
 <td> 数据元素 </td>
 <td> 是 </td>
 <td> 默认指的是ID，也可以是基于选择的id方案的名称和代码 </td>
 </tr>
 <tr class="odd">
 <td> 期间 </td>
 <td> 是 </td>
 <td> ISO 格式 </td>
 </tr>
 <tr class="even">
 <td> 组织单位 </td>
 <td> 是 </td>
 <td> 默认指的是ID，也可以是基于选择的id方案的名称和代码 </td>
 </tr>
 <tr class="odd">
 <td> 类别选项组合 </td>
 <td> 否 </td>
 <td> 指的是 ID </td>
 </tr>
 <tr class="even">
 <td> 属性选项组合 </td>
 <td> 否 </td>
 <td> 指的是 ID（从 2.16 版开始） </td>
 </tr>
 <tr class="odd">
 <td> 值 </td>
 <td> 否 </td>
 <td> 数据值 </td>
 </tr>
 <tr class="even">
 <td> 由 </td> 存储
 <td> 否 </td>
 <td> 指输入值 </td> 的用户的用户名
 </tr>
 <tr class="odd">
 <td> 最后更新 </td>
 <td> 否 </td>
 <td> ISO 格式的日期 </td>
 </tr>
 <tr class="even">
 <td> 评论 </td>
 <td> 否 </td>
 <td> 自由文本评论 </td>
 </tr>
 <tr class="odd">
 <td> 跟进 </td>
 <td> 否 </td>
 <td> 真假 </td>
 </tr>
 </tbody>
 </table>

可以导入DHIS2的CSV文件示例如下所示。

```csv
“ dataelement”，“ period”，“ orgunit”，“ catoptcombo”，“ attroptcombo”，“ value”，“ storedby”，“ timestamp”
“ DUSpd8Jq3M7”，“ 201202”，“ gP6hn503KUX”，“ Prlt0C1RF0s”，“ 7”，“ bombali”，“ 2010-04-17”
“ DUSpd8Jq3M7”，“ 201202”，“ gP6hn503KUX”，“ V6L425pT3A0”，“ 10”，“ bombali”，“ 2010-04-17”
“ DUSpd8Jq3M7”，“ 201202”，“ OjTS752GbZE”，“ V6L425pT3A0”，“ 9”，“ bombali”，“ 2010-04-06”
```

### 生成数据值集模板 { #webapi_data_values_template } 

 <!--DHIS2-SECTION-ID:webapi_data_values_template-->

要为特定数据集生成数据值集模板，您可以使用
`/api/dataSets/ <id> /dataValueSet` 资源。 XML 和 JSON 响应
支持格式。例子：

    /api/dataSets/BfMAe6Itzgt/dataValueSet.json

描述了可用于进一步调整输出的参数
以下：

 <table style="width:100%;">
 <caption>数据值查询参数</caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 19%" />
 <col style="width: 64%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>周期</td>
 <td>否</td>
 <td>使用期限，将被包括在内，无需任何检查。 </td>
 </tr>
 <tr class="even">
 <td> orgUnit </td>
 <td>否</td>
 <td>要使用的组织单位，支持多个orgUnit，id和代码均可使用。 </td>
 </tr>
 <tr class="odd">
 <td>评论</td>
 <td>否</td>
 <td>应包含注释，默认为：是。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitIdScheme </td>
 <td>否</td>
 <td>使用的组织单位方案，支持id |代码。 </td>
 </tr>
 <tr class="odd">
 <td> dataElementIdScheme </td>
 <td>否</td>
 要使用的数据元素方案，支持id | <td>代码。 </td>
 </tr>
 </tbody>
 </table>

### 读取数据值 { #webapi_reading_data_values } 

 <!--DHIS2-SECTION-ID:webapi_reading_data_values-->

本节说明如何通过以下方式从Web API检索数据值：
与* dataValueSets *资源进行交互。数据值可以是
以* XML *，* JSON *和* CSV *格式检索。由于我们要读取数据
我们将使用* GET * HTTP动词。我们还将指定我们
通过包含`Accept`对XML资源表示感兴趣
带有我们请求的HTTP标头。以下查询参数是
必需的：

 <table>
 <caption>数据值设置查询参数</caption>
 <colgroup>
 <col style="width: 27%" />
 <col style="width: 72%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>数据集</td>
 <td>数据集标识符。可以重复多次。 </td>
 </tr>
 <tr class="even">
 <td> dataElementGroup </td>
 <td>数据元素组标识符。可以重复多次。 </td>
 </tr>
 <tr class="odd">
 <td>周期</td>
 <td> ISO格式的期间标识符。可以重复多次。 </td>
 </tr>
 <tr class="even">
 <td>开始日期</td>
 <td>导出值的时间范围的开始日期。 </td>
 </tr>
 <tr class="odd">
 <td>结束日期</td>
 <td>导出值的时间跨度的结束日期。 </td>
 </tr>
 <tr class="even">
 <td> orgUnit </td>
 <td>组织单位标识符。可以重复多次。 </td>
 </tr>
 <tr class="odd">
 <td>儿童</td>
 <td>是否将子级包括在组织单位的层次结构中。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitGroup </td>
 <td>组织单位组标识符。可以重复多次。 </td>
 </tr>
 <tr class="odd">
 <td> attributeOptionCombo </td>
 <td>属性选项组合标识符。可以重复多次。 </td>
 </tr>
 <tr class="even">
 <td> include已删除</td>
 <td>是否包括已删除的数据值。 </td>
 </tr>
 <tr class="odd">
 <td>最后更新</td>
 <td>仅包含自给定时间戳记以来已更新的数据值。 </td>
 </tr>
 <tr class="even">
 <td> lastUpdatedDuration </td>
 <td>仅包含在给定持续时间内更新的数据值。格式是&lt;value&gt;&lt;time-unit&gt;，其中所支持的时间单位是&quot;d&quot;（天），&quot;h&quot;（小时），&quot;m&quot;（分钟）和&quot;s&quot;（秒）。 </td>
 </tr>
 <tr class="odd">
 <td>限制</td>
 <td>响应中的最大结果数。 </td>
 </tr>
 <tr class="even">
 <td> idScheme </td>
 <td>用于响应的数据值的元数据对象的属性。 </td>
 </tr>
 <tr class="odd">
 <td> dataElementIdScheme </td>
 <td>用于响应的数据值的数据元素对象的属性。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitIdScheme </td>
 <td>用于响应中的数据值的组织单位对象的属性。 </td>
 </tr>
 <tr class="odd">
 <td>类别选项组合ID方案</td>
 <td>类别选项组合和属性选项组合对象的属性，用于响应数据值。 </td>
 </tr>
 <tr class="even">
 <td> dataSetIdScheme </td>
 <td>在响应中使用的数据集对象的属性。 </td>
 </tr>
 </tbody>
 </table>

支持以下响应格式：

  - xml（应用程序/ xml）

  - json（应用程序/ json）

  - csv（应用程序/ csv）

  - adx（应用程序/ adx + xml）

假设我们已经根据
上一节称为 *发送数据值* 我们现在可以放在一起
我们对单个数据值集的请求并使用 cURL 请求它：

```bash
curl "https://play.dhis2.org/demo/api/33/dataValueSets?dataSet=pBOMPrpg1QX&period=201401&orgUnit=DiszpKrYNg8"
  -H "Accept:application/xml" -u admin:district
```

我们还可以使用开始日期和结束日期查询参数来请求
大量的数据值。 IE。您还可以请求以下数据的值：
多个数据集和组织单位以及一个时间跨度以便导出
更大的数据块。请注意，期间查询参数采用
优先于开始日期和结束日期参数。一个例子看起来像
这：

```bash
curl "https://play.dhis2.org/demo/api/33/dataValueSets?dataSet=pBOMPrpg1QX&dataSet=BfMAe6Itzgt
  &startDate=2013-01-01&endDate=2013-01-31&orgUnit=YuQRtpLP10I&orgUnit=vWbkYPRmKyS&children=true"
  -H "Accept:application/xml" -u admin:district
```

检索在内部创建或更新的数据值
最近10天，您可以发出以下请求：

    / api / dataValueSets？dataSet = pBOMPrpg1QX＆orgUnit = DiszpKrYNg8＆lastUpdatedDuration = 10d

响应将如下所示：

```xml
<?xml version='1.0' encoding='UTF-8'?>
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataSet="pBOMPrpg1QX"
  completeDate="2014-01-02" period="201401" orgUnit="DiszpKrYNg8">
<dataValue dataElement="eY5ehpbEsB7" period="201401" orgUnit="DiszpKrYNg8"
  categoryOptionCombo="bRowv6yZOF2" value="10003"/>
<dataValue dataElement="Ix2HsbDMLea" period="201401" orgUnit="DiszpKrYNg8"
  categoryOptionCombo="bRowv6yZOF2" value="10002"/>
<dataValue dataElement="f7n9E0hX8qk" period="201401" orgUnit="DiszpKrYNg8"
  categoryOptionCombo="bRowv6yZOF2" value="10001"/>
</dataValueSet>
```

您可以使用JSON格式请求数据，如下所示：

    /api/dataValueSets.json?dataSet=pBOMPrpg1QX&period=201401&orgUnit=DiszpKrYNg8

响应如下所示：

```json
{
  "dataSet": "pBOMPrpg1QX",
  "completeDate": "2014-02-03",
  "period": "201401",
  "orgUnit": "DiszpKrYNg8",
  "dataValues": [
    {
      "dataElement": "eY5ehpbEsB7", 
      "categoryOptionCombo": "bRowv6yZOF2", 
      "period": "201401",
      "orgUnit": "DiszpKrYNg8", 
      "value": "10003"
    }, 
    {
      "dataElement": "Ix2HsbDMLea", 
      "categoryOptionCombo": "bRowv6yZOF2", 
      "period": "201401",
      "orgUnit": "DiszpKrYNg8", 
      "value": "10002"
    }, 
    {
      "dataElement": "f7n9E0hX8qk", 
      "categoryOptionCombo": "bRowv6yZOF2", 
      "period": "201401",
      "orgUnit": "DiszpKrYNg8", 
      "value": "10001"
    }
  ]
}
```

请注意，数据值会被轻柔地删除，即删除的值具有
`deleted`属性设置为true而不是被永久删除。
当集成多个系统以进行通信时，这很有用
删除。您可以在响应中包括已删除的值，如下所示：

    /api/33/dataValueSets.json?dataSet=pBOMPrpg1QX&period=201401
      ＆orgUnit = DiszpKrYNg8＆includeDeleted = true

您还可以请求CSV格式的数据，如下所示：

    /api/33/dataValueSets.csv?dataSet=pBOMPrpg1QX&period=201401
      ＆orgUnit = DiszpKrYNg8

响应将如下所示：

```csv
数据元素，期限，组织单位，catoptcombo，attroptcombo，值，存储于，最后更新，注释，flwup
f7n9E0hX8qk，201401，DiszpKrYNg8，bRowv6yZOF2，bRowv6yZOF2,12，system，2015-04-05T19：58：12.000，comment1，false
Ix2HsbDMLea，201401，DiszpKrYNg8，bRowv6yZOF2，bRowv6yZOF2,14，system，2015-04-05T19：58：12.000，comment2，false
eY5ehpbEsB7,201401，DiszpKrYNg8，bRowv6yZOF2，bRowv6yZOF2,16，系统，2015-04-05T19：58：12.000，comment3，false
FTRrcoaog83,201401，DiszpKrYNg8，bRowv6yZOF2，bRowv6yZOF2,12，系统，2014-03-02T21：45：05.519，comment4，false
```

以下约束适用于数据值集资源：

  - 必须至少指定一个数据集。

  - 至少一个期间或开始日期和结束日期必须为
    指定的。

  - 必须至少指定一个组织单位。

  - 组织单位必须在组织层次结构内
    已认证用户的单位。

  - 限制不能小于零。

### 发送，读取和删除单个数据值 { #webapi_sending_individual_data_values } 

 <!--DHIS2-SECTION-ID:webapi_sending_individual_data_values-->

此示例将显示如何发送要保存的单个数据值
一个要求。这可以通过发送一个 *POST* 请求到
`dataValues` 资源：

    / api / dataValues

此资源支持以下查询参数：

<table style="width:100%;">
<caption>数据值查询参数</caption>
<colgroup>
<col style="width: 15%" />
<col style="width: 19%" />
<col style="width: 64%" />
</colgroup>
<thead>
<tr class="header">
<th>查询参数</th>
<th>必填</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>de</td>
<td>是</td>
<td>数据元素标识符</td>
</tr>
<tr class="even">
<td>pe</td>
<td>是</td>
<td>期间标识符</td>
</tr>
<tr class="odd">
<td>ou</td>
<td>是</td>
<td>组织部门标识符</td>
</tr>
<tr class="even">
<td>co</td>
<td>否</td>
<td>类别选项组合标识符，如果省略则使用默认值</td>
</tr>
<tr class="odd">
<td>cc</td>
<td>否（必须与 cp 结合使用）</td>
<td>属性类别组合标识符</td>
</tr>
<tr class="even">
<td>cp</td>
<td>否（必须与 cc 结合使用）</td>
<td>属性类别选项标识符，以 ; 分隔对于多个值</td>
</tr>
<tr class="odd">
<td>ds</td>
<td>否</td>
<td>数据集，用于检查期间和组织单位是否允许 POST 或 DELETE。如果指定，则必须将数据元素分配给该数据集。如果未指定，将选择包含该数据元素的数据集来检查是否允许该操作。</td>
</tr>
<tr class="even">
<td>值</td>
<td>否</td>
<td>数据值</td>
</tr>
<tr class="odd">
<td>评论</td>
<td>否</td>
<td>数据评论</td>
</tr>
<tr class="even">
<td>followUp</td>
<td>否</td>
<td>跟踪数据值，将切换当前布尔值</td>
</tr>
</tbody>
</table>

如果给定的任何标识符无效，则数据值或
注释无效或数据被锁定，响应将包含
* 409冲突*状态代码和描述性文本消息。如果
操作导致保存或更新的值，将返回* 200 OK *。
请求的示例如下所示：

```bash
curl "https://play.dhis2.org/demo/api/33/dataValues?de=s46m5MS0hxu
  &pe=201301&ou=DiszpKrYNg8&co=Prlt0C1RF0s&value=12"
  -X POST -u admin:district
```

此资源还允许使用特殊语法将值关联到
属性选项组合。这可以通过发送
属性类别组合的标识符以及标识符
该值代表的属性类别选项的
组合。类别组合由`cc`参数指定，而
类别选项使用`cp`指定为以分号分隔的字符串
范围。有必要确保类别选项全部包含
类别组合。一个示例如下所示：

```bash
curl "https://play.dhis2.org/demo/api/33/dataValues?de=s46m5MS0hxu&ou=DiszpKrYNg8
  &pe=201308&cc=dzjKKQq0cSO&cp=wbrDrL2aYEc;btOyqprQ9e8&value=26"
  -X POST -u admin:district
```

您可以使用* GET *方法通过请求检索数据值。这
价值，评论和跟进参数在这方面不适用：

```bash
curl "https://play.dhis2.org/demo/api/33/dataValues?de=s46m5MS0hxu
  &pe=201301&ou=DiszpKrYNg8&co=Prlt0C1RF0s"
  -u admin:district
```

您可以使用* DELETE *方法删除带有请求的数据值。

#### 处理文件数据值 { #datavalue_file } 

 <!--DHIS2-SECTION-ID:datavalue_file-->

处理具有* file *类型的数据元素的数据值时
与上述方法有所不同。这些数据
值是特殊的，因为值的内容是UID引用
到* FileResource *对象，而不是一个自包含的常量。这些
数据值的行为就像存储文本的其他数据值一样
内容，但应以不同方式处理以产生
有意义的输入和输出。

存储这些数据值之一的过程大致如下：

1.  按照说明将文件上传到`/ api / fileResources`端点
    在文件资源部分。

2.  检索返回的* FileResource *的`id`属性。

3.  使用以下任意一种将检索到的ID *作为值*存储到数据值中
    上述方法中的一种。

数据值和文件资源之间只有一对一的关系
允许的。这是内部强制实施的，因此可以保存文件资源ID
在多个数据值中是不允许的，并且将返回错误。删除中
数据值将删除引用的文件资源。直接删除
文件资源是不可能的。

现在可以像除返回的数据之外的任何其他值一样检索数据值
将是文件资源的 UID。为了检索实际的
内容（表示存储在映射的文件资源中的文件
到数据值）必须向 */api/dataValues/files* 发出 GET 请求
镜像查询参数，因为它们将用于数据值
本身。 `/api/dataValues/files` 端点仅支持 GET 请求。

值得注意的是，由于底层的存储机制起作用
异步地，文件内容可能无法立即准备就绪
从`/ api / dataValues / files`端点下载。尤其如此
对于可能需要耗时的上传操作的大型文件
外部文件存储的背景（取决于系统）
配置）。从中检索文件资源元数据
`/ api / fileResources / <id>`端点允许检查`storageStatus`
在尝试下载内容之前。

## ADX数据格式 { #webapi_adx_data_format } 

 <!--DHIS2-SECTION-ID:webapi_adx_data_format-->

从2.20版开始，我们包含了对国际标准的支持
用于称为ADX的汇总数据交换。开发并维护ADX
由IHE的质量研究和公共卫生委员会提供
（集成HealthCare Enterprise）。详述QRPH的Wiki页面
活动位于
[wiki.ihe.net]（http://wiki.ihe.net/index.php?title=Quality,_Research_and_Public_Health#Current_Domain_Activities）。
ADX仍在积极开发中，现已发布
试用实施。请注意，DHIS2当前实现了什么
是读取和写入adx格式数据的功能，即什么是
在ADX中被描述为内容消费者和内容生产者参与者
轮廓。

ADX数据消息的结构与您可能看到的结构非常相似
从前面描述的DXF 2数据中已经很熟悉。有一个
几个重要的区别。我们将用
参考一个小例子：

```xml
<adx xmlns="urn:ihe:qrph:adx:2015" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ihe:qrph:adx:2015 ../schema/adx_loose.xsd" 
  exported="2015-02-08T19:30:00Z">
  <group orgUnit="OU_559" period="2015-06-01/P1M" 
    completeDate="2015-07-01" dataSet="(TB/HIV)VCCT">
    <dataValue dataElement="VCCT_0" GENDER="FMLE" HIV_AGE="AGE0-14" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="FMLE" HIV_AGE="AGE0-14" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="FMLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="FMLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="FMLE" HIV_AGE="AGE0-14" value="10"/>

    <dataValue dataElement="VCCT_0" GENDER="MLE" HIV_AGE="AGE0-14" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="MLE" HIV_AGE="AGE0-14" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="MLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="MLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="MLE" HIV_AGE="AGE0-14" value="10"/>

    <dataValue dataElement="VCCT_0" GENDER="FMLE" HIV_AGE="AGE15-24" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="FMLE" HIV_AGE="AGE15-24" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="FMLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="FMLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="FMLE" HIV_AGE="AGE15-24" value="10"/>

    <dataValue dataElement="VCCT_0" GENDER="MLE" HIV_AGE="AGE15-24" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="MLE" HIV_AGE="AGE15-24" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="MLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="MLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="MLE" HIV_AGE="AGE15-24" value="10"/>
  </group>
</adx>
```

### adx根元素 { #the-adx-root-element } 

adx根元素只有一个强制属性，即
*已导出*时间戳。与其他adx元素相同，该架构为
可扩展的，因为它不限制其他特定于应用程序
属性。

### 组元素 { #the-group-element } 

与dxf2不同，adx要求根据以下内容对数据值进行分组
orgUnit，期间和数据集。上面的示例显示了有关的数据报告
在线演示数据库中的“（TB / HIV）VCCT”数据集。这个例子
正在使用代码作为标识符而不是dhis2 uid。代码是
使用adx时首选的标识符形式。

orgUnit，period和dataSet属性在adx中是必需的。这
组元素可能包含其他属性。在我们的DHIS2中
实现中，任何其他属性都简单地传递给
基础进口商。这意味着当前所有的属性
在dxf2中具有含义（例如上例中的completeDate）可以
继续在adx中使用，它们将以相同的方式处理。

adx和dxf2之间的重大区别在于
被编码。 Adx严格使用ISO8601并对报告进行编码
期间为（日期|日期时间）/（持续时间）。所以上面例子中的句点
为期1个月（P1M），从2015-06-01开始。这就是数据
表示2015年6月。该符号有点冗长，但它非常
灵活，使我们能够支持DHIS2中的所有现有期间类型

### ADX期间定义 { #adx-period-definitions } 

DHIS2在导入期间仅支持有限数量的时间段或持续时间。
期间应从持续时间开始的日期开始，然后是
一个“ /”，然后是表格中注明的持续时间符号。这
下表详细说明了所有ADX支持的期间类型，以及
有例子。

<table>
<caption>ADX 周期</caption>
<colgroup>
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th>期间类型</th>
<th>持续时间符号</th>
<th>示例</th>
<th>持续时间</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>每日</td>
<td>P1D</td>
<td>2017-10-01/P1M</td>
<td>2017 年 10 月 1 日</td>
</tr>
<tr class="even">
<td>每周</td>
<td>P7D</td>
<td>2017-10-01/P7D</td>
<td>2017 年 10 月 1 日 - 2017 年 10 月 7 日</td>
</tr>
<tr class="odd">
<td>每月</td>
<td>P1M</td>
<td>2017-10-01/P1M</td>
<td>2017 年 10 月 1 日 - 2017 年 10 月 31 日</td>
</tr>
<tr class="even">
<td>双月</td>
<td>P2M</td>
<td>2017-11-01/P1M</td>
<td>2017 年 11 月 1 日 - 2017 年 12 月 31 日</td>
</tr>
<tr class="odd">
<td>每季度</td>
<td>P3M</td>
<td>2017-09-01/P3M</td>
<td>2017 年 9 月 1 日 - 2017 年 12 月 31 日</td>
</tr>
<tr class="even">
<td>每六个月</td>
<td>P6M</td>
<td>2017-01-01/P6M</td>
<td>2017 年 1 月 1 日 - 2017 年 6 月 30 日</td>
</tr>
<tr class="odd">
<td>每年</td>
<td>P1Ý</td>
<td>2017-01-01/P1Y</td>
<td>2017 年 1 月 1 日 - 2017 年 12 月 31 日</td>
</tr>
<tr class="even">
<td>10 月财务</td>
<td>P1Y</td>
<td>2017-10-01/P1Y</td>
<td>2017 年 10 月 1 日 - 2018 年 9 月 30 日</td>
</tr>
<tr class="odd">
<td>4 月财务</td>
<td>P1Y</td>
<td>2017-04-01/P1Y</td>
<td>2017 年 4 月 1 日 - 2018 年 3 月 31 日</td>
</tr>
<tr class="even">
<td>7 月财务</td>
<td>P1Y</td>
<td>2017-07-01/P1Y</td>
<td>2017 年 7 月 1 日 - 2018 年 6 月 30 日</td>
</tr>
</tbody>
</table>

### 数据值 { #data-values } 

adx中的dataValue元素与DXF中的等效元素非常相似。
必填属性是* dataElement *和* value *。 * orgUnit *和
* period *属性未出现在dataValue中，因为它们是必需的
在* group *级别。

最显着的区别是分解的方式
代表。 DXF 使用 categoryOptionCombo 来表示分解
数据的。在 adx 中，分解（例如 AGE_GROUP 和 SEX）是
明确表示为属性。使用的一项重要限制
adx 是 dataSet 中用于 dataElements 的类别必须
有一个代码分配给他们，此外，该代码必须是一种形式
它适合用作 XML 属性。的确切约束
W3C XML 标准中描述了 XML 属性名称 - 实际上，
这意味着没有空格，没有除“_”以外的非字母数字字符和
它可能不是以字母开头。上面的例子显示了
“良好”类别代码（“GENDER”和“HIV_AGE”）。

对代码形式的限制仅适用于类别。
当前，在分配时，DHIS2并未强制执行约定
代码，但是如果您尝试执行以下操作，则会收到提示性错误消息
导入adx数据且未分配类别代码
合适的。

使用分解数据的显式维度的主要好处是
那

  - 产生数据的系统不必与
    DHIS2中的categoryOptionCombo。

  - 生产者和消费者可以将其代码与第三方匹配
    权威来源，例如术语服务。注意在
    性别和年龄组代码上方的示例正在使用代码列表
    来自[WHO全球健康观察站]（http://apps.who.int/gho/data/node.resources.api）。

请注意，此功能可能非常有用，例如
从EMR系统生成分类数据，但可能会发生
* categoryOptionCombo *映射更容易或更理想。这
DHIS2实现的adx将检查是否存在
* categoryOptionCombo *属性，如果存在，它将使用该属性
对爆炸尺寸属性的偏好。同样，
* group *元素上的* attributeOptionCombo *属性将是
以传统方式处理。否则，attributeOptionCombo可以是
就像* dataValue *一样被视为爆炸类别。

在上面的简单示例中，dataSet中的每个dataElement
具有相同的维数（categorycombo），因此数据整齐
矩形的。不必是这种情况。数据集可能包含
具有不同categoryCombos的dataElements，导致
*参差不齐* adx数据消息。

### 汇入资料 { #importing-data } 

DHIS2在* / api / dataValueSets *处公开POST adx数据的端点
使用* application / xml + adx *作为内容类型。因此，例如
以下curl命令可用于将上面的示例数据发布到
DHIS2演示服务器：

```bash
curl -u admin:district -X POST -H "Content-Type: application/adx+xml"
  -d @data.xml "https://play.dhis2.org/demo/api/33/dataValueSets?dataElementIdScheme=code&orgUnitIdScheme=code"
```

请注意，查询参数与DXF数据使用的参数相同。这
adx端点应使用以下命令解释所有现有的DXF参数：
与DXF具有相同的语义。

### 汇出资料 { #exporting-data } 

DHIS2在* / api / dataValueSets *下向端点公开GET adx数据集
使用* application / xml + adx *作为接受的内容类型。因此对于
例如，以下curl命令可用于检索adx
数据：

```bash
curl -u admin:district -H "Accept: application/adx+xml"
 "https://play.dhis2.org/demo/api/33/dataValueSets?dataValueSets?orgUnit=M_CLINIC&dataSet=MALARIA&period=201501"
```

请注意，查询参数与DXF数据使用的参数相同。一个
重要的区别是dataSet和orgUnit的标识符是
假定是代码而不是uid。

## 计划规则 { #webapi_program_rules } 

 <!--DHIS2-SECTION-ID:webapi_program_rules-->

本节关于发送和读取程序规则，并说明
程序规则数据模型。程序规则赋予功能
在DHIS2的程序中配置动态行为。

### 程序规则模型 { #webapi_program_rule_model } 

 <!--DHIS2-SECTION-ID:webapi_program_rule_model-->

程序规则数据模型由programRuleVariables，
programRules和programRuleActions。 programRule包含一个
表达式-当此表达式为true时，子programRuleActions
被触发。 programRuleVariables用于寻址数据元素，
跟踪的实体数据值和运行数据所需的其他数据值
表达式。程序中的所有programRules共享相同的库
programRuleVariables和一个programRuleVariable可以在多个
programRules的表达式。

![](resources/images/program_rules/program-rule-model.jpg)

#### 程序规则模型详细信息 { #program-rule-model-details } 

下表详细列出了programRule
模型。

 <table style="width:100%;">
 <caption> 程序规则 </caption>
 <colgroup>
 <col style="width: 16%" />
 <col style="width: 66%" />
 <col style="width: 16%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 名称 </th>
 <th> 描述 </th>
 <th> 强制性 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 程序 </td>
 <td> 执行programRule的程序。</td>
 <td> 强制性 </td>
 </tr>
 <tr class="even">
 <td> 名称 </td>
 <td> 程序规则将显示给 dhis2 配置器的名称。程序的最终用户不可见。 </td>
 <td> 强制性 </td>
 </tr>
 <tr class="odd">
 <td> 描述 </td>
 <td> 程序规则的描述，可供配置者用来描述规则。程序的最终用户不可见。 </td>
 <td> 强制性 </td>
 </tr>
 <tr class="even">
 <td> programStage </td>
 <td> 如果为程序规则设置了 programStage，则将仅在指定的程序阶段内评估该规则。 </td>
 <td> 可选 </td>
 </tr>
 <tr class="odd">
 <td> 条件 </td>
 <td> 需要评估为真以便程序规则触发其子操作的表达式。表达式是使用运算符、函数调用、硬编码值、常量和程序规则变量编写的。
 <pre> <code> D2：hasValue的（＆＃39;血红蛋白＆＃39;）&amp;&amp;＃{hemoglobin} &lt; = 7 </code> </pre> </td>
 <td> 强制性 </td>
 </tr>
 <tr class="even">
 <td> 优先级 </td>
 <td> 在规则顺序很重要的情况下运行规则的优先级。在大多数情况下，规则不依赖于在其他规则之前或之后运行，在这些情况下，可以省略优先级。如果未设置优先级，则规则将在定义了优先级的任何规则之后运行。如果设置了优先级（整数），则优先级最低的规则将在优先级较高的规则之前运行。 </td>
 <td> 可选 </td>
 </tr>
 </tbody>
 </table>

#### 计划规则操作模型详细信息 { #program-rule-action-model-details } 

下表详细列出了programRuleAction
模型。

<table style="width:100%;">
<caption>programRuleAction</caption>
<colgroup>
<col style="width: 16%" />
<col style="width: 66%" />
<col style="width: 16%" />
</colgroup>
<thead>
<tr class="header">
<th>name</th>
<th>description</th>
<th>Compulsory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>programRule</td>
<td>The programRule that is the parent of this action.</td>
<td>Compulsory</td>
</tr>
<tr class="even">
<td>programRule- ActionType</td>
<td>The type of action that is to be performed.
<ul>
<li><p>`DISPLAYTEXT` - Displays a text in a given widget.</p></li>
<li><p>`DISPLAYKEYVALUEPAIR` - Displays a key and value pair(like a program indicator) in a given widget.</p></li>
<li><p>`HIDEFIELD` - Hide a specified dataElement or trackedEntityAttribute.</p>
<ul>
<li><p><em>content</em> - if defined, the text in <em>content</em> will be displayed to the end user in the instance where a value is previously entered into a field that is now about to be hidden (and therefore blanked). If <em>content</em> is not defined, a standard message will be shown to the user in this instance.</p></li>
<li><p><em>dataElement</em> - if defined, the HIDEFIELD action will hide this dataElement when the rule is effective.</p></li>
<li><p><em>trackedEntityDataValue</em> - if defined, the HIDEFIELD action will hide this trackedEntityDataValue when the rule is effective.</p></li>
</ul></li>
<li><p>`HIDESECTION` - Hide a specified section.</p>
<ul>
<li><p><em>programStageSection</em> - must be defined. This is the programStageSection that will be hidden in case the parent rule is effective.</p></li>
</ul></li>
<li><p>`ASSIGN` - Assign a dataElement a value(help the user calculate something or fill in an obvious value somewhere)</p>
<ul>
<li><p><em>content</em> - if defined, the value in <em>data</em> is assigned to this variable. If content id defined, and thus a variable is assigned for use in other rules, it is important to also assign a <em>programRule.priority</em> to make sure the rule with an ASSIGN action runs before the rule that will in turn evaluate the assigned variable.</p></li>
<li><p><em>data</em> - must be defined, data forms an expression that is evaluated and assigned to either a variable(#{myVariable}), a dataElement, or both.</p></li>
<li><p><em>dataElement</em> - if defined, the value in <em>data</em> is assigned to this data element.</p></li>
</ul>
<p>Either the content or dataElement must be defined for the ASSIGN action to be effective.</p></li>
<li><p>`SHOWWARNING` - Show a warning to the user, not blocking the user from completing the event or registration.</p>
<ul>
<li><p><em>content</em> - if defined, content is a static part that is displayed at the end of the error message.</p></li>
<li><p><em>data</em> - if defined, data forms an expression that is evaluated and added to the end of the warning message.</p></li>
<li><p><em>dataElement</em> - if defined, the warning message is displayed next to this data element.</p></li>
<li><p><em>trackedEntityAttribute</em> - if defined, the warning message is displayed next to this tracked entity attribute.</p></li>
</ul>
<p>Either dataElement or trackedEntityAttribute must be specified.</p></li>
<li><p>`SHOWERROR` - Show an error to the user, blocking the user from completing the event or registration.</p>
<ul>
<li><p><em>content</em> - if defined, content is a static part that is displayed in the start of the error message.</p></li>
<li><p><em>data</em> - if defined, data forms an expression that is evaluated and added to the end of the error message.</p></li>
<li><p><em>dataElement</em> - if defined, the error message is linked to this data element.</p></li>
<li><p><em>trackedEntityAttribute</em> - if defined, the error message is linked to this tracked entity attribute.</p></li>
</ul>
<p>Either dataElement or trackedEntityAttribute must be specified.</p></li>
<li><p>`WARNINGONCOMPLETINON` - Show a warning to the user on the &quot;Complete form&quot; dialog, but allowing the user to complete the event.</p>
<ul>
<li><p><em>content</em> - if defined, content is a static part that is displayed at the end of the error message.</p></li>
<li><p><em>data</em> - if defined, data forms an expression that is evaluated and added to the end of the warning message.</p></li>
<li><p><em>dataElement</em> - if defined, the warning message prefixed with the name/formName of the data element.</p></li>
</ul></li>
<li><p>`ERRORONCOMPLETION` - Show an error to the user on in a modal window when the user tries to complete the event. The user is prevented from completing the event.</p>
<ul>
<li><p><em>content</em> - if defined, content is a static part that is displayed in the start of the error message.</p></li>
<li><p><em>data</em> - if defined, data forms an expression that is evaluated and added to the end of the error message.</p></li>
<li><p><em>dataElement</em> - if defined, the error message is linked to this data element.</p></li>
</ul></li>
<li><p>`CREATEEVENT` - Create an event within the same enrollment.</p>
<ul>
<li><p><em>content</em></p></li>
<li><p><em>data</em> - if defined, contains data values to assign the created event. The format is &lt;uid&gt;:&lt;data value&gt;. Where several values is specified, these are separated with comma.</p>
<pre><code>AcMrnleqHqc:100,AqK1IHqCkEE:&#39;Polyhydramnios&#39;</code></pre></li>
<li><p><em>programStage</em> - must be defined, and designates the program stage that the rule shall create an event of.</p></li>
</ul></li>
<li><p>`SETMANDATORYFIELD` - Set a field to be mandatory.</p>
<ul>
<li><p><em>dataElement</em> - if defined, this data element will be set to be mandatory in the data entry form.</p></li>
<li><p><em>trackedEntityAttribute</em> - if defined, this tracked entity attribute will be set to mandatory in the registration form or profile.</p></li>
</ul></li>
<li><p>`SENDMESSAGE` - To send message at completion of event/enrollment or at data value update.</p>
<ul>
<li><p><em>messageTemplate</em> - if defined, this template will be delivered either as SMS or EMAIL depending upon DeliveryChannel value in message template.</p></li>
</ul></li>
<li><p>`SCHEDULEMESSAGE` - To schedule message at completion of event/enrollment or at data value update.</p>
<ul>
<li><p><em>messageTemplate</em> - if defined, this template will be delivered either as SMS or EMAIL depending upon DeliveryChannel value in message template.</p></li>
<li><p><em>Date to send message</em> - Expression which is going to be used for evaluation of scheduled date. This expression should result in Date, any other resultant will be discarded and notification will not get scheduled.</p></li>
</ul></li>
</ul></td>
<td>Compulsory</td>
</tr>
<tr class="odd">
<td>location</td>
<td>Used for actionType DISPLAYKEYVALUEPAIR and DISPLAYTEXT to designate which widget to display the text or keyvaluepair in. Compulsory for DISPLAYKEYVALUEPAIR and DISPLAYTEXT.</td>
<td>See description</td>
</tr>
<tr class="even">
<td>content</td>
<td>Used for user messages in the different actions. See the actionType overview for a detailed explanation for how it is used in each of the action types. Compulsory for SHOWWARNING, SHOWERROR, WARNINGONCOMPLETION, ERRORONCOMPLETION, DISPLAYTEXT and DISPLAYKEYVALUEPAIR. Optional for HIDEFIELD and ASSIGN.</td>
<td>See description</td>
</tr>
<tr class="odd">
<td>data</td>
<td>Used for expressions in the different actions. See the actionType overview for a detailed explanation for how it is used in each of the action types. Compulsory for ASSIGN. Optional for SHOWWARNING, SHOWERROR, WARNINGONCOMPLETION, ERRORONCOMPLETION, DISPLAYTEXT, CREATEEVENT and DISPLAYKEYVALUEPAIR</td>
<td>See description</td>
</tr>
<tr class="even">
<td>dataElement</td>
<td>Used for linking rule actions to dataElements. See the actionType overview for a detailed explanation for how it is used in each of the action types. Optional for SHOWWARNING, SHOWERROR, WARNINGONCOMPLETION, ERRORONCOMPLETION, ASSIGN and HIDEFIELD</td>
<td>See description</td>
</tr>
<tr class="odd">
<td>trackedEntity- Attribute</td>
<td>Used for linking rule actions to trackedEntityAttributes. See the actionType overview for a detailed explanation for how it is used in each of the action types. Optional for SHOWWARNING, SHOWERROR and HIDEFIELD.</td>
<td>See description</td>
</tr>
<tr class="even">
<td>option</td>
<td>Used for linking rule actions to options. See the actionType overview for a detailed explanation for how it is used in each of the action types. Optional for HIDEOPTION</td>
<td>See description</td>
</tr>
<tr class="odd">
<td>optionGroup</td>
<td>Used for linking rule actions to optionGroups. See the actionType overview for a detailed explanation for how it is used in each of the action types. Compulsory for SHOWOPTIONGROUP, HIDEOPTIONGROUP.</td>
<td>See description</td>
</tr>
<tr class="even">
<td>programStage</td>
<td>Only used for CREATEEVENT rule actions. Compulsory for CREATEEEVENT.</td>
<td>See description</td>
</tr>
<tr class="odd">
<td>programStage- Section</td>
<td>Only used for HIDESECTION rule actions. Compulsory for HIDESECTION</td>
<td>See description</td>
</tr>
</tbody>
</table>

#### 程序规则变量模型的详细信息 { #program-rule-variable-model-details } 

下表详细介绍了
programRuleVariable模型。

<table style="width:100%;">
<caption>programRuleVariable</caption>
<colgroup>
<col style="width: 16%" />
<col style="width: 66%" />
<col style="width: 16%" />
</colgroup>
<thead>
<tr class="header">
<th>name</th>
<th>description</th>
<th>Compulsory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>name</td>
<td>the name for the programRuleVariable - this name is used in expressions.
<pre><code>#{myVariable} &gt; 5</code></pre></td>
<td>Compulsory</td>
</tr>
<tr class="even">
<td>sourceType</td>
<td>Defines how this variable is populated with data from the enrollment and events.
<ul>
<li><p>DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE - In tracker capture, gets the newest value that exists for a data element, within the events of a given program stage in the current enrollment. In event capture, gets the newest value among the 10 newest events on the organisation unit.</p></li>
<li><p>DATAELEMENT_NEWEST_EVENT_PROGRAM - In tracker capture, get the newest value that exists for a data element across the whole enrollment. In event capture, gets the newest value among the 10 newest events on the organisation unit.</p></li>
<li><p>DATAELEMENT_CURRENT_EVENT - Gets the value of the given data element in the current event only.</p></li>
<li><p>DATAELEMENT_PREVIOUS_EVENT - In tracker capture, gets the newest value that exists among events in the program that precedes the current event. In event capture, gets the newvest value among the 10 preceeding events registered on the organisation unit.</p></li>
<li><p>CALCULATED_VALUE - Used to reserve a variable name that will be assigned by a ASSIGN program rule action</p></li>
<li><p>TEI_ATTRIBUTE - Gets the value of a given tracked entity attribute</p></li>
</ul></td>
<td>Compulsory</td>
</tr>
<tr class="odd">
<td>dataElement</td>
<td>Used for linking the programRuleVariable to a dataElement. Compulsory for all sourceTypes that starts with DATAELEMENT_.</td>
<td>See description</td>
</tr>
<tr class="even">
<td>trackedEntity- Attribute</td>
<td>Used for linking the programRuleVariable to a trackedEntityAttribute. Compulsory for sourceType TEI_ATTRIBUTE.</td>
<td>See description</td>
</tr>
<tr class="odd">
<td>useCodeFor- OptionSet</td>
<td>If checked, the variable will be populated with the code - not the name - from any linked option set. Default is unchecked, meaning that the name of the option is populated.</td>
<td></td>
</tr>
<tr class="even">
<td>programStage</td>
<td>Used for specifying a specific program stage to retreive the programRuleVariable value from. Compulsory for DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE.</td>
<td>See description</td>
</tr>
</tbody>
</table>

### 创建程序规则 { #webapi_creating_program_rules } 

 <!--DHIS2-SECTION-ID:webapi_creating_program_rules-->

- 即将到来-

## 形式 { #webapi_forms } 

 <!--DHIS2-SECTION-ID:webapi_forms-->

To retrieve information about a form (which corresponds to a data set
and its sections) you can interact with the `form` resource. The form
response is accessible as XML and JSON and will provide information
about each section (group) in the form as well as each field in the
sections, including labels and identifiers. By supplying period and
organisation unit identifiers the form response will be populated with
data values.

 <table>
 <caption>表单查询参数</caption>
 <colgroup>
 <col style="width: 12%" />
 <col style="width: 12%" />
 <col style="width: 74%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> pe </td>
 <td> ISO周期</td>
 <td>填充表单数据值的时间段。 </td>
 </tr>
 <tr class="even">
 <td> ou </td>
 <td> UID </td>
 <td>要为其填充表单数据值的组织单位。 </td>
 </tr>
 <tr class="odd">
 <td>元数据</td>
 否| <td>假|真</td>
 <td>是否包括有关表单节每个数据元素的元数据。 </td>
 </tr>
 </tbody>
 </table>

要检索数据集的表单，您可以执行GET请求，如下所示：

    / api / dataSets / <dataset-id> /form.json

在以下位置检索标识符为“ BfMAe6Itzgt”的数据集的表单
XML：

    / api / dataSets / BfMAe6Itzgt / form

要检索包含JSON中的元数据的表单，请执行以下操作：

    /api/dataSets/BfMAe6Itzgt/form.json?metaData=true

检索特定时间段内填充有数据值的表格，并
XML中的组织单位：

    /api/dataSets/BfMAe6Itzgt/form.xml?ou=DiszpKrYNg8&pe=201401

当涉及自定义数据输入表单时，此资源还允许
直接为数据集创建此类表格。这可以通过
内容类型为text / html的POST或PUT请求，其中有效负载为
自定义表单标记，例如：

```bash
curl -d @form.html "localhost/api/dataSets/BfMAe6Itzgt/form"
  -H "Content-Type:text/html" -u admin:district -X PUT
```

## 文件资料 { #webapi_documents } 

 <!--DHIS2-SECTION-ID:webapi_documents-->

对文件的引用可以与文档资源一起存储。

 <table>
 <caption>文档字段</caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>字段名称</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>名称</td>
 <td>文档的唯一名称</td>
 </tr>
 <tr class="even">
 <td>外部</td>
 <td>标志，用于标识文档的位置。外部文件为TRUE，内部文件为FALSE </td>
 </tr>
 <tr class="odd">
 <td>网址</td>
 <td>文件的位置。外部文件的URL。内部文件的文件资源ID（请参阅<a href="#webapi_file_resources">文件资源</a>）</td>
 </tr>
 </tbody>
 </table>

对文档端点的GET请求将返回所有文档：

    / api / documents

对文档端点的POST请求将创建一个新文档：

```bash
curl -X POST -d @document.json -H "Content-type: application/json"
  "http://dhis.domain/api/documents"
```

```json
{
  "name": "dhis home",
  "external": true,
  "url": "https://www.dhis2.org"
}
```

带有文档ID的GET请求将返回信息
关于文件。对相同端点的PUT请求将更新
文件栏位：

    / api / documents / <documentId>

在GET请求中附加* / data *将返回实际的文件内容
文件的：

    / api / documents / <documentId> / data

## 验证方式 { #webapi_validation } 

 <!--DHIS2-SECTION-ID:webapi_validation-->

要生成数据验证摘要，您可以与
验证资源。 dataSet资源针对数据输入进行了优化
用于验证数据集/表单的客户端，可以像这样访问：

    /api/33/validation/dataSet/QX4ZTUbOt3a.json?pe=201501&ou=DiszpKrYNg8

除了根据数据集验证规则外，还有两个
执行验证的其他方法：自定义验证和
预定的验证。

可以通过“数据质量”应用启动自定义验证，其中
您可以配置期间，验证规则组和组织
分析中要包含的单位以及是否要发送
通知和/或保留找到的结果。结果
分析将是使用您的条件发现的违规列表。

第一个路径变量是一个标识符，引用了要设置的数据
证实。支持XML和JSON资源表示。这
响应包含违反验证规则的行为。这将被扩展
在以后的版本中提供更多的验证类型。

要检索与特定数据集相关的验证规则，
表示带有所有数据元素均在其中的公式的验证规则
您可以对特定数据集进行GET请求
像这样的`validationRules`资源：

    / api / validationRules？dataSet = <dataset-id>

验证规则具有左侧和右侧，即
根据操作员比较有效性。有效的运算符
值可在下表中找到。

<table>
<caption>Operators</caption>
<colgroup>
<col style="width: 28%" />
<col style="width: 71%" />
</colgroup>
<thead>
<tr class="header">
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>equal_to</td>
<td>Equal to</td>
</tr>
<tr class="even">
<td>not_equal_to</td>
<td>Not equal to</td>
</tr>
<tr class="odd">
<td>greater_than</td>
<td>Greater than</td>
</tr>
<tr class="even">
<td>greater_than_or_equal_to</td>
<td>Greater than or equal to</td>
</tr>
<tr class="odd">
<td>less_than</td>
<td>Less than</td>
</tr>
<tr class="even">
<td>less_than_or_equal_to</td>
<td>Less than or equal to</td>
</tr>
<tr class="odd">
<td>compulsory_pair</td>
<td>If either side is present, the other must also be</td>
</tr>
<tr class="even">
<td>exclusive_pair</td>
<td>If either side is present, the other must not be</td>
</tr>
</tbody>
</table>

左侧和右侧表达式是数学表达式
其中可以包含对数据元素和类别选项的引用
以下格式的组合：

    $ {<dataelement-id>。 <catoptcombo-id>}

左侧和右侧表达式具有* missing值
战略*。这是指系统应如何处理
缺少数据元素/类别选项组合引用
在公式中是否应检查验证规则
有效性或已跳过。可在以下位置找到有效的缺失价值策略
下表。

<table>
<caption>Missing value strategies</caption>
<colgroup>
<col style="width: 28%" />
<col style="width: 71%" />
</colgroup>
<thead>
<tr class="header">
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>SKIP_IF_ANY_VALUE_MISSING</td>
<td>Skip validation rule if any data value is missing</td>
</tr>
<tr class="even">
<td>SKIP_IF_ALL_VALUES_MISSING</td>
<td>Skip validation rule if all data values are missing</td>
</tr>
<tr class="odd">
<td>NEVER_SKIP</td>
<td>Never skip validation rule irrespective of missing data values</td>
</tr>
</tbody>
</table>

## 验证结果 { #webapi_validation_results } 

 <!--DHIS2-SECTION-ID:webapi_validation_results-->

验证结果是在
验证分析。如果您在启动时选择“持续结果”或
安排验证分析，发现的任何违规将存储在
数据库。结果存储在数据库中后将被使用
3件事：

1.  根据存储的结果生成分析。

2.  尚未生成通知的持久结果将这样做，
    一次。

3.  跟踪结果是否产生了
    通知。

4.  运行时已检查的跳过规则
    验证分析。

这意味着如果您不坚持自己的结果，您将无法
生成验证结果分析，如果选中，结果将
每次发现并运行验证时都会生成通知
分析可能会比较慢。

持久的验证结果可以在下面查看
端点：

    / api / 33 / validationResults

您还可以使用验证结果ID检查单个结果
在此端点中：

    / api / 33 / validationResults / <id>

验证结果每天发送一次给适当的用户，
但也可以使用以下命令手动触发以按需运行
api端点：

    / api / 33 / validation / sendNotifications

使用此端点仅发送未发送的结果。

## 数据分析 { #webapi_data_analysis } 

 <!--DHIS2-SECTION-ID:webapi_data_analysis-->

进行数据分析和查找数据质量的几种资源
并提供验证问题。

### 验证规则分析 { #webapi_data_analysis_validation_rules } 

 <!--DHIS2-SECTION-ID:webapi_data_analysis_validation_rules-->

要运行验证规则并检索违规：

    / api / dataAnalysis / validationRules

支持以下查询参数：

 <table>
 <caption> 验证规则分析查询参数 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 说明 </th>
 <th> 选项 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> vrg </td>
 <td> 验证规则组 </td>
 <td> ID </td>
 </tr>
 <tr class="even">
 <td> 或 </td>
 <td> 组织单位 </td>
 <td> ID </td>
 </tr>
 <tr class="odd">
 <td> 开始日期 </td>
 <td> 时间跨度的开始日期 </td>
 <td> 日期 </td>
 </tr>
 <tr class="even">
 <td> 结束日期 </td>
 <td> 时间跨度的结束日期 </td>
 <td> 日期 </td>
 </tr>
 <tr class="odd">
 <td> 坚持 </td>
 <td> 是否在系统中持久化违规 </td>
 <td> 假 |真 </td>
 </tr>
 <tr class="even">
 <td> 通知 </td>
 <td> 是否发送违规通知 </td>
 <td> 假 |真 </td>
 </tr>
 </tbody>
 </table>

### 基于标准差的离群分析 { #webapi_data_analysis_std_dev_outlier } 

 <!--DHIS2-SECTION-ID:webapi_data_analysis_std_dev_outlier-->

根据平均值的标准偏差确定数据离群值
价值：

    / api / dataAnalysis / stdDevOutlier

支持以下查询参数：

 <table>
 <caption> 标准差异常值分析查询参数 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 说明 </th>
 <th> 选项 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 或 </td>
 <td> 组织单位 </td>
 <td> ID </td>
 </tr>
 <tr class="even">
 <td> 开始日期 </td>
 <td> 时间跨度的开始日期 </td>
 <td> 日期 </td>
 </tr>
 <tr class="odd">
 <td> 结束日期 </td>
 <td> 时间跨度的结束日期 </td>
 <td> 日期 </td>
 </tr>
 <tr class="even">
 <td> ds </td>
 <td> 数据集，参数可重复 </td>
 <td> ID </td>
 </tr>
 <tr class="odd">
 <td> 标准偏差 </td>
 <td> 与平均值的标准偏差数 </td>
 <td> 数值 </td>
 </tr>
 </tbody>
 </table>

### 基于最小值/最大值的离群值分析 { #webapi_data_analysis_min_max_outlier } 

 <!--DHIS2-SECTION-ID:webapi_data_analysis_min_max_outlier-->

要基于最小/最大值来识别数据离群值：

    / api / dataAnalysis / minMaxOutlier

支持的查询参数等于基于 *std dev 的异常值
上面描述的分析*资源。

### 后续数据分析 { #follow-up-data-analysis } 

要识别标记为后续的数据：

    / api / dataAnalysis / followup

支持的查询参数等于基于 *std dev 的异常值
上面描述的分析*资源。

## 数据的完整性 { #webapi_data_integrity } 

 <!--DHIS2-SECTION-ID:webapi_data_integrity-->

数据管理模块的数据完整性功能是
可通过Web API获得。本节介绍如何运行
数据完整性过程以及结果检索。详细
用户手册中描述了执行的分析。

### 运行数据完整性 { #webapi_data_integrity_run } 

 <!--DHIS2-SECTION-ID:webapi_data_integrity_run-->

测量数据完整性的操作是相当合理的资源（并且
时间）的艰巨任务。因此，它作为异步进程运行，并且
仅在明确要求时。启动任务是通过形成一个
对* dataIntegrity *端点的空POST请求，如下所示（已演示）
在curl语法中）：

```bash
curl -X POST "https://localhost/api/33/dataIntegrity"
```

如果成功，请求将立即返回HTTP 202。那个地点
响应的标头指向用于检查状态的资源
的请求。有效负载还包含作业的json对象
创建。向给定位置形成GET请求会产生一个空
JSON响应（如果任务尚未完成）和JSON任务
任务完成时的对象。轮询（保守地）对此资源
因此可以用来等待任务完成。

### 取得结果 { #webapi_data_integrity_fetch_results } 

 <!--DHIS2-SECTION-ID:webapi_data_integrity_fetch_results-->

一旦数据完整性完成运行，就可以从中获取结果
像这样的`system / taskSummaries`资源：

```bash
curl "https://dhis.domain/api/33/system/taskSummaries/DATAINTEGRITY"
```

返回的对象包含每个分析点的摘要，
列出相关完整性违规的名称。如中所述
本节的主要段落详细分析（以及
生成的数据）可以在“数据”的用户手册一章中找到
行政。

## 指标 { #webapi_indicators } 

 <!--DHIS2-SECTION-ID:webapi_indicators-->

本节介绍指标和指标表达式。

### 综合指标 { #webapi_aggregate_indicators } 

 <!--DHIS2-SECTION-ID:webapi_aggregate_indicators-->

要检索指标，您可以向指标发出GET请求
像这样的资源：

    / api /指标

指标代表可以计算和表示的表达式
因此。指标表达式被分为分子和
分母。分子和分母是数学的
可以包含对数据元素，常量和
组织单位组。变量将替换为数据
使用时的值在报告中。允许的变量
下表中描述了这些表达式。

<table>
<caption>指示变量</caption>
<colgroup>
<col style="width: 39%" />
<col style="width: 22%" />
<col style="width: 37%" />
</colgroup>
<thead>
<tr class="header">
<th>变量</th>
<th>对象</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>#{&lt;dataelement-id&gt;。&lt;categoryoptcombo-id&gt;。&lt;attributeoptcombo-idb0012c7dcbe08 7z0 }</td>
<td>数据元素操作数</td>
<td>指聚合数据元素和类别选项组合的组合。类别和属性选项组合 ID 都是可选的，通配符 &quot;*&quot; 符号可用于指示任何值。</td>
</tr>
<tr class="even">
<td>#{&lt;dataelement-id&gt;}</td>
<td>聚合数据元素</td>
<td>指所有类别选项组合中聚合数据元素的总价值。</td>
</tr>
<tr class="odd">
<td>D{&lt;节目 ID&gt;。&lt;数据元素-id&gt;</td>
<td>程序数据元素</td>
<td>指程序中跟踪器数据元素的值。</td>
</tr>
<tr class="even">
<td>A{&lt;节目 ID&gt;。&lt;属性 ID&gt;</td>
<td>程序跟踪的实体属性</td>
<td>指程序中跟踪的实体属性的值。</td>
</tr>
<tr class="odd">
<td>I{program-indicator-id&gt;</td>
<td>节目指示器</td>
<td>指的是程序指示器的值。</td>
</tr>
<tr class="even">
<td>R{&lt;数据集-id&gt;。&lt;指标&gt;}</td>
<td>报告率</td>
<td>指报告率指标。该指标可以是 REPORTING_RATE、REPORTING_RATE_ON_TIME、ACTUAL_REPORTS、ACTUAL_REPORTS_ON_TIME、EXPECTED_REPORTS。</td>
</tr>
<tr class="odd">
<td>C{&lt;常量 ID&gt;}</td>
<td>常量</td>
<td>指的是常量值。</td>
</tr>
<tr class="even">
<td>N{&lt;指示器-id&gt;}</td>
<td>指示器</td>
<td>引用现有指标。</td>
</tr>
<tr class="odd">
<td>OUG{&lt;orgunitgroup-id&gt;}</td>
<td>组织部门组</td>
<td>指组织部门组内的组织部门数量。</td>
</tr>
</tbody>
</table>

语法看起来像
    这：

＃

相应的示例如下所示：

＃

请注意，对于数据元素变量，类别选项组合
标识符可以省略。变量将代表总数
用于数据元素，例如所有类别选项组合中。例子：

＃

数据元素操作数可以包括任何类别选项组合和
属性选项组合，并使用通配符指示任何
    价值：

＃

使用程序数据元素和程序的示例
    属性：

    （D {eBAyeGv0exc.vV9UWAZohSf} * A {IpHINAT79UW.cejWyOfXge6}）/ D {eBAyeGv0exc.GieVkTxp4HH}

结合了计划指标和汇总指标的示例：

    I {EMOt6Fwhs1n} * 1000 /＃{WUg3MYWQ7pt}

使用报告率的示例如下所示：

    R {BfMAe6Itzgt.REPORTING_RATE} *＃{P3jJH5Tu5VC.S34ULMcHMca}

使用实际数据集报告的另一个示例：

    R {BfMAe6Itzgt.ACTUAL_REPORTS} / R {BfMAe6Itzgt.EXPECTED_REPORTS}

使用现有指标的示例如下所示：

    N {Rigf2d2Zbjp} *＃{P3jJH5Tu5VC.S34ULMcHMca}

表达式可以是任何一种有效的数学表达式，例如
例子：

    （2 *＃{P3jJH5Tu5VC.S34ULMcHMca}）/（＃{FQ2o8UBlcrS.S34ULMcHMca}-200）* 25

### 计划指标 { #webapi_program_indicators } 

 <!--DHIS2-SECTION-ID:webapi_program_indicators-->

要检索程序指示符，可以向程序发出GET请求
指标资源如下：

    / api / programIndicators

程序指示器可以包含在程序中收集的信息。
指标具有一个表达式，可以包含对数据的引用
元素，属性，常量和程序变量。哪些变量
下表中描述了允许的表达式。

 <table>
 <caption> 程序指示变量 </caption>
 <colgroup>
 <col style="width: 31%" />
 <col style="width: 68%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 变量 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> #{&lt;programstage-id&gt;.&lt;dataelement-id&gt;} </td>
 <td> 指程序阶段和数据元素 id 的组合。 </td>
 </tr>
 <tr class="even">
 <td> A{&lt;attribute-id&gt;} </td>
 <td> 指的是被跟踪的实体属性。 </td>
 </tr>
 <tr class="odd">
 <td> V{&lt;variable-id&gt;} </td>
 <td> 指程序变量。 </td>
 </tr>
 <tr class="even">
 <td> C{&lt;constant-id&gt;} </td>
 <td> 指一个常数。 </td>
 </tr>
 </tbody>
 </table>

语法看起来像
    这：

＃

相应的示例如下所示
    这：

＃

### 表达方式 { #webapi_expressions } 

 <!--DHIS2-SECTION-ID:webapi_expressions-->

表达式是数学公式，可以包含对
数据元素，常量和组织单位组。验证并
获取表达式的文本描述，可以发出GET请求
到表达式资源：

    / api / expressions / description？expression = <expression-string>

响应遵循标准的JSON Web消息格式。 *状态*
属性指示验证的结果，如果满足，则为“ OK”
成功，如果失败则显示“ ERROR”。 * message *属性将为“有效”
如果成功，并提供原因的文字描述，
验证失败，否则失败。 *说明*提供文字说明
表达式的描述。

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Valid",
  "description": "Acute Flaccid Paralysis"
}
```

## 完整的数据集注册 { #webapi_complete_data_set_registrations } 

 <!--DHIS2-SECTION-ID:webapi_complete_data_set_registrations-->

本节介绍有关数据集的完整数据集注册。一种
注册标记作为数据集被完全捕获。

### 完成数据集 { #webapi_completing_data_sets } 

 <!--DHIS2-SECTION-ID:webapi_completing_data_sets-->

本节说明如何将数据集注册为完整的。这是
通过与* completeDataSetRegistrations *交互来实现
资源：

    / api / 33 / completeDataSetRegistrations

端点支持* POST *方法来注册数据集
完成。端点在功能上与
* dataValueSets *端点，支持批量导入完整
注册。

支持导入* XML *和* JSON *格式的有效负载。这
此有效负载的基本格式，在本示例中为* XML *，类似于
所以：

```xml
<completeDataSetRegistrations xmlns="http://dhis2.org/schema/dxf/2.0">
  <completeDataSetRegistration period="200810" dataSet="eZDhcZi6FLP" 
    organisationUnit="qhqAxPSTUXp" attributeOptionCombo="bRowv6yZOF2" storedBy="imported"/>
  <completeDataSetRegistration period="200811" dataSet="eZDhcZi6FLP" 
    organisationUnit="qhqAxPSTUXp" attributeOptionCombo="bRowv6yZOF2" storedBy="imported"/>
</completeDataSetRegistrations>
```

* storedBy *属性是可选的（因为它是
完整的注册对象）。您还可以选择设置
* date *属性（注册时间）作为属性。现在是时候
未设置，将使用当前时间。

导入过程支持以下查询参数：

 <table>
 <caption> 完整的数据集注册查询参数 </caption>
 <colgroup>
 <col style="width: 16%" />
 <col style="width: 18%" />
 <col style="width: 64%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 值 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> dataSetIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射完整注册的数据集的属性。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射完整注册的组织单位的属性。 </td>
 </tr>
 <tr class="odd">
 <td> attributeOptionComboIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射完整注册的属性选项组合的属性。 </td>
 </tr>
 <tr class="even">
 <td> idScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 所有对象的属性，包括数据集、组织单位和属性选项组合，用于映射完整的注册。 </td>
 </tr>
 <tr class="odd">
 <td> preheatCache </td>
 <td> 假 |真 </td>
 <td> 是在服务器上保存更改还是只返回导入摘要。 </td>
 </tr>
 <tr class="even">
 <td> dryRun </td>
 <td> 假 |真 </td>
 <td> 子单位是否适用注册 </td>
 </tr>
 <tr class="odd">
 <td> 导入策略 </td>
 <td> 创建 |更新 | CREATE_AND_UPDATE |删除 </td>
 <td> 在服务器上保存所有对象、新对象或更新导入状态。 </td>
 </tr>
 <tr class="even">
 <td>skipExistingCheck </td>
 <td> 假 |真 </td>
 <td> 跳过检查现有的完整注册。提高性能。仅用于空数据库或当要导入的注册不存在时。 </td>
 </tr>
 <tr class="odd">
 <td> 异步 </td>
 <td> 假 |真 </td>
 <td> 指示导入是异步还是同步。前者适用于非常大的导入，因为它确保请求不会超时，尽管它具有显着的性能开销。后者速度更快，但需要连接持续到进程完成。 </td>
 </tr>
 </tbody>
 </table>

### 读取完整的数据集注册 { #webapi_reading_complete_data_sets } 

 <!--DHIS2-SECTION-ID:webapi_reading_complete_data_sets-->

本节说明如何检索数据集的完整性
注册。我们将使用* completeDataSetRegistrations *
资源。使用的查询参数如下：

 <table>
 <caption>数据值设置查询参数</caption>
 <colgroup>
 <col style="width: 18%" />
 <col style="width: 81%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>数据集</td>
 <td>数据集标识符，允许多个数据集</td>
 </tr>
 <tr class="even">
 <td>周期</td>
 <td> ISO格式的期间标识符。允许多个时期。 </td>
 </tr>
 <tr class="odd">
 <td>开始日期</td>
 <td>导出值的时间跨度的开始日期</td>
 </tr>
 <tr class="even">
 <td>结束日期</td>
 <td>导出值的时间跨度的结束日期</td>
 </tr>
 <tr class="odd">
 <td>创建了</td>
 <td>仅包括自给定时间戳记</td>创建的注册
 </tr>
 <tr class="even">
 <td>创建的持续时间</td>
 <td>仅包括在给定期限内创建的注册。格式是&lt;value&gt;&lt;time-unit&gt;，其中所支持的时间单位是&quot;d&quot;，&quot;h&quot;，&quot;m&quot;，&quot;s&quot; <em>（日，时，分，秒）。 </em>时间单位是相对于当前时间的。 </td>
 </tr>
 <tr class="odd">
 <td> orgUnit </td>
 <td>组织单位标识符，可以多次指定。如果给出了orgUnitGroup，则不适用。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitGroup </td>
 <td>组织单位组标识符，可以多次指定。如果给出了orgUnit，则不适用。 </td>
 </tr>
 <tr class="odd">
 <td>儿童</td>
 <td>是否在组织单位的层次结构中包括子级</td>
 </tr>
 <tr class="even">
 <td>限制</td>
 <td>响应中要包括的最大注册数量。 </td>
 </tr>
 <tr class="odd">
 <td> idScheme </td>
 <td>响应中用于元数据对象的标识符属性。 </td>
 </tr>
 <tr class="even">
 <td> dataSetIdScheme </td>
 <td>响应中用于数据集的标识符属性。覆盖idScheme。 </td>
 </tr>
 <tr class="odd">
 <td> orgUnitIdScheme </td>
 <td>响应中用于组织单位的标识符属性。覆盖idScheme。 </td>
 </tr>
 <tr class="even">
 <td> attributeOptionComboIdScheme </td>
 <td>响应中用于属性选项组合的标识符属性。覆盖idScheme。 </td>
 </tr>
 </tbody>
 </table>

可以重复使用dataSet和orgUnit参数以包括
多个数据集和组织单位。

时间段，开始/结束日期，created和createdDuration参数
提供多种方式来设置请求的时间维度，因此仅
一个可以使用。例如，同时设置
开始/结束日期并设置时间段。

请求示例如下所示：

```bash
curl "https://play.dhis2.org/demo/api/33/completeDataSetRegistrations?dataSet=pBOMPrpg1QX
  &dataSet=pBOMPrpg1QX&startDate=2014-01-01&endDate=2014-01-31&orgUnit=YuQRtpLP10I
  &orgUnit=vWbkYPRmKyS&children=true"
  -H "Accept:application/xml" -u admin:district
```

您可以使用* xml *和* json *格式获取响应。您可以指出
您喜欢通过* Accept * HTTP标头使用哪种响应格式
在上面的示例中。对于xml，请使用* application / xml *;对于json你
使用* application / json *。

### 未完成的数据集 { #webapi_uncompleting_data_sets } 

 <!--DHIS2-SECTION-ID:webapi_uncompleting_data_sets-->

本节说明如何注销数据的完整性
放。要取消填写数据集，您将与
completeDataSetRegistrations资源：

    / api / 33 / completeDataSetRegistrations

此资源支持* DELETE *取消注册。以下查询
支持的参数：

 <table>
 <caption>完整数据集注册查询参数</caption>
 <colgroup>
 <col style="width: 16%" />
 <col style="width: 18%" />
 <col style="width: 64%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ds </td>
 <td>是</td>
 <td>数据集标识符</td>
 </tr>
 <tr class="even">
 <td> pe </td>
 <td>是</td>
 <td>期间标识符</td>
 </tr>
 <tr class="odd">
 <td> ou </td>
 <td>是</td>
 <td>组织单位标识符</td>
 </tr>
 <tr class="even">
 <td> cc </td>
 <td>否（必须与cp结合使用）</td>
 <td>属性组合标识符（用于锁定检查）</td>
 </tr>
 <tr class="odd">
 <td> cp </td>
 <td>否（必须与cp结合使用）</td>
 <td>属性选项标识符，用;分隔对于多个值（用于锁定检查）</td>
 </tr>
 <tr class="even">
 <td>多Ou </td>
 <td>否（默认为false）</td>
 <td>注册是否适用于子单元</td>
 </tr>
 </tbody>
 </table>

## 数据审批 { #webapi_data_approval } 

 <!--DHIS2-SECTION-ID:webapi_data_approval-->

本节说明如何批准，取消批准和检查批准
状态使用* dataApprovals *资源。批准已按数据完成
批准工作流，期间，组织单位和属性选项组合。

数据批准工作流与定义以下期间的期间类型相关联
批准频率，可选类别组合，数据批准
工作流适用的级别和涵盖的数据集
工作流程并用于数据收集。

    / api / 33 / dataApprovals

### 获取批准状态 { #webapi_data_approval_get_status } 

 <!--DHIS2-SECTION-ID:webapi_data_approval_get_status-->

要获取数据集的批准信息，您可以发出GET请求：

    / api / dataApprovals？wf = rIUL3hYOjJc＆pe = 201801＆ou = YuQRtpLP10I

 <table style="width:100%;">
 <caption> 数据审批查询参数 </caption>
 <colgroup>
 <col style="width: 16%" />
 <col style="width: 18%" />
 <col style="width: 64%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 需要 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> wf </td>
 <td> 是 </td>
 <td> 数据审批工作流标识符 </td>
 </tr>
 <tr class="even">
 <td> pe </td>
 <td> 是 </td>
 <td> 期间标识符 </td>
 </tr>
 <tr class="odd">
 <td> 或 </td>
 <td> 是 </td>
 <td> 组织单位标识符 </td>
 </tr>
 <tr class="even">
 <td> aoc </td>
 <td> 否 </td>
 <td> 属性选项组合标识符 </td>
 </tr>
 </tbody>
 </table>

> **Note**
>
> For backward compatibility, the parameter `ds` for data set may be given instead of `wf` for workflow in this and other data approval requests as described below. If the data set is given, the workflow associated with that data set will be used.

这将产生类似于以下的响应：

```json
{
  "mayApprove": false,
  "mayUnapprove": false,
  "mayAccept": false,
  "mayUnaccept": false,
  "state": "UNAPPROVED_ELSEWHERE"
}
```

返回的参数是：

 <table>
 <caption>数据批准返回的参数</caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 75%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>返回参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>可以批准</td>
 <td>当前用户是否可以批准此数据选择。 </td>
 </tr>
 <tr class="even">
 <td>可能不批准</td>
 <td>当前用户是否可能不批准此数据选择。 </td>
 </tr>
 <tr class="odd">
 <td>可以接受</td>
 <td>当前用户是否可以接受此数据选择。 </td>
 </tr>
 <tr class="even">
 <td>可能无法接受</td>
 <td>当前用户是否可能不接受此数据选择。 </td>
 </tr>
 <tr class="odd">
 <td>状态</td>
 <td>下表中的数据批准状态之一。 </td>
 </tr>
 </tbody>
 </table>

 <table>
 <caption> 数据批准状态 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 66%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 状态 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 不批准 </td>
 <td> 数据批准不适用于此选择。 （数据既未获批准也未获批准。）</td>
 </tr>
 <tr class="even">
 <td> UNAPPROVED_WAITING </td>
 <td> 数据可以为此选择批准，但在准备批准之前正在等待一些较低级别的批准。 </td>
 </tr>
 <tr class="odd">
 <td> UNAPPROVED_ELSEWHERE </td>
 <td> 数据未经批准，正在其他地方等待批准（此处不可批准。）</td>
 </tr>
 <tr class="even">
 <td> UNAPPROVED_READY </td>
 <td> 数据未经批准，已准备好为此选择批准。 </td>
 </tr>
 <tr class="odd">
 <td> APPROVED_HERE </td>
 <td> 数据已获批准，此处已获批准（因此此处可能未获批准。） </td>
 </tr>
 <tr class="even">
 <td> APPROVED_ELSEWHERE </td>
 <td> 数据已获批准，但此处未获批准（因此此处不能未获批准。）这包括以下情况：
 <ul>
 <li> <p> 数据在更高级别获得批准。 </p> </li>
 <li> <p> 数据被批准用于更广泛的类别选项。 </p> </li>
 <li> <p> 选定期间内所有子期间的数据均获批准。 </p> </li>
 </ul>
在前两种情况下，只有一个数据审批对象涵盖了选择。在第三种情况下没有。 </td>
 </tr>
 <tr class="odd">
 <td> 接受_这里 </td>
 <td> 此处已批准并接受数据（因此此处可能未获批准。） </td>
 </tr>
 <tr class="even">
 <td> ACCEPTED_ELSEWHERE </td>
 <td> 数据被批准和接受，但在其他地方。 </td>
 </tr>
 </tbody>
 </table>

请注意，在查询数据批准状态时，您可以指定
查询参数的任意组合。您指定的组合
不需要描述要一次批准数据的地方
批准级别。例如：

  - 组织单位可能未处于批准级别。这
    批准状态取决于是否在
    组织单位祖先的批准级别。

  - 您可以指定单个属性类别选项。批准
    状态由是否批准属性数据确定
    类别选项组合，其中包括一个或多个
    选项。

  - 您可以指定的时间段长于
    输入并批准数据的数据集。批准
    状态取决于是否为所有
    您指定期间内的数据集期间。

对于与类别组合相关联的数据集，您可能需要
获取单个属性选项组合的数据批准记录
来自以下资源：

    GET / api / dataApprovals / categoryOptionCombos？wf = rIUL3hYOjJc＆pe = 201801＆ou = YuQRtpLP10I

### 批量获取批准状态 { #bulk-get-approval-status } 

要获取多个批准状态的列表，可以发出类似于以下内容的GET请求：

    GET / api / dataApprovals / multiple？wf = rIUL3hYOjJc＆
      pe = 201801,201802＆ou = YuQRtpLP10I

参数wf，pe，ou和aoc与获得单个批准状态相同，不同之处在于，您可以为每个参数提供一个或多个值的逗号分隔列表。

这将为您提供一个包含批准参数和状态列表的响应，如下所示：

```json
[
  {
    "aoc": "HllvX50cXC0",
    "pe": "201801",
    "level": "KaTJLhGmU95",
    "ou": "YuQRtpLP10I",
    "permissions": {
      "mayApprove": false,
      "mayUnapprove": true,
      "mayAccept": true,
      "mayUnaccept": false,
      "mayReadData": true
    },
    "state": "APPROVED_HERE",
    "wf": "rIUL3hYOjJc"
  },
  {
    "aoc": "HllvX50cXC0",
    "pe": "201802",
    "ou": "YuQRtpLP10I",
    "permissions": {
      "mayApprove": true,
      "mayUnapprove": false,
      "mayAccept": false,
      "mayUnaccept": false,
      "mayReadData": true
    },
    "state": "UNAPPROVED_READY",
    "wf": "rIUL3hYOjJc"
  }
]
```

返回的参数是：
|返回参数描述
| ：-| ：-
| aoc |属性选项组合标识符|
| pe |期间标识符|
| ou |组织单位标识符|
|权限|权限：“ mayApprove”，“ mayUnapprove”，“ mayAccept”，“ mayUnaccept”和“ mayReadData”（与获得单一批准状态的定义相同）。
|州|数据批准状态之一（与获取单个批准状态相同）。
| wf |数据批准工作流标识符|

### 批准数据 { #webapi_data_approval_approve_data } 

 <!--DHIS2-SECTION-ID:webapi_data_approval_approve_data-->

要批准数据，您可以向 *dataApprovals* 发出 *POST* 请求
资源。要取消批准数据，您可以发送*DELETE*请求到数据批准资源。

    发布删除/ api / 33 / dataApprovals

要接受已经批准的数据，您可以发出* POST *请求
到* dataAcceptances *资源。要取消接受数据，您可以发出
对* dataAcceptances *资源的* DELETE *请求。

    POST DELETE / api / 33 / dataAcceptances

这些请求包含以下参数：

 <table style="width:100%;">
 <caption> 数据审批动作参数 </caption>
 <colgroup>
 <col style="width: 16%" />
 <col style="width: 18%" />
 <col style="width: 64%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 动作参数 </th>
 <th> 需要 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> wf </td>
 <td> 是 </td>
 <td> 数据审批工作流标识符 </td>
 </tr>
 <tr class="even">
 <td> pe </td>
 <td> 是 </td>
 <td> 期间标识符 </td>
 </tr>
 <tr class="odd">
 <td> 或 </td>
 <td> 是 </td>
 <td> 组织单位标识符 </td>
 </tr>
 <tr class="even">
 <td> aoc </td>
 <td> 否 </td>
 <td> 属性选项组合标识符 </td>
 </tr>
 </tbody>
 </table>

请注意，与查询数据批准状态不同，必须指定
与选择的数据相对应的参数
得到正式认可的。特别是，以下两个条件必须为真：

  - 组织单位的级别必须由批准级别指定
    在工作流程中。

  - 指定的时间段必须与
    工作流程。

### 批量批准数据 { #webapi_data_approval_bulk_approve_data } 

 <!--DHIS2-SECTION-ID:webapi_data_approval_bulk_approve_data-->

您可以通过发布到批准大量数据记录
`/api/dataApprovals/approvals` 资源。

    POST / api / 33 / dataApprovals / approvals

您可以通过发布到
`/api/dataApprovals/unapprovals` 资源。

    POST / api / 33 / dataApprovals /未批准

您可以通过发布到
`/api/dataAcceptances/acceptances` 资源。

    POST / api / 33 / dataAcceptances / acceptances

您可以通过发布到
`/api/dataAcceptances/unacceptances` 资源。

    POST / api / 33 / dataAcceptances / unacceptances

批准有效负载受JSON支持，如下所示：

```json
{
  "wf": [
    "pBOMPrpg1QX", "lyLU2wR22tC"
  ],
  "pe": [
    "201601", "201602"
  ],
  "approvals": [
    {
      "ou": "cDw53Ej8rju",
      "aoc": "ranftQIH5M9"
    }, 
    {
      "ou": "cDw53Ej8rju",
      "aoc": "fC3z1lcAW5x"
    }
  ]
}
```

## 稽核 { #webapi_auditing } 

 <!--DHIS2-SECTION-ID:webapi_auditing-->

DHIS2对聚合的所有更新和删除进行自动审核
数据值，跟踪的实体数据值，跟踪的实体属性
值和数据批准。本部分说明了如何获取此内容
数据。

### 汇总数据价值审核 { #webapi_auditing_aggregate_audits } 

 <!--DHIS2-SECTION-ID:webapi_auditing_aggregate_audits-->

汇总数据值审核的端点位于
* / api / audits / dataValue *，并且可用参数显示在
下表。

 <table>
 <caption> 汇总数据值查询参数 </caption>
 <colgroup>
 <col style="width: 12%" />
 <col style="width: 14%" />
 <col style="width: 72%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ds </td>
 <td> 数据集 </td>
 <td> 要从中获取数据元素的一个或多个数据集标识符。 </td>
 </tr>
 <tr class="even">
 <td> 德 </td>
 <td> 数据元素 </td>
 <td> 一个或多个数据元素标识符。 </td>
 </tr>
 <tr class="odd">
 <td> pe </td>
 <td> ISO 周期 </td>
 <td> 一个或多个句点 ISO 标识符。 </td>
 </tr>
 <tr class="even">
 <td> 或 </td>
 <td> 组织单位 </td>
 <td> 一个或多个组织单位标识符。 </td>
 </tr>
 <tr class="odd">
 <td> 审计类型 </td>
 <td> 更新 |删除 </td>
 <td> 按审计类型过滤。 </td>
 </tr>
 <tr class="even">
 <td> 跳过分页 </td>
 <td> 假 |真 </td>
 <td> 打开/关闭分页 </td>
 </tr>
 <tr class="odd">
 <td> 页面 </td>
 <td> 1（默认）</td>
 <td> 如果启用分页，此参数决定显示哪个页面 </td>
 </tr>
 </tbody>
 </table>

获取ID为“ lyLU2wR22tC”的数据集的所有审核：

    / api / 33 / audits / dataValue？ds = lyLU2wR22tC

### 跟踪实体数据价值审核 { #webapi_tracked_entity_data_value_audits } 

 <!--DHIS2-SECTION-ID:webapi_tracked_entity_data_value_audits-->

跟踪的实体数据值审核的端点位于
* / api / audits / trackedEntityDataValue *，并且可用参数为
显示在下表中。

 <table>
 <caption> 跟踪实体数据值查询参数 </caption>
 <colgroup>
 <col style="width: 12%" />
 <col style="width: 16%" />
 <col style="width: 71%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 德 </td>
 <td> 数据元素 </td>
 <td> 一个或多个数据元素标识符。 </td>
 </tr>
 <tr class="even">
 <td> ps </td>
 <td> 程序阶段实体 </td>
 <td> 一个或多个程序阶段实例标识符。 </td>
 </tr>
 <tr class="odd">
 <td> 审计类型 </td>
 <td> 更新 |删除 </td>
 <td> 按审计类型过滤。 </td>
 </tr>
 <tr class="even">
 <td> 跳过分页 </td>
 <td> 假 |真 </td>
 <td> 打开/关闭分页 </td>
 </tr>
 <tr class="odd">
 <td> 页面 </td>
 <td> 1（默认）</td>
 <td> 如果启用分页，此参数决定显示哪个页面 </td>
 </tr>
 </tbody>
 </table>

获取所有具有数据元素ID eMyVanycQSC或qrur9Dvnyt5的审计：

    / api / 33 / audits / trackedEntityDataValue？de = eMyVanycQSC＆de = qrur9Dvnyt5

### 跟踪实体属性值审核 { #webapi_tracked_entity_attribute_value_audits } 

 <!--DHIS2-SECTION-ID:webapi_tracked_entity_attribute_value_audits-->

跟踪的实体属性值审核的端点位于
* / api / audits / trackedEntityAttributeValue *，以及可用参数
如下表所示。

 <table>
 <caption>跟踪实体属性值查询参数</caption>
 <colgroup>
 <col style="width: 12%" />
 <col style="width: 16%" />
 <col style="width: 70%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>茶</td>
 <td>跟踪的实体属性</td>
 <td>一个或多个跟踪的实体属性标识符。 </td>
 </tr>
 <tr class="even">
 <td> te </td>
 <td>跟踪的实体实例</td>
 <td>一个或多个跟踪的实体实例标识符。 </td>
 </tr>
 <tr class="odd">
 <td>审核类型</td>
 <td>更新|删除</td>
 <td>按审核类型过滤。 </td>
 </tr>
 <tr class="even">
 <td> skipPaging </td>
 否| <td>假|真</td>
 <td>打开/关闭分页</td>
 </tr>
 <tr class="odd">
 <td>页面</td>
 <td> 1（默认）</td>
 <td>如果启用了分页，则此参数决定显示哪个页面</td>
 </tr>
 </tbody>
 </table>

获取所有具有ID VqEFza8wbwA的属性的审核：

    / api / 33 / audits / trackedEntityAttributeValue？tea = VqEFza8wbwA

### 跟踪实体实例审核 { #webapi_tracked_entity_instance_audits } 

 <!--DHIS2-SECTION-ID:webapi_tracked_entity_instance_audits-->

为跟踪的实体实例启用审核后（通过设置
将跟踪的实体类型的allowAuditLog设置为true），所有读取和搜索
记录操作。访问审核日志的端点是
api / audits / trackedEntityInstance。以下是可用参数
与该端点进行交互。

 <table>
 <caption> 被跟踪实体实例审计查询参数 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> tei </td>
 <td> 跟踪实体实例 </td>
 <td> 一个或多个被跟踪实体实例标识符 </td>
 </tr>
 <tr class="even">
 <td> 用户 </td>
 <td> 用户 </td>
 <td> 一个或多个用户标识符 </td>
 </tr>
 <tr class="odd">
 <td> 审计类型 </td>
 <td> 搜索 |阅读 </td>
 <td> 审核类型以筛选 </td>
 </tr>
 <tr class="even">
 <td> 开始日期 </td>
 <td> 开始日期 </td>
 <td> yyyy-mm-dd 格式的审计过滤的开始日期。 </td>
 </tr>
 <tr class="odd">
 <td> 结束日期 </td>
 <td> 结束日期 </td>
 <td> yyyy-mm-dd 格式的审计过滤的结束日期。 </td>
 </tr>
 <tr class="even">
 <td> 跳过分页 </td>
 <td> 假 |真 </td>
 <td> 打开/关闭分页。 </td>
 </tr>
 <tr class="odd">
 <td> 页面 </td>
 <td> 1（默认）</td>
 <td> 要请求的特定页面。 </td>
 </tr>
 <tr class="even">
 <td> 页面大小 </td>
 <td> 50（默认）</td>
 <td> 页面大小。 </td>
 </tr>
 </tbody>
 </table>

使用READ类型获取所有跟踪的实体实例审核
startDate = 2018-03-01和endDate = 2018-04-24，页面大小为5：

    /api/33/audits/trackedEntityInstance.json?startDate=2018-03-01
      ＆endDate = 2018-04-24＆auditType = READ＆pageSize = 5

### 入学审核 { #webapi_enrollment_audits } 

 <!--DHIS2-SECTION-ID:webapi_enrollment_audits-->

为注册启用审核后（通过设置allowAuditLog的
跟踪器程序为true），则记录所有读取操作。这
访问审核日志的端点是api / audits / enrollment。以下是
与该端点交互的可用参数。

 <table>
 <caption> 注册审核查询参数 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> zh </td>
 <td> 注册 </td>
 <td> 一个或多个被跟踪实体实例标识符 </td>
 </tr>
 <tr class="even">
 <td> 用户 </td>
 <td> 用户 </td>
 <td> 一个或多个用户标识符 </td>
 </tr>
 <tr class="odd">
 <td> 开始日期 </td>
 <td> 开始日期 </td>
 <td> yyyy-mm-dd 格式的审计过滤的开始日期。 </td>
 </tr>
 <tr class="even">
 <td> 结束日期 </td>
 <td> 结束日期 </td>
 <td> yyyy-mm-dd 格式的审计过滤的结束日期。 </td>
 </tr>
 <tr class="odd">
 <td> 跳过分页 </td>
 <td> 假 |真 </td>
 <td> 打开/关闭分页。 </td>
 </tr>
 <tr class="even">
 <td> 页面 </td>
 <td> 1（默认）</td>
 <td> 要请求的特定页面。 </td>
 </tr>
 <tr class="odd">
 <td> 页面大小 </td>
 <td> 50（默认）</td>
 <td> 页面大小。 </td>
 </tr>
 </tbody>
 </table>

使用startDate = 2018-03-01获得所有注册审核
endDate = 2018-04-24，页面大小为5：

    /api/audits/enrollment.json?startDate=2018-03-01&endDate=2018-04-24&pageSize=5

获取用户管理员的所有注册审核：

    /api/audits/enrollment.json?user=admin

### 数据审批审核 { #data-approval-audits } 

数据批准审核的端点位于
/ api / audits / dataApproval，并且可用参数显示在
下表。

 <table>
 <caption> 数据审批查询参数 </caption>
 <colgroup>
 <col style="width: 12%" />
 <col style="width: 16%" />
 <col style="width: 70%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> dal </td>
 <td> 数据批准级别 </td>
 <td> 一个或多个数据批准级别标识符。 </td>
 </tr>
 <tr class="even">
 <td> wf </td>
 <td> 工作流程 </td>
 <td> 一个或多个数据审批工作流标识符。 </td>
 </tr>
 <tr class="odd">
 <td> 或 </td>
 <td> 组织单位 </td>
 <td> 一个或多个组织单位标识符。 </td>
 </tr>
 <tr class="even">
 <td> aoc </td>
 <td> 属性选项组合 </td>
 <td> 一个或多个属性选项组合标识符。 </td>
 </tr>
 <tr class="odd">
 <td> 开始日期 </td>
 <td> 开始日期 </td>
 <td> yyyy-mm-dd 格式的批准开始日期。 </td>
 </tr>
 <tr class="even">
 <td> 结束日期 </td>
 <td> 结束日期 </td>
 <td> 批准的结束日期，格式为 yyyy-mm-dd。 </td>
 </tr>
 <tr class="odd">
 <td> 跳过分页 </td>
 <td> 假 |真 </td>
 <td> 打开/关闭分页 </td>
 </tr>
 <tr class="even">
 <td> 页面 </td>
 <td> 1（默认）</td>
 <td> <p> 如果启用分页，此参数决定显示哪个页面。 </p> </td>
 </tr>
 </tbody>
 </table>

获取数据批准工作流RwNpkAM7Hw7的所有审核：

    / api / 33 / audits / dataApproval？wf = RwNpkAM7Hw7

## 讯息对话 { #webapi_message_conversations } 

 <!--DHIS2-SECTION-ID:webapi_message_conversations-->

DHIS2具有一种用于出于以下目的发送消息的机制：
用户反馈，通知和向用户提供的一般信息。留言内容
被分组为对话。与消息对话进行交互
您可以将POST和GET请求发送到* messageConversations *
资源。

    / api / 33 / messageConversations

邮件已传递到DHIS2邮件收件箱，但也可以发送
以短信的形式发送到用户的电子邮件地址和手机。在这个例子中
我们将看到如何利用Web API发送，阅读和管理
消息。我们将假装为* DHIS2管理员*用户并发送
给* Mobile *用户的消息。然后，我们将假装成为移动设备
用户并阅读我们的新消息。此后，我们将管理管理员
通过标记和删除消息来使用户收件箱。

### 撰写和阅读邮件 { #webapi_writing_messages } 

 <!--DHIS2-SECTION-ID:webapi_writing_messages-->

发送和阅读消息时需要与之交互的资源
是* messageConversations *资源。我们首先访问Web API
我们在<http://play.dhis2.org/demo/api>找到并遵循的入口点
指向* messageConversations *资源的链接，位于
 <http://play.dhis2.org/demo/api/messageConversations>。说明
告诉我们可以使用POST请求来创建新消息，方法是
以下XML格式可发送给多个用户：

```xml
<message xmlns="http://dhis2.org/schema/dxf/2.0">
  <subject>This is the subject</subject>
  <text>This is the text</text>
  <users>
    <user id="user1ID" />
    <user id="user2ID" />
    <user id="user3ID" />
  </users>
</message>
```

为了发送给一个或多个用户组中的所有用户，我们可以
使用：

```xml
<message xmlns="http://dhis2.org/schema/dxf/2.0">
  <subject>This is the subject</subject>
  <text>This is the text</text>
  <userGroups>
    <userGroup id="userGroup1ID" />
    <userGroup id="userGroup2ID" />
    <userGroup id="userGroup3ID" />
  </userGroups>
</message>
```

为了发送给连接到一个或多个组织单位的所有用户，我们
可以使用：

```xml
<message xmlns="http://dhis2.org/schema/dxf/2.0">
  <subject>This is the subject</subject>
  <text>This is the text</text>
  <organisationUnits>
    <organisationUnit id="ou1ID" />
    <organisationUnit id="ou2ID" />
    <organisationUnit id="ou3ID" />
  </organisationUnits>
</message>
```

Since we want to send a message to our friend the mobile user we need to
look up her identifier. We do so by going to the Web API entry point and
follow the link to the *users* resource at `/api/users`. We continue by 
following link to the mobile user at `/api/users/PhzytPW3g2J` where we learn
that her identifier is *PhzytPW3g2J*. We are now ready to put our XML
message together to form a message where we want to ask the mobile user
whether she has reported data for January 2014:

```xml
<message xmlns="http://dhis2.org/schema/dxf/2.0">
  <subject>Mortality data reporting</subject>
  <text>Have you reported data for the Mortality data set for January 2014?</text>
  <users>
    <user id="PhzytPW3g2J" />
  </users>
</message>
```

为了对此进行测试，我们将XML内容保存到名为* message.xml *的文件中。
我们使用cURL将消息调度到DHIS2演示实例，
指示内容类型为XML并通过* admin *进行身份验证
用户：

```bash
curl -d @message.xml "https://play.dhis2.org/demo/api/messageConversations"
  -H "Content-Type:application/xml" -u admin:district -X POST
```

JSON和POST命令中的相应有效负载如下所示：

```json
{
  "subject": "Hey",
  "text": "How are you?",
  "users": [
    {
      "id": "OYLGMiazHtW"
    },
    {
      "id": "N3PZBUlN8vq"
    }
  ],
  "userGroups": [
    {
      "id": "ZoHNWQajIoe"
    }
  ],
  "organisationUnits": [
    {
      "id": "DiszpKrYNg8"
    }
  ]
}
```

```bash
curl -d @message.json "https://play.dhis2.org/demo/api/33/messageConversations"
  -H "Content-Type:application/json" -u admin:district -X POST
```

如果一切顺利，我们会收到* 201 Created * HTTP状态代码。另外，注意
我们收到一个* Location * HTTP标头，该值通知我们
新创建的消息对话资源的URL-可以是
消费者用来执行进一步的操作。

我们现在将假装是移动用户并阅读消息
刚刚通过向 *messageConversations* 发送 GET 请求发送
资源。我们提供一个带有 *application/xml* 的 *Accept* 标头作为
表示我们对 XML 资源感兴趣的值
表示，我们以*移动*用户身份进行身份验证：

```bash
curl "https://play.dhis2.org/demo/api/33/messageConversations"
  -H "Accept:application/xml" -u mobile:district
```

作为响应，我们得到以下XML：

```xml
<messageConversations xmlns="http://dhis2.org/schema/dxf/2.0"
  link="https://play.dhis2.org/demo/api/messageConversations">
  <messageConversation name="Mortality data reporting" id="ZjHHSjyyeJ2"
    link="https://play.dhis2.org/demo/api/messageConversations/ZjHHSjyyeJ2"/>
  <messageConversation name="DHIS2 version 2.7 is deployed" id="GDBqVfkmnp2"
    link="https://play.dhis2.org/demo/api/messageConversations/GDBqVfkmnp2"/>
</messageConversations>
```

从响应中，我们能够读取新发送的标识符
消息是* ZjHHSjyyeJ2 *。请注意，指向特定链接
资源是嵌入式的，可以阅读完整的资源
信息。知道后，我们可以直接回复现有的消息对话
通过将消息文本包含为请求有效负载来实现URL。我们
现在可以构造一个用于发送答复的URL：

```bash
curl -d "Yes the Mortality data set has been reported"
  "https://play.dhis2.org/demo/api/messageConversations/ZjHHSjyyeJ2"
  -H "Content-Type:text/plain" -u mobile:district -X POST
```

如果一切按计划进行，您将收到* 200 OK *状态代码。

在2.30中，我们添加了URL搜索参数：

    queryString =？＆queryOperator =？

过滤器搜索主题，文本和发件人中的邮件是否匹配
对话。默认查询运算符是* token *，但是其他运算符
可以在查询中定义。

### 管理讯息 { #webapi_managing_messages } 

 <!--DHIS2-SECTION-ID:webapi_managing_messages-->

随着用户接收和发送消息，对话将开始堆积
在收件箱中，最终变得难以追踪。我们现在
看一下通过删除和标记来管理用户的邮件收件箱
通过Web-API进行对话。我们将通过执行一些
“ DHIS管理员”用户的收件箱中进行维护。

首先，让我们看一下从收件箱中删除一些消息。是
请注意，此处描述的所有删除操作仅会删除
用户和消息对话之间的关系。实际上
这意味着我们不会删除消息本身（或任何
内容），但只是从中删除消息线程
用户，使其不再列在
`/ api / messageConversations`资源。

To remove a message conversation from a users inbox we need to issue a
*DELETE* request to the resource identified by the id of the message
conversation and the participating user. For example, to remove the user
with id `xE7jOejl9FI` from the conversation with id `jMe43trzrdi`:

```bash
curl "https://play.dhis2.org/demo/api/33/messageConversations/jMe43trzrdi
```

如果请求成功，服务器将回复* 200 OK *。这
响应主体包含XML或JSON对象（根据accept
请求的标头），其中包含已删除用户的ID。

```json
{
  "removed" : ["xE7jOejl9FI"]
}
```

失败时，返回的对象将包含消息有效负载
描述错误。

```json
{
  "message" : "No user with uid: dMV6G0tPAEa"
}
```

细心的读者将已经注意到该对象已返回
在我们的示例中，成功时实际上是一个ID列表（包含一个
入口）。这是由于端点还支持批量删除。这
对相同的* messageConversations *资源进行了请求，但随后
语义略有不同。对于批处理操作，对话ID
作为查询字符串参数给出。以下示例删除了两个
当前用户的单独消息对话：

```bash
curl "https://play.dhis2.org/demo/api/messageConversations?mc=WzMRrCosqc0&mc=lxCjiigqrJm"
  -X DELETE -u admin:district
```

如果您有足够的权限，可以在上删除对话
通过提供可选的用户ID参数代表另一个用户。

```bash
curl "https://play.dhis2.org/demo/api/messageConversations?mc=WzMRrCosqc0&mc=lxCjiigqrJm&user=PhzytPW3g2J"
  -X DELETE -u admin:district
```

如前所述，批量删除将返回与相同的消息格式
单一操作。删除的对象列表将反映成功
执行清除。部分错误的请求（即不存在的ID）
因此不会取消整个批处理操作。

消息带有布尔值* read *。这样可以跟踪是否
用户是否已看到（打开）消息。在典型的应用中
场景（例如DHIS2 Web门户），消息将被标记为已读为
用户第一次打开它时。但是，用户可能想要
管理其邮件的已读或未读状态，以保持
某些对话的跟踪。

标记消息已读或未读遵循与批处理类似的语义
移除，并且还支持批量操作。将消息标记为已读
我们向 `messageConversations/read` 资源发出一个 *POST*
包含一个或多个消息 ID 的请求正文。将消息标记为
未读我们向 `messageConversations/unread` 发出相同的请求
资源。与删除的情况一样，可选的 *user* 请求参数
可以给。

让我们将几条消息标记为当前用户已读：

```bash
curl "https://play.dhis2.org/dev/api/messageConversations/read"
  -d '["ZrKML5WiyFm","Gc03smoTm6q"]' -X POST
  -H "Content-Type: application/json" -u admin:district
```

响应为* 200 OK *，带有以下JSON正文：

```json
{
  "markedRead": ["ZrKML5WiyFm", "Gc03smoTm6q"]
}
```

您可以将收件人添加到现有的消息对话中。该资源位于：

    / api / 33 / messageConversations / id /收件人

此资源的选项是用户，用户组和
组织单位。该请求应如下所示：

```json
{
  "users": [
    {
      "id": "OYLGMiazHtW"
    },
    {
      "id": "N3PZBUlN8vq"
    }
  ],
  "userGroups": [
    {
      "id": "DiszpKrYNg8"
    }
  ],
  "organisationUnits": [
    {
      "id": "DiszpKrYNg8"
    }
  ]
}

```

### 邮件附件 { #webapi_message_attachments } 

 <!--DHIS2-SECTION-ID:webapi_message_attachments-->

创建带有附件的邮件分为两个步骤：上传
文件添加到* attachments *资源，然后包含一个或多个
创建新邮件时的附件ID。

对* attachments *资源的POST请求会将文件上传到
服务器。

```
curl -F file=@attachment.png“ https://play.dhis2.org/demo/api/messageConversations/attachments”
  -u管理员：区
```

该请求返回代表附件的对象。的编号
创建消息时必须使用此对象以链接
邮件附件。

```json
{
  "created": "2018-07-20T16:54:18.210",
  "lastUpdated": "2018-07-20T16:54:18.212",
  "externalAccess": false,
  "publicAccess": "--------",
  "user": {
    "name": "John Traore",
    "created": "2013-04-18T17:15:08.407",
    "lastUpdated": "2018-03-09T23:06:54.512",
    "externalAccess": false,
    "displayName": "John Traore",
    "favorite": false,
    "id": "xE7jOejl9FI"
  },
  "lastUpdatedBy": {
    "id": "xE7jOejl9FI",
    "name": "John Traore"
  },
  "favorite": false,
  "id": "fTpI4GOmujz"
}
```

创建新消息时，可以在请求正文中传递ID
将上传的文件链接到正在创建的消息。

```json
{
  "subject": "Hey",
  "text": "How are you?",
  "users": [
    {
      "id": "OYLGMiazHtW"
    },
    {
      "id": "N3PZBUlN8vq"
    }
  ],
  "userGroups": [
    {
      "id": "ZoHNWQajIoe"
    }
  ],
  "organisationUnits": [
    {
      "id": "DiszpKrYNg8"
    }
  ],
  "attachments": [
    "fTpI4GOmujz",
    "h2ZsOxMFMfq"
  ]
}
```

回复邮件时，可以将ID作为请求传递
范围。

```bash
curl -d "Yes the Mortality data set has been reported"
  "https://play.dhis2.org/demo/api/33/messageConversations/ZjHHSjyyeJ2?attachments=fTpI4GOmujz,h2ZsOxMFMfq"
  -H "Content-Type:text/plain" -u mobile:district -X POST
```

创建带有附件的邮件后，附件文件
可以通过对以下URL的GET请求进行访问：

    / api / messageConversations / <mcv-id> / <msg-id> / attachments / <attachment-id>

其中<mcv-id>是*消息对话* ID，<msg-id>是
包含附件且<attachment-id>的* message *是
特定*邮件附件*的ID。

### 票证和验证结果通知 { #webapi_messaging_tickets } 

 <!--DHIS2-SECTION-ID:webapi_messaging_tickets-->

您可以使用“写反馈”工具来创建故障单和消息。
票证和消息之间的唯一区别是您可以给
票证的状态和优先级。设置状态：

    POST / api / messageConversations / <uid> / status

设置优先级：

    POST / api / messageConversations / <uid> / priority

在2.29版中，验证分析生成的消息现在也可用于
状态和优先级属性。默认情况下，由
验证分析将继承验证规则的优先级
问题，或者如果消息包含多个，则为最高重要性
规则。

在2.30中，验证规则可以在票证分配给任何用户
仍然需要在系统的反馈接收者中分配给用户
团体。

 <table>
 <caption> 有效状态和优先级值的列表 </caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 状态 </th>
 <th> 优先级 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 打开 </td>
 <td> 低 </td>
 </tr>
 <tr class="even">
 <td> 待定 </td>
 <td> 中等 </td>
 </tr>
 <tr class="odd">
 <td> 无效 </td>
 <td> 高 </td>
 </tr>
 <tr class="even">
 <td> 已解决 </td>
 <td> </td>
 </tr>
 </tbody>
 </table>

您还可以在票证中添加内部消息，该消息只能看到
由具有“管理票证”权限的用户使用。创建一个内部
答复，包括“内部”参数，并将其设置为

```bash
curl -d "This is an internal message"
  "https://play.dhis2.org/demo/api/33/messageConversations/ZjHHSjyyeJ2?internal=true"
  -H "Content-Type:text/plain" -u admin:district -X POST
```

## 释义 { #webapi_interpretations } 

 <!--DHIS2-SECTION-ID:webapi_interpretations-->

对于与DHIS2中的数据分析相关的资源，例如数据透视表，
图表，地图，事件报告和事件图表，您可以编写和共享
数据解释。解释可以是评论，问题，
关于数据报告或可视化的观察或解释。

    / api /解释

### 阅读口译 { #webapi_reading_interpretations } 

 <!--DHIS2-SECTION-ID:webapi_reading_interpretations-->

要阅读解释，我们将与
* / api / interpretations *资源。典型的GET请求使用字段
过滤看起来像这样：

    GET / api / interpretations？fields = *，comments [id，text，user，mentions]

JSON响应格式的输出可能如下所示（其他
为简洁起见，省略了以下字段）：

```json
{
  "interpretations": [
    {
      "id": "XSHiFlHAhhh",
      "created": "2013-05-30T10:24:06.181+0000",
      "text": "Data looks suspicious, could be a data entry mistake.",
      "type": "REPORT_TABLE",
      "likes": 2,
      "user": {
        "id": "uk7diLujYif"
      },
      "reportTable": {
        "id": "LcSxnfeBxyi"
      }
    }, {
      "id": "kr4AnZmYL43",
      "created": "2013-05-29T14:47:13.081+0000",
      "text": "Delivery rates in Bo looks high.",
      "type": "CHART",
      "likes": 3,
      "user": {
        "id": "uk7diLujYif"
      },
      "chart": {
        "id": "HDEDqV3yv3H"
      },
      "mentions": [
        {
          "created": "2018-06-25T10:25:54.498",
          "username": "boateng"
        }
      ],
      "comments": [
        {
          "id": "iB4Etq8yTE6",
          "text": "This report indicates a surge.",
          "user": {
            "id": "B4XIfwOcGyI"
          }
        },
        {
          "id": "iB4Etq8yTE6",
          "text": "Likely caused by heavy rainfall.",
          "user": {
            "id": "B4XIfwOcGyI"
          }
        }, 
        {
          "id": "SIjkdENan8p",
          "text": "Have a look at this @boateng.",
          "user": {
            "id": "xE7jOejl9FI"
          },
          "mentions": [
            {
              "created": "2018-06-25T10:03:52.316",
              "username": "boateng"
            }
          ]
        }
      ]
    }
  ]
}
```

 <table>
 <caption>解释字段</caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 75%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>字段</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> id </td>
 <td>解释标识符。 </td>
 </tr>
 <tr class="even">
 <td>创建了</td>
 <td>创建解释的时间。 </td>
 </tr>
 <tr class="odd">
 <td>类型</td>
 <td>解释的分析对象的类型。有效选项：REPORT_TABLE，CHART，MAP，EVENT_REPORT，EVENT_CHART，DATASET_REPORT。 </td>
 </tr>
 <tr class="even">
 <td>用户</td>
 <td>与创建解释的用户的关联。 </td>
 </tr>
 <tr class="odd">
 <td>报告表</td>
 <td>如果类型为REPORT_TABLE，则与报表表关联。 </td>
 </tr>
 <tr class="even">
 <td>图表</td>
 <td>如果类型为CHART，则与图表关联。 </td>
 </tr>
 <tr class="odd">
 <td>地图</td>
 <td>如果类型为MAP，则与地图关联。 </td>
 </tr>
 <tr class="even">
 <td>事件报告</td>
 <td>与事件报告的关联类型为EVENT_REPORT。 </td>
 </tr>
 <tr class="odd">
 <td>事件图表</td>
 <td>如果类型为EVENT_CHART，则与事件图表关联。 </td>
 </tr>
 <tr class="even">
 <td>数据集</td>
 <td>如果类型为DATASET_REPORT，则与数据集关联。 </td>
 </tr>
 <tr class="odd">
 <td>评论</td>
 <td>解释的注释数组。文本字段包含实际注释。 </td>
 </tr>
 <tr class="even">
 <td>提到</td>
 <td>提及的解释数组。用户标识符列表。 </td>
 </tr>
 </tbody>
 </table>

对于所有分析对象，您可以在URL后面附加* / data *以进行检索
与资源相关联的数据（与元数据相对）。作为
一个例子，通过跟随地图链接并附加/ data可以
通过检索主题地图的PNG（图像）表示形式
以下网址：

    https://play.dhis2.org/demo/api/maps/bhmHJ4ZCdCd/data

对于所有分析对象，您可以按*提及*进行过滤。检索全部
提到用户时的解释/评论
三个选择。您可以按解释提及（提及
在解释中
    描述）：

    GET /api/interpretations?fields=*,comments[*]&filter=mentions.username:in:[boateng]

您可以按解释注释中提到的内容（任何
评论）：

    GET / api / interpretations？fields = *，评论[*]
      ＆filter = comments.mentions.username：in：[boateng]

您可以按包含提及内容的解释进行过滤
在解释或任何评论中（或结）：

    GET / api / interpretations？fields = *，评论[*]＆filter = mentions：in：[boateng]

### 写作解释 { #webapi_writing_interpretations } 

 <!--DHIS2-SECTION-ID:webapi_writing_interpretations-->

在编写口译时，您将提供以下说明文字：
请求主体使用内容类型为“文本/纯文本”的POST请求。
URL模式如下所示，其中{object-type}指的是
被解释对象的类型，{object-id}指的是
被解释对象的标识符。

    / api / interpretations / {object-type} / {object-id}

对象类型的有效选项是* reportTable *，* chart *，* map *，
* eventReport *，* eventChart *和* dataSetReport *。

下面列出了一些有效的解释示例。

    / api / interpretations / reportTable / yC86zJxU1i1
    / api / interpretations / chart / ZMuYVhtIceD
    / api / interpretations / map / FwLHSMCejFu
    / api / interpretations / eventReport / xJmPLGP3Cde
    / api / interpretations / eventChart / nEzXB2M9YBz
    / api / interpretations / dataSetReport / tL7eCjmDIgM

例如，我们将从为图表编写解释开始
标识符为* EbRN2VIbPdV *。为了编写图表解释，我们将
与* / api / interpretations / chart / {chartId} *资源进行交互。
解释将是请求正文。基于此，我们可以把
使用cURL将以下请求结合在一起：

```bash
curl -d "This chart shows a significant ANC 1-3 dropout" -X POST
  "https://play.dhis2.org/demo/api/interpretations/chart/EbRN2VIbPdV"
  -H "Content-Type:text/plain" -u admin:district
```

请注意，响应为Location标头提供了一个值
指示创建的解释的位置。这很有用
从客户的角度来看，当您想在
解释。

### 更新和删除解释 { #webapi_updating_removing_interpretations } 

 <!--DHIS2-SECTION-ID:webapi_updating_removing_interpretations-->

要更新现有解释，您可以使用PUT请求，其中
解释文本是使用以下网址格式的请求正文，
其中{id}表示解释标识符：

    / api / interpretations / {id}

基于此，我们可以使用curl来更新解释：

```bash
curl -d "This charts shows a high dropout" -X PUT
  "https://play.dhis2.org/demo/api/interpretations/chart/EV08iI1cJRA"
  -H "Content-Type:text/plain" -u admin:district
```

您可以通过DELETE请求使用与上述相同的网址格式
删除解释。

### 创建解释注释 { #webapi_creating_interpretation_comments } 

 <!--DHIS2-SECTION-ID:webapi_creating_interpretation_comments-->

在为解释撰写评论时，您将提供评论
使用带有内容类型的POST请求将文本作为请求正文
“文本/纯文本”。 URL模式如下所示，其中
{interpretation-id}是解释标识符。

    / api / interpretations / {interpretation-id} /评论

其次，我们将对我们在
上面的例子。通过查看解释回复，您将看到
返回* Location *标头。此标头告诉我们的网址
新创建的解释，从中我们可以阅读
标识符。该标识符是随机生成的，因此您必须
用您自己的命令替换下面命令中的一个。写评论
我们可以与* / api / interpretations / {id} /评论“ *进行互动
像这样的资源：

```bash
curl -d "An intervention is needed" -X POST
  "https://play.dhis2.org/demo/api/interpretations/j8sjHLkK8uY/comments"
  -H "Content-Type:text/plain" -u admin:district
```

### 更新和删除解释注释 { #webapi_updating_removing_interpretation_comments } 

 <!--DHIS2-SECTION-ID:webapi_updating_removing_interpretation_comments-->

要更新解释注释，您可以使用PUT请求，其中
注释文本是使用以下URL模式的请求正文：

    / api / interpretations / {interpretation-id} / comments / {comment-id}

基于此，我们可以使用curl来更新注释：

```bash
curl "https://play.dhis2.org/demo/api/interpretations/j8sjHLkK8uY/comments/idAzzhVWvh2"
  -d "I agree with that." -X PUT -H "Content-Type:text/plain" -u admin:district
```

您可以通过向DELETE请求使用与上述相同的网址格式
删除解释注释。

### 喜欢的解释 { #webapi_liking_interpretations } 

 <!--DHIS2-SECTION-ID:webapi_liking_interpretations-->

要喜欢一个解释，您可以使用一个空的POST请求
*喜欢*资源：

    POST / api / interpretations / {id} / like

将为当前经过身份验证的用户添加一个赞。用户可以
只喜欢一次解释。

要删除喜欢的解释，您可以使用DELETE请求
与进行类似操作的资源相同。

可以通过查看
常规的Web API表示形式：

    GET / api / interpretations / {id}

在* likes *字段中找到了like信息，该信息代表
点赞次数，以及* likedBy *数组，该数组枚举了
喜欢这种解释。

```json
{
  "id": "XSHiFlHAhhh",
  "text": "Data looks suspicious, could be a data entry mistake.",
  "type": "REPORT_TABLE",
  "likes": 2,
  "likedBy": [
    {
      "id": "k7Hg12fJ2f1"
    },
    {
      "id": "gYhf26fFkjFS"
    }
  ]
}
```

## 查看分析性资源表示 { #webapi_viewing_analytical_resource_representations } 

 <!--DHIS2-SECTION-ID:webapi_viewing_analytical_resource_representations-->

DHIS2具有用于数据分析的多种资源。这些资源包括
*图表*，*地图*，*报表表格*，*报表*和*文档*。通过访问
这些资源，您将检索有关资源的信息。为了
例如，通过导航到* / api / charts / R0DVGvXDUNP *，响应将
包含图表的名称，最后修改日期等。到
检索分析表示形式，例如PNG
图表的表示形式，您可以在所有这些后面附加* / data *
资源。例如，通过访问* / api / charts / R0DVGvXDUNP / data *
系统将返回图表的PNG图片。

 <table>
 <caption> 分析资源 </caption>
 <colgroup>
 <col style="width: 17%" />
 <col style="width: 17%" />
 <col style="width: 32%" />
 <col style="width: 32%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 资源 </th>
 <th> 说明 </th>
 <th> 数据 URL </th>
 <th> 资源表示 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 图表 </td>
 <td> 图表 </td>
 <td> /api/charts/&lt;identifier&gt;/data </td>
 <td> png </td>
 </tr>
 <tr class="even">
 <td> eventCharts </td>
 <td> 事件图表 </td>
 <td> /api/eventCharts/&lt;identifier&gt;/data </td>
 <td> png </td>
 </tr>
 <tr class="odd">
 <td> 映射 </td>
 <td> 地图 </td>
 <td> /api/maps/&lt;identifier&gt;/data </td>
 <td> png </td>
 </tr>
 <tr class="even">
 <td> 报告表 </td>
 <td> 数据透视表 </td>
 <td> /api/reportTables/&lt;identifier&gt;/data </td>
 <td> json | jsonp | html | xml | pdf | xls | csv </td>
 </tr>
 <tr class="odd">
 <td> 报告 </td>
 <td> 标准报告 </td>
 <td> /api/reports/&lt;identifier&gt;/data </td>
 <td> pdf | xls | html </td>
 </tr>
 <tr class="even">
 <td> 文档 </td>
 <td> 资源 </td>
 <td> /api/documents/&lt;identifier&gt;/data </td>
 <td> &lt;follows document&gt; </td>
 </tr>
 </tbody>
 </table>

分析表示的数据内容可以通过以下方式修改
提供* date *查询参数。这就要求分析
为期间维度的相对期间设置资源。

 <table>
 <caption>数据查询参数</caption>
 <colgroup>
 <col style="width: 21%" />
 <col style="width: 28%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>值</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>日期</td>
 <td> yyyy-MM-dd格式的日期</td>
 <td>报告中相对期间的依据（需要相对期间）</td>
 </tr>
 </tbody>
 </table>

 <table>
 <caption> png /图像类型（图表，地图）的查询参数</caption>
 <colgroup>
 <col style="width: 21%" />
 <col style="width: 78%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>宽度</td>
 <td>图像的宽度（以像素为单位）</td>
 </tr>
 <tr class="even">
 <td>高度</td>
 <td>以像素为单位的图像高度</td>
 </tr>
 </tbody>
 </table>

用于检索各种分析结果的有效URL的一些示例
表述如下。

    / api / charts / R0DVGvXDUNP / data
    / api / charts / R0DVGvXDUNP / data？date = 2013-06-01

    /api/reportTables/jIISuEWxmoI/data.html
    /api/reportTables/jIISuEWxmoI/data.html?date=2013-01-01
    /api/reportTables/FPmvWs7bn2P/data.xls
    /api/reportTables/FPmvWs7bn2P/data.pdf

    / api / maps / DHE98Gsynpr / data
    / api / maps / DHE98Gsynpr / data？date = 2013-07-01

    /api/reports/OeJsA6K1Otx/data.pdf
    /api/reports/OeJsA6K1Otx/data.pdf?date=2014-01-01

## 外挂程式 { #webapi_plugins } 

 <!--DHIS2-SECTION-ID:webapi_plugins-->

DHIS2带有插件，可让您直接将实时数据嵌入
您的门户网站或网站。当前，存在用于图表，地图的插件
和数据透视表。

请注意，本节中的所有代码示例均适用于
仅用于演示目的。它们不应按原样使用
生产系统。为了简单起见，凭据
（管理员/区）已嵌入到脚本中。在实际情况下
您永远不要在javascript中公开凭据，因为它会打开
应用程序的漏洞。另外，您将创建一个用户
具有更多的最小特权，而不是利用超级用户来
为您的门户网站获取资源。

可以通过使用反向方法来解决暴露凭据的变通办法
代理，例如nginx或apache2。代理可以配置为注入
仅所需端点的必需授权标头
公开。有一些文档可帮助您入门
实施者手册中描述[反向
代理]（https://docs.dhis2.org/master/zh-CN/implementer/html/install_reverse_proxy_configuration.html#install_making_resources_available_with_nginx）
配置。

### 使用数据透视表插件嵌入数据透视表 { #webapi_pivot_table_plugin } 

 <!--DHIS2-SECTION-ID:webapi_pivot_table_plugin-->

在此示例中，我们将看到如何嵌入美观轻巧的产品
带有从DHIS2后端提供的数据到Web的html数据透视表
页。为此，我们将使用数据透视表插件。这
插件使用Javascript编写，仅依赖jQuery库。
可以在以下位置找到完整的工作示例
 <http://play.dhis2.org/portal/table.html>。在网络中打开页面
浏览器并查看源以查看其设置。

我们首先看一下完整的html文件的外观
喜欢。此设置在我们的网页中放置了两个表。第一个是
引用现有表。第二个是内联配置的。

```html
<!DOCTYPE html>
<html>
<head>
  <script src="https://dhis2-cdn.org/v227/plugin/jquery-2.2.4.min.js"></script>
  <script src="https://dhis2-cdn.org/v227/plugin/reporttable.js"></script>

  <script>
    reportTablePlugin.url = "https://play.dhis2.org/demo";
    reportTablePlugin.username = "admin";
    reportTablePlugin.password = "district";
    reportTablePlugin.loadingIndicator = true;

    // Referring to an existing table through the id parameter, render to "report1" div

    var r1 = { el: "report1", id: "R0DVGvXDUNP" };

    // Table configuration, render to "report2" div

    var r2 = {
      el: "report2",
      columns: [
        {dimension: "dx", items: [{id: "YtbsuPPo010"}, {id: "l6byfWFUGaP"}]}
      ],
      rows: [
        {dimension: "pe", items: [{id: "LAST_12_MONTHS"}]}
      ],
      filters: [
        {dimension: "ou", items: [{id: "USER_ORGUNIT"}]}
      ],

      // All following properties are optional
      title: "My custom title",
      showColTotals: false,
      showRowTotals: false,
      showColSubTotals: false,
      showRowSubTotals: false,
      showDimensionLabels: false,
      hideEmptyRows: true,
      skipRounding: true,
      aggregationType: "AVERAGE",
      showHierarchy: true,
      completedOnly: true,
      displayDensity: "COMFORTABLE",
      fontSize: "SMALL",
      digitGroupSeparator: "COMMA",
      legendSet: {id: "fqs276KXCXi"}
    };

    reportTablePlugin.load([r1, r2]);
  </script>
</head>

<body>
  <div id="report1"></div>
  <div id="report2"></div>
</body>
</html>
```

HTML文档的标题部分包含两个文件。这
第一个文件是jQuery JavaScript库（我们使用DHIS2内容
投放网络）。第二个文件是数据透视表
插入。确保路径指向您的DHIS2服务器
安装。

现在让我们看一下数据透视表的各种选项。一
属性为必填项：* el *（请参阅下表）。现在，如果
您想引用DHIS2内部已经创建的预定义表，它是
足以提供其他* id *参数。如果你反而想要
动态配置数据透视表，您应该省略id参数
并在* columns *数组，* rows *数组和
可选地* filters *数组。

数据维度定义为具有以下文本属性的对象：
*方面*。此属性接受以下值：* dx *
（指标，数据元素，数据元素操作数，数据集，事件数据
项目和程序指示器），* pe *（句号），* ou *（组织单位）或
任何组织单位组集或数据元素组集的ID（可以
可以在网络api中找到）。数据维度还具有数组属性
称为* items *，它接受具有* id *属性的对象。

总结一下，如果您想拥有“ ANC 1覆盖率”，“ ANC 2覆盖率”
和表格中各列上的“ ANC 3 Coverage”，您可以
以下*列*配置：

```json
columns: [{
  dimension: "dx",
  items: [
    {id: "Uvn6LCg7dVU"}, // the id of ANC 1 Coverage
    {id: "OdiHJayrsKo"}, // the id of ANC 2 Coverage
    {id: "sB79w2hiLp8"}  // the id of ANC 3 Coverage
  ]
}]
```

 <table>
 <caption> 数据透视表插件配置 </caption>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> </th>型
 <th> 需要 </th>
 <th> 选项（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 网址 </td>
 <td> 字符串 </td>
 <td> 是 </td>
 <td> </td>
 <td> DHIS2 服务器的基本 URL </td>
 </tr>
 <tr class="even">
 <td> 用户名 </td>
 <td> 字符串 </td>
 <td> 是（如果跨域） </td>
 <td> </td>
 <td> 如果服务器在不同的域上运行，则用于身份验证 </td>
 </tr>
 <tr class="odd">
 <td> 密码 </td>
 <td> 字符串 </td>
 <td> 是（如果跨域） </td>
 <td> </td>
 <td> 如果服务器在不同的域上运行，则用于身份验证 </td>
 </tr>
 <tr class="even">
 <td> loadingIndicator </td>
 <td> 布尔值 </td>
 <td> 否 </td>
 <td> </td>
 <td> 是否在表格出现前显示加载指示器 </td>
 </tr>
 </tbody>
 </table>

<table>
<caption>Pivot table configuration</caption>
<thead>
<tr class="header">
<th>Param</th>
<th>Type</th>
<th>Required</th>
<th>Options (default first)</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>el</td>
<td>string</td>
<td>Yes</td>
<td></td>
<td>Identifier of the HTML element to render the table in your web page</td>
</tr>
<tr class="even">
<td>id</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Identifier of a pre-defined table (favorite) in DHIS2</td>
</tr>
<tr class="odd">
<td>columns</td>
<td>array</td>
<td>Yes (if no id provided)</td>
<td></td>
<td>Data dimensions to include in table as columns</td>
</tr>
<tr class="even">
<td>rows</td>
<td>array</td>
<td>Yes (if no id provided)</td>
<td></td>
<td>Data dimensions to include in table as rows</td>
</tr>
<tr class="odd">
<td>filter</td>
<td>array</td>
<td>No</td>
<td></td>
<td>Data dimensions to include in table as filters</td>
</tr>
<tr class="even">
<td>title</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Show a custom title above the table</td>
</tr>
<tr class="odd">
<td>showColTotals</td>
<td>boolean</td>
<td>No</td>
<td>true | false</td>
<td>Whether to display totals for columns</td>
</tr>
<tr class="even">
<td>showRowTotals</td>
<td>boolean</td>
<td>No</td>
<td>true | false</td>
<td>Whether to display totals for rows</td>
</tr>
<tr class="odd">
<td>showColSubTotals</td>
<td>boolean</td>
<td>No</td>
<td>true | false</td>
<td>Whether to display sub-totals for columns</td>
</tr>
<tr class="even">
<td>showRowSubTotals</td>
<td>boolean</td>
<td>No</td>
<td>true | false</td>
<td>Whether to display sub-totals for rows</td>
</tr>
<tr class="odd">
<td>showDimensionLabels</td>
<td>boolean</td>
<td>No</td>
<td>true | false</td>
<td>Whether to display the name of the dimension top-left in the table</td>
</tr>
<tr class="even">
<td>hideEmptyRows</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to hide rows with no data</td>
</tr>
<tr class="odd">
<td>skipRounding</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to skip rounding of data values</td>
</tr>
<tr class="even">
<td>completedOnly</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to only show completed events</td>
</tr>
<tr class="odd">
<td>showHierarchy</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to extend orgunit names with the name of all anchestors</td>
</tr>
<tr class="even">
<td>aggregationType</td>
<td>string</td>
<td>No</td>
<td>&quot;SUM&quot; |&quot;AVERAGE&quot; | &quot;AVERAGE_SUM_ORG_UNIT&quot;|&quot;LAST&quot;|&quot;LAST_AVERAGE_ORG_UNIT&quot;| &quot;COUNT&quot; | &quot;STDDEV&quot; | &quot;VARIANCE&quot; | &quot;MIN&quot; | &quot;MAX&quot;</td>
<td>Override the data element's default aggregation type</td>
</tr>
<tr class="odd">
<td>displayDensity</td>
<td>string</td>
<td>No</td>
<td>&quot;NORMAL&quot; | &quot;COMFORTABLE&quot; | &quot;COMPACT&quot;</td>
<td>The amount of space inside table cells</td>
</tr>
<tr class="even">
<td>fontSize</td>
<td>string</td>
<td>No</td>
<td>&quot;NORMAL&quot; | &quot;LARGE&quot; | &quot;SMALL&quot;</td>
<td>Table font size</td>
</tr>
<tr class="odd">
<td>digitGroupSeparator</td>
<td>string</td>
<td>No</td>
<td>&quot;SPACE&quot; | &quot;COMMA&quot; | &quot;NONE&quot;</td>
<td>How values are formatted: 1 000 | 1,000 | 1000</td>
</tr>
<tr class="even">
<td>legendSet</td>
<td>object</td>
<td>No</td>
<td></td>
<td>Color the values in the table according to the legend set</td>
</tr>
<tr class="odd">
<td>userOrgUnit</td>
<td>string / array</td>
<td>No</td>
<td></td>
<td>Organisation unit identifiers, overrides organisation units associated with curretn user, single or array</td>
</tr>
<tr class="even">
<td>relativePeriodDate</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Date identifier e.g: &quot;2016-01-01&quot;. Overrides the start date of the relative period</td>
</tr>
</tbody>
</table>

### 使用Visualizer图表插件嵌入图表 { #webapi_chart_plugin } 

 <!--DHIS2-SECTION-ID:webapi_chart_plugin-->

在此示例中，我们将看到如何嵌入美观的Highcharts
图表（<http://www.highcharts.com>）和DHIS2提供的数据
后端进入网页。为此，我们将使用DHIS2
Visualizer插件。该插件是用JavaScript编写的，具体取决于
jQuery库。可以在以下位置找到完整的工作示例
 <http://play.dhis2.org/portal/chart.html>。在网络中打开页面
浏览器并查看源以查看其设置。

我们首先看一下完整的html文件的外观
喜欢。此设置在我们的网页上放置了两个图表。第一个是
参考现有图表。第二个是内联配置的。

```html
<!DOCTYPE html>
<html>
<head>
  <script src="https://dhis2-cdn.org/v227/plugin/jquery-2.2.4.min.js"></script>
  <script src="https://dhis2-cdn.org/v227/plugin/chart.js"></script>

  <script>
    chartPlugin.url = "https://play.dhis2.org/demo";
    chartPlugin.username = "admin";
    chartPlugin.password = "district";
    chartPlugin.loadingIndicator = true;

    // Referring to an existing chart through the id parameter, render to "report1" div

    var r1 = { el: "report1", id: "R0DVGvXDUNP" };

    // Chart configuration, render to "report2" div

    var r2 = {
      el: "report2",
      columns: [
        {dimension: "dx", items: [{id: "YtbsuPPo010"}, {id: "l6byfWFUGaP"}]}
      ],
      rows: [
        {dimension: "pe", items: [{id: "LAST_12_MONTHS"}]}
      ],
      filters: [
        {dimension: "ou", items: [{id: "USER_ORGUNIT"}]}
      ],

      // All following properties are optional
      title: "Custom title",
      type: "line",
      showValues: false,
      hideEmptyRows: true,
      regressionType: "LINEAR",
      completedOnly: true,
      targetLineValue: 100,
      targetLineTitle: "My target line title",
      baseLineValue: 20,
      baseLineTitle: "My base line title",
      aggregationType: "AVERAGE",
      rangeAxisMaxValue: 100,
      rangeAxisMinValue: 20,
      rangeAxisSteps: 5,
      rangeAxisDecimals: 2,
      rangeAxisTitle: "My range axis title",
      domainAxisTitle: "My domain axis title",
      hideLegend: true
    };

    // Render the charts

    chartPlugin.load(r1, r2);
  </script>
</head>

<body>
  <div id="report1"></div>
  <div id="report2"></div>
</body>
</html>
```

HTML文档的标题部分包含两个文件。这
第一个文件是jQuery JavaScript库（我们使用DHIS2内容
投放网络）。第二个文件是可视化图表
插入。确保路径指向您的DHIS2服务器
安装。

现在让我们看一下图表的各种选项。一
属性为必填项：* el *（请参阅下表）。现在，如果
您想引用DHIS2中已经制作的预定义图表，它是
足以提供其他* id *参数。如果你反而想要
要动态配置图表，您应该省略id参数，
在*列*数组，*行*数组和
可选地* filters *数组。

数据维度定义为具有以下文本属性的对象：
*方面*。此属性接受以下值：* dx *
（指标，数据元素，数据元素操作数，数据集，事件数据
项目和程序指示器），* pe *（句号），* ou *（组织单位）或
任何组织单位组集或数据元素组集的ID（可以
可以在网络api中找到）。数据维度还具有数组属性
称为* items *，它接受具有* id *属性的对象。

总结一下，如果您想拥有“ ANC 1覆盖率”，“ ANC 2覆盖率”
和图表中各列上的“ ANC 3 Coverage”，您可以
以下*列*配置：

```json
columns: [{
  dimension: "dx",
  items: [
    {id: "Uvn6LCg7dVU"}, // the id of ANC 1 Coverage
    {id: "OdiHJayrsKo"}, // the id of ANC 2 Coverage
    {id: "sB79w2hiLp8"}  // the id of ANC 3 Coverage
  ]
}]
```

 <table>
 <caption> 图表插件配置 </caption>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> </th>型
 <th> 需要 </th>
 <th> 选项（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 网址 </td>
 <td> 字符串 </td>
 <td> 是 </td>
 <td> </td>
 <td> DHIS2 服务器的基本 URL </td>
 </tr>
 <tr class="even">
 <td> 用户名 </td>
 <td> 字符串 </td>
 <td> 是（如果跨域） </td>
 <td> </td>
 <td> 如果服务器在不同的域上运行，则用于身份验证 </td>
 </tr>
 <tr class="odd">
 <td> 密码 </td>
 <td> 字符串 </td>
 <td> 是（如果跨域） </td>
 <td> </td>
 <td> 如果服务器在不同的域上运行，则用于身份验证 </td>
 </tr>
 <tr class="even">
 <td> loadingIndicator </td>
 <td> 布尔值 </td>
 <td> 否 </td>
 <td> </td>
 <td> 是否在图表出现前显示加载指标 </td>
 </tr>
 </tbody>
 </table>

<table>
<caption>Chart configuration</caption>
<thead>
<tr class="header">
<th>Param</th>
<th>Type</th>
<th>Required</th>
<th>Options (default first)</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>el</td>
<td>string</td>
<td>Yes</td>
<td></td>
<td>Identifier of the HTML element to render the chart in your web page</td>
</tr>
<tr class="even">
<td>id</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Identifier of a pre-defined chart (favorite) in DHIS</td>
</tr>
<tr class="odd">
<td>type</td>
<td>string</td>
<td>No</td>
<td>column | stackedcolumn | bar | stackedbar | line | area | pie | radar | gauge</td>
<td>Chart type</td>
</tr>
<tr class="even">
<td>columns</td>
<td>array</td>
<td>Yes (if no id provided)</td>
<td></td>
<td>Data dimensions to include in chart as series</td>
</tr>
<tr class="odd">
<td>rows</td>
<td>array</td>
<td>Yes (if no id provided)</td>
<td></td>
<td>Data dimensions to include in chart as category</td>
</tr>
<tr class="even">
<td>filter</td>
<td>array</td>
<td>No</td>
<td></td>
<td>Data dimensions to include in chart as filters</td>
</tr>
<tr class="odd">
<td>title</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Show a custom title above the chart</td>
</tr>
<tr class="even">
<td>showValues</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to display data values on the chart</td>
</tr>
<tr class="odd">
<td>hideEmptyRows</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to hide empty categories</td>
</tr>
<tr class="even">
<td>completedOnly</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to only show completed events</td>
</tr>
<tr class="odd">
<td>regressionType</td>
<td>string</td>
<td>No</td>
<td>&quot;NONE&quot; | &quot;LINEAR&quot;</td>
<td>Show trend lines</td>
</tr>
<tr class="even">
<td>targetLineValue</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Display a target line with this value</td>
</tr>
<tr class="odd">
<td>targetLineTitle</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Display a title on the target line (does not apply without a target line value)</td>
</tr>
<tr class="even">
<td>baseLineValue</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Display a base line with this value</td>
</tr>
<tr class="odd">
<td>baseLineTitle</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Display a title on the base line (does not apply without a base line value)</td>
</tr>
<tr class="even">
<td>rangeAxisTitle</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Title to be displayed along the range axis</td>
</tr>
<tr class="odd">
<td>rangeAxisMaxValue</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Max value for the range axis to display</td>
</tr>
<tr class="even">
<td>rangeAxisMinValue</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Min value for the range axis to display</td>
</tr>
<tr class="odd">
<td>rangeAxisSteps</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Number of steps for the range axis to display</td>
</tr>
<tr class="even">
<td>rangeAxisDecimals</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Bumber of decimals for the range axis to display</td>
</tr>
<tr class="odd">
<td>domainAxisTitle</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Title to be displayed along the domain axis</td>
</tr>
<tr class="even">
<td>aggregationType</td>
<td>string</td>
<td>No</td>
<td>&quot;SUM&quot; |&quot;AVERAGE&quot; | &quot;AVERAGE_SUM_ORG_UNIT&quot;|&quot;LAST&quot;|&quot;LAST_AVERAGE_ORG_UNIT&quot;| &quot;COUNT&quot; | &quot;STDDEV&quot; | &quot;VARIANCE&quot; | &quot;MIN&quot; | &quot;MAX&quot;</td>
<td>Override the data element's default aggregation type</td>
</tr>
<tr class="odd">
<td>hideLegend</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to hide the series legend</td>
</tr>
<tr class="even">
<td>hideTitle</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to hide the chart title</td>
</tr>
<tr class="odd">
<td>userOrgUnit</td>
<td>string / array</td>
<td>No</td>
<td></td>
<td>Organisation unit identifiers, overrides organisation units associated with curretn user, single or array</td>
</tr>
<tr class="even">
<td>relativePeriodDate</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Date identifier e.g: &quot;2016-01-01&quot;. Overrides the start date of the relative period</td>
</tr>
</tbody>
</table>

### 使用GIS地图插件嵌入地图 { #webapi_map_plugin } 

 <!--DHIS2-SECTION-ID:webapi_map_plugin-->

在此示例中，我们将看到如何将地图与
DHIS2后端进入网页。为此，我们将使用GIS
地图插件。该插件使用JavaScript编写，并依赖于Ext
仅限JS库。可以在以下位置找到完整的工作示例
 <http://play.dhis2.org/portal/map.html>。在网络浏览器中打开页面
并查看源以了解其设置。

我们首先看一下完整的html文件的外观
喜欢。此设置在我们的网页上放置了两个地图。第一个是
引用现有地图。第二个是内联配置的。

```html
<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" type="text/css" href="http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css" />
  <script src="http://dhis2-cdn.org/v215/ext/ext-all.js"></script>
  <script src="https://maps.google.com/maps/api/js?sensor=false"></script>
  <script src="http://dhis2-cdn.org/v215/openlayers/OpenLayers.js"></script>
  <script src="http://dhis2-cdn.org/v215/plugin/map.js"></script>

  <script>
    var base = "https://play.dhis2.org/demo";

    // Login - if OK, call the setLinks function

    Ext.onReady( function() {
      Ext.Ajax.request({
        url: base + "dhis-web-commons-security/login.action",
        method: "POST",
        params: { j_username: "portal", j_password: "Portal123" },
        success: setLinks
      });
    });

    function setLinks() {
      DHIS.getMap({ url: base, el: "map1", id: "ytkZY3ChM6J" });

      DHIS.getMap({
        url: base,
        el: "map2",
        mapViews: [{
          columns: [{dimension: "in", items: [{id: "Uvn6LCg7dVU"}]}], // data
          rows: [{dimension: "ou", items: [{id: "LEVEL-3"}, {id: "ImspTQPwCqd"}]}], // organisation units,
          filters: [{dimension: "pe", items: [{id: "LAST_3_MONTHS"}]}], // period
          // All following options are optional
          classes: 7,
          colorLow: "02079c",
          colorHigh: "e5ecff",
          opacity: 0.9,
          legendSet: {id: "fqs276KXCXi"}
        }]
      });
    }
  </script>
</head>

<body>
  <div id="map1"></div>
  <div id="map2"></div>
</body>
</html>
```

标题的标题部分包含四个文件和Google地图。
HTML文档。前两个文件是Ext JS JavaScript库（我们
在这种情况下，请使用DHIS2内容分发网络）及其样式表。
第三个文件是OpenLayers JavaScript映射框架
（<http://openlayers.org>），最后我们包括了GIS地图插件。
确保路径指向您的DHIS2服务器
    安装。

     <link rel="stylesheet" type="text/css" href="http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css" />
     <script src="http://dhis2-cdn.org/v215/ext/ext-all.js"> </script>
     <script src="https://maps.google.com/maps/api/js?sensor=false"> </script>
     <script src="http://dhis2-cdn.org/v215/openlayers/OpenLayers.js"> </script>
     <script src="http://dhis2-cdn.org/v215/plugin/map.js"> </script>

要使用DHIS2服务器进行身份验证，我们使用与
上一节。在HTML文档的标题中，我们包含了
在script元素中跟随Javascript。 * setLinks *方法将
稍后实施。确保* base *变量指向您的
DHIS2安装。

    Ext.onReady（function（）{
      Ext.Ajax.request（{
        网址：基本+“ dhis-web-commons-security / login.action”，
        方法：“ POST”，
        参数：{j_username：“门户”，j_password：“ Portal123”}，
        成功：setLinks
      }）;
    }）;

现在让我们看一下GIS插件的各种选项。二
属性为必填项：* el *和* url *（请参阅表
以下）。现在，如果您要参考已经在中创建的预定义地图
DHIS2 GIS足以提供附加的* id *参数。
如果您想动态配置地图，则应省略ID
参数并提供* mapViews *（图层）。他们应该是
在* columns *数组，* rows *数组中配置数据尺寸
以及可选的* filters *数组。

数据维度定义为具有以下文本属性的对象：
*方面*。该属性接受以下值：* in *
（指示器），* de *（数据元素），* ds *（数据集），* dc *（数据元素
操作数），* pe *（句号），* ou *（组织单位）或任何ID
组织单位组集或数据元素组集（可以在
网络API）。数据维度还具有一个称为的数组属性
* items *，接受具有* id *属性的对象。

总结一下，如果您想使用例如中的“ ANC 1覆盖范围”
您可以在地图上进行以下*列*配置：

```json
columns: [{
  dimension: "in", // could be "in", "de", "ds", "dc", "pe", "ou" or any dimension id
  items: [{id: "Uvn6LCg7dVU"}], // the id of ANC 1 Coverage
}]
```

 <table>
 <caption> GIS地图插件配置</caption>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> </th>型
 <th> 需要 </th>
 <th> 选项（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> el </td>
 <td> 字符串 </td>
 <td> 是 </td>
 <td> </td>
 <td> 用于在网页中呈现地图的 HTML 元素的标识符 </td>
 </tr>
 <tr class="even">
 <td> 网址 </td>
 <td> 字符串 </td>
 <td> 是 </td>
 <td> </td>
 <td> DHIS2 服务器的基本 URL </td>
 </tr>
 <tr class="odd">
 <td> ID </td>
 <td> 字符串 </td>
 <td> 否 </td>
 <td> </td>
 <td> DHIS 中预定义地图（收藏夹）的标识符 </td>
 </tr>
 <tr class="even">
 <td> baseLayer </td>
 <td> 字符串/布尔值 </td>
 <td> 否 </td>
 <td> 'gs', 'googlestreets' | 'gh', 'googlehybrid' | 'osm', 'openstreetmap' |假，空，“无”，“关”</td>
 <td> 显示背景图 </td>
 </tr>
 <tr class="odd">
 <td> hideLegend </td>
 <td> 布尔值 </td>
 <td> 否 </td>
 <td> 假 |真 </td>
 <td> 隐藏图例面板 </td>
 </tr>
 <tr class="even">
 <td> 地图视图 </td>
 <td> 阵列 </td>
 <td> 是（如果未提供 ID） </td>
 <td> </td>
 <td> 层数组 </td>
 </tr>
 </tbody>
 </table>

如果未提供ID，则必须添加具有以下内容的地图视图对象
配置选项：

 <table>
 <caption> 地图插件配置 </caption>
 <tbody>
 <tr class="odd">
 <td> 层 </td>
 <td> 字符串 </td>
 <td> 否 </td>
 <td> &quot;thematic1&quot; | &quot;thematic2&quot; | &quot;thematic3&quot; | &quot;thematic4&quot; | &quot;boundary&quot; | &quot;facility&quot; | </td>
 <td> 应添加地图视图内容的图层 </td>
 </tr>
 <tr class="even">
 <td> 列 </td>
 <td> 阵列 </td>
 <td> 是 </td>
 <td> </td>
 <td> 指标、数据元素、数据操作数或数据集（仅使用一个） </td>
 </tr>
 <tr class="odd">
 <td> 行 </td>
 <td> 阵列 </td>
 <td> 是 </td>
 <td> </td>
 <td> 组织单位（允许多个） </td>
 </tr>
 <tr class="even">
 <td> 过滤器 </td>
 <td> 阵列 </td>
 <td> 是 </td>
 <td> </td>
 <td> 句号（只用一个） </td>
 </tr>
 <tr class="odd">
 <td> 类 </td>
 <td> 整数 </td>
 <td> 否 </td>
 <td> 5 | 1-7 </td>
 <td> 自动图例类的数量 </td>
 </tr>
 <tr class="even">
 <td> 方法 </td>
 <td> 整数 </td>
 <td> 否 </td>
 <td> 2 | 3 </td>
 <td> 图例计算方法，其中 2 = 等间隔和 3 = 等计数 </td>
 </tr>
 <tr class="odd">
 <td> 颜色低 </td>
 <td> 字符串 </td>
 <td> 否 </td>
 <td> &quot;ff0000&quot;（红色）|任何十六进制颜色 </td>
 <td> 代表第一个自动图例类的颜色 </td>
 </tr>
 <tr class="even">
 <td> 颜色高 </td>
 <td> 字符串 </td>
 <td> 否 </td>
 <td> &quot;00ff00&quot;（绿色） |任何十六进制颜色 </td>
 <td> 代表最后一个自动图例类的颜色 </td>
 </tr>
 <tr class="odd">
 <td> 半径低 </td>
 <td> 整数 </td>
 <td> 否 </td>
 <td> 5 |任何整数 </td>
 <td> 仅适用于设施点（点） - 具有最小值的点的半径 </td>
 </tr>
 <tr class="even">
 <td> 半径高 </td>
 <td> 整数 </td>
 <td> 否 </td>
 <td> 15 |任何整数 </td>
 <td> 仅适用于设施点（点） - 具有最大值的点的半径 </td>
 </tr>
 <tr class="odd">
 <td> 不透明度 </td>
 <td> 双 </td>
 <td> 否 </td>
 <td> 0.8 | 0 - 1 </td>
 <td> 图层内容的不透明度/透明度 </td>
 </tr>
 <tr class="even">
 <td> legendSet </td>
 <td> 对象 </td>
 <td> 否 </td>
 <td> </td>
 <td> 预定义的图例集。将覆盖自动图例集。 </td>
 </tr>
 <tr class="odd">
 <td> 标签 </td>
 <td> 布尔值/对象 </td>
 <td> 否 </td>
 <td> 假 |真实|对象属性：fontSize（整数）、color（十六进制字符串）、strong（布尔值）、斜体（布尔值）</td>
 <td> 在地图上显示标签 </td>
 </tr>
 <tr class="even">
 <td> 宽度 </td>
 <td> 整数 </td>
 <td> 否 </td>
 <td> </td>
 <td> 地图宽度 </td>
 </tr>
 <tr class="odd">
 <td> 高度 </td>
 <td> 整数 </td>
 <td> 否 </td>
 <td> </td>
 <td> 地图高度 </td>
 </tr>
 <tr class="even">
 <td> userOrgUnit </td>
 <td> 字符串/数组 </td>
 <td> 否 </td>
 <td> </td>
 <td> 组织单位标识符，覆盖与当前用户、单个或阵列关联的组织单位 </td>
 </tr>
 </tbody>
 </table>

我们继续添加一个预定义和一个动态配置的地图
到我们的HTML文档。您可以使用来浏览可用地图的列表
此处的Web API：<http://play.dhis2.org/demo/api/33/maps>。

```javascript
function setLinks() {
  DHIS.getMap({ url: base, el: "map1", id: "ytkZY3ChM6J" });

  DHIS.getMap({
 url: base,
 el: "map2",
 mapViews: [
   columns: [ // Chart series
  columns: [{dimension: "in", items: [{id: "Uvn6LCg7dVU"}]}], // data
   ],
   rows: [ // Chart categories
  rows: [{dimension: "ou", items: [{id: "LEVEL-3"}, {id: "ImspTQPwCqd"}]}], // organisation units
   ],
   filters: [
  filters: [{dimension: "pe", items: [{id: "LAST_3_MONTHS"}]}], // period
   ],
   // All following options are optional
   classes: 7,
   colorLow: "02079c",
   colorHigh: "e5ecff",
   opacity: 0.9,
   legendSet: {id: "fqs276KXCXi"}
 ]
  });
}
```

最后，我们在HTML的主体部分中包含一些* div *元素
文档，其中包含插件JavaScript中引用的标识符。

```html
<div id="map1"></div>
<div id="map2"></div>
```

要查看完整的工作示例，请访问
 <http://play.dhis2.org/portal/map.html>。

### 使用轮播插件{ #webapi_carousel_plugin }创建图表轮播 { #webapi_carousel_plugin } 

 <!--DHIS2-SECTION-ID:webapi_carousel_plugin-->

图表插件还可以创建图表轮播
例如，它可以用来在网站上创建吸引人的首页
网络门户。要使用轮播，我们需要在
HTML的头部
    页：

``html
<link rel="stylesheet" type="text/css" href="http://dhis2-cdn.org/v213/ext/resources/css/ext-plugin-gray.css" />
<link rel="stylesheet" type="text/css" href="https://play.dhis2.org/demo/dhis-web-commons/javascripts/ext-ux/carousel/css/carousel.css" />
<script type="text/javascript" src="https://extjs-public.googlecode.com/svn/tags/extjs-4.0.7/release/ext-all.js"></script>
<script type="text/javascript" src="https://play.dhis2.org/demo/dhis-web-commons/javascripts/ext-ux/carousel/Carousel.js"></script>
<script type="text/javascript" src="https://play.dhis2.org/demo/dhis-web-commons/javascripts/plugin/plugin.js"></script>
````

第一个文件是图表插件的CSS样式表。第二
文件是轮播小部件的CSS样式表。第三个文件是
该插件依赖的Ext JavaScript框架。第四个
文件是轮播插件JavaScript文件。第五档是
图表插件JavaScript文件。本示例中的路径指向
DHIS2演示站点，请确保将其更新为指向您自己的DHIS2
安装。

请参阅有关图表插件的部分以了解如何操作
验证。

为了创建图表轮播，我们将首先渲染我们想要的图表
使用图表插件中所述的方法将其包含在轮播中
部分。然后，我们创建图表轮播本身。图表将是
呈现为* div *元素，这些元素都有一个名为* chart *的CSS类。
然后，在轮播配置中，我们可以定义一个* selector *表达式
指的是这样的div元素：

```javascript
DHIS.getChart({ uid: 'R0DVGvXDUNP', el: 'chartA1', url: base })；
DHIS.getChart({ uid: 'X0CPnV6uLjR', el: 'chartA2', url: base })；
DHIS.getChart({ uid: 'j1gNXBgwKVm', el: 'chartA3', url: base })；
DHIS.getChart({ uid: 'X7PqaXfevnL', el: 'chartA4', url: base })；

new Ext.ux.carousel.Carousel( 'chartCarousel', {
  autoPlay: true、
  itemSelector: 'div.chart'、
  间隔5,
  showPlayButton: true
});
```

配置中的第一个参数是div元素的ID
您要渲染轮播的图片。 * autoPlay *配置
选项是指我们是否希望用户启动轮播
加载网页。 * interval *选项定义每个秒数
图表应显示。 * showPlayButton *定义我们是否要
为用户提供启动和停止轮播的按钮。最后
我们需要在HTML文档的正文中插入div元素：

``html
<div id="chartCarousel">
<div id="chartA1"></div>
<div id="chartA2"></div>
<div id="chartA3"></div>
<div id="chartA4"></div>
````

要查看完整的工作示例，请访问
 <http://play.dhis2.org/portal/carousel.html>。

## SQL视图 { #webapi_sql_views } 

 <!--DHIS2-SECTION-ID:webapi_sql_views-->

SQL视图资源允许您创建和检索结果集
SQL视图。可以直接针对SQL视图执行
数据库并通过Web API资源呈现结果集。

    / api / sqlViews

SQL视图对于创建数据视图很有用，这可能更容易
用SQL构造的Web的多个对象进行了比较
API。例如，假设我们被要求提供以下内容的视图
所有单位部门及其名称，上级名称，单位部门
级别和名称，以及数据库中列出的坐标。风景
可能看起来像这样：

```sql
SELECT ou.name as orgunit, par.name as parent, ou.coordinates, ous.level, oul.name from organisationunit ou
INNER JOIN _orgunitstructure ous ON ou.organisationunitid = ous.organisationunitid
INNER JOIN organisationunit par ON ou.parentid = par.organisationunitid
INNER JOIN orgunitlevel oul ON ous.level = oul.level
WHERE ou.coordinates is not null
ORDER BY oul.level, par.name, ou.name
```

我们将使用* curl *首先在DHIS2服务器上执行视图。这
本质上是一个物化过程，并确保我们拥有
检索时可通过SQL视图获得的最新数据
从服务器。您可以先从
api / sqlViews资源，然后使用以下命令进行POST：

```bash
curl "https://play.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/execute" -X POST -u admin:district
```

该过程的下一步是数据的检索。
URL的结构如下

    http：// {server} / api / sqlViews / {id} / data（.csv）

`{server}` 参数应替换为您自己的服务器。这
URL `/api/sqlViews/` 的下一部分应该附加
特定的 SQL 视图标识符。为 XML 数据附加 `data` 或
`data.csv` 用于逗号分隔值。支持响应格式是
json、xml、csv、xls、html 和 html+css。例如，以下
命令将为上面定义的 SQL 视图检索 XML 数据。

```bash
curl "https://play.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/data.csv" -u admin:district
```

SQL视图有三种类型：

  - * SQL视图：*标准SQL视图。

  - *材料化的SQL视图：*实例化的SQL视图，意味着
    写入磁盘。需要进行更新以反映
    基础表。支持过滤结果集的条件。

  - * SQL查询：*纯SQL查询。支持的内联变量
    定制查询。

### 标准 { #webapi_sql_view_criteria } 

 <!--DHIS2-SECTION-ID:webapi_sql_view_criteria-->

您可以对结果集中的列进行以下简单过滤：
使用列名将* criteria *查询参数附加到URL
并在页面上过滤由列分隔的值作为参数值
以下格式：

    / api / sqlViews / {id} / data？criteria = col1：value1＆criteria = col2：value2

例如，过滤上面的SQL视图结果集只返回
级别4的组织单位，您可以使用以下内容
    网址：

    https://play.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/data.csv?criteria=level:4

### 变数 { #webapi_sql_view_variables } 

 <!--DHIS2-SECTION-ID:webapi_sql_view_variables-->

SQL视图支持变量替换。仅变量替换
可用于* query *类型的SQL视图，这意味着不是
在数据库中创建，但仅作为常规SQL查询执行。
变量可以直接插入SQL查询中，并且必须在
此格式：

    $ {variable-key}

例如，一个SQL查询检索给定的所有数据元素
通过变量定义值类型的值类型可以看起来
像这样：

    从dataelement中选择*，其中valuetype ='$ {valueType}';

然后可以在请求时将这些变量作为URL的一部分提供
通过* sqlViews * Web API资源。可以提供变量
以下格式：

    / api / sqlViews / {id} / data？var = key1：value1＆var = key2：value2

与上面的示例相对应的示例查询如下所示：

    /api/sqlViews/dI68mLkP1wN/data.json?var=valueType:int

* valueType *变量将被* int *值替代，并且
查询将返回具有int值类型的数据元素。

variable参数必须仅包含字母数字字符。这
变量必须包含字母数字，破折号，下划线和空格
仅字符。

* query *类型的SQL视图还支持两个系统定义的变量，这些变量允许查询访问有关执行视图的用户的信息：

 | 多变的 | 方法 |
 | -------- | ----- |
 | $ {_current_user_id} | 用户的数据库ID |
 | $ {_current_username} | 用户的用户名 |

这些变量的值不能作为URL的一部分提供。它们始终充满有关用户的信息。

例如，以下类型为* query *的SQL视图显示了分配给用户的所有组织单位：

```sql
    select ou.path, ou.name
    from organisationunit ou_user
    join organisationunit ou on ou.path like ou_user.path || '%'
    join usermembership um on um.organisationunitid = ou_user.organisationunitid
    where um.userinfoid = ${_current_user_id}
    order by ou.path
```

### 筛选 { #webapi_sql_view_filtering } 

 <!--DHIS2-SECTION-ID:webapi_sql_view_filtering-->

SQL视图api支持数据过滤，等于[metadata对象
过滤器]（＃webapi_metadata_object_filter）。有关过滤器的完整列表
您可以查看[元数据对象的文档
过滤器]（＃webapi_metadata_object_filter）。

要使用过滤器，只需在请求末尾将它们作为参数添加
您的SQL视图的网址，例如
    这：

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_level:eq:2&filter=orgunit_name:ilike:bo

该请求将返回一个结果，其中包括在组织结构中带有“ bo”的组织单位
名称，其组织单位级别为2。

以下示例将返回所有带有 `orgunit_level` 2 或
4：

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_level:in:[2,4]

最后，是一个示例，返回不以开头的所有组织单位
“博”

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_name:!like:Bo

## 仪表板 { #webapi_dashboard } 

 <!--DHIS2-SECTION-ID:webapi_dashboard-->

仪表板旨在为您提供多种分析的概述
诸如地图，图表，数据透视表和报表之类的项目
提供有关数据的全面概述。仪表板可用
在Web API中通过* dashboards *资源。仪表板包含一个
仪表板列表*项目*。一个项目可以代表一个资源，例如
图表，地图或报告表，或代表分析链接的列表
资源，例如报告，资源，表格报告和用户。一种
仪表板项目最多可以包含八个链接。通常，仪表板
客户可以选择直接在
用户界面，同时将多对象项呈现为可点击
链接。

    / api /仪表板

### 浏览仪表板 { #webapi_browsing_dashboards } 

 <!--DHIS2-SECTION-ID:webapi_browsing_dashboards-->

获取具有基本信息的仪表板列表，包括
可以使用JSON格式的标识符，名称和链接进行* GET *请求
以下网址：

    /api/dashboards.json

仪表板资源将提供仪表板列表。请记住
仪表板对象是共享的，因此列表将受到
当前经过身份验证的用户。您可以检索有关以下内容的更多信息：
通过遵循其链接的特定仪表板，类似于：

    /api/dashboards/vQFhmLJU5sK.json

资讯主页包含名称和建立日期等资讯，以及
仪表板项目数组。 JSON格式的响应看起来类似
对此回复（为了删除某些信息，
简洁）。

```json
{
  "lastUpdated" : "2013-10-15T18:17:34.084+0000",
  "id": "vQFhmLJU5sK",
  "created": "2013-09-08T20:55:58.060+0000",
  "name": "Mother and Child Health",
  "href": "https://play.dhis2.org/demo/api/dashboards/vQFhmLJU5sK",
  "publicAccess": "--------",
  "externalAccess": false,
  "itemCount": 17,
  "displayName": "Mother and Child Health",
  "access": {
    "update": true,
    "externalize": true,
    "delete": true,
    "write": true,
    "read": true,
    "manage": true
  },
  "user": {
    "id": "xE7jOejl9FI",
    "name": "John Traore",
    "created": "2013-04-18T15:15:08.407+0000",
    "lastUpdated": "2014-12-05T03:50:04.148+0000",
    "href": "https://play.dhis2.org/demo/api/users/xE7jOejl9FI"
  },
  "dashboardItems": [{
    "id": "bu1IAnPFa9H",
    "created": "2013-09-09T12:12:58.095+0000",
    "lastUpdated": "2013-09-09T12:12:58.095+0000"
    }, {
    "id": "ppFEJmWWDa1",
    "created": "2013-09-10T13:57:02.480+0000",
    "lastUpdated": "2013-09-10T13:57:02.480+0000"
  }],
  "userGroupAccesses": []
}
```

通过指定特定字段可以获得更定制的响应
在请求中。下面提供了一个示例，它将返回更多
有关用户仪表板上每个对象的详细信息。

    / api / dashboards / vQFhmLJU5sK /？fields =：all，dashboardItems [：all]

### 搜索仪表板 { #webapi_searching_dasboards } 

 <!--DHIS2-SECTION-ID:webapi_searching_dasboards-->

用户构建仪表板时很方便
能够使用以下方法搜索各种分析资源
* / dashboards / q *资源。该资源可让您搜索以下内容的匹配项
以下对象的name属性：图表，地图，报表，
用户，报告和资源。您可以通过* GET *进行搜索
请求以下资源URL模式，其中my-query应该是
替换为首选搜索查询：

    /api/dashboards/q/my-query.json

例如，此查询：

    / api / dashboards / q / ma？count = 6＆maxCount = 20＆max = CHART＆max = MAP

将搜索以下内容：

* 分析对象名称包含字符串“ ma”
* 每种类型最多返回6
* 对于CHART和MAP类型，最多返回20个项目

 <table>
 <caption>仪表板/ q查询参数</caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 44%" />
 <col style="width: 35%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>说明</th>
 <th>类型</th>
 <th>默认</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>计数</td>
 <td>要返回的每种类型的项目数</td>
 <td>正整数</td>
 <td> 6 </td>
 </tr>
 <tr class="odd">
 <td> maxCount </td>
 <td>返回的最大类型的项目数</td>
 <td>正整数</td>
 <td> 25 </td>
 </tr>
 <tr class="even">
 <td> max </td>
 <td>返回</td>的maxCount的类型
 <td>字符串[CHART | MAP | REPORT_TABLE | USER | REPORT | RESOURCE] </td>
 <td>不适用</td>
 </tr>
 </tbody>
 </table>

支持JSON和XML响应格式。 JSON格式的响应
将包含对匹配资源的引用以及数量的计数
找到总计和每种资源类型的匹配项。它会看起来
与此类似：

```json
{
  "charts": [{
    "name": "ANC: 1-3 dropout rate Yearly",
    "id": "LW0O27b7TdD"
  }, {
    "name": "ANC: 1 and 3 coverage Yearly",
    "id": "UlfTKWZWV4u"
  }, {
    "name": "ANC: 1st and 3rd trends Monthly",
    "id": "gnROK20DfAA"
  }],
  "maps": [{
    "name": "ANC: 1st visit at facility (fixed) 2013",
    "id": "YOEGBvxjAY0"
  }, {
    "name": "ANC: 3rd visit coverage 2014 by district",
    "id": "ytkZY3ChM6J"
  }],
  "reportTables": [{
    "name": "ANC: ANC 1 Visits Cumulative Numbers",
    "id": "tWg9OiyV7mu"
  }],
  "reports": [{
    "name": "ANC: 1st Visit Cumulative Chart",
    "id": "Kvg1AhYHM8Q"
  }, {
    "name": "ANC: Coverages This Year",
    "id": "qYVNH1wkZR0"
  }],
  "searchCount": 8,
  "chartCount": 3,
  "mapCount": 2,
  "reportTableCount": 1,
  "reportCount": 2,
  "userCount": 0,
  "patientTabularReportCount": 0,
  "resourceCount": 0
}
```

### 创建，更新和删除仪表板 { #webapi_creating_updating_removing_dashboards } 

 <!--DHIS2-SECTION-ID:webapi_creating_updating_removing_dashboards-->

创建，更新和删除仪表板遵循标准REST
语义。为了创建新的信息中心，您可以进行* POST *
请求到* / api / dashboard *资源。从消费者的角度
首先创建仪表板然后添加项目可能会很方便
对此。请求有效负载支持JSON和XML格式。到
创建名称为“我的仪表盘”的仪表盘，您可以在其中使用有效负载
像这样的JSON：

    {
      “名称”：“我的仪表板”
    }

要更新，例如重命名仪表板，您可以通过以下方式发出* PUT *请求：
相似的请求有效负载具有相同的api / dashboard资源。

要删除仪表板，您可以向特定的人发出 *DELETE* 请求
与此类似的仪表板资源：

    / api /仪表板/ vQFhmLJU5sK

### 添加，移动和删除仪表板项目和内容 { #webapi_adding_moving_removing_dashboard_items } 

 <!--DHIS2-SECTION-ID:webapi_adding_moving_removing_dashboard_items-->

为了添加仪表板项目，消费者可以使用
`/ api / dashboards / <dashboard-id> / items / content`资源，其中
\ <dashboard-id\>应替换为相关的仪表板
标识符。该请求必须使用* POST *方法。 URL语法和
下表中详细描述了参数。

 <table>
 <caption>项目内容参数</caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 44%" />
 <col style="width: 35%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>说明</th>
 <th>选项</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>类型</td>
 <td>仪表板项目</td>表示的资源类型
 <td>图表|地图| reportTable |用户|报告| reportTables |资源| PatientTabularReports |应用程式</td>
 </tr>
 <tr class="even">
 <td> id </td>
 <td>由仪表板项目</td>表示的资源的标识符
 <td>资源标识符</td>
 </tr>
 </tbody>
 </table>

用于将图表添加到特定仪表板的* POST *请求URL可以
看起来像这样，最后一个id查询参数值是图表
资源
    标识符：

    / api /仪表板/ vQFhmLJU5sK / items / content？type = chart＆id = LW0O27b7TdD

当添加类型地图，图表，报表和应用程序的资源时，API
将创建一个新项目并将其添加到仪表板。添加资源时
对于用户，报告，报告表和资源类型，API将尝试
将资源添加到相同类型的现有仪表板项目中。如果不
资源少于八个的相同类型的项目或没有相同类型的项目
与之关联的API将创建一个新的仪表板项目，
向其中添加资源。

In order to move a dashboard item to a new position within the list of
items in a dashboard, a consumer can make a *POST* request to the
following resource URL, where `<dashboard-id>` should be replaced by the
identifier of the dashboard, `<item-id>` should be replaced by the
identifier of the dashboard item and `<index>` should be replaced by the
new position of the item in the dashboard, where the index is
zero-based:

    / api /仪表板/ <dashboard-id> / items / <item-id> / position / <index>

要从特定仪表板中完全删除仪表板项目
消费者可以向以下资源 URL 发出 *DELETE* 请求，其中
` <dashboard-id> ` 应替换为仪表板的标识符
和 `<item-id>` 应替换为仪表板的标识符
物品。可以通过 GET 检索仪表板项目标识符
对仪表板资源 URL 的请求。

    / api /仪表板/ <dashboard-id> / items / <item-id>

要删除仪表板项目中的特定内容资源，消费者
可以向以下资源 URL 发出 *DELETE* 请求，其中
` <content-resource-id> ` 应替换为
与仪表板项目关联的资源；例如a 的标识符
报告或用户。例如，这可用于删除单个
报告类型的仪表板项目中的报告，而不是删除
仪表板项目完全：

    / api /仪表板/ <dashboard-id> / items / <item-id> / content / <content-resource-id>

## 分析工具 { #webapi_analytics } 

 <!--DHIS2-SECTION-ID:webapi_analytics-->

要访问DHIS2中的分析性汇总数据，您可以使用
*分析*资源。分析资源功能强大，可让您
查询和检索沿所有可用数据维度汇总的数据。
例如，您可以要求分析资源提供
一组数据元素，期间和
组织单位。此外，您可以检索
基于数据元素的任意多个维度的组合，以及
组织单位组集。

    / api / 33 / analytics

### 请求查询参数 { #webapi_analytics_query_parameters } 

 <!--DHIS2-SECTION-ID:webapi_analytics_query_parameters-->

分析资源可让您指定一系列查询参数：

<table>
<caption>查询参数</caption>
<colgroup>
<col style="width: 17%" />
<col style="width: 10%" />
<col style="width: 45%" />
<col style="width: 27%" />
</colgroup>
<thead>
<tr class="header">
<th>查询参数</th>
<th>必填</th>
<th>说明</th>
<th>选项（默认为先）</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>尺寸</td>
<td>是</td>
<td>要检索的维度和维度项，每个维度和维度项重复。</td>
<td>任意标注</td>
</tr>
<tr class="even">
<td>过滤</td>
<td>无</td>
<td>应用于查询的筛选器和筛选项，每个筛选器和筛选项重复。</td>
<td>任意维度</td>
</tr>
<tr class="odd">
<td>聚合类型</td>
<td>无</td>
<td>聚合过程中使用的聚合类型。</td>
<td>sum | average | average_sum_org_unit | last | last_average_org_unit | count | stddev | variance | min | max</td>
</tr>
<tr class="even">
<td>测量标准</td>
<td>无</td>
<td>数据/度量的过滤器。</td>
<td>eq | gt | ge | lt | le</td>
</tr>
<tr class="odd">
<td>预聚合测量标准</td>
<td>无</td>
<td>数据/度量的过滤器，在执行聚合之前应用。</td>
<td>eq | gt | ge | lt | le</td>
</tr>
<tr>
<td>开始日期</td>
<td>无</td>
<td>日期范围的起始日期。将作为筛选器使用。不能与周期维度或筛选器一起使用。</td>
<td>日期</td>
</tr>
<tr>
<td>结束日期</td>
<td>无</td>
<td>日期范围的结束日期。将作为筛选器使用。不能与周期维度或筛选器一起使用。</td>
<td>日期</td>
</tr>
<tr class="even">
<td>skipMeta</td>
<td>无</td>
<td>排除响应的元数据部分（提高性能）。</td>
<td>假 | 真</td>
</tr>
<tr class="odd">
<td>跳过数据</td>
<td>无</td>
<td>排除响应的数据部分。</td>
<td>假 | 真</td>
</tr>
<tr class="even">
<td>skipRounding</td>
<td>无</td>
<td>跳过数据值的四舍五入，即提供全精度。</td>
<td>false | true</td>
</tr>
<tr class="odd">
<td>层次结构</td>
<td>无</td>
<td>在元数据中包含组织单位祖先的名称和组织单位的层次路径。</td>
<td>假 | 真</td>
</tr>
<tr class="even">
<td>忽略限制</td>
<td>无</td>
<td>忽略响应中最多 50 000 条记录的限制--谨慎使用。</td>
<td>false | true</td>
</tr>
<tr class="odd">
<td>表格布局</td>
<td>无</td>
<td>响应时使用纯数据源或表格布局。</td>
<td>false | true</td>
</tr>
<tr class="even">
<td>隐藏空行</td>
<td>否</td>
<td>隐藏响应中的空行，适用于表格布局为 true 时。</td>
<td>false | true</td>
</tr>
<tr class="odd">
<td>隐藏空列</td>
<td>否</td>
<td>隐藏响应中的空列，适用于表格布局为 true 时。</td>
<td>false | true</td>
</tr>
<tr class="even">
<td>显示层次结构</td>
<td>不显示</td>
<td>显示完整的组织单位层次路径和组织单位名称。</td>
<td>false | true</td>
</tr>
<tr class="odd">
<td>includeNumDen</td>
<td>无</td>
<td>在响应中包含用于计算值的分子和分母。</td>
<td>false | true</td>
</tr>
<tr class="even">
<td>includeMetadataDetails</td>
<td>不包含</td>
<td>在原始数据响应中包含元数据详情。</td>
<td>假 | 真</td>
</tr>
<tr class="odd">
<td>displayProperty</td>
<td>无</td>
<td>元数据要显示的属性。</td>
<td>名称</td>
</tr>
<tr class="even">
<td>outputIdScheme</td>
<td>无</td>
<td>用于查询响应元数据项的标识符方案，可以是标识符、代码或属性。</td>
<td>uid | 代码 | 名称 | 属性：&lt;id&gt;</td>
</tr>
<tr class="odd">
<td>inputIdScheme</td>
<td>无</td>
<td>查询请求中元数据项使用的标识符方案，可以是标识符、代码或属性。</td>
<td>uid | 代码 | 属性：&lt;id&gt;</td>
</tr>
<tr class="even">
<td>批准级别</td>
<td>无</td>
<td>包括至少在给定批准级别之前已获批准的数据，指批准级别标识符。</td>
<td>批准级别标识符</td>
</tr>
<tr class="odd">
<td>相对日期</td>
<td>无</td>
<td>用作相对期间基础的日期。</td>
<td>日期。</td>
</tr>
<tr class="even">
<td>用户单位</td>
<td>无</td>
<td>明确定义要使用的用户组织单位，覆盖与当前用户相关的组织单位，多个标识符可用分号分隔。</td>
<td>组织单位标识符。</td>
</tr>
<tr class="odd">
<td>列</td>
<td>无</td>
<td>用作表格布局列的维度。</td>
<td>任意维度（必须是查询维度）</td>
</tr>
<tr class="even">
<td>行数</td>
<td>无</td>
<td>在表格布局中用作行的维度。</td>
<td>任意维度（必须是查询维度）</td>
</tr>
<tr class="odd">
<td>顺序</td>
<td>无</td>
<td>根据值指定行的排序。</td>
<td>ASC | DESC</td>
</tr>
<tr class="even">
<td>时间字段</td>
<td>无</td>
<td>事件聚合所依据的时间字段。仅适用于事件数据项。可以是预定义选项，也可以是具有基于时间的值类型的属性或数据元素的 ID。</td>
<td>EVENT_DATE | ENROLLMENT_DATE | INCIDENT_DATE | DUE_DATE | COMPLETED_DATE | CREATED | LAST_UPDATED |&lt;属性 ID&gt; |&lt;数据元素 ID&gt;</td>
</tr>
<tr>
<td>orgUnitField</td>
<td>数据元素 ID</td>
<td>事件聚合所依据的组织单位字段。仅适用于事件数据项。可以是具有组织单位值类型的属性或数据元素的 ID。默认选项为省略查询参数。
<td>&lt;属性 ID&gt; |&lt;数据元素 ID&gt;</td>
</tr>
</tbody>
</table>

* dimension *查询参数定义应将哪些尺寸
包含在分析查询中。可以有任意多个尺寸
指定的。应为每个尺寸重复尺寸参数
包含在查询响应中。查询响应可能会
包含指定值所有组合的汇总值
尺寸项目。

* filter *参数定义应将哪些尺寸用作
过滤分析查询中检索到的数据。任意数量
可以指定过滤器。过滤器参数应重复
查询中要使用的每个过滤器。过滤器的尺寸不同于
过滤器尺寸将不属于查询响应
内容，并且响应中的汇总值将是
在过滤器尺寸上崩溃。换句话说，
响应将汇总在过滤器尺寸上，但过滤器
不会作为尺寸包含在实际响应中。作为一个
例如，查询由句点和
组织单位，您可以使用以下网址：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD; cYeuwXTCPkU＆filter = pe：2014Q1; 2014Q2
      ＆filter = ou：O6uvpzGd5pu; lc3eMKXaEfw

通过* aggregationType *查询参数，您可以定义哪种聚合
查询应使用运算符。默认情况下，聚合
将使用为查询中包含的数据元素定义的运算符。
如果您的查询不包含任何数据元素，但包含数据
元素组，第一个数据元素中的聚合运算符
第一组将被使用。组和数据元素的顺序是
不明确的。此查询参数允许您覆盖默认值和
指定特定的聚合运算符。例如，您可以设置
聚合运算符使用以下网址“计数”：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD＆dimension = pe：2014Q1＆dimension = ou：O6uvpzGd5pu
      ＆aggregationType = COUNT

使用* measureCriteria *查询参数可以过滤出数据范围
记录返回。您可以指示系统仅返回记录
汇总数据值等于，大于，大于或等于
等于，小于或小于或等于某些值。您可以指定任何
以下格式的标准数量，其中* critieria *和
* value *应替换为实际值：

    / api / 33 / analytics？measureCriteria =标准：值；标准：值

例如，以下查询将仅返回其中
数据值大于或等于6500且小于33000：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD; cYeuwXTCPkU＆dimension = pe：2014
      ＆dimension = ou：O6uvpzGd5pu; lc3eMKXaEfw＆measureCriteria = GE：6500; LT：33000

与* measureCriteria *类似，* preAggregationMeasureCriteria *查询
参数可让您仅在汇总之前过滤数据
执行。例如，以下查询仅聚合数据，其中
原始值在定义的标准之内：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD; cYeuwXTCPkU＆dimension = pe：2014
      ＆dimension = ou：O6uvpzGd5pu; lc3eMKXaEfw＆preAggregationMeasureCriteria = GE：10; LT：100

* startDate *和* endDate *参数可用于指定自定义
要汇总的日期范围。指定日期范围时，您不能
指定相对或固定期间作为维度或过滤条件。日期范围
将过滤分析响应。您可以像这样使用它：

    /api/33/analytics.json?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      ＆dimension = ou：ImspTQPwCqd＆startDate = 2018-01-01＆endDate = 2018-06-01

为了使分析资源生成形状的数据
对于现成的表格，您可以通过以下方式提供* tableLayout *参数：
价值真实。而不是生成普通的，标准化的数据源，
分析资源现在将以表布局生成数据。你
可以将* columns *和* rows *参数与尺寸标识符一起使用
以分号分隔为值，以指示要用作
表的列和行。列和行的尺寸必须存在
作为查询中的数据维度（不是过滤器）。这样的要求可以看
像这样：

    /api/33/analytics.html?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&dimension=pe:2014Q1;2014Q2
      ＆dimension = ou：O6uvpzGd5pu＆tableLayout = true＆columns = dx; ou＆rows = pe

* order *参数可用于分析资源生成
有序数据。数据将按升序（或降序）排序
价值。一个要求值按降序排列的示例请求
顺序是：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD＆dimension = pe：LAST_12_MONTHS
      ＆dimension = ou：O6uvpzGd5pu＆order = DESC

### 尺寸和项目 { #webapi_analytics_dimensions_and_items } 

 <!--DHIS2-SECTION-ID:webapi_analytics_dimensions_and_items-->

DHIS2具有多维数据模型，其中包含多个固定的
动态数据维度。固定尺寸是数据元素，
周期（时间）和组织单位尺寸。您可以动态添加
类别，数据元素组集和组织的维度
单位组集。下表显示了可用的数据维度
在DHIS2中。每个数据维度都有一个对应的*维度
标识符*，并且每个维度可以具有一组*维度项*：

<table>
<caption>尺寸和尺寸项</caption>
<colgroup>
<col style="width: 38%" />
<col style="width: 12%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>尺寸</th>
<th>维度 id</th>
<th>维度项目</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>数据元素、指标、数据集报告率度量、数据元素操作数、程序指标、程序数据元素、程序属性、验证规则</td>
<td>dx</td>
<td>数据元素、指标、数据集报告率度量、数据元素操作数、程序指标、程序属性标识符、关键字 DE_GROUP-&lt;group-id&gt;, IN_GROUP-&lt;group-id&gt;, use&lt;dataelement-id&gt; 。&lt;选项组合-id&gt; 用于数据元素操作数，&lt;program-id&gt;.&lt;dataelement-id&gt; 用于程序数据元素，&lt;program-id&gt;.&lt;attribute-id&gt; 用于程序属性，&lt;validationrule-id&gt; 用于验证结果。</td>
</tr>
<tr class="even">
<td>周期（时间）</td>
<td>时间</td>
<td>ISO 期间和相对期间，参见&quot;日期和期间格式&quot;</td>
</tr>
<tr class="odd">
<td>组织单位层次</td>
<td>ou</td>
<td>组织单位标识符，以及关键字 USER_ORGUNIT、USER_ORGUNIT_CHILDREN、USER_ORGUNIT_GRANDCHILDREN、LEVEL-&lt;level&gt; 和 OU_GROUP-&lt;group-id&gt;</td>
</tr>
<tr class="even">
<td>类别选项组合</td>
<td>组</td>
<td>类别选项组合标识符（省略可获得所有项目）</td>
</tr>
<tr class="odd">
<td>属性选项组合</td>
<td>ao</td>
<td>类别选项组合标识符（省略可获取所有项目）</td>
</tr>
<tr class="even">
<td>类别</td>
<td>&lt;类别 ID&gt;</td>
<td>类别选项标识符（省略以获取所有项目）</td>
</tr>
<tr class="odd">
<td>数据元素组集</td>
<td>&lt;组套 ID&gt;</td>
<td>数据元素组标识符（省略以获取所有项目）</td>
</tr>
<tr class="even">
<td>组织单位组集</td>
<td>&lt;组集 ID&gt;</td>
<td>组织单位组标识符（省略以获取所有项目）</td>
</tr>
<tr class="odd">
<td>类别选项组集</td>
<td>&lt;组套 ID&gt;</td>
<td>类别选项组标识符（省略以获取所有项目）</td>
</tr>
</tbody>
</table>

不必知道哪些对象用于
设计分析查询时的各种动态维度。你可以得到
通过访问Web API中的以下URL可获得动态尺寸的完整列表：

    / api / 33 /尺寸

分析资源的基本 URL 是`/api/analytics`。请求
您可以在其上使用查询字符串的特定维度和维度项目
以下格式，其中 `dim-id` 和 `dim-item` 应替换为实际值：

    / api / 33 / analytics？dimension = dim-id：dim-item; dim-item＆dimension = dim-id：dim-item; dim-item

如上所示，维度标识符后跟冒号
而维项目之间用分号分隔。例如，
查询两个数据元素，两个期间和两个组织单位可以
可以使用以下网址完成：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD; cYeuwXTCPkU
      ＆dimension = pe：2016Q1; 2016Q2＆dimension = ou：O6uvpzGd5pu; lc3eMKXaEfw

查询按类别选项组合细分的数据，而不是
数据元素总数，您可以在查询中包括类别维度
字符串，例如这样：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD; cYeuwXTCPkU
      ＆dimension = co＆dimension = pe：201601＆dimension = ou：O6uvpzGd5pu; lc3eMKXaEfw

选择数据元素时，您还可以选择
使用DE_GROUP- <id>语法将其分组为项目：

    / api / 33 / analytics？dimension = dx：DE_GROUP-h9cuJOkOwY2
      ＆dimension = pe：201601＆dimension = ou：O6uvpzGd5pu

选择数据集报告率时，语法包含数据
设置标识符，后跟报告率指标：

    /api/33/analytics?dimension=dx:BfMAe6Itzgt.REPORTING_RATE;BfMAe6Itzgt.ACTUAL_REPORTS
      ＆dimension = pe：201601＆dimension = ou：O6uvpzGd5pu

要查询（跟踪器域类型的）程序数据元素，您可以获取
通过使用
 <program-id>。 <dataelement-id>语法：

    /api/33/analytics.json?dimension=dx:eBAyeGv0exc.qrur9Dvnyt5;eBAyeGv0exc.GieVkTxp4HH
      ＆dimension = pe：LAST_12_MONTHS＆filter = ou：ImspTQPwCqd

要查询程序属性（跟踪的实体属性），您可以获取
通过使用
 <program.id>。 <attribute-id>语法：

    /api/33/analytics.json?dimension=dx:IpHINAT79UW.a3kGcGDCuk6;IpHINAT79UW.UXz7xuGCEhU
      ＆dimension = pe：LAST_4_QUARTERS＆dimension = ou：ImspTQPwCqd

要查询组织单位组集和数据元素，可以使用
以下网址。请注意如何将组集标识符用作
维标识符和作为维项目的组：

    / api / 33 / analytics？dimension = Bpx0589u8y0：oRVt7g429ZO; MAs88nJc9nL
      ＆dimension = pe：2016＆dimension = ou：ImspTQPwCqd

要查询数据元素和类别，可以使用此URL。使用
类别标识符为维度标识符，类别选项为
尺寸项目：

    / api / 33 / analytics？dimension = dx：s46m5MS0hxu; fClA2Erf6IO＆dimension = pe：2016
      ＆dimension = YNZyaJHiHYq：btOyqprQ9e8; GEqzEKCHoGA＆filter = ou：ImspTQPwCqd

使用相关的相对期间和组织单位进行查询
当前用户可以使用如下网址：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD; cYeuwXTCPkU
      ＆dimension = pe：LAST_12_MONTHS＆dimension = ou：USER_ORGUNIT

When selecting organisation units for a dimension you can select an
entire level optionally constrained by any number of boundary
organisation units with the `LEVEL-<level>` syntax. Boundary refers to a
top node in a sub-hierarchy, meaning that all organisation units at the
given level below the given boundary organisation unit in the hierarchy
will be included in the response, and is provided as regular organisation unit 
dimension items. The level value can either be a numerical level or refer to the identifier
of the organisation unit level entity. A simple query for all org units at level three:

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD＆dimension = pe：2016＆dimension = ou：LEVEL-3

带有两个边界组织单位的三级和四级查询可以是
指定如下：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD＆dimension = pe：2016
      ＆dimension = ou：LEVEL-3; LEVEL-4; O6uvpzGd5pu; lc3eMKXaEf

选择组织单位时，您还可以选择所有组织
组织单位组中的单位作为维度项目包括在内
使用OU_GROUP- <id>语法。组中的组织单位
可以选择受任何数量的边界组织约束
单位。级别和组项目都可以重复任意数量的
时间：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD＆dimension = pe：2016
      ＆dimension = ou：OU_GROUP-w0gFTTmsUcF; OU_GROUP-EYbopBOJWsW; O6uvpzGd5pu; lc3eMKXaEf

您可以将标识符方案用于
具有outputIdScheme属性的分析响应，如下所示。你可以
使用ID，代码和属性作为标识符方案：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD; cYeuwXTCPkU
      ＆dimension = pe：2017Q1; 2017Q2＆dimension = ou：O6uvpzGd5pu＆outputIdScheme = CODE

列出了使用分析资源时需要注意的几件事
以下。

  - 数据元素，指标，数据集报告率，计划数据
    元素和计划指标是通用数据维度的一部分，
    标识为“ dx”。这意味着您可以使用任何数据
    元素，指标和数据集标识符以及“ dx”
    查询中的维度标识符。

  - 对于类别，数据元素组集和组织单位组
    设置尺寸，如果没有，将在查询中使用所有尺寸项目
    指定尺寸项目。

  - 对于期间维度，维度项目为ISO期间
    标识符和/或相对期间。请参考本节
    上述称为“日期和期间格式”的期间格式和
    可用的相对期间。

  - 对于组织单位维度，您可以指定要
    组织单位或组织单位的子单位
    与当前为请求认证的用户相关联
    使用它们的键 `USER_ORGUNIT` 或 `USER_ORGUNIT_CHILDREN` 作为项目、
    分别。您还可以指定组织单位标识符
    直接或两者结合。

  - 对于组织单位维度，您可以指定组织
    层次结构级别和用于请求的边界单元
    格式`LEVEL- <level>-<boundary-id>`;举个例子
    `LEVEL-3-ImspTQPwCqd`意味着低于给定的所有组织单位
    层次结构中级别3的边界单元。

  - 对于组织单位维度，维度项目为
    组织单位及其子层次结构-数据将被汇总
    对于在给定组织单位以下的所有组织单位
    等级制度。

  - 您不能为类别选项指定维项目
    组合尺寸。相反，响应将包含项目
    链接到数据值。

### dx尺寸 { #webapi_analytics_dx_dimension } 

 <!--DHIS2-SECTION-ID:webapi_analytics_dx_dimension-->

`dx` 维度是一个特殊的维度，它可以包含所有的
以下数据类型。

<table>
<caption>数据 dx 尺寸类型</caption>
<colgroup>
<col style="width: 25%" />
<col style="width: 23%" />
<col style="width: 27%" />
<col style="width: 23%" />
</colgroup>
<thead>
<tr class="header">
<th>类型</th>
<th>语法</th>
<th>说明</th>
<th>数据源</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>指标</td>
<td>&lt;indicator-id&gt;</td>
<td>指标标识符。</td>
<td>汇总数据</td>
</tr>
<tr class="even">
<td>指标 grop</td>
<td>IN_GROUP-&lt;indicatorgroup-id&gt;</td>
<td>关键词，后跟指标组标识符。将在回复中包含该组中的所有指标。</td>
<td>汇总数据</td>
</tr>
<tr class="odd">
<td>数据元素</td>
<td>&lt;dataelement-id&gt;</td>
<td>数据元素标识符。</td>
<td>汇总数据</td>
</tr>
<tr class="even">
<td>数据元素组</td>
<td>DE_GROUP-&lt;dataelementgroup-id&gt;</td>
<td>关键词，后跟数据元素组标识符。将在响应中包含该组中的所有数据元素。</td>
<td>汇总数据</td>
</tr>
<tr class="odd">
<td>数据元素操作符</td>
<td>&lt;dataelement-id&gt;.&lt;categoryoptcombo-id&gt;.&lt;attributeoptcombo-id&gt;</td>
<td>数据元素标识符，后跟类别选项组合和属性选项组合标识符中的一个或两个。通配符&quot;*&quot; 符号可用于表示任何选项组合值。属性选项组合标识符可以完全省略。</td>
<td>汇总数据</td>
</tr>
<tr class="even">
<td>数据集</td>
<td>&lt;dataset-id&gt;.&lt;reporting-rate-metric&gt;</td>
<td>数据集标识符，后跟报告率指标。可以是 REPORTING_RATE | REPORTING_RATE_ON_TIME | ACTUAL_REPORTS | ACTUAL_REPORTS_ON_TIME | EXPECTED_REPORTS。</td>
<td>数据集完整性登记</td>
</tr>
<tr class="odd">
<td>计划数据元素</td>
<td>&lt;program-id&gt;.&lt;dataelement-id&gt;</td>
<td>程序标识符，后跟数据元素标识符。读取指定程序中的事件。</td>
<td>指定程序中的事件</td>
</tr>
<tr class="even">
<td>程序指示符</td>
<td>&lt;programindicator-id&gt;</td>
<td>程序指示器标识符。从与程序标识符相关的程序中读取事件。</td>
<td>从程序指示符的程序中读取事件</td>
</tr>
<tr class="odd">
<td>验证结果</td>
<td>&lt;validationrule-id&gt;</td>
<td>验证规则标识符。将包括违反验证规则的验证规则，要求生成并持久保存验证结果。</td>
<td>验证结果</td>
</tr>
</tbody>
</table>

Items from all of the various `dx` types can be combined in an analytics
request. An example looks like this:

    /api/33/analytics.json
      ？dimension = dx：Uvn6LCg7dVU; BfMAe6Itzgt.REPORTING_RATE; IpHINAT79UW.a3kGcGDCuk6
      ＆dimension = pe：LAST_12_MONTHS＆filter = ou：ImspTQPwCqd

组语法也可以与其他任何项目一起使用。一个
示例看起来像这样：

    /api/33/analytics.json
      ？dimension = dx：DE_GROUP-qfxEYY9xAl6; IN_GROUP-oehv9EO3vP7; BfMAe6Itzgt.REPORTING_RATE
      ＆dimension = pe：LAST_12_MONTHS＆filter = ou：ImspTQPwCqd

数据元素操作数可以选择指定属性选项
组合并使用通配符，例如指定所有类别选项
组合值：

    /api/33/analytics.json
      ？dimension = dx：Uvn6LCg7dVU。*。j8vBiBqGf6O; Uvn6LCg7dVU.Z4oQs46iTeR
      ＆dimension = pe：LAST_12_MONTHS＆filter = ou：ImspTQPwCqd

> **提示**
>
>学习如何使用Analytics API的好方法是使用DHIS2
> *数据透视表*应用。您可以使用
>各种尺寸和项目，然后单击下载>纯数据源> JSON
>以查看在地址栏的结果Analytics API调用
>您的Web浏览器。

### 回应格式 { #webapi_analytics_response_formats } 

 <!--DHIS2-SECTION-ID:webapi_analytics_response_formats-->

包含聚合数据的分析响应可以在
各种表现形式。像往常一样，您可以表示对某个项目感兴趣
通过将文件扩展名附加到 URL，通过
`Accept` HTTP 标头或通过 `format` 查询参数。这
默认格式为 JSON。可用的格式和内容类型是
下面列出。

  - json（应用程序/ json）

  - jsonp（应用程序/ javascript）

  - xml（应用程序/ xml）

  - csv（应用程序/ csv）

  - html（text / html）

  - html + css（text / html）

  - xls（application / vnd.ms-excel）

例如，要请求XML格式的分析响应，您可以
使用以下URL：

    /api/33/analytics.xml?dimension=dx:fbfJHSPpUQD
      ＆dimension = pe：2016＆dimension = ou：O6uvpzGd5pu; lc3eMKXaEfw

必须使用HTTP * GET *方法检索分析响应。
这样可以直接链接到网页上的分析响应，例如
以及其他启用HTTP的客户端。要进行功能测试，我们可以使用
cURL库。通过对演示数据库执行此命令
您将获得JSON格式的分析响应：

```bash
curl "play.dhis2.org/demo/api/analytics.json?dimension=dx:eTDtyyaSA7f;FbKK4ofIv5R
  &dimension=pe:2016Q1;2016Q2&filter=ou:ImspTQPwCqd" -u admin:district
```

JSON响应如下所示：

```json
{
  "headers": [
    {
      "name": "dx",
      "column": "Data",
      "meta": true,
      "type": "java.lang.String"
    },
    {
      "name": "pe",
      "column": "Period",
      "meta": true,
      "type": "java.lang.String"
    },
    {
      "name": "value",
      "column": "Value",
      "meta": false,
      "type": "java.lang.Double"
    }
  ],
  "height": 4,
  "metaData": {
    "pe": [
      "2016Q1",
      "2016Q2"
    ],
    "ou": [
      "ImspTQPwCqd"
    ],
    "names": {
      "2016Q1": "Jan to Mar 2016",
      "2016Q2": "Apr to Jun 2016",
      "FbKK4ofIv5R": "Measles Coverage <1 y",
      "ImspTQPwCqd": "Sierra Leone",
      "eTDtyyaSA7f": "Fully Immunized Coverage"
    }
  },
  "rows": [
    [
      "eTDtyyaSA7f",
      "2016Q2",
      "81.1"
    ],
    [
      "eTDtyyaSA7f",
      "2016Q1",
      "74.7"
    ],
    [
      "FbKK4ofIv5R",
      "2016Q2",
      "88.9"
    ],
    [
      "FbKK4ofIv5R",
      "2016Q1",
      "84.0"
    ]
  ],
  "width": 3
}
```

响应表示维数据表。 * headers *数组
概述了表中包括哪些列以及哪些内容
列包含。 * column *属性显示列尺寸
标识符，或者如果该列包含度量，则为单词“值”。这
如果列包含维度项目，则* meta *属性为* true *或
如果列包含度量（汇总数据值），则为* false *。这
* name *属性类似于column属性，但它显示
如果列包含度量，则为“值”。 * type *属性
指示列值的Java类类型。

* height *和* width *属性指示多少数据列和
行分别包含在响应中。

* metaData period *属性包含一个唯一的，有序的数组
响应中包含的时间段。 * metaData ou *属性包含一个
响应中包含的组织单位的标识符数组。
* metaData名称*属性包含标识符之间的映射
用于数据响应和它们表示的对象的名称。
客户端可以使用它替换数据中的标识符
带有名称的响应，以提供更有意义的数据视图
桌子。

* rows *数组包含维数据表。它包含
具有维项目（对象或期间标识符）的列和一列
具有汇总的数据值。上面的示例响应有一个
数据/指标列，期间列和值列。首先
列包含指标标识符，第二个包含ISO期间
标识符，第三个包含聚合的数据值。

### 约束 { #webapi_analytics_constraints } 

 <!--DHIS2-SECTION-ID:webapi_analytics_constraints-->

您可以提供给输入的一些约束
分析资源。

  - 查询中必须至少指定一个维度。

  - 尺寸不能指定为尺寸和过滤器
    同时。

  - 必须至少指定一个期间作为维度或过滤器。

  - 类别不能指定为过滤器。

  - 只能将一个指标指定为过滤器。

  - 只能将单个报告率指定为过滤器。

  - 不能与数据集一起指定数据元素组集。

  - 类别只能与数据元素一起指定，不能与数据元素一起指定
    指标或数据集。

  - 不能多次指定尺寸。

  - 固定尺寸（“ dx”，“ pe”，“ ou”）必须至少具有一个选项
    包含在查询中。

  - 一个表默认不能包含超过5万个单元格，这可以
    在系统设置下进行配置。

当查询请求违反任何这些约束时，服务器将
返回状态码为409且内容类型为“文本/纯文本”的响应
以及问题的文字描述。

### 数据值设定格式 { #webapi_analytics_data_value_set_format } 

 <!--DHIS2-SECTION-ID:webapi_analytics_data_value_set_format-->

Analytics * dataValueSet *资源允许返回汇总的
数据采用数据值集格式。此格式代表原始数据
值，而不是已经通过各种方式汇总的数据
方面。将汇总数据导出为常规数据值很有用
当目标系统包含数据时用于系统之间的数据交换
与目标系统存储的粒度相比，具有更高的粒度。

例如，您可以在目标系统中指定一个指标
汇总多个数据元素的数据并导入该数据
目标系统中的单个数据元素。再举一个例子
可以汇总目标中组织单位第4级收集的数据
系统升级到2级并将该数据导入目标系统。

您可以从原始数据值集格式检索数据
dataValueSet资源：

    / api / 33 / analytics / dataValueSet

支持以下资源表示形式：

  - json（应用程序/ json）

  - xml（应用程序/ xml）

使用数据值集格式时，必须精确地确定三个维度
指定为分析维度，每个维度至少包含一个维度项：

  - 资料（dx）

  - 周期（pe）

  - 组织单位（ou）

任何其他尺寸都将被忽略。过滤器将与
常规分析请求。请注意，任何数据维度类型都可以是
指定的，包括指示符，数据元素，数据元素操作数，
数据集和计划指标。

汇总特定指标数据的示例请求，
期间和组织单位，并将其作为常规数据值返回
XML看起来像这样：

    api / analytics / dataValueSet.xml？dimension = dx：Uvn6LCg7dVU; OdiHJayrsKo
      ＆dimension = pe：LAST_4_QUARTERS＆dimension = ou：lc3eMKXaEfw; PMa2VCrupOd

一种为数据元素操作数聚合数据并使用CODE的请求
因为输出标识符方案如下所示。当定义
输出标识符方案，响应的所有元数据对象部分都是
做作的：

    api / analytics / dataValueSet.json？dimension = dx：fbfJHSPpUQD.pq2XI5kz2BY; fbfJHSPpUQD.PT59n8BQbqM
      ＆dimension = pe：LAST_12_MONTHS＆dimension = ou：ImspTQPwCqd＆outputIdScheme = CODE

使用基于属性的标识符方案进行导出时，存在风险
产生重复的数据值。布尔查询参数
只可用于调试目的，仅返回
复制数据值。此响应可用于清理
重复项：

    api / analytics / dataValueSet.xml？dimension = dx：Uvn6LCg7dVU; OdiHJayrsKo
      ＆dimension = pe：LAST_4_QUARTERS＆dimension = ou：lc3eMKXaEfw＆duplicatesOnly = true

### 原始数据格式 { #webapi_analytics_raw_data } 

 <!--DHIS2-SECTION-ID:webapi_analytics_raw_data-->

Analytics * rawData *资源允许返回存储在其中的数据
分析数据表，而无需执行任何汇总。这
对于想要执行聚合的客户端非常有用，并且
自行过滤，而无需在
可用数据维度本身。

    / api / analytics / rawData

支持以下资源表示形式：

  - json（应用程序/ json）

  - csv（应用程序/ csv）

该资源遵循常规分析资源的语法。仅有的
支持查询参数的子集。此外，
* startDate *和* endDate *参数可用。支持的
参数列在下表中。

 <table>
 查询参数<caption> </caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需/注释</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>尺寸</td>
 <td>是</td>
 </tr>
 <tr class="even">
 <td>开始日期</td>
 <td>否/ yyyy-MM-dd </td>
 </tr>
 <tr class="odd">
 <td>结束日期</td>
 <td>否/ yyyy-MM-dd </td>
 </tr>
 <tr class="even">
 <td> skipMeta </td>
 <td>否</td>
 </tr>
 <tr class="odd">
 <td> skipData </td>
 <td>否</td>
 </tr>
 <tr class="even">
 <td>层次结构元</td>
 <td>否</td>
 </tr>
 <tr class="odd">
 <td> showHierarchy </td>
 <td>否</td>
 </tr>
 <tr class="even">
 <td> displayProperty </td>
 <td>否</td>
 </tr>
 <tr class="odd">
 <td> outputIdScheme </td>
 <td>否</td>
 </tr>
 <tr class="even">
 <td> inputIdScheme </td>
 <td>否</td>
 </tr>
 <tr class="odd">
 <td> userOrgUnit </td>
 <td>否</td>
 </tr>
 </tbody>
 </table>

* dimension *查询参数定义了哪些尺寸（表列）
应该包含在响应中。可以选择将其约束
与项目。 * filter *查询参数定义哪些项目和
尺寸（表格列）应用作响应的过滤器。

对于组织单位维度，响应将包含数据
与组织单位和该组织中的所有组织单位相关联
子层次结构（树中的子级）。与
常规分析资源，其中只有明确选择的资源
包括组织单位。

要检索包含特定数据元素，特定期间的响应，
特定的组织单位和两个自定义维度的所有数据，
可以发出这样的请求：

    /api/analytics/rawData.json?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU;Jtf34kNZhzP
      ＆dimension = J5jldMd8OHv＆dimension = Bpx0589u8y0
      ＆dimension = pe：LAST_12_MONTHS
      ＆dimension = ou：O6uvpzGd5pu; fdc6uOvgoji

* startDate *和* endDate *参数允许获取链接的数据
到这些日期之间的任何时间段。这避免了定义所有
明确在
    要求：

    /api/analytics/rawData.json?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU;Jtf34kNZhzP
      ＆dimension = J5jldMd8OHv＆dimension = Bpx0589u8y0
      ＆startDate = 2015-01-01＆endDate = 2015-12-31
      ＆dimension = ou：O6uvpzGd5pu; fdc6uOvgoji

* filter *参数可用于过滤响应而无需
包括该维度作为响应的一部分，这次是CSV
格式：

    /api/analytics/rawData.csv?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU;Jtf34kNZhzP
      ＆filter = J5jldMd8OHv：uYxK4wmcPqA; tDZVQ1WtwpA
      ＆startDate = 2015-01-01＆endDate = 2015-12-31
      ＆dimension = ou：O6uvpzGd5pu

如果需要人类可读的数据，则* outputIdScheme *参数很有用
可以将其设置为* NAME *，因此如下所示：

    /api/analytics/rawData.csv?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      ＆filter = J5jldMd8OHv：uYxK4wmcPqA; tDZVQ1WtwpA
      ＆startDate = 2017-01-01＆endDate = 2017-12-31
      ＆dimension = ou：O6uvpzGd5pu
      ＆outputIdScheme = NAME

* rawData *资源的响应看起来与
常规分析资源；不同之处在于响应包含
原始的非汇总数据，适合于进一步汇总
第三方系统。

### 调试 { #webapi_analytics_debugging } 

 <!--DHIS2-SECTION-ID:webapi_analytics_debugging-->

调试分析请求时，检查数据可能很有用
汇总分析响应的价值来源。这
* analytics / debug / sql *资源将提供一条SQL语句，该语句
返回datavalue表的相关内容。你可以生产
通过执行内容类型为“ text / html”的GET请求来执行此SQL或
如下所示的“文本/纯文本”。维度和过滤器语法与
常规分析查询：

    / api / analytics / debug / sql？dimension = dx：fbfJHSPpUQD; cYeuwXTCPkU
      ＆filter = pe：2016Q1; 2016Q2＆filter = ou：O6uvpzGd5pu

## 事件分析 { #webapi_event_analytics } 

 <!--DHIS2-SECTION-ID:webapi_event_analytics-->

事件分析 API 允许您访问聚合的事件数据和查询
*事件*在 DHIS2 中捕获。此资源可让您检索基于事件的
在程序和可选的程序阶段，并让您检索和
在任何事件维度上过滤事件。

    / api / 33 / analytics / events

### 尺寸和项目 { #webapi_event_analytics_dimensions_items } 

 <!--DHIS2-SECTION-ID:webapi_event_analytics_dimensions_items-->

事件维度包括数据元素，属性，组织单位
和时期。汇总的事件分析资源将返回
汇总信息，例如计数或平均值。查询分析
资源将简单地返回与一组条件匹配的事件，并且
不执行任何聚合。您可以在表单中指定维项目
来自选项集的选项集和来自图例集的图例用于数据
与之相关联的元素和属性。事件
尺寸在下表中列出。

<table>
<caption>Event dimensions</caption>
<colgroup>
<col style="width: 27%" />
<col style="width: 11%" />
<col style="width: 60%" />
</colgroup>
<thead>
<tr class="header">
<th>Dimension</th>
<th>Dimension id</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Data elements</td>
<td>&lt;id&gt;</td>
<td>Data element identifiers</td>
</tr>
<tr class="even">
<td>Attributes</td>
<td>&lt;id&gt;</td>
<td>Attribute identifiers</td>
</tr>
<tr class="odd">
<td>Periods</td>
<td>pe</td>
<td>ISO periods and relative periods, see &quot;date and period format&quot;</td>
</tr>
<tr class="even">
<td>Organisation units</td>
<td>ou</td>
<td>Organisation unit identifiers and keywords USER_ORGUNIT, USER_ORGUNIT_CHILDREN, USER_ORGUNIT_GRANDCHILDREN, LEVEL-&lt;level&gt; and OU_GROUP-&lt;group-id&gt;</td>
</tr>
<tr class="odd">
<td>Organisation unit group sets</td>
<td>&lt;org unit group set id&gt;</td>
<td>Organisation unit group set identifiers</td>
</tr>
<tr class="even">
<td>Categories</td>
<td>&lt;category id&gt;</td>
<td>Category identifiers (program attribute categories only)</td>
</tr>
</tbody>
</table>

### 请求查询参数 { #webapi_event_analytics_request_query_parameters } 

 <!--DHIS2-SECTION-ID:webapi_event_analytics_request_query_parameters-->

Analytics事件API使您可以指定一系列查询参数。

 <table>
 <caption> 事件查询和聚合分析的查询参数 </caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 11%" />
 <col style="width: 48%" />
 <col style="width: 19%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 需要 </th>
 <th> 说明 </th>
 <th> 选项（默认第一个） </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 程序 </td>
 <td> 是 </td>
 <td> 程序标识符。 </td>
 <td> 任何程序标识符 </td>
 </tr>
 <tr class="even">
 <td> 阶段 </td>
 <td> 否 </td>
 <td> 节目阶段标识符。 </td>
 <td> 任何程序阶段标识符 </td>
 </tr>
 <tr class="odd">
 <td> 开始日期 </td>
 <td> 是 </td>
 <td> 活动的开始日期。 </td>
 <td> yyyy-MM-dd 格式的日期 </td>
 </tr>
 <tr class="even">
 <td> 结束日期 </td>
 <td> 是 </td>
 <td> 活动的结束日期。 </td>
 <td> yyyy-MM-dd 格式的日期 </td>
 </tr>
 <tr class="odd">
 <td> 尺寸 </td>
 <td> 是 </td>
 <td> 维标识符，包括数据元素、属性、计划指标、期间、组织单位和组织单位组集。参数可以重复任意次数。项目过滤器可以应用于 &lt;item-id&gt;:&lt;operator&gt;:&lt;filtera001087z0.过滤器值不区分大小写。 </td>
 <td> 算子可以EQ | GT |通用电气 | LT |乐 |东北 |喜欢 |在 </td>
 </tr>
 <tr class="even">
 <td> 过滤器 </td>
 <td> 否 </td>
 <td> 维度标识符，包括数据元素、属性、期间、组织单位和组织单位组集。参数可以重复任意次数。项目过滤器可以应用于 &lt;item-id&gt;:&lt;operator&gt;:&lt;filtera001087z0.过滤器值不区分大小写。 </td>
 <td> </td>
 </tr>
 <tr class="odd">
 <td>hierarchyMeta </td>
 <td> 否 </td>
 <td> 在元数据中包含组织单元祖先的名称和组织单元的层次结构路径。 </td>
 <td> 假 |真 </td>
 </tr>
 <tr class="even">
 <td> eventStatus </td>
 <td> 否 </td>
 <td> 指定要包括的事件的状态。 </td>
 <td> ACTIVE |已完成 |日程 |逾期 |跳过 </td>
 </tr>
 <tr class="odd">
 <td> 程序状态 </td>
 <td> 否 </td>
 <td> 指定要包括的事件的注册状态。 </td>
 <td> ACTIVE |已完成 |取消 </td>
 </tr>
 <tr class="even">
 <td> relativePeriodDate </td>
 <td> 字符串 </td>
 <td> 否 </td>
 <td> 日期标识符，例如：&quot;2016-01-01&quot;。覆盖相对时间段 </td> 的开始日期
 </tr>
 <tr class="odd">
 <td> 列 </td>
 <td> 否 </td>
 <td> 用作表格布局列的尺寸。 </td>
 <td> 任意维度（必须是查询维度） </td>
 </tr>
 <tr class="even">
 <td> 行 </td>
 <td> 否 </td>
 <td> 用作表格布局行的尺寸。 </td>
 <td> 任意维度（必须是查询维度） </td>
 </tr>
 </tbody>
 </table>

 <table>
 <caption> 仅用于事件查询分析的查询参数 </caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 11%" />
 <col style="width: 48%" />
 <col style="width: 19%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 需要 </th>
 <th> 说明 </th>
 <th> 选项 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ouMode </td>
 <td> 否 </td>
 <td> 选择组织单位的方式。默认值为 DESCENDANTS，表示层次结构中的所有子单元。 CHILDREN 是指层次结构中的直系孩子； SELECTED 仅指选定的组织单位。 </td>
 <td> 后代，儿童，选定 </td>
 </tr>
 <tr class="even">
 <td> 升序 </td>
 <td> 否 </td>
 <td> 要升序排序的维度，可以参考事件日期、组织单位名称和代码以及任何项目标识符。 </td>
 <td> 事件日期 | OUNAME |欧码 |项目标识符 </td>
 </tr>
 <tr class="odd">
 <td> 描述 </td>
 <td> 否 </td>
 <td> 降序排列的维度，可以参考事件日期、组织单位名称和代码以及任何项目标识符。 </td>
 <td> 事件日期 | OUNAME |欧码 |项目标识符 </td>
 </tr>
 <tr class="even">
 <td>坐标只有</td>
 <td> 否 </td>
 <td> 是否只返回有坐标的事件。 </td>
 <td> 假 |真 </td>
 </tr>
 <tr class="odd">
 <td> dataIdScheme </td>
 <td> 否 </td>
 <td> 用于数据的 Id 方案，更具体地说是具有选项集或图例集的数据元素和属性，例如在数据响应中返回选项的名称而不是代码，或图例的名称而不是图例 ID。 </td>
 <td> 名称 |代码 | UID </td>
 </tr>
 <tr class="even">
 <td> 页面 </td>
 <td> 否 </td>
 <td> 页码。默认页面为 1。</td>
 <td> 数字正值 </td>
 </tr>
 <tr class="odd">
 <td> 页面大小 </td>
 <td> 否 </td>
 <td> 页面大小。默认大小为每页 50 个项目。 </td>
 <td> 数字零或正值 </td>
 </tr>
 </tbody>
 </table>

 <table>
 <caption>仅用于汇总事件分析的查询参数</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 11%" />
 <col style="width: 48%" />
 <col style="width: 19%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 <th>选项</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>值</td>
 <td>否</td>
 <td>值维度标识符。可以是数据元素或必须为数值类型的属性。 </td>
 <td>数据元素或属性标识符</td>
 </tr>
 <tr class="even">
 <td>聚合类型</td>
 <td>否</td>
 <td>值维的聚合类型。默认值为AVERAGE。 </td>
 总和| <td>平均AVERAGE_SUM_ORG_UNIT |最后| LAST_AVERAGE_ORG_UNIT | COUNT | STDDEV |差异| MIN |最大</td>
 </tr>
 <tr class="odd">
 <td> showHierarchy </td>
 <td>否</td>
 <td>显示完整的组织单位层次结构路径以及组织单位名称。 </td>
 否| <td>假|真</td>
 </tr>
 <tr class="even">
 <td> displayProperty </td>
 <td>否</td>
 <td>为元数据显示的属性。 </td>
 名称| <td>简称：</td>
 </tr>
 <tr class="odd">
 <td> sortOrder </td>
 <td>否</td>
 <td>按升序或降序对value列上的记录进行排序。 </td>
 <td> ASC | DESC </td>
 </tr>
 <tr class="even">
 <td>限制</td>
 <td>否</td>
 <td>要返回的最大记录数。不能大于10000。</td>
 <td>数值正值</td>
 </tr>
 <tr class="odd">
 <td>输出类型</td>
 <td>否</td>
 <td>指定分析数据的输出类型，可以是事件，注册或跟踪的实体实例。最后两个选项仅适用于注册程序。 </td>
 事件| <td>事件|报名| TRACKED_ENTITY_INSTANCE </td>
 </tr>
 <tr class="even">
 <td> crashDataDimensions </td>
 <td>否</td>
 <td>将所有数据维度（数据元素和属性）折叠为响应中的单个维度。 </td>
 否| <td>假|真</td>
 </tr>
 <tr class="odd">
 <td> skipMeta </td>
 <td>否</td>
 <td>排除响应的元数据部分（提高性能）。 </td>
 否| <td>假|真</td>
 </tr>
 <tr class="even">
 <td> skipData </td>
 <td>否</td>
 <td>排除响应的数据部分。 </td>
 否| <td>假|真</td>
 </tr>
 <tr class="odd">
 <td> skipRounding </td>
 <td>否</td>
 <td>跳过汇总数据值的舍入。 </td>
 否| <td>假|真</td>
 </tr>
 <tr class="even">
 <td>聚合数据</td>
 <td>否</td>
 <td>生成数据维度的汇总值（与维度项目相反）。 </td>
 否| <td>假|真</td>
 </tr>
 <tr class="odd">
 <td> timeField </td>
 <td>否</td>
 <td>事件聚合所基于的时间字段。仅适用于事件数据项。可以是预定义的选项，也可以是具有基于时间的值类型的属性或数据元素的ID。 </td>
 EVENT_DATE | <td> ENROLLMENT_DATE | INCIDENT_DATE | DUE_DATE | COMPLETED_DATE |属性ID&gt; | &lt; &lt;数据元素ID&gt; </td>
 </tr>
 <tr>
 <td> orgUnitField </td>
 <td>否</td>
 <td>事件汇总所基于的组织单位字段。仅适用于事件数据项。可以是具有组织单位值类型的属性或数据元素的ID。默认选项被指定为省略查询参数。
 属性ID&gt; | <td> &lt; &lt;数据元素ID&gt; </td>
 </tr>
 </tbody>
 </table>

 <table>
 <caption>仅用于集群事件分析的查询参数</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 11%" />
 <col style="width: 49%" />
 <col style="width: 19%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 <th>选项</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> clusterSize </td>
 <td>是</td>
 <td>集群的大小（以米为单位）。 </td>
 <td>数值正值</td>
 </tr>
 <tr class="even">
 <td>坐标字段</td>
 <td>否</td>
 <td>地理空间事件分析的基础字段。默认为事件。可以设置为属性的标识符和值类型坐标的数据元素。 </td>
 事件| <td>事件| &lt;attribute-id&gt; | &lt;dataelement-id&gt; </td>
 </tr>
 <tr class="odd">
 <td> bbox </td>
 <td>是</td>
 <td>响应中要包括的边界框/事件区域，格式为&quot;min经度，最小纬度，最大经度，最大纬度。 </td>
 <td>字符串</td>
 </tr>
 <tr class="even">
 <td> includeClusterPoints </td>
 <td>否</td>
 <td>包括有关每个群集的基础点的信息，如果群集代表的点数量非常多，请小心。 </td>
 否| <td>假|真</td>
 </tr>
 </tbody>
 </table>

### 事件查询分析 { #webapi_event_query_analytics } 

 <!--DHIS2-SECTION-ID:webapi_event_query_analytics-->

* analytics / events / query *资源可让您查询捕获的内容
事件。该资源不执行任何聚合，而是允许
您查询和过滤有关事件的信息。

    / api / 33 / analytics / events / query

您可以在一个广告中指定任意数量的尺寸和任意数量的过滤器
询问。维度项目标识符可以引用任何数据元素，
人员属性，人员标识符，固定和相对期间以及
组织单位。维度可以选择具有查询运算符和
一个过滤器。事件查询应采用所述的格式
    以下。

    / api / 33 / analytics / events / query / <program-id>？startDate = yyyy-MM-dd＆endDate = yyyy-MM-dd
      ＆dimension = ou：<ou-id>; <ou-id>＆dimension = <item-id>＆dimension = <item-id>：<operator>：<filter>

例如，要从“住院发病率和
死亡率”计划在2016年1月至10月之间进行，其中“性别”
和“年龄”数据元素包括在内，并且“年龄”维度已过滤
在“ 18”上，您可以使用以下内容
    询问：

    / api / 33 / analytics / events / query / eBAyeGv0exc？startDate = 2016-01-01＆endDate = 2016-10-31
      ＆dimension = ou：O6uvpzGd5pu; fdc6uOvgoji＆dimension = oZg33kd9taw＆dimension = qrur9Dvnyt5：EQ：18

检索“孩子”的“出生”程序阶段的事件
方案”方案，该方案在2016年3月至12月之间进行，其中“重量”
数据元素，过滤后的值大于
    2000年：

    / api / 33 / analytics / events / query / IpHINAT79UW？stage = A03MvHHogjR＆startDate = 2016-03-01
      ＆endDate = 2016-12-31＆dimension = ou：O6uvpzGd5pu＆dimension = UXz7xuGCEhU：GT：2000

可以将排序应用于事件的事件日期和
任何尺寸。按事件日期降序排序，然后按升序排序
您可以使用“年龄”数据元素维度
    使用：

    / api / 33 / analytics / events / query / eBAyeGv0exc？startDate = 2016-01-01＆endDate = 2016-10-31
      ＆dimension = ou：O6uvpzGd5pu＆dimension = qrur9Dvnyt5＆desc = EVENTDATE＆asc = qrur9Dvnyt5

通过指定页码和页码，可以将分页应用于查询。
页面大小参数。如果指定了页码，但未指定页面尺寸，
每页大小为50。如果指定页面大小但页面
number不是，将使用页码1。要获得第三页
页面大小为20的响应，您可以使用如下查询
    这：

    / api / 33 / analytics / events / query / eBAyeGv0exc？startDate = 2016-01-01＆endDate = 2016-10-31
      ＆dimension = ou：O6uvpzGd5pu＆dimension = qrur9Dvnyt5＆page = 3＆pageSize = 20

#### 筛选 { #filtering } 

过滤器可以应用于数据元素，人员属性和人员
身份标识。通过查询参数值对进行过滤
以下格式：

    ＆dimension = <item-id>：<operator>：<filter-value>

例如，您可以过滤“ Weight”数据元素以获取值
大于2000且小于4000，如下所示：

    ＆dimension = UXz7xuGCEhU：GT：2000＆dimension = UXz7xuGCEhU：LT：4000

您可以使用以下方法过滤“年龄”数据元素以获取多个特定年龄段的数据
IN运算符如下：

    ＆dimension = qrur9Dvnyt5：IN：18; 19; 20

您可以通过重复以下步骤为给定项目指定多个过滤器：
运算符和过滤器组件，均用分号分隔：

    ＆dimension = qrur9Dvnyt5：GT：5：LT：15

下面列出了可用的运算符。

 <table>
 <caption> 过滤运算符 </caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 80%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 操作员 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> EQ </td>
 <td> 等于 </td>
 </tr>
 <tr class="even">
 <td> GT </td>
 <td> 大于 </td>
 </tr>
 <tr class="odd">
 <td> GE </td>
 <td> 大于等于</td>
 </tr>
 <tr class="even">
 <td> LT </td>
 <td> 小于</td>
 </tr>
 <tr class="odd">
 <td> LE </td>
 <td> 小于等于</td>
 </tr>
 <tr class="even">
 <td> NE </td>
 <td> 不等于 </td>
 </tr>
 <tr class="odd">
 <td> LIKE </td>
 <td> 喜欢（自由文本匹配） </td>
 </tr>
 <tr class="even">
 <td> 在 </td>
 <td> 等于由 &quot;;&quot; </td> 分隔的多个值之一
 </tr>
 </tbody>
 </table>

#### 回应格式 { #response-formats } 

默认响应表示格式为JSON。要求必须是
使用HTTP * GET *方法。以下响应格式是
支持的。

  - json（应用程序/ json）

  - jsonp（应用程序/ javascript）

  - xls（application / vnd.ms-excel）

例如，要获取Excel格式的响应，可以使用一个文件
请求网址中的扩展名，如下所示：

    /api/33/analytics/events/query/eBAyeGv0exc.xls?startDate=2016-01-01&endDate=2016-10-31
      ＆dimension = ou：O6uvpzGd5pu＆dimension = oZg33kd9taw＆dimension = qrur9Dvnyt5

您可以将hierarchyMeta查询参数设置为true，以便
在“”的“元”部分中包含所有祖先组织单位的名称
响应：

    / api / 33 / analytics / events / query / eBAyeGv0exc？startDate = 2016-01-01＆endDate = 2016-10-31
      ＆dimension = ou：YuQRtpLP10I＆dimension = qrur9Dvnyt5：EQ：50＆hierarchyMeta = true

默认响应JSON格式将类似于以下内容：

```json
{
  "headers": [
    {
      "name": "psi",
      "column": "Event",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "ps",
      "column": "Program stage",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "eventdate",
      "column": "Event date",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "coordinates",
      "column": "Coordinates",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "ouname",
      "column": "Organisation unit name",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "oucode",
      "column": "Organisation unit code",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "ou",
      "column": "Organisation unit",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "oZg33kd9taw",
      "column": "Gender",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "qrur9Dvnyt5",
      "column": "Age",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    }
  ],
  "metaData": {
    "names": {
      "qrur9Dvnyt5": "Age",
      "eBAyeGv0exc": "Inpatient morbidity and mortality",
      "ImspTQPwCqd": "Sierra Leone",
      "O6uvpzGd5pu": "Bo",
      "YuQRtpLP10I": "Badjia",
      "oZg33kd9taw": "Gender"
    },
    "ouHierarchy": {
      "YuQRtpLP10I": "/ImspTQPwCqd/O6uvpzGd5pu"
    }
  },
  "width": 8,
  "height": 4,
  "rows": [
    [
      "yx9IDINf82o",
      "Zj7UnCAulEk",
      "2016-08-05",
      "[5.12, 1.23]",
      "Ngelehun",
      "OU_559",
      "YuQRtpLP10I",
      "Female",
      "50"
    ],
    [
      "IPNa7AsCyFt",
      "Zj7UnCAulEk",
      "2016-06-12",
      "[5.22, 1.43]",
      "Ngelehun",
      "OU_559",
      "YuQRtpLP10I",
      "Female",
      "50"
    ],
    [
      "ZY9JL9dkhD2",
      "Zj7UnCAulEk",
      "2016-06-15",
      "[5.42, 1.33]",
      "Ngelehun",
      "OU_559",
      "YuQRtpLP10I",
      "Female",
      "50"
    ],
    [
      "MYvh4WAUdWt",
      "Zj7UnCAulEk",
      "2016-06-16",
      "[5.32, 1.53]",
      "Ngelehun",
      "OU_559",
      "YuQRtpLP10I",
      "Female",
      "50"
    ]
  ]
}
```

响应的* header *部分描述了查询的内容
结果。事件唯一标识符，程序阶段标识符，
活动日期，组织单位名称，组织单位代码和
组织单位标识符显示为中的前六个维度
回应，并将永远存在。接下来是数据元素
人员属性和人员标识符，指定为
请求中的尺寸，在这种情况下为“性别”和“年龄”数据
元素尺寸。标头部分包含
“名称”属性中的尺寸项和可读尺寸
“列”属性中的说明。

* metaData *部分的* ou *对象包含所有标识符
响应中存在的组织单位映射到字符串
代表层次结构。此层次结构字符串列出了标识符
组织单位的祖先（父母）
根。 * names *对象包含该项目中所有项目的标识符
响应映射到他们的名字。

* rows *部分包含查询产生的事件。每一行
恰好代表一个事件。

为了使事件分析资源在
现成桌子的形状，您可以提供*行*和*列*
带有要求的尺寸标识符的参数，用分号分隔
作为值来指示要用作表的列和行的值。
事件不是生成普通的，标准化的数据源，而是
分析资源现在将以表布局生成数据。这
列和行维度必须作为数据维度出现在
查询（不是过滤器）。这样的请求如下所示：

    /api/33/analytics.html+css?dimension=dx:cYeuwXTCPkU;fbfJHSPpUQD&dimension=pe:WEEKS_THIS_YEAR
      ＆filter = ou：ImspTQPwCqd＆displayProperty = SHORTNAME＆columns = dx＆rows = pe

### 事件汇总分析 { #webapi_event_aggregate_analytics } 

 <!--DHIS2-SECTION-ID:webapi_event_aggregate_analytics-->

`/analytics/events/aggregate` 资源可让您检索 *aggregated
DHIS2 中捕获的事件数量*。此资源可让您检索
基于程序和可选的程序阶段聚合数据，以及
允许您过滤任何事件维度。

    / api / 33 / analytics / events / aggregate

事件聚合资源不返回事件信息
本身，而是符合请求的事件总数
询问。事件维度包括数据元素，人员属性，人员
标识符，期间和组织单位。汇总事件查询
应采用以下格式。

    / api / 33 / analytics / events / aggregate / <program-id>？startDate = yyyy-MM-dd＆endDate = yyyy-MM-dd
      ＆dimension = ou：<ou-id>; <ou-id>＆dimension = <item-id>＆dimension = <item-id>：<operator>：<filter>

例如，要从
1月至10月的“住院发病率和死亡率”计划
2016年，其中包含“性别”和“年龄”数据元素，“年龄”
维度项目的过滤条件为“ 18”，“性别”项目的过滤条件为
“女性”，可以使用以下查询：

    / api / 33 / analytics / events / aggregate / eBAyeGv0exc？startDate = 2016-01-01＆endDate = 2016-10-31
      ＆dimension = ou：O6uvpzGd5pu＆dimension = oZg33kd9taw：EQ：Female＆dimension = qrur9Dvnyt5：GT：50

检索固定和相对期间的数据，而不是开始和结束
日期（在这种情况下为2016年5月并持续12个月），以及该组织
与当前用户相关联的广告单元，您可以使用以下查询：

    / api / 33 / analytics / events / aggregate / eBAyeGv0exc？dimension = pe：201605; LAST_12_MONTHS
      ＆dimension = ou：USER_ORGUNIT; fdc6uOvgo7ji＆dimension = oZg33kd9taw

为了将“女性”指定为数据的“性别”过滤器
回应，表示“性别”将不属于回应，但会
过滤其中的总数，可以使用以下语法：

    / api / 33 / analytics / events / aggregate / eBAyeGv0exc？dimension = pe：2016;
      ＆dimension = ou：O6uvpzGd5pu＆filter = oZg33kd9taw：EQ：Female

要将“ Bo”组织单位和期间“ 2016”指定为过滤器，
以及“排放方式”和“性别”作为维度，其中“性别”为
在“男性”项目中进行过滤后，您可以使用如下查询：

    / api / 33 / analytics / events / aggregate / eBAyeGv0exc？filter = pe：2016＆filter = ou：O6uvpzGd5pu
      ＆dimension = fWIAEtYVEGk＆dimension = oZg33kd9taw：EQ：Male

要为“排放方式”创建“前3个报告”，您可以使用限制
和sortOrder查询参数类似：

    / api / 33 / analytics / events / aggregate / eBAyeGv0exc？filter = pe：2016＆filter = ou：O6uvpzGd5pu
      ＆dimension = fWIAEtYVEGk＆limit = 3＆sortOrder = DESC

要使用相应的聚合类型指定值维，您可以
可以使用value和gregationType查询参数。指定一个
值维度将使分析引擎返回汇总值
响应中该维度的值，而不是
事件。

    /api/33/analytics/events/aggregate/eBAyeGv0exc.json?stage=Zj7UnCAulEk&dimension=ou:ImspTQPwCqd
      ＆dimension = pe：LAST_12_MONTHS＆dimension = fWIAEtYVEGk＆value = qrur9Dvnyt5＆aggregationType = AVERAGE

基于特定数据元素或属性的事件分析聚合
对于值类型日期或日期时间，您可以使用 `timeField` 参数：

    /api/33/analytics/events/aggregate/IpHINAT79UW.json?dimension=ou:ImspTQPwCqd
    ＆dimension = pe：LAST_12_MONTHS＆dimension = cejWyOfXge6＆stage = A03MvHHogjR＆timeField = ENROLLMENT_DATE

基于特定数据元素或属性的事件分析聚合
对于值类型的组织单元，您可以使用 `orgUnitField` 参数：

    /api/33/analytics/events/aggregate/eBAyeGv0exc.json?dimension=ou:ImspTQPwCqd
    ＆dimension = pe：THIS_YEAR＆dimension = oZg33kd9taw＆stage = Zj7UnCAulEk＆orgUnitField = S33cRBsnXPo

#### 范围/图例集 { #ranges-legend-sets } 

对于汇总查询，您可以为数字指定范围/图例集
数据元素和属性维度。目的是将
数值分成范围。例如，代替生成数据
对于不同年份的“年龄”数据元素，您可以将
将信息分为年龄段。为此，数据元素或
属性必须与图例集相关联。格式是
如下面所描述的：

    ？dimension = <item-id>-<legend-set-id>

一个例子看起来像
    这：

    /api/33/analytics/events/aggregate/eBAyeGv0exc.json?stage=Zj7UnCAulEk
      ＆dimension = qrur9Dvnyt5-Yf6UHoPkdS6＆dimension = ou：ImspTQPwCqd＆dimension = pe：LAST_MONTH

#### 回应格式 { #response-formats } 

默认响应表示格式为JSON。要求必须是
使用HTTP * GET *方法。响应将类似于以下内容：

```json
{
  "headers": [
    {
      "name": "oZg33kd9taw",
      "column": "Gender",
      "type": "java.lang.String",
      "meta": false
    },
    {
      "name": "qrur9Dvnyt5",
      "column": "Age",
      "type": "java.lang.String",
      "meta": false
    },
    {
      "name": "pe",
      "column": "Period",
      "type": "java.lang.String",
      "meta": false
    },
    {
      "name": "ou",
      "column": "Organisation unit",
      "type": "java.lang.String",
      "meta": false
    },
    {
      "name": "value",
      "column": "Value",
      "type": "java.lang.String",
      "meta": false
    }
  ],
  "metaData": {
    "names": {
      "eBAyeGv0exc": "Inpatient morbidity and mortality"
    }
  },
  "width": 5,
  "height": 39,
  "rows": [
    [
      "Female",
      "95",
      "201605",
      "O6uvpzGd5pu",
      "2"
    ],
    [
      "Female",
      "63",
      "201605",
      "O6uvpzGd5pu",
      "2"
    ],
    [
      "Female",
      "67",
      "201605",
      "O6uvpzGd5pu",
      "1"
    ],
    [
      "Female",
      "71",
      "201605",
      "O6uvpzGd5pu",
      "1"
    ],
    [
      "Female",
      "75",
      "201605",
      "O6uvpzGd5pu",
      "14"
    ],
    [
      "Female",
      "73",
      "201605",
      "O6uvpzGd5pu",
      "5"
    ]
  ]
}
```

请注意，单个响应中返回的行的最大限制为10000。
如果查询产生的值超过最大限制，则显示* 409冲突*状态代码
将被退回。

### 事件聚类分析 { #webapi_event_clustering_analytics } 

 <!--DHIS2-SECTION-ID:webapi_event_clustering_analytics-->

* analytics / events / cluster *资源提供群集的地理空间
事件数据。请求如下所示：

    / api / 33 / analytics / events / cluster / eBAyeGv0exc？startDate = 2016-01-01＆endDate = 2016-10-31
      ＆dimension = ou：LEVEL-2＆clusterSize = 100000
      ＆bbox = -13.2682125,7.3721619，-10.4261178,9.904012＆includeClusterPoints = false

聚类响应提供基础点的数量，即中心
每个群集的点和范围。如果`includeClusterPoints`查询
参数设置为true，以逗号分隔的字符串，包含标识符
包括基础事件。样本响应如下所示：

```json
{
  "headers": [
    {
      "name": "count",
      "column": "Count",
      "type": "java.lang.Long",
      "meta": false
    },
    {
      "name": "center",
      "column": "Center",
      "type": "java.lang.String",
      "meta": false
    },
    {
      "name": "extent",
      "column": "Extent",
      "type": "java.lang.String",
      "meta": false
    },
    {
      "name": "points",
      "column": "Points",
      "type": "java.lang.String",
      "meta": false
    }
  ],
  "width": 3,
  "height": 4,
  "rows": [
    [
      "3",
      "POINT(-13.15818 8.47567)",
      "BOX(-13.26821 8.4St7215,-13.08711 8.47807)",
      ""
    ],
    [
      "9",
      "POINT(-13.11184 8.66424)",
      "BOX(-13.24982 8.51961,-13.05816 8.87696)",
      ""
    ],
    [
      "1",
      "POINT(-12.46144 7.50597)",
      "BOX(-12.46144 7.50597,-12.46144 7.50597)",
      ""
    ],
    [
      "7",
      "POINT(-12.47964 8.21533)",
      "BOX(-12.91769 7.66775,-12.21011 8.49713)",
      ""
    ]
  ]
}
```

### 事件计数和范围分析 { #webapi_event_count_extent_analytics } 

 <!--DHIS2-SECTION-ID:webapi_event_count_extent_analytics-->

* analytics / events / count *资源适用于与几何相关的
要求检索事件的数量和范围（边界框）
用于特定查询。查询语法等于* events / query *
资源。一个请求看起来像
    这：

    / api / 33 / analytics / events / count / eBAyeGv0exc？startDate = 2016-01-01
      ＆endDate = 2016-10-31＆dimension = ou：O6uvpzGd5pu

响应将以JSON格式提供计数和范围：

```json
{
  extent: "BOX(-13.2682125910096 7.38679562779441,-10.4261178860988 9.90401290212795)",
  count: 59
}
```

## 入学分析 { #webapi_enrollment_analytics } 

 <!--DHIS2-SECTION-ID:webapi_enrollment_analytics-->

注册分析 API 允许您访问聚合事件数据并查询 DHIS2 中捕获的*注册及其事件数据*。除了跟踪的实体属性之外，此资源还允许您根据程序阶段和数据元素检索程序的数据。当查询每个注册中特定计划阶段的事件数据时，每个计划阶段的数据元素值将作为 api 响应中的一行返回。如果在可重复的程序阶段查询数据元素，则 api 响应中的该数据元素将使用最新的数据元素值。

### 尺寸和项目 { #webapi_enrollment_analytics_dimensions } 

 <!--DHIS2-SECTION-ID:webapi_enrollment_analytics_dimensions-->

注册维度包括数据元素，属性，组织单位和期间。查询分析资源将仅返回符合一组条件的注册，并且不执行任何汇总。

<table>
<caption>Enrollment dimensions</caption>
<colgroup>
<col style="width: 27%" />
<col style="width: 11%" />
<col style="width: 60%" />
</colgroup>
<thead>
<tr class="header">
<th>Dimension</th>
<th>Dimension id</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Data elements in program stages</td>
<td>&lt;program stage id&gt;.&lt;data element id&gt;</td>
<td>Data element identifiers must include the program stage when querying data for enrollments.

    dimension=edqlbukwRfQ.vANAXwtLwcT

</td>
</tr>
<tr>
<td>Attributes</td>
<td>&lt;id&gt;</td>
<td>Attribute identifiers</td>
</tr>
<tr>
<td>Periods</td>
<td>pe</td>
<td>ISO periods and relative periods, see &quot;date and period format&quot;</td>
</tr>
<tr>
<td>Organisation units</td>
<td>ou</td>
<td>Organisation unit identifiers and keywords USER_ORGUNIT, USER_ORGUNIT_CHILDREN, USER_ORGUNIT_GRANDCHILDREN, LEVEL-&lt;level&gt; and OU_GROUP-&lt;group-id&gt;</td>
</tr>
</tbody>
</table>

### 注册查询分析 { #webapi_enrollment_query_analytics } 

 <!--DHIS2-SECTION-ID:webapi_enrollment_query_analytics-->

* analytics / enrollments / query *资源可让您查询捕获的注册。该资源不执行任何聚合，而是使您可以查询和过滤有关注册的信息。

    / api / 33 / analytics /招生/查询

您可以在查询中指定任意数量的维度和任意数量的过滤器。维项目标识符可以引用程序阶段中的任何数据元素，跟踪的实体属性，固定和相对期间以及组织单位。维度可以选择具有查询运算符和过滤器。注册查询应采用以下所述的格式。

    / api / 33 / analytics / enrollments / query / <program-id>？startDate = yyyy-MM-dd＆endDate = yyyy-MM-dd
      ＆dimension = ou：<ou-id>; <ou-id>＆dimension = <item-id>＆dimension = <item-id>：<operator>：<filter>

例如，要从2019年1月起从“产前保健”计划中检索入学申请，该计划从属性中提取“名字”，则在第一个计划阶段包括“慢性病”和“吸烟”数据元素，并且来自以下程序阶段的“血红蛋白值”，并且仅包括具有“疯子病”的女性，您可以使用以下查询：

    /api/33/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=ou:ImspTQPwCqd
      ＆dimension = w75KJ2mc4zz＆dimension = WZbXY0S00lP.de0FEHSIoxh：eq：1＆dimension = w75KJ2mc4zz
      ＆dimension = WZbXY0S00lP.sWoqcoByYmD＆dimension = edqlbukwRfQ.vANAXwtLwcT
      ＆startDate = 2019-01-01＆endDate = 2019-01-31

要从上个月（相对于执行查询的时间点）的“产前护理”程序中检索入学登记，其中“慢性病”和“吸烟”数据元素来自第一程序阶段，而“随访程序阶段的“血红蛋白值”，仅包括吸烟的血红蛋白低于20的女性：

    /api/33/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=ou:ImspTQPwCqd
      ＆dimension = WZbXY0S00lP.de0FEHSIoxh＆dimension = w75KJ2mc4zz
      ＆dimension = WZbXY0S00lP.sWoqcoByYmD：eq：1＆dimension = edqlbukwRfQ.vANAXwtLwcT：lt：20
      ＆dimension = pe：LAST_MONTH

可以将排序应用于注册的查询和注册的事件日期：

    /api/33/analytics/enrollments/query/WSGAb5XwJ3Y.xls?dimension=ou:ImspTQPwCqd
      ＆columns = w75KJ2mc4zz＆dimension = WZbXY0S00lP.sWoqcoByYmD＆dimension = pe：LAST_MONTH
      ＆stage = WZbXY0S00lP＆pageSize = 10＆page = 1＆asc = ENROLLMENTDATE＆ouMode = DESCENDANTS

通过指定页码和页面大小参数，可以将分页应用于查询。如果指定了页码，但未指定页码，则将使用50页码。如果指定了页面大小，但未指定页面号，则将使用页面号1。要获得页面大小为10的响应的第二页，可以使用如下查询：

    /api/33/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=ou:ImspTQPwCqd
      ＆dimension = WZbXY0S00lP.de0FEHSIoxh＆dimension = w75KJ2mc4zz＆dimension = pe：LAST_MONTH
      ＆dimension = WZbXY0S00lP.sWoqcoByYmD＆pageSize = 10＆page = 2

#### 筛选 { #filtering } 

过滤器可以应用于数据元素，人员属性和人员标识符。过滤是通过以下格式的查询参数值完成的：

    ＆dimension = <item-id>：<operator>：<filter-value>

例如，您可以过滤“ Weight”数据元素以获取大于2000且小于4000的值，如下所示：

    ＆dimension = WZbXY0S00lP.UXz7xuGCEhU：GT：2000＆dimension = WZbXY0S00lP.UXz7xuGCEhU：LT：4000

您可以使用IN运算符过滤多个特定年龄的“年龄”属性，如下所示：

    ＆dimension = qrur9Dvnyt5：IN：18; 19; 20

您可以通过重复运算符和过滤器组件为给定项目指定多个过滤器，所有组件均用分号分隔：

    ＆dimension = qrur9Dvnyt5：GT：5：LT：15

下面列出了可用的运算符。

 <table>
 <caption> 过滤运算符 </caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 80%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 操作员 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr>
 <td> EQ </td>
 <td> 等于 </td>
 </tr>
 <tr>
 <td> GT </td>
 <td> 大于 </td>
 </tr>
 <tr>
 <td> GE </td>
 <td> 大于等于</td>
 </tr>
 <tr>
 <td> LT </td>
 <td> 小于</td>
 </tr>
 <tr>
 <td> LE </td>
 <td> 小于等于</td>
 </tr>
 <tr>
 <td> NE </td>
 <td> 不等于 </td>
 </tr>
 <tr>
 <td> LIKE </td>
 <td> 喜欢（自由文本匹配） </td>
 </tr>
 <tr>
 <td> 在 </td>
 <td> 等于由 &quot;;&quot; </td> 分隔的多个值之一
 </tr>
 </tbody>
 </table>

### 请求查询参数 { #webapi_enrollment_analytics_query_parameters } 

 <!--DHIS2-SECTION-ID:webapi_enrollment_analytics_query_parameters-->

通过分析注册查询API，您可以指定一系列查询参数。

<table>
<caption>注册查询 enpoint 的查询参数</caption>
<colgroup>
<col style="width: 20%" />
<col style="width: 11%" />
<col style="width: 48%" />
<col style="width: 19%" />
</colgroup>
<thead>
<tr class="header">
<th>查询参数</th>
<th>必填</th>
<th>说明</th>
<th>选项（默认为第一个）</th>
</tr>
</thead>
<tbody>
<tr>
<td>程序</td>
<td>是</td>
<td>程序标识符。</td>
<td>任何程序标识符</td>
</tr>
<tr>
<td>开始日期</td>
<td>否</td>
<td>注册开始日期。</td>
<td>yyyy-MM-dd 格式的日期</td>
</tr>
<tr>
<td>结束日期</td>
<td>否</td>
<td>注册结束日期。</td>
<td>yyyy-MM-dd 格式的日期</td>
</tr>
<tr>
<td>尺寸</td>
<td>是</td>
<td>维度标识符，包括数据元素、属性、计划指标、期间、组织单位和组织单位组集。参数可以重复任意次。项目过滤器可以应用于以下格式的维度：&lt;item-id&gt;:&lt; 运算符&gt;：&lt;过滤器&gt;。过滤器值不区分大小写。</td>
<td>运算符可以是 EQ | GT |通用电气| LT | LE |东北 |喜欢 | IN</td>
</tr>
<tr>
<td>过滤器</td>
<td>否</td>
<td>维度标识符，包括数据元素、属性、期间、组织单位和组织单位组集。参数可以重复任意次。项目过滤器可以应用于以下格式的维度：&lt;item-id&gt;:&lt; 运算符&gt;：&lt;过滤器&gt;。过滤器值不区分大小写。</td>
<td></td>
</tr>
<tr>
<td>节目状态</td>
<td>否</td>
<td>指定要包含的注册的注册状态。</td>
<td>活动 |已完成 |已取消</td>
</tr>
<tr>
<td>relativePeriodDate</td>
<td>字符串</td>
<td>否</td>
<td>日期标识符，例如：&quot;2016-01-01&quot;。覆盖相对期间的开始日期</td>
</tr>
<tr>
<td>ouMode</td>
<td>否</td>
<td>选择组织单位的方式。默认为 DESCENDANTS，表示层次结构中的所有子单元。 CHILDREN 是指层次结构中的直接子级； SELECTED 仅指选定的组织部门。</td>
<td>后代，儿童，选定</td>
</tr>
<tr>
<td>asc</td>
<td>否</td>
<td>维度按升序排序，可以引用注册日期、事件日期、组织单位名称和代码。</td>
<td> 注册日期 |事件日期|欧纳姆 | OUCODE </td>
</tr>
<tr>
<td>desc</td>
<td>否</td>
<td>维度按降序排序，可以引用注册日期、事件日期、组织单位名称和代码。</td>
<td> 注册日期 |事件日期|欧纳姆 | OUCODE </td>
</tr>
<td>hierarchyMeta</td>
<td>否</td>
<td>在元数据中包含组织单位祖先的名称和组织单位的层次结构路径。</td>
<td>假 | true</td>
</tr>
<tr>
<td>仅坐标</td>
<td>否</td>
<td>是否仅返回具有坐标的注册。</td>
<td>假 | true</td>
</tr>
<tr>
<td>页面</td>
<td>否</td>
<td>页码。默认页面为 1。</td>
<td>正数值</td>
</tr>
<tr>
<td>页面大小</td>
<td>否</td>
<td>页面大小。默认大小为每页 50 项。</td>
<td>数字零或正值</td>
</tr>
</tbody>
</table>

#### 回应格式 { #response-formats } 

默认响应表示格式为JSON。这些请求必须使用HTTP * GET *方法。支持以下响应格式。

  - json（应用程序/ json）
  - xml（应用程序/ xml）
  - xls（application / vnd.ms-excel）
  - csv（应用程序/ csv）
  - html（text / html）
  - html + css（text / html）

例如，要获得Excel格式的响应，可以在请求URL中使用文件扩展名，如下所示：

    /api/33/analytics/enrollments/query/WSGAb5XwJ3Y.xls?dimension=ou:ImspTQPwCqd
      ＆dimension = WZbXY0S00lP.de0FEHSIoxh＆columns = w75KJ2mc4zz
      ＆dimension = WZbXY0S00lP.sWoqcoByYmD＆dimension = pe：LAST_MONTH＆stage = WZbXY0S00lP
      ＆pageSize = 10＆page = 1＆asc = ENROLLMENTDATE＆ouMode = DESCENDANTS

默认响应JSON格式将类似于以下内容：

```json
{
  "headers": [
    {
      "name": "pi",
      "column": "Enrollment",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "tei",
      "column": "Tracked entity instance",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "enrollmentdate",
      "column": "Enrollment date",
      "valueType": "DATE",
      "type": "java.util.Date",
      "hidden": false,
      "meta": true
    },
    {
      "name": "incidentdate",
      "column": "Incident date",
      "valueType": "DATE",
      "type": "java.util.Date",
      "hidden": false,
      "meta": true
    },
    {
      "name": "geometry",
      "column": "Geometry",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "longitude",
      "column": "Longitude",
      "valueType": "NUMBER",
      "type": "java.lang.Double",
      "hidden": false,
      "meta": true
    },
    {
      "name": "latitude",
      "column": "Latitude",
      "valueType": "NUMBER",
      "type": "java.lang.Double",
      "hidden": false,
      "meta": true
    },
    {
      "name": "ouname",
      "column": "Organisation unit name",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "oucode",
      "column": "Organisation unit code",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "ou",
      "column": "Organisation unit",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "de0FEHSIoxh",
      "column": "WHOMCH Chronic conditions",
      "valueType": "BOOLEAN",
      "type": "java.lang.Boolean",
      "hidden": false,
      "meta": true
    },
    {
      "name": "sWoqcoByYmD",
      "column": "WHOMCH Smoking",
      "valueType": "BOOLEAN",
      "type": "java.lang.Boolean",
      "hidden": false,
      "meta": true
    }
  ],
  "metaData": {
    "pager": {
      "page": 2,
      "total": 163,
      "pageSize": 4,
      "pageCount": 41
    },
    "items": {
      "ImspTQPwCqd": {
        "name": "Sierra Leone"
      },
      "PFDfvmGpsR3": {
        "name": "Care at birth"
      },
      "bbKtnxRZKEP": {
        "name": "Postpartum care visit"
      },
      "ou": {
        "name": "Organisation unit"
      },
      "PUZaKR0Jh2k": {
        "name": "Previous deliveries"
      },
      "edqlbukwRfQ": {
        "name": "Antenatal care visit"
      },
      "WZbXY0S00lP": {
        "name": "First antenatal care visit"
      },
      "sWoqcoByYmD": {
        "name": "WHOMCH Smoking"
      },
      "WSGAb5XwJ3Y": {
        "name": "WHO RMNCH Tracker"
      },
      "de0FEHSIoxh": {
        "name": "WHOMCH Chronic conditions"
      }
    },
    "dimensions": {
      "pe": [],
      "ou": [
        "ImspTQPwCqd"
      ],
      "sWoqcoByYmD": [],
      "de0FEHSIoxh": []
    }
  },
  "width": 12,
  "rows": [
    [
      "A0cP533hIQv",
      "to8G9jAprnx",
      "2019-02-02 12:05:00.0",
      "2019-02-02 12:05:00.0",
      "",
      "0.0",
      "0.0",
      "Tonkomba MCHP",
      "OU_193264",
      "xIMxph4NMP1",
      "0",
      "1"
    ],
    [
      "ZqiUn2uXmBi",
      "SJtv0WzoYki",
      "2019-02-02 12:05:00.0",
      "2019-02-02 12:05:00.0",
      "",
      "0.0",
      "0.0",
      "Mawoma MCHP",
      "OU_254973",
      "Srnpwq8jKbp",
      "0",
      "0"
    ],
    [
      "lE747mUAtbz",
      "PGzTv2A1xzn",
      "2019-02-02 12:05:00.0",
      "2019-02-02 12:05:00.0",
      "",
      "0.0",
      "0.0",
      "Kunsho CHP",
      "OU_193254",
      "tdhB1JXYBx2",
      "",
      "0"
    ],
    [
      "nmcqu9QF8ow",
      "pav3tGLjYuq",
      "2019-02-03 12:05:00.0",
      "2019-02-03 12:05:00.0",
      "",
      "0.0",
      "0.0",
      "Korbu MCHP",
      "OU_678893",
      "m73lWmo5BDG",
      "",
      "1"
    ]
  ],
  "height": 4
}
```

响应的* header *部分描述了查询结果的内容。注册唯一标识符，跟踪的实体实例标识符，注册日期，事件日期，几何形状，纬度，对数，组织单位名称和组织单位代码显示为响应中的第一个维度，并将始终存在。接下来是数据元素，以及在请求中指定为维度的跟踪实体属性，在本例中为“ WHOMCH慢性病”和“ WHOMCH吸烟”数据元素的维度。标题部分在“名称”属性中包含维度项目的标识符，在“列”属性中包含可读的维度描述。

* metaData *部分的* ou *对象包含响应中存在的所有组织单位的标识符，这些标识符映射到表示层次结构的字符串中。此层次结构字符串从根开始列出组织单位的祖先（父母）的标识符。 * names *对象包含映射到其名称的响应中所有项目的标识符。

* rows *部分包含查询产生的注册。每行恰好代表一个注册。

### 通过计划指标支持跨跟踪的实体实例关系的分析 { #support-of-analytics-across-tracked-entity-instance-relationships-with-program-indicators } 

非汇总注册分析API还支持将程序指示器链接到关系类型，以显示应用于所列出的跟踪实体实例的相关实体的特定程序指示器的计算结果。

![](resources/images/enrollments/enrollments-pi-relationship.jpg)

为了使“程序指示器/关系类型”链接起作用，`/ api / 33 / analytics / enrollments / query` API需要一个附加的维，该维必须包括所选的“关系类型” UID和所选的“程序指示器” UID：

    / api / 33 / analytics / enrollments / query / <program-id>
      ？dimension = <relationshiptype-id>。 <programindicator-id>

例如，要从“ WHO RMNCH Tracker”程序中检索2019年1月的注册者列表，并按“与人关联的疟疾病例”类型的关系显示与该注册者相关的疟疾病例数，则可以使用以下查询

    /api/33/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=mxZDvSZYxlw.nFICjJluo74
      ＆startDate = 2019-01-01＆endDate = 2019-01-31

API 支持使用与“主”程序（即在`/query/` 之后指定的程序 ID）无关的程序指示符。

## 组织单位分析 { #webapi_org_unit_analytics } 

 <!--DHIS2-SECTION-ID:webapi_org_unit_analytics-->

组织单位分析API提供有关按组织单位组集分类的组织单位的统计信息，即组织单位组集中每个组织单位组的组织单位计数。

    GET / api / orgUnitAnalytics？ou = <org-unit-id>＆ougs = <org-unit-group-set-id>

该API需要至少一个组织单位和至少一个组织单位组集。可以提供多个组织单位和组集，以分号分隔。

### 请求查询参数 { #request-query-parameters } 

组织单位分析资源使您可以指定一系列查询参数：

 <table>
 <caption>组织单位分析查询参数</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 60%" />
 <col style="width: 20%" />
 </colgroup>
 <thead>
 <tr class="header">
 属性<th> </th>
 <th>说明</th>
 <th>必需</th>
 </tr>
 </thead>
 <tbody>
 <tr>
 <td> ou </td>
 <td>组织单位标识符，可能用分号分隔。 </td>
 <td>是</td>
 </tr>
 <tr>
 <td> ougs </td>
 <td>组织单位组标识符，可能用分号分隔。 </td>
 <td>是</td>
 </tr>
 <tr>
 <td>列</td>
 <td>组织单位组标识符，可能用分号分隔。定义哪些组集在表布局中呈现为列。 </td>
 <td>否</td>
 </tr>
 </tbody>
 </table>

响应将包含用于父组织单位的列，用于请求的每个组织单位组集部分的列以及用于计数的列。统计信息包括组织单位的数量，该组织单位是请求中指定的组织单位的子层次结构的一部分。响应包含一个元数据部分，该部分指定由其标识符引用的响应的每个组织单位和组织单位组部分的名称。

默认响应以单一的 `count` 列进行规范化。通过使用 `columns` 查询参数指定至少一个 org 单元组集，可以用表格布局呈现响应。

### 回应格式 { #response-formats } 

组织单位分析端点支持以下表示格式：

- json（应用程序/ json）
- csv（应用程序/ csv）
- xls（application / vnd.ms-excel）
- pdf（应用程序/ pdf）

### 例子 { #examples } 

要获取组织单位和组织单位组集的组织单位分析，请执行以下操作：

    GET / api / orgUnitAnalytics？ou = lc3eMKXaEfw＆ougs = J5jldMd8OHv

要获取两个组织单位和两个组织单位组集合的组织单位分析数据：

    GET / api / orgUnitAnalytics？ou = lc3eMKXaEfw; PMa2VCrupOd＆ougs = J5jldMd8OHv; Bpx0589u8y0

要以表格模式获取组织单位分析数据，并将一组设置为列：

    GET / api / orgUnitAnalytics？ou = fdc6uOvgoji; jUb8gELQApl; lc3eMKXaEfw; PMa2VCrupOd
      ＆ougs = J5jldMd8OHv＆列= J5jldMd8OHv

## 数据集报告 { #webapi_data_set_report } 

 <!--DHIS2-SECTION-ID:webapi_data_set_report-->

可以使用以下方法通过 Web API 生成数据集报告
`/dataSetReport` 资源。该资源生成数据集报告
并以 HTML 表格的形式返回结果。

    / api / 33 / dataSetReport

### 请求查询参数 { #request-query-parameters } 

该请求支持以下参数：

 <table>
 <caption>数据集报告查询参数</caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 50%" />
 <col style="width: 17%" />
 <col style="width: 17%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>说明</th>
 <th>类型</th>
 <th>必需</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ds </td>
 <td>用于创建报告的数据集。 </td>
 <td>数据集UID </td>
 <td>是</td>
 </tr>
 <tr class="even">
 <td> pe </td>
 <td>创建报告所依据的期间。 </td>
 <td> ISO字符串</td>
 <td>是</td>
 </tr>
 <tr class="odd">
 <td> ou </td>
 <td>用于创建报告的组织单位。 </td>
 <td>组织单位UID </td>
 <td>是</td>
 </tr>
 <tr class="even">
 <td>过滤器</td>
 <td>用作报表过滤器的过滤器。可以重复多次。遵循分析API语法。 </td>
 <td>一个或多个UID </td>
 <td>否</td>
 </tr>
 <tr class="odd">
 <td> selectedUnitOnly </td>
 <td>是仅使用捕获的数据还是聚合的数据。 </td>
 <td>布尔值</td>
 <td>否</td>
 </tr>
 </tbody>
 </table>

The data set report resource accepts `GET` requests only. The response content type is `application/json` and returns data in a grid. This endpoint works for all types of data sets, including default, section and custom forms.

检索2018年数据集和组织单位报告的示例请求如下所示：

    GET / api / 33 / dataSetReport？ds = BfMAe6Itzgt＆pe = 201810＆ou = ImspTQPwCqd＆selectedUnitOnly = false

要获得带有过滤器的数据集报告，可以使用`filter`参数。在这种情况下，过滤器基于一个组织单位组集和两个组织单位组：

    GET / api / 33 / dataSetReport？ds = BfMAe6Itzgt＆pe = 201810＆ou = ImspTQPwCqd
      ＆filter = J5jldMd8OHv：RXL3lPSK8oG; tDZVQ1WtwpA

### 回应格式 { #response-formats } 

数据集报告端点支持以下格式的输出。您可以使用文件扩展名或 `Accept` HTTP 标头检索特定端点。

- json（应用程序/ json）
- pdf（应用程序/ pdf）
- xls（application / vnd.ms-excel）

### 自订表格 { #custom-forms } 

有一个专用端点可用于带有自定义 HTML 表单的数据集。该端点会返回内容类型为 `text/html`、已插入数据的 HTML 表单内容。请注意，您也可以对带有自定义表单的数据集使用通用数据集报告端点；但这将以 JSON 格式返回网格报告。该端点仅适用于带有自定义 HTML 表单的数据集。

    GET / api / 33 / dataSetReport / custom

否则，此端点的语法等于常规数据集报告端点。要检索自定义HTML数据集报告，您可以发出如下请求：

    GET / api / 33 / dataSetReport / custom？ds = lyLU2wR22tC＆pe = 201810＆ou = ImspTQPwCqd


## 推送分析 { #webapi_push_analysis } 

 <!--DHIS2-SECTION-ID:webapi_push_analysis-->

推送分析API包括用于预览推送分析的端点
报告已登录用户并手动触发系统
除了正常的CRUD之外，还生成并发送推送分析报告
操作。使用创建和更新端点进行推送时
分析，推送分析将基于
推送分析的属性。删除或更新
推送分析被禁用，作业也将停止运行
将来。

要获取现有推送分析的HTML预览，您可以执行GET
请求到以下端点：

    / api / 33 / pushAnalysis / <id> / render

要手动触发推送分析作业，您可以执行POST请求来
该端点：

    / api / 33 / pushAnalysis / <id> / run

推送分析包含以下属性，其中一些是
自动运行推送分析作业所需的资源：

<table>
<caption>Push analysis properties</caption>
<colgroup>
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th>Property</th>
<th>Description</th>
<th>Type</th>
<th>Required</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>dashboard</td>
<td>Dashboard on which reports are based</td>
<td>Dashboard UID</td>
<td>Yes</td>
</tr>
<tr class="even">
<td>message</td>
<td>Appears after title in reports</td>
<td>String</td>
<td>No</td>
</tr>
<tr class="odd">
<td>recipientUserGroups</td>
<td>A set of user groups who should receive the reports</td>
<td>One or more user Group UID</td>
<td>No. Scheduled jobs without any recipient will be skipped.</td>
</tr>
<tr class="even">
<td>enabled</td>
<td>Indicated whether this push analysis should be scheduled or not. False by default.</td>
<td>Boolean</td>
<td>Yes. Must be true to be scheduled.</td>
</tr>
<tr class="odd">
<td>schedulingFrequency</td>
<td>The frequency of which reports should be scheduled.</td>
<td>&quot;DAILY&quot;, &quot;WEEKLY&quot;, &quot;MONTHLY&quot;</td>
<td>No. Push analysis without a frequency will not be scheduled</td>
</tr>
<tr class="even">
<td>schedulingDayOfFrequency</td>
<td>The day in the frequency the job should be scheduled.</td>
<td>Integer. Any value when frequency is &quot;DAILY&quot;. 0-7 when frequency is &quot;WEEKLY&quot;. 1-31 when frequency is &quot;MONTHLY&quot;</td>
<td>No. Push analysis without a valid day of frequency for the frequency set will not be scheduled.</td>
</tr>
</tbody>
</table>

## 数据使用情况分析 { #webapi_usage_analytics } 

 <!--DHIS2-SECTION-ID:webapi_usage_analytics-->

使用情况分析API可让您访问有关人们的信息
使用基于数据分析的DHIS2。当用户访问收藏夹时，
事件被记录。该事件包含用户名，
收藏夹，事件发生的时间以及事件的类型。这
表中列出了不同类型的事件。

    / api / 33 / dataStatistics

使用情况分析API可让您检索使用情况的汇总快照
基于时间间隔的分析。 API捕获用户视图（对于
图表查看数据表或数据透视表的次数
用户）并保存了分析收藏夹（例如收藏夹图表和
数据透视表）。 DHIS2将捕获每晚快照，然后
根据要求汇总。

### 请求查询参数 { #webapi_usage_analytics_request_query_parameters } 

 <!--DHIS2-SECTION-ID:webapi_usage_analytics_request_query_parameters-->

使用情况分析（数据统计）API支持两种操作：

  - * POST：*创建一个查看事件

  - * GET：*检索汇总统计信息

### 创建视图事件（POST） { #webapi_usage_analytics_create_view_events } 

 <!--DHIS2-SECTION-ID:webapi_usage_analytics_create_view_events-->

使用情况分析API可让您创建事件视图。这
dataStatisticsEventType参数描述了项目的类型
已查看。最喜欢的参数指示相关的标识符
最喜欢的。

用于创建新事件视图的URL
    图表：

    POST / api / 33 / dataStatistics？eventType = CHART_VIEW＆favorite = LW0O27b7TdD

成功的保存操作将返回HTTP状态代码201。该表
下面显示了受支持的事件类型。

<table>
<caption>Supported event types</caption>
<colgroup>
<col style="width: 38%" />
<col style="width: 61%" />
</colgroup>
<thead>
<tr class="header">
<th>Key</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>REPORT_TABLE_VIEW</td>
<td>Report table (pivot table) view</td>
</tr>
<tr class="even">
<td>CHART_VIEW</td>
<td>Chart view</td>
</tr>
<tr class="odd">
<td>MAP_VIEW</td>
<td>Map view (GIS)</td>
</tr>
<tr class="even">
<td>EVENT_REPORT_VIEW</td>
<td>Event report view</td>
</tr>
<tr class="odd">
<td>EVENT_CHART_VIEW</td>
<td>Event chart view</td>
</tr>
<tr class="even">
<td>DASHBOARD_VIEW</td>
<td>Dashboard view</td>
</tr>
<tr class="odd">
<td>DATA_SET_REPORT_VIEW</td>
<td>Data set report view</td>
</tr>
</tbody>
</table>

### 检索汇总的使用情况分析报告（GET） { #webapi_aggregated_usage_analytics } 

 <!--DHIS2-SECTION-ID:webapi_aggregated_usage_analytics-->

使用情况分析（数据统计）API可让您指定某些查询
查询汇总报告时的参数。

 <table>
 <caption>查询参数以进行汇总使用情况分析（数据统计）</caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 <th>选项</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>开始日期</td>
 <td>是</td>
 <td>期间</td>的开始日期
 <td> yyyy-MM-dd格式的日期</td>
 </tr>
 <tr class="even">
 <td>结束日期</td>
 <td>是</td>
 <td>期间</td>的结束日期
 <td> yyyy-MM-dd格式的日期</td>
 </tr>
 <tr class="odd">
 <td>间隔</td>
 <td>是</td>
 <td>要汇总的间隔类型</td>
 年，月，月，日的星期天<td> </td>
 </tr>
 </tbody>
 </table>

startDate和endDate参数指定的时间段
快照将在聚合中使用。您必须格式化日期
如上图所示。如果在指定的时间段内未保存任何快照，则
空列表被发回。名为interval的参数指定了什么
聚合类型将完成。

API查询，创建每月查询
    聚合：

    GET / api / 33 / dataStatistics？startDate = 2014-01-02＆endDate = 2016-01-01＆interval = MONTH

### 检索热门收藏夹 { #webapi_usage_analytics_top_favorites } 

 <!--DHIS2-SECTION-ID:webapi_usage_analytics_top_favorites-->

使用情况分析API可让您检索用于
DHIS2，并由用户决定。

 <table>
 <caption>热门收藏夹的查询参数</caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 <th>选项</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> eventType </td>
 <td>是</td>
 <td>数据统计事件类型</td>
 <td>参见上表</td>
 </tr>
 <tr class="even">
 <td>页面大小</td>
 <td>否</td>
 <td>返回的列表大小</td>
 <td>例如5、10、25。默认值为25 </td>
 </tr>
 <tr class="odd">
 <td> sortOrder </td>
 <td>否</td>
 <td>下降或上升</td>
 <td> ASC或DESC。默认为DESC。 </td>
 </tr>
 <tr class="even">
 <td>用户名</td>
 <td>否</td>
 <td>如果指定，则响应将仅包含此用户的收藏夹。 </td>
 <td>例如'admin'</td>
 </tr>
 </tbody>
 </table>

可以在不使用用户名的情况下使用API查询，然后查找顶部
系统的收藏夹。

    / api / 33 / dataStatistics / favorites？eventType = CHART_VIEW＆pageSize = 25＆sortOrder = ASC

如果指定了username，则响应将仅包含该用户的最爱。

    / api / 33 / dataStatistics / favorites？eventType = CHART_VIEW＆pageSize = 25＆sortOrder = ASC＆username = admin

### 回应格式 { #webapi_usage_analytics_response_format } 

 <!--DHIS2-SECTION-ID:webapi_usage_analytics_response_format-->

您可以在以下位置的使用情况分析响应中返回汇总数据：
几种表示形式。默认格式为JSON。这
可用的格式和内容类型为：

  - json（应用程序/ json）

  - xml（应用程序/ xml）

  - html（text / html）

API查询，请求XML的使用情况分析响应
    格式：

    /api/33/dataStatistics.xml?startDate=2014-01-01&endDate=2016-01-01&interval=WEEK

您必须使用HTTP检索汇总的使用情况分析响应
GET方法。这使您可以直接从网页和其他链接
启用HTTP的客户端使用情况分析响应。做功能
测试使用cURL库。

对演示数据库执行此命令以获取使用情况分析
JSON格式的响应：

```bash
curl "play.dhis2.org/demo/api/33/dataStatistics?startDate=2016-02-01&endDate=2016-02-14
  &interval=WEEK" -u admin:district
```

JSON响应如下所示：

```json
[
  {
    "year": 2016,
    "week": 5,
    "mapViews": 2181,
    "chartViews": 2227,
    "reportTableViews": 5633,
    "eventReportViews": 6757,
    "eventChartViews": 9860,
    "dashboardViews": 10082,
    "totalViews": 46346,
    "averageViews": 468,
    "averageMapViews": 22,
    "averageChartViews": 22,
    "averageReportTableViews": 56,
    "averageEventReportViews": 68,
    "averageEventChartViews": 99,
    "averageDashboardViews": 101,
    "savedMaps": 1805,
    "savedCharts": 2205,
    "savedReportTables": 1995,
    "savedEventReports": 1679,
    "savedEventCharts": 1613,
    "savedDashboards": 0,
    "savedIndicators": 1831,
    "activeUsers": 99,
    "users": 969
  },
  {
    "year": 2016,
    "week": 6,
    "mapViews": 2018,
    "chartViews": 2267,
    "reportTableViews": 4714,
    "eventReportViews": 6697,
    "eventChartViews": 9511,
    "dashboardViews": 12181,
    "totalViews": 47746,
    "averageViews": 497,
    "averageMapViews": 21,
    "averageChartViews": 23,
    "averageReportTableViews": 49,
    "averageEventReportViews": 69,
    "averageEventChartViews": 99,
    "averageDashboardViews": 126,
    "savedMaps": 1643,
    "savedCharts": 1935,
    "savedReportTables": 1867,
    "savedEventReports": 1977,
    "savedEventCharts": 1714,
    "savedDashboards": 0,
    "savedIndicators": 1646,
    "activeUsers": 96,
    "users": 953
  }
]
```

### 检索收藏的统计信息 { #webapi_usage_analytics_retrieve_favorite_statistics } 

 <!--DHIS2-SECTION-ID:webapi_usage_analytics_retrieve_favorite_statistics-->

您可以使用来检索特定收藏夹的观看次数
*收藏夹*资源，其中* {favorite-id} *应替换为
感兴趣的收藏夹的标识符：

    /api/33/dataStatistics/favorites/{favorite-id}.json

响应将包含给定收藏夹和
看起来像这样：

```json
{
  "views": 3
}
```

## 地理空间特征 { #webapi_geospatial_features } 

 <!--DHIS2-SECTION-ID:webapi_geospatial_features-->

* geoFeatures *资源使您可以从以下位置检索地理空间信息
DHIS2。地理空间要素与组织单位一起存储。
检索要素的语法与用于
分析资源的组织单位维度。它是
建议您先阅读Analytics API资源，然后再继续
阅读本节。您必须使用GET请求类型，并且只能使用JSON
支持响应格式。

例如，要检索位于的所有组织单位的地理特征
组织单位层次结构中的第3级，您可以使用GET请求
具有以下网址：

    /api/33/geoFeatures.json?ou=ou:LEVEL-3

在以下级别检索组织单位的地理特征
您可以使用单位网址的边界（例如，第2级）：

    /api/33/geoFeatures.json?ou=ou:LEVEL-4;O6uvpzGd5pu

响应属性的语义在下面描述
桌子。

 <table>
 <caption> 地理特征响应 </caption>
 <colgroup>
 <col style="width: 14%" />
 <col style="width: 85%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 属性 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ID </td>
 <td> 组织单位/地理特征标识符 </td>
 </tr>
 <tr class="even">
 <td> na </td>
 <td> 组织单位/地理要素名称 </td>
 </tr>
 <tr class="odd">
 <td> hcd </td>
 <td> 具有向下的坐标，指示是否存在一个或多个具有坐标的子组织单位（层次结构中的下方）</td>
 </tr>
 <tr class="even">
 <td> hcu </td>
 <td> 有坐标向上，表示上级组织单位是否有坐标（层级上） </td>
 </tr>
 <tr class="odd">
 <td> le </td>
 <td> 此组织单位/地理特征的级别。 </td>
 </tr>
 <tr class="even">
 <td> pg </td>
 <td> 父图，父组织单元标识符的图直到层次结构中的根 </td>
 </tr>
 <tr class="odd">
 <td> pi </td>
 <td> Parent identifier，该组织单元的父标识 </td>
 </tr>
 <tr class="even">
 <td> pn </td>
 <td> Parent name，该组织单位的父名称 </td>
 </tr>
 <tr class="odd">
 <td> ty </td>
 <td> 地理要素类型，1 = 点，2 = 多边形或多多边形 </td>
 </tr>
 <tr class="even">
 <td> co </td>
 <td> 此地理要素的坐标 </td>
 </tr>
 </tbody>
 </table>

### GeoJSON { #geojson }

要导出GeoJSON，您可以简单地将* .geosjon *添加为
端点* / api / organisationUnits *，或者您可以使用* Accept *标头
* application / json + geojson *。

Two parameters are supported: `level` (defaults to 1) and `parent`
(defaults to root organisation units). Both can be included multiple times. 
Some examples follow.

获得第2级和第4级的所有功能：

    /api/organisationUnits.geojson?level=2&level=4

使用边界组织单位获取级别3的所有功能：

    /api/organisationUnits.geojson?parent=fdc6uOvgoji&level=3

## 生成资源和分析表 { #webapi_generating_resource_analytics_tables } 

 <!--DHIS2-SECTION-ID:webapi_generating_resource_analytics_tables-->

DHIS2具有一组生成的数据库表，这些表用作
各种系统功能的基础。这些表可以执行
立即或计划通过以下方式定期执行
用户界面。它们也可以通过Web API生成为
在本节中说明。此任务通常是系统任务
管理员，而不消耗客户。

DHIS2应用程序内部将资源表用于
各种分析功能。这些表对用户也很有价值
编写高级SQL报告。它们可以用POST或PUT生成
请求以下网址：

    / api / 33 / resourceTables

分析表针对数据聚合进行了优化并已使用
当前在DHIS2中用于数据透视表模块。分析表可以
通过POST或PUT请求生成：

    / api / 33 / resourceTables / analytics

 <table>
 <caption>分析表可选查询参数</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 14%" />
 <col style="width: 52%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> skipResourceTables </td>
 否| <td>假|真</td>
 <td>跳过资源表的生成</td>
 </tr>
 <tr class="even">
 <td> skipAggregate </td>
 否| <td>假|真</td>
 <td>跳过汇总数据和完整性数据的生成</td>
 </tr>
 <tr class="odd">
 <td> skipEvents </td>
 否| <td>假|真</td>
 <td>跳过事件数据的生成</td>
 </tr>
 <tr class="even">
 <td> skipEnrollment </td>
 否| <td>假|真</td>
 <td>跳过注册数据的生成</td>
 </tr>
 <tr class="odd">
 <td>最近年份</td>
 <td>整数</td>
 <td>包含</td>的最近数据年数
 </tr>
 </tbody>
 </table>

通过监视可以运行“数据质量”和“数据监视”
任务，由以下端点触发：

    / api / 33 / resourceTables / monitoring

此任务将分析您的验证规则，查找任何违规行为并
保留它们作为验证结果。

这些请求将立即返回并启动服务器端
过程。

## 保养 { #webapi_maintenance } 

 <!--DHIS2-SECTION-ID:webapi_maintenance-->

要执行维护，您可以与* maintenance *资源进行交互。您应该使用* POST *或* PUT *作为请求的方法。可以使用以下方法。

清除分析表将删除所有分析表。

    开机自检/ api / maintenance / analyticsTablesClear

分析表分析将收集有关数据库中分析表内容的统计信息。

    开机自检/ api / maintenance / analyticsTablesAnalyze

清除过期的邀请将删除所有用户帐户邀请，其中
已经过期。

    开机自检/ api / maintenance / expiredInvitationsClear

期间修剪将删除未链接到任何数据的期间
价值观。

    开机自检/ api / maintenance / periodPruning

零数据值删除将删除链接到数据的零数据值
零数据定义为不重要的元素：

    开机自检/ api / maintenance / zeroDataValueRemoval

软删除的数据值删除将永久删除软删除的数据值。

    开机自检/ api / maintenance / softDeletedDataValueRemoval

软删除的程序阶段实例删除将永久删除软删除的事件。

    开机自检/ api / maintenance / softDeletedProgramStageInstanceRemoval

软删除程序实例的删除将永久删除软删除的注册。

    开机自检/ api / maintenance / softDeletedProgramInstanceRemoval

软删除的跟踪实体实例的删除将永久删除软删除的跟踪实体实例。

    开机自检/ api / maintenance / softDeletedTrackedEntityInstanceRemoval

删除SQL视图将删除数据库中的所有SQL视图。请注意，它不会删除DHIS2 SQL视图实体。

    开机自检/ api / maintenance / sqlViewsDrop

创建SQL视图将重新创建数据库中的所有SQL视图。

    开机自检/ api / maintenance / sqlViewsCreate

类别选项组合更新将删除过时并为所有类别组合生成缺少的类别选项组合。

    开机自检/ api / maintenance / categoryOptionComboUpdate

也可以使用以下端点为单个类别组合更新类别选项组合。

    开机自检/ api / maintenance / categoryOptionComboUpdate / categoryCombo / <category-combo-uid>

缓存清除将清除应用程序Hibernate缓存和分析分区缓存。

    开机自检/ api / maintenance / cacheClear

组织单位路径更新将重新生成组织单位路径属性。这可能是有用的，例如如果您使用SQL导入组织单位。

    开机自检/ api / maintenance / ouPathsUpdate

数据修剪将删除完整的数据集注册，数据批准，数据价值审核和数据价值，在这种情况下是组织单位。

    开机自检/ api / maintenance / dataPruning / organisationUnits / <org-unit-id>

数据元素的数据修剪，这将删除数据值审核和数据值。

    开机自检/ api / maintenance / dataPruning / dataElement / <data-element-uid>

元数据验证将应用所有元数据验证规则，并返回操作结果。

    开机自检/ api / metadataValidation

应用程序重新加载将通过从文件系统读取来刷新已安装应用程序的DHIS2托管缓存。

    开机自检/ api / appReload

通过对api / maintenance资源的POST请求以批处理方式支持维护操作，在api / maintenance资源中，该操作作为查询参数提供：

    开机自检/ api / maintenance？analyticsTablesClear = true＆expiredInvitationsClear = true
      ＆periodPruning = true＆zeroDataValueRemoval = true＆sqlViewsDrop = true＆sqlViewsCreate = true
      ＆categoryOptionComboUpdate = true＆cacheClear = true＆ouPathsUpdate = true

## 系统资源 { #webapi_system_resource } 

 <!--DHIS2-SECTION-ID:webapi_system_resource-->

系统资源为您提供方便的信息和
功能。系统资源可以在* / api / system *中找到。

### 产生识别码 { #webapi_system_resource_generate_identifiers } 

 <!--DHIS2-SECTION-ID:webapi_system_resource_generate_identifiers-->

要生成有效的随机DHIS2标识符，您可以执行GET请求以
该资源：

    / api / 33 / system / id？limit = 3

* limit *查询参数是可选的，它指示有多少
您希望与响应一起返回的标识符。默认为
返回一个标识符。响应将包含一个带有
数组命名代码，类似于此：

```json
{
  "codes": [
    "Y0moqFplrX4",
    "WI0VHXuWQuV",
    "BRJNBBpu4ki"
  ]
}
```

DHIS2 UID格式具有以下要求：

  - 长11个字符。

  - 仅字母数字字符，即。字母或数字字符
    （A-Za-z0-9）。

  - 以字母字符（A-Za-z）开头。

### 查看系统信息 { #webapi_system_resource_view_system_information } 

 <!--DHIS2-SECTION-ID:webapi_system_resource_view_system_information-->

要获取有关当前系统的信息，您可以向GET请求
这个网址：

    / api / 33 / system / info

支持JSON和JSONP响应格式。系统信息响应
当前包括以下属性。

```json
{
  contextPath: "http://yourdomain.com",
  userAgent: "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 Chrome/29.0.1547.62",
  version: "2.13-SNAPSHOT",
  revision: "11852",
  buildTime: "2013-09-01T21:36:21.000+0000",
  serverDate: "2013-09-02T12:35:54.311+0000",
  environmentVariable: "DHIS2_HOME",
  javaVersion: "1.7.0_06",
  javaVendor: "Oracle Corporation",
  javaIoTmpDir: "/tmp",
  javaOpts: "-Xms600m -Xmx1500m -XX:PermSize=400m -XX:MaxPermSize=500m",
  osName: "Linux",
  osArchitecture: "amd64",
  osVersion: "3.2.0-52-generic",
  externalDirectory: "/home/dhis/config/dhis2",
  databaseInfo: {
    type: "PostgreSQL",
    name: "dhis2",
    user: "dhis",
    spatialSupport: false
  },
  memoryInfo: "Mem Total in JVM: 848 Free in JVM: 581 Max Limit: 1333",
  cpuCores: 8
}
```

> **注意**
>
>如果请求此资源的用户在系统中没有完全权限，则将仅包括前七个属性，因为此信息对安全性敏感。

要仅获取有关系统上下文的信息，即`contextPath`和
`userAgent`，您可以向以下URL发出GET请求。 JSON和
支持JSONP响应格式：

    / api / 33 / system / context

### 检查用户名和密码组合是否正确 { #webapi_system_resource_check_username_password } 

 <!--DHIS2-SECTION-ID:webapi_system_resource_check_username_password-->

检查是否有一些用户凭据（用户名和密码组合）
是正确的，您可以使用以下命令向以下资源发出* GET *请求
*基本认证*：

    / api / 33 / system / ping

您可以通过检查* HTTP来检测认证的结果
响应标头的状态代码*。可能状态的含义
代码在下面列出。请注意，这适用于中的Web API请求
一般的。

<table>
<caption>HTTP 状态代码</caption>
<colgroup>
<col style="width: 13%" />
<col style="width: 12%" />
<col style="width: 74%" />
</colgroup>
<thead>
<tr class="header">
<th>HTTP 状态代码</th>
<th>说明</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>200</td>
<td>好的</td>
<td>身份验证成功</td>
</tr>
<tr class="even">
<td>302</td>
<td>已找到</td>
<td>请求中未提供凭据 - 未进行身份验证</td>
</tr>
<tr class="odd">
<td>401</td>
<td>未经授权</td>
<td>用户名和密码组合不正确 - 身份验证失败</td>
</tr>
</tbody>
</table>

### 查看异步任务状态 { #webapi_system_resource_view_async_task_status } 

 <!--DHIS2-SECTION-ID:webapi_system_resource_view_async_task_status-->

Tasks which often take a long time to complete can be performed
asynchronously. After initiating an async task you can poll the status
through the `system/tasks` resource by supplying the task category and
the task identifier of interest.

轮询任务状态时，您需要进行身份验证
启动任务的用户。以下任务类别是
支持的：

<table>
<caption>Task categories</caption>
<colgroup>
<col style="width: 21%" />
<col style="width: 78%" />
</colgroup>
<thead>
<tr class="header">
<th>Identifier</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ANALYTICS_TABLE</td>
<td>Generation of the analytics tables.</td>
</tr>
<tr class="even">
<td>RESOURCE_TABLE</td>
<td>Generation of the resource tables.</td>
</tr>
<tr class="odd">
<td>MONITORING</td>
<td>Processing of data surveillance/monitoring validation rules.</td>
</tr>
<tr class="even">
<td>DATAVALUE_IMPORT</td>
<td>Import of data values.</td>
</tr>
<tr class="odd">
<td>EVENT_IMPORT</td>
<td>Import of events.</td>
</tr>
<tr class="even">
<td>ENROLLMENT_IMPORT</td>
<td>Import of enrollments.</td>
</tr>
<tr class="odd">
<td>TEI_IMPORT</td>
<td>Import of tracked entity instances.</td>
</tr>
<tr class="even">
<td>METADATA_IMPORT</td>
<td>Import of metadata.</td>
</tr>
<tr class="odd">
<td>DATA_INTEGRITY</td>
<td>Processing of data integrity checks.</td>
</tr>
</tbody>
</table>

每个异步任务都会自动分配一个标识符，该标识符可以
用于监视任务的状态。该任务标识符是
当您通过各种方式启动异步任务时，API返回的
启用了异步的端点。

#### 监控任务 { #monitoring-a-task } 

您可以通过对系统任务的GET请求来轮询任务状态
像这样的资源：

    / api / 33 / system / tasks / {task-category-id} / {task-id}

一个示例请求可能看起来像这样：

    / api / 33 / system / tasks / DATAVALUE_IMPORT / j8Ki6TgreFw

该响应将提供有关状态的信息，例如
通知级别，类别，时间和状态。 *完成*属性
指示是否认为该过程已完成。

```json
[{
  "uid": "hpiaeMy7wFX",
  "level": "INFO",
  "category": "DATAVALUE_IMPORT",
  "time": "2015-09-02T07:43:14.595+0000",
  "message": "Import done",
  "completed": true
}]
```

#### 监视类别的所有任务 { #monitoring-all-tasks-for-a-category } 

您可以通过GET请求来轮询特定类别的所有任务
系统任务资源：

    / api / 33 / system / tasks / {task-category-id}

轮询数据值导入任务状态的示例请求
看起来像这样：

    / api / 33 / system / tasks / DATAVALUE_IMPORT

#### 监控所有任务 { #monitor-all-tasks } 

您可以使用以下命令请求系统中所有当前正在运行的任务的列表
对系统任务资源的GET请求：

    / api / 33 / system / tasks

响应将类似于以下内容：

```json
[{
  "EVENT_IMPORT": {},
  "DATA_STATISTICS": {},
  "RESOURCE_TABLE": {},
  "FILE_RESOURCE_CLEANUP": {},
  "METADATA_IMPORT": {},
  "CREDENTIALS_EXPIRY_ALERT": {},
  "SMS_SEND": {},
  "MOCK": {},
  "ANALYTICSTABLE_UPDATE": {},
  "COMPLETE_DATA_SET_REGISTRATION_IMPORT": {},
  "DATAVALUE_IMPORT": {},
  "DATA_SET_NOTIFICATION": {},
  "DATA_INTEGRITY": {
    "OB1qGRlCzap": [{
      "uid": "LdHQK0PXZyF",
      "level": "INFO",
      "category": "DATA_INTEGRITY",
      "time": "2018-03-26T15:02:32.171",
      "message": "Data integrity checks completed in 38.31 seconds.",
      "completed": true
    }]
  },
  "PUSH_ANALYSIS": {},
  "MONITORING": {},
  "VALIDATION_RESULTS_NOTIFICATION": {},
  "REMOVE_EXPIRED_RESERVED_VALUES": {},
  "DATA_SYNC": {},
  "SEND_SCHEDULED_MESSAGE": {},
  "DATAVALUE_IMPORT_INTERNAL": {},
  "PROGRAM_NOTIFICATIONS": {},
  "META_DATA_SYNC": {},
  "ANALYTICS_TABLE": {},
  "PREDICTOR": {}
}]
```

### 查看异步任务摘要 { #view-asynchronous-task-summaries } 

任务摘要资源使您可以检索任务摘要
异步任务调用。您需要指定类别和
（可选）任务的标识符。任务标识符可以是
从发起API的API请求的响应中检索
异步任务。

要检索特定任务的摘要，您可以发出以下请求：

    / api / 33 / system / taskSummaries / {task-category-id} / {task-id}

一个示例请求可能看起来像这样：

    / api / 33 / system / taskSummaries / DATAVALUE_IMPORT / k72jHfF13J1

响应将类似于以下内容：

```json
{
  "responseType": "ImportSummary",
  "status": "SUCCESS",
  "importOptions": {
    "idSchemes": {},
    "dryRun": false,
    "async": true,
    "importStrategy": "CREATE_AND_UPDATE",
    "mergeMode": "REPLACE",
    "reportMode": "FULL",
    "skipExistingCheck": false,
    "sharing": false,
    "skipNotifications": false,
    "datasetAllowsPeriods": false,
    "strictPeriods": false,
    "strictCategoryOptionCombos": false,
    "strictAttributeOptionCombos": false,
    "strictOrganisationUnits": false,
    "requireCategoryOptionCombo": false,
    "requireAttributeOptionCombo": false,
    "skipPatternValidation": false
  },
  "description": "Import process completed successfully",
  "importCount": {
    "imported": 0,
    "updated": 431,
    "ignored": 0,
    "deleted": 0
  },
  "dataSetComplete": "false"
}
```

您可能还会检索导入任务的多个任务的摘要
要求类似的特定类别
这：

    / api / 33 / system / taskSummaries / {task-category-id}

### 获取外观信息 { #webapi_system_resource_get_appearance_information } 

 <!--DHIS2-SECTION-ID:webapi_system_resource_get_appearance_information-->

您可以使用GET检索JSON格式的可用标志图标
要求：

    / api / 33 / system / flags

您可以使用GET检索JSON格式的可用UI样式
要求：

    / api / 33 / system / styles

## 语言环境 { #webapi_locales } 

 <!--DHIS2-SECTION-ID:webapi_locales-->

DHIS2支持用户界面和数据库的转换
内容。

### UI语言环境 { #ui-locales } 

您可以通过以下方式检索用户界面的可用语言环境
带有GET请求的以下资源。 XML和JSON资源
支持表示形式。

    / api / 33 / locales / ui

### 数据库内容语言环境 { #database-content-locales } 

您可以使用GET和检索和创建数据库内容的语言环境
通过以下资源发出POST请求。 XML和JSON资源
支持表示形式。

    / api / 33 / locales / db

## 翻译 { #webapi_translations } 

 <!--DHIS2-SECTION-ID:webapi_translations-->

DHIS2允许翻译数据库内容。您可以与
通过Web API使用* translations *资源进行翻译。

    / api / 33 / translations

### 创建翻译 { #create-translation } 

您可以使用JSON格式的POST请求创建翻译：

```json
{
  "objectId": "P3jJH5Tu5VC",
  "className": "DataElement",
  "locale": "es",
  "property": "name",
  "value": "Casos de fiebre amarilla"
}
```

    POST / api / 33 / translations

下表列出了支持翻译的属性。

 <table>
 <caption>属性名称</caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>属性名称</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>名称</td>
 <td>对象名称</td>
 </tr>
 <tr class="even">
 <td>短名称</td>
 <td>对象简称</td>
 </tr>
 <tr class="odd">
 <td>说明</td>
 <td>对象描述</td>
 </tr>
 </tbody>
 </table>

下表列出了支持翻译的类。

 <table>
 <caption>类名称</caption>
 <colgroup>
 <col style="width: 34%" />
 <col style="width: 65%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>类名称</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> DataElementCategoryOption </td>
 <td>类别选项</td>
 </tr>
 <tr class="even">
 <td> DataElementCategory </td>
 <td>类别</td>
 </tr>
 <tr class="odd">
 <td> DataElementCategoryCombo </td>
 <td>类别组合</td>
 </tr>
 <tr class="even">
 <td>数据元素</td>
 <td>数据元素</td>
 </tr>
 <tr class="odd">
 <td> DataElementGroup </td>
 <td>数据元素组</td>
 </tr>
 <tr class="even">
 <td> DataElementGroupSet </td>
 <td>数据元素组集</td>
 </tr>
 <tr class="odd">
 <td>指示灯</td>
 <td>指示灯</td>
 </tr>
 <tr class="even">
 <td>指标类型</td>
 <td>指示器类型</td>
 </tr>
 <tr class="odd">
 <td>指标组</td>
 <td>指标组</td>
 </tr>
 <tr class="even">
 <td> IndicatorGroupSet </td>
 <td>指标组设置</td>
 </tr>
 <tr class="odd">
 <td>组织单位</td>
 <td>组织单位</td>
 </tr>
 <tr class="even">
 <td> OrganisationUnitGroup </td>
 <td>组织单位组</td>
 </tr>
 <tr class="odd">
 <td> OrganisationUnitGroupSet </td>
 <td>组织单位组设置</td>
 </tr>
 <tr class="even">
 <td>数据集</td>
 <td>数据集</td>
 </tr>
 <tr class="odd">
 <td>部分</td>
 <td>数据集部分</td>
 </tr>
 <tr class="even">
 <td>验证规则</td>
 <td>验证规则</td>
 </tr>
 <tr class="odd">
 <td> ValidationRuleGroup </td>
 <td>验证规则组</td>
 </tr>
 <tr class="even">
 <td>程序</td>
 <td>程序</td>
 </tr>
 <tr class="odd">
 <td>程序阶段</td>
 <td>程序阶段</td>
 </tr>
 <tr class="even">
 <td> TrackedEntityAttribute </td>
 <td>跟踪的实体属性</td>
 </tr>
 <tr class="odd">
 <td> TrackedEntity </td>
 <td>跟踪的实体</td>
 </tr>
 <tr class="even">
 <td> RelationshipType </td>
 <td>跟踪实体实例的关系类型</td>
 </tr>
 <tr class="odd">
 <td>选项设置</td>
 <td>选项集</td>
 </tr>
 <tr class="even">
 <td>属性</td>
 <td>元数据的属性</td>
 </tr>
 </tbody>
 </table>

### 获取翻译 { #get-translations } 

您可以通过翻译资源浏览所有翻译：

    GET / api / 33 / translations

您可以使用标准过滤技术来获取以下内容的翻译
兴趣。例如。获取西班牙语中数据元素的所有翻译
区域设置，您可以使用以下请求：

    /api/33/translations.json?fields=*&filter=className:eq:DataElement&filter=locale:eq:es

要获取所有属性的特定对象的翻译，请执行以下操作：

    /api/33/translations.json?fields=*&filter=className:eq:DataElement
      ＆filter = locale：eq：fr＆filter = objectId：eq：fbfJHSPpUQD

## 短消息服务（SMS） { #webapi_sms } 

 <!--DHIS2-SECTION-ID:webapi_sms-->

本节介绍用于发送和接收短文本的SMS Web API
消息。

### 出站短信服务 { #outbound-sms-service } 

Web API支持使用POST方法发送传出SMS。短信可以
被发送到一个或多个目的地。一个或多个网关需要
在使用服务之前进行配置。如果无法发送短信
没有配置网关。它需要一组收件人，并且
JSON格式的消息文本，如下所示。

    / api / 33 / sms / outbound

```json
{
  "message":"Sms Text",
  "recipients": [
    "004712341234",
    "004712341235"
  ]
}
```

> **注**
>
> 如果收件人列表的大小超过 `MAX_ALLOWED_RECIPIENTS` 200 的限制，收件人列表将被分割。

Web API还支持查询参数版本，但是
参数化的API仅可用于将SMS发送到单个
目的地。

    / api / 33 / sms / outbound？message = text＆recipient = 004712341234

#### 网关响应码 { #gateway-response-codes } 

网关可以使用以下响应代码进行响应。

 <table>
 <caption> 网关响应代码 </caption>
 <colgroup>
 <col style="width: 13%" />
 <col style="width: 13%" />
 <col style="width: 73%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 响应码 </th>
 <th> 响应消息 </th>
 <th> 详细说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> RESULT_CODE_0 </td>
 <td> 成功 </td>
 <td> 消息已成功发送 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_1 </td>
 <td> 预定 </td>
 <td> 消息已成功调度 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_22 </td>
 <td> 内部致命错误 </td>
 <td> 内部致命错误 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_23 </td>
 <td> 认证失败 </td>
 <td> 身份验证凭据不正确 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_24 </td>
 <td> 数据验证失败 </td>
 <td> 请求中提供的参数不正确 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_25 </td>
 <td> 积分不足 </td>
 <td> 信用不够发送消息 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_26 </td>
 <td> 上游信用不可用 </td>
 <td> 上游信用不可用 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_27 </td>
 <td> 超出了您的每日配额 </td>
 <td> 您已超出每日配额 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_40 </td>
 <td> 暂时不可用 </td>
 <td> 服务暂时关闭 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_201 </td>
 <td> 超过最大批量大小 </td>
 <td> 超过最大批量大小 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_200 </td>
 <td> 成功 </td>
 <td> 请求成功完成 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_202 </td>
 <td> 接受 </td>
 <td> 消息将被处理 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_207 </td>
 <td> 多状态 </td>
 <td> 向 API 提交了不止一条消息；但是，并非所有消息都具有相同的状态 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_400 </td>
 <td> 错误请求 </td>
 <td> 验证失败（例如缺少/无效的参数或标头） </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_401 </td>
 <td> 未授权 </td>
 <td> 认证失败。这也可能是由 IP 锁定设置引起的 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_402 </td>
 <td> 需要付款 </td>
 <td> 没有足够的信用来发送消息 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_404 </td>
 <td> 未找到 </td>
 <td> 资源不存在 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_405 </td>
 <td> 方法不允许 </td>
 <td> 资源 </td> 不支持 Http 方法
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_410 </td>
 <td> 消失了 </td>
 <td> 手机号码被屏蔽 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_429 </td>
 <td> 请求过多 </td>
 <td> 通用速率限制错误 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_503 </td>
 <td> 服务不可用 </td>
 <td> 我们的平台出现临时错误 - 请重试 </td>
 </tr>
 </tbody>
 </table>

### 入站短信服务 { #inbound-sms-service } 

Web API支持使用POST收集传入的SMS消息
方法。路由到DHIS2 Web API的传入消息可以是
使用此API收到的。该API收集入站SMS消息并
根据SMS内容（SMS）将其提供给侦听器以进行解析
命令）。以下是JSON格式的有效负载示例。文本，
发起者，接收日期和发送日期是必填参数。这
其余是可选的，但系统将使用默认值
参数。

    / api / 33 / sms / inbound

```json
{
  "text": "sample text",
  "originator": "004712341234",
  "gatewayid": "unknown",
  "receiveddate": "2016-05-01",
  "sentdate":"2016-05-01",
  "smsencoding": "1",
  "smsstatus":"1"
}
```

Web API还支持基于查询参数的版本。

    / api / 33 / sms / inbound？message = text＆originator = 47XXXXXX＆gateway = clickatel

 <table>
 <caption> 用户查询参数 </caption>
 <colgroup>
 <col style="width: 13%" />
 <col style="width: 13%" />
 <col style="width: 73%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> </th>型
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 消息 </td>
 <td> 字符串 </td>
 <td> 这是携带实际文本消息的强制性参数。 </td>
 </tr>
 <tr class="even">
 <td> 发起人 </td>
 <td> 字符串 </td>
 <td> 这是强制性参数，显示此消息实际上是由谁发送的。 </td>
 </tr>
 <tr class="odd">
 <td> 网关 </td>
 <td> 字符串 </td>
 <td> 这是一个可选参数，提供网关 ID。如果不存在默认文本 &quot;UNKNOWN&quot; 将存储 </td>
 </tr>
 <tr class="even">
 <td> 接收时间 </td>
 <td> 日期 </td>
 <td> 这是一个可选参数。它是网关收到消息的时间戳。 </td>
 </tr>
 </tbody>
 </table>

### 网关服务管理 { #gateway-service-administration } 

Web API公开了资源，这些资源提供了一种配置和配置资源的方法。
更新SMS网关配置。

可以使用GET检索已配置的不同网关的列表
方法。

    GET / api / 33 / gateways

还可以使用以下命令检索特定网关类型的配置
GET方法。

    GET / api / 33 / gateways / {uid}

可以使用POST添加新的网关配置。 POST api需要类型请求参数，当前其值可以具有* HTTP，bulksms，clickatell *中的任意一个。首先添加的网关将设置为默认。一次只能允许一个网关成为默认网关。默认网关只能通过其api进行更改。如果默认网关被删除，则下一个网关将自动成为默认网关。

    POST / api / 33 / gateways

可以通过提供如下所述的uid和网关配置来更新配置

    PUT / api / 33 / gateways / {uids}

可以使用DELETE删除特定网关类型的配置
方法。

    删除/ api / 33 / gateways / {uid}

可以检索和更新默认网关。

    GET / api / 33 / gateways / default

可以使用PUT方法设置默认网关。

    PUT / api / 33 / gateways / default / {uid}

### 网关配置 { #gateway-configuration } 

Web API使您可以创建和更新网关配置。对于每个
网关类型JSON有效负载中有不同的参数。
每个网关的JSON有效负载示例如下。 POST用于
创建并放置以更新配置。标头参数可用于
GenericHttpGateway发送一个或多个参数作为http标头的情况。

#### Clickatell { #clickatell }

```json
{
  "type" : "clickatell",
  "name" : "clickatell",
  "username": "clickatelluser",
  "authtoken": "XXXXXXXXXXXXXXXXXXXX",
  "urlTemplate": "https://platform.clickatell.com/messages"
}
```

#### 散装 { #bulksms } 

```json
{
  "type": "bulksms",
  "name": "bulkSMS",
  "username": "bulkuser",
  "password": "abc123"
}
```

#### SMPP网关 { #smpp-gateway } 

```json
{
  "type": "smpp",
  "name": "smpp gateway2",
  "systemId": "smppclient1",
  "host": "localhost",
  "systemType": "cp",
  "numberPlanIndicator": "UNKNOWN",
  "typeOfNumber": "UNKNOWN",
  "bindType": "BIND_TX",
  "port": 2775,
  "password":"password",
  "compressed": false
}
```

#### 通用HTTP { #generic-http } 

```json
{
  "type": "http",
  "name": "Generic",
  "configurationTemplate": "{\"to\": \"${recipients}\",\"body\": \"${text}\", \"deliveryReport\":\"${deliveryReport}\"}",
  "useGet": false,
  "contentType": "APPLICATION_JSON",
  "urlTemplate":"https://samplegateway.com/messages",
  "parameters": [
    {
      "header": true,
      "encode": false,
      "key": "username",
      "value": "user_uio",
      "confidential": true
    },
    {
      "header": true,
      "encode": false,
      "key": "password",
      "value": "123abcxyz",
      "confidential": true
    },
    {
      "header": false,
      "encode": false,
      "key": "deliveryReport",
      "value": "yes",
      "confidential": false
    }
  ],
  "isDefault": false
}
```

在通用的http网关中，可以添加任意数量的参数。

 <table>
 <caption>通用SMS网关参数</caption>
 <colgroup>
 <col style="width: 13%" />
 <col style="width: 13%" />
 <col style="width: 73%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>类型</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>名称</td>
 <td>字符串</td>
 网关名称<td> </td>
 </tr>
 <tr class="even">
 <td>配置模板</td>
 <td>字符串</td>
 <td>配置模板，其中填充了参数值。例如，上面给出的配置模板将像这样填充{“ to”：“ +27001234567”，“ body”：“ Hello World！”} </td>
 </tr>
 <tr class="odd">
 使用<td>使用获取</td>
 <td>布尔值</td>
 默认情况下将使用<td> Http POST网络。为了更改它和Http GET，用户可以将useGet标志设置为true。 </td>
 </tr>
 <tr class="even">
 <td> contentType </td>
 <td>字符串</td>
 <td>内容类型指定要发送的数据类型。支持的类型为APPLICATION_JSON，APPLICATION_XML，FORM_URL_ENCODED，TEXT_PLAIN </td>
 </tr>
 <tr class="odd">
 <td> urlTemplate </td>
 <td>字符串</td>
 <td>网址模板</td>
 </tr>
 <tr class="even">
 <td>标头</td>
 <td>布尔值</td>
 <td>如果需要在Http标头中发送参数</td>
 </tr>
 <tr class="odd">
 <td>编码</td>
 <td>布尔值</td>
 <td>如果参数需要编码</td>
 </tr>
 <tr class="even">
 <td>键</td>
 <td>字符串</td>
 <td>参数密钥</td>
 </tr>
 <tr class="odd">
 <td>值</td>
 <td>字符串</td>
 <td>参数值</td>
 </tr>
 <tr class="even">
 <td>机密</td>
 <td>布尔值</td>
 <td>如果参数是机密的。此参数不会通过API </td>公开
 </tr>
 </tbody>
 </table>

如果成功保存配置，将返回HTTP.OK，否则* Error *

## 短信命令 { #webapi_sms_commands } 

 <!--DHIS2-SECTION-ID:webapi_sms_commands-->

SMS命令用于通过SMS收集数据。这些命令
属于特定的解析器类型。每个解析器具有不同的功能。

可以使用GET检索命令列表。

    GET / api / smsCommands

可以使用GET检索一个特定的命令。

    GET / api / smsCommands / uid

可以使用PUT更新一个特定的命令。

    PUT / api / smsCommands / uid

可以使用POST创建命令。

    POST / api / smsCommands

可以使用DELETE删除一个特定命令。

    删除/ api / smsCommands / uid

#### SMS命令解析器类型为 { #sms-command-parser-types } 

  - KEY_VALUE_PARSER

  - J2ME_PARSER

  - ALERT_PARSER

  - 未注册_解析器

  - TRACKED_ENTITY_REGISTRATION_PARSER

  - PROGRAM_STAGE_DATAENTRY_PARSER

  - EVENT_REGISTRATION_PARSER

## 计划讯息 { #webapi_program_messages } 

 <!--DHIS2-SECTION-ID:webapi_program_messages-->

程序消息使您可以将消息发送到跟踪的实体实例，
与组织单位，电话号码和
电子邮件地址。您可以通过`messages`资源发送消息。

    / api / 33 /消息

### 发送程序信息 { #sending-program-messages } 

程序消息可以使用两个传递渠道发送：

  - 短信（SMS）

  - 电子邮件地址（EMAIL）

程序消息可以发送给各种收件人：

  - 跟踪实体实例：系统将查找值的属性
    输入PHONE_NUMBER或EMAIL（取决于指定的递送）
    渠道）并使用相应的属性值。

  - 组织单位：系统将使用电话号码或电子邮件
    为组织单位注册的信息。

  - 电话号码清单：系统将使用明确定义的
    电话号码。

  - 电子邮件地址列表：系统将使用明确定义的
    电子邮件地址。

下面是使用 POST 请求发送消息的示例 JSON 负载。
请注意，消息资源接受一个名为
`programMessages` 可以包含任意数量的程序消息。

    开机自检/ api / 33 / messages

```json
{
  "programMessages": [{
    "recipients": {
      "trackedEntityInstance": {
        "id": "UN810PwyVYO"
      },
      "organisationUnit": {
        "id": "Rp268JB6Ne4"
      },
      "phoneNumbers": [
        "55512345",
        "55545678"
      ],
      "emailAddresses": [
        "johndoe@mail.com",
        "markdoe@mail.com"
      ]
    },
    "programInstance": {
      "id": "f3rg8gFag8j"
    },
    "programStageInstance": {
      "id": "pSllsjpfLH2"
    },
    "deliveryChannels": [
      "SMS", "EMAIL"
    ],
    "subject": "Outbreak alert",
    "text": "An outbreak has been detected",
    "storeCopy": false
  }]
}
```

下表中说明了这些字段。

 <table>
 <caption>程序消息有效负载</caption>
 <colgroup>
 <col style="width: 21%" />
 <col style="width: 21%" />
 <col style="width: 31%" />
 <col style="width: 26%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>字段</th>
 <th>必需</th>
 <th>说明</th>
 <th>值</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>收件人</td>
 <td>是</td>
 <td>程序消息的收件人。必须至少指定一个收件人。可以为邮件指定任意数量的收件人/类型。 </td>
 <td>可以跟踪EntityInstance，organizationunit，phoneNumbers数组或emailAddresses数组。 </td>
 </tr>
 <tr class="even">
 <td>程序实例</td>
 <td>这或programStageInstance必需</td>
 <td>程序实例/注册。 </td>
 <td>注册ID。 </td>
 </tr>
 <tr class="odd">
 <td>程序舞台实例</td>
 <td>这个或programInstance必需</td>
 <td>程序阶段实例/事件。 </td>
 <td>事件ID。 </td>
 </tr>
 <tr class="even">
 <td>交付渠道</td>
 <td>是</td>
 <td>交付渠道数组。 </td>
 SMS | <td>电子邮件</td>
 </tr>
 <tr class="odd">
 <td>主题</td>
 <td>否</td>
 <td>邮件主题。不适用于短信传送渠道。 </td>
 <td>文本。 </td>
 </tr>
 <tr class="even">
 <td>文字</td>
 <td>是</td>
 <td>消息文本。 </td>
 <td>文本。 </td>
 </tr>
 <tr class="odd">
 <td>商店复制</td>
 <td>否</td>
 <td>是否在DHIS2中存储程序消息的副本。 </td>
 <td>否（默认）|真</td>
 </tr>
 </tbody>
 </table>

通过SMS发送消息到被跟踪对象的一个简单示例
实体实例如下所示：

```bash
curl -d @message.json "https://play.dhis2.org/demo/api/33/messages"
  -H "Content-Type:application/json" -u admin:district
```

```json
{
  "programMessages": [{
    "recipients": {
      "trackedEntityInstance": {
        "id": "PQfMcpmXeFE"
      }
    },
    "programInstance": {
      "id": "JMgRZyeLWOo"
    },
    "deliveryChannels": [
      "SMS"
    ],
    "text": "Please make a visit on Thursday"
  }]
}
```

### 检索和删除程序消息 { #retrieving-and-deleting-program-messages } 

可以使用GET检索消息列表。

    GET / api / 33 / messages

也可以使用GET检索一条特定的消息。

    GET / api / 33 / messages / {uid}

可以使用DELETE删除消息。

    删除/ api / 33 / messages / {uid}

### 查询程序信息 { #querying-program-messages } 

程序消息API支持基于以下内容的程序消息查询
请求参数。可以根据以下提到的内容过滤邮件
查询参数。所有请求都应将GET HTTP动词用于
检索信息。

 <table>
 <caption>查询程序消息API </caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 75%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th> URL </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>程序实例</td>
 <td> / api / 33 / messages？programInstance = 6yWDMa0LP7 </td>
 </tr>
 <tr class="even">
 <td>程序舞台实例</td>
 <td> / api / 33 / messages？programStageInstance = SllsjpfLH2 </td>
 </tr>
 <tr class="odd">
 <td> trackedEntityInstance </td>
 <td> / api / 33 / messages？trackedEntityInstance = xdfejpfLH2 </td>
 </tr>
 <tr class="even">
 <td>组织单位</td>
 <td> / api / 33 / messages？ou = Sllsjdhoe3 </td>
 </tr>
 <tr class="odd">
 <td>处理日期</td>
 <td> / api / 33 / messages？processedDate = 2016-02-01 </td>
 </tr>
 </tbody>
 </table>

## 用户数 { #webapi_users } 

 <!--DHIS2-SECTION-ID:webapi_users-->

本节介绍用户资源方法。

    / api / 33 / users

### 用户查询 { #webapi_users_query } 

 <!--DHIS2-SECTION-ID:webapi_users_query-->

* users *资源提供了除
标准参数（例如分页）。在用户处查询用户
资源可以使用以下参数。

 <table>
 <caption> 用户查询参数 </caption>
 <colgroup>
 <col style="width: 18%" />
 <col style="width: 17%" />
 <col style="width: 63%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> </th>型
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 查询 </td>
 <td> 文字 </td>
 <td> 名字、姓氏、用户名和电子邮件的查询值，不区分大小写。 </td>
 </tr>
 <tr class="even">
 <td> 电话号码 </td>
 <td> 文字 </td>
 <td> 查询电话号码。 </td>
 </tr>
 <tr class="odd">
 <td> canManage </td>
 <td> 假 |真 </td>
 <td> 过滤当前用户是否可以通过管理的用户组关系管理返回的用户。 </td>
 </tr>
 <tr class="even">
 <td> authSubset </td>
 <td> 假 |真 </td>
 <td> 过滤返回的用户是否拥有当前用户的权限子集。 </td>
 </tr>
 <tr class="odd">
 <td> lastLogin </td>
 <td> 日期 </td>
 <td> 筛选晚于给定日期登录的用户。 </td>
 </tr>
 <tr class="even">
 <td> inactiveMonths </td>
 <td> 编号 </td>
 <td> 过滤给定月数未登录的用户。 </td>
 </tr>
 <tr class="odd">
 <td> 不活动自 </td>
 <td> 日期 </td>
 <td> 过滤未晚于给定日期登录的用户。 </td>
 </tr>
 <tr class="even">
 <td> 自注册 </td>
 <td> 假 |真 </td>
 <td> 过滤已自行注册其用户帐户的用户。 </td>
 </tr>
 <tr class="odd">
 <td> 邀请状态 </td>
 <td> 无 |所有 |过期 </td>
 <td> 过滤用户邀请，包括所有邀请或过期邀请。 </td>
 </tr>
 <tr class="even">
 <td> 或 </td>
 <td> 标识符 </td>
 <td> 过滤与具有给定标识符的组织单位相关联的用户。 </td>
 </tr>
 <tr class="odd">
 <td> userOrgUnits </td>
 <td> 假 |真 </td>
 <td> 筛选与链接到当前登录用户的组织单位相关联的用户。 </td>
 </tr>
 <tr class="even">
 <td> 包括儿童 </td>
 <td> 假 |真 </td>
 <td> 包括来自 ou 参数的所有子组织单位的用户。 </td>
 </tr>
 <tr class="odd">
 <td> 页面 </td>
 <td> 编号 </td>
 <td> 页码。 </td>
 </tr>
 <tr class="even">
 <td> 页面大小 </td>
 <td> 编号 </td>
 <td> 页面大小。 </td>
 </tr>
 </tbody>
 </table>

以“ konan”作为名字或姓氏的最多10个用户的查询（大小写）
不敏感的人）
用户：

    / api / 33 / users？query = konan＆authSubset = true＆pageSize = 10

### 用户凭证查询 { #webapi_users_credentials_query } 

 <!--DHIS2-SECTION-ID:webapi_users_credentials_query-->

先前用户查询的替代方法是直接查询用户
凭据（用户名等所在的部分）使用
* / api / userCredentials *端点，它支持所有常规字段和
对象过滤器作为其他端点。

获取用户名为admin的用户凭据：

    / api / 33 / userCredentials？filter = username：eq：admin

从用户名开始的所有用户凭据中获取用户名和代码
和
    * adm *：

    / api / 33 / userCredentials？fields = username，code＆filter = username：^ like：adm

### 用户帐户创建和更新 { #webapi_users_create_update } 

 <!--DHIS2-SECTION-ID:webapi_users_create_update-->

通过API支持创建和更新用户。这
有效负载本身与API中的其他有效负载类似，因此它们
支持集合引用等。创建的简单示例有效负载
密码应该以纯文本形式发送（记住仅
在启用SSL的服务器上使用此功能），并将在后端进行加密：

```json
{
  "id": "Mj8balLULKp",
  "firstName": "John",
  "surname": "Doe",
  "email": "johndoe@mail.com",
  "userCredentials": {
    "id": "lWCkJ4etppc",
    "userInfo": {
    "id": "Mj8balLULKp"
  },
  "username": "johndoe123",
  "password": "Your-password-123",
  "skype": "john.doe",
  "telegram": "joh.doe",
  "whatsApp": "+1-541-754-3010",
  "facebookMessenger": "john.doe",
  "avatar": {
    "id": "<fileResource id>"
  },
  "userRoles": [
    {
      "id": "Ufph3mGRmMo"
    }
  ]
  },
  "organisationUnits": [
    {
      "id": "Rp268JB6Ne4"
    }
  ],
  "userGroups": [
    {
      "id": "wl5cDMuUhmF"
    }
  ]
}
```

```bash
curl -X POST -d @u.json "http://server/api/33/users" -u user:pass 
  -H "Content-Type: application/json" 
```

在用户创建有效负载中，仅在导入时支持用户组
或一次*发布*单个用户。如果您尝试创建多个
用户在指定用户组时，您不会收到错误，并且
将创建用户，但不会分配用户组。这是设计使然
并且由于用户和用户之间的多对多关系而受到限制
用户组，用户组是关系的所有者。更新
或创建多个用户及其用户组，请考虑使用* POST *程序
一次一次，或* POST * /导入所有用户，然后执行另一项操作
在指定新用户的标识符的同时更新其用户组。

创建用户后，* Location *标头将与
新生成的ID（您也可以使用/ api / system / id提供自己的ID
端点）。然后可以使用相同的有效载荷进行更新，但请记住
然后使用* PUT *代替* POST *，并且端点现在是
* / api / users / ID *。

```bash
curl -X PUT -d @u.json "http://server/api/33/users/ID" -u user:pass 
  -H "Content-Type: application/json" 
```

有关可用的全部有效负载的更多信息，请参见`/ api / schemas / user`。

有关上传和检索用户头像的更多信息，请参阅
`/fileResources` 端点。

### 用户帐户邀请 { #webapi_user_invitations } 

 <!--DHIS2-SECTION-ID:webapi_user_invitations-->

The Web API supports inviting people to create user accounts through the
`invite` resource. To create an invitation you should POST a user in XML
or JSON format to the invite resource. A specific username can be forced
by defining the username in the posted entity. By omitting the username,
the person will be able to specify it herself. The system will send out
an invitation through email. This requires that email settings have been
properly configured. The invite resource is useful in order to securely
allow people to create accounts without anyone else knowing the password
or by transferring the password in plain text. The payload to use for
the invite is the same as for creating users. An example payload in JSON
looks like this:

```json
{
  "firstName": "John",
  "surname": "Doe",
  "email": "johndoe@mail.com",
  "userCredentials": {
    "username": "johndoe",
    "userRoles": [{
      "id": "Euq3XfEIEbx"
    }]
  },
  "organisationUnits": [ {
    "id": "ImspTQPwCqd"
  } ],
  "userGroups": [ {
    "id": "vAvEltyXGbD"
  }]
}
```

用户邀请实体可以这样发布：

```bash
curl -d @invite.json "localhost/api/33/users/invite" -u admin:district
  -H "Content-Type:application/json" 
```

要同时发送多个用户的邀请，您必须使用
格式略有不同。对于JSON：

```json
{
  "users": [ {
    "firstName": "John",
    "surname": "Doe",
    "email": "johndoe@mail.com",
    "userCredentials": {
      "username": "johndoe",
      "userRoles": [ {
        "id": "Euq3XfEIEbx"
      } ]
    },
    "organisationUnits": [ {
      "id": "ImspTQPwCqd"
      } ]
    }, {
    "firstName": "Tom",
    "surname": "Johnson",
    "email": "tomj@mail.com",
    "userCredentials": {
      "userRoles": [ {
        "id": "Euq3XfEIEbx"
      } ]
    },
    "organisationUnits": [ {
      "id": "ImspTQPwCqd"
      } ]
    }
  ]
}
```

要创建多个邀请，您可以将有效内容发布到
api /用户/邀请资源，如下所示：

```bash
curl -d @invites.json "localhost/api/33/users/invites" -u admin:district
  -H "Content-Type:application/json"
```

发送用户帐户邀请有某些要求
出去：

  - 电子邮件SMTP服务器必须在服务器上正确配置。

  - 被邀请的用户必须指定了有效的电子邮件。

  - 不得授予要邀请的用户具有严重权限的用户角色
    权限（请参见下文）。

  - 如果指定了用户名，则该名称不能被其他用户使用
    现有用户。

如果没有满足这些要求中的任何一个，邀请资源将返回
带有* 409冲突*状态代码以及描述性消息。

无法授予邀请的关键权限包括：

  - 全部

  - 计划管理

  - 设定系统设定

  - 添加，更新，删除和列出用户角色

  - 添加，更新，删除和查看SQL视图

### 用户复制 { #webapi_user_replication } 

 <!--DHIS2-SECTION-ID:webapi_user_replication-->

要复制用户，您可以使用* replica *资源。复制一个
在调试或重现由用户报告的问题时，用户可能会很有用
特定用户。您需要提供新的用户名和密码
复制的用户，以后将用于认证。注意你
需要ALL权限才能执行此操作。要复制用户，您
可以发布一个JSON有效负载，如下所示：

```json
{
  "username": "replica",
  "password": "Replica.1234"
}
```

该有效负载可以发布到副本资源，您可以在其中提供
要在URL中复制的用户的标识符：

    / api / 33 / users / <uid> /副本

使用curl复制用户的示例如下所示：

```bash
curl -d @replica.json "localhost/api/33/users/N3PZBUlN8vq/replica"
  -H "Content-Type:application/json" -u admin:district
```

## 当前用户信息和关联 { #webapi_current_user_information } 

 <!--DHIS2-SECTION-ID:webapi_current_user_information-->

为了获取有关当前已验证用户的信息，并且
它与其他资源的关联，您可以使用* me *资源
（您也可以通过旧名称* currentUser *来引用它）。目前
与用户相关的资源可为您提供信息，这些信息在以下情况下非常有用
例如建立客户端以进行数据输入和用户管理。这
下面介绍这些资源及其用途。

提供有关您当前登录的用户的基本信息
包括用户名，用户凭据，分配的组织
单位：

    / api / me

提供有关当前未读消息和解释的信息：

    / api / me / dashboard

列出收件箱中的所有消息和解释（包括回复）：

    / api / me / inbox

为了更改密码，此端点可用于验证
新输入的密码。密码验证将基于
系统中配置的PasswordValidationRules。终点支持
POST和密码字符串应在POST正文中发送。

    / api / me / validatePassword

更改密码时，此端点（支持POST）可用于
验证旧密码。密码字符串应在POST正文中发送。

    / api / me / verifyPassword

提供当前用户的完整个人资料信息。这个终点
同时支持* GET *检索配置文件和* POST *更新配置文件（
使用完全相同的格式）：

    / api / me / user-account

返回授予当前用户的权限集：

    / api / me / authorization

返回true或false，指示当前用户是否已经
授予给定的`<auth>`授权：

    / api / me / authorization / <auth>

列出直接分配给用户的所有组织单位：

    / api / me / organisationUnits

提供分配给用户组织单位的所有数据集，以及
他们的直系子女。该端点包含所有必需的信息
根据我们的一个数据集构建表单。如果你想要全部
您分配的组织单位的后代，您可以使用查询
参数* includeDescendants = true *：

    / api / me / dataSets

提供分配给用户组织单位的所有程序，以及
他们的直系子女。该端点包含所有必需的信息
根据我们的一个数据集构建表单。如果你想要全部
您分配的组织单位的后代，您可以使用查询
参数* includeDescendants = true *：

    / api / me / programs

给出与当前用户相关的数据批准级别：

    / api / me / dataApprovalLevels

## 系统设置 { #webapi_system_settings } 

 <!--DHIS2-SECTION-ID:webapi_system_settings-->

您可以通过与
* systemSettings *资源。系统设置是一个简单的键值对，
其中键和值都是纯文本字符串。保存或
更新系统设置，您可以向以下URL发出* POST *请求：

    / api / 33 / systemSettings / my-key？value = my-val

或者，您可以将设置值作为请求正文提交，
内容类型设置为“文本/纯文本”。例如，您可以使用
像这样卷曲：

```bash
curl "play.dhis2.org/demo/api/33/systemSettings/my-key" -d "My long value"
  -H "Content-Type: text/plain" -u admin:district
```

要批量设置系统设置，您可以发送带有
使用POST请求的每个系统设置键值对的属性和值：

```json
{
  "keyApplicationNotification": "Welcome",
  "keyApplicationIntro": "DHIS2",
  "keyApplicationFooter": "Read more at dhis2.org"
}
```

可翻译的设置键的翻译可以通过将locale指定为
可以指定的查询参数和转换值
既可以作为查询参数，也可以与主体有效负载一起使用。查看示例网址：

    / api / 33 / systemSettings / <my-key>？locale = <my-locale>＆value = <my-translated-value>

您应该将My-key替换为真实密钥，将my-val替换为真实密钥
价值。检索给定键的值（JSON或纯文本）
您可以对以下网址发出* GET *请求：

    / api / 33 / systemSettings / my-key

或者，您可以将键指定为查询参数：

    / api / 33 / systemSettings？key =我的密钥

您可以通过重复键将特定的系统设置检索为JSON
查询参数：

```bash
curl "play.dhis2.org/demo/api/33/systemSettings?key=keyApplicationNotification&key=keyApplicationIntro"
  -u admin:district
```

您可以使用GET请求检索所有系统设置：

    / api / 33 / systemSettings

要检索给定可翻译键的特定翻译，您可以指定
语言环境作为查询参数：

    / api / 33 / systemSettings / <my-key>？locale = <my-locale>

如果存在，则返回给定语言环境的翻译。否则，默认
返回值。如果未为可翻译键指定语言环境，则用户默认
UI语言环境用于获取正确的翻译。如果给定的翻译不是
再次出现时，将返回默认值。

可翻译键的优先级如下：

    指定的区域设置>用户的默认UI区域设置> defaut值

要删除系统设置，您可以对URL进行* DELETE *请求
与上面用于检索的类似。如果翻译键是
使用时，所有当前的翻译也将被删除。

要仅删除可翻译键的特定翻译，即相同的URL
至于添加翻译，则应使用空值
假如：

    / api / 33 / systemSettings / <my-key>？locale = <my-locale>＆value =

可用的系统设置在下面列出。

<table>
<caption>System settings</caption>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>Key</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>keyMessageEmailNotification</td>
<td>Send email notification for messages</td>
</tr>
<tr class="even">
<td>keyMessageSmsNotification</td>
<td>Send sms notification for messages</td>
</tr>
<tr class="odd">
<td>keyUiLocale</td>
<td>Locale for the user interface</td>
</tr>
<tr class="even">
<td>keyDbLocale</td>
<td>Locale for the database</td>
</tr>
<tr class="odd">
<td>keyAnalysisDisplayProperty</td>
<td>The property to display in analysis. Default: &quot;name&quot;</td>
</tr>
<tr class="even">
<td>keyCurrentDomainType</td>
<td>Not yet in use</td>
</tr>
<tr class="odd">
<td>keyAutoSaveCaseEntryForm</td>
<td>Autosave case entry forms</td>
</tr>
<tr class="even">
<td>keyAutoSaveDataEntryForm</td>
<td>Autosave data entry forms</td>
</tr>
<tr class="odd">
<td>keyTrackerDashboardLayout</td>
<td>Used by tracker capture</td>
</tr>
<tr class="even">
<td>keyAutoSavetTrackedEntityForm</td>
<td>Autosave tracked entity forms</td>
</tr>
<tr class="odd">
<td>applicationTitle</td>
<td>The application title. Default: &quot;DHIS2&quot;</td>
</tr>
<tr class="even">
<td>keyApplicationIntro</td>
<td>The application introduction</td>
</tr>
<tr class="odd">
<td>keyApplicationNotification</td>
<td>Application notification</td>
</tr>
<tr class="even">
<td>keyApplicationFooter</td>
<td>Application left footer</td>
</tr>
<tr class="odd">
<td>keyApplicationRightFooter</td>
<td>Application right footer</td>
</tr>
<tr class="even">
<td>keyFlag</td>
<td>Application flag</td>
</tr>
<tr class="odd">
<td>keyFlagImage</td>
<td>Flag used in dashboard menu</td>
</tr>
<tr class="even">
<td>startModule</td>
<td>The startpage of the application. Default: &quot;dhis-web-dashboard-integration&quot;</td>
</tr>
<tr class="odd">
<td>factorDeviation</td>
<td>Data analysis standard deviation factor. Default: &quot;2d&quot;</td>
</tr>
<tr class="even">
<td>keyEmailHostName</td>
<td>Email server hostname</td>
</tr>
<tr class="odd">
<td>keyEmailPort</td>
<td>Email server port</td>
</tr>
<tr class="even">
<td>keyEmailTls</td>
<td>Use TLS. Default: &quot;true&quot;</td>
</tr>
<tr class="odd">
<td>keyEmailSender</td>
<td>Email sender</td>
</tr>
<tr class="even">
<td>keyEmailUsername</td>
<td>Email server username</td>
</tr>
<tr class="odd">
<td>keyEmailPassword</td>
<td>Email server password</td>
</tr>
<tr class="even">
<td>keyInstanceBaseUrl</td>
<td>The base url of the application instance</td>
</tr>
<tr class="odd">
<td>keySmsConfig</td>
<td>SMS configuration</td>
</tr>
<tr class="even">
<td>keyCacheStrategy</td>
<td>Cache strategy. Default: &quot;CACHE_6AM_TOMORROW&quot;</td>
</tr>
<tr class="odd">
<td>keyCacheability</td>
<td>PUBLIC or PRIVATE. Determines if proxy servers are allowed to cache data or not.</td>
</tr>
<tr class="even">
<td>phoneNumberAreaCode</td>
<td>Phonenumber area code</td>
</tr>
<tr class="odd">
<td>multiOrganisationUnitForms</td>
<td>Enable multi-organisation unit forms. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keyAccountRecovery</td>
<td>Enable user account recovery. Default: &quot;false&quot;</td>
</tr>
<tr class="odd">
<td>googleAnalyticsUA</td>
<td>Google Analytic UA key for tracking site-usage</td>
</tr>
<tr class="even">
<td>credentialsExpires</td>
<td>Require user account password change. Default: &quot;0&quot; (Never)</td>
</tr>
<tr class="odd">
<td>keySelfRegistrationNoRecaptcha</td>
<td>Do not require recaptcha for self registration. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>recaptchaSecret</td>
<td>Google API recaptcha secret. Default: dhis2 play instance API secret, but this will only works on you local instance and not in production.</td>
</tr>
<tr class="odd">
<td>recaptchaSite</td>
<td>Google API recaptcha site. Default: dhis2 play instance API site, but this will only works on you local instance and not in production.</td>
</tr>
<tr class="even">
<td>keyOpenIdProvider</td>
<td>OpenID provider</td>
</tr>
<tr class="odd">
<td>keyCanGrantOwnUserAuthorityGroups</td>
<td>Allow users to grant own user roles. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keyRespectMetaDataStartEndDatesInAnalyticsTableExport</td>
<td>When &quot;true&quot;, analytics will skip data not within category option's start and end dates. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keySkipZeroValuesInAnalyticsTableExport</td>
<td>When &quot;true&quot;, analytics will skip zero data values for sum aggregation type data elements, ignoring the "zeroIsSignificant" setting for data elements. Default: &quot;false&quot;</td>
</tr>
<tr class="odd">
<td>keyCacheAnalyticsDataYearThreshold</td>
<td>Analytics data older than this value (in years) will always be cached. &quot;0&quot; disabled this setting. Default: 0</td>
</tr>
<tr class="even">
<td>analyticsFinancialYearStart</td>
<td>Set financial year start. Default: October</td>
</tr>
<tr class="odd">
<td>keyIgnoreAnalyticsApprovalYearThreshold</td>
<td>&quot;0&quot; check approval for all data. &quot;-1&quot; disable approval checking. &quot;1&quot; or higher checks approval for all data that is newer than &quot;1&quot; year.</td>
</tr>
<tr class="even">
<td>keyAnalyticsMaxLimit</td>
<td>Maximum number of analytics recors. Default: &quot;50000&quot;</td>
</tr>
<tr class="odd">
<td>keyAnalyticsMaintenanceMode</td>
<td>Put analytics in maintenance mode. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keyDatabaseServerCpus</td>
<td>Number of database server CPUs. Default: &quot;0&quot; (Automatic)</td>
</tr>
<tr class="odd">
<td>helpPageLink</td>
<td>Link to help page.</td>
</tr>
<tr class="even">
<td>keyAcceptanceRequiredForApproval</td>
<td>Acceptance required before approval. Default: &quot;false&quot;</td>
</tr>
<tr class="odd">
<td>keySystemNotificationsEmail</td>
<td>Where to email system notifications</td>
</tr>
<tr class="even">
<td>keyAnalysisRelativePeriod</td>
<td>Default relative period for analysis. Default: &quot;LAST_12_MONTHS&quot;</td>
</tr>
<tr class="odd">
<td>keyRequireAddToView</td>
<td>Require authority to add to view object lists. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keyAllowObjectAssignment</td>
<td>Allow assigning object to related objects during add or update. Default: &quot;false&quot;</td>
</tr>
<tr class="odd">
<td>keyUseCustomLogoFront</td>
<td>Enables the usage of a custom logo on the front page. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keyUseCustomLogoBanner</td>
<td>Enables the usage of a custom banner on the website. Default: &quot;false&quot;</td>
</tr>
<tr class="odd">
<td>keyDataImportStrictPeriods</td>
<td>Require periods to match period type of data set. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keyDataImportStrictDataElements</td>
<td>Require data elements to be part of data set. Default: &quot;false&quot;</td>
</tr>
<tr class="odd">
<td>keyDataImportStrictCategoryOptionCombos</td>
<td>Require category option combos to match category combo of data element. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keyDataImportStrictOrganisationUnits</td>
<td>Require organisation units to match assignment of data set. Default: &quot;false&quot;</td>
</tr>
<tr class="odd">
<td>keyDataImportStrictAttributeOptionsCombos</td>
<td>Require attribute option combis to match category combo of data set. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keyDataImportRequireCategoryOptionCombo</td>
<td>Require category option combo to be specified. Default: &quot;false&quot;</td>
</tr>
<tr class="odd">
<td>keyDataImportRequireAttributeOptionCombo</td>
<td>Require attribute option combo to be specified. Default: &quot;false&quot;</td>
</tr>
<tr class="even">
<td>keyCustomJs</td>
<td>Custom JavaScript to be used on the website</td>
</tr>
<tr class="odd">
<td>keyCustomCss</td>
<td>Custom CSS to be used on the website</td>
</tr>
<tr class="even">
<td>keyCalendar</td>
<td>The calendar type. Default: &quot;iso8601&quot;.</td>
</tr>
<tr class="odd">
<td>keyDateFormat</td>
<td>The format in which dates should be displayed. Default: &quot;yyyy-MM-dd&quot;.</td>
</tr>
<tr class="even">
<td>appStoreUrl</td>
<td>The url used to point to the app store. Default: &quot;https://www.dhis2.org/appstore&quot;</td>
</tr>
<tr class="odd">
<td>keyStyle</td>
<td>The style used on the DHIS2 webpages. Default: &quot;light_blue/light_blue.css&quot;.</td>
</tr>
<tr class="even">
<td>keyRemoteInstanceUrl</td>
<td>Url used to connect to remote instance</td>
</tr>
<tr class="odd">
<td>keyRemoteInstanceUsername</td>
<td>Username used to connect to remote DHIS2 instance</td>
</tr>
<tr class="even">
<td>keyRemoteInstancePassword</td>
<td>Password used to connect to remote DHIS2 instance</td>
</tr>
<tr class="odd">
<td>keyMapzenSearchApiKey</td>
<td>Key for the Mapzen geo search API</td>
</tr>
<tr class="even">
<td>keyFileResourceRetentionStrategy</td>
<td>Determines how long file resources associated with deleted or updated values are kept. NONE, THREE_MONTHS, ONE_YEAR, or FOREVER.</td>
</tr>
</tbody>
</table>

## 用户设置 { #webapi_user_settings } 

 <!--DHIS2-SECTION-ID:webapi_user_settings-->

您可以通过与* userSettings *进行交互来操作用户设置
资源。用户设置是一个简单的键值对，其中两个键
和值是纯文本字符串。用户设置将链接到
经过Web API请求认证的用户。返回列表
在所有用户设置中，您可以向以下URL发送* GET *请求：

    / api / 33 / userSettings

用户未设置的用户设置将恢复为等效设置
系统设置。要仅返回用户明确设置的值，
您可以将？useFallback = false附加到上述URL，如下所示：

    / api / 33 / userSettings？useFallback = false

要保存或更新当前通过身份验证的用户的设置，您可以
向以下网址发出* POST *请求：

    / api / 33 / userSettings / my-key？value = my-val

您可以使用以下命令指定要显式保存设置的用户
这个语法：

    / api / 33 / userSettings / my-key？user = username＆value = my-val

或者，您可以将设置值作为请求正文提交，
内容类型设置为“文本/纯文本”。例如，您可以使用
像这样卷曲：

```bash
curl "https://play.dhis2.org/demo/api/33/userSettings/my-key" -d "My long value"
  -H "Content-Type: text/plain" -u admin:district
```

例如，要将当前用户的UI语言环境设置为法语，您可以
可以使用以下命令。

```bash
curl "https://play.dhis2.org/demo/api/33/userSettings/keyUiLocale?value=fr" 
  -X POST -u admin:district
```

您应该将My-key替换为真实密钥，将my-val替换为真实密钥
价值。要检索纯文本形式的给定键的值，您可以
对以下URL的* GET *请求：

    / api / 33 / userSettings / my-key

要删除用户设置，您可以向URL发出* DELETE *请求
与上面用于检索的类似。

可用的系统设置在下面列出。

 <table style="width:100%;">
 <caption>用户设置</caption>
 <colgroup>
 <col style="width: 21%" />
 <col style="width: 28%" />
 <col style="width: 49%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>键</th>
 <th>选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> keyStyle </td>
 <td> light_blue / light_blue.css | green / green.css |越南/vietnam.css </td>
 <td>用户界面样式表。 </td>
 </tr>
 <tr class="even">
 <td> keyMessageEmailNotification </td>
 否| <td>假|真</td>
 <td>是否发送电子邮件通知。 </td>
 </tr>
 <tr class="odd">
 <td> keyMessageSmsNotification </td>
 否| <td>假|真</td>
 <td>是否发送短信通知。 </td>
 </tr>
 <tr class="even">
 <td> keyUiLocale </td>
 <td>语言环境值</td>
 <td>用户界面区域设置。 </td>
 </tr>
 <tr class="odd">
 <td> keyDbLocale </td>
 <td>语言环境值</td>
 <td>数据库内容区域设置。 </td>
 </tr>
 <tr class="even">
 <td>键AnalysisDisplayProperty </td>
 名称| <td> shortName </td>
 <td>为分析应用程序中的元数据显示的属性。 </td>
 </tr>
 <tr class="odd">
 <td> keyCurrentDomainType </td>
 全部| <td> |聚合|追踪器</td>
 <td>要显示在列表中的数据元素域类型。 </td>
 </tr>
 <tr class="even">
 <td> keyAutoSaveCaseEntryForm </td>
 否| <td>假|真</td>
 <td>定期保存案例输入表格。 </td>
 </tr>
 <tr class="odd">
 <td> keyAutoSaveTrackedEntityForm </td>
 否| <td>假|真</td>
 <td>定期保存人员注册表格。 </td>
 </tr>
 <tr class="even">
 <td> keyAutoSaveDataEntryForm </td>
 否| <td>假|真</td>
 <td>定期保存汇总数据输入表单。 </td>
 </tr>
 <tr class="odd">
 <td> keyTrackerDashboardLayout </td>
 否| <td>假|真</td>
 <td>跟踪器仪表板布局。 </td>
 </tr>
 </tbody>
 </table>

## 组织单位 { #webapi_organisation_units } 

 <!--DHIS2-SECTION-ID:webapi_organisation_units-->

* organisationUnits *资源遵循以下标准约定：
DHIS2中的其他元数据资源。该资源支持一些
其他查询参数。

### 获取组织单位列表 { #webapi_list_of_organisation_units } 

 <!--DHIS2-SECTION-ID:webapi_list_of_organisation_units-->

要获取组织单位的列表，可以使用以下资源。

    / api / 33 / organisationUnits

 <table>
 <caption>组织单位查询参数</caption>
 <colgroup>
 <col style="width: 17%" />
 <col style="width: 17%" />
 <col style="width: 65%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>用户仅</td>
 否| <td>假|真</td>
 <td>仅与当前用户关联的数据捕获组织单位。 </td>
 </tr>
 <tr class="even">
 <td> userDataViewOnly </td>
 否| <td>假|真</td>
 <td>仅与当前用户关联的数据视图组织单位。 </td>
 </tr>
 <tr class="odd">
 <td> userDataViewFallback </td>
 否| <td>假|真</td>
 <td>仅与当前用户相关联的数据视图组织单位，并回退到数据捕获组织单位。 </td>
 </tr>
 <tr class="even">
 查询<td> </td>
 <td>字符串</td>
 <td>查询名称，代码和ID属性。 </td>
 </tr>
 <tr class="odd">
 <td>级别</td>
 <td>整数</td>
 <td>层次结构中给定级别的组织单位。 </td>
 </tr>
 <tr class="even">
 <td> maxLevel </td>
 <td>整数</td>
 <td>给定的最高级别或更高层次结构中的级别的组织单位。 </td>
 </tr>
 <tr class="odd">
 UserHierarchy中的<td> </td>
 否| <td>假|真</td>
 <td>将搜索和检索限制为用户数据捕获范围内的组织单位。 </td>
 </tr>
 <tr class="even">
 UserSearchHierarchy中的<td> </td>
 否| <td>假|真</td>
 <td>将搜索和检索限制为当前用户搜索范围内的组织单位。注意：如果为true，则“ withinUserHierarchy”具有更高的优先级。 </td>
 </tr>
 <tr class="odd">
 <td> memberCollection </td>
 <td>字符串</td>
 <td>要显示集合中的成员数，请参阅与组织单位关联的集合的名称。 </td>
 </tr>
 <tr class="even">
 <td> memberObject </td>
 <td> UID </td>
 <td>用于显示集合中成员的数量，是指集合中对象成员的标识符。 </td>
 </tr>
 </tbody>
 </table>

### 获取具有关系的组织单位 { #webapi_organisation_units_with_relations } 

 <!--DHIS2-SECTION-ID:webapi_organisation_units_with_relations-->

要获得具有相关组织单位的组织单位，可以使用
以下资源。

    / api / 33 / organisationUnits / {id}

 <table>
 <caption>组织单位参数</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 20%" />
 <col style="width: 58%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> includeChild </td>
 否| <td>假|真</td>
 <td>包括指定组织单位的直接子级，即子层次结构中下方直接级别的单位。 </td>
 </tr>
 <tr class="even">
 <td>包括后代</td>
 否| <td>假|真</td>
 <td>包括指定组织单位的所有子级，即子层次结构中的所有单位。 </td>
 </tr>
 <tr class="odd">
 <td>包括祖先</td>
 否| <td>假|真</td>
 <td>包括指定组织单位的所有父母。 </td>
 </tr>
 <tr class="even">
 <td>级别</td>
 <td>整数</td>
 <td>在子层次结构的给定级别（相对于下面的直接级别为1的组织单位）包括指定组织单位的子级。 </td>
 </tr>
 </tbody>
 </table>

## 数据集 { #webapi_data_sets } 

 <!--DHIS2-SECTION-ID:webapi_data_sets-->

* dataSets *资源遵循其他标准约定
DHIS2中的元数据资源。该资源支持其他一些功能
查询参数。

    / api / 33 / dataSets

要检索数据集的版本，您可以发出GET请求：

    GET / api / 33 / dataSets / <uid> / version

要更改（增加一个）数据集的版本，可以发出POST
要求：

    POST / api / 33 / dataSets / <uid> / version

### 数据集通知模板 { #webapi_dataset_notifications } 

 <!--DHIS2-SECTION-ID:webapi_dataset_notifications-->

*数据集通知模板*资源遵循标准
DHIS2 中其他元数据资源的约定。

    GET / api / 33 / dataSetNotficationTemplates

要检索数据集通知模板，您可以发出GET请求：

    GET / api / 33 / dataSetNotficationTemplates / <uid>

要添加数据集通知模板，您可以发出POST请求：

    POST / api / 33 / dataSetNotficationTemplates

要删除数据集通知模板，您可以发出DELETE请求：

    删除/ api / 33 / dataSetNotficationTemplates / <uid>

JSON有效负载示例如下：

```json
{
  "name": "dataSetNotificationTemplate1",
  "notificationTrigger": "COMPLETION",
  "relativeScheduledDays": 0,
  "notificationRecipient": "ORGANISATION_UNIT_CONTACT",
  "dataSets": [{
    "id": "eZDhcZi6FLP"
  }],
  "deliveryChannels": ["SMS"],
  "subjectTemplate": "V{data_name}",
  "messageTemplate": "V{data_name}V{complete_registration_period}",
  "sendStrategy": "SINGLE_NOTIFICATION"
}

```

## 填充的组织单位级别 { #webapi_filled_organisation_unit_levels } 

 <!--DHIS2-SECTION-ID:webapi_filled_organisation_unit_levels-->

* filledOrganisationUnitLevels *资源提供了以下内容的有序列表
组织单位级别，将生成的级别注入到
列表以填充不存在其持久化级别的职位。

    GET / api / 33 / filledOrganisationUnitLevels

要设置组织单位级别，您可以发出带有以下内容的POST请求：
JSON有效负载如下所示。

```json
{
  "organisationUnitLevels": [{
    "name": "National",
    "level": 1,
    "offlineLevels": 3
  }, {
    "name": "District",
    "level": 2
  }, {
    "name": "Chiefdom",
    "level": 3
  }, {
    "name": "Facility",
    "level": 4
  }]
}
```

要使用curl进行功能测试，您可以发出以下命令。

```bash
curl "http://localhost/api/33/filledOrganisationUnitLevels" -H "Content-Type:application/json"
  -d @levels.json -u admin:district
```

## 静态内容 { #webapi_static_content } 

 <!--DHIS2-SECTION-ID:webapi_static_content-->

* staticContent *资源允许您上传和检索自定义
DHIS2中使用的徽标。该资源使用户可以使用
关联密钥，以后可以使用该密钥进行检索。只有PNG
文件受支持，只能上传到`logo_banner`和
`logo_front`键。

    / api / 33 / staticContent

 <table>
 <caption>静态内容密钥</caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>键</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> logo_banner </td>
 左侧应用程序顶部菜单中的<td>徽标。 </td>
 </tr>
 <tr class="even">
 <td> logo_front </td>
 登录表单上方登录页面上的<td>徽标。 </td>
 </tr>
 </tbody>
 </table>

要上传文件，请将带有* POST *请求的文件发送至：

    POST / api / 33 / staticContent / <key>

请求将logo.png上传到`logo_front`键的示例：

```bash
curl -F "file=@logo.png;type=image/png" "https://play.dhis2.org/demo/api/33/staticContent/logo_front"
  -X POST -H "Content-Type: multipart/form-data" -u admin:district
```

使用相同的密钥上传多个文件将覆盖现有文件
文件。这样，检索任何给定密钥的文件只会返回
最新文件上传。

要检索徽标，可以* GET *以下内容：

    GET / api / 33 / staticContent / <key>

Example of requests to retrieve the file stored for `logo_front`:

* 在HTTP标头中添加“ Accept：text / html”。* __在这种情况下，如果未定义任何内容，则端点将返回默认图像。找到自定义或默认图像后将返回图像流。

```bash
curl "https://play.dhis2.org/demo/api/33/staticContent/logo_front" 
  -H "Accept: text/html" -L -u admin:district
```

* 在HTTP标头中添加“ Accept：application / json”。* __设置此参数后，如果找不到自定义徽标，则端点将永远不会返回默认图像。而是，将返回一条错误消息。找到自定义图像后，此端点将返回一个JSON响应，其中包含相应图像的路径/ URL。

```bash
curl "https://play.dhis2.org/demo/api/33/staticContent/logo_front" 
  -H "Accept: application/json" -L -u admin:district
```

成功和错误消息将如下所示：

```json
{
  "images": {
    "png": "http://localhost:8080/dhis/api/staticContent/logo_front"
  }
}
```

```json
{
  "httpStatus": "Not Found",
  "httpStatusCode": 404,
  "status": "ERROR",
  "message": "No custom file found."
}
```

要使用自定义徽标，您需要启用相应的系统
通过将其设置为* true *进行设置。如果相应的设置为假，
将使用默认徽标。

## 组态 { #webapi_configuration } 

 <!--DHIS2-SECTION-ID:webapi_configuration-->

要访问配置，您可以与* configuration *进行交互
资源。您可以通过* Accept *标头获取XML和JSON响应
或使用.json或.xml扩展名。您可以* GET *所有属性
配置的来源：

    / api / 33 /配置

您可以将* GET *和* POST *请求发送到以下特定
资源：

    GET / api / 33 / configuration / systemId

    GET POST DELETE / api / 33 / configuration / feedback收件人

    删除/ api / 33 / configuration / offlineOrganisationUnitLevel

    GET POST / api / 33 / configuration / infrastructuralDataElements

    GET POST / api / 33 / configuration / infrastructuralIndicators

    GET POST / api / 33 / configuration / infrastructuralPeriodType

    GET POST DELETE / api / 33 / configuration / selfRegistrationRole

    删除后/ api / 33 / configuration / selfRegistrationOrgUnit

对于CORS白名单配置，您可以发出带有以下内容的POST请求：
URL数组，使用“ application / json”作为有效负载列入白名单
内容类型，例如：

```json
["www.google.com", "www.dhis2.org", "www.who.int"]
```

    GET POST / api / 33 / configuration / corsWhitelist

对于POST请求，配置值应作为请求发送
有效负载为文本。下表显示了适当的配置
每个属性的值。

 <table>
 <caption> 配置值 </caption>
 <colgroup>
 <col style="width: 30%" />
 <col style="width: 69%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 配置属性 </th>
 <th> 值 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 反馈收件人 </td>
 <td> 用户组 ID </td>
 </tr>
 <tr class="even">
 <td> offlineOrganisationUnitLevel </td>
 <td> 组织单位级别 ID </td>
 </tr>
 <tr class="odd">
 <td> 基础设施数据元素 </td>
 <td> 数据元素组 ID </td>
 </tr>
 <tr class="even">
 <td> 基础设施指标 </td>
 <td> 指标组 ID </td>
 </tr>
 <tr class="odd">
 <td> infrastructuralPeriodType </td>
 <td> 期间类型名称（例如 &quot;Monthly&quot;） </td>
 </tr>
 <tr class="even">
 <td> selfRegistrationRole </td>
 <td> 用户角色 ID </td>
 </tr>
 <tr class="odd">
 <td> selfRegistrationOrgUnit </td>
 <td> 组织单位 ID </td>
 </tr>
 <tr class="even">
 <td> smtp密码 </td>
 <td> SMTP 电子邮件服务器密码 </td>
 </tr>
 <tr class="odd">
 <td> remoteServerUrl </td>
 <td> 远程服务器的 URL </td>
 </tr>
 <tr class="even">
 <td> 远程服务器用户名 </td>
 <td> 远程服务器认证的用户名 </td>
 </tr>
 <tr class="odd">
 <td> 远程服务器密码 </td>
 <td> 远程服务器认证密码 </td>
 </tr>
 <tr class="even">
 <td> corsWhitelist </td>
 <td> URL 的 JSON 列表 </td>
 </tr>
 </tbody>
 </table>

例如，要设置反馈收件人用户组，您可以调用
以下curl命令：

```bash
curl "localhost/api/33/configuration/feedbackRecipients" -d "wl5cDMuUhmF"
  -H "Content-Type:text/plain"-u admin:district
```

## 只读配置服务 { #webapi_readonly_configuration_interface } 

 <!--DHIS2-SECTION-ID:webapi_readonly_configuration_interface-->

要访问配置，您现在可以使用只读服务。这项服务
将提供对* UserSettings，SystemSettings和DHIS2的只读访问权限
服务器配置*您可以通过以下方式获取XML和JSON响应：
*接受*标题。您可以从以下位置*获取*所有设置：

    / api / 33 / configuration / settings

您可以根据设置类型获得过滤设置：

    GET / api / 33 / configuration / settings / filter？type = USER_SETTING

    GET / api / 33 / configuration / settings / filter？type = CONFIGURATION

可以是一种以上的类型
    假如

    GET / api / 33 / configuration / settings / filter？type = USER_SETTING＆type = SYSTEM_SETTING

<table>
<caption>SettingType values</caption>
<colgroup>
<col style="width: 30%" />
<col style="width: 69%" />
</colgroup>
<thead>
<tr class="header">
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>USER_SETTING</td>
<td>To get user settings</td>
</tr>
<tr class="even">
<td>SYSTEM_SETTING</td>
<td>To get system settings</td>
</tr>
<tr class="odd">
<td>CONFIGURATION</td>
<td>To get DHIS server settings</td>
</tr>
</tbody>
</table>

> **注意**
>
>将在输出中提供机密字段，但没有值。

## 国际化 { #webapi_i18n } 

 <!--DHIS2-SECTION-ID:webapi_i18n-->

为了检索翻译后的字符串的键值对，您可以使用
* i18n *资源。

    / api / 33 / i18n

端点位于* / api / i18n *，请求格式很简单
键值对数组：

```json
[
  "access_denied",
  "uploading_data_notification"
]
```

该请求必须为* POST *类型，并使用* application / json *作为
内容类型。使用curl的示例，假设已保存请求数据
作为`keys.json`文件：

```bash
curl -d @keys.json "play.dhis2.org/demo/api/33/i18n" -X POST
  -H "Content-Type: application/json" -u admin:district
```

结果将如下所示：

```json
{
  "access_denied":"Access denied",
  "uploading_data_notification":"Uploading locally stored data to the server"
}
```

## SVG转换 { #webapi_svg_conversion } 

 <!--DHIS2-SECTION-ID:webapi_svg_conversion-->

Web API提供了可用于转换SVG内容的资源
转换成更广泛使用的格式，例如PNG和PDF。理想情况下
转换应该发生在客户端，但不是所有客户端
技术能够执行此任务。目前为PNG和PDF
支持输出格式。 SVG内容本身应与
* svg *查询参数和可选查询参数* filename *可以
用于指定响应附件文件的文件名。笔记
文件扩展名应该省略。对于PNG，您可以发送* POST *
请求以下具有Content-type的URL
`application / x-www-form-urlencoded`，与常规HTML表单相同
提交。

    api / svg.png

对于 PDF，您可以将 *POST* 请求发送到以下 URL
内容类型`application/x-www-form-urlencoded`。

    api / svg.pdf

 <table>
 <caption> 查询参数 </caption>
 <colgroup>
 <col style="width: 21%" />
 <col style="width: 11%" />
 <col style="width: 67%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 需要 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> svg </td>
 <td> 是 </td>
 <td> SVG 内容 </td>
 </tr>
 <tr class="even">
 <td> 文件名 </td>
 <td> 否 </td>
 <td> 返回的附件的文件名，没有文件扩展名 </td>
 </tr>
 </tbody>
 </table>

## 跟踪器Web API { #webapi_tracker_api } 

 <!--DHIS2-SECTION-ID:webapi_tracker_api-->

Tracker Web API consists of 3 endpoints that have full CRUD (create,
read, update, delete) support. The 3 endpoints are
`/api/trackedEntityInstances`, `/api/enrollments` and
`/api/events` and they are responsible for tracked entity instance,
enrollment and event items.

### 跟踪实体实例管理 { #webapi_tracked_entity_instance_management } 

 <!--DHIS2-SECTION-ID:webapi_tracked_entity_instance_management-->

跟踪的实体实例在API中具有完整的CRUD支持。一起
使用API进行注册，需要使用以下大部分操作
支持跟踪的实体实例和程序。

    / api / 33 / trackedEntityInstances

#### 创建一个新的跟踪实体实例 { #webapi_creating_tei } 

 <!--DHIS2-SECTION-ID:webapi_creating_tei-->

要在系统中创建新人员，您将使用
* trackedEntityInstances *资源。模板有效负载如下所示：

```json
{
  "trackedEntity": "tracked-entity-id",
  "orgUnit": "org-unit-id",
  "geometry": "<Geo JSON>",
  "attributes": [{
    "attribute": "attribute-id",
    "value": "attribute-value"
  }]
}
```

字段“ geometry”接受一个GeoJson对象，其中
GeoJson必须匹配TrackedEntityType的featureType
定义。一个示例GeoJson对象如下所示：

```json
{
  "type": "Point",
  "coordinates": [1, 1]
}
```

“坐标”字段在2.29中引入，并接受一个坐标
或多边形作为值。

要获取 `relationship` 和 `attributes` 的 ID，可以查看相应的资源 `relationshipTypes` 和 `trackedEntityAttributes` 。
关系类型 "和 "跟踪实体属性 "资源。
要创建跟踪实体实例，必须使用 HTTP *POST* 方法。 
您可以通过以下 URL 发送有效载荷：

    / api / trackedEntityInstances

例如，让我们创建一个人跟踪实体的新实例，然后
指定其名字和姓氏属性：

```json
{
  "trackedEntity": "nEenWmSyUEp",
  "orgUnit": "DiszpKrYNg8",
  "attributes": [
    {
      "attribute": "w75KJ2mc4zz",
      "value": "Joe"
    },
    {
      "attribute": "zDhUuAYrxNC",
      "value": "Smith"
    }
  ]
}
```

要将其推送到服务器，您可以使用cURL命令，如下所示：

```bash
curl -d @tei.json "https://play.dhis2.org/demo/api/trackedEntityInstances" -X POST
  -H "Content-Type: application/json" -u admin:district
```

要在一个请求中创建多个实例，您可以将有效载荷包装在
像这样的外部数组，并将其POST到与上面相同的资源：[]（）

```json
{
  "trackedEntityInstances": [
    {
      "trackedEntity": "nEenWmSyUEp",
      "orgUnit": "DiszpKrYNg8",
      "attributes": [
        {
          "attribute": "w75KJ2mc4zz",
          "value": "Joe"
        },
        {
          "attribute": "zDhUuAYrxNC",
          "value": "Smith"
        }
      ]
    },
    {
      "trackedEntity": "nEenWmSyUEp",
      "orgUnit": "DiszpKrYNg8",
      "attributes": [
        {
          "attribute": "w75KJ2mc4zz",
          "value": "Jennifer"
        },
        {
          "attribute": "zDhUuAYrxNC",
          "value": "Johnson"
        }
      ]
    }
  ]
}
```

系统不允许创建跟踪实体实例
（以及注册和活动）以及已用于
系统。这意味着UID无法重复使用。

#### 更新跟踪的实体实例 { #webapi_updating_tei } 

 <!--DHIS2-SECTION-ID:webapi_updating_tei-->

为了更新跟踪的实体实例，有效载荷等于
上一节。不同之处在于您必须使用HTTP * PUT *
发送有效负载时请求的方法。您还需要
将人员标识符附加到以下位置的* trackedEntityInstances *资源中
像这样的URL，`<tracked-entity-instance-identifier>`应该在
被跟踪实体实例的标识符替换：

    / api / trackedEntityInstances / <tracked-entity-instance-id>

有效载荷必须包含所有，甚至未修改的属性和
关系。之前和之前存在的属性或关系
不再存在于当前有效载荷中，将从中删除
系统。这意味着如果属性/关系在
当前有效负载，所有现有的属性/关系都将被删除
从系统。从 2.31 开始，可以忽略空
当前有效负载中的属性/关系。一个请求参数
`ignoreEmptyCollection` 设置为 `true` 可以在你不这样做的情况下使用
希望发送任何属性/关系，也不想要它们
要从系统中删除。

不允许更新已删除的跟踪实体实例。
另外，不允许通过以下方式将跟踪的实体实例标记为已删除
更新请求。相同的规则适用于报名和活动。

#### 删除跟踪的实体实例 { #webapi_deleting_tei } 

 <!--DHIS2-SECTION-ID:webapi_deleting_tei-->

为了删除跟踪的实体实例，请对URL进行请求
使用* DELETE *标识跟踪的实体实例
方法。该URL等于以上用于更新的URL。

#### 创建并注册跟踪的实体实例 { #webapi_create_enroll_tei } 

 <!--DHIS2-SECTION-ID:webapi_create_enroll_tei-->

也可以创建（和更新）跟踪的实体
实例，并同时注册一个程序。

```json
{
  "trackedEntity": "tracked-entity-id",
  "orgUnit": "org-unit-id",
  "attributes": [{
    "attribute": "attribute-id",
    "value": "attribute-value"
  }],
  "enrollments": [{
    "orgUnit": "org-unit-id",
    "program": "program-id",
    "enrollmentDate": "2013-09-17",
    "incidentDate": "2013-09-17"
   }, {
    "orgUnit": "org-unit-id",
    "program": "program-id",
    "enrollmentDate": "2013-09-17",
    "incidentDate": "2013-09-17"
   }]
}
```

您将像通常在创建或发送时将其发送到服务器一样
更新新的跟踪实体实例。

```bash
curl -X POST -d @tei.json -H "Content-Type: application/json"
  -u user:pass "http://server/api/33/trackedEntityInstances"
```

#### 有效负载的完整示例包括：跟踪的实体实例，注册和事件 { #webapi_create_enroll_tei_create_event } 

 <!--DHIS2-SECTION-ID:webapi_create_enroll_tei_create_event-->

也可以在以下位置创建（和更新）跟踪的实体实例
同时注册一个程序并创建一个事件。

```json
{
  "trackedEntityType": "nEenWmSyUEp",
  "orgUnit": "DiszpKrYNg8",
  "attributes": [
    {
      "attribute": "w75KJ2mc4zz",
      "value": "Joe"
    },
    {
      "attribute": "zDhUuAYrxNC",
      "value": "Rufus"
    },
    {
     "attribute":"cejWyOfXge6",
     "value":"Male"
    }
  ],
  "enrollments":[
    {
      "orgUnit":"DiszpKrYNg8",
      "program":"ur1Edk5Oe2n",
      "enrollmentDate":"2017-09-15",
      "incidentDate":"2017-09-15",
      "events":[
        {
          "program":"ur1Edk5Oe2n",
          "orgUnit":"DiszpKrYNg8",
          "eventDate":"2017-10-17",
          "status":"COMPLETED",
          "storedBy":"admin",
          "programStage":"EPEcjy3FWmI",
          "coordinate": {
            "latitude":"59.8",
            "longitude":"10.9"
          },
          "dataValues": [
            {
              "dataElement":"qrur9Dvnyt5",
              "value":"22"
            },
            {
              "dataElement":"oZg33kd9taw",
              "value":"Male"
            }
         ]
      },
      {
         "program":"ur1Edk5Oe2n",
         "orgUnit":"DiszpKrYNg8",
         "eventDate":"2017-10-17",
         "status":"COMPLETED",
         "storedBy":"admin",
         "programStage":"EPEcjy3FWmI",
         "coordinate": {
           "latitude":"59.8",
           "longitude":"10.9"
         },
         "dataValues":[
           {
             "dataElement":"qrur9Dvnyt5",
             "value":"26"
           },
           {
             "dataElement":"oZg33kd9taw",
             "value":"Female"
           }
         ]
       }
     ]
    }
  ]  
}
```

您将像通常在创建或发送时将其发送到服务器一样
更新新的跟踪实体实例。

```bash
curl -X POST -d @tei.json -H "Content-Type: application/json"
  -u user:pass "http://server/api/33/trackedEntityInstances"
```

#### 生成的跟踪实体实例属性 { #webapi_generate_tei_attributes } 

 <!--DHIS2-SECTION-ID:webapi_generate_tei_attributes-->

使用自动生成的跟踪实体实例属性
唯一值具有应用程序使用的三个端点。端点
全部用于生成和保留值。

在2.29中，我们引入了TextPattern来定义和生成这些
模式。所有现有的模式都将转换为有效的TextPattern
升级到2.29时。

> **注**
>
> 自 2.29 版起，所有这些端点都要求您包含任何
> 所有这些端点都会要求您将任何由 `requiredValues` 端点报告的变量列为
> 需要的变量。仅由 `#` 组成的现有模式将升级为
> 将升级为新的 TextPattern 语法 `RANDOM(<old-pattern>)`。RANDOM
> 段不是必选变量，因此该
> 端点将像以前一样适用于 2.29 之前定义的模式。

##### 寻找所需的值 { #finding-required-values } 

TextPattern可以包含根据不同而变化的变量
因素。其中一些因素对于服务器来说是未知的，因此
生成和生成时必须提供这些变量的值
保留价值。

该端点将返回必需值和可选值的映射，
服务器将在生成新值时注入到TextPattern中。
必须为生成提供必需的变量，但可选
仅当您知道自己在做什么时才提供变量。

    GET / api / 33 / trackedEntityAttributes / Gs1ICEQTPlG / requiredValues

```json
{
  "REQUIRED": [
    "ORG_UNIT_CODE"
  ],
  "OPTIONAL": [
    "RANDOM"
  ]
}
```

##### 产生价值终点 { #webapi_generate_values } 

 <!--DHIS2-SECTION-ID:webapi_generate_values-->

在线Web应用程序和其他希望产生价值的客户
可以立即使用，可以使用简单的生成端点。这
端点将生成一个值，该值在
生成时间。该值也保证不保留。作为
对于2.29，此端点还将保留3天生成的值。

如果您的TextPattern包含必需的值，则可以将它们传递为
参数如下例所示：

到期时间也可以在生成时被覆盖，
向请求添加`？expiration = <number-of-days>`。

    GET / api / 33 / trackedEntityAttributes / Gs1ICEQTPlG / generate？ORG_UNIT_CODE = OSLO

```json
{
  "ownerObject": "TRACKEDENTITYATTRIBUTE",
  "ownerUid": "Gs1ICEQTPlG",
  "key": "RANDOM(X)-OSL",
  "value": "C-OSL",
  "created": "2018-03-02T12:01:36.680",
  "expiryDate": "2018-03-05T12:01:36.678"
}
```

##### 产生并保留价值终点 { #webapi_generate_reserve_values } 

 <!--DHIS2-SECTION-ID:webapi_generate_reserve_values-->

生成和保留端点供需要的脱机客户端使用
才能使用唯一ID注册跟踪的实体。他们会
保留此设备将在以下情况下使用的许多唯一ID
注册新的跟踪实体实例。端点被称为
检索多个跟踪的实体实例保留值。一个
可选参数numberToReserve指定要生成多少个ID
（默认为1）。

如果您的TextPattern包含必需的值，则可以将它们传递为
参数如下例所示：

与/ generate端点类似，此端点也可以指定
到期时间以相同的方式。通过添加`？expiration = <number-of-days>`
您可以覆盖默认的60天。

    GET / api / 33 / trackedEntityAttributes / Gs1ICEQTPlG / generateAndReserve？numberToReserve = 3＆ORG_UNIT_CODE = OSLO

```json
[
  {
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "B-OSL",
    "created": "2018-03-02T13:22:35.175",
    "expiryDate": "2018-05-01T13:22:35.174"
  },
  {
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "Q-OSL",
    "created": "2018-03-02T13:22:35.175",
    "expiryDate": "2018-05-01T13:22:35.174"
  },
  {
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "S-OSL",
    "created": "2018-03-02T13:22:35.175",
    "expiryDate": "2018-05-01T13:22:35.174"
  }
]
```

##### 保留值 { #reserved-values } 

目前无法通过api访问保留值，但是它们
由`generate`和`generateAndReserve`端点返回。这
下表说明了保留值对象的属性：

##### {＃}

 <table style="width:100%;">
 <caption>保留值</caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 84%" />
 </colgroup>
 <thead>
 <tr class="header">
 属性<th> </th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ownerObject </td>
 <td>生成和保留值时引用的元数据类型。目前仅支持TRACKEDENTITYATTRIBUTE。 </td>
 </tr>
 <tr class="even">
 <td> ownerUid </td>
 <td>生成和保留值时引用的元数据对象的uid。 </td>
 </tr>
 <tr class="odd">
 <td>键</td>
 <td>部分生成的值，其中尚未添加生成的段。 </td>
 </tr>
 <tr class="even">
 <td>值</td>
 <td>保留完全解析的值。这是存储数据时发送给服务器的值。 </td>
 </tr>
 <tr class="odd">
 <td>创建了</td>
 <td>进行预订的时间戳记</td>
 </tr>
 <tr class="even">
 <td>到期日期</td>
 <td>不再保留保留的时间戳</td>
 </tr>
 </tbody>
 </table>

过期的预订每天删除。如果模式改变，则值
即使已保留的数据也将在存储数据时接受，即使
他们不符合新的模式，只要预订没有
已到期。

#### 图片属性 { #image-attributes } 

使用图像属性很像处理文件数据
价值观。具有图像值类型的属性的值是的ID
关联的文件资源。 GET请求
`/ api / trackedEntityInstances / <entityId> / <attributeId> / image`
端点将返回实际图像。可选的高度和宽度
参数可用于指定图像的尺寸。

```bash
curl "http://server/api/33/trackedEntityInstances/ZRyCnJ1qUXS/zDhUuAYrxNC/image?height=200&width=200"
  > image.jpg
```

The API also supports a *dimension* parameter. It can take three possible values: `small` (254x254), `medium` (512x512), `large` (1024x1024) or `original`. Image type attributes will be stored in pre-generated sizes
and will be furnished upon request based on the value of the `dimension` parameter.

```bash
curl "http://server/api/33/trackedEntityInstances/ZRyCnJ1qUXS/zDhUuAYrxNC/image?dimension=medium"
```

#### 跟踪实体实例查询 { #webapi_tracked_entity_instance_query } 

 <!--DHIS2-SECTION-ID:webapi_tracked_entity_instance_query-->

要查询跟踪的实体实例，您可以与
`/api/trackedEntityInstances` 资源。

    / api / 33 / trackedEntityInstances

##### 请求语法 { #webapi_tei_query_request_syntax } 

 <!--DHIS2-SECTION-ID:webapi_tei_query_request_syntax-->

 <table style="width:100%;">
 <caption>跟踪实体实例查询参数</caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 84%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>过滤器</td>
 <td>用作查询过滤器的属性。参数可以重复多次。过滤器可以应用到格式为&lt;attribute-id&gt;：&lt;operator&gt;：&lt;filtera0012c7dcbe0zz0z0z过滤器值不区分大小写，并且可以与运算符一起重复多次。运算符可以是EQ | GT | GE | LT | LE | NE |赞|在。 </td>
 </tr>
 <tr class="even">
 <td> ou </td>
 <td>组织单位标识符，以&quot;; &quot;分隔。 </td>
 </tr>
 <tr class="odd">
 <td> ouMode </td>
 <td>选择组织单位的模式可以选择|儿童|后裔|可访问|捕捉|全部。默认值为“已选择”，它仅引用选定的所选组织单位。有关说明，请参见下表。 </td>
 </tr>
 <tr class="even">
 <td>程序</td>
 <td>程序标识符。将实例限制为注册到给定程序中。 </td>
 </tr>
 <tr class="odd">
 <td>程序状态</td>
 <td>给定程序的实例状态。可以处于活动状态|已完成取消。 </td>
 </tr>
 <tr class="even">
 <td>跟进</td>
 <td>给定程序的实例的跟踪状态。可以是真的错误或省略。 </td>
 </tr>
 <tr class="odd">
 <td>程序启动日期</td>
 <td>跟踪的实体实例在给定程序中注册的开始日期。 </td>
 </tr>
 <tr class="even">
 <td>程序结束日期</td>
 <td>跟踪的实体实例在给定程序中的注册结束日期。 </td>
 </tr>
 <tr class="odd">
 <td> trackedEntity </td>
 <td>跟踪的实体标识符。将实例限制为给定的跟踪实例类型。 </td>
 </tr>
 <tr class="even">
 <td>页面</td>
 <td>页码。默认页面为1。</td>
 </tr>
 <tr class="odd">
 <td>页面大小</td>
 <td>页面大小。默认大小是每页50行。 </td>
 </tr>
 <tr class="even">
 <td>总页数</td>
 <td>指示是否在寻呼响应中包括总页数（意味着响应时间更长）。 </td>
 </tr>
 <tr class="odd">
 <td> skipPaging </td>
 <td>指示是否应忽略分页并应返回所有行。 </td>
 </tr>
 <tr class="even">
 <td> lastUpdatedStartDate </td>
 <td>过滤此日期之后更新的事件。不能与<em> lastUpdatedDuration </em>一起使用。 </td>
 </tr>
 <tr class="odd">
 <td> lastUpdatedEndDate </td>
 <td>过滤到此日期之前已更新的事件。不能与<em> lastUpdatedDuration </em>一起使用。 </td>
 </tr>
 <tr class="even">
 <td> lastUpdatedDuration </td>
 <td>仅包括在给定持续时间内更新的项目。格式为<value> <time-unit>，其中支持的时间单位为“ d”（天），“ h”（小时），“ m”（分钟）和“ s”（秒）。不能与<em> lastUpdatedStartDate </em>和/或<em> lastUpdatedEndDate </em>一起使用。 </td>
 </tr>
 <tr class="odd">
 <td> AssignedUserMode </td>
 <td>将结果限制为tei，事件是基于分配的用户选择模式分配的，可以是CURRENT |提供无|任何。 </td>
 </tr>
 <tr class="even">
 <td>已分配用户</td>
 <td>使用<em> AssignedUser = id1; id2 </em>将结果过滤到一组有限的teis事件，这些事件已分配给给定的用户ID。 API会出错，例如，如果assignedUserMode = CURRENT和assignedUser = someId </td>
 </tbody>
 </table>

可用的组织单位选择模式在
下表。

 <table>
 <caption>组织单位选择模式</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 79%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>模式</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>已选择</td>
 <td>请求中定义的组织单位。 </td>
 </tr>
 <tr class="even">
 儿童<td>儿童</td>
 <td>所选组织单位和直属子级，即以下级别的组织单位。 </td>
 </tr>
 <tr class="odd">
 <td>后裔</td>
 <td>所选组织单位和所有子级，即子层次结构中的所有组织单位。 </td>
 </tr>
 <tr class="even">
 <td>可访问</td>
 <td>数据视图与当前用户和所有子级关联的组织单位，即子层次结构中的所有组织单位。如果未定义当前用户，它将退回到与当前用户关联的数据捕获组织单位。 </td>
 </tr>
 <tr class="odd">
 <td>捕获</td>
 <td>与当前用户和所有子级关联的数据捕获组织单位，即子层次结构中的所有组织单位。 </td>
 </tr>
 <tr class="even">
 <td>所有</td>
 <td>系统中的所有组织单位。需要ALL权限。 </td>
 </tr>
 </tbody>
 </table>

该查询不区分大小写。以下规则适用于查询
参数。

  - 必须使用* ou *指定至少一个组织单位
    参数（一个或多个）或* ouMode = ALL *必须指定。

  - * program *和* trackedEntity *参数之一只能是
    指定（零或一）。

  - 如果指定了* programStatus *，那么* program *也必须是
    指定的。

  - 如果指定了* followUp *，则还必须指定* program *。

  - 如果指定了* programStartDate *或* programEndDate *，则
    *程序*也必须指定。

  - 过滤器项目只能指定一次。

查询与特定组织单位关联的所有实例
可以看起来像这样：

    /api/33/trackedEntityInstances.json?ou=DiszpKrYNg8

使用带有过滤器和一个的一个属性查询实例
属性不带过滤器，而一个组织单位使用
后代组织单位查询方式：

    /api/33/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A
      ＆filter = AMpUYgxuCaE＆ou = DiszpKrYNg8; yMCshbaVExv

查询响应中包含一个属性的实例
还有一个属性我们用作过滤器：

    /api/33/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A
      ＆filter = AMpUYgxuCaE：LIKE：Road＆ou = DiszpKrYNg8

为过滤器指定多个操作数和过滤器的查询
物品：

    api / 33 / trackedEntityInstances.json？ou = DiszpKrYNg8＆program = ur1Edk5Oe2n
      ＆filter = lw1SqmMlnfh：GT：150：LT：190

要在* IN *过滤器中使用多个值查询属性，请执行以下操作：

    api / 33 / trackedEntityInstances.json？ou = DiszpKrYNg8
      ＆filter = dv3nChNSIxy：IN：Scott; Jimmy; Santiago

将响应限制为特定实例的一部分
程序中可以包含程序查询参数：

    api / 33 / trackedEntityInstances.json？filter = zHXD5Ve1Efw：EQ：A＆ou = O6uvpzGd5pu
      ＆ouMode = DESCENDANTS＆program = ur1Edk5Oe2n

要将程序注册日期指定为查询的一部分，请执行以下操作：

    api / 33 / trackedEntityInstances.json？filter = zHXD5Ve1Efw：EQ：A＆ou = O6uvpzGd5pu
      ＆program = ur1Edk5Oe2n＆programStartDate = 2013-01-01＆programEndDate = 2013-09-01

要将响应限制为特定跟踪实体的实例，您可以
可以包含跟踪的实体查询参数：

    api / 33 / trackedEntityInstances.json？filter = zHXD5Ve1Efw：EQ：A＆ou = O6uvpzGd5pu
      ＆ouMode = DESCENDANTS＆trackedEntity = cyl5vuJ5ETQ

默认情况下，实例返回的页面大小为50，以进行更改
您可以使用page和pageSize查询参数：

    api / 33 / trackedEntityInstances.json？filter = zHXD5Ve1Efw：EQ：A＆ou = O6uvpzGd5pu
      ＆ouMode = DESCENDANTS＆page = 2＆pageSize = 3

您可以使用一系列运算符进行过滤：

 <table>
 <caption> 过滤运算符 </caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 80%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 操作员 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> EQ </td>
 <td> 等于 </td>
 </tr>
 <tr class="even">
 <td> GT </td>
 <td> 大于 </td>
 </tr>
 <tr class="odd">
 <td> GE </td>
 <td> 大于等于</td>
 </tr>
 <tr class="even">
 <td> LT </td>
 <td> 小于</td>
 </tr>
 <tr class="odd">
 <td> LE </td>
 <td> 小于等于</td>
 </tr>
 <tr class="even">
 <td> NE </td>
 <td> 不等于 </td>
 </tr>
 <tr class="odd">
 <td> LIKE </td>
 <td> 喜欢（自由文本匹配） </td>
 </tr>
 <tr class="even">
 <td> 在 </td>
 <td> 等于由 &quot;;&quot; </td> 分隔的多个值之一
 </tr>
 </tbody>
 </table>

##### 回应格式 { #webapi_tei_query_response_format } 

 <!--DHIS2-SECTION-ID:webapi_tei_query_response_format-->

该资源支持JSON，JSONP，XLS和CSV资源
表示形式。

  - json（应用程序/ json）

  - jsonp（应用程序/ javascript）

  - xml（应用程序/ xml）

JSON / XML中的响应为对象格式，看起来像
下列的。请注意，支持字段过滤，因此如果需要
完整视图，您可能需要在查询中添加`fields = *`：

```json
{
  "trackedEntityInstances": [
    {
      "lastUpdated": "2014-03-28 12:27:52.399",
      "trackedEntity": "cyl5vuJ5ETQ",
      "created": "2014-03-26 15:40:19.997",
      "orgUnit": "ueuQlqb8ccl",
      "trackedEntityInstance": "tphfdyIiVL6",
      "relationships": [],
      "attributes": [
        {
          "displayName": "Address",
          "attribute": "AMpUYgxuCaE",
          "type": "string",
          "value": "2033 Akasia St"
        },
        {
          "displayName": "TB number",
          "attribute": "ruQQnf6rswq",
          "type": "string",
          "value": "1Z 989 408 56 9356 521 9"
        },
        {
          "displayName": "Weight in kg",
          "attribute": "OvY4VVhSDeJ",
          "type": "number",
          "value": "68.1"
        },
        {
          "displayName": "Email",
          "attribute": "NDXw0cluzSw",
          "type": "string",
          "value": "LiyaEfrem@armyspy.com"
        },
        {
          "displayName": "Gender",
          "attribute": "cejWyOfXge6",
          "type": "optionSet",
          "value": "Female"
        },
        {
          "displayName": "Phone number",
          "attribute": "P2cwLGskgxn",
          "type": "phoneNumber",
          "value": "085 813 9447"
        },
        {
          "displayName": "First name",
          "attribute": "dv3nChNSIxy",
          "type": "string",
          "value": "Liya"
        },
        {
          "displayName": "Last name",
          "attribute": "hwlRTFIFSUq",
          "type": "string",
          "value": "Efrem"
        },
        {
          "code": "Height in cm",
          "displayName": "Height in cm",
          "attribute": "lw1SqmMlnfh",
          "type": "number",
          "value": "164"
        },
        {
          "code": "City",
          "displayName": "City",
          "attribute": "VUvgVao8Y5z",
          "type": "string",
          "value": "Kranskop"
        },
        {
          "code": "State",
          "displayName": "State",
          "attribute": "GUOBQt5K2WI",
          "type": "number",
          "value": "KwaZulu-Natal"
        },
        {
          "code": "Zip code",
          "displayName": "Zip code",
          "attribute": "n9nUvfpTsxQ",
          "type": "number",
          "value": "3282"
        },
        {
          "code": "National identifier",
          "displayName": "National identifier",
          "attribute": "AuPLng5hLbE",
          "type": "string",
          "value": "465700042"
        },
        {
          "code": "Blood type",
          "displayName": "Blood type",
          "attribute": "H9IlTX2X6SL",
          "type": "string",
          "value": "B-"
        },
        {
          "code": "Latitude",
          "displayName": "Latitude",
          "attribute": "Qo571yj6Zcn",
          "type": "string",
          "value": "-30.659626"
        },
        {
          "code": "Longitude",
          "displayName": "Longitude",
          "attribute": "RG7uGl4w5Jq",
          "type": "string",
          "value": "26.916172"
        }
      ]
    }
  ]
}
```

#### 跟踪实体实例网格查询 { #webapi_tracked_entity_instance_grid_query } 

 <!--DHIS2-SECTION-ID:webapi_tracked_entity_instance_grid_query-->

要查询跟踪的实体实例，您可以与
* / api / trackedEntityInstances / grid *资源。有两种类型的
querys：其中一个* query *查询参数和可选的* attribute *
参数已定义，其中一个是* attribute *和* filter *
参数已定义。该端点使用更紧凑的“网格”格式，
并且是上一节中查询的替代方法。

    / api / 33 / trackedEntityInstances / query

##### 请求语法 { #webapi_tei_grid_query_request_syntax } 

 <!--DHIS2-SECTION-ID:webapi_tei_grid_query_request_syntax-->

 <table style="width:100%;">
 <caption>跟踪实体实例查询参数</caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 84%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 查询<td> </td>
 <td>查询字符串。属性查询参数可用于定义响应中包括哪些属性。如果未定义任何属性，但定义了程序，则将使用该程序中的属性。如果未定义任何程序，则将使用所有属性。有两种格式。第一个是计划查询字符串。第二个格式为&lt;operator&gt;：&lt;query&gt;。运算符可以是EQ |喜欢。 EQ表示单词完全匹配，LIKE表示单词部分匹配。该查询将在空间上分割，每个单词将形成一个逻辑AND查询。 </td>
 </tr>
 <tr class="even">
 <td>属性</td>
 <td>要包含在响应中的属性。也可以用作查询的过滤器。参数可以重复多次。过滤器可以应用到格式为&lt;attribute-id&gt;：&lt;operator&gt;：&lt;filtera0012c7dcbe0zz0z0z过滤器值不区分大小写，并且可以与运算符一起重复多次。运算符可以是EQ | GT | GE | LT | LE | NE |赞|在。可以省略过滤器，以便在响应中简单地包含属性而没有任何约束。 </td>
 </tr>
 <tr class="odd">
 <td>过滤器</td>
 <td>用作查询过滤器的属性。参数可以重复多次。过滤器可以应用到格式为&lt;attribute-id&gt;：&lt;operator&gt;：&lt;filtera0012c7dcbe0zz0z0z过滤器值不区分大小写，并且可以与运算符一起重复多次。运算符可以是EQ | GT | GE | LT | LE | NE |赞|在。 </td>
 </tr>
 <tr class="even">
 <td> ou </td>
 <td>组织单位标识符，以&quot;; &quot;分隔。 </td>
 </tr>
 <tr class="odd">
 <td> ouMode </td>
 <td>选择组织单位的模式可以选择|儿童|后裔|可访问|全部。默认值为SELECTED，它仅引用所选的组织单位。有关说明，请参见下表。 </td>
 </tr>
 <tr class="even">
 <td>程序</td>
 <td>程序标识符。将实例限制为注册到给定程序中。 </td>
 </tr>
 <tr class="odd">
 <td>程序状态</td>
 <td>给定程序的实例状态。可以处于活动状态|已完成取消。 </td>
 </tr>
 <tr class="even">
 <td>跟进</td>
 <td>给定程序的实例的跟踪状态。可以是真的错误或省略。 </td>
 </tr>
 <tr class="odd">
 <td>程序启动日期</td>
 <td>跟踪的实体实例在给定程序中注册的开始日期。 </td>
 </tr>
 <tr class="even">
 <td>程序结束日期</td>
 <td>跟踪的实体实例在给定程序中的注册结束日期。 </td>
 </tr>
 <tr class="odd">
 <td> trackedEntity </td>
 <td>跟踪的实体标识符。将实例限制为给定的跟踪实例类型。 </td>
 </tr>
 <tr class="even">
 <td> eventStatus </td>
 <td>与给定程序和被跟踪实体实例相关联的任何事件的状态。可以处于活动状态|已完成已访问|预定|逾期|跳过。 </td>
 </tr>
 <tr class="odd">
 <td> eventStartDate </td>
 <td>与给定程序和事件状态关联的事件的开始日期。 </td>
 </tr>
 <tr class="even">
 <td> eventEndDate </td>
 <td>与给定程序和事件状态关联的事件的结束日期。 </td>
 </tr>
 <tr class="odd">
 <td> skipMeta </td>
 <td>指示是否应包含响应的元数据。 </td>
 </tr>
 <tr class="even">
 <td>页面</td>
 <td>页码。默认页面为1。</td>
 </tr>
 <tr class="odd">
 <td>页面大小</td>
 <td>页面大小。默认大小是每页50行。 </td>
 </tr>
 <tr class="even">
 <td>总页数</td>
 <td>指示是否在寻呼响应中包括总页数（意味着响应时间更长）。 </td>
 </tr>
 <tr class="odd">
 <td> skipPaging </td>
 <td>指示是否应忽略分页并应返回所有行。 </td>
 </tr>
 </tbody>
 </table>

可用的组织单位选择模式在
下表。

 <table>
 <caption>组织单位选择模式</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 79%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>模式</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>已选择</td>
 <td>请求中定义的组织单位。 </td>
 </tr>
 <tr class="even">
 儿童<td>儿童</td>
 <td>请求中定义的组织单位的直接子级，即仅位于下面的第一级。 </td>
 </tr>
 <tr class="odd">
 <td>后裔</td>
 <td>所有孩子，即仅低于以下水平的孩子，例如包括请求中定义的组织单位的孩子的孩子。 </td>
 </tr>
 <tr class="even">
 <td>可访问</td>
 <td>与当前用户关联的数据视图组织单位的所有后代。如果未定义当前用户，它将退回到与当前用户关联的数据捕获组织单位。 </td>
 </tr>
 <tr class="odd">
 <td>捕获</td>
 <td>与当前用户和所有子级关联的数据捕获组织单位，即子层次结构中的所有组织单位。 </td>
 </tr>
 <tr class="even">
 <td>所有</td>
 <td>系统中的所有组织单位。需要权限。 </td>
 </tr>
 </tbody>
 </table>

请注意，您可以使用过滤器指定“属性”，也可以直接使用“过滤器”参数来限制
实例返回。

某些规则适用于返回的属性。

  - 如果指定的“查询”没有任何属性或程序，则所有
    标记为“在没有程序的情况下显示在列表中”。

  - 如果指定了program，则链接到该程序的所有属性都将
    包含在响应中。

  - 如果指定了跟踪实体类型，则所有跟踪实体类型属性
    将包含在响应中。

您可以用空格隔开的单词来指定查询-
系统将独立查询每个单词并返回的情况
记录每个单词包含在任何属性中的位置。查询项可以
一次指定为属性，一次指定为过滤器（如果需要）。这
查询不区分大小写。以下规则适用于查询
参数。

  - 必须使用* ou *指定至少一个组织单位
    参数（一个或多个）或* ouMode = ALL *必须指定。

  - * program *和* trackedEntity *参数之一只能是
    指定（零或一）。

  - 如果指定了* programStatus *，那么* program *也必须是
    指定的。

  - 如果指定了* followUp *，则还必须指定* program *。

  - 如果指定了* programStartDate *或* programEndDate *，则
    *程序*也必须指定。

  - 如果指定了* eventStatus *，则* eventStartDate *和
    * eventEndDate *也必须指定。

  - 不能与过滤器一起指定查询。

  - 属性项目只能指定一次。

  - 过滤器项目只能指定一次。

查询与特定组织单位关联的所有实例
可以看起来像这样：

    /api/33/trackedEntityInstances/query.json?ou=DiszpKrYNg8

查询特定值和组织单位的所有属性，
使用完全匹配的单词：

    /api/33/trackedEntityInstances/query.json?query=scott&ou=DiszpKrYNg8

使用部分单词查询所有属性的特定值
比赛：

    /api/33/trackedEntityInstances/query.json?query=LIKE:scott&ou=DiszpKrYNg8

您可以查询多个用URL字符分隔的单词
空格为％20，将对每个空格使用逻辑AND查询
    单词：

    /api/33/trackedEntityInstances/query.json?query=isabel%20may&ou=DiszpKrYNg8

指定要包含在响应中的属性的查询：

    /api/33/trackedEntityInstances/query.json?query=isabel
      ＆attribute = dv3nChNSIxy＆attribute = AMpUYgxuCaE＆ou = DiszpKrYNg8

使用带有过滤器和一个的一个属性查询实例
属性不带过滤器，而一个组织单位使用
后裔组织单位查询方式：

    /api/33/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      ＆attribute = AMpUYgxuCaE＆ou = DiszpKrYNg8; yMCshbaVExv

查询响应中包含一个属性的实例
还有一个属性，我们用作
    筛选：

    /api/33/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      ＆filter = AMpUYgxuCaE：LIKE：Road＆ou = DiszpKrYNg8

为过滤器指定多个操作数和过滤器的查询
物品：

    /api/33/trackedEntityInstances/query.json?ou=DiszpKrYNg8&program=ur1Edk5Oe2n
      ＆filter = lw1SqmMlnfh：GT：150：LT：190

使用IN中的多个值查询属性
    筛选：

    /api/33/trackedEntityInstances/query.json?ou=DiszpKrYNg8
      ＆attribute = dv3nChNSIxy：IN：Scott; Jimmy; Santiago

将响应限制为特定实例的一部分
程序中可以包含程序查询参数：

    /api/33/trackedEntityInstances/query.json?filter=zHXD5Ve1Efw:EQ:A
      ＆ou = O6uvpzGd5pu＆ouMode = DESCENDANTS＆program = ur1Edk5Oe2n

要将程序注册日期指定为查询的一部分，请执行以下操作：

    /api/33/trackedEntityInstances/query.json?filter=zHXD5Ve1Efw:EQ:A
      ＆ou = O6uvpzGd5pu＆program = ur1Edk5Oe2n＆programStartDate = 2013-01-01
      ＆programEndDate = 2013-09-01

要将响应限制为特定跟踪实体的实例，您可以
可以包含跟踪的实体查询参数：

    /api/33/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      ＆ou = O6uvpzGd5pu＆ouMode = DESCENDANTS＆trackedEntity = cyl5vuJ5ETQ

默认情况下，实例返回的页面大小为50，以进行更改
您可以使用page和pageSize查询参数：

    /api/33/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      ＆ou = O6uvpzGd5pu＆ouMode = DESCENDANTS＆page = 2＆pageSize = 3

查询实例中具有给定状态事件的实例
给定的时间跨度：

    /api/33/trackedEntityInstances/query.json?ou=O6uvpzGd5pu
      ＆program = ur1Edk5Oe2n＆eventStatus = LATE_VISIT
      ＆eventStartDate = 2014-01-01＆eventEndDate = 2014-09-01

您可以使用一系列运算符进行过滤：

 <table>
 <caption> 过滤运算符 </caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 80%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 操作员 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> EQ </td>
 <td> 等于 </td>
 </tr>
 <tr class="even">
 <td> GT </td>
 <td> 大于 </td>
 </tr>
 <tr class="odd">
 <td> GE </td>
 <td> 大于等于</td>
 </tr>
 <tr class="even">
 <td> LT </td>
 <td> 小于</td>
 </tr>
 <tr class="odd">
 <td> LE </td>
 <td> 小于等于</td>
 </tr>
 <tr class="even">
 <td> NE </td>
 <td> 不等于 </td>
 </tr>
 <tr class="odd">
 <td> LIKE </td>
 <td> 喜欢（自由文本匹配） </td>
 </tr>
 <tr class="even">
 <td> 在 </td>
 <td> 等于由 &quot;;&quot; </td> 分隔的多个值之一
 </tr>
 </tbody>
 </table>

##### 回应格式 { #webapi_tei_grid_query_response_format } 

 <!--DHIS2-SECTION-ID:webapi_tei_grid_query_response_format-->

该资源支持JSON，JSONP，XLS和CSV资源
表示形式。

  - json（应用程序/ json）

  - jsonp（应用程序/ javascript）

  - xml（应用程序/ xml）

  - csv（应用程序/ csv）

  - xls（application / vnd.ms-excel）

JSON中的响应采用表格格式，看起来像
下列的。 * header *部分描述每列的内容。
实例，创建的，最近更新的，组织单位和跟踪的实体列
总是存在。以下各列对应于属性
在查询中指定。 *行*部分每行包含一行
实例。

```json
{
  "headers": [{
    "name": "instance",
    "column": "Instance",
    "type": "java.lang.String"
  }, {
    "name": "created",
    "column": "Created",
    "type": "java.lang.String"
  }, {
    "name": "lastupdated",
    "column": "Last updated",
    "type": "java.lang.String"
  }, {
    "name": "ou",
    "column": "Org unit",
    "type": "java.lang.String"
  }, {
    "name": "te",
    "column": "Tracked entity",
    "type": "java.lang.String"
  }, {
    "name": "zHXD5Ve1Efw",
    "column": "Date of birth type",
    "type": "java.lang.String"
  }, {
    "name": "AMpUYgxuCaE",
    "column": "Address",
    "type": "java.lang.String"
  }],
  "metaData": {
    "names": {
      "cyl5vuJ5ETQ": "Person"
    }
  },
  "width": 7,
  "height": 7,
  "rows": [
    ["yNCtJ6vhRJu", "2013-09-08 21:40:28.0", "2014-01-09 19:39:32.19", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "21 Kenyatta Road"],
    ["fSofnQR6lAU", "2013-09-08 21:40:28.0", "2014-01-09 19:40:19.62", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "56 Upper Road"],
    ["X5wZwS5lgm2", "2013-09-08 21:40:28.0", "2014-01-09 19:40:31.11", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "56 Main Road"],
    ["pCbogmlIXga", "2013-09-08 21:40:28.0", "2014-01-09 19:40:45.02", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "12 Lower Main Road"],
    ["WnUXrY4XBMM", "2013-09-08 21:40:28.0", "2014-01-09 19:41:06.97", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "13 Main Road"],
    ["xLNXbDs9uDF", "2013-09-08 21:40:28.0", "2014-01-09 19:42:25.66", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "14 Mombasa Road"],
    ["foc5zag6gbE", "2013-09-08 21:40:28.0", "2014-01-09 19:42:36.93", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "15 Upper Hill"]
  ]
}
```

#### 跟踪实体实例过滤器 { #webapi_tei_filters } 

 <!--DHIS2-SECTION-ID:webapi_tei_filters-->

要创建，读取，更新和删除跟踪的实体实例过滤器，您需要
可以与* / api / trackedEntityInstanceFilters *资源进行交互。

    / api / 33 / trackedEntityInstanceFilters

##### 创建和更新跟踪的实体实例过滤器定义 { #create-and-update-a-tracked-entity-instance-filter-definiton } 

为了在中创建和更新跟踪的实体实例过滤器
系统，您将使用* trackedEntityInstanceFilters *
资源。跟踪的实体实例过滤器定义用于
Tracker Capture应用程序可在其中显示相关的预定义“工作列表”
跟踪器用户界面。

<table>
<caption>有效负载</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>负载值</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>名称</td>
<td>过滤器的名称。必需。</td>
<td></td>
</tr>
<tr class="even">
<td>说明</td>
<td>过滤器的说明。</td>
<td></td>
</tr>
<tr class="odd">
<td>排序顺序</td>
<td>过滤器的排序顺序。在 Tracker Capture 中用于对程序仪表板中的过滤器进行排序。</td>
<td></td>
</tr>
<tr class="even">
<td>样式</td>
<td>包含 CSS 样式的对象。</td>
<td>( &quot;颜色&quot;:  &quot;蓝色&quot;，&quot;图标&quot;：&quot;fa fa-日历&quot;}</td>
</tr>
<tr class="odd">
<td>程序</td>
<td>包含程序 ID 的对象。必需。</td>
<td>{ &quot;id&quot; :  &quot;uy2gU8kTjF&quot;}</td>
</tr>
<tr class="even">
<td>注册状态</td>
<td>TEI 注册状态。可以是无（任何注册状态）或 ACTIVE|COMPLETED|CANCELED</td>
<td></td>
</tr>
<tr class="odd">
<td>后续</td>
<td>当此参数为 true 时，过滤器仅返回具有状态后续注册的 TEI。</td>
<td></td>
</tr>
<tr class="even">
<td>enrollmentCreatedPeriod</td>
<td>期间对象，包含必须创建注册的期间。请参阅下面的<em>周期</em>定义表。</td>
<td>{ &quot;periodFrom&quot;：-15，&quot;periodTo&quot;：15}</td>
</tr>
<tr class="odd">
<td>事件过滤器</td>
<td>事件过滤器列表。请参阅下面的<em>事件过滤器</em>定义表。</td>
<td>[{&quot;programStage&quot;：&quot;eaDH9089uMp&quot;，&quot;事件状态&quot;：&quot;逾期&quot;，&quot;eventCreatedPeriodb05d5c591f93ed z0 ：{&quot;期间&quot;：-15，&quot; periodTo&quot;：15}}]</td>
</tr>
</tbody>
</table>

<table>
<caption>Event filters definition</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td>programStage</td>
<td>Which programStage the TEI needs an event in to be returned.</td>
<td>&quot;eaDH9089uMp&quot;</td>
</tr>
<tr class="even">
<td>eventStatus</td>
<td>The events status. Can be none(any event status) or ACTIVE|COMPLETED|SCHEDULED|OVERDUE</td>
<td>ACTIVE</td>
</tr>
<tr class="odd">
<td>eventCreatedPeriod</td>
<td>Period object containing a period in which the event must be created. See <em>Period</em> definition below.</td>
<td>{ &quot;periodFrom&quot;: -15, &quot;periodTo&quot;: 15}</td>
</tr>
<tr class="even">
<td>assignedUserMode</td>
<td>To specify the assigned user selection mode for events. Possible values are CURRENT (events assigned to current user)| PROVIDED (events assigned to users provided in "assignedUsers" list) | NONE (events assigned to no one) | ANY (events assigned to anyone). If PROVIDED (or null), non-empty assignedUsers in the payload will be considered.</td>
<td>"assignedUserMode": "PROVIDED"</td>
</tr>
<tr class="odd">
<td>assignedUsers</td>
<td>To specify a list of assigned users for events. To be used along with PROVIDED assignedUserMode above.</td>
<td>"assignedUsers": ["a3kGcGDCuk7", "a3kGcGDCuk8"]</td>
</tr>
</tbody>
</table>

 <table>
 <caption>期间定义</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <tbody>
 <tr class="odd">
 <td>期间从</td>
 <td>从当天算起的天数。可以是正整数或负整数。 </td>
 <td> -15 </td>
 </tr>
 <tr class="even">
 <td>周期到</td>
 <td>从当天算起的天数。必须大于periodFrom。可以是正整数或负整数。 </td>
 <td> 15 </td>
 </tr>
 </tbody>
 </table>

##### 跟踪实体实例过滤器查询 { #tracked-entity-instance-filters-query } 

要在系统中查询跟踪的实体实例过滤器，您可以
与* / api / trackedEntityInstanceFilters *资源进行交互。

 <table>
 <caption>跟踪的实体实例过滤器查询参数</caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>程序</td>
 <td>程序标识符。将过滤器限制为给定程序。 </td>
 </tr>
 </tbody>
 </table>

### 招生管理 { #webapi_enrollment_management } 

 <!--DHIS2-SECTION-ID:webapi_enrollment_management-->

注册在API中具有完整的CRUD支持。与API一起
对于跟踪的实体实例，大多数操作需要
支持跟踪的实体实例和程序。

    / api / 33 /注册

#### 将跟踪的实体实例注册到程序中 { #webapi_enrolling_tei } 

 <!--DHIS2-SECTION-ID:webapi_enrolling_tei-->

若要将人员注册到程序中，您需要先获取
* trackedEntityInstances *资源中人员的标识符。
然后，您需要从* programs *中获取程序标识符
资源。模板有效负载如下所示：

```json
{
  "trackedEntityInstance": "ZRyCnJ1qUXS",
  "orgUnit": "ImspTQPwCqd",
  "program": "S8uo8AlvYMz",
  "enrollmentDate": "2013-09-17",
  "incidentDate": "2013-09-17"
}
```

此有效负载应在对注册的* POST *请求中使用
以下网址标识的资源：

    / api / 33 /注册

For cancelling or completing an enrollment, you can make a *PUT*
request to the `enrollments` resource, including the identifier and the
action you want to perform. For cancelling an enrollment for a tracked
entity instance:

    / api / 33 / enrollments / <enrollment-id> /取消

要完成对跟踪实体实例的注册，您可以
* PUT *请求到以下URL：

    / api / 33 / enrollments / <enrollment-id> /已完成

要删除注册信息，可向以下 URL 提出 *DELETE* 请求
请求：

    / api / 33 / enrollments / <enrollment-id>

#### 注册实例查询 { #webapi_enrollment_instance_query } 

 <!--DHIS2-SECTION-ID:webapi_enrollment_instance_query-->

要查询注册，您可以与* / api / enrollments *进行交互
资源。

    / api / 33 /注册

##### 请求语法 { #webapi_enrollment_query_request_syntax } 

 <!--DHIS2-SECTION-ID:webapi_enrollment_query_request_syntax-->

 <table style="width:100%;">
 <caption>注册查询参数</caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 84%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ou </td>
 <td>组织单位标识符，以&quot;; &quot;分隔。 </td>
 </tr>
 <tr class="even">
 <td> ouMode </td>
 <td>选择组织单位的模式可以选择|儿童|后裔|可访问|捕捉|全部。默认值为“已选择”，它仅引用选定的所选组织单位。有关说明，请参见下表。 </td>
 </tr>
 <tr class="odd">
 <td>程序</td>
 <td>程序标识符。将实例限制为注册到给定程序中。 </td>
 </tr>
 <tr class="even">
 <td>程序状态</td>
 <td>给定程序的实例状态。可以处于活动状态|已完成取消。 </td>
 </tr>
 <tr class="odd">
 <td>跟进</td>
 <td>给定程序的实例的跟踪状态。可以是真的错误或省略。 </td>
 </tr>
 <tr class="even">
 <td>程序启动日期</td>
 <td>跟踪的实体实例在给定程序中注册的开始日期。 </td>
 </tr>
 <tr class="odd">
 <td>程序结束日期</td>
 <td>跟踪的实体实例在给定程序中的注册结束日期。 </td>
 </tr>
 <tr class="even">
 <td> lastUpdatedDuration </td>
 <td>仅包括在给定持续时间内更新的项目。格式为<value> <time-unit>，其中支持的时间单位为“ d”（天），“ h”（小时），“ m”（分钟）和“ s”（秒）。 </td>
 </tr>
 <tr class="odd">
 <td> trackedEntity </td>
 <td>跟踪的实体标识符。将实例限制为给定的跟踪实例类型。 </td>
 </tr>
 <tr class="even">
 <td> trackedEntityInstance </td>
 <td>跟踪的实体实例标识符。不应与trackedEntity一起使用。 </td>
 </tr>
 <tr class="odd">
 <td>页面</td>
 <td>页码。默认页面为1。</td>
 </tr>
 <tr class="even">
 <td>页面大小</td>
 <td>页面大小。默认大小是每页50行。 </td>
 </tr>
 <tr class="odd">
 <td>总页数</td>
 <td>指示是否在寻呼响应中包括总页数（意味着响应时间更长）。 </td>
 </tr>
 <tr class="even">
 <td> skipPaging </td>
 <td>指示是否应忽略分页并应返回所有行。 </td>
 </tr>
 <tr class="odd">
 <td> include已删除</td>
 <td>指示是否包括软删除的注册。默认情况下为false。 </td>
 </tr>
 </tbody>
 </table>

可用的组织单位选择模式在
下表。

 <table>
 <caption>组织单位选择模式</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 79%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>模式</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>已选择</td>
 <td>请求中定义的组织单位（默认）。 </td>
 </tr>
 <tr class="even">
 儿童<td>儿童</td>
 <td>请求中定义的组织单位的直接子级，即仅位于下面的第一级。 </td>
 </tr>
 <tr class="odd">
 <td>后裔</td>
 <td>所有孩子，即仅低于以下水平的孩子，例如包括请求中定义的组织单位的孩子的孩子。 </td>
 </tr>
 <tr class="even">
 <td>可访问</td>
 <td>与当前用户关联的数据视图组织单位的所有后代。如果未定义当前用户，它将退回到与当前用户关联的数据捕获组织单位。 </td>
 </tr>
 <tr class="odd">
 <td>所有</td>
 <td>系统中的所有组织单位。需要权限。 </td>
 </tr>
 </tbody>
 </table>

该查询不区分大小写。以下规则适用于查询
参数。

  - 必须使用* ou *指定至少一个组织单位
    参数（一个或多个）或* ouMode = ALL *必须指定。

  - * program *和* trackedEntity *参数之一只能是
    指定（零或一）。

  - 如果指定了* programStatus *，那么* program *也必须是
    指定的。

  - 如果指定了* followUp *，则还必须指定* program *。

  - 如果指定了* programStartDate *或* programEndDate *，则
    *程序*也必须指定。

查询与特定组织单位相关的所有注册
可以看起来像这样：

    /api/33/enrollments.json?ou=DiszpKrYNg8

限制对入学的响应，这是特定课程的一部分
程序中可以包含程序查询
    范围：

    /api/33/enrollments.json?ou=O6uvpzGd5pu&ouMode=DESCENDANTS&program=ur1Edk5Oe2n

将课程注册日期指定为
    询问：

    /api/33/enrollments.json?&ou=O6uvpzGd5pu&program=ur1Edk5Oe2n
      ＆programStartDate = 2013-01-01＆programEndDate = 2013-09-01

限制对特定跟踪实体的注册的响应
您可以包括跟踪的实体查询
    范围：

    /api/33/enrollments.json?ou=O6uvpzGd5pu&ouMode=DESCENDANTS&trackedEntity=cyl5vuJ5ETQ

限制对特定跟踪实体的注册的响应
实例，您可以在其中包含跟踪的实体实例查询参数
在这种情况下，我们将其限制为可查看的可用注册
当前的
    用户：

    /api/33/enrollments.json?ouMode=ACCESSIBLE&trackedEntityInstance=tphfdyIiVL6

默认情况下，注册返回的页面大小为50，以进行更改
您可以使用page和pageSize查询
    参数：

    /api/33/enrollments.json?ou=O6uvpzGd5pu&ouMode=DESCENDANTS&page=2&pageSize=3

##### 回应格式 { #webapi_enrollment_query_response_format } 

 <!--DHIS2-SECTION-ID:webapi_enrollment_query_response_format-->

该资源支持JSON，JSONP，XLS和CSV资源
表示形式。

  - json（应用程序/ json）

  - jsonp（应用程序/ javascript）

  - xml（应用程序/ xml）

JSON / XML中的响应为对象格式，看起来像
下列的。请注意，支持字段过滤，因此如果需要
完整视图，您可能需要在查询中添加`fields = *`：

```json
{
  "enrollments": [
    {
      "lastUpdated": "2014-03-28T05:27:48.512+0000",
      "trackedEntity": "cyl5vuJ5ETQ",
      "created": "2014-03-28T05:27:48.500+0000",
      "orgUnit": "DiszpKrYNg8",
      "program": "ur1Edk5Oe2n",
      "enrollment": "HLFOK0XThjr",
      "trackedEntityInstance": "qv0j4JBXQX0",
      "followup": false,
      "enrollmentDate": "2013-05-23T05:27:48.490+0000",
      "incidentDate": "2013-05-10T05:27:48.490+0000",
      "status": "ACTIVE"
    }
  ]
}
```

### 大事记 { #webapi_events } 

 <!--DHIS2-SECTION-ID:webapi_events-->

本节关于发送和读取事件。

    / api / 33 / events

#### 发送事件 { #webapi_sending_events } 

 <!--DHIS2-SECTION-ID:webapi_sending_events-->

DHIS2支持三种事件：没有注册的单个事件
（也称为匿名事件），具有注册的单个事件
以及注册多个事件。注册意味着
数据链接到使用以下方法标识的跟踪实体实例
某种标识符。

要将事件发送到DHIS2，您必须与* events *资源进行交互。
发送事件的方法类似于发送聚合数据
价值观。您将需要一个*程序*，可以使用
* programs *资源，一个* orgUnit *，可以使用
* organisationUnits *资源，以及有效数据元素的列表
可以使用* dataElements *资源查找的标识符。
对于注册事件，*跟踪实体实例*标识符为
必读，请在有关
* trackedEntityInstances *资源。用于通过以下方式向程序发送事件
多个阶段，您还需要包括* programStage *
标识符，programStages的标识符可以在
* programStages *资源。

一个简单的单一事件，没有XML格式的注册示例有效负载
我们从“住院发病率和死亡率”中发送事件
可以在演示数据库中看到“ Ngelehun CHC”设施的程序
以下：

```xml
<?xml version="1.0" encoding="utf-8"?>
<event program="eBAyeGv0exc" orgUnit="DiszpKrYNg8"
  eventDate="2013-05-17" status="COMPLETED" storedBy="admin">
  <coordinate latitude="59.8" longitude="10.9" />
  <dataValues>
    <dataValue dataElement="qrur9Dvnyt5" value="22" />
    <dataValue dataElement="oZg33kd9taw" value="Male" />
    <dataValue dataElement="msodh3rEMJa" value="2013-05-18" />
  </dataValues>
</event>
```

为了执行一些测试，我们可以将XML有效内容另存为文件
称为* event.xml *并将其作为POST请求发送到事件资源
在API中使用curl使用以下命令：

```bash
curl -d @event.xml "https://play.dhis2.org/demo/api/33/events"
  -H "Content-Type:application/xml" -u admin:district
```

JSON格式的相同负载如下所示：

```json
{
  "program": "eBAyeGv0exc",
  "orgUnit": "DiszpKrYNg8",
  "eventDate": "2013-05-17",
  "status": "COMPLETED",
  "completedDate": "2013-05-18",
  "storedBy": "admin",
  "coordinate": {
    "latitude": 59.8,
    "longitude": 10.9
  },
  "dataValues": [
    {
      "dataElement": "qrur9Dvnyt5", 
      "value": "22"
    },
    {
      "dataElement": "oZg33kd9taw", 
      "value": "Male"
    }, 
    {
      "dataElement": "msodh3rEMJa", 
      "value": "2013-05-18"
    }
  ]
}
```

要发送此消息，可以将其保存到名为* event.json *的文件中并使用curl
像这样：

```bash
curl -d @event.json "localhost/api/33/events" -H "Content-Type:application/json"
  -u admin:district
```

我们还支持同时发送多个事件。负载在
XML格式可能如下所示：

```xml
<?xml version="1.0" encoding="utf-8"?>
<events>
  <event program="eBAyeGv0exc" orgUnit="DiszpKrYNg8"
    eventDate="2013-05-17" status="COMPLETED" storedBy="admin">
    <coordinate latitude="59.8" longitude="10.9" />
    <dataValues>
      <dataValue dataElement="qrur9Dvnyt5" value="22" />
      <dataValue dataElement="oZg33kd9taw" value="Male" />
    </dataValues>
  </event>
  <event program="eBAyeGv0exc" orgUnit="DiszpKrYNg8"
    eventDate="2013-05-17" status="COMPLETED" storedBy="admin">
    <coordinate latitude="59.8" longitude="10.9" />
    <dataValues>
      <dataValue dataElement="qrur9Dvnyt5" value="26" />
      <dataValue dataElement="oZg33kd9taw" value="Female" />
    </dataValues>
  </event>
</events>
```

您将收到一个导入摘要，其中的响应可以是
检查以获取有关请求结果的信息，
例如成功导入了多少个值。 JSON中的有效负载
格式如下：

```json
{
  "events": [
  {
    "program": "eBAyeGv0exc",
    "orgUnit": "DiszpKrYNg8",
    "eventDate": "2013-05-17",
    "status": "COMPLETED",
    "storedBy": "admin",
    "coordinate": {
      "latitude": "59.8",
      "longitude": "10.9"
    },
    "dataValues": [
      {
        "dataElement": "qrur9Dvnyt5", 
        "value": "22"
      },
      {
        "dataElement": "oZg33kd9taw", 
        "value": "Male"
      }
    ]
  },
  {
    "program": "eBAyeGv0exc",
    "orgUnit": "DiszpKrYNg8",
    "eventDate": "2013-05-17",
    "status": "COMPLETED",
    "storedBy": "admin",
    "coordinate": {
      "latitude": "59.8",
      "longitude": "10.9"
    },
    "dataValues": [
      {
        "dataElement": "qrur9Dvnyt5", 
        "value": "26"
      },
      {
        "dataElement": "oZg33kd9taw", 
        "value": "Female"
      }
    ]
  } ]
}
```

您还可以使用GeoJson在事件上存储任何类型的几何图形。在此处可以看到使用GeoJson代替以前的经度和纬度属性的有效负载示例：

```json
{
  "program": "eBAyeGv0exc",
  "orgUnit": "DiszpKrYNg8",
  "eventDate": "2013-05-17",
  "status": "COMPLETED",
  "storedBy": "admin",
  "geometry": {
    "type": "POINT",
    "coordinates": [59.8, 10.9]
  },
  "dataValues": [
    {
      "dataElement": "qrur9Dvnyt5", 
      "value": "22"
    }, 
    { 
      "dataElement": "oZg33kd9taw", 
      "value": "Male"
    }, 
    {
      "dataElement": "msodh3rEMJa", 
      "value": "2013-05-18"
    }
  ]
}
```

作为导入摘要的一部分，您还将获得标识符
*参考*您刚刚发送的事件，以及* href *元素
指向此事件的服务器位置。下表
描述每个元素的含义。

<table>
<caption>活动资源格式</caption>
<colgroup>
<col style="width: 13%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 30%" />
<col style="width: 38%" />
</colgroup>
<thead>
<tr class="header">
<th>参数</th>
<th>类型</th>
<th>必填</th>
<th>选项（默认为第一个）</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>程序</td>
<td>字符串</td>
<td>true</td>
<td></td>
<td>无注册程序的单个活动的标识符</td>
</tr>
<tr class="even">
<td>orgUnit</td>
<td>字符串</td>
<td>true</td>
<td></td>
<td>发生事件的组织部门的标识符</td>
</tr>
<tr class="odd">
<td>事件日期</td>
<td>日期</td>
<td>true</td>
<td></td>
<td>事件发生的日期</td>
</tr>
<tr class="even">
<td>完成日期</td>
<td>日期</td>
<td>假</td>
<td></td>
<td>事件完成的日期。如果未提供，则选择当前日期作为事件完成日期</td>
</tr>
<tr class="odd">
<td>状态</td>
<td>枚举</td>
<td>假</td>
<td>活动 |已完成 |访问 |时间表|逾期|已跳过</td>
<td>活动是否完成</td>
</tr>
<tr class="even">
<td>存储者</td>
<td>字符串</td>
<td>假</td>
<td>默认为当前用户</td>
<td>谁存储了此事件（可以是用户名、系统名称等）</td>
</tr>
<tr class="odd">
<td>坐标</td>
<td>双</td>
<td>假</td>
<td></td>
<td>指事件发生的地理位置（纬度和经度）</td>
</tr>
<tr class="even">
<td>dataElement</td>
<td>字符串</td>
<td>true</td>
<td></td>
<td>数据元素标识符</td>
</tr>
<tr class="odd">
<td>值</td>
<td>字符串</td>
<td>true</td>
<td></td>
<td>此事件的数据值或度量</td>
</tr>
</tbody>
</table>

##### OrgUnit匹配 { #orgunit-matching } 

默认情况下，orgUnit参数将与
ID，您还可以使用来选择orgUnit ID匹配方案
参数orgUnitIdScheme = SCHEME，其中选项为：* ID *，* UID *，
* UUID *，* CODE *和* NAME *。还有* ATTRIBUTE：*方案，
在*唯一*元数据属性值上匹配。

#### 更新事件 { #webapi_updating_events } 

 <!--DHIS2-SECTION-ID:webapi_updating_events-->

要更新现有事件，有效载荷的格式是相同的，但是
您要发布到的URL必须将标识符添加到URL的末尾
字符串，并且请求必须为PUT。

有效负载必须包含所有甚至未经修改的属性。
以前存在的属性和当前不存在的属性
有效负载将被系统删除。

不允许更新已删除的事件。同样适用
跟踪实体实例和注册。

```bash
curl -X PUT -d @updated_event.xml "localhost/api/33/events/ID"
  -H "Content-Type: application/xml" -u admin:district
```

```bash
curl -X PUT -d @updated_event.json "localhost/api/33/events/ID"
  -H "Content-Type: application/json" -u admin:district
```

#### 删除活动 { #webapi_deleting_events } 

 <!--DHIS2-SECTION-ID:webapi_deleting_events-->

要删除现有事件，您只需发送一个DELETE请求
带有指向您正在使用的服务器的标识符引用。

```bash
curl -X DELETE "localhost/api/33/events/ID" -u admin:district
```

#### 为用户分配事件 { #webapi_user_assign_event } 

 <!--DHIS2-SECTION-ID:webapi_user_assign_event-->

可以将用户分配给事件。这可以通过在更新或创建事件时在有效负载中包含适当的属性来完成。

      “ assignedUser”：“ <id>”

id是指用户的if。一次只能为一个事件分配一个用户。

必须先在程序阶段启用用户分配，然后才能将用户分配给事件。
#### 获取事件 { #webapi_getting_events } 

 <!--DHIS2-SECTION-ID:webapi_getting_events-->

要获取现有事件，您可以发出GET请求，包括
标识符如下：

```bash
curl "http://localhost/api/33/events/ID" -H "Content-Type: application/xml" -u admin:district
```

#### 查询和阅读事件 { #webapi_querying_reading_events } 

 <!--DHIS2-SECTION-ID:webapi_querying_reading_events-->

本节说明如何读取已存储的事件
在DHIS2实例中。有关事件数据的更高级用法，请
请参阅事件分析部分。来自的输出格式
* / api / events *端点将匹配用于发送事件的格式
对其（分析事件API不支持）。 XML和
通过添加.json / .xml或通过设置
适当的* Accept *标头。默认情况下该查询是分页的，
默认页面大小为50个事件，*字段*过滤与
元数据，添加* fields *参数并包括所需的属性，
即*？fields = program，status *。

 <table>
 <caption> 事件资源查询参数 </caption>
 <thead>
 <tr class="header">
 <th> 密钥 </th>
 <th> </th>型
 <th> 需要 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 程序 </td>
 <td> 标识符 </td>
 <td> 真（如果没有提供 programStage） </td>
 <td> 程序标识符 </td>
 </tr>
 <tr class="even">
 <td> programStage </td>
 <td> 标识符 </td>
 <td> 假 </td>
 <td> 程序阶段标识符 </td>
 </tr>
 <tr class="odd">
 <td> 程序状态 </td>
 <td> 枚举 </td>
 <td> 假 </td>
 <td> 程序中事件的状态，可以是 ACTIVE |已完成 |取消 </td>
 </tr>
 <tr class="even">
 <td> 跟进 </td>
 <td> 布尔值 </td>
 <td> 假 </td>
 <td> 程序中是否考虑事件跟进，可以为真|错误或省略。 </td>
 </tr>
 <tr class="odd">
 <td> 跟踪实体实例 </td>
 <td> 标识符 </td>
 <td> 假 </td>
 <td> 被跟踪实体实例的标识符 </td>
 </tr>
 <tr class="even">
 <td> 组织单位 </td>
 <td> 标识符 </td>
 <td> 真 </td>
 <td> 组织单元标识符 </td>
 </tr>
 <tr class="odd">
 <td> ouMode </td>
 <td> 枚举 </td>
 <td> 假 </td>
 <td> 组织单位选择模式，可以选择 |儿童 |后代 </td>
 </tr>
 <tr class="even">
 <td> 开始日期 </td>
 <td> 日期 </td>
 <td> 假 </td>
 <td> 仅此日期之后的事件 </td>
 </tr>
 <tr class="odd">
 <td> 结束日期 </td>
 <td> 日期 </td>
 <td> 假 </td>
 <td> 仅早于此日期的事件 </td>
 </tr>
 <tr class="even">
 <td> 状态 </td>
 <td> 枚举 </td>
 <td> 假 </td>
 <td> 事件状态，可以是ACTIVE |已完成 |访问 |预定 |逾期 |跳过 </td>
 </tr>
 <tr class="odd">
 <td> lastUpdatedStartDate </td>
 <td> 日期 </td>
 <td> 假 </td>
 <td> 过滤此日期之后更新的事件。不能与 <em> lastUpdatedDuration </em> 一起使用。 </td>
 </tr>
 <tr class="even">
 <td> lastUpdatedEndDate </td>
 <td> 日期 </td>
 <td> 假 </td>
 <td> 过滤截至此日期更新的事件。不能与 <em> lastUpdatedDuration </em> 一起使用。 </td>
 </tr>
 <tr class="odd">
 <td> lastUpdatedDuration </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 仅包括在给定持续时间内更新的项目。格式为 <value> <time-unit> ，其中支持的时间单位为“d”（天）、“h”（小时）、“m”（分钟）和“s”（秒）。不能与 <em> lastUpdatedStartDate </em> 和/或 <em> lastUpdatedEndDate </em> 一起使用。 </td>
 </tr>
 <tr class="even">
 <td> skipMeta </td>
 <td> 布尔值 </td>
 <td> 假 </td>
 <td> 排除响应的元数据部分（提高性能）</td>
 </tr>
 <tr class="odd">
 <td> 页面 </td>
 <td> 整数 </td>
 <td> 假 </td>
 <td> 页码 </td>
 </tr>
 <tr class="even">
 <td> 页面大小 </td>
 <td> 整数 </td>
 <td> 假 </td>
 <td> 每页的项目数 </td>
 </tr>
 <tr class="odd">
 <td> 总页数 </td>
 <td> 布尔值 </td>
 <td> 假 </td>
 <td> 指示是否在分页响应中包含总页数。 </td>
 </tr>
 <tr class="even">
 <td> 跳过分页 </td>
 <td> 布尔值 </td>
 <td> 假 </td>
 <td> 查询中是否跳过分页，返回所有事件。 </td>
 </tr>
 <tr class="odd">
 <td> dataElementIdScheme </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 用于导出的数据元素 ID 方案，有效选项为 UID、CODE 和 ATTRIBUTE：{ID} </td>
 </tr>
 <tr class="even">
 <td> categoryOptionComboIdScheme </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 用于导出的类别选项组合 ID 方案，有效选项为 UID、CODE 和
属性：{ID} </td>
 </tr>
 <tr class="odd">
 <td> orgUnitIdScheme </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 用于导出的组织单元 ID 方案，有效选项为 UID、CODE 和
属性：{ID} </td>
 </tr>
 <tr class="even">
 <td> programIdScheme </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 用于导出的程序 ID 方案，有效选项为 UID、CODE 和 ATTRIBUTE：{ID} </td>
 </tr>
 <tr class="odd">
 <td> programStageIdScheme </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 用于导出的程序阶段 ID 方案，有效选项为 UID、CODE 和 ATTRIBUTE：{ID} </td>
 </tr>
 <tr class="even">
 <td> idScheme </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 允许为数据元素、类别选项组合、组织单位、程序和程序设置 id 方案
立即上台。 </td>
 </tr>
 <tr class="odd">
 <td> 订单 </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 从 API 检索事件的顺序。用法：order=&lt;property&gt;:asc/desc - 默认为升序。
 <p> 属性：事件 |程序|节目舞台 |招生|注册状态 |组织单位 |组织单位名称 |跟踪实体实例 |活动日期 |跟进 |状态 |到期日 |存储者 |创建 |最后更新 |完成者 |完成日期 </p>
 <pre> <code> order=orgUnitName:DESC </code> </pre>
 <pre> <code> order=lastUpdated:ASC </code> </pre> </td>
 </tr>
 <tr class="even">
 <td> 事件 </td>
 <td> 逗号分隔的字符串 </td>
 <td> 假 </td>
 <td> 使用 <em> event=id1;id2 </em> 将结果过滤到一组有限的 ID。 </td>
 </tr>
 <tr class="odd">
 <td> skipEventId </td>
 <td> 布尔值 </td>
 <td> 假 </td>
 <td> 跳过响应中的事件标识符 </td>
 </tr>
 <tr class="even">
 <td> attributeCc (**) </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 属性类别组合标识符（必须与 <em> 属性Cos </em> 组合） </td>
 </tr>
 <tr class="odd">
 <td> 属性Cos (**) </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 属性类别选项标识符，以 ; 分隔（必须与 <em> attributeCc </em> 结合） </td>
 </tr>
 <tr class="even">
 <td> 异步 </td>
 <td> 假 |真 </td>
 <td> 假 </td>
 <td> 指示导入是异步还是同步。 </td>
 </tr>
 <tr class="odd">
 <td> 包括已删除 </td>
 <td> 布尔值 </td>
 <td> 假 </td>
 <td> 当为 true 时，软删除事件将包含在您的查询结果中。 </td>
 </tr>
 <tr class="even">
 <td> 分配的用户模式 </td>
 <td> 枚举 </td>
 <td> 假 </td>
 <td> 分配的用户选择模式，可以是 CURRENT |提供 |无 |任何。 </td>
 </tr>
 <tr class="odd">
 <td> 分配用户 </td>
 <td> 逗号分隔的字符串 </td>
 <td> 假 </td>
 <td> 使用 <em>assignedUser=id1;id2 </em> 将结果过滤为分配给给定用户 ID 的有限事件集。仅当assignedUserMode 为PROVIDED 或null 时才会考虑此参数。 API 将出错，例如，如果assignedUserMode=CURRENT 和assignedUser=someId </td>
 </tr>
 </tbody>
 </table>

> **注意**
>
>如果查询既不包含`attributeCC`也不包含`attributeCos`，则服务器将为用户具有读取访问权限的所有属性选项组合返回事件。

##### 例子 { #examples } 

查询具有特定组织单位的子级的所有事件：

    /api/29/events.json?orgUnit=YuQRtpLP10I&ouMode=CHILDREN

查询与某个组织的所有后代有关的所有事件
单位，表示子层次结构中的所有组织单位：

    /api/33/events.json?orgUnit=O6uvpzGd5pu&ouMode=DESCENDANTS

使用特定程序和组织单位查询所有事件：

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc

使用特定程序和组织单位查询所有事件，
按到期日排序
    上升：

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&order=dueDate

在某个程序中查询具有最新事件日期的10个事件
和组织单位-通过按到期日降序进行分页和排序：

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc
      ＆order = eventDate：desc＆pageSize = 10＆page = 1

使用特定程序和组织单位查询所有事件
特定的跟踪实体实例：

    /api/33/events.json?orgUnit=DiszpKrYNg8
      ＆program = eBAyeGv0exc＆trackedEntityInstance = gfVxE3ALA9m

使用特定的程序和组织单位查询所有事件
等于
    2014-02-03：

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&endDate=2014-02-03

查询具有特定程序阶段，组织单位和
2014年的跟踪实体实例：

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc
      ＆trackedEntityInstance = gfVxE3ALA9m＆startDate = 2014-01-01＆endDate = 2014-12-31

与事件数据值关联的查询文件。在获取图像文件的特定情况下，
可以提供其他参数以获取具有不同尺寸的图像。如果尺寸为
未提供，系统将返回原始图像。在以下情况下，该参数将被忽略
提取非图像文件，例如pdf。可能的尺寸值为* small（254 x 254），
中（512 x 512），大（1024 x 1024）或原始*。除上述值外，其他任何值均
丢弃并返回原始图像。

    / api / 33 / events / files？eventUid = hcmcWlYkg9u＆dataElementUid = C0W4aFuVm4P＆dimension = small

使用指定的组织单位和程序检索事件，并使用_Attribute：Gq0oWTf2DtN_作为
标识符方案

    / api / events？orgUnit = DiszpKrYNg8＆program = lxAQ7Zs9VYR＆idScheme =属性：Gq0oWTf2DtN

使用指定的组织单位和程序检索事件，并使用UID作为标识符方案
orgUnits，以代码作为程序阶段的标识符方案，并以_Attribute：Gq0oWTf2DtN_作为标识符
具有分配属性的其余元数据的方案。

    api / events.json？orgUnit = DiszpKrYNg8＆program = lxAQ7Zs9VYR＆idScheme = Attribute：Gq0oWTf2DtN
      ＆orgUnitIdScheme = UID＆programStageIdScheme =代码

#### 事件网格查询 { #event-grid-query } 

除了上述事件查询终点之外，还有一个事件网格
查询端点，其中事件的格式更紧凑
回来。通过与
/api/events/query.json|xml|xls|csv端点。

    / api / 33 / events / query

事件查询和阅读中提到的大多数查询参数
上面的部分在这里有效。但是，由于要返回网格
带有适用于所有行（事件）的特定列集，它
必须指定一个程序阶段。不可能混合
来自不同程序或程序阶段的事件返回。

从单个程序阶段返回事件，也为新事件打开
功能-例如基于事件的排序和搜索
数据元素值。 api / events / query支持此功能。以下是
一些例子

查询以返回仅包含选定数据元素的事件网格
在程序阶段

    /api/33/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk
      ＆dataElement = qrur9Dvnyt5，fWIAEtYVEGk，K6uUAvq500H＆order = lastUpdated：desc
      ＆pageSize = 50＆page = 1＆totalPages = true

查询返回一个事件网格，其中包含一个事件的所有数据元素
程序
    阶段

    /api/33/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk
      ＆includeAllDataElements = true

用于根据数据元素过滤事件的查询
    价值

    /api/33/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk
      ＆filter = qrur9Dvnyt5：GT：20：LT：50

除了过滤之外，以上示例还说明了一个
事实：没有提到要返回的数据元素的事实
在网格中。发生这种情况时，系统默认返回仅返回
在计划阶段标记为“在报告中显示”的那些数据元素
配置。

我们还可以扩展上述查询以返回经过排序的网格（asc | desc）
基于数据元素
    价值

    /api/33/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk
      ＆filter = qrur9Dvnyt5：GT：20：LT：50＆order = qrur9Dvnyt5：desc

#### 事件过滤器 { #webapi_event_filters } 

 <!--DHIS2-SECTION-ID:webapi_event_filters-->

要创建，读取，更新和删除事件过滤器，您需要
可以与* / api / eventFilters *资源进行交互。

    / api / 33 / eventFilters

##### 创建和更新事件过滤器定义 { #create-and-update-an-event-filter-definiton } 

用于在中创建和更新事件过滤器
系统，您将使用* eventFilters *
资源。 * POST *用于创建，* PUT *方法用于更新。事件过滤器定义用于
Tracker Capture应用程序可在其中显示相关的预定义“工作列表”
跟踪器用户界面。

 <table>
 <caption>请求有效负载</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>请求属性</th>
 <th>说明</th>
 <th>示例</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>名称</td>
 <td>过滤器的名称。 </td>
 <td>“名称”：“我的工作清单” </td>
 </tr>
 <tr class="even">
 <td>说明</td>
 <td>过滤器的描述。 </td>
 <td>“ description”：“用于列出分配给我的所有事件”。 </td>
 </tr>
 <tr class="odd">
 <td>程序</td>
 <td>程序的uid。 </td>
 <td>“程序”：“ a3kGcGDCuk6” </td>
 </tr>
 <tr class="even">
 <td>程序阶段</td>
 <td>程序阶段的uid。 </td>
 <td>“ programStage”：“ a3kGcGDCuk6” </td>
 </tr>
 <tr class="even">
 <td> eventQueryCriteria </td>
 <td>包含用于查询，排序和过滤事件的参数的对象。 </td>
 <td>
  “ eventQueryCriteria”：{
    “ organisationUnit”：“ a3kGcGDCuk6”，
    “ status”：“ COMPLETED”，
    “创建日期”： {
      “ from”：“ 2014-05-01”，
      “至”：“ 2019-03-20”
    }，
    “ dataElements”：[“ a3kGcGDCuk6：EQ：1”，“ a3kGcGDCuk6”]，
    “ filters”：[“ a3kGcGDCukuk：EQ：1”]，
    “ programStatus”：“ ACTIVE”，
    “ ouMode”：“已选择”，
    “ assignedUserMode”：“已提供”，
    “ assignedUsers”：[“ a3kGcGDCuk7”，“ a3kGcGDCuk8”]，
    “ followUp”：否，
    “ trackedEntityInstance”：“ a3kGcGDCuk6”，
    “事件”：[“ a3kGcGDCuk7”，“ a3kGcGDCuk8”]，
    “ fields”：“ eventDate，dueDate”，
    “ order”：“ dueDate：asc，createdDate：desc”
  }
 </td>
 </tr>
 </tbody>
 </table>

 <table>
 <caption>事件查询条件定义</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <tbody>
 <tr class="odd">
 <td>跟进</td>
 <td>用于基于注册followUp标志过滤事件。可能的值为true | false。 </td>
 <td>“ followUp”：真</td>
 </tr>
 <tr class="even">
 <td>组织单位</td>
 <td>指定组织单位的uid </td>
 <td>“ organizationUnit”：“ a3kGcGDCuk7” </td>
 </tr>
 <tr class="odd">
 <td> ouMode </td>
 <td>指定OU选择模式。可能的值是SELECTED |儿童|后裔|可访问性|捕获|所有</td>
 <td>“ ouMode”：“已选择” </td>
 </tr>
 <tr class="even">
 <td> AssignedUserMode </td>
 <td>为事件指定分配的用户选择模式。可能的值为CURRENT |提供|无|任何。请参阅下表以了解每个值表示什么。如果设置为PROVIDED（或为null），则将考虑有效负载中的非空AssignedUsers。 </td>
 <td>“ assignedUserMode”：“已提供” </td>
 </tr>
 <tr class="odd">
 <td>已分配用户</td>
 <td>指定事件的分配用户列表。与上面的PROVIDEDsignedUserMode一起使用。 </td>
 <td>“ assignedUsers”：[“ a3kGcGDCuk7”，“ a3kGcGDCuk8”] </td>
 </tr>
 <tr class="even">
 <td> displayOrderColumns </td>
 <td>指定列</td>的输出顺序
 <td>“ displayOrderColumns”：[“ eventDate”，“ dueDate”，“ program”] </td>
 </tr>
 <tr class="odd">
 <td>订单</td>
 <td>以逗号分隔值指定字段的排序/排序及其方向。单个项目的顺序为“ dataItem：direction”。 </td>
 <td>“ order” =“ a3kGcGDCuk6：desc，eventDate：asc” </td>
 </tr>
 <tr class="even">
 <td>数据过滤器</td>
 <td>指定在列出事件时要应用的过滤器</td>
 <td>“ dataFilters” = [{
      “ dataItem”：“ abcDataElementUid”，
      “ le”：“ 20”，
      “ ge”：“ 10”，
      “ lt”：“ 20”，
      “ gt”：“ 10”，
      “在”：[“印度”，“挪威”]，
      “ like”：“ abc”，
      “ dateFilter”：{
        “ startDate”：“ 2014-05-01”，
        “ endDate”：“ 2019-03-20”，
        “ startBuffer”：-5，
        “ endBuffer”：5
        “ period”：“ LAST_WEEK”，
        “ type”：“ RELATIVE”
      }
    }] </td>
 </tr>
 <tr class="odd">
 <td>状态</td>
 <td>任何有效的EventStatus </td>
 <td>“ eventStatus”：“已完成” </td>
 </tr>
 <tr class="even">
 <td>事件</td>
 <td>指定事件列表</td>
 <td>“事件” = [“ a3kGcGDCuk6”] </td>
 </tr>
 <tr class="odd">
 <td>完成日期</td>
 <td> DateFilterPeriod对象基于完成日期的日期过滤。 </td>
 <td>
  “ completedDate”：{
    “ startDate”：“ 2014-05-01”，
    “ endDate”：“ 2019-03-20”，
    “ startBuffer”：-5，
    “ endBuffer”：5
    “ period”：“ LAST_WEEK”，
    “ type”：“ RELATIVE”
  }
 </td>
 </tr>
 <tr class="even">
 <td>事件日期</td>
 <td> DateFilterPeriod基于事件日期的对象日期过滤。 </td>
 <td>
  “活动日期”： {
    “ startBuffer”：-5，
    “ endBuffer”：5
    “ type”：“ RELATIVE”
  }
 </td>
 </tr>
 <tr class="odd">
 <td>到期日期</td>
 <td> DateFilterPeriod对象基于到期日期的日期过滤。 </td>
 <td>
  “到期日”： {
    “ period”：“ LAST_WEEK”，
    “ type”：“ RELATIVE”
  }
 </td>
 </tr>
 <tr class="even">
 <td> lastUpdatedDate </td>
 <td> DateFilterPeriod对象基于最近更新的日期进行日期过滤。 </td>
 <td>
  “ lastUpdatedDate”：{
    “ startDate”：“ 2014-05-01”，
    “ endDate”：“ 2019-03-20”，
    “ type”：“绝对”
  }
 </td>
 </tr>

 </tbody>
 </table>

 <table>
 <caption> DateFilterPeriod对象定义</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <tbody>
 <tr class="odd">
 <td>类型</td>
 指定日期期间类型是否为ABSOLUTE | <td>相关</td>
 <td>“ type”：“ RELATIVE” </td>
 </tr>
 <tr class="even">
 <td>周期</td>
 <td>指定是否使用相对系统定义的时间段。仅在“类型”为相对时适用。 （有关支持的相对周期，请参见<a href="#webapi_date_relative_period_values">相对周期</a>）</td>
 <td>“句点”：“ THIS_WEEK” </td>
 </tr>
 <tr class="odd">
 <td>开始日期</td>
 <td>绝对开始日期。仅当“类型”为绝对值时才适用</td>
 <td>“ startDate”：“ 2014-05-01” </td>
 </tr>
 <tr class="even">
 <td>结束日期</td>
 <td>绝对结束日期。仅当“类型”为绝对值时才适用</td>
 <td>“ startDate”：“ 2014-05-01” </td>
 </tr>
 <tr class="odd">
 <td> startBuffer </td>
 <td>相对的自定义开始日期。仅在“类型”为相对</td>时适用
 <td>“ startBuffer”：-10 </td>
 </tr>
 <tr class="even">
 <td> endBuffer </td>
 <td>相对自定义结束日期。仅在“类型”为相对</td>时适用
 <td>“ startDate”：+ 10 </td>
 </tr>
 </tbody>
 </table>

可用的分配的用户选择模式在
下表。

 <table>
 <caption>分配的用户选择模式（事件分配）</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 79%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>模式</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>当前</td>
 <td>分配给当前登录的用户</td>
 </tr>
 <tr class="even">
 <td>提供了</td>
 <td>分配给“ assignedUser”参数中提供的用户</td>
 </tr>
 <tr class="odd">
 <td>无</td>
 <td>分配给任何用户。 </td>
 </tr>
 <tr class="even">
 <td>任意</td>
 <td>分配给任何用户。 </td>
 </tr>
 </tbody>
 </table>

下面显示了可用于创建/更新eventFilter的示例有效负载。

```json
{
  "program": "ur1Edk5Oe2n",
  "description": "Simple Filter for TB events",
  "name": "TB events",
  "eventQueryCriteria": {
    "organisationUnit":"DiszpKrYNg8",
    "eventStatus": "COMPLETED",
    "eventDate": {
      "startDate": "2014-05-01",
      "endDate": "2019-03-20",
      "startBuffer": -5,
      "endBuffer": 5,
      "period": "LAST_WEEK",
      "type": "RELATIVE"
    },
    "dataFilters": [{
      "dataItem": "abcDataElementUid",
      "le": "20",
      "ge": "10",
      "lt": "20",
      "gt": "10",
      "in": ["India", "Norway"],
      "like": "abc"
    },
    {
      "dataItem": "dateDataElementUid",
      "dateFilter": {
        "startDate": "2014-05-01",
        "endDate": "2019-03-20",
        "type": "ABSOLUTE"
      }
    },
    {
      "dataItem": "anotherDateDataElementUid",
      "dateFilter": {
        "startBuffer": -5,
        "endBuffer": 5,
        "type": "RELATIVE"
      }
    },
    {
      "dataItem": "yetAnotherDateDataElementUid",
      "dateFilter": {
        "period": "LAST_WEEK",
        "type": "RELATIVE"
      }
    }],
    "programStatus": "ACTIVE"
  }
}
```


##### 检索和删除事件过滤器 { #retrieving-and-deleting-event-filters } 

可以使用以下api检索特定的事件过滤器

    GET / api / 33 / eventFilters / {uid}

可以使用以下api检索所有事件过滤器。

    GET / api / 33 / eventFilters？fields = *

可以使用以下api检索特定程序的所有事件过滤器

    GET / api / 33 / eventFilters？filter = program：eq：IpHINAT79UW

可以使用以下API删除事件过滤器

    删除/ api / 33 / eventFilters / {uid}

### 人际关系 { #relationships } 
关系是跟踪器中两个实体之间的链接。这些实体可以跟踪实体实例，注册和事件。

有多个端点，可让您查看，创建，删除和更新关系。最常见的是/ api / trackedEntityInstances端点，您可以在其中将关系包括在有效负载中以创建，更新或删除它们（如果忽略它们）-类似于在同一端点中处理注册和事件的方式。如果在字段过滤器中请求，所有跟踪器端点，/ api / trackedEntityInstances，/ api / enrollments和/ api / events也会列出它们的关系。

但是，关系的标准端点是/ api / relationships。该端点为关系提供所有正常的CRUD操作。

列出所有关系要求您提供要列出以下所有关系的trackedEntityInstance，注册或事件的UID：

    GET / api / relationships？tei = ABCDEF12345
    GET / api / relationships？enrollment = ABCDEF12345
    GET / api / relationships？event = ABCDEF12345

该请求将返回您有权访问的任何关系的列表，其中包括您指定的trackedEntityInstance，注册或事件。每个关系都使用以下JSON表示：

```json
{
  "relationshipType": "dDrh5UyCyvQ",
  "relationshipName": "Mother-Child",
  "relationship": "t0HIBrc65Rm",
  "bidirectional": false,
  "from": {
    "trackedEntityInstance": {
      "trackedEntityInstance": "vOxUH373fy5"
    }
  },
  "to": {
    "trackedEntityInstance": {
      "trackedEntityInstance": "pybd813kIWx"
    }
  },
  "created": "2019-04-26T09:30:56.267",
  "lastUpdated": "2019-04-26T09:30:56.267"
}
```

您还可以使用以下端点查看指定的关系：

    GET / api / relationships / <id>

要创建或更新关系，可以使用以下端点：

    POST / api / relationships
    PUT / api /关系

并使用以下有效负载结构：

```json
{
  "relationshipType": "dDrh5UyCyvQ",
  "from": {
    "trackedEntityInstance": {
      "trackedEntityInstance": "vOxUH373fy5"
    }
  },
  "to": {
    "trackedEntityInstance": {
      "trackedEntityInstance": "pybd813kIWx"
    }
  }
}
```

要删除关系，可以使用以下端点：

      删除/ api / relationships / <id>

在示例有效负载中，我们使用trackedEntityInstances之间的关系。因此，有效负载的“从”和“到”属性包括“ trackedEntityInstance”对象。如果您的关系包括其他实体，则可以使用以下属性：

```json
{
  "enrollment": {
    "enrollment": "<id>"
  }
}
```

```json
{
  "event": {
    "event": "<id>"
  }
}
```

### 更新策略 { #webapi_tei_update_strategies } 

 <!--DHIS2-SECTION-ID:webapi_tei_update_strategies-->

支持所有3个跟踪器端点的两种更新策略：
注册和事件创建。当您生成一个
客户端上的标识符，不确定是否已创建
在服务器上。

 <table>
 <caption>可用的跟踪器策略</caption>
 <colgroup>
 <col style="width: 24%" />
 <col style="width: 75%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>创建</td>
 <td>仅创建，这是默认行为。 </td>
 </tr>
 <tr class="even">
 <td> CREATE_AND_UPDATE </td>
 <td>尝试匹配该ID（如果存在），然后更新（如果未创建）。 </td>
 </tr>
 </tbody>
 </table>

要更改参数，请使用策略参数：

    POST / api / 33 / trackedEntityInstances？strategy = CREATE_AND_UPDATE

### 跟踪器批量删除 { #webapi_tracker_bulk_deletion } 

 <!--DHIS2-SECTION-ID:webapi_tracker_bulk_deletion-->

批量删除跟踪器对象的工作方式与添加和删除跟踪器对象的方式类似
更新跟踪器对象，唯一的不同是
`importStrategy`是*DELETE*。

*示例：跟踪实体实例的批量删除：*

```json
{
  "trackedEntityInstances": [
    {
      "trackedEntityInstance": "ID1"
    }, { 
      "trackedEntityInstance": "ID2"
    }, { 
      "trackedEntityInstance": "ID3"
    }
  ]
}
```

```bash
curl -X POST -d @data.json -H "Content-Type: application/json"
  "http://server/api/33/trackedEntityInstances?strategy=DELETE"
```

*例如：批量删除注册：*

```json
{
  "enrollments": [
    {
       "enrollment": "ID1"
    }, { 
      "enrollment": "ID2" 
    }, { 
      "enrollment": "ID3"
    }
  ]
}
```

```bash
curl -X POST -d @data.json -H "Content-Type: application/json"
  "http://server/api/33/enrollments?strategy=DELETE"
```

*示例：批量删除事件：*

```json
{
  "events": [
    {
      "event": "ID1"
    }, { 
      "event": "ID2"
    }, { 
      "event": "ID3"
    }
  ]
}
```

```bash
curl -X POST -d @data.json -H "Content-Type: application/json"
  "http://server/api/33/events?strategy=DELETE"
```

### 通过POST和PUT方法重复使用标识符和删除项目 { #webapi_updating_and_deleting_items } 

 <!--DHIS2-SECTION-ID:webapi_updating_and_deleting_items-->

跟踪器端点* / trackedEntityInstances *，* /注册*，* /事件*
支持CRUD操作。系统跟踪使用的标识符。
因此，已创建然后删除的项目（例如事件，
报名）不能再次创建或更新。如果尝试删除
已经删除的项目，系统返回成功响应
删除已经删除的项目意味着没有任何更改。

系统不允许通过更新（* PUT *）删除项目或
创建（* POST *）方法。因此，属性* deleted *被忽略
* PUT *和* POST *方法，并且在* POST *方法中默认设置
为* false *。

### 导入参数 { #webapi_import_parameters } 

 <!--DHIS2-SECTION-ID:webapi_import_parameters-->

可以使用一组导入参数来自定义导入过程：

 <table>
 <caption> 导入参数 </caption>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 值（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> dataElementIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射数据值的数据元素对象的属性。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射数据值的组织单位对象的属性。 </td>
 </tr>
 <tr class="odd">
 <td> idScheme </td>
 <td> id |姓名 |代码|属性：ID </td>
 <td> 所有对象的属性，包括数据元素、组织单位和类别选项组合，用于映射数据值。 </td>
 </tr>
 <tr class="even">
 <td> dryRun </td>
 <td> 假 |真 </td>
 <td> 是在服务器上保存更改还是只返回导入摘要。 </td>
 </tr>
 <tr class="odd">
 <td> 策略 </td>
 <td> 创建 |更新 | CREATE_AND_UPDATE |删除 </td>
 <td> 在服务器上保存所有对象、新对象或更新导入状态。 </td>
 </tr>
 <tr class="even">
 <td> 跳过通知 </td>
 <td> 真|假 </td>
 <td> 指示是否发送已完成事件的通知。 </td>
 </tr>
 <tr class="odd">
 <td> 跳过第一个 </td>
 <td> 真|假 </td>
 <td> 仅与 CSV 导入相关。指示 CSV 文件是否包含应跳过的标题行。 </td>
 </tr>
 <tr class="even">
 <td> importReportMode </td>
 <td> 已满，错误，调试 </td>
 <td> 设置`ImportReport`模式，控制导入完成后返回多少。 `ERRORS` 仅包括 <em> ObjectReports </em> 用于有错误的对象。 `FULL` 为所有导入的对象返回一个 <em> ObjectReport </em>，并且 `DEBUG` 返回相同的加上对象的名称（如果可用）。 </td>
 </tr>
 </tbody>
 </table>

#### CSV导入/导出 { #webapi_events_csv_import_export } 

 <!--DHIS2-SECTION-ID:webapi_events_csv_import_export-->

除了用于事件导入/导出的XML和JSON，在DHIS2.17中，我们
引入了对CSV格式的支持。对这种格式的支持建立在
上一节中描述的内容，因此在这里我们只写
什么是CSV特定部分。

要使用CSV格式，您必须使用* / api / events.csv *
端点，或添加*内容类型：text / csv *进行导入，并*接受：
使用* / api / events *端点时要导出的text / csv *。

CSV中用于导出和导入的列顺序
如下：

 <table>
 <caption> CSV 列 </caption>
 <thead>
 <tr class="header">
 <th> 索引 </th>
 <th> 密钥 </th>
 <th> </th>型
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 1 </td>
 <td> 事件 </td>
 <td> 标识符 </td>
 <td> 事件标识符 </td>
 </tr>
 <tr class="even">
 <td> 2 </td>
 <td> 状态 </td>
 <td> 枚举 </td>
 <td> 事件状态，可以是ACTIVE |已完成 |访问 |预定 |逾期 |跳过 </td>
 </tr>
 <tr class="odd">
 <td> 3 </td>
 <td> 程序 </td>
 <td> 标识符 </td>
 <td> 程序标识符 </td>
 </tr>
 <tr class="even">
 <td> 4 </td>
 <td> programStage </td>
 <td> 标识符 </td>
 <td> 程序阶段标识符 </td>
 </tr>
 <tr class="odd">
 <td> 5 </td>
 <td> 注册 </td>
 <td> 标识符 </td>
 <td> 注册标识符（程序实例） </td>
 </tr>
 <tr class="even">
 <td> 6 </td>
 <td> 组织单位 </td>
 <td> 标识符 </td>
 <td> 组织单元标识符 </td>
 </tr>
 <tr class="odd">
 <td> 7 </td>
 <td> eventDate </td>
 <td> 日期 </td>
 <td> 事件日期 </td>
 </tr>
 <tr class="even">
 <td> 8 </td>
 <td> 到期日期 </td>
 <td> 日期 </td>
 <td> 到期日 </td>
 </tr>
 <tr class="odd">
 <td> 9 </td>
 <td> 纬度 </td>
 <td> 双 </td>
 <td> 事件发生的纬度 </td>
 </tr>
 <tr class="even">
 <td> 10 </td>
 <td> 经度 </td>
 <td> 双 </td>
 <td> 事件发生的经度 </td>
 </tr>
 <tr class="odd">
 <td> 11 </td>
 <td> 数据元素 </td>
 <td> 标识符 </td>
 <td> 数据元素的标识符 </td>
 </tr>
 <tr class="even">
 <td> 12 </td>
 <td> 值 </td>
 <td> 字符串 </td>
 <td> 事件的值/度量 </td>
 </tr>
 <tr class="odd">
 <td> 13 </td>
 <td> 由 </td> 存储
 <td> 字符串 </td>
 <td> 事件由（默认为当前用户）存储 </td>
 </tr>
 <tr class="even">
 <td> 14 </td>
 <td> 提供其他地方 </td>
 <td> 布尔值 </td>
 <td> 这个值是不是在其他地方收集的 </td>
 </tr>
 <tr class="odd">
 <td> 14 </td>
 <td> 完成日期 </td>
 <td> 日期 </td>
 <td> 事件完成日期 </td>
 </tr>
 <tr class="even">
 <td> 14 </td>
 <td>已完成</td>
 <td> 字符串 </td>
 <td> 完成事件的用户的用户名 </td>
 </tr>
 </tbody>
 </table>

*具有2个不同数据值的2个事件的示例
    每个：*

```csv
EJNxP3WreNP，COMPLETED，<pid>，<psid>，<enrollment-id>，<ou>，2016-01-01,2016-01-01 ,,, <de>，1 ,,
EJNxP3WreNP，COMPLETED，<pid>，<psid>，<enrollment-id>，<ou>，2016-01-01,2016-01-01 ,,, <de>，2 ,,
qPEdI1xn7k0，COMPLETED，<pid>，<psid>，<enrollment-id>，<ou>，2016-01-01,2016-01-01 ,,, <de>，3 ,,
qPEdI1xn7k0，COMPLETED，<pid>，<psid>，<enrollment-id>，<ou>，2016-01-01,2016-01-01 ,,, <de>，4 ,,
```

#### 导入策略：SYNC { #webapi_sync_import_strategy } 

 <!--DHIS2-SECTION-ID:webapi_sync_import_strategy-->

导入策略SYNC应该仅由内部同步使用
任务，而不是定期导入。 SYNC策略允许所有3个
操作：CREATE，UPDATE，DELETE存在于有效负载的
同时。

### 跟踪器所有权管理 { #webapi_tracker_ownership_management } 

 <!--DHIS2-SECTION-ID:webapi_tracker_ownership_management-->

从2.30开始引入了称为“跟踪者所有权”的新概念。那里
现在将成为跟踪实体实例中的一个所有者组织单位
程序的上下文。配置有访问权限的程序
* PROTECTED *或* CLOSED *级别将保留所有权
特权。仅属于所属组织单位的用户
跟踪的实体程序组合将能够访问数据
与该程序有关的那个被跟踪实体。

#### 跟踪器所有权优先：打破常规 { #webapi_tracker_ownership_override_api } 

 <!--DHIS2-SECTION-ID:webapi_tracker_ownership_override_api-->

可以暂时覆盖此所有权特权
配置了* PROTECTED *访问级别的程序。任何使用者
如果能够的话，将能够临时访问与程序相关的数据
用户指定访问跟踪的实体程序的原因
数据。暂时获得访问权限的行为称为*破坏
玻璃*。目前，临时访问权限被授予3个小时。 DHIS2
审核玻璃破裂以及用户指定的原因。
无法暂时访问已被删除的程序。
配置为* CLOSED *访问级别。打破玻璃
跟踪实体程序组合，您可以发出POST请求，
显示：

    / api / 33 / tracker / ownership / override？trackedEntityInstance = DiszpKrYNg8
      ＆program = eBAyeGv0exc＆reason =耐心+显示+急诊+急诊

#### 跟踪器所有权转移 { #webapi_tracker_ownership_transfer_api } 

 <!--DHIS2-SECTION-ID:webapi_tracker_ownership_transfer_api-->

可以转移被跟踪实体程序的所有权
从一个组织单位转移到另一个组织单位。这对患者很有用
推荐或迁移。仅所有者（或破坏了
玻璃）可以转让所有权。转移被跟踪者的所有权
实体程序到另一个组织单位，您可以发出PUT请求
如图所示：

    / api / 33 / tracker /所有权/转让？trackedEntityInstance = DiszpKrYNg8
      ＆program = eBAyeGv0exc＆ou = EJNxP3WreNP


## 潜在重复   { #potential-duplicates } 

潜在的重复项是我们在重复数据删除功能中使用的记录。由于重复数据删除功能的性质，此API端点受到一定程度的限制。

潜在的重复表示怀疑是重复的单个或一对记录。

潜在重复项的有效负载如下所示：

```json
{
  "teiA": "<id>",
  "teiB": "<id>",
  "status": "OPEN|INVALID|MERGED"
}
```

您可以使用以下端点检索可能重复的列表：

    GET / api / potentialDuplicates

另外，您可以检查单个记录：

    GET / api / potentialDuplicates / <id>

要创建新的潜在重复项，可以使用以下端点：

    POST / api / potentialDuplicates

您提供的有效负载至少需要_teiA_才能成为有效的跟踪实体实例； _teiB_是可选的。如果设置了_teiB_，则还需要指向现有的跟踪实体实例。

```json
{
  "teiA": "<id>",
  "teiB": "<id>"
}
```

您可以将潜在的重复标记为_invalid_，以告知系统潜在的重复已被调查并视为不是重复。为此，您可以使用以下端点：

    PUT / api / potentialDuplicates / <id> /无效

要硬删除潜在的重复项：

    删除/ api / potentialDuplicates / <id>

## 电子邮件 { #webapi_email } 

 <!--DHIS2-SECTION-ID:webapi_email-->

Web API具有用于发送电子邮件的资源。为了使电子邮件成为
发送时，需要正确设置SMTP配置
并且DHIS2实例的系统通知电子邮件地址具有
被定义。您可以从电子邮件设置屏幕设置SMTP设置
和“常规设置”屏幕上的系统通知电子邮件地址
在DHIS2中。

    / api / 33 /电子邮件

### 系统通知 { #webapi_email_system_notification } 

 <!--DHIS2-SECTION-ID:webapi_email_system_notification-->

* notification *资源使您可以发送系统电子邮件通知
带有给定主题和文本的JSON或XML。电子邮件将发送至
DHIS2常规系统中定义的通知电子邮件地址
设置：

```json
{
  "subject": "Integrity check summary",
  "text": "All checks ran successfully"
}
```

您可以通过发布到通知来发送系统电子邮件通知
像这样的资源：

```bash
curl -d @email.json "localhost/api/33/email/notification" -X POST 
  -H "Content-Type:application/json" -u admin:district
```

### 出站电子邮件 { #outbound-emails } 

您还可以通过发布到
通知资源如下所述。 `F_SEND_EMAIL` 或 `ALL`
权限必须在系统中才能使用这个 api。主题
参数是可选的。 “DHIS 2”字符串将作为默认主题发送
如果 url 中没有提供。应该对 URL 进行编码才能使用它
应用程序接口。

```bash
curl "localhost/api/33/email/notification?recipients=xyz%40abc.com&message=sample%20email&subject=Test%20Email" 
  -X POST -u admin:district
```

### 测试讯息 { #webapi_email_test_message } 

 <!--DHIS2-SECTION-ID:webapi_email_test_message-->

通过将测试电子邮件发送到来测试SMTP设置是否正确
您可以与* test *资源进行交互。发送测试电子邮件
要求您的DHIS2用户帐户具有有效的电子邮件地址
与之相关。您可以发送如下测试电子邮件：

```bash
curl "localhost/api/33/email/test" -X POST -H "Content-Type:application/json" -u admin:district
```

## 分享中 { #webapi_sharing } 

 <!--DHIS2-SECTION-ID:webapi_sharing-->

共享解决方案使您可以与共享系统中的大多数对象
特定的用户组并定义对象是否应该公开
可访问或私有。要获取并设置对象的共享状态，您可以
与*共享*资源互动。

    / api / 33 / sharing

### 获取共享状态 { #webapi_get_sharing_status } 

 <!--DHIS2-SECTION-ID:webapi_get_sharing_status-->

要请求对象的共享状态，请使用GET请求执行以下操作：

    / api / 33 / sharing？type = dataElement＆id = fbfJHSPpUQD

响应如下所示。

```json
{
  "meta": {
    "allowPublicAccess": true,
    "allowExternalAccess": false
  },
  "object": {
    "id": "fbfJHSPpUQD",
    "name": "ANC 1st visit",
    "publicAccess": "rw------",
    "externalAccess": false,
    "user": {},
    "userGroupAccesses": [
      {
        "id": "hj0nnsVsPLU",
        "access": "rw------"
      },
      {
        "id": "qMjBflJMOfB",
        "access": "r-------"
      }
    ]
  }
}
```

### 设定分享状态 { #webapi_set_sharing_status } 

 <!--DHIS2-SECTION-ID:webapi_set_sharing_status-->

您可以使用与以下网址相同的网址来定义对象的共享状态：
POST请求，JSON格式的有效负载如下所示：

```json
{
  "object": {
    "publicAccess": "rw------",
    "externalAccess": false,
    "user": {},
    "userGroupAccesses": [
      {
        "id": "hj0nnsVsPLU",
        "access": "rw------"
      },
      {
        "id": "qMjBflJMOfB",
        "access": "r-------"
      }
    ]
  }
}
```

在此示例中，有效负载将对象定义为可读写
公共访问，无外部访问（无需登录），对以下项具有读写访问权限
一个用户组，并以只读方式访问另一用户组。你可以
使用curl将其提交到共享资源：

```bash
curl -d @sharing.json "localhost/api/33/sharing?type=dataElement&id=fbfJHSPpUQD"
  -H "Content-Type:application/json" -u admin:district
```

## 排程 { #webapi_scheduling } 

 <!--DHIS2-SECTION-ID:webapi_scheduling-->

DHIS2允许安排各种类型的作业。每种类型的作业都有不同的配置属性，可让您更好地控制作业的运行方式。此外，如果需要，您可以将同一作业配置为以不同的配置和不同的时间间隔运行。

<table>
<caption>主要属性</caption>
<thead>
<tr class="header">
<th>属性</th>
<th>说明</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>名称</td>
<td>作业名称。</td>
<td>字符串</td>
</tr>
<tr class="even">
<td>cronExpression</td>
<td>cron 表达式，定义作业运行的时间间隔。有关详细信息，请参阅[cron 表达式参考](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm)。</td>
<td>字符串（Cron 表达式）</td>
</tr>
<tr class="odd">
<td>工作类型</td>
<td>作业类型表示运行的任务。在下表中，您可以了解现有作业类型的概述。每种作业类型都可以有一组特定的作业配置参数。</td>
<td>字符串（枚举）</td>
</tr>
<tr class="even">
<td>jobParameters</td>
<td>作业参数（如果适用于作业类型）。</td>
<td>（查看职位类型列表）</td>
</tr>
<tr class="odd">
<td>连续执行</td>
<td>作业可以添加为连续作业，这意味着作业完成后，将立即安排再次运行。您可以在负载中将 `ContinousExecution` 设置为 true，以便作业连续运行。</td>
<td>布尔值</td>
</tr>
<tr class="even">
<td>已启用</td>
<td>通过在 JSON 负载中将 `enabled` 设置为 false，可以将作业添加到系统中，而无需进行调度。如果您想暂时停止调度作业，或者作业配置尚未完成，请使用此选项。</td>
<td>布尔值</td>
</tr>
</tbody>
</table>

<table>
<caption>可用的职位类型</caption>
<thead>
<tr class="header">
<th>职位类型</th>
<th>参数</th>
<th>参数（类型：默认）</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>DATA_INTEGRITY</td>
<td>无</td>
<td></td>
</tr>
<tr class="even">
<td>ANALYTICS_TABLE</td>
<td><ul>
<li><p>lastYears：包含的年份数</p></li>
<li><p>skipTableTypes：跳过生成表</p>
<ul>
<li><p>可能的值：DATA_VALUE、COMLETENESS、COMLETENESS_TARGET、ORG_UNIT_TARGET、EVENT、ENROLLMENT、VALIDATION_RESULT </p></li>
</ul></li>
<li><p>skipResourceTables：跳过生成资源表</p></li>
</ul></td>
<td><ul>
<li><p>lastYears（int:0）</p></li>
<li><p>skipTableTypes（字符串数组（枚举）：无）</p> </li>
<li><p>skipResourceTables（布尔值）</p></li>
</ul></td>
</tr>
<tr class="odd">
<td>DATA_SYNC</td>
<td>无</td>
<td></td>
</tr>
<tr class="even">
<td>META_DATA_SYNC</td>
<td>无</td>
<td></td>
</tr>
<tr class="odd">
<td>SEND_SCHEDULED_MESSAGE</td>
<td>无</td>
<td></td>
</tr>
<tr class="even">
<td>PROGRAM_NOTIFICATIONS</td>
<td>无</td>
<td></td>
</tr>
<tr class="odd">
<td>监控（验证规则分析）</td>
<td><ul>
<li><p>relativeStart：与执行日期相关的数字，类似于要监控的周期的开始时间</p></li>
<li><p>relativeEnd：与执行日期相关的数字，类似于要监控的周期结束时间</p></li>
<li><p>validationRuleGroups：要包含在作业中的验证规则组(UID)</p></li>
<li><p>sendNotification：设置&quot;true&quot; 作业是否应根据验证规则组发送通知</p></li>
<li><p>persistsResults：设置&quot;true&quot; 作业是否应保留验证结果</p></li>
</ul></td>
<td><ul>
<li><p>relativeStart (int:0)</p></li>
<li><p>relativeEnd (int:0)</p></li>
<li><p>validationRuleGroups（字符串数组 (UID)：无）</p> </li>
<li><p>sendNotification（布尔值：false）</p></li>
<li><p>persistsResults（布尔值：false）</p></li>
</ul></td>
</tr>
<tr class="even">
<td>PUSH_ANALYSIS</td>
<td><ul>
<li><p>pushAnalysis：您要运行的推送分析的 uid</p></li>
</ul></td>
<td><ul>
<li><p>pushAnalysis（字符串：无）</p></li>
</ul></td>
</tr>
<tr class="odd">
<td>预测器</td>
<td><ul>
<li><p>relativeStart：与执行日期相关的数字，类似于要监控的周期的开始时间</p></li>
<li><p>relativeEnd：与执行日期相关的数字，类似于要监控的周期的开始时间</p></li>
<li><p>预测变量：要包含在作业中的预测变量 (UID)</p></li>
</ul></td>
<td><ul>
<li><p>relativeStart (int:0)</p></li>
<li><p>relativeEnd (int:0)</p></li>
<li><p>预测变量（字符串数组 (UID)：无）</p> </li>
</ul></td>
</tr>
</tbody>
</table>

要配置作业，您可以对以下资源发出POST请求：

    / api / jobConfigurations

添加不带JSON格式参数的作业：

```json
{
  "name": "",
  "jobType": "JOBTYPE",
  "cronExpression": "0 * * ? * *",
}
```

使用JSON格式的参数添加作业（ANALYTICS_TABLE示例）：

```json
{
  "name": "Analytics last two years",
  "jobType": "ANALYTICS_TABLE",
  "cronExpression": "0 * * ? * *",
  "jobParameters":
  {
    "lastYears": "2",
    "skipTableTypes": [],
    "skipResourceTables": false
  }
}
```

使用JSON格式的参数添加作业（PUSH_ANALYSIS示例）：

```json
 {
   "name": "test-push-anlysis-chart",
   "jobType": "PUSH_ANALYSIS",
   "cronExpression": "0 * * ? * *",
   "jobParameters": {
     "pushAnalysis": [
       "jtcMAKhWwnc"
     ]
    }
 }
```

列出所有jobConfigurations：

    GET / api / jobConfigurations

检索作业：（ANALYTICS_TABLE示例）：

    GET / api / jobConfigurations / KBcP6Qw37gT

```json
{
  "lastUpdated": "2018-02-22T15:15:34.067",
  "id": "KBcP6Qw37gT",
  "href": "http://localhost:8080/api/jobConfigurations/KBcP6Qw37gT",
  "created": "2018-02-22T15:15:34.067",
  "name": "analytics last two years",
  "jobStatus": "SCHEDULED",
  "displayName": "analytics last two years",
  "enabled": true,
  "externalAccess": false,
  "continuousExecution": false,
  "jobType": "ANALYTICS_TABLE",
  "nextExecutionTime": "2018-02-26T03:00:00.000",
  "cronExpression": "0 0 3 ? * MON",
  "jobParameters": {
    "lastYears": 2,
    "skipTableTypes": [],
    "skipResourceTables": false
  },
  "favorite": false,
  "configurable": true,
  "access": {
    "read": true,
    "update": true,
    "externalize": true,
    "delete": true,
    "write": true,
    "manage": true
  },
  "lastUpdatedBy": {
    "id": "GOLswS44mh8"
  },
  "favorites": [],
  "translations": [],
  "userGroupAccesses": [],
  "attributeValues": [],
  "userAccesses": []
}
```

使用JSON格式的参数更新作业（ANALYTICS_TABLE示例）：

    PUT / api / jobConfiguration / KBcP6Qw37gT

```json
{
  "name": "analytics last two years",
  "enabled": true,
  "cronExpression": "0 0 3 ? * MON",
  "continuousExecution": false,
  "jobType": "ANALYTICS_TABLE",
  "jobParameters": {
    "lastYears": "3",
    "skipTableTypes": [],
    "skipResourceTables": false
  }
}
```

删除工作：

    删除/ api / jobConfiguration / KBcP6Qw37gT

如果使用自定义配置参数，则某些作业可能无法添加。
未配置所需的系统设置。数据的一个例子
同步，这需要远程服务器配置。

## 架构图 { #webapi_schema } 

 <!--DHIS2-SECTION-ID:webapi_schema-->

可用于内省所有可用DXF 2对象的资源
可以在* / api / schemas *上找到。对于特定资源，您可以
查看* / api / schemas / TYPE *。

要获取XML中所有可用的模式：

    GET /api/schemas.xml

要获取JSON中所有可用的模式，请执行以下操作：

    GET /api/schemas.json

要获取特定类的JSON模式：

    GET /api/schemas/dataElement.json

## 用户界面定制 { #webapi_ui_customization } 

 <!--DHIS2-SECTION-ID:webapi_ui_customization-->

要自定义DHIS2应用程序的UI，您可以插入自定义
通过* files *资源的JavaScript和CSS样式。 JavaScript
并且通过此资源插入的CSS内容将由
DHIS2 Web应用程序。在某些情况下这可能特别有用
情况：

  - 覆盖DHIS2应用程序的CSS样式，例如
    登录页面或主页。

  - 定义几个自定义通用的JavaScript函数
    数据输入表单和基于HTML的报告。

  - 包括自定义数据输入表单中使用的CSS样式和
    基于HTML的报告。

### Java脚本 { #webapi_customization_javascript } 

 <!--DHIS2-SECTION-ID:webapi_customization_javascript-->

要从名为* script.js *的文件中插入Javascript，您可以进行交互
使用带有POST请求的* files / script *资源：

```bash
curl --data-binary @script.js "localhost/api/33/files/script"
  -H "Content-Type:application/javascript" -u admin:district
```

请注意，我们使用 `--data-binary` 选项来保留格式
文件内容。您可以使用 GET 请求获取 JavaScript 内容：

    / api / 33 / files / script

要删除JavaScript内容，可以使用DELETE请求。

### 的CSS { #webapi_customization_css } 

 <!--DHIS2-SECTION-ID:webapi_customization_css-->

要从名为* style.css *的文件中插入CSS，您可以与
具有POST请求的*文件/样式*资源：

```bash
curl --data-binary @style.css "localhost/api/33/files/style"
  -H "Content-Type:text/css" -u admin:district
```

您可以通过GET请求获取CSS内容：

    / api / 33 / files / style

要删除JavaScript内容，您可以使用DELETE-e“请求。

## 同步化 { #webapi_synchronization } 

 <!--DHIS2-SECTION-ID:webapi_synchronization-->

本节介绍数据和元数据的提取和推送。

### 数据值推送 { #webapi_sync_data_push } 

 <!--DHIS2-SECTION-ID:webapi_sync_data_push-->

要启动将数据值推送到远程服务器，必须首先配置
系统设置>相关服务器的URL和凭据
同步，然后向以下资源发出POST请求：

    / api / 33 / synchronization / dataPush

### 元数据拉取 { #webapi_sync_metadata_pull } 

 <!--DHIS2-SECTION-ID:webapi_sync_metadata_pull-->

要从远程JSON文档启动元数据提取，您可以创建一个
带有* url *作为以下资源的请求有效负载的POST请求：

    / api / 33 / synchronization / metadataPull

### 可用性检查 { #webapi_sync_availability_check } 

 <!--DHIS2-SECTION-ID:webapi_sync_availability_check-->

检查远程数据服务器的可用性并验证用户
您可以向以下资源发出GET请求的凭据：

    / api / 33 /同步/可用性

## 应用 { #webapi_apps } 

 <!--DHIS2-SECTION-ID:webapi_apps-->

* / api / apps *端点可用于安装，删除和
列出应用程序。应用程序密钥基于应用程序名称，但包含所有
删除非字母数字字符，并用短划线代替空格。
*我的应用程序！*将返回密钥*我的应用程序*。

> **注意**
>
>在2.28之前，应用密钥是从ZIP的名称派生的
>存档，不包括文件扩展名。使用旧格式的网址
>仍应在api中返回正确的应用。

    / api / 33 / apps

### 获取应用 { #webapi_get_apps } 

 <!--DHIS2-SECTION-ID:webapi_get_apps-->

> **注意**
>
> 2.28之前的应用程序属性folderName指的是实际
>已安装应用程序的路径。具有将应用程序存储在云中的能力
>服务，folderName的用途已更改，现在将引用该应用程序
>键。

您可以通过列出应用程序中的所有应用程序来阅读应用程序的键
资源并查找* key *属性。列出所有已安装的应用程序
JSON：

```bash
curl -u user:pass -H "Accept: application/json" "http://server.com/api/33/apps"
```

您也可以简单地将Web浏览器指向资源URL：

    http://server.com/api/33/apps

还可以通过应用类型和名称来过滤应用列表，方法是附加
URL的一个或多个* filter *参数：

    http://server.com/api/33/apps?filter=appType:eq:DASHBOARD_APP&filter=name:ilike:youtube

应用名称支持* eq *和* ilike *过滤器运算符，而* appType *
仅支持* eq *。

### 安装应用 { #webapi_install_app } 

 <!--DHIS2-SECTION-ID:webapi_install_app-->

要安装应用程序，可以发出以下命令：

```bash
curl -X POST -u user:pass -F file=@app.zip "http://server.com/api/33/apps"
```

### 删除应用 { #webapi_delete_app } 

 <!--DHIS2-SECTION-ID:webapi_delete_app-->

要删除一个应用程序，您可以发出以下命令：

```bash
curl -X DELETE -u user:pass "http://server.com/api/33/apps/<app-key>"
```

### 重新加载应用 { #webapi_reload_apps } 

 <!--DHIS2-SECTION-ID:webapi_reload_apps-->

要强制重新加载当前安装的应用，您可以发出
以下命令。如果您直接手动添加文件，这将很有用
到文件系统，而不是通过DHIS2用户上传
界面。

```bash
curl -X PUT -u user:pass "http://server.com/api/33/apps"
```

### 在实例之间共享应用 { #webapi_share_apps_between_instances } 

 <!--DHIS2-SECTION-ID:webapi_share_apps_between_instances-->

如果DHIS2实例已配置为使用云存储，则应用
现在将安装并存储在云服务上。这将启用
多个实例在已安装的应用程序上共享相同的版本，而不是
在每个实例上安装相同的应用程序。

> **注意**
>
> 2.28之前的版本，已安装的应用程序将仅存储在实例的
>本地文件系统。在2.28之前安装的应用仍可在
>实例已安装，但不会与其他实例共享
>实例，因为它仍然位于实例本地文件系统上。

## 应用商店 { #webapi_app_store } 

 <!--DHIS2-SECTION-ID:webapi_app_store-->

Web API将DHIS2 App Store的内容公开为JSON
可以在`/ api / appStore`资源中找到的表示形式。

    / api / 33 / appStore

### 获取应用 { #webapi_get_app_store_apps } 

 <!--DHIS2-SECTION-ID:webapi_get_app_store_apps-->

您可以使用GET请求检索应用程序：

    GET / api / 33 / appStore

JSON响应示例如下所述。

```json
{
  [
    {
      "name": "Tabular Tracker Capture",
      "description": "Tabular Tracker Capture is an app that makes you more effective.",
      "sourceUrl": "https://github.com/dhis2/App-repository",
      "appType": "DASHBOARD_WIDGET",
      "status": "PENDING",
      "id": "NSD06BVoV21",
      "developer": {
        "name": "DHIS",
        "organisation": "Uio",
        "address": "Oslo",
        "email": "dhis@abc.com",
      },
      "versions": [
        {
          "id": "upAPqrVgwK6",
          "version": "1.2",
          "minDhisVersion": "2.17",
          "maxDhisVersion": "2.20",
          "downloadUrl": "https://dhis2.org/download/appstore/tabular-capture-12.zip",
          "demoUrl": "http://play.dhis2.org/demo"
        }
      ],
      "images": [
        {
          "id": "upAPqrVgwK6",
          "logo": "true",
          "imageUrl": "https://dhis2.org/download/appstore/tabular-capture-12.png",
          "description": "added feature snapshot",
          "caption": "dialog",
        }
      ]
    }
  ]
}
```

### 安装应用 { #webapi_install_app_store_apps } 

 <!--DHIS2-SECTION-ID:webapi_install_app_store_apps-->

您可以在DHIS2实例上安装应用程序，前提是您拥有
适当的权限。使用`id`属性引用应用
该应用程序的相关版本。带有POST的应用程序已安装
请求版本ID到以下资源：

    POST / api / 33 / appStore / {app-version-id}

## 数据存储 { #webapi_data_store } 

 <!--DHIS2-SECTION-ID:webapi_data_store-->

使用* dataStore *资源，开发人员可以存储任意数据以用于
他们的应用。对数据存储区密钥的访问基于其共享设置。
默认情况下，所有创建的密钥都可以公开访问（读取和写入）。
此外，对数据存储区名称空间的访问仅限于用户的
（如果应用程序已保留了名称空间）访问相应的应用程序。
例如，有权访问“ sampleApp”应用程序的用户也将
能够使用数据存储区中的sampleApp命名空间。如果命名空间
未保留，则不需要特定访问权限即可使用它。

    / api / 33 / dataStore

### 数据存储结构 { #webapi_data_store_structure } 

 <!--DHIS2-SECTION-ID:webapi_data_store_structure-->

数据存储条目由名称空间，键和值组成。这
名称空间和键的组合是唯一的。值数据类型为JSON。

 <table>
 <caption> 数据存储结构 </caption>
 <colgroup>
 <col style="width: 22%" />
 <col style="width: 40%" />
 <col style="width: 36%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 项目 </th>
 <th> 说明 </th>
 <th> 数据类型 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 命名空间 </td>
 <td> 条目组织的命名空间。 </td>
 <td> 字符串 </td>
 </tr>
 <tr class="even">
 <td> 密钥 </td>
 <td> 用于识别值的键。 </td>
 <td> 字符串 </td>
 </tr>
 <tr class="odd">
 <td> 值 </td>
 <td> 保存条目信息的值。 </td>
 <td> JSON </td>
 </tr>
 <tr class="even">
 <td> 加密 </td>
 <td> 指示是否应加密给定密钥的值 </td>
 <td> 布尔值 </td>
 </tr>
 </tbody>
 </table>

### 获取键和名称空间 { #webapi_data_store_get_keys_and_namespaces } 

 <!--DHIS2-SECTION-ID:webapi_data_store_get_keys_and_namespaces-->

有关所有现有名称空间的列表：

    GET / api / 33 / dataStore

清单示例curl请求：

```bash
curl "play.dhis2.org/demo/api/33/dataStore" -u admin:district
```

响应示例：

```json
[
  "foo",
  "bar"
]
```

有关命名空间中所有键的列表：

    GET / api / 33 / dataStore / <namespace>

清单示例curl请求：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo" -u admin:district
```

响应示例：

```json
[
  "key_1",
  "key_2"
]
```

要从名称空间检索现有键的值：

    GET / api / 33 / dataStore / <namespace> / <key>

卷曲请求检索示例：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo/key_1"-u admin:district
```

响应示例：

```json
{
  "foo":"bar"
}
```

要从名称空间检索现有键的元数据：

    GET / api / 33 / dataStore / <namespace> / <key> / metaData

卷曲请求检索示例：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo/key_1/metaData" -u admin:district
```

响应示例：

```json
{
  "created": "...",
  "user": {...},
  "namespace": "foo",
  "key": "key_1"
}
```

### 创造价值 { #webapi_data_store_create_values } 

 <!--DHIS2-SECTION-ID:webapi_data_store_create_values-->

为命名空间创建新的键和值：

    POST / api / 33 / dataStore / <namespace> / <key>

假设有效的JSON有效负载，创建示例的curl请求：

```bash
curl "https://play.dhis2.org/demo/api/33/dataStore/foo/key_1" -X POST
  -H "Content-Type: application/json" -d "{\"foo\":\"bar\"}" -u admin:district
```

响应示例：

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 201,
  "status": "OK",
  "message": "Key 'key_1' created."
}
```

如果您要求对存储的数据进行加密（例如，用户
凭证或类似凭证），您可以像这样将查询附加到网址：

    GET / api / 33 / dataStore / <namespace> / <key>？encrypt = true

### 更新值 { #webapi_data_store_update_values } 

 <!--DHIS2-SECTION-ID:webapi_data_store_update_values-->

更新命名空间中存在的密钥：

    PUT / api / 33 / dataStore / <namespace> / <key>

假设有效的JSON有效负载，示例curl请求更新：

```bash
curl "https://play.dhis2.org/demo/api/33/dataStore/foo/key_1" -X PUT -d "[1, 2, 3]"
  -H "Content-Type: application/json" -u admin:district
```

响应示例：

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Key 'key_1' updated."
}
```

### 删除键 { #webapi_data_store_delete_keys } 

 <!--DHIS2-SECTION-ID:webapi_data_store_delete_keys-->

要从名称空间中删除现有键：

    删除/ api / 33 / dataStore / <namespace> / <key>

删除示例curl请求：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo/key_1" -X DELETE -u admin:district
```

响应示例：

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Key 'key_1' deleted from namespace 'foo'."
}
```

要删除名称空间中的所有键：

    删除/ api / 33 / dataStore / <namespace>

删除示例curl请求：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo" -X DELETE -u admin:district
```

响应示例：

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Namespace 'foo' deleted."
}
```

### 共享数据存储区密钥 { #webapi_data_store_sharing } 

 <!--DHIS2-SECTION-ID:webapi_data_store_sharing-->

共享数据存储区密钥遵循与其他元数据共享相同的原则（请参阅
[分享]（＃webapi_sharing））。

要获取特定数据存储区密钥的共享设置，请执行以下操作：

    GET / api / 33 / sharing？type = dataStore＆id = <uid>

要修改特定数据存储项的共享设置：

    POST / api / 33 / sharing？type = dataStore＆id = <uid>

具有以下要求：

```json
{
  "object": {
    "publicAccess": "rw------",
    "externalAccess": false,
    "user": {},
    "userAccesses": [],
    "userGroupAccesses": [
      {
        "id": "hj0nnsVsPLU",
        "access": "rw------"
      },
      {
        "id": "qMjBflJMOfB",
        "access": "r-------"
      }
    ]
  }
}
```

## 用户数据存储 { #webapi_user_data_store } 

 <!--DHIS2-SECTION-ID:webapi_user_data_store-->

除了在所有用户之间共享的* dataStore *
在系统中，还可以使用基于用户的数据存储。数据存储到
* userDataStore *与单个用户相关联，因此每个用户
在同一个名称空间和键组合上可以有不同的数据。全部
对* userDataStore *的调用将与已登录
用户。这意味着只能看到，更改，删除和添加值
与当前登录用户关联。

    / api / 33 / userDataStore

### 用户数据存储结构 { #webapi_user_data_store_structure } 

 <!--DHIS2-SECTION-ID:webapi_user_data_store_structure-->

* userDataStore *由用户，名称空间，键和相关联的内容组成
价值观。用户，名称空间和密钥的组合是唯一的。

 <table>
 <caption>用户数据存储结构</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>项目</th>
 <th>说明</th>
 <th>数据类型</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>用户</td>
 <td>用户此数据与</td>相关联
 <td>字符串</td>
 </tr>
 <tr class="even">
 <td>命名空间</td>
 <td>密钥所属的名称空间</td>
 <td>字符串</td>
 </tr>
 <tr class="odd">
 <td>键</td>
 <td>密钥a值存储在</td>上
 <td>字符串</td>
 </tr>
 <tr class="even">
 <td>值</td>
 <td>存储的值</td>
 JSON <td> </td>
 </tr>
 <tr class="odd">
 <td>加密的</td>
 <td>指示是否应加密该值</td>
 <td>布尔值</td>
 </tr>
 </tbody>
 </table>

### 获取名称空间 { #webapi_user_data_store_get_namespaces } 

 <!--DHIS2-SECTION-ID:webapi_user_data_store_get_namespaces-->

返回所有现有名称空间的数组

    GET / api / 33 / userDataStore

例子
    要求：

```bash
curl -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/33/userDataStore"
```

```json
[
  "foo",
  "bar"
]
```

### 取得金钥 { #webapi_user_data_store_get_keys } 

 <!--DHIS2-SECTION-ID:webapi_user_data_store_get_keys-->

返回给定名称空间中所有现有键的数组

    GET / api / userDataStore / <namespace>

请求示例：

```bash
curl -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/33/userDataStore/foo"
```

```json
[
  "key_1",
  "key_2"
]
```

### 获取价值 { #webapi_user_data_store_get_values } 

 <!--DHIS2-SECTION-ID:webapi_user_data_store_get_values-->

返回给定名称空间和键的值

    GET / api / 33 / userDataStore / <namespace> / <key>

请求示例：

```bash
curl -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
  "some": "value"
}
```

### 创造价值 { #webapi_user_data_store_create_values } 

 <!--DHIS2-SECTION-ID:webapi_user_data_store_create_values-->

向给定名称空间中的给定键添加新值。

    POST / api / 33 / userDataStore / <namespace> / <key>

请求示例：

```bash
curl -X POST -H "Content-Type: application/json" -u admin:district -d "['some value']"
  "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
  "httpStatus": "Created",
  "httpStatusCode": 201,
  "status": "OK",
  "message": "Key 'bar' in namespace 'foo' created."
}
```

如果您要求加密该值（例如，用户凭据
等等），您可以像这样将查询附加到网址：

    GET / api / 33 / userDataStore / <namespace> / <key>？encrypt = true

### 更新值 { #webapi_user_data_store_update_values } 

 <!--DHIS2-SECTION-ID:webapi_user_data_store_update_values-->

更新现有值

    PUT / api / 33 / userDataStore / <namespace> / <key>

请求示例：

```bash
curl -X PUT -H "Content-Type: application/json" -u admin:district -d "['new value']"
  "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
  "httpStatus":"Created",
  "httpStatusCode":201,
  "status":"OK",
  "message":"Key 'bar' in namespace 'foo' updated."
}
```

### 删除键 { #webapi_user_data_store_delete_key } 

 <!--DHIS2-SECTION-ID:webapi_user_data_store_delete_key-->

删除金钥

    删除/ api / 33 / userDataStore / <namespace> / <key>

请求示例：

```bash
curl -X DELETE -u admin:district "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
  "httpStatus":"OK",
  "httpStatusCode":200,
  "status":"OK",
  "message":"Key 'bar' deleted from the namespace 'foo."
}
```

### 删除名称空间 { #webapi_user_data_store_delete_namespace } 

 <!--DHIS2-SECTION-ID:webapi_user_data_store_delete_namespace-->

删除给定名称空间中的所有键

    删除/ api / 33 / userDataStore / <namespace>

请求示例：

```bash
curl -X DELETE -u admin:district "play.dhis2.org/api/33/userDataStore/foo"
```

```json
{
  "httpStatus":"OK",
  "httpStatusCode":200,
  "status":"OK",
  "message":"All keys from namespace 'foo' deleted."
}
```

## 预测变量 { #webapi_predictors } 

 <!--DHIS2-SECTION-ID:webapi_predictors-->

预测变量使您可以基于表达式生成数据值。
这可用于生成目标，阈值和估计值。
您可以通过* / api / 33 / predictors *与预测变量进行交互
资源。

    / api / 33 / predictors

### 创建预测变量 { #webapi_create_predictor } 

 <!--DHIS2-SECTION-ID:webapi_create_predictor-->

您可以通过对预测变量的POST请求来创建预测变量
资源：

    POST / api / 33 / predictors

有效负载样本如下所示：

```json
{
  "id": "AG10KUJCrRk",
  "name": "Malaria Outbreak Threshold Predictor",
  "shortName": "Malaria Outbreak Predictor",
  "description": "Computes the threshold for potential malaria outbreaks based on the mean plus 1.5x the std dev",
  "output": {
    "id": "nXJJZNVAy0Y"
  },
  "generator": {
    "expression": "AVG(#{r6nrJANOqMw})+1.5*STDDEV(#{r6nrJANOqMw})",
    "dataElements": [],
    "sampleElements": [{
      "id": "r6nrJANOqMw"
    }]
  },
  "periodType": "Monthly",
  "sequentialSampleCount": 4,
  "sequentialSkipCount": 1,
  "annualSampleCount": 3,
  "organisationUnitLevels": [4]
}
```

输出元素引用数据元素的标识符，用于
保存预测数据值。生成器元素是指
计算预测值时要使用的表达式。

### 生成预测值 { #webapi_generating_predicted_values } 

 <!--DHIS2-SECTION-ID:webapi_generating_predicted_values-->

要运行所有预测变量（生成预测值），您可以进行POST
对运行资源的请求：

    POST / api / 33 / predictors / run

要运行单个预测变量，您可以向运行发出POST请求
预测变量的资源：

    POST / api / 33 / predictors / AG10KUJCrRk / run

## 最小-最大数据元素 { #webapi_min_max_data_elements } 

 <!--DHIS2-SECTION-ID:webapi_min_max_data_elements-->

最小-最大数据元素资源允许您设置最小和最大
数据元素的值范围。通过结合独特
组织单位，数据元素和类别选项组合。

    / api / minMaxDataElements

 <table>
 <caption> 最小-最大数据元素数据结构 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 项目 </th>
 <th> 说明 </th>
 <th> 数据类型 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 源 </td>
 <td> 组织单位标识符 </td>
 <td> 字符串 </td>
 </tr>
 <tr class="even">
 <td> 数据元素 </td>
 <td> 数据元素标识符 </td>
 <td> 字符串 </td>
 </tr>
 <tr class="odd">
 <td> optionCombo </td>
 <td> 数据元素类别选项组合标识符 </td>
 <td> 字符串 </td>
 </tr>
 <tr class="even">
 <td> 分钟 </td>
 <td> 最小值 </td>
 <td> 整数 </td>
 </tr>
 <tr class="odd">
 <td> 最大 </td>
 <td> 最大值 </td>
 <td> 整数 </td>
 </tr>
 <tr class="even">
 <td> 生成 </td>
 <td> 表示该对象是否由系统生成（而非手动设置）。 </td>
 <td> 布尔值 </td>
 </tr>
 </tbody>
 </table>

您可以从以下位置检索所有最小-最大数据元素的列表
资源：

    GET /api/minMaxDataElements.json

您可以像这样过滤响应：

    GET /api/minMaxDataElements.json?filter=dataElement.id:eq:UOlfIjgN8X6

    GET /api/minMaxDataElements.json?filter=dataElement.id:in:[UOlfIjgN8X6,xc8gmAKfO95]

最小-最大数据元素的filter参数支持两个运算符：
eq和in。您还可以使用`fields`查询参数。

    GET /api/minMaxDataElements.json?fields=:all,dataElement[id,name]

### 添加/更新最小-最大数据元素 { #webapi_add_update_min_max_data_element } 

 <!--DHIS2-SECTION-ID:webapi_add_update_min_max_data_element-->

要添加新的最小-最大数据元素，请使用POST请求执行以下操作：

    POST /api/minMaxDataElements.json

JSON内容格式如下所示：

```json
{
  "min": 1,
  "generated": false,
  "max": 100,
  "dataElement": {
    "id": "UOlfIjgN8X6"
   },
  "source": {
    "id": "DiszpKrYNg8"
  },
  "optionCombo": {
    "id": "psbwp3CQEhs"
  }
}
```

如果是数据元素，组织单位和类别的组合
如果存在选项组合，则将更新最小-最大值。

### 删除最小-最大数据元素 { #webapi_delete_min_max_data_element } 

 <!--DHIS2-SECTION-ID:webapi_delete_min_max_data_element-->

要删除最小-最大数据元素，请使用DELETE方法发送请求：

    删除/api/minMaxDataElements.json

JSON内容的格式与上述类似：

```json
{
  "min": 1,
  "generated": false,
  "max": 100,
  "dataElement": {
    "id": "UOlfIjgN8X6"
   },
  "source": {
    "id": "DiszpKrYNg8"
  },
  "optionCombo": {
    "id": "psbwp3CQEhs"
  }
}
```

## 锁定异常 { #webapi_lock_exceptions } 

 <!--DHIS2-SECTION-ID:webapi_lock_exceptions-->

锁定异常资源允许您打开否则锁定的数据
用于特定数据集，期间和组织的数据输入集
单元。您可以从以下资源中读取锁异常：

    / api / lockExceptions

要创建新的锁例外，您可以使用POST请求并指定
数据集，期间和组织单位：

    POST / api / lockExceptions？ds = BfMAe6Itzgt＆pe = 201709＆ou = DiszpKrYNg8

要删除锁定异常，您可以将类似的请求语法与
删除请求：

    删除/ api / lockExceptions？ds = BfMAe6Itzgt＆pe = 201709＆ou = DiszpKrYNg8

## 代币 { #webapi_tokens } 

 <!--DHIS2-SECTION-ID:webapi_tokens-->

* tokens *资源提供对各种服务的访问令牌。

### Google服务帐号 { #webapi_tokens_google_service_account } 

 <!--DHIS2-SECTION-ID:webapi_tokens_google_service_account-->

您可以使用以下网址检索Google服务帐户OAuth 2.0访问令牌：
GET请求到以下资源。

    GET / api / tokens / google

令牌将在一定时间内有效，之后
必须从该资源请求另一个令牌。响应
包含一个与令牌过期匹配的缓存控制标头。这
响应将包含JSON格式的以下属性。

 <table>
 <caption>令牌响应</caption>
 <colgroup>
 <col style="width: 40%" />
 <col style="width: 59%" />
 </colgroup>
 <thead>
 <tr class="header">
 属性<th> </th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> access_token </td>
 <td>针对Google服务进行身份验证时要使用的OAuth 2.0访问令牌。 </td>
 </tr>
 <tr class="even">
 <td> expires_in </td>
 <td>直到访问令牌到期的秒数，通常为3600秒（1小时）。 </td>
 </tr>
 <tr class="odd">
 <td> client_id </td>
 <td> Google服务帐户客户端ID。 </td>
 </tr>
 </tbody>
 </table>

前提是已设置Google服务帐户，
为DHIS2配置。请参阅安装指南以了解更多信息
信息。

## 分析表挂钩 { #webapi_analytics_table_hooks } 

 <!--DHIS2-SECTION-ID:webapi_analytics_table_hooks-->

Analytics表挂钩提供了调用SQL脚本的机制
在分析表生成过程的不同阶段。这
可用于自定义资源和分析表中的数据，例如在
为了实现用于计算和聚合的特定逻辑。
可以在以下API端点上操作Analytics（分析）表挂钩：

    / api / analyticsTableHooks

分析表挂钩API支持标准的HTTP CRUD操作
用于创建（POST），更新（PUT），检索（GET）和删除
（删除）实体。

### 钩场 { #webapi_analytics_table_hook_fields } 

 <!--DHIS2-SECTION-ID:webapi_analytics_table_hook_fields-->

Analytics表挂钩具有以下字段：

<table style="width:100%;">
<caption>Analytics table hook fields</caption>
<colgroup>
<col style="width: 22%" />
<col style="width: 30%" />
<col style="width: 46%" />
</colgroup>
<thead>
<tr class="header">
<th>Field</th>
<th>Options</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>name</td>
<td>Text</td>
<td>Name of the hook.</td>
</tr>
<tr class="even">
<td>phase</td>
<td>RESOURCE_TABLE_POPULATED, ANALYTICS_TABLE_POPULATED</td>
<td>The phase for when the SQL script should be invoked.</td>
</tr>
<tr class="odd">
<td>resourceTableType</td>
<td><p>See column &quot;Table type&quot; in table &quot;Phases, table types and temporary tables&quot; below</p></td>
<td>The type of resource table for which to invoke the SQL script. Applies only for hooks defined with the RESOURCE_TABLE_POPULATED phase.</td>
</tr>
<tr class="even">
<td>analyticsTableType</td>
<td>See column &quot;Table type&quot; in table &quot;Phases, table types and temporary tables&quot; below</td>
<td>The type of analytics table for which to invoke the SQL script. Applies only for hooks defined with the ANALYTICS_TABLE_POPULATED phase.</td>
</tr>
<tr class="odd">
<td>sql</td>
<td>Text</td>
<td>The SQL script to invoke.</td>
</tr>
</tbody>
</table>

* ANALYTICS_TABLE_POPULATED *阶段发生在分析之后
表已被填充，但是在创建索引之前，
临时表已与主表交换。结果，SQL
脚本应引用分析临时表，例如* analytics_temp *，
* analytics_completeness_temp *。

这也适用于* RESOURCE_TABLE_POPULATED *阶段，该阶段需要
放置在资源表之后，但索引之前
已创建，并且临时表已与主表交换
桌子。因此，SQL脚本应引用资源临时文件。
桌子，例如* _orgunitstructure_temp *，* _ categorystructure_temp *。

您应该只定义* resourceTableType *和
* analyticsTableType *字段，具体取决于定义的* phase *。

您可以参考与
仅指定挂钩表类型（其他临时表不会
可用的）。例如，如果您指定* ORG_UNIT_STRUCTURE *作为
资源表类型，您可以参考* _orgunitstructure_temp *
仅临时数据库表。

下表显示了阶段，表类型的有效组合
和临时表。

 <table>
 <caption> 阶段、表类型和临时表 </caption>
 <colgroup>
 <col style="width: 27%" />
 <col style="width: 39%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 相 </th>
 <th> 表型 </th>
 <th> 临时表 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td rowspan="12"> RESOURCE_TABLE_POPULATED </td>
 <td> ORG_UNIT_STRUCTURE </td>
 <td> _orgunitstructure_temp </td>
 </tr>
 <tr class="even">
 <td> DATA_SET_ORG_UNIT_CATEGORY </td>
 <td> _datasetorgunitcategory_temp </td>
 </tr>
 <tr class="odd">
 <td> CATEGORY_OPTION_COMBO_NAME </td>
 <td> _categoryoptioncomboname_temp </td>
 </tr>
 <tr class="even">
 <td> DATA_ELEMENT_GROUP_SET_STRUCTURE </td>
 <td> _dataelementgroupsetstructure_temp </td>
 </tr>
 <tr class="odd">
 <td> INDICATOR_GROUP_SET_STRUCTURE </td>
 <td> _indicatorgroupsetstructure_temp </td>
 </tr>
 <tr class="even">
 <td> ORG_UNIT_GROUP_SET_STRUCTURE </td>
 <td> _organisationunitgroupsetstructure_temp </td>
 </tr>
 <tr class="odd">
 <td> CATEGORY_STRUCTURE </td>
 <td> _categorystructure_temp </td>
 </tr>
 <tr class="even">
 <td> DATA_ELEMENT_STRUCTURE </td>
 <td> _dataelementstructure_temp </td>
 </tr>
 <tr class="odd">
 <td> PERIOD_STRUCTURE </td>
 <td> _periodstructure_temp </td>
 </tr>
 <tr class="even">
 <td> DATE_PERIOD_STRUCTURE </td>
 <td> _dateperiodstructure_temp </td>
 </tr>
 <tr class="odd">
 <td> DATA_ELEMENT_CATEGORY_OPTION_COMBO </td>
 <td> _dataelementcategoryoptioncombo_temp </td>
 </tr>
 <tr class="even">
 <td> DATA_APPROVAL_MIN_LEVEL </td>
 <td> _dataapprovalminlevel_temp </td>
 </tr>
 <tr class="odd">
 <td rowspan="7"> ANALYTICS_TABLE_POPULATED </td>
 <td> DATA_VALUE </td>
 <td> analytics_temp </td>
 </tr>
 <tr class="even">
 <td> 完整性 </td>
 <td> analytics_completeness_temp </td>
 </tr>
 <tr class="odd">
 <td> COMPLETENESS_TARGET </td>
 <td> analytics_completenesstarget_temp </td>
 </tr>
 <tr class="even">
 <td> ORG_UNIT_TARGET </td>
 <td> analytics_orgunittarget_temp </td>
 </tr>
 <tr class="odd">
 <td> 事件 </td>
 <td> analytics_event_temp_&lt;program-uid&gt; </td>
 </tr>
 <tr class="even">
 <td> 注册 </td>
 <td> analytics_enrollment_temp_&lt;program-uid&gt; </td>
 </tr>
 <tr class="odd">
 <td> VALIDATION_RESULT </td>
 <td> analytics_validationresult_temp </td>
 </tr>
 </tbody>
 </table>

### 创建钩子 { #webapi_create_analytics_table_hook } 

 <!--DHIS2-SECTION-ID:webapi_create_analytics_table_hook-->

创建一个挂钩，该挂钩应在资源表被使用之后运行
您可以使用* JSON *格式执行如下的* POST *请求：

```bash
curl -d @hooks.json "localhost/api/analyticsTableHooks" -H "Content-Type:application/json" -u admin:district
```

```json
{
  "name": "Update 'Area' in org unit group set resource table",
  "phase": "RESOURCE_TABLE_POPULATED",
  "resourceTableType": "ORG_UNIT_GROUP_SET_STRUCTURE",
  "sql": "update _organisationunitgroupsetstructure_temp set \"uIuxlbV1vRT\" = 'b0EsAxm8Nge'"
}
```

创建应在数据值分析表之后运行的挂钩
已被填充，您可以使用* JSON *这样的* POST *请求
格式：

```json
{
  "name": "Update 'Currently on treatment' data in analytics table",
  "phase": "ANALYTICS_TABLE_POPULATED",
  "analyticsTableType": "DATA_VALUE",
  "sql": "update analytics_temp set monthly = '200212' where \"monthly\" in ('200210', '200211')"
}
```

## 元数据存储库 { #webapi_metadata_repository } 

 <!--DHIS2-SECTION-ID:webapi_metadata_repository-->

DHIS2提供了一个元数据存储库，其中包含带有以下内容的元数据包：
各种内容。元数据包是DHIS2兼容的JSON文档
描述了一组元数据对象。

要通过可用的元数据包检索索引，您可以发出
对* metadataRepo *资源的GET请求：

    GET / api / synchronization / metadataRepo

元数据包条目包含有关包的信息以及
相关软件包的URL。索引可能如下所示：

```json
{
  "packages": [
    {
      "id": "sierre-leone-demo",
      "name": "Sierra Leone demo",
      "description": "Sierra Leone demo database",
      "version": "0.1",
      "href": "https://dhis2.org/metadata-repo/221/sierra-leone-demo/metadata.json"
    },
    {
      "id": "trainingland-org-units",
      "name": "Trainingland organisation units",
      "description": "Trainingland organisation units with four levels",
      "version": "0.1",
      "href": "https://dhis2.org/metadata-repo/221/trainingland-org-units/metadata.json"
    }
  ]
}
```

客户端可以遵循URL并通过以下方式安装元数据包：
带有元数据包的内容类型为* text / plain *的POST请求
URL作为* metadataPull *资源的有效负载：

    POST / api / synchronization / metadataPull

curl命令示例如下所示：

```bash
curl "localhost:8080/api/synchronization/metadataPull" -X POST
  -d "https://dhis2.org/metadata-repo/221/trainingland-org-units/metadata.json"
  -H "Content-Type:text/plain" -u admin:district
```

## 图示 { #webapi_icons } 

 <!--DHIS2-SECTION-ID:webapi_icons-->

DHIS2包含可用于提供视觉效果的图标集合
元数据的上下文。这些图标可以通过图标访问
资源。

    GET / api / icons

该端点返回有关可用图标的信息列表。
每个条目均包含有关图标的信息，以及对图标的引用。
实际的图标。

```json
{
  key: "mosquito_outline",
  description: "Mosquito outline",
  keywords: [
    "malaria",
    "mosquito",
    "dengue"
  ],
  href: "<dhis server>/api/icons/mosquito_outline/icon.svg"
}
```

关键字可用于过滤要返回的图标。传递清单
的带有请求的关键字将仅返回与所有
关键字：

    GET / api / icons？keywords = shape，small

可以在关键字资源中找到所有唯一关键字的列表：

    GET / api / icons /关键字
