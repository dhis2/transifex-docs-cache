---
edit_url: "https://github.com/dhis2-metadata/MAL_AGG/blob/master/docs/mal_agg-installation.md"
revision_date: '2022-11-17'
tags:
- 元数据
---

# Malaria Aggregate 安装指南 { #mal-agg-installation }

本文档包括 Malaria 聚合包的安装指南。

系统默认语言：英语

## 总览 { #overview } 

元数据参考和元数据 json 文件提供有关包版本和内容的技术详细信息。

元数据包由以下模块组成：
- 疟疾人机信息系统
- 疟疾 HMIS（仪表板）
- 减少和消除疟疾负担
- 减少和消除疟疾负担（仪表板）
- 疟疾数据质量（仪表板）
- 疟疾 流动人口和移民人口
- 疟疾库存
- 疟疾库存（仪表板）

## 安装 { #installation } 

模块的安装包括以下几个步骤：

1. [使用 DHIS2 元数据准备元数据文件](#preparing-the-metadata-file)。
2. [将元数据文件导入DHIS2](#importing-metadata)。
3. [配置导入的元数据](#configuration)。
4. [导入后调整程序](#adapting-the-program)

建议在 DHIS2 中开始安装和配置过程之前首先阅读安装指南的每个部分。根据导入类型确定适用的部分：

1. 导入到空白 DHIS2 实例
2. 导入具有现有元数据的 DHIS2 实例。

本文档中概述的步骤应在测试/暂存 DHIS2 实例中进行测试，然后才应用于生产环境。

## 要求 { #requirements } 

为了安装该模块，需要 DHIS2 上的管理员用户帐户。

应非常小心地确保服务器本身和 DHIS2 应用程序得到良好的保护，并应定义对所收集数据的访问权限。有关保护 DHIS2 系统安全的详细信息超出了本文档的范围，我们请参阅 [DHIS2 文档](https://docs.dhis2.org/)。

## 元数据文件 { #metadata-files }

尽管并非总是必要，但在将元数据文件导入DHIS2之前对其进行某些修改通常可能是有利的。

## 准备元数据文件 { #preparing-the-metadata-file } 

在导入元数据文件之前，需要对其进行一些更改。工作范围可能因包而异。

### 默认数据维度 { #default-data-dimension } 

在 DHIS2 的早期版本中，默认数据维度的 UID 是自动生成的。因此，虽然所有DHIS2实例都具有默认类别选项、数据元素类别、类别组合和类别选项组合，但这些默认值的UID可以不同。 DHIS2 的更高版本对默认维度进行了硬编码 UID，这些 UID 在配置包中使用。

为了避免导入元数据时发生冲突，建议搜索并替换整个 .json 文件中所有出现的默认对象，将 .json 文件的 UID 替换为要导入该文件的实例中的 UID。表 1 显示了应替换的 UID，以及用于识别现有 UID 的 API 端点

|目的                       | 用户标识           | API端点                                              |
|-----------------------------|---------------|-----------------------------------------------------------|
| 类别                    | `GLevLNI9wkl` | `../api/categories.json?filter=name:eq:default`           |
| 类别选项             | `xYerKDKCefk` | `../api/categoryOptions.json?filter=name:eq:default`      |
| 品类组合        | `bjDvmb4bfuf` | `../api/categoryCombos.json?filter=name:eq:default`       |
| 类别选项组合 | `HllvX50cXC0` | `../api/categoryOptionCombos.json?filter=name:eq:default` |

使用列出的 API 请求识别实例中默认维度的 UID，并将 json 文件中的 UID 替换为实例中的 UID。

> **注意**
>
> 请注意，此搜索和替换操作必须使用纯文本编辑器完成，而不是使用 Microsoft Word 等文字处理程序。

### 指标类型 { #indicator-types } 

指标类型是另一种可能产生导入冲突的对象类型，因为某些名称在不同的 DHIS2 数据库中使用（例如“百分比”）。由于指标类型由其因子定义（包括 1 表示“仅分子”指标），因此它们是明确的，并且可以通过搜索和替换 UID 来替换。此方法有助于避免潜在的导入冲突，并防止实施者创建重复的指标类型。下表包含可以替换的 UID 以及用于识别现有 UID 的 API 端点：

|目的                  | 用户标识           | API端点                                                          |
|------------------------|---------------|-----------------------------------------------------------------------|
| 仅分子（数字）| `CqNPn5KzksS` | `../api/indicatorTypes.json?filter=number:eq:true&filter=factor:eq:1` |

### 使用根组织单元 UID 的可视化 { #visualizations-using-root-organisation-unit-uid }

分配给特定组织单位级别或组织单位组的可视化、事件报告、报告表和地图都有一个对根（第 1 级）组织单位的引用。此类对象（如果存在于元数据文件中）包含一个占位符 `<OU_ROOT_UID>`。使用 .json 文件编辑器中的搜索功能可以识别该占位符，并将其替换为目标实例中 1 级组织单位的 UID。

## 导入元数据 { #importing-metadata } 

使用 [导入/导出](#import_export) DHIS2 应用程序导入元数据包。建议在尝试实际导入元数据之前使用“试运行”功能来识别问题。如果“试运行”报告任何问题或冲突，请参阅下面的[导入冲突](#handling-import-conflicts)部分。如果“试运行”/“验证”导入工作正常且没有错误，请尝试导入元数据。如果导入成功且没有任何错误，您可以继续[配置](#configuration)模块。在某些情况下，导入冲突或问题在“试运行”期间不会显示，但会在尝试实际导入时出现。在这种情况下，导入摘要将列出需要解决的所有错误。

### 处理导入冲突 { #handling-import-conflicts } 

> **注意**
>
> 如果您将包导入到新的 DHIS2 实例中，则不会遇到导入冲突，因为目标数据库中没有元数据。导入元数据后，进入“[配置](#configuration)”部分。

可能会发生许多不同的冲突，但最常见的是配置包中的元数据对象的名称、短名称和/或代码已存在于目标数据库中。这些问题有多种替代解决方案，各有不同的优点和缺点。哪一种更合适取决于例如发生冲突的对象的类型。

#### 备选方案1 { #alternative-1 } 

重命名 DHIS2 数据库中存在冲突的现有对象。此方法的优点是无需修改 .json 文件，因为更改是通过 DHIS2 的用户界面完成的。这可能不太容易出错。这也意味着配置包保持原样，这可能是一个优势，例如在发布包更新时。原始包对象也经常在培训材料和文档中引用。

#### 备选方案2 { #alternative-2 } 

重命名.json文件中存在冲突的对象。这种方法的优点是现有的DHIS2元数据保持不变。当存在培训材料或文档（例如链接到所讨论对象的数据字典的SOP）时，这可能是一个因素，并且不存在通过修改用户熟悉的元数据而使用户感到困惑的风险。

请注意，对于备选项1和2，修改可以简单到在名称中添加一个小的前缀/后缀，以最大程度地减少混乱的风险。

#### 备选3 { #alternative-3 } 

第三种也是更复杂的方法是修改.json文件以重新使用现有的元数据。例如，在某个概念的某个选项集已经存在的情况下（例如“性别”），可以从.json文件中删除该选项集，并且对其UID的所有引用都将替换为数据库中已经存在的相应选项集。这样做的最大优点（不限于直接导入冲突的情况）是避免在数据库中创建重复的元数据。执行这种类型的修改时，需要考虑一些关键因素：

- 它需要有关DHIS2详细元数据结构的专业知识
- 该方法不适用于所有类型的对象。特别地，某些类型的对象具有依赖关系，这种依赖关系以这种方式难以解决，例如与分解有关。
- 将来对配置包的更新将很复杂。

## 组态 { #configuration } 

成功导入所有元数据后，需要执行一些步骤，模块才能正常运行。

### 分享中 { #sharing } 

首先，您必须使用 DHIS2 的*共享*功能来配置哪些用户（用户组）应该查看与程序关联的元数据和数据，以及谁可以在程序中注册/输入数据。默认情况下，共享已配置为以下内容：

- 仪表板
- 可视化、地图、事件报告和报告表
- 数据集
- 类别选项

有关共享的更多信息，请参阅 [DHIS2 文档](#sharing)。

软件包中包含三个核心用户组：

- 疟疾获取（查看元数据/查看数据）
- 疟疾管理员（查看和编辑元数据/无法访问数据）
- 疟疾数据捕获 -（查看元数据/捕获并查看数据）

对于疟疾库存包，分组为：

- 疟疾获取（查看元数据/查看数据）
- 疟疾管理员（查看和编辑元数据/无法访问数据）
- 疟疾库存数据捕获 -（查看元数据/捕获并查看数据）

根据用户在系统中的角色，将用户分配到适当的用户组。包中其他对象的共享可能会根据设置进行调整。有关详细信息，请参阅[DHIS2 共享文档](#sharing)。

### 用户角色 { #user-roles } 

用户将需要用户角色才能参与DHIS2中的各种应用程序。建议以下最低角色：

1. 跟踪器数据分析：可以查看事件分析并访问仪表板，事件报告，事件可视化器，数据可视化器，数据透视表，报告和地图。
2. 跟踪器数据捕获：可以添加数据值，更新跟踪的实体，跨组织单位搜索跟踪的实体以及访问跟踪器捕获

有关配置用户角色的更多信息，请参阅 [DHIS2 文档](https://docs.dhis2.org/)。

### 组织部门分配 { #organisation-unit-assignment }

数据集必须分配给现有层次结构中的组织单位，以便可以通过捕获应用程序进行访问。

### 指标映射{ #indicator-mapping }

仅实现_仪表板包_时，必须使用现有实例中的元数据对象来配置指标分子和分母。配置信息可在元数据文件中的文档和分子和分母的描述中找到。

### 重复的元数据 { #duplicated-metadata } 

> **注意**
>
> 本节仅适用于您要导入已存在元数据的 DHIS2 数据库的情况。如果您使用新的 DHIS2 实例，请跳过本节并转到[调整跟踪器程序](#adapting-the-tracker-program)。
> 如果您使用任何依赖当前元数据的第三方应用程序，请考虑此更新可能会破坏它们”

即使成功导入了元数据而没有任何导入冲突，元数据中也可能存在重复项-数据元素，跟踪的实体属性或已存在的选项集。正如上面有关解决冲突的部分所述，要牢记的一个重要问题是，在DHIS2中更改元数据的决定还需要考虑与现有元数据有不同关联的其他文档和资源。 ，以及通过配置包导入的元数据。因此，解决重复项不仅是“清理数据库”的问题，而且还要确保做到这一点，例如，不破坏与其他系统的集成，使用培训材料的可能性，破坏SOP等。这将非常很大程度上取决于上下文。

要记住的一件重要事情是 DHIS2 拥有可以隐藏元数据中潜在重复的一些复杂性的工具。例如，如果存在重复的选项集，可以通过[共享](#sharing) 对用户组隐藏它们。

## 调整程序{ #adapting-the-program }

导入程序后，您可能需要对程序进行某些修改。 *可以*进行的本地调整示例包括：

- 向表单添加其他变量。
- 根据国家惯例修改数据元素/选项名称。
- 向变量和/或数据输入表单添加翻译。
- 根据当地案例定义修改指标

但是，如果您决定更改或删除任何包含的表格/元数据，强烈建议格外小心。修改可能会破坏功能，例如程序规则和程序指示器。

## 正在删除元数据{ #removing-metadata }

为了保持实例干净并避免错误，建议您从实例中删除不必要的元数据。删除不必要的元数据需要深入了解 DHIS2 和各种依赖项。

