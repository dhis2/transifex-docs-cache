---
edit_url: "https://github.com/dhis2/dhis2-android-sdk/blob/master/docs/content/developer/database.md"
revision_date: '2024-05-09'
tags:
- Develop
---

# 数据库{ #android_sdk_database }

## Database scope { #android_sdk_database_scope }
SDK 将[服务器，用户]对的数据保存在独立的数据库中。从版本 1.6.0 开始，SDK 支持多个帐户（对 [服务器，用户]），每个帐户的信息都存储在独立的数据库中。仅当删除帐户时，数据库才会被删除。成功登录后会自动创建数据库。

## Encryption { #android_sdk_database_encryption }
从 SDK 版本 1.1.0 开始，可以将数据存储在加密数据库中。加密密钥是随机生成的
通过 SDK 并保持安全。

加密状态（如果数据库是否加密）可以在 android-settings-app 中的服务器级别进行配置。
默认状态为 false：如果未安装应用程序，则数据库不会加密。

在给定服务器和用户首次登录期间，将从 API 下载加密状态并下载
将创建给定类型的数据库。

在以后登录或元数据同步时，SDK会再次从服务器下载加密状态，并且，
如果更改，将加密或解密当前数据库而不会丢失数据。

### 加密性能 { #encryption-performance } 
- 数据库大小：无论是否进行加密，数据库大小都大致相同。
- 速度：使用加密数据库，读写速度平均降低5％至10％。

## Import / export { #android_sdk_database_import_export }
The database can be exported and imported in a different device. 

One of the main use cases of this functionality is debugging: sometimes it is hard to know the reason for a sync problem or a bug, and it is very useful to replicate the issue in an emulator or a different device.  

```kt
// Export database
val database = d2.maintenanceModule().databaseImportExport().exportLoggedUserDatabase()

// Import database
val metadata = d2.maintenanceModule().databaseImportExport().importDatabase(database)

// The metadata object contains information about the database (serverUrl, username,...) 

// Once the database is imported, it is possible to login as usual
d2.userModule().login("username", "password", "serverUrl")
```

The export process encrypts the database using ZIP encryption, so the database file can't be read unless the right user credentials are provided. 

Things to consider:
- The exported file only contains the database, it does not contain file resources (images, icons, files,...).
- The receiver device must run an **SDK version that is equal or higher** than the SDK version used to export the database.

