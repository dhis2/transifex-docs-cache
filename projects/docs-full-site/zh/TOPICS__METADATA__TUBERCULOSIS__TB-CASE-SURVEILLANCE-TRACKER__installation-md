---
edit_url: "https://github.com/dhis2-metadata/TB_CS/blob/master/docs/tb_cs-installation.md"
revision_date: "2022-07-13"
---

# TB 病例监控跟踪器安装指南 { #tb-cs-installation }

软件包版本 2.0.0

系统默认语言：英语

可用翻译：法语、西班牙语、葡萄牙语

## 安装 { #installation }

模块的安装包括以下几个步骤：

1. [准备](#preparing-the-metadata-file) 元数据文件。
2. 将元数据文件[导入]（＃importing-metadata）到DHIS2中。
3. [配置]（＃additional-configuration）导入的元数据。
4. 导入后[Adapting]（＃adapting-the-tracker-program）程序

建议在开始 DHIS2 中的安装和配置过程之前先阅读安装指南的每个部分。根据导入类型确定适用的部分：

1. 导入到空白 DHIS2 实例
2. 使用现有元数据导入 DHIS2 实例（之前未导入其他版本的 TB 病例监控跟踪器）。
3. 更新现有/旧版本的结核病病例监测跟踪器。

本文档中概述的步骤应在测试/暂存 DHIS2 实例中进行测试，然后才应用于生产环境。

## 要求 { #requirements }

为了安装该模块，需要 DHIS2 管理员用户帐户。

应非常小心地确保服务器本身和 DHIS2 应用程序得到良好的保护，并应定义对所收集数据的访问权限。有关保护 DHIS2 系统安全的详细信息超出了本文档的范围，我们请参阅 [DHIS2 文档](https://docs.dhis2.org/)。

## 元数据文件 { #metadata-files }

元数据参考和元数据 json 文件提供有关包版本和内容的技术详细信息。

虽然并不总是必要，但通常需要在将元数据文件导入 DHIS2 之前对其进行某些修改。

## 准备元数据文件 { #preparing-the-metadata-file }

建议在使用和调整任何 DHIS2 元数据包之前将 DHIS2 通用 HIS 元数据库导入到目标实例中。常见的 HIS 元数据包可在支持的 DHIS2 版本中从 [元数据包下载](https://dhis2.org/metadata-package-downloads) 下载

### 默认数据维度 { #default-data-dimension }

在 DHIS2 的早期版本中，默认数据维度的 UID 是自动生成的。因此，虽然所有DHIS2实例都具有默认类别选项、数据元素类别、类别组合和类别选项组合，但这些默认值的UID可以不同。 DHIS2 的更高版本对默认维度进行了硬编码 UID，这些 UID 在配置包中使用。

为了避免导入元数据时发生冲突，建议搜索并替换整个 .json 文件中所有出现的这些默认对象，将 .json 文件的 UID 替换为要导入该文件的实例中的 UID。表 1 显示了应替换的 UID，以及用于识别现有 UID 的 API 端点

| 目的 | 用户标识 | API端点 |
| --- | --- | --- |
| 类别 | `GLevLNI9wkl` | `../api/categories.json?filter=name:eq:default` |
| 类别选项 | `xYerKDKCefk` | `../api/categoryOptions.json?filter=name:eq:default` |
| 品类组合 | `bjDvmb4bfuf` | `../api/categoryCombos.json?filter=name:eq:default` |
| 类别选项组合 | `HllvX50cXC0` | `../api/categoryOptionCombos.json?filter=name:eq:default` |

使用列出的 API 请求识别实例中默认维度的 UID，并将 json 文件中的 UID 替换为实例中的 UID。

> **注意**
>
> 请注意，此搜索和替换操作必须使用纯文本编辑器完成，而不是使用 Microsoft Word 等文字处理程序。

### 指标类型 { #indicator-types }

指标类型是另一种可能产生导入冲突的对象类型，因为某些名称在不同的 DHIS2 数据库中使用（例如“百分比”）。由于指标类型由其因子定义（包括 1 表示“仅分子”指标），因此它们是明确的，并且可以通过搜索和替换 UID 来替换。此方法有助于避免潜在的导入冲突，并防止实施者创建重复的指标类型。下表包含可以替换的 UID 以及用于识别现有 UID 的 API 端点：

| 目的 | 用户标识 | API端点 |
| --- | --- | --- |
| 仅分子（数字） | `CqNPn5KzksS` | `../api/indicatorTypes.json?filter=number:eq:true&filter=factor:eq:1` |

### 追踪实体类型 { #tracked-entity-type }

与指标类型一样，您的 DHIS2 数据库中可能已经存在跟踪的实体类型。应更改对跟踪实体类型的引用以反映系统中的内容，这样您就不会创建重复项。下表包含可以替换的 UID 以及用于识别现有 UID 的 API 端点：

| 目的 | 用户标识 | API端点 |
| --- | --- | --- |
| 人 | `MCPQUTHX1Ze` | `../api/trackedEntityTypes.json?filter=name:eq:Person` |

### 选项代码 { #option-codes }

根据DHIS2命名约定，元数据代码使用大写字母、下划线且不包含空格。一些可能发生的异常在相应的包文档中指定。当前包中的元数据对象中包含的所有代码均符合命名约定。可能会出现目标数据库中使用的现有元数据对象的代码使用小写字符的情况。在这种情况下，直接在数据库中更新这些值非常重要。

> **重要**
>
> 导入期间，现有选项代码将被更新的大写代码覆盖。为了更新数据库中现有数据的数据值，需要使用数据库命令更新数据库中存储的值。确保在替换值之前映射现有的旧选项代码和新选项代码。在对生产服务器进行调整之前，请先使用临时实例。

对于数据元素值，请使用：

    ``SQL
    更新程序阶段实例
    SET eventdatavalues = jsonb_set(eventdatavalues, '{"<affected data element uid>","value"}', '"<new value>"')
    WHERE eventdatavalues @> '{"<affected data element uid>":{"value": "<old value>"}}'::jsonb
    ANDprogramstageid=<database_programsatgeid>;
    ````

> **注意**
>
> 在现有 DHIS2 实例中更新元数据元素的 UID 时，您需要在数据库中运行 SQL 命令，并另外替换其他元数据对象中其 UID 的所有出现和引用：预测器、指标、验证规则表达式等。

### 选项排序顺序 { #sort-order-of-options }

检查系统中选项的排序顺序 `sortOrder` 是否与元数据包中选项的排序顺序一致。这仅适用于 json 文件和目标实例包含相同 UID 的选项和选项集时。

导入后，请确保选项集中选项的排序顺序从 1 开始。排序顺序值中不应有间隙（例如 1、2、3、5、6）。

排序顺序可以在维护应用程序中调整。

1. 转到适用的选项集
2. 打开“选项”部分
3. 使用“按名称排序”、“按代码/值排序”或“手动排序”替代方法。

确保选项集中没有选项具有相同的排序顺序。可以使用以下 api 端点进行检查：

`../api/options.json?paging=false&fields=id,name,sortOrder&filter=optionSet.id:in:[<optionSet UID>]`

为了修复包含大量选项的选项集中的排序顺序，请参考这个[SQL脚本](https://github.com/dhis2/dhis2-utils/blob/master/resources/sql/clean_up_option_sort_order.sql) 。

### 使用根组织单元 UID 的可视化 { #visualizations-using-root-organisation-unit-uid }

分配给特定组织单位级别或组织单位组的可视化、事件报告、报告表和地图都有一个对根（第 1 级）组织单位的引用。此类对象（如果存在于元数据文件中）包含一个占位符 `<OU_ROOT_UID>`。使用 .json 文件编辑器中的搜索功能可以识别该占位符，并将其替换为目标实例中 1 级组织单位的 UID。

某些可视化和地图可能包含对组织单位级别的引用。由多个地图视图组成的地图可能包含基于地图图层配置的各种组织单位级别参考。在导入元数据文件之前，调整元数据 json 文件中的组织单位级别引用，以匹配目标实例中的组织单位结构。

## 导入元数据 { #importing-metadata }

使用 [导入/导出](#import_export) DHIS2 应用程序导入元数据包。建议在尝试实际导入元数据之前使用“试运行”功能来识别问题。如果“试运行”报告任何问题或冲突，请参阅下面的[导入冲突](#handling-import-conflicts)部分。如果“试运行”/“验证”导入工作正常且没有错误，请尝试导入元数据。如果导入成功且没有任何错误，您可以继续[配置](#configuration)模块。在某些情况下，导入冲突或问题在“试运行”期间不会显示，但会在尝试实际导入时出现。在这种情况下，导入摘要将列出需要解决的所有错误。

### 处理导入冲突 { #handling-import-conflicts }

> **注意**
>
> 如果您将包导入到新的 DHIS2 实例中，则不会遇到导入冲突，因为目标数据库中没有元数据。导入元数据后，进入“[配置](#configuration)”部分。

可能会发生许多不同的冲突，但最常见的是配置包中的元数据对象的名称、短名称和/或代码已存在于目标数据库中。这些问题有多种替代解决方案，各有不同的优点和缺点。哪一种更合适取决于例如发生冲突的对象的类型。

#### 备选方案1 { #alternative-1 }

重命名 DHIS2 数据库中存在冲突的现有对象。此方法的优点是无需修改 .json 文件，因为更改是通过 DHIS2 的用户界面完成的。这可能不太容易出错。这也意味着配置包保持原样，这可能是一个优势，例如在发布包更新时。原始包对象也经常在培训材料和文档中引用。

#### 备选方案2 { #alternative-2 }

重命名.json文件中存在冲突的对象。这种方法的优点是现有的DHIS2元数据保持不变。当存在培训材料或文档（例如链接到所讨论对象的数据字典的SOP）时，这可能是一个因素，并且不存在通过修改用户熟悉的元数据而使用户感到困惑的风险。

请注意，对于备选项1和2，修改可以简单到在名称中添加一个小的前缀/后缀，以最大程度地减少混乱的风险。

#### 备选3 { #alternative-3 }

第三种也是更复杂的方法是修改.json文件以重新使用现有的元数据。例如，在某个概念的某个选项集已经存在的情况下（例如“性别”），可以从.json文件中删除该选项集，并且对其UID的所有引用都将替换为数据库中已经存在的相应选项集。这样做的最大优点（不限于直接导入冲突的情况）是避免在数据库中创建重复的元数据。执行这种类型的修改时，需要考虑一些关键因素：

-   它需要有关DHIS2详细元数据结构的专业知识
-   该方法不适用于所有类型的对象。特别地，某些类型的对象具有依赖关系，这种依赖关系以这种方式难以解决，例如与分解有关。
-   将来对配置包的更新将很复杂。

### 升级早期版本的 TB CS Tracker 程序{ #upgrading-earlier-versions-of-tb-cs-tracker-program }

本节提供有关升级早期版本 TB CS tracker（例如版本 1.0.0 或 1.0.1）的指南。

对于现有的实现，不建议直接升级实例中的元数据包。

在选择最佳升级策略之前，请执行以下步骤：

1. 将**TB CS tracker 2.0.0**导入新的测试实例
2. 将现有数据与 TB CS tracker 2.0.0 配置进行比较和映射
3. 根据当地要求适配TB CS tracker 2.0.0
4. 使用现有或自定义数据传输工具将数据从现有配置传输到 TB CS tracker 2.0.0
5. 做出有关升级策略的基于评估的决策（调整现有配置或将数据移动到新跟踪器）

出于演示和培训目的，建议采用以下升级过程：

1. 使用 TB CS 跟踪器创建实例的备份
2. 在导入 TB CS tracker.2.0.0 之前，必须从目标实例中删除下面列出的 TB CS 元数据对象。如果您从以前版本的包中自定义或添加了任何元数据对象，则需要在升级后备份、重新配置和导入这些对象。从目标实例中删除以下元数据对象：
    - 仪表板
    - 可视化
    - 地图
    - 事件报告
    - 节目指示器组
    - 计划指标
    - 指标组
    - 指标
    - trackedEntityInstanceFilters
    - 数据元素组
    - 程序规则
    - 程序规则动作
    - 程序规则变量
3. 如果演示/培训实例中已有数据，则需要导出所有 TB CS 跟踪器注册数据，在实例中将其删除，并在数据映射且 TB CS 跟踪器更新升级后重新导入。在 TB CS tracker 1.0.0 中，只有确诊的结核病病例才会被纳入该计划。 TB CS tracker 2.0.0 允许登记推定病例和诊断病例。 1.0.0 中的注册日期（诊断日期）成为 2.0.0 中的注册日期。对于现有注册，注册日期必须与诊断日期进行映射，诊断日期是注册阶段的数据元素。需要通知日期和其他数据元素的附加映射。
4. 将 TB CS tracker 2.0.0 导入实例。
5. 导入映射和缺失的数据。
6. 测试数据输入、仪表板和一般功能。

## 组态 { #configuration }

成功导入所有元数据后，需要执行一些步骤，模块才能正常运行。

### 分享中 { #sharing }

首先，您必须使用 DHIS2 的_共享_功能来配置哪些用户（用户组）应查看与程序关联的元数据和数据，以及谁可以在程序中注册/输入数据。默认情况下，共享已配置为以下内容：

-   仪表板
-   可视化、地图、事件报告和报告表
-   数据集
-   类别选项
-   计划和计划阶段

软件包中包含这些核心用户组：

-   结核病管理员
-   结核病接入
-   结核病实验室访问
-   TB数据采集
-   结核病实验室数据采集

默认情况下，将以下内容分配给这些用户组

| 目的 | 用户组 |  |  |  |  |
| :-- | :-- | :-- | :-- | :-- | :-- |
|  | 结核病接入 | 结核病实验室访问 | 结核病管理员 | TB数据采集 | 结核病实验室数据采集 |
| 追踪实体类型 | **元数据：**可以查看 <br> **数据：**可以查看 | **元数据：**可以查看 <br> **数据：**可以查看 | **元数据：**可以编辑和查看<br> **数据：**无权访问 | **元数据：**可以查看<br> **数据：**可以捕获并查看 | **元数据：**可以查看<br> **数据：**可以捕获并查看 |
| 程序 | **元数据：**可以查看 <br> **数据：**可以查看 | **元数据：**可以查看 <br> **数据：**可以查看 | **元数据：**可以编辑和查看<br> **数据：**无权访问 | **元数据：**可以查看<br> **数据：**可以捕获并查看 | **元数据：**可以查看<br> **数据：**可以捕获并查看 |
| 计划阶段 | **元数据：**可以查看 <br> **数据：**可以查看 | **组访问仅限于阶段：结核病登记、诊断和化验结果**<br> **元数据：** 可查看<br> **数据：** 可查看 | **元数据：**可以编辑和查看<br> **数据：**无权访问 | **元数据：**可以查看<br> **数据：**可以捕获并查看 | **团体访问仅限于阶段：结核病登记和实验室结果** <br> **元数据：**可以查看<br> **数据：**可抓取并查看 |
| 仪表板 | **元数据：**可以查看 <br> **数据：**可以查看 | **元数据：**可以查看 <br> **数据：**可以查看 | **元数据：**可以编辑和查看<br> **数据：**无权访问 | 无法访问 | 无法访问 |

需要根据用户在系统中的角色将用户分配到适用的用户组。应根据需要设置包中其他对象的共享。有关配置共享的详细信息，请参阅 [DHIS2 文档](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/sharing.html)。

### 用户角色 { #user-roles }

用户将需要用户角色才能参与DHIS2中的各种应用程序。建议以下最低角色：

1. 跟踪器数据分析：可以查看事件分析并访问仪表板，事件报告，事件可视化器，数据可视化器，数据透视表，报告和地图。
2. 跟踪器数据捕获：可以添加数据值，更新跟踪的实体，跨组织单位搜索跟踪的实体以及访问跟踪器捕获

有关配置用户角色的更多信息，请参见[DHIS2文档]（http://dhis2.org/documentation）。

### 组织单位 { #organisation-units }

程序必须分配给组织单位层次结构中适用的组织单位。

### 重复的元数据 { #duplicated-metadata }

> **注意**
>
> 本节仅适用于您导入已存在元数据的 DHIS2 数据库的情况。如果您使用新的 DHIS2 实例，请跳过本节并转到[调整跟踪器程序](#adapting-the-tracker-program)。如果您使用任何依赖当前元数据的第三方应用程序，请考虑此更新可能会破坏它们”

即使成功导入了元数据而没有任何导入冲突，元数据中也可能存在重复项-数据元素，跟踪的实体属性或已存在的选项集。正如上面有关解决冲突的部分所述，要牢记的一个重要问题是，在DHIS2中更改元数据的决定还需要考虑与现有元数据有不同关联的其他文档和资源。 ，以及通过配置包导入的元数据。因此，解决重复项不仅是“清理数据库”的问题，而且还要确保做到这一点，例如，不破坏与其他系统的集成，使用培训材料的可能性，破坏SOP等。这将非常很大程度上取决于上下文。

### 常数 { #constants }

结核病病例监测跟踪包包括一组测试和一份药物清单，执行国可以根据国家情况（例如，该国使用/提供哪些药物和测试）进行修改。常量和相应程序规则的使用使实施国家的系统管理员能够根据要求轻松“打开”或“关闭”药物和测试类型。常量对象的描述中提供了配置常量的说明。

### 配置跟踪器捕获界面、小部件和顶栏{ #configuring-tracker-capture-interface-widgets-and-top-bar }

安装软件包后，您必须配置跟踪器捕获仪表板。此配置包括数据输入表单、小部件和顶栏。

#### 数据输入表 { #data-entry-forms }

-   注册第一个（测试）案例后，访问跟踪器捕获表单中的 **设置** 菜单，然后选择 **显示/隐藏小部件**
-   使用**时间线数据输入**
-   确保选择了**注册**、**反馈**和**个人资料**小部件。单击**关闭**。

#### 顶部栏 { #top-bar }

-   访问 **设置** 菜单并选择 **顶栏设置**
-   选择**激活顶栏**
-   选择必填信息字段并分配 **排序顺序**

| 推荐领域                     | 排序 |
| :------------------------------------- | :--------- |
| **属性**                         |            |
| 结核病登记号                 | 2          |
| **指标**                         |            |
| 案例分类                    | 8          |
| 患者年龄（岁）                  | 5          |
| 诊断时的艾滋病毒状况                | 6          |
| 诊断时的耐药性                | 10         |
| 治疗方案                      | 9          |
| 诊断日期                      | 1          |
| 诊断后几个月                 | 3          |
| 诊断时的耐药性分类 | 7          |
| 患者年龄（月）                 | 4          |

-   点击**保存**
-   返回**设置**菜单。单击**将仪表板布局保存为默认**。锁定所有用户的布局。

### 程序通知{ #program-notifications }

TB CS Tracker 2.0.0 包括 4 个通知模板，可以根据本地要求进行编辑。需要额外配置来设置短信或电子邮件通知。

### 将基于案例的数据报告为聚合数据集{ #reporting-case-based-data-into-aggregate-data-sets }

基于结核病病例的监测跟踪器捕获的数据可以输入标准的汇总报告（即每月、每季度、每年或由国家确定）。 DHIS2 TB HMIS 系统设计汇总可访问 [https://dhis2.org/metadata-package-downloads/#tb](https://dhis2.org/metadata-package-downloads/#tb)

这个[Tracker-to-Aggregate 工具](https://github.com/dhis2/integration-t2a) 可以轻松配置用于数据传输。

更多信息请参阅[跟踪器聚合数据集成指南](https://docs.dhis2.org/en/implement/maintenance-and-use/tracker-and-aggregate-data-integration.html#how-to -保存聚合跟踪器数据作为聚合数据值）。

结核病病例监测和实验室包中的**计划指标**与 DHIS2 结核病综合包（实验室、通知和结果）中的**数据元素**和**类别选项组合**进行映射。

## 调整跟踪器程序 { #adapting-the-tracker-program }

Once the programme has been imported, you might want to make certain modifications to the programme. Examples of local adaptations that _could_ be made include:

-   向表单添加其他变量。
-   根据国家惯例修改数据元素/选项名称。
-   向变量和/或数据输入表单添加翻译。
-   根据当地案例定义修改计划指标。

但是，如果您决定更改或删除任何包含的表格/元数据，强烈建议格外小心。修改可能会破坏功能，例如程序规则和程序指示器。
