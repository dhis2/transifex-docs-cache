---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/master/src/developer/apps.md"
revision_date: "2021-06-14"
---

# 应用 { #apps }

打包的应用程序是一个 [Open Web App](https://developer.mozilla.org/en-US/docs/Open_Web_apps_and_Web_standards)，其中包含所有资源（HTML、CSS、JavaScript、应用程序清单等）在一个 zip 文件中。它可以在运行时直接通过用户界面上传到 DHIS2 安装。打包的应用程序是一个 ZIP 文件，其根目录中有一个 [应用程序清单](http://www.w3.org/2008/webapps/manifest/)。清单必须命名为`manifest.webapp`。可以在[此处](https://developer.mozilla.org/en-US/Apps/Quickstart) 获得对应用程序的完整描述。

## 打包应用程序的目的 { #apps_purpose_packaged_apps }

打包应用的目的是扩展DHIS2的网络界面，
无需修改DHIS2本身的源代码。一个系统
部署通常会有自定义和独特的要求。应用程式
提供方便的用户界面扩展点。通过
应用程序，您可以通过以下方式补充和自定义DHIS2核心功能
以松散耦合和干净的方式定制解决方案。

应用没有权限直接与DHIS2 Java API进行交互。
相反，应用程序应使用功能并与
DHIS2 Web API通过使用DHIS2服务和数据。

## 创建应用 { #apps_creating_apps }

DHIS2 应用程序是使用 HTML、JavaScript 和 CSS 文件构建的，与任何其他 Web 应用程序类似。应用程序还需要一个名为 _manifest.webapp_ 的特殊文件，用于描述应用程序的内容。 _manifest.webapp_ 的基本示例如下所示：

    {
        “ version”：“ 0.1”，
        “ name”：“我的应用”，
        “ description”：“我的应用程序是打包的应用程序”，
        “ launch_path”：“ /index.html”，
        “ appType”：“ APP”，
        “图标”：{
            “ 16”：“ /img/icons/mortar-16.png”，
            “ 48”：“ /img/icons/mortar-48.png”，
            “ 128”：“ /img/icons/mortar-128.png”
        }，
        “开发人员”：{
            “ name”：“ Me”，
            “ url”：“ http://me.com”
        }，
        “ default_locale”：“ en”，
        “活动”：{
            “ dhis”：{
                “ href”：“ *”，
                “ namespace”：“ my-namespace”
            }
        }，
        “当局”：[
             “ MY_APP_ADD_NEW”，
             “ MY_APP_UPDATE”，
             “ MY_APP_DELETE”
        }
    }

_manifest.webapp_ 文件必须位于项目的根目录下。其中属性包括：

- _icons→48_ 属性用于显示在 DHIS2 实例上安装的应用程序列表中的图标。

- _activities_ 属性是特定于 dhis 的扩展，旨在区分标准开放 Web 应用程序和可安装在 DHIS2 中的应用程序。

- _authorities_ 属性包含 DHIS2 权限列表，可用于限制用户对当前应用程序执行某些操作。该列表将在应用程序安装过程中加载到 DHIS2 中，并可在用户角色管理表单中进行选择。

- 当应用程序上传并安装在 DHIS2 中时，*href* 的 \*\** 值将转换为相应的 URL。然后，应用程序的 JavaScript 和 HTML 文件可以使用该值来调用 DHIS2 Web API 并识别已安装应用程序的 DHIS2 服务器的正确位置。澄清一下，安装应用程序后，*activities\* 部分将类似于此：

<!-- end list -->

    “活动”：{
        “ dhis”：{
            “ href”：“ http://apps.dhis2.org/demo”，
            “ namespace”：“ my-namespace”
        }
     }

- _settings_ 属性是可选的，可以在仪表板小部件应用程序上使用，以在小部件显示在仪表板上时禁止显示小部件标题：

<!-- end list -->

    “设置”： {
        “仪表板小部件”：{
            “隐藏标题”：true
        }
    }

如果您的应用程序利用了
dataStore或userDataStore api。添加命名空间属性时，仅
有权访问您应用的用户可以对
命名空间。命名空间只能以这种方式保留一次。如果另一个
应用尝试保留已使用的名称空间，
其他应用程序将失败。

如果您有一组想要共享相同名称空间的应用，
但也希望保留它，应用程序的用户需要具有
使用最初保留名称空间的应用程序的权限。

> **注意**
>
> 在命名空间中至少存在一个键值对之前，不会创建命名空间。在清单中指定命名空间仅限制访问，不会在命名空间中创建任何数据。

_appType_ 属性指定 DHIS2 实例如何显示应用程序。下表解释了 appType 的可能值及其效果。

表：应用程序类型

| 应用程序类型 | 描述 |
| --- | --- |
| 应用程序 | 将列在“应用程序”菜单中 |
| DASHBOARD_WIDGET | 可从仪表板上的搜索框获取，可以作为项目添加到任何仪表板上 |
| TRACKER_DASHBOARD_WIDGET | 可以嵌入跟踪器仪表板_（尚不支持此类型）_ |
| 资源 | 资源应用程序是可以由多个其他应用程序共享的包。除了应用程序管理应用程序之外，这些应用程序不会显示在 UI 的任何位置。 |

如果清单中没有指定_appType_，系统将默认使用“APP”。

要将JSON结构读入JavaScript，可以使用常规AJAX
请求并将JSON解析为一个对象。大多数Javascript库
提供一些支持，例如使用jQuery，可以这样完成：

    $ .getJSON（“ manifest.webapp”，function（json）{
        var apiBaseUrl = json.activities.dhis.href +“ / api”;
    }）；

该应用可以包含HTML，JavaScript，CSS，图像和其他文件
可能需要支持它。文件结构可能看起来有些像
像这样：

    /
    /manifest.webapp＃清单文件（必填）
    / css / #css样式表（可选）
    / img / #images（可选）
    / js / #javascripts（可选）

> **注意**
>
> 只有 `manifest.webapp` 文件必须放置在根目录中。开发人员需要根据需要在应用程序内组织 CSS、图像和 JavaScript 文件。

项目中的所有文件应压缩为标准zip
存档。请注意manifest.webapp文件必须位于根目录下
zip归档文件（在归档文件中不包含父目录）。
然后可以将zip归档文件安装到DHIS2中，如您在
下一节。

## 将应用程序安装到DHIS2中 { #apps_installing_apps }

可以通过将 zip 文件上传到应用程序管理器来安装应用程序。在服务 → 应用程序中，单击 _App Store_ 菜单项。 ![](resources/images/apps/app-management.png) 该应用程序可以通过按“浏览”按钮上传，选择 zip 包后，文件会自动上传并安装在 DHIS2 中。您还可以浏览 DHIS2 [应用程序商店](https://www.dhis2.org/appstore) 中的应用程序并从那里下载应用程序。 DHIS2 应用程序商店允许社区对应用程序进行搜索、审查、评论、请求功能、评级。

## 启动应用程序 { #apps_launching_apps }

安装后，您的应用程序将与菜单系统集成
可以在“服务”下和“模块概述”页面中进行访问。它
也可以从apps模块的主页访问。点击一个
列表中的应用程序以启动它。
