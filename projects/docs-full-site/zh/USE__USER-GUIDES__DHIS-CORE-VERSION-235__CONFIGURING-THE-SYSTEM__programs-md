---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.35/src/user/configure-programs-in-the-maintenance-app.md"
revision_date: "2021-06-14"
---

# 在维护应用中配置程序 { #configure_programs_in_maintenance_app }

## 关于程序 { #about_program_maintenance_app }

传统上，公共卫生信息系统一直在报告
整个健康计划中服务提供的汇总数据。这个
不允许您跟踪提供这些服务的人员。在
DHIS2，您可以分阶段定义自己的程序。这些程序是
“跟踪器”功能的重要部分，可让您跟踪
个人记录。您还可以跟踪其他“实体”，例如井或
保险。您可以创建两种类型的程序：

 <table>
 <caption>项目类型</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> <p>项目类型</p> </th>
 <th> <p>说明</p> </th>
 <th> <p>使用示例</p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> <p>事件项目</p> </td>
 <td> <p><em>不带</em>注册项目（匿名项目或SEWoR）的单个事件 </p>
 <p>匿名，通过卫生系统跟踪各个事件。这些个人交易没有任何人或实体。 </p>
 <p>只有一个程序阶段。 </p> </td>
 <td> <p>记录运行状况，而无需在系统中注册任何信息。 </p>
 <p>记录调查数据或监视行列表。 </p> </td>
 </tr>
 <tr class="even">
 <td> <p>跟踪程序</p> </td>
 <td> <p>单个事件<em>与</em>注册程序（SEWR）</p>
 <p>使用卫生系统通过每个单独的交易来跟踪实体（人，商品等）</p>
<p> 只有一个程序阶段。</p> 
 <p>跟踪实体实例（TEI）只能注册一次该程序。</p>  </td>
 <td> <p>记录出生证明和死亡证明。</p>  </td>
 </tr>
 <tr class="odd">
 <td></td>
  <td><p>多事件<em>与</em>注册程序（MEWR）</p>
 <p>使用卫生系统通过每个单独的交易来跟踪实体（人，商品等）</p>
 <p>具有多个程序阶段。  </p></td>
 <td><p> 母亲健康计划，分阶段包括ANC访问（2-4 +），分娩，PNC访问。  </p></td>
 </tr>
 </tbody>
 </table>

To create a program, you must first configure several types of metadata objects. You create these metadata objects in the **Maintenance** app.

<table>
<caption>Program metadata objects in the Maintenance app</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Object type</p></th>
<th>Description</th>
<th><p>Available functions</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Event program</p></td>
<td><p>A program to record single event without registration</p></td>
<td><p>Create, edit, share, delete, show details and translate</p></td>
</tr>
<tr class="even">
+<td><p>Tracker program</p></td>
+<td><p>A program to record single or multiple events with registration</p></td>
+<td><p>Create, edit, share, delete, show details and translate</p></td>
+</tr>
<tr class="even">
<td><p>Program indicator</p></td>
<td><p>An expression based on data elements and attributes of tracked entities which you use to calculate values based on a formula.</p></td>
<td><p>Create, edit, clone, share, delete, show details and translate</p></td>
</tr>
<tr class="odd">
<td><p>Program rule</p></td>
<td><p>Allows you to create and control dynamic behaviour of the user interface in the <strong>Tracker Capture</strong> and <strong>Event Capture</strong> apps.</p></td>
<td><p>Create, edit, clone, delete, show details and translate</p></td>
</tr>
<tr class="even">
<td><p>Program rule variable</p></td>
<td><p>Variables you use to create program rule expressions.</p></td>
<td><p>Create, edit, clone, delete, show details and translate</p></td>
</tr>
<tr class="odd">
<td><p>Relationship type</p></td>
<td><p>Defines the relationship between tracked entity A and tracked entity B, for example mother and child.</p></td>
<td><p>Create, edit, clone, share, delete, show details and translate</p></td>
</tr>
<tr class="even">
<td><p>Tracked entity type</p></td>
<td><p>Types of entities which can be tracked through the system. Can be anything from persons to commodities, for example a medicine or a person.</p>
<p>A program must have one tracked entity. To enrol a tracked entity instance into a program, the tracked entity of an entity and tracked entity of a program must be the same.</p>
<blockquote>
<p><strong>Note</strong></p>
<p>A program must be specified with only one tracked entity. Only tracked entity as same as the tracked entity of program can enroll into that program.</p>
</blockquote></td>
<td><p>Create, edit, clone, share, delete, show details and translate</p></td>
</tr>
<tr class="odd">
<td><p>Tracked entity attribute</p></td>
<td><p>Used to register extra information for a tracked entity.</p>
<p>Can be shared between programs.</p></td>
<td><p>Create, edit, clone, share, delete, show details and translate</p></td>
</tr>
<tr class="odd">
<td><p>Program</p></td>
<td><p>A program consist of program stages.</p></td>
<td><p>Create, edit, share, delete, assign to organisation units, show details and translate</p></td>
</tr>
<tr class="even">
<td><p>Program stage</p></td>
<td><p>A program stage defines which actions should be taken at each stage.</p></td>
<td><p>Create, edit, share, change sort order, delete, show details and translate</p></td>
</tr>
<tr class="even">
<td><p>Program indicator group</p></td>
<td><p>A group of program indicators</p></td>
<td><p>Create, edit, clone, share, delete, show details and translate</p></td>
</tr>
<tr class="odd">
<td><p>Validation rule</p></td>
<td><p>A validation rule is based on an expression which defines a relationship between data element values.</p></td>
<td><p>Create, edit, clone, share, delete, show details and translate</p></td>
</tr>
<tr class="even">
<td><p>Program notification</p></td>
<td><p>Automated message reminder</p>
<p>Set reminders to be automatically sent to enrolled tracked entity instances before scheduled appointments and after missed visits.</p></td>
<td><p>Create, edit and delete</p></td>
</tr>
<tr class="odd">
<td><p>Program stage notification</p></td>
<td><p>Automated message reminder</p>
<p>Set reminders to be automatically sent whenever a program stage is completed, or before or after the due date.</p></td>
<td><p>Create, edit and delete</p></td>
</tr>
</tbody>
</table>

## 在维护应用程序中配置事件程序 { #configure_event_program_in_maintenance_app }

### 关于活动计划 { #about_event_program }

Single event _without_ registration programs are called event programs. You configure them in the **Maintenance** app. Event programs can have three types of data entry forms:

<table>
<caption>Types of data entry forms for event programs</caption>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Form type</p></th>
<th><p>Description</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Basic</p></td>
<td><p>Lists all data elements which belong to the program. You can change the order of the data elements.</p></td>
</tr>
<tr class="even">
<td><p>Section</p></td>
<td><p>A section groups data elements. You can then arrange the order of the sections to create the desired layout of the data entry form.</p></td>
</tr>
<tr class="odd">
<td><p>Custom</p></td>
<td><p>Defines the data entry form as HTML page.</p></td>
</tr>
</tbody>
</table>

> **注意**
>
> - 如果两者都存在，则自定义表单优先于部分表单。
>
> - 如果未定义自定义或部分表单，则将使用基本表单。
>
> - Android 应用程序仅支持部分表单。

You can create _program notifications_ for event programs. The notifications are sent either via the internal DHIS2 messaging system, via e-mail or via text messages (SMS). You can use program notifications to, for example, send an automatic reminder to a tracked entity 10 days before a scheduled appointment. You use the program’s tracked entity attributes (for example first name) and program parameters (for example enrollment date) to create a notification template. In the **Parameters** field, you'll find a list of available tracked entity attributes and program parameters.

### 工作流程：创建事件程序 { #workflow_event_program }

1.  输入事件程序详细信息。

2.  分配数据元素。

3.  创建数据输入表单：**基本**，**部分**或**自定义**。

4.  将程序分配给组织单位。

5.  创建程序通知。

### 创建或编辑事件程序 { #create_event_program }

#### 输入活动计划详细信息 { #enter-event-program-details }

1.  打开**维护**应用程序并单击**程序** \> **程序**。

2.  单击添加按钮，然后在弹出菜单中选择**事件程序**。

3.  输入程序详细信息，然后单击下一步。

     <table>
     <colgroup>
     <col style="width: 50%" />
     <col style="width: 50%" />
     </colgroup>
     <thead>
     <tr class="header">
     <th> <p>字段</p> </th>
     <th> <p>说明</p> </th>
       </tr>
     </thead>
     <tbody>
       <tr class="odd">
     <td> <p> <strong>名称</strong> </p> </td>
     <td> <p>程序的名称。 </p> </td>
       </tr>
       <tr class="even">
     <td> <p> <strong>颜色</strong> </p> </td>
     <td> <p>在数据捕获应用程序中用于此程序的颜色。 </p> </td>
       </tr>
       <tr class="odd">
     <td> <p> <strong>图标</strong> </p> </td>
     <td> <p>在数据捕获应用程序中用于此程序的图标。 </p> </td>
       </tr>
       <tr class="even">
     <td> <p> <strong>短名称</strong> </p> </td>
     <td> <p>程序的简称。在分析应用程序中，短名称用作默认图表或表标题。 </p> </td>
       </tr>
       <tr class="odd">
     <td> <p> <strong>说明</strong> </p> </td>
     <td> <p>程序的详细说明。 </p> </td>
       </tr>
       <tr class="even">
     <td> <p> <strong>版本</strong> </p> </td>
     <td> <p>程序的版本。例如，当人们在Android实现中离线收集数据时，将使用此功能。当他们上网并同步其元数据时，他们应该获得该程序的最新版本。 </p> </td>
       </tr>
       <tr class="odd">
     <td> <p> <strong>类别组合</strong> </p> </td>
     <td> <p>您要使用的类别组合。默认设置为<strong>无</strong>。 </p> </td>
       </tr>
       <tr class="even">
    <td><p><strong>数据审批工作流程 </strong></p></td>
     <td> <p>您要使用的数据批准工作流。默认设置为<strong>无值</strong>。 </p> </td>
       </tr>
       <tr class="odd">
    <td><p><strong>已完成的事件到期日期</strong></p></td>
     <td> <p>定义您可以编辑已完成事件的天数。这意味着，当事件完成且指定的到期天数已过时，该事件将被锁定。 </p>
     <p>如果将&quot;完成事件设置为&quot;到10&quot;，则事件在完成日期后十天被锁定。在此日期之后，您将无法再编辑事件。 </p> </td>
       </tr>
       <tr class="even">
     <td> <p> <strong>有效期类型</strong> </p>
     <p><strong>有效期</strong></p></td>
     <td> <p>到期天数定义了上一个周期结束后可以编辑事件的天数。期限类型由到期期限类型定义。这意味着自上一个期间的结束日期起经过指定的到期天数后，该期间的事件将被锁定。 </p>
     <p>如果将到期类型设置为&quot;Monthly&quot;，将到期日设置为&quot;10&quot;，则月份为10月，那么您无法在11月10日之后向10月添加或编辑事件。 </p> </td>
       </tr>
       <tr class="odd">
     完成后的块输入表格<td> <strong> </strong> </td>
    <td><p>Select checkbox to block the entry form after completion of the event of this program.</p>
     <p>这意味着在将状态重置为不完整之前，无法更改输入表单中的数据。 </p> </td>
       </tr>
       <tr class="even">
     <td> <strong>功能类型</strong> </td>
     <td> <p>设置程序是否要捕获地理特征类型。

-   **无** 没有捕获任何内容。
-   **多边形** 捕获一个区域。对于单个事件程序，该区域将是代表正在捕获的事件的区域。对于跟踪计划，该区域将代表注册区域。
-   **Point** A point/coordinate is captured. For single event programs the point will be representing the event being captured. For tracker programs, the point will represent the enrollment. </p></td> </tr> <tr class="odd"> <td><strong>Validation strategy</strong></td> <td>Sets the server and client side validation requirement.
    >无论验证策略如何，总是执行数据类型验证。例如，从不存储包含文本的整数字段。
-   **完成时** 此选项将强制在完成事件时修复必填字段和错误消息，但事件可以在不通过这些验证要求的情况下保存到服务器。
    -   出于遗留原因，这始终是跟踪器程序的验证策略，在该策略中，事件中的每个数据值在获取数据时都会存储到服务器。
-   **更新和插入时** 无论完成状态如何，此选项将在将事件保存到服务器时强制执行必需的字段验证。使用此选项时，如果没有通过验证，则无法存储任何事件。
       </td>
       </tr>
       <tr class="even">
       <td> <strong>预先生成的事件UID </strong> </td>
       <td>选中复选框以预先生成唯一的事件ID号。 </td>
       </tr>
       <tr class="odd">
       报告日期的描述<td> <strong>报告日期的描述</strong> </td>
       <td> <p>键入报告日期的描述。 </p>
       <p>此描述以案例输入表单显示。 </p> </td>
       </tr>
       </tbody>
       </table>

1.  点击下一步。

#### 分配数据元素 { #assign_data_elements }

1.  点击**分配数据元素**。

2.  在可用项目列表中，双击要分配给事件程序的数据元素。

3.  （可选）为每个数据元素添加其他设置：

    <table>
    <colgroup>
    <col style="width: 50%" />
    <col style="width: 50%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Setting</p></th>
    <th><p>Description</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p><strong>Compulsory</strong></p></td>
    <td><p>The value of this data element must be filled into data entry form before you can complete the event.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Allow provided elsewhere</strong></p></td>
    <td><p>Specify if the value of this data element comes from other facility, not in the facility where this data is entered.</p></td>
    </tr>
    <tr class="odd">
    <td><p><strong>Display in reports</strong></p></td>
    <td><p>Displays the value of this data element into the single event without registration data entry function.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Date in future</strong></p></td>
    <td><p>Will allow user to select a date in future for date data elements.</p></td>
    </tr>
    <tr class="odd">
    <td><p><strong>Mobile render type</strong></p></td>
    <td><p>Can be used to select different render types for mobile devices. Available options vary depending on the data element's value type. For example, for a numerical value you may select &quot;Default&quot;, &quot;Value&quot;, &quot;Slider&quot;, &quot;Linear scale&quot;, and &quot;Spinner&quot;.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Desktop render type</strong></p></td>
    <td><p>WARNING: NOT IMPLEMENTED YET.</p>
    <p>Can be used to select different render types for desktop (i.e. the web interface). Available options vary depending on the data element's value type. For example, for a numerical value you may select &quot;Default&quot;, &quot;Value&quot;, &quot;Slider&quot;, &quot;Linear scale&quot;, and &quot;Spinner&quot;.</p></td>
    </tr>
    </tbody>
    </table>

4.  点击下一步。

#### 创建数据输入表单 { #create_data_entry_forms }

The data entry forms decide how the data elements will be displayed to the user in the **Event Capture** app.

1.  点击**创建数据输入表单**。

2.  点击**基本**，**部分**或**自定义**。

3.  To create a **Basic** data entry form: Drag and drop the data elements in the order you want.

4.  要创建**部分**数据输入表单，请执行以下操作：

    1.  单击添加按钮并输入部分的名称、描述以及桌面和移动设备的渲染类型。

    2.  单击该部分，使其以黑线突出显示。

    3.  通过单击数据元素名称旁边的加号来添加数据元素。

    4.  重复上述步骤，直到获得所需的所有部分。

    5.  更改部分顺序：点按选项菜单，然后将该部分拖至所需位置。

5.  要通过以下方式创建 **自定义** 数据条目： 使用所见即所得编辑器创建完全自定义的表单。如果选择**来源**，则可以直接在编辑区域中粘贴 HTML 代码。您还可以插入图像，例如旗帜或徽标。

6.  点击下一步。

#### 访问 { #access }

Access options decide who can capture data for the program or view/edit the program's metadata. A program can be shared to organisation units, and in addition, the main program and any program stages' access options can be configured through the **Sharing dialog**. Access options are available in the **Access** tab.

分配组织单位：

1.  在组织树中，双击要添加到程序的组织单位。

    您可以通过展开分支（单击箭头符号）或按名称搜索来在树中找到组织单位。选定的组织单位显示为橙色。

更改角色和访问权限：

1.  向下滚动到**角色和访问权限**部分。

    第一行显示主程序的访问选项，随后的每一行显示一个程序阶段的选项。带有警告图标（感叹号）的程序阶段包含与主程序不同的访问选项，这意味着它们由不同的用户组合访问。

2.  单击任一行，将显示**共享对话框**。

3.  相应地修改访问选项。有关详细信息，请参阅有关共享对话框的文档。

4.  点击**应用**按钮。

5.  对每个程序/程序阶段重复该过程。您还可以将所有访问选项从主程序复制到您的子程序：

    1.  Select the program stages you want to have similar access options as the main program by toggling the checkboxes on the right hand side of the program stages. You can also choose to **Select all** program stages, **Deselect all** program stages or **Select similar** stages, in terms of access options, to that of the main program. Similar stages are toggled by default.

    2.  点击**应用于选定阶段**

#### 创建程序通知 { #create_program_notifications }

1.  创建您要发送的消息：

    1.  点击**发送什么？**。

    2.  输入一个**名称**。

    3.  创建 **主题模板**：双击 **模板变量** 字段中的参数将它们添加到您的主题中。

        > **Note**
        >
        > The subject is not included in text messages.

    4.  创建 **消息模板**：双击 **模板变量** 列表中的参数名称，将它们添加到您的消息中。

        亲爱的 A{w75KJ2mc4zz}，您现在已注册 V{program_name}。

2.  Define _when_ you want to send the message:

    1.  单击**什么时候发送？**。

    2.  选择一个**通知触发器**。

        <table>
        <colgroup>
        <col style="width: 50%" />
        <col style="width: 50%" />
        </colgroup>
        <thead>
        <tr class="header">
        <th><p>Notification trigger</p></th>
        <th><p>Description</p></th>
        </tr>
        </thead>
        <tbody>
        <tr class="odd">
        <td><p>Program stage completion</p></td>
        <td><p>The program stage notification is sent when the program stage is completed</p></td>
        </tr>
        <tr class="even">
        <td><p>Days scheduled (due date)</p></td>
        <td><p>The program stage notification is sent XX number of days before or after the due date</p>
        <p>You need to enter the number of days before or after the scheduled date that the notification will be send.</p></td>
        </tr>
        </tbody>
        </table>

3.  定义您要将消息发送给_谁_：

    1.  单击**将其发送给谁？**。

    2.  选择**通知**。

        <table>
        <colgroup>
        <col style="width: 50%" />
        <col style="width: 50%" />
        </colgroup>
        <thead>
        <tr class="header">
        <th><p>Notification recipient</p></th>
        <th><p>Description</p></th>
        </tr>
        </thead>
        <tbody>
        <tr class="odd">
        <td><p>Tracked entity instance</p></td>
        <td><p>Receives program notifications via e-mail or text message.</p>
        <p>To receive a program notification, the recipient must have an e-mail address or a phone number attribute.</p></td>
        </tr>
        <tr class="even">
        <td><p>Organisation unit contact</p></td>
        <td><p>Receives program notifications via e-mail or text message.</p>
        <p>To receive a program notification, the receiving organisation unit must have a registered contact person with e-mail address and phone number.</p></td>
        </tr>
        <tr class="odd">
        <td><p>Users at organisation unit</p></td>
        <td><p>All users registered to the selected organisation unit receive program notifications via the internal DHIS2 messaging system.</p></td>
        </tr>
        <tr class="even">
        <td><p>User group</p></td>
        <td><p>All members of the selected user group receive the program notifications via the internal DHIS2 messaging system</p></td>
        </tr>
        <tr class="odd">
        <td><p>Program</p></td>
        <td><p>TBA</p></td>
        </tr>
        </tbody>
        </table>

    3.  点击**保存**。 

4.  重复上述步骤，创建所需的所有程序通知。

5.  点击**保存**。 

> **注意**
>
> 您可以在 **数据管理** 应用程序中配置何时发送程序通知 \> **计划** \> **程序通知调度程序**。
>
> - 单击“**立即运行**”立即发送程序通知。
>
> - 选择时间并单击 **开始** 以安排在特定时间发送程序通知。

### 参考信息：程序通知参数 { #reference_information_event_program_notification_parameters }

<table>
<caption>Program notification parameters to use in program notifications</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Notification type</p></th>
<th><p>Variable name</p></th>
<th><p>Variable code</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Program</p></td>
<td><p>Current date</p></td>
<td><pre><code>V{current_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Days since enrollment date</p></td>
<td><pre><code>V{days_since_enrollment_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Enrollment date</p></td>
<td><pre><code>V{enrollment_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Incident date</p></td>
<td><pre><code>V{incident_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Organisation unit name</p></td>
<td><pre><code>V{org_unit_name}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Program name</p></td>
<td><pre><code>V{program_name}</code></pre></td>
</tr>
<tr class="odd">
<td><p>Program stage</p></td>
<td><p>Current date</p></td>
<td><pre><code>V{current_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Days since due date</p></td>
<td><pre><code>V{days_since_due_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Days until due date</p></td>
<td><pre><code>V{days_until_due_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Due date</p></td>
<td><pre><code>V{due_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Organisation unit name</p></td>
<td><pre><code>V{org_unit_name}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Program name</p></td>
<td><pre><code>V{program_name}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Program stage name</p></td>
<td><pre><code>V{program_stage_name}</code></pre></td>
</tr>
</tbody>
</table>

## 在维护应用程序中配置跟踪器程序 { #configure_tracker_program_in_Maintenance_app }

### 关于跟踪器程序 { #about-tracker-programs }

Single or multiple event programs _with_ registration are called Tracker programs. A program must be specified with only one tracked entity. Only tracked entities that are the same as the tracked entity of program can enroll into that program. A program needs several types of metadata that you create in the **Maintenance** apps.

### 工作流程：创建一个跟踪程序 { #workflow_tracker_program }

1.  输入跟踪器程序的详细信息。

2.  输入注册详细信息。

3.  分配属性并创建**部分**或**自定义**注册表格。

4.  创建程序阶段。

5.  配置访问权限，并分配给组织单位。

6.  创建程序和程序阶段通知。

### 创建或编辑Tracker程序 { #create-or-edit-a-tracker-program }

1. 打开**维护**应用程序并单击**程序** \> **程序**。

2. 单击添加按钮并在弹出菜单中选择**随访项目**。

#### 输入程序详细信息 { #tracker_enter_programs_details }

<table>
   <colgroup>
       <col style="width: 50%" />
       <col style="width: 50%" />
   </colgroup>
   <thead>
       <tr class="header">
           <th><p>领域</p></th>
           <th><p>说明</p></th>
       </tr>
   </thead>
   <tbody>
       <tr class="odd">
           <td>
               <p><strong>名称</strong></p>
           </td>
           <td><p>程序名称。</p></td>
       </tr>
       <tr class="even">
           <td>
               <p><strong>颜色</strong></p>
           </td>
           <td><p>跟踪捕捉中该程序使用的颜色。</p></td>
       </tr>
       <tr class="odd">
           <td>
               <p><strong>图标</strong></p>
           </td>
           <td><p>跟踪器捕获中该程序使用的图标</p></td>
       </tr>
       <tr class="even">
           <td>
               <p><strong>简称</strong></p>
           </td>
           <td>
               <p>
                    程序的简称。在分析应用程序中
                    分析应用程序中图表或表格的默认标题。
               </p>
           </td>
       </tr>
       <tr class="odd">
           <td>
               <p><strong>说明</strong></p>
           </td>
           <td><p>计划的详细说明。</p></td>
       </tr>
       <tr class="even">
           <td>
               <p><strong>版本</strong></p>
           </td>
           <td>
               <p>
                    程序的版本。例如
                    人们在安卓系统中离线收集数据。
                    当他们上网同步元数据时，他们
                    应获得程序的最新版本。
               </p>
           </td>
       </tr>
       <tr class="odd">
           <td>
               <p><strong>跟踪实体类型</strong></p>
           </td>
           <td>
               <p>
                    您要使用的跟踪实体类型。一个程序只能
                    一种跟踪实体类型。
               </p>
           </td>
       </tr>
       <tr class="even">
           <td>
               <p><strong>类别组合</strong></p>
           </td>
           <td>
               <p>
                    要使用的类别组合。默认
                    设置为<strong>无</strong> 。
               </p>
           </td>
       </tr>
       <tr class="odd">
           <td>
               <p><strong>显示首页列表</strong></p>
           </td>
           <td>
               <p>
                    选择复选框可在 Tracker Capture 中显示被跟踪实体
                    实例的列表。如果未选择，将显示搜索
                    将显示。
               </p>
           </td>
       </tr>
       <tr class="even">
           <td>
               <p><strong>第一阶段出现在注册页面</strong></p>
           </td>
           <td>
               <p>
                    选择复选框可在注册（报名）时同时显示第一个计划阶段。
                    与注册（报名）一起显示。
               </p>
           </td>
       </tr>
       <tr class="odd">
           <td>
               <p><strong>访问级别</strong></p>
           </td>
           <td><p>选择程序的访问级别。</p></td>
       </tr>
       <tr class="even">
           <td>
               <p><strong>已完成事件的有效期</strong></p>
           </td>
           <td>
               <p>
                    定义可编辑已完成事件的天数。
                    已完成事件的天数。这意味着当事件完成
                    且指定的有效天数已过，事件就会被锁定。
                    事件就会被锁定。
               </p>
               <p>
                    如果将&quot;已完成事件的有效天数&quot; 设置为
                    10&quot; ，事件会在完成日期后十天锁定。
                    日期。在此日期之后，您就不能再编辑该事件了。
               </p>
           </td>
       </tr>
       <tr class="odd">
           <td>
               <p><strong>有效期类型</strong></p>
               <p><strong>到期天数</strong></p>
           </td>
           <td>
               <p>
                    到期天数定义了事件在上一周期结束后的多少天内可以编辑。
                    事件可以编辑的天数。周期类型
                    由有效期类型定义。这意味着当
                    这就意味着，当指定的到期天数距离上一周期的结束日期已过
                    这就意味着，当距离上一周期的结束日期已过指定的有效天数时，该周期的事件就会被锁定。
                    锁定。
               </p>
               <p>
                    如果您将到期类型设置为&quot;Monthly&quot; ，将到期天数设置为 10 ，且月份为 10 月，则该事件将被锁定。
                    过期天数为&quot;10&quot; ，月份为 10 月，那么
                    则在 11 月 10 日之后就无法添加或编辑 10 月份的事件。
                    11月。
               </p>
           </td>
       </tr>
       <tr class="even">
           <td>
               <strong>搜索所需的最少属性数</strong>
           </td>
           <td>
               <p>
                    指定需要填写的被跟踪实体属性数
                    的数量。
                    程序。
               </p>
           </td>
       </tr>
       <tr class="odd">
           <td>
               <strong>在
                    搜索</strong>
           </td>
           <td>
               <p>
                    指定搜索时应返回的最大跟踪实体实例数。
                    在搜索中应返回的最大跟踪实体实例数。输入 0 表示无限制。
               </p>
           </td>
       </tr>
   </tbody>
</table>

#### 输入注册详细信息{ #enter_enrollment_details }

<table>
   <colgroup>
       <col style="width: 50%" />
       <col style="width: 50%" />
   </colgroup>
   <thead>
       <tr class="header">
           <th><p>领域</p></th>
           <th><p>说明</p></th>
       </tr>
   </thead>
   <tbody>
       <tr class="odd">
           <td><strong>允许未来的注册日期</strong></td>
           <td>
               <p>
                    如果要允许跟踪的实体
                    实例在未来某个日期注册该计划，请选择复选框。
               </p>
           </td>
       </tr>
       <tr class="even">
           <td><strong>允许未来事件日期</strong></td>
           <td>
               <p>
                    如果要允许程序中的事件日期为未来日期，请选择复选框。
                    选择复选框。
               </p>
           </td>
       </tr>
       <tr class="odd">
           <td>
               <strong>只能注册一次（每个跟踪实体实例的生命周期）</strong>
           </td>
           <td>
               <p>
                    如果希望被跟踪实体在计划中只能注册一次，请选择复选框。
                    只能在一个计划中注册一次，请选择复选框。此设置适用于
                    例如，在儿童疫苗接种或尸检计划中
                    在这些程序中，多次注册被跟踪实体是没有意义的。
                    实体注册多次没有意义。
               </p>
           </td>
       </tr>
       <tr class="even">
           <td><strong>显示事件日期</strong></td>
           <td>
               <p>
                    此设置允许您在被跟踪实体注册程序时显示或隐藏事件日期字段。
                    字段。
               </p>
           </td>
       </tr>
       <tr class="odd">
           <td><strong>事件日期描述</strong></td>
           <td>
               <p>输入事件日期的描述</p>
               <p>例如</p>
               <p>在一岁以下儿童的免疫接种计划中，事件日期为儿童的生日。
                    事件日期是儿童的生日。</p>
               <p>在孕产妇计划中，事件发生日期是最后一次月经的日期。
                    月经日期。</p>
           </td>
       </tr>
       <tr class="even">
           <td><strong>输入注册日期的描述</strong></td>
           <td>
               <p>
                    被跟踪实体注册加入
                    计划
               </p>
           </td>
       </tr>
       <tr class="odd">
           <td><strong>忽略逾期事件</strong></td>
           <td>
               <p>
                    当被跟踪的实体注册加入计划时，与计划阶段相对应的事件就会创建。
                    就会创建与计划阶段相对应的事件。如果
                    选择此复选框，系统将不会生成逾期事件。
                    事件。
               </p>
           </td>
       </tr>
       <tr class="even">
           <td><strong>特征类型</strong></td>
           <td>
               <p>
                    设置程序是否要捕捉地理
                    地物类型。
               </p>
               <ul>
               <li><strong>None（无）：</strong>不捕捉任何内容。</li>
               <li><strong>多边形：</strong> 捕捉一个区域。对于单个
                事件程序，该区域将是代表被捕获事件的区域。
                事件的区域。对于跟踪程序，区域将
                代表注册区域。</li>
               <li><strong>点：</strong> ：捕捉一个点/坐标。对于
                单个事件程序，该点将代表
                被捕捉的事件。对于跟踪程序，点将
                代表注册。</li>
               </ul>
           </td>
       </tr>
       <tr class="odd">
           <td><strong>相关计划</strong></td>
           <td>
               <p>
                    选择与您要创建的程序相关的跟踪程序。
                    例如 ANC 和儿童程序。
               </p>
           </td>
       </tr>
   </tbody>
</table>

#### 分配跟踪的实体属性。 { #assign_tracked_entity_attributes }

1. In the list of **Available program tracked entity attributes**, double-click the attributes you want to assign to the program.

2. （可选）对于每个分配的属性，添加其他设置：
 <table>
         <colgroup>
             <col style="width: 50%" />
             <col style="width: 50%" />
         </colgroup>
         <thead>
             <tr class="header">
                 <th><p>Setting</p></th>
                 <th><p>Description</p></th>
             </tr>
         </thead>
         <tbody>
             <tr class="odd">
                 <td>
                     <p><strong>Display in list</strong></p>
                 </td>
                 <td>
                     <p>
                         Displays the value of this attribute in the list of tracked
                         entity instances in Tracker capture.
                     </p>
                 </td>
             </tr>
             <tr class="even">
                 <td>
                     <p><strong>Mandatory</strong></p>
                 </td>
                 <td>
                     <p>
                         The value of this attribute must be filled into data entry
                         form before you can complete the event.
                     </p>
                 </td>
             </tr>
             <tr class="odd">
                 <td>
                     <p><strong>Date in future</strong></p>
                 </td>
                 <td>
                     <p>
                         Will allow user to select a date in future for date
                         attributes.
                     </p>
                 </td>
             </tr>
             <tr class="even">
                 <td>
                     <p><strong>Mobile render type</strong></p>
                 </td>
                 <td>
                     <p>
                         Can be used to select different render types for mobile
                         devices. Available options vary depending on the attribute's
                         value type. For example, for a numerical value you may
                         select &quot;Default&quot;, &quot;Value&quot;,
                         &quot;Slider&quot;, &quot;Linear scale&quot;, and
                         &quot;Spinner&quot;.
                     </p>
                 </td>
             </tr>
             <tr class="odd">
                 <td>
                     <p><strong>Desktop render type</strong></p>
                 </td>
                 <td>
                     <p>WARNING: NOT IMPLEMENTED YET.</p>
                     <p>
                         Can be used to select different render types for desktop
                         (i.e. the web interface). Available options vary depending
                         on the attribute's value type. For example, for a numerical
                         value you may select &quot;Default&quot;, &quot;Value&quot;,
                         &quot;Slider&quot;, &quot;Linear scale&quot;, and
                         &quot;Spinner&quot;.
                     </p>
                 </td>
             </tr>
         </tbody>
 </table>

3. 创建注册表

   注册表单定义了如何在使用中的应用（例如Android和Tracker Capture）中向用户显示属性。

    1. 点击**创建注册表格**。

    2. 点击**部分**或**自定义**。

    3. 创建**部分**表格：

        1. 点击添加按钮，然后为台式机和移动设备输入版块的名称，说明和渲染类型。
        2. 单击该部分，使其以黑色边框突出显示。
        3. 通过单击要添加的数据元素名称旁边的加号来添加数据元素。
        4. 重复上述步骤，直到获得所需的所有部分。要更改部分顺序：单击选项菜单，然后将部分拖动到所需位置。

    4. 创建** Custom **注册表：使用WYSIWYG编辑器创建一个完全定制的表单。如果选择“源”，则可以将HTML代码直接粘贴到编辑区域中。您还可以插入图像，例如标志或徽标。

    5. 单击添加阶段。

#### 创建程序阶段 { #create_program_stages }

一个程序由程序阶段组成。程序阶段定义哪个
每个阶段都应采取行动。

> **注意**
>
>在保存程序之前，不会保存对程序阶段的更改。

1. 单击加号创建一个程序阶段。
2. Enter program stage details: 1. Enter a **Name**. 2. (Optional) select a **Color** and an **Icon** that will be used by the data capture apps to identify this program stage. 3. Enter a **Description**. 4. In the **Scheduled days from start** field, enter the minimum number of days to wait for starting the program stage.
3. 输入可重复的程序阶段详细信息。
    1. Specify if the program stage is **Repeatable** or not.
    2. Select a **Period type**.
    3. 如果您不想在数据输入表单中为可重复阶段的事件单击_完成_后显示_创建新事件框_为可重复阶段创建新事件，请清除**完成后显示生成事件框**。默认选择该字段。
    4. Enter **Standard interval days**. The number of days to repeat the repeatable program stage.
    5. (Optional) Select a **Default next scheduled date**. This will show a list of assigned data elements of type **date**. If an element is selected, the Tracker client will use this as the default starting date. The data element can be used by program rules to dynamically schedule intervals between events.
4. 输入表格详细信息

 <table>
     <colgroup>
         <col style="width: 50%" />
         <col style="width: 50%" />
     </colgroup>
     <thead>
         <tr class="header">
             <th><p>Option</p></th>
             <th><p>Action</p></th>
         </tr>
     </thead>
     <tbody>
         <tr class="odd">
             <td>
                 <p><strong>Auto-generate event</strong></p>
             </td>
             <td>
                 <p>
                     Clear check box to prevent creating an event of this program
                     stage automatically when a entity is enrolled in the program.
                 </p>
             </td>
         </tr>
         <tr class="even">
             <td>
                 <p><strong>Open data entry form after enrollment</strong></p>
             </td>
             <td>
                 <p>
                     Select check box to automatically open the event of this
                     stage as soon as the entity has enrolled into the program.
                 </p>
             </td>
         </tr>
         <tr class="odd">
             <td>
                 <p><strong>Report date to use</strong></p>
             </td>
             <td>
                 If you have selected the
                 <strong>Open data entry form after enrollment</strong> check
                 box, also select a <strong>Report date to use</strong>:
                 <strong>Date of incident</strong> or
                 <strong>Date of enrollment</strong>.
                 <p>
                     This is the date used as report date for an event that has
                     been opened automatically.
                 </p>
                 <p>
                     If the <strong>Report date to use</strong> is selected as
                     one of those two ('incident date'/'enrollment date'), in
                     Dashboard, the 'Report date' of the event will be set as one
                     of those two.
                 </p>
             </td>
         </tr>
         <tr class="even">
             <td>
                 <p><strong>User assignment of events</strong></p>
             </td>
             <td>
                 <p>
                     Select check box to enable user assignment of the program
                     stage.
                 </p>
                 <p>
                     This means that in Tracker capture there will be a list of
                     users to which the event can be assigned.
                 </p>
             </td>
         </tr>
         <tr class="odd">
             <td>
                 <p><strong>Block entry form after completed</strong></p>
             </td>
             <td>
                 <p>
                     Select check box to block the entry form after completion of
                     the event of this stage.
                 </p>
                 <p>
                     This means that the data in the entry form can't be changed
                     until you reset the status to incomplete.
                 </p>
             </td>
         </tr>
         <tr class="even">
             <td>
                 <p>
                     <strong>Ask user to complete program when stage is
                         completed</strong>
                 </p>
             </td>
             <td>
                 <p>
                     Select check box to trigger a pop-up which asks the user if
                     he/she wants to create the event of next stage.
                 </p>
             </td>
         </tr>
         <tr class="odd">
             <td>
                 <p>
                     <strong>Ask user to create new event when stage is
                         complete</strong>
                 </p>
             </td>
             <td>
                 <p>
                     Select check box to trigger a pop-up which asks the users if
                     he/she wants to create a new event of this stage when an
                     event of this stage is completed.
                 </p>
                 <p>
                     This property is active only if you have selected
                     <strong>Repeatable</strong>.
                 </p>
             </td>
         </tr>
         <tr class="even">
             <td>
                 <p><strong>Generate events by enrollment date</strong></p>
             </td>
             <td>
                 <p>
                     Check on it for auto-generating due dates of events from
                     program-stages of this program based on the enrollment date.
                     If it is not checked, the due dates are generated based on
                     incident date.
                 </p>
             </td>
         </tr>
         <tr class="odd">
             <td>
                 <p><strong>Hide due dates</strong></p>
             </td>
             <td><p>Select checkbox to hide due dates for events.</p></td>
         </tr>
         <tr class="even">
             <td><strong>Feature type</strong></td>
             <td>
                 <p>
                     Sets wether the program is going to capture a geographical
                     feature type or not.
                 </p>
                 <ul>
                 <li><strong>None:</strong>Nothing is captured.</li>
                 <li>
                     <strong>Polygon: </strong> An area is captured. For single
                     event programs the area will be the area representing the
                     event being captured. For tracker programs, the area will
                     represent the area of the enrollment.
                 </li>
                 <li>
                     <strong>Point:</strong>: A point/coordinate is captured. For
                     single event programs the point will be representing the
                     event being captured. For tracker programs, the point will
                     represent the enrollment.
                 </li>
                 </ul>
             </td>
         </tr>
         <tr class="odd">
             <td>
                 <p><strong>Pre-generate event UID</strong></p>
             </td>
             <td>
                 <p>Select check box to pre-generate unique event id numbers.</p>
             </td>
         </tr>
         <tr class="even">
             <td>
                 <p><strong>Description of report date</strong></p>
             </td>
             <td>
                 <p>Type a description of the report date.</p>
                 <p>This description is displayed in the data entry form.</p>
             </td>
         </tr>
         <tr class="odd">
             <td>
                 <p><strong>Description of due date</strong></p>
             </td>
             <td><p>Type a description of the due date.</p></td>
         </tr>
     </tbody>
 </table>

5. 将数据元素分配给程序阶段：

    1. In the list of **Available data elements**, double-click the data elements you want to assign to the program stage.

    2. 对于每个分配的数据元素，检查属性。您可以选择：

 <table>
     <colgroup>
         <col style="width: 50%" />
         <col style="width: 50%" />
     </colgroup>
     <thead>
         <tr class="header">
             <th> <p>选项</p> </th>
             <th> <p>操作</p> </th>
         </tr>
     </thead>
     <tbody>
         <tr class="odd">
             <td>
                 <p> <strong>必选</strong> </p>
             </td>
             <td>
                 <p>
                    此数据元素的值必须填写到数据中
                    完成活动前的报名表。
                 </p>
             </td>
         </tr>
         <tr class="even">
             <td>
                 <p> <strong>允许在其他地方提供</strong> </p>
             </td>
             <td>
                 <p>
                    指定此数据元素的值是否来自其他
                    设备，而不是在输入此数据的设备中。
                 </p>
             </td>
         </tr>
         <tr class="odd">
             <td>
                 <p> <strong>在报告中显示</strong> </p>
             </td>
             <td>
                 <p>
                    在单个事件中显示此数据元素的值
                    没有注册数据输入功能。
                 </p>
             </td>
         </tr>
         <tr class="even">
             <td>
                 <p> <strong>将来的日期</strong> </p>
             </td>
             <td>
                 <p>允许为日期数据元素选择将来的日期。 </p>
             </td>
         </tr>
         <tr class="odd">
             <td>
                 <p> <strong>跳过同步</strong> </p>
             </td>
             <td>
                 <p>
                    运行数据时允许跳过数据元素
                    同步作业。
                 </p>
             </td>
         </tr>
         <tr class="even">
             <td>
                 <p> <strong>移动渲染类型</strong> </p>
             </td>
             <td>
                 <p>
                    可以用来为手机选择不同的渲染类型
                    设备。可用选项取决于属性的
                    值类型。例如，对于数字值，您可以
                    选择&quot;Default&quot;，&quot;Value&quot;，
                    &quot;Slider&quot;，&quot;线性比例&quot;和
                    &quot;Spinner&quot;。
                 </p>
             </td>
         </tr>
         <tr class="odd">
             <td>
                 <p> <strong>桌面渲染类型</strong> </p>
             </td>
             <td>
                 <p>警告：尚未实施。 </p>
                 <p>
                    可用于为桌面选择不同的渲染类型
                    （即网络界面）。可用选项因情况而异
                    在属性的值类型上。例如，对于数字
                    您可以选择&quot;Default&quot;，&quot;Value&quot;，
                    &quot;Slider&quot;，&quot;线性比例&quot;和
                    &quot;Spinner&quot;。
                 </p>
             </td>
         </tr>
     </tbody>
 </table>

6. 创建程序阶段的数据输入表单

    数据输入表单决定如何在 **Tracker Capture** 应用程序中向用户显示数据元素。

    1. 点击**创建数据输入表单**。

    2. 点击**基本**，**部分**或**自定义**。

    3. To create a **Basic** data entry form: Drag and drop the data elements in the order you want.

    4. 要创建**部分**数据输入表单，请执行以下操作：

        1. 单击添加按钮并输入部分的名称、描述以及桌面和移动设备的渲染类型。

        2. 单击该部分，使其以黑色边框突出显示。

        3. 通过单击数据元素名称旁边的加号来添加数据元素。

        4. 重复上述步骤，直到获得所需的所有部分。

        5. 更改部分顺序：点按选项菜单，然后将该部分拖至所需位置。

    5. 要通过以下方式创建 **自定义** 数据条目： 使用所见即所得编辑器创建完全自定义的表单。如果选择**来源**，则可以直接在编辑区域中粘贴 HTML 代码。您还可以插入图像，例如旗帜或徽标。

    6. 单击添加阶段。

#### 访问 { #tracker_program_access }

Access options decide who can capture data for the program or view/edit the program's metadata. A program can be shared to organisation units, and in addition, the main program and any program stages' access options can be configured through the **Sharing dialog**. Access options are available in the **Access** tab.

分配组织单位：

1.  在组织树中，双击要添加到程序的组织单位。

    您可以通过展开分支（单击箭头符号）或按名称搜索来在树中找到组织单位。选定的组织单位显示为橙色。

更改角色和访问权限：

1.  向下滚动到**角色和访问权限**部分。

    第一行显示主程序的访问选项，随后的每一行显示一个程序阶段的选项。带有警告图标（感叹号）的程序阶段包含与主程序不同的访问选项，这意味着它们由不同的用户组合访问。

2.  单击任一行，将显示**共享对话框**。

3.  相应地修改访问选项。有关详细信息，请参阅共享对话框的文档。

4.  点击**应用**按钮。

5.  对每个程序/程序阶段重复该过程。您还可以将所有访问选项从主程序复制到您的子程序：

    1.  Select the program stages you want to have similar access options as the main program by toggling the checkboxes on the right hand side of the program stages. You can also choose to **Select all** program stages, **Deselect all** program stages or **Select similar** stages, in terms of access options, to that of the main program. Similar stages are toggled by default.

    2.  点击**应用于选定阶段**

#### 创建程序通知 { #create_tracker_program_notifications }

您可以通过注册和创建程序的程序通知
他们的计划阶段。通知通过内部发送
DHIS2邮件系统，通过电子邮件或文本消息（SMS）。您可以
使用程序通知，例如，将自动提醒发送给
预定约会前10天跟踪的实体。您使用
程序的跟踪实体属性（例如名字）和程序
参数（例如注册日期）以创建通知
模板。

1.  Open the **Maintenance** app and click **Program and then notifications**.

    将打开所选程序的现有程序通知列表。如果该程序没有任何程序通知，则该列表为空。

2.  Click on add button and select **Program notification**.
![](resources/images/program/what_to_send.png)

    ![](resources/images/program/where_to_send.png) ![](resources/images/program/who_to_send.png)

3.  输入一个**名称**。

4.  创建**主题模板**。

    Double-click the parameters in the **Parameters** field to add them to your subject.

    > **Note**
    >
    > The subject is not included in text messages.

5.  创建**消息模板**。

    Double-click the parameter names in the **Parameters** field to add them to your message.

    亲爱的 A{w75KJ2mc4zz}，您现在已注册 V{program_name}。

6.  In the **When-to-send it** field, select what should trigger the notification.

    <table>
    <colgroup>
    <col style="width: 33%" />
    <col style="width: 33%" />
    <col style="width: 33%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Trigger</p></th>
    <th><p>Description</p></th>
    <th><p>Note</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p>Program enrollment</p></td>
    <td><p>The program notification is sent when the TEI enrols in the program.</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Program completion</p></td>
    <td><p>The program notification is sent when the program of TEI is completed</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="odd">
    <td><p>Days scheduled (incident date)</p></td>
    <td><p>The program notification is sent XX number of days before or after the incident date</p></td>
    <td><p>You need to enter the number of days before or after the scheduled date that the notification will be send.</p></td>
    </tr>
    <tr class="even">
    <td><p>Days scheduled (enrollment date)</p></td>
    <td><p>The program notification is sent XX number of days before or after the enrollment date</p></td>
    <td><p>You need to enter the number of days before or after the scheduled date that the notification will be send.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Program Rule</p></td>
    <td><p>Notification will be triggered as a result of program rule exeuction.</p></td>
    <td><p>Program rule with ProgramRuleActionType.SENDMESSAGE need to be in place to make this trigger successful.</p></td>
    </tr>
    </tbody>
    </table>

7.  在 **谁发送** 字段中，选择谁应该接收计划通知。

    <table>
    <colgroup>
    <col style="width: 33%" />
    <col style="width: 33%" />
    <col style="width: 33%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Recipient type</p></th>
    <th><p>Description</p></th>
    <th><p>Note</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p>Tracked entity instance</p></td>
    <td><p>Receives program notifications via e-mail or text message.</p></td>
    <td><p>To receive a program notification, the recipient must have an e-mail address or a phone number attribute.</p></td>
    </tr>
    <tr class="even">
    <td><p>Organisation unit contact</p></td>
    <td><p>Receives program notifications via e-mail or text message.</p></td>
    <td><p>To receive a program notification, the receiving organisation unit must have a registered contact person with e-mail address and phone number.</p></td>
    </tr>
    <tr class="odd">
    <td>Users at organisation unit:</td>
    <td><p>All users registered to the selected organisation unit receive program notifications via the internal DHIS2 messaging system.</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>User group</p></td>
    <td><p>All members of the selected user group receive the program notifications via the internal DHIS2 messaging system</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="odd">
    <td><p>Limit To Hierarchy</p></td>
    <td><p>Send notification only to those users who belong to any of the organisation unit in the hierarchy.</p></td>
    <td><p>This option is only available when User Group is selected as recipient.</p></td>
    </tr>
    <tr class="even">
    <td><p>Parent OrgUnit Only</p></td>
    <td><p>Send notification only to those users who belong to parent organisation unit.</p></td>
    <td><p>This option is only available when User Group is selected as recipient.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Program Attribute</p></td>
    <td><p>TrackedEntityAttribute can also be selected as recipient.</p></td>
    <td><p>This parameter will only be effective if TrackedEntityAttribute value type is PHONE_NUMBER/EMAIL.</p></td>
    </tr>
    </tbody>
    </table>

8.  点击**保存**。 

### 创建程序阶段通知 { #create-a-program-stage-notification }

![](resources/images/program/what_to_send-psnt.png)

![](resources/images/program/what_to_send-psnt.png)

![](resources/images/program/what_to_send-psnt.png)

1.  Open the **Maintenance** app and click **Program and then notifications**.

    将打开所选计划阶段的现有计划阶段通知列表。如果节目阶段没有任何节目阶段通知，则列表为空。

2.  点击添加按钮，然后选择**程序阶段通知**。

3.  点击**添加新**。

4.  输入一个**名称**。

5.  创建**主题模板**。

    Double-click the parameter names in the **Parameters** field to add them to your subject.

    > **Note**
    >
    > The subject is not included in text messages.

6.  创建**消息模板**。

    Double-click the parameter names in the **Parameters** field to add them to your message.

    亲爱的 A{w75KJ2mc4zz}，请前来预约 V{due_date}。

7.  In the **When-to-send-it** field, select what should trigger the notification.

    <table>
    <colgroup>
    <col style="width: 33%" />
    <col style="width: 33%" />
    <col style="width: 33%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Trigger</p></th>
    <th><p>Description</p></th>
    <th><p>Note</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p>Program stage completion</p></td>
    <td><p>The program stage notification is sent when the program stage is completed</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Days scheduled (due date)</p></td>
    <td><p>The program stage notification is sent XX number of days before or after the due date</p></td>
    <td><p>You need to enter the number of days before or after the scheduled date that the notification will be send.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Program Rule</p></td>
    <td><p>Notification will be triggered as a result of program rule execution.</p></td>
    <td><p>Program rule with ProgramRuleActionType.SENDMESSAGE need to be in place to make this trigger successful.</p></td>
    </tr>
    </tbody>
    </table>

8.  In the **Recipients** field, select who should receive the program stage notification. You can select:

    <table>
    <colgroup>
    <col style="width: 33%" />
    <col style="width: 33%" />
    <col style="width: 33%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Recipient type</p></th>
    <th><p>Description</p></th>
    <th><p>Note</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p>Tracked entity instance</p></td>
    <td><p>Receives program notifications via e-mail or text message.</p></td>
    <td><p>To receive a program stage notification, the recipient must have an e-mail address or a phone number attribute.</p></td>
    </tr>
    <tr class="even">
    <td><p>Organisation unit contact</p></td>
    <td><p>Receives program notifications via e-mail or text message.</p></td>
    <td><p>To receive a program stage notification, the receiving organisation unit must have a registered contact person with e-mail address and phone number.</p>
    <p>The system selects the same organisation unit as where the event took place.</p></td>
    </tr>
    <tr class="odd">
    <td>Users at organisation unit:</td>
    <td><p>All users registered to the selected organisation unit receive program notifications via the internal DHIS2 messaging system.</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>User group</p></td>
    <td><p>All members of the selected user group receive the program notifications via the internal DHIS2 messaging system</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="odd">
    <td><p>Limit To Hierarchy</p></td>
    <td><p>Send notification only to those users who belong to any of the organisation unit in the hierarchy.</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Parent OrgUnit Only</p></td>
    <td><p>Send notification only to those users who belong to parent organisation unit.</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="odd">
    <td><p>Data Element</p></td>
    <td><p>Data Element associated with ProgramStage can be selected as recipient.</p></td>
    <td><p>Data Element will only be effective if DataElement has value type PHONE_NUMBER/EMAIL.</p></td>
    </tr>
    </tbody>
    </table>

9.  点击**保存**。 

### 参考信息：程序通知参数 { #reference_information_event_program_notification_parameters }

<table>
<caption>Program notification parameters to use in program notifications</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Notification type</p></th>
<th><p>Variable name</p></th>
<th><p>Variable code</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Program</p></td>
<td><p>Current date</p></td>
<td><pre><code>V{current_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Days since enrollment date</p></td>
<td><pre><code>V{days_since_enrollment_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Enrollment date</p></td>
<td><pre><code>V{enrollment_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Incident date</p></td>
<td><pre><code>V{incident_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Organisation unit name</p></td>
<td><pre><code>V{org_unit_name}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Program name</p></td>
<td><pre><code>V{program_name}</code></pre></td>
</tr>
<tr class="odd">
<td><p>Program stage</p></td>
<td><p>Current date</p></td>
<td><pre><code>V{current_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Days since due date</p></td>
<td><pre><code>V{days_since_due_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Days until due date</p></td>
<td><pre><code>V{days_until_due_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Due date</p></td>
<td><pre><code>V{due_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Organisation unit name</p></td>
<td><pre><code>V{org_unit_name}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Program name</p></td>
<td><pre><code>V{program_name}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Program stage name</p></td>
<td><pre><code>V{program_stage_name}</code></pre></td>
</tr>
</tbody>
</table>

## 配置程序指示器 { #configure_program_indicator }

### 关于计划指标 { #about_program_indicators }

程序指示符是基于数据元素和属性的表达式
跟踪实体的数量，可用于基于
式。计划指标包括汇总类型，分析
类型，表达式和过滤器。

根据分配的汇总类型评估计划指标，
表达式和过滤器。评估顺序为：

1.  _filter_ 将过滤成为评估/聚合例程一部分的事件。

2.  _表达式_ 将针对每个事件进行评估。

3.  所有评估的表达式值将根据程序指标的聚合类型进行_聚合_。

<table>
<caption>Program indicator components</caption>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Program rule component</p></th>
<th><p>Description</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Aggregation type</p></td>
<td><p>The aggregation type determines how the program indicator will be aggregated. The following aggregation types are available:</p>
<ul>
<li><p>Average</p></li>
<li><p>Average (number)</p></li>
<li><p>Average (number, disaggregation)</p></li>
<li><p>Average (sum in organisation unit hierarchy)</p></li>
<li><p>Average (sum of numbers)</p></li>
<li><p>Average (sum of numbers, disaggregation)</p></li>
<li><p>Average (Yes/No)</p></li>
<li><p>Count</p></li>
<li><p>Custom</p>
<p>The &quot;custom&quot; aggregation type allows you to specify the aggregation type in-line in the expression. All other aggregation  types are applied to the entire expression.</p>
<p>Using the &quot;custom&quot; aggregation type might lead to an exception of the order of evaluation described above where individual parts of the expression can be evaluated and aggregated, as opposed to the entire expression being evaluated prior to aggregation.</p></li>
<li><p>Default</p></li>
<li><p>Max</p></li>
<li><p>Min</p></li>
<li><p>None</p></li>
<li><p>Standard deviation</p></li>
<li><p>Sum</p></li>
<li><p>Variance</p></li>
</ul></td>
</tr>
<tr class="even">
<td><p>Analytics type</p></td>
<td><p>The available analytics types are <em>event</em> and <em>enrollment</em>.</p>
<p>The analytics type defines whether the program indicator is calculated based on events or program enrollments. This has an impact on what type of calculations can be made.</p>
<ul>
<li><p>Events implies a data source where each event exists as an independent row. This is suitable for performing aggregations such as counts and sums.</p></li>
<li><p>Enrollments implies a data source where all events for a single enrollment is combined on the same row. This allows for calculations which can compare event data from various program stages within a program enrollment.</p></li>
</ul></td>
</tr>
<tr class="odd">
<td><p>Analytics period boundaries</p></td>
<td><p>Defines the boundaries for the program indicator calculation. The boundaries determine which events or enrollments gets included in aggregations, always relative to the aggregate reporting period start and end. When creating the program indicator, the default boundaries will get preselected based on analytics type.</p>
<ul>
<li><p>For analytics type <em>event</em>, the default boundaries will be configured to encapsulate any events with an event date after the reporting period starts and before the reporting period ends.</p></li>
<li><p>For analytics type <em>enrollment</em>, the default boundaries will encapsulate all enrollments with an enrollment date after the reporting date starts and before the reporting period ends. In addition, the default enrollment program indicator evaluates the newest event for all program stages regardless of date.</p></li>
</ul>
<p>It is possible to change the upper and lower boundaries to include a longer or shorter period relative to the reporting period, or delete one of the boundaries - in effect returning all data before or after a certain period. It is also possible to add more constraints, for example to make an enrollment program indicator only include event data up to a given point in time.</p>
<ul>
<li><p>Boundary target: Can be <em>incident date</em>, <em>event date</em>, <em>enrollment date</em> or <em>custom</em>. Designates what is being constrained by the boundary.</p>
<p><em>custom</em> is used make boundary that target either a date data element, tracked entity attribute or the presence of an event in a program stage. This is done with a custom expression on the form:</p>
<ul>
<li><p>Data element of type date: #{programStageUid.dataElementUid}.</p>
<pre><code>#{A03MvHHogjR.a3kGcGDCuk6}</code></pre></li>
<li><p>Tracked entity attribute of type date: #{attributeUid}.</p>
<pre><code>A{GPkGfbmArby}</code></pre></li>
<li><p>Presence of one event in a specific program stage: PS_EVENTDATE:programStageUid.</p>
<pre><code>PS_EVENTDATE:A03MvHHogjR</code></pre>
<blockquote>
<p><strong>Note</strong></p>
This boundary target is only applicable to
Analytics type Enrollment
</blockquote></li>
</ul></li>
<li><p>Analytics period boundary type: Defines whether the boundary is an end boundary - starting with &quot;before...&quot;, or a start boundary - &quot;after...&quot;. Also defines whether the boundary relates to the end of the aggregate reporting period or the start of the aggregate reporting period.</p></li>
<li><p>Offset period by amount: In some cases, for example cohort analytics, the boundary should be offset relative to the aggregate reporting period when running pivots and reports. The offset period by amount is used to move the current boundary either back(negative) or forward(positive) in time. The amount and period type together will determine how big the offset will be. An example can be when making a simple enrollment cohort program indicator for a 1 year cohort, it might be enough to offset each boundary of the program indicator with &quot;-1&quot; and &quot;Years&quot;</p></li>
<li><p>Period type: See above. Can be any period, e.g. <em>Weekly</em> or <em>Quarterly</em>.</p></li>
</ul></td>
</tr>
<tr class="even">
<td><p>Expression</p></td>
<td><p>The expression defines how the indicator is being calculated. The expression can contain references to various entities which will be substituted with a related values when the indicator is calculated:</p>
<ul>
<li><p>Data elements: Will be substituted with the value of the data element for the time period and organisation unit for which the calculation is done. Refers to both program stage and data element.</p></li>
<li><p>Attributes: Will be substituted with the value of the attribute for the person / tracked entity for which the calculation is done.</p></li>
<li><p>Variables: Will be substituted with special values linked to the program, including incident date and date of enrollment for the person, current date and count of values in the expression for the time period and organisation unit for which the calculation is done.</p></li>
<li><p>Constants: Will be substituted with the value of the constant.</p></li>
</ul>
<p>The expression is a mathematical expression and can also contain operators.</p>
<p>For single event programs and tracker programs with analytics type <em>event</em>, the expression will be evaluated <em>per event</em>, then aggregated according to its aggregation type.</p>
<p>For tracker programs with analytics type <em>enrollment</em>, the expression will be evaluated <em>per enrollment</em>, then aggregated according to its aggregation type.</p></td>
</tr>
<tr class="odd">
<td><p>Filter</p></td>
<td><p>The filter is applied to events and filters the data source used for the calculation of the indicator. I.e. the filter is applied to the set of events before the indicator expression is being evaluated. The filter must evaluate to either true or false. It filter is applied to each individual event. If the filter evaluates to true then the event is included later in the expression evaluation, if not it is ignored. The filter can, in a similar way as expressions, contain references to data elements, attributes and constants.</p>
<p>The program indicator filter can in addition use logical operators. These operators can be used to form logical expressions which ultimately evaluate to either true or false. For example you can assert that multiple data elements must be a specific value, or that specific attributes must have numerical values less or greater than a constant.</p></td>
</tr>
</tbody>
</table>

In the **Maintenance** app, you manage the following program indicator objects:

<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Object type</p></th>
<th><p>Available functions</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Program indicator</p></td>
<td><p>Create, edit, clone, share, delete, show details and translate</p></td>
</tr>
<tr class="even">
<td><p>Program indicator group</p></td>
<td><p>Create, edit, clone, share, delete, show details and translate</p></td>
</tr>
</tbody>
</table>

### 创建或编辑程序指示器 { #create_program_indicator }

> **注意**
>
>程序指示器完全属于一个程序。

1.  打开**维护**应用程序并单击**指示器** \> **程序指示器**。

2.  点击添加按钮。

3.  Select a **Program** and enter:

    -   **名称**

    -   **简称**

    -   **码**

    -   **颜色**

    -   **图标**

    -   **描述**

4.  Select number of **Decimals in data output**.

5.  Select an **Aggregation type**.

6.  如果要**以表格显示**，请选择一个。

7.  Assign one or multiple **Legend**s.

8.  （可选）输入 **聚合数据导出的类别选项组合**。

9.  (Optional) Enter an **Attribute option combination for aggregate data export**.

10. 创建表达式。

    1.  点击**编辑表达式**。

    2.  根据数学运算符以及右侧列出的属性、变量和常量创建表达式。

11. 创建过滤器。

    1.  点击**编辑过滤器**。

    2.  根据数学运算符以及右侧列出的属性、变量和常量创建表达式。

12. 点击**保存**。 

### 创建或编辑程序指示器组 { #create_program_indicator_group }

1.  打开**维护**应用程序并单击**指示器** \> **程序指示器组**。

2.  点击添加按钮。

3.  Enter **Name** and **Code**.

4.  在可用程序指示器列表中，双击要分配给组的程序指示器。

5.  点击**保存**。 

### 参考信息：每种值类型的表达式和过滤器示例 { #reference_information_program_indicator }

下表显示了如何编写表达式和过滤器的示例
对于不同的数据元素和属性值类型：

<table>
<caption>Expression and filter examples per value type</caption>
<thead>
<tr class="header">
<th>Value types</th>
<th>Example syntax</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Integer</p>
<p>Negative integer</p>
<p>Positive or zero integer</p>
<p>Positive integer</p>
<p>Number</p>
<p>Percentage</p></td>
<td><p>Numeric fields, can be used for aggregation as an expression, or in filters:</p>
<pre><code>#{mCXR7u4kNBW.K0A4BauXJDl} &gt;= 3</code></pre></td>
</tr>
<tr class="even">
<td><p>Yes/No</p>
<p>Yes only</p></td>
<td><p>Boolean fields. Yes is translated to numeric 1, No to numeric 0. Can be used for aggregation as an expression, or in filters:</p>
<pre><code>#{mCXR7u4kNBW.Popa3BauXJss} == 1</code></pre></td>
</tr>
<tr class="odd">
<td><p>Text</p>
<p>Long text</p>
<p>Phone number</p>
<p>Email</p></td>
<td><p>Text fields. Can be checked for equality in filters:</p>
<pre><code>#{mCXR7u4kNBW.L8K4BauIKsl} == &#39;LiteralValue&#39;</code></pre></td>
</tr>
<tr class="even">
<td><p>Date</p>
<p>Age</p></td>
<td><p>Date fields. Most useful when combined with a d2:daysBetween function, which produces a number that can be aggregated as an expression or used in filters:</p>
<pre><code>d2:daysBetween(#{mCXR7u4kNBW.JKJKBausssl},V{enrollment_date}) &gt; 100</code></pre>
<p>Can also directly be checked for equality in filters:</p>
<pre><code>#{mCXR7u4kNBW.JKJKBausssl} == &#39;2011-10-28&#39;</code></pre></td>
</tr>
</tbody>
</table>

### 参考信息：在程序指示器表达式和过滤器中使用的函数，变量和运算符 { #program_indicator_functions_variables_operators }

包含属性，数据元素和常量的表达式
看起来像这样：

    （A {GPkGfbmArby} +＃{mCXR7u4kNBW.NFkjsNiQ9PH}）* C {bCqvfPR02Im}

使用自定义聚合类型的表达式，因此可以使用
内联聚合类型看起来像
    这个：

    （sum（＃{mCXR7u4kNBW.K0A4BauXJDl} *＃{mCXR7u4kNBW.NFkjsNiQ9PH}）/ sum（＃{mCXR7u4kNBW.NFkjsNiQ9PH}）））* 100

注意在表达式内部如何使用“ sum”聚合运算符
本身。

#### 程序指示符表达式或过滤器中使用的函数 { #functions-to-use-in-a-program-indicator-expression-or-filter }

程序指示符表达式和过滤器支持以下范围
职能。这些函数可以应用于数据元素和属性：

<table>
<caption>Functions to use in a program indicator expression or filter</caption>
<colgroup>
<col style="width: 15%" />
<col style="width: 30%" />
<col style="width: 54%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Function</p></th>
<th><p>Arguments</p></th>
<th><p>Description</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>d2:hasValue</p></td>
<td><p>(object)</p></td>
<td><p>Returns true if the data element/attribute has a value. Can be used in filters to distinguish between the number 0 and no value, and to distinguish between explicit &quot;No&quot; and no selection for a Yes/No field.</p></td>
</tr>
<tr class="even">
<td><p>d2:minutesBetween</p></td>
<td><p>(datetime, datetime)</p></td>
<td><p>Produces the number of minutes between two data elements/attributes of type &quot;date and time&quot;. When the first argument datetime comes before the second argument datetime, the number will be positive - in the opposite case, the number will be negative. The static datetime format is 'yyyy-MM-dd hh:mm'. Any of the arguments can be replaced with PS_EVENTDATE:(programStageUid) to compare the latest event date from a given program stage.</p></td>
</tr>
<tr class="odd">
<td><p>d2:daysBetween</p></td>
<td><p>(date, date)</p></td>
<td><p>Produces the number of days between two data elements/attributes of type date. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'. Any of the arguments can be replaced with PS_EVENTDATE:(programStageUid) to compare the latest event date from a given program stage.</p></td>
</tr>
<tr class="even">
<td><p>d2:weeksBetween</p></td>
<td><p>(date, date)</p></td>
<td><p>Produces the number of full weeks between two data elements/attributes of type date. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'. Any of the arguments can be replaced with PS_EVENTDATE:(programStageUid) to compare the latest event date from a given program stage.</p></td>
</tr>
<tr class="odd">
<td><p>d2:monthsBetween</p></td>
<td><p>(date, date)</p></td>
<td><p>Produces the number of full months between two data elements/attributes of type date. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'. Any of the arguments can be replaced with PS_EVENTDATE:(programStageUid) to compare the latest event date from a given program stage.</p></td>
</tr>
<tr class="even">
<td><p>d2:yearsBetween</p></td>
<td><p>(date, date)</p></td>
<td><p>Produces the number of full years between two data elements/attributes of type date. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'. Any of the arguments can be replaced with PS_EVENTDATE:(programStageUid) to compare the latest event date from a given program stage.</p></td>
</tr>
<tr class="odd">
<td><p>d2:condition</p></td>
<td><p>(boolean-expr, true-expr, false-expr)</p></td>
<td><p>Evaluates the boolean expression and if true returns the true expression value, if false returns the false expression value. The conditional expression must be quoted. The true-expr and false-expr arguments must follow the rules of any program indicator expression (including functions).</p></td>
</tr>
<tr class="even">
<td><p>d2:zing</p></td>
<td><p>(expression)</p></td>
<td><p>Returns zero if the expression is negative, otherwise returns the expression value. The expression must follow the rules of any program indicator expression (including functions).</p></td>
</tr>
<tr class="odd">
<td><p>d2:oizp</p></td>
<td><p>(expression)</p></td>
<td><p>Returns one if the expression is zero or positive, otherwise returns zero. The expression must follow the rules of any program indicator expression (including functions).</p></td>
</tr>
<tr class="even">
<td><p>d2:zpvc</p></td>
<td><p>(object, [,object ...])</p></td>
<td><p>Returns the number of numeric zero and positive values among the given object arguments. Can be provided any number of arguments.</p></td>
</tr>
<tr class="odd">
<td><p>d2:relationshipCount</p></td>
<td><p>([relationshipTypeUid])</p></td>
<td><p>Produces the number of relationships of the given type that is connected to the enrollment or event. When no type is given, all types are counted.</p></td>
</tr>
<tr class="even">
<td><p>d2:count</p></td>
<td><p>(dataElement)</p></td>
<td><p>Useful only for enrollment program indicators. Counts the number of data values that has been collected for the given program stage and data element in the course of the enrollment. The argument data element is supplied with the #{programStage.dataElement} syntax.</p></td>
</tr>
<tr class="odd">
<td><p>d2:countIfValue</p></td>
<td><p>(dataElement, value)</p></td>
<td><p>Useful only for enrollment program indicators. Counts the number of data values that matches the given literal value for the given program stage and data element in the course of the enrollment. The argument data element is supplied with the #{programStage.dataElement} syntax. The value can be a hard coded text or number, for example 'No_anemia' if only the values containing this text should be counted.</p></td>
</tr>
<tr class="even">
<td><p>d2:countIfCondition</p></td>
<td><p>(dataElement, condition)</p></td>
<td><p>Useful only for enrollment program indicators. Counts the number of data values that matches the given condition criteria for the given program stage and data element in the course of the enrollment. The argument data element is supplied with the #{programStage.dataElement} syntax. The condition is supplied as a expression in single quotes, for example '&lt;10' if only the values less than 10 should be counted.</p></td>
</tr>
<tr class="odd">
<td><p>if</p></td>
<td><p>(boolean-expr, true-expr, false-expr)</p></td>
<td><p>Evaluates the boolean expression and if true returns the true expression value, if false returns the false expression value. This is identical to the d2:condition function except that the boolean-expr is not quoted.</p></td>
</tr>
<tr class="even">
<td><p>isNull</p></td>
<td><p>(object)</p></td>
<td><p>Returns true if the object value is missing (null), otherwise false.</p></td>
</tr>
<tr class="odd">
<td><p>isNotNull</p></td>
<td><p>(object)</p></td>
<td><p>Returns true if the object value is not missing (not null), otherwise false.</p></td>
</tr>
<tr class="even">
<td><p>firstNonNull</p></td>
<td><p>(object [, object ...])</p></td>
<td><p>Returns the value of the first object that is not missing (not null). Can be provided any number of arguments. Any argument may also be a numeric or string literal, which will be returned if all the previous objects have missing values.</p></td>
</tr>
<tr class="odd">
<td><p>greatest</p></td>
<td><p>(expression [, expression ...])</p></td>
<td><p>Returns the greatest (highest) value of the expressions given. Can be provided any number of arguments. Each expression must follow the rules of any program indicator expression (including functions).</p></td>
</tr>
<tr class="even">
<td><p>least</p></td>
<td><p>(expression [, expression ...])</p></td>
<td><p>Returns the least (lowest) value of the expressions given. Can be provided any number of arguments. Each expression must follow the rules of any program indicator expression (including functions).</p></td>
</tr>
</tbody>
</table>

使用“ hasValue”函数的过滤器如下所示：

    d2：hasValue（＃{mCXR7u4kNBW.NFkjsNiQ9PH}）

使用“ relationshipCount（relationshipTypeUid）”函数的过滤器如下所示：

    d2：relationshipCount（'KLkjshoQ90U'）

使用“ zing”和“ oizp”函数的表达式如下所示：

    d2：zing（A {GPkGfbmArby}）+ d2：oizp（＃{mCXR7u4kNBW.NFkjsNiQ9PH}））

使用“ daysBetween”函数的表达式如下所示：

    d2：daysBetween（＃{mCXR7u4kNBW.k8ja2Aif1Ae}，'2015-06-01'）

使用“ yearBetween”函数将程序阶段“ mCXR7u4kNBW”的最新事件与注册日期进行比较的表达式如下所示：

    d2：daysBetween（V {enrollment_date}，PS_EVENTDATE：mCXR7u4kNBW）

使用“条件”函数的表达式如下所示：

    d2：condition（'＃{mCXR7u4kNBW.NFkjsNiQ9PH}> 100'，150,50）

使用“ countIfValue”函数的表达式仅计算收集值10的次数，如下所示：

    d2：countIfValue（＃{mCXR7u4kNBW.NFkjsNiQ9PH}），10）

使用“ zpvc”函数的表达式如下所示：

    d2：zpvc（A {GPkGfbmArby}），＃{mCXR7u4kNBW.NFkjsNiQ9PH}），4，-1）

使用“ if”和“ isnull”函数的表达式如下所示：

    if（isNull（A {GPkGfbmArby}），10,20）

使用“ firstNonNull”函数的表达式如下所示：

    firstNonNull（A {GPkGfbmArby}），＃{mCXR7u4kNBW.NFkjsNiQ9PH}，44）

使用“最大”函数的表达式如下所示：

    最好的（＃{mCXR7u4kNBW.k8ja2Aif1Ae}，＃{mCXR7u4kNBW.NFkjsNiQ9PH}，1）

#### 程序指示符表达式或过滤器中使用的变量 { #variables-to-use-in-a-program-indicator-expression-or-filter }

程序指示符表达式和过滤器支持以下范围
变量：

<table>
<caption>Variables to use in a program indicator expression or filter</caption>
<colgroup>
<col style="width: 21%" />
<col style="width: 78%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Variable</p></th>
<th><p>Description</p></th>
</tr>
</thead>
<tbody>
<tr>
<td><p>event_date</p></td>
<td><p>The date of when the event or the last event in the enrollment took place.</p></td>
</tr>
<tr>
<td><p>creation_date</p></td>
<td><p>The date of when an event or enrollment was created in the system.</p></td>
</tr>
<tr>
<td><p>due_date</p></td>
<td><p>The date of when an event is due.</p></td>
</tr>
<tr>
<td><p>sync_date</p></td>
<td><p>The date of when the event or enrollment was last syncronized with the Android app.</p></td>
</tr>
<tr>
<td><p>incident_date</p></td>
<td><p>The date of the incidence of the event.</p></td>
</tr>
<tr>
<td><p>enrollment_date</p></td>
<td><p>The date of when the tracked entity instance was enrolled in the program.</p></td>
</tr>
<tr>
<td><p>enrollment_status</p></td>
<td><p>Can be used to include or exclude enrollments in certain statuses.</p>
<p>When calculating the haemoglobin improvement/deterioration throughout a pregnancy, it might make sense to only consider completed enrollments. If non-completed enrollments is not filtered out, these will represent half-finished ANC followups, where the final improvement/deterioration is not yet established.</p></td>
</tr>
<tr>
<td><p>current_date</p></td>
<td><p>The current date.</p></td>
</tr>
<tr>
<td><p>value_count</p></td>
<td><p>The number of non-null values in the expression part of the event.</p></td>
</tr>
<tr>
<td><p>zero_pos_value_count</p></td>
<td><p>The number of numeric positive values in the expression part of the event.</p></td>
</tr>
<tr>
<td><p>event_count</p></td>
<td><p>The count of events (useful in combination with filters).</p></td>
</tr>
<tr>
<td><p>enrollment_count</p></td>
<td><p>The count of enrollments (useful in combination with filters). Aggregation type for the program indicator must be COUNT. </p></td>
</tr>
<tr>
<td><p>tei_count</p></td>
<td><p>The count of tracked entity instances (useful in combination with filters). Aggregation type for the program indicator must be COUNT.</p></td>
</tr>
<tr>
<td><p>org_unit_count</p></td>
<td><p>The count of organisation units (useful in combination with filters). Aggregation type for the program indicator must be COUNT.</p></td>
</tr>
<tr>
<td><p>program_stage_name</p></td>
<td><p>Can be used in filters for including only certain program stages in a filter for tracker programs. Uses the name of the program stage:</p>
<pre><code>V{program_stage_name} == &#39;ANC first visit&#39;</code></pre></td>
</tr>
<tr>
<td><p>program_stage_id</p></td>
<td><p>Can be used in filters for including only certain program stages in a filter for tracker programs. Uses the unique identifier of the program stage:</p>
<pre><code>V{program_stage_id} == &#39;YPSSfbmAtt1&#39;</code></pre></td>
</tr>
<tr>
<td><p>analytics_period_start</p></td>
<td><p>Can be used in filters or expressions for comparing any date to the first date in each reporting period.</p>
<pre><code>d2:daysBetween(#{WZbXY0S00lP.w4ky6EkVahL}, V{analytics_period_start})</code></pre></td>
</tr>
<tr>
<td><p>analytics_period_end</p></td>
<td><p>Can be used in filters or expressions for comparing any date to the last inclusive date in each reporting period.</p></td>
</tr>
</tbody>
</table>

使用“ Analytics（分析）期末”变量的过滤器仅包含
拥有LMP的女性
    三个月：

    d2：daysBetween（＃{WZbXY0S00lP.w4ky6EkVahL}，V {analytics_period_end}）<= 84

使用“值计数”变量的表达式看起来像
    这个：

    （＃{A03MvHHogjR.a3kGcGDCukuk6} +＃{A03MvHHogjR.wQLfBvPrXqq}）/ V {value_count}

使用“event_date”和“incident_date”变量的表达式如下所示：

    d2：daysBetween（V {incident_date}，V {event_date}）

#### 操作员要在程序指示器过滤器中使用 { #operators-to-use-in-a-program-indicator-filter }

 <table>
 <caption>在程序指示器过滤器中使用的运算符</caption>
 <colgroup>
 <col style="width: 16%" />
 <col style="width: 83%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> <p>运算符</p> </th>
 <th> <p>说明</p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> <p>和</p> </td>
 <td> <p>逻辑与</p> </td>
 </tr>
 <tr class="even">
 <td> <p>或</p> </td>
 <td> <p>逻辑或</p> </td>
 </tr>
 <tr class="odd">
 <td> <p> == </p> </td>
 <td> <p>等于</p> </td>
 </tr>
 <tr class="even">
 <td> <p>！= </p> </td>
 <td> <p>不等于</p> </td>
 </tr>
 <tr class="odd">
 <td> <p> &lt; </p> </td>
 <td> <p>小于</p> </td>
 </tr>
 <tr class="even">
 <td> <p> &lt; = </p> </td>
 <td> <p>小于或等于</p> </td>
 </tr>
 <tr class="odd">
 <td> <p> &gt; </p> </td>
 <td> <p>大于</p> </td>
 </tr>
 <tr class="even">
 <td> <p> &gt; = </p> </td>
 <td> <p>大于或等于</p> </td>
 </tr>
 </tbody>
 </table>

这些运算符可用于形成逻辑表达式，最终
评估为真或假。例如，您可以断言
多个数据元素必须是一个特定的值，或者那个特定的
属性的数值必须小于或大于常数。

同时使用属性和数据元素的过滤器如下所示：

    A {cejWyOfXge6} =='Female'和＃{A03MvHHogjR.a3kGcGDCuk6} <= 2

> **提示**
>
> DHIS2 使用 JEXL 库来计算表达式，该库支持本文档中未涵盖的其他语法。请参阅[项目主页](http://commons.apache.org/proper/commons-jexl/reference/syntax.html)上的参考，了解如何创建更复杂的表达式

## 配置程序规则 { #configure_program_rule }

### 关于计划规则 { #about_program_rules }

Program rules allows you to create and control dynamic behaviour of the user interface in the **Tracker Capture** and **Event Capture** apps. During data entry, the program rules expressions are evaluated each time the user interface is displayed, and each time a data element is changed. Most types of actions will take effect immediately when the user enters values in the **Tracker Capture** and **Event Capture** apps.

<table>
<caption>Program rule components</caption>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Program rule component</p></th>
<th><p>Description</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Program rule action</p></td>
<td><p>Each program rule contains one or multiple actions. These are the behaviours that are triggered in the user interface when the expression is true. Actions will be applied at once if the expression is true, and will be reverted if the expression is no longer true. There are several types of actions and you can have several actions in one program rule.</p></td>
</tr>
<tr class="even">
<td><p>Program rule expression</p></td>
<td><p>Each program rule has a single expression that determines whether the program rule actions should be triggered, if the expression evaluates to true. If the expression is true the program rule is in effect and the actions will be executed. If the expression is false, the program rule is no longer in effect and the actions will no longer be applied.</p>
<p>You create the expression with standard mathematical operators, custom functions, user-defined static values and program rule variables. The program rule variables represent attribute and data element values which will be evaluated as part of the expression.</p></td>
</tr>
<tr class="odd">
<td><p>Program rule variable</p></td>
<td><p>Program rule variables lets you include data values and attribute values in program rule expressions. Typically, you'll have to create one or several program rule variables before creating a program rule. This is because program rules expressions usually contain at least one data element or attribute value to be meaningful.</p>
<p>The program rule variables are shared between all rules in your program. When you create multiple program rules for the same program, these rules will share the same library of program rule variables.</p></td>
</tr>
</tbody>
</table>

In the **Maintenance** app, you manage the following program rule objects:

<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Object type</p></th>
<th><p>Available functions</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Program rule</p></td>
<td><p>Create, edit, clone, delete, show details and translate</p></td>
</tr>
<tr class="even">
<td><p>Program rule variable</p></td>
<td><p>Create, edit, clone, share, delete, show details and translate</p></td>
</tr>
</tbody>
</table>

### 工作流程 { #workflow_program_rule }

1.  In the **Maintenance** app, create program rule variable(s) if needed.

2.  In the **Maintenance** app, create the program rule:

    1.  输入程序规则详细信息。

    2.  创建程序规则表达式。

    3.  定义程序规则操作。

3.  In the **Tracker Capture** or **Event Capture** apps, verify that the program rule behaves as expected.

### 创建或编辑程序规则变量 { #create_program_rule_variable }

1.  打开**维护**应用程序并单击**程序** \> **程序规则变量**。

2.  点击添加按钮。

3.  Select a **Program** and enter a **Name**.

4.  Select if you want to **Use code for option set**.

    仅当数据元素或跟踪实体属性连接到选项集时，此选项才有效。如果您不选择此选项，程序规则变量将使用选项集的名称填充。如果选择该选项，程序规则变量将改为使用选项集的代码填充。

5.  选择**来源类型**，然后输入所需信息。

    Depending on the source type, you'll have to select, for example, a **Program stage,** **Data element** or **Tracked entity attribute**.

    源类型确定如何用值填充程序规则变量。

    <table>
    <colgroup>
    <col style="width: 50%" />
    <col style="width: 50%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Source type</p></th>
    <th><p>Description</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p><strong>Data element from the newest event for a program stage</strong></p></td>
    <td><p>This source type works the same way as <strong>Data element from the newest event in the current program</strong>, except that it only evaluates values from one program stage.</p>
    <p>This source type can be useful in program rules where the same data element is used in several program stages, and a rule needs to evaluate the newest data value from within one specific stage.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Data element from the newest event in the current program</strong></p></td>
    <td><p>This source type is used when a program rule variable needs to reflect the newest known value of a data element, regardless of what event the user currently has open.</p>
    <p>This source type is populated slightly differently in <strong>Tracker Capture</strong> and <strong>Event Capture</strong> apps:</p>
    <p><strong>Tracker Capture</strong>: the program rule variable will be populated with the newest data value collected for the given data element within the enrollment.</p>
    <p><strong>Event Capture</strong>: the program rule variable will be populated with the newest data value found within the 10 newest events in the same organisation unit.</p>
    <p>The newest data value is determined with event date.</p></td>
    </tr>
    <tr class="odd">
    <td><p><strong>Data element in current event</strong></p></td>
    <td><p>Program rule variables with this source type will contain the data value from the same event that the user currently has open.</p>
    <p>This is the most commonly used source type, especially for skip logic (hide actions) and warning/error rules.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Data element from previous event</strong></p></td>
    <td><p>Program rule variables with this source type will contain the value from a specified data element from a previous event. Only older events is evaluated, not including the event that the user currently has open.</p>
    <p>This source type is commonly used when a data element only should be collected once during an enrollment, and should be hidden in subsequent events.</p>
    <p>Another use case is making rules for validating input where there is an expected progression from one event to the next - a rule can evaluate whether the previous value is higher/lower and give a warning if an unexpected value is entered.</p>
    <p>This source type is populated slightly differently in <strong>Tracker Capture</strong> and <strong>Event Capture</strong> apps:</p>
    <p><strong>Tracker Capture</strong>: the program rule variable will be populated with the newest data value collected for the given data element within the enrollment - but only evaluating the events that comes before the current event date.</p>
    <p><strong>Event Capture</strong>: the program rule variable will be populated with the newest data value collected within the 10 events preceding the current event date - not including the current event.</p>
    <p>The newest data value is determined with event date.</p></td>
    </tr>
    <tr class="odd">
    <td><p><strong>Calculated value</strong></p></td>
    <td><p>Program rule variable with this source type is not connected directly to any form data - but will be populated as a result of some other program rules <strong>ASSIGN</strong> action.</p>
    <p>This variable will be used for making preliminary calculations, having a <strong>ASSIGN</strong> program rule action and assigning a value, this value can be used by other program rules - potentially making the expressions simpler and more maintanable.</p>
    <p>These variables will not be persisted and will stay in memory only during the exectution of the set of program rules. Any program rule that assigns a data value to a preliminary calculated value would normally also have a <strong>priority</strong> assigned - to make sure that the preliminary caculation is done before the rule that consumes the calculated value.</p>
    </td>
    </tr>
    <tr class="even">
    <td><p><strong>Tracked entity attribute</strong></p></td>
    <td><p>Populates the program rule variable with a specified tracked entity attribute for the current enrollment.</p>
    <p>Use this is the source type to create program rules that evaluate data values entered during registration.</p>
    <p>This source type is also useful when you create program rules that compare data in events to data entered during registration.</p>
    <p>This source type is only used for tracker programs (programs with registration).</p></td>
    </tr>
    </tbody>
    </table>

6.  点击**保存**。 

### 创建或编辑程序规则 { #create_program_rule }

> **注意**
>
>程序规则完全属于一个程序。

1.  Open the **Maintenance** app and click **Program** \> **Program rule**.

2.  点击添加按钮。

3.  输入程序规则详细信息。这些字段不会向最终用户显示，它们仅适用于程序管理员。

    -   **程序**

    -   **仅适用于计划阶段的触发规则**

        如果选择了节目阶段，则节目规则将仅针对选定的节目阶段运行，而不是针对节目中的每个节目阶段运行。

    -   **名称**

    -   **描述**

    -   **优先**

        假设您的程序中有 16 条程序规则。您可以使用以下优先级设置来配置程序规则：

        -   程序规则A的优先级1

        -   计划规则B-K的优先级2

        -   程序规则L-P没有优先级

        结果：系统按照以下顺序运行程序规则：

        1.  计划规则A

        2.  程序规则B - K（你无法查明或配置系统运行这些程序规则的顺序）

        3.  程序规则L-P。

4.  Click **Enter program rule expression** and create the program rule expression with the help of variables, functions and operators.

5.  Click **Define program rule actions** and create the actions executed when the expression is true.

    1.  Click the add button, select an **Action** and enter the required information.

        根据操作类型，您必须执行不同类型的设置。对于某些操作类型，您还必须输入自由文本或创建表达式。

        <table>
        <colgroup>
        <col style="width: 33%" />
        <col style="width: 33%" />
        <col style="width: 33%" />
        </colgroup>
        <thead>
        <tr class="header">
        <th><p>Action type</p></th>
        <th><p>Required settings</p></th>
        <th><p>Description</p></th>
        </tr>
        </thead>
        <tbody>
        <tr class="odd">
        <td></td>
        <td></td>
        <td></td>
        </tr>
        <tr class="even">
        <td><p><strong>Assign value</strong></p></td>
        <td><p><strong>Data element to assign value to</strong></p>
        <p><strong>Program rule variable to assign value to</strong></p>
        <p><strong>Expression to evaluate and assign</strong></p></td>
        <td><p>Used to help the user calculate and fill out fields in the data entry form. The idea is that the user shouldn’t have to fill in values that the system can calculate, for example BMI.</p>
        <p>When a field is assigned a value, the user sees the value but the user can't edit it.</p>
        <p>Example from Immunization stock card i Zambia: The data element for vaccine stock outgoing balance is calculated based on the data element for incoming stock balance minus the data elements for consumption and wastage.</p>
        <p>Advanced use: configure an 'assign value' to do a part of a calculation and then assign the result of the calculation to a program rule variable. This is the purpose with the &quot;Calculated value&quot; program rule variable.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Display text</strong></p></td>
        <td><p><strong>Display widget</strong></p>
        <p><strong>Static text</strong></p>
        <p><strong>Expression to evaluate and display after static text</strong></p></td>
        <td><p>Used to display information that is not an error or a warning, for example feedback to the user. You can also use this action to display important information, for example the patient's allergies, to the user.</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Display key/value pair</strong></p></td>
        <td><p><strong>Display widget</strong></p>
        <p><strong>Key label</strong></p>
        <p><strong>Expression to evaluate and display as value</strong></p></td>
        <td><p>Used to display information that is not an error or a warning.</p>
        <p>Example: calculate number of weeks and days in a pregnancy and display it in the format the clinician is used to see it in. The calculation is based on previous recorded data.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Error on complete</strong></p></td>
        <td><p><strong>Data element to display error next to</strong></p>
        <p><strong>Tracked entity attribute to display error next to</strong></p>
        <p><strong>Static text</strong></p>
        <p><strong>Expression to evaluate and display after static text</strong></p></td>
        <td><p>Used whenever you've cross-consistencies in the form that must be strictly adhered to. This action prevents the user from continuing until the error is resolved.</p>
        <p>This action differs from the regular <strong>Show error</strong> since the error is not shown until the user tries to actually complete the form.</p>
        <p>If you don't select a data element or a tracked entity attribute to display the error next to, make sure you write a comprehensive error message that helps the user to fix the error.</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Hide field</strong></p></td>
        <td><p><strong>Data element to hide</strong></p>
        <p><strong>Tracked entity attribute to hide</strong></p>
        <p><strong>Custom message for blanked field</strong></p></td>
        <td><p>Used when you want to hide a field from the user.</p>
        <p><strong>Custom message for blanked field</strong> allows you to define a custom message displayed to the user in case the program rule hides and blanks out the field after the user typed in or selected a value.</p>
        <p>If a hide field action hides a field that contains a value, the field will always removed. If no message is defined, a standard message will be displayed to alert the user.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Hide section</strong></p></td>
        <td><p><strong>Program stage section to hide</strong></p></td>
        <td><p>TBA</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Hide program stage</strong></p></td>
        <td><p><strong>Program stage to hide</strong></p></td>
        <td><p>Used when you want to hide a program stage section from the user.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Make field mandatory</strong></p></td>
        <td><p><strong>Data element to make mandatory</strong></p>
        <p><strong>Tracked entity attribute to make mandatory</strong></p></td>
        <td><p>TBA</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Show error</strong></p></td>
        <td><p><strong>Data element to display error next to</strong></p>
        <p><strong>Tracked entity attribute to display error next to</strong></p>
        <p><strong>Static text</strong></p>
        <p><strong>Expression to evaluate and display after static text</strong></p></td>
        <td><p>Used whenever there are rules which must strictly be adhered to. The show error action prevents the user from continuing until the error is resolved.</p>
        <p>Such a strict validation should only be used when it's certain that the evaluated expression is never true unless the user has made a mistake in data entry.</p>
        <p>It's mandatory to define a message that is shown to the user when the expression is true and the action is triggered.</p>
        <p>You can select which data element or tracked entity attribute to link the error to. This will help the user to fix the error.</p>
        <p>In case several data elements or attributes are involved, select the one that is most likely that the user would need to change.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Show warning</strong></p></td>
        <td><p><strong>Data element to display warning next to</strong></p>
        <p><strong>Tracked entity attribute to display warning next to</strong></p>
        <p><strong>Static text</strong></p>
        <p><strong>Expression to evaluate and display after static text</strong></p></td>
        <td><p>Used to give the user a warning about the entered data, but at the same time to allow the user to save and continue.</p>
        <p>You can use warnings to help the user avoid errors in the entered data, while at the same time allow the user to consciously disregard the warnings and save a value that is outside preset expectations.</p>
        <p><strong>Static text</strong> defines the message shown to the user when the expression is true and the action is triggered.</p>
        <p>You can select which data element or tracked entity attribute to link the error to. This will help the user to fix the error.</p>
        <p>In case several data elements or attributes are involved, select the one that is most likely that the user would need to change.</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Warning on complete</strong></p></td>
        <td><p><strong>Data element to display warning next to</strong></p>
        <p><strong>Tracked entity attribute to display warning next to</strong></p>
        <p><strong>Static text</strong></p>
        <p><strong>Expression to evaluate and display after static text</strong></p></td>
        <td><p>Used to give the user a warning if he/she tries to complete inconsistent data, but at the same time to allow the user to continue. The warning is shown in a dialog when the user completes the form.</p>
        <p><strong>Static text</strong> defines the message shown to the user when the expression is true and the action is triggered. This field is mandatory.</p>
        <p>You can select which data element or tracked entity attribute to link the error to. This will help the user to fix the error.</p>
        <p>If you don't select a data element or a tracked entity attribute to display the error next to, make sure you write a comprehensive error message that helps the user to fix the error.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Send Message</strong></p></td>
        <td><p><strong>Message template to send</strong></p></td>
        <td><p>Send Message triggers a notification based on provided message template. This action will be taken immediately. The message template will be parsed and variables will be substituted with actual values.</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Schedule Message</strong></p></td>
        <td><p><strong>Message template to send</strong></p>
        <p><strong>Data field which contains expression to evaluate the date which notification should be sent at. If this expression results in any value other than Date, then resultant will be discarded and notification will not get scheduled.</strong></p></td>
        <td><p>Schedule Message will schedule notification at date provided by Expression in the data field. Sample expression is given below</p>
        <pre><code>d2:addDays( &#39;2018-04-20&#39;, &#39;2&#39; )</code></pre>
        <p>Message template will be parsed and variables will be substituted with actual values.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Hide option</strong></p></td>
        <td><p><strong>Data element to hide option for</strong></p>
        <p><strong>Tracked entity attribute to hide option for</strong></p>
        <p><strong>Option that should be hidden</strong></p></td>
        <td><p>Used to selectively hide a single option for an option set in a given data element/tracked entity attribute.</p>
        <p>When combined with <strong>show option group</strong> the <strong>hide option</strong> takes presedence.</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Hide option group</strong></p></td>
        <td><p><strong>Data element to hide option group for</strong></p>
        <p><strong>Tracked entity attribute to hide option group for</strong></p>
        <p><strong>Option group that should be hidden</strong></p></td>
        <td><p>Used to hide all options in a given option group and data element/tracked entity attribute.</p>
        <p>When combined with <strong>show option group</strong> the <strong>hide option group</strong> takes precedence.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Show option group</strong></p></td>
        <td><p><strong>Data element to show option group for</strong></p>
        <p><strong>Tracked entity attribute to show option group for</strong></p>
        <p><strong>Option group that should be shown</strong></p></td>
        <td><p>Used to show only options from a given option group in a given data element/tracked entity attribute. To show an option group implicitly hides all options that is not part of the group(s) that is shown.</p></td>
        </tr>
        </tbody>
        </table>

    2.  点击**保存**。 

    3.  （可选）重复上述步骤以添加更多操作。

6.  点击**保存**。 

### 示例：程序规则 { #program_rule_examples }

> **注意**
>
> 您可以在演示服务器上查看所有示例：<https://play.dhis2.org/dev/dhis-web-maintenance/#/list/programSection/programRule>

本示例说明如何配置程序规则
怀孕的周数和天数，并将结果显示在
临床医生用来查看的格式。计算基于
先前记录
    数据。

1.  ![](resources/images/maintainence/pg_rule_ex/keyvaluepair_details.png)

2.  ![](resources/images/maintainence/pg_rule_ex/keyvaluepair_expression.png)

3.  ![](resources/images/maintainence/pg_rule_ex/keyvaluepair_action.png)

    ** Data **字段中的完整表达式：

        d2：concatenate（d2：weeksBetween（＃{lmp}，V {current_date}），'+'，
        d2：modulus（d2：daysBetween（＃{lmp}，V {current_date}），7））

![](resources/images/maintainence/pg_rule_ex/keyvaluepair_result.png)

This example shows how to configure a program rule to display text in the Feedback widget in the **Tracker Capture** app.

1.  ![](resources/images/maintainence/pg_rule_ex/displaytext_pgrule_variable.png)

2.  ![](resources/images/maintainence/pg_rule_ex/displaytext_details.png)

3.  ![](resources/images/maintainence/pg_rule_ex/displaytext_expression.png)

4.  ![](resources/images/maintainence/pg_rule_ex/displaytext_action.png)

![](resources/images/maintainence/pg_rule_ex/displaytext_result.png)

此示例演示如何配置程序规则以始终在 **Tracker Capture** 应用程序的反馈小部件中显示某些数据。当您想要确保重要数据（例如药物过敏）始终可见时，这非常有用。

1.  ![](resources/images/maintainence/pg_rule_ex/displaytext2_pgrule_variable.png)

2.  ![](resources/images/maintainence/pg_rule_ex/displaytext2_details.png)

3.  ![](resources/images/maintainence/pg_rule_ex/displaytext2_expression.png)

4.  ![](resources/images/maintainence/pg_rule_ex/displaytext2_action.png)

![](resources/images/maintainence/pg_rule_ex/displaytext2_first_pgstage.png)

![](resources/images/maintainence/pg_rule_ex/displaytext2_result.png)

通过使用“分配值”类型的程序规则，您可以计算
“访问时的胎龄”值并将其填写在数据输入表单中。您
配置程序规则以基于以下条件计算“访问时的胎龄”
在“ LMP日期”或“超声估计到期
日期”。

1.  ![](resources/images/maintainence/pg_rule_ex/assign_details.png)

2.  ![](resources/images/maintainence/pg_rule_ex/assign_expression.png)

3.  ![](resources/images/maintainence/pg_rule_ex/assign_action.png)

![](resources/images/maintainence/pg_rule_ex/assign_result.png)

### 参考信息：程序规则表达式中使用的运算符和函数 { #program_rules_operators_functions }

> **提示**
>
> 您可以将函数相互嵌套并与子表达式一起嵌套以形成更复杂的条件。根据末次月经日期生成以周为单位的孕龄的示例：
>
> d2:floor( d2:daysBetween(#{lastMenstrualDate},V{event_date}) / 7 )

> **提示**
>
> 源类型将确定 d2: 函数调用将如何计算 (sourcefield) 参数。
>
> 示例：其中 \#{hemoglobinCurrent} 设置为源类型 **当前事件中的数据元素**。以下函数调用评估当前事件中是否输入了血红蛋白。
>
> d2:hasValue( '血红蛋白当前' )
>
> 示例：其中 \#{hemoglobin} 设置为源类型 **来自当前程序中最新事件的数据元素**。以下函数调用用于评估登记中的任何事件中是否存在血红蛋白值。
>
> d2:hasValue( '血红蛋白' )
>
> 示例：其中 \#{hemoglobinPrevious} 设置为源类型 **来自先前事件的数据元素** 。以下函数调用评估当前事件之前的事件中是否存在血红蛋白值。
>
> d2:hasValue( '血红蛋白上一个' )

<table>
<caption>Possible operators to use in a program rule expression</caption>
<colgroup>
<col style="width: 16%" />
<col style="width: 83%" />
</colgroup>
<thead>
<tr class="header">
<th>Operator</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>+</p></td>
<td><p>Add numbers together</p></td>
</tr>
<tr class="even">
<td><p>-</p></td>
<td><p>Subtract numbers from each other</p></td>
</tr>
<tr class="odd">
<td><p>*</p></td>
<td><p>Multiply two numbers</p></td>
</tr>
<tr class="even">
<td><p>/</p></td>
<td><p>Divide two numbers</p></td>
</tr>
<tr class="odd">
<td><p>%</p></td>
<td><p>The modulus of two numbers</p></td>
</tr>
<tr class="even">
<td><p>&amp;&amp;</p></td>
<td><p>Logical AND. True only when the expression on the left and right side is true. The left and right side can be yes/no, yes only or a sub-expression in parenthesis.</p></td>
</tr>
<tr class="odd">
<td><p>||</p></td>
<td><p>Logical OR. True when either the expression on the left or the expression on the right side is true. The left and right side can be yes/no, yes only or a sub-expression in parenthesis.</p></td>
</tr>
<tr class="even">
<td><p>&gt;</p></td>
<td><p>Left number greater than right number</p></td>
</tr>
<tr class="odd">
<td><p>&gt;=</p></td>
<td><p>Left number greater than or equal to right number</p></td>
</tr>
<tr class="even">
<td><p>&lt;</p></td>
<td><p>Left number less than right number</p></td>
</tr>
<tr class="odd">
<td><p>&lt;=</p></td>
<td><p>Left number less than or equal to right number.</p></td>
</tr>
<tr class="even">
<td><p>==</p></td>
<td><p>Left side equal to right side. Supports numbers, text, yes/no and yes only.</p></td>
</tr>
<tr class="odd">
<td><p>!=</p></td>
<td><p>Left side not equal to right side. Supports numbers, text, yes/no and yes only.</p></td>
</tr>
<tr class="even">
<td><p>!</p></td>
<td><p>Negates the following value. Can be used for yes/no, yes only or a sub-expression in parenthesis.</p></td>
</tr>
<tr class="odd">
<td><p>()</p></td>
<td><p>Parenthesis is used to group sub-expressions.</p></td>
</tr>
</tbody>
</table>

<table>
<caption>Custom functions to use in a program rule expression</caption>
<colgroup>
<col style="width: 15%" />
<col style="width: 30%" />
<col style="width: 54%" />
</colgroup>
<thead>
<tr class="header">
<th>Function</th>
<th>Arguments</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>d2:ceil</td>
<td>(number)</td>
<td>Rounds the input argument <strong>up</strong> to the nearest whole number.
<p>Example:</p>
<pre><code>d2:ceil(#{hemoglobinValue})</code></pre></td>
</tr>
<tr class="even">
<td>d2:floor</td>
<td>(number)</td>
<td>Rounds the input argument <strong>down</strong> to the nearest whole number.
<p>An example producing the number of weeks the woman is pregnant. Notice that the sub-expression #{gestationalAgeDays}/7 is evaluated before the floor function is executed:</p>
<pre><code>d2:floor(#{gestationalAgeDays}/7)</code></pre></td>
</tr>
<tr class="odd">
<td>d2:round</td>
<td>(number)</td>
<td>Rounds the input argument to the nearest whole number.</td>
</tr>
<tr class="even">
<td>d2:modulus</td>
<td>(number,number)</td>
<td>Produces the modulus when dividing the first with the second argument.
<p>An example producing the number of days the woman is into her current pregnancy week:</p>
<pre><code>d2:modulus(#{gestationalAgeDays},7)</code></pre></td>
</tr>
<tr class="odd">
<td>d2:zing</td>
<td>(number)</td>
<td>Evaluates the argument of type number to zero if the value is negative, otherwise to the value itself.</td>
</tr>
<tr class="even">
<td>d2:oizp</td>
<td>(number)</td>
<td>Evaluates the argument of type number to one if the value is zero or positive, otherwise to zero.</td>
</tr>
<tr class="odd">
<td>d2:concatenate</td>
<td>(object, [,object, object,...])</td>
<td>Produces a string concatenated string from the input parameters. Supports any number of parameters. Will mainly be in use in future action types, for example to display gestational age with d2:concatenate('weeks','+','gestationalageDays').</td>
</tr>
<tr class="even">
<td>d2:daysBetween</td>
<td>(date, date)</td>
<td>Produces the number of days between the first and second argument. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'.
<p>Example, calculating the gestational age(in days) of a woman, based on the last menstrual period and the current event date:</p>
<pre><code>d2:daysBetween(#{lastMenstrualDate},V{event_date})</code></pre></td>
</tr>
<tr class="odd">
<td>d2:weeksBetween</td>
<td>(date, date)</td>
<td>Produces the number of full weeks between the first and second argument. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'.</td>
</tr>
<tr class="even">
<td>d2:monthsBetween</td>
<td>(date, date)</td>
<td>Produces the number of full months between the first and second argument. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'.</td>
</tr>
<tr class="odd">
<td>d2:yearsBetween</td>
<td>(date, date)</td>
<td>Produces the number of years between the first and second argument. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'.</td>
</tr>
<tr class="even">
<td>d2:addDays</td>
<td>(date, number)</td>
<td>Produces a date based on the first argument date, adding the second argument number of days.
<p>An example calculating the pregnancy due date based on the last menstrual period:</p>
<pre><code>d2:addDays(#{lastMenstrualDate},283)</code></pre></td>
</tr>
<tr class="odd">
<td>d2:count</td>
<td>(sourcefield)</td>
<td>Counts the number of values that is entered for the source field in the argument. The source field parameter is the name of one of the defined source fields in the program - see example
<p>Example usage where #{previousPregnancyOutcome} is one of the source fields in a repeatable program stage &quot;previous pregnancy&quot;:</p>
<pre><code>d2:count(&#39;previousPregnancyOutcome&#39;)</code></pre></td>
</tr>
<tr class="even">
<td>d2:countIfValue</td>
<td>(sourcefield,text)</td>
<td>Counts the number of matching values that is entered for the source field in the first argument. Only occurrences that matches the second argument is counted. The source field parameter is the name of one of the defined source fields in the program - see example.
<p>Example usage where #{previousPregnancyOutcome} is one of the source fields in a repeatable program stage &quot;previous pregnancy&quot;. The following function will produce the number of previous pregnancies that ended with abortion:</p>
<pre><code>d2:countIfValue(&#39;previousPregnancyOutcome&#39;,&#39;Abortion&#39;)
                                    </code></pre></td>
</tr>
<tr class="odd">
<td>d2:countIfZeroPos</td>
<td>(sourcefield)</td>
<td>Counts the number of values that is zero or positive entered for the source field in the argument. The source field parameter is the name of one of the defined source fields in the program - see example.
<p>Example usage where #{fundalHeightDiscrepancy} is one of the source fields in program, and it can be either positive or negative. The following function will produce the number of positive occurrences:</p>
<pre><code>d2:countIfZeroPos(&#39;fundalHeightDiscrepancy&#39;)
                                    </code></pre></td>
</tr>
<tr class="even">
<td>d2:hasValue</td>
<td>(sourcefield)</td>
<td>Evaluates to true of the argument source field contains a value, false if no value is entered.
<p>Example usage, to find if the source field #{currentPregnancyOutcome} is yet filled in:</p>
<pre><code>d2:hasValue(&#39;currentPregnancyOutcome&#39;)
                                    </code></pre></td>
</tr>
<tr class="odd">
<td>d2:zpvc</td>
<td>(object, [,object, object,...])</td>
<td>Returns the number of numeric zero and positive values among the given object arguments. Can be provided with any number of arguments.</td>
</tr>
<tr class="even">
<td>d2:validatePattern</td>
<td>(text, regex-pattern)</td>
<td>Evaluates to true if the input text is an exact match with the supplied regular expression pattern. The regular expression needs to be escaped.
<p>Example expression, triggering actions if a number is not on the pattern 9999/99/9:</p>
<pre><code>!d2:validatePattern(A{nrc},&#39;\\d{6}\/\\d{2}\/\\d&#39;)</code></pre>
<p>Example expression, triggering actions that if the address is not consisting of letters or white spaces, then a white space, then a number:</p>
<pre><code>!d2:validatePattern(A{registrationAddress},&#39;[\\w ]+ \\d+&#39;)</code></pre>
<p>Example, triggering actions if a name contains any numbers:</p>
<pre><code>!d2:validatePattern(A{name},&#39;[^\\d]*&#39;)</code></pre>
<p>Example expression, triggering actions if a mobile number contains the illegal number sequence 555:</p>
<pre><code>d2:validatePattern(A{mobile} ,&#39;.*555.*&#39;)</code></pre></td>
</tr>
<tr class="odd">
<td>d2:left</td>
<td>(text, num-chars)</td>
<td>Evaluates to the left part of a text, num-chars from the first character.
<p>The text can be quoted or evaluated from a variable:</p>
<pre><code>d2:left(#{variableWithText}, 3)</code></pre></td>
</tr>
<tr class="even">
<td>d2:right</td>
<td>(text, num-chars)</td>
<td>Evaluates to the right part of a text, num-chars from the last character.
<p>The text can be quoted or evaluated from a variable:</p>
<pre><code>d2:right(#{variableWithText}, 2)</code></pre></td>
</tr>
<tr class="odd">
<td>d2:substring</td>
<td>(text, start-char-num, end-char-num)</td>
<td>Evaluates to the part of a string specified by the start and end character number.
<p>Example expression:</p>
<pre><code>d2:substring(#{variableWithText}, 1, 3)</code></pre>
If the #{variableWithText} in the above example was 'ABCD', then the result of the evaluation would be 'BC'</td>
</tr>
<tr class="even">
<td>d2:split</td>
<td>(text, delimiter, element-num)</td>
<td>Split the text by delimiter, and keep the nth element(0 is the first).
<p>The text can be quoted or evaluated from a variable, the delimiter must be quoted:</p>
<pre><code>d2:split(#{variableWithText}, &#39;-&#39;, 1)</code></pre>
<p>Note: comma delimiter(,) is not supported.</p></td>
</tr>
<tr class="odd">
<td>d2:length</td>
<td>(text)</td>
<td>Find the length of a string.
<p>Example:</p>
<pre><code>d2:length(#{variableWithText})</code></pre></td>
</tr>
<tr class="even">
<td>d2:inOrgUnitGroup</td>
<td>(text)</td>
<td>Evaluates whether the current organisation unit is in the argument group. The argument can be defined with either ID or organisation unit group code. The current organisation unit will be the event organisation unit when the rules is triggered in the context of an event, and the enrolling organisation unit when the rules is triggered in the event of a TEI registration form.
<p>Example expression:</p>
<pre><code>d2:inOrgUnitGroup(&#39;HIGH_RISK_FACILITY&#39;)</code></pre></td>
</tr>
<tr class="odd">
<td>d2:hasUserRole</td>
<td>(user role)</td>
<td>Returns true if current user has this role otherwise false
<p>Example expression:</p>
<pre><code>d2:hasUserRole(&#39;UYXOT4A3ASA&#39;)</code></pre></td>
</tr>
<tr class="even">
<td>d2:zScoreWFA</td>
<td>Z-Score weight for age indicator</td>
<td>Calculates z-score based on data provided by WHO weight-for-age indicator.
e varies between -3.5 to 3.5 depending upon the value of weight.
<p>Example expression:</p>
<pre><code>d2:zScoreWFA( ageInMonths, weight, gender )</code></pre>

> **Gender** Gender is concidered female by default. Any of the following codes can be used to denote male: 'Male', 'MALE', 'male', 'ma', 'm', 'M', 0, false

</td>
</tr>
<tr class="odd">
<td>d2:zScoreHFA</td>
<td>Z-Score height for age indicator</td>
<td>Calculates z-score based on data provided by WHO height-for-age indicator.
Its value varies between -3.5 to 3.5 depending upon the value of height.
<p>Example expression:</p>
<pre><code>d2:zScoreHFA( ageInMonths, height, gender )</code></pre></td>
</tr>
<tr class="even">
<td>d2:zScoreWFH</td>
<td>Z-Score weight for height indicator</td>
<td>Calculates z-score based on data derived from the WHO weight-for-length and weight-for-height indicators.
The data used for girls can be found [here](https://github.com/dhis2/dhis2-docs/blob/master/src/commonmark/en/content/user/resources/txt-files/zScoreWFH-girls-table.txt) and for boys [here](https://github.com/dhis2/dhis2-docs/blob/master/src/commonmark/en/content/user/resources/txt-files/zScoreWFH-boys-table.txt).
Its value varies between -3.5 to 3.5 depending upon the value of the weight.
<p>Example expression:</p>
<pre><code>d2:zScoreWFH( height, weight, gender )</code></pre></td>
</tr>
<tr class="odd">
<td>d2:minValue</td>
<td>Get minimum value for provided item</td>
<td>Function gets minimum value of provided data element across entire enrollment.
<p>Example expression:</p>
<pre><code>d2:minValue( 'blood-pressure' )</code></pre></td>
</tr>
<tr class="even">
<td>d2:maxValue</td>
<td>Get maximum value for provided item</td>
<td>Function gets maximum value of provided data element across entire enrollment.
<p>Example expression:</p>
<pre><code>d2:maxValue( 'blood-pressure' )</code></pre></td>
</tr>
</tbody>
</table>

<table>
<caption>Standard variables to use in program rule expressions</caption>
<colgroup>
<col style="width: 15%" />
<col style="width: 30%" />
<col style="width: 54%" />
</colgroup>
<thead>
<tr class="header">
<th>Variable</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>V{current_date}</td>
<td>(date)</td>
<td>Contains the current date whenever the rule is executed.
<p>Example expression:</p>
<pre><code>d2:daysBetween(#{symptomDate},V{current_date}) &lt; 0 </code></pre></td>
</tr>
<tr class="even">
<td>V{event_date}</td>
<td>(date)</td>
<td>Contains the event date of the current event execution. Will not have a value at the moment the rule is executed as part of the registration form.</td>
</tr>
<tr class="odd">
<td>V{event_status}</td>
<td>(string)</td>
<td>Contains status of the current event or enrollment.
<p>Example expression to check status is:</p>
<pre><code>V{event_status} == &#39;COMPLETED&#39;</code></pre></td>
</tr>
<tr class="even">
<td>V{due_date}</td>
<td>(date)</td>
<td>This variable will contain the current date when the rule is executed. Note: This means that the rule might produce different results at different times, even if nothing else has changed.</td>
</tr>
<tr class="odd">
<td>V{event_count}</td>
<td>(number)</td>
<td>Contains the total number of events in the enrollment.</td>
</tr>
<tr class="even">
<td>V{enrollment_date}</td>
<td>(date)</td>
<td>Contains the enrollment date of the current enrollment. Will not have a value for single event programs.</td>
</tr>
<tr class="odd">
<td>V{incident_date}</td>
<td>(date)</td>
<td>Contains the incident date of the current enrollment. Will not have a value for single event programs.</td>
</tr>
<tr class="even">
<td>V{enrollment_id}</td>
<td>(string)</td>
<td>Universial identifier string(UID) of the current enrollment. Will not have a value for single event programs.</td>
</tr>
<tr class="odd">
<td>V{event_id}</td>
<td>(string)</td>
<td>Universial identifier string(UID) of the current event context. Will not have a value at the moment the rule is executed as part of the registration form.</td>
</tr>
<tr class="even">
<td>V{orgunit_code}</td>
<td>(string)</td>
<td>Contains the code of the orgunit that is linked to the current enrollment. For single event programs the code from the current event orgunit will be used instead.
<p>Example expression to check whether orgunit code starts with WB_:</p>
<pre><code>d2:left(V{orgunit_code},3) == &#39;WB_&#39;</code></pre></td>
</tr>
<tr class="odd">
<td>V{environment}</td>
<td>(string)</td>
<td>Contains a code representing the current runtime environment for the rules. The possible values is &quot;WebClient&quot;, &quot;AndroidClient&quot; and &quot;Server&quot;. Can be used when a program rule is only supposed to run in one or more of the client types.</td>
</tr>
<tr class="even">
<td>V{program_stage_id}</td>
<td>(string)</td>
<td>Contains the ID of the current program stage that triggered the rules. This can be used to run rules in specific program stages, or avoid execution in certain stages. When executing the rules in the context of a TEI registration form the variable will be empty.</td>
</tr>
<tr class="odd">
<td>V{program_stage_name}</td>
<td>(string)</td>
<td>Contains the name of the current program stage that triggered the rules. This can be used to run rules in specific program stages, or avoid execution in certain stages. When executing the rules in the context of a TEI registration form the variable will be empty.</td>
</tr>
<tr class="even">
<td>V{completed_date}</td>
<td>(string)</td>
<td>This variable contains completion date of event which triggered this rule. If event is not yet complete then &quot;completed_date&quot; contains nothing.</td>
</tr>

</tbody>
</table>

## 配置关系类型 { #configure_relationship_type }

### 关于关系类型 { #about_relationship_types }

关系表示跟踪器模型中两个实体之间的链接。关系被视为DHIS2中的数据，并且基于关系类型，类似于被跟踪实体实例基于被跟踪实体类型的方式。

关系始终包括两个实体，并且这些实体可以包括“跟踪的实体实例”，“注册”和“事件”，以及这些的任意组合。请注意，当前应用程序中并非所有这些组合都可用。

另外，关系可以定义为单向或双向。当前唯一的功能差异是这些功能需要不同级别的创建权限。单向关系要求用户对“从”实体具有数据写访问权限，而对“至”实体具有数据读访问权限，而双向关系则要求双方都具有数据写访问权限。

有关配置以及“从约束”和“至约束”的含义的更多信息，请参见[关系模型]（relationship_model＃relationship_model_relationship_type）。

### 创建或编辑关系类型 { #create_relationship_type }

1.  Open the **Maintenance** app and click **Program** \> **Relationship type**.

2.  点击添加按钮。

3.  Type a **Name** of the relationship type.

4.  （可选）分配**代码**。

5.  (Optional) Provide a **Description** of the relationship.

6.  （可选）选择关系是否应为双向

7.  提供**从发起实体看到的关系名称**。这是关系的名称，将显示在关系“左侧”的数据输入应用程序中。例如。在母子关系中，这可能是“……的母亲”。

8.  （可选）提供**从接收实体看到的关系名称**。这是关系的名称，将显示在“数据输入”应用程序中关系的“右侧”。例如。在母子关系中，这可能是“母亲”。

9.  选择“来自约束”。这限制了可以包含在关系中的实体类型。 [关系模型]（relationship_model＃relationship_model_relationship_type）。

10. 选择一个“到约束”。这限制了可以包含在关系中的实体类型。 [关系模型]（relationship_model＃relationship_model_relationship_type）。

11. 点击**保存**。 

## 配置跟踪的实体类型 { #configure_tracked_entity }

### 关于跟踪的实体类型 { #about_tracked_entity }

跟踪的实体是可以通过
系统。它可以是从人到商品的任何东西，例如
药还是一个人。

一个程序必须有一个跟踪的实体。注册被跟踪实体
实例到程序中，被跟踪的实体类型和被跟踪的
程序的实体类型必须相同。

跟踪的实体属性用于为
跟踪的实体。跟踪的实体属性可以在之间共享
程式。

### 创建或编辑跟踪的实体属性 { #create_tracked_entity_attribute }

1.  Open the **Maintenance** app and click **Program** \> **Tracked entity attribute**.

2.  点击添加按钮。

3.  In the **Name** field, type the tracked entity attribute name.

4.  (Optional) Type a **Short name**.

5.  (Optional) Type a **Form name**.

6.  （可选）在 **Code** 字段中，分配一个代码。 

7.  （可选）输入**说明**。

8.  (Optional) In the **Field mask** field, you may type a template that's used to provide hints for correct formatting of the attribute. **NOTE: So far only implemented in the DHIS2 Android Capture app, not in the Capture and Tracker Capture web apps.** The following are special characters that can be used in the mask. The special characters match exactly one character of the given type.

    |性格匹配|
    | --------- | -------------------------- |
    | \\ d |数字|
    | \\ x |小写字母|
    | \\ X |大写字母|
    | \\ w |任何字母数字字符|

例如，该模式可用于根据需要在数据元素的输入字段中显示连字符。例如“\d\d\d-\d\d\d-\d\d\d，每三个数字显示一个连字符。

8.  选择**选项集**。

9.  In the **Value type** field, select the type of data that the tracked entity attribute will record.

    <table>
    <caption>Value types</caption>
    <colgroup>
    <col style="width: 53%" />
    <col style="width: 46%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Value type</p></th>
    <th><p>Description</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p>Age</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Coordinate</p></td>
    <td><p>A point coordinate specified as longitude and latitude in decimal degrees. All coordinate should be specified in the format &quot;-19.23 , 56.42&quot; with a comma separating the longitude and latitude.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Date</p></td>
    <td><p>Dates render as calendar widget in data entry.</p></td>
    </tr>
    <tr class="even">
    <td><p>Date &amp; time</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="odd">
    <td><p>E-mail</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>File</p></td>
    <td><p>A file resource where you can store external files, for example documents and photos.</p></td>
    </tr>
    <tr class="odd">
    <td>Image</td>
    <td>Similar to File, but restricted to images.</td>
    </tr>
    <tr class="even">
    <td><p>Integer</p></td>
    <td><p>Any whole number (positive and negative), including zero.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Letter</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Long text</p></td>
    <td><p>Textual value. Renders as text area in forms.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Negative integer</p></td>
    <td><p>Any whole number less than (but not including) zero.</p></td>
    </tr>
    <tr class="even">
    <td><p>Number</p></td>
    <td><p>Any real numeric value with a single decimal point. Thousands separators and scientific notation is not supported.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Percentage</p></td>
    <td><p>Whole numbers inclusive between 0 and 100.</p></td>
    </tr>
    <tr class="even">
    <td><p>Phone number</p></td>
    <td></td>
    </tr>
    <tr class="odd">
    <td><p>Positive integer</p></td>
    <td><p>Any whole number greater than (but not including) zero.</p></td>
    </tr>
    <tr class="even">
    <td><p>Positive of zero integer</p></td>
    <td><p>Any positive whole number, including zero.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Organisation unit</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Unit interval</p></td>
    <td><p>Any real number greater than or equal to 0 and less than or equal to 1.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Text</p></td>
    <td><p>Textual value. The maximum number of allowed characters per value is 50,000.</p></td>
    </tr>
    <tr class="even">
    <td><p>Time</p></td>
    <td><p>Time is stored in HH:mm format.</p>
    <p>HH is a number between 0 and 23</p>
    <p>mm is a number between 00 and 59</p></td>
    </tr>
    <tr class="odd">
    <td><p>Tracker associate</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Username</p></td>
    <td><p> Rendered as a dialog with a list of users and a search field. The user will need the "View User" authority to be able to utilise this data type</p></td>
    </tr>
    <tr class="odd">
    <td><p>Yes/No</p></td>
    <td><p>Boolean values, renders as drop-down lists in data entry.</p></td>
    </tr>
    <tr class="even">
    <td><p>Yes only</p></td>
    <td><p>True values, renders as check-boxes in data entry.</p></td>
    </tr>
    </tbody>
    </table>

10. Select an **Aggregation type**.

    <table>
    <caption>Aggregation operators</caption>
    <colgroup>
    <col style="width: 50%" />
    <col style="width: 50%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Aggregation operator</p></th>
    <th><p>Description</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p>Average</p></td>
    <td><p>Average the values in both the period as and the organisation unit dimensions.</p></td>
    </tr>
    <tr class="even">
    <td><p>Average (sum in organisation unit hierarchy)</p></td>
    <td><p>Average of data values in the period dimension, sum in the organisation unit dimensions.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Count</p></td>
    <td><p>Count of data values.</p></td>
    </tr>
    <tr class="even">
    <td><p>Min</p></td>
    <td><p>Minimum of data values.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Max</p></td>
    <td><p>Maximum of data values.</p></td>
    </tr>
    <tr class="even">
    <td><p>None</p></td>
    <td><p>No aggregation is performed in any dimension.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Sum</p></td>
    <td><p>Sum of data values in the period and organisation unit dimension.</p></td>
    </tr>
    <tr class="even">
    <td><p>Standard deviation</p></td>
    <td><p>Standard deviation (population-based) of data values.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Variance</p></td>
    <td><p>Variance (population-based) of data values.</p></td>
    </tr>
    </tbody>
    </table>

11. Select **Unique** to specify that the values of the tracked entity attribute is unique.

    唯一设置有两个选项：

    -   **整个系统**：跟踪实体属性的值可以与属于其他跟踪实体属性的值重复。但此跟踪实体属性中的值不得重复。

        Select **Automatically generated** to allow automatic generation of the tracked entity attribute value. When the generate setting is selected on, an optional field for specifying pattern also displays. This field should contain a pattern based on the TextPattern syntax. When the value is automatically generated, it will be unique for this attribute for the entire system. See the TextPattern section for more information on how it works.

    -   **组织单位**：跟踪实体属性的值在同一组织单位中不得重复。

12. Select **Inherit** to registry a new entity for relationship with an available entity, all inherit entity attribute values of the entity will be pre-filled in the registration form.

13. (Optional) Select **Confidential**.

    仅当您为系统配置了加密时，此选项才可用。

14. (Optional) Select **Display in list without program**.

15. （可选）分配一个或多个**传奇**。

16. 点击**保存**。 

### 创建或编辑跟踪的实体类型 { #create_tracked_entity }

1.  Open the **Maintenance** app and click **Program** \> **Tracked entity type**.

2.  Click the add button or an already existing **tracked entity type**.

3.  Type a **Name** of the tracked entity.

4.  (Optional) select a **Color** and an **Icon** that will be used by the data capture apps to identify this tracked entity type.

5.  (Optional) Enter a **Description** of the tracked entity.

6.  (Optional) Enter a **Minimum number of attributes required to search**. This specifies the amount of attributes that need to be filled out in order to be able to search for this **tracked entity type** in a _global search_. See [Configure Search](../search/search.xml#configure_search) for more information.

7.  (Optional) Enter a **Maximum number of tracked entity instances to return in search**. This specifies the amount of tracked entity instances that will be returned in a _global search_. See [Configure Search](../search/search.xml#configure_search) for more information.

8.  (Optional) Add **Tracked entity type attributes**. This is used to configure search, see [Configure Search](configure_search) for more information.

9.  (Optional) Enter an **Alternative name** of the tracked entity.

10. 点击**保存**。 

## 配置搜索 { #configure_search }

可以为用户提供搜索组织单位，从而可以
在数据捕获之外搜索跟踪的实体实例
组织单位。

搜索可以在程序的上下文中进行，也可以在
跟踪实体类型的上下文。为用户提供以下选择
在程序上下文中搜索，有必要进行配置
可以搜索哪个程序跟踪的实体属性。为了给
用户可以选择在跟踪的实体类型的上下文中进行搜索，
您将必须配置哪个跟踪实体类型属性
是可搜索的。

### 配置搜索跟踪器程序 { #configure-search-for-tracker-program }

为了能够使用程序进行搜索，您必须制作一些
程序属性可搜索。唯一的程序属性将始终是
可搜索的。

1.  打开**程序应用程序**

2.  打开或创建跟踪器程序

3.  Go to **Attributes**

4.  如果没有属性，请添加一个

5.  将属性设置为可搜索

可搜索的程序属性将分配给搜索组。

-   独特的群体。每个独特的程序属性一组。唯一属性不能与搜索中的其他节目属性组合。搜索结果只能是 0 或 1 个跟踪实体实例。

-   非唯一组。该组包含所有非唯一的节目属性，并且可以在搜索中组合多个属性。

作为 **Program** 配置的一部分，可以为程序搜索设置两个限制。

-   搜索所需的最小属性数：此属性定义在执行搜索之前必须输入多少个非唯一属性。

<!-- end list -->

-   返回的跟踪实体实例的最大数量：此属性通过限制允许用户获取其搜索条件的匹配跟踪实体实例的数量来定义搜索的具体程度。如果匹配的记录数大于此最大值，则不会返回它们。在返回匹配记录之前，用户必须提供更具体的搜索条件，以减少匹配记录的数量。

    > **NOTE**
    >
    > This maximum is only applied to search results outside the users capture org unit. Within the capture scope, the user can see any number of results.

### 配置搜索以跟踪实体类型 { #configure-search-for-tracked-entity-type }

> **注意**
>
> TET =跟踪的实体类型

为了能够在没有程序的情况下进行搜索，您必须做一些
TET属性可搜索。唯一的TET属性将始终是
可搜索的。

1.  Open **Tracked entity type app**

2.  打开一个跟踪实体类型

3.  如果TET没有属性，请添加一个

4.  将属性设置为可搜索

可搜索的TET属性将分配给搜索组。

-   独特的群体。每个唯一的 TET 属性一组。唯一属性不能与搜索中的其他 TET 属性组合。搜索结果只能是 0 或 1 个跟踪实体实例。

-   非唯一组。该组包含所有非唯一的 TET 属性，并且可以在搜索中组合多个属性。

可以为TET搜索设置两个限制

-   搜索所需的最小属性数：此属性定义在执行搜索之前必须输入多少个非唯一属性。

<!-- end list -->

-   返回的跟踪实体类型的最大数量：此属性通过限制允许用户为其搜索条件获取的匹配跟踪实体类型的数量，定义搜索的特定程度。如果匹配的记录数大于此最大值，则不会返回它们。在返回匹配记录之前，用户必须提供更具体的搜索条件，以减少匹配记录的数量。

    > **NOTE**
    >
    > This maximum is only applied to search results outside the users capture org unit. Within the capture scope, the user can see any number of results.

### 为用户配置搜索组织单位 { #configure-search-organisation-units-for-a-user }

能够搜索用户数据以外的其他组织单位
捕获组织单位，则必须为用户分配搜索
组织单位。给用户一个搜索组织单位也将
授予其在该组织单位所有子级中进行搜索的权限。

1.  开启**使用者应用程式**

2.  点击一个用户

3.  打开**分配搜索组织单位**

4.  选择组织单位

5.  点击**保存**

## 克隆元数据对象 { #clone_metadata }

克隆数据元素或其他对象可以在创建时节省时间
许多相似的对象。

1.  打开 **维护** 应用程序并找到要克隆的元数据对象的类型。

2.  在对象列表中，单击选项菜单并选择**克隆**。 

3.  修改所需的选项。

4.  点击**保存**。 

## 删除元数据对象 { #delete-metadata-objects }

> **注意**
>
> 仅当没有数据与数据元素本身关联时，您才能删除数据元素和其他数据元素对象。

> **警告**
>
> 从系统中删除的任何数据集都将不可挽回地丢失。所有数据输入表格和可能已开发的部分表格也将被删除。确保在删除任何数据集之前已对数据库进行备份，以防您需要在某个时间点恢复它。

1.  打开**维护**应用程序并找到您要删除的元数据对象的类型。

2.  在对象列表中，单击选项菜单并选择**删除**。 

3.  点击**确认**。

## 更改元数据对象的共享设置 { #change-sharing-settings-for-metadata-objects }

您可以为元数据对象分配不同的共享设置，例如
示例组织单位和跟踪的实体属性。这些分享
设置可控制哪些用户和用户组可以查看或编辑
元数据对象。

一些元数据对象还允许您更改共享设置
对象的数据输入。这些附加设置控制谁可以
使用元数据查看或在表单字段中输入数据。

> **注意**
>
> 默认设置是每个人（**公共访问**）都可以查找、查看和编辑元数据对象。

1.  打开 **维护** 应用程序并找到您要修改的元数据对象的类型。

2.  在对象列表中，单击上下文菜单并选择**共享设置**。

3.  （可选）添加用户或用户组：搜索并选择用户或用户组。用户或用户组将添加到列表中。

4.  更改要修改的访问组的共享设置。

    -   **可以编辑和查看**：访问组可以查看和编辑对象。

    -   **只能查看**：访问组可以查看对象。

    -   **无访问权限**（仅适用于**公共访问**）：公众无权访问该对象。

5.  更改要修改的访问组的数据共享设置。

    -   **可以捕获数据**：访问组可以查看和捕获对象的数据。

    -   **可以查看数据**：访问组可以查看对象的数据。

    -   **无访问权限**：访问组无权访问对象的数据。

6.  点击**关闭**。

## 显示元数据对象的详细信息 { #display-details-of-metadata-objects }

1.  打开 **维护** 应用程序并找到您要查看的元数据对象的类型。

2.  在对象列表中，单击选项菜单并选择**显示详细信息**。 

## 翻译元数据对象 { #translate-metadata-objects }

DHIS2提供了用于翻译数据库内容的功能，
示例数据元素，数据元素组，指标，指标组
或组织单位。您可以将这些元素转换为任意数量的
语言环境。地区代表特定的地理，政治或
文化区。

> **提示** 
> 
> 要激活翻译，请打开 **系统设置** 应用程序，单击 \> > **外观** 并选择一种语言。 

1.  打开 **维护** 应用程序并找到您要翻译的元数据对象的类型。

2.  在对象列表中，单击选项菜单并选择**翻译**。 

    > **Tip**
    >
    > If you want to translate an organisation unit level, click directly on the **Translate** icon next to each list item.

3.  选择一个语言环境。

4.  输入**名称**、**简称**和**说明**。 

5.  点击**保存**。 
