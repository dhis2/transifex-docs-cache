---
edit_url: "https://github.com/dhis2-metadata/MAL_CS/blob/master/docs/mal_cs-installation.md"
revision_date: '2023-11-28'
tags:
- 元数据
---

# 疟疾病例监测和病灶调查与响应安装指南{ #mal-cs-installation }

本文件包括疟疾病例监测和病灶调查软件包的安装指南。

系统默认语言：系统默认语言：英语

## 总览 { #overview } 


## 安装 { #installation } 

模块的安装包括以下几个步骤：

1. [使用 DHIS2 元数据准备元数据文件]（#preparing-the-metadata-file）。
2. [将元数据文件导入 DHIS2]（#importing-metadata）。
3. [配置导入的元数据](#configuration)。
4. [导入后调整程序](#调整程序)

在开始 DHIS2 的安装和配置过程之前，建议首先阅读安装指南的各个部分。根据导入类型确定适用的章节：

1. 导入空白的 DHIS2 实例
2. 导入具有现有元数据的 DHIS2 实例。

本文件中概述的步骤应在测试/暂存 DHIS2 实例中进行测试，然后才应用于生产环境。

## 要求 { #requirements } 

安装模块需要 DHIS2 的管理员用户账户。

应格外注意确保服务器本身和 DHIS2 应用程序的安全，并应定义对所收集数据的访问权限。有关 DHIS2 系统安全的详细信息不在本文讨论范围之内，请参阅[DHIS2 文档](https://docs.dhis2.org/)。

## 元数据文件{ #metadata-files } 

尽管并非总是必要，但在将元数据文件导入DHIS2之前对其进行某些修改通常可能是有利的。

## 准备元数据文件{ #preparing-the-metadata-file } 

在导入元数据文件之前，需要对其进行一些更改。工作范围可能因软件包而异。

### 默认数据维度 { #default-data-dimension } 

在 DHIS2 早期版本中，默认数据维度的 UID 是自动生成的。因此，虽然所有 DHIS2 实例都有默认类别选项、数据元素类别、类别组合和类别选项组合，但这些默认值的 UID 可能不同。DHIS2 的后期版本对默认维度的 UID 进行了硬编码，这些 UID 在配置包中使用。

为避免导入元数据时发生冲突，建议搜索并替换整个 .json 文件中所有出现的这些默认对象，将 .json 文件中的 UID 替换为导入该文件的实例中的 UID。表 1 显示了应替换的 UID，以及用于识别现有 UID 的 API 端点

|目的                       | 用户标识           | 应用程序接口端点                                              |
|-----------------------------|---------------|-----------------------------------------------------------|
| 类别                    | `GLevLNI9wkl` | `.../api/categories.json?filter=name:eq:default`。           |
| 类别选项             | `xYerKDKCefk` | `.../api/categoryOptions.json?filter=name:eq:default`。      |
| 类别组合        | `bjDvmb4bfuf` | `.../api/categoryCombos.json?filter=name:eq:default`。       |
| 类别选项组合 | `HllvX50cXC0` | `../api/categoryOptionCombos.json?filter=name:eq:default` |

使用列出的 API 请求识别实例中默认维度的 UID，并用实例中的 UID 替换 json 文件中的 UID。

> **注意**
>
> 请注意，必须使用纯文本编辑器，而不是 Microsoft Word 等文字处理程序来执行搜索和替换操作。

### 指标类型 { #indicator-types } 

指标类型是另一种可能造成导入冲突的对象类型，因为某些名称在不同的 DHIS2 数据库中 使用（如 "百分比"）。由于指标类型由其因子（包括 "仅分子 "指标的 1）定义，因此它们是明确的，可通过搜索和替换 UID 来替换。这种方法有助于避免潜在的导入冲突，并防止实施者创建重复的指标类型。下表包含可替换的 UID，以及用于识别现有 UID 的 API 端点：

|目的                  | 用户标识           | 应用程序接口端点                                                          |
|------------------------|---------------|-----------------------------------------------------------------------|
| 仅分母（数字）| `CqNPn5KzksS` | `../api/indicatorTypes.json?filter=number:eq:true&filter=factor:eq:1` |

### 使用根组织单位 UID 进行可视化{ #visualizations-using-root-organisation-unit-uid } 

分配给特定组织单位级别或组织单位组的可视化、事件报告、报告表和地图都有一个对根（第 1 级）组织单位的引用。此类对象（如果存在于元数据文件中）包含一个占位符 `<OU_ROOT_UID>`。使用 .json 文件编辑器中的搜索功能可以识别该占位符，并将其替换为目标实例中 1 级组织单位的 UID。

### 选项代码{ #option-codes } 

根据 DHIS2 命名规则，元数据代码使用大写字母、下划线和空格。可能出现的一些例外情况在相应的软件包文档中有所说明。
当前软件包中元数据对象的所有代码都符合命名约定。目标数据库中使用的现有元数据对象的代码可能使用小写字母。在这种情况下，必须直接在数据库中更新这些值。

> **Important**
>
> During the import, the existing option codes will be overwritten with the updated upper case codes.
> In order to update the data values for existing data in the database, it is necessary to update the values stored in the database using database commands.
> Make sure to map existing old option codes and new option codes before replacing the values. Use staging instance first, before making adjustments on the production server.

对于数据元素值，请使用

    ```SQL
    UPDATE programstageinstance
    SET eventdatavalues = jsonb_set(eventdatavalues, '{"<affected data element uid>","value"}', '"<new value>"')
    WHERE eventdatavalues @> '{"<affected data element uid>":{"value": "<old value>"}}'::jsonb
    AND programstageid=<database_programsatgeid>;
    ```

### 选项的排序顺序{ #sort-order-for-options } 

检查系统中选项的排序顺序 `sortOrder` 是否与元数据包中选项的排序顺序一致。这仅适用于 json 文件和目标实例包含相同 UID 的选项和选项集时。

导入后，确保选项集中选项的排序顺序从 1 开始，排序顺序值中不应有间隙（如 1、2、3、5、6）。

排序顺序可在维护应用程序中调整。

1. 转到适用的选项集
2. 打开 "选项 "部分
3. 使用 "按名称排序"、"按代码/数值排序 "或 "手动排序"。

疟疾 CS 和 FOCI 软件包包含十个选项集：

| 选项集名称 | 用户标识 |
|---|---|
| 抗疟药物 | HB33RvLvVZe |
| 国家 | ynHtyLDVeJO |
| 疟疾病例调查地点 | IC5LgpRR9zH |
| 疟疾职业 | nIhvUns2noK |
| 疟疾结果 | XawHdgVomWy |
| 疟原虫种类 | Frutvn1xgE2 |
| 疟疾转诊原因 | r4qwUWuWRdO |
| 进行个案和/或重点调查的原因 | FcJkStOMubb |
| 是/否 | WDUwjiW2rGH |

> **注意**
>
> 当更新现有 DHIS2 实例中元数据元素的 UID 时，您需要在数据库中运行 SQL 命令，并在其他元数据对象（预测器、指标、验证规则表达式等）中替换其 UID 的所有出现和引用。

## 导入元数据 { #importing-metadata } 

使用 [Import/Export](#import_export) DHIS2 应用程序导入元数据包。建议在尝试实际导入元数据之前使用 "模拟运行 "功能来发现问题。如果 "模拟运行 "报告了任何问题或冲突，请参阅下面的[导入冲突]（#处理-导入-冲突）部分。如果 "试运行"/"验证 "导入无误，请尝试导入元数据。如果导入成功且无任何错误，则可以继续[配置](#configuration) 模块。在某些情况下，"模拟运行 "时不会显示导入冲突或问题，但在尝试实际导入时会显示。在这种情况下，导入摘要将列出需要解决的任何错误。

### 处理导入冲突 { #handling-import-conflicts } 

> **注意**
>
> 如果将软件包导入新的 DHIS2 实例，由于目标数据库中没有元数据，因此不会发生导入冲突。导入元数据后，进入"[配置](#configuration) "部分。

可能会发生多种冲突，但最常见的是配置包中的元数据对象的名称、简称和/或代码已经存在于目标数据库中。这些问题有几种不同的解决方案，各有利弊。例如，哪种方案更合适取决于发生冲突的对象类型。

#### 备选方案1 { #alternative-1 } 

重新命名 DHIS2 数据库中存在冲突的现有对象。这种方法的优点是无需修改 .json 文件，而是通过 DHIS2 的用户界面进行更改。这可能更不容易出错。这也意味着配置包保持原样，例如在发布包更新时，这可能是一个优势。在培训材料和文档中也经常引用原始软件包对象。

#### 备选方案2 { #alternative-2 } 

重命名.json文件中存在冲突的对象。这种方法的优点是现有的DHIS2元数据保持不变。当存在培训材料或文档（例如链接到所讨论对象的数据字典的SOP）时，这可能是一个因素，并且不存在通过修改用户熟悉的元数据而使用户感到困惑的风险。

请注意，对于备选项1和2，修改可以简单到在名称中添加一个小的前缀/后缀，以最大程度地减少混乱的风险。

#### 备选3 { #alternative-3 } 

第三种也是更复杂的方法是修改.json文件以重新使用现有的元数据。例如，在某个概念的某个选项集已经存在的情况下（例如“性别”），可以从.json文件中删除该选项集，并且对其UID的所有引用都将替换为数据库中已经存在的相应选项集。这样做的最大优点（不限于直接导入冲突的情况）是避免在数据库中创建重复的元数据。执行这种类型的修改时，需要考虑一些关键因素：

- 它需要有关DHIS2详细元数据结构的专业知识
- 该方法不适用于所有类型的对象。特别地，某些类型的对象具有依赖关系，这种依赖关系以这种方式难以解决，例如与分解有关。
- 将来对配置包的更新将很复杂。

## 组态 { #configuration } 

成功导入所有元数据后，需要执行一些步骤，模块才能正常运行。

### 分享中 { #sharing } 

首先，您必须使用 DHIS2 的*共享*功能来配置哪些用户（用户组）应查看与程序相关的元数据和数据，以及谁可以在程序中注册/输入数据。默认情况下，共享配置如下：

- 仪表板
- 可视化、地图、事件报告和报告表格
- 数据集
- 类别选项

有关共享的更多信息，请参阅 [DHIS2 文档](#sharing)。

软件包包括三个核心用户组：

MAL-CS- 数据分析：可访问所有仪表板，但不能修改元数据或输入新数据
MAL-CS- 数据录入：可以输入数据和创建新的病人记录
MAL-CS- 元数据管理：可以修改元数据
MAL-FOCI- 数据分析：可访问所有仪表盘，但不能修改元数据或输入新数据
MAL-FOCI- 数据录入：可以输入数据和创建新的患者记录
MAL-FOCI- 元数据管理：可以修改元数据

用户会根据其在系统中的角色被分配到相应的用户组。软件包中其他对象的共享可能会根据设置进行调整。更多信息请参阅 [DHIS2 共享文档](#sharing)。

### 添加关系类型{ #add-relationship-types } 

从 .json 文件中删除了 "MAL - Case-to-case "和 "MAL - Case-to-focus "的关系类型，以简化导入过程和相关错误。建议配置和分配这些关系类型。

**MAL - 病例对病例**：这种关系类型是一种双向关系。有关如何配置这种关系类型的详细截图，请参阅《系统设计指南》：
* 来自限制条件：在计划 "疟疾病例通知、调查和响应 "中使用跟踪实体类型 "疟疾病例 "的跟踪实体实例
* 限制：在计划 "疟疾病例通知、调查和响应 "中使用跟踪实体类型 "疟疾病例 "的跟踪实体实例

![配置疟疾病例对病例关系 "来自 "约束](resources/images/MAL_CS_relationshipType_casetocase.png)

![配置疟疾病例到病例关系 "到 "约束](resources/images/MAL_CS_relationshipType_casetocase2.png)

**MAL - 病例到病灶**：这种关系类型是一种双向关系。有关如何配置这种关系类型的详细截图，请参阅《系统设计指南》，它将疟疾病例（在一个追踪程序中追踪）与恶性病灶（在另一个追踪程序中追踪）联系起来。 
* 来自限制条件：在计划 "疟疾病例通知、调查和响应 "中使用跟踪实体类型 "疟疾病例 "的跟踪实体实例
* 限制：跟踪实体实例，在计划 "疟疾病灶调查 "中使用跟踪实体类型 "重点区域

![配置疟疾病例与病灶之间的关系 "来自 "约束](resources/images/MAL_CS_relationshipType_casetofocus.png)

![配置疟疾病例与病例之间的关系 "from "约束](resources/images/MAL_CS_relationshipType_casetofocus2.png)

### 用户角色 { #user-roles } 

用户将需要用户角色才能参与DHIS2中的各种应用程序。建议以下最低角色：

1. 跟踪器数据分析：可以查看事件分析并访问仪表板，事件报告，事件可视化器，数据可视化器，数据透视表，报告和地图。
2. 跟踪器数据捕获：可以添加数据值，更新跟踪的实体，跨组织单位搜索跟踪的实体以及访问跟踪器捕获

有关配置用户角色的更多信息，请参阅 [DHIS2 文档](https://docs.dhis2.org/)。

### 组织单位分配{ #organisation-unit-assignment } 

数据集必须分配给现有层次结构中的组织单位，才能通过采集应用程序访问。有关配置组织单位访问权限的更多信息，请参阅 [DHIS2 文档](https://docs.dhis2.org/)。

### 重复的元数据 { #duplicated-metadata } 

> **注意**
>
> 本节仅适用于导入已有元数据的 DHIS2 数据库。如果您使用的是新的 DHIS2 实例，请跳过本节，转到[调整跟踪程序](#adapting-the-tracker-program)。
> 如果您正在使用任何依赖于当前元数据的第三方应用程序，请考虑到此次更新可能会破坏它们"。

即使成功导入了元数据而没有任何导入冲突，元数据中也可能存在重复项-数据元素，跟踪的实体属性或已存在的选项集。正如上面有关解决冲突的部分所述，要牢记的一个重要问题是，在DHIS2中更改元数据的决定还需要考虑与现有元数据有不同关联的其他文档和资源。 ，以及通过配置包导入的元数据。因此，解决重复项不仅是“清理数据库”的问题，而且还要确保做到这一点，例如，不破坏与其他系统的集成，使用培训材料的可能性，破坏SOP等。这将非常很大程度上取决于上下文。

需要牢记的重要一点是，DHIS2 有一些工具可以隐藏元数据中潜在重复的一些复杂问题。例如，在存在重复选项集的情况下，可以通过[共享]（#sharing）为用户组隐藏这些选项集。

## 调整计划{ #adapting-the-program } 

程序导入后，您可能需要对程序进行某些修改。可以**的本地改编例子包括：

- 向表单添加其他变量。
- 根据国家惯例修改数据元素/选项名称。
- 向变量和/或数据输入表单添加翻译。
- 根据当地案例定义修改指标

但是，如果您决定更改或删除任何包含的表格/元数据，强烈建议格外小心。修改可能会破坏功能，例如程序规则和程序指示器。

## 删除元数据{ #removing-metadata } 

为了保持实例清洁并避免出错，建议您删除实例中不必要的元数据。删除不必要的元数据需要 DHIS2 的高级知识和各种依赖关系。

