---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/master/src/sysadmin/audit.md"
revision_date: '2022年10月23日'
tags:
- Manage
- DHIS核心 主版
---

# 审核 { #audit } 

## 介绍 { #introduction } 

DHIS2 支持基于 _Apache ActiveMQ Artemis_ 的新审计服务。 Artemis 被 DHIS2 用作异步消息传递系统。

将实体保存到数据库后，将创建审核消息并将其发送到 Artemis 消息消费者服务。然后该消息将在不同的线程中处理。

可以从 DHIS2 数据库检索审核日志。目前没有可用于检索审核条目的 UI 或 API 端点。

审计系统架构的详细说明可以在这里找到(https://github.com/dhis2/wow-backend/blob/master/guides/auditing.md)。

## 我们记录的内容{ #what_we_log }

这是我们作为审计系统的一部分记录的操作列表：

- 对用户帐户的操作（例如但不限于创建、个人资料编辑）
- 对用户角色、组和权限组的操作
- 对元数据对象的操作（例如但不限于类别、组织单位、报告）
- 对跟踪对象的操作（例如但不限于实例、属性、数据值）
- 职位配置
- 打碎玻璃作业

## 单审核表 { #audit_table } 

All audit entries, except the ones related to tracked entities, will be saved into one single table named `audit`

| 柱     | 类型                        | 描述 |
|------------|-----------------------------|---------------------------------------------------------------------------------------------------------------------------------------------|
| 受审核者    | 整数                     | 首要的关键。 |
| 审核类型  | 文本                        | 读取，创建，更新，删除，搜索 |
| 审计范围 | 文本                        | 元数据，汇总，跟踪器 |
| 克拉斯      | 文本                        | 审核实体 Java 类名。 |
| 属性 | jsonb                       | 包含审核对象属性的 JSON 字符串。示例：`{"valueType":"TEXT", "categoryCombo":"SWQW313FQY", "domainType":"TRACKER"}`。 |
| 数据       | 比蒂亚                       | 审计实体的压缩 JSON 字符串，采用字节数组格式（人类不可读）。 |
| 创建于  | 没有时区的时间戳 | 创作时间。 |
| 由...制作  | 文本                        | 执行审核操作的用户的用户名。 |
| uid        | 文本                        | 审计对象的UID。 |
| 码       | 文本                        | 审计对象的代码。 |

审计服务使用两个新概念：*审计范围*和*审计类型*。

## 审核范围 { #audit_scope } 

审计范围是应用程序中可以审计的逻辑区域。目前审计范围分为三个。

| **范围** | 键       | 审核对象                                              |
| --------- | --------- | ------------------------------------------------------------ |
| 追踪器   | 追踪器   | 跟踪的实体实例、跟踪的实体属性值、注册、事件。 |
| 元数据  | 元数据  | 所有元数据对象（例如数据元素、组织单元）。 |
| 总计的 | 总计的 | 聚合数据价值。                                        |


## 审核类型 { #audit_type } 

审核类型是触发审核操作的操作。目前我们支持以下四种类型。

| 名称     | 键      | 描述         |
| -------- | -------- | ------------------- |
| 读     | 读     | 对象被读取。    |
| 创造   | 创造   | 对象已创建。 |
| 更新   | 更新   | 对象已更新。 |
| 删除   | 删除   | 对象被删除。 |
| 残疾人 | 禁用 | 禁用审核。      |

> **注意**
>
> READ 审计类型可能会在数据库中生成大量数据，可能会对性能产生影响。


## 跟踪的实体审核{ #tracked-entity-audits }

Operations on tracked entities like instances, attributes and values are stored, respectively in the `trackedentityinstanceaudit`, `trackedentityattributevalueaudit` and `trackedentitydatavalueaudit` tables.

### trackedentityinstanceaudit { #trackedentityinstanceaudit }

| 柱     | 类型                        | 描述 |
|------------|-----------------------------|-------------|
| 跟踪实体实例审计ID | 整数 | 首要的关键。 |
| 跟踪实体实例 | 文本  | 跟踪的实体实例名称。  |
| 已创建  | 没有时区的时间戳 | 创作时间。 |
| 访问者 | 文本 | 执行审核操作的用户的用户名。 |
| 审核类型 | 文本 | 读取，创建，更新，删除，搜索 |
| 评论 | 文本 | 审计对象的代码。 |

可以通过 [API](#webapi_tracked_entity_instance_audits) 检索此数据。

### trackedentityattributevalueaudit { #trackedentityattributevalueaudit }

| 柱     | 类型                        | 描述 |
|------------|-----------------------------|-------------|
| 跟踪实体属性值审计 | 整数 | 首要的关键。 |
| 跟踪实体实例ID | 整数 | 属性值所属的实例ID。  |
| 跟踪实体属性id | 整数 | 属性 ID。  |
| 已创建  | 没有时区的时间戳 | 创作时间。 |
| 修改者  | 文本 | 执行审核操作的用户的用户名。 |
| 审核类型 | 文本  | 读取，创建，更新，删除，搜索 |
| 价值 | 文本 | 审计对象的价值。 |
| 加密值 | 文本 | 如果设置了机密性标志，则为加密值。 |


该数据可以通过 [API](#webapi_tracked_entity_attribute_value_audits) 检索。

### trackedentitydatavalueaudit { #trackedentitydatavalueaudit }

| 柱     | 类型                        | 描述 |
|------------|-----------------------------|-------------|
| 跟踪实体数据值审计 ID | 整数 | 首要的关键。 |
| 程序阶段实例id | 整数 | 数据值所属的程序阶段ID。  |
| 数据元素id | 整数 | 数据元素的 ID。  |
| 已创建 | 没有时区的时间戳 | 创作时间。 |
| 修改者 | 文本 | 执行审核操作的用户的用户名。 |
| 审核类型 | 文本 | 读取，创建，更新，删除，搜索 |
| 价值 | 文本 | 审计对象的价值。 |
| 在其他地方提供 | 布尔值 | 指示用户是否在其他地方提供了该值。 |

该数据可以通过 [API](#webapi_tracked_entity_data_value_audits) 检索。

## 打破玻璃 { #breaking-the-glass } 
打破玻璃功能允许访问 DHIS2 用户在特殊情况下无权访问的记录。因此，用户必须输入访问此类记录的原因。

您可以在我们的 Youtube 频道[此处](https://www.youtube.com/watch?v=rTwg5Ix_E_M) 中找到解释其工作原理的视频。

The breaking the glass event is stored in the `programtempownershipaudit` table, described below:

| 柱     | 类型  | 描述 |
|------------|-------|-------------|
| 计划临时所有权审计 | 整数 | 首要的关键。 |
| 程序编号 | 整数 | 被跟踪实体所属的程序ID。  |
| 跟踪实体实例ID | 整数 | 属性值所属的实例ID。  |
| 已创建  | 没有时区的时间戳 | 创作时间。 |
| 访问者  | 文本 | 执行审核操作的用户的用户名。 |
| 原因       | 文本 | 对话框中插入的原因。 |


## 设定 { #audit_configuration } 

默认情况下，审核系统针对以下范围和类型启用。

范围（区分大小写）：

- `创建`
- `更新`
- `删除`

类型：

- `元数据`
- `追踪器`
- `聚合`

这意味着**无需执行任何操作**即可启用默认审核系统。默认设置相当于以下`dhis.conf`配置。

```properties
audit.metadata = CREATE;UPDATE;DELETE
audit.tracker = CREATE;UPDATE;DELETE
audit.aggregate = CREATE;UPDATE;DELETE
```

可以使用_审计矩阵_配置审计。审计矩阵表示范围和类型的有效组合，并在` dhis.conf` 配置文件中使用以下属性定义。每个属性都接受以分号 (`;`) 分隔的审计类型列表。

* `审计.元数据`
* `审计跟踪器`
* `审计.聚合`

### 阿耳忒弥斯 { #artemis }
[Apache ActiveMQ Artemis](https://activemq.apache.org/components/artemis/documentation/) 是一个开源项目，用于构建多协议、可嵌入、高性能、集群、异步消息系统。从 2.31 版开始，它就成为 DHIS2 的一部分，并用作使用审核日志的系统。

默认情况下，DHIS2 将启动嵌入式 Artemis 服务器，该服务器由应用程序内部使用来存储和访问审核事件。

但是，如果您已经拥有 Artemis 服务器，则可以从 DHIS2 连接到它以发送审核事件，如我们的[官方文档](#webapi_amqp_configuration)中所述：在此设置中，审核事件将从 DHIS2 流向外部 Artemis 系统。

### log4j2 { #log4j2 }
[log4j2](https://logging.apache.org/log4j/2.x/index.html) 是用于处理输出消息的默认 DHIS2 日志记录库。它用于控制将哪些事件记录在哪个文件中。

该应用程序附带一个[log4j2默认配置文件](https://github.com/dhis2/dhis2-core/blob/master/dhis-2/dhis-web/dhis-web-commons-resources/src/main/webapp /WEB-INF/classes/log4j2.xml），它指示记录哪些信息以及记录在哪里（控制台）。然后，DHIS2 负责导入该文件和指令日志记录，如 [log4j 配置类](https://github.com/dhis2/dhis2-core/blob/2.38/dhis-2/dhis-support/dhis-support -system/src/main/java/org/hisp/dhis/system/log/Log4JLogConfigInitializer.java)，即将输出从控制台重定向到文件。

From 2.36 to 2.38, audit log file `dhis-audit.log` is rotated [every day at midnight](https://github.com/dhis2/dhis2-core/blob/2.38/dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/log/Log4JLogConfigInitializer.java#L171).

可以在[此处]()找到自定义 log4j2 配置的示例：它展示了如何配置 DHIS2 将所有日志保存到外部存储位置，每周轮换它们并保留它们 30 天。请阅读[应用程序日志记录部分](#install_application_logging)了解如何使用它。

## 例子 { #examples } 

This section demonstrates how to configure the audit system in `dhis.conf`.

仅启用对元数据和跟踪器的创建和更新的审核：

```properties
audit.metadata = CREATE;UPDATE
audit.tracker = CREATE;UPDATE
audit.aggregate = DISABLED
```

仅审核跟踪器相关对象的创建和删除：

```properties
audit.metadata = DISABLED
audit.tracker = CREATE;DELETE
audit.aggregate = DISABLED
```

要完全禁用所有范围的审核：
```properties
audit.metadata = DISABLED
audit.tracker = DISABLED
audit.aggregate = DISABLED
```

We recommend keeping the audit trails into a file, as by default in version 2.38. For older versions, the following configuration saves the audit logs into the `$DHIS2_HOME/logs/dhis-audit.log` file:
```properties
audit.database = off
audit.logger = on
```

To store audit data into the database, add the following to your `dhis.conf` file (default up until version 2.38):
```properties
audit.database = on
audit.logger = off
```

To extract logs from the `audit` table, you can use [`dhis2-audit-data-extractor`](https://github.com/dhis2/dhis2-utils/tree/master/tools/dhis2-audit-data-extractor) from the system where DHIS2 is running:
```
$ python extract_audit.py extract
```

请阅读文档以获取完整详细信息。

要解析日志文件中的条目，您可以使用 python 脚本，如下所示：
```
$ grep "auditType" dhis-audit.log | python extract_audit.py parse
```

或者使用 `jq` 如下：

```
$ grep "auditType" dhis-audit.log | jq -r .
```

To select events within a specific date, you can use `jq` as follow (in this example, we're selecting all events happened between January 2022 and end of June 2022):

```
$ grep "auditType" dhis-audit.log | jq -r '.[] | select ( (.datetime >="2022-01-01") and (.datetime <= "2022-06-30") )'
```

Same with `extract_audit`:
```
$ python3 extract_audit.py extract -m stdout -f JSON | jq -r '.[] | select ( (.datetime >="2022-01-01") and (.datetime <= "2022-06-30") )'
```

