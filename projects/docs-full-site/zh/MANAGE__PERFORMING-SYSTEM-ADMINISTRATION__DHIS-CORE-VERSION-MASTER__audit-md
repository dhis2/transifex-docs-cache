---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/master/src/sysadmin/audit.md"
revision_date: '2024-05-21'
tags:
- DHIS核心 主版
- Manage
---

# 审核 { #audit } 

## 介绍 { #introduction } 

DHIS2 支持基于 _Apache ActiveMQ Artemis_ 的新审计服务。 Artemis 被 DHIS2 用作异步消息传递系统。

将实体保存到数据库后，将创建审核消息并将其发送到 Artemis 消息消费者服务。然后该消息将在不同的线程中处理。

可以从 DHIS2 数据库检索审核日志。目前没有可用于检索审核条目的 UI 或 API 端点。

审计系统架构的详细说明可以在这里找到(https://github.com/dhis2/wow-backend/blob/master/guides/auditing.md)。

## 我们记录的内容{ #what_we_log }

这是我们作为审计系统的一部分记录的操作列表：

- 对用户帐户的操作（例如但不限于创建、个人资料编辑）
- 对用户角色、组和权限组的操作
- 对元数据对象的操作（例如但不限于类别、组织单位、报告）
- 对跟踪对象的操作（例如但不限于实例、属性、数据值）
- 职位配置
- 打碎玻璃作业

## 单审核表 { #audit_table } 

All audit entries, except the ones related to tracked entities, will be saved into one single table named `audit`

| 柱     | 类型                        | 描述 |
|------------|-----------------------------|---------------------------------------------------------------------------------------------------------------------------------------------|
| 受审核者    | 整数                     | 首要的关键。 |
| 审核类型  | 文本                        | 读取，创建，更新，删除，搜索 |
| 审计范围 | 文本                        | 元数据，汇总，跟踪器 |
| 克拉斯      | 文本                        | 审核实体 Java 类名。 |
| 属性 | jsonb                       | 包含审核对象属性的 JSON 字符串。示例：`{"valueType":"TEXT", "categoryCombo":"SWQW313FQY", "domainType":"TRACKER"}`。 |
| 数据       | 比蒂亚                       | 审计实体的压缩 JSON 字符串，采用字节数组格式（人类不可读）。 |
| 创建于  | 没有时区的时间戳 | 创作时间。 |
| 由...制作  | 文本                        | 执行审核操作的用户的用户名。 |
| uid        | 文本                        | 审计对象的UID。 |
| 码       | 文本                        | 审计对象的代码。 |

审计服务使用两个新概念：*审计范围*和*审计类型*。

## 审核范围 { #audit_scope } 

审计范围是应用程序中可以审计的逻辑区域。目前审计范围分为三个。

| **范围** | 键       | 审核对象                                              |
| --------- | --------- | ------------------------------------------------------------ |
| 追踪器   | TRACKER   | 跟踪的实体实例、跟踪的实体属性值、注册、事件。 |
| 元数据  | METADATA  | 所有元数据对象（例如数据元素、组织单元）。 |
| 总计的 | AGGREGATE | 聚合数据价值。                                        |


## 审核类型 { #audit_type } 

审核类型是触发审核操作的操作。目前我们支持以下四种类型。

| 名称     | 键      | 描述         |
| -------- | -------- | ------------------- |
| 读     | 读     | 对象被读取。    |
| 创造   | 创造   | 对象已创建。 |
| 更新   | 更新   | 对象已更新。 |
| 删除   | 删除   | 对象被删除。 |
| 残疾人 | 禁用 | 禁用审核。      |

> **注意**
>
> READ 审计类型可能会在数据库中生成大量数据，可能会对性能产生影响。


## 跟踪的实体审核{ #tracked-entity-audits }

Operations on tracked entities like instances, attributes and values are stored, respectively in the `trackedentityinstanceaudit`, `trackedentityattributevalueaudit` and `trackedentitydatavalueaudit` tables.

### trackedentityinstanceaudit { #trackedentityinstanceaudit }

| 柱     | 类型                        | 描述 |
|------------|-----------------------------|-------------|
| 跟踪实体实例审计ID | 整数 | 首要的关键。 |
| 跟踪实体实例 | 文本  | 跟踪的实体实例名称。  |
| 已创建  | 没有时区的时间戳 | 创作时间。 |
| 访问者 | 文本 | 执行审核操作的用户的用户名。 |
| 审核类型 | 文本 | 读取，创建，更新，删除，搜索 |
| 评论 | 文本 | 审计对象的代码。 |

可以通过 [API](#webapi_tracked_entity_instance_audits) 检索此数据。

### trackedentityattributevalueaudit { #trackedentityattributevalueaudit }

| 柱     | 类型                        | 描述 |
|------------|-----------------------------|-------------|
| 跟踪实体属性值审计 | 整数 | 首要的关键。 |
| 跟踪实体实例ID | 整数 | 属性值所属的实例ID。  |
| 跟踪实体属性id | 整数 | 属性 ID。  |
| 已创建  | 没有时区的时间戳 | 创作时间。 |
| 修改者  | 文本 | 执行审核操作的用户的用户名。 |
| 审核类型 | 文本  | 读取，创建，更新，删除，搜索 |
| 价值 | 文本 | 审计对象的价值。 |
| 加密值 | 文本 | 如果设置了机密性标志，则为加密值。 |


该数据可以通过 [API](#webapi_tracked_entity_attribute_value_audits) 检索。

### trackedentitydatavalueaudit { #trackedentitydatavalueaudit }

| 柱     | 类型                        | 描述 |
|------------|-----------------------------|-------------|
| 跟踪实体数据值审计 ID | 整数 | 首要的关键。 |
| 程序阶段实例id | 整数 | 数据值所属的程序阶段ID。  |
| 数据元素id | 整数 | 数据元素的 ID。  |
| 已创建 | 没有时区的时间戳 | 创作时间。 |
| 修改者 | 文本 | 执行审核操作的用户的用户名。 |
| 审核类型 | 文本 | 读取，创建，更新，删除，搜索 |
| 价值 | 文本 | 审计对象的价值。 |
| 在其他地方提供 | 布尔值 | 指示用户是否在其他地方提供了该值。 |

该数据可以通过 [API](#webapi_tracked_entity_data_value_audits) 检索。

## 打破玻璃 { #breaking-the-glass } 
打破玻璃功能允许访问 DHIS2 用户在特殊情况下无权访问的记录。因此，用户必须输入访问此类记录的原因。

您可以在我们的 Youtube 频道[此处](https://www.youtube.com/watch?v=rTwg5Ix_E_M) 中找到解释其工作原理的视频。

The breaking the glass event is stored in the `programtempownershipaudit` table, described below:

| 柱     | 类型  | 描述 |
|------------|-------|-------------|
| 计划临时所有权审计 | 整数 | 首要的关键。 |
| 程序编号 | 整数 | 被跟踪实体所属的程序ID。  |
| 跟踪实体实例ID | 整数 | 属性值所属的实例ID。  |
| 已创建  | 没有时区的时间戳 | 创作时间。 |
| 访问者  | 文本 | 执行审核操作的用户的用户名。 |
| 原因       | 文本 | 对话框中插入的原因。 |


## 设定 { #audit_configuration } 

默认情况下，审核系统针对以下范围和类型启用。

范围（区分大小写）：

- `READ`
- `CREATE`
- `UPDATE`
- `DELETE`
- `SEARCH`
- `DISABLED`

Types:

- `METADATA`
- `TRACKER`
- `AGGREGATE`

This means that **no action is required** to enable the default audit system. The default setting is equivalent to the following `dhis.conf` configuration.

```properties
audit.metadata = CREATE;UPDATE;DELETE
audit.tracker = CREATE;UPDATE;DELETE
audit.aggregate = CREATE;UPDATE;DELETE
```

可以使用_审计矩阵_配置审计。审计矩阵表示范围和类型的有效组合，并在` dhis.conf` 配置文件中使用以下属性定义。每个属性都接受以分号 (`;`) 分隔的审计类型列表。

* `audit.metadata`
* `audit.tracker`
* `audit.aggregate`

### Artemis { #artemis } 
[Apache ActiveMQ Artemis](https://activemq.apache.org/components/artemis/documentation/) is an open source project to build a multi-protocol, embeddable, very high performance, clustered, asynchronous messaging system. It has been part of DHIS2 since version 2.31 and used as a system to consume audit logs.

By default, DHIS2 will start an embedded Artemis server, which is used internally by the application to store and access audit events.

However, if you have already an Artemis server, you can connect to it from DHIS2 to send audit events, as described in our [official documentation](#webapi_amqp_configuration): in this setup, audit events will flow from DHIS2 to the external Artemis system.

### log4j2 { #log4j2 } 
[log4j2](https://logging.apache.org/log4j/2.x/index.html) is the default DHIS2 logging library used to handle output messages. It's used to control what events are recored in which file.

The application ships a [log4j2 default configuration file](https://github.com/dhis2/dhis2-core/blob/master/dhis-2/dhis-web/dhis-web-commons-resources/src/main/webapp/WEB-INF/classes/log4j2.xml), which instructs what information to log and where (console). DHIS2 then takes care of import that file and instruction logging as described in the [log4j configuration class](https://github.com/dhis2/dhis2-core/blob/2.38/dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/log/Log4JLogConfigInitializer.java), that is, redirecting output from console to files.

From 2.36 to 2.38, audit log file `dhis-audit.log` is rotated [every day at midnight](https://github.com/dhis2/dhis2-core/blob/2.38/dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/log/Log4JLogConfigInitializer.java#L171).

An example of custom log4j2 configuration can be found [here](): it shows how to configure DHIS2 to save all logs into an external storage location, rotate them on a weekly basis and retain them for 30 days. Please read the [application logging section](#install_application_logging) on how to use it.

## 例子 { #examples } 

This section demonstrates how to configure the audit system in `dhis.conf`.

To enable audit of create and update of metadata and tracker only:

```properties
audit.metadata = CREATE;UPDATE
audit.tracker = CREATE;UPDATE
audit.aggregate = DISABLED
```

To only audit tracker related objects create and delete:

```properties
audit.metadata = DISABLED
audit.tracker = CREATE;DELETE
audit.aggregate = DISABLED
```

To completely disable audit for all scopes:
```properties
audit.metadata = DISABLED
audit.tracker = DISABLED
audit.aggregate = DISABLED
```

We recommend keeping the audit trails into a file, as by default in version 2.38. For older versions, the following configuration saves the audit logs into the `$DHIS2_HOME/logs/dhis-audit.log` file:
```properties
audit.database = off
audit.logger = on
```

To store audit data into the database, add the following to your `dhis.conf` file (default up until version 2.38):
```properties
audit.database = on
audit.logger = off
```

To extract logs from the `audit` table, you can use [`dhis2-audit-data-extractor`](https://github.com/dhis2/dhis2-utils/tree/master/tools/dhis2-audit-data-extractor) from the system where DHIS2 is running:
```
$ python extract_audit.py extract
```

Please read the documentation for full details.

To parse entries from log file, you can use the python script as follow:
```
$ grep "auditType" dhis-audit.log | python extract_audit.py parse
```

Or use `jq` as follow:

```
$ grep "auditType" dhis-audit.log | jq -r .
```

To select events within a specific date, you can use `jq` as follow (in this example, we're selecting all events happened between January 2022 and end of June 2022):

```
$ grep "auditType" dhis-audit.log | jq -r '.[] | select ( (.datetime >="2022-01-01") and (.datetime <= "2022-06-30") )'
```

Same with `extract_audit`:
```
$ python3 extract_audit.py extract -m stdout -f JSON | jq -r '.[] | select ( (.datetime >="2022-01-01") and (.datetime <= "2022-06-30") )'
```

