---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/master/src/developer/web-api/i18n.md"
revision_date: '2024-05-15'
tags:
- Develop
- DHIS核心 主版
---

# 国际化 { #i18n }

## 语言环境 { #webapi_locales } 

DHIS2 支持用户界面和数据库的翻译
内容。

### UI语言环境 { #ui-locales } 

您可以通过以下方式检索用户界面的可用区域设置
以下资源带有 GET 请求。 XML 和 JSON 资源
支持表示。

    / api / 33 / locales / ui

### 数据库内容语言环境 { #database-content-locales } 

You can retrieve and create locales for the database content with GET and POST requests through the `dbLocales` resource. XML and JSON resource representations are supported. To POST data, there are two required parameters: `country` and `language`. 

    /api/locales/dbLocales?country=US&language=en

## 翻译 { #webapi_translations } 

DHIS2 允许翻译数据库内容。 
如果元数据可以翻译，那么它就会有一个 `translations` 属性。

That means you can retrieve and update translations using metadata class resources such as `api/dataElements`, `api/organisationUnits`, `api/dataSets`, etc.

### 获取翻译 { #get-translations } 

您可以向 `api/dataElements/{dataElementUID}` 发送 GET 请求，获取 DataElement 等元数据对象的翻译。

响应包含 DataElement 的全部详细信息，其中还包括 `translations` 属性，如下所示

```json
{
  "id": "fbfJHSPpUQD",
  "href": "https://play.dhis2.org/dev/api/29/dataElements/fbfJHSPpUQD",
  "created": "2010-02-05T10:58:43.646",
  "name": "ANC 1st visit",
  "shortName": "ANC 1st visit",
  "translations": 
  [
    {
      "property": "SHORT_NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Soin prénatal 1"
    },
    {
      "property": "NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    }
  ]
}
```
您也可以只获取对象的 `translations` 属性，方法是发送 GET 请求到 
`api/dataElements/{dataElementUID}/translations` 的 GET 请求。

```json
{
  "translations": 
  [
    {
      "property": "SHORT_NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Soin prénatal 1"
    },
    {
      "property": "NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    }
  ]
}
```

### 创建/更新翻译 { #createupdate-translations }

您可以通过将具有相同 JSON 格式的 PUT 请求发送到 `api/dataElements/{dataElementUID}/translations` 来创建翻译

```json
{
  "translations": 
  [
    {
      "property": "SHORT_NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Soin prénatal 1"
    },
    {
      "property": "DESCRIPTION",
      "locale": "fr",
      "value": "description in french"
    },
    {
      "property": "FORM_NAME",
      "locale": "fr",
      "value": "name in french"
    }
  ]
}
```

或者，您也可以直接更新对象的有效载荷，其中包括 `translations` 属性。

将 PUT 请求发送到 `api/dataElements/{dataElementUID}` 并包含完整对象负载，如下所示：

```json
{
  "id": "fbfJHSPpUQD",
  "created": "2010-02-05T10:58:43.646",
  "name": "ANC 1st visit",
  "shortName": "ANC 1st visit",
  "translations": 
  [
    {
      "property": "SHORT_NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Soin prénatal 1"
    },
    {
      "property": "NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    }
  ]
}
```

The status code will be `204 No Content` if the data value was successfully saved or updated, or `409 Conflict` if there was a validation error (e.g. more than one `SHORT_NAME` for the same `locale`).

下表列出了支持翻译的常见属性。

表：属性名称

| 物业名称 | 描述 |
|---|---|
| 名称 | 对象名称 |
| 简称 | 对象短名称 |
| 描述 | 对象描述 |

下表列出了支持翻译的类。

表：类名称

| 班级名称 | 描述 | 其他可翻译的属性 |
|---|---|---|
| 数据元素类别选项 | 类别选项 | |
| 数据元素类别 | 类别 | |
| 数据元素类别组合 | 品类组合 | |
| 数据元素 | 数据元素 | |
| 数据元素组 | 数据元素组 | |
| 数据元素组集 | 数据元素组集 | |
| 指示符 | 指示符 | 分子描述，分母描述 |
| 指标类型 | 指示器类型 | |
| 指标组 | 指标组 | |
| 指标组集 | 指标组设置 | |
| 组织单位 | 组织单位 | |
| 组织单位组 | 组织单位组 | |
| 组织单位组集 | 组织单位组集 | |
| 数据集 | 资料集 | |
| 部分 | 数据集部分 | |
| 验证规则 | 验证规则 | 操作说明 |
| 验证规则组 | 验证规则组 | |
| 程序 | 程序 | 注册日期标签、事件日期标签 |
| 程序阶段 | 程序阶段 | 执行日期标签、到期日期标签 |
| 跟踪实体属性 | 跟踪实体属性 | |
| 被跟踪实体 | 被跟踪的实体 | |
| 关系类型 | 跟踪实体实例的关系类型 | 从到名称, 到从名称 |
| 选项集 | 选项集 | |
| 选项 | 选项 | |
| 属性 | 元数据属性 | |
| 程序通知模板 | 计划通知模板 | 主题模板、消息模板 |
| 验证通知模板 | 验证通知模板 | 主题模板、消息模板 |
| 数据集通知模板 | 数据集通知模板 | 主题模板、消息模板 |
| 可视化 | 可视化 | 标题、副标题、rangeAxisLabel、baseLineLabel、targetLineLabel、domainAxisLabel |
| 程序规则行动 | 计划规则行动 | 内容 |
| 预测变量 | 预测变量 | 名称、简称、描述、生成器描述  |
| 验证规则 | 验证规则 | 名称、描述、指令、左侧表达式、右侧表达式 |

## 国际化 { #webapi_i18n } 

为了检索翻译字符串的键值对，您可以使用
*i18n* 资源。

    / api / 33 / i18n

端点位于 */api/i18n* 并且请求格式是一个简单的
键值对数组：

```json
[
  "access_denied",
  "uploading_data_notification"
]
```

请求必须是 *POST* 类型并使用 *application/json* 作为
内容类型。使用 curl 的示例，假设请求数据已保存
作为文件`keys.json`：

```bash
curl -d @keys.json "play.dhis2.org/demo/api/33/i18n" -X POST
  -H "Content-Type: application/json" -u admin:district
```

结果将如下所示：

```json
{
  "access_denied":"Access denied",
  "uploading_data_notification":"Uploading locally stored data to the server"
}
```

