---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.37/src/developer/web-api/visualizations.md"
revision_date: '2021-10-14'
tags:
- DHIS 核心 2.37 版
- Develop
---

# 可视化 { #visualizations } 
## 仪表板 { #webapi_dashboard } 

仪表板旨在为您提供多个分析的概览
地图、图表、数据透视表和报告等项目，它们一起可以
提供您数据的全面概览。仪表板可用
通过 *dashboards* 资源在 Web API 中。仪表板包含一个
仪表板*项目*列表。一个项目可以代表一个单一的资源，比如
图表、地图或报告表，或表示指向分析的链接列表
资源，如报告、资源、表格报告和用户。一种
仪表板项目最多可以包含八个链接。通常，仪表板
客户可以选择直接在一个
用户界面，同时将多对象项目渲染为可点击
链接。

    / api /仪表板

### 浏览仪表板 { #webapi_browsing_dashboards } 

获取包含基本信息的仪表板列表，包括
JSON 格式的标识符、名称和链接，您可以向其发出 *GET* 请求
以下网址：

    /api/dashboards.json

仪表板资源将提供仪表板列表。请记住
仪表板对象是共享的，因此列表将受
当前已验证的用户。您可以检索有关一个的更多信息
特定的仪表板，请点击其链接，类似于：

    /api/dashboards/vQFhmLJU5sK.json

仪表板包含名称和创建日期等信息以及
仪表板项目数组。 JSON 格式的响应看起来类似
对此回复（某些信息已被删除，以便
简洁）。

```json
{
  "lastUpdated" : "2013-10-15T18:17:34.084+0000",
  "id": "vQFhmLJU5sK",
  "created": "2013-09-08T20:55:58.060+0000",
  "name": "Mother and Child Health",
  "href": "https://play.dhis2.org/demo/api/dashboards/vQFhmLJU5sK",
  "publicAccess": "--------",
  "restrictFilters": false,
  "externalAccess": false,
  "itemCount": 17,
  "displayName": "Mother and Child Health",
  "access": {
    "update": true,
    "externalize": true,
    "delete": true,
    "write": true,
    "read": true,
    "manage": true
  },
  "user": {
    "id": "xE7jOejl9FI",
    "name": "John Traore",
    "created": "2013-04-18T15:15:08.407+0000",
    "lastUpdated": "2014-12-05T03:50:04.148+0000",
    "href": "https://play.dhis2.org/demo/api/users/xE7jOejl9FI"
  },
  "dashboardItems": [{
    "id": "bu1IAnPFa9H",
    "created": "2013-09-09T12:12:58.095+0000",
    "lastUpdated": "2013-09-09T12:12:58.095+0000"
    }, {
    "id": "ppFEJmWWDa1",
    "created": "2013-09-10T13:57:02.480+0000",
    "lastUpdated": "2013-09-10T13:57:02.480+0000"
  }],
  "layout": {
    "spacing": {
      "column": 5,
      "row": 5
    },
    "columns": [{
      "index": 0,
      "span": 2
    }, {
      "index": 1,
      "span": 1
    }]
  },
  "userGroupAccesses": []
}
```

通过指定特定字段可以获得更定制的响应
在请求中。下面提供了一个示例，它将返回更多
有关用户仪表板上每个对象的详细信息。

    / api / dashboards / vQFhmLJU5sK /？fields =：all，dashboardItems [：all]

### 搜索仪表板 { #webapi_searching_dasboards } 

用户在创建仪表盘时，可以方便地
能够使用
*/dashboards/q* 资源搜索各种分析资源。该资源可让您搜索与以下对象名称属性匹配的
以下对象的名称属性：可视化、地图、用户、报告和资源、
用户、报告和资源。您可以通过 *GET*
请求进行搜索。
替换为首选搜索查询：

    /api/dashboards/q/my-query.json

例如，此查询：

    /api/dashboards/q/ma?count=6&maxCount=20&max=REPORT&max=MAP

将搜索以下内容：

* 分析对象名称包含字符串“ ma”
* 每种类型最多返回6
* 对于 REPORT 和 MAP 类型，最多可返回 20 个项目



表：仪表盘/Q 查询参数

| 查询参数 | 描述 | 类型 | 默认 |
|---|---|---|---|
| 计数 | 要返回的每种类型的项目数 | 正整数 | 6 |
| maxCount | 要返回的最大类型的项目数 | 正整数 | 25 |
| 最大 | 返回 maxCount 的类型 | 字符串 [MAP|USER|REPORT|RESOURCE|VISUALIZATION] （地图|用户|报告|资源|可视化 | 不适用 |

支持 JSON 和 XML 响应格式。 JSON 格式的响应
将包含对匹配资源的引用和数量
总共找到匹配项，并为每种类型的资源找到匹配项。它会看起来
类似于：

```json
{
  "visualizations": [{
    "name": "ANC: ANC 3 Visits Cumulative Numbers",
    "id": "arf9OiyV7df",
    "type": "LINE"
  }, {
    "name": "ANC: 1st and 2rd trends Monthly",
    "id": "jkf6OiyV7el",
    "type": "PIVOT_TABLE"
  }],
  "maps": [{
    "name": "ANC: 1st visit at facility (fixed) 2013",
    "id": "YOEGBvxjAY0"
  }, {
    "name": "ANC: 3rd visit coverage 2014 by district",
    "id": "ytkZY3ChM6J"
  }],
  "reports": [{
    "name": "ANC: 1st Visit Cumulative Chart",
    "id": "Kvg1AhYHM8Q"
  }, {
    "name": "ANC: Coverages This Year",
    "id": "qYVNH1wkZR0"
  }],
  "searchCount": 8,
  "visualizationCount": 3,
  "mapCount": 2,
  "reportCount": 2,
  "userCount": 0,
  "patientTabularReportCount": 0,
  "resourceCount": 0
}
```

### 创建，更新和删除仪表板 { #webapi_creating_updating_removing_dashboards } 

创建、更新和删除仪表板遵循标准 REST
语义。为了创建一个新的仪表板，您可以创建一个 *POST*
请求`/api/dashboards` 资源。从消费者的角度
首先创建仪表板然后添加项目可能会很方便
到它。请求有效负载支持 JSON 和 XML 格式。至
创建一个名为“我的仪表板”的仪表板，您可以在其中使用有效负载
像这样的 JSON：

    {
      “名称”：“我的仪表板”
    }

更新，例如重命名，仪表板，您可以使用 *PUT* 请求
类似的请求负载相同的 api/dashboards 资源。

要删除仪表板，您可以向特定的人发出 *DELETE* 请求
与此类似的仪表板资源：

    / api /仪表板/ vQFhmLJU5sK

### 添加，移动和删除仪表板项目和内容 { #webapi_adding_moving_removing_dashboard_items } 

为了添加仪表盘项目，用户可以使用
`/api/dashboards/<dashboard-id>/items/content` 资源，其中
<dashboard-id\> 应替换为相关的仪表板
标识符。请求必须使用 *POST* 方法。URL 语法和
参数在下表中有详细说明。



表：项目内容参数

| 查询参数 | 描述 | 选项 |
|---|---|---|
| 类型 | 仪表板项目所代表的资源类型 | 可视化 | 地图 | 报告表 | 用户 | 报告 | 资源 | 病人表格报告 | 应用程序 |
| 本我 | 仪表板项目所代表的资源的标识符 | 资源标识符 |

将可视化添加到特定仪表盘的 *POST* 请求 URL 可以如下所示，其中最后一个 id 查询参数值是图表资源标识符：

    /api/dashboards/vQFhmLJU5sK/items/content?type=visualization&id=LW0O27b7TdD

添加地图、可视化和应用程序类型的资源时，API
将创建一个新项目并添加到仪表板。添加用户、报告和资源类型的资源时
用户、报告和资源类型的资源时，API 将尝试
将资源添加到相同类型的现有仪表板项目中。如果没有
同类型的项目或同类型的项目中关联的资源少于 8 个时
则 API 将创建一个新的仪表盘项目并将资源添加到该项目中。
添加资源。

In order to move a dashboard item to a new position within the list of
items in a dashboard, a consumer can make a *POST* request to the
following resource URL, where `<dashboard-id>` should be replaced by the
identifier of the dashboard, `<item-id>` should be replaced by the
identifier of the dashboard item and `<index>` should be replaced by the
new position of the item in the dashboard, where the index is
zero-based:

    / api /仪表板/ <dashboard-id> / items / <item-id> / position / <index>

要从特定仪表板中完全删除仪表板项目
消费者可以向以下资源 URL 发出 *DELETE* 请求，其中
` <dashboard-id> ` 应替换为仪表板的标识符
和 `<item-id>` 应替换为仪表板的标识符
物品。可以通过 GET 检索仪表板项目标识符
对仪表板资源 URL 的请求。

    / api /仪表板/ <dashboard-id> / items / <item-id>

要删除仪表板项目中的特定内容资源，消费者
可以向以下资源 URL 发出 *DELETE* 请求，其中
` <content-resource-id> ` 应替换为
与仪表板项目关联的资源；例如a 的标识符
报告或用户。例如，这可用于删除单个
报告类型的仪表板项目中的报告，而不是删除
仪表板项目完全：

    / api /仪表板/ <dashboard-id> / items / <item-id> / content / <content-resource-id>

### 定义仪表板布局{ #webapi_dasboard_layout } 

您可以为每个仪表盘定义并保存布局。以下对象负责保存此设置。

    {
      "布局"：{
        "spacing"：{
          "column"：5,
          "行"：5
        },
        "列"：[{
          "index"：0,
          "span"：2
        }, {
          "index"：1,
          "span"：1
        }]
      }
    }

布局定义将应用于与给定仪表盘相关的所有仪表盘项目，并尊重间距、列、跨度等布局属性。请看下面对每个属性的简要说明。

表格布局属性

| 属性 | 描述 | 类型 |
|---|---|---|
| 设计 | 这是根对象 | 目的 |
| 株距 | 定义特定布局组件的间距。目前，它支持列和行。 | 目的 |
| 列 | 存储与列相关的特定参数（目前、索引和跨度） | 对象数组 |

## 可视化 { #webapi_visualization } 

Visualization API旨在帮助客户与图表和数据透视表/报表交互。数据可视化应用程序使用此API的端点，该应用程序允许基于客户端的定义创建，配置和管理图表和数据透视表。主要思想是使客户和用户拥有一个独特的集中式API，该API提供所有类型的图表和数据透视表以及每种可视化类型的特定参数和配置。

This API was introduced to unify both `charts` and `reportTables` APIs and entirely replace them by the `visualizations` API.

一个可视化对象由很多属性组成（有些与图表相关，有些与数据透视表相关），但负责反映对象核心信息的最重要的属性是：*"id"、"name"、"type" ”、“dataDimensionItems”、“列”、“行”和“过滤器”。*

API的根端点是`/ api / visualizations`，下表中描述了当前属性和元素的列表。



表：可视化属性

| 领域 | 描述 |
|---|---|
| 本我 | 唯一标识符。 |
| 码 | 用于识别可视化的自定义代码。 |
| 名称 | 可视化名称 |
| 类型 | 可视化的类型。有效类型包括column, stacked_column, bar, stacked_bar, line, area, pie, radar, gauge, year_over_year_line year_over_year_column, single_value, pivot_table。 |
| 标题 | 自定义标题。 |
| 副题 | 自定义字幕。 |
| 描述 | 定义可视化的自定义描述。 |
| 创建 | 创建可视化的日期/时间。 |
| 开始日期 | 筛选时使用的起始日期。 |
| 结束日期 | 筛选过程中使用的结束日期。 |
| 排序顺序 | 此可视化的排序顺序。整数值。 |
| 用户 | 代表可视化创建者的对象。 |
| 公共访问 | 设置公众访问权限。 |
| 显示密度 | 文字的显示密度。 |
| 字体大小 | 文本的字体大小。 |
| fontStyle | 自定义字体样式：可视化标题（visualizationTitle）、可视化副标题（visualizationSubtitle）、水平轴标题（horizontalAxisTitle）、垂直轴标题（verticalAxisTitle）、目标行标签（targetLineLabel）、基准行标签（baseLineLabel）、系列轴标签（seriesAxisLabel）、类别轴标签（categoryAxisLabel）、图例。 |
| 相对周期 | 代表分析查询中使用的相对时间段的对象。 |
| 图例集 | 表示图例定义的对象。 |
| 图例显示风格 | 图例的显示样式。可以是填充（FILL）或文本（TEXT）。 |
| 图例显示策略 | 图例的显示样式。可以是FIXED 或 BY_DATA_ITEM。 |
| 聚合类型 | 决定如何汇总数据透视表中的值。有效选项：SUM、AVERAGE、AVERAGE_SUM_ORG_UNIT、LAST、LAST_AVERAGE_ORG_UNIT、FIRST、FIRST_AVERAGE_ORG_UNIT、COUNT、STDDEV、VARIANCE、MIN、MAX、NONE、CUSTOM 或 DEFAULT。 |
| 回归类型 | 有效的回归类型：无、线性、多项式或 LOESS。 |
| targetLineValue | 图表目标线。接受 Double 类型。 |
| targetLineLabel | 图表目标线标签。 |
| rangeAxisLabel | 图表纵轴（y）标签/标题。 |
| 域轴标签 | 图表横轴 (x) 标签/标题。 |
| rangeAxisMaxValue | 图表轴的最大值。超出范围的值将不会显示。 |
| rangeAxisMinValue | 图表轴最小值。超出范围的值将不会显示。 |
| 范围轴步数 | 最小值和最大值之间的轴步数。 |
| 轴向十进制范围 | 坐标轴数值的小数点位数。 |
| 基线值 | 图表基线值。 |
| 基线标签 | 图表基线标签。 |
| 数字组分隔符 | 数字组分隔符。有效值为逗号、空格或无。 |
| 上限 | 为透视表设置的上限。 |
| 衡量标准 | 说明适用于该测量的标准。 |
| 堆叠值百分比 | 是否使用堆叠值。更有可能用于图形/图表。布尔值。 |
| 列间无空间 | 显示/隐藏列间空格。布尔值。 |
| 回归 | 表示可视化是否包含回归列。更有可能适用于透视/报表。布尔值。 |
| 外部访问 | 表示可视化是否以外部只读方式提供。仅在无用户登录时适用。布尔值。 |
| 用户组织单位 | 表示用户是否有组织单位。布尔值。 |
| 用户组织单位子女 | 表示用户是否有子女组织单位。布尔值。 |
| 用户组织单位大子女数 | 表示用户是否有孙子女组织单位。布尔值。 |
| 报告参数 | 用于定义与报告相关的布尔属性的对象。 |
| 行总数 | 显示（或不显示）行总数。布尔值。 |
| 总计 | 显示（或不显示）列总数。布尔值。 |
| 行次总计 | 显示（或不显示）行小计。布尔值。 |
| colSubTotals | 显示（或不显示）列的小计。布尔值。 |
| 累积值 | 表示可视化是否使用累积值。布尔值。 |
| 隐藏空列 | 表示是否隐藏无数据值的列。布尔值。 |
| 隐藏空行 | 表示是否隐藏无数据值的行。布尔值。 |
| fixColumnHeaders | 在透视表中固定（或不固定）列标题。布尔值。 |
| fixRowHeaders | 在透视表中固定（或不固定）行标题。布尔值。 |
| 仅完成 | 表示是否隐藏无数据值的列。布尔值。 |
| 跳读 | 是否四舍五入。布尔值。 |
| 显示尺寸标签 | 是否显示尺寸标注。布尔值。 |
| 隐藏标题 | 是否隐藏标题。布尔值。 |
| 隐藏副标题 | 是否隐藏字幕。布尔值。 |
| 隐藏传奇 | 显示/隐藏图例。很可能用于图表。布尔值。 |
| 显示层次 | 显示（或不显示）组织单位层次结构名称。布尔值。 |
| 显示数据 | 用于图表隐藏或不隐藏渲染模型中的数据/值。布尔值。 |
| 最后更新时间 | 表示对可视化应用最后更改的用户的对象。 |
| 最后更新 | 可视化上次更改的日期/时间。 |
| 最爱 | 将此对象标记为收藏夹的用户 ID 列表。 |
| 用户 | 已订阅此可视化的用户 ID 列表。 |
| 译文 | 可用对象翻译集，通常按地域筛选。 |
| 离群值分析 | 负责保存离群值分析相关设置的对象。内部属性 "outlierMethod "支持IQR、standard_z_score、modified_z_score。归一化方法 "目前只接受 Y_RESIDUALS_LINEAR。 |
| 系列键 | 是否显示系列键的样式选项。 |
| 传说 | 是否为图表系列应用图例颜色的选项。 |

### 检索可视化 { #webapi_visualization_retrieving_visualizations } 

To retrieve a list of all existing visualizations, in JSON format, with some basic information (including identifier, name and pagination) you can make a `GET` request to the URL below. You should see a list of all public/shared visualizations plus your private ones.

    GET /api/visualizations.json

如果要检索特定可视化的JSON定义，可以将其各自的标识符添加到URL：

    GET /api/visualizations/hQxZGXqnLS9.json

以下表示是JSON格式的响应示例（为简便起见，某些信息已被删除）。对于完整的模式，请使用`GET / api / schemas / visualization`。

```json
{
  "lastUpdated": "2020-02-06T11:57:09.678",
  "href": "http://my-domain/dhis/api/visualizations/hQxZGXqnLS9",
  "id": "hQxZGXqnLS9",
  "created": "2017-05-19T17:22:00.785",
  "name": "ANC: ANC 1st visits last 12 months cumulative values",
  "publicAccess": "rw------",
  "userOrganisationUnitChildren": false,
  "type": "LINE",
  "access": {},
  "reportingParams": {
    "parentOrganisationUnit": false,
    "reportingPeriod": false,
    "organisationUnit": false,
    "grandParentOrganisationUnit": false
  },
  "dataElementGroupSetDimensions": [],
  "attributeDimensions": [],
  "yearlySeries": [],
  "axes": [
    {
      "index": 0,
      "type": "RANGE",
      "title": {
        "textMode": "CUSTOM",
        "text": "Any Title"
      }
    }
  ],
  "filterDimensions": [
    "dx"
  ],
  "columns": [
    {
      "id": "ou"
    }
  ],
  "dataElementDimensions": [],
  "categoryDimensions": [],
  "rowDimensions": [
    "pe"
  ],
  "columnDimensions": [
    "ou"
  ],
  "dataDimensionItems": [
    {
      "dataDimensionItemType": "DATA_ELEMENT",
      "dataElement": {
        "id": "fbfJHSPpUQD"
      }
    }
  ],
  "filters": [
    {
      "id": "dx"
    }
  ],
  "rows": [
    {
      "id": "pe"
    }
  ]
}
```
通过在URL中指定要提取的字段，可以获得更定制的响应。即：

    GET /api/visualizations/hQxZGXqnLS9.json?fields=interpretations

将返回

```json
{
  "interpretations": [
    {
      "id": "Lfr8I2RPU0C"
    },
    {
      "id": "JuwgdJlJPGb"
    },
    {
      "id": "WAoU2rSpyZp"
    }
  ]
}
```

As seen, the `GET` above will return only the interpretations related to the given identifier (in this case `hQxZGXqnLS9`).

### 创建，更新和删除可视化 { #webapi_visualization_add_update_remove_visualizations } 

These operations follow the standard *REST* semantics. A new Visualization can be created through a `POST` request to the `/api/visualizations` resource with a valid JSON payload. An example of payload could be:

```json
{
  "columns": [
    {
      "dimension": "J5jldMd8OHv",
      "items": [
        {
          "name": "CHP",
          "id": "uYxK4wmcPqA",
          "displayName": "CHP",
          "displayShortName": "CHP",
          "dimensionItemType": "ORGANISATION_UNIT_GROUP"
        },
        {
          "name": "Hospital",
          "id": "tDZVQ1WtwpA",
          "displayName": "Hospital",
          "displayShortName": "Hospital",
          "dimensionItemType": "ORGANISATION_UNIT_GROUP"
        }
      ]
    }
  ],
  "rows": [
    {
      "dimension": "SooXFOUnciJ",
      "items": [
        {
          "name": "DOD",
          "id": "B0bjKC0szQX",
          "displayName": "DOD",
          "displayShortName": "DOD",
          "dimensionItemType": "CATEGORY_OPTION_GROUP"
        },
        {
          "name": "CDC",
          "id": "OK2Nr4wdfrZ",
          "displayName": "CDC",
          "displayShortName": "CDC",
          "dimensionItemType": "CATEGORY_OPTION_GROUP"
        }
      ]
    }
  ],
  "filters": [
    {
      "dimension": "ou",
      "items": [
        {
          "name": "Sierra Leone",
          "id": "ImspTQPwCqd",
          "displayName": "Sierra Leone",
          "displayShortName": "Sierra Leone",
          "dimensionItemType": "ORGANISATION_UNIT"
        },
        {
          "name": "LEVEL-1",
          "id": "LEVEL-H1KlN4QIauv",
          "displayName": "LEVEL-1"
        }
      ]
    }
  ],
  "name": "HIV Cases Monthly",
  "description": "Cases of HIV across the months",
  "category": "XY1vwCQskjX",
  "showDimensionLabels": true,
  "hideEmptyRows": true,
  "hideEmptyColumns": true,
  "skipRounding": true,
  "aggregationType": "SUM",
  "regressionType": "LINEAR",
  "type": "PIVOT_TABLE",
  "numberType": "VALUE",
  "measureCriteria": "Some criteria",
  "showHierarchy": true,
  "completedOnly": true,
  "displayDensity": "NORMAL",
  "fontSize": "NORMAL",
  "digitGroupSeparator": "SPACE",
  "legendDisplayStyle": "FILL",
  "legendDisplayStrategy": "FIXED",
  "hideEmptyRowItems": "BEFORE_FIRST_AFTER_LAST",
  "fixColumnHeaders": true,
  "fixRowHeaders": false,
  "regression": false,
  "cumulative": true,
  "sortOrder": 1,
  "topLimit": 2,
  "rowTotals": true,
  "colTotals": true,
  "hideTitle": true,
  "hideSubtitle": true,
  "hideLegend": true,
  "showData": true,
  "percentStackedValues": true,
  "noSpaceBetweenColumns": true,
  "rowSubTotals": true,
  "colSubTotals": true,
  "userOrgUnitType": "TEI_SEARCH",
  "externalAccess": false,
  "publicAccess": "--------",
  "reportingParams": {
    "reportingPeriod": true,
    "organisationUnit": true,
    "parentOrganisationUnit": true,
    "grandParentOrganisationUnit": true
  },
  "parentGraphMap": {
    "ImspTQPwCqd": ""
  },
  "access": {
    "read": true,
    "update": true,
    "externalize": true,
    "delete": false,
    "write": true,
    "manage": false
  },
  "optionalAxes": [
    {
      "dimensionalItem": "fbfJHSPpUQD",
      "axis": 1
    },
    {
      "dimensionalItem": "cYeuwXTCPkU",
      "axis": 2
    }
  ],
  "relativePeriods": {
    "thisYear": false,
    "quartersLastYear": true,
    "last52Weeks": false,
    "thisWeek": false,
    "lastMonth": false,
    "last14Days": false,
    "biMonthsThisYear": false,
    "monthsThisYear": false,
    "last2SixMonths": false,
    "yesterday": false,
    "thisQuarter": false,
    "last12Months": false,
    "last5FinancialYears": false,
    "thisSixMonth": false,
    "lastQuarter": false,
    "thisFinancialYear": false,
    "last4Weeks": false,
    "last3Months": false,
    "thisDay": false,
    "thisMonth": false,
    "last5Years": false,
    "last6BiMonths": false,
    "last4BiWeeks": false,
    "lastFinancialYear": false,
    "lastBiWeek": false,
    "weeksThisYear": false,
    "last6Months": false,
    "last3Days": false,
    "quartersThisYear": false,
    "monthsLastYear": false,
    "lastWeek": false,
    "last7Days": false,
    "thisBimonth": false,
    "lastBimonth": false,
    "lastSixMonth": false,
    "thisBiWeek": false,
    "lastYear": false,
    "last12Weeks": false,
    "last4Quarters": false
  },
  "user": {},
  "yearlySeries": [
    "THIS_YEAR"
  ],
  "userGroupAccesses": [
    {
      "access": "rwx-----",
      "userGroupUid": "ZoHNWQajIoe",
      "displayName": "Bo District M&E officers",
      "id": "ZoHNWQajIoe"
    }
  ],
  "userAccesses": [
    {
      "access": "--------",
      "displayName": "John Barnes",
      "id": "DXyJmlo9rge",
      "userUid": "DXyJmlo9rge"
    }
  ],
  "legendSet": {
    "name": "Death rate up",
    "id": "ham2eIDJ9k6",
    "legends": [
      {
        "startValue": 1,
        "endValue": 2,
        "color": "red",
        "image": "some-image"
      },
      {
        "startValue": 2,
        "endValue": 3,
        "color": "blue",
        "image": "other-image"
      }
    ]
  },
  "outlierAnalysis": {
    "enabled": true,
    "outlierMethod": "IQR",
    "thresholdFactor": 1.5,
    "normalizationMethod": "Y_RESIDUALS_LINEAR",
    "extremeLines": {
      "enabled": true,
      "value": 3.5
    }
  },
  "legend": {
    "strategy": "FIXED",
    "style": "FILL",
    "set": {
      "id": "fqs276KXCXi",
      "displayName": "ANC Coverage"
    },
    "showKey": false
  },
  "seriesKey": {
    "hidden": true,
    "label": {
      "fontStyle": {
        "textColor": "#cccddd"
      }
    }
  },
  "axes": [
    {
      "index": 0,
      "type": "RANGE",
      "label": {
        "fontStyle": {
          "textColor": "#cccddd"
        }
      },
      "title": {
        "text": "Range axis title",
        "textMode": "CUSTOM",
        "fontStyle": {
          "textColor": "#000000"
        }
      },
      "decimals": 1,
      "maxValue": 100,
      "minValue": 20,
      "steps": 5,
      "baseLine": {
        "value": 50,
        "title": {
          "text": "My baseline",
          "fontStyle": {
            "textColor": "#000000"
          }
        }
      },
      "targetLine": {
        "value": 80,
        "title": {
          "text": "My targetline",
          "fontStyle": {
            "textColor": "#cccddd"
          }
        }
      }
    },
    {
      "index": 1,
      "type": "DOMAIN",
      "label": {
        "fontStyle": {
          "textColor": "#000000"
        }
      },
      "title": {
        "text": "Domain axis title",
        "textMode": "CUSTOM",
        "fontStyle": {
          "textColor": "#cccddd"
        }
      }
    }
  ],
  "axes": [
    {
      "index": 0,
      "type": "RANGE",
      "label": {
        "fontStyle": {
          "textColor": "#cccddd"
        }
      },
      "title": {
        "text": "Range axis title",
        "fontStyle": {
          "textColor": "#000000"
        }
      },
      "decimals": 1,
      "maxValue": 100,
      "minValue": 20,
      "steps": 5,
      "baseLine": {
        "value": 50,
        "title": {
          "text": "My baseline",
          "fontStyle": {
            "textColor": "#000000"
          }
        }
      },
      "targetLine": {
        "value": 80,
        "title": {
          "text": "My targetline",
          "fontStyle": {
            "textColor": "#cccddd"
          }
        }
      }
    },
    {
      "index": 1,
      "type": "DOMAIN",
      "label": {
        "fontStyle": {
          "textColor": "#000000"
        }
      },
      "title": {
        "text": "Domain axis title",
        "fontStyle": {
          "textColor": "#cccddd"
        }
      }
    }
  ]
}
```

要更新特定的可视化，您可以向相同的 `/api/visualizations` 资源发送一个 `PUT` 请求，该资源具有类似的负载 `PLUS` 以及相应的可视化的标识符，即：

    PUT /api/visualizations/hQxZGXqnLS9

最后，要删除现有的可视化，您可以发出一个 `DELETE` 请求，指定要删除的可视化的标识符，如下所示：

    删除/ api / visualizations / hQxZGXqnLS9

## 释义 { #webapi_interpretations } 

对于 DHIS2 中与数据分析有关的资源，如可视化、地图、事件报告和事件图表，您可以撰写和共享数据解释。解释可以是对数据报告或可视化的评论、问题、观察或解释。

    / api /解释

### 阅读口译 { #webapi_reading_interpretations } 

为了阅读解释，我们将与
`/api/interpretations` 资源。使用字段的典型 GET 请求
过滤可以是这样的：

    GET /api/interpretations?fields=*,comments[id,text,user,mentions] (注释)

JSON 响应格式的输出可能如下所示（附加
为简洁起见省略了字段）：

```json
{
  "interpretations": [
    {
      "id": "XSHiFlHAhhh",
      "created": "2013-05-30T10:24:06.181+0000",
      "text": "Data looks suspicious, could be a data entry mistake.",
      "type": "MAP",
      "likes": 2,
      "user": {
        "id": "uk7diLujYif"
      },
      "reportTable": {
        "id": "LcSxnfeBxyi"
      },
      "visualization": {
        "id": "LcSxnfeBxyi"
      }
    }, {
      "id": "kr4AnZmYL43",
      "created": "2013-05-29T14:47:13.081+0000",
      "text": "Delivery rates in Bo looks high.",
      "type": "VISUALIZATION",
      "likes": 3,
      "user": {
        "id": "uk7diLujYif"
      },
      "visualization": {
        "id": "HDEDqV3yv3H"
      },
      "mentions": [
        {
          "created": "2018-06-25T10:25:54.498",
          "username": "boateng"
        }
      ],
      "comments": [
        {
          "id": "iB4Etq8yTE6",
          "text": "This report indicates a surge.",
          "user": {
            "id": "B4XIfwOcGyI"
          }
        },
        {
          "id": "iB4Etq8yTE6",
          "text": "Likely caused by heavy rainfall.",
          "user": {
            "id": "B4XIfwOcGyI"
          }
        },
        {
          "id": "SIjkdENan8p",
          "text": "Have a look at this @boateng.",
          "user": {
            "id": "xE7jOejl9FI"
          },
          "mentions": [
            {
              "created": "2018-06-25T10:03:52.316",
              "username": "boateng"
            }
          ]
        }
      ]
    }
  ]
}
```



表：解释字段

| 领域 | 描述 |
|---|---|
| 本我 | 口译标识符。 |
| 创建 | 释义创建的时间。 |
| 类型 | The type of analytical object being interpreted. Valid options: VISUALIZATION, MAP, EVENT_REPORT, EVENT_CHART, DATASET_REPORT. |
| 用户 | 与创建解释的用户的关联。 |
| 可视化 | 如果类型为 VISUALIZATION，则与可视化关联 |
| 地图 | 如果类型为 MAP，则与地图关联。 |
| 事件报告 | 事件报告的关联类型为 EVENT_REPORT。 |
| 事件图表 | 如果类型为 EVENT_CHART，则与事件图表关联。 |
| 数据集 | 如果类型为 DATASET_REPORT，则与数据集关联。 |
| 评论 | 解释的注释数组。文本字段包含实际注释。 |
| 提及 | 解释的提及数组。用户标识符列表。 |

对于所有分析对象，您可以将 */data* 附加到 URL 以检索
与资源关联的数据（相对于元数据）。作为
一个例子，通过跟随地图链接并附加 /data 可以
通过检索主题地图的 PNG（图像）表示
以下网址：

    https://play.dhis2.org/demo/api/maps/bhmHJ4ZCdCd/data

对于所有分析对象，您可以通过*提及*进行过滤。检索所有
您提到的用户的解释/评论
三个选项。您可以通过解释提及（提及
在解释中
    描述）：

    GET /api/interpretations?fields=*,comments[*]&filter=mentions.username:in:[boateng]

您可以通过解释评论提及（在任何
评论）：

    GET / api / interpretations？fields = *，评论[*]
      ＆filter = comments.mentions.username：in：[boateng]

您可以按包含提及的解释进行过滤
在解释或任何评论中（或结点）：

    GET /api/interpretations?fields=*,comments[*]&filter=mentions:in:[boateng]

### 写作解释 { #webapi_writing_interpretations } 

在编写解释时，您将提供解释文本作为
使用内容类型为“text/plain”的 POST 请求的请求正文。
URL 模式如下所示，其中 {object-type} 指的是
被解释的对象的类型，{object-id} 指的是
被解释对象的标识符。

    / api / interpretations / {object-type} / {object-id}

对象类型的有效选项为 *visualization*（可视化）*、*map*（地图）*、
*事件报告*、事件图表* 和数据集报告*。

下面列出了一些有效的解释示例。

    /api/interpretations/visualization/hQxZGXqnLS9
    /api/interpretations/map/FwLHSMCejFu
    /api/interpretations/eventReport/xJmPLGP3Cde
    /api/interpretations/eventChart/nEzXB2M9YBz
    /api/interpretations/dataSetReport/tL7eCjmDIgM

举例来说，我们将首先为标识符为 *EbRN2VIbPdV* 的可视化内容编写释义。要编写可视化解释，我们将与 `/api/interpretations/visualization/{visualizationId}` 资源交互。
解释将是请求体。在此基础上，我们可以
下面的请求：

```bash
curl -d "This visualization shows a significant ANC 1-3 dropout" -X POST
  "https://play.dhis2.org/demo/api/interpretations/visualization/EbRN2VIbPdV" -H "Content-Type:text/plain" -u admin:district
```

请注意，响应提供了一个带有值的 Location 标头
指示创建的解释的位置。这很有用
从客户的角度来看，当您想向
解释。

### 更新和删除解释 { #webapi_updating_removing_interpretations } 

要更新现有解释，您可以使用 PUT 请求，其中
解释文本是使用以下 URL 模式的请求正文，
其中 {id} 指的是解释标识符：

    / api / interpretations / {id}

基于此，我们可以使用curl来更新解释：

```bash
curl -d "This visualization shows a high dropout" -X PUT
  "https://play.dhis2.org/demo/api/interpretations/visualization/EV08iI1cJRA" -H "Content-Type:text/plain" -u admin:district
```

您可以使用与上面相同的 URL 模式使用 DELETE 请求来
删除解释。

### 创建解释注释 { #webapi_creating_interpretation_comments } 

在为解释撰写评论时，您将提供评论
text 作为使用内容类型的 POST 请求的请求正文
“文本/纯文本”。 URL 模式如下所示，其中
{interpretation-id} 指的是解释标识符。

    / api / interpretations / {interpretation-id} /评论

其次，我们将对我们在
上面的例子。通过查看解释响应，您将看到
返回一个 *Location* 标头。这个标题告诉我们的 URL
新创建的解释，从中我们可以阅读它的
标识符。此标识符是随机生成的，因此您必须
用您自己的命令替换下面命令中的那个。写评论
我们可以与`/api/interpretations/{id}/comments`进行交互
像这样的资源：

```bash
curl -d "An intervention is needed" -X POST
  "https://play.dhis2.org/demo/api/interpretations/j8sjHLkK8uY/comments"
  -H "Content-Type:text/plain" -u admin:district
```

### 更新和删除解释注释 { #webapi_updating_removing_interpretation_comments } 

要更新解释注释，您可以使用 PUT 请求，其中
评论文本是使用以下 URL 模式的请求正文：

    / api / interpretations / {interpretation-id} / comments / {comment-id}

基于此，我们可以使用curl来更新注释：

```bash
curl "https://play.dhis2.org/demo/api/interpretations/j8sjHLkK8uY/comments/idAzzhVWvh2"
  -d "I agree with that." -X PUT -H "Content-Type:text/plain" -u admin:district
```

您可以使用与上面相同的 URL 模式，使用 DELETE 请求到
删除解释注释。

### 喜欢的解释 { #webapi_liking_interpretations } 

要喜欢一个解释，你可以使用一个空的 POST 请求到
*喜欢*资源：

    POST / api / interpretations / {id} / like

将为当前经过身份验证的用户添加一个赞。一个用户可以
只喜欢解释一次。

要删除解释的赞，您可以使用 DELETE 请求
与类似操作相同的资源。

可以通过查看解释的类似状态来查看
常规 Web API 表示：

    GET /api/interpretations/{id}

在 *likes* 字段中可以找到喜欢的信息，它代表
喜欢的数量，以及 *likedBy* 数组，它枚举了喜欢的用户
喜欢这个解释。

```json
{
  "id": "XSHiFlHAhhh",
  "text": "Data looks suspicious, could be a data entry mistake.",
  "type": "VISUALIZATION",
  "likes": 2,
  "likedBy": [
    {
      "id": "k7Hg12fJ2f1"
    },
    {
      "id": "gYhf26fFkjFS"
    }
  ]
}
```
## SQL视图 { #webapi_sql_views } 

SQL 视图资源允许您创建和检索结果集
SQL 视图。 SQL 视图可以直接针对
数据库并通过 Web API 资源呈现结果集。

    / api / sqlViews

SQL 视图对于创建可能更容易的数据视图很有用
用SQL构造比较结合Web的多个对象
应用程序接口。举个例子，假设我们被要求提供一个视图
所有组织单位及其名称、父名称、组织单位
级别和名称，以及数据库中列出的坐标。风景
可能看起来像这样：

```sql
SELECT ou.name as orgunit, par.name as parent, ou.coordinates, ous.level, oul.name from organisationunit ou
INNER JOIN _orgunitstructure ous ON ou.organisationunitid = ous.organisationunitid
INNER JOIN organisationunit par ON ou.parentid = par.organisationunitid
INNER JOIN orgunitlevel oul ON ous.level = oul.level
WHERE ou.coordinates is not null
ORDER BY oul.level, par.name, ou.name
```

我们将使用 *curl* 首先在 DHIS2 服务器上执行视图。这
本质上是一个物化过程，并确保我们拥有
检索时可通过 SQL 视图获得的最新数据
从服务器。您可以先从 SQL 视图中查找
api/sqlViews 资源，然后使用以下命令进行 POST：

```bash
curl "https://play.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/execute" -X POST -u admin:district
```

该过程的下一步是检索数据。基本
URL的结构如下

    http：// {server} / api / sqlViews / {id} / data（.csv）

`{server}` 参数应替换为您自己的服务器。这
URL `/api/sqlViews/` 的下一部分应该附加
特定的 SQL 视图标识符。为 XML 数据附加 `data` 或
`data.csv` 用于逗号分隔值。支持响应格式是
json、xml、csv、xls、html 和 html+css。例如，以下
命令将为上面定义的 SQL 视图检索 XML 数据。

```bash
curl "https://play.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/data.csv" -u admin:district
```

SQL视图有三种类型：

  - *SQL 视图：* 标准 SQL 视图。

  - *物化的SQL视图：*物化的SQL视图，意思是
    写入磁盘。需要更新以反映变化
    底层表。支持过滤结果集的标准。

  - *SQL 查询：* 普通 SQL 查询。支持内联变量
    自定义查询。

### 标准 { #webapi_sql_view_criteria } 

您可以通过以下方式对结果集中的列进行简单过滤
使用列名将 *criteria* 查询参数附加到 URL
并过滤由列分隔的值作为参数值，在
以下格式：

    / api / sqlViews / {id} / data？criteria = col1：value1＆criteria = col2：value2

举个例子，过滤上面设置的SQL视图结果只返回
在第 4 级的组织单位，您可以使用以下内容
    网址：

    https://play.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/data.csv?criteria=level:4

### 变数 { #webapi_sql_view_variables } 

SQL 视图支持变量替换。变量替换只是
可用于 *query* 类型的 SQL 视图，这意味着 SQL 视图不是
在数据库中创建，但只是作为常规 SQL 查询执行。
变量可以直接插入到 SQL 查询中，并且必须在
这种格式：

    $ {variable-key}

例如，检索给定的所有数据元素的 SQL 查询
通过变量定义值类型的值类型可以看
像这样：

    从dataelement中选择*，其中valuetype ='$ {valueType}';

然后可以在请求时将这些变量作为 URL 的一部分提供
通过 *sqlViews* Web API 资源。可以提供变量
以下格式：

    / api / sqlViews / {id} / data？var = key1：value1＆var = key2：value2

与上面的示例相对应的示例查询如下所示：

    /api/sqlViews/dI68mLkP1wN/data.json?var=valueType:int

*valueType* 变量将替换为 *int* 值，并且
查询将返回具有 int 值类型的数据元素。

变量参数必须仅包含字母数字字符。这
变量必须包含字母数字、破折号、下划线和空格
仅字符。

*query* 类型的 SQL 视图还支持两个系统定义的变量，这些变量允许查询访问有关执行视图的用户的信息：

| 变量 | 手段 |
| -------- | ----- |
| ${_current_user_id} | 用户的数据库ID |
| ${_current_username} | 用户的用户名 |

这些变量的值不能作为URL的一部分提供。它们始终充满有关用户的信息。

例如，以下 *query* 类型的 SQL 视图显示分配给用户的所有组织单位：

```sql
    select ou.path, ou.name
    from organisationunit ou_user
    join organisationunit ou on ou.path like ou_user.path || '%'
    join usermembership um on um.organisationunitid = ou_user.organisationunitid
    where um.userinfoid = ${_current_user_id}
    order by ou.path
```

### 筛选 { #webapi_sql_view_filtering } 

SQL视图api支持数据过滤，相当于[元数据对象
过滤器](#webapi_metadata_object_filter)。过滤器的完整列表
运算符，您可以查看 [元数据对象
过滤器](#webapi_metadata_object_filter)。

要使用过滤器，只需在请求末尾添加它们作为参数
您的 SQL 视图的 url，例如
    这：

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_level:eq:2&filter=orgunit_name:ilike:bo

此请求将返回一个结果，其中包括在
名称且组织单位级别为 2。

以下示例将返回所有带有 `orgunit_level` 2 或
4：

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_level:in:[2,4]

最后，返回所有不以开头的组织单位的示例
“博”

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_name:!like:Bo


## 数据项 { #webapi_data_items } 

This endpoint allows the user to query data related to a few different dimensional items. These items are: `INDICATOR`, `DATA_ELEMENT`, `DATA_SET`, `PROGRAM_INDICATOR`, `PROGRAM_DATA_ELEMENT`, `PROGRAM_ATTRIBUTE`. The endpoint supports only `GET` requests and, as other endpoints, can return responses in JSON or XML format.

该URL是`/ api / dataItems`，并且可以想象，它能够在同一`GET`请求中通过同一端点检索不同的对象。因此，某些可用的可查询属性将根据要查询的维项目而有所不同。

为了理解上面的陈述，让我们看一下以下请求示例：

1)`GET /api/dataItems?filter=dimensionItemType:eq:DATA_ELEMENT&filter=valueType:eq:TEXT`
在这个例子中，项目类型`DATA_ELEMENT` 有一个`valueType` 属性，可以在查询中使用。

2) `GET /api/dataItems?pageSize=50&order=displayName:asc&filter=dimensionItemType:eq:PROGRAM_INDICATOR&filter=displayName:ilike:someName&filter=programId:eq:WSGAb5XwJ3Y`

Here, the `PROGRAM_INDICATOR` allows filtering by `programId`.

因此，根据示例`1)`和`2)`，如果您尝试用`programId`过滤`DATA_ELEMENT`或用`valueType`过滤`PROGRAM_INDICATOR`，应该不会得到任何结果。
换句话说，只有当相应数据项的属性实际存在时，才会应用过滤器。

另一个需要强调的重要方面是，该端点与其他现有端点（如[元数据对象过滤器](#webapi_metadata_object_filter)）并不遵循相同的查询标准。因此，它支持的功能和查询范围较小。
其主要原因是需要查询具有不同关系的多个不同项目，而现有的过滤组件（其他端点使用的）无法做到这一点。

### 可能的终点反应 { #webapi_data_items_possible_responses } 

基于`GET` 请求/查询，可能有几种不同的响应。下面我们总结了每种可能性。

#### 找到结果（HTTP 状态代码 200）{ #results-found-http-status-code-200 } 

```
{
  "pager": {
    "page": 1,
    "pageCount": 27,
    "total": 1339,
    "pageSize": 50,
    "nextPage": "https://play.dhis2.org/dev/api/36/dataItems?page=2&filter=displayName:ilike:a&filter=id:eq:nomatch&rootJunction=OR&displayName:asc=&paging=true"
  },
  "dataItems": [
    {
      "simplifiedValueType": "TEXT",
      "displayName": "TB program Gender",
      "displayShortName": "TB prog. Gen.",
      "valueType": "TEXT",
      "name": "TB program Gender",
      "shortName": ""TB prog. Gen.",
      "id": "ur1Edk5Oe2n.cejWyOfXge6",
      "programId": "ur1Edk5Oe2n",
      "dimensionItemType": "PROGRAM_ATTRIBUTE"
    },
    ...
  ]
}
```

#### 未找到结果（HTTP 状态代码 200）{ #results-not-found-http-status-code-200 } 

```
{
  "pager": {
    "page": 1,
    "pageCount": 1,
    "total": 0,
    "pageSize": 50
  },
  "dataItems": []
}
```

#### 无效的查询（HTTP状态码409） { #invalid-query-http-status-code-409 } 

```
{
  “ httpStatus”：“冲突”，
  “ httpStatusCode”：409，
  “ status”：“ ERROR”，
  “ message”：“无法解析过滤器`dimensionItemType`上的元素`INVALID_TYPE`。可用的值为：[INDICATOR，DATA_ELEMENT，DATA_ELEMENT_OPERAND，DATA_SET，PROGRAM_INDICATOR，PROGRAM_DATA_ELEMENT，PROGRAM_ATTRIBUTE]”
  “错误代码”：“ E2016”
}
```

#### 未处理的错误（HTTP状态码500） { #unhandled-error-http-status-code-500 } 

```
{
  “ httpStatus”：“内部服务器错误”，
  “ httpStatusCode”：500，
  “状态”：“错误”
}
```

### 分页 { #webapi_data_items_pagination } 

此端点还支持分页作为默认选项。如果需要，您可以通过向 `GET` 请求添加 `paging=false` 来禁用分页。
即：`/api/dataItems?filter=dimensionItemType:in:[INDICATOR]&paging=false`。

这是启用分页时的有效负载示例。请记住，分页是默认选项，不需要显式设置。

```
{
  "pager": {
    "page": 1,
    "pageCount": 20,
    "total": 969,
    "pageSize": 50,
    "nextPage": "https://play.dhis2.org/dev/api/dataItems?page=2&filter=dimensionItemType:in:[INDICATOR]"
  },
  "dataItems": [...]
}
```

> **Note**
>
> For elements where there is an associated Program, the program name should also be returned as part of the element name (as a prefix). The only exception is `Program Indicators`. We will not prefix the element name in this case, in order to keep the same behavior as existing endpoints.
>
> The /dataItems endpoint will bring only data items that are defined as aggregatable type. The current list of valid aggregatable types is:
`TEXT, LONG_TEXT`, `LETTER`, `BOOLEAN`, `TRUE_ONLY`, `NUMBER`, `UNIT_INTERVAL`, `PERCENTAGE`, `INTEGER`, `INTEGER_POSITIVE`, `INTEGER_NEGATIVE`, `INTEGER_ZERO_OR_POSITIVE`, `COORDINATE`.
>
> Even though the response returns several different attributes, the filtering can only be applied to specific ones: `displayName`, `name`, `valueType`, `id`, `dimensionItemType`, `programId`.
>
> The `order` will be considered invalid if it is set on top of `name` (ie.: order=*name:asc*) and a `filter` is set to `displayName` (ie.: filter=*displayName:ilike:aName*), and vice-versa.

### 响应属性 { #webapi_data_items_response_attributes } 

现在，我们已经了解了此端点的主要功能和用法，让我们看一下响应中返回的属性列表。



表：数据项属性

| 领域 | 描述 |
|---|---|
| 本我 | 唯一标识符。 |
| 码 | 用于标识维度项目的自定义代码。 |
| 名称 | 物品的名称。 |
| 显示名称 | 定义的显示名称。 |
| 简称 | 项目的简称。 |
| 显示短名 | 已定义的显示短名。 |
| dimensionItemType | The dimension type. Possible types: INDICATOR, DATA_ELEMENT, REPORTING_RATE, PROGRAM_INDICATOR, PROGRAM_DATA_ELEMENT, PROGRAM_ATTRIBUTE. |
| valueType | The item value type (more specific definition). Possitble types: TEXT, LONG_TEXT, LETTER, BOOLEAN, TRUE_ONLY, UNIT_INTERVAL, PERCENTAGE, INTEGER, INTEGER_POSITIVE, INTEGER_NEGATIVE, INTEGER_ZERO_OR_POSITIVE, COORDINATE |
| 简化值类型 | The genereal representation of a value type. Valid values: NUMBER, BOOLEAN, DATE, FILE_RESOURCE, COORDINATE, TEXT |
| 程序Id | 相关的程序 ID。 |

## 查看分析性资源表示 { #webapi_viewing_analytical_resource_representations } 

DHIS2 has several resources for data analysis. These resources include
*maps*, *visualizations*, *reports* and *documents*. By visiting these resources you will retrieve information about the resource. For instance, by navigating to `/api/visualizations/R0DVGvXDUNP` the response will contain the name, last date of modification and so on for the chart. To retrieve the analytical representation, for instance, a PNG representation of the visualization, you can append */data* to all these resources. For instance, by visiting `/api/visualizations/R0DVGvXDUNP/data` the system will return a PNG image of the visualization.



表格分析资源

| 资源 | 描述 | 数据 URL | 资源表述 |
|---|---|---|---|
| 事件图表 | 活动图 | /api/eventCharts/<identifier\>/data | png |
| 地图 | 地图 | /api/maps/<identifier\>/data | png |
| 可视化 | 透视表和图表 | /api/visualizations/<identifier\>/data | json | jsonp | html | xml | pdf | xls | csv | png |
| 报告 | 标准报告 | /api/reports/<identifier\>/data | pdf | xls | html |
| 文件 | 资源资源 | /api/documents/<identifier\>/data | <follows document\> |

解析表示的数据内容可以通过以下方式修改
提供 *date* 查询参数。这就要求分析
为期间维度的相对期间设置资源。



表格数据查询参数

| 查询参数 | 值 | 描述 |
|---|---|---|
| 日期 | 日期（yyyy-MM-dd 格式 | 报告中相对时期的依据（需要相对时期） |



表格：png / 图像类型（可视化、地图）的查询参数

| 查询参数 | 描述 |
|---|---|
| 宽度 | 图像宽度（像素 |
| 高度 | 图像高度（像素 |

用于检索各种分析的有效 URL 的一些示例
代表如下。

    /api/visualization/R0DVGvXDUNP/data
    /api/visualization/R0DVGvXDUNP/data?date=2013-06-01

    /api/visualization/jIISuEWxmoI/data.html
    /api/visualization/jIISuEWxmoI/data.html?date=2013-01-01
    /api/visualization/FPmvWs7bn2P/data.xls
    /api/visualization/FPmvWs7bn2P/data.pdf

    /api/maps/DHE98Gsynpr/data
    /api/maps/DHE98Gsynpr/data?date=2013-07-01

    /api/reports/OeJsA6K1Otx/data.pdf
    /api/reports/OeJsA6K1Otx/data.pdf?date=2014-01-01

## 外挂程式 { #webapi_plugins } 

DHIS2 带有插件，使您能够将实时数据直接嵌入到
您的门户网站或网站。目前，存在图表、地图插件
和数据透视表。

请注意，本节中的所有代码示例均适用于
仅用于演示目的。它们不应该按原样使用
生产系统。为简单起见，凭据
(admin/district) 已嵌入到脚本中。在真实场景中，
您永远不应该在 javascript 中公开凭据，因为它会打开一个
应用程序的漏洞。此外，您将创建一个用户
使用更多的最小权限而不是使用超级用户
为您的门户获取资源。

可以通过使用反向来解决公开凭据
nginx 或 apache2 等代理。代理可以配置为注入
仅您希望的端点所需的授权标头
公开。有一些文档可以帮助您入门
实施者手册中描述 [反向
代理](https://docs.dhis2.org/master/en/implementer/html/install_reverse_proxy_configuration.html#install_making_resources_available_with_nginx)
配置。

### 使用数据透视表插件嵌入数据透视表 { #webapi_pivot_table_plugin } 

在这个例子中，我们将看到如何嵌入好看的、轻量级的
带有从 DHIS2 后端提供到 Web 的数据的 html 数据透视表
页。为此，我们将使用数据透视表插件。这
插件是用 Javascript 编写的，仅依赖于 jQuery 库。
可以在以下位置找到完整的工作示例
 <http://play.dhis2.org/portal/table.html> 。在网络中打开页面
浏览器并查看源代码以了解它是如何设置的。

我们首先看看完整的 html 文件会是什么样子
喜欢。此设置在我们的网页中放置了两个表。第一个是
引用现有表。第二个是内联配置的。

```html
<!DOCTYPE html>
<html>
<head>
  <script src="https://dhis2-cdn.org/v227/plugin/jquery-2.2.4.min.js"></script>
  <script src="https://dhis2-cdn.org/v227/plugin/reporttable.js"></script>

  <script>
    reportTablePlugin.url = "https://play.dhis2.org/demo";
    reportTablePlugin.username = "admin";
    reportTablePlugin.password = "district";
    reportTablePlugin.loadingIndicator = true;

    // Referring to an existing table through the id parameter, render to "report1" div

    var r1 = { el: "report1", id: "R0DVGvXDUNP" };

    // Table configuration, render to "report2" div

    var r2 = {
      el: "report2",
      columns: [
        {dimension: "dx", items: [{id: "YtbsuPPo010"}, {id: "l6byfWFUGaP"}]}
      ],
      rows: [
        {dimension: "pe", items: [{id: "LAST_12_MONTHS"}]}
      ],
      filters: [
        {dimension: "ou", items: [{id: "USER_ORGUNIT"}]}
      ],

      // All following properties are optional
      title: "My custom title",
      showColTotals: false,
      showRowTotals: false,
      showColSubTotals: false,
      showRowSubTotals: false,
      showDimensionLabels: false,
      hideEmptyRows: true,
      skipRounding: true,
      aggregationType: "AVERAGE",
      showHierarchy: true,
      completedOnly: true,
      displayDensity: "COMFORTABLE",
      fontSize: "SMALL",
      digitGroupSeparator: "COMMA",
      legendSet: {id: "fqs276KXCXi"}
    };

    reportTablePlugin.load([r1, r2]);
  </script>
</head>

<body>
  <div id="report1"></div>
  <div id="report2"></div>
</body>
</html>
```

HTML 文档的标题部分包含两个文件。这
第一个文件是 jQuery JavaScript 库（我们使用 DHIS2 内容
在这种情况下，交付网络）。第二个文件是数据透视表
插入。确保路径指向您的 DHIS2 服务器
安装。

现在让我们看看数据透视表的各种选项。一
属性是必需的：*el*（请参考下表）。现在，如果
你想参考已经在 DHIS2 中制作的预定义表格
足以提供额外的 *id* 参数。如果你想要
要动态配置数据透视表，您应该省略 id 参数
并在 *columns* 数组、*rows* 数组和
可选的 *filters* 数组代替。

数据维度被定义为具有称为文本属性的对象
*尺寸*。此属性接受以下值：*dx*
（指标、数据元素、数据元素操作数、数据集、事件数据
项目和计划指示符）、*pe*（句点）、*ou*（组织单位）或
任何组织单元组集或数据元素组集的 id（可以
可以在 web api 中找到）。数据维度也有一个数组属性
称为 *items*，它接受具有 *id* 属性的对象。

总而言之，如果你想拥有例如“ANC 1 覆盖范围”、“ANC 2 覆盖范围”
和表格列上的“ANC 3 Coverage”，您可以
以下*列*配置：

```json
columns: [{
  dimension: "dx",
  items: [
    {id: "Uvn6LCg7dVU"}, // the id of ANC 1 Coverage
    {id: "OdiHJayrsKo"}, // the id of ANC 2 Coverage
    {id: "sB79w2hiLp8"}  // the id of ANC 3 Coverage
  ]
}]
```



表格透视表插件配置

| 参数 | 类型 | 需要 | 选项（默认为默认） | 描述 |
|---|---|---|---|---|
| 网址 | 字符串 | 是的 || DHIS2 服务器的基本 URL |
| 用户名 | 字符串 | 是（如果跨域） || 用于在服务器运行于不同网域时进行身份验证 |
| 暗号 | 字符串 | 是（如果跨域） || 用于在服务器运行于不同网域时进行身份验证 |
| 加载指示器 | 布尔 | 不 || 是否在表格出现前显示加载指示器 |



表格透视表配置

| 参数 | 类型 | 需要 | 选项（默认为默认） | 描述 |
|---|---|---|---|---|
| el | 字符串 | 是的 || 用于在网页中显示表格的 HTML 元素的标识符 |
| 本我 | 字符串 | 不 || DHIS2 中预定义表格（收藏夹）的标识符 |
| 列 | 矩阵 | 是（如果未提供身份证） || 作为列包含在表格中的数据维度 |
| 行数 | 矩阵 | 是（如果未提供身份证） || 在表格中作为行包含的数据维度 |
| 过滤 | 矩阵 | 不 || 作为筛选器包含在表格中的数据维度 |
| 标题 | 字符串 | 不 || 在表格上方显示自定义标题 |
| showColTotals | 布尔 | 不 | true &#124; false | 是否显示列的总数 |
| 显示行总数 | 布尔 | 不 | true &#124; false | 是否显示各行的总数 |
| showColSubTotals | 布尔 | 不 | true &#124; false | 是否显示列的小计 |
| 显示行小计 | 布尔 | 不 | true &#124; false | 是否显示行的小计 |
| 显示尺寸标签 | 布尔 | 不 | true &#124; false | 是否在表格左上角显示标注名称 |
| 隐藏空行 | 布尔 | 不 | 假 | 真 | 是否隐藏无数据的行 |
| 跳读 | 布尔 | 不 | 假 | 真 | 是否跳过数据值的四舍五入 |
| 仅完成 | 布尔 | 不 | 假 | 真 | 是否只显示已完成的事件 |
| 显示层次 | 布尔 | 不 | 假 | 真 | 是否用所有辅助人员的姓名扩展组织单位名称 |
| 聚合类型 | 字符串 | 不 | "总和"|"平均值"|"Average_sum_org_unit"|"最后值"|"last_average_org_unit"|"计数"|"stddev"|"方差"|"最小值"|"最大值" | 覆盖数据元素的默认聚合类型 |
| 显示密度 | 字符串 | 不 | "正常" | "舒适" | "紧凑" | 表格单元格内的空间大小 |
| 字体大小 | 字符串 | 不 | "正常" | "大" | "小" | 表格字体大小 |
| 数字组分隔符 | 字符串 | 不 | "空格" | "逗号" | "无" | 数值的格式： 1 000 | 1,000 | 1000 |
| 图例集 | 反对 | 不 || 根据图例为表格中的数值着色 |
| 用户机构单位 | 字符串/数组 | 不 || 组织单位标识符，覆盖与当前用户相关的组织单位，单个或数组 |
| 相对周期日期 | 字符串 | 不 || 日期标识符，例如："2016-01-01"。覆盖相对时间段的开始日期 |

### 使用Visualizer图表插件嵌入图表 { #webapi_chart_plugin } 

在这个例子中，我们将看到如何嵌入好看的 Highcharts
图表 (<http://www.highcharts.com>) 数据来自 DHIS2
后端变成网页。为此，我们将使用 DHIS2
可视化插件。该插件是用 JavaScript 编写的，依赖于
jQuery 库。可以在以下位置找到完整的工作示例
 <http://play.dhis2.org/portal/chart.html> 。在网络中打开页面
浏览器并查看源代码以了解它是如何设置的。

我们首先看看完整的 html 文件会是什么样子
喜欢。此设置在我们的网页上放置了两个图表。第一个是
参考现有图表。第二个是内联配置的。

```html
<!DOCTYPE html>
<html>
<head>
  <script src="https://dhis2-cdn.org/v227/plugin/jquery-2.2.4.min.js"></script>
  <script src="https://dhis2-cdn.org/v227/plugin/chart.js"></script>

  <script>
    chartPlugin.url = "https://play.dhis2.org/demo";
    chartPlugin.username = "admin";
    chartPlugin.password = "district";
    chartPlugin.loadingIndicator = true;

    // Referring to an existing chart through the id parameter, render to "report1" div

    var r1 = { el: "report1", id: "R0DVGvXDUNP" };

    // Chart configuration, render to "report2" div

    var r2 = {
      el: "report2",
      columns: [
        {dimension: "dx", items: [{id: "YtbsuPPo010"}, {id: "l6byfWFUGaP"}]}
      ],
      rows: [
        {dimension: "pe", items: [{id: "LAST_12_MONTHS"}]}
      ],
      filters: [
        {dimension: "ou", items: [{id: "USER_ORGUNIT"}]}
      ],

      // All following properties are optional
      title: "Custom title",
      type: "line",
      showValues: false,
      hideEmptyRows: true,
      regressionType: "LINEAR",
      completedOnly: true,
      targetLineValue: 100,
      targetLineTitle: "My target line title",
      baseLineValue: 20,
      baseLineTitle: "My base line title",
      aggregationType: "AVERAGE",
      rangeAxisMaxValue: 100,
      rangeAxisMinValue: 20,
      rangeAxisSteps: 5,
      rangeAxisDecimals: 2,
      rangeAxisTitle: "My range axis title",
      domainAxisTitle: "My domain axis title",
      hideLegend: true
    };

    // Render the charts

    chartPlugin.load(r1, r2);
  </script>
</head>

<body>
  <div id="report1"></div>
  <div id="report2"></div>
</body>
</html>
```

HTML 文档的标题部分包含两个文件。这
第一个文件是 jQuery JavaScript 库（我们使用 DHIS2 内容
在这种情况下，交付网络）。第二个文件是 Visualizer 图表
插入。确保路径指向您的 DHIS2 服务器
安装。

现在让我们看看图表的各种选项。一
属性是必需的：*el*（请参考下表）。现在，如果
您想参考 DHIS2 中已经制作的预定义图表
足以提供额外的 *id* 参数。如果你想要
要动态配置图表，您应该省略 id 参数和
在 *columns* 数组、*rows* 数组和
可选的 *filters* 数组代替。

数据维度被定义为具有称为文本属性的对象
*尺寸*。此属性接受以下值：*dx*
（指标、数据元素、数据元素操作数、数据集、事件数据
项目和计划指示符）、*pe*（句点）、*ou*（组织单位）或
任何组织单元组集或数据元素组集的 id（可以
可以在 web api 中找到）。数据维度也有一个数组属性
称为 *items*，它接受具有 *id* 属性的对象。

总而言之，如果你想拥有例如“ANC 1 覆盖范围”、“ANC 2 覆盖范围”
和图表列上的“ANC 3 Coverage”，您可以
以下*列*配置：

```json
columns: [{
  dimension: "dx",
  items: [
    {id: "Uvn6LCg7dVU"}, // the id of ANC 1 Coverage
    {id: "OdiHJayrsKo"}, // the id of ANC 2 Coverage
    {id: "sB79w2hiLp8"}  // the id of ANC 3 Coverage
  ]
}]
```



表格图表插件配置

| 参数 | 类型 | 需要 | 选项（默认为默认） | 描述 |
|---|---|---|---|---|
| 网址 | 字符串 | 是的 || DHIS2 服务器的基本 URL |
| 用户名 | 字符串 | 是（如果跨域） || 用于在服务器运行于不同网域时进行身份验证 |
| 暗号 | 字符串 | 是（如果跨域） || 用于在服务器运行于不同网域时进行身份验证 |
| 加载指示器 | 布尔 | 不 || 是否在图表显示前显示加载指标 |



表：图表配置

| 参数 | 类型 | 需要 | 选项（默认为默认） | 描述 |
|---|---|---|---|---|
| el | 字符串 | 是的 || 用于在网页中显示图表的 HTML 元素的标识符 |
| 本我 | 字符串 | 不 || DHIS 中预定义图表（收藏夹）的标识符 |
| 类型 | 字符串 | 不 | column | stackedcolumn | bar | stackedbar | line | area | pie | radar | gauge | 图表类型 |
| 列 | 矩阵 | 是（如果未提供身份证） || 图表中作为系列包含的数据维度 |
| 行数 | 矩阵 | 是（如果未提供身份证） || 图表中应包含的数据维度类别 |
| 过滤 | 矩阵 | 不 || 将数据维度作为筛选器包含在图表中 |
| 标题 | 字符串 | 不 || 在图表上方显示自定义标题 |
| showValues | 布尔 | 不 | 假 | 真 | 是否在图表上显示数据值 |
| 隐藏空行 | 布尔 | 不 | 假 | 真 | 是否隐藏空类别 |
| 仅完成 | 布尔 | 不 | 假 | 真 | 是否只显示已完成的事件 |
| 回归类型 | 字符串 | 不 | "无" | "线性" | 显示趋势线 |
| targetLineValue | 编号 | 不 || 显示具有该值的目标行 |
| targetLineTitle | 字符串 | 不 || 在目标行上显示标题（没有目标行值时不适用） |
| 基线值 | 编号 | 不 || 显示带有该值的基线 |
| 基线标题 | 字符串 | 不 || 在基线上显示标题（没有基线值时不适用） |
| rangeAxisTitle | 编号 | 不 || 沿量程轴显示的标题 |
| rangeAxisMaxValue | 编号 | 不 || 显示范围轴的最大值 |
| rangeAxisMinValue | 编号 | 不 || 显示范围轴的最小值 |
| 范围轴步数 | 编号 | 不 || 显示范围轴的步数 |
| 轴向十进制范围 | 编号 | 不 || 显示范围轴的小数位数 |
| 域轴标题 | 编号 | 不 || 沿域轴显示的标题 |
| 聚合类型 | 字符串 | 不 | "总和"|"平均值"|"Average_sum_org_unit"|"最后值"|"last_average_org_unit"|"计数"|"stddev"|"方差"|"最小值"|"最大值" | 覆盖数据元素的默认聚合类型 |
| 隐藏传奇 | 布尔 | 不 | 假 | 真 | 是否隐藏系列图例 |
| 隐藏标题 | 布尔 | 不 | 假 | 真 | 是否隐藏图表标题 |
| 用户机构单位 | 字符串/数组 | 不 || 组织单位标识符，覆盖与当前用户相关的组织单位，单个或数组 |
| 相对周期日期 | 字符串 | 不 || 日期标识符，例如："2016-01-01"。覆盖相对时间段的开始日期 |

### 使用GIS地图插件嵌入地图 { #webapi_map_plugin } 

在这个例子中，我们将看到如何将地图与来自
DHIS2 后端转换成网页。为此，我们将使用 GIS
地图插件。插件是用 JavaScript 编写的，依赖于 Ext
仅限 JS 库。可以在以下位置找到完整的工作示例
 <http://play.dhis2.org/portal/map.html> 。在网络浏览器中打开页面
并查看源代码以了解它是如何设置的。

我们首先看看完整的 html 文件会是什么样子
喜欢。此设置在我们的网页上放置了两张地图。第一个是
参考现有地图。第二个是内联配置的。

```html
<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" type="text/css" href="http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css" />
  <script src="http://dhis2-cdn.org/v215/ext/ext-all.js"></script>
  <script src="https://maps.google.com/maps/api/js?sensor=false"></script>
  <script src="http://dhis2-cdn.org/v215/openlayers/OpenLayers.js"></script>
  <script src="http://dhis2-cdn.org/v215/plugin/map.js"></script>

  <script>
    var base = "https://play.dhis2.org/demo";

    // Login - if OK, call the setLinks function

    Ext.onReady( function() {
      Ext.Ajax.request({
        url: base + "dhis-web-commons-security/login.action",
        method: "POST",
        params: { j_username: "portal", j_password: "Portal123" },
        success: setLinks
      });
    });

    function setLinks() {
      DHIS.getMap({ url: base, el: "map1", id: "ytkZY3ChM6J" });

      DHIS.getMap({
        url: base,
        el: "map2",
        mapViews: [{
          columns: [{dimension: "in", items: [{id: "Uvn6LCg7dVU"}]}], // data
          rows: [{dimension: "ou", items: [{id: "LEVEL-3"}, {id: "ImspTQPwCqd"}]}], // organisation units,
          filters: [{dimension: "pe", items: [{id: "LAST_3_MONTHS"}]}], // period
          // All following options are optional
          classes: 7,
          colorLow: "02079c",
          colorHigh: "e5ecff",
          opacity: 0.9,
          legendSet: {id: "fqs276KXCXi"}
        }]
      });
    }
  </script>
</head>

<body>
  <div id="map1"></div>
  <div id="map2"></div>
</body>
</html>
```

四个文件和谷歌地图包含在标题部分
HTML 文档。前两个文件是 Ext JS JavaScript 库（我们
在这种情况下使用 DHIS2 内容交付网络）及其样式表。
第三个文件是 OpenLayers JavaScript 映射框架
( <http://openlayers.org> ) 最后我们包含了 GIS 地图插件。
确保路径指向您的 DHIS2 服务器
    安装。

     <link rel="stylesheet" type="text/css" href="http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css" />
     <script src="http://dhis2-cdn.org/v215/ext/ext-all.js"> </script>
     <script src="https://maps.google.com/maps/api/js?sensor=false"> </script>
     <script src="http://dhis2-cdn.org/v215/openlayers/OpenLayers.js"> </script>
     <script src="http://dhis2-cdn.org/v215/plugin/map.js"> </script>

为了向 DHIS2 服务器进行身份验证，我们使用与
上一节。在 HTML 文档的标题中，我们包含
在脚本元素中跟随 Javascript。 *setLinks* 方法将
稍后实施。确保 *base* 变量指向您的
DHIS2 安装。

    Ext.onReady（function（）{
      Ext.Ajax.request（{
        网址：基本+“ dhis-web-commons-security / login.action”，
        方法：“ POST”，
        参数：{j_username：“门户”，j_password：“ Portal123”}，
        成功：setLinks
      }）;
    }）;

现在让我们看看 GIS 插件的各种选项。二
属性是必需的：*el* 和 *url*（请参考表格
以下）。现在，如果您想参考已经在
在 DHIS2 GIS 中，提供额外的 *id* 参数就足够了。
如果您想动态配置地图，则应省略 id
参数并提供 *mapViews*（图层）。他们应该是
在 *columns* 数组、*rows* 数组中配置数据维度
和可选的 *filters* 数组代替。

数据维度被定义为具有称为文本属性的对象
*尺寸*。此属性接受以下值：*in*
（指标）、*de*（数据元素）、*ds*（数据集）、*dc*（数据元素）
操作数）、*pe*（句点）、*ou*（组织单位）或任何
组织单元组集或数据元素组集（可以在
网络 API）。数据维度还有一个名为的数组属性
*items* 接受具有 *id* 属性的对象。

总而言之，如果你想有一个层，例如“ANC 1 覆盖范围”在
您的地图可以进行以下*列*配置：

```json
columns: [{
  dimension: "in", // could be "in", "de", "ds", "dc", "pe", "ou" or any dimension id
  items: [{id: "Uvn6LCg7dVU"}], // the id of ANC 1 Coverage
}]
```



表：GIS 地图插件配置

| 参数 | 类型 | 需要 | 选项（默认为默认） | 描述 |
|---|---|---|---|---|
| el | 字符串 | 是的 || 用于在网页中显示地图的 HTML 元素的标识符 |
| 网址 | 字符串 | 是的 || DHIS2 服务器的基本 URL |
| 本我 | 字符串 | 不 || DHIS 中预定义地图（收藏夹）的标识符 |
| 基础层 | 字符串/布尔 | 不 | 'gs'、'googlestreets' | 'gh'、'googlehybrid' | 'osm'、'openstreetmap' | false、null、'none'、'off | 显示背景地图 |
| 隐藏传奇 | 布尔 | 不 | 假 | 真 | 隐藏图例面板 |
| 地图视图 | 矩阵 | 是（如果未提供身份证） || 层阵列 |

如果未提供 id，则必须添加具有以下内容的地图视图对象
配置选项：



表格地图插件配置

||||||
|---|---|---|---|---|
| 层次 | 字符串 | 不 | "主题 1" | "主题 2" | "主题 3" | "主题 4" | "边界" | "设施" | "主题 5" | "主题 6" | "主题 7" | "主题 8" | "主题 9 | 应添加地图视图内容的图层 |
| 列 | 矩阵 | 是的 || 指标、数据元素、数据操作数或数据集（只使用一个） |
| 行数 | 矩阵 | 是的 || 组织单位（允许多个） |
| 过滤 | 矩阵 | 是的 || 期间（只使用一个） |
| 班级 | 整数 | 不 | 5 | 1-7 | 自动图例类的数量 |
| 方法 | 整数 | 不 | 2 | 3 | 图例计算方法，其中 2 = 间隔相等，3 = 计数相等 |
| 颜色低 | 字符串 | 不 | "ff0000"（红色） | 任何十六进制颜色 | 代表第一个自动图例类的颜色 |
| 颜色高 | 字符串 | 不 | "00ff00"（绿色） | 任何十六进制颜色 | 代表最后一个自动图例类的颜色 |
| 半径低 | 整数 | 不 | 5 | 任意整数 | 仅适用于设施（点） - 最小值点的半径 |
| 半径高 | 整数 | 不 | 15 | 任意整数 | 仅适用于设施（点） - 最高值点的半径 |
| 不透明度 | 双人 | 不 | 0.8 | 0 - 1 | 图层内容的不透明度/透明度 |
| 图例集 | 反对 | 不 || 预设图例集。将覆盖自动图例集。 |
| 标签 | 布尔/对象 | 不 | false | true | 对象属性：fontSize（整数）、color（十六进制字符串）、strong（布尔值）、italic（布尔值） | 在地图上显示标签 |
| 宽度 | 整数 | 不 || 地图宽度 |
| 高度 | 整数 | 不 || 地图高度 |
| 用户机构单位 | 字符串/数组 | 不 || 组织单位标识符，覆盖与当前用户相关的组织单位，单个或数组 |

我们继续添加一张预定义的地图和一张动态配置的地图
到我们的 HTML 文档。您可以使用浏览可用地图的列表
此处的 Web API： <http://play.dhis2.org/demo/api/33/maps> 。

```javascript
function setLinks() {
  DHIS.getMap({ url: base, el: "map1", id: "ytkZY3ChM6J" });

  DHIS.getMap({
 url: base,
 el: "map2",
 mapViews: [
   columns: [ // Chart series
  columns: [{dimension: "in", items: [{id: "Uvn6LCg7dVU"}]}], // data
   ],
   rows: [ // Chart categories
  rows: [{dimension: "ou", items: [{id: "LEVEL-3"}, {id: "ImspTQPwCqd"}]}], // organisation units
   ],
   filters: [
  filters: [{dimension: "pe", items: [{id: "LAST_3_MONTHS"}]}], // period
   ],
   // All following options are optional
   classes: 7,
   colorLow: "02079c",
   colorHigh: "e5ecff",
   opacity: 0.9,
   legendSet: {id: "fqs276KXCXi"}
 ]
  });
}
```

最后我们在 HTML 的 body 部分包含一些 *div* 元素
带有插件 JavaScript 中引用的标识符的文档。

```html
<div id="map1"></div>
<div id="map2"></div>
```

要查看完整的工作示例，请访问
 <http://play.dhis2.org/portal/map.html> 。

