---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.35/src/commonmark/zh-CN/content/sysadmin/installation.md"
---

# 安装

<!--DHIS2-SECTION-ID:installation-->

安装章节提供了有关如何在以下位置安装DHIS2的信息
各种环境，包括在线中央服务器，离线本地
网络，独立应用程序和称为DHIS2的自包含程序包
生活。

## 介绍

<!--DHIS2-SECTION-ID:install_introduction-->

DHIS2在存在Java运行时的所有平台上运行
环境版本8或更高版本，其中包括最受欢迎的操作
Windows，Linux和Mac等系统。 DHIS2在PostgreSQL上运行
数据库系统。 DHIS2打包为标准Java Web存档
（WAR文件），因此可以在任何Servlet容器（例如Tomcat和
码头。

DHIS2团队建议使用Ubuntu 16.04 LTS操作系统PostgreSQL
数据库系统和Tomcat Servlet容器为首选
服务器安装的环境。

本章提供了设置上述技术堆栈的指南。
但是，应将其作为起步和运行的指南，而不是
作为上述环境的详尽文档。我们提到
到官方的Ubuntu，PostgreSQL和Tomcat文档进行深入了解
阅读。

dhis2-tools Ubuntu软件包可自动执行以下内容中所述的许多任务
以下指南，推荐给大多数用户，尤其是那些
不熟悉命令行或服务器管理。它
在本指南的单独章节中进行了详细说明。

## 服务器规格

<!--DHIS2-SECTION-ID:install_server_specifications-->

DHIS2是数据库密集型应用程序，需要您的服务器
具有适当数量的RAM，CPU核心数量和快速磁盘。
这些建议应被视为经验法则，而不是
确切的措施。 DHIS2在RAM的数量和数量上线性扩展
CPU内核，因此您负担得起的费用越多，应用程序的性能就会越好。

  - * RAM：*每1百万条捕获的数据记录至少1 GB内存
    月或每1000个并发用户。至少4 GB
    实例，中等实例为12 GB。

  - * CPU核心：* 4个CPU核心用于一个小型实例，8个CPU核心用于一个实例
    中型或大型实例。

  - *磁盘：*理想情况下使用SSD。否则，请使用7200 rpm磁盘。最低要求
    读取速度为150 Mb / s，200 Mb / s好，350 Mb / s或更高
    理想。就磁盘空间而言，建议至少60 GB，但是
    将完全取决于其中包含的数据量
    数据值表。 Analytics（分析）表格需要大量
    磁盘空间。提前计划并确保您的服务器可以升级
    需要时具有更多的磁盘空间。

## 软件需求

<!--DHIS2-SECTION-ID:install_software_requirements-->

更高版本的DHIS2需要以下软件版本才能运行。

  - Java JDK或JRE版本8或更高版本。

  - 存在Java JDK或JRE版本8的操作系统。

  - PostgreSQL数据库9.6或更高版本。

  - PostGIS数据库扩展版本2.2或更高版本。

  - Tomcat Servlet容器版本8.5.50或更高版本，或其他Servlet API
    3.1兼容的servlet容器。

## 服务器设置

<!--DHIS2-SECTION-ID:install_server_setup-->

本节介绍如何在以下平台上建立 DHIS2 服务器实例
Ubuntu 16.04 64 位上设置 DHIS2 服务器实例，将 PostgreSQL 作为数据库系统，将 Tomcat 作为
Servlet 容器。本指南并不是一个分步指南
本身，而是作为在服务器上部署 DHIS2 的参考。
在服务器上部署的参考。有许多可能的部署策略，它们
会因操作系统和数据库以及其他因素而有所不同。
其他因素而有所不同。术语 *invoke* 是指在终端中执行给定命令。
终端中执行指定命令。

对于国家级服务器，建议的配置为四核2 Ghz
处理器或更高以及12 Gb RAM或更高。注意64位
要使用超过4 Gb的RAM，需要操作系统。

对于本指南，我们假设为PostgreSQL和8分配了8 Gb RAM。
GB RAM已分配给Tomcat / JVM和一个64位操作系统
用来。 *如果您运行其他配置，请调整
相应的建议值\！*我们建议可用的内存
在数据库和JVM之间平均分配。记得
将一些物理内存留给操作系统
执行其任务，例如大约2 GB。步骤标记为
*可选*，例如性能调整步骤，可以稍后进行
阶段。

### 创建一个用户来运行DHIS2

<!--DHIS2-SECTION-ID:install_creating_user-->

您应该创建一个专用用户来运行DHIS2。

> **重要**
>
>您不应以root用户等特权用户身份运行DHIS2服务器。

通过调用以下命令创建一个名为dhis的新用户：

```sh
sudo useradd -d / home / dhis -m dhis -s / bin / false
```

然后为您的帐户调用设置密码：

```sh
须藤密码
```

确保设置了一个安全密码，该密码至少包含15个随机字符。

### 创建配置目录

<!--DHIS2-SECTION-ID:install_creating_config_directory-->

首先为DHIS2配置创建合适的目录
文件。此目录还将用于应用程序，文件和日志文件。
示例目录可以是：

```sh
mkdir / home / dhis / config
chown dhis：dhis / home / dhis / config
```

DHIS2将寻找一个名为* DHIS2 \ _HOME *的环境变量来
找到DHIS2配置目录。该目录将是
在本安装指南中称为* DHIS2 \ _HOME *。我们将定义
在安装过程的后续步骤中使用环境变量。

### 设置服务器时区和语言环境

<!--DHIS2-SECTION-ID:install_setting_server_tz-->

可能需要重新配置服务器的时区以匹配
DHIS2服务器将覆盖的位置的时区。
如果您使用的是虚拟专用服务器，则默认时区可能不会
对应于您的DHIS2位置的时区。您可以轻松地
通过调用以下内容并按照以下说明重新配置时区
说明。

```sh
sudo dpkg-重新配置tzdata
```

PostgreSQL对语言环境敏感，因此您可能必须安装
地区优先。要检查现有的语言环境并安装新的语言环境（例如
挪威）：

```sh
语言环境-a
须藤locale-gen nb_NO.UTF-8
```

### PostgreSQL安装

<!--DHIS2-SECTION-ID:install_postgresql_installation-->

通过以下方式安装PostgreSQL
    调用：

```sh
sudo apt-get install postgresql-10 postgresql-contrib-10 postgresql-10-postgis-2.4
```

通过调用以下命令创建一个名为* dhis *的非特权用户：

```sh
须藤-u postgres createuser -SDRP dhis
```

在提示符下输入安全密码。通过调用创建数据库：

```sh
须藤-u postgres createdb -O dhis dhis2
```

通过调用`exit`返回您的会话现在您有一个PostgreSQL用户
称为* dhis *和一个名为* dhis2 *的数据库。

* PostGIS *扩展是多种GIS /映射功能所必需的
工作。 DHIS 2将尝试在安装过程中安装PostGIS扩展
启动。如果DHIS 2数据库用户没有创建权限
您可以使用* postgres *用户从控制台创建扩展
使用以下命令：

```sh
sudo -u postgres psql -c“创建扩展名postgis;” dhis2
```

退出控制台，并使用* \\ q *并返回到先前的用户
*出口*。

### PostgreSQL性能调优

<!--DHIS2-SECTION-ID:install_postgresql_performance_tuning-->

调整PostgreSQL是实现高性能系统所必需的，但是
在使DHIS2运行方面是可选的。 PostgreSQL已配置
并通过* postgresql.conf *文件进行了调整，该文件可以像
这个：

```sh
须藤nano /etc/postgresql/10/main/postgresql.conf
```

并设置以下属性：

```属性
max_connections = 200
```

确定PostgreSQL允许的最大连接数。

```属性
shared_buffers = 3200MB
```

确定应专门分配多少内存
PostgreSQL缓存。此设置控制共享内核的大小
应该为PostgreSQL保留的内存。应该设置为
PostgreSQL专用内存的40％。

```属性
work_mem = 20MB
```

确定用于内部排序和哈希的内存量
操作。此设置是针对每个连接，针对每个查询的，因此需要大量内存
如果将其提高得太高，可能会被消耗掉。正确设置该值
对于DHIS2聚合性能至关重要。

```属性
maintenance_work_mem = 512MB
```

确定PostgreSQL可用于维护的内存量
创建索引，运行真空，添加外部文件等操作
键。增大此值可能会提高索引创建的性能
在分析生成过程中。

```属性
Effective_cache_size = 8000MB
```

估计磁盘可用于磁盘缓存的内存量
操作系统（不是分配）和PostgreSQL用于isdb.no
确定查询计划是否适合内存。设置它
高于实际可用价值会导致质量不佳
性能。此值应包含shared \ _buffers
设置。 PostgreSQL有两层缓存：第一层使用
内核共享内存，并由shared \ _buffers设置控制。
PostgreSQL将第二层委托给操作系统磁盘缓存
可用的内存大小可以通过
有效\ _cache \ _size设置。

```属性
checkpoint_completion_target = 0.8
```

设置WAL写过程中用于缓冲的内存。
增大此值可能会提高大量写入系统的吞吐量。

```属性
sync_commit =关
```

指定事务提交是否将等待WAL记录
是否将其写入磁盘，然后再返回客户端。设定这个
关闭将大大提高性能。这也意味着那里
交易之间的轻微延迟被报告为成功
客户端，它实际上是安全的，但是数据库状态不能为
已损坏，这是性能密集型和
像DHIS2这样的重写入系统。

```属性
wal_writer_delay = 10000毫秒
```

指定WAL写操作之间的延迟。将此设置为较高
价值可能会提高大量写入系统的性能，因为
一次刷新到磁盘就可以执行许多写操作。

```属性
random_page_cost = 1.1
```

*仅SSD。*设置查询计划程序对非连续获取的磁盘页面的成本的估计。较低的值将导致系统比顺序扫描更喜欢索引扫描。对于在SSD上运行的数据库或在内存中大量缓存的数据库，较低的值有意义。默认值为4.0，这对于传统磁盘而言是合理的。

```属性
max_locks_per_transaction = 96
```

指定为每个事务分配的对象锁的平均数量。设置该参数主要是为了允许完成涉及大量表的升级例程。

通过调用以下命令来重新启动PostgreSQL：

```sh
sudo /etc/init.d/postgresql重新启动
```

### Java安装

<!--DHIS2-SECTION-ID:install_java_installation-->

推荐用于DHIS 2的Java JDK是OpenJDK 8。
GPL许可，可以免费运行。您可以使用
以下命令：

```
须藤apt-get install openjdk-8-jdk
```

通过调用以下命令来验证安装是否正确：

```
Java版本
```

### DHIS2配置

<!--DHIS2-SECTION-ID:install_database_configuration-->

The database connection information is provided to DHIS2 through a
configuration file called `dhis.conf`. Create this file and save it in
the `DHIS2\_HOME` directory. As an example this location could be:

```sh
/home/dhis/config/dhis.conf
```

与上述设置相对应的PostgreSQL配置文件具有
这些属性：

```属性
＃------------------------------------------------- ---------------------
＃数据库连接
＃------------------------------------------------- ---------------------

＃JDBC驱动程序类
connection.driver_class = org.postgresql.Driver

＃数据库连接URL
connection.url = jdbc：postgresql：dhis2

＃数据库用户名
connection.username = dhis

＃数据库密码
connection.password = xxxx

＃------------------------------------------------- ---------------------
＃服务器
＃------------------------------------------------- ---------------------

＃如果部署在HTTPS上则启用安全设置，默认设置为“关”，可以设置为“开”
＃服务器.https =开启

＃服务器基本URL
＃server.base.url = https://server.com/
```

强烈建议启用`server.https`设置并使用加密的HTTPS协议部署DHIS 2。此设置将启用例如安全cookie。启用此设置后，需要进行HTTPS部署。

`server.base.url`设置是指最终用户通过网络访问系统的URL。

Note that the configuration file supports environment variables. This
means that you can set certain properties as environment variables and
have them resolved, e.g. like this where `DB\_PASSWD` is the
name of the environment variable:

```属性
connection.password = $ {DB_PASSWD}
```

请注意，此文件包含您的DHIS2数据库的密码（以明文形式）
文本，因此需要对其进行保护，以防止未经授权的访问。去做这个，
调用以下命令，以确保仅允许* dhis *用户读取它：

```sh
chmod 600 dhis.conf
```

### Tomcat和DHIS2安装

<!--DHIS2-SECTION-ID:install_tomcat_dhis2_installation-->

要安装Tomcat Servlet容器，我们将利用Tomcat用户
通过调用打包：

```sh
须藤apt-get install tomcat8-user
```

这个包使我们可以轻松地创建一个新的Tomcat实例。实例
将在当前目录中创建。合适的位置是
* dhis *用户的主目录：

```sh
cd / home / dhis /
须藤tomcat8-instance-create tomcat-dhis
须藤chown -R dhis：dhis tomcat-dhis /
```

这将在名为* tomcat-dhis *的目录中创建一个实例。注意
tomcat7-user软件包允许创建任意数量的dhis
实例，如果需要的话。

接下来，编辑文件* tomcat-dhis / bin / setenv.sh *并添加以下行。
第一行将设置Java Runtime Environment的位置，
第二个将专用于Tomcat的内存，第三个将设置
DHIS2将在其中搜索* dhis.conf *配置的位置
文件。请检查Java二进制文件的路径是否正确，因为它们
可能因系统而异，例如在AMD系统上，您可能会看到
* / java-8-openjdk-amd64 *请注意，您应该对此进行调整
环境：

```sh
导出JAVA_HOME ='/ usr / lib / jvm / java-1.8.0-openjdk-amd64 /'
出口JAVA_OPTS ='-Xmx7500m -Xms4000m'
导出DHIS2_HOME ='/ home / dhis / config'
```

Tomcat配置文件位于
* tomcat-dhis / conf / server.xml *。定义连接的元素
DHIS是端口8080的* Connector *元素。您可以更改
如果需要，将连接器元素中的端口号连接到所需的端口。
* relaxedQueryChars *属性对于允许某些字符是必需的
在DHIS2前端使用的URL中。

```xml
<Connector port="8080" protocol="HTTP/1.1"
  connectionTimeout="20000"
  redirectPort="8443"
  relaxedQueryChars="[]" />
```

下一步是下载DHIS2 WAR文件并将其放入
Tomcat的webapps目录。您可以下载DHIS2版本2.31 WAR
这样发布（如果您的首选版本替换2.31，
必要）：

```sh
wget https://releases.dhis2.org/2.33/dhis.war
```

或者，对于补丁程序版本，文件夹结构基于补丁程序
主发行版下子文件夹中的发行版ID。例如。你可以下载
像这样的DHIS2版本2.31.1 WAR版本（用您的
首选版本，以及带有首选补丁的2.31.1（如有必要）：

```
wget https://releases.dhis2.org/2.33/2.33.1/dhis.war
```

将WAR文件移到Tomcat webapps目录中。我们想称呼
WAR文件ROOT.war，以使其直接在本地主机上可用
没有上下文路径：

```sh
mv dhis.war tomcat-dhis / webapps / ROOT.war
```

DHIS2绝对不能以特权用户身份运行。修改后
setenv.sh文件，修改启动脚本以检查并验证
脚本尚未以root身份调用。

```sh
＃！/ bin / sh
设置-e

如果[“ $（id -u）” -eq“ 0”];然后
  回声“此脚本不能以root用户身份运行” 1>＆2
  1号出口
科幻

导出CATALINA_BASE =“ / home / dhis / tomcat-dhis”
/usr/share/tomcat8/bin/startup.sh
回显“ Tomcat启动”
```

### 运行DHIS2

<!--DHIS2-SECTION-ID:install_running_dhis2-->

DHIS2现在可以通过调用来启动：

    须藤-u dhis tomcat-dhis / bin / startup.sh

> **重要**
>
>绝对不要以root或其他特权用户身份运行DHIS2服务器。

DHIS2可以通过调用来停止：

    须藤-u dhis tomcat-dhis / bin / shutdown.sh

要监视Tomcat的行为，日志是该日志的主要来源
信息。可以使用以下命令查看日志：

    尾巴-f tomcat-dhis / logs / catalina.out

假设WAR文件名为ROOT.war，您现在可以访问
DHIS2实例位于以下URL：

    http://localhost:8080

## 文件存储配置

<!--DHIS2-SECTION-ID:install_file_store_configuration-->

DHIS2能够捕获和存储文件。默认情况下，文件将
被存储在*文件*中运行DHIS2的服务器的本地文件系统上
目录位于* DHIS2 \ _HOME *外部目录位置下。

您还可以配置DHIS2以将文件存储在基于云的存储中
提供者。 AWS S3是当前唯一受支持的提供商。启用
基于云的存储，您必须定义以下附加属性
在您的* dhis.conf *文件中：

```属性
＃文件存储提供者。当前支持“文件系统”和“ aws-s3”。
filestore.provider ='aws-s3'

＃本地文件系统上外部目录中的目录，AWS S3上存储桶
filestore.container =文件

＃以下配置仅适用于云存储（AWS S3）

＃数据中心位置。可选，但出于性能原因建议使用。
filestore.location = eu-west-1

＃AWS S3上的用户名/访问密钥
filestore.identity = xxxx

＃AWS S3上的密码/密钥（敏感）
filestore.secret = xxxx
```

此配置是反映默认设置的示例，应为
根据您的需要进行了更改。换句话说，如果
您计划使用默认值。如果您想使用外部
提供者，需要定义最后一个属性块，以及
* provider *属性设置为受支持的提供程序（仅当前
AWS S3）。

> **注意**
>
>如果您在dhis.conf中配置了云存储，则上传的所有文件
>或系统生成的文件将使用云存储。

对于生产系统，文件存储的初始设置应为
被仔细考虑为在存储提供商之间移动文件，而
保持数据库引用的完整性可能很复杂。保持
请记住，文件存储的内容可能包含敏感内容，
以及完整的信息，并保护对文件夹以及
建议在生产中确保备份计划到位
实施。

> **注意**
>
> AWS S3是唯一受支持的提供商，但可能会有更多提供商
>将来添加，例如Google Cloud Store和Azure Blob存储。
>让我们知道您是否还有其他提供商的用例。

## Google服务帐户配置

<!--DHIS2-SECTION-ID:install_google_service_account_configuration-->

DHIS2可以连接到各种Google服务API。例如，
DHIS2 GIS组件可以利用Google Earth Engine API加载地图
层。为了提供API访问令牌，您必须设置一个Google
服务帐户并创建私钥：

  - 创建一个Google服务帐户。请咨询[Google身份
    平台]（https://developers.google.com/identity/protocols/OAuth2ServiceAccount#overview）
    文档。

  - 访问[Google云控制台]（https://console.cloud.google.com）
    并转到API Manager \>凭据\>创建凭据\>
    服务帐户密钥。选择您的服务帐户和JSON作为密钥
    键入并单击创建。

  - 将JSON密钥重命名为* dhis-google-auth.json *。

下载密钥文件后，将* dhis-google-auth.json *文件放入
DHIS2 \ _HOME目录（与* dhis.conf *文件相同的位置）。
例如，此位置可能是：

    /home/dhis/config/dhis-google-auth.json

## OpenID Connect（OIDC）配置

<!--DHIS2-SECTION-ID:install_oidc_configuration-->

DHIS2支持用于单点登录（SSO）的OpenID Connect（OIDC）身份层。 OIDC是一种标准的身份验证协议，该协议允许用户登录到诸如Google之类的身份提供商（IdP）。用户成功登录其IdP后，他们将自动登录DHIS2。

本节提供有关将DHIS2与OIDC一起使用的常规信息，以及IdP和DHIS2的配置选项。身份验证流程如下所示。

1. 用户尝试从客户端计算机登录DHIS2。

2. DHIS2将身份验证请求重定向到IdP网关。

3. 提示用户提供凭据，并成功向IdP进行身份验证。 IdP用重定向URL返回DHIS2进行响应。重定向URL包含用户的授权码。

4. 客户端被重定向到DHIS2并显示授权码。

5. DHIS2将客户端的授权代码及其自己的客户端凭据提供给IdP。

6. IdP将访问令牌和ID令牌返回到DHIS2。

    * JSON Web令牌（JWT）验证：DHIS2对IdP JWT进行验证。
    * ID令牌是用户的一组属性密钥对。密钥对称为声明。

7. DHIS2从IdP声明中识别用户，并完成步骤1中的身份验证请求。DHIS2搜索与IdP的“电子邮件”声明匹配的用户。可以将DHIS2配置为对该过程使用不同的声明。

8. DHIS2授权用户。

### OIDC的要求

#### IdP帐户
您必须有权访问DHIS2支持的身份提供者（IdP）。

当前支持以下IdP：

* 谷歌

#### 本地用户帐号
您必须在DHIS2实例中显式创建用户。当前不支持从外部目录（例如Active Directory）导入它们。 OIDC不支持使用外部身份存储来管理用户。

#### IdP声明和用户映射
要登录DHIS2，必须在IdP中配置给定用户，然后将其映射到DHIS2中的用户帐户。 OIDC使用一种依靠声明与其他应用程序共享用户帐户属性的方法。声明包括用户帐户属性，例如电子邮件，电话号码，姓名等。DHIS2依靠IdP声明将用户帐户从IdP映射到DHIS2上托管的帐户。缺省情况下，DHIS2希望IdP通过_email_声明。根据您的IdP，您可能需要配置DHIS2以使用其他IdP声明。

如果您将Google用作IdP，则默认行为是使用电子邮件声明将IdP身份映射到DHIS2用户帐户。

> **注意**
>
>为了使DHIS2用户能够使用IdP登录，必须选中用户配置文件复选框“ **仅外部身份验证（OpenID或LDAP）**”，并且“ ** OpenID **”字段必须与声明匹配IdP返回的（映射索赔）。 Google默认使用电子邮件。




### 为OIDC配置身份提供者
本主题提供有关配置身份提供程序（IdP）以将OIDC与DHIS2一起使用的信息。这是一个多步骤过程中的一个步骤。下列主题提供有关在DHIS2中配置和使用OIDC的信息。

#### 配置IdP
在将OIDC与DHIS2结合使用之前，必须在受支持的身份提供者（IdP）上拥有一个帐户，并在IdP上拥有一个项目或应用程序。配置DHIS2时，必须提供以下信息：

* **提供商客户端ID：**这是IdP分配给您的应用程序的标识符。
* **提供者客户机密：**此值是机密，应保持安全。

#### 重定向网址
某些IdP将需要DHIS2实例的重定向URL。您可以使用以下语法为IdP构造URL：

```
（协议）：/（您的DHIS2主机）/ oauth2 /代码/（IdP代码）
```

一个示例如下所示：

```
https://dhis2.org/oauth2/code/google
```

#### IdP流程示例（Google）
以下过程概述了您与提供程序一起执行的步骤。例如，该过程讨论了如何使用Google作为身份提供者。但是，每个提供商的流程略有不同，因此步骤的具体内容（及其顺序）可能会因您的提供商而异。

1. 在提供商的开发者网站上注册并登录。例如，对于Google，您可以通过以下URL转到开发者控制台：https：//console.developers.google.com。
2. 创建一个新的项目或应用程序。
3. 在开发人员信息中心中，按照创建OAuth 2.0客户端ID和客户端密钥的步骤操作。记录这些值以备后用。
4. 将您的授权重定向URI设置为：`(protocol):/(host)/oauth2/code/google`.。将客户秘密放在安全的地方。



请按照您的IdP服务说明来配置您的IdP：

* Google：https：//developers.google.com/identity/protocols/oauth2/openid-connect

### 为OIDC配置DHIS2

> **注意**
>
>在执行此处描述的步骤之前，您必须按照为OIDC配置身份提供者中所述配置OIDC身份提供者（IdP）。

本节介绍在`dhis.conf`中设置的配置选项。请记住重新启动DHIS 2，以使更改生效。

#### 谷歌

```属性
＃------------------------------------------------- ---------------------
＃OIDC配置
＃------------------------------------------------- ---------------------
＃必须启用此值才能启用OIDC
oidc.oauth2.login.enabled =开启

＃Google特定参数
oidc.provider.google.client_id = my_client_id
oidc.provider.google.client_secret = my_client_secret
＃DHIS 2实例URL，不要以斜杠结尾，例如：https://dhis2.org/demo
oidc.provider.google.redirect_baseurl =（协议）：//（主机）/（可选应用上下文）

＃可选，默认为'email'
oidc.provider.google.mapping_claim =电子邮件
```

## LDAP配置

<!--DHIS2-SECTION-ID:install_ldap_configuration-->

DHIS2能够使用LDAP服务器进行用户身份验证。
对于LDAP身份验证，要求在
每个LDAP条目的DHIS2数据库。 DHIS2用户将用于代表
权限/用户角色。

要设置LDAP身份验证，您需要配置LDAP服务器URL，
管理员用户以及LDAP搜索库和搜索过滤器。这个
配置应在主DHIS 2配置文件中完成
（dhis.conf）。 LDAP用户或条目通过区分来标识
名称（此后为DN）。一个示例配置如下所示：

```属性
＃LDAP服务器网址
ldap.url = ldaps：//domain.org：636

＃LDAP管理器条目专有名称
ldap.manager.dn = cn = johndoe，dc = domain，dc = org

＃LDAP管理员输入密码
ldap.manager.password = xxxx

＃LDAP基本搜索
ldap.search.base = dc = domain，dc = org

＃LDAP搜索过滤器
ldap.search.filter =（cn = {0}）
```

LDAP配置属性说明如下：

  - * ldap.url：*要对其进行身份验证的LDAP服务器的URL
    反对。强烈建议使用SSL /加密，以便
    确保身份验证的安全性。例如，URL是
    * ldaps：//domain.org：636 *，其中ldaps是指协议，
    * domain.org *是指域名或IP地址，* 636 *
    指端口（LDAPS默认为636）。

  - * ldap.manager.dn：*绑定到LDAP管理器用户是必需的
    用于用户身份验证过程的LDAP服务器。这个性质
    指该条目的DN。即这不是将
    登录DHIS2时需要认证，而不是
    绑定到LDAP服务器以进行身份验证。

  - * ldap.manager.password：* LDAP管理器用户的密码。

  - * ldap.search.base：*的搜索基础或专有名称
    搜索基础对象，它定义目录中的位置
    LDAP搜索从此开始。

  - * ldap.search.filter：*用于匹配条目中DN的过滤器
    LDAP目录。 {0}变量将由DHIS2替换
    用户名，或者为用户定义的LDAP标识符
    使用提供的用户名。

DHIS2将使用提供的用户名/密码并尝试进行身份验证
针对LDAP服务器条目，然后从中查找用户角色/权限
相应的DHIS2用户。这意味着用户必须具有
LDAP目录中的匹配条目以及DHIS2用户，以便
登录。

在身份验证期间，DHIS2将尝试使用以下方式绑定到LDAP服务器：
配置的LDAP服务器URL以及管理员DN和密码。一旦
绑定完成后，它将使用以下命令在目录中搜索条目
配置的LDAP搜索库和搜索过滤器。

配置的过滤器中的{0}变量将在替换之前
应用过滤器。默认情况下，它将被提供的
用户名。您还可以在相关的
DHIS2用户帐户。可以通过DHIS2用户模块用户来完成
通过设置“ LDAP标识符”，在添加或编辑屏幕中找到界面
属性。设置后，LDAP标识符将替换为{0}
过滤器中的变量。 LDAP通用名称时，此功能很有用
不适合或由于某种原因不能用作DHIS2用户名。

## 加密配置

<!--DHIS2-SECTION-ID:install_encryption_configuration-->

DHIS2允许对数据进行加密。启用它需要一些额外的功能
设定。为了提供加密算法的安全性，您必须设置一个
通过* dhis.conf *配置文件输入密码
* encryption.password *属性：

```属性
加密密码= xxxx
```

* encryption.password *属性是加密时使用的密码（密钥）
和解密数据库中的数据。请注意，密码不得为
一旦设置好并加密了数据，就可以更改，因为数据可以
然后不再被解密。

密码必须至少为** 24个字符长**。混合数字
建议使用大小写字母。加密密码
必须保密。

> **重要**
>
>如果丢失或更改了加密密码，则无法恢复加密的数据。如果密码丢失，则加密的数据也会丢失。相反，如果
>密码已泄露。因此，应考虑将密码存储在安全的地方。

请注意，加密支持取决于* Java Cryptography Extension *（JCE）策略文件是否可用。这些包含在OpenJDK和Oracle JDK 8 Update 144或更高版本的所有版本中。

## 读取副本数据库配置

<!--DHIS2-SECTION-ID:install_read_replica_configuration-->

DHIS 2允许利用主数据库的只读副本
（主DHIS 2数据库）。只读副本的目的是为了增强
数据库读取查询的性能并扩展容量
超越了单个数据库的限制。大量读取操作，例如
因为分析和事件查询将从中受益。

The configuration requires that you have created one or more replicated
instances of the master DHIS 2 database. PostgreSQL achieves this
through a concept referred to as *streaming replication*. Configuring
read replicas for PostgreSQL is not covered in this guide.

只读副本可以在* dhis.conf *配置文件中定义。您
每个DHIS 2实例最多可以指定5个只读副本。每个读取副本
用1到5之间的数字表示。JDBC连接URL必须
每个副本定义。可以指定用户名和密码。如果
否，将使用主数据库的用户名和密码
代替。

* dhis.conf *中只读副本的配置如下所示。
每个副本都使用配置键* readN *前缀指定，
其中N表示副本号。

```属性
＃读取副本1的配置

＃数据库连接URL，用户名和密码
read1.connection.url = jdbc：postgresql：//127.0.0.11/dbread1
read1.connection.username = dhis
read1.connection.password = xxxx

＃读取副本2的配置

＃数据库连接URL，用户名和密码
read2.connection.url = jdbc：postgresql：//127.0.0.12/dbread2
read2.connection.username = dhis
read2.connection.password = xxxx

＃读取副本3的配置

＃数据库连接URL，后退到主用户名和密码
read3.connection.url = jdbc：postgresql：//127.0.0.13/dbread3
```

请注意，您必须重新启动servlet容器才能更改
生效。 DHIS 2将自动在
读取副本。副本的顺序没有任何意义。

## Web服务器集群配置

<!--DHIS2-SECTION-ID:install_web_server_cluster_configuration-->

本节介绍如何设置DHIS 2应用程序以在
簇。

### 集群概述

<!--DHIS2-SECTION-ID:install_cluster_configuration_introduction-->

集群是提高系统可扩展性和可用性的常用技术。
可用性的常用技术。集群是指设置多个网络服务器，如
Tomcat 实例，让它们为一个应用程序服务。集群
可以*扩展*应用程序，即可以添加新的服务器来提高性能。
以提高性能。它还允许*高
可用性*，因为系统可以容忍实例宕机，而不会
使用户无法访问系统。

有一些方面需要配置才能运行DHIS 2
在集群中。

* 每个DHIS 2实例必须指定DHIS 2实例的其他成员
* dhis.conf *中的群集。

* 必须安装Redis数据存储，并且必须提供连接信息
为* dhis.conf *中的每个DHIS 2应用程序实例提供。

* DHIS 2 实例和服务器必须共享相同的 *files* 文件夹，用于 
应用程序和文件上传，通过* AWS S3云文件存储*选项
或共享的网络驱动器。

* 必须将负载平衡器（如nginx）配置为分发Web请求
跨集群实例。

### DHIS 2实例群集配置

<!--DHIS2-SECTION-ID:install_cluster_configuration-->

设置多个Tomcat实例时，需要进行
实例彼此了解。这种认识将使DHIS 2能够保持
本地数据（休眠）同步并处于一致状态。
在一个实例上完成更新后，在另一个实例上缓存
必须通知实例，以便实例可以无效并避免
变得陈旧。

DHIS 2群集设置基于每个设备的手动配置
实例。对于每个DHIS 2实例，必须指定公共
*主机名*以及其他参与实例的主机名
在集群中。

使用* cluster.hostname *指定服务器的主机名
配置属性。参与其中的其他服务器
使用* cluster.members *配置指定集群
属性。该属性需要一个逗号分隔值列表，其中
每个值的格式均为* host：port *。

主机名必须对网络上的参与服务器可见
为集群工作。您可能需要允许传入和
防火墙中配置的端口号上的传出连接。

服务器的端口号是使用* cluster.cache.port *指定的
配置属性。用于注册表接收的远程对象端口
调用使用* cluster.cache.remote.object.port *指定。指定
端口号通常仅在具有多个群集时才有用
同一服务器上的实例，或者是否需要显式指定端口
匹配防火墙配置。在单独运行集群实例时
服务器，通常适合使用默认端口号并省略
端口配置属性。如果省略，则将4001分配为
监听器端口和一个随机空闲端口将被分配为远程端口
对象端口。

下面介绍了两个Web服务器群集的示例设置。
对于主机名为* 193.157.199.131 *的*服务器A *，可以执行以下操作
在* dhis.conf *中指定：

```属性
＃服务器A的集群配置

＃此Web服务器的主机名
cluster.hostname = 193.157.199.131

＃缓存侦听器的端口，可以省略
cluster.cache.port = 4001
cluster.cache.remote.object.port = 5001

＃参与集群的Host：port列表
cluster.members = 193.157.199.132:4001
```

对于主机名为* 193.157.199.132 *的*服务器B *，可以执行以下操作
在* dhis.conf *中指定（注意如何省略端口配置）：

```属性
＃服务器B的集群配置

＃此Web服务器的主机名
cluster.hostname = 193.157.199.132

＃参与集群的服务器列表
cluster.members = 193.157.199.131:4001
```

您必须重新启动每个Tomcat实例，以使更改生效。
现在已使两个实例相互了解，DHIS 2将
确保其缓存保持同步。

### Redis共享数据存储集群配置

<!--DHIS2-SECTION-ID:install_cluster_configuration_redis-->

在集群设置中，* Redis *实例是必需的，它将处理
共享用户会话，应用程序缓存和群集节点领导力。

为了获得最佳性能，* Redis键空间事件*用于_generic命令_
和_expired events_需要在Redis服务器中启用。如果你是
使用由云平台管理的Redis服务器（例如* AWS ElastiCache for Redis *
或* Azure Cache for Redis *），则必须启用键空间事件通知
使用相应的云控制台界面。如果要设置独立
Redis服务器，启用密钥空间事件通知可以在
通过添加或取消注释以下行来* redis.conf *文件：

```
notify-keyspace-events Egx
```

如果* redis.enabled *配置，DHIS2将连接到Redis
* dhis.conf *中的property设置为* true *以及以下属性：

- * redis.host *：指定Redis服务器在何处运行。默认为* localhost *。必选

- * redis.port *：指定Redis服务器正在侦听的端口。默认为* 6379 *。可选的。

- * redis.password *：指定身份验证密码。如果不需要密码，可以将其留空。

- * redis.use.ssl *：指定Redis服务器是否启用了SSL。默认为false。可选的。默认为* false *。

启用Redis后，DHIS2将自动分配
运行实例作为集群的领导者。领导者实例将
用于执行应运行的作业或计划任务
仅由一个实例。您可以选择配置
* dhis.conf *中的* leader.time.to.live.minutes *属性以设置
领导人选举经常需要举行。它也给
指示另一个实例接管需要多长时间
在先前的领导者变得不可用之后成为领导者。的
默认值为2分钟。请注意，在集群中分配领导者
仅在启用Redis的情况下完成。 * dhis.conf *的示例片段
启用Redis和领导者选举时间的配置文件
配置如下所示。

```属性
＃Redis配置

redis.enabled = true

redis.host = 193.158.100.111

redis.port = 6379

redis.password = <your password>

redis.use.ssl = false

＃可选，默认为2分钟
Leader.time.to.live.minutes = 4
```

### 文件文件夹配置

DHIS 2将在应用程序本身之外存储几种类型的文件，
例如应用程序，保存在数据输入中的文件和用户头像。部署时
在群集中，这些文件的位置必须在所有实例之间共享。
在本地文件系统上，位置为：

```
{DHIS2_HOME} /文件
```

Here, `DHIS2_HOME` refers to the location of the DHIS 2 configuration file
as specified by the DHIS 2 environment variable, and `files` is the file
folder immediately below.

有两种方法可以实现共享位置：

* 使用* AWS S3云文件存储*选项。文件将存储在
S3存储桶，由群集中的所有DHIS 2实例自动共享。
请参阅*文件存储配置*部分以获取指导。
* 设置一个在所有DHIS 2实例之间共享的共享文件夹，并且
集群中的服务器。在Linux上，可以使用* NFS *（网络文件系统）来实现
这是一个分布式文件系统协议。注意只有`files`
subfolder under `DHIS2_HOME` should be shared, not the parent folder. 

### 负载均衡器配置

<!--DHIS2-SECTION-ID:install_load_balancing-->

设置了Tomcat实例集群，这是路由的常用方法
传入Web请求到参与
集群正在使用*负载均衡器*。负载均衡器将确保
负载在群集实例之间平均分配。它也会
检测实例是否不可用，如果是，则停止例程
对该实例的请求，而是使用其他可用实例。

负载平衡可以通过多种方式实现。一个简单的方法是
使用* nginx *，在这种情况下，您将定义一个* upstream *元素，
枚举后端实例的位置，以后再使用
* proxy *位置块中的元素。

```text
http {

  # Upstream element with sticky sessions

  upstream dhis_cluster {
    ip_hash;
    server 193.157.199.131:8080;
    server 193.157.199.132:8080;
  }

  # Proxy pass to backend servers in cluster

  server {
    listen 80;

    location / {
      proxy_pass   http://dhis_cluster/;
    }
  }
}
```

DHIS 2在一定程度上将用户会话的服务器端状态保持不变。
使用“粘性会话”是避免复制
服务器会话状态，方法是将请求从同一客户端路由到
同一台服务器。上游元素中的* ip \ _hash *指令可确保
这个。

请注意，为简洁起见，已省略了几条说明
上面的例子。请查阅反向代理部分以获取详细指南。

## Analytics缓存配置

<!--DHIS2-SECTION-ID:install_analytics_cache_configuration-->

DHIS 2支持用于所有分析Web应用程序的分析API响应的服务器端缓存。该缓存位于DHIS 2应用程序内，因此受到DHIS 2身份验证和安全层的保护。您可以配置以秒为单位的缓存条目的到期时间。要启用缓存，您可以在`dhis.conf`中定义`analytics.cache.expiration`属性。下面的示例启用了缓存并将过期设置为一小时。

```属性
analytics.cache.expiration = 3600
```

## 监控方式

DHIS 2可以导出Prometheus兼容的度量标准以监视DHIS2实例。 DHIS2监视基础结构旨在公开与应用程序运行时相关的指标以及其他与应用程序相关的信息。

与基础架构相关的指标（例如主机指标，Tomcat或Postgres）不会直接由应用程序监视引擎公开，因此必须分别收集它们。该应用程序当前公开的指标是：

- DHIS 2 API（响应时间，调用次数等）
- JVM（堆大小，垃圾回收等）
- 休眠（查询，缓存等）
- C3P0数据库池
- 应用正常运行时间
- 中央处理器

可以使用以下属性在`dhis.conf`中启用监视（所有属性默认为`off`）：

```属性
monitoring.api.enabled =开
monitoring.jvm.enabled =开
monitoring.dbpool.enabled =开
monitoring.hibernate.enabled =关
monitoring.uptime.enabled =开
monitoring.cpu.enabled =开
```

推荐使用Prometheus和Grafana收集和可视化这些指标的方法。

有关更多信息，请参见[监控基础结构]（https://github.com/dhis2/wow-backend/blob/master/guides/monitoring.md）页面和[Prometheus and Grafana安装]（https：// docs .dhis2.org / master / en / dhis2_system_administration_guide / monitoring.html）一章。

## 反向代理配置

<!--DHIS2-SECTION-ID:install_reverse_proxy_configuration-->

反向代理是代表服务器运行的代理服务器。使用
反向代理与Servlet容器结合使用是可选的，但
有很多优点：

  - 可以将请求映射并传递到多个servlet容器。
    这提高了灵活性，并使其更易于运行
    同一台服务器上的DHIS2实例。这也使得
    在不影响客户端的情况下更改内部服务器设置。

  - DHIS2应用程序可以作为非root用户在端口上运行
    不同于80，这减少了会话的后果
    劫持。

  - 反向代理可以充当单个SSL服务器并进行配置
    检查恶意内容请求，日志请求和
    响应并提供不敏感的错误消息，这将
    提高安全性。

### 基本的Nginx设置

<!--DHIS2-SECTION-ID:install_basic_nginx_setup-->

由于以下原因，我们建议使用[nginx]（http://www.nginx.org）作为反向代理
其低内存占用和易用性。要安装，请调用
以下：

    须藤apt-get install nginx

现在可以使用以下命令启动，重新加载和停止nginx
命令：

    sudo /etc/init.d/nginx开始
    须藤/etc/init.d/nginx重新加载
    sudo /etc/init.d/nginx停止

现在我们已经安装了nginx，我们将继续配置
定期将请求代理到我们的Tomcat实例，我们假设
在* http：// localhost：8080 *上运行。要配置nginx，您可以打开
通过调用以下配置文件：

    须藤nano /etc/nginx/nginx.conf

nginx配置围绕代表以下内容的块层次结构构建
http，服务器和位置，其中每个块都从父级继承设置
块。以下代码段将nginx配置为通过代理
（重定向）来自端口80的请求（该端口是nginx监听的端口
默认情况下）到我们的Tomcat实例。包括以下配置
在nginx.conf中：

```text
http {
  gzip on; # Enables compression, incl Web API content-types
  gzip_types
    "application/json;charset=utf-8" application/json
    "application/javascript;charset=utf-8" application/javascript text/javascript
    "application/xml;charset=utf-8" application/xml text/xml
    "text/css;charset=utf-8" text/css
    "text/plain;charset=utf-8" text/plain;

  server {
    listen               80;
    client_max_body_size 10M;

    # Proxy pass to servlet container

    location / {
      proxy_pass                http://localhost:8080/;
      proxy_redirect            off;
      proxy_set_header          Host               $host;
      proxy_set_header          X-Real-IP          $remote_addr;
      proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto  http;
      proxy_buffer_size         128k;
      proxy_buffers             8 128k;
      proxy_busy_buffers_size   256k;
      proxy_cookie_path         ~*^/(.*) "/$1; SameSite=Lax";
    }
  }
}
```

现在，您可以通过* http：// localhost *访问DHIS2实例。自从
已经设置了反向代理，我们可以通过使Tomcat来提高安全性
只监听本地连接。在* / conf / server.xml *中，您可以添加一个
连接器元素的* address *属性值为* localhost *
对于HTTP 1.1像这样：

```xml
<Connector address="localhost" protocol="HTTP/1.1" />
```

### 使用Nginx启用SSL

<!--DHIS2-SECTION-ID:install_enabling_ssl_on_nginx-->

为了提高安全性，建议配置服务器
运行DHIS2以通过加密连接与客户端进行通信
并使用受信任的证书向客户端标识自己。这个可以
通过SSL（一种加密通信协议）来实现
在TCP / IP上运行。首先，安装所需的* openssl *库：

    须藤apt-get install openssl

要将 nginx 配置为使用 SSL，您需要一个正确的 SSL 证书
来自 SSL 提供商。证书的费用差异很大，具体取决于
关于加密强度。来自 [Rapid SSL] 的经济实惠的证书
在线](http://www.rapidsslonline.com) 应该可以满足大多数目的。到
生成 CSR（证书签名请求），您可以调用
下面的命令。当系统提示您输入*通用名称*时，请输入
您所在网站的完全限定域名
    确保。

    openssl req -new -newkey rsa：2048 -nodes -keyout server.key -out server.csr

收到证书文件（.pem或.crt）后，您将
需要将其与生成的server.key文件放在一起
nginx可以到达的位置。一个好的位置可以是
与您的nginx.conf文件所在的目录相同。

下面是一个nginx服务器块，其中证书文件被命名
server.crt和server.key。由于SSL连接通常在端口上进行
443（HTTPS）我们将在该端口（443）上的请求传递到DHIS2实例
在* http：// localhost：8080 *上运行
所有连接到端口80的请求并强制使用HTTPS / SSL。这个
这也是必要的，因为DHIS2在内部使用了大量重定向
必须将其传递以使用HTTPS。记住要更换
* \ <server-ip\> *和服务器的IP。这些块应该替换
上一节中的一个。

```text
http {
  gzip on; # Enables compression, incl Web API content-types
  gzip_types
    "application/json;charset=utf-8" application/json
    "application/javascript;charset=utf-8" application/javascript text/javascript
    "application/xml;charset=utf-8" application/xml text/xml
    "text/css;charset=utf-8" text/css
    "text/plain;charset=utf-8" text/plain;

  # HTTP server - rewrite to force use of SSL

  server {
    listen     80;
    rewrite    ^ https://<server-url>$request_uri? permanent;
  }

  # HTTPS server

  server {
    listen               443 ssl;
    client_max_body_size 10M;

    ssl                  on;
    ssl_certificate      server.crt;
    ssl_certificate_key  server.key;

    ssl_session_cache    shared:SSL:20m;
    ssl_session_timeout  10m;

    ssl_protocols              TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers                RC4:HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers  on;

    # Proxy pass to servlet container

    location / {
      proxy_pass                http://localhost:8080/;
      proxy_redirect            off;
      proxy_set_header          Host               $host;
      proxy_set_header          X-Real-IP          $remote_addr;
      proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto  https;
      proxy_buffer_size         128k;
      proxy_buffers             8 128k;
      proxy_busy_buffers_size   256k;
      proxy_cookie_path         ~*^/(.*) "/$1; SameSite=Lax";
    }
  }
}
```

请注意最后一个`https`标头值，该值是通知
servlet容器，该请求通过HTTPS发出。为了
Tomcat还需要使用HTTPS正确生成`Location` URL头
在Tomcat`server.xml`文件中向连接器添加其他两个参数：

```xml
<Connector scheme="https" proxyPort="443" />
```

### 使用Nginx启用缓存

<!--DHIS2-SECTION-ID:install_enabling_caching_ssl_nginx-->

要求提供报告，图表，地图和其他与分析相关的资源
通常会花费一些时间来响应，并且可能会占用大量服务器
资源。为了缩短响应时间，请减少
服务器并隐藏潜在的服务器停机时间，我们可以引入缓存代理
在我们的服务器设置中。缓存的内容将存储在目录中
/ var / cache / nginx，最多将分配250 MB的存储空间。 Nginx的
将自动创建此目录。

```text
http {
  ..
  proxy_cache_path  /var/cache/nginx  levels=1:2  keys_zone=dhis:250m  inactive=1d;


  server {
    ..

    # Proxy pass to servlet container and potentially cache response

    location / {
      proxy_pass                http://localhost:8080/;
      proxy_redirect            off;
      proxy_set_header          Host               $host;
      proxy_set_header          X-Real-IP          $remote_addr;
      proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto  https;
      proxy_buffer_size         128k;
      proxy_buffers             8 128k;
      proxy_busy_buffers_size   256k;
      proxy_cookie_path         ~*^/(.*) "/$1; SameSite=Lax";
      proxy_cache               dhis;
    }
  }
}
```

> **重要**
>
>请注意，服务器端缓存会缩短DHIS2安全性
>从某种意义上说是功能，这些请求命中了服务器端缓存
>将直接从DHIS2控制范围之外的缓存中提供
>和servlet容器。这意味着请求URL可以是
>猜测并由未经授权的用户从缓存中检索报告。
>因此，如果您捕获敏感信息，请设置服务器端
>不建议使用缓存。

### Nginx的速率限制

<!--DHIS2-SECTION-ID:install_rate_limiting-->

DHIS 2中的某些Web API调用,如`analytics` API,是计算密集型的。因此，最好对这些API进行速率限制，以允许系统的所有用户充分利用服务器资源。速率限制可以通过`nginx`实现。有多种实现速率限制的方法，这旨在记录基于nginx的方法。

下面的 nginx 配置将限制 `analytics` Web API 的速率，并在 *http* 和 *location* 块级别具有以下元素（为了简洁起见，缩短了配置）：

```text
http {
  ..
  limit_req_zone $binary_remote_addr zone=limit_analytics:10m rate=5r/s;

  server {
    ..

    location ~ ^/api/(\d+/)?analytics(.*)$ {
      limit_req    zone=limit_analytics burst=20;
      proxy_pass   http://localhost:8080/api/$1analytics$2$is_args$args;
      ..
    }
  }
}
```

配置的各个元素可以描述为：

- * limit_req_zone $ binary_remote_addr *：速率限制是针对每个请求IP进行的。
- * zone = limit_analytics：20m *：Analytics API的速率限制区域，最多可容纳10 MB的请求IP地址。
- * rate = 20r / s *：每个IP每秒被授予5个请求。
- *location ~ ^/api/(\d+/)?analytics(.\*)$*：对分析 API 端点的请求受到速率限制。
- *burst=20*：最多 20 个请求的突发将排队等候，并在稍后时间提供服务；更多请求将导致`503`。

有关完整说明，请查阅[nginx文档]（https://www.nginx.com/blog/rate-limiting-nginx/）。

### 使用Nginx使资源可用

<!--DHIS2-SECTION-ID:install_making_resources_available_with_nginx-->

在某些情况下，希望公开发布某些资源
无需身份验证即可在Web上使用。一个例子是
当您想在Web API中进行与数据分析相关的资源时
在Web门户中可用。以下示例将允许访问
基本的图表，地图，报告，报告表和文档资源
通过将* Authorization * HTTP标头注入
请求。它将从请求中删除Cookie标头，
从响应中获取Set-Cookie标头，以避免更改
当前登录的用户。建议为此创建一个用户
目的仅给出所需的最低权限。授权
值可以通过Base64编码，并在用户名后附加一个
冒号和密码，并以“ Basic”作为前缀，更准确地说是“ Basic”
base64 \ _encode（username：password）“。它将检查使用的HTTP方法
用于请求并返回* 405方法不允许*（如果不是GET，则为其他方法）
检测到。

为此类公共用户设置一个单独的域可能是有利的
使用这种方法时。这是因为我们不想更改
已登录用户访问公共帐户时的凭据
资源。例如，当您的服务器部署在somedomain.com上时，
您可以在api.somedomain.com上设置专用的子域，并指向URL
从您的门户到此子域。

```text
http {
  ..

  server {
    listen       80;
    server_name  api.somedomain.com;

    location ~ ^/(api/(charts|chartValues|reports|reportTables|documents|maps|organisationUnits)|dhis-web-commons/javascripts|images|dhis-web-commons-ajax-json|dhis-web-mapping|dhis-web-visualizer) {
    if ($request_method != GET) {
        return 405;
      }

      proxy_pass         http://localhost:8080;
      proxy_redirect     off;
      proxy_set_header   Host               $host;
      proxy_set_header   X-Real-IP          $remote_addr;
      proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Proto  http;
      proxy_set_header   Authorization      "Basic YWRtaW46ZGlzdHJpY3Q=";
      proxy_set_header   Cookie             "";
      proxy_hide_header  Set-Cookie;
    }
  }
}
```


### 使用Nginx阻止特定的Android App版本

<!--DHIS2-SECTION-ID:install_making_resources_available_with_nginx-->

在某些情况下，系统管理员可能希望根据 DHIS2 应用程序的版本来阻止某些 Android 客户端。例如，如果现场用户尚未将其 Android 应用程序版本更新到特定版本，系统管理员希望阻止其访问以强制更新；或者完全相反的情况，系统管理员希望阻止应用程序的新版本，因为它们尚未经过测试。这可以通过在 `nginx` 配置文件中使用特定的 *User-Agent* 规则轻松实现。

```text
http {
  ..

  server {
    listen       80;
    server_name  api.somedomain.com;

    ..


    # Block the latest Android App as it has not been tested (August 2020 - Last version is 2.2.1)
    if ( $http_user_agent ~ 'com\.dhis2/1\.2\.1/2\.2\.1/' ) {
        return 403;
    }

    # Block Android 4.4 (API is 19) as all the users should have received the new tablets
    if ( $http_user_agent ~ 'com\.dhis2/.*/.*/Android_19' ) {
        return 403;
    }
    ..

    }

    ..
}
```

>注意
>
>对于上述方法的实现，请注意以下几点：
> *在版本1.1.0之前，未发送* User-Agent *字符串
> *从版本1.1.0到1.3.2，* User-Agent *遵循模式Dhis2 / AppVersion / AppVersion / Android_XX
> *从2.0.0版本开始，* User-Agent *版本遵循com.dhis2 / SdkVersion / AppVersion / Android_XX模式
>
> Android_XX是指Android API级别，即[此处]（https://developer.android.com/studio/releases/platforms）列出的Android版本。
>
> nginx使用[PCRE]（http://www.pcre.org/）进行正则表达式匹配

## DHIS2配置参考

<!--DHIS2-SECTION-ID:install_dhis2_configuration_reference-->

下面介绍了* dhis.conf *配置文件的完整配置选项集。配置文件应放置在* DHIS2 \ _HOME *环境变量指向的目录中。

> **注意**
>
>您不应尝试直接使用此配置文件，而应将其用作可用配置选项的参考。许多属性是可选的。

```属性
＃------------------------------------------------- ---------------------
＃PostgreSQL的数据库连接[必须]
＃------------------------------------------------- ---------------------

＃Hibernate SQL方言
connection.dialect = org.hibernate.dialect.PostgreSQLDialect

＃JDBC驱动程序类
connection.driver_class = org.postgresql.Driver

＃数据库连接URL
connection.url = jdbc：postgresql：dhis2

＃数据库用户名
connection.username = dhis

＃数据库密码（敏感）
connection.password = xxxx

＃数据库架构行为，可以是'validate'，'update'，'create'，'create-drop'
connection.schema =更新

＃连接池的最大大小（默认值：40）
connection.pool.max_size = 40

＃------------------------------------------------- ---------------------
＃服务器[必须]
＃------------------------------------------------- ---------------------

＃DHIS 2实例的基本URL
server.base.url = https://play.dhis2.org/dev

＃如果系统部署在HTTPS上，则可以启用安全设置，可以设置为“关闭”，“打开”
服务器.https =关闭

＃------------------------------------------------- ---------------------
＃系统[可选]
＃------------------------------------------------- ---------------------

＃系统模式仅适用于数据库读取操作，可以为“ off”，“ on”
system.read_only_mode =关

＃会话超时（以秒为单位），默认为3600
system.session.timeout = 3600

＃SQL查看受保护的表，可以为“ on”，“ off”
system.sql_view_table_protection =开启

＃------------------------------------------------- ---------------------
＃加密[可选]
＃------------------------------------------------- ---------------------

＃加密密码（敏感）
加密密码= xxxx

＃------------------------------------------------- ---------------------
＃文件存储[可选]
＃------------------------------------------------- ---------------------

＃文件存储提供程序，当前支持'filesystem'和'aws-s3'
filestore.provider =文件系统

＃目录/存储桶名称，文件系统上DHIS2_HOME下方的文件夹，AWS S3上的“存储桶”
filestore.container =文件

＃数据中心位置（不需要）
filestore.location = eu-west-1

＃公共身份/用户名
filestore.identity = dhis2-id

＃密钥/密码（敏感）
filestore.secret = xxxx

＃------------------------------------------------- ---------------------
＃LDAP [可选]
＃------------------------------------------------- ---------------------

＃LDAP服务器网址
ldap.url = ldaps：//300.20.300.20：636

＃LDAP管理器用户专有名称
ldap.manager.dn = cn = JohnDoe，ou = Country，ou = Admin，dc = hisp，dc = org

＃LDAP管理器用户密码（敏感）
ldap.manager.password = xxxx

＃LDAP条目专有名称搜索库
ldap.search.base = dc = hisp，dc = org

＃LDAP条目专有名称过滤器
ldap.search.filter =（cn = {0}）

＃------------------------------------------------- ---------------------
＃节点[可选]
＃------------------------------------------------- ---------------------

＃节点标识符，可选，在集群中有用
node.id ='node-1'

＃------------------------------------------------- ---------------------
＃监视[可选]
＃------------------------------------------------- ---------------------

＃DHIS2 API监控
monitoring.api.enabled =开

＃JVM监控
monitoring.jvm.enabled =开

＃数据库连接池监控
monitoring.dbpool.enabled =开

＃休眠监控，请勿在生产中使用
monitoring.hibernate.enabled =关

＃正常运行时间监控
monitoring.uptime.enabled =开

＃CPU监控
monitoring.cpu.enabled =开

＃------------------------------------------------- ---------------------
＃Analytics [可选]
＃------------------------------------------------- ---------------------

＃Analytics服务器端缓存过期时间（以秒为单位）
analytics.cache.expiration = 3600

＃------------------------------------------------- ---------------------
＃系统遥测[可选]
＃------------------------------------------------- ---------------------

＃系统监控URL
system.monitoring.url =

＃系统监控用户名
system.monitoring.username =

＃系统监控密码（敏感）
system.monitoring.password = xxxx
```

## 变更日志

<!--DHIS2-SECTION-ID:install_changelog-->

当某些实体在系统中更改时，DHIS2将条目写入更改日志。实体分为两类：_Aggregate_和_tracker_。 _aggregate_类别包括对汇总数据值的更改。 _tracker_类别包括对程序实例，程序临时所有权项，跟踪的实体属性值和跟踪的实体数据值的更改。

The changelog for both categories are enabled by default. You can control whether to enable or disable the changelog by category through the `dhis.conf` configuration file using the properties described below. Property options are `on` (default) and `off`.

更改日志的好处是能够查看已对数据执行的更改。禁用更改日志的好处是，通过避免将更改日志项写入数据库的成本以及较少使用的数据库存储，可以对性能进行较小的改进。建议启用变更日志，如果禁用它，则应格外小心。

```属性
＃汇总变更日志，可以为“ on”，“ off”
changelog.aggregate =开启

＃Tracker changelog，可以为“ on”，“ off”
changelog.tracker =开
```

## 应用日志

<!--DHIS2-SECTION-ID:install_application_logging-->

本节介绍DHIS 2中的应用程序日志记录。

### 日志文件

DHIS2应用程序日志输出定向到多个文件和位置。首先，将日志输出发送到标准输出。 Tomcat Servlet容器通常将标准输出输出到“ logs”下的文件：

     <tomcat-dir> /logs/catalina.out

其次，将日志输出写入到DHIS2 \ _HOME环境变量定义的DHIS2主目录下的“ logs”目录中。有一个主日志文件用于所有输出，而单独的日志文件用于各种输出
后台进程。主文件还包括后台进程日志。日志文件的上限为50 Mb，并且日志内容会连续添加。

     <DHIS2_HOME> /logs/dhis.log
     <DHIS2_HOME> /logs/dhis-analytics-table.log
     <DHIS2_HOME> /logs/dhis-data-exchange.log
     <DHIS2_HOME> /logs/dhis-data-sync.log

### 日志配置

为了覆盖默认的日志配置，您可以指定Java系统属性，其名称为* log4j.configuration *，并且该值指向类路径上的Log4j配置文件。如果要指向
文件系统（例如Tomcat外部）上的文件，您可以使用* file *前缀，例如像这样：

```属性
-Dlog4j.configuration =文件：/home/dhis/config/log4j.properties
```

可以设置Java系统属性，例如通过* JAVA \ _OPTS *环境变量或tomcat启动脚本中。

覆盖日志配置的第二种方法是在* dhis.conf *配置文件中指定日志记录属性。支持的属性是：

```属性
＃日志文件的最大大小，默认为'100MB'
logging.file.max_size = 250MB

＃最大滚动日志归档文件数，默认为0
logging.file.max_archives = 2
```

DHIS2最终将逐步淘汰到标准out / catalina.out的日志记录，因此建议依赖DHIS2 \ _HOME下的日志。

## 使用PostgreSQL数据库

<!--DHIS2-SECTION-ID:install_working_with_the_postgresql_database-->

管理DHIS2实例时的常见操作是转储和
恢复数据库。假设您要转储数据库（副本）
从安装部分进行设置，您可以调用以下命令：

    pg_dump dhis2 -U dhis -f dhis2.sql

第一个参数（dhis2）引用数据库的名称。的
第二个参数（dhis）指向数据库用户。最后一个论点
（dhis2.sql）是副本的文件名。如果您要压缩
您可以立即复制文件：

    pg_dump dhis2 -U dhis | gzip> dhis2.sql.gz

要在另一个系统上还原此副本，您首先需要创建一个
如安装部分所述清空数据库。你还需要
如果您创建了压缩版本，则将副本打包。您可以
调用：

    psql -d dhis2 -U dhis -f dhis2.sql
