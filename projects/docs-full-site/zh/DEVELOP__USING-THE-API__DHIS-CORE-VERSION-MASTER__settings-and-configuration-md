---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/master/src/developer/web-api/settings-and-configuration.md"
revision_date: '2024-02-14'
tags:
- Develop
- DHIS核心 主版
---

# 设置和配置 { #settings-and-configuration } 

## 系统设置 { #webapi_system_settings } 

您可以通过与
*系统设置*资源。系统设置是一个简单的键值对，
其中键和值都是纯文本字符串。保存或
更新系统设置，您可以向以下 URL 发出 *POST* 请求：

    / api / 33 / systemSettings / my-key？value = my-val

或者，您可以将设置值作为请求正文提交，
其中内容类型设置为“文本/纯文本”。例如，您可以使用
像这样卷曲：

```bash
curl "play.dhis2.org/demo/api/33/systemSettings/my-key" -d "My long value"
  -H "Content-Type: text/plain" -u admin:district
```

要批量设置系统设置，您可以发送带有
使用 POST 请求的每个系统设置键值对的属性和值：

```json
{
  "keyApplicationNotification": "Welcome",
  "keyApplicationIntro": "DHIS2",
  "keyApplicationFooter": "Read more at dhis2.org"
}
```

可以通过指定语言环境来设置可翻译设置键的翻译
可以指定的查询参数和翻译值
作为查询参数或与正文有效负载一起使用。查看示例网址：

    / api / 33 / systemSettings / <my-key>？locale = <my-locale>＆value = <my-translated-value>

您应该将 my-key 替换为您的真实密钥，并将 my-val 替换为您的真实密钥
价值。检索给定键的值（以 JSON 或纯文本形式）
您可以向以下 URL 发出 *GET* 请求：

    / api / 33 / systemSettings / my-key

或者，您可以将键指定为查询参数：

    / api / 33 / systemSettings？key =我的密钥

If a key is not found or marked confidential then a `404` response will be returned like so:

```json
{
    "httpStatus": "Not Found",
    "httpStatusCode": 404,
    "status": "ERROR",
    "message": "Setting does not exist or is marked as confidential",
    "errorCode": "E1005"
}
```

您可以通过重复键以 JSON 形式检索特定的系统设置
查询参数：

```bash
curl "play.dhis2.org/demo/api/33/systemSettings?key=keyApplicationNotification&key=keyApplicationIntro"
  -u admin:district
```

您可以使用GET请求检索所有系统设置：

    / api / 33 / systemSettings

要检索给定可翻译键的特定翻译，您可以指定
作为查询参数的语言环境：

    / api / 33 / systemSettings / <my-key>？locale = <my-locale>

如果存在，则返回给定语言环境的翻译。否则默认
值被返回。如果没有为可翻译键指定语言环境，则用户默认
UI 语言环境用于获取正确的翻译。如果给定的翻译不是
现在，再次返回默认值。

可翻译键的优先级如下：

    指定的区域设置>用户的默认UI区域设置> defaut值

要删除系统设置，您可以向 URL 发出 *DELETE* 请求
类似于上面用于检索的那个。如果一个可翻译的键是
使用，所有现有的翻译也将被删除。

仅删除可翻译键的特定翻译，相同的 URL
至于添加翻译应该使用，空值应该是
假如：

    / api / 33 / systemSettings / <my-key>？locale = <my-locale>＆value =

可用的系统设置在下面列出。

表：系统设置

| 键 | 描述 | 可翻译 |
|---|---|---|
| keyUiLocale | 用户界面的区域设置 | 不 |
| 密钥数据库区域设置 | 数据库的区域设置 | 不 |
| 关键分析显示属性 | 要在分析中显示的属性。默认值：“名称” | 不 |
| 键分析数字组分隔符 | 用于分隔数字组的分隔符 | 不 |
| keyCurrentDomainType | 尚未使用 | 不 |
| keyTracker仪表板布局 | 由跟踪器捕获使用 | 不 |
| 申请标题 | 应用程序标题。默认值：“DHIS2” | 是的 |
| 关键应用介绍 | 应用介绍 | 是的 |
| 关键应用通知 | 申请通知 | 是的 |
| 关键应用程序页脚 | 应用程序左页脚 | 是的 |
| 关键应用程序右页脚 | 应用程序右页脚 | 是的 |
| 键标志 | 应用标志 | 不 |
| 关键标志图像 | 仪表板菜单中使用的标志 | 不 |
| 启动模块 | 应用程序的起始页。默认值：“dhis-web-dashboard-integration” | 不 |
| 启动模块启用轻量级 | 用于渲染轻量级登陆页面的起始页面应用程序。默认值：“假” | 不 |
| 因子偏差 | 数据分析标准偏差因子。默认值：“2d” | 不 |
| 密钥电子邮件主机名 | 电子邮件服务器主机名 | 不 |
| 关键电子邮件端口 | 电子邮件服务器端口 | 不 |
| 关键电子邮件Tls | 使用 TLS。默认值：“真” | 不 |
| 关键电子邮件发送者 | 电子邮件发件人 | 不 |
| key电子邮件用户名 | 电子邮件服务器用户名 | 不 |
| 密钥电子邮件密码 | 电子邮件服务器密码 | 不 |
| 最小密码长度 | 密码最小长度 | 不 |
| 最大密码长度 | 密码最大长度 | 不 |
| 按键短信设置 | 短信配置 | 不 |
| keyCache策略 | 缓存策略。默认值：“CACHE_6AM_TOMORROW” | 不 |
| 密钥可缓存性 | 公共或私人。确定是否允许代理服务器缓存数据。 | 不 |
| 电话号码区号 | 电话号码 区号 | 不 |
| 多组织单位表格 | 启用多组织单位形式。默认值：“假” | 不 |
| 密钥配置 || 不 |
| 关键账户恢复 | 启用用户帐户恢复。默认值：“假” | 不 |
| keyLock多次登录失败 | 多次登录失败后启用锁定访问 | 不 |
| 谷歌分析UA | 用于跟踪网站使用情况的 Google Analytic UA 密钥 | 不 |
| 凭证过期 | 需要更改用户帐户密码。默认值：“0”（从不） | 不 |
| 凭证过期警报 | 当凭证接近到期日期时启用警报 | 不 |
| 凭证过期提醒天数 | 应在实际到期之前发送凭证到期警报的天数。默认值：28 | 不 |
| 账户到期提醒 | 向帐户因设置的到期日期而即将到期的用户发送警报电子邮件。默认值：“假” | 不 |
| 帐户过期天数 | 应在实际到期之前发送帐户到期警报的天数。默认值：7 | 不 |
| 密钥自助注册无验证码 | 自我注册不需要重新验证。默认值：“假” | 不 |
| 验证码秘密 | Google API 验证码秘密。默认值：dhis2 play 实例 API 密钥，但这仅适用于您的本地实例，不适用于生产环境。 | 不 |
| 验证码网站 | Google API 验证码网站。默认值：dhis2 play 实例 API 站点，但这仅适用于您的本地实例，不适用于生产环境。 | 不 |
| keyCanGrantOwnUserAuthorityGroups | 允许用户授予自己的用户角色。默认值：“假” | 不 |
| keySqlViewMaxLimit | SQL 视图的最大限制 | 不 |
| keyRespectMetaDataStartEndDatesInAnalyticsTableExport | 当“true”时，分析将跳过不在类别选项的开始和结束日期内的数据。默认值：“假” | 不 |
| keySkipDataTypeValidationInAnalyticsTableExport | 在分析表导出中跳过数据类型验证 | 不 |
| 键自定义登录页面徽标 | 自定义登录页面的徽标 | 不 |
| 键自定义顶部菜单徽标 | 自定义顶部菜单的徽标 | 不 |
| keyCacheAnalyticsDataYearThreshold | 早于该值（以年为单位）的分析数据将始终被缓存。 “0”禁用此设置。默认值：0 | 不 |
| 分析财务年度开始 | 设置财政年度开始。默认值：十月 | 不 |
| keyIgnoreAnalyticsApprovalYearThreshold | “0”检查所有数据的批准。 “-1”禁用批准检查。 “1”或更高级别检查所有晚于“1”年的数据的批准情况。 | 不 |
| keyAnalyticsMaxLimit | 分析记录的最大数量。默认值：“50000” | 不 |
| keyAnalyticsPeriodYearsOffset | Defines the years' offset to be used in the analytics export process. If the year of a respective date is out of the offset the system sends back a warning message during the process. At this point, the period generation step is skipped. ie.: suppose the system user sets the offset value to `5`, and we are in the year 2023. It means that analytics will accept exporting dates from 2018 (inclusive) to 2028 (inclusive). Which translates to: [2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028]. NOTE: The offset will have a significant influence on resource usage. Higher values will trigger higher usage of memory RAM/HEAP and CPU. Setting negative numbers to this key will disable any kind of validation (which means no warnings) and the internal range of years will be used (1970 to current year plus 10) Default: 22 | 不 |
| keyDatabaseServerCpus | Number of database server CPUs. Default: "0" (Automatic) | 不 |
| keyLastSuccessfulAnalyticsTablesRuntime | Keeps timestamp of last successful analytics tables run | 不 |
| keyLastSuccessfulLatestAnalyticsPartitionRuntime | Keeps timestamp of last successful latest analytics partition run | 不 |
| keyLastMonitoringRun | Keeps timestamp of last monitoring run | 不 |
| keyLastSuccessfulDataSynch | Keeps timestamp of last successful data values synchronization | 不 |
| keyLastSuccessfulEventsDataSynch | Keeps timestamp of last successful Event programs data synchronization | 不 |
| keyLastCompleteDataSetRegistrationSyncSuccess | Keeps timestamp of last successful completeness synchronization | 不 |
| syncSkipSyncForDataChangedBefore | Specifies timestamp used to skip synchronization of all the data changed before this point in time | 不 |
| keyLastSuccessfulAnalyticsTablesUpdate | Keeps timestamp of last successful analytics tables update | 不 |
| keyLastSuccessfulLatestAnalyticsPartitionUpdate | Keeps timestamp of last successful latest analytics partition update | 不 |
| keyLastSuccessfulResourceTablesUpdate | Keeps timestamp of last successful resource tables update | 不 |
| keyLastSuccessfulSystemMonitoringPush | Keeps timestamp of last successful system monitoring push | 不 |
| keyLastSuccessfulMonitoring | Keeps timestamp of last successful monitoring | 不 |
| keyNextAnalyticsTableUpdate | Keeps timestamp of next analytics table update | 不 |
| helpPageLink | Link to help page. Default: "[https://dhis2.github.io/dhis2-docs/master/en/user/html/dhis2_user_manual_en.html](http://dhis2.github.io/dhis2-docs/master/en/user/html/dhis2_user_manual_en.html) | 不 |
| keyAcceptanceRequiredForApproval | Acceptance required before approval. Default: "false" | 不 |
| keySystemNotificationsEmail | Where to email system notifications | 不 |
| keyAnalysisRelativePeriod | Default relative period for analysis. Default: "LAST_12_MONTHS" | 不 |
| keyRequireAddToView | Require authority to add to view object lists. Default: "false" | 不 |
| keyAllowObjectAssignment | Allow assigning object to related objects during add or update. Default: "false" | 不 |
| keyUseCustomLogoFront | Enables the usage of a custom logo on the front page. Default: "false" | 不 |
| keyUseCustomLogoBanner | Enables the usage of a custom banner on the website. Default: "false" | 不 |
| keyDataImportStrictPeriods || 不 |
| keyDataImportStrictPeriods | Require periods to match period type of data set. Default: "false" | 不 |
| keyDataImportStrictDataElements | Require data elements to be part of data set. Default: "false" | 不 |
| keyDataImportStrictCategoryOptionCombos | Require category option combos to match category combo of data element. Default: "false" | 不 |
| keyDataImportStrictOrganisationUnits | Require organisation units to match assignment of data set. Default: "false" | 不 |
| keyDataImportStrictAttributeOptionsCombos | Require attribute option combis to match category combo of data set. Default: "false" | 不 |
| keyDataImportStrictDataSetApproval | true: If an already approved dataset exists for a given data value entry is not permitted; false: If a not yet approved dataset exists for a given data value entry is permitted. Default: "true" | 不 |
| keyDataImportStrictDataSetLocking | true: If a dataset exists for which entry expired without lock exception for a given data value entry is not permitted; false: If a dataset exists for which entry is not expired or a lock exception applies for a given data value entry is permitted. Default: "true" | 不 |
| keyDataImportStrictDataSetInputPeriods | true: If a dataset exists for which the input period is closed for a given data value entry is not permitted; false: If a dataset exists for which data the input period is open for a given data value entry is permitted. Default: "true" | 不 |
| keyDataImportRequireCategoryOptionCombo | Require category option combo to be specified. Default: "false" | 不 |
| keyDataImportRequireAttributeOptionCombo | Require attribute option combo to be specified. Default: "false" | 不 |
| keyCustomJs | Custom JavaScript to be used on the website | 不 |
| keyCustomCss | Custom CSS to be used on the website | 不 |
| keyCalendar | The calendar type. Default: "iso8601". | 不 |
| keyDateFormat | The format in which dates should be displayed. Default: "yyyy-MM-dd". | 不 |
| keyStyle | The style used on the DHIS2 webpages. Default: "light_blue/light_blue.css". | 不 |
| keyRemoteInstanceUrl | Url used to connect to remote instance | 不 |
| keyRemoteInstanceUsername | Username used to connect to remote DHIS2 instance | 不 |
| keyRemoteInstancePassword | Password used to connect to remote DHIS2 instance | 不 |
| keyGoogleMapsApiKey | Google Maps API key | 不 |
| keyGoogleCloudApiKey | Google Cloud API key | 不 |
| keyLastMetaDataSyncSuccess | Keeps timestamp of last successful metadata synchronization | 不 |
| keyVersionEnabled | Enables metadata versioning | 不 |
| keyMetadataFailedVersion | Keeps details about failed metadata version sync | 不 |
| keyMetadataLastFailedTime | Keeps timestamp of last metadata synchronization failure | 不 |
| keyLastSuccessfulScheduledProgramNotifications || 不 |
| keyLastSuccessfulScheduledDataSetNotifications || 不 |
| keyRemoteMetadataVersion | Details about metadata version of remote instance | 不 |
| keySystemMetadataVersion | Details about metadata version of the system | 不 |
| keyStopMetadataSync | Flag to stop metadata synchronization | 不 |
| keyFileResourceRetentionStrategy | 确定与已删除或更新的值相关联的文件资源保留的时间长度。NONE，THREE_MONTHS，ONE_YEAR或FOREVER。 | 不 |
| syncMaxRemoteServerAvailabilityCheckAttempts | Specifies how many times the availability of remote server will be checked before synchronization jobs fail. | 不 |
| syncMaxAttempts | Specifies max attempts for synchronization jobs | 不 |
| syncDelayBetweenRemoteServerAvailabilityCheckAttempts | Delay between remote server availability checks | 不 |
| lastSuccessfulDataStatistics | Keeps timestamp of last successful data analytics | 不 |
| keyHideDailyPeriods | Not in use | 不 |
| keyHideWeeklyPeriods || 不 |
| keyHideBiWeeklyPeriods | Boolean flag used to hide/show bi-weekly periods | 不 |
| keyHideMonthlyPeriods || 不 |
| keyHideBiMonthlyPeriods || 不 |
| keyGatherAnalyticalObjectStatisticsInDashboardViews | Whether to gather analytical statistics on objects when they are viewed within a dashboard | 不 |
| keyCountPassiveDashboardViewsInUsageAnalytics | Counts "passive" dashboard views (not selecting a particular dashboard) in usage analytics | 不 |
| keyDashboardContextMenuItemSwitchViewType | Allow users to switch dashboard favorites' view type | 是的 |
| keyDashboardContextMenuItemOpenInRelevantApp | Allow users to open dashboard favorites in relevant apps | 是的 |
| keyDashboardContextMenuItemShowInterpretationsAndDetails | Allow users to show dashboard favorites' interpretations and details | 是的 |
| keyDashboardContextMenuItemViewFullscreen | Allow users to view dashboard favorites in fullscreen | 是的 |
| jobsRescheduleAfterMinutes | If a job is in state `RUNNING` for this amount of minutes or longer without making progress in form of updating its `lastAlive` timestamp the job is considered stale and reset to `SCHEDULED` state | 不 |
| jobsCleanupAfterMinutes | A "run once" job is deleted when this amount of minutes has passed since it finished successful or unsuccessful | 不 |                                                                                                                                                                                                                        
| jobsMaxCronDelayHours | A CRON expression triggered job will only trigger in the window between its target time of the day and this amount of hours later. If it wasn't able to run in that window the execution is skipped and next execution according to the CRON expression is the next target execution | 不 |
| jobsLogDebugBelowSeconds | A job with an execution interval below this number of seconds logs its information on debug rather than info | 不 |
| keyParallelJobsInAnalyticsTableExport | Returns the number of parallel jobs to use for processing analytics tables. It takes priority over "keyDatabaseServerCpus". Default: -1 | 不 |

## 用户设置 { #webapi_user_settings } 

您可以通过与 *userSettings* 交互来操作用户设置
资源。用户设置是一个简单的键值对，其中键
并且值是纯文本字符串。用户设置将链接到
已针对 Web API 请求进行身份验证的用户。返回列表
在所有用户设置中，您可以向以下 URL 发送 *GET* 请求：

    / api / 33 / userSettings

用户未设置的用户设置，将回退到等效的
系统设置。只返回用户明确设置的值，
您可以将 ?useFallback=false 附加到上述 URL，如下所示：

    / api / 33 / userSettings？useFallback = false

要为当前经过身份验证的用户保存或更新设置，您可以
向以下 URL 发出 *POST* 请求：

    / api / 33 / userSettings / my-key？value = my-val

您可以指定要为其显式保存设置的用户
这个语法：

    / api / 33 / userSettings / my-key？user = username＆value = my-val

或者，您可以将设置值作为请求正文提交，
其中内容类型设置为“文本/纯文本”。例如，您可以使用
像这样卷曲：

```bash
curl "https://play.dhis2.org/demo/api/33/userSettings/my-key" -d "My long value"
  -H "Content-Type: text/plain" -u admin:district
```

例如，要将当前用户的 UI 语言环境设置为法语，您
可以使用以下命令。

```bash
curl "https://play.dhis2.org/demo/api/33/userSettings/keyUiLocale?value=fr" 
  -X POST -u admin:district
```

您应该将 my-key 替换为您的真实密钥，并将 my-val 替换为您的真实密钥
价值。要以纯文本形式检索给定键的值，您可以
对以下 URL 的 *GET* 请求：

    / api / 33 / userSettings / my-key

要删除用户设置，您可以向 URL 发出 *DELETE* 请求
类似于上面用于检索的那个。

可用的系统设置在下面列出。



Table: User settings

| 键 | 选项 | 描述 |
|---|---|---|
| keyStyle | light_blue/light_blue.css &#124; green/green.css &#124; vietnam/vietnam.css | User interface stylesheet. |
| keyMessageEmailNotification | false &#124; true | Whether to send email notifications. |
| keyMessageSmsNotification | false &#124; true | Whether to send SMS notifications. |
| keyUiLocale | Locale value | User interface locale. |
| keyDbLocale | Locale value | Database content locale. |
| keyAnalysisDisplayProperty | name &#124; shortName | Property to display for metadata in analysis apps. |
| keyCurrentDomainType | all &#124; aggregate &#124; tracker | Data element domain type to display in lists. |
| keyAutoSaveCaseEntryForm | 假的&#124;真的 | Save case entry forms periodically. |
| keyAutoSaveTrackedEntityForm | false &#124; true | Save person registration forms periodically. |
| keyAutoSaveDataEntryForm | false &#124; true | Save aggregate data entry forms periodically. |
| keyTrackerDashboardLayout | false &#124; true | Tracker dasboard layout. |

## 组态 { #webapi_configuration } 

要访问配置，您可以与 *configuration* 交互
资源。您可以通过 *Accept* 标头获取 XML 和 JSON 响应
或使用 .json 或 .xml 扩展名。你可以*GET*所有属性
配置来自：

    / api / 33 /配置

您可以将 *GET* 和 *POST* 请求发送到以下特定
资源：

    GET /api/33/configuration/systemId

    GET POST DELETE /api/configuration/feedbackRecipients

    GET POST DELETE /api/configuration/offlineOrganisationUnitLevel

    GET POST /api/configuration/infrastructuralDataElements

    GET POST /api/configuration/infrastructuralIndicators

    GET POST /api/configuration/infrastructuralPeriodType

    GET POST DELETE /api/configuration/selfRegistrationRole

    GET POST DELETE /api/configuration/selfRegistrationOrgUnit

    GET POST /api/facilityOrgUnitGroupSet

    GET POST /api/facilityOrgUnitLevel

For the CORS allowlist configuration you can make a POST request with an
array of URLs to allowlist as payload using "application/json" as
content-type, for instance:

```json
["www.google.com", "www.dhis2.org", "www.who.int"]
```

    GET POST /api/33/configuration/corsAllowlist

对于 POST 请求，配置值应作为请求发送
有效载荷为文本。下表显示了适当的配置
每个属性的值。



Table: Configuration values

| Configuration property | 值 |
|---|---|
| feedbackRecipients | User group ID |
| offlineOrganisationUnitLevel | Organisation unit level ID |
| infrastructuralDataElements | Data element group ID |
| infrastructuralIndicators | Indicator group ID |
| infrastructuralPeriodType | Period type name (e.g. "Monthly") |
| selfRegistrationRole | User role ID |
| selfRegistrationOrgUnit | Organisation unit ID |
| smtpPassword | SMTP email server password |
| remoteServerUrl | URL to remote server |
| remoteServerUsername | Username for remote server authentication |
| remoteServerPassword | Password for remote server authentication |
| corsAllowlist | JSON list of URLs |

例如，要设置反馈接收者用户组，您可以调用
以下 curl 命令：

```bash
curl "localhost/api/33/configuration/feedbackRecipients" -d "wl5cDMuUhmF"
  -H "Content-Type:text/plain"-u admin:district
```

## 只读配置 { #webapi_readonly_configuration_interface } 

要访问所有配置设置和属性，您可以使用只读配置端点。这将提供对 *UserSettings、SystemSettings 和 DHIS2 服务器配置*的只读访问权限。您可以通过 *Accept* 标头获得 XML 和 JSON 响应。您可以*获取*所有设置：

    / api / 33 / configuration / settings

您可以根据设置类型获得过滤设置：

    GET / api / 33 / configuration / settings / filter？type = USER_SETTING

    GET / api / 33 / configuration / settings / filter？type = CONFIGURATION

可以提供一种以上的类型：

    GET /api/33/configuration/settings/filter?type=USER_SETTING&type=SYSTEM_SETTING



Table: SettingType values

| 值 | 描述 |
|---|---|
| 用户_设置 | To get user settings |
| SYSTEM_SETTING | To get system settings |
| CONFIGURATION | To get DHIS server settings |

> **注意**
>
>将在输出中提供机密字段，但没有值。

## 代币 { #webapi_tokens } 

*tokens* 资源提供对各种服务的访问令牌。

### Google服务帐号 { #webapi_tokens_google_service_account } 

您可以使用以下命令检索 Google 服务帐户 OAuth 2.0 访问令牌
对以下资源的 GET 请求。

    GET /api/tokens/google

令牌将在一定时间内有效，之后
必须从此资源请求另一个令牌。响应
包含匹配令牌到期的缓存控制标头。这
响应将包含以下 JSON 格式的属性。



Table: Token response

| Property | 描述 |
|---|---|
| access_token | The OAuth 2.0 access token to be used when authentication against Google services. |
| expires_in | The number of seconds until the access token expires, typically 3600 seconds (1 hour). |
| client_id | The Google service account client id. |

假定已为DHIS2设置并配置了Google服务帐户。请查阅安装指南以获取更多信息。

## 静态内容 { #webapi_static_content } 

*staticContent* 资源允许您上传和检索自定义
DHIS2 中使用的徽标。该资源允许用户上传带有
关联的密钥，稍后可以使用密钥检索。只有 PNG
文件受支持，只能上传到`logo_banner` 和
`logo_front` 键。

    / api / 33 / staticContent



Table: Static content keys

| 键 | 描述 |
|---|---|
| logo_banner | Logo in the application top menu on the left side. |
| logo_front | Logo on the login-page above the login form. |

要上传文件，请将带有 *POST* 请求的文件发送至：

    POST / api / 33 / staticContent / <key>

请求将logo.png上传到`logo_front`键的示例：

```bash
curl -F "file=@logo.png;type=image/png" "https://play.dhis2.org/demo/api/33/staticContent/logo_front"
  -X POST -H "Content-Type: multipart/form-data" -u admin:district
```

使用相同的密钥上传多个文件将覆盖现有的
文件。这样，检索任何给定键的文件只会返回
最新上传的文件。

要检索徽标，您可以*获取*以下内容：

    GET /api/33/staticContent/<key>

Example of requests to retrieve the file stored for `logo_front`:

* 将“Accept: text/html”添加到 HTTP 标头。*__ 在这种情况下，如果未定义任何内容，端点将返回默认图像。找到自定义或默认图像时将返回图像流。

```bash
curl "https://play.dhis2.org/demo/api/33/staticContent/logo_front" 
  -H "Accept: text/html" -L -u admin:district
```

* 将“Accept: application/json”添加到 HTTP 标头。*__ 设置此参数后，如果未找到自定义徽标，端点将永远不会返回默认图像。相反，将返回一条错误消息。找到自定义图像后，此端点将返回一个 JSON 响应，其中包含相应图像的路径/URL。

```bash
curl "https://play.dhis2.org/demo/api/33/staticContent/logo_front" 
  -H "Accept: application/json" -L -u admin:district
```

成功和错误消息将如下所示：

```json
{
  "images": {
    "png": "http://localhost:8080/dhis/api/staticContent/logo_front"
  }
}
```

```json
{
  "httpStatus": "Not Found",
  "httpStatusCode": 404,
  "status": "ERROR",
  "message": "No custom file found."
}
```

要使用自定义标志，您需要启用相应的系统
通过将其设置为 *true* 来设置。如果相应的设置为false，
将提供默认徽标。

## 用户界面定制 { #webapi_ui_customization } 

要自定义 DHIS2 应用程序的 UI，您可以插入自定义
JavaScript 和 CSS 样式通过 *files* 资源。

```
POST删除后/ api / 33 / files / script
POST GET DELETE / api / 33 / files / style
```

通过此资源插入的 JavaScript 和 CSS 内容将由
DHIS2 网络应用程序。这在某些情况下特别有用：

  - 覆盖 DHIS2 应用程序的 CSS 样式，例如
    登录页面或主页。

  - 定义几个自定义的通用 JavaScript 函数
    数据输入表单和基于 HTML 的报告。

  - 包括用于自定义数据输入表单的 CSS 样式和
    基于 HTML 的报告。

### Java脚本 { #webapi_customization_javascript } 

要从名为 *script.js* 的文件中插入 Javascript，您可以进行交互
使用带有 POST 请求的 *files/script* 资源：

```bash
curl --data-binary @script.js "localhost/api/33/files/script"
  -H "Content-Type:application/javascript" -u admin:district
```

请注意，我们使用 `--data-binary` 选项来保留格式
文件内容。您可以使用 GET 请求获取 JavaScript 内容：

    / api / 33 / files / script

要删除JavaScript内容，可以使用DELETE请求。

### 的CSS { #webapi_customization_css } 

要从名为 *style.css* 的文件插入 CSS，您可以与
带有 POST 请求的 *files/style* 资源：

```bash
curl --data-binary @style.css "localhost/api/33/files/style"
  -H "Content-Type:text/css" -u admin:district
```

您可以通过GET请求获取CSS内容：

    / api / 33 / files / style

要删除JavaScript内容，可以使用DELETE请求。

