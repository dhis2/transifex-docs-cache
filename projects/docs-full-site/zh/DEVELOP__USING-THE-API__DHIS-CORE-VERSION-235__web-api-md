---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.35/src/developer/web-api.md"
revision_date: "2021-06-14"
---

# 网络API { #webapi }

Web API 是一个组件，它使外部系统成为可能
访问和操作存储在 DHIS2 实例中的数据。更多的
准确地说，它为广泛的
为第三方等应用程序公开数据和服务方法
软件客户端、门户网站和内部 DHIS2 模块。

## 介绍 { #webapi_introduction }

Web API 遵循 REST 背后的许多原则
建筑风格。提几个重要的：

1.  基本构建块被称为_资源_。资源可以是暴露在 Web 上的任何内容，从文档到业务流程 - 客户端可能想要与之交互的任何内容。资源的信息方面可以通过资源_表示_来检索或交换。表示是任何给定时间资源状态的视图。例如，DHIS2 中的_reportTable_ 资源表示特定参数集的聚合数据的表格报告。该资源可以以多种表示格式进行检索，包括 HTML、PDF 和 MS Excel。

2.  所有资源都可以通过_URI_（也称为_URL_）唯一标识。所有资源都有默认表示。您可以通过提供 _Accept_ HTTP 标头、文件扩展名或 _format_ 查询参数来表明您对特定表示感兴趣。因此，为了检索报告表的 PDF 表示形式，您可以提供 _Accept: application/pdf_ 标头或将 _.pdf_ 或 _?format=pdf_ 附加到您的请求 URL。

3.  与 API 交互需要正确使用 HTTP _methods_ 或 _verbs_。这意味着对于资源，当您想要检索它时，您必须发出 _GET_ 请求；当您想要创建资源时，您必须发出 _POST_ 请求；当您想要更新它时，您必须发出 _PUT_ 请求；当您想要删除它时，您必须发出 _DELETE_ 请求。因此，如果您想检索报告表的默认表示形式，您可以向例如发送 GET 请求。 _/reportTable/iu8j/hYgF6t_，其中最后一部分是报告表标识符。

4.  资源表示是_可链接的_，这意味着表示通过将链接嵌入到自身中来宣传与当前资源相关的其他资源（请注意，您需要在字段过滤器中请求_href_才能使其工作。此功能极大地提高了可用性和稳健性例如，您可以使用您喜欢的表示格式通过嵌入链接从 _reportTable_ 资源轻松导航到与报告表关联的指标。

虽然所有这些听起来可能很复杂，但 Web API 实际上非常
使用简单。我们将继续在一个实际的例子中
分钟。

## 认证方式 { #webapi_authentication }

DHIS2 Web API 支持两种身份验证协议，Basic
身份验证和 OAuth 2. 您可以验证并获取有关
通过向以下对象发出 GET 请求，当前已通过身份验证的用户
网址：

    / api / 33 / me

以及有关权限的更多信息（如果用户有特定的
权限）通过使用端点：

    / api / 33 / me / authorities
    / api / 33 / me / authorities / ALL

### 基本认证 { #webapi_basic_authentication }

DHIS2 Web API 支持_基本身份验证_。基本身份验证是一种客户端通过 HTTP 向 Web 服务器发送登录凭据的技术。从技术上讲，用户名附加了冒号和密码，采用 Base64 编码，前缀为 Basic，并作为 _Authorization_ HTTP 标头的值提供。更正式地说是：

    授权：基本base64encode（用户名：password）

大多数网络感知开发环境都提供对基本身份验证的支持，例如 _Apache HttpClient_ 和 _Spring RestTemplate_。需要注意的是，这种身份验证方案不提供安全性，因为用户名和密码以纯文本形式发送，很容易被攻击者观察到。仅当服务器使用 SSL/TLS (HTTPS) 加密与客户端的通信时，才建议使用 Basic。为了提供与 Web API 的安全交互，请将此视为硬性要求。

### 两因素验证 { #webapi_2fa }

DHIS2 支持两因素身份验证。这可以为每个用户启用。
启用后，用户将被要求在登录时输入 2FA 代码。您
可以阅读更多关于 2FA [这里](https://www.google.com/landing/2step/)。

### OAuth2 { #webapi_oauth2 }

DHIS2 支持 _OAuth2_ 身份验证协议。 OAuth2 是一种开放的授权标准，允许第三方客户端代表 DHIS2 用户进行连接，并为后续对 Web API 的请求获取可重用的_承载令牌_。 DHIS2 不支持细粒度的 OAuth2 角色，而是根据 DHIS2 用户的用户角色提供应用程序访问。

您要允许 OAuth 2 身份验证的每个客户端都必须在 DHIS2 中注册。要添加新的 OAuth2 客户端，请转到用户界面中的`应用程序 > 设置 > OAuth2 客户端`，单击 _Add new_ 并输入所需的客户端名称和授权类型。

#### 使用Web API添加客户端 { #adding-a-client-using-the-web-api }

可以通过 Web API 添加 OAuth2 客户端。例如，我们可以
发送这样的有效载荷：

```json
{
    "name": "OAuth2 Demo Client",
    "cid": "demo",
    "secret": "1e6db50c-0fee-11e5-98d0-3c15c2c6caf6",
    "grantTypes": ["password", "refresh_token", "authorization_code"],
    "redirectUris": ["http://www.example.org"]
}
```

可用以下命令发送有效负载：

```bash
SERVER="https://play.dhis2.org/dev"
curl -X POST -H "Content-Type: application/json" -d @client.json
  -u admin:district "$SERVER/api/oAuth2Clients"
```

我们将使用此客户端作为下一个赠款类型示例的基础。

#### 授权类型密码 { #webapi_oauth2_password }

所有授权类型中最简单的是 _password_ 授权类型。此授权类型类似于基本身份验证，因为它要求客户端收集用户的用户名和密码。作为示例，我们可以使用我们的演示服务器：

```bash
SERVER="https://play.dhis2.org/dev"
SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"

curl -X POST -H "Accept: application/json" -u demo:$SECRET "$SERVER/uaa/oauth/token"
  -d grant_type=password -d username=admin -d password=district
```

这将给您类似的响应：

```json
{
    "expires_in": 43175,
    "scope": "ALL",
    "access_token": "07fc551c-806c-41a4-9a8c-10658bd15435",
    "refresh_token": "a4e4de45-4743-481d-9345-2cfe34732fcc",
    "token_type": "bearer"
}
```

现在，我们将专注于 `access_token`，这就是我们
将用作我们的身份验证（承载）令牌。例如，我们将得到
使用我们的令牌的所有数据元素：

```bash
SERVER="https://play.dhis2.org/dev"
curl -H "Authorization: Bearer 07fc551c-806c-41a4-9a8c-10658bd15435" "$SERVER/api/33/dataElements.json"
```

#### 授予类型refresh_token { #webapi_refresh_token }

通常，访问令牌的有效性有限。你可以看看
在上一个示例中响应的 `expires_in` 属性处
了解令牌何时到期。要获得新的`access_token`，您
可以再次往返服务器并使用`refresh_token`
这允许您获得更新的令牌而无需要求
再次使用用户凭据。

```bash
SERVER="https://play.dhis2.org/dev"
SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"
REFRESH_TOKEN="a4e4de45-4743-481d-9345-2cfe34732fcc"

curl -X POST -H "Accept: application/json" -u demo:$SECRET "$SERVER/uaa/oauth/token"
  -d "grant_type=refresh_token" -d "refresh_token=$REFRESH_TOKEN"
```

响应与获得令牌开始时的响应完全相同。

#### 授予类型authorization_code { #webapi_authorization_code }

如果您不想的话，建议使用授权代码授予类型
在外部存储用户凭据。它允许DHIS2收集
用户名/密码直接来自用户而不是客户端
收集它们，然后代表用户进行身份验证。请成为
注意这种方法使用了客户端的` redirectUris`部分
有效载荷。

第 1 步：使用 Web 浏览器访问以下 URL。如果你有不止一个
重定向 URI，您可能需要添加 `&redirect_uri=http://www.example.org`
到网址：

```bash
SERVER="https://play.dhis2.org/dev"
$SERVER/uaa/oauth/authorize?client_id=demo&response_type=code
```

第 2 步：在用户成功登录并接受您的
客户端访问，它将重定向回您的重定向 uri，如下所示：

    http://www.example.org/?code=XYZ

第 3 步：这一步类似于我们在密码授予类型中所做的，
使用给定的代码，我们现在将要求访问令牌：

```bash
SERVER="https://play.dhis2.org/dev"
SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"

curl -X POST -u demo:$SECRET -H "Accept: application/json" $SERVER/uaa/oauth/token
-d "grant_type=authorization_code" -d "code=XYZ"
```

## 错误和信息消息 { #webapi_error_info_messages }

Web API 对所有错误/警告和
信息性消息：

```json
{
    "httpStatus": "Forbidden",
    "message": "You don't have the proper permissions to read objects of this type.",
    "httpStatusCode": 403,
    "status": "ERROR"
}
```

这里我们可以从消息中看到用户试图访问我无权访问的资源。它使用 http 状态代码 403、http 状态消息_forbidden_ 和描述性消息。

 <table>
 <caption> WebMessage属性</caption>
 <colgroup>
 <col style="width: 13%" />
 <col style="width: 86%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>名称</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> httpStatus </td>
 <td>此响应的HTTP状态消息，有关更多信息，请参阅RFC 2616（第10节）。 </td>
 </tr>
 <tr class="even">
 <td> httpStatusCode </td>
 <td>此响应的HTTP状态代码，有关更多信息，请参阅RFC 2616（第10节）。 </td>
 </tr>
 <tr class="odd">
 <td>状态</td>
 <td>DHIS2状态，可能的值是，可能的值为<em> OK </em> |<em>警告</em> |  <em>错误</em>，其中`确定`表示一切成功，`错误`表示操作未完成，`警告`表示操作部分成功，如果消息包含`响应`属性，请在此处查找更多信息。 </td>
 </tr>
 <tr class="even">
 <td>消息</td>
 <td>一个用户友好的消息，告诉操作是否成功。 </td>
 </tr>
 <tr class="odd">
 <td> devMessage </td>
 <td>更技术性，对开发人员友好的消息（当前未使用）。 </td>
 </tr>
 <tr class="even">
 <td>响应</td>
 <td>将来扩展到WebMessage格式的扩展点。开始使用时将记录在案。 </td>
 </tr>
 </tbody>
 </table>

## 日期和期间格式 { #webapi_date_perid_format }

在整个 Web API 中，我们指的是日期和期间。日期格式
是：

    年-月-日

例如，如果要表达2014年3月20日，则必须使用_2014-03-20_。

下表描述了期间格式（也可在
API 端点`/api/periodTypes`)

 <table style="width:100%;">
 <caption>期间格式</caption>
 <colgroup>
 <col style="width: 24%" />
 <col style="width: 21%" />
 <col style="width: 18%" />
 <col style="width: 35%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>间隔</th>
 <th>格式</th>
 <th>示例</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>一天</td>
  <td><em> yyyyMMdd </em> </td>
  <td>20040315 </td>
  <td>2004年3月15日</td>
 </tr>
 <tr class="even">
 <td>周 </td>
  <td><em> yyyy </em> W <em> n </em> </td>
  <td>2004W10 </td>
 <td>2004年第10周</td>
 </tr>
 <tr class="odd">
<td> 星期三</td>
 <td> <em> yyyy </em> WedW<em>  n</em>  </td>
  <td>2015WedW5 </td>
 <td>第5周，开始周三</td>
 </tr>
 <tr class="even">
 <td>星期四</td>
   <td><em>yyyy </em> ThuW <em> n </em> </td>
<td>  2015ThuW6 </td>
 <td>第6周，开始周四</td>
 </tr>
 <tr class="odd">
 <td>每周周六</td>
  <td><em> yyyy </em> SatW <em> n </em> </td>
<td>  2015SatW7 </td>
<td> 第7周，开始周六</td>
 </tr>
 <tr class="even">
 <td>星期天</td>
  <td><em> yyyy </em> SunW <em> n </em> </td>
  <td>2015SunW8</td> 
 <td>第8周，开始周日</td>
 </tr>
 <tr class="odd">
<td> 双周</td>
 <td> <em> yyyy </em> BiW <em> n </em></td> 
 <td> 2015BiW1 </td>
 <td>第1-2周20015 </td>
 </tr>
 <tr class="even">
 <td>月</td>
   <td><em>yyyyMM </em> </td>
  <td>200403 </td>
  <td>2004年3月</td>
 </tr>
 <tr class="odd">
 <td>双月</td>
 <td> <em> yyyyMM </em> B </td>
  <td>200401B </td>
  <td>2004年1月至2月</td>
 </tr>
 <tr class="even">
 <td>季度</td>
  <td><em> yyyy </em> Q <em> n </em> </td>
 <td> 2004Q1 </td>
<td>  2004年1月至3月</td>
 </tr>
 <tr class="odd">
<td> 六个月</td>
  <td><em> yyyy </em> S <em> n </em> </td>
<td>  2004S1 </td>
  <td>2004年1月至6月</td>
 </tr>
 <tr class="even">
 <td>六个月的4月</td>
   <td><em>yyyy </em> AprilSn </td>
  <td>2004AprilS1 </td>
 <td>2004年4月至9月</td>
 </tr>
 <tr class="odd">
 <td>年</td>
 <td>yyyy </td>
 <td> 2004 </td>
  <td>2004</td> 
 </tr>
 <tr class="even">
<td> 财政年度四月</td>
<td>  yyyyApril </td>
 <td> 2004年4月</td>
 <td>2004年4月至2005年3月</td>
 </tr>
 <tr class="odd">
 <td>七月财政年度</td>
  <td>yyyy七月</td>
  <td>2004年7月</td>
 <td>2004年7月至2005年6月</td>
 </tr>
 <tr class="even">
 <td>财政年度十月</td>
 <td>yyyyOct </td>
<td> 2004年10月</td>
<td>  2004年10月至2005年9月</td>
 </tr>
 </tbody>
 </table>

### 相对时期 { #webapi_date_relative_period_values }

在 API 的某些部分，例如分析资源，您可以
除了固定期间（如上定义）之外，还使用相对期间。
相对期间是相对于当前日期并允许例如
用于创建动态报告。可用的相对期间值是：

    THIS_WEEK，LAST_WEEK，LAST_4_WEEKS，LAST_12_WEEKS，LAST_52_WEEKS，
    THIS_MONTH，LAST_MONTH，THIS_BIMONTH，LAST_BIMONTH，THIS_QUARTER，LAST_QUARTER，
    THIS_SIX_MONTH，LAST_SIX_MONTH，MONTHS_THIS_YEAR，QUARTERS_THIS_YEAR，
    THIS_YEAR，MONTHS_LAST_YEAR，QUARTERS_LAST_YEAR，LAST_YEAR，LAST_5_YEARS，LAST_12_MONTHS，
    LAST_3_MONTHS，LAST_6_BIMONTHS，LAST_4_QUARTERS，LAST_2_SIXMONTHS，THIS_FINANCIAL_YEAR，
    LAST_FINANCIAL_YEAR，LAST_5_FINANCIAL_YEARS

## 标识符方案 { #webapi_identifier_schemes }

本节提供标识符方案概念的解释。
标识符方案用于将元数据对象映射到其他元数据
在导入期间，并将元数据呈现为导出的一部分。请注意
并不是所有的方案都适用于所有的 API 调用，也不是所有的
方案可用于输入和输出。这在
部分解释了各种 Web API。

列出了可用的全套标识符方案对象类型
下面，使用在查询中使用的属性名称：

-   方案

-   数据元素标识方案

-   类别选项组合 ID 方案

-   组织单位 ID 方案

-   程序标识方案

-   程序阶段标识方案

-   跟踪实体 ID 方案

-   trackedEntityAttributeIdScheme

通用 idScheme 适用于所有类型的对象。有可能
被特定的对象类型覆盖。

所有参数的默认方案是 UID（稳定的 DHIS2
身份标识）。支持的标识符方案在
下表。

 <table>
 <caption>方案值</caption>
 <colgroup>
 <col style="width: 14%" />
 <col style="width: 85%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>方案</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ID，UID </td>
 <td>在DHIS2稳定标识符上匹配，这是默认的ID方案。 </td>
 </tr>
 <tr class="even">
 <td>代码</td>
 DHIS2代码上的<td>匹配，主要用于与外部系统交换数据。 </td>
 </tr>
 <tr class="odd">
 <td>名称</td>
 <td>与DHIS2名称匹配，请注意，这使用的是<em> object.name </em>而不是已翻译的名称。还要注意，名称并不总是唯一的，在这种情况下，不能使用它们。 </td>
 </tr>
 <tr class="even">
 <td>属性：ID </td>
 <td>匹配元数据属性，此属性需要分配给您要匹配的类型，并且unique属性设置为<em> true </em>。此方法的主要用途还在于与外部系统交换数据，与<em>代码</em>相比，它具有一些优点，因为可以添加多个属性，因此它可以用于与多个系统同步。 </td>
 </tr>
 </tbody>
 </table>

请注意，标识符方案不是一个独立的功能，但需要
与数据值导入、元数据导入等资源结合使用。

例如，指定 CODE 作为通用 id 方案并覆盖
使用 UID 作为组织单位 ID 方案，您可以使用这些查询
参数：

    ？idScheme = CODE＆orgUnitIdScheme = UID

再举一个例子，为组织单位 id 指定一个属性
方案，数据元素 id 方案的代码并使用默认 UID id
您可以使用这些参数的所有其他对象的方案：

    ？orgUnitIdScheme =属性：j38fk2dKFsG＆dataElementIdScheme = CODE

## 浏览Web API { #webapi_browsing_the_web_api }

浏览 Web API 的入口点是 `/api`。这个资源
提供所有可用资源的链接。四种资源表示
格式始终适用于所有资源：HTML、XML、JSON、
和 JSONP。某些资源将具有其他可用格式，例如 MS
Excel、PDF、CSV 和 PNG。要从 Web 浏览器探索 API，请导航
到 `/api` 入口点并按照链接到您想要的
资源，例如`/api/dataElements`。对于所有资源
返回元素列表，某些查询参数可用于修改
响应：

 <table style="width:100%;">
 <caption>查询参数 </caption>
 <colgroup>
 <col style="width: 11%" />
 <col style="width: 20%" />
 <col style="width: 12%" />
 <col style="width: 54%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
<th> 选项值</th>
<th> 默认选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>分页</td>
 <td>是|假</td>
 <td>是</td>
 <td>指示是否返回页面中的元素列表。 </td>
 </tr>
 <tr class="even">
 <td>页面</td>
 <td>编号</td>
 <td> 1 </td>
 <td>定义要返回的页码。 </td>
 </tr>
 <tr class="odd">
 <td>页面大小</td>
 <td>编号</td>
 <td> 50 </td>
 <td>定义每个页面要返回的元素数。 </td>
 </tr>
 <tr class="even">
 <td>订单</td>
 <td>property:asc/iasc/desc/ides</td>
  <td></td>
 <td>使用指定的顺序对输出进行排序，仅支持持久和简单的属性（不支持集合，idObjects等）。 iasc和idec是不区分大小写的排序。</td> 
 </tr>
 </tbody>
 </table>

如何使用这些参数获取完整列表的示例
XML 响应格式的数据元素组是：

    /api/dataElementGroups.xml?links=false&paging=false

您可以查询 name 属性上的元素，而不是使用 _query_ 查询变量返回完整的元素列表。在此示例中，我们查询名称中含有“anaemia”一词的所有数据元素：

    / api / dataElements？query =贫血

您可以像这样获取特定页面和对象的页面大小：

    /api/dataElements.json?page=2&pageSize=20

您可以像这样完全禁用分页：

    /api/indicatorGroups.json?paging=false

要基于特定属性对结果进行排序：

    /api/indicators.json?order=shortName:desc

您可以通过 _identifyingObjects_ 资源根据所有对象类型的 ID 查找对象：

    / api / identifiableObjects / <id>

### 翻译 { #webapi_translation }

DHIS2 支持数据库内容的翻译，例如数据元素、指标和程序。 Web API 中的所有元数据对象都具有用于显示/UI 目的的属性，其中包括 _displayName_、_displayShortName_ 和 _displayDescription_。

 <table>
 <caption>翻译选项</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 16%" />
 <col style="width: 62%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>值</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>翻译</td>
 <td>是|假</td>
 <td>转换元数据输出中的display *属性（数据元素的displayName，displayShortName，displayDescription和displayFormName）。默认值为true。 </td>
 </tr>
 <tr class="even">
 <td>语言环境</td>
 <td>使用</td>的语言环境
 <td>使用指定的语言环境转换元数据输出（需要translate = true）。 </td>
 </tr>
 </tbody>
 </table>

### 翻译API { #webapi_translation_api }

对象的翻译在 _translations_ 数组中呈现为对象本身的一部分。请注意，JSON/XML 有效负载中的 _translations_ 数组通常已为您预先过滤，这意味着它们不能直接用于导入/导出翻译（因为这通常会覆盖当前用户以外的区域设置）。

在用户语言环境中过滤了转换数组的数据元素示例：

```json
{
    "id": "FTRrcoaog83",
    "displayName": "Accute French",
    "translations": [
        {
            "property": "SHORT_NAME",
            "locale": "fr",
            "value": "Accute French"
        },
        {
            "property": "NAME",
            "locale": "fr",
            "value": "Accute French"
        }
    ]
}
```

转换关闭的数据元素示例：

```json
{
    "id": "FTRrcoaog83",
    "displayName": "Accute Flaccid Paralysis (Deaths < 5 yrs)",
    "translations": [
        {
            "property": "FORM_NAME",
            "locale": "en_FK",
            "value": "aa"
        },
        {
            "property": "SHORT_NAME",
            "locale": "en_GB",
            "value": "Accute Flaccid Paral"
        },
        {
            "property": "SHORT_NAME",
            "locale": "fr",
            "value": "Accute French"
        },
        {
            "property": "NAME",
            "locale": "fr",
            "value": "Accute French"
        },
        {
            "property": "NAME",
            "locale": "en_FK",
            "value": "aa"
        },
        {
            "property": "DESCRIPTION",
            "locale": "en_FK",
            "value": "aa"
        }
    ]
}
```

请注意，即使您得到未过滤的结果，并且正在使用
适当的类型端点，即我们不允许的 `/api/dataElements` 
更新，因为这样做很容易犯错误并覆盖
其他可用的语言环境。

要读取和更新翻译，您可以使用每个对象资源的特殊翻译端点。这些可以通过适当的`/api/<object-type>/<object-id>/translations`端点上的_GET_或_PUT_来访问。

例如，对于标识符为`FTRrcoaog83`的数据元素，您可以使用`/api/dataElements/FTRrcoaog83/translations`来获取和更新翻译。可用的字段是带有选项 _NAME_、_SHORT_NAME_、_DESCRIPTION_、支持任何有效区域设置 ID 和翻译的属性`值`的`区域设置`的`属性`。

法语语言环境的NAME属性示例：

```json
{
    "property": "NAME",
    "locale": "fr",
    "value": "Paralysie Flasque Aiguë (Décès <5 ans)"
}
```

然后将此有效负载添加到翻译数组中，并发回
到适当的端点：

```json
{
    "translations": [
        {
            "property": "NAME",
            "locale": "fr",
            "value": "Paralysie Flasque Aiguë (Décès <5 ans)"
        }
    ]
}
```

对于 ID 为 _FTRrcoaog83_ 的数据元素，您可以将其 _PUT_ 到 `/api/dataElements/FTRrcoaog83/translations`。确保发送特定对象的所有翻译，而不仅仅是单个区域设置（如果不是，您可能会覆盖其他区域设置的现有区域设置）。

### Web API版本 { #webapi_api_versions }

Web API的版本从DHIS 2.25开始。 API版本
遵循DHIS2主版本号。例如，API
DHIS 2.33的版本是`33`。

您可以通过包含版本号来访问特定的 API 版本
在`/api` 组件之后，作为这样的例子：

    / api / 33 / dataElements

如果省略 URL 的 version 部分，系统将使用当前的
API 版本。例如，对于 DHIS 2.25，在省略 API 部分时，
系统将使用 API 版本 25。在开发 API 客户端时，它是
建议使用显式 API 版本（而不是省略 API
版本），因为这将保护客户端免受不可预见的 API 更改。

将支持最后三个 API 版本。例如，DHIS
2.27 版本将支持 API 版本 27、26 和 25。

请注意，元数据模型没有版本控制，您可能
体验变化，例如在对象之间的关联中。这些变化
将记录在 DHIS2 主要版本发行说明中。

## 元数据对象过滤器 { #webapi_metadata_object_filter }

要过滤元数据，可以将多种过滤操作应用于返回的元数据列表。过滤器本身的格式很简单，遵循 _property:operator:value_ 模式，其中 _property_ 是要过滤的元数据的属性，_operator_ 是要执行的比较运算符，_value_ 是要检查的值反对（并非所有运算符都需要值）。请参阅 _schema_ 部分以了解哪些属性可用。递归过滤，即。还支持对关联对象或对象集合进行过滤。

 <table>
 <caption> 可用运算符 </caption>
 <thead>
 <tr class="header">
 <th> 操作员 </th>
 <th> 类型 </th>
 <th> 需要值 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> eq </td>
 <td> 字符串 |布尔值 |整数 |浮动|枚举 |集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 相等 </td>
 </tr>
 <tr class="even">
 <td> !eq </td>
 <td> 字符串 |布尔值 |整数 |浮动|枚举 |集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 不等式 </td>
 </tr>
 <tr class="odd">
 <td> ne </td>
 <td> 字符串 |布尔值 |整数 |浮动|枚举 |集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 不等式 </td>
 </tr>
 <tr class="even">
 <td> 像 </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 区分大小写的字符串，匹配任何地方 </td>
 </tr>
 <tr class="odd">
 <td> !like </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 区分大小写的字符串，不匹配任何地方 </td>
 </tr>
 <tr class="even">
 <td> \$like </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 区分大小写的字符串，匹配开始 </td>
 </tr>
 <tr class="odd">
 <td> !\$like </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 区分大小写的字符串，不匹配开始 </td>
 </tr>
 <tr class="even">
 <td> 喜欢\$ </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 区分大小写的字符串，匹配结束 </td>
 </tr>
 <tr class="odd">
 <td> !like\$ </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 区分大小写的字符串，不匹配结束 </td>
 </tr>
 <tr class="even">
 <td> 喜欢 </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 不区分大小写的字符串，匹配任何地方 </td>
 </tr>
 <tr class="odd">
 <td> !ilike </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 不区分大小写的字符串，不匹配任何地方 </td>
 </tr>
 <tr class="even">
 <td> \$ilike </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 不区分大小写的字符串，匹配开始 </td>
 </tr>
 <tr class="odd">
 <td> !\$ilike </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 不区分大小写的字符串，不匹配开始 </td>
 </tr>
 <tr class="even">
 <td> ilike\$ </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 不区分大小写的字符串，匹配结束 </td>
 </tr>
 <tr class="odd">
 <td> !ilike\$ </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 不区分大小写的字符串，不匹配结束 </td>
 </tr>
 <tr class="even">
 <td> gt </td>
 <td> 字符串 |布尔值 |整数 |浮动|集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 大于 </td>
 </tr>
 <tr class="odd">
 <td> ge </td>
 <td> 字符串 |布尔值 |整数 |浮动|集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 大于或等于 </td>
 </tr>
 <tr class="even">
 <td> lt </td>
 <td> 字符串 |布尔值 |整数 |浮动|集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 小于</td>
 </tr>
 <tr class="odd">
 <td> le </td>
 <td> 字符串 |布尔值 |整数 |浮动|集合（检查大小）|日期 </td>
 <td> 真 </td>
 <td> 小于或等于 </td>
 </tr>
 <tr class="even">
 <td> 空 </td>
 <td> 全部 </td>
 <td> 假 </td>
 <td> 属性为空 </td>
 </tr>
 <tr class="odd">
 <td> !null </td>
 <td> 全部 </td>
 <td> 假 </td>
 <td> 属性不为空 </td>
 </tr>
 <tr class="even">
 <td> 空 </td>
 <td> 集合 </td>
 <td> 假 </td>
 <td> 集合为空 </td>
 </tr>
 <tr class="odd">
 <td> 代币 </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 匹配搜索属性中的多个标记 </td>
 </tr>
 <tr class="even">
 <td> !token </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> 与搜索属性中的多个标记不匹配 </td>
 </tr>
 <tr class="odd">
 <td> 在 </td>
 <td> 字符串 |布尔值 |整数 |浮动|日期 </td>
 <td> 真 </td>
 <td> 查找匹配 1 个或多个值的对象 </td>
 </tr>
 <tr class="even">
 <td> !in </td>
 <td> 字符串 |布尔值 |整数 |浮动|日期 </td>
 <td> 真 </td>
 <td> 查找与 1 个或多个值不匹配的对象 </td>
 </tr>
 </tbody>
 </table>

运算符将用作逻辑 _and_ 查询，如果您需要 _or_ 查询，您可以查看我们的 _in_ 过滤器（另请参阅下面的部分）。过滤机制允许递归。请参阅下面的一些示例。

获取ID属性为ID1或ID2的数据元素：

    / api / dataElements？filter = id：eq：ID1＆filter = id：eq：ID2

获取具有ID为ID1的dataSet的所有数据元素：

    /api/dataElements?filter=dataSetElements.dataSet.id:eq:ID1

使用聚合运算符“sum”和值类型获取所有数据元素
“内部”：

    /api/dataElements.json?filter=aggregationOperator:eq:sum&filter=type:eq:int

您可以在集合中进行过滤，例如获取数据元素
是“ANC”数据元素组的成员，您可以使用以下内容
使用关联数据元素组的 id 属性查询：

    /api/dataElements.json?filter=dataElementGroups.id:eq:qfxEYY9xAl6

由于默认情况下所有运算符都是 _and_，因此您无法找到与多个 id 匹配的数据元素，为此，您可以使用 _in_ 运算符。

    /api/dataElements.json?filter=id:in:[fbfJHSPpUQD,cYeuwXTCPkU]

### 逻辑运算符 { #webapi_metadata_logical_operator }

如前一节所述，应用于过滤器的默认逻辑运算符是 _AND_，这意味着所有对象过滤器都必须匹配。然而，在某些情况下，您希望在多个过滤器之一（可能是 id 和代码字段）上进行匹配，在这些情况下，可以使用 _rootJunction_ 参数将根逻辑运算符从 _AND_ 切换到 _OR_。

示例：正常过滤，其中 id 和 code 必须匹配才能具有
结果返回

    /api/dataElements.json?filter=id:in:[id1,id2]&filter=code:eq:code1

示例：过滤逻辑运算符已切换为 OR 的位置
现在只有一个过滤器必须匹配才能产生结果
    回

    /api/dataElements.json?filter=id:in:[id1,id2]&filter=code:eq:code1&rootJunction=OR

### 可识别的令牌过滤器 { #identifiable-token-filter }

除了上面提到的基于特定属性的过滤之外，我们还对一组属性进行基于 _token_ 的 _AND_ 过滤：id、代码和名称（如果可用，还有短名称）。这些属性通常被称为_可识别_。这个想法是过滤 ID、名称、代码或短名称包含某些内容的元数据。

示例：过滤以下任意项中包含 _2nd_ 的所有数据元素：id、name、code、shortName

    /api/dataElements.json?filter=identific:token:2nd

也可以指定多个过滤值。

示例：获取在任何 _identabilible_ 属性中找到 _ANC Visit_ 的所有数据元素。系统返回在可识别属性中的任何位置找到两个令牌（ANC 和访问）的所有数据元素。

    /api/dataElements.json?filter=identifiable:token:ANC访问

还可以将可识别过滤器与基于属性的过滤器结合起来，并期望应用 _rootJunction_ 。

    /api/dataElements.json?filter=identifiable:token:ANC visit＆filter = displayName：ilike：tt1

    /api/dataElements.json?filter=identifiable:token:ANC访问
      ＆filter = displayName：ilike：tt1＆rootJunction = OR

### 捕获范围过滤器 { #capture-scope-filter }

除了上面提到的过滤之外，我们还有一个名为 _restrictToCaptureScope_ 的特殊过滤查询参数。如果 _restrictToCaptureScope_ 设置为 true，则响应中将仅返回未分配给任何组织单位或显式分配给登录用户捕获范围组织单位的元数据对象。除了过滤元数据对象列表之外，还将对关联的组织单元进行附加过滤，以仅包括捕获范围的组织单元。此过滤参数可用于 Program 和 CategoryOption 列表 API。

如果存在大量与各种元数据对象相关联的组织单元，则此功能通常有利于减小负载大小。

一些例子

    /api/categoryOptions.json?restrictToCaptureScope=true&fields=*

    /api/programs.json?restrictToCaptureScope=true&fields=*

除了捕获范围过滤器之外，所有现有的过滤器都将起作用。

    /api/categoryOptions.json?restrictToCaptureScope=true&fields=*&filter=displayName:ilike:11

## 元数据字段过滤器 { #webapi_metadata_field_filter }

在许多情况下，元数据的默认视图可能过于冗长。客户端可能只需要每个对象中的几个字段，并希望从响应中删除不必要的字段。要了解每个对象有哪些字段可用，请参阅 _schema_ 部分。

包含/排除的格式允许无限递归。过滤
在“根”级别，您可以只使用字段的名称，
即`?fields=id,name`它只会显示`id`和
每个对象的`name` 字段。对于集合或
具有自身属性的复杂对象，您可以使用格式
`?fields=id,name,dataSets[id,name]` 将返回的 `id`、`name`
根，以及该对象上每个数据集的`id`和`name`。
否定可以用感叹号来完成，我们有一组
字段选择的预设。支持 XML 和 JSON。

**示例**：在指标资源上获取`id`和`name`：

    / api / indicators？fields = id，名称

**示例**：从dataElements中获取`id`和`name`，以及`id`和`name`。
从dataElements上的dataSets中：

    / api / dataElements？fields = id，name，dataSets [id，name]

要从输出中排除字段，可以使用感叹号`!`。
操作符。这是在查询中的任何地方都允许的，而根本不会
包括该属性，因为它可能已经插入了某些
预设。

一些预设（选定的字段组）可用并且可以应用
使用`:` 运算符。

 <table>
 <caption>属性操作符  </caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 74%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 操作符 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> &lt;field-name&gt; </td>
 <td> 包含带有名称的属性（如果存在）。 </td>
 </tr>
 <tr class="even">
 <td> &lt;object&gt;[&lt;field-name&gt;, ...] </td>
 <td> 在集合中包含一个字段（将应用于该集合中的每个对象），或仅包含在单个对象上。 </td>
 </tr>
 <tr class="odd">
 <td> !&lt;field-name&gt;, &lt;object&gt;[!&lt;field-name&gt;</td>
 <td> 不包括此字段名称，它也适用于对象/集合。当您使用预设来包含字段时很有用。 </td>
 </tr>
 <tr class="even">
 <td> *, &lt;object&gt;[*] </td>
 <td> 包括某个对象上的所有字段，如果应用于一个集合，它将包括该集合上所有对象的所有字段。 </td>
 </tr>
 <tr class="odd">
 <td> :&lt;preset&gt; </td>
 <td> 选择多个字段的别名。目前有三种预设可用，请参阅下表了解说明。 </td>
 </tr>
 </tbody>
 </table>

 <table>
 <caption>字段预设</caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 74%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>预设</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>全部</td>
 <td>对象的所有字段</td>
 </tr>
 <tr class="even">
 <td> * </td>
 <td>所有</td>的别名
 </tr>
 <tr class="odd">
 <td>可识别</td>
 <td>包括ID，名称，代码，创建的和lastUpdated字段</td>
 </tr>
 <tr class="even">
 <td>可命名</td>
 <td>包括id，名称，shortName，代码，描述，创建的和lastUpdated字段</td>
 </tr>
 <tr class="odd">
 <td>持续了</td>
 <td>返回对象上的所有持久属性，如果对象是关系的所有者，则不考虑。 </td>
 </tr>
 <tr class="even">
 <td>所有者</td>
 <td>返回对象的所有持久属性，其中该对象是所有属性的所有者，此有效负载可用于通过API更新。 </td>
 </tr>
 </tbody>
 </table>

**示例**：包括dataSet中的所有字段（organizationunits除外）：

    / api / dataSets？fields =：all，！organizationUnits

**示例**：仅包含ID，名称和数据集中的组织单位集合，但不包含组织单位中的ID：

    / api / dataSets / BfMAe6Itzgt？fields = id，name，organisationUnits [：all，！id]

**示例**：包括所有指标的可命名属性：

    /api/indicators.json?fields=:nameable

### 现场变压器 { #webapi_field_transformers }

在 DHIS2.17 中我们引入了场变压器，其想法是允许
进一步定制服务器端的属性。

    /api/dataElements/ID?fields=id~rename(i),name~rename(n)

这会将 _id_ 属性重命名为 _i_，将 _name_ 属性重命名为 _n_。

可以通过重复变压器语法来使用多个变压器：

    /api/dataElementGroups.json?fields=id,displayName,dataElements~isNotEmpty~rename(haveDataElements）

 <table>
 <caption> 可用变压器 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 21%" />
 <col style="width: 44%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 名称 </th>
 <th> 参数 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 尺寸 </td>
 <td> </td>
 <td> 给出字符串的大小（长度）和集合 </td>
 </tr>
 <tr class="even">
 <td> isEmpty </td>
 <td> </td>
 <td> 字符串或集合是否为空 </td>
 </tr>
 <tr class="odd">
 <td> isNotEmpty </td>
 <td> </td>
 <td> 字符串或集合是否为空 </td>
 </tr>
 <tr class="even">
 <td> 重命名 </td>
 <td> Arg1：名称 </td>
 <td> 重命名属性名称 </td>
 </tr>
 <tr class="odd">
 <td> 分页 </td>
 <td> Arg1：页面，Arg2：页面大小 </td>
 <td> Pages 一个集合，默认 pageSize 为 50。</td>
 </tr>
 <tr class="even">
 <td> 采摘 </td>
 <td> 可选参数 1：字段名称 </td>
 <td> 将对象数组转换为该对象选定字段的数组。默认情况下，使用集合返回的第一个字段（通常是 ID）。 </td>
 </tr>
 </tbody>
 </table>

#### 例子 { #webapi_field_transformers_examples }

变压器用法示例。

```
/api/dataElements?fields=dataSets~size

/api/dataElements?fields=dataSets~isEmpty

/api/dataElements?fields=dataSets~isNotEmpty

/api/dataElements/ID?fields=id~rename(i),name~rename(n)

/api/dataElementGroups?fields=id,displayName,dataElements~paging(1;20)

# Include array with IDs of organisation units:
/api/categoryOptions.json?fields=id,organisationUnits~pluck

# Include array with names of organisation units (collection only returns field name):
/api/categoryOptions.json?fields=id,organisationUnits~pluck[name]
```

## 元数据创建，读取，更新，删除，验证 { #webapi_metadata_crud }

DHIS2 中的所有元数据实体都有自己的 API 端点，支持 _CRUD_ 操作（创建、读取、更新和删除）。端点 URL 遵循以下格式：

    / api / <entityName>

_entityName_ 使用驼峰命名法。例如，端点
对于_数据元素_是：

    / api / dataElements

### 创建/更新参数 { #webapi_metadata_create_update }

以下请求查询参数可用于所有元数据端点。

 <table>
 <caption>可用的查询过滤器</caption>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>类型</th>
 <th>必需</th>
 <th>选项（默认为默认）</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> preheatCache </td>
 <td>布尔</td>
 <td>否</td>
 <td>是|假</td>
 <td>开启/关闭缓存地图预热。默认情况下处于启用状态，关闭此选项将使导入程序的初始加载时间短得多（但会使导入本身变慢）。这主要用于以下情况：您要导入的XML / JSON文件很小，并且不想等待缓存映射表预热。 </td>
 </tr>
 <tr class="even">
 <td>策略</td>
 <td>枚举</td>
 <td>否</td>
 <td> CREATE_AND_UPDATE |创建|更新|删除</td>
 <td>使用的导入策略，请参阅下面的更多信息。 </td>
 </tr>
 <tr class="odd">
 <td> mergeMode </td>
 <td>枚举</td>
 <td>否</td>
 替换，合并<td> </td>
 <td>执行更新时合并对象的策略。 REPLACE只会使用提供的新值覆盖属性，MERGE仅在属性不为null时设置属性（仅在提供了属性的情况下）。 </td>
 </tr>
 </tbody>
 </table>

### 创建和更新对象 { #webapi_creating_updating_objects }

为了创建新对象，您需要知道端点、类型格式，并确保您拥有所需的权限。作为示例，我们将创建并更新一个_constant_。为了弄清楚格式，我们可以使用新的 _schema_ 端点来获取格式描述。因此，我们将从获取该信息开始：

    http：// <server> /api/schemas/constant.json

从输出中可以看到create所需的权限是`F_CONSTANT_ADD`，重要的属性是：_name_和_value_。由此，我们可以创建一个 JSON 有效负载并将其保存为名为constant.json 的文件：

```json
{
    "name": "PI",
    "value": "3.14159265359"
}
```

与XML有效内容相同的内容：

```xml
<constant name="PI" xmlns="http://dhis2.org/schema/dxf/2.0">
  <value>3.14159265359</value>
</constant>
```

我们现在准备通过使用curl向*constants*端点发送带有JSON负载的POST请求来创建新的_constant_：

```bash
curl -d @constant.json "http://server/api/constants" -X POST
  -H "Content-Type: application/json" -u user:password
```

将常量发布到演示中的具体示例
    服务器：

```bash
curl -d @constant.json "https://play.dhis2.org/api/constants" -X POST
  -H "Content-Type: application/json" -u admin:district
```

如果一切顺利，您应该看到类似以下的输出：

```json
{
    "status": "SUCCESS",
    "importCount": {
        "imported": 1,
        "updated": 0,
        "ignored": 0,
        "deleted": 0
    },
    "type": "Constant"
}
```

更新过程与更新完全相同，您对 JSON/XML 有效负载进行更改，找出常量的 _ID_，然后向端点发送包含 ID 的 PUT 请求：

```bash
curl -X PUT -d @pi.json -H "Content-Type: application/json"
  -u user:password "http://server/api/constants/ID"
```

### 删除物件 { #webapi_deleting_objects }

删除对象非常简单，您需要知道要删除的类型的_ID_和端点，让我们继续上一节的示例并使用_constant_。假设 id 是 _abc123_，那么您需要做的就是向端点 + id 发送 DELETE 请求：

```bash
curl -X DELETE -u user:password "http://server/api/constants/ID"
```

成功删除应返回HTTP状态204（无内容）。

### 在集合中添加和删除对象 { #webapi_adding_removing_objects_collections }

集合资源允许您修改集合
对象。

#### 添加或删除单个对象 { #webapi_collections_adding_removing_single_objects }

为了在对象集合中添加或删除对象，您
可以使用以下
    图案：

    / api / {collection-object} / {collection-object-id} / {collection-name} / {object-id}

应该使用POST方法添加，使用DELETE方法删除
一个东西。当对象之间存在多对多关系时，
您必须首先确定哪个对象拥有该关系。如果不是
清除这是哪个对象，尝试两种方式调用以查看哪个有效。

模式的组成部分是：

-   集合对象：拥有要修改的集合的对象类型。

-   集合对象 ID：拥有要修改的集合的对象的标识符。

-   集合名称：您要修改的集合的名称。

-   对象 id：要从集合中添加或删除的对象的标识符。

例如，为了删除标识符为 IDB 的数据元素
从具有标识符 IDA 的数据元素组中，您可以执行 DELETE
要求：

    删除/ api / dataElementGroups / IDA / dataElements / IDB

将带有标识符 IDB 的类别选项添加到带有
标识符 IDA 你可以做一个 POST
要求：

    POST / api / categories / IDA / categoryOptions / IDB

#### 添加或删除多个对象 { #webapi_collections_adding_removing_multiple_objects }

您可以在一个请求中从集合中添加或删除多个对象
具有这样的有效载荷：

```json
{
    "identifiableObjects": [
        {
            "id": "IDA"
        },
        {
            "id": "IDB"
        },
        {
            "id": "IDC"
        }
    ]
}
```

使用此有效负载，您可以添加，替换或删除项目：

_添加项目：_

    POST / api / categories / IDA / categoryOptions

_更换物品：_

    PUT /api/categories/IDA/categoryOptions

_删除项目：_

    删除/ api / categories / IDA / categoryOptions

#### 在单个请求中添加和删除对象 { #webapi_collections_adding_removing_objects_single_request }

您可以在单个 POST 中从集合中添加和删除对象
请求到以下 URL：

    POST / api / categories / IDA / categoryOptions

有效负载格式为：

```json
{
    "additions": [
        {
            "id": "IDA"
        },
        {
            "id": "IDB"
        },
        {
            "id": "IDC"
        }
    ],
    "deletions": [
        {
            "id": "IDD"
        },
        {
            "id": "IDE"
        },
        {
            "id": "IDF"
        }
    ]
}
```

### 验证有效载荷 { #webapi_validating_payloads }

DHIS 2 支持元数据有效载荷的系统范围验证，这意味着
将检查 API 端点上的创建和更新操作
允许进行更改之前的有效负载。找出哪些验证
为特定端点准备好了，看看`/api/schemas`
端点，即要找出数据元素具有哪些约束，您
会去`/api/schemas/dataElement`。

您还可以手动验证您的有效负载，方法是将其发送到适当的
架构端点。如果您想从创建中验证常量
之前的部分，您可以这样发送：

    POST / api / schemas / constant

一个简单的（非验证）示例为：

```bash
curl -X POST -d "{\"name\": \"some name\"}" -H "Content-Type: application/json"
  -u admin:district "https://play.dhis2.org/dev/api/schemas/dataElement"
```

这将产生结果：

```json
[
    {
        "message": "Required property missing.",
        "property": "type"
    },
    {
        "property": "aggregationOperator",
        "message": "Required property missing."
    },
    {
        "property": "domainType",
        "message": "Required property missing."
    },
    {
        "property": "shortName",
        "message": "Required property missing."
    }
]
```

### 部分更新 { #webapi_partial_updates }

对于您不想或不需要更新所有属性的情况
对象（这意味着下载一个潜在的巨大有效负载，更改一个
属性，然后再次上传）我们现在支持部分更新，对于一个或
更多的属性。

进行部分更新的有效负载与您执行时相同
做一个完整的更新，唯一的区别是你只包括
您要更新的属性，即：

```json
{
    "name": "Updated Name",
    "zeroIsSignificant": true
}
```

curl命令示例如下所示：

```bash
curl -X PATCH -d @file.json -H "Content-Type: application/json"
  -u admin:district "https://play.dhis2.org/dev/api/dataElements/fbfJHSPpUQD"
```

## 元数据导出 { #webapi_metadata_export }

本节介绍了可在以下位置获得的元数据 API
`/api/元数据`。支持 XML 和 JSON 资源表示。

    / api /元数据

最常用的参数在下面的“导出参数”中描述
桌子。您还可以使用以下方法将其应用于所有可用类型
`type:fields=<filter>` 和 `type:filter=<filter>`。你也可以
通过设置 `type=true|false` 启用/禁用某些类型的导出。

 <table>
 <caption> 导出参数 </caption>
 <colgroup>
 <col style="width: 17%" />
 <col style="width: 21%" />
 <col style="width: 61%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 名称 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 字段 </td>
 <td> 与元数据字段过滤器 </td> 相同
 <td> 适用于所有类型的默认字段过滤器，默认为`:owner`。 </td>
 </tr>
 <tr class="even">
 <td> 过滤器 </td>
 <td> 与元数据对象过滤器 </td> 相同
 <td> 适用于所有类型的默认对象过滤器，默认为`无`。 </td>
 </tr>
 <tr class="odd">
 <td> 订单 </td>
 <td> 与元数据顺序 </td> 相同
 <td> 适用于所有类型的默认顺序，如果可用，默认为`name`，否则为`created`。 </td>
 </tr>
 <tr class="even">
 <td> 翻译 </td>
 <td> 假/真 </td>
 <td> 启用翻译。请注意，默认情况下这是关闭的（在其他端点中，默认情况下是打开的）。 </td>
 </tr>
 <tr class="odd">
 <td> 区域设置 </td>
 <td> &lt;locale&gt; </td>
 <td> 从用户语言环境更改为您自己的自定义语言环境。 </td>
 </tr>
 <tr class="even">
 <td> 默认 </td>
 <td> 包括/排除 </td>
 <td> 自动生成的类别对象是否应包含在有效负载中。如果您在 2 个非同步实例之间移动元数据，将其设置为 EXCLUDE 以简化这些生成对象的处理可能是有意义的。 </td>
 </tr>
 <tr class="odd">
 <td> 跳过共享 </td>
 <td> 假/真 </td>
 <td> 启用此选项将从导出的对象中剥离共享属性。这包括用户<em> </em>，<em> publicAccess </em>，<em> userGroupAccesses </em>，<em> userAccesses </em>，和<em> externalAccess </em>。 </td>
 </tr>
 <tr class="odd">
 <td> 下载 </td>
 <td> 假/真 </td>
 <td> 启用此功能将添加 HTTP 标头 Content-Disposition，该标头指定数据应作为附件处理，并由 Web 浏览器作为下载提供。 </td>
 </tr>
 </tbody>
 </table>

### 元数据导出示例 { #webapi_metadata_export_examples }

导出所有元数据。小心，因为响应可能非常大，具体取决于
关于您的元数据配置：

    / api /元数据

导出由lastUpdated降序排列的所有元数据：

    / api / metadata？defaultOrder = lastUpdated：desc

导出仅包括指标和指标组的元数据：

    / api / metadata？indicators = true＆indicatorGroups = true

导出所有数据元素的id和displayName，按displayName排序：

    / api / metadata？dataElements：fields = id，name＆dataElements：order = displayName：desc

导出名称以“ ANC”开头的数据元素和指示符：

    / api / metadata？filter = name：^ like：ANC＆dataElements = true＆indicators = true

### 具有依赖项的元数据导出 { #webapi_dataset_program_export_dependencies }

当您想为数据集、程序或类别组合交换元数据时
从一个 DHIS2 实例到另一个实例，有三个专用端点可用：

```
/api/dataSets/{id}/metadata.json

/api/programs/{id}/metadata.json

/api/categoryCombos/{id}/metadata.json

/api/dashboards/{id}/metadata.json
```

然后可以使用`/ api / metadata`导入这些导出。

这些端点还支持以下参数：

 <table>
 <caption> 导出参数 </caption>
 <colgroup>
 <col style="width: 17%" />
 <col style="width: 21%" />
 <col style="width: 61%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 名称 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 跳过共享 </td>
 <td> 假/真 </td>
 <td> 启用此选项将从导出的对象中剥离共享属性。这包括用户<em> </em>，<em> publicAccess </em>，<em> userGroupAccesses </em>，<em> userAccesses </em>，和<em> externalAccess </em>。 </td>
 </tr>
 <tr class="odd">
 <td> 下载 </td>
 <td> 假/真 </td>
 <td> 启用此功能将添加 HTTP 标头 Content-Disposition，该标头指定数据应作为附件处理，并由 Web 浏览器作为下载提供。 </td>
 </tr>
 </tbody>
 </table>

## 元数据导入 { #webapi_metadata_import }

本节介绍元数据导入 API。支持 XML 和 JSON 资源表示。可以使用 _POST_ 请求导入元数据。

    / api /元数据

导入器允许您导入元数据有效负载，其中可能包括许多
不同的实体和每个实体的任意数量的对象。元数据导出
元数据导出API生成的可以直接导入。

元数据导入端点支持多种参数，分别是
下面列出。

<table>
<caption>Import Parameter</caption>
<colgroup>
<col style="width: 17%" />
<col style="width: 21%" />
<col style="width: 61%" />
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>Options (first is default)</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>importMode</td>
<td>COMMIT, VALIDATE</td>
<td>Sets overall import mode, decides whether or not to only `VALIDATE` or also `COMMIT` the metadata, this has similar functionality as our old dryRun flag.</td>
</tr>
<tr class="even">
<td>identifier</td>
<td>UID, CODE, AUTO</td>
<td>Sets the identifier scheme to use for reference matching. `AUTO` means try `UID` first, then `CODE`.</td>
</tr>
<tr class="odd">
<td>importReportMode</td>
<td>ERRORS, FULL, DEBUG</td>
<td>Sets the `ImportReport` mode, controls how much is reported back after the import is done. `ERRORS` only includes <em>ObjectReports</em> for object which has errors. `FULL` returns an <em>ObjectReport</em> for all objects imported, and `DEBUG` returns the same plus a name for the object (if available).</td>
</tr>
<tr class="even">
<td>preheatMode</td>
<td>REFERENCE, ALL, NONE</td>
<td>Sets the preheater mode, used to signal if preheating should be done for `ALL` (as it was before with <em>preheatCache=true</em>) or do a more intelligent scan of the objects to see what to preheat (now the default), setting this to `NONE` is not recommended.</td>
</tr>
<tr class="odd">
<td>importStrategy</td>
<td>CREATE_AND_UPDATE, CREATE, UPDATE, DELETE</td>
<td>Sets import strategy, `CREATE_AND_UPDATE` will try and match on identifier, if it doesn't exist, it will create the object.</td>
</tr>
<tr class="even">
<td>atomicMode</td>
<td>ALL, NONE</td>
<td>Sets atomic mode, in the old importer we always did a <em>best effort</em> import, which means that even if some references did not exist, we would still import (i.e. missing data elements on a data element group import). Default for new importer is to not allow this, and similar reject any validation errors. Setting the `NONE` mode emulated the old behavior.</td>
</tr>
<tr class="odd">
<td>mergeMode</td>
<td>REPLACE, MERGE</td>
<td>Sets the merge mode, when doing updates we have two ways of merging the old object with the new one, `MERGE` mode will only overwrite the old property if the new one is not-null, for `REPLACE` mode all properties are overwritten regardless of null or not.</td>
</tr>
<tr class="even">
<td>flushMode</td>
<td>AUTO, OBJECT</td>
<td>Sets the flush mode, which controls when to flush the internal cache. It is <em>strongly</em> recommended to keep this to `AUTO` (which is the default). Only use `OBJECT` for debugging purposes, where you are seeing hibernate exceptions and want to pinpoint the exact place where the stack happens (hibernate will only throw when flushing, so it can be hard to know which object had issues).</td>
</tr>
<tr class="odd">
<td>skipSharing</td>
<td>false, true</td>
<td>Skip sharing properties, does not merge sharing when doing updates, and does not add user group access when creating new objects.</td>
</tr>
<tr class="even">
<td>skipValidation</td>
<td>false, true</td>
<td>Skip validation for import. `NOT RECOMMENDED`.</td>
</tr>
<tr class="odd">
<td>async</td>
<td>false, true</td>
<td>Asynchronous import, returns immediately with a <em>Location</em> header pointing to the location of the <em>importReport</em>. The payload also contains a json object of the job created.</td>
</tr>
<tr class="even">
<td>inclusionStrategy</td>
<td>NON_NULL, ALWAYS, NON_EMPTY</td>
<td><em>NON_NULL</em> includes properties which are not null, <em>ALWAYS</em> include all properties, <em>NON_EMPTY</em> includes non empty properties (will not include strings of 0 length, collections of size 0, etc.)</td>
</tr>
<tr class="odd">
<td>userOverrideMode</td>
<td>NONE, CURRENT, SELECTED</td>
<td>Allows you to override the user property of every object you are importing, the options are NONE (do nothing), CURRENT (use import user), SELECTED (select a specific user using overrideUser=X)</td>
</tr>
<tr class="even">
<td>overrideUser</td>
<td>User ID</td>
<td>If userOverrideMode is SELECTED, use this parameter to select the user you want override with.</td>
</tr>
</tbody>
</table>

要导入的元数据负载的示例如下所示。注意如何
每个实体类型都有自己的属性和一个对象数组：

```json
{
    "dataElements": [
        {
            "name": "EPI - IPV 3 doses given",
            "shortName": "EPI - IPV 3 doses given",
            "aggregationType": "SUM",
            "domainType": "AGGREGATE",
            "valueType": "INTEGER_ZERO_OR_POSITIVE"
        },
        {
            "name": "EPI - IPV 4 doses given",
            "shortName": "EPI - IPV 4 doses given",
            "aggregationType": "SUM",
            "domainType": "AGGREGATE",
            "valueType": "INTEGER_ZERO_OR_POSITIVE"
        }
    ],
    "indicators": [
        {
            "name": "EPI - ADS stock used",
            "shortName": "ADS stock used",
            "numerator": "#{LTb8XeeqeqI}+#{Fs28ZQJET6V}-#{A3mHIZd2tPg}",
            "numeratorDescription": "ADS 0.05 ml used",
            "denominator": "1",
            "denominatorDescription": "1",
            "annualized": false,
            "indicatorType": {
                "id": "kHy61PbChXr"
            }
        }
    ]
}
```

将此有效负载发布到元数据端点时，响应将包含
有关导入过程中使用的参数的信息和每个摘要
实体类型，包括创建、更新、删除和
忽略：

```json
{
    "importParams": {
        "userOverrideMode": "NONE",
        "importMode": "COMMIT",
        "identifier": "UID",
        "preheatMode": "REFERENCE",
        "importStrategy": "CREATE_AND_UPDATE",
        "atomicMode": "ALL",
        "mergeMode": "REPLACE",
        "flushMode": "AUTO",
        "skipSharing": false,
        "skipTranslation": false,
        "skipValidation": false,
        "metadataSyncImport": false,
        "firstRowIsHeader": true,
        "username": "UNICEF_admin"
    },
    "status": "OK",
    "typeReports": [
        {
            "klass": "org.hisp.dhis.dataelement.DataElement",
            "stats": {
                "created": 2,
                "updated": 0,
                "deleted": 0,
                "ignored": 0,
                "total": 2
            }
        },
        {
            "klass": "org.hisp.dhis.indicator.Indicator",
            "stats": {
                "created": 1,
                "updated": 0,
                "deleted": 0,
                "ignored": 0,
                "total": 1
            }
        }
    ],
    "stats": {
        "created": 3,
        "updated": 0,
        "deleted": 0,
        "ignored": 0,
        "total": 3
    }
}
```

## 渲染类型（实验性） { #webapi_render_type }

某些元数据类型具有名为 _renderType_ 的属性。渲染类型属性是 _device_ 和 _renderingType_ 之间的映射。应用程序可以使用此信息作为有关如何在特定设备上呈现对象的提示。例如，移动设备可能希望以与台式计算机不同的方式呈现数据元素。

当前有两种不同的renderingTypes可用：

1.  值类型渲染

2.  程序阶段部分渲染

还提供2种设备类型：

1.  移动

2.  桌面

下表列出了可用的元数据和呈现类型。
值类型呈现具有基于元数据的附加约束
配置，这将显示在第二个表中。

 <table>
 <caption>元数据和渲染类型概述</caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>元数据类型</th>
 <th>可用的渲染类型</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>程序阶段段</td>
 <td> <ul>
 <li> <p>列表（默认）</p> </li>
 <li> <p>顺序</p> </li>
 矩阵<li> <p>矩阵</p> </li>
 </ul> </td>
 </tr>
 <tr class="even">
 <td>数据元素</td>
 <td> <ul>
 <li> <p>默认</p> </li>
 <li> <p>下拉菜单</p> </li>
 <li> <p> VERTICAL_RADIOBUTTONS </p> </li>
 <li> <p> HORIZONTAL_RADIOBUTTONS </p> </li>
 <li> <p> VERTICAL_CHECKBOXES </p> </li>
 <li> <p> HORIZONTAL_CHECKBOXES </p> </li>
 <li> <p> SHARED_HEADER_RADIOBUTTONS </p> </li>
 <li> <p> ICONS_AS_BUTTONS </p> </li>
 <li> <p>旋转器</p> </li>
 <li> <p> ICON </p> </li>
 <li> <p>切换</p> </li>
 <li> <p>值</p> </li>
 滑块<li> <p>滑块</p> </li>
 <li> <p> LINEAR_SCALE </p> </li>
 </ul> </td>
 </tr>
 </tbody>
 </table>

由于处理数据元素和跟踪实体的默认呈现
属性取决于对象的值类型，还有
一个 DEFAULT 类型告诉客户端它应该被正常处理。
程序阶段部分默认为“列表”。

<table>
<caption>RenderingTypes allowed based on value types</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>Value type</th>
<th>Is object an optionset?</th>
<th>RenderingTypes allowed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>TRUE_ONLY</td>
<td>No</td>
<td>DEFAULT, VERTICAL_RADIOBUTTONS, HORIZONTAL_RADIOBUTTONS, VERTICAL_CHECKBOXES, HORIZONTAL_CHECKBOXES, TOGGLE</td>
</tr>
<tr class="even">
<td>BOOLEAN</td>
<td>No</td>
<td></td>
</tr>
<tr class="odd">
<td>-</td>
<td>Yes</td>
<td>DEFAULT, DROPDOWN, VERTICAL_RADIOBUTTONS, HORIZONTAL_RADIOBUTTONS, VERTICAL_CHECKBOXES, HORIZONTAL_CHECKBOXES, SHARED_HEADER_RADIOBUTTONS, ICONS_AS_BUTTONS, SPINNER, ICON</td>
</tr>
<tr class="even">
<td>INTEGER</td>
<td>No</td>
<td>DEFAULT, VALUE, SLIDER, LINEAR_SCALE, SPINNER</td>
</tr>
<tr class="odd">
<td>INTEGER_POSITIVE</td>
<td>No</td>
<td></td>
</tr>
<tr class="even">
<td>INTEGER_NEGATIVE</td>
<td>No</td>
<td></td>
</tr>
<tr class="odd">
<td>INTEGER_ZERO_OR_POSITIVE</td>
<td>No</td>
<td></td>
</tr>
<tr class="even">
<td>NUMBER</td>
<td>No</td>
<td></td>
</tr>
<tr class="odd">
<td>UNIT_INTERVAL</td>
<td>No</td>
<td></td>
</tr>
<tr class="even">
<td>PERCENTAGE</td>
<td>No</td>
<td></td>
</tr>
</tbody>
</table>

上表的完整参考也可以使用
以下端点：

    GET /api/staticConfiguration/renderingOptions

值类型渲染也有一些额外的属性，可以
设置，通常在渲染某些特定类型时需要：

 <table>
 <caption> renderType对象属性</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 属性<th> </th>
 <th>说明</th>
 <th>类型</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>类型</td>
 <td>对象的RenderingType，如第一个表所示。值类型和程序阶段部分的此属性相同，但是是程序阶段部分可用的唯一属性。 </td>
 <td>枚举（请参见元数据和呈现类型表中的列表）</td>
 </tr>
 <tr class="even">
 min </td> <td>
 <td>仅用于值类型呈现。表示此字段可以具有的最小值。 </td>
 <td>整数</td>
 </tr>
 <tr class="odd">
 <td> max </td>
 <td>仅用于值类型呈现。表示此字段可以具有的最大值。 </td>
 <td>整数</td>
 </tr>
 <tr class="even">
 <td>步骤</td>
 <td>仅用于值类型呈现。表示值应增加的步长，例如对于SLIDER和LINEAR_SCALE </td>
 <td>整数</td>
 </tr>
 <tr class="odd">
 <td>小数点</td>
 <td>仅用于值类型呈现。表示该值应使用的小数点位数。 </td>
 <td>整数</td>
 </tr>
 </tbody>
 </table>

_renderingType_ 可以在创建或更新第一个表中列出的元数据时设置。程序阶段部分的渲染类型的示例有效负载如下所示：

```json
{
    "renderingType": {
        "type": "MATRIX"
    }
}
```

对于数据元素和跟踪的实体属性：

```json
{
    "renderingType": {
        "type": "SLIDER",
        "min": 0,
        "max": 1000,
        "step": 50,
        "decimalPoints": 0
    }
}
```

## 对象样式 { #webapi_object_style }

大多数元数据都有一个属性名称“样式”。可以使用此属性
由客户以某种方式表示对象。属性
目前支持的样式如下：

 <table>
 <caption>样式属性</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 属性<th> </th>
 <th>说明</th>
 <th>类型</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>颜色</td>
 <td>一种颜色，以十六进制表示。 </td>
 <td>字符串（＃000000）</td>
 </tr>
 <tr class="even">
 <td>图标</td>
 <td>一个图标，由图标名称表示。 </td>
 <td>字符串</td>
 </tr>
 </tbody>
 </table>

目前，没有官方列表或对图标库的支持，所以
这目前由客户提供。下面的列表显示
所有支持样式的对象：

-   数据元素

-   数据元素类别选项

-   资料集

-   指示符

-   选项

-   程序

-   计划指标

-   计划科

-   程序阶段

-   程序阶段部分

-   关系（跟踪器）

-   跟踪实体属性

-   追踪实体类型

在创建或更新任何这些对象时，您可以包括
以下有效负载更改样式：

```json
{
    "style": {
        "color": "#ffffff",
        "icon": "my-beautiful-icon"
    }
}
```

## ActiveMQ Artemis / AMQP 1.0集成 { #webapi_amqp_integration }

默认情况下，DHIS2 将在实例启动时启动 ActiveMQ Artemis 的嵌入式实例。对于大多数用例，您不需要配置任何内容即可使用此功能，但如果您的基础架构有您想要使用的现有 AMQP 1.0 兼容服务，您可以使用以下键更改 _dhis.conf_ 文件中的默认值下表。

 <table>
   <caption>
    AMQP 配置键
   </caption>
   <colgroup>
     <col style="width: 15%" />
     <col style="width: 30%" />
     <col style="width: 55%" />
   </colgroup>
   <thead>
     <tr class="header">
       <th> 密钥 </th>
       <th> 值（默认第一个） </th>
       <th> 说明 </th>
     </tr>
   </thead>
   <tbody>
     <tr class="odd">
       <td> amqp.mode </td>
       <td> <code> 嵌入式 </code> | <code> 原生 </code> </td>
       <td> 默认 <code> EMBEDDED </code> 启动内部 AMQP 服务时
      DHIS2 实例正在启动。如果要连接到外部 AMQP 服务
      您需要将模式设置为 <code> NATIVE </code> 。 </td>
     </tr>
     <tr class="odd">
       <td> amqp.host </td>
       <td> <code> 127.0.0.1 </code> </td>
       <td> 要绑定到的主机。 </td>
     </tr>
     <tr class="even">
       <td> amqp.port </td>
       <td> <code> 15672 </code> </td>
       <td> 如果模式是 <code> EMBEDDED </code> 然后在这个端口上启动嵌入式服务器，
      如果 <code> NATIVE </code> 那么客户端将使用这个端口来连接。 </td>
     </tr>
     <tr class="odd">
       <td> amqp.username </td>
       <td> <code> 客人 </code> </td>
       <td> 如果使用 <code> NATIVE </code> 模式要连接的用户名。 </td>
     </tr>
     <tr class="even">
       <td> amqp.password </td>
       <td> <code> 客人 </code> </td>
       <td> 如果使用 <code> NATIVE </code> 模式连接到的密码。 </td>
     </tr>
     <tr class="odd">
       <td> amqp.embedded.persistence </td>
       <td> <code> 假 </code> | <code> 真 </code> </td>
       <td> 如果 mode 为 <code> EMBEDDED </code> ，则此属性控制
      内部队列。 </td>
     </tr>
   </tbody>
 </table>

## CSV元数据导入 { #webapi_csv_metadata_import }

DHIS2支持以CSV格式导入元数据，例如数据元素，组织单位和验证规则。根据列顺序/列索引来标识各种元数据对象的属性（有关详细信息，请参见下文）。您可以省略不需要的对象属性/列，但是由于列顺序很重要，因此必须包括一个空列。换句话说，如果您要指定在列顺序中排在后面的属性/列，但不指定在列顺序中排在较早的位置的某些列，则可以为它们添加空白/空白列。

CSV文件的第一行被视为标题，在导入期间将被忽略。 _comma_字符应用作文本定界符。包含逗号的文本必须放在_双引号_中。

要上传CSV格式的元数据，您可以向元数据端点发出POST请求：

    POST / api / metadata？classKey = CLASS-KEY

支持以下对象类型。 `classKey` 查询参数是强制性的，可以在下表中的每个对象类型旁边找到。

 <table>
 <caption> 对象类型和键 </caption>
 <tr>
 <th> 对象类型 </th>
 <th> 类密钥 </th>
 </tr>
 <tr>
 <td> 数据元素 </td>
 <td> DATA_ELEMENT </td>
 </tr>
 <tr>
 <td> 数据元素组 </td>
 <td> DATA_ELEMENT_GROUP
 </tr>
 <tr>
 <td> 类别选项 </td>
 <td> CATEGORY_OPTION </td>
 </tr>
 <tr>
 <td> 类别选项组 </td>
 <td> CATEGORY_OPTION_GROUP </td>
 </tr>
 <tr>
 <td> 组织单位 </td>
 <td> ORGANISATION_UNIT </td>
 </tr>
 <tr>
 <td> 组织单位组 </td>
 <td> ORGANISATION_UNIT_GROUP </td>
 </tr>
 <tr>
 <td> 验证规则 </td>
 <td> VALIDATION_RULE </td>
 </tr>
 <tr>
 <td> 选项集 </td>
 <td> OPTION_SET </td>
 </tr>
 <tr>
 <td> 翻译 </td>
 <td> 翻译 </td>
 </tr>
 </table>

> **提示**
>
> 如果使用 _curl_，则应使用 `--data-binary` 选项，因为它保留换行符和换行符，这对于 CSV 数据至关重要。

例如，要使用`curl`上传CSV格式的数据元素文件，可以使用以下命令：

```bash
curl --data-binary @data_elements.csv "http://localhost/api/metadata?classKey=DATA_ELEMENT"
  -H "Content-Type:application/csv" -u admin:district
```

以下各节列出了CSV导入当前支持的对象类型的格式。

### 资料元素 { #webapi_csv_data_elements }

 <table>
 <caption> 数据元素 CSV 格式 </caption>
 <colgroup>
 <col />
 <col style="width: 13%" />
 <col style="width: 7%" />
 <col style="width: 27%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 索引 </th>
 <th> 列 </th>
 <th> 需要 </th>
 <th> 值（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 1 </td>
 <td> 名称 </td>
 <td> 是 </td>
 <td> </td>
 <td> 名称。最多 230 个字符。独特。 </td>
 </tr>
 <tr class="even">
 <td> 2 </td>
 <td> UID </td>
 <td> 否 </td>
 <td> UID </td>
 <td> 稳定标识符。正好 11 个字母数字字符，以字符开头。如果未指定，将由系统生成。 </td>
 </tr>
 <tr class="odd">
 <td> 3 </td>
 <td> 代码 </td>
 <td> 否 </td>
 <td> </td>
 <td> 稳定代码。最多 50 个字符。 </td>
 </tr>
 <tr class="even">
 <td> 4 </td>
 <td> 简称 </td>
 <td> 否 </td>
 <td> 50 名称的第一个字符 </td>
 <td> 如果未指定，将回退到名称的前 50 个字符。最多 50 个字符。独特。 </td>
 </tr>
 <tr class="odd">
 <td> 5 </td>
 <td> 说明 </td>
 <td> 否 </td>
 <td> </td>
 <td> 自由文本描述。 </td>
 </tr>
 <tr class="even">
 <td> 6 </td>
 <td> 表格名称 </td>
 <td> 否 </td>
 <td> </td>
 <td> 最多 230 个字符。 </td>
 </tr>
 <tr class="odd">
 <td> 7 </td>
 <td> 域类型 </td>
 <td> 否 </td>
 <td> 聚合 |跟踪器 </td>
 <td> 数据元素的域类型，可以是聚合或跟踪器。最多 16 个字符。 </td>
 </tr>
 <tr class="even">
 <td> 8 </td>
 <td> 值类型 </td>
 <td> 否 </td>
 <td> 整数 |数量 | UNIT_INTERVAL |百分比 | INTEGER_POSITIVE | INTEGER_NEGATIVE | INTEGER_ZERO_OR_POSITIVE | FILE_RESOURCE |坐标 |文本 | LONG_TEXT |信 | PHONE_NUMBER |电子邮件 |布尔值 | TRUE_ONLY |日期 |日期时间 </td>
 <td> 值类型。最多 16 个字符。 </td>
 </tr>
 <tr class="odd">
 <td> 9 </td>
 <td> 聚合类型 </td>
 <td> 否 </td>
 <td> 总和 |平均| AVERAGE_SUM_ORG_UNIT |计数 | STDDEV |方差|最小 |最大 |无 </td>
 <td> 聚合类型，指示如何聚合各个维度的数据。最多 16 个字符。 </td>
 </tr>
 <tr class="even">
 <td> 10 </td>
 <td> 类别组合 </td>
 <td> 否 </td>
 <td> UID </td>
 <td> 类别组合的 UID。如果未指定，将默认为默认类别组合。 </td>
 </tr>
 <tr class="odd">
 <td> 11 </td>
 <td> 网址 </td>
 <td> 否 </td>
 <td> </td>
 <td> 数据元素资源的 URL。最多 255 个字符。 </td>
 </tr>
 <tr class="even">
 <td> 12 </td>
 <td> 零是重要的 </td>
 <td> 否 </td>
 <td> 假 |真 </td>
 <td> 指示是否将为该数据元素存储零值。 </td>
 </tr>
 <tr class="odd">
 <td> 13 </td>
 <td> 选项集 </td>
 <td> 否 </td>
 <td> UID </td>
 <td> 设置为用于数据的选项的 UID。 </td>
 </tr>
 <tr class="even">
 <td> 14 </td>
 <td> 注释选项集 </td>
 <td> 否 </td>
 <td> UID </td>
 <td> 设置为用于注释的选项的 UID。 </td>
 </tr>
 </tbody>
 </table>

下面是数据元素的 CSV 文件示例。首先
行将始终被忽略。请注意如何跳过列并依赖
系统使用的默认值。您还可以跳过列
你不使用出现在右边的

```csv
名称，uid，代码，简称，描述
“妇女参加技能发展培训”，“ D0001”，“妇女参加培训”
“妇女参与社区组织”，“ D0002”，“妇女参与组织”
```

### 组织单位 { #webapi_csv_org_units }

 <table>
 <caption> 组织单位 CSV 格式 </caption>
 <colgroup>
 <col />
 <col style="width: 14%" />
 <col style="width: 10%" />
 <col style="width: 21%" />
 <col style="width: 53%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 索引 </th>
 <th> 列 </th>
 <th> 需要 </th>
 <th> 值（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 1 </td>
 <td> 名称 </td>
 <td> 是 </td>
 <td> </td>
 <td> 名称。最多 230 个字符。独特。 </td>
 </tr>
 <tr class="even">
 <td> 2 </td>
 <td> UID </td>
 <td> 否 </td>
 <td> UID </td>
 <td> 稳定标识符。最多 11 个字符。如果未指定，将由系统生成。 </td>
 </tr>
 <tr class="odd">
 <td> 3 </td>
 <td> 代码 </td>
 <td> 否 </td>
 <td> </td>
 <td> 稳定代码。最多 50 个字符。 </td>
 </tr>
 <tr class="even">
 <td> 4 </td>
 <td> 父级 </td>
 <td> 否 </td>
 <td> UID </td>
 <td> 上级组织单位的 UID。 </td>
 </tr>
 <tr class="odd">
 <td> 5 </td>
 <td> 简称 </td>
 <td> 否 </td>
 <td> 50 名称的第一个字符 </td>
 <td> 如果未指定，将回退到名称的前 50 个字符。最多 50 个字符。独特。 </td>
 </tr>
 <tr class="even">
 <td> 6 </td>
 <td> 说明 </td>
 <td> 否 </td>
 <td> </td>
 <td> 自由文本描述。 </td>
 </tr>
 <tr class="odd">
 <td> 7 </td>
 <td> 开业日期 </td>
 <td> 否 </td>
 <td> 1970-01-01 </td>
 <td> YYYY-MM-DD 格式的组织单元开始日期。 </td>
 </tr>
 <tr class="even">
 <td> 8 </td>
 <td> 关闭日期 </td>
 <td> 否 </td>
 <td> </td>
 <td> YYYY-MM-DD 格式的组织单元关闭日期，如果当前打开则跳过。 </td>
 </tr>
 <tr class="odd">
 <td> 9 </td>
 <td> 评论 </td>
 <td> 否 </td>
 <td> </td>
 <td> 组织单位的自由文本注释。 </td>
 </tr>
 <tr class="even">
 <td> 10 </td>
 <td> 特征类型 </td>
 <td> 否 </td>
 <td> 无 | MULTI_POLYGON |多边形 |点 |符号 </td>
 <td> 地理空间要素类型。 </td>
 </tr>
 <tr class="odd">
 <td> 11 </td>
 <td> 坐标 </td>
 <td> 否 </td>
 <td> </td>
 <td> 用于以 Geo JSON 格式进行地理空间分析的坐标。 </td>
 </tr>
 <tr class="even">
 <td> 12 </td>
 <td> 网址 </td>
 <td> 否 </td>
 <td> </td>
 <td> 组织单位资源的 URL。最多 255 个字符。 </td>
 </tr>
 <tr class="odd">
 <td> 13 </td>
 <td> 联系人 </td>
 <td> 否 </td>
 <td> </td>
 <td> 组织单位联系人。最多 255 个字符。 </td>
 </tr>
 <tr class="even">
 <td> 14 </td>
 <td> 地址 </td>
 <td> 否 </td>
 <td> </td>
 <td> 组织单位地址。最多 255 个字符。 </td>
 </tr>
 <tr class="odd">
 <td> 15 </td>
 <td> 电子邮件 </td>
 <td> 否 </td>
 <td> </td>
 <td> 组织单位的电子邮件。最多 150 个字符。 </td>
 </tr>
 <tr class="even">
 <td> 16 </td>
 <td> 电话号码 </td>
 <td> 否 </td>
 <td> </td>
 <td> 组织单位的电话号码。最多 150 个字符。 </td>
 </tr>
 </tbody>
 </table>

使用父单位导入组织单位的最小示例
看起来像这样：

```csv
名称，uid，代码，父项
“西部省份”，“ WESTP”，“ ImspTQPwCqd”
“东部省”，“ EASTP”，“ ImspTQPwCqd”
```

### 验证规则 { #webapi_csv_validation_rules }

<table>
<caption>Validation Rule CSV Format</caption>
<colgroup>
<col />
<col style="width: 17%" />
<col style="width: 7%" />
<col style="width: 28%" />
<col style="width: 46%" />
</colgroup>
<thead>
<tr class="header">
<th>Index</th>
<th>Column</th>
<th>Required</th>
<th>Value (default first)</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>Name</td>
<td>Yes</td>
<td></td>
<td>Name. Max 230 characters. Unique.</td>
</tr>
<tr class="even">
<td>2</td>
<td>UID</td>
<td>No</td>
<td>UID</td>
<td>Stable identifier. Max 11 char. Will be generated by system if not specified.</td>
</tr>
<tr class="odd">
<td>3</td>
<td>Code</td>
<td>No</td>
<td></td>
<td>Stable code. Max 50</td>
</tr>
<tr class="even">
<td>4</td>
<td>Description</td>
<td>No</td>
<td></td>
<td>Free text description.</td>
</tr>
<tr class="odd">
<td>5</td>
<td>Instruction</td>
<td>No</td>
<td></td>
<td>Free text instruction.</td>
</tr>
<tr class="even">
<td>6</td>
<td>Importance</td>
<td>No</td>
<td>MEDIUM | HIGH | LOW</td>
<td>Importance of validation rule.</td>
</tr>
<tr class="odd">
<td>7</td>
<td>Rule type (ignored)</td>
<td>No</td>
<td>VALIDATION | SURVEILLANCE</td>
<td>Type of validation rule.</td>
</tr>
<tr class="even">
<td>8</td>
<td>Operator</td>
<td>No</td>
<td>equal_to | not_equal_to | greater_than | greater_than_or_equal_to | less_than | less_than_or_equal_to | compulsory_pair | exclusive_pair</td>
<td>Expression operator.</td>
</tr>
<tr class="odd">
<td>9</td>
<td>Period type</td>
<td>No</td>
<td>Monthly | Daily | Weekly | Quarterly | SixMontly | Yearly</td>
<td>Period type.</td>
</tr>
<tr class="even">
<td>10</td>
<td>Left side expression</td>
<td>Yes</td>
<td></td>
<td>Mathematical formula based on data element and option combo UIDs.</td>
</tr>
<tr class="odd">
<td>11</td>
<td>Left side expression description</td>
<td>Yes</td>
<td></td>
<td>Free text.</td>
</tr>
<tr class="even">
<td>12</td>
<td>Left side missing value strategy</td>
<td>No</td>
<td>SKIP_IF_ANY_VALUE_MISSING | SKIP_IF_ALL_VALUES_MISSING | NEVER_SKIP</td>
<td>Behavior in case of missing values in left side expression.</td>
</tr>
<tr class="odd">
<td>13</td>
<td>Right side expression</td>
<td>Yes</td>
<td></td>
<td>Mathematical formula based on data element and option combo UIDs.</td>
</tr>
<tr class="even">
<td>14</td>
<td>Right side expression description</td>
<td>Yes</td>
<td></td>
<td>Free text.</td>
</tr>
<tr class="odd">
<td>15</td>
<td>Right side missing value strategy</td>
<td>No</td>
<td>SKIP_IF_ANY_VALUE_MISSING | SKIP_IF_ALL_VALUES_MISSING | NEVER_SKIP</td>
<td>Behavior in case of missing values in right side expression.</td>
</tr>
</tbody>
</table>

### 选项集 { #webapi_csv_option_sets }

 <table style="width:100%;">
 <caption> 选项集 CSV 格式 </caption>
 <colgroup>
 <col />
 <col style="width: 14%" />
 <col style="width: 11%" />
 <col style="width: 15%" />
 <col style="width: 59%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 索引 </th>
 <th> 列 </th>
 <th> 需要 </th>
 <th> 值（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 1 </td>
 <td> OptionSetName </td>
 <td> 是 </td>
 <td> </td>
 <td> 名称。最多 230 个字符。独特。每个选项都应该重复。 </td>
 </tr>
 <tr class="even">
 <td> 2 </td>
 <td> OptionSetUID </td>
 <td> 否 </td>
 <td> UID </td>
 <td> 稳定标识符。最多 11 个字符。如果未指定，将由系统生成。每个选项都应该重复。 </td>
 </tr>
 <tr class="odd">
 <td> 3 </td>
 <td> OptionSetCode </td>
 <td> 否 </td>
 <td> </td>
 <td> 稳定代码。最多 50 个字符。每个选项都应该重复。 </td>
 </tr>
 <tr class="even">
 <td> 4 </td>
 <td> 选项名称 </td>
 <td> 是 </td>
 <td> </td>
 <td> 选项名称。最多 230 个字符。 </td>
 </tr>
 <tr class="odd">
 <td> 5 </td>
 <td> OptionUID </td>
 <td> 否 </td>
 <td> UID </td>
 <td> 稳定标识符。最多 11 个字符。如果未指定，将由系统生成。 </td>
 </tr>
 <tr class="even">
 <td> 6 </td>
 <td> OptionCode </td>
 <td> 是 </td>
 <td> </td>
 <td> 稳定代码。最多 50 个字符。 </td>
 </tr>
 </tbody>
 </table>

选项集的格式很特殊。前三个值代表
一个选项集。最后三个值代表一个选项。首先
代表选项集的三个值应该对每个值重复
选项。

```csv
optionsetname，optionsetuid，optionsetcode，optionname，optionuid，optioncode
“颜色”，“颜色”，“蓝色”，“蓝色”
“颜色”，“颜色”，“绿色”，“绿色”
“颜色”，“颜色”，“黄色”，“黄色”
“性别”，“男”，“男”
“性别”，“女性”，“女性”
“性别”，“未知”，“未知”
“结果”，“高”，“高”
“结果”，“中”，“中”
“结果”，“低”，“低”
“ Impact”，“ cJ82jd8sd32”，“ IMPACT”，“ Great”，“ GREAT”
“影响”，“ cJ82jd8sd32”，“影响”，“中等”，“中等”
“影响”，“ cJ82jd8sd32”，“影响”，“不良”，“不良”
```

### 选项组 { #option-group }

 <table style="width:100%;">
 <caption>选项组CSV格式</caption>
 <colgroup>
 <col />
 <col style="width: 14%" />
 <col style="width: 11%" />
 <col style="width: 15%" />
 <col style="width: 59%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>索引</th>
 <th>栏</th>
 <th>必需</th>
 <th>值（默认为默认值）</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 1 </td>
 <td> OptionGroupName </td>
 <td>是</td>
 <td>名称。最多230个字符。独特。每个选项都应重复。 </td>
 </tr>
 <tr class="even">
 <td> 2 </td>
 <td> OptionGroupUid </td>
 <td>否</td>
 <td>稳定的标识符。最多11个字符。如果未指定，将由系统生成。每个选项都应重复。 </td>
 </tr>
 <tr class="odd">
 <td> 3 </td>
 <td> OptionGroupCode </td>
 <td>否</td>
 <td>稳定的代码。最多50个字符。每个选项都应重复。 </td>
 </tr>
 <tr class="even">
 <td> 4 </td>
 <td> OptionGroupShortName </td>
 <td>是</td>
 <td>简称。最多50个字符。独特。每个选项都应重复。 </td>
 </tr>
 <tr class="odd">
 <td> 5 </td>
 <td> OptionSetUid </td>
 <td>是</td>
 <td>稳定的标识符。最多11个字符。每个选项都应重复。 </td>
 </tr>
 <tr class="even">
 <td> 6 </td>
 <td> OptionUid </td>
 <td>否</td>
 <td>稳定的标识符。最多11个字符。 </td>
 </tr>
 <tr class="odd">
 <td> 7 </td>
 <td>选项代码</td>
 <td>否</td>
 <td>稳定的代码。最多50个字符。 </td>
 </tr>
 </tbody>
 </table>

OptionGroup CSV有效负载样本

```csv
optionGroupName，optionGroupUid，optionGroupCode，optionGroupShortName，optionSetUid，optionUid，optionCode
optionGroupA，groupA，xmRubJIhmaK，OptionA
optionGroupA，groupgroup，xmRubJIhmaK，OptionB
optionGroupB 、、 groupB，QYDAByFgTr1，OptionC
```

### 选项组集 { #option-group-set }

 <table style="width:100%;">
 <caption>选项组设置CSV格式</caption>
 <colgroup>
 <col />
 <col style="width: 14%" />
 <col style="width: 11%" />
 <col style="width: 15%" />
 <col style="width: 59%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>索引</th>
 <th>栏</th>
 <th>必需</th>
 <th>值（默认为默认值）</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 1 </td>
 <td> OptionGroupSetName </td>
 <td>是</td>
 <td>名称。最多230个字符。独特。每个选项都应重复。 </td>
 </tr>
 <tr class="even">
 <td> 2 </td>
 <td> OptionGroupSetUid </td>
 <td>否</td>
 <td>稳定的标识符。最多11个字符。如果未指定，将由系统生成。每个选项都应重复。 </td>
 </tr>
 <tr class="odd">
 <td> 3 </td>
 <td> OptionGroupSetCode </td>
 <td>否</td>
 <td>稳定的代码。最多50个字符。每个选项都应重复。 </td>
 </tr>
 <tr class="even">
 <td> 4 </td>
 <td> OptionGroupSetDescription </td>
 <td>否</td>
 <td>说明。每个选项都应重复。 </td>
 </tr>
 <tr class="odd">
 <td> 5 </td>
 <td> DataDimension </td>
 <td>否</td>
 <td>是，否</td>
 </tr>
 <tr class="even">
 <td> 6 </td>
 <td> OptionSetUid </td>
 <td>否</td>
 <td> OptionSet UID。稳定的标识符。最多11个字符。 </td>
 </tr>
 </tbody>
 </table>

OptionGroupSet CSV有效负载样本

```csv
名称，uid，代码，描述，数据维度，选项
optiongroupsetA，...，xmRubJIhmaK
optiongroupsetB 、、、、 false，QYDAByFgTr1
```

要将OptionGroups添加到导入的OptionGroupSet中，请按照导入集合成员身份的步骤进行操作

### 收藏会员 { #collection-membership }

除了导入对象，您还可以选择只导入对象
对象和组之间的组成员关系。目前，该
支持以下组和对象对

-   组织单位组-组织单位

-   数据元素组-数据元素

-   指标组-指标

-   选项组集-选项组

这些导入的CSV格式相同

 <table>
 <caption>集合成员资格CSV格式</caption>
 <colgroup>
 <col />
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>索引</th>
 <th>栏</th>
 <th>必需</th>
 <th>值（默认为默认值）</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 1 </td>
 <td> UID </td>
 <td>是</td>
 <td> UID </td>
 <td>要将对象添加到</td>的集合的UID
 </tr>
 <tr class="even">
 <td> 2 </td>
 <td> UID </td>
 <td>是</td>
 <td> UID </td>
 <td>要添加到集合</td>中的对象的UID
 </tr>
 </tbody>
 </table>

### 其他物件 { #webapi_csv_other_objects }

 <table>
 <caption> 数据元素组、类别选项、类别选项组、组织单元组 CSV 格式 </caption>
 <colgroup>
 <col />
 <col style="width: 17%" />
 <col style="width: 12%" />
 <col style="width: 14%" />
 <col style="width: 55%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 索引 </th>
 <th> 列 </th>
 <th> 需要 </th>
 <th> 值（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 1 </td>
 <td> 名称 </td>
 <td> 是 </td>
 <td> </td>
 <td> 名称。最多 230 个字符。独特。 </td>
 </tr>
 <tr class="even">
 <td> 2 </td>
 <td> UID </td>
 <td> 否 </td>
 <td> UID </td>
 <td> 稳定标识符。最多 11 个字符。如果未指定，将由系统生成。 </td>
 </tr>
 <tr class="odd">
 <td> 3 </td>
 <td> 代码 </td>
 <td> 否 </td>
 <td> </td>
 <td> 稳定代码。最多 50 个字符。 </td>
 </tr>
 <tr class="even">
 <td> 4 </td>
 <td> 简称 </td>
 <td> 否 </td>
 <td> </td>
 <td> 简称。最多 50 个字符。 </td>
 </tr>
 </tbody>
 </table>

类别选项的示例如下所示：

```csv
名称，uid，代码，简称
“男”，“男”
“女性”，“女性”
```

## 删除的对象 { #webapi_deleted_objects }

删除的对象资源提供了元数据对象的日志
删除。

    / api / deletedObjects

每当删除元数据类型的对象时，都会保留日志
uid、代码、类型和删除时间。这个 API 是
在`/api/deletedObjects` 字段过滤和对象过滤中可用
与其他元数据资源类似。

获取类型为数据元素的已删除对象：

    GET /api/deletedObjects.json?klass=DataElement

获取在 2015 年删除的指标类型的已删除对象和
向前：

    GET /api/deletedObjects.json?klass=指示器&deletedAt=2015-01-01

## 收藏夹 { #webapi_favorites }

某些类型的元数据对象可以标记为收藏夹
当前登录的用户。这目前适用于仪表板。

    / api / dashboards / <uid> /收藏

要使仪表板成为收藏夹，您可以向如下 URL 发出 _POST_ 请求（无需内容类型）：

    / api /仪表板/ iMnYyBfSxmM /收藏

要将仪表板从收藏夹中删除，您可以使用与上述相同的 URL 发出 _DELETE_ 请求。

收藏夹状态将在元数据响应中的对象（例如仪表板）上显示为布尔值 _favorite_ 字段。

## 订阅内容 { #webapi_subscription }

登录的用户可以订阅某些类型的对象。现在
可订阅对象是 Chart、EventChart、EventReport 类型的对象，
地图、报告表和可视化。

> **注意**
>
>不推荐使用Chart和ReportTable对象。改为使用可视化。

要获取对象的订阅者（返回用户 ID 数组），您可以发出 _GET_ 请求：

    / api / <object-type> / <object-id> /订阅者

请参见以下示例：

    / api / charts / DkPKc1EUmC2 / subscribers

要检查当前用户是否订阅了对象（返回布尔值），您可以执行 _GET_ 调用：

    / api / <object-type> / <object-id> /已订阅

请参见以下示例：

    / api / charts / DkPKc1EUmC2 /已订阅

要订阅/取消订阅对象，您可以执行 _POST/DELETE_ 请求（不需要内容类型）：

    / api / <object-type> / <object-id> / subscriber

## 文件资源 { #webapi_file_resources }

_文件资源_是用于表示和存储二进制内容的对象。 _FileResource_ 对象本身包含文件元数据（名称、内容类型、大小等）以及允许从数据库外部文件存储检索内容的密钥。 _FileResource_ 对象与任何其他对象一样存储在数据库中，但内容（文件）存储在其他位置，并且可以使用包含的引用 _(storageKey)_ 进行检索。

    / api / fileResources

文件资源的内容不能直接访问，但可以
从其他对象（如数据值）引用来存储二进制
几乎无限大小的内容。

文件资源本身的创建是通过 `/api/fileResources` 端点作为分段上传 POST 请求完成的：

```bash
curl "https://server/api/fileResources" -X POST 
  -F "file=@/Path/to/file;filename=name-of-file.png" 
```

唯一需要的表单参数是 _file_，它是要上传的文件。文件名和内容类型也应包含在请求中，但在未提供时将替换为默认值。

成功创建文件资源后，返回的数据将包含
一个 `response` 字段，它又包含这样的 `fileResource`：

```json
{
  "httpStatus": "Accepted",
  "httpStatusCode": 202,
  "status": "OK",
  "response": {
    "responseType": "FileResource",
    "fileResource": {
      "name": "name-of-file.png",
      "created": "2015-10-16T16:34:20.654+0000",
      "lastUpdated": "2015-10-16T16:34:20.667+0000",
      "externalAccess": false,
      "publicAccess": "--------",
      "user": { ... },
      "displayName": "name-of-file.png",
      "contentType": "image/png",
      "contentLength": 512571,
      "contentMd5": "4e1fc1c3f999e5aa3228d531e4adde58",
      "storageStatus": "PENDING",
      "id": "xm4JwRwke0i"
    }
  }
}
```

请注意，响应是 _202 Accepted_，表明返回的资源已提交进行后台处理（在这种情况下会持续到外部文件存储）。另外，请注意`storageStatus`字段，该字段指示内容是否已存储。此时，如`PENDING`状态所示，对外部存储的持久化尚未完成（它可能被上传到某处基于云的存储）。

即使内容尚未完全存储，文件资源现在也可以使用，例如作为数据值中的引用内容（请参阅[使用文件数据值](#datavalue_file)）。如果我们需要检查更新后的 _storageStatus_ 或检索文件的元数据，可以查询 `fileResources` 端点。

```bash
curl "https://server/api/fileResources/xm4JwRwke0i" -H "Accept: application/json"
```

此请求将返回 `FileResource` 对象，如
上面例子的反应。

### 文件资源限制 { #webapi_file_resources_constraints }

-   文件资源_必须_被另一个对象引用（分配），才能被长期持久化。已创建但未被其他对象（如数据值）引用的文件资源被视为处于_暂存_状态。任何处于这种状态且时间超过_2 小时_的文件资源都将被标记为删除，并最终从系统中清除。

-   初始创建文件资源时返回的 ID 无法从任何其他位置检索，除非文件资源已被引用（其中 ID 将作为引用存储），因此丢失它需要重复 POST 请求，并且要创建的新对象。 _孤立_文件资源将被自动清理。

-   文件资源对象是_不可变的_，这意味着不允许修改，需要创建一个全新的资源。

### 文件资源阻止列表 { #file-resource-blocklist }

出于安全原因，某些类型的文件被阻止上传。

以下内容类型被阻止。

| 内容类型 | 内容类型 |
| --- | --- |
| 文字/ HTML | 应用程序/ x-ms-dos-可执行 |
| 文字/ css | application / vnd.microsoft.portable-executable |
| 文字/ javascript | application / vnd.apple.installer + xml |
| 字体/ otf | application / vnd.mozilla.xul + xml |
| 应用程序/ x-shockwave-flash | 应用程序/ x-httpd-php |
| application / vnd.debian.binary-package | 应用程序/ x-sh |
| 应用/ x-rpm | 应用程序/ x-csh |
| 应用程序/ Java归档 |  |

以下文件扩展名被阻止。

| 文件扩展名 | 文件扩展名 | 文件扩展名 |
| -------------- | -------------- | -------------- |
| html           | 黛比            | ul            |
| 哈特姆            | 转数            | 的PHP            |
| 的CSS            | 罐            | 箱子            |
| js             | jsp            | SH             |
| 微信            | 可执行程序            | 西施            |
| OTF            | 微星            | 蝙蝠            |
| 瑞士法郎            | 每公斤           |                |

## 元数据版本控制 { #webapi_metadata_versioning }

本节介绍了可用的元数据版本控制 API
2.24

-   `/api/metadata/version`：此端点将返回调用它的系统的当前元数据版本。

<table>
<caption>Query Parameters</caption>
<colgroup>
<col style="width: 19%" />
<col style="width: 23%" />
<col style="width: 57%" />
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>versionName</td>
<td>false</td>
<td>If this parameter is not specified, it will return the current version of the system or otherwise it will return the details of the versionName passed as parameter. (versionName is of the syntax &quot;Version_&lt;id&gt;&quot;</td>
</tr>
</tbody>
</table>

### 获取元数据版本示例 { #webapi_metadata_versioning_examples }

**示例：**获取此系统的当前元数据版本

请求：

```
/ api /元数据/版本
```

响应：

```json
{
    "name": "Version_4",
    "created": "2016-06-30T06:01:28.684+0000",
    "lastUpdated": "2016-06-30T06:01:28.685+0000",
    "externalAccess": false,
    "displayName": "Version_4",
    "type": "BEST_EFFORT",
    "hashCode": "848bf6edbaf4faeb7d1a1169445357b0",
    "id": "Ayz2AEMB6ry"
}
```

**示例：**获取名称为“ Version_2”的版本的详细信息

请求：

```
/ api / metadata / version？versionName = Version_2
```

响应：

```json
{
    "name": "Version_2",
    "created": "2016-06-30T05:59:33.238+0000",
    "lastUpdated": "2016-06-30T05:59:33.239+0000",
    "externalAccess": false,
    "displayName": "Version_2",
    "type": "BEST_EFFORT",
    "hashCode": "8050fb1a604e29d5566675c86d02d10b",
    "id": "SaNyhusVxBG"
}
```

-   `/api/metadata/version/history`：此端点将返回调用它的系统的所有元数据版本的列表。

 <table>
 查询参数<caption> </caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 23%" />
 <col style="width: 57%" />
 </colgroup>
 <thead>
 <tr class="header">
 名称<th> <p>名称</p> </th>
 <th> <p>必需</p> </th>
 <th> <p>说明</p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 基线<td> <p>基线</p> </td>
 <td> <p>否</p> </td>
 <td> <p>如果未指定此参数，它将返回所有元数据版本的列表。否则，我们需要传递形式为&quot;Version_&lt;id&gt;&quot;的versionName参数。然后，它将返回系统中存在的版本列表，这些版本是在作为查询参数提供的版本名称之后创建的。 </p> </td>
 </tr>
 </tbody>
 </table>

### 获取所有元数据版本的列表 { #webapi_get_list_of_metadata_versions }

**示例：**获取此系统中所有版本的列表

请求：

```
/ api /元数据/版本/历史记录
```

响应：

```json
{
    "metadataversions": [
        {
            "name": "Version_1",
            "type": "BEST_EFFORT",
            "created": "2016-06-30T05:54:41.139+0000",
            "id": "SjnhUp6r4hG",
            "hashCode": "fd1398ff7ec9fcfd5b59d523c8680798"
        },
        {
            "name": "Version_2",
            "type": "BEST_EFFORT",
            "created": "2016-06-30T05:59:33.238+0000",
            "id": "SaNyhusVxBG",
            "hashCode": "8050fb1a604e29d5566675c86d02d10b"
        },
        {
            "name": "Version_3",
            "type": "BEST_EFFORT",
            "created": "2016-06-30T06:01:23.680+0000",
            "id": "FVkGzSjAAYg",
            "hashCode": "70b779ea448b0da23d8ae0bd59af6333"
        }
    ]
}
```

**示例：**获取此系统在“ Version_2”之后创建的所有版本的列表

请求：

```
/ api / metadata / version / history？baseline = Version_2
```

响应：

```json
{
    "metadataversions": [
        {
            "name": "Version_3",
            "type": "BEST_EFFORT",
            "created": "2016-06-30T06:01:23.680+0000",
            "id": "FVkGzSjAAYg",
            "hashCode": "70b779ea448b0da23d8ae0bd59af6333"
        },
        {
            "name": "Version_4",
            "type": "BEST_EFFORT",
            "created": "2016-06-30T06:01:28.684+0000",
            "id": "Ayz2AEMB6ry",
            "hashCode": "848bf6edbaf4faeb7d1a1169445357b0"
        }
    ]
}
```

-   `/api/metadata/version/create`：此端点将为参数中指定的版本类型创建元数据版本。

 <table>
 查询参数<caption> </caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 23%" />
 <col style="width: 57%" />
 </colgroup>
 <thead>
 <tr class="header">
 名称<th> <p>名称</p> </th>
 <th> <p>必需</p> </th>
 <th> <p>说明</p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> <p>类型</p> </td>
 <td> <p>是</p> </td>
 <td> <p>需要创建的元数据版本的类型。 </p>
 <ul>
 <li> <p> BEST_EFFORT </p> </li>
 <li> <p> ATOMIC </p> </li>
 </ul> </td>
 </tr>
 </tbody>
 </table>

用户可以选择需要创建的元数据类型。
元数据版本类型决定了进口商应该如何对待给定的
版本。导入元数据时将使用此类型。有
两种类型的元数据。

-   _BEST_EFFORT_：此类型表明可以忽略丢失的引用，并且导入器可以继续导入元数据（例如，数据元素组导入中丢失的数据元素）。

-   _ATOMIC_：此类型确保对元数据引用进行严格的类型检查，如果任何引用不存在，则元数据导入将失败。

> **注意**
>
> 建议使用 ATOMIC 类型的版本，以确保所有系统（中央和本地）具有相同的元数据。任何缺失的引用都会在验证阶段本身被捕获。请参阅进口商详细信息以获取完整说明。

### 创建元数据版本 { #webapi_create_metadata_version }

**示例：** 创建类型为 `BEST_EFFORT` 的元数据版本

请求：

```bash
curl -X POST -u admin:district "https://play.dhis2.org/dev/api/metadata/version/create?type=BEST_EFFORT"
```

响应：

```json
{
    "name": "Version_1",
    "created": "2016-06-30T05:54:41.139+0000",
    "lastUpdated": "2016-06-30T05:54:41.333+0000",
    "externalAccess": false,
    "publicAccess": "--------",
    "user": {
        "name": "John Traore",
        "created": "2013-04-18T17:15:08.407+0000",
        "lastUpdated": "2016-04-06T00:06:06.571+0000",
        "externalAccess": false,
        "displayName": "John Traore",
        "id": "xE7jOejl9FI"
    },
    "displayName": "Version_1",
    "type": "BEST_EFFORT",
    "hashCode": "fd1398ff7ec9fcfd5b59d523c8680798",
    "id": "SjnhUp6r4hG"
}
```

-   `/api/metadata/version/{versionName}/data`：此端点将下载特定于作为路径参数传递的版本名称的实际元数据。

-   `/api/metadata/version/{versionName}/data.gz`：此端点将以压缩格式（gzipped）下载特定于作为路径参数传递的版本名称的实际元数据。

 <table>
 <caption> 路径参数 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> <p> 名称 </p> </th>
 <th> <p> 需要 </p> </th>
 <th> <p> 说明 </p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> <p> 版本名称 </p> </td>
 <td> <p> true </p> </td>
 <td>形式的<p> Path参数&quot;Version_&lt;id&gt;&quot;从而使API下载特定版本</p> </td>
 </tr>
 </tbody>
 </table>

### 下载版本元数据 { #webapi_download_version_metadata }

**示例：**获取“版本5”的实际元数据

请求：

```bash
curl -u admin:district "https://play.dhis2.org/dev/api/metadata/version/Version_5/data"
```

响应：

```json
{
    "date": "2016-06-30T06:10:23.120+0000",
    "dataElements": [
        {
            "code": "ANC 5th Visit",
            "created": "2016-06-30T06:10:09.870+0000",
            "lastUpdated": "2016-06-30T06:10:09.870+0000",
            "name": "ANC 5th Visit",
            "id": "sCuZKDsix7Y",
            "shortName": "ANC 5th Visit ",
            "aggregationType": "SUM",
            "domainType": "AGGREGATE",
            "zeroIsSignificant": false,
            "valueType": "NUMBER",
            "categoryCombo": {
                "id": "p0KPaWEg3cf"
            },
            "user": {
                "id": "xE7jOejl9FI"
            }
        }
    ]
}
```

## 元数据同步 { #webapi_metadata_synchronization }

本节介绍了可用的元数据同步 API
2.24 开始

-   `/api/metadata/sync`：此端点通过从远程服务器下载并导入设置应用程序中定义的指定版本，对查询参数中传递的版本名称执行元数据同步。

 <table>
 查询参数<caption> </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 名称<th> <p>名称</p> </th>
 <th> <p>必需</p> </th>
 <th> <p>说明</p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> <p>版本名称</p> </td>
 <td> <p>是</p> </td>
 <td> <p> versionName查询参数，格式为&quot;Version_&lt;id&gt;&quot;。 api从远程服务器下载此版本，并将其导入本地系统。 </p> </td>
 </tr>
 </tbody>
 </table>

-   使用此 API 时应格外小心。请注意，还有另一种方法可以通过利用“数据管理”应用程序中的元数据同步任务以完全自动化的方式实现同步。有关元数据同步任务的更多详细信息，请参阅用户手册第 22 章第 22.17 节。

-   该同步 API 也可以用于同步元数据同步调度程序失败的版本的元数据。由于它依赖于给定的元数据版本号，因此应注意调用的顺序。例如。如果此 api 用于从中央实例同步某些更高版本，则同步可能会失败，因为本地实例中不存在元数据依赖项。

-   假设本地实例处于`Version_12`，并且如果此端点用于从中央实例同步`Version_15`（类型为`BEST_EFFORT`），则调度程序将从`Version_16`开始同步元数据。所以本地实例不会有 `Version_12` 和 `Version_15` 之间的元数据版本。您只需要使用这些端点手动同步丢失的版本。

### 同步元数据版本 { #webapi_metadata_synchronization_version }

**示例：**将Version_6从中央系统同步到该系统

请求：

```bash
curl -u admin:district "https://play.dhis2.org/dev/api/metadata/sync?versionName=Version_6"
```

## 数据值 { #webapi_data_values }

本节关于发送和读取数据值。

    / api / 33 / dataValueSets

### 发送数据值 { #webapi_sending_data_values }

系统集成的一个常见用例是需要将一组数据值从第三方系统发送到 DHIS。在这个例子中，我们将使用 `http://play.dhis2.org/demo` 上的 DHIS2 演示作为基础。我们假设我们已经使用在手机上运行的简单软件客户端收集了 2014 年 1 月在 _Ngelehun CHC_ 社区（_Badjia_ 酋长领地，_Bo_ 区）的_死亡率 <5 年_数据集的基于案例的数据。我们有现在将我们的数据聚合到一个统计报告中，并希望将该数据发送到 DHIS2 实例。演示 API 的基本 URL 是 `http://play.dhis2.org/demo/api`。以下链接与基本 URL 相关。

最适合我们发送数据的资源
values 是 `/api/dataValueSets` 资源。一个数据值集代表一个
一组具有关系的数据值，通常来自
从相同的数据输入表单中捕获。格式看起来像
这：

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataSet="dataSetID"
  completeDate="date" period="period" orgUnit="orgUnitID" attributeOptionCombo="aocID">
  <dataValue dataElement="dataElementID" 
    categoryOptionCombo="cocID" value="1" comment="comment1"/>
  <dataValue dataElement="dataElementID" 
    categoryOptionCombo="cocID" value="2" comment="comment2"/>
  <dataValue dataElement="dataElementID" 
    categoryOptionCombo="cocID" value="3" comment="comment3"/>
</dataValueSet>
```

JSON支持以下格式：

```json
{
    "dataSet": "dataSetID",
    "completeDate": "date",
    "period": "period",
    "orgUnit": "orgUnitID",
    "attributeOptionCombo": "aocID",
    "dataValues": [
        {
            "dataElement": "dataElementID",
            "categoryOptionCombo": "cocID",
            "value": "1",
            "comment": "comment1"
        },
        {
            "dataElement": "dataElementID",
            "categoryOptionCombo": "cocID",
            "value": "2",
            "comment": "comment2"
        },
        {
            "dataElement": "dataElementID",
            "categoryOptionCombo": "cocID",
            "value": "3",
            "comment": "comment3"
        }
    ]
}
```

CSV支持以下格式：

```csv
“ dataelement”，“ period”，“ orgunit”，“ catoptcombo”，“ attroptcombo”，“ value”，“ strby”，“ lstupd”，“ cmt”
“ dataElementID”，“ period”，“ orgUnitID”，“ cocID”，“ aocID”，“ 1”，“用户名”，“ 2015-04-01”，“ comment1”
“ dataElementID”，“ period”，“ orgUnitID”，“ cocID”，“ aocID”，“ 2”，“用户名”，“ 2015-04-01”，“ comment2”
“ dataElementID”，“ period”，“ orgUnitID”，“ cocID”，“ aocID”，“ 3”，“用户名”，“ 2015-04-01”，“ comment3”
```

> **注意**
>
>有关时间格式，请参阅上面的日期和期间部分。

从这个例子中，我们可以看出我们需要识别周期，
数据集、组织单位（设施）和数据元素
报告。

为了获取数据集的标识符，我们向 `/api/dataSets` 资源发出请求。从那里我们找到并点击指向 _Mortality < 5 years_ 数据集的链接，该链接将我们带到`/api/dataSets/pBOMPrpg1QX`。 _Mortality < 5 years_ 数据集的资源表示方便地公布指向其成员的数据元素的链接。从这里我们可以按照这些链接获取数据元素的标识符。为简洁起见，我们将仅报告三个数据元素：_Measles_，id 为`f7n9E0hX8qk`，_Dysentery_，id 为`Ix2HsbDMLea`，_Cholera_，id 为`eY5ehpbEsB7`。

What remains is to get hold of the identifier of the organisation unit. The _dataSet_ representation conveniently provides a link to organisation units which report on it so we search for _Ngelehun CHC_ and follow the link to the HTML representation at `/api/organisationUnits/DiszpKrYNg8`, which tells us that the identifier of this org unit is `DiszpKrYNg8`.

根据我们基于病例的数据，我们假设我们有 12 例麻疹病例，14
痢疾16例，霍乱16例。我们现在已经聚集了足够的
能够将 XML 数据值集放在一起的信息
信息：

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataSet="pBOMPrpg1QX"
  completeDate="2014-02-03" period="201401" orgUnit="DiszpKrYNg8">
  <dataValue dataElement="f7n9E0hX8qk" value="12"/>
  <dataValue dataElement="Ix2HsbDMLea" value="14"/>
  <dataValue dataElement="eY5ehpbEsB7" value="16"/>
</dataValueSet>
```

JSON格式：

```json
{
    "dataSet": "pBOMPrpg1QX",
    "completeDate": "2014-02-03",
    "period": "201401",
    "orgUnit": "DiszpKrYNg8",
    "dataValues": [
        {
            "dataElement": "f7n9E0hX8qk",
            "value": "1"
        },
        {
            "dataElement": "Ix2HsbDMLea",
            "value": "2"
        },
        {
            "dataElement": "eY5ehpbEsB7",
            "value": "3"
        }
    ]
}
```

To perform functional testing we will use the _curl_ tool which provides
an easy way of transferring data using HTTP. First, we save the data
value set XML content in a file called `datavalueset.xml`. From the
directory where this file resides we invoke the following from the
command line:

```bash
curl -d @datavalueset.xml "https://play.dhis2.org/demo/api/33/dataValueSets"
  -H "Content-Type:application/xml" -u admin:district
```

要发送 JSON 内容，您必须设置 content-type 标头
因此：

```bash
curl -d @datavalueset.json "https://play.dhis2.org/demo/api/33/dataValueSets"
  -H "Content-Type:application/json" -u admin:district
```

该命令将向演示 Web API 发送请求，设置
`application/xml` 作为内容类型并使用
`admin`/`district` 作为用户名/密码。如果一切顺利，这将返回一个
`200 OK` HTTP 状态代码。您可以验证数据是否已
通过在 DHIS2 中打开数据输入模块并选择组织来接收
本例中使用的单位、数据集和期间。

The API follows normal semantics for error handling and HTTP status
codes. If you supply an invalid username or password, `401 Unauthorized`
is returned. If you supply a content-type other than `application/xml`,
`415 Unsupported Media Type` is returned. If the XML content is invalid
according to the DXF namespace, `400 Bad Request` is returned. If you
provide an invalid identifier in the XML content, `409 Conflict` is
returned together with a descriptive message.

### 发送大量数据值 { #webapi_sending_bulks_data_values }

前面的例子向我们展示了如何发送一组相关的数据值
共享同一时期和组织单位。这个例子将向我们展示
如何发送大量不一定是的数据值
逻辑相关。

我们将再次与`/api/dataValueSets` 资源交互。这次我们
不会指定 `dataSet` 和 `completeDate` 属性。此外，我们将
在单个数据值上指定 `period` 和 `orgUnit` 属性
元素而不是外部数据值集元素。这会
使我们能够发送不同时期和组织单位的数据值：

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0">
  <dataValue dataElement="f7n9E0hX8qk" 
    period="201401" orgUnit="DiszpKrYNg8" value="12"/>
  <dataValue dataElement="f7n9E0hX8qk" 
    period="201401" orgUnit="FNnj3jKGS7i" value="14"/>
  <dataValue dataElement="f7n9E0hX8qk" 
    period="201402" orgUnit="DiszpKrYNg8" value="16"/>
  <dataValue dataElement="f7n9E0hX8qk" 
    period="201402" orgUnit="Jkhdsf8sdf4" value="18"/>
</dataValueSet>
```

JSON格式：

```json
{
    "dataValues": [
        {
            "dataElement": "f7n9E0hX8qk",
            "period": "201401",
            "orgUnit": "DiszpKrYNg8",
            "value": "12"
        },
        {
            "dataElement": "f7n9E0hX8qk",
            "period": "201401",
            "orgUnit": "FNnj3jKGS7i",
            "value": "14"
        },
        {
            "dataElement": "f7n9E0hX8qk",
            "period": "201402",
            "orgUnit": "DiszpKrYNg8",
            "value": "16"
        },
        {
            "dataElement": "f7n9E0hX8qk",
            "period": "201402",
            "orgUnit": "Jkhdsf8sdf4",
            "value": "18"
        }
    ]
}
```

CSV格式：

```csv
“ dataelement”，“ period”，“ orgunit”，“ categoryoptioncombo”，“ attributeoptioncombo”，“ value”
“ f7n9E0hX8qk”，“ 201401”，“ DiszpKrYNg8”，“ bRowv6yZOF2”，“ bRowv6yZOF2”，“ 1”
“ Ix2HsbDMLea”，“ 201401”，“ DiszpKrYNg8”，“ bRowv6yZOF2”，“ bRowv6yZOF2”，“ 2”
“ eY5ehpbEsB7”，“ 201401”，“ DiszpKrYNg8”，“ bRowv6yZOF2”，“ bRowv6yZOF2”，“ 3”
```

我们通过使用curl以XML格式发送数据值进行测试：

```bash
curl -d @datavalueset.xml "https://play.dhis2.org/demo/api/33/dataValueSets"
  -H "Content-Type:application/xml" -u admin:district
```

请注意，使用 CSV 格式时，您必须使用二进制数据选项
保留 CSV 文件中的换行符：

```bash
curl --data-binary @datavalueset.csv "https://play.dhis2.org/demo/24/api/dataValueSets"
  -H "Content-Type:application/csv" -u admin:district
```

数据值集资源提供有用的 XML 响应
当您想验证您的请求所产生的影响时。我们第一次
发送上面的数据值设置请求，服务器将响应
以下导入摘要：

```xml
<importSummary>
  <dataValueCount imported="2" updated="1" ignored="1"/>
  <dataSetComplete>false</dataSetComplete>
</importSummary>
```

此消息告诉我们导入了 3 个数据值，1 个数据值是
在忽略零数据值时更新。单一更新来自
我们在上一个示例中发送该数据值的结果。一个数据
如果引用不存在的数据元素，值将被忽略，
期间、组织单位或数据集。在我们的例子中，这个被忽略的值是
由对组织单位的无效引用的最后一个数据值引起。
数据集完整元素将显示数据的日期
值集已完成，如果没有数据元素属性，则为 false
提供。

### 导入参数 { #webapi_data_values_import_parameters }

可以使用一组导入参数来自定义导入过程：

 <table>
 <caption> 导入参数 </caption>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 值（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> dataElementIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射数据值的数据元素对象的属性。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射数据值的组织单位对象的属性。 </td>
 </tr>
 <tr class="odd">
 <td> categoryOptionComboIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射数据值的类别选项组合和属性选项组合对象的属性。 </td>
 </tr>
 <tr class="even">
 <td> idScheme </td>
 <td> id |姓名 |代码|属性：ID </td>
 <td> 所有对象的属性，包括数据元素、组织单位和类别选项组合，用于映射数据值。 </td>
 </tr>
 <tr class="odd">
 <td> preheatCache </td>
 <td> 假 |真 </td>
 <td> 指示是否在开始导入数据值之前预加载元数据缓存，以加快具有高元数据基数的大型导入负载。 </td>
 </tr>
 <tr class="even">
 <td> dryRun </td>
 <td> 假 |真 </td>
 <td> 是在服务器上保存更改还是只返回导入摘要。 </td>
 </tr>
 <tr class="odd">
 <td> 导入策略 </td>
 <td> 创建 |更新 | CREATE_AND_UPDATE |删除 </td>
 <td> 在服务器上保存所有对象、新对象或更新导入状态。 </td>
 </tr>
 <tr class="even">
 <td>skipExistingCheck </td>
 <td> 假 |真 </td>
 <td> 跳过对现有数据值的检查。提高性能。仅用于空数据库或要导入的数据值不存在时。 </td>
 </tr>
 <tr class="even">
 <td> 跳过审核 </td>
 <td> 假 |真 </td>
 <td> 跳过审计，意味着不会生成审计值。以审计变更的能力为代价提高性能。需要权限“F_SKIP_DATA_IMPORT_AUDIT”。 </td>
 </tr>
 <tr class="odd">
 <td> 异步 </td>
 <td> 假 |真 </td>
 <td> 指示导入是异步还是同步。前者适用于非常大的导入，因为它确保请求不会超时，尽管它具有显着的性能开销。后者速度更快，但需要连接持续到进程完成。 </td>
 </tr>
 <tr class="even">
 <td> 强制 </td>
 <td> 假 |真 </td>
 <td> 指示是否应该强制导入。数据导入可能会因数据集锁定的各种原因而被拒绝，例如由于批准、数据输入期限、到期天数等。为了覆盖此类锁定并强制输入数据，可以使用 force=true 的数据导入。但是，要使此参数起作用，您必须是*超级用户*。 </td>
 </tr>
 </tbody>
 </table>

所有参数都是可选的，可以作为查询参数提供
请求 URL 是这样的：

    / api / 33 / dataValueSets？dataElementIdScheme = code＆orgUnitIdScheme = name
      ＆dryRun = true＆importStrategy =创建

它们也可以作为数据值集上的 XML 属性提供
元素如下。 XML 属性将覆盖查询字符串
参数。

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataElementIdScheme="code"
  orgUnitIdScheme="name" dryRun="true" importStrategy="CREATE">
</dataValueSet>
```

请注意，`preheatCache` 参数会对
表现。对于小的导入文件，将其设置为 false 会很快。
对于包含大量不同数据的大型导入文件
元素和组织单位，将其设置为 true 将是
幅度更快。

#### 数据值要求 { #webapi_data_values_import_requirement }

数据值导入支持一组值类型。对于每个值类型，
有一个特殊要求。下表列出了边缘情况
对于值类型。

 <table>
 值类型要求<caption> </caption>
 <thead>
 <tr class="header">
 <th>值类型</th>
 <th>要求</th>
 <th>评论</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> BOOLEAN </td>
 <td>是|是的TRUE |错误错误|假| 1 | 0 | t | f | </td>
 <td>当值是布尔值，true或false时使用。导入服务不关心输入的内容是大写还是小写字母，或者全部是大写字母。 </td>
 </tr>
 </tbody>
 </table>

#### 标识符方案 { #webapi_data_values_identifier_schemes }

Regarding the id schemes, by default the identifiers used in the XML
messages use the DHIS2 stable object identifiers referred to as `UID`.
In certain interoperability situations we might experience that an external
system decides the identifiers of the objects. In that case we can use
the `code` property of the organisation units and other objects to set
fixed identifiers. When importing data values we hence need to reference
the code property instead of the identifier property of these metadata
objects. Identifier schemes can be specified in the XML message as well
as in the request as query parameters. To specify it in the XML payload
you can do this:

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0"
  dataElementIdScheme="CODE" orgUnitIdScheme="UID" idScheme="CODE">
</dataValueSet>
```

上面的参数表解释了如何指定 id 方案
作为查询参数。以下规则适用于
优先级：

-   XML 或 JSON 负载中定义的 ID 方案优先于定义为 URL 查询参数的 ID 方案。

-   包括 dataElementIdScheme 和 orgUnitIdScheme 在内的特定 id 方案优先于通用 idScheme。

-   默认的 id 方案是 UID，如果没有定义明确的 id 方案，将使用该方案。

以下标识符方案可用。

-   uid（默认）

-   码

-   名称

-   属性（后跟属性的UID）

The attribute option is special and refers to meta-data attributes which have been marked as _unique_. When using this option, `attribute` must be immediately followed by the identifier of the attribute, e.g. "attribute:DnrLSdo4hMl".

#### 异步数据值导入 { #webapi_data_values_async_import }

通过提供一个设置为 _true_ 的 `async` 查询参数，可以异步方式发送和导入数据值：

    / api / 33 / dataValueSets？async = true

这将启动一个异步导入作业，您可以对其进行监控
任务摘要 API 中的状态。 API 响应表明
作业的唯一标识符、作业类型和可用于的 URL
监控导入作业状态。响应将类似于以下内容：

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Initiated dataValueImport",
    "response": {
        "name": "dataValueImport",
        "id": "YR1UxOUXmzT",
        "created": "2018-08-20T14:17:28.429",
        "jobType": "DATAVALUE_IMPORT",
        "relativeNotifierEndpoint": "/api/system/tasks/DATAVALUE_IMPORT/YR1UxOUXmzT"
    }
}
```

请阅读_异步任务状态_部分以获取更多信息。

### CSV数据值格式 { #webapi_data_values_csv }

以下部分描述了 DHIS2 中使用的 CSV 格式。首先
行被假定为标题行，在导入期间将被忽略。

 <table>
 <caption> DHIS2 的 CSV 格式 </caption>
 <tbody>
 <tr class="odd">
 <td> 列 </td>
 <td> 需要 </td>
 <td> 说明 </td>
 </tr>
 <tr class="even">
 <td> 数据元素 </td>
 <td> 是 </td>
 <td> 默认指的是ID，也可以是基于选择的id方案的名称和代码 </td>
 </tr>
 <tr class="odd">
 <td> 期间 </td>
 <td> 是 </td>
 <td> ISO 格式 </td>
 </tr>
 <tr class="even">
 <td> 组织单位 </td>
 <td> 是 </td>
 <td> 默认指的是ID，也可以是基于选择的id方案的名称和代码 </td>
 </tr>
 <tr class="odd">
 <td> 类别选项组合 </td>
 <td> 否 </td>
 <td> 指的是 ID </td>
 </tr>
 <tr class="even">
 <td> 属性选项组合 </td>
 <td> 否 </td>
 <td> 指的是 ID（从 2.16 版开始） </td>
 </tr>
 <tr class="odd">
 <td> 值 </td>
 <td> 否 </td>
 <td> 数据值 </td>
 </tr>
 <tr class="even">
 <td> 由 </td> 存储
 <td> 否 </td>
 <td> 指输入值 </td> 的用户的用户名
 </tr>
 <tr class="odd">
 <td> 最后更新 </td>
 <td> 否 </td>
 <td> ISO 格式的日期 </td>
 </tr>
 <tr class="even">
 <td> 评论 </td>
 <td> 否 </td>
 <td> 自由文本评论 </td>
 </tr>
 <tr class="odd">
 <td> 跟进 </td>
 <td> 否 </td>
 <td> 真假 </td>
 </tr>
 </tbody>
 </table>

可以导入DHIS2的CSV文件示例如下所示。

```csv
“ dataelement”，“ period”，“ orgunit”，“ catoptcombo”，“ attroptcombo”，“ value”，“ storedby”，“ timestamp”
“ DUSpd8Jq3M7”，“ 201202”，“ gP6hn503KUX”，“ Prlt0C1RF0s”，“ 7”，“ bombali”，“ 2010-04-17”
“ DUSpd8Jq3M7”，“ 201202”，“ gP6hn503KUX”，“ V6L425pT3A0”，“ 10”，“ bombali”，“ 2010-04-17”
“ DUSpd8Jq3M7”，“ 201202”，“ OjTS752GbZE”，“ V6L425pT3A0”，“ 9”，“孟买”，“ 2010-04-06”
```

### 生成数据值集模板 { #webapi_data_values_template }

要为特定数据集生成数据值集模板，您可以使用
`/api/dataSets/ <id> /dataValueSet` 资源。 XML 和 JSON 响应
支持格式。例子：

    /api/dataSets/BfMAe6Itzgt/dataValueSet.json

描述了可用于进一步调整输出的参数
以下：

 <table style="width:100%;">
 <caption>数据值查询参数</caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 19%" />
 <col style="width: 64%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>周期</td>
 <td>否</td>
 <td>使用期限，将被包括在内，无需任何检查。 </td>
 </tr>
 <tr class="even">
 <td> orgUnit </td>
 <td>否</td>
 <td>要使用的组织单位，支持多个orgUnit，id和代码均可使用。 </td>
 </tr>
 <tr class="odd">
 <td>评论</td>
 <td>否</td>
 <td>应包含注释，默认为：是。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitIdScheme </td>
 <td>否</td>
 <td>使用的组织单位方案，支持id |码。 </td>
 </tr>
 <tr class="odd">
 <td> dataElementIdScheme </td>
 <td>否</td>
 要使用的数据元素方案，支持id | <td>码。 </td>
 </tr>
 </tbody>
 </table>

### 读取数据值 { #webapi_reading_data_values }

本节说明如何通过与 _dataValueSets_ 资源交互从 Web API 检索数据值。可以以 _XML_、_JSON_ 和 _CSV_ 格式检索数据值。由于我们要读取数据，我们将使用 _GET_ HTTP 动词。我们还将通过在我们的请求中包含一个`Accept`HTTP 标头来指定我们对 XML 资源表示感兴趣。需要以下查询参数：

 <table>
 <caption>数据值设置查询参数</caption>
 <colgroup>
 <col style="width: 27%" />
 <col style="width: 72%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>数据集</td>
 <td>数据集标识符。可以重复多次。 </td>
 </tr>
 <tr class="even">
 <td> dataElementGroup </td>
 <td>数据元素组标识符。可以重复多次。 </td>
 </tr>
 <tr class="odd">
 <td>周期</td>
 <td> ISO格式的期间标识符。可以重复多次。 </td>
 </tr>
 <tr class="even">
 <td>开始日期</td>
 <td>导出值的时间范围的开始日期。 </td>
 </tr>
 <tr class="odd">
 <td>结束日期</td>
 <td>导出值的时间跨度的结束日期。 </td>
 </tr>
 <tr class="even">
 <td> orgUnit </td>
 <td>组织单位标识符。可以重复多次。 </td>
 </tr>
 <tr class="odd">
 <td>儿童</td>
 <td>是否将子级包括在组织单位的层次结构中。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitGroup </td>
 <td>组织单位组标识符。可以重复多次。 </td>
 </tr>
 <tr class="odd">
 <td> attributeOptionCombo </td>
 <td>属性选项组合标识符。可以重复多次。 </td>
 </tr>
 <tr class="even">
 <td> include已删除</td>
 <td>是否包括已删除的数据值。 </td>
 </tr>
 <tr class="odd">
 <td>最后更新</td>
 <td>仅包含自给定时间戳记以来已更新的数据值。 </td>
 </tr>
 <tr class="even">
 <td> lastUpdatedDuration </td>
 <td>仅包含在给定持续时间内更新的数据值。格式是&lt;value&gt;&lt;time-unit&gt;，其中所支持的时间单位是&quot;d&quot;（天），&quot;h&quot;（小时），&quot;m&quot;（分钟）和&quot;s&quot;（秒）。 </td>
 </tr>
 <tr class="odd">
 <td>限制</td>
 <td>响应中的最大结果数。 </td>
 </tr>
 <tr class="even">
 <td> idScheme </td>
 <td>用于响应的数据值的元数据对象的属性。 </td>
 </tr>
 <tr class="odd">
 <td> dataElementIdScheme </td>
 <td>用于响应的数据值的数据元素对象的属性。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitIdScheme </td>
 <td>用于响应中的数据值的组织单位对象的属性。 </td>
 </tr>
 <tr class="odd">
 <td>类别选项组合ID方案</td>
 <td>类别选项组合和属性选项组合对象的属性，用于响应数据值。 </td>
 </tr>
 <tr class="even">
 <td> dataSetIdScheme </td>
 <td>在响应中使用的数据集对象的属性。 </td>
 </tr>
 </tbody>
 </table>

支持以下响应格式：

-   xml（应用程序/ xml）

-   json（应用程序/ json）

-   csv（应用程序/ csv）

-   adx（应用程序/ adx + xml）

假定我们已经按照上一节_发送数据值_的步骤向 DHIS2 发送了数据值，现在我们就可以使用 cURL 将我们对单个数据值集的请求汇总起来并进行请求：

```bash
curl "https://play.dhis2.org/demo/api/33/dataValueSets?dataSet=pBOMPrpg1QX&period=201401&orgUnit=DiszpKrYNg8"
  -H "Accept:application/xml" -u admin:district
```

我们还可以使用开始和结束日期查询参数来请求一个
大量的数据值。 IE。您还可以请求数据值
多个数据集和组织单位以及一个时间跨度以便导出
更大的数据块。请注意，期间查询参数采用
优先于开始和结束日期参数。一个例子看起来像
这：

```bash
curl "https://play.dhis2.org/demo/api/33/dataValueSets?dataSet=pBOMPrpg1QX&dataSet=BfMAe6Itzgt
  &startDate=2013-01-01&endDate=2013-01-31&orgUnit=YuQRtpLP10I&orgUnit=vWbkYPRmKyS&children=true"
  -H "Accept:application/xml" -u admin:district
```

检索已创建或更新的数据值
过去 10 天，您可以提出这样的请求：

    / api / dataValueSets？dataSet = pBOMPrpg1QX＆orgUnit = DiszpKrYNg8＆lastUpdatedDuration = 10d

响应将如下所示：

```xml
<?xml version='1.0' encoding='UTF-8'?>
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataSet="pBOMPrpg1QX"
  completeDate="2014-01-02" period="201401" orgUnit="DiszpKrYNg8">
<dataValue dataElement="eY5ehpbEsB7" period="201401" orgUnit="DiszpKrYNg8"
  categoryOptionCombo="bRowv6yZOF2" value="10003"/>
<dataValue dataElement="Ix2HsbDMLea" period="201401" orgUnit="DiszpKrYNg8"
  categoryOptionCombo="bRowv6yZOF2" value="10002"/>
<dataValue dataElement="f7n9E0hX8qk" period="201401" orgUnit="DiszpKrYNg8"
  categoryOptionCombo="bRowv6yZOF2" value="10001"/>
</dataValueSet>
```

您可以使用JSON格式请求数据，如下所示：

    /api/dataValueSets.json?dataSet=pBOMPrpg1QX&period=201401&orgUnit=DiszpKrYNg8

响应如下所示：

```json
{
    "dataSet": "pBOMPrpg1QX",
    "completeDate": "2014-02-03",
    "period": "201401",
    "orgUnit": "DiszpKrYNg8",
    "dataValues": [
        {
            "dataElement": "eY5ehpbEsB7",
            "categoryOptionCombo": "bRowv6yZOF2",
            "period": "201401",
            "orgUnit": "DiszpKrYNg8",
            "value": "10003"
        },
        {
            "dataElement": "Ix2HsbDMLea",
            "categoryOptionCombo": "bRowv6yZOF2",
            "period": "201401",
            "orgUnit": "DiszpKrYNg8",
            "value": "10002"
        },
        {
            "dataElement": "f7n9E0hX8qk",
            "categoryOptionCombo": "bRowv6yZOF2",
            "period": "201401",
            "orgUnit": "DiszpKrYNg8",
            "value": "10001"
        }
    ]
}
```

请注意，数据值是软删除的，即删除的值具有
`deleted` 属性设置为 true 而不是被永久删除。
这在集成多个系统以进行通信时很有用
删除。您可以在响应中包含已删除的值，如下所示：

    /api/33/dataValueSets.json?dataSet=pBOMPrpg1QX&period=201401
      ＆orgUnit = DiszpKrYNg8＆includeDeleted = true

您还可以请求CSV格式的数据，如下所示：

    /api/33/dataValueSets.csv?dataSet=pBOMPrpg1QX&period=201401
      ＆orgUnit = DiszpKrYNg8

响应将如下所示：

```csv
数据元素，期限，组织单位，catoptcombo，attroptcombo，值，存储于，最后更新，注释，开始
f7n9E0hX8qk，201401，DiszpKrYNg8，bRowv6yZOF2，bRowv6yZOF2,12，system，2015-04-05T19：58：12.000，comment1，false
Ix2HsbDMLea，201401，DiszpKrYNg8，bRowv6yZOF2，bRowv6yZOF2,14，system，2015-04-05T19：58：12.000，comment2，false
eY5ehpbEsB7,201401，DiszpKrYNg8，bRowv6yZOF2，bRowv6yZOF2,16，系统，2015-04-05T19：58：12.000，comment3，false
FTRrcoaog83,201401，DiszpKrYNg8，bRowv6yZOF2，bRowv6yZOF2,12，系统，2014-03-02T21：45：05.519，comment4，false
```

以下约束适用于数据值集资源：

-   必须至少指定一个数据集。

-   必须指定至少一个期间或开始日期和结束日期。

-   必须至少指定一个组织单位。

-   组织单位必须位于经过身份验证的用户的组织单位的层次结构内。

-   限制不能小于零。

### 发送，读取和删除单个数据值 { #webapi_sending_individual_data_values }

本示例将展示如何在一个请求中发送要保存的单个数据值。这可以通过向 `dataValues` 资源发送 _POST_ 请求来实现：

    / api / dataValues

此资源支持以下查询参数：

 <table style="width:100%;">
 <caption> 数据值查询参数 </caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 19%" />
 <col style="width: 64%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 需要 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 德 </td>
 <td> 是 </td>
 <td> 数据元素标识符 </td>
 </tr>
 <tr class="even">
 <td> pe </td>
 <td> 是 </td>
 <td> 期间标识符 </td>
 </tr>
 <tr class="odd">
 <td> 或 </td>
 <td> 是 </td>
 <td> 组织单位标识符 </td>
 </tr>
 <tr class="even">
 <td> co </td>
 <td> 否 </td>
 <td> 类别选项组合标识符，如果省略则默认使用 </td>
 </tr>
 <tr class="odd">
 <td> cc </td>
 <td> 否（必须与cp结合） </td>
 <td> 属性类别组合标识符 </td>
 </tr>
 <tr class="even">
 <td> cp </td>
 <td> 否（必须与 cc 结合） </td>
 <td> 属性类别选项标识符，以 ; 分隔对于多个值 </td>
 </tr>
 <tr class="odd">
 <td> ds </td>
 <td> 否 </td>
 <td> 数据集，用于检查期间和组织单位是否允许 POST 或 DELETE。如果指定，则必须将数据元素分配给该数据集。如果未指定，将选择包含数据元素的数据集来检查是否允许操作。 </td>
 </tr>
 <tr class="even">
 <td> 值 </td>
 <td> 否 </td>
 <td> 数据值。对于布尔值，将接受以下内容：true |真|真|假|错误 |错误 | 1 | 0 |吨| f | </td>
 </tr>
 <tr class="odd">
 <td> 评论 </td>
 <td> 否 </td>
 <td> 数据注释 </td>
 </tr>
 <tr class="even">
 <td> 跟进 </td>
 <td> 否 </td>
 <td> 跟踪数据值，将切换当前布尔值 </td>
 </tr>
 </tbody>
 </table>

如果给定的任何标识符无效、数据值或注释无效或者数据被锁定，则响应将包含 _409 Conflict_ 状态代码和描述性文本消息。如果操作导致保存或更新值，则将返回_200 OK_。请求的示例如下所示：

```bash
curl "https://play.dhis2.org/demo/api/33/dataValues?de=s46m5MS0hxu
  &pe=201301&ou=DiszpKrYNg8&co=Prlt0C1RF0s&value=12"
  -X POST -u admin:district
```

此资源还允许使用特殊语法将值关联到
一个属性选项组合。这可以通过发送
属性类别组合的标识符，连同标识符
值代表的属性类别选项
组合。类别组合由 `cc` 参数指定，而
类别选项被指定为分号分隔的字符串，带有`cp`
范围。有必要确保类别选项都是部分
的类别组合。一个示例如下所示：

```bash
curl "https://play.dhis2.org/demo/api/33/dataValues?de=s46m5MS0hxu&ou=DiszpKrYNg8
  &pe=201308&cc=dzjKKQq0cSO&cp=wbrDrL2aYEc;btOyqprQ9e8&value=26"
  -X POST -u admin:district
```

您可以使用 _GET_ 方法通过请求检索数据值。 value、comment 和 followUp 参数在这方面不适用：

```bash
curl "https://play.dhis2.org/demo/api/33/dataValues?de=s46m5MS0hxu
  &pe=201301&ou=DiszpKrYNg8&co=Prlt0C1RF0s"
  -u admin:district
```

您可以使用 _DELETE_ 方法通过请求删除数据值。

#### 处理文件数据值 { #datavalue_file }

当处理具有 _file_ 类型数据元素的数据值时，与上述方法存在一些偏差。这些数据值的特殊之处在于，值的内容是对 _FileResource_ 对象的 UID 引用，而不是自包含常量。这些数据值的行为就像存储文本内容的其他数据值一样，但应该以不同的方式处理，以便产生有意义的输入和输出。

存储这些数据值之一的过程大致如下：

1.  如文件资源部分所述，将文件上传到 `/api/fileResources` 端点。

2.  读取返回的 _FileResource_ 的 `id` 属性。

3.  使用上述任何方法将检索到的 id_作为值_存储到数据值中。

数据值和文件资源之间只有一对一的关系
允许。这是在内部强制执行的，以便保存文件资源 ID
在多个数据值中是不允许的，并且会返回错误。删除
数据值将删除引用的文件资源。直接删除
的文件资源是不可能的。

数据值现在可以作为除返回数据以外的任何其他值进行检索
将是文件资源的 UID。为了检索实际
内容（意味着存储在映射的文件资源中的文件
到数据值）必须向 `/api/dataValues/files` 发出 GET 请求
镜像查询参数，因为它们将用于数据值
本身。 `/api/dataValues/files` 端点仅支持 GET 请求。

值得注意的是，由于底层存储机制工作
异步文件内容可能不会立即准备好
从`/api/dataValues/files` 端点下载。这是特别真实的
对于可能需要耗时上传的大文件
外部文件存储的背景（取决于系统
配置）。从文件资源元数据中检索
`/api/fileResources/ <id> ` 端点允许检查 `storageStatus`
在尝试下载内容之前。

## ADX数据格式 { #webapi_adx_data_format }

从 2.20 版开始，我们已经包含了对国际标准的支持
用于称为 ADX 的聚合数据交换。 ADX 开发和维护
由 IHE 质量研究和公共卫生委员会提供
（整合医疗保健企业）。详细介绍 QRPH 的 wiki 页面
活动可以在
[wiki.ihe.net](http://wiki.ihe.net/index.php?title=Quality,_Research_and_Public_Health#Current_Domain_Activities)。
ADX 仍在积极开发中，现已发布用于
试实施。请注意，当前在 DHIS2 中实现的内容
是读取和写入 adx 格式数据的功能，即什么是
在 ADX 中被描述为内容消费者和内容生产者演员
轮廓。

ADX 数据消息的结构与您可能的结构非常相似
从前面描述的 DXF 2 数据中已经熟悉了。有一个
几个重要的区别。我们将描述这些差异
参考一个小例子：

```xml
<adx xmlns="urn:ihe:qrph:adx:2015" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ihe:qrph:adx:2015 ../schema/adx_loose.xsd" 
  exported="2015-02-08T19:30:00Z">
  <group orgUnit="OU_559" period="2015-06-01/P1M" 
    completeDate="2015-07-01" dataSet="(TB/HIV)VCCT">
    <dataValue dataElement="VCCT_0" GENDER="FMLE" HIV_AGE="AGE0-14" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="FMLE" HIV_AGE="AGE0-14" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="FMLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="FMLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="FMLE" HIV_AGE="AGE0-14" value="10"/>

    <dataValue dataElement="VCCT_0" GENDER="MLE" HIV_AGE="AGE0-14" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="MLE" HIV_AGE="AGE0-14" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="MLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="MLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="MLE" HIV_AGE="AGE0-14" value="10"/>

    <dataValue dataElement="VCCT_0" GENDER="FMLE" HIV_AGE="AGE15-24" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="FMLE" HIV_AGE="AGE15-24" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="FMLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="FMLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="FMLE" HIV_AGE="AGE15-24" value="10"/>

    <dataValue dataElement="VCCT_0" GENDER="MLE" HIV_AGE="AGE15-24" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="MLE" HIV_AGE="AGE15-24" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="MLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="MLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="MLE" HIV_AGE="AGE15-24" value="10"/>
  </group>
</adx>
```

### adx根元素 { #the-adx-root-element }

adx 根元素只有一个强制属性，即 _exported_ 时间戳。与其他 adx 元素一样，该模式是可扩展的，因为它不限制其他应用程序特定的属性。

### 组元素 { #the-group-element }

与 dxf2 不同，adx 要求数据值根据
组织单位、期间和数据集。上面的例子显示了一个数据报告
来自在线演示数据库的“(TB/HIV) VCCT”数据集。这个例子
使用代码作为标识符而不是 dhis2 uid。代码是
使用 adx 时的首选标识符形式。

orgUnit、period 和 dataSet 属性在 adx 中是必需的。这
group 元素可能包含附加属性。在我们的 DHIS2
实现任何附加属性都简单地传递给
基础进口商。这意味着当前所有的属性
在 dxf2 中有意义（例如上例中的 completeDate）可以
继续在 adx 中使用，它们将以相同的方式进行处理。

adx 和 dxf2 之间的显着区别在于句点
被编码。 Adx 严格使用 ISO8601 并对报告进行编码
期间为（日期|日期时间）/（持续时间）。所以上面例子中的句点
是从 2015-06-01 开始的 1 个月 (P1M) 期间。所以是数据
2015 年 6 月。符号有点冗长，但它非常
灵活并允许我们支持 DHIS2 中的所有现有期间类型

### ADX期间定义 { #adx-period-definitions }

DHIS2 在导入期间支持有限数量的期间或持续时间。
期间应从持续时间开始的日期开始，然后是
一个“/”，然后是表中注明的持续时间符号。这
下表详细说明了所有 ADX 支持的周期类型，以及
用例子。

 <table>
 <caption> ADX 周期 </caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 周期类型 </th>
 <th> 持续时间符号 </th>
 <th> 示例 </th>
 <th> 持续时间 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 每日 </td>
 <td> P1D </td>
 <td> 2017-10-01/P1M </td>
 <td> 2017 年 10 月 1 日 </td>
 </tr>
 <tr class="even">
 <td> 每周 </td>
 <td> P7D </td>
 <td> 2017-10-01/P7D </td>
 <td> 2017 年 10 月 1 日-2017 年 10 月 7 日 </td>
 </tr>
 <tr class="odd">
 <td> 每月 </td>
 <td> P1M </td>
 <td> 2017-10-01/P1M </td>
 <td> 2017 年 10 月 1 日至 2017 年 10 月 31 日 </td>
 </tr>
 <tr class="even">
 <td> 双月刊 </td>
 <td> P2M </td>
 <td> 2017-11-01/P2M </td>
 <td> 2017 年 11 月 1 日至 2017 年 12 月 31 日 </td>
 </tr>
 <tr class="odd">
 <td> 季度 </td>
 <td> P3M </td>
 <td> 2017-09-01/P3M </td>
 <td> 2017 年 9 月 1 日至 2017 年 12 月 31 日 </td>
 </tr>
 <tr class="even">
 <td> 六个月 </td>
 <td> P6M </td>
 <td> 2017-01-01/P6M </td>
 <td> 2017 年 1 月 1 日至 2017 年 6 月 30 日 </td>
 </tr>
 <tr class="odd">
 <td> 每年 </td>
 <td> P1Ý </td>
 <td> 2017-01-01/P1Y </td>
 <td> 2017 年 1 月 1 日至 2017 年 12 月 31 日 </td>
 </tr>
 <tr class="even">
 <td> 金融十月 </td>
 <td> P1Y </td>
 <td> 2017-10-01/P1Y </td>
 <td> 2017 年 10 月 1 日至 2018 年 9 月 30 日 </td>
 </tr>
 <tr class="odd">
 <td> 财务 4 月 </td>
 <td> P1Y </td>
 <td> 2017-04-01/P1Y </td>
 <td> 2017 年 4 月 1 日至 2018 年 3 月 31 日 </td>
 </tr>
 <tr class="even">
 <td> 金融七月 </td>
 <td> P1Y </td>
 <td> 2017-07-01/P1Y </td>
 <td> 2017 年 7 月 1 日至 2018 年 6 月 30 日 </td>
 </tr>
 </tbody>
 </table>

### 数据值 { #data-values }

adx 中的 dataValue 元素与 DXF 中的对应元素非常相似。强制属性是_dataElement_ 和_value_。 _orgUnit_ 和 _period_ 属性不会出现在 dataValue 中，因为它们在 _group_ 级别是必需的。

最显着的区别是分解的表示方式。 DXF 使用categoryOptionCombo 来指示数据的分解。在 adx 中，分解（例如 AGE*GROUP 和 SEX）明确表示为属性。使用 adx 的一个重要限制是，数据集中用于数据元素的类别必须分配有一个代码，而且该代码必须采用适合用作 XML 属性的形式。 W3C XML 标准中描述了对 XML 属性名称的确切约束 - 实际上，这意味着不能有空格，不能有除“*”之外的非字母数字字符，并且不能以字母开头。上面的示例显示了“好”类别代码的示例（“GENDER”和“HIV_AGE”）。

这种对代码形式的限制仅适用于类别。
目前，当您分配时，DHIS2 不强制执行该约定
代码，但如果您尝试
导入 adx 数据并且类别代码未分配或未分配
合适的。

使用分解数据的显式维度的主要好处是
那

-   生成数据的系统不必与DHIS2 中的categoryOptionCombo 同步。

-   生产者和消费者可以将他们的代码与第三方权威来源（例如术语服务）进行匹配。请注意，在上面的示例中，性别和年龄组代码使用来自 [WHO 全球卫生观察站](http://apps.who.int/gho/data/node.resources.api) 的代码列表。

请注意，此功能可能非常有用，例如，当从 EMR 系统生成分类数据时，但在某些情况下，_categoryOptionCombo_ 映射可能更容易或更理想。 adx 的 DHIS2 实现将检查 _categoryOptionCombo_ 属性是否存在，如果存在，它将使用它对分解维度属性的偏好。类似地，_group_ 元素上的 _attributeOptionCombo_ 属性将以传统方式进行处理。否则，attributeOptionCombo 可以被视为分解类别，就像在 _dataValue_ 上一样。

在上面的简单示例中，数据集中的每个数据元素都具有相同的维度（categorycombo），因此数据是整齐的矩形。情况不一定如此。数据集可能包含具有不同类别组合的数据元素，从而产生 _ragged-right_ adx 数据消息。

### 汇入资料 { #importing-data }

DHIS2 exposes an endpoint for POST adx data at `/api/dataValueSets` using _application/xml+adx_ as content type. So, for example, the following curl command can be used to POST the example data above to the DHIS2 demo server:

```bash
curl -u admin:district -X POST -H "Content-Type: application/adx+xml"
  -d @data.xml "https://play.dhis2.org/demo/api/33/dataValueSets?dataElementIdScheme=code&orgUnitIdScheme=code"
```

请注意，查询参数与用于 DXF 数据的参数相同。这
adx 端点应该解释所有现有的 DXF 参数
与 DXF 相同的语义。

### 汇出资料 { #exporting-data }

DHIS2 exposes an endpoint to GET adx data sets at `/api/dataValueSets` using _application/xml+adx_ as the accepted content type. So, for example, the following curl command can be used to retrieve the adx data:

```bash
curl -u admin:district -H "Accept: application/adx+xml"
 "https://play.dhis2.org/demo/api/33/dataValueSets?dataValueSets?orgUnit=M_CLINIC&dataSet=MALARIA&period=201501"
```

请注意，查询参数与用于 DXF 数据的参数相同。一个
重要的区别是 dataSet 和 orgUnit 的标识符是
假定为代码而不是 uid。

## 计划规则 { #webapi_program_rules }

本节是关于发送和读取程序规则，并解释
程序规则数据模型。程序规则赋予功能
在 DHIS2 程序中配置动态行为。

### 程序规则模型 { #webapi_program_rule_model }

程序规则数据模型由 programRuleVariables、
程序规则和程序规则操作。 programRule 包含一个
表达式 - 当这个表达式为真时，子程序RuleActions
被触发。 programRuleVariables 用于寻址数据元素，
跟踪实体数据值和运行所需的其他数据值
表达式。一个程序中的所有程序规则共享同一个程序库
programRuleVariables，一个 programRuleVariable 可以用于多个
程序规则的表达式。

![](resources/images/program_rules/program-rule-model.jpg)

#### 程序规则模型详细信息 { #program-rule-model-details }

下表给出了程序规则的详细概述
模型。

 <table style="width:100%;">
 <caption> 程序规则 </caption>
 <colgroup>
 <col style="width: 16%" />
 <col style="width: 66%" />
 <col style="width: 16%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 名称 </th>
 <th> 描述 </th>
 <th> 强制性 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 程序 </td>
 <td> 执行programRule的程序。</td>
 <td> 强制性 </td>
 </tr>
 <tr class="even">
 <td> 名称 </td>
 <td> 程序规则将显示给 dhis2 配置器的名称。程序的最终用户不可见。 </td>
 <td> 强制性 </td>
 </tr>
 <tr class="odd">
 <td> 描述 </td>
 <td> 程序规则的描述，可供配置者用来描述规则。程序的最终用户不可见。 </td>
 <td> 强制性 </td>
 </tr>
 <tr class="even">
 <td> programStage </td>
 <td> 如果为程序规则设置了 programStage，则将仅在指定的程序阶段内评估该规则。 </td>
 <td> 可选 </td>
 </tr>
 <tr class="odd">
 <td> 条件 </td>
 <td> 需要评估为真以便程序规则触发其子操作的表达式。表达式是使用运算符、函数调用、硬编码值、常量和程序规则变量编写的。
 <pre> <code> D2：hasValue的（＆＃39;血红蛋白＆＃39;）&amp;&amp;＃{hemoglobin} &lt; = 7 </code> </pre> </td>
 <td> 强制性 </td>
 </tr>
 <tr class="even">
 <td> 优先级 </td>
 <td> 在规则顺序很重要的情况下运行规则的优先级。在大多数情况下，规则不依赖于在其他规则之前或之后运行，在这些情况下，可以省略优先级。如果未设置优先级，则规则将在定义了优先级的任何规则之后运行。如果设置了优先级（整数），则优先级最低的规则将在优先级较高的规则之前运行。 </td>
 <td> 可选 </td>
 </tr>
 </tbody>
 </table>

#### 计划规则操作模型详细信息 { #program-rule-action-model-details }

下表给出了对 programRuleAction 的详细概述
模型。

<table style="width:100%;">
<caption>programRuleAction</caption>
<colgroup>
<col style="width: 16%" />
<col style="width: 66%" />
<col style="width: 16%" />
</colgroup>
<thead>
<tr class="header">
<th>name</th>
<th>description</th>
<th>Compulsory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>programRule</td>
<td>The programRule that is the parent of this action.</td>
<td>Compulsory</td>
</tr>
<tr class="even">
<td>programRule- ActionType</td>
<td>The type of action that is to be performed.
<ul>
<li><p>`DISPLAYTEXT` - Displays a text in a given widget.</p></li>
<li><p>`DISPLAYKEYVALUEPAIR` - Displays a key and value pair(like a program indicator) in a given widget.</p></li>
<li><p>`HIDEFIELD` - Hide a specified dataElement or trackedEntityAttribute.</p>
<ul>
<li><p><em>content</em> - if defined, the text in <em>content</em> will be displayed to the end user in the instance where a value is previously entered into a field that is now about to be hidden (and therefore blanked). If <em>content</em> is not defined, a standard message will be shown to the user in this instance.</p></li>
<li><p><em>dataElement</em> - if defined, the HIDEFIELD action will hide this dataElement when the rule is effective.</p></li>
<li><p><em>trackedEntityDataValue</em> - if defined, the HIDEFIELD action will hide this trackedEntityDataValue when the rule is effective.</p></li>
</ul></li>
<li><p>`HIDESECTION` - Hide a specified section.</p>
<ul>
<li><p><em>programStageSection</em> - must be defined. This is the programStageSection that will be hidden in case the parent rule is effective.</p></li>
</ul></li>
<li><p>`ASSIGN` - Assign a dataElement a value(help the user calculate something or fill in an obvious value somewhere)</p>
<ul>
<li><p><em>content</em> - if defined, the value in <em>data</em> is assigned to this variable. If content id defined, and thus a variable is assigned for use in other rules, it is important to also assign a <em>programRule.priority</em> to make sure the rule with an ASSIGN action runs before the rule that will in turn evaluate the assigned variable.</p></li>
<li><p><em>data</em> - must be defined, data forms an expression that is evaluated and assigned to either a variable(#{myVariable}), a dataElement, or both.</p></li>
<li><p><em>dataElement</em> - if defined, the value in <em>data</em> is assigned to this data element.</p></li>
</ul>
<p>Either the content or dataElement must be defined for the ASSIGN action to be effective.</p></li>
<li><p>`SHOWWARNING` - Show a warning to the user, not blocking the user from completing the event or registration.</p>
<ul>
<li><p><em>content</em> - if defined, content is a static part that is displayed at the end of the error message.</p></li>
<li><p><em>data</em> - if defined, data forms an expression that is evaluated and added to the end of the warning message.</p></li>
<li><p><em>dataElement</em> - if defined, the warning message is displayed next to this data element.</p></li>
<li><p><em>trackedEntityAttribute</em> - if defined, the warning message is displayed next to this tracked entity attribute.</p></li>
</ul>
<p>Either dataElement or trackedEntityAttribute must be specified.</p></li>
<li><p>`SHOWERROR` - Show an error to the user, blocking the user from completing the event or registration.</p>
<ul>
<li><p><em>content</em> - if defined, content is a static part that is displayed in the start of the error message.</p></li>
<li><p><em>data</em> - if defined, data forms an expression that is evaluated and added to the end of the error message.</p></li>
<li><p><em>dataElement</em> - if defined, the error message is linked to this data element.</p></li>
<li><p><em>trackedEntityAttribute</em> - if defined, the error message is linked to this tracked entity attribute.</p></li>
</ul>
<p>Either dataElement or trackedEntityAttribute must be specified.</p></li>
<li><p>`WARNINGONCOMPLETINON` - Show a warning to the user on the &quot;Complete form&quot; dialog, but allowing the user to complete the event.</p>
<ul>
<li><p><em>content</em> - if defined, content is a static part that is displayed at the end of the error message.</p></li>
<li><p><em>data</em> - if defined, data forms an expression that is evaluated and added to the end of the warning message.</p></li>
<li><p><em>dataElement</em> - if defined, the warning message prefixed with the name/formName of the data element.</p></li>
</ul></li>
<li><p>`ERRORONCOMPLETION` - Show an error to the user on in a modal window when the user tries to complete the event. The user is prevented from completing the event.</p>
<ul>
<li><p><em>content</em> - if defined, content is a static part that is displayed in the start of the error message.</p></li>
<li><p><em>data</em> - if defined, data forms an expression that is evaluated and added to the end of the error message.</p></li>
<li><p><em>dataElement</em> - if defined, the error message is linked to this data element.</p></li>
</ul></li>
<li><p>`CREATEEVENT` - Create an event within the same enrollment.</p>
<ul>
<li><p><em>content</em></p></li>
<li><p><em>data</em> - if defined, contains data values to assign the created event. The format is &lt;uid&gt;:&lt;data value&gt;. Where several values is specified, these are separated with comma.</p>
<pre><code>AcMrnleqHqc:100,AqK1IHqCkEE:&#39;Polyhydramnios&#39;</code></pre></li>
<li><p><em>programStage</em> - must be defined, and designates the program stage that the rule shall create an event of.</p></li>
</ul></li>
<li><p>`SETMANDATORYFIELD` - Set a field to be mandatory.</p>
<ul>
<li><p><em>dataElement</em> - if defined, this data element will be set to be mandatory in the data entry form.</p></li>
<li><p><em>trackedEntityAttribute</em> - if defined, this tracked entity attribute will be set to mandatory in the registration form or profile.</p></li>
</ul></li>
<li><p>`SENDMESSAGE` - To send message at completion of event/enrollment or at data value update.</p>
<ul>
<li><p><em>messageTemplate</em> - if defined, this template will be delivered either as SMS or EMAIL depending upon DeliveryChannel value in message template.</p></li>
</ul></li>
<li><p>`SCHEDULEMESSAGE` - To schedule message at completion of event/enrollment or at data value update.</p>
<ul>
<li><p><em>messageTemplate</em> - if defined, this template will be delivered either as SMS or EMAIL depending upon DeliveryChannel value in message template.</p></li>
<li><p><em>Date to send message</em> - Expression which is going to be used for evaluation of scheduled date. This expression should result in Date, any other resultant will be discarded and notification will not get scheduled.</p></li>
</ul></li>
</ul></td>
<td>Compulsory</td>
</tr>
<tr class="odd">
<td>location</td>
<td>Used for actionType DISPLAYKEYVALUEPAIR and DISPLAYTEXT to designate which widget to display the text or keyvaluepair in. Compulsory for DISPLAYKEYVALUEPAIR and DISPLAYTEXT.</td>
<td>See description</td>
</tr>
<tr class="even">
<td>content</td>
<td>Used for user messages in the different actions. See the actionType overview for a detailed explanation for how it is used in each of the action types. Compulsory for SHOWWARNING, SHOWERROR, WARNINGONCOMPLETION, ERRORONCOMPLETION, DISPLAYTEXT and DISPLAYKEYVALUEPAIR. Optional for HIDEFIELD and ASSIGN.</td>
<td>See description</td>
</tr>
<tr class="odd">
<td>data</td>
<td>Used for expressions in the different actions. See the actionType overview for a detailed explanation for how it is used in each of the action types. Compulsory for ASSIGN. Optional for SHOWWARNING, SHOWERROR, WARNINGONCOMPLETION, ERRORONCOMPLETION, DISPLAYTEXT, CREATEEVENT and DISPLAYKEYVALUEPAIR</td>
<td>See description</td>
</tr>
<tr class="even">
<td>dataElement</td>
<td>Used for linking rule actions to dataElements. See the actionType overview for a detailed explanation for how it is used in each of the action types. Optional for SHOWWARNING, SHOWERROR, WARNINGONCOMPLETION, ERRORONCOMPLETION, ASSIGN and HIDEFIELD</td>
<td>See description</td>
</tr>
<tr class="odd">
<td>trackedEntity- Attribute</td>
<td>Used for linking rule actions to trackedEntityAttributes. See the actionType overview for a detailed explanation for how it is used in each of the action types. Optional for SHOWWARNING, SHOWERROR and HIDEFIELD.</td>
<td>See description</td>
</tr>
<tr class="even">
<td>option</td>
<td>Used for linking rule actions to options. See the actionType overview for a detailed explanation for how it is used in each of the action types. Optional for HIDEOPTION</td>
<td>See description</td>
</tr>
<tr class="odd">
<td>optionGroup</td>
<td>Used for linking rule actions to optionGroups. See the actionType overview for a detailed explanation for how it is used in each of the action types. Compulsory for SHOWOPTIONGROUP, HIDEOPTIONGROUP.</td>
<td>See description</td>
</tr>
<tr class="even">
<td>programStage</td>
<td>Only used for CREATEEVENT rule actions. Compulsory for CREATEEEVENT.</td>
<td>See description</td>
</tr>
<tr class="odd">
<td>programStage- Section</td>
<td>Only used for HIDESECTION rule actions. Compulsory for HIDESECTION</td>
<td>See description</td>
</tr>
</tbody>
</table>

#### 程序规则变量模型的详细信息 { #program-rule-variable-model-details }

下表详细概述了
程序规则变量模型。

<table style="width:100%;">
<caption>programRuleVariable</caption>
<colgroup>
<col style="width: 16%" />
<col style="width: 66%" />
<col style="width: 16%" />
</colgroup>
<thead>
<tr class="header">
<th>name</th>
<th>description</th>
<th>Compulsory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>name</td>
<td>the name for the programRuleVariable - this name is used in expressions.
<pre><code>#{myVariable} &gt; 5</code></pre></td>
<td>Compulsory</td>
</tr>
<tr class="even">
<td>sourceType</td>
<td>Defines how this variable is populated with data from the enrollment and events.
<ul>
<li><p>DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE - In tracker capture, gets the newest value that exists for a data element, within the events of a given program stage in the current enrollment. In event capture, gets the newest value among the 10 newest events on the organisation unit.</p></li>
<li><p>DATAELEMENT_NEWEST_EVENT_PROGRAM - In tracker capture, get the newest value that exists for a data element across the whole enrollment. In event capture, gets the newest value among the 10 newest events on the organisation unit.</p></li>
<li><p>DATAELEMENT_CURRENT_EVENT - Gets the value of the given data element in the current event only.</p></li>
<li><p>DATAELEMENT_PREVIOUS_EVENT - In tracker capture, gets the newest value that exists among events in the program that precedes the current event. In event capture, gets the newvest value among the 10 preceeding events registered on the organisation unit.</p></li>
<li><p>CALCULATED_VALUE - Used to reserve a variable name that will be assigned by a ASSIGN program rule action</p></li>
<li><p>TEI_ATTRIBUTE - Gets the value of a given tracked entity attribute</p></li>
</ul></td>
<td>Compulsory</td>
</tr>
<tr class="odd">
<td>dataElement</td>
<td>Used for linking the programRuleVariable to a dataElement. Compulsory for all sourceTypes that starts with DATAELEMENT_.</td>
<td>See description</td>
</tr>
<tr class="even">
<td>trackedEntity- Attribute</td>
<td>Used for linking the programRuleVariable to a trackedEntityAttribute. Compulsory for sourceType TEI_ATTRIBUTE.</td>
<td>See description</td>
</tr>
<tr class="odd">
<td>useCodeFor- OptionSet</td>
<td>If checked, the variable will be populated with the code - not the name - from any linked option set. Default is unchecked, meaning that the name of the option is populated.</td>
<td></td>
</tr>
<tr class="even">
<td>programStage</td>
<td>Used for specifying a specific program stage to retreive the programRuleVariable value from. Compulsory for DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE.</td>
<td>See description</td>
</tr>
</tbody>
</table>

### 创建程序规则 { #webapi_creating_program_rules }

-   To perform crud operations, `programRules` resource is available in API.

要检索programRules的列表，您可以执行GET请求，如下所示：

    / api / programRules

要检索单个programRule，您可以执行GET请求，如下所示：

    / api / programRules / <program_rule_uid>

要保存/添加单个programRule，您可以执行POST请求，如下所示：

    / api / programRules / <program_rule_uid>

要更新单个programRule，您可以执行如下PUT请求：

    / api / programRules / <program_rule_uid>

要删除单个programRule，您可以执行以下DELETE请求：

    / api / programRules / <program_rule_uid>

要检索programRule条件的描述，可以使用POST并在POST正文中提供条件字符串。

    / api / programRules / condition / description？ <program_rule_uid>

## 形式 { #webapi_forms }

To retrieve information about a form (which corresponds to a data set
and its sections) you can interact with the `form` resource. The form
response is accessible as XML and JSON and will provide information
about each section (group) in the form as well as each field in the
sections, including labels and identifiers. By supplying period and
organisation unit identifiers the form response will be populated with
data values.

 <table>
 <caption>表单查询参数</caption>
 <colgroup>
 <col style="width: 12%" />
 <col style="width: 12%" />
 <col style="width: 74%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> pe </td>
 <td> ISO周期</td>
 <td>填充表单数据值的时间段。 </td>
 </tr>
 <tr class="even">
 <td> ou </td>
 <td> UID </td>
 <td>要为其填充表单数据值的组织单位。 </td>
 </tr>
 <tr class="odd">
 <td>元数据</td>
 否| <td>假|真</td>
 <td>是否包括有关表单节每个数据元素的元数据。 </td>
 </tr>
 </tbody>
 </table>

要检索数据集的表单，您可以执行GET请求，如下所示：

    / api / dataSets / <dataset-id> /form.json

检索具有标识符“BfMAe6Itzgt”的数据集的表单
XML：

    / api / dataSets / BfMAe6Itzgt / form

要检索包含JSON中的元数据的表单，请执行以下操作：

    /api/dataSets/BfMAe6Itzgt/form.json?metaData=true

检索填充了特定时期数据值的表单，并
XML 中的组织单位：

    /api/dataSets/BfMAe6Itzgt/form.xml?ou=DiszpKrYNg8&pe=201401

当涉及自定义数据输入表单时，此资源还允许
直接为数据集创建此类表单。这可以通过一个
内容类型为 text/html 的 POST 或 PUT 请求，其中有效负载是
自定义表单标记，例如：

```bash
curl -d @form.html "localhost/api/dataSets/BfMAe6Itzgt/form"
  -H "Content-Type:text/html" -u admin:district -X PUT
```

## 文件资料 { #webapi_documents }

对文件的引用可以与文档资源一起存储。

 <table>
 <caption>文档字段</caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>字段名称</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>名称</td>
 <td>文档的唯一名称</td>
 </tr>
 <tr class="even">
 <td>外部</td>
 <td>标志，用于标识文档的位置。外部文件为TRUE，内部文件为FALSE </td>
 </tr>
 <tr class="odd">
 <td>网址</td>
 <td>文件的位置。外部文件的URL。内部资源的文件资源ID（请参阅<a href="#webapi_file_resources">文件资源</a>）</td>
 </tr>
 </tbody>
 </table>

对文档端点的GET请求将返回所有文档：

    / api / documents

对文档端点的POST请求将创建一个新文档：

```bash
curl -X POST -d @document.json -H "Content-type: application/json"
  "http://dhis.domain/api/documents"
```

```json
{
    "name": "dhis home",
    "external": true,
    "url": "https://www.dhis2.org"
}
```

带有附加文档 ID 的 GET 请求将返回信息
关于文件。对同一端点的 PUT 请求将更新
文档的字段：

    / api / documents / <documentId>

将 _/data_ 附加到 GET 请求将返回文档的实际文件内容：

    / api / documents / <documentId> / data

## 验证方式 { #webapi_validation }

要生成数据验证摘要，您可以与
验证资源。数据集资源针对数据输入进行了优化
用于验证数据集/表单的客户端，可以像这样访问：

    /api/33/validation/dataSet/QX4ZTUbOt3a.json?pe=201501&ou=DiszpKrYNg8

除了基于数据集验证规则外，还有两种
执行验证的其他方法：自定义验证和
预定验证。

自定义验证可以通过“数据质量”应用程序启动，其中
您可以配置期间、验证规则组和组织
要包含在分析中的单位以及是否要发送
通知和/或保留找到的结果。这样做的结果
分析将是使用您的标准发现的违规列表。

第一个路径变量是引用数据集的标识符
证实。支持 XML 和 JSON 资源表示。这
响应包含违反验证规则。这将延长
在即将到来的版本中有更多的验证类型。

要检索与特定数据集相关的验证规则，
意思是所有数据元素都是一部分的带有公式的验证规则
的特定数据集，您可以向
`validationRules` 资源如下：

    / api / validationRules？dataSet = <dataset-id>

验证规则有左边和右边，也就是
根据运营商比较有效性。有效的运算符
值见下表。

<table>
<caption>Operators</caption>
<colgroup>
<col style="width: 28%" />
<col style="width: 71%" />
</colgroup>
<thead>
<tr class="header">
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>equal_to</td>
<td>Equal to</td>
</tr>
<tr class="even">
<td>not_equal_to</td>
<td>Not equal to</td>
</tr>
<tr class="odd">
<td>greater_than</td>
<td>Greater than</td>
</tr>
<tr class="even">
<td>greater_than_or_equal_to</td>
<td>Greater than or equal to</td>
</tr>
<tr class="odd">
<td>less_than</td>
<td>Less than</td>
</tr>
<tr class="even">
<td>less_than_or_equal_to</td>
<td>Less than or equal to</td>
</tr>
<tr class="odd">
<td>compulsory_pair</td>
<td>If either side is present, the other must also be</td>
</tr>
<tr class="even">
<td>exclusive_pair</td>
<td>If either side is present, the other must not be</td>
</tr>
</tbody>
</table>

左边和右边的表达式是数学表达式
其中可以包含对数据元素和类别选项的引用
以下格式的组合：

    $ {<dataelement-id>。 <catoptcombo-id>}

左侧和右侧表达式有_缺失值策略_。这是指系统应如何处理公式中数据元素/类别选项组合引用缺失的数据值，即是否应检查验证规则的有效性或跳过验证规则。有效的缺失值策略如下表所示。

<table>
<caption>Missing value strategies</caption>
<colgroup>
<col style="width: 28%" />
<col style="width: 71%" />
</colgroup>
<thead>
<tr class="header">
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>SKIP_IF_ANY_VALUE_MISSING</td>
<td>Skip validation rule if any data value is missing</td>
</tr>
<tr class="even">
<td>SKIP_IF_ALL_VALUES_MISSING</td>
<td>Skip validation rule if all data values are missing</td>
</tr>
<tr class="odd">
<td>NEVER_SKIP</td>
<td>Never skip validation rule irrespective of missing data values</td>
</tr>
</tbody>
</table>

## 验证结果 { #webapi_validation_results }

验证结果是在执行期间发现的违规的持久结果
验证分析。如果您在开始时选择“持久结果”或
安排验证分析，发现的任何违规将存储在
数据库。当结果存储在数据库中时，它将被使用
对于 3 件事：

1.  根据存储的结果生成分析。

2.  尚未生成通知的持久结果将生成一次。

3.  跟踪结果是否已生成通知。

4.  运行验证分析时跳过已检查的规则。

这意味着如果你不坚持你的结果，你将无法
为验证结果生成分析，如果选中，结果将
每次找到并运行验证时生成通知
分析可能会更慢。

持久化的验证结果可以在下面查看
端点：

    / api / 33 / validationResults

您还可以使用验证结果 ID 检查单个结果
在这个端点：

    / api / 33 / validationResults / <id>

验证结果每天发送给适当的用户一次，
但也可以使用以下方法手动触发以按需运行
api端点：

    / api / 33 / validation / sendNotifications

使用此端点仅发送未发送的结果。

## 数据分析 { #webapi_data_analysis }

用于执行数据分析和查找数据质量的多种资源
并提供验证问题。

### 验证规则分析 { #webapi_data_analysis_validation_rules }

要运行验证规则并检索违规：

    / api / dataAnalysis / validationRules

支持以下查询参数：

 <table>
 <caption> 验证规则分析查询参数 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 说明 </th>
 <th> 选项 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> vrg </td>
 <td> 验证规则组 </td>
 <td> ID </td>
 </tr>
 <tr class="even">
 <td> 或 </td>
 <td> 组织单位 </td>
 <td> ID </td>
 </tr>
 <tr class="odd">
 <td> 开始日期 </td>
 <td> 时间跨度的开始日期 </td>
 <td> 日期 </td>
 </tr>
 <tr class="even">
 <td> 结束日期 </td>
 <td> 时间跨度的结束日期 </td>
 <td> 日期 </td>
 </tr>
 <tr class="odd">
 <td> 坚持 </td>
 <td> 是否在系统中持久化违规 </td>
 <td> 假 |真 </td>
 </tr>
 <tr class="even">
 <td> 通知 </td>
 <td> 是否发送违规通知 </td>
 <td> 假 |真 </td>
 </tr>
 </tbody>
 </table>

样本输出：

```json
[
    {
        "validationRuleId": "kgh54Xb9LSE",
        "validationRuleDescription": "Malaria outbreak",
        "organisationUnitId": "DiszpKrYNg8",
        "organisationUnitDisplayName": "Ngelehun CHC",
        "organisationUnitPath": "/ImspTQPwCqd/O6uvpzGd5pu/YuQRtpLP10I/DiszpKrYNg8",
        "organisationUnitAncestorNames": "Sierra Leone / Bo / Badjia / ",
        "periodId": "201901",
        "periodDisplayName": "January 2019",
        "attributeOptionComboId": "HllvX50cXC0",
        "attributeOptionComboDisplayName": "default",
        "importance": "MEDIUM",
        "leftSideValue": 10.0,
        "operator": ">",
        "rightSideValue": 14.0
    },
    {
        "validationRuleId": "ZoG4yXZi3c3",
        "validationRuleDescription": "ANC 2 cannot be higher than ANC 1",
        "organisationUnitId": "DiszpKrYNg8",
        "organisationUnitDisplayName": "Ngelehun CHC",
        "organisationUnitPath": "/ImspTQPwCqd/O6uvpzGd5pu/YuQRtpLP10I/DiszpKrYNg8",
        "organisationUnitAncestorNames": "Sierra Leone / Bo / Badjia / ",
        "periodId": "201901",
        "periodDisplayName": "January 2019",
        "attributeOptionComboId": "HllvX50cXC0",
        "attributeOptionComboDisplayName": "default",
        "importance": "MEDIUM",
        "leftSideValue": 22.0,
        "operator": "<=",
        "rightSideValue": 19.0
    }
]
```

### 基于标准差的离群分析 { #webapi_data_analysis_std_dev_outlier }

根据平均值的标准偏差识别数据异常值
价值：

    / api / dataAnalysis / stdDevOutlier

支持以下查询参数：

 <table>
 <caption> 标准差异常值分析查询参数 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 说明 </th>
 <th> 选项 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 或 </td>
 <td> 组织单位 </td>
 <td> ID </td>
 </tr>
 <tr class="even">
 <td> 开始日期 </td>
 <td> 时间跨度的开始日期 </td>
 <td> 日期 </td>
 </tr>
 <tr class="odd">
 <td> 结束日期 </td>
 <td> 时间跨度的结束日期 </td>
 <td> 日期 </td>
 </tr>
 <tr class="even">
 <td> ds </td>
 <td> 数据集，参数可重复 </td>
 <td> ID </td>
 </tr>
 <tr class="odd">
 <td> 标准偏差 </td>
 <td> 与平均值的标准偏差数 </td>
 <td> 数值 </td>
 </tr>
 </tbody>
 </table>

### 基于最小值/最大值的离群值分析 { #webapi_data_analysis_min_max_outlier }

要基于最小/最大值来识别数据离群值：

    / api / dataAnalysis / minMaxOutlier

支持的查询参数等于上述_基于std dev的异常值分析_资源。

### 后续数据分析 { #follow-up-data-analysis }

要识别标记为后续的数据：

    / api / dataAnalysis / followup

支持的查询参数等于上述_基于std dev的异常值分析_资源。

## 数据的完整性 { #webapi_data_integrity }

数据管理模块的数据完整性功能是
可通过 Web API 获得。本节介绍如何运行
数据完整性过程以及检索结果。详情
执行的分析在用户手册中进行了描述。

### 运行数据完整性 { #webapi_data_integrity_run }

测量数据完整性的操作是一项相当需要资源（和时间）的任务。因此，它作为异步进程运行，并且仅在明确请求时运行。启动任务是通过向 _dataIntegrity_ 端点形成一个空的 POST 请求来完成的，如下所示（以curl语法演示）：

```bash
curl -X POST "https://localhost/api/33/dataIntegrity"
```

如果成功，请求将立即返回 HTTP 202。那个地点
响应头指向用于检查状态的资源
的请求。负载还包含作业的 json 对象
创建。对给定位置形成 GET 请求会产生一个空的
任务尚未完成时的 JSON 响应和 JSON taskSummary
任务完成时的对象。轮询（保守地）此资源
因此可用于等待任务完成。

### 取得结果 { #webapi_data_integrity_fetch_results }

一旦数据完整性完成运行，结果可以从
`system/taskSummaries` 资源如下：

```bash
curl "https://dhis.domain/api/33/system/taskSummaries/DATAINTEGRITY"
```

返回的对象包含每个分析点的摘要，
列出相关完整性违规的名称。正如在
本节的前导段落分析的细节（以及
结果数据）可以在用户手册的数据章节中找到
行政。

## 指标 { #webapi_indicators }

本节介绍指标和指标表达式。

### 综合指标 { #webapi_aggregate_indicators }

要检索指标，您可以向指标发出 GET 请求
像这样的资源：

    / api /指标

指标表示可以计算和呈现的表达式
因此。指标表达式分为分子和
分母。分子和分母是数学的
可以包含对数据元素、其他指标、常量和
组织单位组。变量将替换为数据
使用时的值，例如在报告中。允许的变量
表达式在下表中描述。

<table>
<caption>Indicator variables</caption>
<colgroup>
<col style="width: 39%" />
<col style="width: 22%" />
<col style="width: 37%" />
</colgroup>
<thead>
<tr class="header">
<th>Variable</th>
<th>Object</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>#{&lt;dataelement-id&gt;.&lt;categoryoptcombo-id&gt;.&lt;attributeoptcombo-id&gt;}</td>
<td>Data element operand</td>
<td>Refers to a combination of an aggregate data element and a category option combination. Both category and attribute option combo ids are optional, and a wildcard &quot;*&quot; symbol can be used to indicate any value.</td>
</tr>
<tr class="even">
<td>#{&lt;dataelement-id&gt;.&lt;categoryoptiongroup-id&gt;.&lt;attributeoptcombo-id&gt;}</td>
<td>Category Option Group</td>
<td>Refers to an aggregate data element and a category option group, containing multiple category option combinations.</td>
</tr>
<tr class="odd">
<td>#{&lt;dataelement-id&gt;}</td>
<td>Aggregate data element</td>
<td>Refers to the total value of an aggregate data element across all category option combinations.</td>
</tr>
<tr class="even">
<td>D{&lt;program-id&gt;.&lt;dataelement-id&gt;}</td>
<td>Program data element</td>
<td>Refers to the value of a tracker data element within a program.</td>
</tr>
<tr class="odd">
<td>A{&lt;program-id&gt;.&lt;attribute-id&gt;}</td>
<td>Program tracked entity attribute</td>
<td>Refers to the value of a tracked entity attribute within a program.</td>
</tr>
<tr class="even">
<td>I{&lt;program-indicator-id&gt;}</td>
<td>Program indicator</td>
<td>Refers to the value of a program indicator.</td>
</tr>
<tr class="odd">
<td>R{&lt;dataset-id&gt;.&lt;metric&gt;}</td>
<td>Reporting rate</td>
<td>Refers to a reporting rate metric. The metric can be REPORTING_RATE, REPORTING_RATE_ON_TIME, ACTUAL_REPORTS, ACTUAL_REPORTS_ON_TIME, EXPECTED_REPORTS.</td>
</tr>
<tr class="even">
<td>C{&lt;constant-id&gt;}</td>
<td>Constant</td>
<td>Refers to a constant value.</td>
</tr>
<tr class="odd">
<td>N{&lt;indicator-id&gt;}</td>
<td>Indicator</td>
<td>Refers to an existing Indicator.</td>
</tr>
<tr class="even">
<td>OUG{&lt;orgunitgroup-id&gt;}</td>
<td>Organisation unit group</td>
<td>Refers to the count of organisation units within an organisation unit group.</td>
</tr>
</tbody>
</table>

语法看起来像
    这：

＃

相应的示例如下所示：

＃

请注意，对于数据元素变量，类别选项组合
标识符可以省略。该变量将代表总数
对于数据元素，例如在所有类别选项组合中。例子：

＃

数据元素操作数可以包括任何类别选项组合和
属性选项组合，并使用通配符表示任何
    价值：

＃

使用程序数据元素和程序的示例
    属性：

    （D {eBAyeGv0exc.vV9UWAZohSf} * A {IpHINAT79UW.cejWyOfXge6}）/ D {eBAyeGv0exc.GieVkTxp4HH}

结合了计划指标和汇总指标的示例：

    I {EMOt6Fwhs1n} * 1000 /＃{WUg3MYWQ7pt}

使用报告率的示例如下所示：

    R {BfMAe6Itzgt.REPORTING_RATE} *＃{P3jJH5Tu5VC.S34ULMcHMca}

使用实际数据集报告的另一个示例：

    R {BfMAe6Itzgt.ACTUAL_REPORTS} / R {BfMAe6Itzgt.EXPECTED_REPORTS}

使用现有指标的示例如下所示：

    N {Rigf2d2Zbjp} *＃{P3jJH5Tu5VC.S34ULMcHMca}

表达式可以是任何类型的有效数学表达式，作为
例子：

    （2 *＃{P3jJH5Tu5VC.S34ULMcHMca}）/（＃{FQ2o8UBlcrS.S34ULMcHMca}-200）* 25

### 计划指标 { #webapi_program_indicators }

要检索程序指标，您可以向程序发出 GET 请求
像这样的指标资源：

    / api / programIndicators

程序指示器可以包含在程序中收集的信息。
指标有一个表达式，可以包含对数据的引用
元素、属性、常量和程序变量。变量
下表中描述了允许在表达式中使用。

 <table>
 <caption> 程序指示变量 </caption>
 <colgroup>
 <col style="width: 31%" />
 <col style="width: 68%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 变量 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> #{&lt;programstage-id&gt;.&lt;dataelement-id&gt;} </td>
 <td> 指程序阶段和数据元素 id 的组合。 </td>
 </tr>
 <tr class="even">
 <td> A{&lt;attribute-id&gt;} </td>
 <td> 指的是被跟踪的实体属性。 </td>
 </tr>
 <tr class="odd">
 <td> V{&lt;variable-id&gt;} </td>
 <td> 指程序变量。 </td>
 </tr>
 <tr class="even">
 <td> C{&lt;constant-id&gt;} </td>
 <td> 指一个常数。 </td>
 </tr>
 </tbody>
 </table>

语法看起来像
    这：

＃

相应的示例如下所示：

＃

### 表达方式 { #webapi_expressions }

表达式是数学公式，可以包含对
数据元素、常量和组织单元组。验证和
获取表达式的文本描述，您可以发出 GET 请求
到表达式资源：

    / api / expressions / description？expression = <expression-string>

响应遵循标准 JSON Web 消息格式。 _status_ 属性指示验证的结果，如果成功则为“OK”，如果失败则为“ERROR”。如果成功，_message_ 属性将为“Valid”；如果失败，则提供验证失败原因的文本描述。 _description_ 提供表达式的文本描述。

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Valid",
    "description": "Acute Flaccid Paralysis"
}
```

## 完整的数据集注册 { #webapi_complete_data_set_registrations }

本节是关于数据集的完整数据集注册。一种
注册标记作为完全捕获的数据集。

### 完成数据集 { #webapi_completing_data_sets }

本节介绍如何注册完整的数据集。这是通过与 _completeDataSetRegistrations_ 资源交互来实现的：

    / api / 33 / completeDataSetRegistrations

端点支持 _POST_ 方法来注册数据集完成。该端点在功能上与 _dataValueSets_ 端点非常相似，支持批量导入完整注册。

支持导入 _XML_ 和 _JSON_ 格式的有效负载。此有效负载的基本格式（在本例中为 _XML_）如下所示：

```xml
<completeDataSetRegistrations xmlns="http://dhis2.org/schema/dxf/2.0">
  <completeDataSetRegistration period="200810" dataSet="eZDhcZi6FLP" 
    organisationUnit="qhqAxPSTUXp" attributeOptionCombo="bRowv6yZOF2" storedBy="imported"/>
  <completeDataSetRegistration period="200811" dataSet="eZDhcZi6FLP" 
    organisationUnit="qhqAxPSTUXp" attributeOptionCombo="bRowv6yZOF2" storedBy="imported"/>
</completeDataSetRegistrations>
```

_storedBy_ 属性是可选的（因为它是完整注册对象上的可为空的属性）。您还可以选择将 _date_ 属性（注册时间）设置为属性。如果未设置时间，则将使用当前时间。

导入过程支持以下查询参数：

 <table>
 <caption> 完整的数据集注册查询参数 </caption>
 <colgroup>
 <col style="width: 16%" />
 <col style="width: 18%" />
 <col style="width: 64%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 值 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> dataSetIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射完整注册的数据集的属性。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射完整注册的组织单位的属性。 </td>
 </tr>
 <tr class="odd">
 <td> attributeOptionComboIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射完整注册的属性选项组合的属性。 </td>
 </tr>
 <tr class="even">
 <td> idScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 所有对象的属性，包括数据集、组织单位和属性选项组合，用于映射完整的注册。 </td>
 </tr>
 <tr class="odd">
 <td> preheatCache </td>
 <td> 假 |真 </td>
 <td> 是在服务器上保存更改还是只返回导入摘要。 </td>
 </tr>
 <tr class="even">
 <td> dryRun </td>
 <td> 假 |真 </td>
 <td> 子单位是否适用注册 </td>
 </tr>
 <tr class="odd">
 <td> 导入策略 </td>
 <td> 创建 |更新 | CREATE_AND_UPDATE |删除 </td>
 <td> 在服务器上保存所有对象、新对象或更新导入状态。 </td>
 </tr>
 <tr class="even">
 <td>skipExistingCheck </td>
 <td> 假 |真 </td>
 <td> 跳过检查现有的完整注册。提高性能。仅用于空数据库或当要导入的注册不存在时。 </td>
 </tr>
 <tr class="odd">
 <td> 异步 </td>
 <td> 假 |真 </td>
 <td> 指示导入是异步还是同步。前者适用于非常大的导入，因为它确保请求不会超时，尽管它具有显着的性能开销。后者速度更快，但需要连接持续到进程完成。 </td>
 </tr>
 </tbody>
 </table>

### 读取完整的数据集注册 { #webapi_reading_complete_data_sets }

本节介绍如何检索数据集完整性注册。我们将使用 _completeDataSetRegistrations_ 资源。要使用的查询参数如下：

 <table>
 <caption>数据值设置查询参数</caption>
 <colgroup>
 <col style="width: 18%" />
 <col style="width: 81%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>数据集</td>
 <td>数据集标识符，允许多个数据集</td>
 </tr>
 <tr class="even">
 <td>周期</td>
 <td> ISO格式的期间标识符。允许多个时期。 </td>
 </tr>
 <tr class="odd">
 <td>开始日期</td>
 <td>导出值的时间跨度的开始日期</td>
 </tr>
 <tr class="even">
 <td>结束日期</td>
 <td>导出值的时间跨度的结束日期</td>
 </tr>
 <tr class="odd">
 <td>创建了</td>
 <td>仅包括自给定时间戳记</td>创建的注册
 </tr>
 <tr class="even">
 <td>创建的持续时间</td>
 <td>仅包括在给定期限内创建的注册。格式是&lt;value&gt;&lt;time-unit&gt;，其中所支持的时间单位是&quot;d&quot;，&quot;h&quot;，&quot;m&quot;，&quot;s&quot; <em>（日，时，分，秒）。 </em>时间单位是相对于当前时间的。 </td>
 </tr>
 <tr class="odd">
 <td> orgUnit </td>
 <td>组织单位标识符，可以多次指定。如果给出了orgUnitGroup，则不适用。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitGroup </td>
 <td>组织单位组标识符，可以多次指定。如果给出了orgUnit，则不适用。 </td>
 </tr>
 <tr class="odd">
 <td>儿童</td>
 <td>是否在组织单位的层次结构中包括子级</td>
 </tr>
 <tr class="even">
 <td>限制</td>
 <td>响应中要包括的最大注册数量。 </td>
 </tr>
 <tr class="odd">
 <td> idScheme </td>
 <td>响应中用于元数据对象的标识符属性。 </td>
 </tr>
 <tr class="even">
 <td> dataSetIdScheme </td>
 <td>响应中用于数据集的标识符属性。覆盖idScheme。 </td>
 </tr>
 <tr class="odd">
 <td> orgUnitIdScheme </td>
 <td>响应中用于组织单位的标识符属性。覆盖idScheme。 </td>
 </tr>
 <tr class="even">
 <td> attributeOptionComboIdScheme </td>
 <td>响应中用于属性选项组合的标识符属性。覆盖idScheme。 </td>
 </tr>
 </tbody>
 </table>

可以重复 dataSet 和 orgUnit 参数以包含
多个数据集和组织单位。

期间、开始/结束日期、 created 和 createdDuration 参数
提供多种方式设置请求的时间维度，因此仅
一个可以用。例如，同时设置
开始/结束日期并设置期间。

请求示例如下所示：

```bash
curl "https://play.dhis2.org/demo/api/33/completeDataSetRegistrations?dataSet=pBOMPrpg1QX
  &dataSet=pBOMPrpg1QX&startDate=2014-01-01&endDate=2014-01-31&orgUnit=YuQRtpLP10I
  &orgUnit=vWbkYPRmKyS&children=true"
  -H "Accept:application/xml" -u admin:district
```

您可以获得 _xml_ 和 _json_ 格式的响应。您可以通过 _Accept_ HTTP 标头指示您喜欢哪种响应格式，如上例所示。对于 xml，您使用 _application/xml_;对于 json，您使用 _application/json_。

### 未完成的数据集 { #webapi_uncompleting_data_sets }

本节说明如何取消注册数据的完整性
放。要取消完成数据集，您将与
completeDataSetRegistrations 资源：

    / api / 33 / completeDataSetRegistrations

此资源支持_DELETE_取消注册。支持以下查询参数：

 <table>
 <caption>完整数据集注册查询参数</caption>
 <colgroup>
 <col style="width: 16%" />
 <col style="width: 18%" />
 <col style="width: 64%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ds </td>
 <td>是</td>
 <td>数据集标识符</td>
 </tr>
 <tr class="even">
 <td> pe </td>
 <td>是</td>
 <td>期间标识符</td>
 </tr>
 <tr class="odd">
 <td> ou </td>
 <td>是</td>
 <td>组织单位标识符</td>
 </tr>
 <tr class="even">
 <td> cc </td>
 <td>否（必须与cp结合使用）</td>
 <td>属性组合标识符（用于锁定检查）</td>
 </tr>
 <tr class="odd">
 <td> cp </td>
 <td>否（必须与cp结合使用）</td>
 <td>属性选项标识符，用;分隔对于多个值（用于锁定检查）</td>
 </tr>
 <tr class="even">
 <td>多块</td>
 <td>否（默认为false）</td>
 <td>注册是否适用于子单元</td>
 </tr>
 </tbody>
 </table>

## 数据审批 { #webapi_data_approval }

本节介绍如何使用 _dataApprovals_ 资源批准、取消批准和检查批准状态。批准是根据数据批准工作流程、期间、组织单位和属性选项组合完成的。

    / api / 33 / dataApprovals

数据批准工作流与多个实体相关联：

-   定义批准频率的期间类型
-   可选类别组合
-   工作流程中的一个或多个数据批准级别
-   一个或多个用于数据收集的数据集

### 获取批准状态 { #webapi_data_approval_get_status }

要获取数据集的批准信息，您可以发出GET请求：

    / api / dataApprovals？wf = rIUL3hYOjJc＆pe = 201801＆ou = YuQRtpLP10I

 <table style="width:100%;">
 <caption> 数据审批查询参数 </caption>
 <colgroup>
 <col style="width: 16%" />
 <col style="width: 18%" />
 <col style="width: 64%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 需要 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> wf </td>
 <td> 是 </td>
 <td> 数据审批工作流标识符 </td>
 </tr>
 <tr class="even">
 <td> pe </td>
 <td> 是 </td>
 <td> 期间标识符 </td>
 </tr>
 <tr class="odd">
 <td> 或 </td>
 <td> 是 </td>
 <td> 组织单位标识符 </td>
 </tr>
 <tr class="even">
 <td> aoc </td>
 <td> 否 </td>
 <td> 属性选项组合标识符 </td>
 </tr>
 </tbody>
 </table>

> **Note**
>
> For backward compatibility, the parameter `ds` for data set may be given instead of `wf` for workflow in this and other data approval requests as described below. If the data set is given, the workflow associated with that data set will be used.

这将产生类似于以下的响应：

```json
{
    "mayApprove": false,
    "mayUnapprove": false,
    "mayAccept": false,
    "mayUnaccept": false,
    "state": "UNAPPROVED_ELSEWHERE"
}
```

返回的参数是：

 <table>
 <caption>数据批准返回的参数</caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 75%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>返回参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>可以批准</td>
 <td>当前用户是否可以批准此数据选择。 </td>
 </tr>
 <tr class="even">
 <td>可能不批准</td>
 <td>当前用户是否可能不批准此数据选择。 </td>
 </tr>
 <tr class="odd">
 <td>可以接受</td>
 <td>当前用户是否可以接受此数据选择。 </td>
 </tr>
 <tr class="even">
 <td>可能无法接受</td>
 <td>当前用户是否可能不接受此数据选择。 </td>
 </tr>
 <tr class="odd">
 <td>状态</td>
 <td>下表中的数据批准状态之一。 </td>
 </tr>
 </tbody>
 </table>

 <table>
 <caption> 数据批准状态 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 66%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 状态 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 不批准 </td>
 <td> 数据批准不适用于此选择。 （数据既未获批准也未获批准。）</td>
 </tr>
 <tr class="even">
 <td> UNAPPROVED_WAITING </td>
 <td> 数据可以为此选择批准，但在准备批准之前正在等待一些较低级别的批准。 </td>
 </tr>
 <tr class="odd">
 <td> UNAPPROVED_ELSEWHERE </td>
 <td> 数据未经批准，正在其他地方等待批准（此处不可批准。）</td>
 </tr>
 <tr class="even">
 <td> UNAPPROVED_READY </td>
 <td> 数据未经批准，已准备好为此选择批准。 </td>
 </tr>
 <tr class="odd">
 <td> APPROVED_HERE </td>
 <td> 数据已获批准，此处已获批准（因此此处可能未获批准。） </td>
 </tr>
 <tr class="even">
 <td> APPROVED_ELSEWHERE </td>
 <td> 数据已获批准，但此处未获批准（因此此处不能未获批准。）这包括以下情况：
 <ul>
 <li> <p> 数据在更高级别获得批准。 </p> </li>
 <li> <p> 数据被批准用于更广泛的类别选项。 </p> </li>
 <li> <p> 选定期间内所有子期间的数据均获批准。 </p> </li>
 </ul>
在前两种情况下，只有一个数据审批对象涵盖了选择。在第三种情况下没有。 </td>
 </tr>
 <tr class="odd">
 <td> 接受_这里 </td>
 <td> 此处已批准并接受数据（因此此处可能未获批准。） </td>
 </tr>
 <tr class="even">
 <td> ACCEPTED_ELSEWHERE </td>
 <td> 数据被批准和接受，但在其他地方。 </td>
 </tr>
 </tbody>
 </table>

注意查询数据审批状态时，可以指定
查询参数的任意组合。您指定的组合
不需要描述数据被批准的地方
审批级别。例如：

-   组织单位可能不处于审批级别。批准状态由数据是否在组织单位的祖先的批准级别上批准来确定。

-   您可以指定单独的属性类别选项。批准状态取决于包含一个或多个选项的属性类别选项组合的数据是否获得批准。

-   您可以指定比输入和批准数据的数据集的时间段更长的时间段。批准状态取决于数据是否在您指定的期间内的所有数据集期间都获得批准。

对于与您可能需要的类别组合关联的数据集
获取单个属性选项组合的数据批准记录
从具有 GET 请求的以下资源：

    / api / dataApprovals / categoryOptionCombos？wf = rIUL3hYOjJc＆pe = 201801＆ou = YuQRtpLP10I

### 批量获取批准状态 { #bulk-get-approval-status }

要获取多个批准状态的列表，可以发出类似于以下内容的GET请求：

    / api / dataApprovals / approvals？wf = rIUL3hYOjJc＆pe = 201801,201802＆ou = YuQRtpLP10I

参数 `wf`、`pe`、`ou` 和 `aoc` 与获取单个批准状态的参数相同，但您可以为每个参数提供一个以逗号分隔的一个或多个值的列表。

这将为您提供一个包含批准参数和状态列表的响应，如下所示：

```json
[
    {
        "aoc": "HllvX50cXC0",
        "pe": "201801",
        "level": "KaTJLhGmU95",
        "ou": "YuQRtpLP10I",
        "permissions": {
            "mayApprove": false,
            "mayUnapprove": true,
            "mayAccept": true,
            "mayUnaccept": false,
            "mayReadData": true
        },
        "state": "APPROVED_HERE",
        "wf": "rIUL3hYOjJc"
    },
    {
        "aoc": "HllvX50cXC0",
        "pe": "201802",
        "ou": "YuQRtpLP10I",
        "permissions": {
            "mayApprove": true,
            "mayUnapprove": false,
            "mayAccept": false,
            "mayUnaccept": false,
            "mayReadData": true
        },
        "state": "UNAPPROVED_READY",
        "wf": "rIUL3hYOjJc"
    }
]
```

下表描述了返回的字段。

| 领域 | 描述 |
| --- | --- |
| 冠捷 | 属性选项组合标识符 |
| 聚乙烯 | 期间标识符 |
| 欧 | 组织单位标识符 |
| 权限 | 权限：“ mayApprove”，“ mayUnapprove”，“ mayAccept”，“ mayUnaccept”和“ mayReadData”（与获得单一批准状态的定义相同）。 |
| 州 | 数据批准状态之一（与获取单个批准状态相同）。 |
| 工作组 | 数据批准工作流标识符 |

### 批准数据 { #webapi_data_approval_approve_data }

要批准数据，您可以向 _dataApprovals_ 资源发出 _POST_ 请求。要取消批准数据，您可以向 dataApprovals 资源发出 _DELETE_ 请求。

    发布删除/ api / 33 / dataApprovals

要接受已批准的数据，您可以向 _dataAcceptances_ 资源发出 _POST_ 请求。要取消接受数据，您可以向 _dataAcceptances_ 资源发出 _DELETE_ 请求。

    POST DELETE / api / 33 / dataAcceptances

这些请求包含以下参数：

 <table style="width:100%;">
 <caption> 数据审批动作参数 </caption>
 <colgroup>
 <col style="width: 16%" />
 <col style="width: 18%" />
 <col style="width: 64%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 动作参数 </th>
 <th> 需要 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> wf </td>
 <td> 是 </td>
 <td> 数据审批工作流标识符 </td>
 </tr>
 <tr class="even">
 <td> pe </td>
 <td> 是 </td>
 <td> 期间标识符 </td>
 </tr>
 <tr class="odd">
 <td> 或 </td>
 <td> 是 </td>
 <td> 组织单位标识符 </td>
 </tr>
 <tr class="even">
 <td> aoc </td>
 <td> 否 </td>
 <td> 属性选项组合标识符 </td>
 </tr>
 </tbody>
 </table>

注意，与查询数据审批状态不同，必须指定
对应于可以选择的数据的参数
得到正式认可的。特别是，以下两项都必须为真：

-   组织单位的级别必须由工作流中的审批级别指定。

-   指定的时间段必须与工作流的期间类型匹配。

### 批量批准数据 { #webapi_data_approval_bulk_approve_data }

您可以通过发布到批准大量数据记录
`/api/dataApprovals/approvals` 资源。

    POST / api / 33 / dataApprovals / approvals

您可以通过发布到
`/api/dataApprovals/unapprovals` 资源。

    POST / api / 33 / dataApprovals /未批准

您可以通过发布到
`/api/dataAcceptances/acceptances` 资源。

    POST / api / 33 / dataAcceptances / acceptances

您可以通过发布到
`/api/dataAcceptances/unacceptances` 资源。

    POST / api / 33 / dataAcceptances / unacceptances

批准有效负载受JSON支持，如下所示：

```json
{
    "wf": ["pBOMPrpg1QX", "lyLU2wR22tC"],
    "pe": ["201601", "201602"],
    "approvals": [
        {
            "ou": "cDw53Ej8rju",
            "aoc": "ranftQIH5M9"
        },
        {
            "ou": "cDw53Ej8rju",
            "aoc": "fC3z1lcAW5x"
        }
    ]
}
```

### 获取数据批准级别 { #get-data-approval-levels }

要检索数据审批工作流及其数据审批级别，您
可以发出类似这样的 GET 请求：

    / api / dataApprovalWorkflows？
      fields = id，name，periodType，dataApprovalLevels [id，name，level，orgUnitLevel]

## 稽核 { #webapi_auditing }

DHIS2 对聚合的所有更新和删除进行自动审计
数据值，跟踪实体数据值，跟踪实体属性
值和数据批准。本节说明如何获取这个
数据。

### 汇总数据价值审核 { #webapi_auditing_aggregate_audits }

聚合数据值审计的端点位于
`/api/audits/dataValue`，可用参数显示在
下表。

 <table>
 <caption> 汇总数据值查询参数 </caption>
 <colgroup>
 <col style="width: 12%" />
 <col style="width: 14%" />
 <col style="width: 72%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ds </td>
 <td> 数据集 </td>
 <td> 要从中获取数据元素的一个或多个数据集标识符。 </td>
 </tr>
 <tr class="even">
 <td> 德 </td>
 <td> 数据元素 </td>
 <td> 一个或多个数据元素标识符。 </td>
 </tr>
 <tr class="odd">
 <td> pe </td>
 <td> ISO 周期 </td>
 <td> 一个或多个句点 ISO 标识符。 </td>
 </tr>
 <tr class="even">
 <td> 或 </td>
 <td> 组织单位 </td>
 <td> 一个或多个组织单位标识符。 </td>
 </tr>
 <tr class="odd">
 <td> 审计类型 </td>
 <td> 更新 |删除 </td>
 <td> 按审计类型过滤。 </td>
 </tr>
 <tr class="even">
 <td> 跳过分页 </td>
 <td> 假 |真 </td>
 <td> 打开/关闭分页 </td>
 </tr>
 <tr class="odd">
 <td> 页面 </td>
 <td> 1（默认）</td>
 <td> 如果启用分页，此参数决定显示哪个页面 </td>
 </tr>
 </tbody>
 </table>

获取 ID 为 _lyLU2wR22tC_ 的数据集的所有审核：

    / api / 33 / audits / dataValue？ds = lyLU2wR22tC

### 跟踪实体数据价值审核 { #webapi_tracked_entity_data_value_audits }

跟踪实体数据值审计的端点位于
`/api/audits/trackedEntityDataValue`，可用的参数有
显示在下表中。

 <table>
 <caption> 跟踪实体数据值查询参数 </caption>
 <colgroup>
 <col style="width: 12%" />
 <col style="width: 16%" />
 <col style="width: 71%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 德 </td>
 <td> 数据元素 </td>
 <td> 一个或多个数据元素标识符。 </td>
 </tr>
 <tr class="even">
 <td> ps </td>
 <td> 程序阶段实体 </td>
 <td> 一个或多个程序阶段实例标识符。 </td>
 </tr>
 <tr class="odd">
 <td> 审计类型 </td>
 <td> 更新 |删除 </td>
 <td> 按审计类型过滤。 </td>
 </tr>
 <tr class="even">
 <td> 跳过分页 </td>
 <td> 假 |真 </td>
 <td> 打开/关闭分页 </td>
 </tr>
 <tr class="odd">
 <td> 页面 </td>
 <td> 1（默认）</td>
 <td> 如果启用分页，此参数决定显示哪个页面 </td>
 </tr>
 </tbody>
 </table>

获取所有具有数据元素ID eMyVanycQSC或qrur9Dvnyt5的审计：

    / api / 33 / audits / trackedEntityDataValue？de = eMyVanycQSC＆de = qrur9Dvnyt5

### 跟踪实体属性值审核 { #webapi_tracked_entity_attribute_value_audits }

跟踪实体属性值审计的端点位于
`/api/audits/trackedEntityAttributeValue`，以及可用的参数
显示在下表中。

 <table>
 <caption>跟踪实体属性值查询参数</caption>
 <colgroup>
 <col style="width: 12%" />
 <col style="width: 16%" />
 <col style="width: 70%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>茶</td>
 <td>跟踪的实体属性</td>
 <td>一个或多个跟踪的实体属性标识符。 </td>
 </tr>
 <tr class="even">
 <td> te </td>
 <td>跟踪的实体实例</td>
 <td>一个或多个跟踪的实体实例标识符。 </td>
 </tr>
 <tr class="odd">
 <td>审核类型</td>
 <td>更新|删除</td>
 <td>按审核类型过滤。 </td>
 </tr>
 <tr class="even">
 <td> skipPaging </td>
 否| <td>假|真</td>
 <td>打开/关闭分页</td>
 </tr>
 <tr class="odd">
 <td>页面</td>
 <td> 1（默认）</td>
 <td>如果启用了分页，则此参数决定显示哪个页面</td>
 </tr>
 </tbody>
 </table>

获取所有具有ID VqEFza8wbwA的属性的审核：

    / api / 33 / audits / trackedEntityAttributeValue？tea = VqEFza8wbwA

### 跟踪实体实例审核 { #webapi_tracked_entity_instance_audits }

为跟踪实体实例启用审计后（通过设置
被跟踪实体类型的allowAuditLog为true），全部读取和搜索
操作被记录。访问审计日志的端点是
api/审计/trackedEntityInstance。以下是可用的参数
与此端点交互。

 <table>
 <caption> 被跟踪实体实例审计查询参数 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> tei </td>
 <td> 跟踪实体实例 </td>
 <td> 一个或多个被跟踪实体实例标识符 </td>
 </tr>
 <tr class="even">
 <td> 用户 </td>
 <td> 用户 </td>
 <td> 一个或多个用户标识符 </td>
 </tr>
 <tr class="odd">
 <td> 审计类型 </td>
 <td> 搜索 |阅读 </td>
 <td> 审核类型以筛选 </td>
 </tr>
 <tr class="even">
 <td> 开始日期 </td>
 <td> 开始日期 </td>
 <td> yyyy-mm-dd 格式的审计过滤的开始日期。 </td>
 </tr>
 <tr class="odd">
 <td> 结束日期 </td>
 <td> 结束日期 </td>
 <td> yyyy-mm-dd 格式的审计过滤的结束日期。 </td>
 </tr>
 <tr class="even">
 <td> 跳过分页 </td>
 <td> 假 |真 </td>
 <td> 打开/关闭分页。 </td>
 </tr>
 <tr class="odd">
 <td> 页面 </td>
 <td> 1（默认）</td>
 <td> 要请求的特定页面。 </td>
 </tr>
 <tr class="even">
 <td> 页面大小 </td>
 <td> 50（默认）</td>
 <td> 页面大小。 </td>
 </tr>
 </tbody>
 </table>

获取所有类型为 READ 的跟踪实体实例审计
startDate=2018-03-01 和 endDate=2018-04-24，页面大小为 5：

    /api/33/audits/trackedEntityInstance.json?startDate=2018-03-01
      ＆endDate = 2018-04-24＆auditType = READ＆pageSize = 5

### 入学审核 { #webapi_enrollment_audits }

为注册启用审核后（通过设置 allowAuditLog of
tracker 程序设置为 true），所有读取操作都会被记录。这
访问审计日志的端点是 api/audits/enrollment。以下是
与此端点交互的可用参数。

 <table>
 <caption> 注册审核查询参数 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> zh </td>
 <td> 注册 </td>
 <td> 一个或多个被跟踪实体实例标识符 </td>
 </tr>
 <tr class="even">
 <td> 用户 </td>
 <td> 用户 </td>
 <td> 一个或多个用户标识符 </td>
 </tr>
 <tr class="odd">
 <td> 开始日期 </td>
 <td> 开始日期 </td>
 <td> yyyy-mm-dd 格式的审计过滤的开始日期。 </td>
 </tr>
 <tr class="even">
 <td> 结束日期 </td>
 <td> 结束日期 </td>
 <td> yyyy-mm-dd 格式的审计过滤的结束日期。 </td>
 </tr>
 <tr class="odd">
 <td> 跳过分页 </td>
 <td> 假 |真 </td>
 <td> 打开/关闭分页。 </td>
 </tr>
 <tr class="even">
 <td> 页面 </td>
 <td> 1（默认）</td>
 <td> 要请求的特定页面。 </td>
 </tr>
 <tr class="odd">
 <td> 页面大小 </td>
 <td> 50（默认）</td>
 <td> 页面大小。 </td>
 </tr>
 </tbody>
 </table>

获取 startDate=2018-03-01 的所有注册审核和
endDate=2018-04-24，页面大小为 5：

    /api/audits/enrollment.json?startDate=2018-03-01&endDate=2018-04-24&pageSize=5

获取用户管理员的所有注册审核：

    /api/audits/enrollment.json?user=admin

### 数据审批审核 { #data-approval-audits }

数据审批审核的端点位于
/api/audits/dataApproval，可用参数显示在
下表。

 <table>
 <caption> 数据审批查询参数 </caption>
 <colgroup>
 <col style="width: 12%" />
 <col style="width: 16%" />
 <col style="width: 70%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 选项 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> dal </td>
 <td> 数据批准级别 </td>
 <td> 一个或多个数据批准级别标识符。 </td>
 </tr>
 <tr class="even">
 <td> wf </td>
 <td> 工作流程 </td>
 <td> 一个或多个数据审批工作流标识符。 </td>
 </tr>
 <tr class="odd">
 <td> 或 </td>
 <td> 组织单位 </td>
 <td> 一个或多个组织单位标识符。 </td>
 </tr>
 <tr class="even">
 <td> aoc </td>
 <td> 属性选项组合 </td>
 <td> 一个或多个属性选项组合标识符。 </td>
 </tr>
 <tr class="odd">
 <td> 开始日期 </td>
 <td> 开始日期 </td>
 <td> yyyy-mm-dd 格式的批准开始日期。 </td>
 </tr>
 <tr class="even">
 <td> 结束日期 </td>
 <td> 结束日期 </td>
 <td> 批准的结束日期，格式为 yyyy-mm-dd。 </td>
 </tr>
 <tr class="odd">
 <td> 跳过分页 </td>
 <td> 假 |真 </td>
 <td> 打开/关闭分页 </td>
 </tr>
 <tr class="even">
 <td> 页面 </td>
 <td> 1（默认）</td>
 <td> <p> 如果启用分页，此参数决定显示哪个页面。 </p> </td>
 </tr>
 </tbody>
 </table>

获取数据批准工作流RwNpkAM7Hw7的所有审核：

    / api / 33 / audits / dataApproval？wf = RwNpkAM7Hw7

## 讯息对话 { #webapi_message_conversations }

DHIS2 具有一种发送消息的机制，用于向用户发送用户反馈、通知和一般信息等目的。消息被分组为对话。要与消息对话交互，您可以向 _messageConversations_ 资源发送 POST 和 GET 请求。

    / api / 33 / messageConversations

消息会发送到 DHIS2 消息收件箱，但也可以通过 SMS 发送到用户的电子邮件地址和手机。在此示例中，我们将了解如何利用 Web API 发送、读取和管理消息。我们将假装是 _DHIS2 Administrator_ 用户并向 _Mobile_ 用户发送消息。然后我们将假装是移动用户并阅读我们的新消息。接下来，我们将通过标记和删除邮件来管理管理员用户收件箱。

### 撰写和阅读邮件 { #webapi_writing_messages }

发送和读取消息时我们需要交互的资源是 _messageConversations_ 资源。我们首先访问位于 <http://play.dhis2.org/demo/api> 的 Web API 入口点，在其中找到并点击位于 <http://play.dhis2.org/demo/api/messageConversations> 的 _messageConversations_ 资源的链接。描述告诉我们，我们可以使用 POST 请求来创建一条使用以下 XML 格式的新消息，以便发送给多个用户：

```xml
<message xmlns="http://dhis2.org/schema/dxf/2.0">
  <subject>This is the subject</subject>
  <text>This is the text</text>
  <users>
    <user id="user1ID" />
    <user id="user2ID" />
    <user id="user3ID" />
  </users>
</message>
```

为了发送给一个或多个用户组中的所有用户，我们可以
用：

```xml
<message xmlns="http://dhis2.org/schema/dxf/2.0">
  <subject>This is the subject</subject>
  <text>This is the text</text>
  <userGroups>
    <userGroup id="userGroup1ID" />
    <userGroup id="userGroup2ID" />
    <userGroup id="userGroup3ID" />
  </userGroups>
</message>
```

为了发送给连接到一个或多个组织单位的所有用户，我们
可以使用：

```xml
<message xmlns="http://dhis2.org/schema/dxf/2.0">
  <subject>This is the subject</subject>
  <text>This is the text</text>
  <organisationUnits>
    <organisationUnit id="ou1ID" />
    <organisationUnit id="ou2ID" />
    <organisationUnit id="ou3ID" />
  </organisationUnits>
</message>
```

由于我们想向我们的朋友移动用户发送消息，我们需要查找她的标识符。我们通过转到 Web API 入口点并按照链接到 `/api/users` 中的 _users_ 资源来实现。我们继续点击位于`/api/users/PhzytPW3g2J`的移动用户的链接，在那里我们了解到她的标识符是 _PhzytPW3g2J_。我们现在准备将我们的 XML 消息放在一起形成一条消息，我们想询问移动用户她是否报告了 2014 年 1 月的数据：

```xml
<message xmlns="http://dhis2.org/schema/dxf/2.0">
  <subject>Mortality data reporting</subject>
  <text>Have you reported data for the Mortality data set for January 2014?</text>
  <users>
    <user id="PhzytPW3g2J" />
  </users>
</message>
```

为了测试这一点，我们将 XML 内容保存到名为 _message.xml_ 的文件中。我们使用 cURL 将消息分派到 DHIS2 演示实例，其中我们指示内容类型为 XML 并以 _admin_ 用户身份进行身份验证：

```bash
curl -d @message.xml "https://play.dhis2.org/demo/api/messageConversations"
  -H "Content-Type:application/xml" -u admin:district -X POST
```

JSON和POST命令中的相应有效负载如下所示：

```json
{
    "subject": "Hey",
    "text": "How are you?",
    "users": [
        {
            "id": "OYLGMiazHtW"
        },
        {
            "id": "N3PZBUlN8vq"
        }
    ],
    "userGroups": [
        {
            "id": "ZoHNWQajIoe"
        }
    ],
    "organisationUnits": [
        {
            "id": "DiszpKrYNg8"
        }
    ]
}
```

```bash
curl -d @message.json "https://play.dhis2.org/demo/api/33/messageConversations"
  -H "Content-Type:application/json" -u admin:district -X POST
```

如果一切顺利，我们会收到 _201 Created_ HTTP 状态代码。另请注意，我们收到一个 _Location_ HTTP 标头，该标头的值告知我们新创建的消息对话资源的 URL - 消费者可以使用它来执行进一步的操作。

现在，我们将假装是移动用户，并通过向 _messageConversations_ 资源发送 GET 请求来读取刚刚发送的消息。我们提供一个带有 _application/xml_ 值的 _Accept_ 标头，以表明我们对 XML 资源表示感兴趣，并且我们以 _mobile_ 用户身份进行身份验证：

```bash
curl "https://play.dhis2.org/demo/api/33/messageConversations"
  -H "Accept:application/xml" -u mobile:district
```

作为响应，我们得到以下XML：

```xml
<messageConversations xmlns="http://dhis2.org/schema/dxf/2.0"
  link="https://play.dhis2.org/demo/api/messageConversations">
  <messageConversation name="Mortality data reporting" id="ZjHHSjyyeJ2"
    link="https://play.dhis2.org/demo/api/messageConversations/ZjHHSjyyeJ2"/>
  <messageConversation name="DHIS2 version 2.7 is deployed" id="GDBqVfkmnp2"
    link="https://play.dhis2.org/demo/api/messageConversations/GDBqVfkmnp2"/>
</messageConversations>
```

从响应中，我们可以读取新发送消息的标识符，即_ZjHHSjyyeJ2_。请注意，特定资源的链接是嵌入的，可以通过点击链接来阅读完整的消息。一旦我们知道 URL，我们就可以通过将消息文本作为请求负载来直接回复现有的消息对话。现在我们可以构建一个 URL 来发送回复：

```bash
curl -d "Yes the Mortality data set has been reported"
  "https://play.dhis2.org/demo/api/messageConversations/ZjHHSjyyeJ2"
  -H "Content-Type:text/plain" -u mobile:district -X POST
```

如果一切按计划进行，您将收到 _200 OK_ 状态代码。

在2.30中，我们添加了URL搜索参数：

    queryString =？＆queryOperator =？

过滤器搜索消息对话的主题、文本和发件人中的匹配项。默认查询运算符是 _token_，但是可以在查询中定义其他运算符。

### 管理讯息 { #webapi_managing_messages }

随着用户接收和发送消息，对话将开始堆积
在他们的收件箱中，最终变得难以跟踪。我们现在将
看看通过删除和标记来管理用户的消息收件箱
通过 Web-API 进行对话。我们将通过执行一些
在“DHIS 管理员”用户的收件箱中维护。

首先，让我们看看从收件箱中删除一些邮件。是
一定要注意这里描述的所有删除操作只删除
用户和消息对话之间的关系。实际上
这意味着我们不会删除消息本身（或任何
内容），但只是从
用户使其不再列在
`/api/messageConversations` 资源。

要从用户收件箱中删除消息对话，我们需要向由消息对话的 id 和参与用户标识的资源发出 _DELETE_ 请求。例如，要从 ID 为`jMe43trzrdi`的对话中删除 ID 为`xE7jOejl9FI`的用户：

```bash
curl "https://play.dhis2.org/demo/api/33/messageConversations/jMe43trzrdi
```

如果请求成功，服务器将回复_200 OK_。响应正文包含一个 XML 或 JSON 对象（根据请求的接受标头），其中包含已删除用户的 ID。

```json
{
    "removed": ["xE7jOejl9FI"]
}
```

失败时，返回的对象将包含一个消息有效负载
描述错误。

```json
{
    "message": "No user with uid: dMV6G0tPAEa"
}
```

细心的读者可能已经注意到，在我们的示例中成功返回的对象实际上是一个 id 列表（包含单个条目）。这是因为端点也支持批量删除。该请求是向相同的 _messageConversations_ 资源发出的，但遵循的语义略有不同。对于批处理操作，会话 ID 作为查询字符串参数给出。以下示例删除当前用户的两个单独的消息对话：

```bash
curl "https://play.dhis2.org/demo/api/messageConversations?mc=WzMRrCosqc0&mc=lxCjiigqrJm"
  -X DELETE -u admin:district
```

如果您有足够的权限，可以删除对话
通过提供可选的用户 ID 参数代表另一个用户。

```bash
curl "https://play.dhis2.org/demo/api/messageConversations?mc=WzMRrCosqc0&mc=lxCjiigqrJm&user=PhzytPW3g2J"
  -X DELETE -u admin:district
```

如上所述，批量删除将返回与
单一操作。删除的对象列表将反映成功
执行的移除。部分错误的请求（即不存在的 ID）
因此不会取消整个批处理操作。

消息带有布尔_read_属性。这允许跟踪用户是否已看到（打开）消息。在典型的应用场景（例如 DHIS2 门户网站）中，用户第一次打开消息时，该消息将被标记为已读。但是，用户可能希望管理其消息的已读或未读状态，以便跟踪某些对话。

标记消息已读或未读与批量删除的语义相似，也支持批量操作。要将消息标记为已读，我们会向 `messageConversations/read` 资源发出一个 _POST_，请求体包含一个或多个消息 ID。要将消息标记为未读，我们会向 `messageConversations/unread` 资源发出一个相同的请求。与删除一样，也可以给出一个可选的 _user_ 请求参数。

让我们将几条消息标记为当前用户已读：

```bash
curl "https://play.dhis2.org/dev/api/messageConversations/read"
  -d '["ZrKML5WiyFm","Gc03smoTm6q"]' -X POST
  -H "Content-Type: application/json" -u admin:district
```

响应是 _200 OK_，具有以下 JSON 正文：

```json
{
    "markedRead": ["ZrKML5WiyFm", "Gc03smoTm6q"]
}
```

您可以将收件人添加到现有的消息对话中。该资源位于：

    / api / 33 / messageConversations / id /收件人

此资源的选项是用户、用户组和
组织单位。请求应如下所示：

```json
{
    "users": [
        {
            "id": "OYLGMiazHtW"
        },
        {
            "id": "N3PZBUlN8vq"
        }
    ],
    "userGroups": [
        {
            "id": "DiszpKrYNg8"
        }
    ],
    "organisationUnits": [
        {
            "id": "DiszpKrYNg8"
        }
    ]
}
```

### 邮件附件 { #webapi_message_attachments }

创建带附件的消息分为两步：将文件上传到 _attachments_ 资源，然后在创建新消息时包含一个或多个附件 ID。

对 _attachments_ 资源的 POST 请求会将文件上传到服务器。

```
curl -F file=@attachment.png“ https://play.dhis2.org/demo/api/messageConversations/attachments”
  -u管理员：区
```

该请求返回一个表示附件的对象。的标识
创建消息时必须使用此对象以链接
邮件附件。

```json
{
    "created": "2018-07-20T16:54:18.210",
    "lastUpdated": "2018-07-20T16:54:18.212",
    "externalAccess": false,
    "publicAccess": "--------",
    "user": {
        "name": "John Traore",
        "created": "2013-04-18T17:15:08.407",
        "lastUpdated": "2018-03-09T23:06:54.512",
        "externalAccess": false,
        "displayName": "John Traore",
        "favorite": false,
        "id": "xE7jOejl9FI"
    },
    "lastUpdatedBy": {
        "id": "xE7jOejl9FI",
        "name": "John Traore"
    },
    "favorite": false,
    "id": "fTpI4GOmujz"
}
```

创建新消息时，可以在请求正文中传递 id
将上传的文件链接到正在创建的消息。

```json
{
    "subject": "Hey",
    "text": "How are you?",
    "users": [
        {
            "id": "OYLGMiazHtW"
        },
        {
            "id": "N3PZBUlN8vq"
        }
    ],
    "userGroups": [
        {
            "id": "ZoHNWQajIoe"
        }
    ],
    "organisationUnits": [
        {
            "id": "DiszpKrYNg8"
        }
    ],
    "attachments": ["fTpI4GOmujz", "h2ZsOxMFMfq"]
}
```

回复消息时，可以将 id 作为请求传递
范围。

```bash
curl -d "Yes the Mortality data set has been reported"
  "https://play.dhis2.org/demo/api/33/messageConversations/ZjHHSjyyeJ2?attachments=fTpI4GOmujz,h2ZsOxMFMfq"
  -H "Content-Type:text/plain" -u mobile:district -X POST
```

创建带有附件的邮件后，附加文件
可以通过对以下 URL 的 GET 请求访问：

    / api / messageConversations / <mcv-id> / <msg-id> / attachments / <attachment-id>

其中 <mcv-id> 是 _message Conversation_ ID，<msg-id> 是包含附件的 _message_ ID，<attachment-id> 是特定_消息附件_的 ID。

### 票证和验证结果通知 { #webapi_messaging_tickets }

您可以使用“写反馈”工具来创建工单和消息。
一张票和一条消息的唯一区别是你可以给
票证的状态和优先级。设置状态：

    POST / api / messageConversations / <uid> / status

设置优先级：

    POST / api / messageConversations / <uid> / priority

在 2.29 中，验证分析生成的消息现在也用于
状态和优先级属性。默认情况下，消息由
验证分析将继承验证规则的优先级
问题，或者如果消息包含多个最重要的
规则。

在 2.30 中，可以将验证规则分配给任何用户，同时工单
仍然需要分配给系统反馈接收者中的一个用户
团体。

 <table>
 <caption> 有效状态和优先级值的列表 </caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 状态 </th>
 <th> 优先级 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 打开 </td>
 <td> 低 </td>
 </tr>
 <tr class="even">
 <td> 待定 </td>
 <td> 中等 </td>
 </tr>
 <tr class="odd">
 <td> 无效 </td>
 <td> 高 </td>
 </tr>
 <tr class="even">
 <td> 已解决 </td>
 <td> </td>
 </tr>
 </tbody>
 </table>

也可以给工单添加内部消息，只能看到
拥有“管理票证”权限的用户。创建一个内部
回复，包括“内部”参数，并将其设置为

```bash
curl -d "This is an internal message"
  "https://play.dhis2.org/demo/api/33/messageConversations/ZjHHSjyyeJ2?internal=true"
  -H "Content-Type:text/plain" -u admin:district -X POST
```

## 释义 { #webapi_interpretations }

对于DHIS2中数据分析相关的资源，例如数据透视表，
图表、地图、事件报告和事件图表，您可以编写和分享
数据解释。解释可以是评论、问题、
关于数据报告或可视化的观察或解释。

    / api /解释

### 阅读口译 { #webapi_reading_interpretations }

为了阅读解释，我们将与
`/api/interpretations` 资源。使用字段的典型 GET 请求
过滤可以是这样的：

    GET /api/interpretations?fields=*,comments[id,text,user,mentions]

JSON 响应格式的输出可能如下所示（附加
为简洁起见省略了字段）：

```json
{
    "interpretations": [
        {
            "id": "XSHiFlHAhhh",
            "created": "2013-05-30T10:24:06.181+0000",
            "text": "Data looks suspicious, could be a data entry mistake.",
            "type": "REPORT_TABLE",
            "likes": 2,
            "user": {
                "id": "uk7diLujYif"
            },
            "reportTable": {
                "id": "LcSxnfeBxyi"
            },
            "visualization": {
                "id": "LcSxnfeBxyi"
            }
        },
        {
            "id": "kr4AnZmYL43",
            "created": "2013-05-29T14:47:13.081+0000",
            "text": "Delivery rates in Bo looks high.",
            "type": "CHART",
            "likes": 3,
            "user": {
                "id": "uk7diLujYif"
            },
            "chart": {
                "id": "HDEDqV3yv3H"
            },
            "visualization": {
                "id": "HDEDqV3yv3H"
            },
            "mentions": [
                {
                    "created": "2018-06-25T10:25:54.498",
                    "username": "boateng"
                }
            ],
            "comments": [
                {
                    "id": "iB4Etq8yTE6",
                    "text": "This report indicates a surge.",
                    "user": {
                        "id": "B4XIfwOcGyI"
                    }
                },
                {
                    "id": "iB4Etq8yTE6",
                    "text": "Likely caused by heavy rainfall.",
                    "user": {
                        "id": "B4XIfwOcGyI"
                    }
                },
                {
                    "id": "SIjkdENan8p",
                    "text": "Have a look at this @boateng.",
                    "user": {
                        "id": "xE7jOejl9FI"
                    },
                    "mentions": [
                        {
                            "created": "2018-06-25T10:03:52.316",
                            "username": "boateng"
                        }
                    ]
                }
            ]
        }
    ]
}
```

 <table>
 <caption>解释字段</caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 75%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>字段</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> id </td>
 <td>解释标识符。 </td>
 </tr>
 <tr class="even">
 <td>创建了</td>
 <td>创建解释的时间。 </td>
 </tr>
 <tr class="odd">
 <td>类型</td>
 <td>解释的分析对象的类型。有效选项：REPORT_TABLE，CHART，MAP，EVENT_REPORT，EVENT_CHART，DATASET_REPORT。
 </tr>
 <tr class="even">
 <td>用户</td>
 <td>与创建解释的用户的关联。 </td>
 </tr>
 <tr class="odd">
 <td>报告表</td>
 <td>如果类型为REPORT_TABLE，则与报表表关联。 </td>
 </tr>
 <tr class="even">
 <td>图表</td>
 <td>如果类型为CHART，则与图表关联。 </td>
 </tr>
 <tr class="odd">
 <td>可视化</td>
 <td>如果类型为CHART或REPORT_TABLE，则与可视化相关联（**这两种类型均处于弃用过程中，而有利于VISUALIZATION **）。 </td>
 </tr>
 <tr class="even">
 <td>地图</td>
 <td>如果类型为MAP，则与地图关联。 </td>
 </tr>
 <tr class="odd">
 <td>事件报告</td>
 <td>与事件报告的关联类型为EVENT_REPORT。 </td>
 </tr>
 <tr class="even">
 <td>事件图表</td>
 <td>如果类型为EVENT_CHART，则与事件图表关联。 </td>
 </tr>
 <tr class="odd">
 <td>数据集</td>
 <td>如果类型为DATASET_REPORT，则与数据集关联。 </td>
 </tr>
 <tr class="even">
 <td>评论</td>
 <td>解释的注释数组。文本字段包含实际注释。 </td>
 </tr>
 <tr class="odd">
 <td>提到</td>
 <td>提及的解释数组。用户标识符列表。 </td>
 </tr>
 </tbody>
 </table>

对于所有分析对象，您可以将 _/data_ 附加到 URL 以检索与资源关联的数据（而不是元数据）。例如，通过点击地图链接并附加 /data，可以通过以下 URL 检索专题地图的 PNG（图像）表示形式：

    https://play.dhis2.org/demo/api/maps/bhmHJ4ZCdCd/data

对于所有分析对象，您可以按_提及_进行过滤。要检索提到用户的所有解释/评论，您有三个选项。您可以按解释提及（解释描述中的提及）进行过滤：

    GET /api/interpretations?fields=*,comments[*]&filter=mentions.username:in:[boateng]

您可以通过解释评论提及（在任何
评论）：

    GET / api / interpretations？fields = *，评论[*]
      ＆filter = comments.mentions.username：in：[boateng]

您可以按包含提及的解释进行过滤
在解释或任何评论中（或结点）：

    GET /api/interpretations?fields=*,comments[*]&filter=mentions:in:[boateng]

### 写作解释 { #webapi_writing_interpretations }

在编写解释时，您将提供解释文本作为
使用内容类型为“text/plain”的 POST 请求的请求正文。
URL 模式如下所示，其中 {object-type} 指的是
被解释的对象的类型，{object-id} 指的是
被解释对象的标识符。

    / api / interpretations / {object-type} / {object-id}

对象类型的有效选项包括 _reportTable_、_chart_、_map_、_eventReport_、_eventChart_ 和 _dataSetReport_。

下面列出了一些有效的解释示例。

> **注意**
>
> 不推荐使用 `charts` 和 `reportTables` API。我们建议改用`visualizations` API。

    / api / interpretations / reportTable / yC86zJxU1i1
    / api / interpretations / chart / ZMuYVhtIceD
    / api /解释/可视化/ hQxZGXqnLS9
    / api / interpretations / map / FwLHSMCejFu
    / api / interpretations / eventReport / xJmPLGP3Cde
    / api / interpretations / eventChart / nEzXB2M9YBz
    / api / interpretations / dataSetReport / tL7eCjmDIgM

例如，我们将首先为标识符为 _EbRN2VIbPdV_ 的图表编写解释。要编写图表解释，我们将与 `/api/interpretations/chart/{chartId}` 资源交互。解释将是请求正文。在此基础上，我们可以使用 cURL 创建以下请求：

```bash
curl -d "This chart shows a significant ANC 1-3 dropout" -X POST
  "https://play.dhis2.org/demo/api/interpretations/chart/EbRN2VIbPdV"
  -H "Content-Type:text/plain" -u admin:district
```

请注意，响应提供了一个带有值的 Location 标头
指示创建的解释的位置。这很有用
从客户的角度来看，当您想向
解释。

### 更新和删除解释 { #webapi_updating_removing_interpretations }

要更新现有解释，您可以使用 PUT 请求，其中
解释文本是使用以下 URL 模式的请求正文，
其中 {id} 指的是解释标识符：

    / api / interpretations / {id}

基于此，我们可以使用curl来更新解释：

```bash
curl -d "This charts shows a high dropout" -X PUT
  "https://play.dhis2.org/demo/api/interpretations/chart/EV08iI1cJRA"
  -H "Content-Type:text/plain" -u admin:district
```

您可以使用与上面相同的 URL 模式使用 DELETE 请求来
删除解释。

### 创建解释注释 { #webapi_creating_interpretation_comments }

在为解释撰写评论时，您将提供评论
text 作为使用内容类型的 POST 请求的请求正文
“文本/纯文本”。 URL 模式如下所示，其中
{interpretation-id} 指的是解释标识符。

    / api / interpretations / {interpretation-id} /评论

其次，我们将为我们在上面的示例中编写的解释写一个注释。通过查看解释响应，您将看到返回了 _Location_ 标头。该标头告诉我们新创建的解释的 URL，从中我们可以读取其标识符。该标识符是随机生成的，因此您必须将下面命令中的标识符替换为您自己的标识符。要编写评论，我们可以与 `/api/interpretations/{id}/comments` 资源进行交互，如下所示：

```bash
curl -d "An intervention is needed" -X POST
  "https://play.dhis2.org/demo/api/interpretations/j8sjHLkK8uY/comments"
  -H "Content-Type:text/plain" -u admin:district
```

### 更新和删除解释注释 { #webapi_updating_removing_interpretation_comments }

要更新解释注释，您可以使用 PUT 请求，其中
评论文本是使用以下 URL 模式的请求正文：

    / api / interpretations / {interpretation-id} / comments / {comment-id}

基于此，我们可以使用curl来更新注释：

```bash
curl "https://play.dhis2.org/demo/api/interpretations/j8sjHLkK8uY/comments/idAzzhVWvh2"
  -d "I agree with that." -X PUT -H "Content-Type:text/plain" -u admin:district
```

您可以使用与上面相同的 URL 模式，使用 DELETE 请求到
删除解释注释。

### 喜欢的解释 { #webapi_liking_interpretations }

要喜欢某个解释，您可以对 _like_ 资源使用空 POST 请求：

    POST / api / interpretations / {id} / like

将为当前经过身份验证的用户添加一个赞。一个用户可以
只喜欢解释一次。

要删除解释的赞，您可以使用 DELETE 请求
与类似操作相同的资源。

可以通过查看解释的类似状态来查看
常规 Web API 表示：

    GET /api/interpretations/{id}

点赞信息可在 _likes_ 字段（表示点赞数）和 _likedBy_ 数组中找到，该数组枚举点赞该解释的用户。

```json
{
    "id": "XSHiFlHAhhh",
    "text": "Data looks suspicious, could be a data entry mistake.",
    "type": "REPORT_TABLE",
    "likes": 2,
    "likedBy": [
        {
            "id": "k7Hg12fJ2f1"
        },
        {
            "id": "gYhf26fFkjFS"
        }
    ]
}
```

## 查看分析性资源表示 { #webapi_viewing_analytical_resource_representations }

DHIS2 有多种数据分析资源。这些资源包括_图表_、_地图_、_报告表_、_报告_和_文件_。通过访问这些资源，您可以获取有关资源的信息。例如，通过导航到 `/api/charts/R0DVGvXDUNP`，响应将包含图表的名称、最后修改日期等信息。要检索分析表示法，例如图表的 PNG 表示法，可以在所有这些资源中添加 _/data_。例如，访问 `/api/charts/R0DVGvXDUNP/data`，系统将返回图表的 PNG 图像。

 <table>
 <caption> 分析资源 </caption>
 <colgroup>
 <col style="width: 17%" />
 <col style="width: 17%" />
 <col style="width: 32%" />
 <col style="width: 32%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 资源 </th>
 <th> 说明 </th>
 <th> 数据 URL </th>
 <th> 资源表示 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 图表 </td>
 <td> 图表 </td>
 <td> /api/charts/&lt;identifier&gt;/data </td>
 <td> png </td>
 </tr>
 <tr class="even">
 <td> eventCharts </td>
 <td> 事件图表 </td>
 <td> /api/eventCharts/&lt;identifier&gt;/data </td>
 <td> png </td>
 </tr>
 <tr class="odd">
 <td> 映射 </td>
 <td> 地图 </td>
 <td> /api/maps/&lt;identifier&gt;/data </td>
 <td> png </td>
 </tr>
 <tr class="even">
 <td> 报告表 </td>
 <td> 数据透视表 </td>
 <td> /api/reportTables/&lt;identifier&gt;/data </td>
 <td> json | jsonp | html | xml | pdf | xls | csv </td>
 </tr>
 <tr class="odd">
 <td> 报告 </td>
 <td> 标准报告 </td>
 <td> /api/reports/&lt;identifier&gt;/data </td>
 <td> pdf | xls | html </td>
 </tr>
 <tr class="even">
 <td> 文档 </td>
 <td> 资源 </td>
 <td> /api/documents/&lt;identifier&gt;/data </td>
 <td> &lt;follows document&gt; </td>
 </tr>
 </tbody>
 </table>

可以通过提供_date_查询参数来修改分析表示的数据内容。这要求为周期维度的相对周期设置分析资源。

 <table>
 <caption>数据查询参数</caption>
 <colgroup>
 <col style="width: 21%" />
 <col style="width: 28%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>值</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>日期</td>
 <td> yyyy-MM-dd格式的日期</td>
 <td>报告中相对期间的依据（需要相对期间）</td>
 </tr>
 </tbody>
 </table>

 <table>
 <caption> png /图像类型（图表，地图）的查询参数</caption>
 <colgroup>
 <col style="width: 21%" />
 <col style="width: 78%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>宽度</td>
 <td>图像的宽度（以像素为单位）</td>
 </tr>
 <tr class="even">
 <td>高度</td>
 <td>以像素为单位的图像高度</td>
 </tr>
 </tbody>
 </table>

用于检索各种分析的有效 URL 的一些示例
代表如下。

    / api / charts / R0DVGvXDUNP / data
    / api / charts / R0DVGvXDUNP / data？date = 2013-06-01

    /api/reportTables/jIISuEWxmoI/data.html
    /api/reportTables/jIISuEWxmoI/data.html?date=2013-01-01
    /api/reportTables/FPmvWs7bn2P/data.xls
    /api/reportTables/FPmvWs7bn2P/data.pdf

    / api / maps / DHE98Gsynpr / data
    / api / maps / DHE98Gsynpr / data？date = 2013-07-01

    /api/reports/OeJsA6K1Otx/data.pdf
    /api/reports/OeJsA6K1Otx/data.pdf?date=2014-01-01

## 外挂程式 { #webapi_plugins }

DHIS2 带有插件，使您能够将实时数据直接嵌入到
您的门户网站或网站。目前，存在图表、地图插件
和数据透视表。

请注意，本节中的所有代码示例均适用于
仅用于演示目的。它们不应该按原样使用
生产系统。为简单起见，凭据
(admin/district) 已嵌入到脚本中。在真实场景中，
您永远不应该在 javascript 中公开凭据，因为它会打开一个
应用程序的漏洞。此外，您将创建一个用户
使用更多的最小权限而不是使用超级用户
为您的门户获取资源。

可以通过使用反向来解决公开凭据
nginx 或 apache2 等代理。代理可以配置为注入
仅您希望的端点所需的授权标头
公开。有一些文档可以帮助您入门
实施者手册中描述 [反向
代理](https://docs.dhis2.org/master/en/implementer/html/install_reverse_proxy_configuration.html#install_making_resources_available_with_nginx)
配置。

### 使用数据透视表插件嵌入数据透视表 { #webapi_pivot_table_plugin }

在这个例子中，我们将看到如何嵌入好看的、轻量级的
带有从 DHIS2 后端提供到 Web 的数据的 html 数据透视表
页。为此，我们将使用数据透视表插件。这
插件是用 Javascript 编写的，仅依赖于 jQuery 库。
可以在以下位置找到完整的工作示例
 <http://play.dhis2.org/portal/table.html> 。在网络中打开页面
浏览器并查看源代码以了解它是如何设置的。

我们首先看看完整的 html 文件会是什么样子
喜欢。此设置在我们的网页中放置了两个表。第一个是
引用现有表。第二个是内联配置的。

``html
<!DOCTYPE html>
<html>
    <head>
        <script src="https://dhis2-cdn.org/v227/plugin/jquery-2.2.4.min.js"></script>
        <script src="https://dhis2-cdn.org/v227/plugin/reporttable.js"></script>

        <script>
            reportTablePlugin.url = "https://play.dhis2.org/demo";
            reportTablePlugin.username = "admin";
            reportTablePlugin.password = "地区";
            reportTablePlugin.loadingIndicator = true;

            // 通过id参数引用已有的表，渲染到“report1”div

            var r1 = { el: "report1", id: "R0DVGvXDUNP" };

            // 表配置，渲染到“report2”div

            变量 r2 = {
                el: "报告2",
                列： [
                    {
                        尺寸：“dx”，
                        项目：[{ id: "YtbsuPPo010" }, { id: "l6byfWFUGaP" }],
                    },
                ],
                行：[{维度：“pe”，项目：[{id：“LAST_12_MONTHS”}]}]，
                过滤器：[{维度：“ou”，项目：[{id：“USER_ORGUNIT”}]}]，

                // 以下所有属性都是可选的
                title: "我的自定义标题",
                showColTotals：假，
                显示行总计：假，
                showColSubTotals：假，
                showRowSubTotals：假，
                显示维度标签：假，
                隐藏空行：true，
                跳过舍入：真，
                聚合类型：“平均”，
                显示层次结构：正确，
                仅完成：真实，
                显示密度：“舒适”，
                字体大小：“小”，
                数字组分隔符：“逗号”，
                legendSet: { id: "fqs276KXCXi" },
            };

            reportTablePlugin.load([r1, r2]);
        </script>
    </head>

    <body>
        <div id="report1"></div>
        <div id="report2"></div>
    </body>
</html>
````

HTML 文档的标题部分包含两个文件。这
第一个文件是 jQuery JavaScript 库（我们使用 DHIS2 内容
在这种情况下，交付网络）。第二个文件是数据透视表
插入。确保路径指向您的 DHIS2 服务器
安装。

现在让我们看看数据透视表的各种选项。需要一个属性：_el_（请参阅下表）。现在，如果您想引用 DHIS2 内已创建的预定义表，提供附加 _id_ 参数就足够了。如果您想动态配置数据透视表，则应省略 id 参数并在 _columns_ 数组、_rows_ 数组和可选的 _filters_ 数组内提供数据维度。

数据维度定义为具有名为 _dimension_ 的文本属性的对象。该属性接受以下值：_dx_（指示符、数据元素、数据元素操作数、数据集、事件数据项和程序指示符）、_pe_（周期）、_ou_（组织单位）或任何组织单位组集或数据的 ID元素组集（可以在 Web api 中找到）。数据维度还有一个名为 _items_ 的数组属性，它接受具有 _id_ 属性的对象。

总而言之，如果您想拥有例如表中列的“ANC 1 Coverage”、“ANC 2 Coverage”和“ANC 3 Coverage”您可以进行以下_columns_配置：

```json
columns: [{
  dimension: "dx",
  items: [
    {id: "Uvn6LCg7dVU"}, // the id of ANC 1 Coverage
    {id: "OdiHJayrsKo"}, // the id of ANC 2 Coverage
    {id: "sB79w2hiLp8"}  // the id of ANC 3 Coverage
  ]
}]
```

 <table>
 <caption> 数据透视表插件配置 </caption>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> </th>型
 <th> 需要 </th>
 <th> 选项（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 网址 </td>
 <td> 字符串 </td>
 <td> 是 </td>
 <td> </td>
 <td> DHIS2 服务器的基本 URL </td>
 </tr>
 <tr class="even">
 <td> 用户名 </td>
 <td> 字符串 </td>
 <td> 是（如果跨域） </td>
 <td> </td>
 <td> 如果服务器在不同的域上运行，则用于身份验证 </td>
 </tr>
 <tr class="odd">
 <td> 密码 </td>
 <td> 字符串 </td>
 <td> 是（如果跨域） </td>
 <td> </td>
 <td> 如果服务器在不同的域上运行，则用于身份验证 </td>
 </tr>
 <tr class="even">
 <td> loadingIndicator </td>
 <td> 布尔值 </td>
 <td> 否 </td>
 <td> </td>
 <td> 是否在表格出现前显示加载指示器 </td>
 </tr>
 </tbody>
 </table>

<table>
<caption>Pivot table configuration</caption>
<thead>
<tr class="header">
<th>Param</th>
<th>Type</th>
<th>Required</th>
<th>Options (default first)</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>el</td>
<td>string</td>
<td>Yes</td>
<td></td>
<td>Identifier of the HTML element to render the table in your web page</td>
</tr>
<tr class="even">
<td>id</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Identifier of a pre-defined table (favorite) in DHIS2</td>
</tr>
<tr class="odd">
<td>columns</td>
<td>array</td>
<td>Yes (if no id provided)</td>
<td></td>
<td>Data dimensions to include in table as columns</td>
</tr>
<tr class="even">
<td>rows</td>
<td>array</td>
<td>Yes (if no id provided)</td>
<td></td>
<td>Data dimensions to include in table as rows</td>
</tr>
<tr class="odd">
<td>filter</td>
<td>array</td>
<td>No</td>
<td></td>
<td>Data dimensions to include in table as filters</td>
</tr>
<tr class="even">
<td>title</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Show a custom title above the table</td>
</tr>
<tr class="odd">
<td>showColTotals</td>
<td>boolean</td>
<td>No</td>
<td>true | false</td>
<td>Whether to display totals for columns</td>
</tr>
<tr class="even">
<td>showRowTotals</td>
<td>boolean</td>
<td>No</td>
<td>true | false</td>
<td>Whether to display totals for rows</td>
</tr>
<tr class="odd">
<td>showColSubTotals</td>
<td>boolean</td>
<td>No</td>
<td>true | false</td>
<td>Whether to display sub-totals for columns</td>
</tr>
<tr class="even">
<td>showRowSubTotals</td>
<td>boolean</td>
<td>No</td>
<td>true | false</td>
<td>Whether to display sub-totals for rows</td>
</tr>
<tr class="odd">
<td>showDimensionLabels</td>
<td>boolean</td>
<td>No</td>
<td>true | false</td>
<td>Whether to display the name of the dimension top-left in the table</td>
</tr>
<tr class="even">
<td>hideEmptyRows</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to hide rows with no data</td>
</tr>
<tr class="odd">
<td>skipRounding</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to skip rounding of data values</td>
</tr>
<tr class="even">
<td>completedOnly</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to only show completed events</td>
</tr>
<tr class="odd">
<td>showHierarchy</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to extend orgunit names with the name of all anchestors</td>
</tr>
<tr class="even">
<td>aggregationType</td>
<td>string</td>
<td>No</td>
<td>&quot;SUM&quot; |&quot;AVERAGE&quot; | &quot;AVERAGE_SUM_ORG_UNIT&quot;|&quot;LAST&quot;|&quot;LAST_AVERAGE_ORG_UNIT&quot;| &quot;COUNT&quot; | &quot;STDDEV&quot; | &quot;VARIANCE&quot; | &quot;MIN&quot; | &quot;MAX&quot;</td>
<td>Override the data element's default aggregation type</td>
</tr>
<tr class="odd">
<td>displayDensity</td>
<td>string</td>
<td>No</td>
<td>&quot;NORMAL&quot; | &quot;COMFORTABLE&quot; | &quot;COMPACT&quot;</td>
<td>The amount of space inside table cells</td>
</tr>
<tr class="even">
<td>fontSize</td>
<td>string</td>
<td>No</td>
<td>&quot;NORMAL&quot; | &quot;LARGE&quot; | &quot;SMALL&quot;</td>
<td>Table font size</td>
</tr>
<tr class="odd">
<td>digitGroupSeparator</td>
<td>string</td>
<td>No</td>
<td>&quot;SPACE&quot; | &quot;COMMA&quot; | &quot;NONE&quot;</td>
<td>How values are formatted: 1 000 | 1,000 | 1000</td>
</tr>
<tr class="even">
<td>legendSet</td>
<td>object</td>
<td>No</td>
<td></td>
<td>Color the values in the table according to the legend set</td>
</tr>
<tr class="odd">
<td>userOrgUnit</td>
<td>string / array</td>
<td>No</td>
<td></td>
<td>Organisation unit identifiers, overrides organisation units associated with curretn user, single or array</td>
</tr>
<tr class="even">
<td>relativePeriodDate</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Date identifier e.g: &quot;2016-01-01&quot;. Overrides the start date of the relative period</td>
</tr>
</tbody>
</table>

### 使用Visualizer图表插件嵌入图表 { #webapi_chart_plugin }

在这个例子中，我们将看到如何嵌入好看的 Highcharts
图表 (<http://www.highcharts.com>) 数据来自 DHIS2
后端变成网页。为此，我们将使用 DHIS2
可视化插件。该插件是用 JavaScript 编写的，依赖于
jQuery 库。可以在以下位置找到完整的工作示例
 <http://play.dhis2.org/portal/chart.html> 。在网络中打开页面
浏览器并查看源代码以了解它是如何设置的。

我们首先看看完整的 html 文件会是什么样子
喜欢。此设置在我们的网页上放置了两个图表。第一个是
参考现有图表。第二个是内联配置的。

``html
<!DOCTYPE html>
<html>
    <head>
        <script src="https://dhis2-cdn.org/v227/plugin/jquery-2.2.4.min.js"></script>
        <script src="https://dhis2-cdn.org/v227/plugin/chart.js"></script>

        <script>
            ChartPlugin.url = "https://play.dhis2.org/demo";
            ChartPlugin.用户名 = "管理员";
            ChartPlugin.password = "地区";
            ChartPlugin.loadingIndicator = true;

            // 通过id参数引用现有图表，渲染到“report1”div

            var r1 = { el: "report1", id: "R0DVGvXDUNP" };

            // 图表配置，渲染到“report2”div

            变量 r2 = {
                el: "报告2",
                列： [
                    {
                        尺寸：“dx”，
                        项目：[{ id: "YtbsuPPo010" }, { id: "l6byfWFUGaP" }],
                    },
                ],
                行：[{维度：“pe”，项目：[{id：“LAST_12_MONTHS”}]}]，
                过滤器：[{维度：“ou”，项目：[{id：“USER_ORGUNIT”}]}]，

                // 以下所有属性都是可选的
                title: "自定义标题",
                类型：“线”，
                显示值：假，
                隐藏空行：true，
                回归类型：“线性”，
                仅完成：真实，
                目标线值：100，
                targetLineTitle: "我的目标行标题",
                基线值：20，
                baseLineTitle: "我的基线标题",
                聚合类型：“平均”，
                范围轴最大值：100，
                范围轴最小值：20，
                范围轴步数：5，
                范围轴小数：2，
                rangeAxisTitle: "我的范围轴标题",
                domainAxisTitle: "我的域轴标题",
                隐藏图例：真实，
            };

            // 渲染图表

            ChartPlugin.load(r1, r2);
        </script>
    </head>

    <body>
        <div id="report1"></div>
        <div id="report2"></div>
    </body>
</html>
````

HTML 文档的标题部分包含两个文件。这
第一个文件是 jQuery JavaScript 库（我们使用 DHIS2 内容
在这种情况下，交付网络）。第二个文件是 Visualizer 图表
插入。确保路径指向您的 DHIS2 服务器
安装。

现在让我们看看图表的各种选项。需要一个属性：_el_（请参阅下表）。现在，如果您想引用 DHIS2 内已制作的预定义图表，提供额外的 _id_ 参数就足够了。如果您想动态配置图表，则应省略 id 参数并在 _columns_ 数组、_rows_ 数组和可选的 _filters_ 数组内提供数据维度。

数据维度定义为具有名为 _dimension_ 的文本属性的对象。该属性接受以下值：_dx_（指示符、数据元素、数据元素操作数、数据集、事件数据项和程序指示符）、_pe_（周期）、_ou_（组织单位）或任何组织单位组集或数据的 ID元素组集（可以在 Web api 中找到）。数据维度还有一个名为 _items_ 的数组属性，它接受具有 _id_ 属性的对象。

总而言之，如果您想拥有例如图表中列上的“ANC 1 Coverage”、“ANC 2 Coverage”和“ANC 3 Coverage”您可以进行以下_columns_配置：

```json
columns: [{
  dimension: "dx",
  items: [
    {id: "Uvn6LCg7dVU"}, // the id of ANC 1 Coverage
    {id: "OdiHJayrsKo"}, // the id of ANC 2 Coverage
    {id: "sB79w2hiLp8"}  // the id of ANC 3 Coverage
  ]
}]
```

 <table>
 <caption> 图表插件配置 </caption>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> </th>型
 <th> 需要 </th>
 <th> 选项（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 网址 </td>
 <td> 字符串 </td>
 <td> 是 </td>
 <td> </td>
 <td> DHIS2 服务器的基本 URL </td>
 </tr>
 <tr class="even">
 <td> 用户名 </td>
 <td> 字符串 </td>
 <td> 是（如果跨域） </td>
 <td> </td>
 <td> 如果服务器在不同的域上运行，则用于身份验证 </td>
 </tr>
 <tr class="odd">
 <td> 密码 </td>
 <td> 字符串 </td>
 <td> 是（如果跨域） </td>
 <td> </td>
 <td> 如果服务器在不同的域上运行，则用于身份验证 </td>
 </tr>
 <tr class="even">
 <td> loadingIndicator </td>
 <td> 布尔值 </td>
 <td> 否 </td>
 <td> </td>
 <td> 是否在图表出现前显示加载指标 </td>
 </tr>
 </tbody>
 </table>

<table>
<caption>Chart configuration</caption>
<thead>
<tr class="header">
<th>Param</th>
<th>Type</th>
<th>Required</th>
<th>Options (default first)</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>el</td>
<td>string</td>
<td>Yes</td>
<td></td>
<td>Identifier of the HTML element to render the chart in your web page</td>
</tr>
<tr class="even">
<td>id</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Identifier of a pre-defined chart (favorite) in DHIS</td>
</tr>
<tr class="odd">
<td>type</td>
<td>string</td>
<td>No</td>
<td>column | stackedcolumn | bar | stackedbar | line | area | pie | radar | gauge</td>
<td>Chart type</td>
</tr>
<tr class="even">
<td>columns</td>
<td>array</td>
<td>Yes (if no id provided)</td>
<td></td>
<td>Data dimensions to include in chart as series</td>
</tr>
<tr class="odd">
<td>rows</td>
<td>array</td>
<td>Yes (if no id provided)</td>
<td></td>
<td>Data dimensions to include in chart as category</td>
</tr>
<tr class="even">
<td>filter</td>
<td>array</td>
<td>No</td>
<td></td>
<td>Data dimensions to include in chart as filters</td>
</tr>
<tr class="odd">
<td>title</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Show a custom title above the chart</td>
</tr>
<tr class="even">
<td>showValues</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to display data values on the chart</td>
</tr>
<tr class="odd">
<td>hideEmptyRows</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to hide empty categories</td>
</tr>
<tr class="even">
<td>completedOnly</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to only show completed events</td>
</tr>
<tr class="odd">
<td>regressionType</td>
<td>string</td>
<td>No</td>
<td>&quot;NONE&quot; | &quot;LINEAR&quot;</td>
<td>Show trend lines</td>
</tr>
<tr class="even">
<td>targetLineValue</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Display a target line with this value</td>
</tr>
<tr class="odd">
<td>targetLineTitle</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Display a title on the target line (does not apply without a target line value)</td>
</tr>
<tr class="even">
<td>baseLineValue</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Display a base line with this value</td>
</tr>
<tr class="odd">
<td>baseLineTitle</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Display a title on the base line (does not apply without a base line value)</td>
</tr>
<tr class="even">
<td>rangeAxisTitle</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Title to be displayed along the range axis</td>
</tr>
<tr class="odd">
<td>rangeAxisMaxValue</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Max value for the range axis to display</td>
</tr>
<tr class="even">
<td>rangeAxisMinValue</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Min value for the range axis to display</td>
</tr>
<tr class="odd">
<td>rangeAxisSteps</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Number of steps for the range axis to display</td>
</tr>
<tr class="even">
<td>rangeAxisDecimals</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Bumber of decimals for the range axis to display</td>
</tr>
<tr class="odd">
<td>domainAxisTitle</td>
<td>number</td>
<td>No</td>
<td></td>
<td>Title to be displayed along the domain axis</td>
</tr>
<tr class="even">
<td>aggregationType</td>
<td>string</td>
<td>No</td>
<td>&quot;SUM&quot; |&quot;AVERAGE&quot; | &quot;AVERAGE_SUM_ORG_UNIT&quot;|&quot;LAST&quot;|&quot;LAST_AVERAGE_ORG_UNIT&quot;| &quot;COUNT&quot; | &quot;STDDEV&quot; | &quot;VARIANCE&quot; | &quot;MIN&quot; | &quot;MAX&quot;</td>
<td>Override the data element's default aggregation type</td>
</tr>
<tr class="odd">
<td>hideLegend</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to hide the series legend</td>
</tr>
<tr class="even">
<td>hideTitle</td>
<td>boolean</td>
<td>No</td>
<td>false | true</td>
<td>Whether to hide the chart title</td>
</tr>
<tr class="odd">
<td>userOrgUnit</td>
<td>string / array</td>
<td>No</td>
<td></td>
<td>Organisation unit identifiers, overrides organisation units associated with curretn user, single or array</td>
</tr>
<tr class="even">
<td>relativePeriodDate</td>
<td>string</td>
<td>No</td>
<td></td>
<td>Date identifier e.g: &quot;2016-01-01&quot;. Overrides the start date of the relative period</td>
</tr>
</tbody>
</table>

### 使用GIS地图插件嵌入地图 { #webapi_map_plugin }

在这个例子中，我们将看到如何将地图与来自
DHIS2 后端转换成网页。为此，我们将使用 GIS
地图插件。插件是用 JavaScript 编写的，依赖于 Ext
仅限 JS 库。可以在以下位置找到完整的工作示例
 <http://play.dhis2.org/portal/map.html> 。在网络浏览器中打开页面
并查看源代码以了解它是如何设置的。

我们首先看看完整的 html 文件会是什么样子
喜欢。此设置在我们的网页上放置了两张地图。第一个是
参考现有地图。第二个是内联配置的。

``html
<!DOCTYPE html>
<html>
    <head>
        <链接
            rel =“样式表”
            类型=“文本/CSS”
            href="http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css"
        />
        <script src="http://dhis2-cdn.org/v215/ext/ext-all.js"></script>
        <script src="https://maps.google.com/maps/api/js?sensor=false"></script>
        <script src="http://dhis2-cdn.org/v215/openlayers/OpenLayers.js"></script>
        <script src="http://dhis2-cdn.org/v215/plugin/map.js"></script>

        <script>
            var base = "https://play.dhis2.org/demo";

            // 登录 - 如果正常，调用 setLinks 函数

            Ext.onReady(函数() {
                Ext.Ajax.请求({
                    url: 基础 + "dhis-web-commons-security/login.action",
                    方法：“POST”，
                    params: { j_username: "portal", j_password: "Portal123" },
                    成功：设置链接，
                });
            });

            函数 setLinks() {
                DHIS.getMap({ url: base, el: "map1", id: "ytkZY3ChM6J" });

                DHIS.getMap({
                    网址： 基地，
                    el: "地图2",
                    地图视图：[
                        {
                            列： [
                                {
                                    尺寸：“英寸”，
                                    项目：[{id：“Uvn6LCg7dVU”}]，
                                },
                            ]， // 数据
                            行：[
                                {
                                    维度：“ou”，
                                    项目： [
                                        { id: "LEVEL-3" },
                                        { id: "ImspTQPwCqd" },
                                    ],
                                },
                            ], // 组织单位,
                            过滤器：[
                                {
                                    尺寸：“pe”，
                                    项目：[{ id：“LAST_3_MONTHS”}]，
                                },
                            ]， // 时期
                            // 以下所有选项都是可选的
                            班级: 7,
                            颜色低：“02079c”，
                            颜色高：“e5ecff”，
                            不透明度：0.9，
                            legendSet: { id: "fqs276KXCXi" },
                        },
                    ],
                });
            }
        </script>
    </head>

    <body>
        <div id="map1"></div>
        <div id="map2"></div>
    </body>
</html>
````

四个文件和谷歌地图包含在标题部分
HTML 文档。前两个文件是 Ext JS JavaScript 库（我们
在这种情况下使用 DHIS2 内容交付网络）及其样式表。
第三个文件是 OpenLayers JavaScript 映射框架
( <http://openlayers.org> ) 最后我们包含了 GIS 地图插件。
确保路径指向您的 DHIS2 服务器
    安装。

     <link rel="stylesheet" type="text/css" href="http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css" />
     <script src="http://dhis2-cdn.org/v215/ext/ext-all.js"> </script>
     <script src="https://maps.google.com/maps/api/js?sensor=false"> </script>
     <script src="http://dhis2-cdn.org/v215/openlayers/OpenLayers.js"> </script>
     <script src="http://dhis2-cdn.org/v215/plugin/map.js"> </script>

为了使用 DHIS2 服务器进行身份验证，我们使用与上一节相同的方法。在 HTML 文档的标头中，我们在 script 元素中包含以下 Javascript。 _setLinks_方法将在稍后实现。确保 _base_ 变量指向您的 DHIS2 安装。

    Ext.onReady（function（）{
      Ext.Ajax.request（{
        网址：基本+“ dhis-web-commons-security / login.action”，
        方法：“ POST”，
        参数：{j_username：“门户”，j_password：“ Portal123”}，
        成功：setLinks
      }）;
    }）;

现在让我们看看 GIS 插件的各种选项。需要两个属性：_el_ 和 _url_（请参阅下表）。现在，如果您想引用 DHIS2 GIS 中已制作的预定义地图，提供附加 _id_ 参数就足够了。如果您想动态配置地图，您应该省略 id 参数并提供 _mapViews_ （图层）。它们应该在 _columns_ 数组、_rows_ 数组和可选的 _filters_ 数组中配置数据维度。

数据维度定义为具有名为 _dimension_ 的文本属性的对象。此属性接受以下值：_in_（指示符）、_de_（数据元素）、_ds_（数据集）、_dc_（数据元素操作数）、_pe_（周期）、_ou_（组织单位）或任何组织单位组集的 ID或数据元素组集（可以在 Web api 中找到）。数据维度还有一个名为 _items_ 的数组属性，它接受具有 _id_ 属性的对象。

总而言之，如果你想有一个层，例如在地图中的“ANC 1 Coverage”，您可以进行以下_columns_配置：

```json
columns: [{
  dimension: "in", // could be "in", "de", "ds", "dc", "pe", "ou" or any dimension id
  items: [{id: "Uvn6LCg7dVU"}], // the id of ANC 1 Coverage
}]
```

 <table>
 <caption> GIS地图插件配置</caption>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> </th>型
 <th> 需要 </th>
 <th> 选项（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> el </td>
 <td> 字符串 </td>
 <td> 是 </td>
 <td> </td>
 <td> 用于在网页中呈现地图的 HTML 元素的标识符 </td>
 </tr>
 <tr class="even">
 <td> 网址 </td>
 <td> 字符串 </td>
 <td> 是 </td>
 <td> </td>
 <td> DHIS2 服务器的基本 URL </td>
 </tr>
 <tr class="odd">
 <td> ID </td>
 <td> 字符串 </td>
 <td> 否 </td>
 <td> </td>
 <td> DHIS 中预定义地图（收藏夹）的标识符 </td>
 </tr>
 <tr class="even">
 <td> baseLayer </td>
 <td> 字符串/布尔值 </td>
 <td> 否 </td>
 <td> 'gs', 'googlestreets' | 'gh', 'googlehybrid' | 'osm', 'openstreetmap' |假，空，“无”，“关”</td>
 <td> 显示背景图 </td>
 </tr>
 <tr class="odd">
 <td> hideLegend </td>
 <td> 布尔值 </td>
 <td> 否 </td>
 <td> 假 |真 </td>
 <td> 隐藏图例面板 </td>
 </tr>
 <tr class="even">
 <td> 地图视图 </td>
 <td> 阵列 </td>
 <td> 是（如果未提供 ID） </td>
 <td> </td>
 <td> 层数组 </td>
 </tr>
 </tbody>
 </table>

如果未提供 id，则必须添加具有以下内容的地图视图对象
配置选项：

 <table>
 <caption> 地图插件配置 </caption>
 <tbody>
 <tr class="odd">
 <td> 层 </td>
 <td> 字符串 </td>
 <td> 否 </td>
 <td> &quot;thematic1&quot; | &quot;thematic2&quot; | &quot;thematic3&quot; | &quot;thematic4&quot; | &quot;boundary&quot; | &quot;facility&quot; | </td>
 <td> 应添加地图视图内容的图层 </td>
 </tr>
 <tr class="even">
 <td> 列 </td>
 <td> 阵列 </td>
 <td> 是 </td>
 <td> </td>
 <td> 指标、数据元素、数据操作数或数据集（仅使用一个） </td>
 </tr>
 <tr class="odd">
 <td> 行 </td>
 <td> 阵列 </td>
 <td> 是 </td>
 <td> </td>
 <td> 组织单位（允许多个） </td>
 </tr>
 <tr class="even">
 <td> 过滤器 </td>
 <td> 阵列 </td>
 <td> 是 </td>
 <td> </td>
 <td> 句号（只用一个） </td>
 </tr>
 <tr class="odd">
 <td> 类 </td>
 <td> 整数 </td>
 <td> 否 </td>
 <td> 5 | 1-7 </td>
 <td> 自动图例类的数量 </td>
 </tr>
 <tr class="even">
 <td> 方法 </td>
 <td> 整数 </td>
 <td> 否 </td>
 <td> 2 | 3 </td>
 <td> 图例计算方法，其中 2 = 等间隔和 3 = 等计数 </td>
 </tr>
 <tr class="odd">
 <td> 颜色低 </td>
 <td> 字符串 </td>
 <td> 否 </td>
 <td> &quot;ff0000&quot;（红色）|任何十六进制颜色 </td>
 <td> 代表第一个自动图例类的颜色 </td>
 </tr>
 <tr class="even">
 <td> 颜色高 </td>
 <td> 字符串 </td>
 <td> 否 </td>
 <td> &quot;00ff00&quot;（绿色） |任何十六进制颜色 </td>
 <td> 代表最后一个自动图例类的颜色 </td>
 </tr>
 <tr class="odd">
 <td> 半径低 </td>
 <td> 整数 </td>
 <td> 否 </td>
 <td> 5 |任何整数 </td>
 <td> 仅适用于设施点（点） - 具有最小值的点的半径 </td>
 </tr>
 <tr class="even">
 <td> 半径高 </td>
 <td> 整数 </td>
 <td> 否 </td>
 <td> 15 |任何整数 </td>
 <td> 仅适用于设施点（点） - 具有最大值的点的半径 </td>
 </tr>
 <tr class="odd">
 <td> 不透明度 </td>
 <td> 双 </td>
 <td> 否 </td>
 <td> 0.8 | 0 - 1 </td>
 <td> 图层内容的不透明度/透明度 </td>
 </tr>
 <tr class="even">
 <td> legendSet </td>
 <td> 对象 </td>
 <td> 否 </td>
 <td> </td>
 <td> 预定义的图例集。将覆盖自动图例集。 </td>
 </tr>
 <tr class="odd">
 <td> 标签 </td>
 <td> 布尔值/对象 </td>
 <td> 否 </td>
 <td> 假 |真实|对象属性：fontSize（整数）、color（十六进制字符串）、strong（布尔值）、斜体（布尔值）</td>
 <td> 在地图上显示标签 </td>
 </tr>
 <tr class="even">
 <td> 宽度 </td>
 <td> 整数 </td>
 <td> 否 </td>
 <td> </td>
 <td> 地图宽度 </td>
 </tr>
 <tr class="odd">
 <td> 高度 </td>
 <td> 整数 </td>
 <td> 否 </td>
 <td> </td>
 <td> 地图高度 </td>
 </tr>
 <tr class="even">
 <td> userOrgUnit </td>
 <td> 字符串/数组 </td>
 <td> 否 </td>
 <td> </td>
 <td> 组织单位标识符，覆盖与当前用户、单个或阵列关联的组织单位 </td>
 </tr>
 </tbody>
 </table>

我们继续添加一张预定义的地图和一张动态配置的地图
到我们的 HTML 文档。您可以使用浏览可用地图的列表
此处的 Web API： <http://play.dhis2.org/demo/api/33/maps> 。

```javascript
function setLinks() {
  DHIS.getMap({ url: base, el: "map1", id: "ytkZY3ChM6J" });

  DHIS.getMap({
 url: base,
 el: "map2",
 mapViews: [
   columns: [ // Chart series
  columns: [{dimension: "in", items: [{id: "Uvn6LCg7dVU"}]}], // data
   ],
   rows: [ // Chart categories
  rows: [{dimension: "ou", items: [{id: "LEVEL-3"}, {id: "ImspTQPwCqd"}]}], // organisation units
   ],
   filters: [
  filters: [{dimension: "pe", items: [{id: "LAST_3_MONTHS"}]}], // period
   ],
   // All following options are optional
   classes: 7,
   colorLow: "02079c",
   colorHigh: "e5ecff",
   opacity: 0.9,
   legendSet: {id: "fqs276KXCXi"}
 ]
  });
}
```

最后，我们在 HTML 文档的正文部分中包含一些 _div_ 元素，并使用插件 JavaScript 中引用的标识符。

```html
<div id="map1"></div>
<div id="map2"></div>
```

要查看完整的工作示例，请访问
 <http://play.dhis2.org/portal/map.html> 。

## SQL视图 { #webapi_sql_views }

SQL 视图资源允许您创建和检索结果集
SQL 视图。 SQL 视图可以直接针对
数据库并通过 Web API 资源呈现结果集。

    / api / sqlViews

SQL 视图对于创建可能更容易的数据视图很有用
用SQL构造比较结合Web的多个对象
应用程序接口。举个例子，假设我们被要求提供一个视图
所有组织单位及其名称、父名称、组织单位
级别和名称，以及数据库中列出的坐标。风景
可能看起来像这样：

```sql
SELECT ou.name as orgunit, par.name as parent, ou.coordinates, ous.level, oul.name from organisationunit ou
INNER JOIN _orgunitstructure ous ON ou.organisationunitid = ous.organisationunitid
INNER JOIN organisationunit par ON ou.parentid = par.organisationunitid
INNER JOIN orgunitlevel oul ON ous.level = oul.level
WHERE ou.coordinates is not null
ORDER BY oul.level, par.name, ou.name
```

我们将使用 _curl_ 首先在 DHIS2 服务器上执行视图。这本质上是一个具体化过程，并确保我们在从服务器检索数据时可以通过 SQL 视图获得最新的数据。您可以首先从 api/sqlViews 资源查找 SQL 视图，然后使用以下命令进行 POST：

```bash
curl "https://play.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/execute" -X POST -u admin:district
```

该过程的下一步是检索数据。基本
URL的结构如下

    http：// {server} / api / sqlViews / {id} / data（.csv）

`{server}` 参数应替换为您自己的服务器。这
URL `/api/sqlViews/` 的下一部分应该附加
特定的 SQL 视图标识符。为 XML 数据附加 `data` 或
`data.csv` 用于逗号分隔值。支持响应格式是
json、xml、csv、xls、html 和 html+css。例如，以下
命令将为上面定义的 SQL 视图检索 XML 数据。

```bash
curl "https://play.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/data.csv" -u admin:district
```

SQL视图有三种类型：

-   _SQL 视图：_ 标准 SQL 视图。

-   _物化 SQL 视图：_ 物化 SQL 视图，即写入磁盘。需要更新以反映基础表中的更改。支持过滤结果集的条件。

-   _SQL 查询：_ 普通 SQL 查询。支持自定义查询的内联变量。

### 标准 { #webapi_sql_view_criteria }

您可以通过将 _criteria_ 查询参数附加到 URL，使用由列分隔的列名称和过滤器值作为参数值，对结果集中的列进行简单过滤，格式如下：

    / api / sqlViews / {id} / data？criteria = col1：value1＆criteria = col2：value2

举个例子，过滤上面设置的SQL视图结果只返回
在第 4 级的组织单位，您可以使用以下内容
    网址：

    https://play.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/data.csv?criteria=level:4

### 变数 { #webapi_sql_view_variables }

SQL 视图支持变量替换。变量替换仅适用于 _query_ 类型的 SQL 视图，这意味着 SQL 视图不是在数据库中创建，而是简单地作为常规 SQL 查询执行。变量可以直接插入到 SQL 查询中，并且必须采用以下格式：

    $ {variable-key}

例如，检索给定的所有数据元素的 SQL 查询
通过变量定义值类型的值类型可以看
像这样：

    从dataelement中选择*，其中valuetype ='$ {valueType}';

然后，当通过 _sqlViews_ Web API 资源请求时，可以将这些变量作为 URL 的一部分提供。可以按以下格式提供变量：

    / api / sqlViews / {id} / data？var = key1：value1＆var = key2：value2

与上面的示例相对应的示例查询如下所示：

    /api/sqlViews/dI68mLkP1wN/data.json?var=valueType:int

_valueType_ 变量将替换为 _int_ 值，查询将返回 int 值类型的数据元素。

变量参数必须仅包含字母数字字符。这
变量必须包含字母数字、破折号、下划线和空格
仅字符。

_query_ 类型的 SQL 视图还支持两个系统定义的变量，这些变量允许查询访问有关执行视图的用户的信息：

| 变量              | 手段                  |
| --------------------- | ---------------------- |
| ${\_current_user_id}  | 用户的数据库ID |
| ${\_current_username} | 用户的用户名    |

这些变量的值不能作为URL的一部分提供。它们始终充满有关用户的信息。

例如，以下 _query_ 类型的 SQL 视图显示分配给用户的所有组织单位：

```sql
    select ou.path, ou.name
    from organisationunit ou_user
    join organisationunit ou on ou.path like ou_user.path || '%'
    join usermembership um on um.organisationunitid = ou_user.organisationunitid
    where um.userinfoid = ${_current_user_id}
    order by ou.path
```

### 筛选 { #webapi_sql_view_filtering }

SQL视图api支持数据过滤，相当于[元数据对象
过滤器](#webapi_metadata_object_filter)。过滤器的完整列表
运算符，您可以查看 [元数据对象
过滤器](#webapi_metadata_object_filter)。

要使用过滤器，只需在请求末尾添加它们作为参数
您的 SQL 视图的 url，例如
    这：

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_level:eq:2&filter=orgunit_name:ilike:bo

此请求将返回一个结果，其中包括在
名称且组织单位级别为 2。

以下示例将返回所有带有 `orgunit_level` 2 或
4：

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_level:in:[2,4]

最后，返回所有不以开头的组织单位的示例
“博”

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_name:!like:Bo

## 仪表板 { #webapi_dashboard }

仪表板旨在为您提供多个分析项目的概述，例如地图、图表、数据透视表和报告，这些项目一起可以提供数据的全面概述。仪表板可通过 _dashboards_ 资源在 Web API 中使用。仪表板包含仪表板_项目_列表。项目可以代表单个资源，例如图表、地图或报告表，也可以代表分析资源的链接列表，例如报告、资源、表格报告和用户。仪表板项目最多可以包含八个链接。通常，仪表板客户端可以选择直接在用户界面中可视化单对象项目，同时将多对象项目呈现为可点击链接。

    / api /仪表板

### 浏览仪表板 { #webapi_browsing_dashboards }

要获取包含 JSON 格式的标识符、名称和链接等基本信息的仪表板列表，您可以向以下 URL 发出 _GET_ 请求：

    /api/dashboards.json

仪表板资源将提供仪表板列表。请记住
仪表板对象是共享的，因此列表将受
当前已验证的用户。您可以检索有关一个的更多信息
特定的仪表板，请点击其链接，类似于：

    /api/dashboards/vQFhmLJU5sK.json

仪表板包含名称和创建日期等信息以及
仪表板项目数组。 JSON 格式的响应看起来类似
对此回复（某些信息已被删除，以便
简洁）。

```json
{
    "lastUpdated": "2013-10-15T18:17:34.084+0000",
    "id": "vQFhmLJU5sK",
    "created": "2013-09-08T20:55:58.060+0000",
    "name": "Mother and Child Health",
    "href": "https://play.dhis2.org/demo/api/dashboards/vQFhmLJU5sK",
    "publicAccess": "--------",
    "externalAccess": false,
    "itemCount": 17,
    "displayName": "Mother and Child Health",
    "access": {
        "update": true,
        "externalize": true,
        "delete": true,
        "write": true,
        "read": true,
        "manage": true
    },
    "user": {
        "id": "xE7jOejl9FI",
        "name": "John Traore",
        "created": "2013-04-18T15:15:08.407+0000",
        "lastUpdated": "2014-12-05T03:50:04.148+0000",
        "href": "https://play.dhis2.org/demo/api/users/xE7jOejl9FI"
    },
    "dashboardItems": [
        {
            "id": "bu1IAnPFa9H",
            "created": "2013-09-09T12:12:58.095+0000",
            "lastUpdated": "2013-09-09T12:12:58.095+0000"
        },
        {
            "id": "ppFEJmWWDa1",
            "created": "2013-09-10T13:57:02.480+0000",
            "lastUpdated": "2013-09-10T13:57:02.480+0000"
        }
    ],
    "userGroupAccesses": []
}
```

通过指定特定字段可以获得更定制的响应
在请求中。下面提供了一个示例，它将返回更多
有关用户仪表板上每个对象的详细信息。

    / api / dashboards / vQFhmLJU5sK /？fields =：all，dashboardItems [：all]

### 搜索仪表板 { #webapi_searching_dasboards }

当用户构建仪表板时，可以方便地使用 _/dashboards/q_ 资源搜索各种分析资源。此资源允许您搜索以下对象的名称属性的匹配项：图表、地图、报告表、用户、报告和资源。您可以通过对以下资源 URL 模式发出 _GET_ 请求来进行搜索，其中 my-query 应替换为首选搜索查询：

    /api/dashboards/q/my-query.json

例如，此查询：

    / api / dashboards / q / ma？count = 6＆maxCount = 20＆max = CHART＆max = MAP

将搜索以下内容：

-   分析对象名称包含字符串“ ma”
-   每种类型最多返回6
-   对于CHART和MAP类型，最多返回20个项目

 <table>
 <caption>仪表板/ q查询参数</caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 44%" />
 <col style="width: 35%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>说明</th>
 <th>类型</th>
 <th>默认</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>计数</td>
 <td>要返回的每种类型的项目数</td>
 <td>正整数</td>
 <td> 6 </td>
 </tr>
 <tr class="odd">
 <td> maxCount </td>
 <td>返回的最大类型的项目数</td>
 <td>正整数</td>
 <td> 25 </td>
 </tr>
 <tr class="even">
 <td> max </td>
 <td>返回</td>的maxCount的类型
 <td>字符串[CHART | MAP | REPORT_TABLE | USER | REPORT |资源|可视化] </td>
 <td>不适用</td>
 </tr>
 </tbody>
 </table>

支持 JSON 和 XML 响应格式。 JSON 格式的响应
将包含对匹配资源的引用和数量
总共找到匹配项，并为每种类型的资源找到匹配项。它会看起来
类似于：

```json
{
    "charts": [
        {
            "name": "ANC: 1-3 dropout rate Yearly",
            "id": "LW0O27b7TdD"
        },
        {
            "name": "ANC: 1 and 3 coverage Yearly",
            "id": "UlfTKWZWV4u"
        },
        {
            "name": "ANC: 1st and 3rd trends Monthly",
            "id": "gnROK20DfAA"
        }
    ],
    "visualizations": [
        {
            "name": "ANC: ANC 3 Visits Cumulative Numbers",
            "id": "arf9OiyV7df",
            "type": "LINE"
        },
        {
            "name": "ANC: 1st and 2rd trends Monthly",
            "id": "jkf6OiyV7el",
            "type": "PIVOT_TABLE"
        }
    ],
    "maps": [
        {
            "name": "ANC: 1st visit at facility (fixed) 2013",
            "id": "YOEGBvxjAY0"
        },
        {
            "name": "ANC: 3rd visit coverage 2014 by district",
            "id": "ytkZY3ChM6J"
        }
    ],
    "reportTables": [
        {
            "name": "ANC: ANC 1 Visits Cumulative Numbers",
            "id": "tWg9OiyV7mu"
        }
    ],
    "reports": [
        {
            "name": "ANC: 1st Visit Cumulative Chart",
            "id": "Kvg1AhYHM8Q"
        },
        {
            "name": "ANC: Coverages This Year",
            "id": "qYVNH1wkZR0"
        }
    ],
    "searchCount": 8,
    "chartCount": 3,
    "mapCount": 2,
    "reportTableCount": 1,
    "reportCount": 2,
    "userCount": 0,
    "patientTabularReportCount": 0,
    "resourceCount": 0
}
```

### 创建，更新和删除仪表板 { #webapi_creating_updating_removing_dashboards }

仪表盘的创建、更新和删除遵循标准 REST 语义。要创建新的仪表盘，可以向 `/api/dashboards`资源发出_POST_请求。从用户的角度来看，首先创建一个仪表盘，然后再向其中添加项目可能会比较方便。请求有效载荷支持 JSON 和 XML 格式。要创建名称为 "My dashboard"（我的仪表盘）的仪表盘，可以使用如下 JSON 格式的有效载荷：

    {
      “名称”：“我的仪表板”
    }

更新，例如重命名仪表板时，您可以使用类似的请求负载对相同的 api/仪表板资源发出 _PUT_ 请求。

要删除仪表板，您可以向特定仪表板资源发出 _DELETE_ 请求，类似于以下内容：

    / api /仪表板/ vQFhmLJU5sK

### 添加，移动和删除仪表板项目和内容 { #webapi_adding_moving_removing_dashboard_items }

要添加仪表盘项目，用户可以使用 `/api/dashboards/<dashboard-id>/items/content` 资源，其中 \<dashboard-id\> 应替换为相关仪表盘标识符。请求必须使用 _POST_ 方法。下表详细介绍了 URL 语法和参数。

 <table>
 <caption>项目内容参数</caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 44%" />
 <col style="width: 35%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>说明</th>
 <th>选项</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>类型</td>
 <td>仪表板项目</td>表示的资源类型
 <td>图表|可视化|地图| reportTable |用户|报告| reportTables |资源| PatientTabularReports |应用程式</td>
 </tr>
 <tr class="even">
 <td> id </td>
 <td>由仪表板项目</td>表示的资源的标识符
 <td>资源标识符</td>
 </tr>
 </tbody>
 </table>

用于将图表添加到特定仪表板的 _POST_ 请求 URL 可能如下所示，其中最后一个 id 查询参数值是图表资源标识符：

    / api /仪表板/ vQFhmLJU5sK / items / content？type = chart＆id = LW0O27b7TdD

添加地图、图表、报表和应用程序类型的资源时，API
将创建一个新项目并将其添加到仪表板。添加资源时
类型的用户、报告、报告表和资源，API 将尝试
将资源添加到相同类型的现有仪表板项目。如果不
资源少于八个的相同类型的项目或没有相同类型的项目
与它相关联的存在，API 将创建一个新的仪表板项目和
将资源添加到其中。

为了将仪表板项目移动到仪表板项目列表中的新位置，用户可以向以下资源 URL 发送 _POST_ 请求，其中 `<dashboard-id>` 应替换为仪表板的标识符， `<item-id>` 应替换为仪表板项目的标识符， `<index>` 应替换为项目在仪表板中的新位置，其中索引为零：

    / api /仪表板/ <dashboard-id> / items / <item-id> / position / <index>

要从特定仪表板中完全删除仪表板项目，消费者可以向以下资源 URL 发出 _DELETE_ 请求，其中`<dashboard-id>`应替换为仪表板的标识符，而`<item-id>`应替换为仪表板项目的标识符.可以通过对仪表板资源 URL 的 GET 请求检索仪表板项目标识符。

    / api /仪表板/ <dashboard-id> / items / <item-id>

要删除仪表板项目中的特定内容资源，消费者可以向以下资源 URL 发出 _DELETE_ 请求，其中`<content-resource-id>`应替换为与仪表板项目关联的资源标识符；例如报告或用户的标识符。例如，这可用于从报告类型的仪表板项目中删除单个报告，而不是完全删除仪表板项目：

    / api /仪表板/ <dashboard-id> / items / <item-id> / content / <content-resource-id>

## 可视化 { #webapi_visualization }

Visualization API旨在帮助客户与图表和数据透视表/报表交互。数据可视化应用程序使用此API的端点，该应用程序允许基于客户端的定义创建，配置和管理图表和数据透视表。主要思想是使客户和用户拥有一个独特的集中式API，该API提供所有类型的图表和数据透视表以及每种可视化类型的特定参数和配置。

引入这个 API 是为了统一 `charts` 和 `reportTables` API，并完全取代它们以支持 `visualizations` API（这意味着应该避免使用 `charts` 和 `reportTables` API）。总之，以下资源/API：

    / api /图表，/ api / reportTables

_正在被_取代

    / api / visualizations

> **注意**
>
> 新应用程序和客户端应避免使用 `charts` 和 `reportTables` API，因为它们已被弃用。改用`visualizations` API。

一个可视化对象由很多属性组成（有些属性与图表相关，有些属性与数据透视表相关），但负责反映对象核心信息的最重要的属性是：_“id”、“name”、“type” ”、“dataDimensionItems”、“列”、“行”和“过滤器”。_

API的根端点是`/ api / visualizations`，下表中描述了当前属性和元素的列表。

 <table>
 <caption> 可视化属性 </caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 75%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 字段 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ID </td>
 <td> 唯一标识符。 </td>
 </tr>
 <tr class="even">
 <td> 代码 </td>
 <td> 用于识别可视化的自定义代码。 </td>
 </tr>
 <tr class="odd">
 <td> 名称 </td>
 <td> 可视化的名称 </td>
 </tr>
 <tr class="even">
 <td> 类型 </td>
 <td> 可视化的类型。有效类型为：COLUMN、STACKED_COLUMN、BAR、STACKED_BAR、LINE、AREA、PIE、RADAR、GAUGE、YEAR_OVER_YEAR_LINE YEAR_OVER_YEAR_COLUMN、SINGLE_VALUE、PIVOT_TABLE。 </td>
 </tr>
 <tr class="odd">
 <td> 标题 </td>
 <td> 自定义标题。 </td>
 </tr>
 <tr class="even">
 <td> 字幕 </td>
 <td> 自定义字幕。 </td>
 </tr>
 <tr class="odd">
 <td> 描述 </td>
 <td> 定义可视化的自定义描述。 </td>
 </tr>
 <tr class="even">
 <td> 创建了 </td>
 <td> 可视化创建的日期/时间。 </td>
 </tr>
 <tr class="odd">
 <td> 开始日期 </td>
 <td> 过滤过程中使用的开始日期。 </td>
 </tr>
 <tr class="even">
 <td> 结束日期 </td>
 <td> 过滤过程中使用的结束日期。 </td>
 </tr>
 <tr class="odd">
 <td> sortOrder </td>
 <td> 此可视化的排序顺序。整数值。 </td>
 </tr>
 <tr class="even">
 <td> 用户 </td>
 <td> 代表可视化创建者的对象。 </td>
 </tr>
 <tr class="odd">
 <td> publicAccess </td>
 <td> 设置公共访问权限。 </td>
 </tr>
 <tr class="even">
 <td> 显示密度 </td>
 <td> 文本的显示密度。 </td>
 </tr>
 <tr class="odd">
 <td> 字体大小 </td>
 <td> 文本的字体大小。 </td>
 </tr>
 <tr class="even">
 <td> fontStyle </td>
 <td> 自定义字体样式：visualizationTitle、visualizationSubtitle、horizontalAxisTitle、verticalAxisTitle、targetLineLabel、baseLineLabel、seriesAxisLabel、categoryAxisLabel、legend。 </td>
 </tr>
 <tr class="odd">
 <td>relativePeriods </td>
 <td> 表示分析查询中使用的相对时间段的对象。 </td>
 </tr>
 <tr class="even">
 <td> legendSet </td>
 <td> 代表图例定义的对象。 </td>
 </tr>
 <tr class="odd">
 <td> legendDisplayStyle </td>
 <td> 图例的显示样式。它可以是：填充或文本。 </td>
 </tr>
 <tr class="even">
 <td> legendDisplayStrategy </td>
 <td> 图例的显示样式。它可以是：FIXED 或 BY_DATA_ITEM。 </td>
 </tr>
 <tr class="odd">
 <td> 聚合类型 </td>
 <td> 确定数据透视表中的值如何聚合。有效选项：SUM、AVERAGE、AVERAGE_SUM_ORG_UNIT、LAST、LAST_AVERAGE_ORG_UNIT、FIRST、FIRST_AVERAGE_ORG_UNIT、COUNT、STDDEV、VARIANCE、MIN、MAX、NONE、CUSTOM 或 DEFAULT。 </td>
 </tr>
 <tr class="even">
 <td> 回归类型 </td>
 <td> 有效的回归类型：NONE、LINEAR、POLYNOMIAL 或 LOESS。 </td>
 </tr>
 <tr class="odd">
 <td> targetLineValue </td>
 <td> 图表目标线。接受 Double 类型。 </td>
 </tr>
 <tr class="even">
 <td> targetLineLabel </td>
 <td> 图表目标线标签。 </td>
 </tr>
 <tr class="odd">
 <td> rangeAxisLabel </td>
 <td> 图表纵轴 (y) 标签/标题。 </td>
 </tr>
 <tr class="even">
 <td> domainAxisLabel </td>
 <td> 图表水平轴 (x) 标签/标题。 </td>
 </tr>
 <tr class="odd">
 <td> rangeAxisMaxValue </td>
 <td> 图表轴最大值。超出范围的值将不会显示。 </td>
 </tr>
 <tr class="even">
 <td> rangeAxisMinValue </td>
 <td> 图表轴最小值。超出范围的值将不会显示。 </td>
 </tr>
 <tr class="odd">
 <td> rangeAxisSteps </td>
 <td> 最小值和最大值之间的轴步数。 </td>
 </tr>
 <tr class="even">
 <td> rangeAxisDecimals </td>
 <td> 坐标区值的小数位数。 </td>
 </tr>
 <tr class="odd">
 <td> baseLineValue </td>
 <td> 图表基线值。 </td>
 </tr>
 <tr class="even">
 <td> baseLineLabel </td>
 <td> 图表基线标签。 </td>
 </tr>
 <tr class="odd">
 <td> digitGroupSeparator </td>
 <td> 数字组分隔符。有效值：COMMA、SPACE 或 NONE。 </td>
 </tr>
 <tr class="even">
 <td> topLimit </td>
 <td> 为数据透视表设置的上限。 </td>
 </tr>
 <tr class="odd">
 <td> measureCriteria </td>
 <td> 描述应用于此度量的标准。 </td>
 </tr>
 <tr class="even">
 <td> percentStackedValues </td>
 <td> 是否使用堆叠值。更有可能应用于图形/图表。布尔值。 </td>
 </tr>
 <tr class="odd">
 <td> noSpaceBetweenColumns </td>
 <td> 显示/隐藏列之间的空间。布尔值。 </td>
 </tr>
 <tr class="even">
 <td> 回归 </td>
 <td> 指示可视化是否包含回归列。更可能适用于 Pivot/Report。布尔值。 </td>
 </tr>
 <tr class="odd">
 <td> externalAccess </td>
 <td> 指示可视化是否可用作外部只读。布尔值。 </td>
 </tr>
 <tr class="even">
 <td> 用户组织单位 </td>
 <td> 表示用户是否有组织单位。布尔值。 </td>
 </tr>
 <tr class="odd">
 <td> userOrganisationUnitChildren </td>
 <td> 指示用户是否有子组织单位。布尔值。 </td>
 </tr>
 <tr class="even">
 <td> userOrganisationUnitGrandChildren </td>
 <td> 指示用户是否有大子组织单位。布尔值。 </td>
 </tr>
 <tr class="odd">
 <td> 报告参数 </td>
 <td> 用于定义与报告相关的布尔属性的对象。 </td>
 </tr>
 <tr class="even">
 <td> rowTotals </td>
 <td> 显示（或不显示）行总数。布尔值。 </td>
 </tr>
 <tr class="odd">
 <td> colTotals </td>
 <td> 显示（或不显示）列总数。布尔值。 </td>
 </tr>
 <tr class="even">
 <td> rowSubTotals </td>
 <td> 显示（或不显示）行小计。布尔值。 </td>
 </tr>
 <tr class="odd">
 <td> colSubTotals </td>
 <td> 显示（或不显示）列小计。布尔值。 </td>
 </tr>
 <tr class="even">
 <td> 累积值 </td>
 <td> 指示可视化是否使用累积值。布尔值。 </td>
 </tr>
 <tr class="odd">
 <td> hideEmptyColumns </td>
 <td> 表示是否隐藏没有数据值的列。布尔值。 </td>
 </tr>
 <tr class="even">
 <td> hideEmptyRows </td>
 <td> 表示是否隐藏没有数据值的行。布尔值。 </td>
 </tr>
 <tr class="odd">
 <td>已完成仅</td>
 <td> 表示是否隐藏没有数据值的列。布尔值。 </td>
 </tr>
 <tr class="even">
 <td> 跳过四舍五入 </td>
 <td> 应用或不舍入。布尔值。 </td>
 </tr>
 <tr class="odd">
 <td> showDimensionLabels </td>
 <td> 是否显示尺寸标签。布尔值。 </td>
 </tr>
 <tr class="even">
 <td> hideTitle </td>
 <td> 是否隐藏标题。布尔值。 </td>
 </tr>
 <tr class="odd">
 <td> hideSubtitle </td>
 <td> 是否隐藏副标题。布尔值。 </td>
 </tr>
 <tr class="even">
 <td> hideLegend </td>
 <td> 显示/隐藏图例。很可能被图表使用。布尔值。 </td>
 </tr>
 <tr class="odd">
 <td> showHierarchy </td>
 <td> 显示（或不显示）组织单位层次结构名称。布尔值。 </td>
 </tr>
 <tr class="even">
 <td> 显示数据 </td>
 <td> 图表用于隐藏或不隐藏渲染模型中的数据/值。布尔值。 </td>
 </tr>
 <tr class="odd">
 <td> lastUpdatedBy </td>
 <td> 代表对可视化应用最后更改的用户的对象。 </td>
 </tr>
 <tr class="even">
 <td> lastUpdated </td>
 <td> 上次更改可视化的日期/时间。 </td>
 </tr>
 <tr class="odd">
 <td> 收藏夹 </td>
 <td> 将此对象标记为收藏的用户 ID 列表。 </td>
 </tr>
 <tr class="even">
 <td> 订阅者 </td>
 <td> 已订阅此可视化的用户 ID 列表。 </td>
 </tr>
 <tr class="odd">
 <td> 翻译 </td>
 <td> 一组可用的对象翻译，通常按区域设置过滤。 </td>
 </tr>
 </tbody>
 </table>

### 检索可视化 { #webapi_visualization_retrieving_visualizations }

To retrieve a list of all existing visualizations, in JSON format, with some basic information (including identifier, name and pagination) you can make a `GET` request to the URL below. You should see a list of all public/shared visualizations plus your private ones.

    获取/api/visualizations.json

如果要检索特定可视化的JSON定义，可以将其各自的标识符添加到URL：

    获取 /api/visualizations/hQxZGXqnLS9.json

以下表示是JSON格式的响应示例（为简便起见，某些信息已被删除）。对于完整的模式，请使用`GET / api / schemas / visualization`。

```json
{
    "lastUpdated": "2020-02-06T11:57:09.678",
    "href": "http://my-domain/dhis/api/visualizations/hQxZGXqnLS9",
    "id": "hQxZGXqnLS9",
    "created": "2017-05-19T17:22:00.785",
    "name": "ANC: ANC 1st visits last 12 months cumulative values",
    "publicAccess": "rw------",
    "userOrganisationUnitChildren": false,
    "type": "LINE",
    "access": {},
    "reportingParams": {
        "parentOrganisationUnit": false,
        "reportingPeriod": false,
        "organisationUnit": false,
        "grandParentOrganisationUnit": false
    },
    "dataElementGroupSetDimensions": [],
    "attributeDimensions": [],
    "yearlySeries": [],
    "filterDimensions": ["dx"],
    "columns": [
        {
            "id": "ou"
        }
    ],
    "dataElementDimensions": [],
    "categoryDimensions": [],
    "rowDimensions": ["pe"],
    "columnDimensions": ["ou"],
    "dataDimensionItems": [
        {
            "dataDimensionItemType": "DATA_ELEMENT",
            "dataElement": {
                "id": "fbfJHSPpUQD"
            }
        }
    ],
    "filters": [
        {
            "id": "dx"
        }
    ],
    "rows": [
        {
            "id": "pe"
        }
    ]
}
```

通过在URL中指定要提取的字段，可以获得更定制的响应。即：

    GET /api/visualizations/hQxZGXqnLS9.json?fields=interpretations

将返回

```json
{
    "interpretations": [
        {
            "id": "Lfr8I2RPU0C"
        },
        {
            "id": "JuwgdJlJPGb"
        },
        {
            "id": "WAoU2rSpyZp"
        }
    ]
}
```

As seen, the `GET` above will return only the interpretations related to the given identifier (in this case `hQxZGXqnLS9`).

### 创建，更新和删除可视化 { #webapi_visualization_add_update_remove_visualizations }

这些操作遵循标准的 _REST_ 语义。可以通过对带有有效 JSON 负载的`/api/visualizations`资源的`POST`请求来创建新的可视化。有效载荷的一个例子可能是：

```json
{
    "columns": [
        {
            "dimension": "J5jldMd8OHv",
            "items": [
                {
                    "name": "CHP",
                    "id": "uYxK4wmcPqA",
                    "displayName": "CHP",
                    "displayShortName": "CHP",
                    "dimensionItemType": "ORGANISATION_UNIT_GROUP"
                },
                {
                    "name": "Hospital",
                    "id": "tDZVQ1WtwpA",
                    "displayName": "Hospital",
                    "displayShortName": "Hospital",
                    "dimensionItemType": "ORGANISATION_UNIT_GROUP"
                }
            ]
        }
    ],
    "rows": [
        {
            "dimension": "SooXFOUnciJ",
            "items": [
                {
                    "name": "DOD",
                    "id": "B0bjKC0szQX",
                    "displayName": "DOD",
                    "displayShortName": "DOD",
                    "dimensionItemType": "CATEGORY_OPTION_GROUP"
                },
                {
                    "name": "CDC",
                    "id": "OK2Nr4wdfrZ",
                    "displayName": "CDC",
                    "displayShortName": "CDC",
                    "dimensionItemType": "CATEGORY_OPTION_GROUP"
                }
            ]
        }
    ],
    "filters": [
        {
            "dimension": "ou",
            "items": [
                {
                    "name": "Sierra Leone",
                    "id": "ImspTQPwCqd",
                    "displayName": "Sierra Leone",
                    "displayShortName": "Sierra Leone",
                    "dimensionItemType": "ORGANISATION_UNIT"
                },
                {
                    "name": "LEVEL-1",
                    "id": "LEVEL-H1KlN4QIauv",
                    "displayName": "LEVEL-1"
                }
            ]
        }
    ],
    "name": "HIV Cases Monthly",
    "description": "Cases of HIV across the months",
    "category": "XY1vwCQskjX",
    "showDimensionLabels": true,
    "hideEmptyRows": true,
    "hideEmptyColumns": true,
    "skipRounding": true,
    "aggregationType": "SUM",
    "regressionType": "LINEAR",
    "type": "PIVOT_TABLE",
    "numberType": "VALUE",
    "measureCriteria": "Some criteria",
    "showHierarchy": true,
    "completedOnly": true,
    "displayDensity": "NORMAL",
    "fontSize": "NORMAL",
    "digitGroupSeparator": "SPACE",
    "legendDisplayStyle": "FILL",
    "legendDisplayStrategy": "FIXED",
    "hideEmptyRowItems": "BEFORE_FIRST_AFTER_LAST",
    "regression": false,
    "cumulative": true,
    "sortOrder": 1,
    "topLimit": 2,
    "rowTotals": true,
    "colTotals": true,
    "hideTitle": true,
    "hideSubtitle": true,
    "hideLegend": true,
    "showData": true,
    "baseLineLabel": "A base label",
    "targetLineLabel": "A target label",
    "targetLineValue": 45.5,
    "baseLineValue": 19.99,
    "percentStackedValues": true,
    "noSpaceBetweenColumns": true,
    "rowSubTotals": true,
    "colSubTotals": true,
    "domainAxisLabel": "A domain axis label",
    "rangeAxisLabel": "A range axis label",
    "rangeAxisMaxValue": 123.65,
    "rangeAxisMinValue": 33.89,
    "rangeAxisSteps": 5,
    "rangeAxisDecimals": 10,
    "userOrgUnitType": "TEI_SEARCH",
    "externalAccess": false,
    "publicAccess": "--------",
    "reportingParams": {
        "reportingPeriod": true,
        "organisationUnit": true,
        "parentOrganisationUnit": true,
        "grandParentOrganisationUnit": true
    },
    "parentGraphMap": {
        "ImspTQPwCqd": ""
    },
    "access": {
        "read": true,
        "update": true,
        "externalize": true,
        "delete": false,
        "write": true,
        "manage": false
    },
    "optionalAxes": [
        {
            "dimensionalItem": "fbfJHSPpUQD",
            "axis": 1
        },
        {
            "dimensionalItem": "cYeuwXTCPkU",
            "axis": 2
        }
    ],
    "relativePeriods": {
        "thisYear": false,
        "quartersLastYear": true,
        "last52Weeks": false,
        "thisWeek": false,
        "lastMonth": false,
        "last14Days": false,
        "biMonthsThisYear": false,
        "monthsThisYear": false,
        "last2SixMonths": false,
        "yesterday": false,
        "thisQuarter": false,
        "last12Months": false,
        "last5FinancialYears": false,
        "thisSixMonth": false,
        "lastQuarter": false,
        "thisFinancialYear": false,
        "last4Weeks": false,
        "last3Months": false,
        "thisDay": false,
        "thisMonth": false,
        "last5Years": false,
        "last6BiMonths": false,
        "last4BiWeeks": false,
        "lastFinancialYear": false,
        "lastBiWeek": false,
        "weeksThisYear": false,
        "last6Months": false,
        "last3Days": false,
        "quartersThisYear": false,
        "monthsLastYear": false,
        "lastWeek": false,
        "last7Days": false,
        "thisBimonth": false,
        "lastBimonth": false,
        "lastSixMonth": false,
        "thisBiWeek": false,
        "lastYear": false,
        "last12Weeks": false,
        "last4Quarters": false
    },
    "user": {},
    "yearlySeries": ["THIS_YEAR"],
    "userGroupAccesses": [
        {
            "access": "rwx-----",
            "userGroupUid": "ZoHNWQajIoe",
            "displayName": "Bo District M&E officers",
            "id": "ZoHNWQajIoe"
        }
    ],
    "userAccesses": [
        {
            "access": "--------",
            "displayName": "John Barnes",
            "id": "DXyJmlo9rge",
            "userUid": "DXyJmlo9rge"
        }
    ],
    "legendSet": {
        "name": "Death rate up",
        "id": "ham2eIDJ9k6",
        "legends": [
            {
                "startValue": 1,
                "endValue": 2,
                "color": "red",
                "image": "some-image"
            },
            {
                "startValue": 2,
                "endValue": 3,
                "color": "blue",
                "image": "other-image"
            }
        ]
    },
    "fontStyle": {
        "visualizationTitle": {
            "font": "VERDANA",
            "fontSize": 16,
            "bold": true,
            "italic": false,
            "underline": false,
            "textColor": "#3a3a3a",
            "textAlign": "LEFT"
        },
        "horizontalAxisTitle": {
            "font": "ROBOTO",
            "fontSize": 12,
            "bold": false,
            "italic": true,
            "underline": false,
            "textColor": "#2a2a2a",
            "textAlign": "CENTER"
        },
        "categoryAxisLabel": {
            "font": "ROBOTO",
            "fontSize": 12,
            "bold": false,
            "italic": true,
            "underline": false,
            "textColor": "#dedede",
            "textAlign": "CENTER"
        },
        "targetLineLabel": {
            "font": "ARIAL",
            "fontSize": 12,
            "bold": false,
            "italic": true,
            "underline": false,
            "textColor": "#dedede",
            "textAlign": "CENTER"
        }
    }
}
```

要更新特定的可视化，您可以向相同的 `/api/visualizations` 资源发送一个 `PUT` 请求，该资源具有类似的负载 `PLUS` 以及相应的可视化的标识符，即：

    PUT /api/可视化/hQxZGXqnLS9

最后，要删除现有的可视化，您可以发出一个 `DELETE` 请求，指定要删除的可视化的标识符，如下所示：

    删除/ api / visualizations / hQxZGXqnLS9

## 数据项 { #webapi_data_items }

This endpoint allows the user to query data related to a few different dimensional items. These items are: `INDICATOR`, `DATA_ELEMENT`, `DATA_SET`, `PROGRAM_INDICATOR`, `PROGRAM_DATA_ELEMENT`, `PROGRAM_ATTRIBUTE`. The endpoint supports only `GET` requests and, as other endpoints, can return responses in JSON or XML format.

该URL是`/ api / dataItems`，并且可以想象，它能够在同一`GET`请求中通过同一端点检索不同的对象。因此，某些可用的可查询属性将根据要查询的维项目而有所不同。

为了理解上面的陈述，让我们看一下以下请求示例：

1. `GET /api/dataItems?filter=dimensionItemType:eq:DATA_ELEMENT&filter=valueType:eq:TEXT` 在此示例中，项目类型 `DATA_ELEMENT` 具有可在查询中使用的 `valueType` 属性。

2. `GET /api/dataItems?pageSize=50&order=displayName:asc&filter=dimensionItemType:eq:PROGRAM_INDICATOR&filter=displayName:ilike:someName&filter=programId:eq:WSGAb5XwJ3Y`

Here, the `PROGRAM_INDICATOR` allows filtering by `programId`.

So, based on the examples `1)` and `2)` if you try filtering a `DATA_ELEMENT` by `programId` or filter a `PROGRAM_INDICATOR` by `valueType`, you should get no results. In other words, the filter will be applied only when the attribute actually exists for the respective data item.

需要强调的另一个重要方面是，此端点不遵循与其他现有端点相同的查询标准，例如[元数据对象过滤器](#webapi_metadata_object_filter)。因此，它支持较小的功能和查询集。其主要原因是需要查询具有不同关系的多个不同项目，这是使用现有的过滤组件（由其他端点使用）不可能实现的。

### 可能的终点反应 { #webapi_data_items_possible_responses }

基于`GET` 请求/查询，可能有几种不同的响应。下面我们总结了每种可能性。

#### 找到结果（HTTP 状态代码 200）{ #results-found-http-status-code-200 }

```
{
  "pager": {
    "page": 1,
    "pageCount": 27,
    "total": 1339,
    "pageSize": 50,
    "nextPage": "https://play.dhis2.org/dev/api/36/dataItems?page=2&filter=displayName:ilike:a&filter=id:eq:nomatch&rootJunction=OR&displayName:asc=&paging=true"
  },
  "dataItems": [
    {
      "simplifiedValueType": "TEXT",
      "displayName": "TB program Gender",
      "displayShortName": "TB prog. Gen.",
      "valueType": "TEXT",
      "name": "TB program Gender",
      "shortName": ""TB prog. Gen.",
      "id": "ur1Edk5Oe2n.cejWyOfXge6",
      "programId": "ur1Edk5Oe2n",
      "dimensionItemType": "PROGRAM_ATTRIBUTE"
    },
    ...
  ]
}
```

#### 未找到结果（HTTP 状态代码 200）{ #results-not-found-http-status-code-200 }

```
{
  "pager": {
    "page": 1,
    "pageCount": 1,
    "total": 0,
    "pageSize": 50
  },
  "dataItems": []
}
```

#### 无效的查询（HTTP状态码409） { #invalid-query-http-status-code-409 }

```
{
  “ httpStatus”：“冲突”，
  “ httpStatusCode”：409，
  “ status”：“ ERROR”，
  “ message”：“无法解析过滤器`dimensionItemType`上的元素`INVALID_TYPE`。可用的值为：[INDICATOR，DATA_ELEMENT，DATA_ELEMENT_OPERAND，DATA_SET，PROGRAM_INDICATOR，PROGRAM_DATA_ELEMENT，PROGRAM_ATTRIBUTE]”
  “错误代码”：“ E2016”
}
```

#### 未处理的错误（HTTP状态码500） { #unhandled-error-http-status-code-500 }

```
{
  “ httpStatus”：“内部服务器错误”，
  “ httpStatusCode”：500，
  “状态”：“错误”
}
```

### 分页 { #webapi_data_items_pagination }

此端点还支持分页作为默认选项。如果需要，您可以通过向 `GET` 请求添加 `paging=false` 来禁用分页。
即：`/api/dataItems?filter=dimensionItemType:in:[INDICATOR]&paging=false`。

这是启用分页时的有效负载示例。请记住，分页是默认选项，不需要显式设置。

```
{
  "pager": {
    "page": 1,
    "pageCount": 20,
    "total": 969,
    "pageSize": 50,
    "nextPage": "https://play.dhis2.org/dev/api/dataItems?page=2&filter=dimensionItemType:in:[INDICATOR]"
  },
  "dataItems": [...]
}
```

> **Note**
>
> For elements where there is an associated Program, the program name should also be returned as part of the element name (as a prefix). The only exception is `Program Indicators`. We will not prefix the element name in this case, in order to keep the same behavior of existing endpoints.
>
> The /dataItems endpoint will bring only data items that are defined as aggregatable type. The current list of valid aggregatable types is: `TEXT, LONG_TEXT`, `LETTER`, `BOOLEAN`, `TRUE_ONLY`, `NUMBER`, `UNIT_INTERVAL`, `PERCENTAGE`, `INTEGER`, `INTEGER_POSITIVE`, `INTEGER_NEGATIVE`, `INTEGER_ZERO_OR_POSITIVE`, `COORDINATE`.
>
> Even though the response returns a few different attributes, the filtering can only be applied to specific ones: `displayName`, `name`, `valueType`, `id`, `dimensionItemType`, `programId`.
>
> The `order` will be considered invalid if it's set on top of `name` (ie.: order=_name:asc_) and a `filter` is set to `displayName` (ie.: filter=_displayName:ilike:aName_), and vice-versa.

### 响应属性 { #webapi_data_items_response_attributes }

现在，我们已经了解了此端点的主要功能和用法，让我们看一下响应中返回的属性列表。

<table>
<caption>数据项属性</caption>
<colgroup>
<col style="width: 25%" />
<col style="width: 75%" />
</colgroup>
<thead>
<tr class="header">
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>id</td>
<td>唯一标识符。</td>
</tr>
<tr class="even">
<td>代码</td>
<td>用于标识维度项目的自定义代码。</td>
</tr>
<tr class="odd">
<td>名称</td>
<td>为该项目指定的名称。</td>
</tr>
<tr class="even">
<td>displayName</td>
<td>定义的显示名称。</td>
</tr>
<tr class="odd">
<td>shortName</td>
<td>为该项目指定的简称。</td>
</tr>
<tr class="even">
<td>displayShortName</td>
<td>定义的显示短名称。</td>
</tr>
<tr class="odd">
<td>dimensionItemType</td>
<td>维度类型。可能的类型：INDICATOR、DATA_ELEMENT、REPORTING_RATE、PROGRAM_INDICATOR、PROGRAM_DATA_ELEMENT、PROGRAM_ATTRIBUTE。</td>
</tr>
<tr class="even">
<td>valueType</td>
<td>项目值类型（更具体的定义）。可能的类型：TEXT、LONG_TEXT、LETTER、BOOLEAN、TRUE_ONLY、UNIT_INTERVAL、PERCENTAGE、INTEGER、INTEGER_POSITIVE、INTEGER_NEGATIVE、INTEGER_ZERO_OR_POSITIVE、COORDINATE</td>
</tr>
<tr class="odd">
<td>simplifiedValueType</td>
<td>值类型的通用表示。有效值：NUMBER、BOOLEAN、DATE、FILE_RESOURCE、COORDINATE、TEXT</td>
</tr>
<tr class="even">
<td>programId</td>
<td>关联的programId。</td>
</tr>
</tbody>
</table>

## 分析工具 { #webapi_analytics }

要访问 DHIS2 中的分析聚合数据，您可以使用 _analytics_ 资源。分析资源功能强大，因为它允许您查询和检索沿所有可用数据维度聚合的数据。例如，您可以要求分析资源提供一组数据元素、期间和组织单位的聚合数据值。此外，您还可以根据数据元素和组织单位组集检索任意数量维度组合的聚合数据。

    / api / 33 / analytics

### 请求查询参数 { #webapi_analytics_query_parameters }

分析资源可让您指定一系列查询参数：

<table>
<caption>Query parameters</caption>
<colgroup>
<col style="width: 17%" />
<col style="width: 10%" />
<col style="width: 45%" />
<col style="width: 27%" />
</colgroup>
<thead>
<tr class="header">
<th>Query parameter</th>
<th>Required</th>
<th>Description</th>
<th>Options (default first)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>dimension</td>
<td>Yes</td>
<td>Dimensions and dimension items to be retrieved, repeated for each.</td>
<td>Any dimension</td>
</tr>
<tr class="even">
<td>filter</td>
<td>No</td>
<td>Filters and filter items to apply to the query, repeated for each.</td>
<td>Any dimension</td>
</tr>
<tr class="odd">
<td>aggregationType</td>
<td>No</td>
<td>Aggregation type to use in the aggregation process.</td>
<td>SUM | AVERAGE | AVERAGE_SUM_ORG_UNIT | LAST | LAST_AVERAGE_ORG_UNIT | COUNT | STDDEV | VARIANCE | MIN | MAX</td>
</tr>
<tr class="even">
<td>measureCriteria</td>
<td>No</td>
<td>Filters for the data/measures.</td>
<td>EQ | GT | GE | LT | LE</td>
</tr>
<tr class="odd">
<td>preAggregationMeasureCriteria</td>
<td>No</td>
<td>Filters for the data/measure, applied before aggregation is performed.</td>
<td>EQ | GT | GE | LT | LE</td>
</tr>
<tr>
<td>startDate</td>
<td>No</td>
<td>Start date for a date range. Will be applied as a filter. Can not be used together with a period dimension or filter.</td>
<td>Date</td>
</tr>
<tr>
<td>endDate</td>
<td>No</td>
<td>End date for date range. Will be applied as a filter. Can not be used together with a period dimension or filter.</td>
<td>Date</td>
</tr>
<tr class="even">
<td>skipMeta</td>
<td>No</td>
<td>Exclude the metadata part of the response (improves performance).</td>
<td>false | true</td>
</tr>
<tr class="odd">
<td>skipData</td>
<td>No</td>
<td>Exclude the data part of the response.</td>
<td>false | true</td>
</tr>
<tr class="even">
<td>skipRounding</td>
<td>No</td>
<td>Skip rounding of data values, i.e. provide full precision.</td>
<td>false | true</td>
</tr>
<tr class="odd">
<td>hierarchyMeta</td>
<td>No</td>
<td>Include names of organisation unit ancestors and hierarchy paths of organisation units in the metadata.</td>
<td>false | true</td>
</tr>
<tr class="even">
<td>ignoreLimit</td>
<td>No</td>
<td>Ignore limit on max 50 000 records in response - use with care.</td>
<td>false | true</td>
</tr>
<tr class="odd">
<td>tableLayout</td>
<td>No</td>
<td>Use plain data source or table layout for the response.</td>
<td>false | true</td>
</tr>
<tr class="even">
<td>hideEmptyRows</td>
<td>No</td>
<td>Hides empty rows in response, applicable when table layout is true.</td>
<td>false | true</td>
</tr>
<tr class="odd">
<td>hideEmptyColumns</td>
<td>No</td>
<td>Hides empty columns in response, applicable when table layout is true.</td>
<td>false | true</td>
</tr>
<tr class="even">
<td>showHierarchy</td>
<td>No</td>
<td>Display full org unit hierarchy path together with org unit name.</td>
<td>false | true</td>
</tr>
<tr class="odd">
<td>includeNumDen</td>
<td>No</td>
<td>Include the numerator and denominator used to calculate the value in the response.</td>
<td>false | true</td>
</tr>
<tr class="even">
<td>includeMetadataDetails</td>
<td>No</td>
<td>Include metadata details to raw data response.</td>
<td>false | true</td>
</tr>
<tr class="odd">
<td>displayProperty</td>
<td>No</td>
<td>Property to display for metadata.</td>
<td>NAME | SHORTNAME</td>
</tr>
<tr class="even">
<td>outputIdScheme</td>
<td>No</td>
<td>Identifier scheme to use for metadata items the query response, can be identifier, code or attributes.</td>
<td>UID | CODE |NAME| ATTRIBUTE:&lt;ID&gt;</td>
</tr>
<tr class="odd">
<td>inputIdScheme</td>
<td>No</td>
<td>Identifier scheme to use for metadata items in the query request, can be an identifier, code or attributes.</td>
<td>UID | CODE | ATTRIBUTE:&lt;ID&gt;</td>
</tr>
<tr class="even">
<td>approvalLevel</td>
<td>No</td>
<td>Include data which has been approved at least up to the given approval level, refers to identifier of approval level.</td>
<td>Identifier of approval level</td>
</tr>
<tr class="odd">
<td>relativePeriodDate</td>
<td>No</td>
<td>Date used as basis for relative periods.</td>
<td>Date.</td>
</tr>
<tr class="even">
<td>userOrgUnit</td>
<td>No</td>
<td>Explicitly define the user org units to utilize, overrides organisation units associated with the current user, multiple identifiers can be separated by semicolon.</td>
<td>Organisation unit identifiers.</td>
</tr>
<tr class="odd">
<td>columns</td>
<td>No</td>
<td>Dimensions to use as columns for table layout.</td>
<td>Any dimension (must be query dimension)</td>
</tr>
<tr class="even">
<td>rows</td>
<td>No</td>
<td>Dimensions to use as rows for table layout.</td>
<td>Any dimension (must be query dimension)</td>
</tr>
<tr class="odd">
<td>order</td>
<td>No</td>
<td>Specify the ordering of rows based on value.</td>
<td>ASC | DESC</td>
</tr>
<tr class="even">
<td>timeField</td>
<td>No</td>
<td>The time field to base event aggregation on. Applies to event data items only. Can be a predefined option or the ID of an attribute or data element with a time-based value type.</td>
<td>EVENT_DATE | ENROLLMENT_DATE | INCIDENT_DATE | DUE_DATE | COMPLETED_DATE | CREATED | LAST_UPDATED | &lt;Attribute ID&gt; | &lt;Data element ID&gt;</td>
</tr>
<tr>
<td>orgUnitField</td>
<td>No</td>
<td>The organisation unit field to base event aggregation on. Applies to event data items only. Can be the ID of an attribute or data element with the Organisation unit value type. The default option is specified as omitting the query parameter.
<td>&lt;Attribute ID&gt; | &lt;Data element ID&gt;</td>
</tr>
</tbody>
</table>

_dimension_ 查询参数定义分析查询中应包含哪些维度。可以指定任意数量的维度。应为每个维度重复维度参数以包含在查询响应中。查询响应可能包含指定维度项的所有组合的聚合值。

_filter_ 参数定义应将哪些维度用作分析查询中检索的数据的过滤器。可以指定任意数量的过滤器。对于要在查询中使用的每个过滤器，应重复过滤器参数。过滤器与维度的不同之处在于，过滤器维度不会成为查询响应内容的一部分，并且响应中的聚合值将折叠在过滤器维度上。换句话说，响应中的数据将在过滤器维度上聚合，但过滤器不会作为维度包含在实际响应中。例如，要查询按期间和组织单位筛选的某些数据元素，您可以使用以下 URL：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD; cYeuwXTCPkU＆filter = pe：2014Q1; 2014Q2
      ＆filter = ou：O6uvpzGd5pu; lc3eMKXaEfw

_aggregationType_ 查询参数允许您定义查询应使用哪个聚合运算符。默认情况下，将使用为查询中包含的数据元素定义的聚合运算符。如果您的查询不包含任何数据元素，但包含数据元素组，则将使用第一组中第一个数据元素的聚合运算符。组和数据元素的顺序未定义。此查询参数允许您覆盖默认值并指定特定的聚合运算符。例如，您可以使用以下 URL 将聚合运算符设置为“count”：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD＆dimension = pe：2014Q1＆dimension = ou：O6uvpzGd5pu
      ＆aggregationType = COUNT

_measureCriteria_ 查询参数可让您筛选出要返回的数据记录范围。您可以指示系统仅返回聚合数据值等于、大于、大于或等于、小于或小于或等于某些值的记录。您可以按以下格式指定任意数量的条件，其中 _criteria_ 和 _value_ 应替换为实际值：

    / api / 33 / analytics？measureCriteria =标准：值；标准：值

例如，以下查询将仅返回以下记录
数据值大于或等于 6500 且小于 33000：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD; cYeuwXTCPkU＆dimension = pe：2014
      ＆dimension = ou：O6uvpzGd5pu; lc3eMKXaEfw＆measureCriteria = GE：6500; LT：33000

与 _measureCriteria_ 类似，_preAggregationMeasureCriteria_ 查询参数允许您仅在执行聚合之前过滤掉数据。例如，以下查询仅聚合原始值在定义的条件范围内的数据：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD; cYeuwXTCPkU＆dimension = pe：2014
      ＆dimension = ou：O6uvpzGd5pu; lc3eMKXaEfw＆preAggregationMeasureCriteria = GE：10; LT：100

_startDate_ 和 _endDate_ 参数可用于指定要聚合的自定义日期范围。指定日期范围时，您不能指定相对或固定时间段作为维度或过滤器。日期范围将过滤分析响应。你可以这样使用它：

    /api/33/analytics.json?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      ＆dimension = ou：ImspTQPwCqd＆startDate = 2018-01-01＆endDate = 2018-06-01

为了让分析资源生成现成表格形式的数据，您可以为 _tableLayout_ 参数提供 true 作为值。分析资源现在将生成表布局中的数据，而不是生成简单的标准化数据源。您可以使用 _columns_ 和 _rows_ 参数以及以分号分隔的维度标识符作为值来指示哪些用作表列和行。列和行维度必须作为查询中的数据维度（而不是筛选器）出现。这样的请求可以如下所示：

    /api/33/analytics.html?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&dimension=pe:2014Q1;2014Q2
      ＆dimension = ou：O6uvpzGd5pu＆tableLayout = true＆columns = dx; ou＆rows = pe

_order_ 参数可用于分析资源生成有序数据。数据将按值的升序（或降序）排序。按降序对值进行排序的示例请求是：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD＆dimension = pe：LAST_12_MONTHS
      ＆dimension = ou：O6uvpzGd5pu＆order = DESC

### 尺寸和项目 { #webapi_analytics_dimensions_and_items }

DHIS2 具有具有多个固定和动态数据维度的多维数据模型。固定维度是数据元素、周期（时间）和组织单位维度。您可以通过类别、数据元素组集和组织单位组集动态添加维度。下表显示了 DHIS2 中的可用数据维度。每个数据维度都有一个对应的_维度标识符_，并且每个维度可以有一组_维度项_：

<table>
<caption>Dimensions and dimension items</caption>
<colgroup>
<col style="width: 38%" />
<col style="width: 12%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>Dimension</th>
<th>Dimension id</th>
<th>Dimension items</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Data elements, indicators, data set reporting rate metrics, data element operands, program indicators, program data elements, program attributes, validation rules</td>
<td>dx</td>
<td>Data element, indicator, data set reporting rate metrics, data element operand, program indicator, program attribute identifiers, keyword DE_GROUP-&lt;group-id&gt;, IN_GROUP-&lt;group-id&gt;, use &lt;dataelement-id&gt;.&lt;optioncombo-id&gt; for data element operands, &lt;program-id&gt;.&lt;dataelement-id&gt; for program data elements, &lt;program-id&gt;.&lt;attribute-id&gt; for program attributes, &lt;validationrule-id&gt; for validation results.</td>
</tr>
<tr class="even">
<td>Periods (time)</td>
<td>pe</td>
<td>ISO periods and relative periods, see &quot;date and period format&quot;</td>
</tr>
<tr class="odd">
<td>Organisation unit hierarchy</td>
<td>ou</td>
<td>Organisation unit identifiers, and keywords USER_ORGUNIT, USER_ORGUNIT_CHILDREN, USER_ORGUNIT_GRANDCHILDREN, LEVEL-&lt;level&gt; and OU_GROUP-&lt;group-id&gt;</td>
</tr>
<tr class="even">
<td>Category option combinations</td>
<td>co</td>
<td>Category option combo identifiers  (omit to get all items)</td>
</tr>
<tr class="odd">
<td>Attribute option combinations</td>
<td>ao</td>
<td>Category option combo identifiers (omit to get all items)</td>
</tr>
<tr class="even">
<td>Categories</td>
<td>&lt;category id&gt;</td>
<td>Category option identifiers (omit to get all items)</td>
</tr>
<tr class="odd">
<td>Data element group sets</td>
<td>&lt;group set id&gt;</td>
<td>Data element group identifiers (omit to get all items)</td>
</tr>
<tr class="even">
<td>Organisation unit group sets</td>
<td>&lt;group set id&gt;</td>
<td>Organisation unit group identifiers (omit to get all items)</td>
</tr>
<tr class="odd">
<td>Category option group sets</td>
<td>&lt;group set id&gt;</td>
<td>Category option group identifiers (omit to get all items)</td>
</tr>
</tbody>
</table>

没有必要知道哪些对象用于
设计分析查询时的各种动态维度。你可以得到
通过访问 Web API 中的此 URL 获得动态维度的完整列表：

    / api / 33 /尺寸

如果您只想检索给定动态维度的维度项目，您可以
使用下面的例子。默认情况下禁用分页。可以通过添加启用它
URL的分页参数`paging=true`。

    / api / 33 / dimensions / J5jldMd8OHv / items？paging = true

分析资源的基本 URL 是`/api/analytics`。请求
您可以在其上使用查询字符串的特定维度和维度项目
以下格式，其中 `dim-id` 和 `dim-item` 应替换为实际值：

    / api / 33 / analytics？dimension = dim-id：dim-item; dim-item＆dimension = dim-id：dim-item; dim-item

如上所示，维度标识符后跟一个冒号
而维度项之间用分号分隔。例如，一个
查询两个数据元素，两个期间和两个组织单位可以
使用以下 URL 完成：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD; cYeuwXTCPkU
      ＆dimension = pe：2016Q1; 2016Q2＆dimension = ou：O6uvpzGd5pu; lc3eMKXaEfw

查询按类别选项组合细分的数据，而不是
您可以在查询中包含类别维度的数据元素总计
字符串，例如像这样：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD; cYeuwXTCPkU
      ＆dimension = co＆dimension = pe：201601＆dimension = ou：O6uvpzGd5pu; lc3eMKXaEfw

选择数据元素时，您还可以选择一个数据元素中的所有数据元素。
使用 DE_GROUP- <id> 语法分组为项目：

    / api / 33 / analytics？dimension = dx：DE_GROUP-h9cuJOkOwY2
      ＆dimension = pe：201601＆dimension = ou：O6uvpzGd5pu

选择数据集报告率时，语法包含数据
设置标识符后跟报告率指标：

    /api/33/analytics?dimension=dx:BfMAe6Itzgt.REPORTING_RATE;BfMAe6Itzgt.ACTUAL_REPORTS
      ＆dimension = pe：201601＆dimension = ou：O6uvpzGd5pu

要查询程序数据元素（跟踪器域类型），您可以通过使用 <program-id> 为每个数据元素指定程序来获取这些数据元素。<dataelement-id> 语法：

    /api/33/analytics.json?dimension=dx:eBAyeGv0exc.qrur9Dvnyt5;eBAyeGv0exc.GieVkTxp4HH
      ＆dimension = pe：LAST_12_MONTHS＆filter = ou：ImspTQPwCqd

要查询节目属性（跟踪的实体属性），您可以通过使用 <program.id> 为每个属性指定节目来获取这些属性。<attribute-id>句法：

    /api/33/analytics.json?dimension=dx:IpHINAT79UW.a3kGcGDCuk6;IpHINAT79UW.UXz7xuGCEhU
      ＆dimension = pe：LAST_4_QUARTERS＆dimension = ou：ImspTQPwCqd

要查询可以使用的组织单位组集和数据元素
以下网址。请注意如何将组集标识符用作
维度标识符和作为维度项的组：

    / api / 33 / analytics？dimension = Bpx0589u8y0：oRVt7g429ZO; MAs88nJc9nL
      ＆dimension = pe：2016＆dimension = ou：ImspTQPwCqd

要查询数据元素和类别，您可以使用此 URL。使用
类别标识符作为维度标识符，类别选项作为
维度项目：

    / api / 33 / analytics？dimension = dx：s46m5MS0hxu; fClA2Erf6IO＆dimension = pe：2016
      ＆dimension = YNZyaJHiHYq：btOyqprQ9e8; GEqzEKCHoGA＆filter = ou：ImspTQPwCqd

使用相关期间和组织单位进行查询
当前用户可以使用这样的 URL：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD; cYeuwXTCPkU
      ＆dimension = pe：LAST_12_MONTHS＆dimension = ou：USER_ORGUNIT

When selecting organisation units for a dimension you can select an
entire level optionally constrained by any number of boundary
organisation units with the `LEVEL-<level>` syntax. Boundary refers to a
top node in a sub-hierarchy, meaning that all organisation units at the
given level below the given boundary organisation unit in the hierarchy
will be included in the response, and is provided as regular organisation unit 
dimension items. The level value can either be a numerical level or refer to the identifier
of the organisation unit level entity. A simple query for all org units at level three:

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD＆dimension = pe：2016＆dimension = ou：LEVEL-3

具有两个边界组织单位的三级和四级查询可以是
指定如下：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD＆dimension = pe：2016
      ＆dimension = ou：LEVEL-3; LEVEL-4; O6uvpzGd5pu; lc3eMKXaEf

选择组织单位时也可以选择所有组织
组织单位组中的单位作为维度项目包括在内
使用 OU_GROUP-<id> 语法。组内的组织单位
可以选择受任意数量的边界组织约束
单位。级别和组项目都可以重复任意数量
次：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD＆dimension = pe：2016
      ＆dimension = ou：OU_GROUP-w0gFTTmsUcF; OU_GROUP-EYbopBOJWsW; O6uvpzGd5pu; lc3eMKXaEf

您可以将标识符方案用于元数据部分
具有 outputIdScheme 属性的分析响应，如下所示。你可以
使用 ID、代码和属性作为标识符方案：

    / api / 33 / analytics？dimension = dx：fbfJHSPpUQD; cYeuwXTCPkU
      ＆dimension = pe：2017Q1; 2017Q2＆dimension = ou：O6uvpzGd5pu＆outputIdScheme = CODE

列出了使用分析资源时需要注意的一些事项
以下。

-   数据元素、指标、数据集报告率、计划数据元素和计划指标是通用数据维度的一部分，标识为“dx”。这意味着您可以在查询中将任何数据元素、指标和数据集标识符与“dx”维度标识符一起使用。

-   对于类别、数据元素组集和组织单位组集维度，如果不指定维度项，则查询时将使用所有维度项。

-   对于周期维度，维度项是 ISO 周期标识符和/或相对周期。有关期间格式和可用的相对期间，请参阅上面的“日期和期间格式”部分。

-   对于组织单位维度，您可以分别使用密钥`USER_ORGUNIT`或`USER_ORGUNIT_CHILDREN`作为项目，将项目指定为与当前针对请求进行身份验证的用户关联的组织单位或组织单位的子单位。您还可以直接指定组织单位标识符，或两者的组合。

-   对于组织单位维度，您可以指定用于请求的组织层次级别和边界单位，格式为`LEVEL-<level> - <boundary-id>`；例如，`LEVEL-3-ImspTQPwCqd`意味着层次结构中第 3 层给定边界单元之下的所有组织单元。

-   对于组织单位维度，维度项目是组织单位及其子层次结构 - 将为层次结构中给定组织单位下方的所有组织单位聚合数据。

-   您不能为类别选项组合维度指定维度项目。相反，响应将包含链接到数据值的项目。

### dx尺寸 { #webapi_analytics_dx_dimension }

`dx` 维度是一个特殊的维度，它可以包含所有的
以下数据类型。

<table>
<caption>Data dx dimension types</caption>
<colgroup>
<col style="width: 25%" />
<col style="width: 23%" />
<col style="width: 27%" />
<col style="width: 23%" />
</colgroup>
<thead>
<tr class="header">
<th>Type</th>
<th>Syntax</th>
<th>Description</th>
<th>Data source</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Indicator</td>
<td>&lt;indicator-id&gt;</td>
<td>Indicator identifier.</td>
<td>Aggregated data</td>
</tr>
<tr class="even">
<td>Indicator grop</td>
<td>IN_GROUP-&lt;indicatorgroup-id&gt;</td>
<td>Keyword followed by an indicator group identifier. Will include all indicators in the group in the response.</td>
<td>Aggregated data</td>
</tr>
<tr class="odd">
<td>Data element</td>
<td>&lt;dataelement-id&gt;</td>
<td>Data element identifier.</td>
<td>Aggregated data</td>
</tr>
<tr class="even">
<td>Data element group</td>
<td>DE_GROUP-&lt;dataelementgroup-id&gt;</td>
<td>Keyword followed by a data element group identifier. Will include all data elements in the group in the response.</td>
<td>Aggregated data</td>
</tr>
<tr class="odd">
<td>Data element operand</td>
<td>&lt;dataelement-id&gt;.&lt;categoryoptcombo-id&gt;.&lt;attributeoptcombo-id&gt;</td>
<td>Data element identifier followed by one or both of category option combination and attribute option combo identifier. Wildcard &quot;*&quot; symbol can be used to indicate any option combination value. The attribute option combination identifier can be completely left out.</td>
<td>Aggregate data</td>
</tr>
<tr class="even">
<td>Data set</td>
<td>&lt;dataset-id&gt;.&lt;reporting-rate-metric&gt;</td>
<td>Data set identifier followed by reporting rate metric. Can be REPORTING_RATE | REPORTING_RATE_ON_TIME | ACTUAL_REPORTS | ACTUAL_REPORTS_ON_TIME | EXPECTED_REPORTS.</td>
<td>Data set completeness registrations</td>
</tr>
<tr class="odd">
<td>Program data element</td>
<td>&lt;program-id&gt;.&lt;dataelement-id&gt;</td>
<td>Program identifier followed by data element identifier. Reads from events within the specified program.</td>
<td>Events from the given program</td>
</tr>
<tr class="even">
<td>Program indicator</td>
<td>&lt;programindicator-id&gt;</td>
<td>Program indicator identifier. Reads from events from within the program associated with the program identifier.</td>
<td>Events from the program of the program indicator</td>
</tr>
<tr class="odd">
<td>Validation result</td>
<td>&lt;validationrule-id&gt;</td>
<td>Validation rule identifier. Will include validation rule violations for the validation rule, requires that validation results are generated and persisted.</td>
<td>Validation results</td>
</tr>
</tbody>
</table>

Items from all of the various `dx` types can be combined in an analytics
request. An example looks like this:

    /api/33/analytics.json
      ？dimension = dx：Uvn6LCg7dVU; BfMAe6Itzgt.REPORTING_RATE; IpHINAT79UW.a3kGcGDCuk6
      ＆dimension = pe：LAST_12_MONTHS＆filter = ou：ImspTQPwCqd

组语法也可以与任何其他项目一起使用。一个
示例如下所示：

    /api/33/analytics.json
      ？dimension = dx：DE_GROUP-qfxEYY9xAl6; IN_GROUP-oehv9EO3vP7; BfMAe6Itzgt.REPORTING_RATE
      ＆dimension = pe：LAST_12_MONTHS＆filter = ou：ImspTQPwCqd

数据元素操作数可以选择性地指定属性选项
组合并使用通配符，例如指定所有类别选项
组合值：

    /api/33/analytics.json
      ？dimension = dx：Uvn6LCg7dVU。*。j8vBiBqGf6O; Uvn6LCg7dVU.Z4oQs46iTeR
      ＆dimension = pe：LAST_12_MONTHS＆filter = ou：ImspTQPwCqd

> **提示**
>
> 了解如何使用分析 API 的一个好方法是使用 DHIS2 _数据透视表_ 应用程序。您可以使用各种维度和项目来使用数据透视表，然后单击“下载”>“纯数据源”>“JSON”以在 Web 浏览器的地址栏中查看生成的分析 API 调用。

### 回应格式 { #webapi_analytics_response_formats }

包含聚合数据的分析响应可以在
各种表现形式。像往常一样，您可以表示对某个项目感兴趣
通过将文件扩展名附加到 URL，通过
`Accept` HTTP 标头或通过 `format` 查询参数。这
默认格式为 JSON。可用的格式和内容类型是
下面列出。

-   json（应用程序/ json）

-   jsonp（应用程序/ javascript）

-   xml（应用程序/ xml）

-   csv（应用程序/ csv）

-   html（text / html）

-   html + css（text / html）

-   xls（application / vnd.ms-excel）

例如，要请求 XML 格式的分析响应，您可以
使用以下网址：

    /api/33/analytics.xml?dimension=dx:fbfJHSPpUQD
      ＆dimension = pe：2016＆dimension = ou：O6uvpzGd5pu; lc3eMKXaEfw

必须使用 HTTP _GET_ 方法检索分析响应。这允许直接链接到来自网页以及其他支持 HTTP 的客户端的分析响应。要进行功能测试，我们可以使用 cURL 库。通过对演示数据库执行此命令，您将获得 JSON 格式的分析响应：

```bash
curl "play.dhis2.org/demo/api/analytics.json?dimension=dx:eTDtyyaSA7f;FbKK4ofIv5R
  &dimension=pe:2016Q1;2016Q2&filter=ou:ImspTQPwCqd" -u admin:district
```

JSON响应如下所示：

```json
{
    "headers": [
        {
            "name": "dx",
            "column": "Data",
            "meta": true,
            "type": "java.lang.String"
        },
        {
            "name": "pe",
            "column": "Period",
            "meta": true,
            "type": "java.lang.String"
        },
        {
            "name": "value",
            "column": "Value",
            "meta": false,
            "type": "java.lang.Double"
        }
    ],
    "height": 4,
    "metaData": {
        "pe": ["2016Q1", "2016Q2"],
        "ou": ["ImspTQPwCqd"],
        "names": {
            "2016Q1": "Jan to Mar 2016",
            "2016Q2": "Apr to Jun 2016",
            "FbKK4ofIv5R": "Measles Coverage <1 y",
            "ImspTQPwCqd": "Sierra Leone",
            "eTDtyyaSA7f": "Fully Immunized Coverage"
        }
    },
    "rows": [
        ["eTDtyyaSA7f", "2016Q2", "81.1"],
        ["eTDtyyaSA7f", "2016Q1", "74.7"],
        ["FbKK4ofIv5R", "2016Q2", "88.9"],
        ["FbKK4ofIv5R", "2016Q1", "84.0"]
    ],
    "width": 3
}
```

响应表示一个维度数据表。_headers_数组概述了表中包含的列以及列所包含的内容。_column_ 属性显示列的维度标识符，如果列中包含度量值，则显示 "Value"（值）字样。如果列包含维度项，则 _meta_ 属性为 _true_；如果列包含度量（聚合数据值），则 _false_。_name_ 属性与列属性类似，只是在列包含度量值的情况下显示 "值"。_type_ 属性表示列值的 Java 类类型。

_height_ 和 _width_ 属性分别指示响应中包含多少数据列和行。

_metaData period_ 属性包含响应中包含的周期的唯一有序数组。 _metaData ou_ 属性包含响应中包含的组织单位标识符的数组。 _metaData 名称_ 属性包含数据响应中使用的标识符与其代表的对象名称之间的映射。客户端可以使用它用名称替换数据响应中的标识符，以便提供更有意义的数据表视图。

_rows_ 数组包含维度数据表。它包含具有维度项（对象或期间标识符）的列和具有聚合数据值的列。上面的示例响应有一个数据/指标列、一个周期列和一个值列。第一列包含指标标识符，第二列包含 ISO 周期标识符，第三列包含聚合数据值。

### 约束与验证 { #webapi_analytics_constraints }

您可以提供给分析资源的输入参数有几个限制。如果违反任何约束，API 将返回 _409 Conflict_ 响应和类似于以下内容的响应消息：

```json
{
    "httpStatus": "Conflict",
    "httpStatusCode": 409,
    "status": "ERROR",
    "message": "Only a single indicator can be specified as filter",
    "errorCode": "E7108"
}
```

The `httpStatus` and `httpStatusCode` fields indicate the HTTP status and status code per the HTTP specification. The `message` field provides a human-readable description of the validation error. The `errorCode` field provides a machine-readable code which can be used by clients to handle validation errors. The possible validation errors for the aggregate analytics API are described in the table below.

| 错误代码 | 信息 |
| --- | --- |
| E7100 | 查询参数不能为空 |
| E7101 | 必须至少指定一个尺寸 |
| E7102 | 必须至少指定一个数据维项目或数据元素组集合维项目 |
| E7103 | 尺寸不能同时指定为尺寸和过滤器 |
| E7104 | 必须至少指定一个期间作为维度或过滤器，或者开始和日期 |
| E7105 | 不能同时指定期间，开始日期和结束日期 |
| E7106 | 开始日期不能晚于结束日期 |
| E7107 | 无法为报告费率指定开始日期和结束日期 |
| E7108 | 只能将一个指标指定为过滤器 |
| E7109 | 只能将单个报告率指定为过滤器 |
| E7110 | 类别选项组合不能指定为过滤器 |
| E7111 | 尺寸不能多次指定 |
| E7112 | 只能与类型的尺寸一起指定报告率 |
| E7113 | 未指定数据元素时无法指定分配的类别 |
| E7114 | 指定的类别只能与数据元素一起指定，不能与指标或报告率一起指定 |
| E7115 | 数据元素必须具有允许聚合的值和聚合类型 |
| E7116 | 指标表达式不能包含循环引用 |
| E7117 | 当输出格式为DATA_VALUE_SET时，必须指定数据尺寸“ dx” |
| E7118 | 当输出格式为DATA_VALUE_SET时，必须指定期间尺寸“ pe” |
| E7119 | 当输出格式为DATA_VALUE_SET时，必须指定组织单位维度“ ou” |
| E7120 | 不允许用户查看组织单位 |
| E7121 | 不允许用户读取对象的数据 |
| E7122 | 数据批准级别不存在 |
| E7123 | 当前用户受维度限制，但无权访问任何维度项目 |
| E7124 | 维度存在于查询中，没有任何有效的维度选项 |
| E7125 | 维度标识符未引用任何维度 |
| E7126 | 列必须作为查询中的维存在 |
| E7127 | 行必须作为查询中的维存在 |
| E7128 | 查询结果集超出最大限制 |
| E7129 | 程序已指定但不存在 |
| E7130 | 已指定程序阶段，但不存在 |
| E7131 | 查询失败，可能是因为查询超时 |

### 数据值设定格式 { #webapi_analytics_data_value_set_format }

Analytics _dataValueSet_ 资源允许以数据值集格式返回聚合数据。此格式表示原始数据值，而不是沿各个维度聚合的数据。当目标系统包含比目标系统存储的数据更细粒度的数据时，将聚合数据导出为常规数据值对于系统之间的数据交换非常有用。

例如，可以在目标系统中指定一个指标来
汇总多个数据元素的数据并将此数据导入
目标系统中的单个数据元素。再举一个例子，一个
可以汇总在目标的组织单位级别 4 收集的数据
系统级别 2 并将该数据导入目标系统。

您可以从原始数据值集格式中检索数据
数据值集资源：

    / api / 33 / analytics / dataValueSet

支持以下资源表示形式：

-   json（应用程序/ json）

-   xml（应用程序/ xml）

使用数据值集格式时，必须正好三个维度
指定为分析维度，每个维度至少有一个维度项目：

-   资料（dx）

-   周期（pe）

-   组织单位（ou）

任何其他维度都将被忽略。过滤器将被应用
定期分析请求。请注意，任何数据维度类型都可以
指定，包括指示符、数据元素、数据元素操作数、
数据集和计划指标。

汇总特定指标数据的示例请求，
期间和组织单位并将其作为常规数据值返回
XML 看起来像这样：

    api / analytics / dataValueSet.xml？dimension = dx：Uvn6LCg7dVU; OdiHJayrsKo
      ＆dimension = pe：LAST_4_QUARTERS＆dimension = ou：lc3eMKXaEfw; PMa2VCrupOd

聚合数据元素操作数的数据并使用 CODE 的请求
因为输出标识符方案如下所示。当定义
输出标识符方案，响应的所有元数据对象部分都是
做作的：

    api / analytics / dataValueSet.json？dimension = dx：fbfJHSPpUQD.pq2XI5kz2BY; fbfJHSPpUQD.PT59n8BQbqM
      ＆dimension = pe：LAST_12_MONTHS＆dimension = ou：ImspTQPwCqd＆outputIdScheme = CODE

使用基于属性的标识符方案进行导出时存在风险
产生重复的数据值。布尔查询参数
duplicatesOnly 可用于调试目的仅返回
重复数据值。此响应可用于清理
重复：

    api / analytics / dataValueSet.xml？dimension = dx：Uvn6LCg7dVU; OdiHJayrsKo
      ＆dimension = pe：LAST_4_QUARTERS＆dimension = ou：lc3eMKXaEfw＆duplicatesOnly = true

### 原始数据格式 { #webapi_analytics_raw_data }

Analytics _rawData_ 资源允许返回存储在分析数据表中的数据，而不执行任何聚合。这对于想要自行执行聚合和过滤而不必自行对可用数据维度中的数据进行非规范化的客户非常有用。

    / api / analytics / rawData

支持以下资源表示形式：

-   json（应用程序/ json）

-   csv（应用程序/ csv）

该资源遵循常规分析资源的语法。仅支持查询参数的子集。此外，还可以使用 _startDate_ 和 _endDate_ 参数。下表列出了支持的参数。

 <table>
 查询参数<caption> </caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需/注释</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>尺寸</td>
 <td>是</td>
 </tr>
 <tr class="even">
 <td>开始日期</td>
 <td>否/ yyyy-MM-dd </td>
 </tr>
 <tr class="odd">
 <td>结束日期</td>
 <td>否/ yyyy-MM-dd </td>
 </tr>
 <tr class="even">
 <td> skipMeta </td>
 <td>否</td>
 </tr>
 <tr class="odd">
 <td> skipData </td>
 <td>否</td>
 </tr>
 <tr class="even">
 <td>层次结构元</td>
 <td>否</td>
 </tr>
 <tr class="odd">
 <td> showHierarchy </td>
 <td>否</td>
 </tr>
 <tr class="even">
 <td> displayProperty </td>
 <td>否</td>
 </tr>
 <tr class="odd">
 <td> outputIdScheme </td>
 <td>否</td>
 </tr>
 <tr class="even">
 <td> inputIdScheme </td>
 <td>否</td>
 </tr>
 <tr class="odd">
 <td> userOrgUnit </td>
 <td>否</td>
 </tr>
 </tbody>
 </table>

_dimension_ 查询参数定义响应中应包含哪些维度（表列）。它可以选择性地受到项目的约束。 _filter_ 查询参数定义应将哪些项目和维度（表列）用作响应的过滤器。

对于组织单位维度，响应将包含数据
与组织单位和该组织中的所有组织单位相关联
子层次结构（树中的孩子）。这与
常规分析资源，其中只有明确选择的
包括组织单位。

要检索具有特定数据元素、特定时间段的响应，
两个自定义维度的特定组织单位和所有数据
可以发出这样的请求：

    /api/analytics/rawData.json?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU;Jtf34kNZhzP
      ＆dimension = J5jldMd8OHv＆dimension = Bpx0589u8y0
      ＆dimension = pe：LAST_12_MONTHS
      ＆dimension = ou：O6uvpzGd5pu; fdc6uOvgoji

_startDate_ 和 _endDate_ 参数允许获取链接到这些日期之间的任何时间段的数据。这避免了在请求中明确定义所有周期的需要：

    /api/analytics/rawData.json?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU;Jtf34kNZhzP
      ＆dimension = J5jldMd8OHv＆dimension = Bpx0589u8y0
      ＆startDate = 2015-01-01＆endDate = 2015-12-31
      ＆dimension = ou：O6uvpzGd5pu; fdc6uOvgoji

_filter_ 参数可用于过滤响应，而不包含该维度作为响应的一部分，这次是 CSV 格式：

    /api/analytics/rawData.csv?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU;Jtf34kNZhzP
      ＆filter = J5jldMd8OHv：uYxK4wmcPqA; tDZVQ1WtwpA
      ＆startDate = 2015-01-01＆endDate = 2015-12-31
      ＆dimension = ou：O6uvpzGd5pu

如果您想要人类可读的数据响应，则 _outputIdScheme_ 参数非常有用，因为它可以设置为 _NAME_，如下所示：

    /api/analytics/rawData.csv?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      ＆filter = J5jldMd8OHv：uYxK4wmcPqA; tDZVQ1WtwpA
      ＆startDate = 2017-01-01＆endDate = 2017-12-31
      ＆dimension = ou：O6uvpzGd5pu
      ＆outputIdScheme = NAME

来自 _rawData_ 资源的响应看起来与常规分析资源相同；不同之处在于，响应包含原始的非聚合数据，适合第三方系统进一步聚合。

### 调试 { #webapi_analytics_debugging }

调试分析请求时，检查聚合分析响应的数据值源可能很有用。 _analytics/debug/sql_资源将提供一条SQL语句，该语句返回datavalue表的相关内容。您可以通过执行内容类型为“text/html”或“text/plain”的 GET 请求来生成此 SQL，如下所示。维度和过滤器语法与常规分析查询相同：

    / api / analytics / debug / sql？dimension = dx：fbfJHSPpUQD; cYeuwXTCPkU
      ＆filter = pe：2016Q1; 2016Q2＆filter = ou：O6uvpzGd5pu

## 事件分析 { #webapi_event_analytics }

事件分析 API 允许您访问聚合事件数据并查询 DHIS2 中捕获的_事件_。此资源允许您根据程序和可选的程序阶段检索事件，并允许您在任何事件维度上检索和过滤事件。

    / api / 33 / analytics / events

### 尺寸和项目 { #webapi_event_analytics_dimensions_items }

事件维度包括数据元素、属性、组织单位
和时期。聚合的事件分析资源将返回
聚合信息，例如计数或平均值。查询分析
资源将简单地返回匹配一组条件的事件，并且不会
不执行任何聚合。您可以在表单中指定维度项
来自选项集的选项和来自数据图例集的图例
与此相关的元素和属性。事件
尺寸如下表所示。

<table>
<caption>Event dimensions</caption>
<colgroup>
<col style="width: 27%" />
<col style="width: 11%" />
<col style="width: 60%" />
</colgroup>
<thead>
<tr class="header">
<th>Dimension</th>
<th>Dimension id</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Data elements</td>
<td>&lt;id&gt;</td>
<td>Data element identifiers</td>
</tr>
<tr class="even">
<td>Attributes</td>
<td>&lt;id&gt;</td>
<td>Attribute identifiers</td>
</tr>
<tr class="odd">
<td>Periods</td>
<td>pe</td>
<td>ISO periods and relative periods, see &quot;date and period format&quot;</td>
</tr>
<tr class="even">
<td>Organisation units</td>
<td>ou</td>
<td>Organisation unit identifiers and keywords USER_ORGUNIT, USER_ORGUNIT_CHILDREN, USER_ORGUNIT_GRANDCHILDREN, LEVEL-&lt;level&gt; and OU_GROUP-&lt;group-id&gt;</td>
</tr>
<tr class="odd">
<td>Organisation unit group sets</td>
<td>&lt;org unit group set id&gt;</td>
<td>Organisation unit group set identifiers</td>
</tr>
<tr class="even">
<td>Categories</td>
<td>&lt;category id&gt;</td>
<td>Category identifiers (program attribute categories only)</td>
</tr>
</tbody>
</table>

### 请求查询参数 { #webapi_event_analytics_request_query_parameters }

Analytics事件API可让您指定一系列查询参数。

 <table>
 <caption> 事件查询和聚合分析的查询参数 </caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 11%" />
 <col style="width: 48%" />
 <col style="width: 19%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 需要 </th>
 <th> 说明 </th>
 <th> 选项（默认第一个） </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 程序 </td>
 <td> 是 </td>
 <td> 程序标识符。 </td>
 <td> 任何程序标识符 </td>
 </tr>
 <tr class="even">
 <td> 阶段 </td>
 <td> 否 </td>
 <td> 节目阶段标识符。 </td>
 <td> 任何程序阶段标识符 </td>
 </tr>
 <tr class="odd">
 <td> 开始日期 </td>
 <td> 是 </td>
 <td> 活动的开始日期。 </td>
 <td> yyyy-MM-dd 格式的日期 </td>
 </tr>
 <tr class="even">
 <td> 结束日期 </td>
 <td> 是 </td>
 <td> 活动的结束日期。 </td>
 <td> yyyy-MM-dd 格式的日期 </td>
 </tr>
 <tr class="odd">
 <td> 尺寸 </td>
 <td> 是 </td>
 <td> 维标识符，包括数据元素、属性、计划指标、期间、组织单位和组织单位组集。参数可以重复任意次数。项目过滤器可以应用于 &lt;item-id&gt;:&lt;operator&gt;:&lt;filtera001087z0.过滤器值不区分大小写。 </td>
 <td> 算子可以EQ | GT |通用电气 | LT |乐 |东北 |喜欢 |在 </td>
 </tr>
 <tr class="even">
 <td> 过滤器 </td>
 <td> 否 </td>
 <td> 维度标识符，包括数据元素、属性、期间、组织单位和组织单位组集。参数可以重复任意次数。项目过滤器可以应用于 &lt;item-id&gt;:&lt;operator&gt;:&lt;filtera001087z0.过滤器值不区分大小写。 </td>
 <td> </td>
 </tr>
 <tr class="odd">
 <td>hierarchyMeta </td>
 <td> 否 </td>
 <td> 在元数据中包含组织单元祖先的名称和组织单元的层次结构路径。 </td>
 <td> 假 |真 </td>
 </tr>
 <tr class="even">
 <td> eventStatus </td>
 <td> 否 </td>
 <td> 指定要包括的事件的状态。 </td>
 <td> ACTIVE |已完成 |日程 |逾期 |跳过 </td>
 </tr>
 <tr class="odd">
 <td> 程序状态 </td>
 <td> 否 </td>
 <td> 指定要包括的事件的注册状态。 </td>
 <td> ACTIVE |已完成 |取消 </td>
 </tr>
 <tr class="even">
 <td> relativePeriodDate </td>
 <td> 字符串 </td>
 <td> 否 </td>
 <td> 日期标识符，例如：&quot;2016-01-01&quot;。覆盖相对时间段 </td> 的开始日期
 </tr>
 <tr class="odd">
 <td> 列 </td>
 <td> 否 </td>
 <td> 用作表格布局列的尺寸。 </td>
 <td> 任意维度（必须是查询维度） </td>
 </tr>
 <tr class="even">
 <td> 行 </td>
 <td> 否 </td>
 <td> 用作表格布局行的尺寸。 </td>
 <td> 任意维度（必须是查询维度） </td>
 </tr>
 </tbody>
 </table>

 <table>
 <caption> 仅用于事件查询分析的查询参数 </caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 11%" />
 <col style="width: 48%" />
 <col style="width: 19%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 需要 </th>
 <th> 说明 </th>
 <th> 选项 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ouMode </td>
 <td> 否 </td>
 <td> 选择组织单位的方式。默认值为 DESCENDANTS，表示层次结构中的所有子单元。 CHILDREN 是指层次结构中的直系孩子； SELECTED 仅指选定的组织单位。 </td>
 <td> 后代，儿童，选定 </td>
 </tr>
 <tr class="even">
 <td> 升序 </td>
 <td> 否 </td>
 <td> 要升序排序的维度，可以参考事件日期、组织单位名称和代码以及任何项目标识符。 </td>
 <td> 事件日期 | OUNAME |欧码 |项目标识符 </td>
 </tr>
 <tr class="odd">
 <td> 描述 </td>
 <td> 否 </td>
 <td> 降序排列的维度，可以参考事件日期、组织单位名称和代码以及任何项目标识符。 </td>
 <td> 事件日期 | OUNAME |欧码 |项目标识符 </td>
 </tr>
 <tr class="even">
 <td>坐标只有</td>
 <td> 否 </td>
 <td> 是否只返回有坐标的事件。 </td>
 <td> 假 |真 </td>
 </tr>
 <tr class="odd">
 <td> dataIdScheme </td>
 <td> 否 </td>
 <td> 用于数据的 Id 方案，更具体地说是具有选项集或图例集的数据元素和属性，例如在数据响应中返回选项的名称而不是代码，或图例的名称而不是图例 ID。 </td>
 <td> 名称 |代码 | UID </td>
 </tr>
 <tr class="even">
 <td> 页面 </td>
 <td> 否 </td>
 <td> 页码。默认页面为 1。</td>
 <td> 数字正值 </td>
 </tr>
 <tr class="odd">
 <td> 页面大小 </td>
 <td> 否 </td>
 <td> 页面大小。默认大小为每页 50 个项目。 </td>
 <td> 数字零或正值 </td>
 </tr>
 </tbody>
 </table>

 <table>
 <caption>仅用于汇总事件分析的查询参数</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 11%" />
 <col style="width: 48%" />
 <col style="width: 19%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 <th>选项</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>值</td>
 <td>否</td>
 <td>值维度标识符。可以是数据元素或必须为数值类型的属性。 </td>
 <td>数据元素或属性标识符</td>
 </tr>
 <tr class="even">
 <td>聚合类型</td>
 <td>否</td>
 <td>值维的聚合类型。默认值为AVERAGE。 </td>
 总和| <td>平均AVERAGE_SUM_ORG_UNIT |最后| LAST_AVERAGE_ORG_UNIT | COUNT | STDDEV |差异| MIN |最大</td>
 </tr>
 <tr class="odd">
 <td> showHierarchy </td>
 <td>否</td>
 <td>显示完整的组织单位层次结构路径以及组织单位名称。 </td>
 否| <td>假|真</td>
 </tr>
 <tr class="even">
 <td> displayProperty </td>
 <td>否</td>
 <td>为元数据显示的属性。 </td>
 名称| <td>简称：</td>
 </tr>
 <tr class="odd">
 <td> sortOrder </td>
 <td>否</td>
 <td>按升序或降序对value列上的记录进行排序。 </td>
 <td> ASC | DESC </td>
 </tr>
 <tr class="even">
 <td>限制</td>
 <td>否</td>
 <td>要返回的最大记录数。不能大于10000。</td>
 <td>数值正值</td>
 </tr>
 <tr class="odd">
 <td>输出类型</td>
 <td>否</td>
 <td>指定分析数据的输出类型，可以是事件，注册或跟踪的实体实例。最后两个选项仅适用于注册程序。 </td>
 事件| <td>事件|报名| TRACKED_ENTITY_INSTANCE </td>
 </tr>
 <tr class="even">
 <td> crashDataDimensions </td>
 <td>否</td>
 <td>将所有数据维度（数据元素和属性）折叠为响应中的单个维度。 </td>
 否| <td>假|真</td>
 </tr>
 <tr class="odd">
 <td> skipMeta </td>
 <td>否</td>
 <td>排除响应的元数据部分（提高性能）。 </td>
 否| <td>假|真</td>
 </tr>
 <tr class="even">
 <td> skipData </td>
 <td>否</td>
 <td>排除响应的数据部分。 </td>
 否| <td>假|真</td>
 </tr>
 <tr class="odd">
 <td> skipRounding </td>
 <td>否</td>
 <td>跳过汇总数据值的舍入。 </td>
 否| <td>假|真</td>
 </tr>
 <tr class="even">
 <td>聚合数据</td>
 <td>否</td>
 <td>生成数据维度的汇总值（与维度项目相反）。 </td>
 否| <td>假|真</td>
 </tr>
 <tr class="odd">
 <td> timeField </td>
 <td>否</td>
 <td>事件聚合所基于的时间字段。仅适用于事件数据项。可以是预定义的选项，也可以是具有基于时间的值类型的属性或数据元素的ID。 </td>
 EVENT_DATE | <td> ENROLLMENT_DATE | INCIDENT_DATE | DUE_DATE | COMPLETED_DATE |属性ID&gt; | &lt; &lt;数据元素ID&gt; </td>
 </tr>
 <tr>
 <td> orgUnitField </td>
 <td>否</td>
 <td>事件汇总所基于的组织单位字段。仅适用于事件数据项。可以是具有组织单位值类型的属性或数据元素的ID。默认选项被指定为省略查询参数。
 属性ID&gt; | <td> &lt; &lt;数据元素ID&gt; </td>
 </tr>
 </tbody>
 </table>

 <table>
 <caption>仅用于集群事件分析的查询参数</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 11%" />
 <col style="width: 49%" />
 <col style="width: 19%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 <th>选项</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> clusterSize </td>
 <td>是</td>
 <td>集群的大小（以米为单位）。 </td>
 <td>数值正值</td>
 </tr>
 <tr class="even">
 <td>坐标字段</td>
 <td>否</td>
 <td>地理空间事件分析的基础字段。默认为事件。可以设置为属性的标识符和值类型坐标的数据元素。 </td>
 事件| <td>事件| &lt;attribute-id&gt; | &lt;dataelement-id&gt; </td>
 </tr>
 <tr class="odd">
 <td> bbox </td>
 <td>是</td>
 <td>响应中要包括的边界框/事件区域，格式为&quot;min经度，最小纬度，最大经度，最大纬度&quot;。 </td>
 <td>字符串</td>
 </tr>
 <tr class="even">
 <td> includeClusterPoints </td>
 <td>否</td>
 <td>包括有关每个群集的基础点的信息，如果群集代表的点数量非常多，请小心。 </td>
 否| <td>假|真</td>
 </tr>
 </tbody>
 </table>

### 事件查询分析 { #webapi_event_query_analytics }

_analytics/events/query_ 资源可让您查询捕获的事件。此资源不执行任何聚合，而是允许您查询和筛选有关事件的信息。

    / api / 33 / analytics / events / query

您可以指定任意数量的维度和任意数量的过滤器
询问。维度项标识符可以引用任何数据元素，
人员属性、人员标识符、固定和相对时间段以及
组织单位。维度可以选择有一个查询运算符和
一个过滤器。事件查询应采用所描述的格式
    以下。

    / api / 33 / analytics / events / query / <program-id>？startDate = yyyy-MM-dd＆endDate = yyyy-MM-dd
      ＆dimension = ou：<ou-id>; <ou-id>＆dimension = <item-id>＆dimension = <item-id>：<operator>：<filter>

例如，要从“住院发病率和
2016 年 1 月至 10 月期间的死亡率”计划，其中“性别”
和“年龄”数据元素被包括在内并且“年龄”维度被过滤
在“18”上，您可以使用以下内容
    询问：

    / api / 33 / analytics / events / query / eBAyeGv0exc？startDate = 2016-01-01＆endDate = 2016-10-31
      ＆dimension = ou：O6uvpzGd5pu; fdc6uOvgoji＆dimension = oZg33kd9taw＆dimension = qrur9Dvnyt5：EQ：18

检索“Child”的“Birth”程序阶段的事件
2016 年 3 月至 12 月期间的“计划”计划，其中“重量”
数据元素，过滤大于
    2000年：

    / api / 33 / analytics / events / query / IpHINAT79UW？stage = A03MvHHogjR＆startDate = 2016-03-01
      ＆endDate = 2016-12-31＆dimension = ou：O6uvpzGd5pu＆dimension = UXz7xuGCEhU：GT：2000

排序可以应用于查询事件的事件日期和
任何尺寸。按事件日期降序和升序排序
您可以使用的“年龄”数据元素维度
    用：

    / api / 33 / analytics / events / query / eBAyeGv0exc？startDate = 2016-01-01＆endDate = 2016-10-31
      ＆dimension = ou：O6uvpzGd5pu＆dimension = qrur9Dvnyt5＆desc = EVENTDATE＆asc = qrur9Dvnyt5

分页可以通过指定页码和
页面大小参数。如果指定了页码但未指定页面大小，
将使用 50 的页面大小。如果指定了页面大小但页面
number 不是，将使用页码 1。获取第三页
页面大小为 20 的响应，您可以使用类似的查询
    这：

    / api / 33 / analytics / events / query / eBAyeGv0exc？startDate = 2016-01-01＆endDate = 2016-10-31
      ＆dimension = ou：O6uvpzGd5pu＆dimension = qrur9Dvnyt5＆page = 3＆pageSize = 20

#### 筛选 { #filtering }

过滤器可以应用于数据元素，人员属性和人员标识符。过滤是通过以下格式的查询参数值完成的：

    ＆dimension = <item-id>：<operator>：<filter-value>

例如，您可以过滤“ Weight”数据元素以获取大于2000且小于4000的值，如下所示：

    ＆dimension = UXz7xuGCEhU：GT：2000＆dimension = UXz7xuGCEhU：LT：4000

您可以使用以下方法过滤多个特定年龄的“年龄”数据元素
像这样的 IN 运算符：

    ＆dimension = qrur9Dvnyt5：IN：18; 19; 20

您可以通过重复运算符和过滤器组件为给定项目指定多个过滤器，所有组件均用分号分隔：

    ＆dimension = qrur9Dvnyt5：GT：5：LT：15

下面列出了可用的运算符。

 <table>
 <caption> 过滤运算符 </caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 80%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 操作员 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> EQ </td>
 <td> 等于 </td>
 </tr>
 <tr class="even">
 <td> GT </td>
 <td> 大于 </td>
 </tr>
 <tr class="odd">
 <td> GE </td>
 <td> 大于等于</td>
 </tr>
 <tr class="even">
 <td> LT </td>
 <td> 小于</td>
 </tr>
 <tr class="odd">
 <td> LE </td>
 <td> 小于等于</td>
 </tr>
 <tr class="even">
 <td> NE </td>
 <td> 不等于 </td>
 </tr>
 <tr class="odd">
 <td> LIKE </td>
 <td> 喜欢（自由文本匹配） </td>
 </tr>
 <tr class="even">
 <td> 在 </td>
 <td> 等于由 &quot;;&quot; </td> 分隔的多个值之一
 </tr>
 </tbody>
 </table>

#### 回应格式 { #response-formats }

默认响应表示格式为 JSON。请求必须使用 HTTP _GET_ 方法。支持以下响应格式。

-   json（应用程序/ json）

-   jsonp（应用程序/ javascript）

-   xls（application / vnd.ms-excel）

例如，要获得Excel格式的响应，可以在请求URL中使用文件扩展名，如下所示：

    /api/33/analytics/events/query/eBAyeGv0exc.xls?startDate=2016-01-01&endDate=2016-10-31
      ＆dimension = ou：O6uvpzGd5pu＆dimension = oZg33kd9taw＆dimension = qrur9Dvnyt5

您可以将hierarchyMeta 查询参数设置为true，以便
在元部分中包括所有祖先组织单位的名称
响应：

    / api / 33 / analytics / events / query / eBAyeGv0exc？startDate = 2016-01-01＆endDate = 2016-10-31
      ＆dimension = ou：YuQRtpLP10I＆dimension = qrur9Dvnyt5：EQ：50＆hierarchyMeta = true

默认响应JSON格式将类似于以下内容：

```json
{
    "headers": [
        {
            "name": "psi",
            "column": "Event",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "ps",
            "column": "Program stage",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "eventdate",
            "column": "Event date",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "coordinates",
            "column": "Coordinates",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "ouname",
            "column": "Organisation unit name",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "oucode",
            "column": "Organisation unit code",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "ou",
            "column": "Organisation unit",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "oZg33kd9taw",
            "column": "Gender",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "qrur9Dvnyt5",
            "column": "Age",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        }
    ],
    "metaData": {
        "names": {
            "qrur9Dvnyt5": "Age",
            "eBAyeGv0exc": "Inpatient morbidity and mortality",
            "ImspTQPwCqd": "Sierra Leone",
            "O6uvpzGd5pu": "Bo",
            "YuQRtpLP10I": "Badjia",
            "oZg33kd9taw": "Gender"
        },
        "ouHierarchy": {
            "YuQRtpLP10I": "/ImspTQPwCqd/O6uvpzGd5pu"
        }
    },
    "width": 8,
    "height": 4,
    "rows": [
        [
            "yx9IDINf82o",
            "Zj7UnCAulEk",
            "2016-08-05",
            "[5.12, 1.23]",
            "Ngelehun",
            "OU_559",
            "YuQRtpLP10I",
            "Female",
            "50"
        ],
        [
            "IPNa7AsCyFt",
            "Zj7UnCAulEk",
            "2016-06-12",
            "[5.22, 1.43]",
            "Ngelehun",
            "OU_559",
            "YuQRtpLP10I",
            "Female",
            "50"
        ],
        [
            "ZY9JL9dkhD2",
            "Zj7UnCAulEk",
            "2016-06-15",
            "[5.42, 1.33]",
            "Ngelehun",
            "OU_559",
            "YuQRtpLP10I",
            "Female",
            "50"
        ],
        [
            "MYvh4WAUdWt",
            "Zj7UnCAulEk",
            "2016-06-16",
            "[5.32, 1.53]",
            "Ngelehun",
            "OU_559",
            "YuQRtpLP10I",
            "Female",
            "50"
        ]
    ]
}
```

响应的_headers_部分描述了查询结果的内容。事件唯一标识符、节目阶段标识符、事件日期、组织单位名称、组织单位代码和组织单位标识符显示为响应中的前六个维度，并且将始终存在。接下来是在请求中指定为维度的数据元素、人员属性和人员标识符，在本例中为“性别”和“年龄”数据元素维度。标题部分在“名称”属性中包含维度项的标识符，在“列”属性中包含可读的维度描述。

_metaData_ 部分，_ou_ 对象包含响应中存在的所有组织单元的标识符，映射到表示层次结构的字符串。该层次结构字符串列出了从根开始的组织单位的祖先（父级）的标识符。 _names_ 对象包含响应中映射到其名称的所有项目的标识符。

_rows_ 部分包含查询生成的事件。每一行恰好代表一个事件。

为了让事件分析资源生成现成表形式的数据，您可以提供 _rows_ 和 _columns_ 参数，其中所请求的维度标识符以分号分隔作为值，以指示将哪些维度用作表列和行。事件分析资源现在将生成表布局中的数据，而不是生成普通的标准化数据源。列和行维度必须作为查询中的数据维度（而不是筛选器）出现。这样的请求可以如下所示：

    /api/33/analytics.html+css?dimension=dx:cYeuwXTCPkU;fbfJHSPpUQD&dimension=pe:WEEKS_THIS_YEAR
      ＆filter = ou：ImspTQPwCqd＆displayProperty = SHORTNAME＆columns = dx＆rows = pe

### 事件汇总分析 { #webapi_event_aggregate_analytics }

The `/analytics/events/aggregate` resource lets you retrieve _aggregated numbers_ of events captured in DHIS2. This resource lets you retrieve aggregate data based on a program and optionally a program stage, and lets you filter on any event dimension.

    / api / 33 / analytics / events / aggregate

事件聚合资源不返回事件信息
本身，而不是与请求匹配的事件总数
询问。事件维度包括数据元素、人员属性、人员
标识符、期间和组织单位。聚合事件查询
应该是下面描述的格式。

    / api / 33 / analytics / events / aggregate / <program-id>？startDate = yyyy-MM-dd＆endDate = yyyy-MM-dd
      ＆dimension = ou：<ou-id>; <ou-id>＆dimension = <item-id>＆dimension = <item-id>：<operator>：<filter>

例如，要从
1 月至 10 月期间的“住院发病率和死亡率”计划
2016 年，其中包含“性别”和“年龄”数据元素，“年龄”
维度项目在“18”上过滤，“性别”项目在过滤上
“女性”，您可以使用以下查询：

    / api / 33 / analytics / events / aggregate / eBAyeGv0exc？startDate = 2016-01-01＆endDate = 2016-10-31
      ＆dimension = ou：O6uvpzGd5pu＆dimension = oZg33kd9taw：EQ：Female＆dimension = qrur9Dvnyt5：GT：50

检索固定和相对时期的数据，而不是开始和结束
日期，在本例中为 2016 年 5 月和过去 12 个月，以及组织
与当前用户关联的单位，可以使用以下查询：

    / api / 33 / analytics / events / aggregate / eBAyeGv0exc？dimension = pe：201605; LAST_12_MONTHS
      ＆dimension = ou：USER_ORGUNIT; fdc6uOvgo7ji＆dimension = oZg33kd9taw

为了将“女性”指定为数据的“性别”过滤器
响应，意思是“性别”不会是响应的一部分，但会
过滤其中的聚合数字，您可以使用以下语法：

    / api / 33 / analytics / events / aggregate / eBAyeGv0exc？dimension = pe：2016;
      ＆dimension = ou：O6uvpzGd5pu＆filter = oZg33kd9taw：EQ：Female

要将“Bo”组织单位和期间“2016”指定为过滤器，
和“放电方式”和“性别”作为维度，其中“性别”是
在“男性”项目上过滤，您可以使用这样的查询：

    / api / 33 / analytics / events / aggregate / eBAyeGv0exc？filter = pe：2016＆filter = ou：O6uvpzGd5pu
      ＆dimension = fWIAEtYVEGk＆dimension = oZg33kd9taw：EQ：Male

要为_出院模式_创建“前 3 名报告”，您可以使用限制
和 sortOrder 查询参数类似：

    / api / 33 / analytics / events / aggregate / eBAyeGv0exc？filter = pe：2016＆filter = ou：O6uvpzGd5pu
      ＆dimension = fWIAEtYVEGk＆limit = 3＆sortOrder = DESC

要指定具有相应聚合类型的值维度，您
可以使用 value 和aggregationType 查询参数。指定一个
值维度将使分析引擎返回聚合值
对于响应中该维度的值，而不是计数
事件。

    /api/33/analytics/events/aggregate/eBAyeGv0exc.json?stage=Zj7UnCAulEk
      &维度=ou:ImspTQPwCqd&维度=pe:LAST_12_MONTHS&维度=fWIAEtYVEGk
      &value=qrur9Dvnyt5&aggregationType=AVERAGE

基于特定数据元素或属性的事件分析聚合
对于值类型日期或日期时间，您可以使用 `timeField` 参数：

    /api/33/analytics/events/aggregate/IpHINAT79UW.json?dimension=ou:ImspTQPwCqd
      &维度=pe:LAST_12_MONTHS&维度=cejWyOfXge6&阶段=A03MvHHogjR
      &timeField=ENROLLMENT_DATE

基于特定数据元素或属性的事件分析聚合
对于值类型的组织单元，您可以使用 `orgUnitField` 参数：

    /api/33/analytics/events/aggregate/eBAyeGv0exc.json?dimension=ou:ImspTQPwCqd
      &dimension=pe:THIS_YEAR&dimension=oZg33kd9taw&stage=Zj7UnCAulEk
      &orgUnitField=S33cRBsnXPo

#### 范围/图例集 { #ranges-legend-sets }

对于聚合查询，您可以为数值指定范围/图例集
数据元素和属性维度。目的是将
数值范围内。举个例子，而不是生成数据
对于不同年份的“年龄”数据元素，您可以将
年龄组的信息。为了实现这一点，数据元素或
属性必须与图例集相关联。格式是
如下面所描述的：

    ？dimension = <item-id>-<legend-set-id>

一个示例如下所示：

    /api/33/analytics/events/aggregate/eBAyeGv0exc.json?stage=Zj7UnCAulEk
      ＆dimension = qrur9Dvnyt5-Yf6UHoPkdS6＆dimension = ou：ImspTQPwCqd＆dimension = pe：LAST_MONTH

#### 回应格式 { #response-formats }

默认响应表示格式为 JSON。请求必须使用 HTTP _GET_ 方法。响应将类似于以下内容：

```json
{
    "headers": [
        {
            "name": "oZg33kd9taw",
            "column": "Gender",
            "type": "java.lang.String",
            "meta": false
        },
        {
            "name": "qrur9Dvnyt5",
            "column": "Age",
            "type": "java.lang.String",
            "meta": false
        },
        {
            "name": "pe",
            "column": "Period",
            "type": "java.lang.String",
            "meta": false
        },
        {
            "name": "ou",
            "column": "Organisation unit",
            "type": "java.lang.String",
            "meta": false
        },
        {
            "name": "value",
            "column": "Value",
            "type": "java.lang.String",
            "meta": false
        }
    ],
    "metaData": {
        "names": {
            "eBAyeGv0exc": "Inpatient morbidity and mortality"
        }
    },
    "width": 5,
    "height": 39,
    "rows": [
        ["Female", "95", "201605", "O6uvpzGd5pu", "2"],
        ["Female", "63", "201605", "O6uvpzGd5pu", "2"],
        ["Female", "67", "201605", "O6uvpzGd5pu", "1"],
        ["Female", "71", "201605", "O6uvpzGd5pu", "1"],
        ["Female", "75", "201605", "O6uvpzGd5pu", "14"],
        ["Female", "73", "201605", "O6uvpzGd5pu", "5"]
    ]
}
```

请注意，单个响应中返回的行数的最大限制为 10 000。如果查询生成的行数超过最大限制，将返回 _409 Conflict_ 状态代码。

### 事件聚类分析 { #webapi_event_clustering_analytics }

_analytics/events/cluster_ 资源提供集群地理空间事件数据。请求如下所示：

    / api / 33 / analytics / events / cluster / eBAyeGv0exc？startDate = 2016-01-01＆endDate = 2016-10-31
      ＆dimension = ou：LEVEL-2＆clusterSize = 100000
      ＆bbox = -13.2682125,7.3721619，-10.4261178,9.904012＆includeClusterPoints = false

集群响应提供基础点的计数，中心
每个集群的点和范围。如果 `includeClusterPoints` 查询
参数设置为 true，以逗号分隔的字符串与标识符
包括基础事件。示例响应如下所示：

```json
{
    "headers": [
        {
            "name": "count",
            "column": "Count",
            "type": "java.lang.Long",
            "meta": false
        },
        {
            "name": "center",
            "column": "Center",
            "type": "java.lang.String",
            "meta": false
        },
        {
            "name": "extent",
            "column": "Extent",
            "type": "java.lang.String",
            "meta": false
        },
        {
            "name": "points",
            "column": "Points",
            "type": "java.lang.String",
            "meta": false
        }
    ],
    "width": 3,
    "height": 4,
    "rows": [
        [
            "3",
            "POINT(-13.15818 8.47567)",
            "BOX(-13.26821 8.4St7215,-13.08711 8.47807)",
            ""
        ],
        [
            "9",
            "POINT(-13.11184 8.66424)",
            "BOX(-13.24982 8.51961,-13.05816 8.87696)",
            ""
        ],
        [
            "1",
            "POINT(-12.46144 7.50597)",
            "BOX(-12.46144 7.50597,-12.46144 7.50597)",
            ""
        ],
        [
            "7",
            "POINT(-12.47964 8.21533)",
            "BOX(-12.91769 7.66775,-12.21011 8.49713)",
            ""
        ]
    ]
}
```

### 事件计数和范围分析 { #webapi_event_count_extent_analytics }

_analytics/events/count_ 资源适用于与几何相关的请求，用于检索特定查询的事件的计数和范围（边界框）。查询语法与 _events/query_ 资源相同。请求如下所示：

    / api / 33 / analytics / events / count / eBAyeGv0exc？startDate = 2016-01-01
      ＆endDate = 2016-10-31＆dimension = ou：O6uvpzGd5pu

响应将以JSON格式提供计数和范围：

```json
{
    "extent": "BOX(-13.2682125910096 7.38679562779441,-10.4261178860988 9.90401290212795)",
    "count": 59
}
```

### 约束与验证 { #webapi_event_analytics_constraints }

您可以提供给事件分析资源的输入参数有几个限制。如果违反任何约束，API 将返回 _409 Conflict_ 响应和类似于以下内容的响应消息：

```json
{
    "httpStatus": "Conflict",
    "httpStatusCode": 409,
    "status": "ERROR",
    "message": "At least one organisation unit must be specified",
    "errorCode": "E7200"
}
```

描述了事件分析 API 的可能验证错误
在下表中。

| 错误代码 | 信息 |
| --- | --- |
| E7200 | 必须至少指定一个组织单位 |
| E7201 | 尺寸不能多次指定 |
| E7202 | 不能多次指定查询项 |
| E7203 | 值维也不能指定为项目或项目过滤器 |
| E7204 | 指定聚合类型时，必须指定值维或聚合数据 |
| E7205 | 必须指定开始和结束日期或至少一个期间 |
| E7206 | 开始日期晚于结束日期 |
| E7207 | 页码必须为正数 |
| E7208 | 页面大小必须为零或正数 |
| E7209 | 限制大于最大限制 |
| E7210 | 时间字段无效 |
| E7211 | 组织单位字段无效 |
| E7212 | 群集大小必须为正数 |
| E7213 | Bbox无效，必须采用以下格式：'min-lng，min-lat，max-lng，max-lat' |
| E7214 | 当指定bbox或集群大小时，必须指定集群字段 |
| E7215 | 查询项目不能同时指定图例集和选项集 |
| E7216 | 在汇总查询中使用时，查询项必须是可汇总的 |
| E7217 | 不允许用户查看事件分析数据 |
| E7218 | 未启用空间数据库支持 |
| E7219 | 数据元素必须是值类型坐标才能用作坐标字段 |
| E7220 | 属性必须是坐标值类型，才能用作坐标域 |
| E7221 | 座标栏位无效 |
| E7222 | 查询项目或过滤器无效 |
| E7223 | 值不引用数字元素或程序一部分的数据元素或属性 |
| E7224 | 项目标识符未引用程序的任何数据元素，属性或指标部分 |
| E7225 | 计划阶段对于注册分析查询中的数据元素维度是必需的 |
| E7226 | 维度不是有效的查询项目 |
| E7227 | 不支持关系实体类型 |

## 入学分析 { #webapi_enrollment_analytics }

注册分析 API 允许您访问聚合的事件数据并查询 _enrollments 及其在 DHIS2 中捕获的事件数据_。除了跟踪的实体属性之外，此资源还允许您根据程序阶段和数据元素检索程序的数据。在每个注册中查询特定程序阶段的事件数据时，每个程序阶段的数据元素值将作为来自 api 的响应中的一行返回。如果在可重复的程序阶段查询数据元素，则最新的数据元素值将用于 api 响应中的该数据元素。

### 尺寸和项目 { #webapi_enrollment_analytics_dimensions }

注册维度包括数据元素，属性，组织单位和期间。查询分析资源将仅返回符合一组条件的注册，并且不执行任何汇总。

<table>
<caption>Enrollment dimensions</caption>
<colgroup>
<col style="width: 27%" />
<col style="width: 11%" />
<col style="width: 60%" />
</colgroup>
<thead>
<tr class="header">
<th>Dimension</th>
<th>Dimension id</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Data elements in program stages</td>
<td>&lt;program stage id&gt;.&lt;data element id&gt;</td>
<td>Data element identifiers must include the program stage when querying data for enrollments.

    dimension=edqlbukwRfQ.vANAXwtLwcT

</td>
</tr>
<tr>
<td>Attributes</td>
<td>&lt;id&gt;</td>
<td>Attribute identifiers</td>
</tr>
<tr>
<td>Periods</td>
<td>pe</td>
<td>ISO periods and relative periods, see &quot;date and period format&quot;</td>
</tr>
<tr>
<td>Organisation units</td>
<td>ou</td>
<td>Organisation unit identifiers and keywords USER_ORGUNIT, USER_ORGUNIT_CHILDREN, USER_ORGUNIT_GRANDCHILDREN, LEVEL-&lt;level&gt; and OU_GROUP-&lt;group-id&gt;</td>
</tr>
</tbody>
</table>

### 注册查询分析 { #webapi_enrollment_query_analytics }

_analytics/enrollments/query_ 资源允许您查询捕获的注册。此资源不执行任何聚合，而是允许您查询和筛选有关注册的信息。

    / api / 33 / analytics /招生/查询

您可以在查询中指定任意数量的维度和任意数量的过滤器。维项目标识符可以引用程序阶段，已跟踪实体属性，固定和相对期间以及组织单位中的任何数据元素。维度可以选择具有查询运算符和过滤器。注册查询应采用以下所述的格式。

    / api / 33 / analytics / enrollments / query / <program-id>？startDate = yyyy-MM-dd＆endDate = yyyy-MM-dd
      ＆dimension = ou：<ou-id>; <ou-id>＆dimension = <item-id>＆dimension = <item-id>：<operator>：<filter>

例如，要从2019年1月起从“产前护理”计划中检索入学申请，该计划从属性中提取“名字”，则在第一个计划阶段包括“慢性病”和“吸烟”数据元素，并且来自以下程序阶段的“血红蛋白值”，并且仅包括具有“疯子病”的女性，您可以使用以下查询：

    /api/33/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=ou:ImspTQPwCqd
      ＆dimension = w75KJ2mc4zz＆dimension = WZbXY0S00lP.de0FEHSIoxh：eq：1＆dimension = w75KJ2mc4zz
      ＆dimension = WZbXY0S00lP.sWoqcoByYmD＆dimension = edqlbukwRfQ.vANAXwtLwcT
      ＆startDate = 2019-01-01＆endDate = 2019-01-31

要从上个月（相对于执行查询的时间点）的“产前护理”程序中检索入学登记，其中“慢性病”和“吸烟”数据元素包含在第一程序阶段，而“后续计划阶段的“血红蛋白价值”，仅包括吸烟的血红蛋白少于20岁的女性：

    /api/33/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=ou:ImspTQPwCqd
      ＆dimension = WZbXY0S00lP.de0FEHSIoxh＆dimension = w75KJ2mc4zz
      ＆dimension = WZbXY0S00lP.sWoqcoByYmD：eq：1＆dimension = edqlbukwRfQ.vANAXwtLwcT：lt：20
      ＆dimension = pe：LAST_MONTH

可以将排序应用于注册的查询和注册的事件日期：

    /api/33/analytics/enrollments/query/WSGAb5XwJ3Y.xls?dimension=ou:ImspTQPwCqd
      ＆columns = w75KJ2mc4zz＆dimension = WZbXY0S00lP.sWoqcoByYmD＆dimension = pe：LAST_MONTH
      ＆stage = WZbXY0S00lP＆pageSize = 10＆page = 1＆asc = ENROLLMENTDATE＆ouMode = DESCENDANTS

通过指定页码和页面大小参数，可以将分页应用于查询。如果指定了页码，但未指定页码，则将使用50页码。如果指定了页面大小，但未指定页面号，则将使用页面号1。要获得页面大小为10的响应的第二页，可以使用如下查询：

    /api/33/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=ou:ImspTQPwCqd
      ＆dimension = WZbXY0S00lP.de0FEHSIoxh＆dimension = w75KJ2mc4zz＆dimension = pe：LAST_MONTH
      ＆dimension = WZbXY0S00lP.sWoqcoByYmD＆pageSize = 10＆page = 2

#### 筛选 { #filtering }

过滤器可以应用于数据元素，人员属性和人员标识符。过滤是通过以下格式的查询参数值完成的：

    ＆dimension = <item-id>：<operator>：<filter-value>

例如，您可以过滤“ Weight”数据元素以获取大于2000且小于4000的值，如下所示：

    ＆dimension = WZbXY0S00lP.UXz7xuGCEhU：GT：2000＆dimension = WZbXY0S00lP.UXz7xuGCEhU：LT：4000

您可以使用IN运算符过滤多个特定年龄的“年龄”属性，如下所示：

    ＆dimension = qrur9Dvnyt5：IN：18; 19; 20

您可以通过重复运算符和过滤器组件为给定项目指定多个过滤器，所有组件均用分号分隔：

    ＆dimension = qrur9Dvnyt5：GT：5：LT：15

下面列出了可用的运算符。

 <table>
 <caption> 过滤运算符 </caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 80%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 操作员 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr>
 <td> EQ </td>
 <td> 等于 </td>
 </tr>
 <tr>
 <td> GT </td>
 <td> 大于 </td>
 </tr>
 <tr>
 <td> GE </td>
 <td> 大于等于</td>
 </tr>
 <tr>
 <td> LT </td>
 <td> 小于</td>
 </tr>
 <tr>
 <td> LE </td>
 <td> 小于等于</td>
 </tr>
 <tr>
 <td> NE </td>
 <td> 不等于 </td>
 </tr>
 <tr>
 <td> LIKE </td>
 <td> 喜欢（自由文本匹配） </td>
 </tr>
 <tr>
 <td> 在 </td>
 <td> 等于由 &quot;;&quot; </td> 分隔的多个值之一
 </tr>
 </tbody>
 </table>

### 请求查询参数 { #webapi_enrollment_analytics_query_parameters }

借助Analytics（分析）注册查询API，您可以指定一系列查询参数。

 <table>
 <caption> 注册查询端点的查询参数 </caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 11%" />
 <col style="width: 48%" />
 <col style="width: 19%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 需要 </th>
 <th> 说明 </th>
 <th> 选项（默认第一个） </th>
 </tr>
 </thead>
 <tbody>
 <tr>
 <td> 程序 </td>
 <td> 是 </td>
 <td> 程序标识符。 </td>
 <td> 任何程序标识符 </td>
 </tr>
 <tr>
 <td> 开始日期 </td>
 <td> 否 </td>
 <td> 注册开始日期。 </td>
 <td> yyyy-MM-dd 格式的日期 </td>
 </tr>
 <tr>
 <td> 结束日期 </td>
 <td> 否 </td>
 <td> 注册的结束日期。 </td>
 <td> yyyy-MM-dd 格式的日期 </td>
 </tr>
 <tr>
 <td> 尺寸 </td>
 <td> 是 </td>
 <td> 维标识符，包括数据元素、属性、计划指标、期间、组织单位和组织单位组集。参数可以重复任意次数。项目过滤器可以应用于 &lt;item-id&gt;:&lt;operator&gt;:&lt;filtera001087z0.过滤器值不区分大小写。 </td>
 <td> 算子可以EQ | GT |通用电气 | LT |乐 |东北 |喜欢 |在 </td>
 </tr>
 <tr>
 <td> 过滤器 </td>
 <td> 否 </td>
 <td> 维度标识符，包括数据元素、属性、期间、组织单位和组织单位组集。参数可以重复任意次数。项目过滤器可以应用于 &lt;item-id&gt;:&lt;operator&gt;:&lt;filtera001087z0.过滤器值不区分大小写。 </td>
 <td> </td>
 </tr>
 <tr>
 <td> 程序状态 </td>
 <td> 否 </td>
 <td> 指定要包括的注册的注册状态。 </td>
 <td> ACTIVE |已完成 |取消 </td>
 </tr>
 <tr>
 <td> relativePeriodDate </td>
 <td> 字符串 </td>
 <td> 否 </td>
 <td> 日期标识符，例如：&quot;2016-01-01&quot;。覆盖相对时间段 </td> 的开始日期
 </tr>
 <tr>
 <td> ouMode </td>
 <td> 否 </td>
 <td> 选择组织单位的方式。默认值为 DESCENDANTS，表示层次结构中的所有子单元。 CHILDREN 是指层次结构中的直系孩子； SELECTED 仅指选定的组织单位。 </td>
 <td> 后代，儿童，选定 </td>
 </tr>
 <tr>
 <td> 升序 </td>
 <td> 否 </td>
 <td> 维度升序排列，可参考入会日期、事件日期、组织单位名称和代码。 </td>
 <td> 注册日期 |事件日期| OUNAME | OUCODE </td>
 </tr>
 <tr>
 <td> 描述 </td>
 <td> 否 </td>
 <td> 降序排列的维度，可参考入会日期、事件日期、组织单位名称和代码。 </td>
 <td> 注册日期 |事件日期| OUNAME | OUCODE </td>
 </tr>
 <td>hierarchyMeta </td>
 <td> 否 </td>
 <td> 在元数据中包含组织单元祖先的名称和组织单元的层次结构路径。 </td>
 <td> 假 |真 </td>
 </tr>
 <tr>
 <td>坐标只有</td>
 <td> 否 </td>
 <td> 是否只返回有坐标的注册。 </td>
 <td> 假 |真 </td>
 </tr>
 <tr>
 <td> 页面 </td>
 <td> 否 </td>
 <td> 页码。默认页面为 1。</td>
 <td> 数字正值 </td>
 </tr>
 <tr>
 <td> 页面大小 </td>
 <td> 否 </td>
 <td> 页面大小。默认大小为每页 50 个项目。 </td>
 <td> 数字零或正值 </td>
 </tr>
 </tbody>
 </table>

#### 回应格式 { #response-formats }

默认响应表示格式为 JSON。请求必须使用 HTTP _GET_ 方法。支持以下响应格式。

-   json（应用程序/ json）
-   xml（应用程序/ xml）
-   xls（application / vnd.ms-excel）
-   csv（应用程序/ csv）
-   html（text / html）
-   html + css（text / html）

例如，要获得Excel格式的响应，可以在请求URL中使用文件扩展名，如下所示：

    /api/33/analytics/enrollments/query/WSGAb5XwJ3Y.xls?dimension=ou:ImspTQPwCqd
      ＆dimension = WZbXY0S00lP.de0FEHSIoxh＆columns = w75KJ2mc4zz
      ＆dimension = WZbXY0S00lP.sWoqcoByYmD＆dimension = pe：LAST_MONTH＆stage = WZbXY0S00lP
      ＆pageSize = 10＆page = 1＆asc = ENROLLMENTDATE＆ouMode = DESCENDANTS

默认响应JSON格式将类似于以下内容：

```json
{
    "headers": [
        {
            "name": "pi",
            "column": "Enrollment",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": true
        },
        {
            "name": "tei",
            "column": "Tracked entity instance",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": true
        },
        {
            "name": "enrollmentdate",
            "column": "Enrollment date",
            "valueType": "DATE",
            "type": "java.util.Date",
            "hidden": false,
            "meta": true
        },
        {
            "name": "incidentdate",
            "column": "Incident date",
            "valueType": "DATE",
            "type": "java.util.Date",
            "hidden": false,
            "meta": true
        },
        {
            "name": "geometry",
            "column": "Geometry",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": true
        },
        {
            "name": "longitude",
            "column": "Longitude",
            "valueType": "NUMBER",
            "type": "java.lang.Double",
            "hidden": false,
            "meta": true
        },
        {
            "name": "latitude",
            "column": "Latitude",
            "valueType": "NUMBER",
            "type": "java.lang.Double",
            "hidden": false,
            "meta": true
        },
        {
            "name": "ouname",
            "column": "Organisation unit name",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": true
        },
        {
            "name": "oucode",
            "column": "Organisation unit code",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": true
        },
        {
            "name": "ou",
            "column": "Organisation unit",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": true
        },
        {
            "name": "de0FEHSIoxh",
            "column": "WHOMCH Chronic conditions",
            "valueType": "BOOLEAN",
            "type": "java.lang.Boolean",
            "hidden": false,
            "meta": true
        },
        {
            "name": "sWoqcoByYmD",
            "column": "WHOMCH Smoking",
            "valueType": "BOOLEAN",
            "type": "java.lang.Boolean",
            "hidden": false,
            "meta": true
        }
    ],
    "metaData": {
        "pager": {
            "page": 2,
            "total": 163,
            "pageSize": 4,
            "pageCount": 41
        },
        "items": {
            "ImspTQPwCqd": {
                "name": "Sierra Leone"
            },
            "PFDfvmGpsR3": {
                "name": "Care at birth"
            },
            "bbKtnxRZKEP": {
                "name": "Postpartum care visit"
            },
            "ou": {
                "name": "Organisation unit"
            },
            "PUZaKR0Jh2k": {
                "name": "Previous deliveries"
            },
            "edqlbukwRfQ": {
                "name": "Antenatal care visit"
            },
            "WZbXY0S00lP": {
                "name": "First antenatal care visit"
            },
            "sWoqcoByYmD": {
                "name": "WHOMCH Smoking"
            },
            "WSGAb5XwJ3Y": {
                "name": "WHO RMNCH Tracker"
            },
            "de0FEHSIoxh": {
                "name": "WHOMCH Chronic conditions"
            }
        },
        "dimensions": {
            "pe": [],
            "ou": ["ImspTQPwCqd"],
            "sWoqcoByYmD": [],
            "de0FEHSIoxh": []
        }
    },
    "width": 12,
    "rows": [
        [
            "A0cP533hIQv",
            "to8G9jAprnx",
            "2019-02-02 12:05:00.0",
            "2019-02-02 12:05:00.0",
            "",
            "0.0",
            "0.0",
            "Tonkomba MCHP",
            "OU_193264",
            "xIMxph4NMP1",
            "0",
            "1"
        ],
        [
            "ZqiUn2uXmBi",
            "SJtv0WzoYki",
            "2019-02-02 12:05:00.0",
            "2019-02-02 12:05:00.0",
            "",
            "0.0",
            "0.0",
            "Mawoma MCHP",
            "OU_254973",
            "Srnpwq8jKbp",
            "0",
            "0"
        ],
        [
            "lE747mUAtbz",
            "PGzTv2A1xzn",
            "2019-02-02 12:05:00.0",
            "2019-02-02 12:05:00.0",
            "",
            "0.0",
            "0.0",
            "Kunsho CHP",
            "OU_193254",
            "tdhB1JXYBx2",
            "",
            "0"
        ],
        [
            "nmcqu9QF8ow",
            "pav3tGLjYuq",
            "2019-02-03 12:05:00.0",
            "2019-02-03 12:05:00.0",
            "",
            "0.0",
            "0.0",
            "Korbu MCHP",
            "OU_678893",
            "m73lWmo5BDG",
            "",
            "1"
        ]
    ],
    "height": 4
}
```

响应的_headers_部分描述了查询结果的内容。注册唯一标识符、跟踪的实体实例标识符、注册日期、事件日期、几何形状、纬度、经度、组织单位名称和组织单位代码显示为响应中的第一个维度，并将始终存在。接下来是数据元素，并跟踪在请求中指定为维度的实体属性，在本例中为“WHOMCH 慢性病”和“WHOMCH 吸烟”数据元素维度。标题部分在“名称”属性中包含维度项的标识符，在“列”属性中包含可读的维度描述。

_metaData_ 部分，_ou_ 对象包含响应中存在的所有组织单元的标识符，映射到表示层次结构的字符串。该层次结构字符串列出了从根开始的组织单位的祖先（父级）的标识符。 _names_ 对象包含响应中映射到其名称的所有项目的标识符。

_rows_ 部分包含查询生成的登记。每一行代表一个注册。

### 通过计划指标支持跨跟踪的实体实例关系的分析 { #support-of-analytics-across-tracked-entity-instance-relationships-with-program-indicators }

非汇总注册分析API还支持将程序指示器链接到关系类型，以显示应用于所列出的跟踪实体实例的相关实体的特定程序指示器的计算结果。

![](resources/images/enrollments/enrollments-pi-relationship.jpg)

为了使“程序指示器/关系类型”链接起作用，`/ api / 33 / analytics / enrollments / query` API需要一个附加的维，该维必须包括所选的“关系类型” UID和所选的“程序指示器” UID：

    / api / 33 / analytics / enrollments / query / <program-id>
      ？dimension = <relationshiptype-id>。 <programindicator-id>

例如，要从“ WHO RMNCH Tracker”程序中检索2019年1月的注册列表，并按“与人相关的疟疾病例”类型的关系显示与该注册相关的疟疾病例数，则可以使用以下查询

    /api/33/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=mxZDvSZYxlw.nFICjJluo74
      ＆startDate = 2019-01-01＆endDate = 2019-01-31

API 支持使用与“主”程序（即在`/query/` 之后指定的程序 ID）无关的程序指示符。

## 组织单位分析 { #webapi_org_unit_analytics }

组织单位分析API提供有关按组织单位组集分类的组织单位的统计信息，即组织单位组集中每个组织单位组的组织单位计数。

    GET /api/orgUnitAnalytics?ou=<org-unit-id>&ougs=<org-unit-group-set-id>

该API需要至少一个组织单位和至少一个组织单位组集。可以提供多个组织单位和组集，以分号分隔。

### 请求查询参数 { #request-query-parameters }

组织单位分析资源使您可以指定一系列查询参数：

 <table>
 <caption>组织单位分析查询参数</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 60%" />
 <col style="width: 20%" />
 </colgroup>
 <thead>
 <tr class="header">
 属性<th> </th>
 <th>说明</th>
 <th>必需</th>
 </tr>
 </thead>
 <tbody>
 <tr>
 <td> ou </td>
 <td>组织单位标识符，可能用分号分隔。 </td>
 <td>是</td>
 </tr>
 <tr>
 <td> ougs </td>
 <td>组织单位组标识符，可能用分号分隔。 </td>
 <td>是</td>
 </tr>
 <tr>
 <td>列</td>
 <td>组织单位组标识符，可能用分号分隔。定义将哪些组集呈现为表布局中的列。 </td>
 <td>否</td>
 </tr>
 </tbody>
 </table>

响应将包含用于父组织单位的列，用于请求的每个组织单位组集部分的列以及用于计数的列。统计信息包括组织单位的数量，该组织单位是请求中指定的组织单位的子层次结构的一部分。该响应包含一个元数据部分，该元数据部分指定由其标识符引用的响应的每个组织单位和组织单位组部分的名称。

默认响应使用单个 `count` 列进行标准化。通过使用 `columns` 查询参数指定至少一个组织单位组集，可以在表格布局中呈现响应。

### 回应格式 { #response-formats }

组织单位分析端点支持以下表示格式：

-   json（应用程序/ json）
-   csv（应用程序/ csv）
-   xls（application / vnd.ms-excel）
-   pdf（应用程序/ pdf）

### 例子 { #examples }

要获取组织单位和组织单位组集的组织单位分析，请执行以下操作：

    GET /api/orgUnitAnalytics?ou=lc3eMKXaEfw&ougs=J5jldMd8OHv

要获取两个组织单位和两个组织单位组集合的组织单位分析数据：

    GET /api/orgUnitAnalytics?ou=lc3eMKXaEfw;PMa2VCrupOd&ougs=J5jldMd8OHv;Bpx0589u8y0

要以表格模式获取组织单位分析数据，并将一组设置为列：

    GET / api / orgUnitAnalytics？ou = fdc6uOvgoji; jUb8gELQApl; lc3eMKXaEfw; PMa2VCrupOd
      ＆ougs = J5jldMd8OHv＆列= J5jldMd8OHv

### 约束与验证 { #constraints-and-validation }

下表描述了专门针对组织单位分析API的可能的验证错误。为汇总分析API指定的某些错误也相关。

| 错误代码 | 信息                                                    |
| ---------- | ---------------------------------------------------------- |
| E7300      | 必须至少指定一个组织单位           |
| E7301      | 必须至少指定一个组织单位组集 |

## 数据集报告 { #webapi_data_set_report }

可以使用 web api 生成数据集报告
`/dataSetReport` 资源。此资源生成有关数据集的报告
并以 HTML 表格的形式返回结果。

    / api / 33 / dataSetReport

### 请求查询参数 { #request-query-parameters }

该请求支持以下参数：

 <table>
 <caption>数据集报告查询参数</caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 50%" />
 <col style="width: 17%" />
 <col style="width: 17%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>说明</th>
 <th>类型</th>
 <th>必需</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ds </td>
 <td>用于创建报告的数据集。 </td>
 <td>数据集UID </td>
 <td>是</td>
 </tr>
 <tr class="even">
 <td> pe </td>
 <td>创建报告所依据的期间。 </td>
 <td> ISO字符串</td>
 <td>是</td>
 </tr>
 <tr class="odd">
 <td> ou </td>
 <td>用于创建报告的组织单位。 </td>
 <td>组织单位UID </td>
 <td>是</td>
 </tr>
 <tr class="even">
 <td>过滤器</td>
 <td>用作报表过滤器的过滤器。可以重复多次。遵循分析API语法。 </td>
 <td>一个或多个UID </td>
 <td>否</td>
 </tr>
 <tr class="odd">
 <td> selectedUnitOnly </td>
 <td>是仅使用捕获的数据还是聚合的数据。 </td>
 <td>布尔值</td>
 <td>否</td>
 </tr>
 </tbody>
 </table>

The data set report resource accepts `GET` requests only. The response content type is `application/json` and returns data in a grid. This endpoint works for all types of data sets, including default, section and custom forms.

检索2018年数据集和组织单位报告的示例请求如下所示：

    GET /api/33/dataSetReport?ds=BfMAe6Itzgt&pe=201810&ou=ImspTQPwCqd&selectedUnitOnly=false

要获得带有过滤器的数据集报告，可以使用`filter`参数。在这种情况下，过滤器基于一个组织单位组集和两个组织单位组：

    GET / api / 33 / dataSetReport？ds = BfMAe6Itzgt＆pe = 201810＆ou = ImspTQPwCqd
      ＆filter = J5jldMd8OHv：RXL3lPSK8oG; tDZVQ1WtwpA

### 回应格式 { #response-formats }

数据集报告端点支持以下格式的输出。您可以使用文件扩展名或 `Accept` HTTP 标头检索特定端点。

-   json（应用程序/ json）
-   pdf（应用程序/ pdf）
-   xls（application / vnd.ms-excel）

### 自订表格 { #custom-forms }

A dedicated endpoint is available for data sets with custom HTML forms. This endpoint returns the HTML form content with content type `text/html` with data inserted into it. Note that you can use the general data set report endpoint also for data sets with custom forms; however, that will return the report in JSON format as a grid. This endpoint only works for data sets with custom HTML forms.

    获取 /api/33/dataSetReport/custom

否则，此端点的语法等于常规数据集报告端点。要检索自定义HTML数据集报告，您可以发出如下请求：

    GET /api/33/dataSetReport/custom?ds=lyLU2wR22tC&pe=201810&ou=ImspTQPwCqd

## 推送分析 { #webapi_push_analysis }

推送分析 API 包括用于预览推送分析的端点
报告登录用户并手动触发系统
生成和发送推送分析报告，除了正常的 CRUD
操作。使用创建和更新端点进行推送时
分析，推送分析将根据
推分析的性质。删除或更新一个
禁用推送分析，作业也将停止运行
将来。

要获得现有推送分析的 HTML 预览，您可以执行 GET
请求到以下端点：

    / api / 33 / pushAnalysis / <id> / render

要手动触发推送分析作业，您可以执行 POST 请求以
这个端点：

    / api / 33 / pushAnalysis / <id> / run

推送分析包含以下属性，其中一些是
自动运行推送分析作业所需：

<table>
<caption>Push analysis properties</caption>
<colgroup>
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th>Property</th>
<th>Description</th>
<th>Type</th>
<th>Required</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>dashboard</td>
<td>Dashboard on which reports are based</td>
<td>Dashboard UID</td>
<td>Yes</td>
</tr>
<tr class="even">
<td>message</td>
<td>Appears after title in reports</td>
<td>String</td>
<td>No</td>
</tr>
<tr class="odd">
<td>recipientUserGroups</td>
<td>A set of user groups who should receive the reports</td>
<td>One or more user Group UID</td>
<td>No. Scheduled jobs without any recipient will be skipped.</td>
</tr>
<tr class="even">
<td>enabled</td>
<td>Indicated whether this push analysis should be scheduled or not. False by default.</td>
<td>Boolean</td>
<td>Yes. Must be true to be scheduled.</td>
</tr>
<tr class="odd">
<td>schedulingFrequency</td>
<td>The frequency of which reports should be scheduled.</td>
<td>&quot;DAILY&quot;, &quot;WEEKLY&quot;, &quot;MONTHLY&quot;</td>
<td>No. Push analysis without a frequency will not be scheduled</td>
</tr>
<tr class="even">
<td>schedulingDayOfFrequency</td>
<td>The day in the frequency the job should be scheduled.</td>
<td>Integer. Any value when frequency is &quot;DAILY&quot;. 0-7 when frequency is &quot;WEEKLY&quot;. 1-31 when frequency is &quot;MONTHLY&quot;</td>
<td>No. Push analysis without a valid day of frequency for the frequency set will not be scheduled.</td>
</tr>
</tbody>
</table>

## 数据使用情况分析 { #webapi_usage_analytics }

使用情况分析 API 可让您访问有关人们使用情况的信息
使用基于数据分析的 DHIS2。当用户访问收藏夹时，
事件被记录。事件由用户名、UID 组成
最喜欢的、事件发生的时间以及事件的类型。这
表中列出了不同类型的事件。

    / api / 33 / dataStatistics

使用情况分析 API 可让您检索使用情况的汇总快照
基于时间间隔的分析。 API 捕获用户视图（对于
例如，图表或数据透视表被用户查看的次数
用户）和保存的分析收藏夹（例如收藏夹图表和
数据透视表）。 DHIS2 将捕获夜间快照，然后
应要求汇总。

### 请求查询参数 { #webapi_usage_analytics_request_query_parameters }

使用情况分析（数据统计）API支持两种操作：

-   _POST:_ 创建一个视图事件

-   _GET:_ 检索聚合统计信息

### 创建视图事件（POST） { #webapi_usage_analytics_create_view_events }

使用情况分析 API 可让您创建事件视图。这
dataStatisticsEventType 参数描述了项目的类型
看过。最喜欢的参数表示相关的标识符
最喜欢的。

创建新事件视图的 URL
    图表：

    POST / api / 33 / dataStatistics？eventType = CHART_VIEW＆favorite = LW0O27b7TdD

成功的保存操作会返回 HTTP 状态代码 201。表
下面显示了支持的事件类型。

<table>
<caption>Supported event types</caption>
<colgroup>
<col style="width: 38%" />
<col style="width: 61%" />
</colgroup>
<thead>
<tr class="header">
<th>Key</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>REPORT_TABLE_VIEW</td>
<td>Report table (pivot table) view</td>
</tr>
<tr class="even">
<td>CHART_VIEW</td>
<td>Chart view</td>
</tr>
<tr class="odd">
<td>MAP_VIEW</td>
<td>Map view (GIS)</td>
</tr>
<tr class="even">
<td>EVENT_REPORT_VIEW</td>
<td>Event report view</td>
</tr>
<tr class="odd">
<td>EVENT_CHART_VIEW</td>
<td>Event chart view</td>
</tr>
<tr class="even">
<td>DASHBOARD_VIEW</td>
<td>Dashboard view</td>
</tr>
<tr class="odd">
<td>DATA_SET_REPORT_VIEW</td>
<td>Data set report view</td>
</tr>
</tbody>
</table>

### 检索汇总的使用情况分析报告（GET） { #webapi_aggregated_usage_analytics }

使用情况分析（数据统计）API 允许您指定特定查询
请求汇总报告时的参数。

 <table>
 <caption>查询参数以进行汇总使用情况分析（数据统计）</caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 <th>选项</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>开始日期</td>
 <td>是</td>
 <td>期间</td>的开始日期
 <td> yyyy-MM-dd格式的日期</td>
 </tr>
 <tr class="even">
 <td>结束日期</td>
 <td>是</td>
 <td>期间</td>的结束日期
 <td> yyyy-MM-dd格式的日期</td>
 </tr>
 <tr class="odd">
 <td>间隔</td>
 <td>是</td>
 <td>要汇总的间隔类型</td>
 年，月，月，日的星期天<td> </td>
 </tr>
 </tbody>
 </table>

startDate 和 endDate 参数指定期间
将在聚合中使用快照。您必须格式化日期
如上图所示。如果在指定时间段内没有保存快照，则
空列表被送回。称为间隔的参数指定了什么
将进行聚合类型。

用于创建每月查询的 API 查询
    聚合：

    GET /api/33/dataStatistics?startDate=2014-01-02&endDate=2016-01-01&interval=MONTH

### 检索热门收藏夹 { #webapi_usage_analytics_top_favorites }

使用情况分析 API 可让您检索最常用的
DHIS2，并由用户。

 <table>
 <caption>热门收藏夹的查询参数</caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 <th>选项</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> eventType </td>
 <td>是</td>
 <td>数据统计事件类型</td>
 <td>参见上表</td>
 </tr>
 <tr class="even">
 <td>页面大小</td>
 <td>否</td>
 <td>返回的列表大小</td>
 <td>例如5、10、25。默认值为25 </td>
 </tr>
 <tr class="odd">
 <td> sortOrder </td>
 <td>否</td>
 <td>下降或上升</td>
 <td> ASC或DESC。默认为DESC。 </td>
 </tr>
 <tr class="even">
 <td>用户名</td>
 <td>否</td>
 <td>如果指定，则响应将仅包含此用户的收藏夹。 </td>
 <td>例如'admin'</td>
 </tr>
 </tbody>
 </table>

API 查询可以不用用户名，然后会找到顶部
系统的最爱。

    / api / 33 / dataStatistics / favorites？eventType = CHART_VIEW＆pageSize = 25＆sortOrder = ASC

如果指定了用户名，则响应将仅包含该用户的最爱。

    /api/33/dataStatistics/favorites?eventType=CHART_VIEW&pageSize=25
      &sortOrder=ASC&用户名=管理员

### 回应格式 { #webapi_usage_analytics_response_format }

您可以在使用情况分析响应中返回聚合数据
几种表示格式。默认格式为 JSON。这
可用的格式和内容类型有：

-   json（应用程序/ json）

-   xml（应用程序/ xml）

-   html（text / html）

请求 XML 格式的使用情况分析响应的 API 查询
    格式：

    /api/33/dataStatistics.xml?startDate=2014-01-01&endDate=2016-01-01&interval=WEEK

您必须使用 HTTP 检索聚合使用情况分析响应
获取方法。这允许您直接从网页和其他
启用 HTTP 的客户端对使用情况分析响应。做功能性
测试使用 cURL 库。

要以 JSON 格式获取使用情况分析响应：

    /api/33/dataStatistics?startDate=2016-02-01&endDate=2016-02-14&interval=WEEK

JSON响应如下所示：

```json
[
    {
        "year": 2016,
        "week": 5,
        "mapViews": 2181,
        "chartViews": 2227,
        "reportTableViews": 5633,
        "eventReportViews": 6757,
        "eventChartViews": 9860,
        "dashboardViews": 10082,
        "totalViews": 46346,
        "averageViews": 468,
        "averageMapViews": 22,
        "averageChartViews": 22,
        "averageReportTableViews": 56,
        "averageEventReportViews": 68,
        "averageEventChartViews": 99,
        "averageDashboardViews": 101,
        "savedMaps": 1805,
        "savedCharts": 2205,
        "savedReportTables": 1995,
        "savedEventReports": 1679,
        "savedEventCharts": 1613,
        "savedDashboards": 0,
        "savedIndicators": 1831,
        "activeUsers": 99,
        "users": 969
    },
    {
        "year": 2016,
        "week": 6,
        "mapViews": 2018,
        "chartViews": 2267,
        "reportTableViews": 4714,
        "eventReportViews": 6697,
        "eventChartViews": 9511,
        "dashboardViews": 12181,
        "totalViews": 47746,
        "averageViews": 497,
        "averageMapViews": 21,
        "averageChartViews": 23,
        "averageReportTableViews": 49,
        "averageEventReportViews": 69,
        "averageEventChartViews": 99,
        "averageDashboardViews": 126,
        "savedMaps": 1643,
        "savedCharts": 1935,
        "savedReportTables": 1867,
        "savedEventReports": 1977,
        "savedEventCharts": 1714,
        "savedDashboards": 0,
        "savedIndicators": 1646,
        "activeUsers": 96,
        "users": 953
    }
]
```

### 检索收藏的统计信息 { #webapi_usage_analytics_retrieve_favorite_statistics }

您可以使用 _favorites_ 资源检索特定收藏夹的观看次数，其中 _{favorite-id}_ 应替换为感兴趣的收藏夹的标识符：

    /api/33/dataStatistics/favorites/{favorite-id}.json

响应将包含给定收藏的观看次数和
看起来像这样：

```json
{
    "views": 3
}
```

## 地理空间特征 { #webapi_geospatial_features }

_geoFeatures_ 资源允许您从 DHIS2 检索地理空间信息。地理空间要素与组织单位存储在一起。用于检索功能的语法与用于分析资源的组织单位维度的语法相同。建议在继续阅读本节之前先阅读分析 API 资源。必须使用 GET 请求类型，并且仅支持 JSON 响应格式。

例如，在以下位置检索所有组织单位的地理特征
组织单位层次结构中的第 3 级，您可以使用 GET 请求
使用以下网址：

    /api/33/geoFeatures.json?ou=ou:LEVEL-3

检索组织单位内某个级别的地理特征
组织单位的边界（例如在第 2 级），您可以使用以下 URL：

    /api/33/geoFeatures.json?ou=ou:LEVEL-4;O6uvpzGd5pu

响应属性的语义描述如下
桌子。

 <table>
 <caption> 地理特征响应 </caption>
 <colgroup>
 <col style="width: 14%" />
 <col style="width: 85%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 属性 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ID </td>
 <td> 组织单位/地理特征标识符 </td>
 </tr>
 <tr class="even">
 <td> na </td>
 <td> 组织单位/地理要素名称 </td>
 </tr>
 <tr class="odd">
 <td> hcd </td>
 <td> 具有向下的坐标，指示是否存在一个或多个具有坐标的子组织单位（层次结构中的下方）</td>
 </tr>
 <tr class="even">
 <td> hcu </td>
 <td> 有坐标向上，表示上级组织单位是否有坐标（层级上） </td>
 </tr>
 <tr class="odd">
 <td> le </td>
 <td> 此组织单位/地理特征的级别。 </td>
 </tr>
 <tr class="even">
 <td> pg </td>
 <td> 父图，父组织单元标识符的图直到层次结构中的根 </td>
 </tr>
 <tr class="odd">
 <td> pi </td>
 <td> Parent identifier，该组织单元的父标识 </td>
 </tr>
 <tr class="even">
 <td> pn </td>
 <td> Parent name，该组织单位的父名称 </td>
 </tr>
 <tr class="odd">
 <td> ty </td>
 <td> 地理要素类型，1 = 点，2 = 多边形或多多边形 </td>
 </tr>
 <tr class="even">
 <td> co </td>
 <td> 此地理要素的坐标 </td>
 </tr>
 </tbody>
 </table>

### GeoJSON { #geojson }

要导出 GeoJSON，您只需将 _.geosjon_ 作为扩展添加到端点 _/api/organizationUnits_，也可以使用 _Accept_ 标头 _application/json+geojson_。

支持两个参数：`level`（默认为 1）和 `parent`（默认为根组织单位）。两者都可以多次包含。一些例子：

获得第2级和第4级的所有功能：

    /api/organizationUnits.geojson?level=2&level=4

使用边界组织单位获取级别3的所有功能：

    /api/organizationUnits.geojson?parent=fdc6uOvgoji&level=3

## 生成资源和分析表 { #webapi_generating_resource_analytics_tables }

DHIS2 具有一组生成的数据库表，用作
各种系统功能的基础。这些表可以执行
立即或计划通过定期执行
用户界面。它们也可以通过 Web API 生成为
本节说明。此任务通常是针对系统的一项任务
管理员而不使用客户端。

资源表由 DHIS2 应用程序内部使用
各种分析功能。这些表对用户也很有价值
编写高级 SQL 报告。它们可以通过 POST 或 PUT 生成
请求到以下 URL：

    / api / 33 / resourceTables

分析表针对数据聚合进行了优化并使用
目前在 DHIS2 中用于数据透视表模块。分析表可以
使用 POST 或 PUT 请求生成：

    / api / 33 / resourceTables / analytics

 <table>
 <caption>分析表可选查询参数</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 14%" />
 <col style="width: 52%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> skipResourceTables </td>
 否| <td>假|真</td>
 <td>跳过资源表的生成</td>
 </tr>
 <tr class="even">
 <td> skipAggregate </td>
 否| <td>假|真</td>
 <td>跳过汇总数据和完整性数据的生成</td>
 </tr>
 <tr class="odd">
 <td> skipEvents </td>
 否| <td>假|真</td>
 <td>跳过事件数据的生成</td>
 </tr>
 <tr class="even">
 <td> skipEnrollment </td>
 否| <td>假|真</td>
 <td>跳过注册数据的生成</td>
 </tr>
 <tr class="odd">
 <td>最近年份</td>
 <td>整数</td>
 <td>包含</td>的最近数据年数
 </tr>
 </tbody>
 </table>

“数据质量”和“数据监控”可通过监控运行
任务，由以下端点触发：

    / api / 33 / resourceTables / monitoring

此任务将分析您的验证规则，查找任何违规并
将它们保存为验证结果。

这些请求将立即返回并启动服务器端
过程。

## 保养 { #webapi_maintenance }

要执行维护，您可以与 _maintenance_ 资源交互。您应该使用 _POST_ 或 _PUT_ 作为请求方法。可以使用以下方法。

清除分析表将删除所有分析表。

    开机自检/ api / maintenance / analyticsTablesClear

分析表分析将收集有关数据库中分析表内容的统计信息。

    开机自检/ api / maintenance / analyticsTablesAnalyze

清除过期邀请将删除所有用户帐户邀请
已过期。

    开机自检/ api / maintenance / expiredInvitationsClear

期间修剪将删除未链接到任何数据的期间
值。

    开机自检/ api / maintenance / periodPruning

零数据值删除将删除链接到数据的零数据值
零数据被定义为不重要的元素：

    开机自检/ api / maintenance / zeroDataValueRemoval

软删除的数据值删除将永久删除软删除的数据值。

    开机自检/ api / maintenance / softDeletedDataValueRemoval

软删除的程序阶段实例删除将永久删除软删除的事件。

    开机自检/ api / maintenance / softDeletedProgramStageInstanceRemoval

软删除程序实例的删除将永久删除软删除的注册。

    开机自检/ api / maintenance / softDeletedProgramInstanceRemoval

软删除的跟踪实体实例的删除将永久删除软删除的跟踪实体实例。

    开机自检/ api / maintenance / softDeletedTrackedEntityInstanceRemoval

删除SQL视图将删除数据库中的所有SQL视图。请注意，它不会删除DHIS2 SQL视图实体。

    开机自检/ api / maintenance / sqlViewsDrop

创建SQL视图将重新创建数据库中的所有SQL视图。

    开机自检/ api / maintenance / sqlViewsCreate

类别选项组合更新将删除过时并为所有类别组合生成缺少的类别选项组合。

    开机自检/ api / maintenance / categoryOptionComboUpdate

也可以使用以下端点为单个类别组合更新类别选项组合。

    开机自检/ api / maintenance / categoryOptionComboUpdate / categoryCombo / <category-combo-uid>

缓存清除将清除应用程序Hibernate缓存和分析分区缓存。

    开机自检/ api / maintenance / cacheClear

组织单位路径更新将重新生成组织单位路径属性。这可能是有用的，例如如果您使用SQL导入组织单位。

    开机自检/ api / maintenance / ouPathsUpdate

数据修剪将删除完整的数据集注册，数据批准，数据价值审核和数据价值，在这种情况下是组织单位。

    开机自检/ api / maintenance / dataPruning / organisationUnits / <org-unit-id>

数据元素的数据修剪，这将删除数据值审核和数据值。

    开机自检/ api / maintenance / dataPruning / dataElement / <data-element-uid>

元数据验证将应用所有元数据验证规则，并返回操作结果。

    开机自检/ api / metadataValidation

应用程序重新加载将通过从文件系统读取来刷新已安装应用程序的DHIS2托管缓存。

    开机自检/ api / appReload

通过对api / maintenance资源的POST请求以批处理方式支持维护操作，在api / maintenance资源中，该操作作为查询参数提供：

    开机自检/ api / maintenance？analyticsTablesClear = true＆expiredInvitationsClear = true
      ＆periodPruning = true＆zeroDataValueRemoval = true＆sqlViewsDrop = true＆sqlViewsCreate = true
      ＆categoryOptionComboUpdate = true＆cacheClear = true＆ouPathsUpdate = true

## 系统资源 { #webapi_system_resource }

系统资源为您提供便捷的信息和功能。系统资源可以在_/api/system_找到。

### 产生识别码 { #webapi_system_resource_generate_identifiers }

要生成有效的随机 DHIS2 标识符，您可以执行 GET 请求
此资源：

    / api / 33 / system / id？limit = 3

_limit_ 查询参数是可选的，指示您希望随响应返回的标识符的数量。默认值是返回一个标识符。响应将包含一个 JSON 对象，其中包含一个名为codes 的数组，类似于：

```json
{
    "codes": ["Y0moqFplrX4", "WI0VHXuWQuV", "BRJNBBpu4ki"]
}
```

DHIS2 UID格式具有以下要求：

-   长11个字符。

-   仅字母数字字符，即。字母或数字字符 (A-Za-z0-9)。

-   以字母字符（A-Za-z）开头。

### 查看系统信息 { #webapi_system_resource_view_system_information }

要获取有关当前系统的信息，您可以执行 GET 请求
这个网址：

    / api / 33 / system / info

支持 JSON 和 JSONP 响应格式。系统信息响应
目前包括以下属性。

```json
{
    "contextPath": "http://yourdomain.com",
    "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 Chrome/29.0.1547.62",
    "version": "2.13-SNAPSHOT",
    "revision": "11852",
    "buildTime": "2013-09-01T21:36:21.000+0000",
    "serverDate": "2013-09-02T12:35:54.311+0000",
    "environmentVariable": "DHIS2_HOME",
    "javaVersion": "1.7.0_06",
    "javaVendor": "Oracle Corporation",
    "javaIoTmpDir": "/tmp",
    "javaOpts": "-Xms600m -Xmx1500m -XX:PermSize=400m -XX:MaxPermSize=500m",
    "osName": "Linux",
    "osArchitecture": "amd64",
    "osVersion": "3.2.0-52-generic",
    "externalDirectory": "/home/dhis/config/dhis2",
    "databaseInfo": {
        "type": "PostgreSQL",
        "name": "dhis2",
        "user": "dhis",
        "spatialSupport": false
    },
    "memoryInfo": "Mem Total in JVM: 848 Free in JVM: 581 Max Limit: 1333",
    "cpuCores": 8
}
```

> **注意**
>
> 如果请求此资源的用户没有完全权限，则仅包含前七个属性，因为其他属性被视为敏感信息。

仅获取有关系统上下文的信息，即`contextPath` 和
`userAgent`，您可以向以下 URL 发出 GET 请求。 JSON 和
支持 JSONP 响应格式：

    / api / 33 / system / context

### 检查用户名和密码组合是否正确 { #webapi_system_resource_check_username_password }

要检查某些用户凭据（用户名和密码组合）是否正确，您可以使用_基本身份验证_向以下资源发出_GET_请求：

    / api / 33 / system / ping

您可以通过检查响应标头的_HTTP 状态代码_来检测身份验证的结果。下面列出了可能的状态代码的含义。请注意，这通常适用于 Web API 请求。

 <table>
 <caption> HTTP 状态代码 </caption>
 <colgroup>
 <col style="width: 13%" />
 <col style="width: 12%" />
 <col style="width: 74%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> HTTP 状态码 </th>
 <th> 说明 </th>
 <th> 结果 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 200 </td>
 <td> 好的 </td>
 <td> 认证成功 </td>
 </tr>
 <tr class="even">
 <td> 302 </td>
 <td> 发现 </td>
 <td> 请求未提供凭据 - 未进行身份验证 </td>
 </tr>
 <tr class="odd">
 <td> 401 </td>
 <td> 未经授权 </td>
 <td> 用户名和密码组合不正确 - 身份验证失败 </td>
 </tr>
 </tbody>
 </table>

### 查看异步任务状态 { #webapi_system_resource_view_async_task_status }

Tasks which often take a long time to complete can be performed
asynchronously. After initiating an async task you can poll the status
through the `system/tasks` resource by supplying the task category and
the task identifier of interest.

轮询任务状态时，您需要进行身份验证
启动任务的用户。以下任务类别是
支持的：

<table>
<caption>Task categories</caption>
<colgroup>
<col style="width: 21%" />
<col style="width: 78%" />
</colgroup>
<thead>
<tr class="header">
<th>Identifier</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ANALYTICS_TABLE</td>
<td>Generation of the analytics tables.</td>
</tr>
<tr class="even">
<td>RESOURCE_TABLE</td>
<td>Generation of the resource tables.</td>
</tr>
<tr class="odd">
<td>MONITORING</td>
<td>Processing of data surveillance/monitoring validation rules.</td>
</tr>
<tr class="even">
<td>DATAVALUE_IMPORT</td>
<td>Import of data values.</td>
</tr>
<tr class="odd">
<td>EVENT_IMPORT</td>
<td>Import of events.</td>
</tr>
<tr class="even">
<td>ENROLLMENT_IMPORT</td>
<td>Import of enrollments.</td>
</tr>
<tr class="odd">
<td>TEI_IMPORT</td>
<td>Import of tracked entity instances.</td>
</tr>
<tr class="even">
<td>METADATA_IMPORT</td>
<td>Import of metadata.</td>
</tr>
<tr class="odd">
<td>DATA_INTEGRITY</td>
<td>Processing of data integrity checks.</td>
</tr>
</tbody>
</table>

每个异步任务都会自动分配一个标识符，该标识符可以
用于监视任务的状态。这个任务标识符是
当您通过各种方式启动异步任务时由 API 返回
启用异步的端点。

#### 监控任务 { #monitoring-a-task }

您可以通过对系统任务的 GET 请求轮询任务状态
像这样的资源：

    / api / 33 / system / tasks / {task-category-id} / {task-id}

一个示例请求可能看起来像这样：

    / api / 33 / system / tasks / DATAVALUE_IMPORT / j8Ki6TgreFw

响应将提供有关状态的信息，例如通知级别、类别、时间和状态。 _completed_ 属性指示该过程是否被视为完成。

```json
[
    {
        "uid": "hpiaeMy7wFX",
        "level": "INFO",
        "category": "DATAVALUE_IMPORT",
        "time": "2015-09-02T07:43:14.595+0000",
        "message": "Import done",
        "completed": true
    }
]
```

#### 监视类别的所有任务 { #monitoring-all-tasks-for-a-category }

您可以通过 GET 请求轮询特定类别的所有任务
系统任务资源：

    / api / 33 / system / tasks / {task-category-id}

轮询数据值导入任务状态的示例请求
看起来像这样：

    / api / 33 / system / tasks / DATAVALUE_IMPORT

#### 监控所有任务 { #monitor-all-tasks }

您可以使用以下命令请求系统中所有当前正在运行的任务的列表
对系统任务资源的 GET 请求：

    / api / 33 / system / tasks

响应将类似于以下内容：

```json
[
    {
        "EVENT_IMPORT": {},
        "DATA_STATISTICS": {},
        "RESOURCE_TABLE": {},
        "FILE_RESOURCE_CLEANUP": {},
        "METADATA_IMPORT": {},
        "CREDENTIALS_EXPIRY_ALERT": {},
        "SMS_SEND": {},
        "MOCK": {},
        "ANALYTICSTABLE_UPDATE": {},
        "COMPLETE_DATA_SET_REGISTRATION_IMPORT": {},
        "DATAVALUE_IMPORT": {},
        "DATA_SET_NOTIFICATION": {},
        "DATA_INTEGRITY": {
            "OB1qGRlCzap": [
                {
                    "uid": "LdHQK0PXZyF",
                    "level": "INFO",
                    "category": "DATA_INTEGRITY",
                    "time": "2018-03-26T15:02:32.171",
                    "message": "Data integrity checks completed in 38.31 seconds.",
                    "completed": true
                }
            ]
        },
        "PUSH_ANALYSIS": {},
        "MONITORING": {},
        "VALIDATION_RESULTS_NOTIFICATION": {},
        "REMOVE_EXPIRED_RESERVED_VALUES": {},
        "DATA_SYNC": {},
        "SEND_SCHEDULED_MESSAGE": {},
        "DATAVALUE_IMPORT_INTERNAL": {},
        "PROGRAM_NOTIFICATIONS": {},
        "META_DATA_SYNC": {},
        "ANALYTICS_TABLE": {},
        "PREDICTOR": {}
    }
]
```

### 查看异步任务摘要 { #view-asynchronous-task-summaries }

任务摘要资源允许您检索任务摘要
异步任务调用。您需要指定类别和
可选的任务标识符。任务标识符可以是
从发起请求的 API 请求的响应中检索
异步任务。

要检索特定任务的摘要，您可以发出以下请求：

    / api / 33 / system / taskSummaries / {task-category-id} / {task-id}

一个示例请求可能看起来像这样：

    / api / 33 / system / taskSummaries / DATAVALUE_IMPORT / k72jHfF13J1

响应将类似于以下内容：

```json
{
    "responseType": "ImportSummary",
    "status": "SUCCESS",
    "importOptions": {
        "idSchemes": {},
        "dryRun": false,
        "async": true,
        "importStrategy": "CREATE_AND_UPDATE",
        "mergeMode": "REPLACE",
        "reportMode": "FULL",
        "skipExistingCheck": false,
        "sharing": false,
        "skipNotifications": false,
        "datasetAllowsPeriods": false,
        "strictPeriods": false,
        "strictCategoryOptionCombos": false,
        "strictAttributeOptionCombos": false,
        "strictOrganisationUnits": false,
        "requireCategoryOptionCombo": false,
        "requireAttributeOptionCombo": false,
        "skipPatternValidation": false
    },
    "description": "Import process completed successfully",
    "importCount": {
        "imported": 0,
        "updated": 431,
        "ignored": 0,
        "deleted": 0
    },
    "dataSetComplete": "false"
}
```

您还可以检索多个任务的导入摘要
具有类似请求的特定类别
这：

    / api / 33 / system / taskSummaries / {task-category-id}

### 获取外观信息 { #webapi_system_resource_get_appearance_information }

您可以使用 GET 以 JSON 格式检索可用的标志图标
要求：

    / api / 33 / system / flags

您可以使用 GET 以 JSON 格式检索可用的 UI 样式
要求：

    / api / 33 / system / styles

## 语言环境 { #webapi_locales }

DHIS2 支持用户界面和数据库的翻译
内容。

### UI语言环境 { #ui-locales }

您可以通过以下方式检索用户界面的可用区域设置
以下资源带有 GET 请求。 XML 和 JSON 资源
支持表示。

    / api / 33 / locales / ui

### 数据库内容语言环境 { #database-content-locales }

您可以使用 GET 和
通过以下资源 POST 请求。 XML 和 JSON 资源
支持表示。

    / api / 33 / locales / db

## 翻译 { #webapi_translations }

DHIS2 允许翻译数据库内容。您可以使用 _translations_ 资源通过 Web API 处理翻译。

    / api / 33 / translations

### 创建翻译 { #create-a-translation }

您可以使用JSON格式的POST请求创建翻译：

```json
{
    "objectId": "P3jJH5Tu5VC",
    "className": "DataElement",
    "locale": "es",
    "property": "name",
    "value": "Casos de fiebre amarilla"
}
```

    POST / api / 33 / translations

下表列出了支持翻译的属性。

 <table>
 <caption>属性名称</caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>属性名称</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>名称</td>
 <td>对象名称</td>
 </tr>
 <tr class="even">
 <td>短名称</td>
 <td>对象简称</td>
 </tr>
 <tr class="odd">
 <td>说明</td>
 <td>对象描述</td>
 </tr>
 </tbody>
 </table>

下表列出了支持翻译的类。

 <table>
 <caption>类名称</caption>
 <colgroup>
 <col style="width: 34%" />
 <col style="width: 65%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>类名称</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> DataElementCategoryOption </td>
 <td>类别选项</td>
 </tr>
 <tr class="even">
 <td> DataElementCategory </td>
 <td>类别</td>
 </tr>
 <tr class="odd">
 <td> DataElementCategoryCombo </td>
 <td>类别组合</td>
 </tr>
 <tr class="even">
 <td>数据元素</td>
 <td>数据元素</td>
 </tr>
 <tr class="odd">
 <td> DataElementGroup </td>
 <td>数据元素组</td>
 </tr>
 <tr class="even">
 <td> DataElementGroupSet </td>
 <td>数据元素组集</td>
 </tr>
 <tr class="odd">
 <td>指示灯</td>
 <td>指示灯</td>
 </tr>
 <tr class="even">
 <td>指标类型</td>
 <td>指示器类型</td>
 </tr>
 <tr class="odd">
 <td>指标组</td>
 <td>指标组</td>
 </tr>
 <tr class="even">
 <td> IndicatorGroupSet </td>
 <td>指标组设置</td>
 </tr>
 <tr class="odd">
 <td>组织单位</td>
 <td>组织单位</td>
 </tr>
 <tr class="even">
 <td> OrganisationUnitGroup </td>
 <td>组织单位组</td>
 </tr>
 <tr class="odd">
 <td> OrganisationUnitGroupSet </td>
 <td>组织单位组设置</td>
 </tr>
 <tr class="even">
 <td>数据集</td>
 <td>数据集</td>
 </tr>
 <tr class="odd">
 <td>部分</td>
 <td>数据集部分</td>
 </tr>
 <tr class="even">
 <td>验证规则</td>
 <td>验证规则</td>
 </tr>
 <tr class="odd">
 <td> ValidationRuleGroup </td>
 <td>验证规则组</td>
 </tr>
 <tr class="even">
 <td>程序</td>
 <td>程序</td>
 </tr>
 <tr class="odd">
 <td>程序阶段</td>
 <td>程序阶段</td>
 </tr>
 <tr class="even">
 <td> TrackedEntityAttribute </td>
 <td>跟踪的实体属性</td>
 </tr>
 <tr class="odd">
 <td> TrackedEntity </td>
 <td>跟踪的实体</td>
 </tr>
 <tr class="even">
 <td> RelationshipType </td>
 <td>跟踪实体实例的关系类型</td>
 </tr>
 <tr class="odd">
 <td>选项设置</td>
 <td>选项集</td>
 </tr>
 <tr class="even">
 <td>属性</td>
 <td>元数据的属性</td>
 </tr>
 </tbody>
 </table>

### 获取翻译 { #get-translations }

您可以通过翻译资源浏览所有翻译：

    获取/api/33/翻译

您可以使用标准过滤技术来获取翻译
兴趣。例如。获取西班牙语数据元素的所有翻译
您可以使用此请求的语言环境：

    /api/33/translations.json?fields=*&filter=className:eq:DataElement&filter=locale:eq:es

要获取所有属性的特定对象的翻译，请执行以下操作：

    /api/33/translations.json?fields=*&filter=className:eq:DataElement
      ＆filter = locale：eq：fr＆filter = objectId：eq：fbfJHSPpUQD

## 短消息服务（SMS） { #webapi_sms }

本节介绍用于发送和接收短文本的 SMS Web API
消息。

### 出站短信服务 { #outbound-sms-service }

Web API 支持使用 POST 方法发送外发 SMS。短信可以
发送到单个或多个目的地。一个或多个网关需要
在使用服务之前进行配置。如果出现以下情况，将不会发送短信
没有配置网关。它需要一组接收者和
JSON 格式的消息文本，如下所示。

    / api / sms / outbound

```json
{
    "message": "Sms Text",
    "recipients": ["004712341234", "004712341235"]
}
```

> **Note**
>
> Recipients list will be partitioned if the size exceeds `MAX_ALLOWED_RECIPIENTS` limit of 200.

Web API 也支持查询参数版本，但
参数化 API 只能用于发送短信到单个
目的地。

    / api / sms / outbound？message = text＆recipient = 004712341234

可以使用GET资源提取出站邮件。

    GET / api / sms / outbound
    GET / api / sms / outbound？filter = status：eq：SENT
    GET / api / sms / outbound？filter = status：eq：SENT＆fields = *

可以使用DELETE资源删除出站邮件。

    删除/ api / sms / outbound / {uid}
    删除/ api / sms / outbound？ids = uid1，uid2

#### 网关响应码 { #gateway-response-codes }

网关可以使用以下响应代码进行响应。

 <table>
 <caption> 网关响应代码 </caption>
 <colgroup>
 <col style="width: 13%" />
 <col style="width: 13%" />
 <col style="width: 73%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 响应码 </th>
 <th> 响应消息 </th>
 <th> 详细说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> RESULT_CODE_0 </td>
 <td> 成功 </td>
 <td> 消息已成功发送 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_1 </td>
 <td> 预定 </td>
 <td> 消息已成功调度 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_22 </td>
 <td> 内部致命错误 </td>
 <td> 内部致命错误 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_23 </td>
 <td> 认证失败 </td>
 <td> 身份验证凭据不正确 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_24 </td>
 <td> 数据验证失败 </td>
 <td> 请求中提供的参数不正确 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_25 </td>
 <td> 积分不足 </td>
 <td> 信用不够发送消息 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_26 </td>
 <td> 上游信用不可用 </td>
 <td> 上游信用不可用 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_27 </td>
 <td> 超出了您的每日配额 </td>
 <td> 您已超出每日配额 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_40 </td>
 <td> 暂时不可用 </td>
 <td> 服务暂时关闭 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_201 </td>
 <td> 超过最大批量大小 </td>
 <td> 超过最大批量大小 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_200 </td>
 <td> 成功 </td>
 <td> 请求成功完成 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_202 </td>
 <td> 接受 </td>
 <td> 消息将被处理 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_207 </td>
 <td> 多状态 </td>
 <td> 向 API 提交了不止一条消息；但是，并非所有消息都具有相同的状态 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_400 </td>
 <td> 错误请求 </td>
 <td> 验证失败（例如缺少/无效的参数或标头） </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_401 </td>
 <td> 未授权 </td>
 <td> 认证失败。这也可能是由 IP 锁定设置引起的 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_402 </td>
 <td> 需要付款 </td>
 <td> 没有足够的信用来发送消息 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_404 </td>
 <td> 未找到 </td>
 <td> 资源不存在 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_405 </td>
 <td> 方法不允许 </td>
 <td> 资源 </td> 不支持 Http 方法
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_410 </td>
 <td> 消失了 </td>
 <td> 手机号码被屏蔽 </td>
 </tr>
 <tr class="even">
 <td> RESULT_CODE_429 </td>
 <td> 请求过多 </td>
 <td> 通用速率限制错误 </td>
 </tr>
 <tr class="odd">
 <td> RESULT_CODE_503 </td>
 <td> 服务不可用 </td>
 <td> 我们的平台出现临时错误 - 请重试 </td>
 </tr>
 </tbody>
 </table>

### 入站短信服务 { #inbound-sms-service }

Web API 支持使用 POST 收集传入的 SMS 消息
方法。路由到 DHIS2 Web API 的传入消息可以是
使用此 API 接收。 API 收集入站 SMS 消息和
根据短信内容（SMS
命令）。下面给出了 JSON 格式的示例负载。文本，
发起者、接收日期和发送日期是强制性参数。这
其余是可选的，但系统将使用这些默认值
参数。

    / api / sms / inbound

```json
{
    "text": "sample text",
    "originator": "004712341234",
    "gatewayid": "unknown",
    "receiveddate": "2016-05-01",
    "sentdate": "2016-05-01",
    "smsencoding": "1",
    "smsstatus": "1"
}
```

可以使用GET resourcef获取入站消息

    GET / api / sms / inbound
    GET / api / sms / inbound？fields = *＆filter = smsstatus = INCOMING

可以使用DELETE资源删除入站邮件

    删除/ api / sms / inbound / {uid}
    删除/ api / sms / inbound？ids = uid1，uid2

导入所有未解析的消息 POST /api/sms/inbound/import

 <table>
 <caption> 用户查询参数 </caption>
 <colgroup>
 <col style="width: 13%" />
 <col style="width: 13%" />
 <col style="width: 73%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> </th>型
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 消息 </td>
 <td> 字符串 </td>
 <td> 这是携带实际文本消息的强制性参数。 </td>
 </tr>
 <tr class="even">
 <td> 发起人 </td>
 <td> 字符串 </td>
 <td> 这是强制性参数，显示此消息实际上是由谁发送的。 </td>
 </tr>
 <tr class="odd">
 <td> 网关 </td>
 <td> 字符串 </td>
 <td> 这是一个可选参数，提供网关 ID。如果不存在默认文本 &quot;UNKNOWN&quot; 将存储 </td>
 </tr>
 <tr class="even">
 <td> 接收时间 </td>
 <td> 日期 </td>
 <td> 这是一个可选参数。它是网关收到消息的时间戳。 </td>
 </tr>
 </tbody>
 </table>

### 网关服务管理 { #gateway-service-administration }

Web API 公开资源，这些资源提供了一种配置和
更新短信网关配置。

可以使用 GET 检索配置的不同网关的列表
方法。

    获取/api/33/网关

还可以使用特定网关类型检索配置
获取方法。

    GET /api/33/gateways/{uid}

可以使用 POST 添加新的网关配置。 POST api 需要类型请求参数，目前其值可以是 _http、bulksms、clickatell、smpp_ 之一。第一个添加的网关将设置为默认网关。一次只允许默认一个网关。默认网关只能通过其 api 进行更改。如果删除默认网关，则列表中的下一个网关将自动成为默认网关。

    POST / api / 33 / gateways

可以通过提供如下所述的uid和网关配置来更新配置

    PUT /api/33/gateways/{uids}

可以使用 DELETE 删除特定网关类型的配置
方法。

    删除/ api / 33 / gateways / {uid}

可以检索和更新默认网关。

    获取 /api/33/gateways/default

可以使用PUT方法设置默认网关。

    PUT /api/33/gateways/default/{uid}

### 网关配置 { #gateway-configuration }

Web API 允许您创建和更新网关配置。对于每个
网关类型 JSON 有效负载中有不同的参数。
下面给出了每个网关的示例 JSON 有效负载。 POST 用于
create 和 PUT 以更新配置。标头参数可用于
GenericHttpGateway 将一个或多个参数作为 http 标头发送的情况。

#### Clickatell { #clickatell }

```json
{
    "type": "clickatell",
    "name": "clickatell",
    "username": "clickatelluser",
    "authToken": "XXXXXXXXXXXXXXXXXXXX",
    "urlTemplate": "https://platform.clickatell.com/messages"
}
```

#### 散装 { #bulksms }

```json
{
    "type": "bulksms",
    "name": "bulkSMS",
    "username": "bulkuser",
    "password": "abc123"
}
```

#### SMPP网关 { #smpp-gateway }

```json
{
    "type": "smpp",
    "name": "smpp gateway2",
    "systemId": "smppclient1",
    "host": "localhost",
    "systemType": "cp",
    "numberPlanIndicator": "UNKNOWN",
    "typeOfNumber": "UNKNOWN",
    "bindType": "BIND_TX",
    "port": 2775,
    "password": "password",
    "compressed": false
}
```

#### 通用HTTP { #generic-http }

```json
{
    "type": "http",
    "name": "Generic",
    "configurationTemplate": "username=${username}&password=${password}&to=${recipients}&countrycode=880&message=${text$}&messageid=0",
    "useGet": false,
    "sendUrlParameters": false,
    "contentType": "APPLICATION_JSON",
    "urlTemplate": "https://samplegateway.com/messages",
    "parameters": [
        {
            "header": true,
            "encode": false,
            "key": "username",
            "value": "user_uio",
            "confidential": true
        },
        {
            "header": true,
            "encode": false,
            "key": "password",
            "value": "123abcxyz",
            "confidential": true
        },
        {
            "header": false,
            "encode": false,
            "key": "deliveryReport",
            "value": "yes",
            "confidential": false
        }
    ],
    "isDefault": false
}
```

在通用的http网关中，可以添加任意数量的参数。

 <table>
 <caption>通用SMS网关参数</caption>
 <colgroup>
 <col style="width: 13%" />
 <col style="width: 13%" />
 <col style="width: 73%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>类型</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>名称</td>
 <td>字符串</td>
 网关名称<td> </td>
 </tr>
 <tr class="even">
 <td>配置模板</td>
 <td>字符串</td>
 <td>配置模板，其中填充了参数值。例如，上面给出的配置模板将像这样填充{“ to”：“ +27001234567”，“ body”：“ Hello World！”} </td>
 </tr>
 <tr class="odd">
 使用<td>使用获取</td>
 <td>布尔值</td>
 默认情况下将使用<td> Http POST网络。为了更改它和Http GET，用户可以将useGet标志设置为true。 </td>
 </tr>
 <tr class="even">
 <td> contentType </td>
 <td>字符串</td>
 <td>内容类型指定要发送的数据类型。支持的类型为APPLICATION_JSON，APPLICATION_XML，FORM_URL_ENCODED，TEXT_PLAIN </td>
 </tr>
 <tr class="odd">
 <td> urlTemplate </td>
 <td>字符串</td>
 <td>网址模板</td>
 </tr>
 <tr class="even">
 <td>标头</td>
 <td>布尔值</td>
 <td>如果需要在Http标头中发送参数</td>
 </tr>
 <tr class="odd">
 <td>编码</td>
 <td>布尔值</td>
 <td>如果参数需要编码</td>
 </tr>
 <tr class="even">
 <td>键</td>
 <td>字符串</td>
 <td>参数密钥</td>
 </tr>
 <tr class="odd">
 <td>值</td>
 <td>字符串</td>
 <td>参数值</td>
 </tr>
 <tr class="even">
 <td>机密</td>
 <td>布尔值</td>
 <td>如果参数是机密的。此参数不会通过API </td>公开
 </tr>
 <tr class="odd">
 <td> sendUrlParameters </td>
 <td>布尔值</td>
 <td>如果选中此标志，则urlTemplate可以附加查询参数。如果网关API仅支持HTTP GET，这将很有用。样本urlTemplate看起来像这样的“ urlTemplate”：“ https://samplegateway.com/messages?apiKey={apiKey}&to={recipients},content={text},deliveryreport={dp}” </td>
 </tr>
 </tbody>
 </table>

配置保存成功则返回HTTP.OK，否则_Error_

## 短信命令 { #webapi_sms_commands }

SMS 命令用于通过 SMS 收集数据。这些命令
属于特定的解析器类型。每个解析器都有不同的功能。

可以使用GET检索命令列表。

    GET /api/sms命令

可以使用GET检索一个特定的命令。

    GET /api/smsCommands/uid

可以使用PUT更新一个特定的命令。

    PUT /api/smsCommands/uid

可以使用POST创建命令。

    POST / api / smsCommands

可以使用DELETE删除一个特定命令。

    删除/ api / smsCommands / uid

#### 短信命令类型 { #sms-command-types }

| 类型 | 用法 |
| --- | --- |
| KEY_VALUE_PARSER | 用于汇总数据收集。 |
| ALERT_PARSER | 发送警报消息。 |
| 未注册_解析器 | 用于疾病监测病例报告。 |
| TRACKED_ENTITY_REGISTRATION_PARSER | 用于跟踪器实体注册。 |
| PROGRAM_STAGE_DATAENTRY_PARSER | 程序阶段的数据收集。 （根据phoneNumner确定TEI） |
| EVENT_REGISTRATION_PARSER | 单个事件的注册。这用于事件程序。 |

#### Android的SMS命令类型 { #sms-command-types-for-android }

当互联网不可用时，Android应用程序可以使用这些命令类型通过SMS提交数据。 SMS由Android应用程序组成。

| 类型              | 用法                                    |
| ----------------- | ---------------------------------------- |
| AGGREGATE_DATASET | 用于汇总数据收集。           |
| 注册        | 用于跟踪器实体注册。         |
| TRACKER_EVENT     | 跟踪器程序的事件注册。 |
| SIMPLE_EVENT      | 活动节目的活动注册。   |
| 关系      | 建立关系。                 |
| 删除            | 删除事件。                         |

## 计划讯息 { #webapi_program_messages }

程序消息可让您向跟踪的实体实例发送消息，
与组织单位关联的联系地址、电话号码和
电子邮件地址。您可以通过 `messages` 资源发送消息。

    / api / 33 /消息

### 发送程序信息 { #sending-program-messages }

程序消息可以使用两个传递渠道发送：

-   短信（SMS）

-   电子邮件地址（EMAIL）

程序消息可以发送给各种收件人：

-   跟踪的实体实例：系统将查找值类型为 PHONE_NUMBER 或 EMAIL 的属性（取决于指定的传递渠道）并使用相应的属性值。

-   组织单位：系统将使用为组织单位注册的电话号码或电子邮件信息。

-   电话号码列表：系统将使用明确定义的电话号码。

-   电子邮件地址列表：系统将使用明确定义的电子邮件地址。

下面是使用 POST 请求发送消息的示例 JSON 负载。
请注意，消息资源接受一个名为
`programMessages` 可以包含任意数量的程序消息。

    开机自检/ api / 33 / messages

```json
{
    "programMessages": [
        {
            "recipients": {
                "trackedEntityInstance": {
                    "id": "UN810PwyVYO"
                },
                "organisationUnit": {
                    "id": "Rp268JB6Ne4"
                },
                "phoneNumbers": ["55512345", "55545678"],
                "emailAddresses": ["johndoe@mail.com", "markdoe@mail.com"]
            },
            "programInstance": {
                "id": "f3rg8gFag8j"
            },
            "programStageInstance": {
                "id": "pSllsjpfLH2"
            },
            "deliveryChannels": ["SMS", "EMAIL"],
            "subject": "Outbreak alert",
            "text": "An outbreak has been detected",
            "storeCopy": false
        }
    ]
}
```

下表中说明了这些字段。

 <table>
 <caption>程序消息有效负载</caption>
 <colgroup>
 <col style="width: 21%" />
 <col style="width: 21%" />
 <col style="width: 31%" />
 <col style="width: 26%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>字段</th>
 <th>必需</th>
 <th>说明</th>
 <th>值</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>收件人</td>
 <td>是</td>
 <td>程序消息的收件人。必须至少指定一个收件人。可以为邮件指定任意数量的收件人/类型。 </td>
 <td>可以跟踪EntityInstance，organizationunit，phoneNumbers数组或emailAddresses数组。 </td>
 </tr>
 <tr class="even">
 <td>程序实例</td>
 <td>这或programStageInstance必需</td>
 <td>程序实例/注册。 </td>
 <td>注册ID。 </td>
 </tr>
 <tr class="odd">
 <td>程序舞台实例</td>
 <td>这个或programInstance必需</td>
 <td>程序阶段实例/事件。 </td>
 <td>事件ID。 </td>
 </tr>
 <tr class="even">
 <td>交付渠道</td>
 <td>是</td>
 <td>交付渠道数组。 </td>
 SMS | <td>电子邮件</td>
 </tr>
 <tr class="odd">
 <td>主题</td>
 <td>否</td>
 <td>邮件主题。不适用于短信传送渠道。 </td>
 <td>文本。 </td>
 </tr>
 <tr class="even">
 <td>文字</td>
 <td>是</td>
 <td>消息文本。 </td>
 <td>文本。 </td>
 </tr>
 <tr class="odd">
 <td>商店复制</td>
 <td>否</td>
 <td>是否在DHIS2中存储程序消息的副本。 </td>
 <td>否（默认）|真</td>
 </tr>
 </tbody>
 </table>

通过 SMS 向被跟踪对象发送消息的简约示例
实体实例如下所示：

```bash
curl -d @message.json "https://play.dhis2.org/demo/api/33/messages"
  -H "Content-Type:application/json" -u admin:district
```

```json
{
    "programMessages": [
        {
            "recipients": {
                "trackedEntityInstance": {
                    "id": "PQfMcpmXeFE"
                }
            },
            "programInstance": {
                "id": "JMgRZyeLWOo"
            },
            "deliveryChannels": ["SMS"],
            "text": "Please make a visit on Thursday"
        }
    ]
}
```

### 检索和删除程序消息 { #retrieving-and-deleting-program-messages }

可以使用GET检索消息列表。

    获取/api/33/消息

获取所有预定消息的列表

    GET / api / 33 / messages / scheduled
    GET / api / 33 / messages / scheduled？scheduledAt = 2020-12-12

也可以使用GET检索一条特定的消息。

    GET /api/33/messages/{uid}

可以使用DELETE删除消息。

    删除/ api / 33 / messages / {uid}

### 查询程序信息 { #querying-program-messages }

程序消息API支持基于
请求参数。可以根据下面提到的过滤消息
查询参数。所有请求都应使用 GET HTTP 动词
检索信息。

 <table>
 <caption>查询程序消息API </caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 75%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th> URL </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>程序实例</td>
 <td> / api / 33 / messages？programInstance = 6yWDMa0LP7 </td>
 </tr>
 <tr class="even">
 <td>程序舞台实例</td>
 <td> / api / 33 / messages？programStageInstance = SllsjpfLH2 </td>
 </tr>
 <tr class="odd">
 <td> trackedEntityInstance </td>
 <td> / api / 33 / messages？trackedEntityInstance = xdfejpfLH2 </td>
 </tr>
 <tr class="even">
 <td>组织单位</td>
 <td> / api / 33 / messages？ou = Sllsjdhoe3 </td>
 </tr>
 <tr class="odd">
 <td>处理日期</td>
 <td> / api / 33 / messages？processedDate = 2016-02-01 </td>
 </tr>
 </tbody>
 </table>

## 用户数 { #webapi_users }

本节介绍用户资源方法。

    / api / 33 / users

### 用户查询 { #webapi_users_query }

_users_ 资源提供标准参数之外的附加查询参数（例如分页）。要在用户资源中查询用户，您可以使用以下参数。

 <table>
 <caption> 用户查询参数 </caption>
 <colgroup>
 <col style="width: 18%" />
 <col style="width: 17%" />
 <col style="width: 63%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> </th>型
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 查询 </td>
 <td> 文字 </td>
 <td> 名字、姓氏、用户名和电子邮件的查询值，不区分大小写。 </td>
 </tr>
 <tr class="even">
 <td> 电话号码 </td>
 <td> 文字 </td>
 <td> 查询电话号码。 </td>
 </tr>
 <tr class="odd">
 <td> canManage </td>
 <td> 假 |真 </td>
 <td> 过滤当前用户是否可以通过管理的用户组关系管理返回的用户。 </td>
 </tr>
 <tr class="even">
 <td> authSubset </td>
 <td> 假 |真 </td>
 <td> 过滤返回的用户是否拥有当前用户的权限子集。 </td>
 </tr>
 <tr class="odd">
 <td> lastLogin </td>
 <td> 日期 </td>
 <td> 筛选晚于给定日期登录的用户。 </td>
 </tr>
 <tr class="even">
 <td> inactiveMonths </td>
 <td> 编号 </td>
 <td> 过滤给定月数未登录的用户。 </td>
 </tr>
 <tr class="odd">
 <td> 不活动自 </td>
 <td> 日期 </td>
 <td> 过滤未晚于给定日期登录的用户。 </td>
 </tr>
 <tr class="even">
 <td> 自注册 </td>
 <td> 假 |真 </td>
 <td> 过滤已自行注册其用户帐户的用户。 </td>
 </tr>
 <tr class="odd">
 <td> 邀请状态 </td>
 <td> 无 |所有 |过期 </td>
 <td> 过滤用户邀请，包括所有邀请或过期邀请。 </td>
 </tr>
 <tr class="even">
 <td> 或 </td>
 <td> 标识符 </td>
 <td> 过滤与具有给定标识符的组织单位相关联的用户。 </td>
 </tr>
 <tr class="odd">
 <td> userOrgUnits </td>
 <td> 假 |真 </td>
 <td> 筛选与链接到当前登录用户的组织单位相关联的用户。 </td>
 </tr>
 <tr class="even">
 <td> 包括儿童 </td>
 <td> 假 |真 </td>
 <td> 包括来自 ou 参数的所有子组织单位的用户。 </td>
 </tr>
 <tr class="odd">
 <td> 页面 </td>
 <td> 编号 </td>
 <td> 页码。 </td>
 </tr>
 <tr class="even">
 <td> 页面大小 </td>
 <td> 编号 </td>
 <td> 页面大小。 </td>
 </tr>
 </tbody>
 </table>

以“konan”作为名字或姓氏的最多 10 个用户的查询（案例
不敏感）与当前相比拥有部分权限的人
用户：

    / api / 33 / users？query = konan＆authSubset = true＆pageSize = 10

### 用户查找 { #user-lookup }

用户查找 API 提供了一个端点来检索用户
响应包含最少的信息集。它不需要一个
特定权限，适合客户端查询信息
例如用户名和姓氏，不会暴露潜在的敏感信息
用户信息。

```
/ api / userLookup
```

用户查找端点有两种方法。

#### 通过标识符查找用户 { #user-lookup-by-identifier }

您可以使用以下API请求按标识符进行用户查找。

```
GET / api / userLookup / {id}
```

用户 `id` 将与以下用户属性匹配
按照指定的顺序：

-   用户标识
-   用户名
-   用户名

请求示例如下所示：

```
/ api / userLookup / QqvaU7JjkUV
```

该响应将包含有关用户的最少信息。

```json
{
    "id": "QqvaU7JjkUV",
    "username": "nkono",
    "firstName": "Thomas",
    "surname": "Nkono",
    "displayName": "Thomas Nkono"
}
```

#### 用户查询 { #user-lookup-query }

您可以使用以下API请求向用户查询。

```
GET / api / userLookup？query = {string}
```

`query` 请求参数是强制性的。查询`string`将被匹配
针对以下用户属性：

-   名字
-   姓
-   电子邮件
-   用户名

请求示例如下所示：

```
/ api / userLookup？query = John
```

响应将包含有关与请求匹配的用户的信息。

```json
{
    "users": [
        {
            "id": "DXyJmlo9rge",
            "username": "jbarnes",
            "firstName": "John",
            "surname": "Barnes",
            "displayName": "John Barnes"
        },
        {
            "id": "N3PZBUlN8vq",
            "username": "jkamara",
            "firstName": "John",
            "surname": "Kamara",
            "displayName": "John Kamara"
        }
    ]
}
```

### 用户帐户创建和更新 { #webapi_users_create_update }

通过 API 支持创建和更新用户。一个基本的
创建用户的有效负载类似于以下示例。注意密码
将以纯文本形式发送，因此请记住为网络传输启用 SSL/HTTPS。

```json
{
    "id": "Mj8balLULKp",
    "firstName": "John",
    "surname": "Doe",
    "email": "johndoe@mail.com",
    "userCredentials": {
        "id": "lWCkJ4etppc",
        "userInfo": {
            "id": "Mj8balLULKp"
        },
        "username": "johndoe123",
        "password": "Your-password-123",
        "skype": "john.doe",
        "telegram": "joh.doe",
        "whatsApp": "+1-541-754-3010",
        "facebookMessenger": "john.doe",
        "avatar": {
            "id": "<fileResource id>"
        },
        "userRoles": [
            {
                "id": "Ufph3mGRmMo"
            }
        ]
    },
    "organisationUnits": [
        {
            "id": "Rp268JB6Ne4"
        }
    ],
    "userGroups": [
        {
            "id": "wl5cDMuUhmF"
        }
    ]
}
```

```bash
curl -X POST -d @u.json "http://server/api/33/users" -u user:pass 
  -H "Content-Type: application/json" 
```

在用户创建负载中，仅在一次导入或_POST_单个用户时才支持用户组。如果您在指定用户组时尝试创建多个用户，您将不会收到错误，并且将创建用户，但不会分配任何用户组。这是设计使然，并且受到限制，因为用户和用户组之间存在多对多关系，其中用户组是该关系的所有者。要更新或创建多个用户及其用户组，请考虑使用一个程序来一次_POST_一个，或者_POST_所有用户，然后执行另一操作来更新其用户组，同时指定新用户的标识符。

创建用户后，将发送一个 _Location_ 头信息，并附上新生成的 ID（也可使用 `/api/system/id` 端点提供自己的 ID）。然后，可以使用相同的有效载荷进行更新，但要记住使用 _PUT_ 而不是 _POST_，端点现在是 `/api/users/ID`。

```bash
curl -X PUT -d @u.json "http://server/api/33/users/ID" -u user:pass 
  -H "Content-Type: application/json" 
```

有关可用的全部有效负载的更多信息，请参见`/ api / schemas / user`。

有关上传和检索用户头像的更多信息，请参阅
`/fileResources` 端点。

### 用户帐户邀请 { #webapi_user_invitations }

The Web API supports inviting people to create user accounts through the
`invite` resource. To create an invitation you should POST a user in XML
or JSON format to the invite resource. A specific username can be forced
by defining the username in the posted entity. By omitting the username,
the person will be able to specify it herself. The system will send out
an invitation through email. This requires that email settings have been
properly configured.

邀请资源可用于安全地
允许人们在其他人不知道密码的情况下创建帐户
或通过以纯文本形式传输密码。用于的有效载荷
邀请与创建用户相同。 JSON 格式的示例负载
看起来像这样：

```json
{
    "firstName": "John",
    "surname": "Doe",
    "email": "johndoe@mail.com",
    "userCredentials": {
        "username": "johndoe",
        "userRoles": [
            {
                "id": "Euq3XfEIEbx"
            }
        ]
    },
    "organisationUnits": [
        {
            "id": "ImspTQPwCqd"
        }
    ],
    "userGroups": [
        {
            "id": "vAvEltyXGbD"
        }
    ]
}
```

用户邀请实体可以这样发布：

```bash
curl -d @invite.json "localhost/api/33/users/invite" -u admin:district
  -H "Content-Type:application/json" 
```

要同时向多个用户发送邀请，您必须使用
格式略有不同。对于 JSON：

```json
{
    "users": [
        {
            "firstName": "John",
            "surname": "Doe",
            "email": "johndoe@mail.com",
            "userCredentials": {
                "username": "johndoe",
                "userRoles": [
                    {
                        "id": "Euq3XfEIEbx"
                    }
                ]
            },
            "organisationUnits": [
                {
                    "id": "ImspTQPwCqd"
                }
            ]
        },
        {
            "firstName": "Tom",
            "surname": "Johnson",
            "email": "tomj@mail.com",
            "userCredentials": {
                "userRoles": [
                    {
                        "id": "Euq3XfEIEbx"
                    }
                ]
            },
            "organisationUnits": [
                {
                    "id": "ImspTQPwCqd"
                }
            ]
        }
    ]
}
```

要创建多个邀请，您可以将有效负载发布到
api/users/invites 资源如下：

```bash
curl -d @invites.json "localhost/api/33/users/invites" -u admin:district
  -H "Content-Type:application/json"
```

发送用户账号邀请有一定的要求
出去：

-   电子邮件SMTP服务器必须在服务器上正确配置。

-   被邀请的用户必须指定了有效的电子邮件。

-   如果指定了用户名，则该用户名不得已被其他现有用户使用。

如果不满足任何这些要求，邀请资源将返回 _409 Conflict_ 状态代码以及描述性消息。

### 用户复制 { #webapi_user_replication }

要复制用户，您可以使用 _replica_ 资源。在调试或重现特定用户报告的问题时，复制用户可能很有用。您需要为复制的用户提供新的用户名和密码，稍后将使用该用户名和密码进行身份验证。请注意，您需要 ALL 权限才能执行此操作。要复制用户，您可以发布如下所示的 JSON 负载：

```json
{
    "username": "user_replica",
    "password": "SecretPassword"
}
```

此有效负载可以发布到您提供的副本资源
要在 URL 中复制的用户标识符：

    / api / 33 / users / <uid> /副本

使用curl复制用户的示例如下所示：

```bash
curl -d @replica.json "localhost/api/33/users/N3PZBUlN8vq/replica"
  -H "Content-Type:application/json" -u admin:district
```

## 当前用户信息 { #webapi_current_user_information }

为了获取有关当前经过身份验证的用户及其与其他资源的关联的信息，您可以使用 _me_ 资源（您也可以通过其旧名称 _currentUser_ 引用它）。当前用户相关资源为您提供在构建客户端（例如数据输入和用户管理）时有用的信息。下面描述了这些资源及其用途。

提供有关您当前登录的用户的基本信息
in as，包括用户名、用户凭据、分配的组织
单位：

    / api / me

提供有关当前未读消息和解释的信息：

    / api / me / dashboard

为了更改密码，此端点可用于验证
新输入的密码。密码验证将基于
系统中配置的 PasswordValidationRules。这个端点支持
POST 和密码字符串应在 POST 正文中发送。

    / api / me / validatePassword

更改密码时，此端点（支持 POST）可用于
验证旧密码。密码字符串应在 POST 正文中发送。

    / api / me / verifyPassword

返回授予当前用户的权限集：

    / api / me / authorization

返回 true 或 false，表示当前用户是否已被
授予给定的`<auth>`授权：

    / api / me / authorization / <auth>

给出与当前用户相关的数据批准级别：

    / api / me / dataApprovalLevels

## 系统设置 { #webapi_system_settings }

您可以通过与 _systemSettings_ 资源交互来操纵系统设置。系统设置是一个简单的键值对，其中键和值都是纯文本字符串。要保存或更新系统设置，您可以向以下 URL 发出 _POST_ 请求：

    / api / 33 / systemSettings / my-key？value = my-val

或者，您可以将设置值作为请求正文提交，
其中内容类型设置为“文本/纯文本”。例如，您可以使用
像这样卷曲：

```bash
curl "play.dhis2.org/demo/api/33/systemSettings/my-key" -d "My long value"
  -H "Content-Type: text/plain" -u admin:district
```

要批量设置系统设置，您可以发送带有
使用 POST 请求的每个系统设置键值对的属性和值：

```json
{
    "keyApplicationNotification": "Welcome",
    "keyApplicationIntro": "DHIS2",
    "keyApplicationFooter": "Read more at dhis2.org"
}
```

可以通过指定语言环境来设置可翻译设置键的翻译
可以指定的查询参数和翻译值
作为查询参数或与正文有效负载一起使用。查看示例网址：

    / api / 33 / systemSettings / <my-key>？locale = <my-locale>＆value = <my-translated-value>

您应该将 my-key 替换为您的真实密钥，将 my-val 替换为您的真实值。要检索给定键的值（以 JSON 或纯文本形式），您可以向以下 URL 发出 _GET_ 请求：

    / api / 33 / systemSettings / my-key

或者，您可以将键指定为查询参数：

    / api / 33 / systemSettings？key =我的密钥

您可以通过重复键以 JSON 形式检索特定的系统设置
查询参数：

```bash
curl "play.dhis2.org/demo/api/33/systemSettings?key=keyApplicationNotification&key=keyApplicationIntro"
  -u admin:district
```

您可以使用GET请求检索所有系统设置：

    / api / 33 / systemSettings

要检索给定可翻译键的特定翻译，您可以指定
作为查询参数的语言环境：

    / api / 33 / systemSettings / <my-key>？locale = <my-locale>

如果存在，则返回给定语言环境的翻译。否则默认
值被返回。如果没有为可翻译键指定语言环境，则用户默认
UI 语言环境用于获取正确的翻译。如果给定的翻译不是
现在，再次返回默认值。

可翻译键的优先级如下：

    指定的区域设置>用户的默认UI区域设置> defaut值

要删除系统设置，您可以向类似于上面用于检索的 URL 发出 _DELETE_ 请求。如果使用可翻译密钥，则所有现有翻译也将被删除。

仅删除可翻译键的特定翻译，相同的 URL
至于添加翻译应该使用，空值应该是
假如：

    / api / 33 / systemSettings / <my-key>？locale = <my-locale>＆value =

可用的系统设置在下面列出。

<table>
<caption>System settings</caption>
<colgroup>
<col style="width: 43%" />
<col style="width: 43%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th>Key</th>
<th>Description</th>
<th>Translatable</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>keyUiLocale</td>
<td>Locale for the user interface</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyDbLocale</td>
<td>Locale for the database</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyAnalysisDisplayProperty</td>
<td>The property to display in analysis. Default: &quot;name&quot;</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyAnalysisDigitGroupSeparator</td>
<td>The separator used to separate digit groups</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyCurrentDomainType</td>
<td>Not yet in use</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyTrackerDashboardLayout</td>
<td>Used by tracker capture</td>
<td>No</td>
</tr>
<tr class="odd">
<td>applicationTitle</td>
<td>The application title. Default: &quot;DHIS2&quot;</td>
<td>Yes</td>
</tr>
<tr class="even">
<td>keyApplicationIntro</td>
<td>The application introduction</td>
<td>Yes</td>
</tr>
<tr class="odd">
<td>keyApplicationNotification</td>
<td>Application notification</td>
<td>Yes</td>
</tr>
<tr class="even">
<td>keyApplicationFooter</td>
<td>Application left footer</td>
<td>Yes</td>
</tr>
<tr class="odd">
<td>keyApplicationRightFooter</td>
<td>Application right footer</td>
<td>Yes</td>
</tr>
<tr class="even">
<td>keyFlag</td>
<td>Application flag</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyFlagImage</td>
<td>Flag used in dashboard menu</td>
<td>No</td>
</tr>
<tr class="even">
<td>startModule</td>
<td>The startpage of the application. Default: &quot;dhis-web-dashboard-integration&quot;</td>
<td>No</td>
</tr>
<tr class="odd">
<td>factorDeviation</td>
<td>Data analysis standard deviation factor. Default: &quot;2d&quot;</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyEmailHostName</td>
<td>Email server hostname</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyEmailPort</td>
<td>Email server port</td>
<td>No</td>
<tr class="even">
<td>keyEmailTls</td>
<td>Use TLS. Default: &quot;true&quot;</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyEmailSender</td>
<td>Email sender</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyEmailUsername</td>
<td>Email server username</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyEmailPassword</td>
<td>Email server password</td>
<td>No</td>
</tr>
<tr class="even">
<td>minPasswordLength</td>
<td>Minimum length of password</td>
<td>No</td>
</tr>
<tr class="odd">
<td>maxPasswordLength</td>
<td>Maximum length of password</td>
<td>No</td>
</tr>
<tr class="even">
<td>keySmsSetting</td>
<td>SMS configuration</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyCacheStrategy</td>
<td>Cache strategy. Default: &quot;CACHE_6AM_TOMORROW&quot;</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyCacheability</td>
<td>PUBLIC or PRIVATE. Determines if proxy servers are allowed to cache data or not.</td>
<td>No</td>
</tr>
<tr class="odd">
<td>phoneNumberAreaCode</td>
<td>Phonenumber area code</td>
<td>No</td>
</tr>
<tr class="even">
<td>multiOrganisationUnitForms</td>
<td>Enable multi-organisation unit forms. Default: &quot;false&quot;</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyConfig</td>
<td></td>
<td>No</td>
</tr>
<tr class="even">
<td>keyAccountRecovery</td>
<td>Enable user account recovery. Default: &quot;false&quot;</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyLockMultipleFailedLogins</td>
<td>Enable locking access after multiple failed logins</td>
<td>No</td>
</tr>
<tr class="even">
<td>googleAnalyticsUA</td>
<td>Google Analytic UA key for tracking site-usage</td>
<td>No</td>
</tr>
<tr class="odd">
<td>credentialsExpires</td>
<td>Require user account password change. Default: &quot;0&quot; (Never)</td>
<td>No</td>
</tr>
<tr class="even">
<td>credentialsExpiryAlert</td>
<td>Enable alert when credentials are close to expiration date</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keySelfRegistrationNoRecaptcha</td>
<td>Do not require recaptcha for self registration. Default: &quot;false&quot;</td>
<td>No</td>
</tr>
<tr class="even">
<td>recaptchaSecret</td>
<td>Google API recaptcha secret. Default: dhis2 play instance API secret, but this will only works on you local instance and not in production.</td>
<td>No</td>
</tr>
<tr class="odd">
<td>recaptchaSite</td>
<td>Google API recaptcha site. Default: dhis2 play instance API site, but this will only works on you local instance and not in production.</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyCanGrantOwnUserAuthorityGroups</td>
<td>Allow users to grant own user roles. Default: &quot;false&quot;</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keySqlViewMaxLimit</td>
<td>Max limit for SQL view</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyRespectMetaDataStartEndDatesInAnalyticsTableExport</td>
<td>When &quot;true&quot;, analytics will skip data not within category option's start and end dates. Default: &quot;false&quot;</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keySkipDataTypeValidationInAnalyticsTableExport</td>
<td>Skips data type validation in analytics table export</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyCustomLoginPageLogo</td>
<td>Logo for custom login page</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyCustomTopMenuLogo</td>
<td>Logo for custom top menu</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyCacheAnalyticsDataYearThreshold</td>
<td>Analytics data older than this value (in years) will always be cached. &quot;0&quot; disabled this setting. Default: 0</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyCacheAnalyticsDataYearThreshold</td>
<td>Analytics data older than this value (in years) will always be cached. &quot;0&quot; disabled this setting. Default: 0</td>
<td>No</td>
</tr>
<tr class="even">
<td>analyticsFinancialYearStart</td>
<td>Set financial year start. Default: October</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyIgnoreAnalyticsApprovalYearThreshold</td>
<td>&quot;0&quot; check approval for all data. &quot;-1&quot; disable approval checking. &quot;1&quot; or higher checks approval for all data that is newer than &quot;1&quot; year.</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyAnalyticsMaxLimit</td>
<td>Maximum number of analytics recors. Default: &quot;50000&quot;</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyAnalyticsMaintenanceMode</td>
<td>Put analytics in maintenance mode. Default: &quot;false&quot;</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyDatabaseServerCpus</td>
<td>Number of database server CPUs. Default: &quot;0&quot; (Automatic)</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyLastSuccessfulAnalyticsTablesRuntime</td>
<td>Keeps timestamp of last successful analytics tables run</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyLastSuccessfulLatestAnalyticsPartitionRuntime</td>
<td>Keeps timestamp of last successful latest analytics partition run</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyLastMonitoringRun</td>
<td>Keeps timestamp of last monitoring run</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyLastSuccessfulDataSynch</td>
<td>Keeps timestamp of last successful data values synchronization</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyLastSuccessfulEventsDataSynch</td>
<td>Keeps timestamp of last successful Event programs data synchronization</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyLastCompleteDataSetRegistrationSyncSuccess</td>
<td>Keeps timestamp of last successful completeness synchronization</td>
<td>No</td>
</tr>
<tr class="odd">
<td>syncSkipSyncForDataChangedBefore</td>
<td>Specifies timestamp used to skip synchronization of all the data changed before this point in time</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyLastSuccessfulAnalyticsTablesUpdate</td>
<td>Keeps timestamp of last successful analytics tables update</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyLastSuccessfulLatestAnalyticsPartitionUpdate</td>
<td>Keeps timestamp of last successful latest analytics partition update</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyLastSuccessfulResourceTablesUpdate</td>
<td>Keeps timestamp of last successful resource tables update</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyLastSuccessfulSystemMonitoringPush</td>
<td>Keeps timestamp of last successful system monitoring push</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyLastSuccessfulMonitoring</td>
<td>Keeps timestamp of last successful monitoring</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyNextAnalyticsTableUpdate</td>
<td>Keeps timestamp of next analytics table update</td>
<td>No</td>
</tr>
<tr class="even">
<td>helpPageLink</td>
<td>Link to help page. Default: &quot;<a href="http://dhis2.github.io/dhis2-docs/master/en/user/html/dhis2_user_manual_en.html">https://dhis2.github.io/dhis2-docs/master/en/user/html/dhis2_user_manual_en.html</a></td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyAcceptanceRequiredForApproval</td>
<td>Acceptance required before approval. Default: &quot;false&quot;</td>
<td>No</td>
</tr>
<tr class="even">
<td>keySystemNotificationsEmail</td>
<td>Where to email system notifications</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyAnalysisRelativePeriod</td>
<td>Default relative period for analysis. Default: &quot;LAST_12_MONTHS&quot;</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyRequireAddToView</td>
<td>Require authority to add to view object lists. Default: &quot;false&quot;</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyAllowObjectAssignment</td>
<td>Allow assigning object to related objects during add or update. Default: &quot;false&quot;</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyUseCustomLogoFront</td>
<td>Enables the usage of a custom logo on the front page. Default: &quot;false&quot;</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyUseCustomLogoBanner</td>
<td>Enables the usage of a custom banner on the website. Default: &quot;false&quot;</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyDataImportStrictPeriods</td>
<td></td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyDataImportStrictPeriods</td>
<td>Require periods to match period type of data set. Default: &quot;false&quot;</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyDataImportStrictDataElements</td>
<td>Require data elements to be part of data set. Default: &quot;false&quot;</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyDataImportStrictCategoryOptionCombos</td>
<td>Require category option combos to match category combo of data element. Default: &quot;false&quot;</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyDataImportStrictOrganisationUnits</td>
<td>Require organisation units to match assignment of data set. Default: &quot;false&quot;</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyDataImportStrictAttributeOptionsCombos</td>
<td>Require attribute option combis to match category combo of data set. Default: &quot;false&quot;</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyDataImportRequireCategoryOptionCombo</td>
<td>Require category option combo to be specified. Default: &quot;false&quot;</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyDataImportRequireAttributeOptionCombo</td>
<td>Require attribute option combo to be specified. Default: &quot;false&quot;</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyCustomJs</td>
<td>Custom JavaScript to be used on the website</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyCustomCss</td>
<td>Custom CSS to be used on the website</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyCalendar</td>
<td>The calendar type. Default: &quot;iso8601&quot;.</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyDateFormat</td>
<td>The format in which dates should be displayed. Default: &quot;yyyy-MM-dd&quot;.</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyStyle</td>
<td>The style used on the DHIS2 webpages. Default: &quot;light_blue/light_blue.css&quot;.</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyRemoteInstanceUrl</td>
<td>Url used to connect to remote instance</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyRemoteInstanceUsername</td>
<td>Username used to connect to remote DHIS2 instance</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyRemoteInstancePassword</td>
<td>Password used to connect to remote DHIS2 instance</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyGoogleMapsApiKey</td>
<td>Google Maps API key</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyGoogleCloudApiKey</td>
<td>Google Cloud API key</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyLastMetaDataSyncSuccess</td>
<td>Keeps timestamp of last successful metadata synchronization </td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyVersionEnabled</td>
<td>Enables metadata versioning</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyMetadataFailedVersion</td>
<td>Keeps details about failed metadata version sync</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyMetadataLastFailedTime</td>
<td>Keeps timestamp of last metadata synchronization failure</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyLastSuccessfulScheduledProgramNotifications</td>
<td>Not in use</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyLastSuccessfulScheduledDataSetNotifications</td>
<td>Not in use</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyRemoteMetadataVersion</td>
<td>Details about metadata version of remote instance</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keySystemMetadataVersion</td>
<td>Details about metadata version of the system</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyStopMetadataSync</td>
<td>Flag to stop metadata synchronization</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyFileResourceRetentionStrategy</td>
<td>Determines how long file resources associated with deleted or updated values are kept. NONE, THREE_MONTHS, ONE_YEAR, or FOREVER.</td>
<td>No</td>
</tr>
<tr class="even">
<td>syncMaxRemoteServerAvailabilityCheckAttempts</td>
<td>Specifies how many times the availability of remote server will be checked before synchronization jobs fail.</td>
<td>No</td>
</tr>
<tr class="odd">
<td>syncMaxAttempts</td>
<td>Specifies max attempts for synchronization jobs</td>
<td>No</td>
</tr>
<tr class="even">
<td>syncDelayBetweenRemoteServerAvailabilityCheckAttempts</td>
<td>Delay between remote server availability checks</td>
<td>No</td>
</tr>
<tr class="odd">
<td>lastSuccessfulDataStatistics</td>
<td>Keeps timestamp of last successful data analytics</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyHideDailyPeriods</td>
<td>Not in use</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyHideWeeklyPeriods</td>
<td>Not in use</td>
<td>No</td>
</tr>
<tr class="even">
<td>keyHideMonthlyPeriods</td>
<td>Not in use</td>
<td>No</td>
</tr>
<tr class="odd">
<td>keyHideBiMonthlyPeriods</td>
<td>Not in use</td>
<td>No</td>
</tr>
</tbody>
</table>

## 用户设置 { #webapi_user_settings }

您可以通过与 _userSettings_ 资源交互来操作用户设置。用户设置是一个简单的键值对，其中键和值都是纯文本字符串。用户设置将链接到针对 Web API 请求进行身份验证的用户。要返回所有用户设置的列表，您可以向以下 URL 发送 _GET_ 请求：

    / api / 33 / userSettings

用户未设置的用户设置，将回退到等效的
系统设置。只返回用户明确设置的值，
您可以将 ?useFallback=false 附加到上述 URL，如下所示：

    / api / 33 / userSettings？useFallback = false

要保存或更新当前经过身份验证的用户的设置，您可以向以下 URL 发出 _POST_ 请求：

    / api / 33 / userSettings / my-key？value = my-val

您可以指定要为其显式保存设置的用户
这个语法：

    / api / 33 / userSettings / my-key？user = username＆value = my-val

或者，您可以将设置值作为请求正文提交，
其中内容类型设置为“文本/纯文本”。例如，您可以使用
像这样卷曲：

```bash
curl "https://play.dhis2.org/demo/api/33/userSettings/my-key" -d "My long value"
  -H "Content-Type: text/plain" -u admin:district
```

例如，要将当前用户的 UI 语言环境设置为法语，您
可以使用以下命令。

```bash
curl "https://play.dhis2.org/demo/api/33/userSettings/keyUiLocale?value=fr" 
  -X POST -u admin:district
```

您应该将 my-key 替换为您的真实密钥，将 my-val 替换为您的真实值。要以纯文本形式检索给定键的值，您可以向以下 URL 发出 _GET_ 请求：

    / api / 33 / userSettings / my-key

要删除用户设置，您可以向 URL 发出 _DELETE_ 请求，类似于上面用于检索的请求。

可用的系统设置在下面列出。

<table style="width:100%;">
<caption>用户设置</caption>
<colgroup>
<col style="width: 21%" />
<col style="width: 28%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th>密钥</th>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>keyStyle</td>
<td>light_blue/light_blue.css |绿色/green.css |越南/vietnam.css</td>
<td>用户界面样式表。</td>
</tr>
<tr class="even">
<td>keyMessageEmailNotification</td>
<td>假 | true</td>
<td>是否发送电子邮件通知。</td>
</tr>
<tr class="odd">
<td>keyMessageSmsNotification</td>
<td>假 | true</td>
<td>是否发送短信通知。</td>
</tr>
<tr class="even">
<td>keyUiLocale</td>
<td>区域设置值</td>
<td>用户界面区域设置。</td>
</tr>
<tr class="odd">
<td>keyDbLocale</td>
<td>区域设置值</td>
<td>数据库内容区域设置。</td>
</tr>
<tr class="even">
<td>keyAnalysisDisplayProperty</td>
<td>名称 |短名称</td>
<td>在分析应用中显示元数据的属性。</td>
</tr>
<tr class="odd">
<td>keyCurrentDomainType</td>
<td>全部 |聚合|跟踪器</td>
<td>要在列表中显示的数据元素域类型。</td>
</tr>
<tr class="even">
<td>keyAutoSaveCaseEntryForm</td>
<td>假 | true</td>
<td>定期保存案例输入表单。</td>
</tr>
<tr class="odd">
<td>keyAutoSaveTrackedEntityForm</td>
<td>假 | true</td>
<td>定期保存人员注册表。</td>
</tr>
<tr class="even">
<td>keyAutoSaveDataEntryForm</td>
<td>假 | true</td>
<td>定期保存汇总数据输入表单。</td>
</tr>
<tr class="odd">
<td>keyTrackerDashboardLayout</td>
<td>假 | true</td>
<td>跟踪器仪表板布局。</td>
</tr>
</tbody>
</table>

## 组织单位 { #webapi_organisation_units }

_organizationUnits_ 资源与 DHIS2 中的其他元数据资源一样遵循标准约定。该资源支持一些额外的查询参数。

### 获取组织单位列表 { #webapi_list_of_organisation_units }

要获取组织单位的列表，可以使用以下资源。

    / api / 33 / organisationUnits

 <table>
 <caption>组织单位查询参数</caption>
 <colgroup>
 <col style="width: 17%" />
 <col style="width: 17%" />
 <col style="width: 65%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>用户仅</td>
 否| <td>假|真</td>
 <td>仅与当前用户关联的数据捕获组织单位。 </td>
 </tr>
 <tr class="even">
 <td> userDataViewOnly </td>
 否| <td>假|真</td>
 <td>仅与当前用户关联的数据视图组织单位。 </td>
 </tr>
 <tr class="odd">
 <td> userDataViewFallback </td>
 否| <td>假|真</td>
 <td>仅与当前用户相关联的数据视图组织单位，并回退到数据捕获组织单位。 </td>
 </tr>
 <tr class="even">
 查询<td> </td>
 <td>字符串</td>
 <td>查询名称，代码和ID属性。 </td>
 </tr>
 <tr class="odd">
 <td>级别</td>
 <td>整数</td>
 <td>层次结构中给定级别的组织单位。 </td>
 </tr>
 <tr class="even">
 <td> maxLevel </td>
 <td>整数</td>
 <td>给定的最高级别或更高层次结构中的级别的组织单位。 </td>
 </tr>
 <tr class="odd">
 用户层次结构内的<td> </td>
 否| <td>假|真</td>
 <td>将搜索和检索限制为用户数据捕获范围内的组织单位。 </td>
 </tr>
 <tr class="even">
 UserSearchHierarchy中的<td> </td>
 否| <td>假|真</td>
 <td>将搜索和检索限制为当前用户搜索范围内的组织单位。注意：如果为true，则“ withinUserHierarchy”具有更高的优先级。 </td>
 </tr>
 <tr class="odd">
 <td> memberCollection </td>
 <td>字符串</td>
 <td>要显示集合中的成员数，请参阅与组织单位关联的集合的名称。 </td>
 </tr>
 <tr class="even">
 <td> memberObject </td>
 <td> UID </td>
 <td>用于显示集合中成员的数量，是指集合中对象成员的标识符。 </td>
 </tr>
 </tbody>
 </table>

### 获取具有关系的组织单位 { #webapi_organisation_units_with_relations }

要获取具有相关组织单位的组织单位，您可以使用
以下资源。

    / api / 33 / organisationUnits / {id}

 <table>
 <caption>组织单位参数</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 20%" />
 <col style="width: 58%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>选项</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> includeChild </td>
 否| <td>假|真</td>
 <td>包括指定组织单位的直接子级，即子层次结构中下方直接级别的单位。 </td>
 </tr>
 <tr class="even">
 <td>包括后代</td>
 否| <td>假|真</td>
 <td>包括指定组织单位的所有子级，即子层次结构中的所有单位。 </td>
 </tr>
 <tr class="odd">
 <td>包括祖先</td>
 否| <td>假|真</td>
 <td>包括指定组织单位的所有父母。 </td>
 </tr>
 <tr class="even">
 <td>级别</td>
 <td>整数</td>
 <td>在子层次结构的给定级别（相对于下面的直接级别为1的组织单位）包括指定组织单位的子级。 </td>
 </tr>
 </tbody>
 </table>

## 数据集 { #webapi_data_sets }

_dataSets_ 资源与 DHIS2 中的其他元数据资源一样遵循标准约定。该资源支持一些额外的查询参数。

    / api / 33 / dataSets

要检索数据集的版本，您可以发出GET请求：

    GET /api/33/dataSets/<uid>/version

要提高（增加一个）数据集的版本，您可以发出 POST
要求：

    POST / api / 33 / dataSets / <uid> / version

### 数据集通知模板 { #webapi_dataset_notifications }

_数据集通知模板_资源与 DHIS2 中的其他元数据资源一样遵循标准约定。

    获取 /api/33/dataSetNotificationTemplates

要检索数据集通知模板，您可以发出GET请求：

    GET /api/33/dataSetNotficationTemplates/<uid>

要添加数据集通知模板，您可以发出POST请求：

    POST / api / 33 / dataSetNotficationTemplates

要删除数据集通知模板，您可以发出DELETE请求：

    删除/ api / 33 / dataSetNotficationTemplates / <uid>

JSON有效负载示例如下：

```json
{
    "name": "dataSetNotificationTemplate1",
    "notificationTrigger": "COMPLETION",
    "relativeScheduledDays": 0,
    "notificationRecipient": "ORGANISATION_UNIT_CONTACT",
    "dataSets": [
        {
            "id": "eZDhcZi6FLP"
        }
    ],
    "deliveryChannels": ["SMS"],
    "subjectTemplate": "V{data_name}",
    "messageTemplate": "V{data_name}V{complete_registration_period}",
    "sendStrategy": "SINGLE_NOTIFICATION"
}
```

## 填充的组织单位级别 { #webapi_filled_organisation_unit_levels }

_filledOrganizationUnitLevels_ 资源提供组织单位级别的有序列表，其中生成的级别将注入到列表中以填充不存在持久级别的职位。

    获取 /api/33/filledOrganizationUnitLevels

要设置组织单位级别，您可以使用
JSON 负载看起来像这样。

```json
{
    "organisationUnitLevels": [
        {
            "name": "National",
            "level": 1,
            "offlineLevels": 3
        },
        {
            "name": "District",
            "level": 2
        },
        {
            "name": "Chiefdom",
            "level": 3
        },
        {
            "name": "Facility",
            "level": 4
        }
    ]
}
```

要使用curl进行功能测试，您可以发出以下命令。

```bash
curl "http://localhost/api/33/filledOrganisationUnitLevels" -H "Content-Type:application/json"
  -d @levels.json -u admin:district
```

## 静态内容 { #webapi_static_content }

_staticContent_ 资源允许您上传和检索 DHIS2 中使用的自定义徽标。该资源允许用户上传带有关联密钥的文件，稍后可以使用该密钥检索该文件。仅支持 PNG 文件，并且只能上传到 `logo_banner` 和 `logo_front` 键。

    / api / 33 / staticContent

 <table>
 <caption>静态内容密钥</caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>键</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> logo_banner </td>
 左侧应用程序顶部菜单中的<td>徽标。 </td>
 </tr>
 <tr class="even">
 <td> logo_front </td>
 登录表单上方登录页面上的<td>徽标。 </td>
 </tr>
 </tbody>
 </table>

要上传文件，请使用 _POST_ 请求将文件发送至：

    POST / api / 33 / staticContent / <key>

请求将logo.png上传到`logo_front`键的示例：

```bash
curl -F "file=@logo.png;type=image/png" "https://play.dhis2.org/demo/api/33/staticContent/logo_front"
  -X POST -H "Content-Type: multipart/form-data" -u admin:district
```

使用相同的密钥上传多个文件将覆盖现有的
文件。这样，检索任何给定键的文件只会返回
最新上传的文件。

要检索徽标，您可以_GET_以下内容：

    GET /api/33/staticContent/<key>

Example of requests to retrieve the file stored for `logo_front`:

-   将“Accept: text/html”添加到 HTTP 标头。\*\_\_ 在这种情况下，如果未定义任何内容，端点将返回默认图像。当找到自定义或默认图像时将返回图像流。

```bash
curl "https://play.dhis2.org/demo/api/33/staticContent/logo_front" 
  -H "Accept: text/html" -L -u admin:district
```

-   将“Accept: application/json”添加到 HTTP 标头。\*\_\_ 设置此参数后，如果未找到自定义徽标，端点将永远不会返回默认图像。相反，将返回一条错误消息。当找到自定义图像时，此端点将返回一个 JSON 响应，其中包含相应图像的路径/URL。

```bash
curl "https://play.dhis2.org/demo/api/33/staticContent/logo_front" 
  -H "Accept: application/json" -L -u admin:district
```

成功和错误消息将如下所示：

```json
{
    "images": {
        "png": "http://localhost:8080/dhis/api/staticContent/logo_front"
    }
}
```

```json
{
    "httpStatus": "Not Found",
    "httpStatusCode": 404,
    "status": "ERROR",
    "message": "No custom file found."
}
```

要使用自定义徽标，您需要将其设置为_true_来启用相应的系统设置。如果相应的设置为 false，则将提供默认徽标。

## 组态 { #webapi_configuration }

要访问配置，您可以与 _configuration_ 资源交互。您可以通过 _Accept_ 标头或使用 .json 或 .xml 扩展名获取 XML 和 JSON 响应。您可以从以下位置_GET_配置的所有属性：

    / api / 33 /配置

您可以向以下特定资源发送 _GET_ 和 _POST_ 请求：

    GET / api / 33 / configuration / systemId

    GET POST DELETE / api / 33 / configuration / feedback收件人

    删除/ api / 33 / configuration / offlineOrganisationUnitLevel

    GET POST / api / 33 / configuration / infrastructuralDataElements

    GET POST / api / 33 / configuration / infrastructuralIndicators

    GET POST / api / 33 / configuration / infrastructuralPeriodType

    GET POST DELETE / api / 33 / configuration / selfRegistrationRole

    删除后/ api / 33 / configuration / selfRegistrationOrgUnit

对于 CORS 白名单配置，您可以使用
使用“application/json”作为有效负载的 URL 数组
内容类型，例如：

```json
["www.google.com", "www.dhis2.org", "www.who.int"]
```

    GET POST / api / 33 / configuration / corsWhitelist

对于 POST 请求，配置值应作为请求发送
有效载荷为文本。下表显示了适当的配置
每个属性的值。

 <table>
 <caption> 配置值 </caption>
 <colgroup>
 <col style="width: 30%" />
 <col style="width: 69%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 配置属性 </th>
 <th> 值 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 反馈收件人 </td>
 <td> 用户组 ID </td>
 </tr>
 <tr class="even">
 <td> offlineOrganisationUnitLevel </td>
 <td> 组织单位级别 ID </td>
 </tr>
 <tr class="odd">
 <td> 基础设施数据元素 </td>
 <td> 数据元素组 ID </td>
 </tr>
 <tr class="even">
 <td> 基础设施指标 </td>
 <td> 指标组 ID </td>
 </tr>
 <tr class="odd">
 <td> infrastructuralPeriodType </td>
 <td> 期间类型名称（例如 &quot;Monthly&quot;） </td>
 </tr>
 <tr class="even">
 <td> selfRegistrationRole </td>
 <td> 用户角色 ID </td>
 </tr>
 <tr class="odd">
 <td> selfRegistrationOrgUnit </td>
 <td> 组织单位 ID </td>
 </tr>
 <tr class="even">
 <td> smtp密码 </td>
 <td> SMTP 电子邮件服务器密码 </td>
 </tr>
 <tr class="odd">
 <td> remoteServerUrl </td>
 <td> 远程服务器的 URL </td>
 </tr>
 <tr class="even">
 <td> 远程服务器用户名 </td>
 <td> 远程服务器认证的用户名 </td>
 </tr>
 <tr class="odd">
 <td> 远程服务器密码 </td>
 <td> 远程服务器认证密码 </td>
 </tr>
 <tr class="even">
 <td> corsWhitelist </td>
 <td> URL 的 JSON 列表 </td>
 </tr>
 </tbody>
 </table>

例如，要设置反馈接收者用户组，您可以调用
以下 curl 命令：

```bash
curl "localhost/api/33/configuration/feedbackRecipients" -d "wl5cDMuUhmF"
  -H "Content-Type:text/plain"-u admin:district
```

## 只读配置服务 { #webapi_readonly_configuration_interface }

要访问配置，您现在可以使用只读服务。该服务将提供对_UserSettings、SystemSettings 和DHIS2 服务器配置的只读访问_您可以通过_Accept_ 标头获取XML 和JSON 响应。您可以从以下位置_获取_所有设置：

    / api / 33 / configuration / settings

您可以根据设置类型获得过滤设置：

    GET / api / 33 / configuration / settings / filter？type = USER_SETTING

    GET / api / 33 / configuration / settings / filter？type = CONFIGURATION

可以有不止一种类型
    假如

    获取 /api/33/configuration/settings/filter?type=USER_SETTING&type=SYSTEM_SETTING

<table>
<caption>SettingType values</caption>
<colgroup>
<col style="width: 30%" />
<col style="width: 69%" />
</colgroup>
<thead>
<tr class="header">
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>USER_SETTING</td>
<td>To get user settings</td>
</tr>
<tr class="even">
<td>SYSTEM_SETTING</td>
<td>To get system settings</td>
</tr>
<tr class="odd">
<td>CONFIGURATION</td>
<td>To get DHIS server settings</td>
</tr>
</tbody>
</table>

> **注意**
>
>将在输出中提供机密字段，但没有值。

## 国际化 { #webapi_i18n }

为了检索翻译字符串的键值对，您可以使用 _i18n_ 资源。

    / api / 33 / i18n

端点位于 _/api/i18n_ ，请求格式是一个简单的键值对数组：

```json
[
  "access_denied",
  "uploading_data_notification"
]
```

请求必须是 _POST_ 类型，并使用 _application/json_ 作为内容类型。使用 curl 的示例，假设请求数据保存为文件 `keys.json`：

```bash
curl -d @keys.json "play.dhis2.org/demo/api/33/i18n" -X POST
  -H "Content-Type: application/json" -u admin:district
```

结果将如下所示：

```json
{
    "access_denied": "Access denied",
    "uploading_data_notification": "Uploading locally stored data to the server"
}
```

## SVG转换 { #webapi_svg_conversion }

Web API 提供了一种资源，可用于将 SVG 内容转换为更广泛使用的格式，例如 PNG 和 PDF。理想情况下，这种转换应该发生在客户端，但并非所有客户端技术都能够执行此任务。目前支持 PNG 和 PDF 输出格式。 SVG 内容本身应该通过 _svg_ 查询参数传递，可选的查询参数 _filename_ 可用于指定响应附件文件的文件名。请注意，应省略文件扩展名。对于 PNG，您可以向以下 URL 发送 _POST_ 请求，内容类型为`application/x-www-form-urlencoded`，与常规 HTML 表单提交相同。

    api / svg.png

对于 PDF，您可以向以下 URL 发送 _POST_ 请求，内容类型为`application/x-www-form-urlencoded`。

    api / svg.pdf

 <table>
 <caption> 查询参数 </caption>
 <colgroup>
 <col style="width: 21%" />
 <col style="width: 11%" />
 <col style="width: 67%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 需要 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> svg </td>
 <td> 是 </td>
 <td> SVG 内容 </td>
 </tr>
 <tr class="even">
 <td> 文件名 </td>
 <td> 否 </td>
 <td> 返回的附件的文件名，没有文件扩展名 </td>
 </tr>
 </tbody>
 </table>

## 跟踪器Web API { #webapi_tracker_api }

Tracker Web API consists of 3 endpoints that have full CRUD (create,
read, update, delete) support. The 3 endpoints are
`/api/trackedEntityInstances`, `/api/enrollments` and
`/api/events` and they are responsible for tracked entity instance,
enrollment and event items.

### 跟踪实体实例管理 { #webapi_tracked_entity_instance_management }

跟踪的实体实例在API中具有完整的CRUD支持。一起
使用API进行注册，需要使用以下大部分操作
支持跟踪的实体实例和程序。

    / api / 33 / trackedEntityInstances

#### 创建一个新的跟踪实体实例 { #webapi_creating_tei }

为了在系统中创建新人员，您将使用 _trackedEntityInstances_ 资源。模板有效负载如下所示：

```json
{
    "trackedEntity": "tracked-entity-id",
    "orgUnit": "org-unit-id",
    "geometry": "<Geo JSON>",
    "attributes": [
        {
            "attribute": "attribute-id",
            "value": "attribute-value"
        }
    ]
}
```

字段“ geometry”接受一个GeoJson对象，其中
GeoJson必须匹配TrackedEntityType的featureType
定义。一个示例GeoJson对象如下所示：

```json
{
    "type": "Point",
    "coordinates": [1, 1]
}
```

“坐标”字段在2.29中引入，并接受一个坐标
或多边形作为值。

要获取`relationship`和`attributes`的 ID，您可以查看各自的资源`relationshipTypes`、`trackedEntityAttributes`。要创建跟踪实体实例，您必须使用 HTTP _POST_ 方法。您可以将有效负载发布到以下 URL： 


    / api / trackedEntityInstances

例如，让我们创建一个人员跟踪实体的新实例，然后
指定其名字和姓氏属性：

```json
{
    "trackedEntity": "nEenWmSyUEp",
    "orgUnit": "DiszpKrYNg8",
    "attributes": [
        {
            "attribute": "w75KJ2mc4zz",
            "value": "Joe"
        },
        {
            "attribute": "zDhUuAYrxNC",
            "value": "Smith"
        }
    ]
}
```

要将其推送到服务器，您可以使用cURL命令，如下所示：

```bash
curl -d @tei.json "https://play.dhis2.org/demo/api/trackedEntityInstances" -X POST
  -H "Content-Type: application/json" -u admin:district
```

要在一个请求中创建多个实例，您可以将有效负载包装在
像这样的外部数组并 POST 到与上面相同的资源：[]()

```json
{
    "trackedEntityInstances": [
        {
            "trackedEntity": "nEenWmSyUEp",
            "orgUnit": "DiszpKrYNg8",
            "attributes": [
                {
                    "attribute": "w75KJ2mc4zz",
                    "value": "Joe"
                },
                {
                    "attribute": "zDhUuAYrxNC",
                    "value": "Smith"
                }
            ]
        },
        {
            "trackedEntity": "nEenWmSyUEp",
            "orgUnit": "DiszpKrYNg8",
            "attributes": [
                {
                    "attribute": "w75KJ2mc4zz",
                    "value": "Jennifer"
                },
                {
                    "attribute": "zDhUuAYrxNC",
                    "value": "Johnson"
                }
            ]
        }
    ]
}
```

系统不允许创建跟踪实体实例
（以及注册和事件）具有已在
系统。这意味着不能重复使用 UID。

#### 更新跟踪的实体实例 { #webapi_updating_tei }

更新跟踪实体实例的有效载荷与上一节相同。不同的是，在发送有效负载时，必须使用 HTTP _PUT_ 方法进行请求。您还需要在 URL 中的 _trackedEntityInstances_ 资源中添加个人标识符，如下所示，其中 `<tracked-entity-instance-identifier>` 应替换为被跟踪实体实例的标识符：

    / api / trackedEntityInstances / <tracked-entity-instance-id>

有效载荷必须包含所有，甚至未修改的属性和
关系。之前和之前存在的属性或关系
不再存在于当前有效载荷中，将从中删除
系统。这意味着如果属性/关系在
当前有效负载，所有现有的属性/关系都将被删除
从系统。从 2.31 开始，可以忽略空
当前有效负载中的属性/关系。一个请求参数
`ignoreEmptyCollection` 设置为 `true` 可以在你不这样做的情况下使用
希望发送任何属性/关系，也不想要它们
要从系统中删除。

不允许更新已删除的跟踪实体实例。
此外，不允许通过以下方式将跟踪的实体实例标记为已删除
更新请求。相同的规则适用于注册和活动。

#### 删除跟踪的实体实例 { #webapi_deleting_tei }

为了删除跟踪实体实例，请使用 _DELETE_ 方法向标识跟踪实体实例的 URL 发出请求。该 URL 与上面用于更新的 URL 相同。

#### 创建并注册跟踪的实体实例 { #webapi_create_enroll_tei }

也可以创建（和更新）一个被跟踪的实体
实例，同时注册一个程序。

```json
{
    "trackedEntity": "tracked-entity-id",
    "orgUnit": "org-unit-id",
    "attributes": [
        {
            "attribute": "attribute-id",
            "value": "attribute-value"
        }
    ],
    "enrollments": [
        {
            "orgUnit": "org-unit-id",
            "program": "program-id",
            "enrollmentDate": "2013-09-17",
            "incidentDate": "2013-09-17"
        },
        {
            "orgUnit": "org-unit-id",
            "program": "program-id",
            "enrollmentDate": "2013-09-17",
            "incidentDate": "2013-09-17"
        }
    ]
}
```

您可以像通常在创建或
更新一个新的跟踪实体实例。

```bash
curl -X POST -d @tei.json -H "Content-Type: application/json"
  -u user:pass "http://server/api/33/trackedEntityInstances"
```

#### 有效负载的完整示例包括：跟踪的实体实例，注册和事件 { #webapi_create_enroll_tei_create_event }

也可以创建（和更新）一个被跟踪的实体实例，在
同时注册一个程序并创建一个事件。

```json
{
    "trackedEntityType": "nEenWmSyUEp",
    "orgUnit": "DiszpKrYNg8",
    "attributes": [
        {
            "attribute": "w75KJ2mc4zz",
            "value": "Joe"
        },
        {
            "attribute": "zDhUuAYrxNC",
            "value": "Rufus"
        },
        {
            "attribute": "cejWyOfXge6",
            "value": "Male"
        }
    ],
    "enrollments": [
        {
            "orgUnit": "DiszpKrYNg8",
            "program": "ur1Edk5Oe2n",
            "enrollmentDate": "2017-09-15",
            "incidentDate": "2017-09-15",
            "events": [
                {
                    "program": "ur1Edk5Oe2n",
                    "orgUnit": "DiszpKrYNg8",
                    "eventDate": "2017-10-17",
                    "status": "COMPLETED",
                    "storedBy": "admin",
                    "programStage": "EPEcjy3FWmI",
                    "coordinate": {
                        "latitude": "59.8",
                        "longitude": "10.9"
                    },
                    "dataValues": [
                        {
                            "dataElement": "qrur9Dvnyt5",
                            "value": "22"
                        },
                        {
                            "dataElement": "oZg33kd9taw",
                            "value": "Male"
                        }
                    ]
                },
                {
                    "program": "ur1Edk5Oe2n",
                    "orgUnit": "DiszpKrYNg8",
                    "eventDate": "2017-10-17",
                    "status": "COMPLETED",
                    "storedBy": "admin",
                    "programStage": "EPEcjy3FWmI",
                    "coordinate": {
                        "latitude": "59.8",
                        "longitude": "10.9"
                    },
                    "dataValues": [
                        {
                            "dataElement": "qrur9Dvnyt5",
                            "value": "26"
                        },
                        {
                            "dataElement": "oZg33kd9taw",
                            "value": "Female"
                        }
                    ]
                }
            ]
        }
    ]
}
```

您可以像通常在创建或
更新一个新的跟踪实体实例。

```bash
curl -X POST -d @tei.json -H "Content-Type: application/json"
  -u user:pass "http://server/api/33/trackedEntityInstances"
```

#### 生成的跟踪实体实例属性 { #webapi_generate_tei_attributes }

使用自动生成的跟踪实体实例属性
唯一值具有应用程序使用的三个端点。端点
都用于生成和保留值。

在 2.29 中，我们引入了 TextPattern 来定义和生成这些
模式。所有现有模式都将转换为有效的 TextPattern
升级到 2.29 时。

> **注意**
>
> 自 2.29 起，所有这些端点都将要求您包含`requiredValues`端点报告的任何变量，并按要求列出。现有模式，仅由 `#` 组成，将升级为新的 TextPattern 语法 `RANDOM(<old-pattern>)`。 TextPattern 的 RANDOM 段不是必需的变量，因此对于 2.29 之前定义的模式，此端点将像以前一样工作。

##### 寻找所需的值 { #finding-required-values }

TextPattern 可以包含根据不同的变量而变化的变量
因素。其中一些因素对服务器来说是未知的，因此
这些变量的值必须在生成和
保留值。

此端点将返回必需值和可选值的映射，即
服务器将在生成新值时注入 TextPattern。
必须为生成提供必需的变量，但可选
仅当您知道自己在做什么时才应提供变量。

    获取 /api/33/trackedEntityAttributes/Gs1ICEQTPlG/requiredValues

```json
{
    "REQUIRED": ["ORG_UNIT_CODE"],
    "OPTIONAL": ["RANDOM"]
}
```

##### 产生价值终点 { #webapi_generate_values }

在线 Web 应用程序和其他希望产生价值的客户
将立即使用可以使用简单的生成端点。这
端点将生成一个值，该值保证在
世代时间。该值也保证不被保留。作为
2.29，此端点还将保留生成的值 3 天。

如果您的 TextPattern 包含必需的值，您可以将它们作为
参数如下例：

过期时间也可以在生成时被覆盖，通过
将 `?expiration= <number-of-days> ` 添加到请求中。

    GET /api/33/trackedEntityAttributes/Gs1ICEQTPlG/generate?ORG_UNIT_CODE=OSLO

```json
{
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "C-OSL",
    "created": "2018-03-02T12:01:36.680",
    "expiryDate": "2018-03-05T12:01:36.678"
}
```

##### 产生并保留价值终点 { #webapi_generate_reserve_values }

生成和保留端点由需要的离线客户端使用
能够注册具有唯一 ID 的跟踪实体。他们会
保留一些唯一的 ID，此设备将在以下情况下使用
注册新的跟踪实体实例。端点被称为
检索多个跟踪的实体实例保留值。一个
可选参数 numberToReserve 指定要生成多少个 id
（默认值为 1）。

如果您的 TextPattern 包含必需的值，您可以将它们作为
参数如下例：

与 /generate 端点类似，该端点也可以指定
过期时间同理。通过添加`?expiration=<number-of-days>`
您可以覆盖默认的 60 天。

    GET /api/33/trackedEntityAttributes/Gs1ICEQTPlG/generateAndReserve?numberToReserve=3&ORG_UNIT_CODE=OSLO

```json
[
    {
        "ownerObject": "TRACKEDENTITYATTRIBUTE",
        "ownerUid": "Gs1ICEQTPlG",
        "key": "RANDOM(X)-OSL",
        "value": "B-OSL",
        "created": "2018-03-02T13:22:35.175",
        "expiryDate": "2018-05-01T13:22:35.174"
    },
    {
        "ownerObject": "TRACKEDENTITYATTRIBUTE",
        "ownerUid": "Gs1ICEQTPlG",
        "key": "RANDOM(X)-OSL",
        "value": "Q-OSL",
        "created": "2018-03-02T13:22:35.175",
        "expiryDate": "2018-05-01T13:22:35.174"
    },
    {
        "ownerObject": "TRACKEDENTITYATTRIBUTE",
        "ownerUid": "Gs1ICEQTPlG",
        "key": "RANDOM(X)-OSL",
        "value": "S-OSL",
        "created": "2018-03-02T13:22:35.175",
        "expiryDate": "2018-05-01T13:22:35.174"
    }
]
```

##### 保留值 { #reserved-values }

目前无法通过 api 访问保留值，但是，它们
由`generate` 和`generateAndReserve` 端点返回。这
下表解释了保留值对象的属性：

#####

 <table style="width:100%;">
 <caption>保留值</caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 84%" />
 </colgroup>
 <thead>
 <tr class="header">
 属性<th> </th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ownerObject </td>
 <td>生成和保留值时引用的元数据类型。目前仅支持TRACKEDENTITYATTRIBUTE。 </td>
 </tr>
 <tr class="even">
 <td> ownerUid </td>
 <td>生成和保留值时引用的元数据对象的uid。 </td>
 </tr>
 <tr class="odd">
 <td>键</td>
 <td>部分生成的值，其中尚未添加生成的段。 </td>
 </tr>
 <tr class="even">
 <td>值</td>
 <td>保留完全解析的值。这是存储数据时发送给服务器的值。 </td>
 </tr>
 <tr class="odd">
 <td>创建了</td>
 <td>进行预订的时间戳记</td>
 </tr>
 <tr class="even">
 <td>到期日期</td>
 <td>不再保留保留的时间戳</td>
 </tr>
 </tbody>
 </table>

过期的预订每天都会被删除。如果模式发生变化，则值
存储数据时将接受已经保留的数据，即使
它们与新模式不匹配，只要预订没有
已到期。

#### 图片属性 { #image-attributes }

处理图像属性很像处理文件数据
值。具有图像值类型的属性的值是
关联的文件资源。一个 GET 请求
`/api/trackedEntityInstances/ <entityId> / <attributeId> /image`
端点将返回实际图像。可选的高度和宽度
参数可用于指定图像的尺寸。

```bash
curl "http://server/api/33/trackedEntityInstances/ZRyCnJ1qUXS/zDhUuAYrxNC/image?height=200&width=200"
  > image.jpg
```

API 还支持 _dimension_ 参数。它可以采用三个可能的值：`小`(254x254)、`中`(512x512)、`大`(1024x1024) 或`原始`。图像类型属性将以预先生成的尺寸存储，并根据`尺寸`参数的值根据要求提供。

```bash
curl "http://server/api/33/trackedEntityInstances/ZRyCnJ1qUXS/zDhUuAYrxNC/image?dimension=medium"
```

#### 跟踪实体实例查询 { #webapi_tracked_entity_instance_query }

要查询跟踪的实体实例，您可以与
`/api/trackedEntityInstances` 资源。

    / api / 33 / trackedEntityInstances

##### 请求语法 { #webapi_tei_query_request_syntax }

 <table style="width:100%;">
 <caption> 跟踪实体实例查询参数 </caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 84%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 过滤器 </td>
 <td> 用作查询过滤器的属性。参数可以重复任意次。过滤器可以应用到对格式&lt;attribute-id&gt;的尺寸：&lt;operator&gt;：&lt;filter&gt; [：&lt;operator&gt;：&lt;filter&gt;]。过滤器值不区分大小写，可以与运算符一起重复任意次数。算可以EQ | GT |通用电气 | LT |乐 |东北 |喜欢 |在。 </td>
 </tr>
 <tr class="even">
 <td> 或 </td>
 <td> 组织单位标识符，由 &quot;;&quot; 分隔。 </td>
 </tr>
 <tr class="odd">
 <td> ouMode </td>
 <td> 选择组织单位的方式，可以是SELECTED |儿童 |后代 |无障碍 |捕捉 |全部。默认为 SELECTED，仅指选定的选定组织单位。有关解释，请参见下表。 </td>
 </tr>
 <tr class="even">
 <td> 程序 </td>
 <td> 程序标识符。限制实例注册到给定的程序。 </td>
 </tr>
 <tr class="odd">
 <td> 程序状态 </td>
 <td> 给定程序的实例状态。可以活跃 |已完成 |取消。 </td>
 </tr>
 <tr class="even">
 <td> 跟进 </td>
 <td> 跟踪给定程序的实例状态。可以是真的|错误或省略。 </td>
 </tr>
 <tr class="odd">
 <td> programStartDate </td>
 <td> 被跟踪实体实例的给定程序的注册开始日期。 </td>
 </tr>
 <tr class="even">
 <td> programEndDate </td>
 <td> 被跟踪实体实例在给定程序中的注册结束日期。 </td>
 </tr>
 <tr class="odd">
 <td> 被跟踪实体 </td>
 <td> 被跟踪的实体标识符。将实例限制为给定的跟踪实例类型。 </td>
 </tr>
 <tr class="even">
 <td> 页面 </td>
 <td> 页码。默认页面为 1。</td>
 </tr>
 <tr class="odd">
 <td> 页面大小 </td>
 <td> 页面大小。默认大小为每页 50 行。 </td>
 </tr>
 <tr class="even">
 <td> 总页数 </td>
 <td> 指示是否在分页响应中包含总页数（意味着更长的响应时间）。 </td>
 </tr>
 <tr class="odd">
 <td> 跳过分页 </td>
 <td> 指示是否应忽略分页并应返回所有行。 </td>
 </tr>
 <tr class="even">
 <td> lastUpdatedStartDate </td>
 <td> 过滤此日期之后更新的事件。不能与 <em> lastUpdatedDuration </em> 一起使用。 </td>
 </tr>
 <tr class="odd">
 <td> lastUpdatedEndDate </td>
 <td> 过滤截至此日期更新的事件。不能与 <em> lastUpdatedDuration </em> 一起使用。 </td>
 </tr>
 <tr class="even">
 <td> lastUpdatedDuration </td>
 <td> 仅包括在给定持续时间内更新的项目。格式为 <value> <time-unit> ，其中支持的时间单位为“d”（天）、“h”（小时）、“m”（分钟）和“s”（秒）。不能与 <em> lastUpdatedStartDate </em> 和/或 <em> lastUpdatedEndDate </em> 一起使用。 </td>
 </tr>
 <tr class="odd">
 <td> 分配的用户模式 </td>
 <td> 根据分配的用户选择模式将结果限制为 tei 分配的事件，可以是 CURRENT |提供 |无 |任何。 </td>
 </tr>
 <tr class="even">
 <td> 分配用户 </td>
 <td> 使用 <em>assignedUser=id1;id2 </em> 将结果过滤到有限的一组 teis，其中的事件分配给给定的用户 ID。仅当assignedUserMode 为 null 时才会考虑此参数。PROVIDED API 将出错，例如，如果assignedUserMode=CURRENT 和assignedUser=someId </td>
 </tr>
 <tr class="odd">
 <td> 跟踪实体实例 </td>
 <td> 使用 <em> trackedEntityInstance=id1;id2 </em> 使用被跟踪实体实例的显式 uid 将结果过滤到一组有限的 teis。该参数至少会创建结果的外边界，使用提供的 uid 形成所有 teis 的列表。如果使用此表中的其他参数/过滤器，它们将进一步限制来自显式外部边界的结果。 </td>
 </tr>
 </tbody>
 </table>

可用的组织单元选择模式在
下表。

 <table>
 <caption>组织单位选择模式</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 79%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>模式</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>已选择</td>
 <td>请求中定义的组织单位。 </td>
 </tr>
 <tr class="even">
 儿童<td>儿童</td>
 <td>所选组织单位和直属子级，即以下级别的组织单位。 </td>
 </tr>
 <tr class="odd">
 <td>后裔</td>
 <td>所选组织单位和所有子级，即子层次结构中的所有组织单位。 </td>
 </tr>
 <tr class="even">
 <td>可访问</td>
 <td>数据视图与当前用户和所有子级关联的组织单位，即子层次结构中的所有组织单位。如果未定义当前用户，它将退回到与当前用户关联的数据捕获组织单位。 </td>
 </tr>
 <tr class="odd">
 <td>捕获</td>
 <td>与当前用户和所有子级关联的数据捕获组织单位，即子层次结构中的所有组织单位。 </td>
 </tr>
 <tr class="even">
 <td>所有</td>
 <td>系统中的所有组织单位。需要ALL权限。 </td>
 </tr>
 </tbody>
 </table>

查询不区分大小写。以下规则适用于查询
参数。

-   必须使用 _ou_ 参数（一个或多个）指定至少一个组织单位，或者必须指定 _ouMode=ALL_。

-   只能指定 _program_ 和 _trackedEntity_ 参数之一（零或一）。

-   如果指定了 _programStatus_，则还必须指定 _program_。

-   如果指定了 _followUp_，则还必须指定 _program_。

-   如果指定了 _programStartDate_ 或 _programEndDate_，则还必须指定 _program_。

-   过滤器项目只能指定一次。

查询与特定组织单位关联的所有实例
看起来像这样：

    /api/33/trackedEntityInstances.json?ou=DiszpKrYNg8

使用一个带有过滤器的属性和一个属性来查询实例
没有过滤器的属性，一个组织单位使用
后代组织单位查询方式：

    /api/33/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A
      ＆filter = AMpUYgxuCaE＆ou = DiszpKrYNg8; yMCshbaVExv

对响应中包含一个属性的实例的查询
并且一个属性被用作
    筛选：

    /api/33/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A
      ＆filter = AMpUYgxuCaE：LIKE：Road＆ou = DiszpKrYNg8

为过滤器指定了多个操作数和过滤器的查询
物品：

    api / 33 / trackedEntityInstances.json？ou = DiszpKrYNg8＆program = ur1Edk5Oe2n
      ＆filter = lw1SqmMlnfh：GT：150：LT：190

要在 _IN_ 过滤器中使用多个值查询属性：

    api / 33 / trackedEntityInstances.json？ou = DiszpKrYNg8
      ＆filter = dv3nChNSIxy：IN：Scott; Jimmy; Santiago

限制对属于特定事件一部分的实例的响应
program 你可以包含一个 program 查询参数：

    api / 33 / trackedEntityInstances.json？filter = zHXD5Ve1Efw：EQ：A＆ou = O6uvpzGd5pu
      ＆ouMode = DESCENDANTS＆program = ur1Edk5Oe2n

要将程序注册日期指定为查询的一部分，请执行以下操作：

    api / 33 / trackedEntityInstances.json？filter = zHXD5Ve1Efw：EQ：A＆ou = O6uvpzGd5pu
      ＆program = ur1Edk5Oe2n＆programStartDate = 2013-01-01＆programEndDate = 2013-09-01

要限制对特定跟踪实体实例的响应，您
可以包含跟踪实体查询参数：

    api / 33 / trackedEntityInstances.json？filter = zHXD5Ve1Efw：EQ：A＆ou = O6uvpzGd5pu
      ＆ouMode = DESCENDANTS＆trackedEntity = cyl5vuJ5ETQ

默认情况下，实例以大小为 50 的页面返回，以更改
您可以使用 page 和 pageSize 查询参数：

    api / 33 / trackedEntityInstances.json？filter = zHXD5Ve1Efw：EQ：A＆ou = O6uvpzGd5pu
      ＆ouMode = DESCENDANTS＆page = 2＆pageSize = 3

您可以使用一系列运算符进行过滤：

 <table>
 <caption> 过滤运算符 </caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 80%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 操作员 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> EQ </td>
 <td> 等于 </td>
 </tr>
 <tr class="even">
 <td> GT </td>
 <td> 大于 </td>
 </tr>
 <tr class="odd">
 <td> GE </td>
 <td> 大于等于</td>
 </tr>
 <tr class="even">
 <td> LT </td>
 <td> 小于</td>
 </tr>
 <tr class="odd">
 <td> LE </td>
 <td> 小于等于</td>
 </tr>
 <tr class="even">
 <td> NE </td>
 <td> 不等于 </td>
 </tr>
 <tr class="odd">
 <td> LIKE </td>
 <td> 喜欢（自由文本匹配） </td>
 </tr>
 <tr class="even">
 <td> 在 </td>
 <td> 等于由 &quot;;&quot; </td> 分隔的多个值之一
 </tr>
 </tbody>
 </table>

##### 回应格式 { #webapi_tei_query_response_format }

此资源支持 JSON、JSONP、XLS 和 CSV 资源
表示。

-   json（应用程序/ json）

-   jsonp（应用程序/ javascript）

-   xml（应用程序/ xml）

JSON/XML 中的响应采用对象格式，看起来像
下列的。请注意，支持字段过滤，所以如果你想
一个完整的视图，您可能希望将 `fields=*` 添加到查询中：

```json
{
    "trackedEntityInstances": [
        {
            "lastUpdated": "2014-03-28 12:27:52.399",
            "trackedEntity": "cyl5vuJ5ETQ",
            "created": "2014-03-26 15:40:19.997",
            "orgUnit": "ueuQlqb8ccl",
            "trackedEntityInstance": "tphfdyIiVL6",
            "relationships": [],
            "attributes": [
                {
                    "displayName": "Address",
                    "attribute": "AMpUYgxuCaE",
                    "type": "string",
                    "value": "2033 Akasia St"
                },
                {
                    "displayName": "TB number",
                    "attribute": "ruQQnf6rswq",
                    "type": "string",
                    "value": "1Z 989 408 56 9356 521 9"
                },
                {
                    "displayName": "Weight in kg",
                    "attribute": "OvY4VVhSDeJ",
                    "type": "number",
                    "value": "68.1"
                },
                {
                    "displayName": "Email",
                    "attribute": "NDXw0cluzSw",
                    "type": "string",
                    "value": "LiyaEfrem@armyspy.com"
                },
                {
                    "displayName": "Gender",
                    "attribute": "cejWyOfXge6",
                    "type": "optionSet",
                    "value": "Female"
                },
                {
                    "displayName": "Phone number",
                    "attribute": "P2cwLGskgxn",
                    "type": "phoneNumber",
                    "value": "085 813 9447"
                },
                {
                    "displayName": "First name",
                    "attribute": "dv3nChNSIxy",
                    "type": "string",
                    "value": "Liya"
                },
                {
                    "displayName": "Last name",
                    "attribute": "hwlRTFIFSUq",
                    "type": "string",
                    "value": "Efrem"
                },
                {
                    "code": "Height in cm",
                    "displayName": "Height in cm",
                    "attribute": "lw1SqmMlnfh",
                    "type": "number",
                    "value": "164"
                },
                {
                    "code": "City",
                    "displayName": "City",
                    "attribute": "VUvgVao8Y5z",
                    "type": "string",
                    "value": "Kranskop"
                },
                {
                    "code": "State",
                    "displayName": "State",
                    "attribute": "GUOBQt5K2WI",
                    "type": "number",
                    "value": "KwaZulu-Natal"
                },
                {
                    "code": "Zip code",
                    "displayName": "Zip code",
                    "attribute": "n9nUvfpTsxQ",
                    "type": "number",
                    "value": "3282"
                },
                {
                    "code": "National identifier",
                    "displayName": "National identifier",
                    "attribute": "AuPLng5hLbE",
                    "type": "string",
                    "value": "465700042"
                },
                {
                    "code": "Blood type",
                    "displayName": "Blood type",
                    "attribute": "H9IlTX2X6SL",
                    "type": "string",
                    "value": "B-"
                },
                {
                    "code": "Latitude",
                    "displayName": "Latitude",
                    "attribute": "Qo571yj6Zcn",
                    "type": "string",
                    "value": "-30.659626"
                },
                {
                    "code": "Longitude",
                    "displayName": "Longitude",
                    "attribute": "RG7uGl4w5Jq",
                    "type": "string",
                    "value": "26.916172"
                }
            ]
        }
    ]
}
```

#### 跟踪实体实例网格查询 { #webapi_tracked_entity_instance_grid_query }

要查询跟踪的实体实例，您可以与 _/api/trackedEntityInstances/grid_ 资源进行交互。有两种类型的查询：一种是定义 _query_ 查询参数和可选的 _attribute_ 参数，另一种是定义 _attribute_ 和 _filter_ 参数。此端点使用更紧凑的“网格”格式，是上一节中查询的替代方案。

    / api / 33 / trackedEntityInstances / query

##### 请求语法 { #webapi_tei_grid_query_request_syntax }

 <table style="width:100%;">
 <caption> 跟踪实体实例查询参数 </caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 84%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 查询 </td>
 <td> 查询字符串。属性查询参数可用于定义要包含在响应中的属性。如果没有定义但程序的属性，则将使用程序中的属性。如果未定义程序，则将使用所有属性。有两种格式。第一个是计划查询字符串。第二个是格式 &lt;operator&gt;:&lt;query&gt;。算可以EQ |喜欢。 EQ 表示单词完全匹配，LIKE 表示单词部分匹配。查询将在空间上拆分，其中每个单词将形成一个逻辑 AND 查询。 </td>
 </tr>
 <tr class="even">
 <td> 属性 </td>
 <td> 要包含在响应中的属性。也可以用作查询的过滤器。参数可以重复任意次。过滤器可以应用到对格式&lt;attribute-id&gt;的尺寸：&lt;operator&gt;：&lt;filter&gt; [：&lt;operator&gt;：&lt;filter&gt;]。过滤器值不区分大小写，可以与运算符一起重复任意次数。算可以EQ | GT |通用电气 | LT |乐 |东北 |喜欢 |在。可以省略过滤器，以便在没有任何约束的情况下简单地在响应中包含属性。 </td>
 </tr>
 <tr class="odd">
 <td> 过滤器 </td>
 <td> 用作查询过滤器的属性。参数可以重复任意次。过滤器可以应用到对格式&lt;attribute-id&gt;的尺寸：&lt;operator&gt;：&lt;filter&gt; [：&lt;operator&gt;：&lt;filter&gt;]。过滤器值不区分大小写，可以与运算符一起重复任意次数。算可以EQ | GT |通用电气 | LT |乐 |东北 |喜欢 |在。 </td>
 </tr>
 <tr class="even">
 <td> 或 </td>
 <td> 组织单位标识符，由 &quot;;&quot; 分隔。 </td>
 </tr>
 <tr class="odd">
 <td> ouMode </td>
 <td> 选择组织单位的方式，可以是SELECTED |儿童 |后代 |无障碍 |全部。默认为 SELECTED，仅指选定的组织单位。有关解释，请参见下表。 </td>
 </tr>
 <tr class="even">
 <td> 程序 </td>
 <td> 程序标识符。限制实例注册到给定的程序。 </td>
 </tr>
 <tr class="odd">
 <td> 程序状态 </td>
 <td> 给定程序的实例状态。可以活跃 |已完成 |取消。 </td>
 </tr>
 <tr class="even">
 <td> 跟进 </td>
 <td> 跟踪给定程序的实例状态。可以是真的|错误或省略。 </td>
 </tr>
 <tr class="odd">
 <td> programStartDate </td>
 <td> 被跟踪实体实例的给定程序的注册开始日期。 </td>
 </tr>
 <tr class="even">
 <td> programEndDate </td>
 <td> 被跟踪实体实例在给定程序中的注册结束日期。 </td>
 </tr>
 <tr class="odd">
 <td> 被跟踪实体 </td>
 <td> 被跟踪的实体标识符。将实例限制为给定的跟踪实例类型。 </td>
 </tr>
 <tr class="even">
 <td> eventStatus </td>
 <td> 与给定程序和被跟踪实体实例相关联的任何事件的状态。可以活跃 |已完成 |访问 |预定 |逾期 |跳过。 </td>
 </tr>
 <tr class="odd">
 <td> eventStartDate </td>
 <td> 与给定程序和事件状态相关联的事件的开始日期。 </td>
 </tr>
 <tr class="even">
 <td> eventEndDate </td>
 <td> 与给定程序和事件状态相关联的事件的结束日期。 </td>
 </tr>
 <tr class="odd">
 <td> programStage </td>
 <td> 应应用事件相关过滤器的 programStage。如果未提供，将考虑所有阶段。 </td>
 </tr>
 <tr class="even">
 <td> skipMeta </td>
 <td> 指示是否应包含响应的元数据。 </td>
 </tr>
 <tr class="odd">
 <td> 页面 </td>
 <td> 页码。默认页面为 1。</td>
 </tr>
 <tr class="even">
 <td> 页面大小 </td>
 <td> 页面大小。默认大小为每页 50 行。 </td>
 </tr>
 <tr class="odd">
 <td> 总页数 </td>
 <td> 指示是否在分页响应中包含总页数（意味着更长的响应时间）。 </td>
 </tr>
 <tr class="even">
 <td> 跳过分页 </td>
 <td> 指示是否应忽略分页并应返回所有行。 </td>
 </tr>
 <tr class="odd">
 <td> 分配的用户模式 </td>
 <td> 根据分配的用户选择模式将结果限制为 tei 分配的事件，可以是 CURRENT |提供 |无 |任何。 </td>
 </tr>
 <tr class="even">
 <td> 分配用户 </td>
 <td> 使用 <em>assignedUser=id1;id2 </em> 将结果过滤到有限的一组 teis，其中的事件分配给给定的用户 ID。仅当assignedUserMode 为 null 时才会考虑此参数。PROVIDED API 将出错，例如，如果assignedUserMode=CURRENT 和assignedUser=someId </td>
 </tr>
 <tr class="odd">
 <td> 跟踪实体实例 </td>
 <td> 使用 <em> trackedEntityInstance=id1;id2 </em> 使用被跟踪实体实例的显式 uid 将结果过滤到一组有限的 teis。该参数至少会创建结果的外边界，使用提供的 uid 形成所有 teis 的列表。如果使用此表中的其他参数/过滤器，它们将进一步限制来自显式外部边界的结果。 </td>
 </tr>
 </tbody>
 </table>

可用的组织单元选择模式在
下表。

 <table>
 <caption>组织单位选择模式</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 79%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>模式</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>已选择</td>
 <td>请求中定义的组织单位。 </td>
 </tr>
 <tr class="even">
 儿童<td>儿童</td>
 <td>请求中定义的组织单位的直接子级，即仅位于下面的第一级。 </td>
 </tr>
 <tr class="odd">
 <td>后裔</td>
 <td>所有孩子，即仅低于以下水平的孩子，例如包括请求中定义的组织单位的孩子的孩子。 </td>
 </tr>
 <tr class="even">
 <td>可访问</td>
 <td>与当前用户关联的数据视图组织单位的所有后代。如果未定义当前用户，它将退回到与当前用户关联的数据捕获组织单位。 </td>
 </tr>
 <tr class="odd">
 <td>捕获</td>
 <td>与当前用户和所有子级关联的数据捕获组织单位，即子层次结构中的所有组织单位。 </td>
 </tr>
 <tr class="even">
 <td>所有</td>
 <td>系统中的所有组织单位。需要权限。 </td>
 </tr>
 </tbody>
 </table>

请注意，您可以使用过滤器指定“属性”或直接使用“过滤器”参数来限制
实例返回。

某些规则适用于返回的属性。

-   如果指定“查询”而没有任何属性或程序，则标记为“在列表中显示但没有程序”的所有属性都将包含在响应中。

-   如果指定了程序，则与该程序链接的所有属性都将包含在响应中。

-   如果指定了跟踪实体类型，则所有跟踪实体类型属性将包含在响应中。

您可以使用由空格分隔的单词来指定查询 - 即
情况系统会独立查询每个单词并返回
每个词都包含在任何属性中的记录。一个查询项可以
一次指定为属性，一次指定为过滤器（如果需要）。这
查询不区分大小写。以下规则适用于查询
参数。

-   必须使用 _ou_ 参数（一个或多个）指定至少一个组织单位，或者必须指定 _ouMode=ALL_。

-   只能指定 _program_ 和 _trackedEntity_ 参数之一（零或一）。

-   如果指定了 _programStatus_，则还必须指定 _program_。

-   如果指定了 _followUp_，则还必须指定 _program_。

-   如果指定了 _programStartDate_ 或 _programEndDate_，则还必须指定 _program_。

-   如果指定了 _eventStatus_，则还必须指定 _eventStartDate_ 和 _eventEndDate_。

-   不能与过滤器一起指定查询。

-   属性项目只能指定一次。

-   过滤器项目只能指定一次。

查询与特定组织单位关联的所有实例
看起来像这样：

    /api/33/trackedEntityInstances/query.json?ou=DiszpKrYNg8

查询特定值和组织单位的所有属性，
使用精确的单词匹配：

    /api/33/trackedEntityInstances/query.json?query=scott&ou=DiszpKrYNg8

使用部分词查询特定值的所有属性
比赛：

    /api/33/trackedEntityInstances/query.json?query=LIKE:scott&ou=DiszpKrYNg8

您可以查询由 URL 字符分隔的多个单词
空间为 %20，将对每个空间使用逻辑 AND 查询
    单词：

    /api/33/trackedEntityInstances/query.json?query=isabel%20may&ou=DiszpKrYNg8

指定要包含在响应中的属性的查询：

    /api/33/trackedEntityInstances/query.json?query=isabel
      ＆attribute = dv3nChNSIxy＆attribute = AMpUYgxuCaE＆ou = DiszpKrYNg8

使用一个带有过滤器的属性和一个属性来查询实例
没有过滤器的属性，一个组织单位使用
后代组织单位查询方式：

    /api/33/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      ＆attribute = AMpUYgxuCaE＆ou = DiszpKrYNg8; yMCshbaVExv

对响应中包含一个属性的实例的查询
并且一个属性被用作
    筛选：

    /api/33/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      ＆filter = AMpUYgxuCaE：LIKE：Road＆ou = DiszpKrYNg8

为过滤器指定了多个操作数和过滤器的查询
物品：

    /api/33/trackedEntityInstances/query.json?ou=DiszpKrYNg8&program=ur1Edk5Oe2n
      ＆filter = lw1SqmMlnfh：GT：150：LT：190

使用 IN 中的多个值查询属性
    筛选：

    /api/33/trackedEntityInstances/query.json?ou=DiszpKrYNg8
      ＆attribute = dv3nChNSIxy：IN：Scott; Jimmy; Santiago

限制对属于特定事件一部分的实例的响应
program 你可以包含一个 program 查询参数：

    /api/33/trackedEntityInstances/query.json?filter=zHXD5Ve1Efw:EQ:A
      ＆ou = O6uvpzGd5pu＆ouMode = DESCENDANTS＆program = ur1Edk5Oe2n

要将程序注册日期指定为查询的一部分，请执行以下操作：

    /api/33/trackedEntityInstances/query.json?filter=zHXD5Ve1Efw:EQ:A
      ＆ou = O6uvpzGd5pu＆program = ur1Edk5Oe2n＆programStartDate = 2013-01-01
      ＆programEndDate = 2013-09-01

要限制对特定跟踪实体实例的响应，您
可以包含跟踪实体查询参数：

    /api/33/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      ＆ou = O6uvpzGd5pu＆ouMode = DESCENDANTS＆trackedEntity = cyl5vuJ5ETQ

默认情况下，实例以大小为 50 的页面返回，以更改
您可以使用 page 和 pageSize 查询参数：

    /api/33/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      ＆ou = O6uvpzGd5pu＆ouMode = DESCENDANTS＆page = 2＆pageSize = 3

查询具有给定状态的事件的实例
给定的时间跨度：

    /api/33/trackedEntityInstances/query.json?ou=O6uvpzGd5pu
      ＆program = ur1Edk5Oe2n＆eventStatus = LATE_VISIT
      ＆eventStartDate = 2014-01-01＆eventEndDate = 2014-09-01

您可以使用一系列运算符进行过滤：

 <table>
 <caption> 过滤运算符 </caption>
 <colgroup>
 <col style="width: 19%" />
 <col style="width: 80%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 操作员 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> EQ </td>
 <td> 等于 </td>
 </tr>
 <tr class="even">
 <td> GT </td>
 <td> 大于 </td>
 </tr>
 <tr class="odd">
 <td> GE </td>
 <td> 大于等于</td>
 </tr>
 <tr class="even">
 <td> LT </td>
 <td> 小于</td>
 </tr>
 <tr class="odd">
 <td> LE </td>
 <td> 小于等于</td>
 </tr>
 <tr class="even">
 <td> NE </td>
 <td> 不等于 </td>
 </tr>
 <tr class="odd">
 <td> LIKE </td>
 <td> 喜欢（自由文本匹配） </td>
 </tr>
 <tr class="even">
 <td> 在 </td>
 <td> 等于由 &quot;;&quot; </td> 分隔的多个值之一
 </tr>
 </tbody>
 </table>

##### 回应格式 { #webapi_tei_grid_query_response_format }

此资源支持 JSON、JSONP、XLS 和 CSV 资源
表示。

-   json（应用程序/ json）

-   jsonp（应用程序/ javascript）

-   xml（应用程序/ xml）

-   csv（应用程序/ csv）

-   xls（application / vnd.ms-excel）

JSON 中的响应采用表格格式，如下所示。 _headers_ 部分描述了每列的内容。实例、已创建、上次更新、组织单位和跟踪实体列始终存在。以下各列对应于查询中指定的属性。 _rows_ 部分每个实例包含一行。

```json
{
    "headers": [
        {
            "name": "instance",
            "column": "Instance",
            "type": "java.lang.String"
        },
        {
            "name": "created",
            "column": "Created",
            "type": "java.lang.String"
        },
        {
            "name": "lastupdated",
            "column": "Last updated",
            "type": "java.lang.String"
        },
        {
            "name": "ou",
            "column": "Org unit",
            "type": "java.lang.String"
        },
        {
            "name": "te",
            "column": "Tracked entity",
            "type": "java.lang.String"
        },
        {
            "name": "zHXD5Ve1Efw",
            "column": "Date of birth type",
            "type": "java.lang.String"
        },
        {
            "name": "AMpUYgxuCaE",
            "column": "Address",
            "type": "java.lang.String"
        }
    ],
    "metaData": {
        "names": {
            "cyl5vuJ5ETQ": "Person"
        }
    },
    "width": 7,
    "height": 7,
    "rows": [
        [
            "yNCtJ6vhRJu",
            "2013-09-08 21:40:28.0",
            "2014-01-09 19:39:32.19",
            "DiszpKrYNg8",
            "cyl5vuJ5ETQ",
            "A",
            "21 Kenyatta Road"
        ],
        [
            "fSofnQR6lAU",
            "2013-09-08 21:40:28.0",
            "2014-01-09 19:40:19.62",
            "DiszpKrYNg8",
            "cyl5vuJ5ETQ",
            "A",
            "56 Upper Road"
        ],
        [
            "X5wZwS5lgm2",
            "2013-09-08 21:40:28.0",
            "2014-01-09 19:40:31.11",
            "DiszpKrYNg8",
            "cyl5vuJ5ETQ",
            "A",
            "56 Main Road"
        ],
        [
            "pCbogmlIXga",
            "2013-09-08 21:40:28.0",
            "2014-01-09 19:40:45.02",
            "DiszpKrYNg8",
            "cyl5vuJ5ETQ",
            "A",
            "12 Lower Main Road"
        ],
        [
            "WnUXrY4XBMM",
            "2013-09-08 21:40:28.0",
            "2014-01-09 19:41:06.97",
            "DiszpKrYNg8",
            "cyl5vuJ5ETQ",
            "A",
            "13 Main Road"
        ],
        [
            "xLNXbDs9uDF",
            "2013-09-08 21:40:28.0",
            "2014-01-09 19:42:25.66",
            "DiszpKrYNg8",
            "cyl5vuJ5ETQ",
            "A",
            "14 Mombasa Road"
        ],
        [
            "foc5zag6gbE",
            "2013-09-08 21:40:28.0",
            "2014-01-09 19:42:36.93",
            "DiszpKrYNg8",
            "cyl5vuJ5ETQ",
            "A",
            "15 Upper Hill"
        ]
    ]
}
```

#### 跟踪实体实例过滤器 { #webapi_tei_filters }

要创建、读取、更新和删除跟踪的实体实例过滤器，您可以与 _/api/trackedEntityInstanceFilters_ 资源进行交互。

    / api / 33 / trackedEntityInstanceFilters

##### 创建和更新跟踪的实体实例过滤器定义 { #create-and-update-a-tracked-entity-instance-filter-definition }

为了在系统中创建和更新跟踪实体实例过滤器，您将使用 _trackedEntityInstanceFilters_ 资源。跟踪的实体实例过滤器定义在 Tracker Capture 应用程序中使用，以在跟踪器用户界面中显示相关的预定义“工作列表”。

<table>
<caption>Payload</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>Payload values</th>
<th>Description</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>name</td>
<td>Name of the filter. Required.</td>
<td></td>
</tr>
<tr class="even">
<td>description</td>
<td>A description of the filter.</td>
<td></td>
</tr>
<tr class="odd">
<td>sortOrder</td>
<td>The sort order of the filter. Used in Tracker Capture to order the filters in the program dashboard.</td>
<td></td>
</tr>
<tr class="even">
<td>style</td>
<td>Object containing css style.</td>
<td>( &quot;color&quot;: &quot;blue&quot;, &quot;icon&quot;: &quot;fa fa-calendar&quot;}</td>
</tr>
<tr class="odd">
<td>program</td>
<td>Object containing the id of the program. Required.</td>
<td>{ &quot;id&quot; : &quot;uy2gU8kTjF&quot;}</td>
</tr>
<tr class="even">
<td>enrollmentStatus</td>
<td>The TEIs enrollment status. Can be none(any enrollmentstatus) or ACTIVE|COMPLETED|CANCELED</td>
<td></td>
</tr>
<tr class="odd">
<td>followup</td>
<td>When this parameter is true, the filter only returns TEIs that have an enrollment with status followup.</td>
<td></td>
</tr>
<tr class="even">
<td>enrollmentCreatedPeriod</td>
<td>Period object containing a period in which the enrollment must be created. See <em>Period</em> definition table below.</td>
<td>{ &quot;periodFrom&quot;: -15, &quot;periodTo&quot;: 15}</td>
</tr>
<tr class="odd">
<td>eventFilters</td>
<td>A list of eventFilters. See <em>Event filters</em> definition table below.</td>
<td>[{&quot;programStage&quot;: &quot;eaDH9089uMp&quot;, &quot;eventStatus&quot;: &quot;OVERDUE&quot;, &quot;eventCreatedPeriod&quot;: {&quot;periodFrom&quot;: -15, &quot;periodTo&quot;: 15}}]</td>
</tr>
</tbody>
</table>

<table>
<caption>Event filters definition</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td>programStage</td>
<td>Which programStage the TEI needs an event in to be returned.</td>
<td>&quot;eaDH9089uMp&quot;</td>
</tr>
<tr class="even">
<td>eventStatus</td>
<td>The events status. Can be none(any event status) or ACTIVE|COMPLETED|SCHEDULED|OVERDUE</td>
<td>ACTIVE</td>
</tr>
<tr class="odd">
<td>eventCreatedPeriod</td>
<td>Period object containing a period in which the event must be created. See <em>Period</em> definition below.</td>
<td>{ &quot;periodFrom&quot;: -15, &quot;periodTo&quot;: 15}</td>
</tr>
<tr class="even">
<td>assignedUserMode</td>
<td>To specify the assigned user selection mode for events. Possible values are CURRENT (events assigned to current user)| PROVIDED (events assigned to users provided in "assignedUsers" list) | NONE (events assigned to no one) | ANY (events assigned to anyone). If PROVIDED (or null), non-empty assignedUsers in the payload will be considered.</td>
<td>"assignedUserMode": "PROVIDED"</td>
</tr>
<tr class="odd">
<td>assignedUsers</td>
<td>To specify a list of assigned users for events. To be used along with PROVIDED assignedUserMode above.</td>
<td>"assignedUsers": ["a3kGcGDCuk7", "a3kGcGDCuk8"]</td>
</tr>
</tbody>
</table>

 <table>
 <caption>期间定义</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <tbody>
 <tr class="odd">
 <td>期间从</td>
 <td>从当天算起的天数。可以是正整数或负整数。 </td>
 <td> -15 </td>
 </tr>
 <tr class="even">
 <td>周期到</td>
 <td>从当天算起的天数。必须大于periodFrom。可以是正整数或负整数。 </td>
 <td> 15 </td>
 </tr>
 </tbody>
 </table>

##### 跟踪实体实例过滤器查询 { #tracked-entity-instance-filters-query }

要查询系统中跟踪的实体实例过滤器，您可以与 _/api/trackedEntityInstanceFilters_ 资源进行交互。

 <table>
 <caption>跟踪的实体实例过滤器查询参数</caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>程序</td>
 <td>程序标识符。将过滤器限制为给定程序。 </td>
 </tr>
 </tbody>
 </table>

### 招生管理 { #webapi_enrollment_management }

注册在 API 中具有完整的 CRUD 支持。与 API 一起
对于跟踪的实体实例，使用所需的大多数操作
支持被跟踪的实体实例和程序。

    / api / 33 /注册

#### 将跟踪的实体实例注册到程序中 { #webapi_enrolling_tei }

要将人员注册到计划中，您需要首先从 _trackedEntityInstances_ 资源中获取人员的标识符。然后，您需要从 _programs_ 资源获取程序标识符。模板有效负载如下所示：

```json
{
    "trackedEntityInstance": "ZRyCnJ1qUXS",
    "orgUnit": "ImspTQPwCqd",
    "program": "S8uo8AlvYMz",
    "enrollmentDate": "2013-09-17",
    "incidentDate": "2013-09-17"
}
```

此负载应在对以下 URL 标识的注册资源的 _POST_ 请求中使用：

    / api / 33 /注册

For cancelling or completing an enrollment, you can make a _PUT_ request to the `enrollments` resource, including the identifier and the action you want to perform. For cancelling an enrollment for a tracked entity instance:

    / api / 33 / enrollments / <enrollment-id> /取消

要完成跟踪实体实例的注册，您可以向以下 URL 发出 _PUT_ 请求：

    / api / 33 / enrollments / <enrollment-id> /已完成

要删除注册，您可以向以下 URL 发出 _DELETE_ 请求：

    / api / 33 / enrollments / <enrollment-id>

#### 注册实例查询 { #webapi_enrollment_instance_query }

要查询注册情况，您可以与 _/api/enrollments_ 资源进行交互。

    / api / 33 /注册

##### 请求语法 { #webapi_enrollment_query_request_syntax }

 <table style="width:100%;">
 <caption>注册查询参数</caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 84%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> ou </td>
 <td>组织单位标识符，以&quot;; &quot;分隔。 </td>
 </tr>
 <tr class="even">
 <td> ouMode </td>
 <td>选择组织单位的模式可以选择|儿童|后裔|可访问|捕捉|所有。默认值为SELECTED，它仅引用所选的组织单位。有关说明，请参见下表。 </td>
 </tr>
 <tr class="odd">
 <td>程序</td>
 <td>程序标识符。将实例限制为注册到给定程序中。 </td>
 </tr>
 <tr class="even">
 <td>程序状态</td>
 <td>给定程序的实例状态。可以处于活动状态|已完成取消。 </td>
 </tr>
 <tr class="odd">
 <td>跟进</td>
 <td>给定程序的实例的跟踪状态。可以是真的错误或省略。 </td>
 </tr>
 <tr class="even">
 <td>程序启动日期</td>
 <td>跟踪的实体实例在给定程序中注册的开始日期。 </td>
 </tr>
 <tr class="odd">
 <td>程序结束日期</td>
 <td>跟踪的实体实例在给定程序中的注册结束日期。 </td>
 </tr>
 <tr class="even">
 <td> lastUpdatedDuration </td>
 <td>仅包括在给定持续时间内更新的项目。格式为<value> <time-unit>，其中支持的时间单位为“ d”（天），“ h”（小时），“ m”（分钟）和“ s”（秒）。 </td>
 </tr>
 <tr class="odd">
 <td> trackedEntity </td>
 <td>跟踪的实体标识符。将实例限制为给定的跟踪实例类型。 </td>
 </tr>
 <tr class="even">
 <td> trackedEntityInstance </td>
 <td>跟踪的实体实例标识符。不应与trackedEntity一起使用。 </td>
 </tr>
 <tr class="odd">
 <td>页面</td>
 <td>页码。默认页面为1。</td>
 </tr>
 <tr class="even">
 <td>页面大小</td>
 <td>页面大小。默认大小是每页50行。 </td>
 </tr>
 <tr class="odd">
 <td>总页数</td>
 <td>指示是否在寻呼响应中包括总页数（意味着响应时间更长）。 </td>
 </tr>
 <tr class="even">
 <td> skipPaging </td>
 <td>指示是否应忽略分页并应返回所有行。 </td>
 </tr>
 <tr class="odd">
 <td> include已删除</td>
 <td>指示是否包括软删除的注册。默认情况下为false。 </td>
 </tr>
 </tbody>
 </table>

可用的组织单元选择模式在
下表。

 <table>
 <caption>组织单位选择模式</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 79%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>模式</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>已选择</td>
 <td>请求中定义的组织单位（默认）。 </td>
 </tr>
 <tr class="even">
 儿童<td>儿童</td>
 <td>请求中定义的组织单位的直接子级，即仅位于下面的第一级。 </td>
 </tr>
 <tr class="odd">
 <td>后裔</td>
 <td>所有孩子，即仅低于以下水平的孩子，例如包括请求中定义的组织单位的孩子的孩子。 </td>
 </tr>
 <tr class="even">
 <td>可访问</td>
 <td>与当前用户关联的数据视图组织单位的所有后代。如果未定义当前用户，它将退回到与当前用户关联的数据捕获组织单位。 </td>
 </tr>
 <tr class="odd">
 <td>所有</td>
 <td>系统中的所有组织单位。需要权限。 </td>
 </tr>
 </tbody>
 </table>

查询不区分大小写。以下规则适用于查询
参数。

-   必须使用 _ou_ 参数（一个或多个）指定至少一个组织单位，或者必须指定 _ouMode=ALL_。

-   只能指定 _program_ 和 _trackedEntity_ 参数之一（零或一）。

-   如果指定了 _programStatus_，则还必须指定 _program_。

-   如果指定了 _followUp_，则还必须指定 _program_。

-   如果指定了 _programStartDate_ 或 _programEndDate_，则还必须指定 _program_。

查询与特定组织单位关联的所有注册
看起来像这样：

    /api/33/enrollments.json?ou=DiszpKrYNg8

限制对作为特定活动一部分的注册的响应
程序，您可以包含程序查询
    范围：

    /api/33/enrollments.json?ou=O6uvpzGd5pu&ouMode=DESCENDANTS&program=ur1Edk5Oe2n

要将程序注册日期指定为查询的一部分，请执行以下操作：

    /api/33/enrollments.json?&ou=O6uvpzGd5pu&program=ur1Edk5Oe2n
      ＆programStartDate = 2013-01-01＆programEndDate = 2013-09-01

限制对特定被跟踪实体的注册的响应
您可以包含跟踪实体查询
    范围：

    /api/33/enrollments.json?ou=O6uvpzGd5pu&ouMode=DESCENDANTS&trackedEntity=cyl5vuJ5ETQ

限制对特定被跟踪实体的注册的响应
例如，您可以包含一个跟踪实体实例查询参数，在
在这种情况下，我们已将其限制为可查看的可用注册
当前的
    用户：

    /api/33/enrollments.json?ouMode=ACCESSIBLE&trackedEntityInstance=tphfdyIiVL6

默认情况下，注册以 50 页大小的页面返回，以更改
这您可以使用 page 和 pageSize 查询
    参数：

    /api/33/enrollments.json?ou=O6uvpzGd5pu&ouMode=DESCENDANTS&page=2&pageSize=3

##### 回应格式 { #webapi_enrollment_query_response_format }

此资源支持 JSON、JSONP、XLS 和 CSV 资源
表示。

-   json（应用程序/ json）

-   jsonp（应用程序/ javascript）

-   xml（应用程序/ xml）

JSON/XML 中的响应采用对象格式，看起来像
下列的。请注意，支持字段过滤，所以如果你想
一个完整的视图，您可能希望将 `fields=*` 添加到查询中：

```json
{
    "enrollments": [
        {
            "lastUpdated": "2014-03-28T05:27:48.512+0000",
            "trackedEntity": "cyl5vuJ5ETQ",
            "created": "2014-03-28T05:27:48.500+0000",
            "orgUnit": "DiszpKrYNg8",
            "program": "ur1Edk5Oe2n",
            "enrollment": "HLFOK0XThjr",
            "trackedEntityInstance": "qv0j4JBXQX0",
            "followup": false,
            "enrollmentDate": "2013-05-23T05:27:48.490+0000",
            "incidentDate": "2013-05-10T05:27:48.490+0000",
            "status": "ACTIVE"
        }
    ]
}
```

### 大事记 { #webapi_events }

本节关于发送和读取事件。

    / api / 33 / events

#### 发送事件 { #webapi_sending_events }

DHIS2 支持三种事件： 没有注册的单一事件
（也称为匿名事件），注册的单一事件
和多个注册的事件。注册意味着
数据链接到使用标识的跟踪实体实例
某种标识符。

要将事件发送到 DHIS2，您必须与 _events_ 资源进行交互。发送事件的方法类似于发送聚合数据值。您将需要一个可以使用 _programs_ 资源查找的 _program_、一个可以使用 _organizationUnits_ 资源查找的 _orgUnit_ 以及可以使用 _dataElements_ 资源查找的有效数据元素标识符列表。对于注册事件，需要 _tracked 实体实例_ 标识符，请在有关 _trackedEntityInstances_ 资源的部分中阅读如何获取此标识符。要将事件发送到具有多个阶段的程序，您还需要包含 _programStage_ 标识符，programStages 的标识符可以在 _programStages_ 资源中找到。

XML 格式的没有注册示例有效负载的简单单个事件
我们从“住院发病率和死亡率”发送事件的地方
可以看到演示数据库中“Ngelehun CHC”设施的程序
以下：

```xml
<?xml version="1.0" encoding="utf-8"?>
<event program="eBAyeGv0exc" orgUnit="DiszpKrYNg8"
  eventDate="2013-05-17" status="COMPLETED" storedBy="admin">
  <coordinate latitude="59.8" longitude="10.9" />
  <dataValues>
    <dataValue dataElement="qrur9Dvnyt5" value="22" />
    <dataValue dataElement="oZg33kd9taw" value="Male" />
    <dataValue dataElement="msodh3rEMJa" value="2013-05-18" />
  </dataValues>
</event>
```

为了执行一些测试，我们可以将 XML 负载保存为文件
调用*event.xml* 并将其作为 POST 请求发送到事件资源
在 API 中使用 curl 和以下命令：

```bash
curl -d @event.xml "https://play.dhis2.org/demo/api/33/events"
  -H "Content-Type:application/xml" -u admin:district
```

JSON格式的相同负载如下所示：

```json
{
    "program": "eBAyeGv0exc",
    "orgUnit": "DiszpKrYNg8",
    "eventDate": "2013-05-17",
    "status": "COMPLETED",
    "completedDate": "2013-05-18",
    "storedBy": "admin",
    "coordinate": {
        "latitude": 59.8,
        "longitude": 10.9
    },
    "dataValues": [
        {
            "dataElement": "qrur9Dvnyt5",
            "value": "22"
        },
        {
            "dataElement": "oZg33kd9taw",
            "value": "Male"
        },
        {
            "dataElement": "msodh3rEMJa",
            "value": "2013-05-18"
        }
    ]
}
```

要发送此信息，您可以将其保存到名为 _event.json_ 的文件中，并使用curl，如下所示：

```bash
curl -d @event.json "localhost/api/33/events" -H "Content-Type:application/json"
  -u admin:district
```

我们还支持同时发送多个事件。一个有效载荷
XML 格式可能如下所示：

```xml
<?xml version="1.0" encoding="utf-8"?>
<events>
  <event program="eBAyeGv0exc" orgUnit="DiszpKrYNg8"
    eventDate="2013-05-17" status="COMPLETED" storedBy="admin">
    <coordinate latitude="59.8" longitude="10.9" />
    <dataValues>
      <dataValue dataElement="qrur9Dvnyt5" value="22" />
      <dataValue dataElement="oZg33kd9taw" value="Male" />
    </dataValues>
  </event>
  <event program="eBAyeGv0exc" orgUnit="DiszpKrYNg8"
    eventDate="2013-05-17" status="COMPLETED" storedBy="admin">
    <coordinate latitude="59.8" longitude="10.9" />
    <dataValues>
      <dataValue dataElement="qrur9Dvnyt5" value="26" />
      <dataValue dataElement="oZg33kd9taw" value="Female" />
    </dataValues>
  </event>
</events>
```

您将收到一份包含回复的导入摘要，该回复可以是
检查以获取有关请求结果的信息，
比如成功导入了多少值。 JSON 格式的负载
格式如下：

```json
{
    "events": [
        {
            "program": "eBAyeGv0exc",
            "orgUnit": "DiszpKrYNg8",
            "eventDate": "2013-05-17",
            "status": "COMPLETED",
            "storedBy": "admin",
            "coordinate": {
                "latitude": "59.8",
                "longitude": "10.9"
            },
            "dataValues": [
                {
                    "dataElement": "qrur9Dvnyt5",
                    "value": "22"
                },
                {
                    "dataElement": "oZg33kd9taw",
                    "value": "Male"
                }
            ]
        },
        {
            "program": "eBAyeGv0exc",
            "orgUnit": "DiszpKrYNg8",
            "eventDate": "2013-05-17",
            "status": "COMPLETED",
            "storedBy": "admin",
            "coordinate": {
                "latitude": "59.8",
                "longitude": "10.9"
            },
            "dataValues": [
                {
                    "dataElement": "qrur9Dvnyt5",
                    "value": "26"
                },
                {
                    "dataElement": "oZg33kd9taw",
                    "value": "Female"
                }
            ]
        }
    ]
}
```

您还可以使用GeoJson在事件上存储任何类型的几何图形。在此处可以看到使用GeoJson代替以前的经度和纬度属性的有效负载示例：

```json
{
    "program": "eBAyeGv0exc",
    "orgUnit": "DiszpKrYNg8",
    "eventDate": "2013-05-17",
    "status": "COMPLETED",
    "storedBy": "admin",
    "geometry": {
        "type": "POINT",
        "coordinates": [59.8, 10.9]
    },
    "dataValues": [
        {
            "dataElement": "qrur9Dvnyt5",
            "value": "22"
        },
        {
            "dataElement": "oZg33kd9taw",
            "value": "Male"
        },
        {
            "dataElement": "msodh3rEMJa",
            "value": "2013-05-18"
        }
    ]
}
```

作为导入摘要的一部分，您还将获得刚刚发送的事件的标识符_reference_，以及指向该事件的服务器位置的_href_ 元素。下表描述了每个元素的含义。

 <table>
 <caption> 事件资源格式 </caption>
 <colgroup>
 <col style="width: 13%" />
 <col style="width: 8%" />
 <col style="width: 8%" />
 <col style="width: 30%" />
 <col style="width: 38%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> </th>型
 <th> 需要 </th>
 <th> 选项（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 程序 </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> </td>
 <td> 没有注册程序的单个事件的标识符 </td>
 </tr>
 <tr class="even">
 <td> 组织单位 </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> </td>
 <td> 事件发生的组织单位的标识符 </td>
 </tr>
 <tr class="odd">
 <td> eventDate </td>
 <td> 日期 </td>
 <td> 真 </td>
 <td> </td>
 <td> 事件发生的日期 </td>
 </tr>
 <tr class="even">
 <td> 完成日期 </td>
 <td> 日期 </td>
 <td> 假 </td>
 <td> </td>
 <td> 事件完成的日期。如果未提供，则选择当前日期作为事件完成日期 </td>
 </tr>
 <tr class="odd">
 <td> 状态 </td>
 <td> 枚举 </td>
 <td> 假 </td>
 <td> ACTIVE |已完成 |访问 |日程 |逾期 |跳过 </td>
 <td> 事件是否完成 </td>
 </tr>
 <tr class="even">
 <td> 由 </td> 存储
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 默认为当前用户 </td>
 <td> 谁存储了这个事件（可以是用户名、系统名称等） </td>
 </tr>
 <tr class="odd">
 <td> 坐标 </td>
 <td> 双 </td>
 <td> 假 </td>
 <td> </td>
 <td> 指事件发生的地理位置（纬度和经度） </td>
 </tr>
 <tr class="even">
 <td> 数据元素 </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> </td>
 <td> 数据元素的标识符 </td>
 </tr>
 <tr class="odd">
 <td> 值 </td>
 <td> 字符串 </td>
 <td> 真 </td>
 <td> </td>
 <td> 此事件的数据值或度量 </td>
 </tr>
 </tbody>
 </table>

##### OrgUnit匹配 { #orgunit-matching }

默认情况下，orgUnit 参数将在 ID 上进行匹配，您还可以使用参数 orgUnitIdScheme=SCHEME 选择 orgUnit id 匹配方案，其中选项为：_ID_、_UID_、_UUID_、_CODE_ 和 _NAME_。还有_ATTRIBUTE:_ 方案，它匹配_unique_ 元数据属性值。

#### 更新事件 { #webapi_updating_events }

要更新现有事件，有效负载的格式是相同的，但是
您要发布到的 URL 必须将标识符添加到 URL 的末尾
字符串并且请求必须是 PUT。

有效载荷必须包含所有属性，即使是未修改的属性。
以前存在但现在不存在的属性
系统将删除任何更多的有效载荷。

不允许更新已删除的事件。同样适用
跟踪实体实例和注册。

```bash
curl -X PUT -d @updated_event.xml "localhost/api/33/events/ID"
  -H "Content-Type: application/xml" -u admin:district
```

```bash
curl -X PUT -d @updated_event.json "localhost/api/33/events/ID"
  -H "Content-Type: application/json" -u admin:district
```

#### 删除活动 { #webapi_deleting_events }

要删除现有事件，您只需要发送 DELETE 请求
带有对您正在使用的服务器的标识符引用。

```bash
curl -X DELETE "localhost/api/33/events/ID" -u admin:district
```

#### 为用户分配事件 { #webapi_user_assign_event }

可以将用户分配给事件。这可以通过在更新或创建事件时在有效负载中包含适当的属性来完成。

      “ assignedUser”：“ <id>”

id是指用户的if。一次只能为一个事件分配一个用户。

必须先在程序阶段启用用户分配，然后才能将用户分配给事件。

#### 获取事件 { #webapi_getting_events }

要获取现有事件，您可以发出 GET 请求，包括
像这样的标识符：

```bash
curl "http://localhost/api/33/events/ID" -H "Content-Type: application/xml" -u admin:district
```

#### 查询和阅读事件 { #webapi_querying_reading_events }

本节介绍如何读出已存储在 DHIS2 实例中的事件。有关事件数据的更高级用途，请参阅事件分析部分。 `/api/events` 端点的输出格式将与用于向其发送事件的格式匹配（分析事件 api 不支持）。通过添加 .json/.xml 或设置适当的 _Accept_ 标头，支持 XML 和 JSON。默认情况下对查询进行分页，默认页面大小为 50 个事件，_field_ 过滤的工作方式与元数据相同，添加 _fields_ 参数并包含您想要的属性，即 _?fields=program,status_。

 <table>
 <caption> 事件资源查询参数 </caption>
 <thead>
 <tr class="header">
 <th> 密钥 </th>
 <th> </th>型
 <th> 需要 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 程序 </td>
 <td> 标识符 </td>
 <td> 真（如果没有提供 programStage） </td>
 <td> 程序标识符 </td>
 </tr>
 <tr class="even">
 <td> programStage </td>
 <td> 标识符 </td>
 <td> 假 </td>
 <td> 程序阶段标识符 </td>
 </tr>
 <tr class="odd">
 <td> 程序状态 </td>
 <td> 枚举 </td>
 <td> 假 </td>
 <td> 程序中事件的状态，可以是 ACTIVE |已完成 |取消 </td>
 </tr>
 <tr class="even">
 <td> 跟进 </td>
 <td> 布尔值 </td>
 <td> 假 </td>
 <td> 程序中是否考虑事件跟进，可以为真|错误或省略。 </td>
 </tr>
 <tr class="odd">
 <td> 跟踪实体实例 </td>
 <td> 标识符 </td>
 <td> 假 </td>
 <td> 被跟踪实体实例的标识符 </td>
 </tr>
 <tr class="even">
 <td> 组织单位 </td>
 <td> 标识符 </td>
 <td> 真 </td>
 <td> 组织单元标识符 </td>
 </tr>
 <tr class="odd">
 <td> ouMode </td>
 <td> 枚举 </td>
 <td> 假 </td>
 <td> 组织单位选择模式，可以选择 |儿童 |后代 </td>
 </tr>
 <tr class="even">
 <td> 开始日期 </td>
 <td> 日期 </td>
 <td> 假 </td>
 <td> 仅此日期之后的事件 </td>
 </tr>
 <tr class="odd">
 <td> 结束日期 </td>
 <td> 日期 </td>
 <td> 假 </td>
 <td> 仅早于此日期的事件 </td>
 </tr>
 <tr class="even">
 <td> 状态 </td>
 <td> 枚举 </td>
 <td> 假 </td>
 <td> 事件状态，可以是ACTIVE |已完成 |访问 |预定 |逾期 |跳过 </td>
 </tr>
 <tr class="odd">
 <td> lastUpdatedStartDate </td>
 <td> 日期 </td>
 <td> 假 </td>
 <td> 过滤此日期之后更新的事件。不能与 <em> lastUpdatedDuration </em> 一起使用。 </td>
 </tr>
 <tr class="even">
 <td> lastUpdatedEndDate </td>
 <td> 日期 </td>
 <td> 假 </td>
 <td> 过滤截至此日期更新的事件。不能与 <em> lastUpdatedDuration </em> 一起使用。 </td>
 </tr>
 <tr class="odd">
 <td> lastUpdatedDuration </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 仅包括在给定持续时间内更新的项目。格式为 <value> <time-unit> ，其中支持的时间单位为“d”（天）、“h”（小时）、“m”（分钟）和“s”（秒）。不能与 <em> lastUpdatedStartDate </em> 和/或 <em> lastUpdatedEndDate </em> 一起使用。 </td>
 </tr>
 <tr class="even">
 <td> skipMeta </td>
 <td> 布尔值 </td>
 <td> 假 </td>
 <td> 排除响应的元数据部分（提高性能）</td>
 </tr>
 <tr class="odd">
 <td> 页面 </td>
 <td> 整数 </td>
 <td> 假 </td>
 <td> 页码 </td>
 </tr>
 <tr class="even">
 <td> 页面大小 </td>
 <td> 整数 </td>
 <td> 假 </td>
 <td> 每页的项目数 </td>
 </tr>
 <tr class="odd">
 <td> 总页数 </td>
 <td> 布尔值 </td>
 <td> 假 </td>
 <td> 指示是否在分页响应中包含总页数。 </td>
 </tr>
 <tr class="even">
 <td> 跳过分页 </td>
 <td> 布尔值 </td>
 <td> 假 </td>
 <td> 查询中是否跳过分页，返回所有事件。 </td>
 </tr>
 <tr class="odd">
 <td> dataElementIdScheme </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 用于导出的数据元素 ID 方案，有效选项为 UID、CODE 和 ATTRIBUTE：{ID} </td>
 </tr>
 <tr class="even">
 <td> categoryOptionComboIdScheme </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 用于导出的类别选项组合 ID 方案，有效选项为 UID、CODE 和
属性：{ID} </td>
 </tr>
 <tr class="odd">
 <td> orgUnitIdScheme </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 用于导出的组织单元 ID 方案，有效选项为 UID、CODE 和
属性：{ID} </td>
 </tr>
 <tr class="even">
 <td> programIdScheme </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 用于导出的程序 ID 方案，有效选项为 UID、CODE 和 ATTRIBUTE：{ID} </td>
 </tr>
 <tr class="odd">
 <td> programStageIdScheme </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 用于导出的程序阶段 ID 方案，有效选项为 UID、CODE 和 ATTRIBUTE：{ID} </td>
 </tr>
 <tr class="even">
 <td> idScheme </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 允许为数据元素、类别选项组合、组织单位、程序和程序设置 id 方案
立即上台。 </td>
 </tr>
 <tr class="odd">
 <td> 订单 </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 从 API 检索事件的顺序。用法：order=&lt;property&gt;:asc/desc - 默认为升序。
 <p> 属性：事件 |程序|节目舞台 |招生|注册状态 |组织单位 |组织单位名称 |跟踪实体实例 |活动日期 |跟进 |状态 |到期日 |存储者 |创建 |最后更新 |完成者 |完成日期 </p>
 <pre> <code> order=orgUnitName:DESC </code> </pre>
 <pre> <code> order=lastUpdated:ASC </code> </pre> </td>
 </tr>
 <tr class="even">
 <td> 事件 </td>
 <td> 逗号分隔的字符串 </td>
 <td> 假 </td>
 <td> 使用 <em> event=id1;id2 </em> 将结果过滤到一组有限的 ID。 </td>
 </tr>
 <tr class="odd">
 <td> skipEventId </td>
 <td> 布尔值 </td>
 <td> 假 </td>
 <td> 跳过响应中的事件标识符 </td>
 </tr>
 <tr class="even">
 <td> attributeCc (**) </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 属性类别组合标识符（必须与 <em> 属性Cos </em> 组合） </td>
 </tr>
 <tr class="odd">
 <td> 属性Cos (**) </td>
 <td> 字符串 </td>
 <td> 假 </td>
 <td> 属性类别选项标识符，以 ; 分隔（必须与 <em> attributeCc </em> 结合） </td>
 </tr>
 <tr class="even">
 <td> 异步 </td>
 <td> 假 |真 </td>
 <td> 假 </td>
 <td> 指示导入是异步还是同步。 </td>
 </tr>
 <tr class="odd">
 <td> 包括已删除 </td>
 <td> 布尔值 </td>
 <td> 假 </td>
 <td> 当为 true 时，软删除事件将包含在您的查询结果中。 </td>
 </tr>
 <tr class="even">
 <td> 分配的用户模式 </td>
 <td> 枚举 </td>
 <td> 假 </td>
 <td> 分配的用户选择模式，可以是 CURRENT |提供 |无 |任何。 </td>
 </tr>
 <tr class="odd">
 <td> 分配用户 </td>
 <td> 逗号分隔的字符串 </td>
 <td> 假 </td>
 <td> 使用 <em>assignedUser=id1;id2 </em> 将结果过滤为分配给给定用户 ID 的有限事件集。仅当assignedUserMode 为PROVIDED 或null 时才会考虑此参数。 API 将出错，例如，如果assignedUserMode=CURRENT 和assignedUser=someId </td>
 </tr>
 </tbody>
 </table>

> **注意**
>
>如果查询既不包含`attributeCC`也不包含`attributeCos`，则服务器将为用户具有读取访问权限的所有属性选项组合返回事件。

##### 例子 { #examples }

查询具有特定组织单位的子级的所有事件：

    /api/29/events.json?orgUnit=YuQRtpLP10I&ouMode=CHILDREN

查询某个组织的所有后代的所有事件
单位，暗示子层次结构中的所有组织单位：

    /api/33/events.json?orgUnit=O6uvpzGd5pu&ouMode=后代

使用特定程序和组织单位查询所有事件：

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc

查询具有一定节目和组织单位的所有事件，
按截止日期排序
    上升：

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&order=dueDate

查询某节目中活动日期最新的10个活动
和组织单位 - 按到期日降序分页和排序：

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc
      ＆order = eventDate：desc＆pageSize = 10＆page = 1

查询具有特定节目和组织单位的所有事件
特定的跟踪实体实例：

    /api/33/events.json?orgUnit=DiszpKrYNg8
      ＆program = eBAyeGv0exc＆trackedEntityInstance = gfVxE3ALA9m

查询某个程序和组织单位较旧的所有事件
或等于
    2014-02-03：

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&endDate=2014-02-03

查询具有一定节目阶段、组织单位和
2014年被跟踪实体实例：

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc
      ＆trackedEntityInstance = gfVxE3ALA9m＆startDate = 2014-01-01＆endDate = 2014-12-31

查询与事件数据值关联的文件。在获取图像文件的特定情况下，可以提供附加参数来获取不同尺寸的图像。如果未提供尺寸，系统将返回原始图像。如果获取非图像文件（例如 pdf），该参数将被忽略。可能的尺寸值为_小(254 x 254)、中(512 x 512)、大(1024 x 1024) 或原始_。除上述值之外的任何值都将被丢弃，并返回原始图像。

    / api / 33 / events / files？eventUid = hcmcWlYkg9u＆dataElementUid = C0W4aFuVm4P＆dimension = small

检索具有指定组织单位和程序的事件，并使用 _Attribute:Gq0oWTf2DtN_ 作为
标识符方案

    /api/events?orgUnit=DiszpKrYNg8&program=lxAQ7Zs9VYR&idScheme=属性：Gq0oWTf2DtN

检索具有指定组织单位和程序的事件，并使用 UID 作为标识符方案
orgUnits，代码作为程序阶段的标识符方案，以及 _Attribute:Gq0oWTf2DtN_ 作为标识符
具有指定属性的其余元数据的方案。

    api/events.json?orgUnit=DiszpKrYNg8&program=lxAQ7Zs9VYR&idScheme=属性：Gq0oWTf2DtN
      &orgUnitIdScheme=UID&programStageIdScheme=代码

#### 事件网格查询 { #event-grid-query }

除了上面的事件查询端点，还有一个事件网格
查询终点，其中更紧凑的“网格”事件格式
回。这可以通过与
/api/events/query.json|xml|xls|csv 端点。

    / api / 33 / events / query

事件查询和读取中提到的大部分查询参数
上面的部分在此处有效。但是，由于要返回的网格
带有适用于所有行（事件）的特定列集，它
必须指定程序阶段。混合是不可能的
来自不同程序或程序阶段的事件返回。

从单个程序阶段返回事件，也为新的事件打开
功能 - 例如根据事件对事件进行排序和搜索
数据元素值。 api/events/query 对此有支持。以下是
一些例子

返回仅包含选定数据元素的事件网格的查询
对于一个程序阶段

    /api/33/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk
      ＆dataElement = qrur9Dvnyt5，fWIAEtYVEGk，K6uUAvq500H＆order = lastUpdated：desc
      ＆pageSize = 50＆page = 1＆totalPages = true

返回包含所有数据元素的事件网格的查询
程序
    阶段

    /api/33/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk
      ＆includeAllDataElements = true

基于数据元素过滤事件的查询
    价值

    /api/33/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk
      ＆filter = qrur9Dvnyt5：GT：20：LT：50

除了过滤，上面的例子还说明了一个
事情：没有提到要返回的数据元素的事实
在网格中。发生这种情况时，系统默认返回只返回
在程序阶段标记为“在报告中显示”的那些数据元素
配置。

我们还可以扩展上面的查询以返回一个排序的网格（asc|desc）
基于数据元素
    价值

    /api/33/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk
      ＆filter = qrur9Dvnyt5：GT：20：LT：50＆order = qrur9Dvnyt5：desc

#### 事件过滤器 { #webapi_event_filters }

要创建、读取、更新和删除事件过滤器，您
可以与`/api/eventFilters` 资源交互。

    / api / 33 / eventFilters

##### 创建和更新事件过滤器定义 { #create-and-update-an-event-filter-definition }

为了在系统中创建和更新事件过滤器，您将使用 _eventFilters_ 资源。 _POST_ 用于创建，_PUT_ 方法用于更新。事件过滤器定义在 Tracker Capture 应用程序中使用，以在跟踪器用户界面中显示相关的预定义“工作列表”。

 <table>
 <caption>请求有效负载</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>请求属性</th>
 <th>说明</th>
 <th>示例</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>名称</td>
 <td>过滤器的名称。 </td>
 <td>“名称”：“我的工作清单” </td>
 </tr>
 <tr class="even">
 <td>说明</td>
 <td>过滤器的描述。 </td>
 <td>“ description”：“用于列出分配给我的所有事件”。 </td>
 </tr>
 <tr class="odd">
 <td>程序</td>
 <td>程序的uid。 </td>
 <td>“程序”：“ a3kGcGDCuk6” </td>
 </tr>
 <tr class="even">
 <td>程序阶段</td>
 <td>程序阶段的uid。 </td>
 <td>“ programStage”：“ a3kGcGDCuk6” </td>
 </tr>
 <tr class="even">
 <td> eventQueryCriteria </td>
 <td>包含用于查询，排序和过滤事件的参数的对象。 </td>
 <td>
  “ eventQueryCriteria”：{
    “ organisationUnit”：“ a3kGcGDCuk6”，
    “ status”：“ COMPLETED”，
    “创建日期”： {
      “ from”：“ 2014-05-01”，
      “至”：“ 2019-03-20”
    }，
    “ dataElements”：[“ a3kGcGDCuk6：EQ：1”，“ a3kGcGDCuk6”]，
    “ filters”：[“ a3kGcGDCukuk：EQ：1”]，
    “ programStatus”：“ ACTIVE”，
    “ ouMode”：“已选择”，
    “ assignedUserMode”：“已提供”，
    “ assignedUsers”：[“ a3kGcGDCuk7”，“ a3kGcGDCuk8”]，
    “ followUp”：否，
    “ trackedEntityInstance”：“ a3kGcGDCuk6”，
    “事件”：[“ a3kGcGDCuk7”，“ a3kGcGDCuk8”]，
    “ fields”：“ eventDate，dueDate”，
    “ order”：“ dueDate：asc，createdDate：desc”
  }
 </td>
 </tr>
 </tbody>
 </table>

 <table>
 <caption>事件查询条件定义</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <tbody>
 <tr class="odd">
 <td>跟进</td>
 <td>用于基于注册followUp标志过滤事件。可能的值为true | false。 </td>
 <td>“ followUp”：真</td>
 </tr>
 <tr class="even">
 <td>组织单位</td>
 <td>指定组织单位的uid </td>
 <td>“ organizationUnit”：“ a3kGcGDCuk7” </td>
 </tr>
 <tr class="odd">
 <td> ouMode </td>
 <td>指定OU选择模式。可能的值是SELECTED |儿童|后裔|可访问性|捕获|所有</td>
 <td>“ ouMode”：“已选择” </td>
 </tr>
 <tr class="even">
 <td> AssignedUserMode </td>
 <td>为事件指定分配的用户选择模式。可能的值为CURRENT |提供|无|任何。请参阅下表以了解每个值表示什么。如果设置为PROVIDED（或为null），则将考虑有效负载中的非空AssignedUsers。 </td>
 <td>“ assignedUserMode”：“已提供” </td>
 </tr>
 <tr class="odd">
 <td>已分配用户</td>
 <td>指定事件的分配用户列表。与上面的PROVIDEDsignedUserMode一起使用。 </td>
 <td>“ assignedUsers”：[“ a3kGcGDCuk7”，“ a3kGcGDCuk8”] </td>
 </tr>
 <tr class="even">
 <td> displayOrderColumns </td>
 <td>指定列</td>的输出顺序
 <td>“ displayOrderColumns”：[“ eventDate”，“ dueDate”，“ program”] </td>
 </tr>
 <tr class="odd">
 <td>订单</td>
 <td>以逗号分隔值指定字段的排序/排序及其方向。单个项目的顺序为“ dataItem：direction”。 </td>
 <td>“ order” =“ a3kGcGDCuk6：desc，eventDate：asc” </td>
 </tr>
 <tr class="even">
 <td>数据过滤器</td>
 <td>指定在列出事件时要应用的过滤器</td>
 <td>“ dataFilters” = [{
      “ dataItem”：“ abcDataElementUid”，
      “ le”：“ 20”，
      “ ge”：“ 10”，
      “ lt”：“ 20”，
      “ gt”：“ 10”，
      “在”：[“印度”，“挪威”]，
      “ like”：“ abc”，
      “ dateFilter”：{
        “ startDate”：“ 2014-05-01”，
        “ endDate”：“ 2019-03-20”，
        “ startBuffer”：-5，
        “ endBuffer”：5
        “ period”：“ LAST_WEEK”，
        “ type”：“ RELATIVE”
      }
    }] </td>
 </tr>
 <tr class="odd">
 <td>状态</td>
 <td>任何有效的EventStatus </td>
 <td>“ eventStatus”：“已完成” </td>
 </tr>
 <tr class="even">
 <td>事件</td>
 <td>指定事件列表</td>
 <td>“事件” = [“ a3kGcGDCuk6”] </td>
 </tr>
 <tr class="odd">
 <td>完成日期</td>
 <td> DateFilterPeriod对象基于完成日期的日期过滤。 </td>
 <td>
  “ completedDate”：{
    “ startDate”：“ 2014-05-01”，
    “ endDate”：“ 2019-03-20”，
    “ startBuffer”：-5，
    “ endBuffer”：5
    “ period”：“ LAST_WEEK”，
    “ type”：“ RELATIVE”
  }
 </td>
 </tr>
 <tr class="even">
 <td>事件日期</td>
 <td> DateFilterPeriod基于事件日期的对象日期过滤。 </td>
 <td>
  “活动日期”： {
    “ startBuffer”：-5，
    “ endBuffer”：5
    “ type”：“ RELATIVE”
  }
 </td>
 </tr>
 <tr class="odd">
 <td>到期日期</td>
 <td> DateFilterPeriod对象基于到期日期的日期过滤。 </td>
 <td>
  “截止日期”： {
    “ period”：“ LAST_WEEK”，
    “ type”：“ RELATIVE”
  }
 </td>
 </tr>
 <tr class="even">
 <td> lastUpdatedDate </td>
 <td> DateFilterPeriod对象基于最近更新的日期进行日期过滤。 </td>
 <td>
  “ lastUpdatedDate”：{
    “ startDate”：“ 2014-05-01”，
    “ endDate”：“ 2019-03-20”，
    “ type”：“绝对”
  }
 </td>
 </tr>

 </tbody>
 </table>

 <table>
 <caption> DateFilterPeriod对象定义</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <tbody>
 <tr class="odd">
 <td>类型</td>
 指定日期期间类型是否为ABSOLUTE | <td>相关</td>
 <td>“ type”：“ RELATIVE” </td>
 </tr>
 <tr class="even">
 <td>周期</td>
 <td>指定是否使用相对系统定义的时间段。仅在“类型”为相对时适用。 （有关支持的相对周期，请参见<a href="#webapi_date_relative_period_values">相对周期</a>）</td>
 <td>“句点”：“ THIS_WEEK” </td>
 </tr>
 <tr class="odd">
 <td>开始日期</td>
 <td>绝对开始日期。仅当“类型”为绝对值时才适用</td>
 <td>“ startDate”：“ 2014-05-01” </td>
 </tr>
 <tr class="even">
 <td>结束日期</td>
 <td>绝对结束日期。仅当“类型”为绝对值时才适用</td>
 <td>“ startDate”：“ 2014-05-01” </td>
 </tr>
 <tr class="odd">
 <td> startBuffer </td>
 <td>相对的自定义开始日期。仅在“类型”为相对</td>时适用
 <td>“ startBuffer”：-10 </td>
 </tr>
 <tr class="even">
 <td> endBuffer </td>
 <td>相对自定义结束日期。仅在“类型”为相对</td>时适用
 <td>“ startDate”：+ 10 </td>
 </tr>
 </tbody>
 </table>

可用的分配用户选择模式在
下表。

 <table>
 <caption>分配的用户选择模式（事件分配）</caption>
 <colgroup>
 <col style="width: 20%" />
 <col style="width: 79%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>模式</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>当前</td>
 <td>分配给当前登录的用户</td>
 </tr>
 <tr class="even">
 <td>提供了</td>
 <td>分配给“ assignedUser”参数中提供的用户</td>
 </tr>
 <tr class="odd">
 <td>无</td>
 <td>分配给任何用户。 </td>
 </tr>
 <tr class="even">
 <td>任意</td>
 <td>分配给任何用户。 </td>
 </tr>
 </tbody>
 </table>

下面显示了可用于创建/更新eventFilter的示例有效负载。

```json
{
    "program": "ur1Edk5Oe2n",
    "description": "Simple Filter for TB events",
    "name": "TB events",
    "eventQueryCriteria": {
        "organisationUnit": "DiszpKrYNg8",
        "eventStatus": "COMPLETED",
        "eventDate": {
            "startDate": "2014-05-01",
            "endDate": "2019-03-20",
            "startBuffer": -5,
            "endBuffer": 5,
            "period": "LAST_WEEK",
            "type": "RELATIVE"
        },
        "dataFilters": [
            {
                "dataItem": "abcDataElementUid",
                "le": "20",
                "ge": "10",
                "lt": "20",
                "gt": "10",
                "in": ["India", "Norway"],
                "like": "abc"
            },
            {
                "dataItem": "dateDataElementUid",
                "dateFilter": {
                    "startDate": "2014-05-01",
                    "endDate": "2019-03-20",
                    "type": "ABSOLUTE"
                }
            },
            {
                "dataItem": "anotherDateDataElementUid",
                "dateFilter": {
                    "startBuffer": -5,
                    "endBuffer": 5,
                    "type": "RELATIVE"
                }
            },
            {
                "dataItem": "yetAnotherDateDataElementUid",
                "dateFilter": {
                    "period": "LAST_WEEK",
                    "type": "RELATIVE"
                }
            }
        ],
        "programStatus": "ACTIVE"
    }
}
```

##### 检索和删除事件过滤器 { #retrieving-and-deleting-event-filters }

可以使用以下api检索特定的事件过滤器

    GET /api/33/eventFilters/{uid}

可以使用以下api检索所有事件过滤器。

    获取 /api/33/eventFilters?fields=*

可以使用以下api检索特定程序的所有事件过滤器

    GET /api/33/eventFilters?filter=program:eq:IpHINAT79UW

可以使用以下API删除事件过滤器

    删除/ api / 33 / eventFilters / {uid}

### 人际关系 { #relationships }

关系是跟踪器中两个实体之间的链接。这些实体可以跟踪实体实例，注册和事件。

有多个端点，可让您查看，创建，删除和更新关系。最常见的是/ api / trackedEntityInstances端点，您可以在其中将关系包括在有效负载中以创建，更新或删除它们（如果忽略它们）-类似于在同一端点中处理注册和事件的方式。如果在字段过滤器中请求，所有跟踪器端点，/ api / trackedEntityInstances，/ api / enrollments和/ api / events也会列出它们的关系。

但是，关系的标准端点是/ api / relationships。该端点为关系提供所有正常的CRUD操作。

列出所有关系要求您提供要列出以下所有关系的trackedEntityInstance，注册或事件的UID：

    GET / api / relationships？tei = ABCDEF12345
    GET / api / relationships？enrollment = ABCDEF12345
    GET / api / relationships？event = ABCDEF12345

该请求将返回您有权访问的任何关系的列表，其中包括您指定的trackedEntityInstance，注册或事件。每个关系都使用以下JSON表示：

```json
{
    "relationshipType": "dDrh5UyCyvQ",
    "relationshipName": "Mother-Child",
    "relationship": "t0HIBrc65Rm",
    "bidirectional": false,
    "from": {
        "trackedEntityInstance": {
            "trackedEntityInstance": "vOxUH373fy5"
        }
    },
    "to": {
        "trackedEntityInstance": {
            "trackedEntityInstance": "pybd813kIWx"
        }
    },
    "created": "2019-04-26T09:30:56.267",
    "lastUpdated": "2019-04-26T09:30:56.267"
}
```

您还可以使用以下端点查看指定的关系：

    GET /api/relationships/<id>

要创建或更新关系，可以使用以下端点：

    POST / api / relationships
    PUT / api /关系

并使用以下有效负载结构：

```json
{
    "relationshipType": "dDrh5UyCyvQ",
    "from": {
        "trackedEntityInstance": {
            "trackedEntityInstance": "vOxUH373fy5"
        }
    },
    "to": {
        "trackedEntityInstance": {
            "trackedEntityInstance": "pybd813kIWx"
        }
    }
}
```

要删除关系，可以使用以下端点：

      删除/ api / relationships / <id>

在示例有效负载中，我们使用trackedEntityInstances之间的关系。因此，有效负载的“从”和“到”属性包括“ trackedEntityInstance”对象。如果您的关系包括其他实体，则可以使用以下属性：

```json
{
    "enrollment": {
        "enrollment": "<id>"
    }
}
```

```json
{
    "event": {
        "event": "<id>"
    }
}
```

### 更新策略 { #webapi_tei_update_strategies }

支持所有 3 个跟踪器端点的两种更新策略：
注册和事件创建。当您生成一个
客户端的标识符，不确定它是否被创建
在服务器上。

 <table>
 <caption>可用的跟踪器策略</caption>
 <colgroup>
 <col style="width: 24%" />
 <col style="width: 75%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>创建</td>
 <td>仅创建，这是默认行为。 </td>
 </tr>
 <tr class="even">
 <td> CREATE_AND_UPDATE </td>
 <td>尝试匹配该ID（如果存在），然后更新（如果未创建）。 </td>
 </tr>
 </tbody>
 </table>

要更改参数，请使用策略参数：

    POST / api / 33 / trackedEntityInstances？strategy = CREATE_AND_UPDATE

### 跟踪器批量删除 { #webapi_tracker_bulk_deletion }

Bulk deletion of tracker objects work in a similar fashion to adding and updating tracker objects, the only difference is that the `importStrategy` is _DELETE_.

_示例：批量删除跟踪的实体实例：_

```json
{
    "trackedEntityInstances": [
        {
            "trackedEntityInstance": "ID1"
        },
        {
            "trackedEntityInstance": "ID2"
        },
        {
            "trackedEntityInstance": "ID3"
        }
    ]
}
```

```bash
curl -X POST -d @data.json -H "Content-Type: application/json"
  "http://server/api/33/trackedEntityInstances?strategy=DELETE"
```

_示例：批量删除注册：_

```json
{
    "enrollments": [
        {
            "enrollment": "ID1"
        },
        {
            "enrollment": "ID2"
        },
        {
            "enrollment": "ID3"
        }
    ]
}
```

```bash
curl -X POST -d @data.json -H "Content-Type: application/json"
  "http://server/api/33/enrollments?strategy=DELETE"
```

_示例：批量删除事件：_

```json
{
    "events": [
        {
            "event": "ID1"
        },
        {
            "event": "ID2"
        },
        {
            "event": "ID3"
        }
    ]
}
```

```bash
curl -X POST -d @data.json -H "Content-Type: application/json"
  "http://server/api/33/events?strategy=DELETE"
```

### 通过POST和PUT方法重复使用标识符和删除项目 { #webapi_updating_and_deleting_items }

跟踪器端点 _/trackedEntityInstances_、_/enrollments_、_/events_ 支持 CRUD 操作。系统会跟踪使用过的标识符。因此，已创建然后删除的项目（例如活动、注册）无法再次创建或更新。如果尝试删除已删除的项目，系统将返回成功响应，因为删除已删除的项目意味着没有任何更改。

系统不允许通过更新 (_PUT_) 或创建 (_POST_) 方法删除项目。因此，属性 _deleted_ 在 _PUT_ 和 _POST_ 方法中都会被忽略，并且在 _POST_ 方法中它默认设置为 _false_。

### 导入参数 { #webapi_import_parameters }

可以使用一组导入参数来自定义导入过程：

 <table>
 <caption> 导入参数 </caption>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 值（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> dataElementIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射数据值的数据元素对象的属性。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射数据值的组织单位对象的属性。 </td>
 </tr>
 <tr class="odd">
 <td> idScheme </td>
 <td> id |姓名 |代码|属性：ID </td>
 <td> 所有对象的属性，包括数据元素、组织单位和类别选项组合，用于映射数据值。 </td>
 </tr>
 <tr class="even">
 <td> dryRun </td>
 <td> 假 |真 </td>
 <td> 是在服务器上保存更改还是只返回导入摘要。 </td>
 </tr>
 <tr class="odd">
 <td> 策略 </td>
 <td> 创建 |更新 | CREATE_AND_UPDATE |删除 </td>
 <td> 在服务器上保存所有对象、新对象或更新导入状态。 </td>
 </tr>
 <tr class="even">
 <td> 跳过通知 </td>
 <td> 真|假 </td>
 <td> 指示是否发送已完成事件的通知。 </td>
 </tr>
 <tr class="odd">
 <td> 跳过第一个 </td>
 <td> 真|假 </td>
 <td> 仅与 CSV 导入相关。指示 CSV 文件是否包含应跳过的标题行。 </td>
 </tr>
 <tr class="even">
 <td> importReportMode </td>
 <td> 已满，错误，调试 </td>
 <td> 设置`ImportReport`模式，控制导入完成后返回多少。 `ERRORS` 仅包括 <em> ObjectReports </em> 用于有错误的对象。 `FULL` 为所有导入的对象返回一个 <em> ObjectReport </em>，并且 `DEBUG` 返回相同的加上对象的名称（如果可用）。 </td>
 </tr>
 </tbody>
 </table>

#### CSV导入/导出 { #webapi_events_csv_import_export }

除了用于事件导入/导出的 XML 和 JSON 之外，在 DHIS2.17 中我们
引入了对 CSV 格式的支持。对这种格式的支持建立在
上一节已经描述过，所以这里我们只写
CSV 特定部分是什么。

要使用 CSV 格式，您必须使用 `/api/events.csv` 端点，或者在使用 `/api/events` 端点时添加 _content-type: text/csv_ 进行导入，并添加 _accept: text/csv_ 进行导出。

CSV 中用于导出和导入的列的顺序
如下：

 <table>
 <caption> CSV 列 </caption>
 <thead>
 <tr class="header">
 <th> 索引 </th>
 <th> 密钥 </th>
 <th> </th>型
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 1 </td>
 <td> 事件 </td>
 <td> 标识符 </td>
 <td> 事件标识符 </td>
 </tr>
 <tr class="even">
 <td> 2 </td>
 <td> 状态 </td>
 <td> 枚举 </td>
 <td> 事件状态，可以是ACTIVE |已完成 |访问 |预定 |逾期 |跳过 </td>
 </tr>
 <tr class="odd">
 <td> 3 </td>
 <td> 程序 </td>
 <td> 标识符 </td>
 <td> 程序标识符 </td>
 </tr>
 <tr class="even">
 <td> 4 </td>
 <td> programStage </td>
 <td> 标识符 </td>
 <td> 程序阶段标识符 </td>
 </tr>
 <tr class="odd">
 <td> 5 </td>
 <td> 注册 </td>
 <td> 标识符 </td>
 <td> 注册标识符（程序实例） </td>
 </tr>
 <tr class="even">
 <td> 6 </td>
 <td> 组织单位 </td>
 <td> 标识符 </td>
 <td> 组织单元标识符 </td>
 </tr>
 <tr class="odd">
 <td> 7 </td>
 <td> eventDate </td>
 <td> 日期 </td>
 <td> 事件日期 </td>
 </tr>
 <tr class="even">
 <td> 8 </td>
 <td> 到期日期 </td>
 <td> 日期 </td>
 <td> 到期日 </td>
 </tr>
 <tr class="odd">
 <td> 9 </td>
 <td> 纬度 </td>
 <td> 双 </td>
 <td> 事件发生的纬度 </td>
 </tr>
 <tr class="even">
 <td> 10 </td>
 <td> 经度 </td>
 <td> 双 </td>
 <td> 事件发生的经度 </td>
 </tr>
 <tr class="odd">
 <td> 11 </td>
 <td> 数据元素 </td>
 <td> 标识符 </td>
 <td> 数据元素的标识符 </td>
 </tr>
 <tr class="even">
 <td> 12 </td>
 <td> 值 </td>
 <td> 字符串 </td>
 <td> 事件的值/度量 </td>
 </tr>
 <tr class="odd">
 <td> 13 </td>
 <td> 由 </td> 存储
 <td> 字符串 </td>
 <td> 事件由（默认为当前用户）存储 </td>
 </tr>
 <tr class="even">
 <td> 14 </td>
 <td> 提供其他地方 </td>
 <td> 布尔值 </td>
 <td> 这个值是不是在其他地方收集的 </td>
 </tr>
 <tr class="odd">
 <td> 14 </td>
 <td> 完成日期 </td>
 <td> 日期 </td>
 <td> 事件完成日期 </td>
 </tr>
 <tr class="even">
 <td> 14 </td>
 <td>已完成</td>
 <td> 字符串 </td>
 <td> 完成事件的用户的用户名 </td>
 </tr>
 </tbody>
 </table>

_2 个事件的示例，每个事件有 2 个不同的数据值：_

```csv
EJNxP3WreNP，COMPLETED，<pid>，<psid>，<enrollment-id>，<ou>，2016-01-01,2016-01-01 ,,, <de>，1 ,,
EJNxP3WreNP，COMPLETED，<pid>，<psid>，<enrollment-id>，<ou>，2016-01-01,2016-01-01 ,,, <de>，2 ,,
qPEdI1xn7k0，COMPLETED，<pid>，<psid>，<enrollment-id>，<ou>，2016-01-01,2016-01-01 ,,, <de>，3 ,,
qPEdI1xn7k0，COMPLETED，<pid>，<psid>，<enrollment-id>，<ou>，2016-01-01,2016-01-01 ,,, <de>，4 ,,
```

#### 导入策略：SYNC { #webapi_sync_import_strategy }

导入策略 SYNC 应仅用于内部同步
任务而不是常规导入。 SYNC 策略允许所有 3
操作：CREATE、UPDATE、DELETE 出现在有效载荷中
同时。

### 跟踪器所有权管理 { #webapi_tracker_ownership_management }

从 2.30 开始引入了一个名为 Tracker Ownership 的新概念。现在，程序上下文中的跟踪实体实例将有一个所有者组织单元。配置为_PROTECTED_ 或_CLOSED_ 访问级别的程序将遵守所有权特权。只有属于被跟踪实体-计划组合的所属组织单位的用户才能够访问与该被跟踪实体的该计划相关的数据。

#### 跟踪器所有权优先：打破常规 { #webapi_tracker_ownership_override_api }

It is possible to temporarily override this ownership privilege for a program that is configured with an access level of _PROTECTED_. Any user will be able to temporarily gain access to the program related data, if the user specifies a reason for accessing the tracked entity-program data. This act of temporarily gaining access is termed as _breaking the glass_. Currently, the temporary access is granted for 3 hours. DHIS2 audits breaking the glass along with the reason specified by the user. It is not possible to gain temporary access to a program that has been configured with an access level of _CLOSED_. To break the glass for a tracked entity program combination, you can issue a POST request as shown:

    / api / 33 / tracker / ownership / override？trackedEntityInstance = DiszpKrYNg8
      ＆program = eBAyeGv0exc＆reason =耐心+显示+急诊+急诊

#### 跟踪器所有权转移 { #webapi_tracker_ownership_transfer_api }

可以转移被跟踪实体程序的所有权
从一个组织单位到另一个组织单位。这将有助于患者
转介或迁移。只有所有者（或破坏了
glass）可以转让所有权。转移被跟踪的所有权
entity-program 到另一个组织单位，你可以发出 PUT 请求
如图所示：

    / api / 33 / tracker /所有权/转让？trackedEntityInstance = DiszpKrYNg8
      ＆program = eBAyeGv0exc＆ou = EJNxP3WreNP

## 潜在重复 { #potential-duplicates }

潜在的重复项是我们在重复数据删除功能中使用的记录。由于重复数据删除功能的性质，此API端点受到一定程度的限制。

潜在的重复表示怀疑是重复的单个或一对记录。

潜在重复项的有效负载如下所示：

```json
{
    "teiA": "<id>",
    "teiB": "<id>",
    "status": "OPEN|INVALID|MERGED"
}
```

您可以使用以下端点检索可能重复的列表：

    GET /api/潜在重复项

另外，您可以检查单个记录：

    GET /api/潜在重复项/<id>

要创建新的潜在重复项，可以使用以下端点：

    POST / api / potentialDuplicates

您提供的有效负载至少需要_teiA_才能成为有效的跟踪实体实例； _teiB_是可选的。如果设置了_teiB_，则还需要指向现有的跟踪实体实例。

```json
{
    "teiA": "<id>",
    "teiB": "<id>"
}
```

您可以将潜在的重复标记为_invalid_，以告知系统潜在的重复已被调查并视为不是重复。为此，您可以使用以下端点：

    PUT /api/potentialDuplicates/<id>/invalidation

要硬删除潜在的重复项：

    删除/ api / potentialDuplicates / <id>

## 电子邮件 { #webapi_email }

Web API 具有用于发送电子邮件的资源。对于电子邮件
发送 需要已正确设置 SMTP 配置
并且 DHIS2 实例的系统通知电子邮件地址具有
被定义。您可以从电子邮件设置屏幕设置 SMTP 设置
和来自常规设置屏幕的系统通知电子邮件地址
在 DHIS2 中。

    / api / 33 /电子邮件

### 系统通知 { #webapi_email_system_notification }

_notification_ 资源允许您发送带有给定主题和 JSON 或 XML 文本的系统电子邮件通知。该电子邮件将发送至 DHIS2 常规系统设置中定义的通知电子邮件地址：

```json
{
    "subject": "Integrity check summary",
    "text": "All checks ran successfully"
}
```

您可以通过发布到通知来发送系统电子邮件通知
像这样的资源：

```bash
curl -d @email.json "localhost/api/33/email/notification" -X POST 
  -H "Content-Type:application/json" -u admin:district
```

### 出站电子邮件 { #outbound-emails }

您还可以通过发布到
通知资源如下所述。 `F_SEND_EMAIL` 或 `ALL`
权限必须在系统中才能使用这个 api。主题
参数是可选的。 “DHIS 2”字符串将作为默认主题发送
如果 url 中没有提供。应该对 URL 进行编码才能使用它
应用程序接口。

```bash
curl "localhost/api/33/email/notification?recipients=xyz%40abc.com&message=sample%20email&subject=Test%20Email" 
  -X POST -u admin:district
```

### 测试讯息 { #webapi_email_test_message }

要通过向自己发送测试电子邮件来测试 SMTP 设置是否正确，您可以与 _test_ 资源进行交互。要发送测试电子邮件，您的 DHIS2 用户帐户需要具有与其关联的有效电子邮件地址。您可以像这样发送测试电子邮件：

```bash
curl "localhost/api/33/email/test" -X POST -H "Content-Type:application/json" -u admin:district
```

## 分享中 { #webapi_sharing }

共享解决方案允许您与特定用户组共享系统中的大多数对象，并定义对象是应该公开访问还是私有。要获取和设置对象的共享状态，您可以与 _sharing_ 资源进行交互。

    / api / 33 / sharing

### 获取共享状态 { #webapi_get_sharing_status }

要请求对象的共享状态，请使用GET请求执行以下操作：

    / api / 33 / sharing？type = dataElement＆id = fbfJHSPpUQD

响应如下所示。

```json
{
    "meta": {
        "allowPublicAccess": true,
        "allowExternalAccess": false
    },
    "object": {
        "id": "fbfJHSPpUQD",
        "name": "ANC 1st visit",
        "publicAccess": "rw------",
        "externalAccess": false,
        "user": {},
        "userGroupAccesses": [
            {
                "id": "hj0nnsVsPLU",
                "access": "rw------"
            },
            {
                "id": "qMjBflJMOfB",
                "access": "r-------"
            }
        ]
    }
}
```

### 设定分享状态 { #webapi_set_sharing_status }

您可以使用相同的 URL 定义对象的共享状态
一个 POST 请求，其中 JSON 格式的有效负载如下所示：

```json
{
    "object": {
        "publicAccess": "rw------",
        "externalAccess": false,
        "user": {},
        "userGroupAccesses": [
            {
                "id": "hj0nnsVsPLU",
                "access": "rw------"
            },
            {
                "id": "qMjBflJMOfB",
                "access": "r-------"
            }
        ]
    }
}
```

在此示例中，有效负载定义了具有读写权限的对象
公共访问，无外部访问（无需登录），读写访问
一个用户组和另一个用户组的只读访问权限。你可以
使用 curl 将其提交到共享资源：

```bash
curl -d @sharing.json "localhost/api/33/sharing?type=dataElement&id=fbfJHSPpUQD"
  -H "Content-Type:application/json" -u admin:district
```

## 排程 { #webapi_scheduling }

DHIS2允许安排各种类型的作业。每种类型的作业都有不同的配置属性，可让您更好地控制作业的运行方式。此外，如果需要，您可以将同一作业配置为以不同的配置和不同的时间间隔运行。

<table>
<caption>Main properties</caption>
<thead>
<tr class="header">
<th>Property</th>
<th>Description</th>
<th>Type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>name</td>
<td>Name of the job.</td>
<td>String</td>
</tr>
<tr class="even">
<td>cronExpression</td>
<td>The cron expression which defines the interval for when the job should run.</td>
<td>String (Cron expression)</td>
</tr>
<tr class="odd">
<td>jobType</td>
<td>The job type represent which task is run. In the next table, you can get an overview of existing job types. Each job type can have a specific set of parameters for job configuration.</td>
<td>String (Enum)</td>
</tr>
<tr class="even">
<td>jobParameters</td>
<td>Job parameters, if applicable for job type.</td>
<td>(See list of job types)</td>
</tr>
<tr class="odd">
<td>enabled</td>
<td>A job can be added to the system without it being scheduled by setting `enabled` to false in the JSON payload. Use this if you want to temporarily stop scheduling for a job, or if a job configuration is not complete yet.</td>
<td>Boolean</td>
</tr>
</tbody>
</table>

<table>
<caption>Available job types</caption>
<thead>
<tr class="header">
<th>Job type</th>
<th>Parameters</th>
<th>Param(Type:Default)</th>
</tr>
</thead>
<tbody>
<tr>
<td>DATA_INTEGRITY</td>
<td>NONE</td>
<td></td>
</tr>
<tr>
<td>ANALYTICS_TABLE</td>
<td><ul>
<li><p>lastYears: Number of years back to include</p></li>
<li><p>skipTableTypes: Skip generation of tables</p><p>Possible values: DATA_VALUE, COMPLETENESS, COMPLETENESS_TARGET, ORG_UNIT_TARGET, EVENT, ENROLLMENT, VALIDATION_RESULT</p></li>
<li><p>skipResourceTables: Skip generation of resource tables</p></li>
</ul></td>
<td><ul>
<li><p>lastYears (int:0)</p></li>
<li><p>skipTableTypes (Array of String (Enum):None )</p></li>
<li><p>skipResourceTables (Boolean)</p></li>
</ul></td>
</tr>
<tr>
<td>CONTINUOUS_ANALYTICS_TABLE</td>
<td><ul>
<li><p>fullUpdateHourOfDay: Hour of day for full update of analytics tables (0-23)</p></li>
<li><p>lastYears: Number of years back to include</p></li>
<li><p>skipTableTypes: Skip generation of tables</p><p>Possible values: DATA_VALUE, COMPLETENESS, COMPLETENESS_TARGET, ORG_UNIT_TARGET, EVENT, ENROLLMENT, VALIDATION_RESULT</p></li>
<li><p>skipResourceTables: Skip generation of resource tables</p></li>
</ul></td>
<td><ul>
<li><p>lastYears (int:0)</p></li>
<li><p>skipTableTypes (Array of String (Enum):None )</p></li>
<li><p>skipResourceTables (Boolean)</p></li>
</ul></td>
</tr>
<tr>
<td>DATA_SYNC</td>
<td>NONE</td>
<td></td>
</tr>
<tr >
<td>META_DATA_SYNC</td>
<td>NONE</td>
<td></td>
</tr>
<tr>
<td>SEND_SCHEDULED_MESSAGE</td>
<td>NONE</td>
<td></td>
</tr>
<tr>
<td>PROGRAM_NOTIFICATIONS</td>
<td>NONE</td>
<td></td>
</tr>
<tr>
<td>MONITORING (Validation rule analysis)</td>
<td><ul>
<li><p>relativeStart: A number related to date of execution which resembles the start of the period to monitor</p></li>
<li><p>relativeEnd: A number related to date of execution which resembles the end of the period to monitor</p></li>
<li><p>validationRuleGroups: Validation rule groups(UIDs) to include in job</p></li>
<li><p>sendNotification: Set &quot;true&quot; if job should send notifications based on validation rule groups</p></li>
<li><p>persistsResults: Set &quot;true&quot; if job should persist validation results</p></li>
</ul></td>
<td><ul>
<li><p>relativeStart (int:0)</p></li>
<li><p>relativeEnd (int:0)</p></li>
<li><p>validationRuleGroups (Array of String (UIDs):None )</p></li>
<li><p>sendNotification (Boolean:false)</p></li>
<li><p>persistsResults (Boolean:false)</p></li>
</ul></td>
</tr>
<tr>
<td>PUSH_ANALYSIS</td>
<td><ul>
<li><p>pushAnalysis: The uid of the push analysis you want to run</p></li>
</ul></td>
<td><ul>
<li><p>pushAnalysis (String:None)</p></li>
</ul></td>
</tr>
<tr>
<td>PREDICTOR</td>
<td><ul>
<li><p>relativeStart: A number related to date of execution which resembles the start of the period to monitor</p></li>
<li><p>relativeEnd: A number related to date of execution which resembles the start of the period to monitor</p></li>
<li><p>predictors: Predictors(UIDs) to include in job</p></li>
</ul></td>
<td><ul>
<li><p>relativeStart (int:0)</p></li>
<li><p>relativeEnd (int:0)</p></li>
<li><p>predictors (Array of String (UIDs):None )</p></li>
</ul></td>
</tr>
</tbody>
</table>

### 获取可用的工作类型 { #get-available-job-types }

要获取所有可用作业类型的列表，可以使用以下端点：

    获取 /api/jobConfigurations/jobTypes

响应包含有关每个作业类型的信息，包括名称、作业类型、键、调度类型和可用参数。调度类型可以是 `CRON`，这意味着可以使用带有 `cronExpression` 字段的 cron 表达式来调度作业，或者是`FIXED_DELAY`，意味着可以使用 `delay` 字段将作业调度为以固定延迟运行.场延迟以秒为单位。

响应将类似于以下内容：

```json
{
    "jobTypes": [
        {
            "name": "Data integrity",
            "jobType": "DATA_INTEGRITY",
            "key": "dataIntegrityJob",
            "schedulingType": "CRON"
        },
        {
            "name": "Resource table",
            "jobType": "RESOURCE_TABLE",
            "key": "resourceTableJob",
            "schedulingType": "CRON"
        },
        {
            "name": "Continuous analytics table",
            "jobType": "CONTINUOUS_ANALYTICS_TABLE",
            "key": "continuousAnalyticsTableJob",
            "schedulingType": "FIXED_DELAY"
        }
    ]
}
```

### 建立工作 { #create-job }

要配置作业，您可以对以下资源发出POST请求：

    / api / jobConfigurations

不含JSON格式参数的作业如下所示：

```json
{
    "name": "",
    "jobType": "JOBTYPE",
    "cronExpression": "0 * * ? * *"
}
```

参数为JSON格式的分析表作业的示例：

```json
{
    "name": "Analytics tables last two years",
    "jobType": "ANALYTICS_TABLE",
    "cronExpression": "0 * * ? * *",
    "jobParameters": {
        "lastYears": "2",
        "skipTableTypes": [],
        "skipResourceTables": false
    }
}
```

作为带有JSON格式参数的推送分析作业的示例：

```json
{
    "name": "Push anlysis charts",
    "jobType": "PUSH_ANALYSIS",
    "cronExpression": "0 * * ? * *",
    "jobParameters": {
        "pushAnalysis": ["jtcMAKhWwnc"]
    }
}
```

An example of a job with scheduling type `FIXED_DELAY` and 120 seconds delay:

```json
{
    "name": "Continuous analytics table",
    "jobType": "CONTINUOUS_ANALYTICS_TABLE",
    "delay": "120",
    "jobParameters": {
        "fullUpdateHourOfDay": 4
    }
}
```

### 找工作 { #get-jobs }

列出所有作业配置：

    GET /api/jobConfigurations

检索作业：

    GET /api/jobConfigurations/{id}

响应有效负载如下所示：

```json
{
    "lastUpdated": "2018-02-22T15:15:34.067",
    "id": "KBcP6Qw37gT",
    "href": "http://localhost:8080/api/jobConfigurations/KBcP6Qw37gT",
    "created": "2018-02-22T15:15:34.067",
    "name": "analytics last two years",
    "jobStatus": "SCHEDULED",
    "displayName": "analytics last two years",
    "enabled": true,
    "externalAccess": false,
    "jobType": "ANALYTICS_TABLE",
    "nextExecutionTime": "2018-02-26T03:00:00.000",
    "cronExpression": "0 0 3 ? * MON",
    "jobParameters": {
        "lastYears": 2,
        "skipTableTypes": [],
        "skipResourceTables": false
    },
    "favorite": false,
    "configurable": true,
    "access": {
        "read": true,
        "update": true,
        "externalize": true,
        "delete": true,
        "write": true,
        "manage": true
    },
    "lastUpdatedBy": {
        "id": "GOLswS44mh8"
    },
    "favorites": [],
    "translations": [],
    "userGroupAccesses": [],
    "attributeValues": [],
    "userAccesses": []
}
```

### 更新工作 { #update-job }

使用以下端点和JSON有效负载格式，通过参数更新作业：

    PUT /api/jobConfiguration/{id}

```json
{
    "name": "analytics last two years",
    "enabled": true,
    "cronExpression": "0 0 3 ? * MON",
    "jobType": "ANALYTICS_TABLE",
    "jobParameters": {
        "lastYears": "3",
        "skipTableTypes": [],
        "skipResourceTables": false
    }
}
```

### 删除工作 { #delete-job }

使用以下方法删除作业：

    删除/ api / jobConfiguration / {id}

请注意，某些具有自定义配置参数的作业可能不会被添加，如果
未配置所需的系统设置。一个例子是数据
同步，这需要远程服务器配置。

## 架构图 { #webapi_schema }

可用于内省所有可用 DXF 2 对象的资源
可以在`/api/schemas` 上找到。对于特定资源，您可以拥有
查看`/api/schemas/<type>`。

要获取XML中所有可用的模式：

    获取/api/schemas.xml

要获取JSON中所有可用的模式，请执行以下操作：

    获取/api/schemas.json

要获取特定类的JSON模式：

    获取 /api/schemas/dataElement.json

## 用户界面定制 { #webapi_ui_customization }

要自定义 DHIS2 应用程序的 UI，您可以通过 _files_ 资源插入自定义 JavaScript 和 CSS 样式。

```
POST删除后/ api / 33 / files / script
POST GET DELETE / api / 33 / files / style
```

通过此资源插入的 JavaScript 和 CSS 内容将由
DHIS2 网络应用程序。这在某些情况下特别有用：

-   覆盖 DHIS2 应用程序的 CSS 样式，例如登录页面或主页。

-   定义多种自定义数据输入表单和基于 HTML 的报告常用的 JavaScript 函数。

-   包括自定义数据输入表单和基于 HTML 的报告中使用的 CSS 样式。

### Java脚本 { #webapi_customization_javascript }

要从名为 _script.js_ 的文件插入 Javascript，您可以通过 POST 请求与 _files/script_ 资源进行交互：

```bash
curl --data-binary @script.js "localhost/api/33/files/script"
  -H "Content-Type:application/javascript" -u admin:district
```

请注意，我们使用 `--data-binary` 选项来保留格式
文件内容。您可以使用 GET 请求获取 JavaScript 内容：

    / api / 33 / files / script

要删除JavaScript内容，可以使用DELETE请求。

### 的CSS { #webapi_customization_css }

要从名为 _style.css_ 的文件插入 CSS，您可以通过 POST 请求与 _files/style_ 资源进行交互：

```bash
curl --data-binary @style.css "localhost/api/33/files/style"
  -H "Content-Type:text/css" -u admin:district
```

您可以通过GET请求获取CSS内容：

    / api / 33 / files / style

要删除JavaScript内容，可以使用DELETE请求。

## 同步化 { #webapi_synchronization }

本节介绍数据和元数据的提取和推送。

### 数据值推送 { #webapi_sync_data_push }

要将数据值推送到远程服务器，必须首先配置
系统设置 > 中相关服务器的 URL 和凭据
同步，然后向以下资源发出 POST 请求：

    / api / 33 / synchronization / dataPush

### 元数据拉取 { #webapi_sync_metadata_pull }

要启动从远程 JSON 文档提取元数据，您可以使用 _url_ 作为请求负载向以下资源发出 POST 请求：

    / api / 33 / synchronization / metadataPull

### 可用性检查 { #webapi_sync_availability_check }

检查远程数据服务器的可用性并验证用户
您可以向以下资源发出 GET 请求：

    / api / 33 /同步/可用性

## 应用 { #webapi_apps }

`/api/apps` 端点可用于安装、删除和列出应用程序。应用程序密钥基于应用程序名称，但删除了所有非字母数字字符，并将空格替换为破折号。 _My app!_ 将返回密钥 _My-app_。

> **注意**
>
> 在 2.28 之前，应用程序密钥源自 ZIP 存档的名称，不包括文件扩展名。使用旧格式的 URL 仍应在 api 中返回正确的应用程序。

    / api / 33 / apps

### 获取应用 { #webapi_get_apps }

> **注意**
>
> 在2.28之前，应用程序属性folderName指的是已安装应用程序的实际路径。由于能够在云服务上存储应用程序，folderName 的用途发生了变化，现在将引用应用程序密钥。

您可以通过列出应用程序资源中的所有应用程序并查找 _key_ 属性来读取应用程序的密钥。以 JSON 格式列出所有已安装的应用程序：

```bash
curl -u user:pass -H "Accept: application/json" "http://server.com/api/33/apps"
```

您也可以简单地将Web浏览器指向资源URL：

    http://server.com/api/33/apps

通过将一个或多个 _filter_ 参数附加到 URL，还可以按应用程序类型和名称过滤应用程序列表：

    http://server.com/api/33/apps?filter=appType:eq:DASHBOARD_APP&filter=name:ilike:youtube

应用程序名称支持 _eq_ 和 _ilike_ 过滤运算符，而 _appType_ 仅支持 _eq_。

### 安装应用 { #webapi_install_app }

要安装应用程序，可以发出以下命令：

```bash
curl -X POST -u user:pass -F file=@app.zip "http://server.com/api/33/apps"
```

### 删除应用 { #webapi_delete_app }

要删除一个应用程序，您可以发出以下命令：

```bash
curl -X DELETE -u user:pass "http://server.com/api/33/apps/<app-key>"
```

### 重新加载应用 { #webapi_reload_apps }

要强制重新加载当前安装的应用程序，您可以发出
以下命令。如果您直接手动添加文件，这很有用
到文件系统，而不是通过 DHIS2 用户上传
界面。

```bash
curl -X PUT -u user:pass "http://server.com/api/33/apps"
```

### 在实例之间共享应用 { #webapi_share_apps_between_instances }

如果 DHIS2 实例已配置为使用云存储，应用程序
现在将安装并存储在云服务上。这将启用
多个实例在已安装的应用程序上共享相同的版本，而不是
在每个单独的实例上安装相同的应用程序。

> **注意**
>
> 在 2.28 之前，安装的应用程序仅存储在实例的本地文件系统中。 2.28 之前安装的应用程序仍然可以在安装的实例上使用，但不会与其他实例共享，因为它仍然位于实例本地文件系统上。

## 应用商店 { #webapi_app_store }

Web API 将 DHIS2 App Store 的内容公开为 JSON
可以在`/api/appStore` 资源中找到的表示。

    / api / 33 / appStore

### 获取应用 { #webapi_get_app_store_apps }

您可以使用GET请求检索应用程序：

    获取 /api/33/appStore

JSON响应示例如下所述。

```json
{
  [
    {
      "name": "Tabular Tracker Capture",
      "description": "Tabular Tracker Capture is an app that makes you more effective.",
      "sourceUrl": "https://github.com/dhis2/App-repository",
      "appType": "DASHBOARD_WIDGET",
      "status": "PENDING",
      "id": "NSD06BVoV21",
      "developer": {
        "name": "DHIS",
        "organisation": "Uio",
        "address": "Oslo",
        "email": "dhis@abc.com",
      },
      "versions": [
        {
          "id": "upAPqrVgwK6",
          "version": "1.2",
          "minDhisVersion": "2.17",
          "maxDhisVersion": "2.20",
          "downloadUrl": "https://dhis2.org/download/appstore/tabular-capture-12.zip",
          "demoUrl": "http://play.dhis2.org/demo"
        }
      ],
      "images": [
        {
          "id": "upAPqrVgwK6",
          "logo": "true",
          "imageUrl": "https://dhis2.org/download/appstore/tabular-capture-12.png",
          "description": "added feature snapshot",
          "caption": "dialog",
        }
      ]
    }
  ]
}
```

### 安装应用 { #webapi_install_app_store_apps }

您可以在 DHIS2 实例上安装应用程序，前提是您拥有
适当的权限。使用 `id` 属性引用应用程序
应用程序的相关版本。使用 POST 安装应用程序
使用版本 ID 请求以下资源：

    POST / api / 33 / appStore / {app-version-id}

## 数据存储 { #webapi_data_store }

使用 _dataStore_ 资源，开发人员可以为其应用程序存储任意数据。对数据存储密钥的访问基于其共享设置。默认情况下，创建的所有密钥均可公开访问（读取和写入）。此外，如果应用程序保留了命名空间，则对数据存储命名空间的访问仅限于用户对相应应用程序的访问。例如，有权访问“sampleApp”应用程序的用户也将能够使用数据存储中的sampleApp 命名空间。如果未保留名称空间，则无需特定访问权限即可使用它。

    / api / 33 / dataStore

### 数据存储结构 { #webapi_data_store_structure }

数据存储条目由命名空间、键和值组成。这
命名空间和键的组合是唯一的。值数据类型为 JSON。

 <table>
 <caption> 数据存储结构 </caption>
 <colgroup>
 <col style="width: 22%" />
 <col style="width: 40%" />
 <col style="width: 36%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 项目 </th>
 <th> 说明 </th>
 <th> 数据类型 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 命名空间 </td>
 <td> 条目组织的命名空间。 </td>
 <td> 字符串 </td>
 </tr>
 <tr class="even">
 <td> 密钥 </td>
 <td> 用于识别值的键。 </td>
 <td> 字符串 </td>
 </tr>
 <tr class="odd">
 <td> 值 </td>
 <td> 保存条目信息的值。 </td>
 <td> JSON </td>
 </tr>
 <tr class="even">
 <td> 加密 </td>
 <td> 指示是否应加密给定密钥的值 </td>
 <td> 布尔值 </td>
 </tr>
 </tbody>
 </table>

### 获取键和名称空间 { #webapi_data_store_get_keys_and_namespaces }

有关所有现有名称空间的列表：

    GET /api/33/dataStore

清单示例curl请求：

```bash
curl "play.dhis2.org/demo/api/33/dataStore" -u admin:district
```

响应示例：

```json
[
  "foo",
  "bar"
]
```

有关命名空间中所有键的列表：

    GET /api/33/dataStore/<namespace>

清单示例curl请求：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo" -u admin:district
```

响应示例：

```json
[
  "key_1",
  "key_2"
]
```

要从名称空间检索现有键的值：

    GET /api/33/dataStore/<namespace>/<key>

卷曲请求检索示例：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo/key_1"-u admin:district
```

响应示例：

```json
{
    "foo": "bar"
}
```

要从名称空间检索现有键的元数据：

    GET /api/33/dataStore/<namespace>/<key>/metaData

卷曲请求检索示例：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo/key_1/metaData" -u admin:district
```

响应示例：

```json
{
  "created": "...",
  "user": {...},
  "namespace": "foo",
  "key": "key_1"
}
```

### 创造价值 { #webapi_data_store_create_values }

为命名空间创建新的键和值：

    POST / api / 33 / dataStore / <namespace> / <key>

假设有效的JSON有效负载，创建示例的curl请求：

```bash
curl "https://play.dhis2.org/demo/api/33/dataStore/foo/key_1" -X POST
  -H "Content-Type: application/json" -d "{\"foo\":\"bar\"}" -u admin:district
```

响应示例：

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 201,
    "status": "OK",
    "message": "Key 'key_1' created."
}
```

如果您需要加密存储的数据（例如用户
凭据或类似的），您可以像这样将查询附加到 url：

    GET /api/33/dataStore/<namespace>/<key>?encrypt=true

### 更新值 { #webapi_data_store_update_values }

更新命名空间中存在的密钥：

    PUT /api/33/dataStore/<namespace>/<key>

假设有效的JSON有效负载，示例curl请求更新：

```bash
curl "https://play.dhis2.org/demo/api/33/dataStore/foo/key_1" -X PUT -d "[1, 2, 3]"
  -H "Content-Type: application/json" -u admin:district
```

响应示例：

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Key 'key_1' updated."
}
```

### 删除键 { #webapi_data_store_delete_keys }

要从名称空间中删除现有键：

    删除/ api / 33 / dataStore / <namespace> / <key>

删除示例curl请求：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo/key_1" -X DELETE -u admin:district
```

响应示例：

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Key 'key_1' deleted from namespace 'foo'."
}
```

要删除名称空间中的所有键：

    删除/ api / 33 / dataStore / <namespace>

删除示例curl请求：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo" -X DELETE -u admin:district
```

响应示例：

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Namespace 'foo' deleted."
}
```

### 共享数据存储区密钥 { #webapi_data_store_sharing }

数据存储键的共享遵循与其他元数据共享相同的原则（请参阅
[分享](#webapi_sharing))。

要获取特定数据存储区密钥的共享设置，请执行以下操作：

    GET /api/33/sharing?type=dataStore&id=<uid>

要修改特定数据存储项的共享设置：

    POST / api / 33 / sharing？type = dataStore＆id = <uid>

具有以下要求：

```json
{
  "object": {
    "publicAccess": "rw------",
    "externalAccess": false,
    "user": {},
    "userAccesses": [],
    "userGroupAccesses": [
      {
        "id": "hj0nnsVsPLU",
        "access": "rw------"
      },
      {
        "id": "qMjBflJMOfB",
        "access": "r-------"
      }
    ]
  }
}
```

## 用户数据存储 { #webapi_user_data_store }

除了系统所有用户共享的_dataStore_之外，还可以使用基于用户的数据存储。存储到 _userDataStore_ 的数据与各个用户相关联，因此每个用户可以在相同的命名空间和键组合上拥有不同的数据。针对 _userDataStore_ 的所有调用都将与登录的用户关联。这意味着人们只能查看、更改、删除和添加与当前登录用户关联的值。

    / api / 33 / userDataStore

### 用户数据存储结构 { #webapi_user_data_store_structure }

_userDataStore_ 由用户、命名空间、键和关联值组成。用户、命名空间和密钥的组合是唯一的。

 <table>
 <caption>用户数据存储结构</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>项目</th>
 <th>说明</th>
 <th>数据类型</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>用户</td>
 <td>用户此数据与</td>相关联
 <td>字符串</td>
 </tr>
 <tr class="even">
 <td>命名空间</td>
 <td>密钥所属的名称空间</td>
 <td>字符串</td>
 </tr>
 <tr class="odd">
 <td>键</td>
 <td>密钥a值存储在</td>上
 <td>字符串</td>
 </tr>
 <tr class="even">
 <td>值</td>
 <td>存储的值</td>
 JSON <td> </td>
 </tr>
 <tr class="odd">
 <td>加密的</td>
 <td>指示是否应加密该值</td>
 <td>布尔值</td>
 </tr>
 </tbody>
 </table>

### 获取名称空间 { #webapi_user_data_store_get_namespaces }

返回所有现有名称空间的数组

    GET /api/33/userDataStore

请求示例：

```bash
curl -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/33/userDataStore"
```

```json
[
  "foo",
  "bar"
]
```

### 取得金钥 { #webapi_user_data_store_get_keys }

返回给定名称空间中所有现有键的数组

    GET /api/userDataStore/<namespace>

请求示例：

```bash
curl -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/33/userDataStore/foo"
```

```json
[
  "key_1",
  "key_2"
]
```

### 获取价值 { #webapi_user_data_store_get_values }

返回给定名称空间和键的值

    GET /api/33/userDataStore/<namespace>/<key>

请求示例：

```bash
curl -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
    "some": "value"
}
```

### 创造价值 { #webapi_user_data_store_create_values }

向给定名称空间中的给定键添加新值。

    POST / api / 33 / userDataStore / <namespace> / <key>

请求示例：

```bash
curl -X POST -H "Content-Type: application/json" -u admin:district -d "['some value']"
  "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
    "httpStatus": "Created",
    "httpStatusCode": 201,
    "status": "OK",
    "message": "Key 'bar' in namespace 'foo' created."
}
```

如果您需要加密该值（例如用户凭据
等等）您可以像这样将查询附加到网址：

    GET /api/33/userDataStore/<namespace>/<key>?encrypt=true

### 更新值 { #webapi_user_data_store_update_values }

更新现有值

    PUT /api/33/userDataStore/<namespace>/<key>

请求示例：

```bash
curl -X PUT -H "Content-Type: application/json" -u admin:district -d "['new value']"
  "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
    "httpStatus": "Created",
    "httpStatusCode": 201,
    "status": "OK",
    "message": "Key 'bar' in namespace 'foo' updated."
}
```

### 删除键 { #webapi_user_data_store_delete_key }

删除金钥

    删除/ api / 33 / userDataStore / <namespace> / <key>

请求示例：

```bash
curl -X DELETE -u admin:district "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Key 'bar' deleted from the namespace 'foo."
}
```

### 删除名称空间 { #webapi_user_data_store_delete_namespace }

删除给定名称空间中的所有键

    删除/ api / 33 / userDataStore / <namespace>

请求示例：

```bash
curl -X DELETE -u admin:district "play.dhis2.org/api/33/userDataStore/foo"
```

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "All keys from namespace 'foo' deleted."
}
```

## 预测变量 { #webapi_predictors }

预测器允许您根据表达式生成数据值。
这可以用于例如生成目标、阈值、
或估计值。

要检索预测器，您可以向预测器发出 GET 请求
像这样的资源：

    / api / predictors

### 创建预测变量 { #webapi_create_predictor }

您可以使用对预测器的 POST 请求创建预测器
资源：

    POST / api / predictors

有效负载样本如下所示：

```json
{
    "id": "AG10KUJCrRk",
    "name": "Malaria Outbreak Threshold Predictor",
    "shortName": "Malaria Outbreak Predictor",
    "description": "Computes the threshold for potential malaria outbreaks based on the mean plus 1.5x the std dev",
    "output": {
        "id": "nXJJZNVAy0Y"
    },
    "generator": {
        "expression": "AVG(#{r6nrJANOqMw})+1.5*STDDEV(#{r6nrJANOqMw})",
        "description": "Maximum normal malaria case count",
        "missingValueStrategy": "NEVER_SKIP",
        "slidingWindow": false
    },
    "periodType": "Monthly",
    "sequentialSampleCount": 4,
    "sequentialSkipCount": 1,
    "annualSampleCount": 3,
    "organisationUnitLevels": [4]
}
```

输出元素是指数据元素的标识符
其中保存预测数据值。生成器元素是指
计算预测值时使用的表达式。

### 预测表达式 { #webapi_predictor_expressions }

预测器总是有一个生成器表达式来描述
计算出预测值。预测器也可能有跳过测试
表达式返回一个布尔值。当跳过测试表达式为
目前，在每个采样周期中对其进行评估，以判断是否
应该跳过那个时期的值。

以下变量可用于生成器表达式
或跳过测试表达式：

| 变量 | 目的 | 描述 |
| --- | --- | --- |
| ＃ | 汇总数据元素 | 指所有类别选项组合中的聚合数据元素的总值。 |
| ＃ | 数据元素操作数 | 指聚合数据元素和类别选项组合的组合。 |
| D {\ <program-id>。\ <dataelement-id>} | 程序数据元素 | 引用程序中跟踪器数据元素的值。 |
| A {\ <program-id>。\ <attribute-id>} | 程序跟踪的实体属性 | 指程序中被跟踪实体属性的值。 |
| 我{\ <program-indicator-id>} | 计划指标 | 指程序指示器的值。 |
| R {\ <dataset-id>。\ <metric>} | 报告率 | 指报告率指标。指标可以是REPORTING_RATE，REPORTING_RATE_ON_TIME，ACTUAL_REPORTS，ACTUAL_REPORTS_ON_TIME，EXPECTED_REPORTS。 |
| C {\ <constant-id>} | 不变 | 指恒定值。 |
| OUG {\ <orgunitgroup-id>} | 组织单位组 | 指组织单位组内组织单位的数量。 |
| [天] | 天数 | 当前期间的天数。 |

### 生成预测值 { #webapi_generating_predicted_values }

要运行所有预测器（生成预测值），您可以进行 POST
请求运行资源：

    POST / api / predictors / run

要运行单个预测器，您可以向运行发出 POST 请求
预测器的资源：

    POST / api / predictors / AG10KUJCrRk / run

## 最小-最大数据元素 { #webapi_min_max_data_elements }

min-max 数据元素资源允许您设置最小值和最大值
数据元素的值范围。它是独一无二的
组织单位、数据元素和类别选项组合。

    / api / minMaxDataElements

 <table>
 <caption> 最小-最大数据元素数据结构 </caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 项目 </th>
 <th> 说明 </th>
 <th> 数据类型 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 源 </td>
 <td> 组织单位标识符 </td>
 <td> 字符串 </td>
 </tr>
 <tr class="even">
 <td> 数据元素 </td>
 <td> 数据元素标识符 </td>
 <td> 字符串 </td>
 </tr>
 <tr class="odd">
 <td> optionCombo </td>
 <td> 数据元素类别选项组合标识符 </td>
 <td> 字符串 </td>
 </tr>
 <tr class="even">
 <td> 分钟 </td>
 <td> 最小值 </td>
 <td> 整数 </td>
 </tr>
 <tr class="odd">
 <td> 最大 </td>
 <td> 最大值 </td>
 <td> 整数 </td>
 </tr>
 <tr class="even">
 <td> 生成 </td>
 <td> 表示该对象是否由系统生成（而非手动设置）。 </td>
 <td> 布尔值 </td>
 </tr>
 </tbody>
 </table>

您可以从以下位置检索所有最小-最大数据元素的列表
资源：

    获取 /api/minMaxDataElements.json

您可以像这样过滤响应：

    GET /api/minMaxDataElements.json?filter=dataElement.id:eq:UOlfIjgN8X6

    GET /api/minMaxDataElements.json?filter=dataElement.id:in:[UOlfIjgN8X6,xc8gmAKfO95]

min-max 数据元素的过滤器参数支持两种运算符：
eq 和 in。您还可以使用 `fields` 查询参数。

    GET /api/minMaxDataElements.json?fields=:all,dataElement[id,name]

### 添加/更新最小-最大数据元素 { #webapi_add_update_min_max_data_element }

要添加新的最小-最大数据元素，请使用POST请求执行以下操作：

    POST /api/minMaxDataElements.json

JSON内容格式如下所示：

```json
{
    "min": 1,
    "generated": false,
    "max": 100,
    "dataElement": {
        "id": "UOlfIjgN8X6"
    },
    "source": {
        "id": "DiszpKrYNg8"
    },
    "optionCombo": {
        "id": "psbwp3CQEhs"
    }
}
```

如果数据元素、组织单位和类别的组合
选项组合存在，最小值-最大值将被更新。

### 删除最小-最大数据元素 { #webapi_delete_min_max_data_element }

要删除最小-最大数据元素，请使用DELETE方法发送请求：

    删除/api/minMaxDataElements.json

JSON内容的格式与上述类似：

```json
{
    "min": 1,
    "generated": false,
    "max": 100,
    "dataElement": {
        "id": "UOlfIjgN8X6"
    },
    "source": {
        "id": "DiszpKrYNg8"
    },
    "optionCombo": {
        "id": "psbwp3CQEhs"
    }
}
```

## 锁定异常 { #webapi_lock_exceptions }

锁定异常资源允许您打开其他锁定的数据
用于特定数据集、时期和组织的数据输入集
单元。您可以从以下资源中读取锁定异常：

    / api / lockExceptions

要创建新的锁定异常，您可以使用 POST 请求并指定
数据集、期间和组织单位：

    POST / api / lockExceptions？ds = BfMAe6Itzgt＆pe = 201709＆ou = DiszpKrYNg8

要删除锁定异常，您可以使用类似的请求语法
删除请求：

    删除/ api / lockExceptions？ds = BfMAe6Itzgt＆pe = 201709＆ou = DiszpKrYNg8

## 代币 { #webapi_tokens }

_tokens_ 资源提供各种服务的访问令牌。

### Google服务帐号 { #webapi_tokens_google_service_account }

您可以使用以下命令检索 Google 服务帐户 OAuth 2.0 访问令牌
对以下资源的 GET 请求。

    获取 /api/tokens/google

令牌将在一定时间内有效，之后
必须从此资源请求另一个令牌。响应
包含匹配令牌到期的缓存控制标头。这
响应将包含以下 JSON 格式的属性。

 <table>
 <caption>令牌响应</caption>
 <colgroup>
 <col style="width: 40%" />
 <col style="width: 59%" />
 </colgroup>
 <thead>
 <tr class="header">
 属性<th> </th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> access_token </td>
 <td>针对Google服务进行身份验证时要使用的OAuth 2.0访问令牌。 </td>
 </tr>
 <tr class="even">
 <td> expires_in </td>
 <td>直到访问令牌到期的秒数，通常为3600秒（1小时）。 </td>
 </tr>
 <tr class="odd">
 <td> client_id </td>
 <td> Google服务帐户客户端ID。 </td>
 </tr>
 </tbody>
 </table>

假定已为DHIS2设置并配置了Google服务帐户。请查阅安装指南以获取更多信息。

## 分析表挂钩 { #webapi_analytics_table_hooks }

Analytics 表挂钩提供了一种调用 SQL 脚本的机制
在分析表生成过程的不同阶段。这
对于自定义资源和分析表中的数据很有用，例如在
以实现计算和聚合的特定逻辑。
可以在以下 API 端点操作分析表挂钩：

    / api / analyticsTableHooks

分析表钩子 API 支持标准的 HTTP CRUD 操作
用于创建（POST）、更新（PUT）、检索（GET）和删除
（删除）实体。

### 钩场 { #webapi_analytics_table_hook_fields }

Analytics表挂钩具有以下字段：

<table style="width:100%;">
<caption>Analytics table hook fields</caption>
<colgroup>
<col style="width: 22%" />
<col style="width: 30%" />
<col style="width: 46%" />
</colgroup>
<thead>
<tr class="header">
<th>Field</th>
<th>Options</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>name</td>
<td>Text</td>
<td>Name of the hook.</td>
</tr>
<tr class="even">
<td>phase</td>
<td>RESOURCE_TABLE_POPULATED, ANALYTICS_TABLE_POPULATED</td>
<td>The phase for when the SQL script should be invoked.</td>
</tr>
<tr class="odd">
<td>resourceTableType</td>
<td><p>See column &quot;Table type&quot; in table &quot;Phases, table types and temporary tables&quot; below</p></td>
<td>The type of resource table for which to invoke the SQL script. Applies only for hooks defined with the RESOURCE_TABLE_POPULATED phase.</td>
</tr>
<tr class="even">
<td>analyticsTableType</td>
<td>See column &quot;Table type&quot; in table &quot;Phases, table types and temporary tables&quot; below</td>
<td>The type of analytics table for which to invoke the SQL script. Applies only for hooks defined with the ANALYTICS_TABLE_POPULATED phase.</td>
</tr>
<tr class="odd">
<td>sql</td>
<td>Text</td>
<td>The SQL script to invoke.</td>
</tr>
</tbody>
</table>

_ANALYTICS_TABLE_POPULATED_ 阶段发生在填充分析表之后、创建索引以及将临时表与主表交换之前。因此，SQL 脚本应引用分析临时表，例如_analytics_temp_、_analytics_completeness_temp_。

这也适用于 _RESOURCE_TABLE_POPULATED_ 阶段，该阶段发生在填充资源表之后、创建索引以及将临时表与主表交换之前。因此，SQL 脚本应该引用资源临时表，例如_\_组织结构_临时_、_\_类别结构_临时_。

您应该仅定义 _resourceTableType_ 和 _analyticsTableType_ 字段之一，具体取决于定义的 _phase_。

只能引用与指定的钩子表类型匹配的临时数据库表（其他临时表将不可用）。例如，如果指定 _ORG_UNIT_STRUCTURE_ 作为资源表类型，则只能引用 _\_orgunitstruction_temp_ 临时数据库表。

下表显示了阶段、表格类型的有效组合
和临时表。

 <table>
 <caption> 阶段、表类型和临时表 </caption>
 <colgroup>
 <col style="width: 27%" />
 <col style="width: 39%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 相 </th>
 <th> 表型 </th>
 <th> 临时表 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td rowspan="12"> RESOURCE_TABLE_POPULATED </td>
 <td> ORG_UNIT_STRUCTURE </td>
 <td> _orgunitstructure_temp </td>
 </tr>
 <tr class="even">
 <td> DATA_SET_ORG_UNIT_CATEGORY </td>
 <td> _datasetorgunitcategory_temp </td>
 </tr>
 <tr class="odd">
 <td> CATEGORY_OPTION_COMBO_NAME </td>
 <td> _categoryoptioncomboname_temp </td>
 </tr>
 <tr class="even">
 <td> DATA_ELEMENT_GROUP_SET_STRUCTURE </td>
 <td> _dataelementgroupsetstructure_temp </td>
 </tr>
 <tr class="odd">
 <td> INDICATOR_GROUP_SET_STRUCTURE </td>
 <td> _indicatorgroupsetstructure_temp </td>
 </tr>
 <tr class="even">
 <td> ORG_UNIT_GROUP_SET_STRUCTURE </td>
 <td> _organisationunitgroupsetstructure_temp </td>
 </tr>
 <tr class="odd">
 <td> CATEGORY_STRUCTURE </td>
 <td> _categorystructure_temp </td>
 </tr>
 <tr class="even">
 <td> DATA_ELEMENT_STRUCTURE </td>
 <td> _dataelementstructure_temp </td>
 </tr>
 <tr class="odd">
 <td> PERIOD_STRUCTURE </td>
 <td> _periodstructure_temp </td>
 </tr>
 <tr class="even">
 <td> DATE_PERIOD_STRUCTURE </td>
 <td> _dateperiodstructure_temp </td>
 </tr>
 <tr class="odd">
 <td> DATA_ELEMENT_CATEGORY_OPTION_COMBO </td>
 <td> _dataelementcategoryoptioncombo_temp </td>
 </tr>
 <tr class="even">
 <td> DATA_APPROVAL_MIN_LEVEL </td>
 <td> _dataapprovalminlevel_temp </td>
 </tr>
 <tr class="odd">
 <td rowspan="7"> ANALYTICS_TABLE_POPULATED </td>
 <td> DATA_VALUE </td>
 <td> analytics_temp </td>
 </tr>
 <tr class="even">
 <td> 完整性 </td>
 <td> analytics_completeness_temp </td>
 </tr>
 <tr class="odd">
 <td> COMPLETENESS_TARGET </td>
 <td> analytics_completenesstarget_temp </td>
 </tr>
 <tr class="even">
 <td> ORG_UNIT_TARGET </td>
 <td> analytics_orgunittarget_temp </td>
 </tr>
 <tr class="odd">
 <td> 事件 </td>
 <td> analytics_event_temp_&lt;program-uid&gt; </td>
 </tr>
 <tr class="even">
 <td> 注册 </td>
 <td> analytics_enrollment_temp_&lt;program-uid&gt; </td>
 </tr>
 <tr class="odd">
 <td> VALIDATION_RESULT </td>
 <td> analytics_validationresult_temp </td>
 </tr>
 </tbody>
 </table>

### 创建钩子 { #webapi_create_analytics_table_hook }

要创建一个在填充资源表后运行的挂钩，您可以使用 _JSON_ 格式执行如下的 _POST_ 请求：

```bash
curl -d @hooks.json "localhost/api/analyticsTableHooks" -H "Content-Type:application/json" -u admin:district
```

```json
{
    "name": "Update 'Area' in org unit group set resource table",
    "phase": "RESOURCE_TABLE_POPULATED",
    "resourceTableType": "ORG_UNIT_GROUP_SET_STRUCTURE",
    "sql": "update _organisationunitgroupsetstructure_temp set \"uIuxlbV1vRT\" = 'b0EsAxm8Nge'"
}
```

要创建一个应在填充数据值分析表后运行的挂钩，您可以使用 _JSON_ 格式执行如下的 _POST_ 请求：

```json
{
    "name": "Update 'Currently on treatment' data in analytics table",
    "phase": "ANALYTICS_TABLE_POPULATED",
    "analyticsTableType": "DATA_VALUE",
    "sql": "update analytics_temp set monthly = '200212' where \"monthly\" in ('200210', '200211')"
}
```

## 元数据存储库 { #webapi_metadata_repository }

DHIS2 提供了一个包含元数据包的元数据存储库
各种内容。元数据包是符合 DHIS2 的 JSON 文档
它描述了一组元数据对象。

要检索可用元数据包的索引，您可以向 _metadataRepo_ 资源发出 GET 请求：

    GET /api/synchronization/metadataRepo

元数据包条目包含有关包的信息和
相关包的 URL。索引可能如下所示：

```json
{
    "packages": [
        {
            "id": "sierre-leone-demo",
            "name": "Sierra Leone demo",
            "description": "Sierra Leone demo database",
            "version": "0.1",
            "href": "https://dhis2.org/metadata-repo/221/sierra-leone-demo/metadata.json"
        },
        {
            "id": "trainingland-org-units",
            "name": "Trainingland organisation units",
            "description": "Trainingland organisation units with four levels",
            "version": "0.1",
            "href": "https://dhis2.org/metadata-repo/221/trainingland-org-units/metadata.json"
        }
    ]
}
```

客户端可以按照 URL 并通过内容类型为 _text/plain_ 的 POST 请求安装元数据包，并将元数据包 URL 作为 _metadataPull_ 资源的负载：

    POST / api / synchronization / metadataPull

curl命令示例如下所示：

```bash
curl "localhost:8080/api/synchronization/metadataPull" -X POST
  -d "https://dhis2.org/metadata-repo/221/trainingland-org-units/metadata.json"
  -H "Content-Type:text/plain" -u admin:district
```

## 图示 { #webapi_icons }

DHIS2 包括一组可用于提供视觉效果的图标
元数据的上下文。这些图标可以通过图标访问
资源。

    获取/api/图标

此端点返回有关可用图标的信息列表。
每个条目都包含有关图标的信息，以及对图标的引用
实际图标。

```json
{
    "key": "mosquito_outline",
    "description": "Mosquito outline",
    "keywords": ["malaria", "mosquito", "dengue"],
    "href": "<dhis server>/api/icons/mosquito_outline/icon.svg"
}
```

关键字可用于过滤要返回的图标。传递一个列表
带有请求的关键字将只返回与所有匹配的图标
关键词：

    GET /api/icons?keywords=shape,小

可以在关键字资源中找到所有唯一关键字的列表：

    获取/api/图标/关键字
