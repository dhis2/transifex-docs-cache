---
edit_url: "https://github.com/dhis2-metadata/CVC_EIR/blob/master/docs/cvc_eir-installation.md"
revision_date: '2022-11-03'
tags:
- Implement
---

# Covid-19 Electronic Immunization Registry - Tracker Installation Guide { #cvc-eir-installation }

This document includes an installation guide for the updated COVAC Electronic Immunization Registry tracker package and a supplementary aggregate module for daily reporting based on tracker data.

System default language: English

Available translations: French, Spanish, Portuguese

## 安装 { #installation } 

模块的安装包括以下几个步骤：

1. [Preparing the metadata file with DHIS2 metadata](#preparing-the-metadata-file).
2. [Importing the metadata file into DHIS2](#importing-metadata).
3. [Configuring the imported metadata](#configuration).
4. [Adapting the program after import](#adapting-the-program)

It is recommended to first read through each section of the installation guide before starting the installation and configuration process in DHIS2. Identify applicable sections depending on the type of your import:

1. import into a blank DHIS2 instance
2. import into a DHIS2 instance with existing metadata.

The steps outlined in this document should be tested in a test/staging DHIS2 instance and only then applied to a production environment.

## 要求 { #requirements } 

In order to install the module, an administrator user account on DHIS2 is required.

Great care should be taken to ensure that the server itself and the DHIS2 application are well secured, access rights to collected data should be defined. Details on securing a DHIS2 system is outside the scope of this document, and we refer to the [DHIS2 documentation](https://docs.dhis2.org/).

## Metadata files { #metadata-files } 

尽管并非总是必要，但在将元数据文件导入DHIS2之前对其进行某些修改通常可能是有利的。

The Covid-19 Electronic Immunization Registry tracker package includes three metadata files. The contents and purposose of each individual file are described below:

| Package identifier                                            | Contents  | 目的 |
|---------------------------------------------------------------|-----------|---------|
| CVC_EIR-TRK-Electronic_Immunization_Registry_Covid19_Vaccines | Updated tracker package, <br> aggregate data set for automated tracker-to-aggregate-transfer, <br> dashboard based on aggregate indicator values | New implementation |
| CVC_EIR-AGG-Electronic_Immunization_Registry_Covid19_Vaccines | Aggregate data set for automated tracker-to-aggregate-transfer, <br> dashboard based on aggregate indicator values | Update to an existing tracker implementation, <br> Setup of tracker-to-aggregate transfer, <br> Use of Daily aggregate dashboard |
| CVC_EIR-PI-Electronic_Immunization_Registry_Covid19_Vaccines  | 13 updated program indicators from the original package. <br> PIs are mapped to the aggregate data elements and Category option combinations in the daily aggregate data set | Update to an existing implementation |

> **Note**
>
> The package is not an out-of-the-box tool for tracker-to-aggregate data transfer.
> The structure of the metadata package and the suggested mapping of metadata allow the implementer to set up the transfer of data based on existing tools and guidance. More information is available in the [Tracker to aggregate data Transfer Document](https://docs.dhis2.org/en/implement/maintenance-and-use/tracker-and-aggregate-data-integration.html#how-to-saving-aggregated-tracker-data-as-aggregate-data-values).

## 准备元数据文件 { #preparing-the-metadata-file } 

### Mapping guide for data transfer { #mapping-guide-for-data-transfer } 

The 13 program indicators that can be used for tracker-to-aggregate data transfer are mapped to the corresponding data elements and category option combinations of the aggregate data set.

> **Example**
>
> Program indicator **Number of people receiving a first dose (Female 0-59)** `RJ6pdxga9Od`is mapped to the category option combination **Female, 0-59 years** `FsZSFGKirY0` of the data element **COVAC - People with 1st dose** `RjT7dmzunF4`

The mapping is based on codes of metadata objects.

The custom attribute **Data element for aggregate data export** `vudyDP7jUy5` contains the reference code of the aggregate data elements, eg. **CVC_EIR_AGG_PPL_1ST_DOSE**

The **Category option combination for agggregate export** field contains reference codes of the category option combinations, eg. **CVC_EIR_0059Y_F**

The suggested transfer of the tracker-to-aggregate values is based on the following GET and POST API requests:

1. Source request: `../api/analytics/dataValueSet.json?dimension=dx:` "{program indicator uid/s}" `&dimension=pe:` "{relative period/s}" `&dimension=ou:` {organisation unit level} `&outputIdScheme=ATTRIBUTE:` {"custom attribute:`vudyDP7jUy5`"}
2. Target request: `..api/dataValueSets?dataElementIdScheme=CODE&categoryOptionComboIdScheme=CODE&importStrategy=CREATE_AND_UPDATE&mergeMode=REPLACE&dryRun=false`

### 计划指标 { #program-indicators } 

The program indicators required for the aggregation of the data values are included in the program indicator group **COVAC - Tracker to aggregate** `NXBR4r6MwAO`

| 计划指标                                                                                        | 用户标识           | 码                            | DE for aggregate export          | CoC for aggregate export |
|----------------------------------------------------------------------------------------------------------|---------------|---------------------------------|----------------------------------|--------------------------|
| Number of people receiving a first dose (Female 0-59)                                                    | `RJ6pdxga9Od` | CVC_EIR_PPL_1ST_DOSE_0059Y_F    | CVC_EIR_AGG_PPL_1ST_DOSE         | 0059Y_F                  |
| Number of people receiving a first dose (Female 60+)                                                     | `x4L0LuEBHhW` | CVC_EIR_PPL_1ST_DOSE_60PLUSY_F  | CVC_EIR_AGG_PPL_1ST_DOSE         | 60PLUSY_F                |
| Number of people receiving a first dose (Male 0-59)                                                      | `hqm8znlAzkT` | CVC_EIR_PPL_1ST_DOSE_0059Y_M    | CVC_EIR_AGG_PPL_1ST_DOSE         | 0059Y_M                  |
| Number of people receiving a first dose (Male 60+)                                                       | `aIIHyDy8AMW` | CVC_EIR_PPL_1ST_DOSE_60PLUSY_M  | CVC_EIR_AGG_PPL_1ST_DOSE         | 60PLUSY_M                |
| Number of people receiving a second, third or booster dose (Female 0-59)                                 | `xY4T9hHXNji` | CVC_EIR_PPL_2ND_DOSE_0059Y_F    | CVC_EIR_AGG_PPL_2ND_DOSE         | 0059Y_F                  |
| Number of people receiving a second, third or booster dose (Female 60+)                                  | `h9G7i6mQKef` | CVC_EIR_PPL_2ND_DOSE_60PLUSY_F  | CVC_EIR_AGG_PPL_2ND_DOSE         | 60PLUSY_F                |
| Number of people receiving a second, third or booster dose (Male 0-59)                                   | `MGjwUUNsE60` | CVC_EIR_PPL_2ND_DOSE_0059Y_M    | CVC_EIR_AGG_PPL_2ND_DOSE         | 0059Y_M                  |
| Number of people receiving a second, third or booster dose (Male 60+)                                    | `qh0kIjHZbP8` | CVC_EIR_PPL_2ND_DOSE_60PLUSY_M  | CVC_EIR_AGG_PPL_2ND_DOSE         | 60PLUSY_M                |
| Number of people who received the last recommended dose for the respective vaccine product (Female 0-59) | `Zp39TSOR8eW` | CVC_EIR_PPL_LAST_DOSE_0059Y_F   | CVC_EIR_AGG_PPL_LAST_DOSE        | 0059Y_F                  |
| Number of people who received the last recommended dose for the respective vaccine product (Female 60+)  | `XFUvVgqPukT` | CVC_EIR_PPL_LAST_DOSE_60PLUSY_F | CVC_EIR_AGG_PPL_LAST_DOSE        | 60PLUSY_F                |
| Number of people who received the last recommended dose for the respective vaccine product (Male 0-59)   | `FZNIlzPRMmL` | CVC_EIR_PPL_LAST_DOSE_0059Y_M   | CVC_EIR_AGG_PPL_LAST_DOSE        | 0059Y_M                  |
| Number of people who received the last recommended dose for the respective vaccine product (Male 60+)    | `zovL7DKBRuK` | CVC_EIR_PPL_LAST_DOSE_60PLUSY_M | CVC_EIR_AGG_PPL_LAST_DOSE        | 60PLUSY_M                |
| Underlying conditions - People with                                                                      | `Zn0UuSRYyJw` | CVC_EIR_PPL_UNDER_CONDITIONS    | CVC_EIR_AGG_PPL_UNDER_CONDITIONS | DEFAULT                  |

These program indicators are part of the original package but need to be updated because of the added mapping.

> **Note**
>
> If the original program indicators in your system were modified as part of local adaptation process, be aware that all changes will be overwritten once you import the updated set of program indicators.
> If any of your modified program indicators have the same UID as the program indicators listed in the table above, make sure to duplicate the modified program indicators before import.

### 默认数据维度 { #default-data-dimension } 

In early versions of DHIS2, the UIDs of the default data dimensions were auto-generated. Thus, while all DHIS2 instances have a default category option, data element category, category combination and category option combination, the UIDs of these defaults can be different. Later versions of DHIS2 have hardcoded UIDs for the default dimension, and these UIDs are used in the configuration packages.

To avoid conflicts when importing the metadata, it is advisable to search and replace the entire .json file for all occurrences of these default objects, replacing UIDs of the .json file with the UIDs from the instance in which the file will be imported. Table 1 shows the UIDs which should be replaced, as well as the API endpoints to identify the existing UIDs

|目的                       | 用户标识           | API endpoint                                              |
|-----------------------------|---------------|-----------------------------------------------------------|
| 类别                    | `GLevLNI9wkl` | `../api/categories.json?filter=name:eq:default`           |
| 类别选项             | `xYerKDKCefk` | `../api/categoryOptions.json?filter=name:eq:default`      |
| Category combination        | `bjDvmb4bfuf` | `../api/categoryCombos.json?filter=name:eq:default`       |
| Category option combination | `HllvX50cXC0` | `../api/categoryOptionCombos.json?filter=name:eq:default` |

Identify the UIDs of the default dimesions in your instance using the listed API requests and replace the UIDs in the json file with the UIDs from the instance.

> **NOTE**
>
> Note that this search and replace operation must be done with a plain text editor, not a word processor like Microsoft Word.

### 指标类型 { #indicator-types } 

Indicator type is another type of object that can create import conflict because certain names are used in different DHIS2 databases (.e.g "Percentage"). Since Indicator types are defined by their factor (including 1 for "numerator only" indicators), they are unambiguous and can be replaced through a search and replace of the UIDs. This method helps avoid potential import conflicts, and prevents the implementer from creating duplicate indicator types. The table below contains the UIDs which could be replaced, as well as the API endpoints to identify the existing UIDs:

|目的                  | 用户标识           | API endpoint                                                          |
|------------------------|---------------|-----------------------------------------------------------------------|
| Numerator only (number)| `CqNPn5KzksS` | `../api/indicatorTypes.json?filter=number:eq:true&filter=factor:eq:1` |

### 追踪实体类型 { #tracked-entity-type } 

Like indicator types, you may have already existing tracked entity types in your DHIS2 database. The references to the tracked entity type should be changed to reflect what is in your system so you do not create duplicates. The table below contains the UIDs which could be replaced, as well as the API endpoints to identify the existing UIDs:

|目的  | 用户标识           | API endpoint                                           |
|------------------------|---------------|----------------------------------------|
| Person | `MCPQUTHX1Ze` | `../api/trackedEntityTypes.json?filter=name:eq:Person` |

### Visualizations using Root Organisation Unit UID { #visualizations-using-root-organisation-unit-uid } 

Visualizations, event reports, report tables and maps that are assigned to a specific organisation unit level or organisation unit group, have a reference to the root (level 1) organisation unit. Such objects, if present in the metadata file, contain a placeholder `<OU_ROOT_UID>`. Use the search function in the .json file editor to possibly identify this placeholder and replace it with the UID of the level 1 organisation unit in the target instance.

### Option codes { #option-codes } 

According to the DHIS2 naming conventions, the metadata codes use capital letters, underscores and no spaces. Some exceptions that may occur are specified in the corresponding package documentation.
All codes included in the metadata objects in the current version of the package were adjusted to match the naming conventions. It may occur that the codes used in the earlier versions of the package used lower case characters. If data values in the existing implementations contain lower case codes, it is important to update those values directly in the database.

The table below contains all option sets where codes were changed to upper case in the metadata package. Before importing metadata into the instance, check whether the option sets in the existing system match those in the package .json and use the same upper case option codes.

| Option set name               | Option set UID |
|-------------------------------|---------------|
| COVAC - AEFI Pregnancy        | `ilxtWultuYP` |
| COVAC - Occupation            | `CNNH0YKxRh9` |
| COVAC - Trimester             | `kgDmgTYZICP` |
| COVAC Vaccine brand           | `UJTnyCB3cyk` |
| COVAC - Vaccine Manufacturers | `DtOGtoLbaB5` |
| COVAC - Vaccine Names         | `VQo3HkUlMHc` |
| Sex                           | `WDUwjiW2rGH` |
| Yes/No/Unknown                | `L6eMZDJkCwX` |

The table below contains metadata elements that use an affected option set:

| Metadata object          | 名称                                   | 用户标识            |
|--------------------------|----------------------------------------|---------------|
| 数据元素             | COVAC - Pregnancy                      | `BfNZcj99yz4` |
| 数据元素             | COVAC - Pregnancy gestation            | `CBAs12YL4g7` |
| 数据元素             | COVAC - Previously infected with COVID | `LOU9t0aR0z7` |
| 数据元素             | COVAC - Underlying condition           | `bCtWZGjSWM8` |
| 数据元素             | COVAC - Vaccine Brand                  | `rWYryQb3ohn` |
| 数据元素             | COVAC - Vaccine Manufacturer           | `rpkH9ZPGJcX` |
| 数据元素             | COVAC - Vaccine Name                   | `bbnyNYD1wgS` |
| 跟踪实体属性 | COVID - Occupation                     | `LY2bDXpNvS7` |
| 跟踪实体属性 | Sex                                    | `oindugucx72` |

> **Important**
>
> During the import, the existing option codes will be overwritten with the updated upper case codes.
> In order to update the data values for existing data in the database, it is necessary to update the values stored in the database using database commands.
> Make sure to map existing old option codes and new option codes before replacing the values. Use staging instance first, before making adjustments on the production server.

For data element values, use:

    ```SQL
    UPDATE programstageinstance
    SET eventdatavalues = jsonb_set(eventdatavalues, '{"<affected data element uid>","value"}', '"<new value>"')
    WHERE eventdatavalues @> '{"<affected data element uid>":{"value": "<old value>"}}'::jsonb
    AND programstageid=<database_programsatgeid>;
    ```

For tracked entity attribute values, use:

    ```SQL
    UPDATE trackedentityattributevalue
    SET value = <new value>
    WHERE trackedentityattributeid=<affected trackedentityattribute database_id> AND value=<old value>;
    ```

> **Example**
>
> To replace the option code 'yes' with 'YES' for existing data values (data element COVAC - Previously infected with COVID `LOU9t0aR0z7`) in the programstage with the id=1510410385 (example id), the command will be configured as follows:
>
>     ```SQL
>     UPDATE programstageinstance
>     SET eventdatavalues = jsonb_set(eventdatavalues, '{"LOU9t0aR0z7","value"}', '"YES"')
>     WHERE eventdatavalues @> '{"LOU9t0aR0z7":{"value": "yes"}}'::jsonb
>     AND programstageid=1510410385;
>     ```

Option codes are also used in program rule expressions, program indicators, etc. If you are updating code options in your system, make sure you update the codes in all affected metadata objects.

### Sort order for options { #sort-order-for-options } 

Check whether the sort order `sortOrder` of options in your system matches the sort order of options included in the metadata package. This only applies when the json file and the target instance contain options and option sets with the same UID.

After import, make sure that the sort order for options within an option set starts at 1. There should be no gaps (eg. 1,2,3,5,6) in the sort order values.

Sort order can be adjusted in the Maintenance app.

1. Go to the applicable Option Set
2. Open the "Options" section
3. Use "SORT BY NAME", "SORT BY CODE/VALUE" or "SORT MANUALLY" alternatives.

## 导入元数据 { #importing-metadata } 

Use [Import/Export](#import_export) DHIS2 app to import metadata packages. It is advisable to use the "dry run" feature to identify issues before attempting to do an actual import of the metadata. If "dry run" reports any issues or conflicts, see the [import conflicts](#handling-import-conflicts) section below. If the "dry run"/"validate" import works without error, attempt to import the metadata. If the import succeeds without any errors, you can proceed to [configuring](#configuration) the module. In some cases, import conflicts or issues are not shown during the "dry run", but appear when the actual import is attempted. In this case, the import summary will list any errors that need to be resolved.

### 处理导入冲突 { #handling-import-conflicts } 

> **NOTE**
>
> If you are importing the package into a new DHIS2 instance, you will not experience import conflicts, as there is no metadata in the target database. After import the metadata, proceed to the “[Configuration](#configuration)” section.

There are a number of different conflicts that may occur, though the most common is that there are metadata objects in the configuration package with a name, shortname and/or code that already exist in the target database. There are a couple of alternative solutions to these problems, with different advantages and disadvantages. Which one is more appropriate will depend, for example, on the type of object for which a conflict occurs.

#### 备选方案1 { #alternative-1 } 

Rename the existing object in your DHIS2 database for which there is a conflict. The advantage of this approach is that there is no need to modify the .json file, as changes are instead done through the user interface of DHIS2. This is likely to be less error prone. It also means that the configuration package is left as is, which can be an advantage for example when updates to the package are released. The original package objects are also often referenced in training materials and documentation.

#### 备选方案2 { #alternative-2 } 

重命名.json文件中存在冲突的对象。这种方法的优点是现有的DHIS2元数据保持不变。当存在培训材料或文档（例如链接到所讨论对象的数据字典的SOP）时，这可能是一个因素，并且不存在通过修改用户熟悉的元数据而使用户感到困惑的风险。

请注意，对于备选项1和2，修改可以简单到在名称中添加一个小的前缀/后缀，以最大程度地减少混乱的风险。

#### 备选3 { #alternative-3 } 

第三种也是更复杂的方法是修改.json文件以重新使用现有的元数据。例如，在某个概念的某个选项集已经存在的情况下（例如“性别”），可以从.json文件中删除该选项集，并且对其UID的所有引用都将替换为数据库中已经存在的相应选项集。这样做的最大优点（不限于直接导入冲突的情况）是避免在数据库中创建重复的元数据。执行这种类型的修改时，需要考虑一些关键因素：

* 它需要有关DHIS2详细元数据结构的专业知识
* 该方法不适用于所有类型的对象。特别地，某些类型的对象具有依赖关系，这种依赖关系以这种方式难以解决，例如与分解有关。
* 将来对配置包的更新将很复杂。

## 组态 { #configuration } 

成功导入所有元数据后，需要执行一些步骤，模块才能正常运行。

### 分享中 { #sharing } 

First, you will have to use the *Sharing* functionality of DHIS2 to configure which users (user groups) should see the metadata and data associated with the program as well as who can register/enter data into the program. By default, sharing has been configured for the following:

* 追踪实体类型
* 程序
* 计划阶段
* 仪表板
* Visualizations, maps, event reports and report tables
* 数据集
* Category options

Please refer to the [DHIS2 documentation](#sharing) for more information on sharing.

Four core user groups are included in the package:

* COVAC - COVID-19 Immunization Data Analysis
* COVAC - COVID-19 Immunization Data Admin
* COVAC - COVID-19 Immunization Data Entry
* COVAC - COVID-19 Immunization Metadata Admin

By default, the following permissions are assigned to these user groups:

|目的                   |User Group                                     |                                                     |                                                     |                                                    |
|-------------------------|-----------------------------------------------|-----------------------------------------------------|-----------------------------------------------------|----------------------------------------------------|
|                         | _COVAC - COVID-19 Immunization Data Analysis_ | _COVAC - COVID-19 Immunization Data Admin_          | _COVAC - COVID-19 Immunization Data Entry_          | _COVAC - COVID-19 Immunization Metadata Admin_    |
| _*Tracked entity type*_ | Metadata : can view <br> Data: can view       | Metadata : can view <br> Data: can view             | Metadata : can view <br> Data: can capture and view | Metadata : can edit and view <br> Data: can view  |
| _*Program*_             | Metadata : can view <br> Data: can view       | Metadata : can view <br> Data: can view             | Metadata : can view <br> Data: can capture and view | Metadata : can edit and view <br> Data: can view  |
| _*Program Stages*_      | Metadata : can view <br> Data: can view       | Metadata : can view <br> Data: can view             | Metadata : can view <br> Data: can capture and view | Metadata : can edit and view <br> Data: can view  |
| _*Dashboards*_          | Metadata : can view                           | Metadata : can view                                 | No Access                                           | Metadata : can edit and view                      |
| _*Data Sets*_           | Metadata : can view <br> Data: can view       | Metadata : can view <br> Data: can capture and view | No Access                                           | Metadata : can edit and view <br> Data: No access |

The users are assigned to the appropriate user group based on their role within the system. Sharing for other objects in the package may be adjusted depending on the set up. Refer to the [DHIS2 Documentation on sharing](#sharing) for more information.

### User roles { #user-roles } 

用户将需要用户角色才能参与DHIS2中的各种应用程序。建议以下最低角色：

1. 跟踪器数据分析：可以查看事件分析并访问仪表板，事件报告，事件可视化器，数据可视化器，数据透视表，报告和地图。
2. 跟踪器数据捕获：可以添加数据值，更新跟踪的实体，跨组织单位搜索跟踪的实体以及访问跟踪器捕获

Refer to the [DHIS2 Documentation](https://docs.dhis2.org/) for more information on configuring user roles.

### Organisation units { #organisation-units } 

The program and the data sets must be assigned to organisation units within existing hierarchy in order to be accessible via tracker capture/capture apps.

### 重复的元数据 { #duplicated-metadata } 

> **NOTE**
>
> This section only applies if you are importing into a DHIS2 database in which there is already meta-data present. If you are working with a new DHIS2 instance, please skip this section and go to [Adapting the tracker program](#adapting-the-program).
> If you are using any third party applications that rely on the current metadata, please take into account that this update could break them.

即使成功导入了元数据而没有任何导入冲突，元数据中也可能存在重复项-数据元素，跟踪的实体属性或已存在的选项集。正如上面有关解决冲突的部分所述，要牢记的一个重要问题是，在DHIS2中更改元数据的决定还需要考虑与现有元数据有不同关联的其他文档和资源。 ，以及通过配置包导入的元数据。因此，解决重复项不仅是“清理数据库”的问题，而且还要确保做到这一点，例如，不破坏与其他系统的集成，使用培训材料的可能性，破坏SOP等。这将非常很大程度上取决于上下文。

One important thing to keep in mind is that DHIS2 has tools that can hide some of the complexities of potential duplications in metadata. For example, where duplicate option sets exist, they can be hidden for groups of users through [sharing](#sharing).

## Adapting the program { #adapting-the-program } 

Once the program has been imported, you might want to make certain modifications to the program. Examples of local adaptations that *could* be made include:

* 向表单添加其他变量。
* 根据国家惯例修改数据元素/选项名称。
* 向变量和/或数据输入表单添加翻译。
* 根据本地案例定义修改程序指标

但是，如果您决定更改或删除任何包含的表格/元数据，强烈建议格外小心。修改可能会破坏功能，例如程序规则和程序指示器。

## Removing metadata { #removing-metadata } 

In order to keep your instance clean and avoid errors, it is recommended that you remove the unnecessary metadata from your instance.

The original dashboard **COVAC - COVID-19 vaccine registry** `YYtAbckt77l` has been removed from the updated package and replaced by the new dashboard: **COVAC - Daily monitoring** `iBWlFCvvtkH`

In order to remove the old dashboard from your system, you need to:

1. Note the names/UIDs of all objects included on the dashboard.
2. Remove all dashboard items from the dashboard and save.
3. Delete the dashboard.
4. Delete all visualizations, maps, event reports and report tables included in the original dashboard.

> **NOTE**
>
> It is possible to delete the dashboard, its dashboard items and all relevant visualizations, maps and reports directly from the database using SQL commands.

