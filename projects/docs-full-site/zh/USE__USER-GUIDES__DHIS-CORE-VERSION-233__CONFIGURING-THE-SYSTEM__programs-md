---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.33/src/commonmark/en/content/user/configure-programs-in-the-maintenance-app.md"
revision_date: '2019-10-18'
---

# 在维护应用中配置程序 { #configure_programs_in_maintenance_app } 

 <!--DHIS2-SECTION-ID:configure_programs_in_maintenance_app-->

## 关于程序 { #about_program_maintenance_app } 

 <!--DHIS2-SECTION-ID:about_program_maintenance_app-->

传统上，公共卫生信息系统一直在报告
整个健康计划中服务提供的汇总数据。这个
不允许您跟踪提供这些服务的人员。在
DHIS2，您可以分阶段定义自己的程序。这些程序是
“跟踪器”功能的重要部分，可让您跟踪
个人记录。您还可以跟踪其他“实体”，例如井或
保险。您可以创建两种类型的程序：

 <table>
 <caption>项目类型</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> <p>项目类型</p> </th>
 <th> <p>说明</p> </th>
 <th> <p>使用示例</p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> <p>事件项目</p> </td>
 <td> <p><em>不带</em>注册项目（匿名项目或SEWoR）的单个事件 </p>
 <p>匿名，通过卫生系统跟踪各个事件。这些个人交易没有任何人或实体。 </p>
 <p>只有一个程序阶段。 </p> </td>
 <td> <p>记录运行状况，而无需在系统中注册任何信息。 </p>
 <p>记录调查数据或监视行列表。 </p> </td>
 </tr>
 <tr class="even">
 <td> <p>跟踪程序</p> </td>
 <td> <p>单个事件<em>与</em>注册程序（SEWR）</p>
 <p>使用卫生系统通过每个单独的交易来跟踪实体（人，商品等）</p>
<p> 只有一个程序阶段。</p> 
 <p>跟踪实体实例（TEI）只能注册一次该程序。</p>  </td>
 <td> <p>记录出生证明和死亡证明。</p>  </td>
 </tr>
 <tr class="odd">
 <td></td>
  <td><p>多事件<em>与</em>注册程序（MEWR）</p>
 <p>使用卫生系统通过每个单独的交易来跟踪实体（人，商品等）</p>
 <p>具有多个程序阶段。  </p></td>
 <td><p> 母亲健康计划，分阶段包括ANC访问（2-4 +），分娩，PNC访问。  </p></td>
 </tr>
 </tbody>
 </table>

要创建程序，必须首先配置几种类型的元数据
对象。您可以在**维护**应用中创建这些元数据对象。

 <table>
 维护应用程序中的<caption>程序元数据对象</caption>
 <colgroup>
 <col style="width: 33%" />
 <col style="width: 33%" />
 <col style="width: 33%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> <p>对象类型</p> </th>
 <th>说明</th>
 <th> <p>可用功能</p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> <p>事件程序</p> </td>
 <td> <p>一个无需注册即可记录单个事件的程序</p> </td>
 <td> <p>创建，编辑，共享，删除，显示详细信息并翻译</p> </td>
 </tr>
 <tr class="even">
+ <td> <p>跟踪程序</p> </td>
+ <td> <p>一个程序，用于记录注册了单个或多个事件</p> </td>
+ <td> <p>创建，编辑，共享，删除，显示详细信息并翻译</p> </td>
+ </tr>
 <tr class="even">
 <td> <p>程序指示器</p> </td>
 <td> <p>一个基于跟踪实体的数据元素和属性的表达式，您可以使用该表达式基于公式来计算值。 </p> </td>
 <td> <p>创建，编辑，克隆，共享，删除，显示详细信息并翻译</p> </td>
 </tr>
 <tr class="odd">
 <td> <p>程序规则</p> </td>
 <td> <p>允许您在<strong>跟踪器捕获</strong>和<strong>事件捕获</strong>应用程序中创建和控制用户界面的动态行为。 </p> </td>
 <td> <p>创建，编辑，克隆，删除，显示详细信息并翻译</p> </td>
 </tr>
 <tr class="even">
 <td> <p>程序规则变量</p> </td>
 <td> <p>用于创建程序规则表达式的变量。 </p> </td>
 <td> <p>创建，编辑，克隆，删除，显示详细信息并翻译</p> </td>
 </tr>
 <tr class="odd">
 关系类型</p> <td> <p> </td>
 <td> <p>定义被跟踪实体A和被跟踪实体B（例如母子）之间的关系。 </p> </td>
 <td> <p>创建，编辑，克隆，共享，删除，显示详细信息并翻译</p> </td>
 </tr>
 <tr class="even">
 <td> <p>跟踪的实体类型</p> </td>
 <td> <p>可以通过系统跟踪的实体类型。可以是从人到商品的任何东西，例如药物或人。 </p>
 <p>一个程序必须具有一个跟踪的实体。要将跟踪的实体实例注册到程序中，实体的跟踪实体和程序的跟踪实体必须相同。 </p>
 <blockquote>
 注意</strong> </p> <p> <strong>
 <p>必须仅对一个跟踪实体指定一个程序。只有与程序的被跟踪实体相同的被跟踪实体才能注册该程序。 </p>
 </blockquote> </td>
 <td> <p>创建，编辑，克隆，共享，删除，显示详细信息并翻译</p> </td>
 </tr>
 <tr class="odd">
 <td> <p>跟踪实体属性</p> </td>
 <td> <p>用于注册跟踪实体的其他信息。 </p>
 <p>可以在程序之间共享。 </p> </td>
 <td> <p>创建，编辑，克隆，共享，删除，显示详细信息并翻译</p> </td>
 </tr>
 <tr class="odd">
 <td> <p>程序</p> </td>
 <td> <p>一个程序由多个程序阶段组成。 </p> </td>
 <td> <p>创建，编辑，共享，删除，分配给组织单位，显示详细信息并翻译</p> </td>
 </tr>
 <tr class="even">
 <td> <p>程序阶段</p> </td>
 <td> <p>程序阶段定义应在每个阶段执行哪些操作。 </p> </td>
 <td> <p>创建，编辑，共享，更改排序顺序，删除，显示详细信息并翻译</p> </td>
 </tr>
 <tr class="even">
 <td> <p>程序指示器组</p> </td>
 <td> <p>一组程序指示器</p> </td>
 <td> <p>创建，编辑，克隆，共享，删除，显示详细信息并翻译</p> </td>
 </tr>
 <tr class="odd">
 <td> <p>验证规则</p> </td>
 <td> <p>验证规则基于定义数据元素值之间关系的表达式。 </p> </td>
 <td> <p>创建，编辑，克隆，共享，删除，显示详细信息并翻译</p> </td>
 </tr>
 <tr class="even">
 <td> <p>程序通知</p> </td>
 <td> <p>自动消息提醒</p>
 <p>设置在计划的约会之前和错过的访问之后自动将提醒发送给已注册的跟踪实体实例的提醒。 </p> </td>
 <td> <p>创建，编辑和删除</p> </td>
 </tr>
 <tr class="odd">
 <td> <p>程序阶段通知</p> </td>
 <td> <p>自动消息提醒</p>
 <p>设置提醒，使其在程序阶段完成时或到期日之前或之后自动发送。 </p> </td>
 <td> <p>创建，编辑和删除</p> </td>
 </tr>
 </tbody>
 </table>

## 在维护应用程序中配置事件程序 { #configure_event_program_in_maintenance_app } 

 <!--DHIS2-SECTION-ID:configure_event_program_in_maintenance_app-->

### 关于活动计划 { #about_event_program } 

 <!--DHIS2-SECTION-ID:about_event_program-->

*没有*注册程序的单个事件称为事件程序。
您可以在**维护**应用中对其进行配置。活动节目可以有
三种类型的数据输入形式：

 <table>
 <caption>事件程序的数据输入表单类型</caption>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 表单类型</p> </th>格式为<th> <p>
 <th> <p>说明</p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> <p>基本</p> </td>
 <td> <p>列出属于程序的所有数据元素。您可以更改数据元素的顺序。 </p> </td>
 </tr>
 <tr class="even">
 <td> <p>部分</p> </td>
 <td> <p>部分将数据元素分组。然后，您可以排列各部分的顺序以创建所需的数据输入表单布局。 </p> </td>
 </tr>
 <tr class="odd">
 <td> <p>自定义</p> </td>
 <td> <p>将数据输入表单定义为HTML页面。 </p> </td>
 </tr>
 </tbody>
 </table>

> **注意**
>
>-如果自定义表单和部分表单都属于
>现在。
>
>-如果未定义自定义或部分表格，则基本表格为
>使用。
>
>-Android应用程序仅支持部分表格。

您可以为活动节目创建*节目通知*。这
通知通过内部 DHIS2 消息系统发送，
通过电子邮件或短信 (SMS)。您可以使用程序通知
例如，向跟踪的实体发送 10 天自动提醒
在预定的约会之前。您使用程序的跟踪实体
属性（例如名字）和程序参数（例如
注册日期）创建通知模板。在里面
**参数**字段，您将找到可用跟踪实体的列表
属性和程序参数。

### 工作流程：创建事件程序 { #workflow_event_program } 

 <!--DHIS2-SECTION-ID:workflow_event_program-->

1.  输入事件程序详细信息。

2.  分配数据元素。

3.  创建数据输入表单：**基本**，**部分**或**自定义**。

4.  将程序分配给组织单位。

5.  创建程序通知。

### 创建或编辑事件程序 { #create_event_program } 

 <!--DHIS2-SECTION-ID:create_event_program-->

#### 输入活动计划详细信息 { #enter-event-program-details } 

1.  打开**维护**应用程序并单击**程序** \> **程序**。

2.  单击添加按钮，然后在弹出菜单中选择**事件程序**。

3.  输入程序详细信息，然后单击下一步。

     <table>
     <colgroup>
     <col style="width: 50%" />
     <col style="width: 50%" />
     </colgroup>
     <thead>
     <tr class="header">
     <th> <p>字段</p> </th>
     <th> <p>说明</p> </th>
       </tr>
     </thead>
     <tbody>
       <tr class="odd">
     <td> <p> <strong>名称</strong> </p> </td>
     <td> <p>程序的名称。 </p> </td>
       </tr>
       <tr class="even">
     <td> <p> <strong>颜色</strong> </p> </td>
     <td> <p>在数据捕获应用程序中用于此程序的颜色。 </p> </td>
       </tr>
       <tr class="odd">
     <td> <p> <strong>图标</strong> </p> </td>
     <td> <p>在数据捕获应用程序中用于此程序的图标。 </p> </td>
       </tr>
       <tr class="even">
     <td> <p> <strong>短名称</strong> </p> </td>
     <td> <p>程序的简称。在分析应用程序中，短名称用作默认图表或表标题。 </p> </td>
       </tr>
       <tr class="odd">
     <td> <p> <strong>说明</strong> </p> </td>
     <td> <p>程序的详细说明。 </p> </td>
       </tr>
       <tr class="even">
     <td> <p> <strong>版本</strong> </p> </td>
     <td> <p>程序的版本。例如，当人们在Android实现中离线收集数据时，将使用此功能。当他们上网并同步其元数据时，他们应该获得该程序的最新版本。 </p> </td>
       </tr>
       <tr class="odd">
     <td> <p> <strong>类别组合</strong> </p> </td>
     <td> <p>您要使用的类别组合。默认设置为<strong>无</strong>。 </p> </td>
       </tr>
       <tr class="even">
    <td><p><strong>数据审批工作流程 </strong></p></td>
     <td> <p>您要使用的数据批准工作流。默认设置为<strong>无值</strong>。 </p> </td>
       </tr>
       <tr class="odd">
     <td> <p> <strong>已完成的事件到期日期</strong></p></td>
     <td> <p>定义您可以编辑已完成事件的天数。这意味着，当事件完成且指定的到期天数已过时，该事件将被锁定。 </p>
     <p>如果将&quot;完成事件设置为&quot;到10&quot;，则事件在完成日期后十天被锁定。在此日期之后，您将无法再编辑事件。 </p> </td>
       </tr>
       <tr class="even">
     <td> <p> <strong>有效期类型</strong> </p>
     <p><strong>有效期</strong></p></td>
     <td> <p>到期天数定义了上一个周期结束后可以编辑事件的天数。期限类型由到期期限类型定义。这意味着自上一个期间的结束日期起经过指定的到期天数后，该期间的事件将被锁定。 </p>
     <p>如果将到期类型设置为&quot;Monthly&quot;，将到期日设置为&quot;10&quot;，则月份为10月，那么您无法在11月10日之后向10月添加或编辑事件。 </p> </td>
       </tr>
       <tr class="odd">
     完成后的块输入表格<td> <strong> </strong> </td>
     完成该程序的事件后，选中复选框以阻止输入表单。<td> <p> </p>
     <p>这意味着在将状态重置为不完整之前，无法更改输入表单中的数据。 </p> </td>
       </tr>
       <tr class="even">
     <td> <strong>功能类型</strong> </td>
     <td> <p>设置程序是否要捕获地理特征类型。
- **没有**
  什么也没捕获。
- **多边形**
  捕获区域。对于单个事件程序，该区域将是代表正在捕获的事件的区域。对于跟踪程序，该区域将代表注册区域。
- **点**
  捕获点/坐标。对于单个事件程序，该点将代表正在捕获的事件。对于跟踪程序，该点将表示注册人数。
     </p> </td>
     </tr>
     <tr class="odd">
     <td> <strong>验证策略</strong> </td>
     <td>设置服务器和客户端验证要求。
>无论验证策略如何，总是执行数据类型验证。例如，从不存储包含文本的整数字段。
- **完成**
  此选项将在完成事件时强制修复必填字段和错误消息，但是可以将事件保存到服务器而无需通过这些验证要求。
  - 出于遗留原因，这始终是跟踪器程序的验证策略，在该策略中，事件中的每个数据值在获取数据时都会存储到服务器。
- **关于更新和插入**
  将事件保存到服务器时，无论完成状态如何，此选项都将强制执行必需的字段验证。使用此选项时，如果不通过验证，则无法存储任何事件。
     </td>
     </tr>
     <tr class="even">
     <td> <strong>预先生成的事件UID </strong> </td>
     <td>选中复选框以预先生成唯一的事件ID号。 </td>
     </tr>
     <tr class="odd">
     报告日期的描述<td> <strong>报告日期的描述</strong> </td>
     <td> <p>键入报告日期的描述。 </p>
     <p>此描述以案例输入表单显示。 </p> </td>
     </tr>
     </tbody>
     </table>

1.  点击下一步。

#### 分配数据元素 { #assign_data_elements } 

 <!--DHIS2-SECTION-ID:assign_data_elements-->

1.  点击**分配数据元素**。

2.  在可用项目列表中，双击要删除的数据元素。
    想要分配给事件程序。

3.  （可选）为每个数据元素添加其他设置：

    <table>
    <colgroup>
    <col style="width: 50%" />
    <col style="width: 50%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Setting</p></th>
    <th><p>Description</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p><strong>Compulsory</strong></p></td>
    <td><p>The value of this data element must be filled into data entry form before you can complete the event.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Allow provided elsewhere</strong></p></td>
    <td><p>Specify if the value of this data element comes from other facility, not in the facility where this data is entered.</p></td>
    </tr>
    <tr class="odd">
    <td><p><strong>Display in reports</strong></p></td>
    <td><p>Displays the value of this data element into the single event without registration data entry function.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Date in future</strong></p></td>
    <td><p>Will allow user to select a date in future for date data elements.</p></td>
    </tr>
    <tr class="odd">
    <td><p><strong>Mobile render type</strong></p></td>
    <td><p>Can be used to select different render types for mobile devices. Available options vary depending on the data element's value type. For example, for a numerical value you may select &quot;Default&quot;, &quot;Value&quot;, &quot;Slider&quot;, &quot;Linear scale&quot;, and &quot;Spinner&quot;.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Desktop render type</strong></p></td>
    <td><p>WARNING: NOT IMPLEMENTED YET.</p>
    <p>Can be used to select different render types for desktop (i.e. the web interface). Available options vary depending on the data element's value type. For example, for a numerical value you may select &quot;Default&quot;, &quot;Value&quot;, &quot;Slider&quot;, &quot;Linear scale&quot;, and &quot;Spinner&quot;.</p></td>
    </tr>
    </tbody>
    </table>

4.  点击下一步。

#### 创建数据输入表单 { #create_data_entry_forms } 

 <!--DHIS2-SECTION-ID:create_data_entry_forms-->

数据输入表单决定数据元素的显示方式
**事件捕获**应用程序中的用户。

1.  点击**创建数据输入表单**。

2.  点击**基本**，**部分**或**自定义**。

3.  要创建**基本**数据输入表单：拖放数据
    元素按您想要的顺序排列。

4.  要创建**部分**数据输入表单，请执行以下操作：

    1.  点击添加按钮，然后输入部分的名称，说明和
        桌面设备和移动设备的渲染类型。

    2.  单击该部分，使其以黑线突出显示。

    3.  通过单击数据旁边的加号来添加数据元素
        元素的名称。

    4.  重复上述步骤，直到获得所需的所有部分。

    5.  更改部分顺序：单击选项菜单，然后拖动
        部分到您想要的地方。

5.  要创建** Custom **数据条目，请执行以下操作：使用WYSIWYG编辑器
    创建一个完全定制的表单。如果您选择**来源**，则您
    可以直接将HTML代码粘贴到编辑区域中。你也可以
    插入图像，例如标志或徽标。

6.  点击下一步。

#### 访问 { #access } 

 <!--DHIS2-SECTION-ID:access-->

访问选项决定谁可以捕获程序数据或查看/编辑数据
程序的元数据。程序可以与组织单位共享，
另外，主程序和任何程序阶段的访问选项
可以通过**共享对话框**进行配置。访问选项是
在**访问权限**标签中可用。

分配组织单位：

1.  在组织树中，双击您的组织单位
    想要添加到程序中。

    您可以通过展开目录树来在树中找到组织单位
    分支（单击箭头符号），或通过搜索
    名称。所选组织单位显示为橙色。

更改角色和访问权限：

1.  向下滚动到**角色和访问权限**部分。

    第一行显示主程序的访问选项，每个
    下一行显示一个程序阶段的选项。程序
    带有警告图标（感叹号）的阶段包含访问选项
    偏离主程序，这意味着它们可以通过
    不同的用户组合。

2.  单击任一行，将显示**共享对话框**。

3.  相应地修改访问选项。请参阅有关
    共享对话框以获取详细信息。

4.  点击**应用**按钮。

5.  对每个程序/程序阶段重复该过程。您也可以复制
    从主程序到子程序的所有访问选项：

    1.  选择您想要具有类似访问权限的程序阶段
        切换复选框，将其作为主程序
        程序阶段的右侧。您也可以选择
        **选择全部**程序阶段，**取消选择全部**程序阶段
        或根据访问选项**选择类似**阶段，以
        主程序。默认情况下会切换相似的阶段。

    2.  点击**应用于选定阶段**

#### 创建程序通知 { #create_program_notifications } 

 <!--DHIS2-SECTION-ID:create_program_notifications-->

1.  创建您要发送的消息：

    1.  点击**发送什么？**。

    2.  输入一个**名称**。

    3.  创建**主题模板**：双击中的参数
        **模板变量**字段将其添加到您的主题。

        > **Note**
        >
        > The subject is not included in text messages.

    4.  创建**消息模板**：双击参数
        **模板变量**列表中的名称以将它们添加到您的
        信息。

        亲爱的A {w75KJ2mc4zz}：您现在已注册V {program \ _name}。

2.  定义*何时*要发送消息：

    1.  单击**什么时候发送？**。

    2.  选择一个**通知触发器**。

        <table>
        <colgroup>
        <col style="width: 50%" />
        <col style="width: 50%" />
        </colgroup>
        <thead>
        <tr class="header">
        <th><p>Notification trigger</p></th>
        <th><p>Description</p></th>
        </tr>
        </thead>
        <tbody>
        <tr class="odd">
        <td><p>Program stage completion</p></td>
        <td><p>The program stage notification is sent when the program stage is completed</p></td>
        </tr>
        <tr class="even">
        <td><p>Days scheduled (due date)</p></td>
        <td><p>The program stage notification is sent XX number of days before or after the due date</p>
        <p>You need to enter the number of days before or after the scheduled date that the notification will be send.</p></td>
        </tr>
        </tbody>
        </table>

3.  定义要将消息发送给的*谁*：

    1.  单击**将其发送给谁？**。

    2.  选择**通知**。

        <table>
        <colgroup>
        <col style="width: 50%" />
        <col style="width: 50%" />
        </colgroup>
        <thead>
        <tr class="header">
        <th><p>Notification recipient</p></th>
        <th><p>Description</p></th>
        </tr>
        </thead>
        <tbody>
        <tr class="odd">
        <td><p>Tracked entity instance</p></td>
        <td><p>Receives program notifications via e-mail or text message.</p>
        <p>To receive a program notification, the recipient must have an e-mail address or a phone number attribute.</p></td>
        </tr>
        <tr class="even">
        <td><p>Organisation unit contact</p></td>
        <td><p>Receives program notifications via e-mail or text message.</p>
        <p>To receive a program notification, the receiving organisation unit must have a registered contact person with e-mail address and phone number.</p></td>
        </tr>
        <tr class="odd">
        <td><p>Users at organisation unit</p></td>
        <td><p>All users registered to the selected organisation unit receive program notifications via the internal DHIS2 messaging system.</p></td>
        </tr>
        <tr class="even">
        <td><p>User group</p></td>
        <td><p>All members of the selected user group receive the program notifications via the internal DHIS2 messaging system</p></td>
        </tr>
        <tr class="odd">
        <td><p>Program</p></td>
        <td><p>TBA</p></td>
        </tr>
        </tbody>
        </table>

    3.  点击**保存**。

4.  重复上述步骤，创建所需的所有程序通知。

5.  点击**保存**。

> **注意**
>
> 您可以在 **Data 中配置何时发送程序通知
> 管理**应用程序 \> **日程安排** \> **程序通知
> 调度程序**。
>
> - 单击 **立即运行** 立即发送程序通知。
>
> - 选择一个时间并点击**开始**来安排节目
> 要在特定时间发送的通知
时间。

### 参考信息：程序通知参数 { #reference_information_event_program_notification_parameters } 

 <!--DHIS2-SECTION-ID:reference_information_event_program_notification_parameters-->

<table>
<caption>Program notification parameters to use in program notifications</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Notification type</p></th>
<th><p>Variable name</p></th>
<th><p>Variable code</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Program</p></td>
<td><p>Current date</p></td>
<td><pre><code>V{current_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Days since enrollment date</p></td>
<td><pre><code>V{days_since_enrollment_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Enrollment date</p></td>
<td><pre><code>V{enrollment_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Incident date</p></td>
<td><pre><code>V{incident_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Organisation unit name</p></td>
<td><pre><code>V{org_unit_name}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Program name</p></td>
<td><pre><code>V{program_name}</code></pre></td>
</tr>
<tr class="odd">
<td><p>Program stage</p></td>
<td><p>Current date</p></td>
<td><pre><code>V{current_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Days since due date</p></td>
<td><pre><code>V{days_since_due_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Days until due date</p></td>
<td><pre><code>V{days_until_due_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Due date</p></td>
<td><pre><code>V{due_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Organisation unit name</p></td>
<td><pre><code>V{org_unit_name}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Program name</p></td>
<td><pre><code>V{program_name}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Program stage name</p></td>
<td><pre><code>V{program_stage_name}</code></pre></td>
</tr>
</tbody>
</table>

## 在维护应用程序中配置跟踪器程序 { #configure_tracker_program_in_Maintenance_app } 

 <!--DHIS2-SECTION-ID:configure_tracker_program_in_Maintenance_app-->

### 关于跟踪器程序 { #about-tracker-programs } 
*具有*注册的单个或多个事件程序。程序必须指定一个被查明的实体。只有与程序被查到的身份相同的被查实体才能加入被查明的实体
程序。程序需要您在。**维护**应用程序中创建的各种类型的元数据。

### 工作流程：创建一个跟踪程序 { #workflow_tracker_program } 

 <!--DHIS2-SECTION-ID:workflow_tracker_program-->

1.  输入跟踪器程序的详细信息。

2.  输入注册详细信息。

3.  分配属性并创建**部分**或**自定义**注册表格。

4. 创建程序阶段。

5. 配置访问权限，并分配给组织单位。

6. 创建程序和程序阶段通知。

### 创建或编辑Tracker程序 { #create-or-edit-a-tracker-program } 

1. 打开**维护**应用程序并单击**程序** \> **程序**。

2. 单击添加按钮并在弹出菜单中选择**随访项目**。

3. 输入程序详细信息：
<table>
    <colgroup>
        <col style="width: 50%" />
        <col style="width: 50%" />
    </colgroup>
    <thead>
        <tr class="header">
            <th><p>Field</p></th>
            <th><p>Description</p></th>
        </tr>
    </thead>
    <tbody>
        <tr class="odd">
            <td>
                <p><strong>Name</strong></p>
            </td>
            <td><p>The name of the program.</p></td>
        </tr>
        <tr class="even">
            <td>
                <p><strong>Color</strong></p>
            </td>
            <td><p>Color used for this program in Tracker capture.</p></td>
        </tr>
        <tr class="odd">
            <td>
                <p><strong>Icon</strong></p>
            </td>
            <td><p>Icon used for this program in Tracker capture</p></td>
        </tr>
        <tr class="even">
            <td>
                <p><strong>Short name</strong></p>
            </td>
            <td>
                <p>
                    A short name of the program. The short name is used as the
                    default chart or table title in the analytics apps.
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td>
                <p><strong>Description</strong></p>
            </td>
            <td><p>A detailed description of the program.</p></td>
        </tr>
        <tr class="even">
            <td>
                <p><strong>Version</strong></p>
            </td>
            <td>
                <p>
                    The version of the program. This is used for example when
                    people collect data offline in an Android implementation.
                    When they go online and synchronize their metadata, they
                    should get the latest version of the program.
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td>
                <p><strong>Tracked Entity Type</strong></p>
            </td>
            <td>
                <p>
                    The tracked entity type you want to use. A program can only
                    have one type of tracked entity.
                </p>
            </td>
        </tr>
        <tr class="even">
            <td>
                <p><strong>Category combination</strong></p>
            </td>
            <td>
                <p>
                    The category combination you want to use. The default
                    setting is <strong>None</strong>.
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td>
                <p><strong>Display front page list</strong></p>
            </td>
            <td>
                <p>
                    Select checkbox to display a list of Tracked Entity
                    Instances in Tracker Capture. If not selected, the Search
                    will be displayed.
                </p>
            </td>
        </tr>
        <tr class="even">
            <td>
                <p><strong>First stage appears on registration page</strong></p>
            </td>
            <td>
                <p>
                    Select checkbox to display the first program stage together
                    with the registration (enrollment).
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td>
                <p><strong>Access level</strong></p>
            </td>
            <td><p>Choose the access level of the program.</p></td>
        </tr>
        <tr class="even">
            <td>
                <p><strong>Completed events expiry days</strong></p>
            </td>
            <td>
                <p>
                    Defines the number of days for which you can edit a
                    completed event. This means that when an event is completed
                    and the specified number of expiry days has passed, the
                    event is locked.
                </p>
                <p>
                    If you set &quot;Completed events expiry days&quot; to
                    10&quot;, an event is locked ten days after the completion
                    date. After this date you can no longer edit the event.
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td>
                <p><strong>Expiry period type</strong></p>
                <p><strong>Expiry days</strong></p>
            </td>
            <td>
                <p>
                    The expiry days defines for how many days after the end of
                    the previous period, an event can be edited. The period type
                    is defined by the expiry period type. This means that when
                    the specified number of expiry days has passed since the end
                    date of the previous period, the events from that period are
                    locked.
                </p>
                <p>
                    If you set the expiry type to &quot;Monthly&quot; and the
                    expiry days to &quot;10&quot; and the month is October, then
                    you can't add or edit an event to October after the 10th of
                    November.
                </p>
            </td>
        </tr>
        <tr class="even">
            <td>
                <strong>Minimum number of attributes required to search</strong>
            </td>
            <td>
                <p>
                    Specify the number of tracked entity attributes that needs
                    to be filled in to search for Tracked Entities in the
                    Program.
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td>
                <strong>Maximum number of tracked entity instances to return in
                    search</strong>
            </td>
            <td>
                <p>
                    Specify the maximum number of tracked entity instances that
                    should be returned in a search. Enter 0 for no limit.
                </p>
            </td>
        </tr>
    </tbody>
</table>

4. 输入注册详细信息：
<table>
    <colgroup>
        <col style="width: 50%" />
        <col style="width: 50%" />
    </colgroup>
    <thead>
        <tr class="header">
            <th><p>Field</p></th>
            <th><p>Description</p></th>
        </tr>
    </thead>
    <tbody>
        <tr class="odd">
            <td><strong>Allow future enrollment dates</strong></td>
            <td>
                <p>
                    Select checkbox if you want to allow tracked entity
                    instances to be enrolled in the program on a future date.
                </p>
            </td>
        </tr>
        <tr class="even">
            <td><strong>Allow future incident dates</strong></td>
            <td>
                <p>
                    Select checkbox if you want to allow the incident date in
                    the program to be on a future date.
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td>
                <strong>Only enroll once (per tracked entity instance lifetime)</strong>
            </td>
            <td>
                <p>
                    Select checkbox if you want a tracked entity to be able to
                    enroll only once in a program. This setting is useful for
                    example in child vaccination or post-mortem examination
                    programs where it wouldn’t make sense to enroll a tracked
                    entity more than once.
                </p>
            </td>
        </tr>
        <tr class="even">
            <td><strong>Show incident date</strong></td>
            <td>
                <p>
                    This setting allows you to show or hide the incident date
                    field when a tracked entity enroll in the program.
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td><strong>Description of incident date</strong></td>
            <td>
                <p>Type a description of the incident date</p>
                <p>For example:</p>
                <p>In an immunization program for child under 1 year old, the
                    incident date is the child's birthday. </p>
                <p>In a maternal program, the incident date is the date of last
                    menstrual period. </p>
            </td>
        </tr>
        <tr class="even">
            <td><strong>Type a description of the enrollment date</strong></td>
            <td>
                <p>
                    The date when the tracked entity is enrolled into the
                    program
                </p>
            </td>
        </tr>
        <tr class="odd">
            <td><strong>Ignore overdue events</strong></td>
            <td>
                <p>
                    When a tracked entity enrolls into the program, the events
                    corresponding to the program stages are created. If you
                    select this checkbox, the system will not generate overdue
                    events.
                </p>
            </td>
        </tr>
        <tr class="even">
            <td><strong>Feature type</strong></td>
            <td>
                <p>
                    Sets wether the program is going to capture a geographical
                    feature type or not.
                </p>
                <ul>
                <li><strong>None:</strong>Nothing is captured.</li>
                <li><strong>Polygon:</strong> An area is captured. For single
                event programs the area will be the area representing the
                event being captured. For tracker programs, the area will
                represent the area of the enrollment. </li>
                <li><strong>Point:</strong>: A point/coordinate is captured. For
                single event programs the point will be representing the
                event being captured. For tracker programs, the point will
                represent the enrollment. </li>
                </ul>
            </td>
        </tr>
        <tr class="odd">
            <td><strong>Related program</strong></td>
            <td>
                <p>
                    Choose a Tracker program which is related to the program you
                    are creating, for example an ANC and a Child program.
                </p>
            </td>
        </tr>
    </tbody>
</table>


#### 分配跟踪的实体属性。 { #assign_tracked_entity_attributes } 

 <!--DHIS2-SECTION-ID:assign_tracked_entity_attributes-->

  1. 在**可用程序跟踪实体属性**列表中，双击
        您要分配给程序的属性。

  2. （可选）对于每个分配的属性，添加其他设置：
<table>
        <colgroup>
            <col style="width: 50%" />
            <col style="width: 50%" />
        </colgroup>
        <thead>
            <tr class="header">
                <th><p>Setting</p></th>
                <th><p>Description</p></th>
            </tr>
        </thead>
        <tbody>
            <tr class="odd">
                <td>
                    <p><strong>Display in list</strong></p>
                </td>
                <td>
                    <p>
                        Displays the value of this attribute in the list of tracked
                        entity instances in Tracker capture.
                    </p>
                </td>
            </tr>
            <tr class="even">
                <td>
                    <p><strong>Mandatory</strong></p>
                </td>
                <td>
                    <p>
                        The value of this attribute must be filled into data entry
                        form before you can complete the event.
                    </p>
                </td>
            </tr>
            <tr class="odd">
                <td>
                    <p><strong>Date in future</strong></p>
                </td>
                <td>
                    <p>
                        Will allow user to select a date in future for date
                        attributes.
                    </p>
                </td>
            </tr>
            <tr class="even">
                <td>
                    <p><strong>Mobile render type</strong></p>
                </td>
                <td>
                    <p>
                        Can be used to select different render types for mobile
                        devices. Available options vary depending on the attribute's
                        value type. For example, for a numerical value you may
                        select &quot;Default&quot;, &quot;Value&quot;,
                        &quot;Slider&quot;, &quot;Linear scale&quot;, and
                        &quot;Spinner&quot;.
                    </p>
                </td>
            </tr>
            <tr class="odd">
                <td>
                    <p><strong>Desktop render type</strong></p>
                </td>
                <td>
                    <p>WARNING: NOT IMPLEMENTED YET.</p>
                    <p>
                        Can be used to select different render types for desktop
                        (i.e. the web interface). Available options vary depending
                        on the attribute's value type. For example, for a numerical
                        value you may select &quot;Default&quot;, &quot;Value&quot;,
                        &quot;Slider&quot;, &quot;Linear scale&quot;, and
                        &quot;Spinner&quot;.
                    </p>
                </td>
            </tr>
        </tbody>
</table>

3. 创建注册表

   注册表单定义了如何在使用中的应用（例如Android和Tracker Capture）中向用户显示属性。

    1. 点击**创建注册表格**。

    2. 点击**部分**或**自定义**。

    3. 创建**部分**表格：

        1. 点击添加按钮，然后为台式机和移动设备输入版块的名称，说明和渲染类型。
        2. 单击该部分，使其以黑色边框突出显示。
        3. 通过单击要添加的数据元素名称旁边的加号来添加数据元素。
        4. 重复上述步骤，直到获得所需的所有部分。
            要更改节的顺序：单击选项菜单，然后将节拖动到所需的位置。

    4. 创建** Custom **注册表：使用WYSIWYG编辑器创建一个完全定制的表单。如果选择“源”，则可以将HTML代码直接粘贴到编辑区域中。您还可以插入图像，例如标志或徽标。

    5. 单击添加阶段。


#### 创建程序阶段 { #create_program_stages } 

 <!--DHIS2-SECTION-ID:create_program_stages-->

一个程序由程序阶段组成。程序阶段定义哪个
每个阶段都应采取行动。

> **注意**
>
>在保存程序之前，不会保存对程序阶段的更改。

1. 单击加号创建一个程序阶段。
2. 输入程序阶段详细信息：
    1. 输入一个**名称**。
    2.  （可选）选择将要使用的**颜色**和**图标**
由数据捕获应用确定此程序阶段。
    3. 输入**说明**。
    4. 在 **预定开始天数** 字段中，输入最短天数
等待启动程序阶段的天数。
3. 输入可重复的程序阶段详细信息。
    1. Specify if the program stage is **Repeatable** or not.
    2. Select a **Period type**.
    3. 清除**完成后显示生成事件框**，如果您
    不想显示*创建新事件框*以创建新事件
    单击事件的*完成*后可重复的阶段
    以数据输入形式显示的阶段。该字段由
    默认。
    5. 输入**标准间隔天数**。重复可重复程序阶段的天数。
    6. （可选）选择 **默认的下一个计划日期**。这将显示**日期**类型的已分配数据元素的列表。如果选择了某个元素，Tracker 客户端将使用它作为默认开始日期。程序规则可以使用数据元素来动态安排事件之间的间隔。
4. 输入表格详细信息

    <table>
        <colgroup>
            <col style="width: 50%" />
            <col style="width: 50%" />
        </colgroup>
        <thead>
            <tr class="header">
                <th><p>Option</p></th>
                <th><p>Action</p></th>
            </tr>
        </thead>
        <tbody>
            <tr class="odd">
                <td>
                    <p><strong>Auto-generate event</strong></p>
                </td>
                <td>
                    <p>
                        Clear check box to prevent creating an event of this program
                        stage automatically when a entity is enrolled in the program.
                    </p>
                </td>
            </tr>
            <tr class="even">
                <td>
                    <p><strong>Open data entry form after enrollment</strong></p>
                </td>
                <td>
                    <p>
                        Select check box to automatically open the event of this
                        stage as soon as the entity has enrolled into the program.
                    </p>
                </td>
            </tr>
            <tr class="odd">
                <td>
                    <p><strong>Report date to use</strong></p>
                </td>
                <td>
                    If you have selected the
                    <strong>Open data entry form after enrollment</strong> check
                    box, also select a <strong>Report date to use</strong>:
                    <strong>Date of incident</strong> or
                    <strong>Date of enrollment</strong>.
                    <p>
                        This is the date used as report date for an event that has
                        been opened automatically.
                    </p>
                    <p>
                        If the <strong>Report date to use</strong> is selected as
                        one of those two ('incident date'/'enrollment date'), in
                        Dashboard, the 'Report date' of the event will be set as one
                        of those two.
                    </p>
                </td>
            </tr>
            <tr class="even">
                <td>
                    <p><strong>User assignment of events</strong></p>
                </td>
                <td>
                    <p>
                        Select check box to enable user assignment of the program
                        stage.
                    </p>
                    <p>
                        This means that in Tracker capture there will be a list of
                        users to which the event can be assigned.
                    </p>
                </td>
            </tr>
            <tr class="odd">
                <td>
                    <p><strong>Block entry form after completed</strong></p>
                </td>
                <td>
                    <p>
                        Select check box to block the entry form after completion of
                        the event of this stage.
                    </p>
                    <p>
                        This means that the data in the entry form can't be changed
                        until you reset the status to incomplete.
                    </p>
                </td>
            </tr>
            <tr class="even">
                <td>
                    <p>
                        <strong>Ask user to complete program when stage is
                            completed</strong>
                    </p>
                </td>
                <td>
                    <p>
                        Select check box to trigger a pop-up which asks the user if
                        he/she wants to create the event of next stage.
                    </p>
                </td>
            </tr>
            <tr class="odd">
                <td>
                    <p>
                        <strong>Ask user to create new event when stage is
                            complete</strong>
                    </p>
                </td>
                <td>
                    <p>
                        Select check box to trigger a pop-up which asks the users if
                        he/she wants to create a new event of this stage when an
                        event of this stage is completed.
                    </p>
                    <p>
                        This property is active only if you have selected
                        <strong>Repeatable</strong>.
                    </p>
                </td>
            </tr>
            <tr class="even">
                <td>
                    <p><strong>Generate events by enrollment date</strong></p>
                </td>
                <td>
                    <p>
                        Check on it for auto-generating due dates of events from
                        program-stages of this program based on the enrollment date.
                        If it is not checked, the due dates are generated based on
                        incident date.
                    </p>
                </td>
            </tr>
            <tr class="odd">
                <td>
                    <p><strong>Hide due dates</strong></p>
                </td>
                <td><p>Select checkbox to hide due dates for events.</p></td>
            </tr>
            <tr class="even">
                <td><strong>Feature type</strong></td>
                <td>
                    <p>
                        Sets wether the program is going to capture a geographical
                        feature type or not.
                    </p>
                    <ul>
                    <li><strong>None:</strong>Nothing is captured.</li>
                    <li>
                        <strong>Polygon: </strong> An area is captured. For single
                        event programs the area will be the area representing the
                        event being captured. For tracker programs, the area will
                        represent the area of the enrollment.
                    </li>
                    <li>
                        <strong>Point:</strong>: A point/coordinate is captured. For
                        single event programs the point will be representing the
                        event being captured. For tracker programs, the point will
                        represent the enrollment.
                    </li>
                    </ul>
                </td>
            </tr>
            <tr class="odd">
                <td>
                    <p><strong>Pre-generate event UID</strong></p>
                </td>
                <td>
                    <p>Select check box to pre-generate unique event id numbers.</p>
                </td>
            </tr>
            <tr class="even">
                <td>
                    <p><strong>Description of report date</strong></p>
                </td>
                <td>
                    <p>Type a description of the report date.</p>
                    <p>This description is displayed in the data entry form.</p>
                </td>
            </tr>
            <tr class="odd">
                <td>
                    <p><strong>Description of due date</strong></p>
                </td>
                <td><p>Type a description of the due date.</p></td>
            </tr>
        </tbody>
    </table>

5.  将数据元素分配给程序阶段：

    1.  在 **可用数据元素** 列表中，双击
        您要分配给程序阶段的数据元素。

    2.  对于每个分配的数据元素，查看属性。您可以
        选择：

 <table>
     <colgroup>
         <col style="width: 50%" />
         <col style="width: 50%" />
     </colgroup>
     <thead>
         <tr class="header">
             <th> <p>选项</p> </th>
             <th> <p>操作</p> </th>
         </tr>
     </thead>
     <tbody>
         <tr class="odd">
             <td>
                 <p> <strong>必选</strong> </p>
             </td>
             <td>
                 <p>
                    此数据元素的值必须填写到数据中
                    完成活动前的报名表。
                 </p>
             </td>
         </tr>
         <tr class="even">
             <td>
                 <p> <strong>允许在其他地方提供</strong> </p>
             </td>
             <td>
                 <p>
                    指定此数据元素的值是否来自其他
                    设备，而不是在输入此数据的设备中。
                 </p>
             </td>
         </tr>
         <tr class="odd">
             <td>
                 <p> <strong>在报告中显示</strong> </p>
             </td>
             <td>
                 <p>
                    在单个事件中显示此数据元素的值
                    没有注册数据输入功能。
                 </p>
             </td>
         </tr>
         <tr class="even">
             <td>
                 <p> <strong>将来的日期</strong> </p>
             </td>
             <td>
                 <p>允许为日期数据元素选择将来的日期。 </p>
             </td>
         </tr>
         <tr class="odd">
             <td>
                 <p> <strong>跳过同步</strong> </p>
             </td>
             <td>
                 <p>
                    运行数据时允许跳过数据元素
                    同步作业。
                 </p>
             </td>
         </tr>
         <tr class="even">
             <td>
                 <p> <strong>移动渲染类型</strong> </p>
             </td>
             <td>
                 <p>
                    可以用来为手机选择不同的渲染类型
                    设备。可用选项取决于属性的
                    值类型。例如，对于数字值，您可以
                    选择&quot;Default&quot;，&quot;Value&quot;，
                    &quot;Slider&quot;，&quot;线性比例&quot;和
                    &quot;Spinner&quot;。
                 </p>
             </td>
         </tr>
         <tr class="odd">
             <td>
                 <p> <strong>桌面渲染类型</strong> </p>
             </td>
             <td>
                 <p>警告：尚未实施。 </p>
                 <p>
                    可用于为桌面选择不同的渲染类型
                    （即网络界面）。可用选项因情况而异
                    在属性的值类型上。例如，对于数字
                    您可以选择&quot;Default&quot;，&quot;Value&quot;，
                    &quot;Slider&quot;，&quot;线性比例&quot;和
                    &quot;Spinner&quot;。
                 </p>
             </td>
         </tr>
     </tbody>
 </table>

6. 创建程序阶段的数据输入表单

    数据输入表单决定如何将数据元素显示为
    **Tracker Capture** 应用程序中的用户。

   1.  点击**创建数据输入表单**。

   2.  点击**基本**，**部分**或**自定义**。

   3.  要创建**基本**数据输入表单：拖放数据
       元素按您想要的顺序排列。

   4.  要创建**部分**数据输入表单，请执行以下操作：

       1.  点击添加按钮，然后输入部分的名称，说明和
           桌面设备和移动设备的渲染类型。

       2.  单击该部分，使其以黑色边框突出显示。

       3.  通过单击数据旁边的加号来添加数据元素
           元素的名称。

       4.  重复上述步骤，直到获得所需的所有部分。

       5.  更改部分顺序：单击选项菜单，然后拖动
           部分到您想要的地方。

   5.  要创建** Custom **数据条目，请执行以下操作：使用WYSIWYG编辑器
           创建一个完全定制的表单。如果您选择**来源**，则您
           可以直接将HTML代码粘贴到编辑区域中。你也可以
           插入图像，例如标志或徽标。

   6.  单击添加阶段。


#### 访问 { #tracker_program_access } 

 <!--DHIS2-SECTION-ID:tracker_program_access-->

访问选项决定谁可以捕获程序数据或查看/编辑数据
程序的元数据。程序可以与组织单位共享，
另外，主程序和任何程序阶段的访问选项
可以通过**共享对话框**进行配置。访问选项是
在**访问权限**标签中可用。

分配组织单位：

1.  在组织树中，双击您的组织单位
    想要添加到程序中。

    您可以通过展开目录树来在树中找到组织单位
    分支（单击箭头符号），或通过搜索
    名称。所选组织单位显示为橙色。

更改角色和访问权限：

1.  向下滚动到**角色和访问权限**部分。

    第一行显示主程序的访问选项，每个
    下一行显示一个程序阶段的选项。程序
    带有警告图标（感叹号）的阶段包含访问选项
    偏离主程序，这意味着它们可以通过
    不同的用户组合。

2.  单击任一行，将显示**共享对话框**。

3.  相应地修改访问选项。请参阅有关
    共享对话框以获取详细信息。

4.  点击**应用**按钮。

5.  对每个程序/程序阶段重复该过程。您也可以复制
    从主程序到子程序的所有访问选项：

    1.  选择您想要具有类似访问权限的程序阶段
        切换复选框，将其作为主程序
        程序阶段的右侧。您也可以选择
        **选择全部**程序阶段，**取消选择全部**程序阶段
        或根据访问选项**选择类似**阶段，以
        主程序。默认情况下会切换相似的阶段。

    2.  点击**应用于选定阶段**

#### 创建程序通知 { #create_tracker_program_notifications } 

 <!--DHIS2-SECTION-ID:create_tracker_program_notifications-->

您可以通过注册和创建程序的程序通知
他们的计划阶段。通知通过内部发送
DHIS2邮件系统，通过电子邮件或文本消息（SMS）。您可以
使用程序通知，例如，将自动提醒发送给
预定约会前10天跟踪的实体。您使用
程序的跟踪实体属性（例如名字）和程序
参数（例如注册日期）以创建通知
模板。


1.  打开 **维护** 应用程序并单击 **程序，然后单击
    通知**。

    所选程序的现有程序通知列表
    打开。如果该程序没有任何程序通知，则
    列表为空。

2.  Click on add button and select **Program notification**.

    ![](resources/images/program/what_to_send.png)
![](resources/images/program/where_to_send.png)
    ![](resources/images/program/who_to_send.png)   

3.  输入一个**名称**。

4.  创建**主题模板**。

    双击**参数**字段中的参数进行添加
    对你的主题。

    > **Note**
    >
    > The subject is not included in text messages.

5.  创建**消息模板**。

    双击**参数**字段中的参数名称进行添加
    他们到您的消息。

    亲爱的A {w75KJ2mc4zz}：您现在已注册V {program \ _name}。

6.  在 **何时发送** 字段中，选择应触发的内容
    通知。

    <table>
    <colgroup>
    <col style="width: 33%" />
    <col style="width: 33%" />
    <col style="width: 33%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Trigger</p></th>
    <th><p>Description</p></th>
    <th><p>Note</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p>Program enrollment</p></td>
    <td><p>The program notification is sent when the TEI enrols in the program.</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Program completion</p></td>
    <td><p>The program notification is sent when the program of TEI is completed</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="odd">
    <td><p>Days scheduled (incident date)</p></td>
    <td><p>The program notification is sent XX number of days before or after the incident date</p></td>
    <td><p>You need to enter the number of days before or after the scheduled date that the notification will be send.</p></td>
    </tr>
    <tr class="even">
    <td><p>Days scheduled (enrollment date)</p></td>
    <td><p>The program notification is sent XX number of days before or after the enrollment date</p></td>
    <td><p>You need to enter the number of days before or after the scheduled date that the notification will be send.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Program Rule</p></td>
    <td><p>Notification will be triggered as a result of program rule exeuction.</p></td>
    <td><p>Program rule with ProgramRuleActionType.SENDMESSAGE need to be in place to make this trigger successful.</p></td>
    </tr>
    </tbody>
    </table>


7.  在 **谁发送** 字段中，选择谁应该接收
    程序通知。

    <table>
    <colgroup>
    <col style="width: 33%" />
    <col style="width: 33%" />
    <col style="width: 33%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Recipient type</p></th>
    <th><p>Description</p></th>
    <th><p>Note</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p>Tracked entity instance</p></td>
    <td><p>Receives program notifications via e-mail or text message.</p></td>
    <td><p>To receive a program notification, the recipient must have an e-mail address or a phone number attribute.</p></td>
    </tr>
    <tr class="even">
    <td><p>Organisation unit contact</p></td>
    <td><p>Receives program notifications via e-mail or text message.</p></td>
    <td><p>To receive a program notification, the receiving organisation unit must have a registered contact person with e-mail address and phone number.</p></td>
    </tr>
    <tr class="odd">
    <td>Users at organisation unit:</td>
    <td><p>All users registered to the selected organisation unit receive program notifications via the internal DHIS2 messaging system.</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>User group</p></td>
    <td><p>All members of the selected user group receive the program notifications via the internal DHIS2 messaging system</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="odd">
    <td><p>Limit To Hierarchy</p></td>
    <td><p>Send notification only to those users who belong to any of the organisation unit in the hierarchy.</p></td>
    <td><p>This option is only available when User Group is selected as recipient.</p></td>
    </tr>
    <tr class="even">
    <td><p>Parent OrgUnit Only</p></td>
    <td><p>Send notification only to those users who belong to parent organisation unit.</p></td>
    <td><p>This option is only available when User Group is selected as recipient.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Program Attribute</p></td>
    <td><p>TrackedEntityAttribute can also be selected as recipient.</p></td>
    <td><p>This parameter will only be effective if TrackedEntityAttribute value type is PHONE_NUMBER/EMAIL.</p></td>
    </tr>
    </tbody>
    </table>

8.  点击**保存**。


### 创建程序阶段通知 { #create-a-program-stage-notification } 

![](resources/images/program/what_to_send-psnt.png)

![](resources/images/program/what_to_send-psnt.png)

![](resources/images/program/what_to_send-psnt.png)

1.  打开 **维护** 应用程序并单击 **程序，然后单击
    通知**。

    所选项目的现有程序阶段通知的列表
    程序阶段打开。如果程序阶段没有任何程序
    阶段通知，列表为空。

2.  点击添加按钮，然后选择**程序阶段通知**。

3.  点击**添加新**。

4.  输入一个**名称**。

5.  创建**主题模板**。

    双击**参数**字段中的参数名称进行添加
    他们对你的主题。

    > **Note**
    >
    > The subject is not included in text messages.

6.  创建**消息模板**。

    双击**参数**字段中的参数名称进行添加
    他们到您的消息。

    亲爱的A {w75KJ2mc4zz}，欢迎前来预约
    V {due \ _date}。

7.  在 **何时发送** 字段中，选择应触发的内容
    通知。

    <table>
    <colgroup>
    <col style="width: 33%" />
    <col style="width: 33%" />
    <col style="width: 33%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Trigger</p></th>
    <th><p>Description</p></th>
    <th><p>Note</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p>Program stage completion</p></td>
    <td><p>The program stage notification is sent when the program stage is completed</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Days scheduled (due date)</p></td>
    <td><p>The program stage notification is sent XX number of days before or after the due date</p></td>
    <td><p>You need to enter the number of days before or after the scheduled date that the notification will be send.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Program Rule</p></td>
    <td><p>Notification will be triggered as a result of program rule execution.</p></td>
    <td><p>Program rule with ProgramRuleActionType.SENDMESSAGE need to be in place to make this trigger successful.</p></td>
    </tr>
    </tbody>
    </table>

8.  在 **收件人** 字段中，选择谁应该接收该计划
    阶段通知。您可以选择：

    <table>
    <colgroup>
    <col style="width: 33%" />
    <col style="width: 33%" />
    <col style="width: 33%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Recipient type</p></th>
    <th><p>Description</p></th>
    <th><p>Note</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p>Tracked entity instance</p></td>
    <td><p>Receives program notifications via e-mail or text message.</p></td>
    <td><p>To receive a program stage notification, the recipient must have an e-mail address or a phone number attribute.</p></td>
    </tr>
    <tr class="even">
    <td><p>Organisation unit contact</p></td>
    <td><p>Receives program notifications via e-mail or text message.</p></td>
    <td><p>To receive a program stage notification, the receiving organisation unit must have a registered contact person with e-mail address and phone number.</p>
    <p>The system selects the same organisation unit as where the event took place.</p></td>
    </tr>
    <tr class="odd">
    <td>Users at organisation unit:</td>
    <td><p>All users registered to the selected organisation unit receive program notifications via the internal DHIS2 messaging system.</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>User group</p></td>
    <td><p>All members of the selected user group receive the program notifications via the internal DHIS2 messaging system</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="odd">
    <td><p>Limit To Hierarchy</p></td>
    <td><p>Send notification only to those users who belong to any of the organisation unit in the hierarchy.</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Parent OrgUnit Only</p></td>
    <td><p>Send notification only to those users who belong to parent organisation unit.</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="odd">
    <td><p>Data Element</p></td>
    <td><p>Data Element associated with ProgramStage can be selected as recipient.</p></td>
    <td><p>Data Element will only be effective if DataElement has value type PHONE_NUMBER/EMAIL.</p></td>
    </tr>
    </tbody>
    </table>



9.  点击**保存**。


### 参考信息：程序通知参数 { #reference_information_event_program_notification_parameters } 

 <!--DHIS2-SECTION-ID:reference_information_event_program_notification_parameters-->

<table>
<caption>Program notification parameters to use in program notifications</caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Notification type</p></th>
<th><p>Variable name</p></th>
<th><p>Variable code</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Program</p></td>
<td><p>Current date</p></td>
<td><pre><code>V{current_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Days since enrollment date</p></td>
<td><pre><code>V{days_since_enrollment_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Enrollment date</p></td>
<td><pre><code>V{enrollment_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Incident date</p></td>
<td><pre><code>V{incident_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Organisation unit name</p></td>
<td><pre><code>V{org_unit_name}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Program name</p></td>
<td><pre><code>V{program_name}</code></pre></td>
</tr>
<tr class="odd">
<td><p>Program stage</p></td>
<td><p>Current date</p></td>
<td><pre><code>V{current_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Days since due date</p></td>
<td><pre><code>V{days_since_due_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Days until due date</p></td>
<td><pre><code>V{days_until_due_date}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Due date</p></td>
<td><pre><code>V{due_date}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Organisation unit name</p></td>
<td><pre><code>V{org_unit_name}</code></pre></td>
</tr>
<tr class="even">
<td></td>
<td><p>Program name</p></td>
<td><pre><code>V{program_name}</code></pre></td>
</tr>
<tr class="odd">
<td></td>
<td><p>Program stage name</p></td>
<td><pre><code>V{program_stage_name}</code></pre></td>
</tr>
</tbody>
</table>

## 配置程序指示器 { #configure_program_indicator } 

 <!--DHIS2-SECTION-ID:configure_program_indicator-->

### 关于计划指标 { #about_program_indicators } 

 <!--DHIS2-SECTION-ID:about_program_indicators-->

程序指示符是基于数据元素和属性的表达式
跟踪实体的数量，可用于基于
式。计划指标包括汇总类型，分析
类型，表达式和过滤器。

根据分配的汇总类型评估计划指标，
表达式和过滤器。评估顺序为：

1.  * filter *将过滤成为
    评估/汇总例程。

2.  * expression *将针对每个事件进行评估。

3.  所有评估的表达式值将根据以下条件进行*统计*
    程序指示器的聚合类型。

<table>
<caption>Program indicator components</caption>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Program rule component</p></th>
<th><p>Description</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Aggregation type</p></td>
<td><p>The aggregation type determines how the program indicator will be aggregated. The following aggregation types are available:</p>
<ul>
<li><p>Average</p></li>
<li><p>Average (number)</p></li>
<li><p>Average (number, disaggregation)</p></li>
<li><p>Average (sum in organisation unit hierarchy)</p></li>
<li><p>Average (sum of numbers)</p></li>
<li><p>Average (sum of numbers, disaggregation)</p></li>
<li><p>Average (Yes/No)</p></li>
<li><p>Count</p></li>
<li><p>Custom</p>
<p>The &quot;custom&quot; aggregation type allows you to specify the aggregation type in-line in the expression. All other aggregation  types are applied to the entire expression.</p>
<p>Using the &quot;custom&quot; aggregation type might lead to an exception of the order of evaluation described above where individual parts of the expression can be evaluated and aggregated, as opposed to the entire expression being evaluated prior to aggregation.</p></li>
<li><p>Default</p></li>
<li><p>Max</p></li>
<li><p>Min</p></li>
<li><p>None</p></li>
<li><p>Standard deviation</p></li>
<li><p>Sum</p></li>
<li><p>Variance</p></li>
</ul></td>
</tr>
<tr class="even">
<td><p>Analytics type</p></td>
<td><p>The available analytics types are <em>event</em> and <em>enrollment</em>.</p>
<p>The analytics type defines whether the program indicator is calculated based on events or program enrollments. This has an impact on what type of calculations can be made.</p>
<ul>
<li><p>Events implies a data source where each event exists as an independent row. This is suitable for performing aggregations such as counts and sums.</p></li>
<li><p>Enrollments implies a data source where all events for a single enrollment is combined on the same row. This allows for calculations which can compare event data from various program stages within a program enrollment.</p></li>
</ul></td>
</tr>
<tr class="odd">
<td><p>Analytics period boundaries</p></td>
<td><p>Defines the boundaries for the program indicator calculation. The boundaries determine which events or enrollments gets included in aggregations, always relative to the aggregate reporting period start and end. When creating the program indicator, the default boundaries will get preselected based on analytics type.</p>
<ul>
<li><p>For analytics type <em>event</em>, the default boundaries will be configured to encapsulate any events with an event date after the reporting period starts and before the reporting period ends.</p></li>
<li><p>For analytics type <em>enrollment</em>, the default boundaries will encapsulate all enrollments with an enrollment date after the reporting date starts and before the reporting period ends. In addition, the default enrollment program indicator evaluates the newest event for all program stages regardless of date.</p></li>
</ul>
<p>It is possible to change the upper and lower boundaries to include a longer or shorter period relative to the reporting period, or delete one of the boundaries - in effect returning all data before or after a certain period. It is also possible to add more constraints, for example to make an enrollment program indicator only include event data up to a given point in time.</p>
<ul>
<li><p>Boundary target: Can be <em>incident date</em>, <em>event date</em>, <em>enrollment date</em> or <em>custom</em>. Designates what is being constrained by the boundary.</p>
<p><em>custom</em> is used make boundary that target either a date data element, tracked entity attribute or the presence of an event in a program stage. This is done with a custom expression on the form:</p>
<ul>
<li><p>Data element of type date: #{programStageUid.dataElementUid}.</p>
<pre><code>#{A03MvHHogjR.a3kGcGDCuk6}</code></pre></li>
<li><p>Tracked entity attribute of type date: #{attributeUid}.</p>
<pre><code>A{GPkGfbmArby}</code></pre></li>
<li><p>Presence of one event in a specific program stage: PS_EVENTDATE:programStageUid.</p>
<pre><code>PS_EVENTDATE:A03MvHHogjR</code></pre>
<blockquote>
<p><strong>Note</strong></p>
This boundary target is only applicable to
Analytics type Enrollment
</blockquote></li>
</ul></li>
<li><p>Analytics period boundary type: Defines whether the boundary is an end boundary - starting with &quot;before...&quot;, or a start boundary - &quot;after...&quot;. Also defines whether the boundary relates to the end of the aggregate reporting period or the start of the aggregate reporting period.</p></li>
<li><p>Offset period by amount: In some cases, for example cohort analytics, the boundary should be offset relative to the aggregate reporting period when running pivots and reports. The offset period by amount is used to move the current boundary either back(negative) or forward(positive) in time. The amount and period type together will determine how big the offset will be. An example can be when making a simple enrollment cohort program indicator for a 1 year cohort, it might be enough to offset each boundary of the program indicator with &quot;-1&quot; and &quot;Years&quot;</p></li>
<li><p>Period type: See above. Can be any period, e.g. <em>Weekly</em> or <em>Quarterly</em>.</p></li>
</ul></td>
</tr>
<tr class="even">
<td><p>Expression</p></td>
<td><p>The expression defines how the indicator is being calculated. The expression can contain references to various entities which will be substituted with a related values when the indicator is calculated:</p>
<ul>
<li><p>Data elements: Will be substituted with the value of the data element for the time period and organisation unit for which the calculation is done. Refers to both program stage and data element.</p></li>
<li><p>Attributes: Will be substituted with the value of the attribute for the person / tracked entity for which the calculation is done.</p></li>
<li><p>Variables: Will be substituted with special values linked to the program, including incident date and date of enrollment for the person, current date and count of values in the expression for the time period and organisation unit for which the calculation is done.</p></li>
<li><p>Constants: Will be substituted with the value of the constant.</p></li>
</ul>
<p>The expression is a mathematical expression and can also contain operators.</p>
<p>For single event programs and tracker programs with analytics type <em>event</em>, the expression will be evaluated <em>per event</em>, then aggregated according to its aggregation type.</p>
<p>For tracker programs with analytics type <em>enrollment</em>, the expression will be evaluated <em>per enrollment</em>, then aggregated according to its aggregation type.</p></td>
</tr>
<tr class="odd">
<td><p>Filter</p></td>
<td><p>The filter is applied to events and filters the data source used for the calculation of the indicator. I.e. the filter is applied to the set of events before the indicator expression is being evaluated. The filter must evaluate to either true or false. It filter is applied to each individual event. If the filter evaluates to true then the event is included later in the expression evaluation, if not it is ignored. The filter can, in a similar way as expressions, contain references to data elements, attributes and constants.</p>
<p>The program indicator filter can in addition use logical operators. These operators can be used to form logical expressions which ultimately evaluate to either true or false. For example you can assert that multiple data elements must be a specific value, or that specific attributes must have numerical values less or greater than a constant.</p></td>
</tr>
</tbody>
</table>

在**维护**应用程序中，您可以管理以下程序指示器
对象：

 <table>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> <p>对象类型</p> </th>
 <th> <p>可用功能</p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> <p>程序指示器</p> </td>
 <td> <p>创建，编辑，克隆，共享，删除，显示详细信息并翻译</p> </td>
 </tr>
 <tr class="even">
 <td> <p>程序指示器组</p> </td>
 <td> <p>创建，编辑，克隆，共享，删除，显示详细信息并翻译</p> </td>
 </tr>
 </tbody>
 </table>

### 创建或编辑程序指示器 { #create_program_indicator } 

 <!--DHIS2-SECTION-ID:create_program_indicator-->

> **注意**
>
>程序指示器完全属于一个程序。

1.  打开** Maintenance **应用程序，然后单击** Indicator ** \> ** Program
    指示符**。

2.  点击添加按钮。

3.  Select a **Program** and enter:

      - **名称**

      - **简称**

      - **码**

      - **颜色**

      - **图标**

      - **描述**
4.  Select number of **Decimals in data output**.

5.  Select an **Aggregation type**.

6.  如果要**以表格显示**，请选择一个。

7.  Assign one or multiple **Legend**s.

8.  （可选）输入汇总数据的** Category选项组合
    出口**。

9.  （可选）输入汇总的**属性选项组合
    数据导出**。

10. 创建表达式。

    1.  点击**编辑表达式**。

    2.  根据数学运算符和
        属性，变量和常量在右侧列出。

11. 创建过滤器。

    1.  点击**编辑过滤器**。

    2.  根据数学运算符和
        属性，变量和常量在右侧列出。

12. 点击**保存**。

### 创建或编辑程序指示器组 { #create_program_indicator_group } 

 <!--DHIS2-SECTION-ID:create_program_indicator_group-->

1.  打开** Maintenance **应用程序，然后单击** Indicator ** \> ** Program
    指标组**。

2.  点击添加按钮。

3.  Enter **Name** and **Code**.

4.  在可用程序指示符列表中，双击
    您要分配给组的程序指示器。

5.  点击**保存**。

### 参考信息：每种值类型的表达式和过滤器示例 { #reference_information_program_indicator } 

 <!--DHIS2-SECTION-ID:reference_information_program_indicator-->

下表显示了如何编写表达式和过滤器的示例
对于不同的数据元素和属性值类型：

<table>
<caption>Expression and filter examples per value type</caption>
<thead>
<tr class="header">
<th>Value types</th>
<th>Example syntax</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Integer</p>
<p>Negative integer</p>
<p>Positive or zero integer</p>
<p>Positive integer</p>
<p>Number</p>
<p>Percentage</p></td>
<td><p>Numeric fields, can be used for aggregation as an expression, or in filters:</p>
<pre><code>#{mCXR7u4kNBW.K0A4BauXJDl} &gt;= 3</code></pre></td>
</tr>
<tr class="even">
<td><p>Yes/No</p>
<p>Yes only</p></td>
<td><p>Boolean fields. Yes is translated to numeric 1, No to numeric 0. Can be used for aggregation as an expression, or in filters:</p>
<pre><code>#{mCXR7u4kNBW.Popa3BauXJss} == 1</code></pre></td>
</tr>
<tr class="odd">
<td><p>Text</p>
<p>Long text</p>
<p>Phone number</p>
<p>Email</p></td>
<td><p>Text fields. Can be checked for equality in filters:</p>
<pre><code>#{mCXR7u4kNBW.L8K4BauIKsl} == &#39;LiteralValue&#39;</code></pre></td>
</tr>
<tr class="even">
<td><p>Date</p>
<p>Age</p></td>
<td><p>Date fields. Most useful when combined with a d2:daysBetween function, which produces a number that can be aggregated as an expression or used in filters:</p>
<pre><code>d2:daysBetween(#{mCXR7u4kNBW.JKJKBausssl},V{enrollment_date}) &gt; 100</code></pre>
<p>Can also directly be checked for equality in filters:</p>
<pre><code>#{mCXR7u4kNBW.JKJKBausssl} == &#39;2011-10-28&#39;</code></pre></td>
</tr>
</tbody>
</table>

### 参考信息：在程序指示器表达式和过滤器中使用的函数，变量和运算符 { #program_indicator_functions_variables_operators } 

 <!--DHIS2-SECTION-ID:program_indicator_functions_variables_operators-->

包含属性，数据元素和常量的表达式
看起来像这样：

    （A {GPkGfbmArby} +＃{mCXR7u4kNBW.NFkjsNiQ9PH}）* C {bCqvfPR02Im}

使用自定义聚合类型的表达式，因此可以使用
内联聚合类型看起来像
    这个：

    （sum（＃{mCXR7u4kNBW.K0A4BauXJDl} *＃{mCXR7u4kNBW.NFkjsNiQ9PH}）/ sum（＃{mCXR7u4kNBW.NFkjsNiQ9PH}）））* 100

注意在表达式内部如何使用“ sum”聚合运算符
本身。

#### 程序指示符表达式或过滤器中使用的函数 { #functions-to-use-in-a-program-indicator-expression-or-filter } 

程序指示符表达式和过滤器支持以下范围
职能。这些函数可以应用于数据元素和属性：

 <table>
 <caption>在程序指示符表达式或过滤器中使用的函数</caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 30%" />
 <col style="width: 54%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> <p>功能</p> </th>
 <th> <p>参数</p> </th>
 <th> <p>说明</p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> <p> d2：hasValue </p> </td>
 <td> <p>（对象）</p> </td>
 <td> <p>如果数据元素/属性具有值，则返回true。可以在过滤器中使用，以区分数字0和无值，以及区分显式&quot;No&quot;和“是/否”字段的无选择。 </p> </td>
 </tr>
 <tr class="even">
 <td> <p> d2：minutes之间</p> </td>
 <td> <p>（日期时间，日期时间）</p> </td>
 <td> <p>产生两个数据元素/类型为&quot;date和time&quot;的分钟数。静态日期时间格式为“ yyyy-MM-dd hh：mm”。可以使用PS_EVENTDATE：（programStageUid）替换任何参数，以比较给定程序阶段的最新事件日期。 </p> </td>
 </tr>
 <tr class="odd">
 <td> <p> d2：days之间的</p> </td>
 <td> <p>（日期，日期）</p> </td>
 <td> <p>产生日期类型的两个数据元素/属性之间的天数。静态日期格式为“ yyyy-MM-dd”。可以使用PS_EVENTDATE：（programStageUid）替换任何参数，以比较给定程序阶段的最新事件日期。 </p> </td>
 </tr>
 <tr class="even">
 <td> <p> d2：周之间</p> </td>
 <td> <p>（日期，日期）</p> </td>
 <td> <p>产生日期类型的两个数据元素/属性之间的完整周数。静态日期格式为“ yyyy-MM-dd”。可以使用PS_EVENTDATE：（programStageUid）替换任何参数，以比较给定程序阶段的最新事件日期。 </p> </td>
 </tr>
 <tr class="odd">
 <td> <p> d2：months之间</p> </td>
 <td> <p>（日期，日期）</p> </td>
 <td> <p>产生日期类型的两个数据元素/属性之间的完整月份数。静态日期格式为“ yyyy-MM-dd”。可以使用PS_EVENTDATE：（programStageUid）替换任何参数，以比较给定程序阶段的最新事件日期。 </p> </td>
 </tr>
 <tr class="even">
 <td> <p> d2：years之间的</p> </td>
 <td> <p>（日期，日期）</p> </td>
 <td> <p>产生日期类型的两个数据元素/属性之间的完整年数。静态日期格式为“ yyyy-MM-dd”。可以使用PS_EVENTDATE：（programStageUid）替换任何参数，以比较给定程序阶段的最新事件日期。 </p> </td>
 </tr>
 <tr class="odd">
 <td> <p> d2：条件</p> </td>
 <td> <p>（布尔表达式，true表达式，false表达式）</p> </td>
 <td> <p>计算布尔表达式，如果为true，则返回true表达式值；如果为false，则返回false表达式值。条件表达式必须用引号引起来。 true-expr和false-expr参数必须遵循任何程序指示符表达式（包括函数）的规则。 </p> </td>
 </tr>
 <tr class="even">
 <td> <p> d2：zing </p> </td>
 <td> <p>（表达式）</p> </td>
 <td> <p>如果表达式为负，则返回零，否则返回表达式值。该表达式必须遵循任何程序指示符表达式（包括函数）的规则。 </p> </td>
 </tr>
 <tr class="odd">
 <td> <p> d2：oizp </p> </td>
 <td> <p>（表达式）</p> </td>
 <td> <p>如果表达式为零或正数，则返回1，否则返回零。该表达式必须遵循任何程序指示符表达式（包括函数）的规则。 </p> </td>
 </tr>
 <tr class="even">
 <td> <p> d2：zpvc </p> </td>
 <td> <p>（object，[，object ...]）</p> </td>
 <td> <p>返回给定对象参数中的数字零和正值的数量。可以提供任意数量的参数。 </p> </td>
 </tr>
 <tr class="odd">
 <td> <p> d2：relationshipCount </p> </td>
 <td> <p>（[relationshipTypeUid]）</p> </td>
 <td> <p>产生连接到注册或事件的给定类型的关系数。如果未指定任何类型，则将计算所有类型。 </p> </td>
 </tr>
 <tr class="even">
 <td> <p> d2：计数</p> </td>
 <td> <p>（dataElement）</p> </td>
 <td> <p>仅用于注册程序指示器。计算在注册过程中为给定程序阶段和数据元素收集的数据值的数量。参数数据元素带有＃{programStage.dataElement}语法。 </p> </td>
 </tr>
 <tr class="odd">
 <td> <p> d2：countIfValue </p> </td>
 <td> <p>（dataElement，值）</p> </td>
 <td> <p>仅用于注册程序指示器。计算在注册过程中与给定程序阶段和数据元素的给定文字值匹配的数据值的数量。参数数据元素带有＃{programStage.dataElement}语法。该值可以是硬编码的文本或数字，例如，如果仅应计算包含该文本的值，则可以是“ No_anemia”。 </p> </td>
 </tr>
 <tr class="even">
 <td> <p> d2：countIfCondition </p> </td>
 <td> <p>（数据元素，条件）</p> </td>
 <td> <p>仅用于注册程序指示器。在注册过程中，对与给定程序阶段和数据元素的给定条件标准相匹配的数据值进行计数。参数数据元素带有＃{programStage.dataElement}语法。如果仅应计算小于10的值，则该条件将以表达式形式提供在单引号中，例如'&lt;10'。 </p> </td>
 </tr>
 <tr class="odd">
 如果</p> </td> <td> <p>
 <td> <p>（布尔表达式，true表达式，false表达式）</p> </td>
 <td> <p>计算布尔表达式，如果为true，则返回true表达式值；如果为false，则返回false表达式值。这与d2：condition函数相同，除了不引用boolean-expr。 </p> </td>
 </tr>
 <tr class="even">
 <td> <p> isNull </p> </td>
 <td> <p>（对象）</p> </td>
 <td> <p>如果对象值丢失（空），则返回true，否则返回false。 </p> </td>
 </tr>
 <tr class="odd">
 <td> <p> isNotNull </p> </td>
 <td> <p>（对象）</p> </td>
 <td> <p>如果对象值不丢失（不为null），则返回true，否则返回false。 </p> </td>
 </tr>
 <tr class="even">
 <td> <p> firstNonNull </p> </td>
 <td> <p>（object [，object ...]）</p> </td>
 <td> <p>返回不丢失的第一个对象的值（不为null）。可以提供任意数量的参数。任何参数也可以是数字或字符串文字，如果所有先前的对象都缺少值，则将返回该参数。 </p> </td>
 </tr>
 <tr class="odd">
 <td> <p>最大</p> </td>
 <td> <p>（表达式[，表达式...]）</p> </td>
 <td> <p>返回给定表达式的最大（最高）值。可以提供任意数量的参数。每个表达式必须遵循任何程序指示符表达式（包括函数）的规则。 </p> </td>
 </tr>
 <tr class="even">
 <td> <p>至少</p> </td>
 <td> <p>（表达式[，表达式...]）</p> </td>
 <td> <p>返回给定表达式的最小（最小）值。可以提供任意数量的参数。每个表达式必须遵循任何程序指示符表达式（包括函数）的规则。 </p> </td>
 </tr>
 </tbody>
 </table>

使用“ hasValue”函数的过滤器如下所示：

    d2：hasValue（＃{mCXR7u4kNBW.NFkjsNiQ9PH}）

使用“ relationshipCount（relationshipTypeUid）”函数的过滤器如下所示：

    d2：relationshipCount（'KLkjshoQ90U'）

使用“ zing”和“ oizp”函数的表达式如下所示：

    d2：zing（A {GPkGfbmArby}）+ d2：oizp（＃{mCXR7u4kNBW.NFkjsNiQ9PH}））

使用“ daysBetween”函数的表达式如下所示：

    d2：daysBetween（＃{mCXR7u4kNBW.k8ja2Aif1Ae}，'2015-06-01'）

使用“ yearBetween”函数将程序阶段“ mCXR7u4kNBW”的最新事件与注册日期进行比较的表达式如下所示：

    d2：daysBetween（V {enrollment_date}，PS_EVENTDATE：mCXR7u4kNBW）

使用“条件”函数的表达式如下所示：

    d2：condition（'＃{mCXR7u4kNBW.NFkjsNiQ9PH}> 100'，150,50）

使用“ countIfValue”函数的表达式仅计算收集值10的次数，如下所示：

    d2：countIfValue（＃{mCXR7u4kNBW.NFkjsNiQ9PH}），10）

使用“ zpvc”函数的表达式如下所示：

    d2：zpvc（A {GPkGfbmArby}），＃{mCXR7u4kNBW.NFkjsNiQ9PH}），4，-1）

使用“ if”和“ isnull”函数的表达式如下所示：

    if（isNull（A {GPkGfbmArby}），10,20）

使用“ firstNonNull”函数的表达式如下所示：

    firstNonNull（A {GPkGfbmArby}），＃{mCXR7u4kNBW.NFkjsNiQ9PH}，44）

使用“最大”函数的表达式如下所示：

    最好的（＃{mCXR7u4kNBW.k8ja2Aif1Ae}，＃{mCXR7u4kNBW.NFkjsNiQ9PH}，1）

#### 程序指示符表达式或过滤器中使用的变量 { #variables-to-use-in-a-program-indicator-expression-or-filter } 

程序指示符表达式和过滤器支持以下范围
变量：

<table>
<caption>Variables to use in a program indicator expression or filter</caption>
<colgroup>
<col style="width: 21%" />
<col style="width: 78%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Variable</p></th>
<th><p>Description</p></th>
</tr>
</thead>
<tbody>
<tr>
<td><p>event_date</p></td>
<td><p>The date of when the event or the last event in the enrollment took place.</p></td>
</tr>
<tr>
<td><p>creation_date</p></td>
<td><p>The date of when an event or enrollment was created in the system.</p></td>
</tr>
<tr>
<td><p>due_date</p></td>
<td><p>The date of when an event is due.</p></td>
</tr>
<tr>
<td><p>sync_date</p></td>
<td><p>The date of when the event or enrollment was last syncronized with the Android app.</p></td>
</tr>
<tr>
<td><p>incident_date</p></td>
<td><p>The date of the incidence of the event.</p></td>
</tr>
<tr>
<td><p>enrollment_date</p></td>
<td><p>The date of when the tracked entity instance was enrolled in the program.</p></td>
</tr>
<tr>
<td><p>enrollment_status</p></td>
<td><p>Can be used to include or exclude enrollments in certain statuses.</p>
<p>When calculating the haemoglobin improvement/deterioration throughout a pregnancy, it might make sense to only consider completed enrollments. If non-completed enrollments is not filtered out, these will represent half-finished ANC followups, where the final improvement/deterioration is not yet established.</p></td>
</tr>
<tr>
<td><p>current_date</p></td>
<td><p>The current date.</p></td>
</tr>
<tr>
<td><p>value_count</p></td>
<td><p>The number of non-null values in the expression part of the event.</p></td>
</tr>
<tr>
<td><p>zero_pos_value_count</p></td>
<td><p>The number of numeric positive values in the expression part of the event.</p></td>
</tr>
<tr>
<td><p>event_count</p></td>
<td><p>The count of events (useful in combination with filters).</p></td>
</tr>
<tr>
<td><p>enrollment_count</p></td>
<td><p>The count of enrollments (useful in combination with filters). Aggregation type for the program indicator must be COUNT. </p></td>
</tr>
<tr>
<td><p>tei_count</p></td>
<td><p>The count of tracked entity instances (useful in combination with filters). Aggregation type for the program indicator must be COUNT.</p></td>
</tr>
<tr>
<td><p>org_unit_count</p></td>
<td><p>The count of organisation units (useful in combination with filters). Aggregation type for the program indicator must be COUNT.</p></td>
</tr>
<tr>
<td><p>program_stage_name</p></td>
<td><p>Can be used in filters for including only certain program stages in a filter for tracker programs. Uses the name of the program stage:</p>
<pre><code>V{program_stage_name} == &#39;ANC first visit&#39;</code></pre></td>
</tr>
<tr>
<td><p>program_stage_id</p></td>
<td><p>Can be used in filters for including only certain program stages in a filter for tracker programs. Uses the unique identifier of the program stage:</p>
<pre><code>V{program_stage_id} == &#39;YPSSfbmAtt1&#39;</code></pre></td>
</tr>
<tr>
<td><p>analytics_period_start</p></td>
<td><p>Can be used in filters or expressions for comparing any date to the first date in each reporting period.</p>
<pre><code>d2:daysBetween(#{WZbXY0S00lP.w4ky6EkVahL}, V{analytics_period_start})</code></pre></td>
</tr>
<tr>
<td><p>analytics_period_end</p></td>
<td><p>Can be used in filters or expressions for comparing any date to the last inclusive date in each reporting period.</p></td>
</tr>
</tbody>
</table>

使用“ Analytics（分析）期末”变量的过滤器仅包含
拥有LMP的女性
    三个月：

    d2：daysBetween（＃{WZbXY0S00lP.w4ky6EkVahL}，V {analytics_period_end}）<= 84

使用“值计数”变量的表达式看起来像
    这个：

    （＃{A03MvHHogjR.a3kGcGDCukuk6} +＃{A03MvHHogjR.wQLfBvPrXqq}）/ V {value_count}

使用“ event \ _date”和“ incident \ _date”变量的表达式
看起来像这样：

    d2：daysBetween（V {incident_date}，V {event_date}）

#### 操作员要在程序指示器过滤器中使用 { #operators-to-use-in-a-program-indicator-filter } 

 <table>
 <caption>在程序指示器过滤器中使用的运算符</caption>
 <colgroup>
 <col style="width: 16%" />
 <col style="width: 83%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> <p>运算符</p> </th>
 <th> <p>说明</p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> <p>和</p> </td>
 <td> <p>逻辑与</p> </td>
 </tr>
 <tr class="even">
 <td> <p>或</p> </td>
 <td> <p>逻辑或</p> </td>
 </tr>
 <tr class="odd">
 <td> <p> == </p> </td>
 <td> <p>等于</p> </td>
 </tr>
 <tr class="even">
 <td> <p>！= </p> </td>
 <td> <p>不等于</p> </td>
 </tr>
 <tr class="odd">
 <td> <p> &lt; </p> </td>
 <td> <p>小于</p> </td>
 </tr>
 <tr class="even">
 <td> <p> &lt; = </p> </td>
 <td> <p>小于或等于</p> </td>
 </tr>
 <tr class="odd">
 <td> <p> &gt; </p> </td>
 <td> <p>大于</p> </td>
 </tr>
 <tr class="even">
 <td> <p> &gt; = </p> </td>
 <td> <p>大于或等于</p> </td>
 </tr>
 </tbody>
 </table>

这些运算符可用于形成逻辑表达式，最终
评估为真或假。例如，您可以断言
多个数据元素必须是一个特定的值，或者那个特定的
属性的数值必须小于或大于常数。

同时使用属性和数据元素的过滤器如下所示：

    A {cejWyOfXge6} =='Female'和＃{A03MvHHogjR.a3kGcGDCuk6} <= 2

> **提示**
>
> DHIS2正在使用JEXL库来评估表达式
>支持超出此范围的其他语法
>文档。请参阅[项目首页中的参考
>页面]（http://commons.apache.org/proper/commons-jexl/reference/syntax.html）
>了解如何创建更复杂的表达式

## 配置程序规则 { #configure_program_rule } 

 <!--DHIS2-SECTION-ID:configure_program_rule-->

### 关于计划规则 { #about_program_rules } 

 <!--DHIS2-SECTION-ID:about_program_rules-->

程序规则允许您创建和控制程序的动态行为
**跟踪器捕获**和**事件捕获**应用程序中的用户界面。
在数据输入期间，每次都会评估程序规则表达式
显示用户界面，并且每次数据元素被
改变了。大多数类型的操作将在以下情况下立即生效：
用户在**跟踪器捕获**和**事件捕获**中输入值
应用。

<table>
<caption>Program rule components</caption>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Program rule component</p></th>
<th><p>Description</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p>Program rule action</p></td>
<td><p>Each program rule contains one or multiple actions. These are the behaviours that are triggered in the user interface when the expression is true. Actions will be applied at once if the expression is true, and will be reverted if the expression is no longer true. There are several types of actions and you can have several actions in one program rule.</p></td>
</tr>
<tr class="even">
<td><p>Program rule expression</p></td>
<td><p>Each program rule has a single expression that determines whether the program rule actions should be triggered, if the expression evaluates to true. If the expression is true the program rule is in effect and the actions will be executed. If the expression is false, the program rule is no longer in effect and the actions will no longer be applied.</p>
<p>You create the expression with standard mathematical operators, custom functions, user-defined static values and program rule variables. The program rule variables represent attribute and data element values which will be evaluated as part of the expression.</p></td>
</tr>
<tr class="odd">
<td><p>Program rule variable</p></td>
<td><p>Program rule variables lets you include data values and attribute values in program rule expressions. Typically, you'll have to create one or several program rule variables before creating a program rule. This is because program rules expressions usually contain at least one data element or attribute value to be meaningful.</p>
<p>The program rule variables are shared between all rules in your program. When you create multiple program rules for the same program, these rules will share the same library of program rule variables.</p></td>
</tr>
</tbody>
</table>

在 **维护** 应用程序中，您可以管理以下程序规则
对象：

 <table>
 <colgroup>
 <col style="width: 50%" />
 <col style="width: 50%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> <p>对象类型</p> </th>
 <th> <p>可用功能</p> </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> <p>程序规则</p> </td>
 <td> <p>创建，编辑，克隆，删除，显示详细信息并翻译</p> </td>
 </tr>
 <tr class="even">
 <td> <p>程序规则变量</p> </td>
 <td> <p>创建，编辑，克隆，共享，删除，显示详细信息并翻译</p> </td>
 </tr>
 </tbody>
 </table>

### 工作流程 { #workflow_program_rule } 

 <!--DHIS2-SECTION-ID:workflow_program_rule-->

1.  在** Maintenance **应用程序中，如果需要，请创建程序规则变量
    需要。

2.  In the **Maintenance** app, create the program rule:

    1.  输入程序规则详细信息。

    2.  创建程序规则表达式。

    3.  定义程序规则操作。

3.  在**跟踪器捕获**或**事件捕获**应用程序中，验证
    程序规则的行为符合预期。

### 创建或编辑程序规则变量 { #create_program_rule_variable } 

 <!--DHIS2-SECTION-ID:create_program_rule_variable-->

1.  打开**维护**应用程序并单击**程序** \> **程序规则
    变量**。

2.  点击添加按钮。

3.  Select a **Program** and enter a **Name**.

4.  Select if you want to **Use code for option set**.

    仅当数据元素或已跟踪时，此选项才有效
    实体属性连接到选项集。如果不选择
    此选项时，程序规则变量将填充
    选项集的名称。如果选择该选项，则程序规则
    变量将使用选项集的代码填充。

5.  选择**来源类型**，然后输入所需信息。

    根据来源类型，您必须选择例如
    **程序阶段****数据元素**或**跟踪实体属性**。

    源类型确定程序规则变量的方式
    填充一个值。

    <table>
    <colgroup>
    <col style="width: 50%" />
    <col style="width: 50%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Source type</p></th>
    <th><p>Description</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p><strong>Data element from the newest event for a program stage</strong></p></td>
    <td><p>This source type works the same way as <strong>Data element from the newest event in the current program</strong>, except that it only evaluates values from one program stage.</p>
    <p>This source type can be useful in program rules where the same data element is used in several program stages, and a rule needs to evaluate the newest data value from within one specific stage.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Data element from the newest event in the current program</strong></p></td>
    <td><p>This source type is used when a program rule variable needs to reflect the newest known value of a data element, regardless of what event the user currently has open.</p>
    <p>This source type is populated slightly differently in <strong>Tracker Capture</strong> and <strong>Event Capture</strong> apps:</p>
    <p><strong>Tracker Capture</strong>: the program rule variable will be populated with the newest data value collected for the given data element within the enrollment.</p>
    <p><strong>Event Capture</strong>: the program rule variable will be populated with the newest data value found within the 10 newest events in the same organisation unit.</p>
    <p>The newest data value is determined with event date.</p></td>
    </tr>
    <tr class="odd">
    <td><p><strong>Data element in current event</strong></p></td>
    <td><p>Program rule variables with this source type will contain the data value from the same event that the user currently has open.</p>
    <p>This is the most commonly used source type, especially for skip logic (hide actions) and warning/error rules.</p></td>
    </tr>
    <tr class="even">
    <td><p><strong>Data element from previous event</strong></p></td>
    <td><p>Program rule variables with this source type will contain the value from a specified data element from a previous event. Only older events is evaluated, not including the event that the user currently has open.</p>
    <p>This source type is commonly used when a data element only should be collected once during an enrollment, and should be hidden in subsequent events.</p>
    <p>Another use case is making rules for validating input where there is an expected progression from one event to the next - a rule can evaluate whether the previous value is higher/lower and give a warning if an unexpected value is entered.</p>
    <p>This source type is populated slightly differently in <strong>Tracker Capture</strong> and <strong>Event Capture</strong> apps:</p>
    <p><strong>Tracker Capture</strong>: the program rule variable will be populated with the newest data value collected for the given data element within the enrollment - but only evaluating the events that comes before the current event date.</p>
    <p><strong>Event Capture</strong>: the program rule variable will be populated with the newest data value collected within the 10 events preceding the current event date - not including the current event.</p>
    <p>The newest data value is determined with event date.</p></td>
    </tr>
    <tr class="odd">
    <td><p><strong>Calculated value</strong></p></td>
    <td><p>Program rule variable with this source type is not connected directly to any form data - but will be populated as a result of some other program rules <strong>ASSIGN</strong> action.</p>
    <p>This variable will be used for making preliminary calculations, having a <strong>ASSIGN</strong> program rule action and assigning a value, this value can be used by other program rules - potentially making the expressions simpler and more maintanable.</p>
    <p>These variables will not be persisted and will stay in memory only during the exectution of the set of program rules. Any program rule that assigns a data value to a preliminary calculated value would normally also have a <strong>priority</strong> assigned - to make sure that the preliminary caculation is done before the rule that consumes the calculated value.</p>
    </td>
    </tr>
    <tr class="even">
    <td><p><strong>Tracked entity attribute</strong></p></td>
    <td><p>Populates the program rule variable with a specified tracked entity attribute for the current enrollment.</p>
    <p>Use this is the source type to create program rules that evaluate data values entered during registration.</p>
    <p>This source type is also useful when you create program rules that compare data in events to data entered during registration.</p>
    <p>This source type is only used for tracker programs (programs with registration).</p></td>
    </tr>
    </tbody>
    </table>

6.  点击**保存**。

### 创建或编辑程序规则 { #create_program_rule } 

 <!--DHIS2-SECTION-ID:create_program_rule-->

> **注意**
>
>程序规则完全属于一个程序。

1.  打开** Maintenance **应用程序，然后单击** Program ** \> ** Program
    规则**。

2.  点击添加按钮。

3.  输入程序规则详细信息。这些字段未显示给
    最终用户，它们仅适用于程序管理员。

      - **程序**

      - **仅适用于计划阶段的触发规则**

        如果选择了程序阶段，则该程序规则将仅对所选程序阶段运行，
        而不是针对程序中的每个程序阶段运行。

      - **名称**

      - **描述**

      - **优先**

        假设您的程序中有16条程序规则。您
        使用以下优先级配置程序规则
        设置：

          - 程序规则A的优先级1

          - 计划规则B-K的优先级2

          - 程序规则L-P没有优先级

        结果：系统运行以下程序规则
        订购：

        1.  计划规则A

        2.  程序规则B-K（您无法在其中找到或配置
            系统运行这些程序规则的顺序）

        3.  程序规则L-P。

4.  单击“**输入程序规则表达式**”并创建程序规则
    借助变量，函数和运算符进行表达。

5.  单击 **定义程序规则操作** 并创建操作
    当表达式为真时执行。

    1.  单击添加按钮，选择 **操作** 并输入
        需要的信息。

        根据操作类型，您必须执行不同的操作
        设置类型。对于某些操作类型，还必须输入
        自由文本或创建表达式。

        <table>
        <colgroup>
        <col style="width: 33%" />
        <col style="width: 33%" />
        <col style="width: 33%" />
        </colgroup>
        <thead>
        <tr class="header">
        <th><p>Action type</p></th>
        <th><p>Required settings</p></th>
        <th><p>Description</p></th>
        </tr>
        </thead>
        <tbody>
        <tr class="odd">
        <td></td>
        <td></td>
        <td></td>
        </tr>
        <tr class="even">
        <td><p><strong>Assign value</strong></p></td>
        <td><p><strong>Data element to assign value to</strong></p>
        <p><strong>Program rule variable to assign value to</strong></p>
        <p><strong>Expression to evaluate and assign</strong></p></td>
        <td><p>Used to help the user calculate and fill out fields in the data entry form. The idea is that the user shouldn’t have to fill in values that the system can calculate, for example BMI.</p>
        <p>When a field is assigned a value, the user sees the value but the user can't edit it.</p>
        <p>Example from Immunization stock card i Zambia: The data element for vaccine stock outgoing balance is calculated based on the data element for incoming stock balance minus the data elements for consumption and wastage.</p>
        <p>Advanced use: configure an 'assign value' to do a part of a calculation and then assign the result of the calculation to a program rule variable. This is the purpose with the &quot;Calculated value&quot; program rule variable.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Display text</strong></p></td>
        <td><p><strong>Display widget</strong></p>
        <p><strong>Static text</strong></p>
        <p><strong>Expression to evaluate and display after static text</strong></p></td>
        <td><p>Used to display information that is not an error or a warning, for example feedback to the user. You can also use this action to display important information, for example the patient's allergies, to the user.</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Display key/value pair</strong></p></td>
        <td><p><strong>Display widget</strong></p>
        <p><strong>Key label</strong></p>
        <p><strong>Expression to evaluate and display as value</strong></p></td>
        <td><p>Used to display information that is not an error or a warning.</p>
        <p>Example: calculate number of weeks and days in a pregnancy and display it in the format the clinician is used to see it in. The calculation is based on previous recorded data.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Error on complete</strong></p></td>
        <td><p><strong>Data element to display error next to</strong></p>
        <p><strong>Tracked entity attribute to display error next to</strong></p>
        <p><strong>Static text</strong></p>
        <p><strong>Expression to evaluate and display after static text</strong></p></td>
        <td><p>Used whenever you've cross-consistencies in the form that must be strictly adhered to. This action prevents the user from continuing until the error is resolved.</p>
        <p>This action differs from the regular <strong>Show error</strong> since the error is not shown until the user tries to actually complete the form.</p>
        <p>If you don't select a data element or a tracked entity attribute to display the error next to, make sure you write a comprehensive error message that helps the user to fix the error.</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Hide field</strong></p></td>
        <td><p><strong>Data element to hide</strong></p>
        <p><strong>Tracked entity attribute to hide</strong></p>
        <p><strong>Custom message for blanked field</strong></p></td>
        <td><p>Used when you want to hide a field from the user.</p>
        <p><strong>Custom message for blanked field</strong> allows you to define a custom message displayed to the user in case the program rule hides and blanks out the field after the user typed in or selected a value.</p>
        <p>If a hide field action hides a field that contains a value, the field will always removed. If no message is defined, a standard message will be displayed to alert the user.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Hide section</strong></p></td>
        <td><p><strong>Program stage section to hide</strong></p></td>
        <td><p>TBA</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Hide program stage</strong></p></td>
        <td><p><strong>Program stage to hide</strong></p></td>
        <td><p>Used when you want to hide a program stage section from the user.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Make field mandatory</strong></p></td>
        <td><p><strong>Data element to make mandatory</strong></p>
        <p><strong>Tracked entity attribute to make mandatory</strong></p></td>
        <td><p>TBA</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Show error</strong></p></td>
        <td><p><strong>Data element to display error next to</strong></p>
        <p><strong>Tracked entity attribute to display error next to</strong></p>
        <p><strong>Static text</strong></p>
        <p><strong>Expression to evaluate and display after static text</strong></p></td>
        <td><p>Used whenever there are rules which must strictly be adhered to. The show error action prevents the user from continuing until the error is resolved.</p>
        <p>Such a strict validation should only be used when it's certain that the evaluated expression is never true unless the user has made a mistake in data entry.</p>
        <p>It's mandatory to define a message that is shown to the user when the expression is true and the action is triggered.</p>
        <p>You can select which data element or tracked entity attribute to link the error to. This will help the user to fix the error.</p>
        <p>In case several data elements or attributes are involved, select the one that is most likely that the user would need to change.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Show warning</strong></p></td>
        <td><p><strong>Data element to display warning next to</strong></p>
        <p><strong>Tracked entity attribute to display warning next to</strong></p>
        <p><strong>Static text</strong></p>
        <p><strong>Expression to evaluate and display after static text</strong></p></td>
        <td><p>Used to give the user a warning about the entered data, but at the same time to allow the user to save and continue.</p>
        <p>You can use warnings to help the user avoid errors in the entered data, while at the same time allow the user to consciously disregard the warnings and save a value that is outside preset expectations.</p>
        <p><strong>Static text</strong> defines the message shown to the user when the expression is true and the action is triggered.</p>
        <p>You can select which data element or tracked entity attribute to link the error to. This will help the user to fix the error.</p>
        <p>In case several data elements or attributes are involved, select the one that is most likely that the user would need to change.</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Warning on complete</strong></p></td>
        <td><p><strong>Data element to display warning next to</strong></p>
        <p><strong>Tracked entity attribute to display warning next to</strong></p>
        <p><strong>Static text</strong></p>
        <p><strong>Expression to evaluate and display after static text</strong></p></td>
        <td><p>Used to give the user a warning if he/she tries to complete inconsistent data, but at the same time to allow the user to continue. The warning is shown in a dialog when the user completes the form.</p>
        <p><strong>Static text</strong> defines the message shown to the user when the expression is true and the action is triggered. This field is mandatory.</p>
        <p>You can select which data element or tracked entity attribute to link the error to. This will help the user to fix the error.</p>
        <p>If you don't select a data element or a tracked entity attribute to display the error next to, make sure you write a comprehensive error message that helps the user to fix the error.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Send Message</strong></p></td>
        <td><p><strong>Message template to send</strong></p></td>
        <td><p>Send Message triggers a notification based on provided message template. This action will be taken when ever there is a change in <strong>data value</strong>. However this behaviour can be controlled by providing event/enrollment status in program rule expression for example.</p>
        <pre><code>V{event_status} == &#39;COMPLETED&#39;</code></pre>
        <p>Message template will be parsed and variables will be substituted with actual values.</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Schedule Message</strong></p></td>
        <td><p><strong>Message template to send</strong></p>
        <p><strong>Data field which contains expression to evaluate the date which notification should be sent at.</strong></p></td>
        <td><p>Schedule Message will schedule notification at date provided by Expression in the data field. Sample expression is given below</p>
        <pre><code>d2:addDays( &#39;2018-04-20&#39;, &#39;2&#39; )</code></pre>
        <p>Message template will be parsed and variables will be substituted with actual values.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Hide option</strong></p></td>
        <td><p><strong>Data element to hide option for</strong></p>
        <p><strong>Tracked entity attribute to hide option for</strong></p>
        <p><strong>Option that should be hidden</strong></p></td>
        <td><p>Used to selectively hide a single option for an option set in a given data element/tracked entity attribute.</p>
        <p>When combined with <strong>show option group</strong> the <strong>hide option</strong> takes presedence.</p></td>
        </tr>
        <tr class="even">
        <td><p><strong>Hide option group</strong></p></td>
        <td><p><strong>Data element to hide option group for</strong></p>
        <p><strong>Tracked entity attribute to hide option group for</strong></p>
        <p><strong>Option group that should be hidden</strong></p></td>
        <td><p>Used to hide all options in a given option group and data element/tracked entity attribute.</p>
        <p>When combined with <strong>show option group</strong> the <strong>hide option group</strong> takes precedence.</p></td>
        </tr>
        <tr class="odd">
        <td><p><strong>Show option group</strong></p></td>
        <td><p><strong>Data element to show option group for</strong></p>
        <p><strong>Tracked entity attribute to show option group for</strong></p>
        <p><strong>Option group that should be shown</strong></p></td>
        <td><p>Used to show only options from a given option group in a given data element/tracked entity attribute. To show an option group implicitly hides all options that is not part of the group(s) that is shown.</p></td>
        </tr>
        </tbody>
        </table>

    2.  点击**保存**。

    3.  （可选）重复上述步骤以添加更多操作。

6.  点击**保存**。

### 示例：程序规则 { #program_rule_examples } 

 <!--DHIS2-SECTION-ID:program_rule_examples-->

> **注意**
>
>您可以在演示服务器上查看所有示例：
> <https://play.dhis2.org/dev/dhis-web-maintenance/#/list/programSection/programRule>

本示例说明如何配置程序规则
怀孕的周数和天数，并将结果显示在
临床医生用来查看的格式。计算基于
先前记录
    数据。

1.  ![](resources/images/maintainence/pg_rule_ex/keyvaluepair_details.png)

2.  ![](resources/images/maintainence/pg_rule_ex/keyvaluepair_expression.png)

3.  ![](resources/images/maintainence/pg_rule_ex/keyvaluepair_action.png)

    ** Data **字段中的完整表达式：

        d2：concatenate（d2：weeksBetween（＃{lmp}，V {current_date}），'+'，
        d2：modulus（d2：daysBetween（＃{lmp}，V {current_date}），7））

![](resources/images/maintainence/pg_rule_ex/keyvaluepair_result.png)

此示例显示如何配置程序规则以在以下位置显示文本
**跟踪器捕获**中的反馈小部件
    应用程序。

1.  ![](resources/images/maintainence/pg_rule_ex/displaytext_pgrule_variable.png)

2.  ![](resources/images/maintainence/pg_rule_ex/displaytext_details.png)

3.  ![](resources/images/maintainence/pg_rule_ex/displaytext_expression.png)

4.  ![](resources/images/maintainence/pg_rule_ex/displaytext_action.png)

![](resources/images/maintainence/pg_rule_ex/displaytext_result.png)

此示例显示如何配置节目规则以始终显示
**Tracker Capture** 应用程序中反馈小部件中的某些数据。这
例如，当您想要确保重要数据时，此功能非常有用
药物过敏，总是
    可见的。

1.  ![](resources/images/maintainence/pg_rule_ex/displaytext2_pgrule_variable.png)

2.  ![](resources/images/maintainence/pg_rule_ex/displaytext2_details.png)

3.  ![](resources/images/maintainence/pg_rule_ex/displaytext2_expression.png)

4.  ![](resources/images/maintainence/pg_rule_ex/displaytext2_action.png)

![](resources/images/maintainence/pg_rule_ex/displaytext2_first_pgstage.png)

![](resources/images/maintainence/pg_rule_ex/displaytext2_result.png)

通过使用“分配值”类型的程序规则，您可以计算
“访问时的胎龄”值并将其填写在数据输入表单中。您
配置程序规则以基于以下条件计算“访问时的胎龄”
在“ LMP日期”或“超声估计到期
日期”。

1.  ![](resources/images/maintainence/pg_rule_ex/assign_details.png)

2.  ![](resources/images/maintainence/pg_rule_ex/assign_expression.png)

3.  ![](resources/images/maintainence/pg_rule_ex/assign_action.png)

![](resources/images/maintainence/pg_rule_ex/assign_result.png)

### 参考信息：程序规则表达式中使用的运算符和函数 { #program_rules_operators_functions } 

 <!--DHIS2-SECTION-ID:program_rules_operators_functions-->

> **提示**
>
>您可以相互嵌套函数，并使用子表达式来嵌套
>形成更复杂的条件。一个产生妊娠的例子
>周龄，根据最近的月经日期：
>
> d2：floor（d2：daysBetween（＃{lastMenstrualDate}，V {event_date}）/ 7）

> **提示**
>
>源类型将确定d2：函数调用的方式
>评估（源域）参数。
>
>示例：其中\＃{hemoglobinCurrent}设置为源类型** Data
>当前事件中的元素**。以下函数调用带有评估
>是否在当前事件中输入了血红蛋白。
>
> d2：hasValue（'hemoglobinCurrent'）
>
>示例：其中\＃{hemoglobin}设置为源类型**数据元素
>来自当前程序中的最新事件**。以下功能
>致电以评估是否存在血红蛋白值
>注册中的任何事件。
>
> d2：hasValue（'hemoglobin'）
>
>示例：其中\＃{hemoglobinPrevious}设置为源类型** Data
>先前事件中的元素**。下面的函数调用
>评估是否存在血红蛋白值
>当前事件之前的事件。
>
> d2：hasValue（'hemoglobinPrevious'）

 <table>
 <caption>可能在程序规则表达式中使用的运算符</caption>
 <colgroup>
 <col style="width: 16%" />
 <col style="width: 83%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>运算符</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> <p> + </p> </td>
 <td> <p>相加数字</p> </td>
 </tr>
 <tr class="even">
 <td> <p>-</p> </td>
 <td> <p>彼此相减的编号</p> </td>
 </tr>
 <tr class="odd">
 <td> <p> * </p> </td>
 <td> <p>乘以两个数字</p> </td>
 </tr>
 <tr class="even">
 <td> <p> / </p> </td>
 <td> <p>除以两个数字</p> </td>
 </tr>
 <tr class="odd">
 <td> <p>％</p> </td>
 <td> <p>两个数的模数</p> </td>
 </tr>
 <tr class="even">
 <td> <p> &amp;&amp; </p> </td>
 <td> <p>逻辑与。仅当左侧和右侧的表达式为true时为true。左侧和右侧可以是“是/否”，“仅是”或括号中的子表达式。 </p> </td>
 </tr>
 <tr class="odd">
 <td> <p> || </p> </td>
 <td> <p>逻辑或。当左侧的表达式或右侧的表达式为true时为True。左侧和右侧可以是“是/否”，“仅是”或括号中的子表达式。 </p> </td>
 </tr>
 <tr class="even">
 <td> <p> &gt; </p> </td>
 <td> <p>左数大于右数</p> </td>
 </tr>
 <tr class="odd">
 <td> <p> &gt; = </p> </td>
 <td> <p>左数大于或等于右数</p> </td>
 </tr>
 <tr class="even">
 <td> <p> &lt; </p> </td>
 <td> <p>左数小于右数</p> </td>
 </tr>
 <tr class="odd">
 <td> <p> &lt; = </p> </td>
 <td> <p>左数小于或等于右数。 </p> </td>
 </tr>
 <tr class="even">
 <td> <p> == </p> </td>
 <td> <p>左侧等于右侧。支持数字，文本，是/否和仅是。 </p> </td>
 </tr>
 <tr class="odd">
 <td> <p>！= </p> </td>
 <td> <p>左侧不等于右侧。支持数字，文本，是/否和仅是。 </p> </td>
 </tr>
 <tr class="even">
 <td> <p>！ </p> </td>
 <td> <p>取反以下值。可以用于是/否，仅是或括号中的子表达式。 </p> </td>
 </tr>
 <tr class="odd">
 <td> <p>（）</p> </td>
 <td> <p>括号用于对子表达式进行分组。 </p> </td>
 </tr>
 </tbody>
 </table>

<table>
<caption>在程序规则表达式中使用的自定义函数</caption>
<colgroup>
<col style="width: 15%" />
<col style="width: 30%" />
<col style="width: 54%" />
</colgroup>
<thead>
<tr class="header">
<th>功能</th>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>d2:ceil</td>
<td>（数字）</td>
<td>将输入参数<strong>向上舍入</strong> 到最接近的整数。
<p>示例：d2:ceil(#  )</p>
<pre><code>d2:ceil(#{hemoglobinValue})</code></pre></td>
</tr>
<tr class="even">
<td>d2:floor</td>
<td>（数字）</td>
<td>将输入参数<strong>向下舍入</strong> 到最接近的整数。
<p>举例说明妇女怀孕的周数。请注意，子表达式 #{gestationalAgeDays}/7 在 floor 函数执行之前已经求值：</p>
<pre><code>d2:floor(#{gestationalAgeDays}/7)</code></pre></td>
</tr>
<tr class="odd">
<td>d2:round</td>
<td>(number)</td>
<td>将输入参数舍入为最接近的整数。</td>
</tr>
<tr class="even">
<td>d2:modulus</td>
<td>(number,number)</td>
<td>将第一个参数除以第二个参数，得出模数。
<p>举例说明该妇女当前孕周的天数：</p>
<pre><code>d2:modulus(#{gestationalAgeDays},7)</code></pre></td>
</tr>
<tr class="odd">
<td>d2:zing</td>
<td>数值</td>
<td>如果数值为负值，则将数值类型的参数值化为零，否则化为数值本身。</td>
</tr>
<tr class="even">
<td>d2:oizp</td>
<td>数值</td>
<td>如果数值为零或正值，则将数字类型的参数赋值为 1，否则赋值为 0。</td>
</tr>
<tr class="odd">
<td>d2:concatenate</td>
<td>(对象, [,object, object,...])</td>
<td>根据输入参数生成连接字符串。支持任意数量的参数。主要用于未来的操作类型，例如使用 d2:concatenate('weeks','+','gestationalageDays')显示胎龄。</td>
</tr>
<tr class="even">
<td>d2:daysBetween</td>
<td>(日期）。</td>
<td>计算第一个参数和第二个参数之间的天数。如果第二个参数的日期在第一个参数之前，返回值将是两个日期之间的负天数。静态日期格式为 "yyyy-MM-dd"。
<p>示例：根据末次月经日期和当前事件日期计算妇女的胎龄（天数）：</p>
<pre><code>d2:daysBetween(#{lastMenstrualDate},V{event_date})</code></pre></td>
</tr>
<tr class="odd">
<td>d2:weeksBetween</td>
<td>(日期）。</td>
<td>返回第一个参数和第二个参数之间的整周数。如果第二个参数的日期在第一个参数之前，返回值将是两个日期之间的负周数。静态日期格式为 "yyyy-MM-dd"。</td>
</tr>
<tr class="even">
<td>d2:monthsBetween</td>
<td>(日期）。</td>
<td>返回第一个参数和第二个参数之间的整月数。如果第二个参数的日期在第一个参数之前，返回值将是两个日期之间的负月数。静态日期格式为 "yyyy-MM-dd"。</td>
</tr>
<tr class="odd">
<td>d2:yearsBetween</td>
<td>(日期）。</td>
<td>返回第一个参数和第二个参数之间的年数。如果第二个参数的日期在第一个参数之前，返回值将是两个日期之间的负年数。静态日期格式为 "yyyy-MM-dd"。</td>
</tr>
<tr class="even">
<td>d2:addDays</td>
<td>(日期，数字）</td>
<td>根据第一个参数日期生成一个日期，并加上第二个参数的天数。
<p>根据末次月经计算怀孕预产期的示例：</p>
<pre><code>d2:addDays(#{lastMenstrualDate},283)</code></pre></td>
</tr>
<tr class="odd">
<td>d2:count</td>
<td>(源字段）</td>
<td>计算参数中源字段输入值的个数。源字段参数是程序中已定义的源字段的名称 - 参见示例
<p>使用示例 #{previousPregnancyOutcome} 是可重复程序阶段&quot;上一次怀孕&quot; 中的一个源字段：</p>
<pre><code>d2:count('previousPregnancyOutcome')</code></pre></td>
</tr>
<tr class="even">
<td>d2:countIfValue</td>
<td>(源字段，文本）</td>
<td>计算为第一个参数中的源字段输入的匹配值的个数。只计算与第二个参数匹配的出现次数。源字段参数是程序中定义的一个源字段的名称--见示例。
<p>使用示例 其中 #{previousPregnancyOutcome} 是可重复程序阶段&quot;上一次怀孕&quot; 中的一个源字段。下面的函数将生成以流产告终的前次怀孕次数：</p>
<pre><code>d2:countIfValue('previousPregnancyOutcome','Abortion')
                                   </code></pre></td>
</tr>
<tr class="odd">
<td>d2:countIfZeroPos</td>
<td>(来源字段）</td>
<td>计算参数中源字段输入的零值或正值的个数。源字段参数是程序中定义的一个源字段的名称--见示例。
<p>示例用法 #{fundalHeightDiscrepancy} 是程序中的一个源字段，可以是正值或负值。下面的函数将产生正数出现的次数：</p>
<pre><code>d2:countIfZeroPos('fundalHeightDiscrepancy')
                                   </code></pre></td>
</tr>
<tr class="even">
<td>d2:hasValue</td>
<td>(源字段）</td>
<td>如果参数源字段包含值，则返回值为 true；如果没有输入值，则返回值为 false。
<p>使用示例：查找源字段 #{currentPregnancyOutcome} 是否已填写：</p>
<pre><code>d2:hasValue('currentPregnancyOutcome')
                                   </code></pre></td>
</tr>
<tr class="odd">
<td>d2:zpvc</td>
<td>(对象，[,对象，对象，...])</td>
<td>返回给定对象参数中零值和正值数值的个数。可提供任意数量的参数。</td>
</tr>
<tr class="even">
<td>d2:validatePattern</td>
<td>(文本，regex-pattern）</td>
<td>如果输入文本与提供的正则表达式模式完全匹配，则返回值为 true。正则表达式需要转义。
<p>示例表达式，当数字不在模式 9999/99/9 中时触发操作：</p>
<pre><code>!d2:validatePattern(A{nrc},'\\d{6}\/\d{2}\/\d')</code></pre>
<p>示例表达式，如果地址不是由字母或空格组成，则触发操作，然后是一个空格，然后是一个数字：</p>
<pre><code>!d2:validatePattern(A{registrationAddress},'[\w ]+ \d+')</code></pre>
<p>示例：如果名称中包含任何数字，则触发操作：</p>
<pre><code>!d2:validatePattern(A{name},'[^\\d]*')</code></pre>
<p>示例表达式，当手机号码包含非法数字序列 555 时触发操作：</p>
<pre><code>d2:validatePattern(A{mobile},'.*555.*')</code></pre></td>
</tr>
<tr class="odd">
<td>d2:left</td>
<td>(文本，数字字符串）</td>
<td>计算文本的左侧部分，从第一个字符开始计算。
<p>文本可以使用引号，也可以通过变量求值：</p>
<pre><code>d2:left(#{variableWithText}, 3)</code></pre></td>
</tr>
<tr class="even">
<td>d2:right</td>
<td>(文本，字符数）</td>
<td>计算文本的右侧部分，从最后一个字符开始计算。
<p>文本可以使用引号，也可以通过变量求值：</p>
<pre><code>d2:right(#{variableWithText}, 2)</code></pre></td>
</tr>
<tr class="odd">
<td>d2:substring</td>
<td>(文本，起始字符数，终止字符数）</td>
<td>计算字符串中由起始字符数和终止字符数指定的部分。
<p>表达式示例：</p>
<pre><code>d2:substring(#{variableWithText}, 1, 3)</code></pre>
如果上述示例中的 #{variableWithText} 是 "ABCD"，那么计算结果就是 "BC"。</td>
</tr>
<tr class="even">
<td>d2:split</td>
<td>(文本，分隔符，元素序号）</td>
<td>按分隔符分割文本，并保留第 n 个元素（0 为第一个）。
<p>文本可以使用引号，也可以通过变量求值，分隔符必须使用引号：</p>
<pre><code>d2:split(#{variableWithText}, '-', 1)</code></pre>
<p>注意：不支持逗号分隔符（,）。</p></td>
</tr>
<tr class="odd">
<td>d2:length</td>
<td>文本</td>
<td>查找字符串的长度。
<p>示例：d2:length(#  )</p>
<pre><code>d2:length(#{variableWithText})</code></pre></td>
</tr>
<tr class="even">
<td>d2:inOrgUnitGroup</td>
<td>文本</td>
<td>评估当前组织单位是否在参数组中。参数可以用 ID 或组织单位组代码定义。在事件中触发规则时，当前组织单位将是事件组织单位；在 TEI 注册表中触发规则时，当前组织单位将是注册组织单位。
<p>示例表达式：</p>
<pre><code>d2:inOrgUnitGroup('HIGH_RISK_FACILITY')</code></pre></td>
</tr>
<tr class="odd">
<td>d2:hasUserRole</td>
<td>(用户角色）</td>
<td>如果当前用户具有此角色，则返回 true，否则返回 false
<p>示例表达式：</p>
<pre><code>d2:hasUserRole('UYXOT4A3ASA')</code></pre></td>
</tr>
<tr class="even">
<td>d2:zScoreWFA</td>
<td>年龄体重指标 Z 值</td>
<td>函数根据世界卫生组织年龄体重指标提供的数据计算 Z 值。其值在-3.5 至 3.5 之间变化，取决于体重值。
<p>示例表达式：</p>
<pre><code>d2:zScoreWFA( ageInMonth, weight, gender )</code></pre></td>
</tr>
<tr class="odd">
<td>d2:zScoreHFA</td>
<td>年龄身高指标 Z 值</td>
<td>函数根据世界卫生组织年龄身高指标提供的数据计算 Z 值。其值在-3.5 至 3.5 之间变化，取决于身高值。
<p>表达式示例：</p>
<pre><code>d2:zScoreHFA( ageInMonth, height, gender )</code></pre></td>
</tr>
<tr class="even">
<td>d2:zScoreWFH</td>
<td>身高体重指标 Z 值</td>
<td>函数根据世界卫生组织体重身高指标提供的数据计算 Z 值。其值在-3.5 至 3.5 之间变化，取决于身高值。
<p>表达式示例：</p>
<pre><code>d2:zScoreWFH( 身高、体重、性别 )</code></pre></td>
</tr>
<tr class="odd">
<td>d2:minValue</td>
<td>获取所提供项目的最小值</td>
<td>函数获取所提供的数据元素在整个注册过程中的最小值。
<p>表达式示例：</p>
<pre><code>d2:minValue( '血压' )</code></pre></td>
</tr>
<tr class="even">
<td>d2:maxValue</td>
<td>获取所提供项目的最大值</td>
<td>函数获取所提供数据元素在整个注册过程中的最大值。
<p>表达式示例：</p>
<pre><code>d2:maxValue( '血压' )</code></pre></td>
</tr>
</tbody>
</table>

<table>
<caption>程序规则表达式中使用的标准变量</caption>
<colgroup>
<col style="width: 15%" />
<col style="width: 30%" />
<col style="width: 54%" />
</colgroup>
<thead>
<tr class="header">
<th>变量</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>V{current_date}</td>
<td>（日期）</td>
<td>包含执行规则时的当前日期。
<p>表达式示例：</p>
<pre><code>d2:daysBetween(#{symptomDate},V{current_date}) &lt; 0 </code></pre></td>
</tr>
<tr class="even">
<td>V{event_date}</td>
<td>（日期）</td>
<td>包含当前事件执行的事件日期。作为注册表的一部分执行规则时，不会有任何值。</td>
</tr>
<tr class="odd">
<td>V{event_status}</td>
<td>（字符串）</td>
<td>包含当前活动或注册的状态。
<p>检查状态的示例表达式为：</p>
<pre><code>V{event_status) == &#39;已完成&#39;</code></pre></td>
</tr>
<tr class="even">
<td>V{due_date}</td>
<td>（日期）</td>
<td>此变量将包含执行规则时的当前日期。注意：这意味着即使没有其他任何更改，该规则也可能在不同时间产生不同的结果。</td>
</tr>
<tr class="odd">
<td>V{event_count}</td>
<td>（数字）</td>
<td>包含注册中的事件总数。</td>
</tr>
<tr class="even">
<td>V{enrollment_date}</td>
<td>（日期）</td>
<td>包含当前注册的注册日期。对于单项活动计划没有价值。</td>
</tr>
<tr class="odd">
<td>V{incident_date}</td>
<td>（日期）</td>
<td>包含当前注册的事件日期。对于单项活动计划没有价值。</td>
</tr>
<tr class="even">
<td>V{enrollment_id}</td>
<td>（字符串）</td>
<td>当前注册的通用标识符字符串 (UID)。对于单项活动计划没有价值。</td>
</tr>
<tr class="odd">
<td>V{event_id}</td>
<td>（字符串）</td>
<td>当前事件上下文的通用标识符字符串 (UID)。作为注册表的一部分执行规则时，不会有任何值。</td>
</tr>
<tr class="even">
<td>V{orgunit_code}</td>
<td>（字符串）</td>
<td>包含链接到当前注册的组织单位的代码。对于单个事件程序，将使用当前事件组织单元中的代码。
<p>用于检查组织单位代码是否以 WB_ 开头的示例表达式：</p>
<pre><code>d2:left(V{orgunit_code},3) == &#39;WB_&#39;</code></pre></td>
</tr>
<tr class="odd">
<td>V{环境}</td>
<td>（字符串）</td>
<td>包含代表规则当前运行时环境的代码。可能的值为 &quot;WebClient&quot;、&quot;AndroidClient&quot; 和&quot;服务器&quot;。当程序规则仅应在一种或多种客户端类型中运行时可以使用。</td>
</tr>
<tr class="even">
<td>V{program_stage_id}</td>
<td>（字符串）</td>
<td>包含触发规则的当前程序阶段的 ID。这可用于在特定程序阶段运行规则，或避免在某些阶段执行。在 TEI 注册表单上下文中执行规则时，变量将为空。</td>
</tr>
<tr class="odd">
<td>V{program_stage_name}</td>
<td>（字符串）</td>
<td>包含触发规则的当前程序阶段的名称。这可用于在特定程序阶段运行规则，或避免在某些阶段执行。在 TEI 注册表单上下文中执行规则时，该变量将为空。</td>
</tr>
</tbody>
</table>

## 配置关系类型 { #configure_relationship_type } 

 <!--DHIS2-SECTION-ID:configure_relationship_type-->

### 关于关系类型 { #about_relationship_types } 

 <!--DHIS2-SECTION-ID:about_relationship_types-->

关系表示跟踪器模型中两个实体之间的链接。关系被视为DHIS2中的数据，并且基于关系类型，类似于被跟踪实体实例基于被跟踪实体类型的方式。

关系始终包括两个实体，并且这些实体可以包括“跟踪的实体实例”，“注册”和“事件”，以及这些的任意组合。请注意，当前应用程序中并非所有这些组合都可用。

另外，关系可以定义为单向或双向。当前唯一的功能差异是这些功能需要不同级别的创建权限。单向关系要求用户对“从”实体具有数据写访问权限，而对“至”实体具有数据读访问权限，而双向关系则要求双方都具有数据写访问权限。

有关配置以及“从约束”和“至约束”的含义的更多信息，请参见[关系模型]（relationship_model＃relationship_model_relationship_type）。

### 创建或编辑关系类型 { #create_relationship_type } 

 <!--DHIS2-SECTION-ID:create_relationship_type-->

1.  打开** Maintenance **应用程序，然后单击** Program ** \> ** Relationship
    类型**。

2.  点击添加按钮。

3.  Type a **Name** of the relationship type.

4.  （可选）分配**代码**。

4.  (Optional) Provide a **Description** of the relationship.

5. （可选）选择关系是否应为双向

6. 提供**从发起实体看到的关系名称**。这是关系的名称，将显示在关系“左侧”的数据输入应用程序中。例如。在母子关系中，这可能是“……的母亲”。

7. （可选）提供**从接收实体看到的关系名称**。这是关系的名称，将显示在“数据输入”应用程序中关系的“右侧”。例如。在母子关系中，这可能是“母亲”。

9.  选择“来自约束”。这限制了可以包含在关系中的实体类型。 [关系模型]（relationship_model＃relationship_model_relationship_type）。

9.  选择一个“到约束”。这限制了可以包含在关系中的实体类型。 [关系模型]（relationship_model＃relationship_model_relationship_type）。

9.  点击**保存**。

## 配置跟踪的实体类型 { #configure_tracked_entity } 

 <!--DHIS2-SECTION-ID:configure_tracked_entity-->

### 关于跟踪的实体类型 { #about_tracked_entity } 

 <!--DHIS2-SECTION-ID:about_tracked_entity-->

跟踪的实体是可以通过
系统。它可以是从人到商品的任何东西，例如
药还是一个人。

一个程序必须有一个跟踪的实体。注册被跟踪实体
实例到程序中，被跟踪的实体类型和被跟踪的
程序的实体类型必须相同。

跟踪的实体属性用于为
跟踪的实体。跟踪的实体属性可以在之间共享
程式。

### 创建或编辑跟踪的实体属性 { #create_tracked_entity_attribute } 

 <!--DHIS2-SECTION-ID:create_tracked_entity_attribute-->

1.  打开 **Maintenance** 应用程序并单击 **Program** \> **Tracked
    实体属性**。

2.  点击添加按钮。

3.  In the **Name** field, type the tracked entity attribute name.

4.  (Optional) Type a **Short name**.

4.  (Optional) Type a **Form name**.

5.  (Optional) In the **Code** field, assign a code.

6.  （可选）输入**说明**。

7. （可选）在 **字段掩码** 字段中，您可以键入用于提供
   有关在Capture和Tracker Capture应用程序中属性格式正确的提示。
   以下是可在遮罩中使用的特殊字符。特殊字符与给定类型的一个字符完全匹配。

   |性格匹配|
   | ------------- | ---------------- |
   | \\ d |数字|
   | \\ x |小写字母|
   | \\ X |大写字母|
   | \\ w |任何字母数字字符|

  例如，该模式可用于在数据元素的输入字段中根据需要显示连字符。例如“ \ d \ d \ d- \ d \ d \ d- \ d \ d \ d，
  每三位数显示一个连字符。

8.  选择**选项集**。

9.  在 **值类型** 字段中，选择要使用的数据类型
    跟踪的实体属性将记录。

    <table>
    <caption>Value types</caption>
    <colgroup>
    <col style="width: 53%" />
    <col style="width: 46%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Value type</p></th>
    <th><p>Description</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p>Age</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Coordinate</p></td>
    <td><p>A point coordinate specified as longitude and latitude in decimal degrees. All coordinate should be specified in the format &quot;-19.23 , 56.42&quot; with a comma separating the longitude and latitude.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Date</p></td>
    <td><p>Dates render as calendar widget in data entry.</p></td>
    </tr>
    <tr class="even">
    <td><p>Date &amp; time</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="odd">
    <td><p>E-mail</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>File</p></td>
    <td><p>A file resource where you can store external files, for example documents and photos.</p></td>
    </tr>
    <tr class="odd">
    <td>Image</td>
    <td>Similar to File, but restricted to images.</td>
    </tr>
    <tr class="even">
    <td><p>Integer</p></td>
    <td><p>Any whole number (positive and negative), including zero.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Letter</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Long text</p></td>
    <td><p>Textual value. Renders as text area in forms.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Negative integer</p></td>
    <td><p>Any whole number less than (but not including) zero.</p></td>
    </tr>
    <tr class="even">
    <td><p>Number</p></td>
    <td><p>Any real numeric value with a single decimal point. Thousands separators and scientific notation is not supported.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Percentage</p></td>
    <td><p>Whole numbers inclusive between 0 and 100.</p></td>
    </tr>
    <tr class="even">
    <td><p>Phone number</p></td>
    <td></td>
    </tr>
    <tr class="odd">
    <td><p>Positive integer</p></td>
    <td><p>Any whole number greater than (but not including) zero.</p></td>
    </tr>
    <tr class="even">
    <td><p>Positive of zero integer</p></td>
    <td><p>Any positive whole number, including zero.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Organisation unit</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Unit interval</p></td>
    <td><p>Any real number greater than or equal to 0 and less than or equal to 1.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Text</p></td>
    <td><p>Textual value. The maximum number of allowed characters per value is 50,000.</p></td>
    </tr>
    <tr class="even">
    <td><p>Time</p></td>
    <td><p>Time is stored in HH:mm format.</p>
    <p>HH is a number between 0 and 23</p>
    <p>mm is a number between 00 and 59</p></td>
    </tr>
    <tr class="odd">
    <td><p>Tracker associate</p></td>
    <td><p>-</p></td>
    </tr>
    <tr class="even">
    <td><p>Username</p></td>
    <td><p>This will be populated with the username of the user which performs data entry automatically during the data entry process.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Yes/No</p></td>
    <td><p>Boolean values, renders as drop-down lists in data entry.</p></td>
    </tr>
    <tr class="even">
    <td><p>Yes only</p></td>
    <td><p>True values, renders as check-boxes in data entry.</p></td>
    </tr>
    </tbody>
    </table>

9.  Select an **Aggregation type**.

    <table>
    <caption>Aggregation operators</caption>
    <colgroup>
    <col style="width: 50%" />
    <col style="width: 50%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th><p>Aggregation operator</p></th>
    <th><p>Description</p></th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td><p>Average</p></td>
    <td><p>Average the values in both the period as and the organisation unit dimensions.</p></td>
    </tr>
    <tr class="even">
    <td><p>Average (sum in organisation unit hierarchy)</p></td>
    <td><p>Average of data values in the period dimension, sum in the organisation unit dimensions.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Count</p></td>
    <td><p>Count of data values.</p></td>
    </tr>
    <tr class="even">
    <td><p>Min</p></td>
    <td><p>Minimum of data values.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Max</p></td>
    <td><p>Maximum of data values.</p></td>
    </tr>
    <tr class="even">
    <td><p>None</p></td>
    <td><p>No aggregation is performed in any dimension.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Sum</p></td>
    <td><p>Sum of data values in the period and organisation unit dimension.</p></td>
    </tr>
    <tr class="even">
    <td><p>Standard deviation</p></td>
    <td><p>Standard deviation (population-based) of data values.</p></td>
    </tr>
    <tr class="odd">
    <td><p>Variance</p></td>
    <td><p>Variance (population-based) of data values.</p></td>
    </tr>
    </tbody>
    </table>

10. 选择 **唯一** 以指定跟踪实体的值
    属性是唯一的。

    唯一设置有两个选项：

      - **整个系统**：被跟踪实体属性的值
        可以重复使用属于其他跟踪实体的值
        属性。但是此跟踪实体属性中的值必须
        不重复。

        选择**自动生成**以允许自动生成
        跟踪实体的属性值。当生成设置
        被选中时，用于指定图案的可选字段也被选中
        显示。此字段应包含基于
        TextPattern语法。当值自动生成时，
        对于整个系统，此属性将是唯一的。看到
        TextPattern部分以获取有关其工作原理的更多信息。

      - **组织单位**：被跟踪实体的值
        属性不得在同一单位部门中重复。

11. 选择 **继承** 以注册与某个实体建立关系的新实体
    可用实体，所有继承实体的实体属性值
    将预先填写在注册表中。

12. (Optional) Select **Confidential**.

    仅当您配置了以下功能的加密时，此选项才可用
    系统。

13. (Optional) Select **Display in list without program**.

14. （可选）分配一个或多个**传奇**。

15. 点击**保存**。

### 创建或编辑跟踪的实体类型 { #create_tracked_entity } 

 <!--DHIS2-SECTION-ID:create_tracked_entity-->

1.  打开 **Maintenance** 应用程序并单击 **Program** \> **Tracked
    实体类型**。

2.  点击添加按钮或一个已经存在的**已跟踪实体
    类型**。

3.  Type a **Name** of the tracked entity.

4.  （可选）选择将使用的 **颜色** 和 **图标**
    数据捕获应用程序以识别此跟踪的实体类型。

5.  (Optional) Enter a **Description** of the tracked entity.

6.  （可选）输入**所需的最少数量的属性
    搜索**。这指定了需要设置的属性数量
    填写以便能够搜索此**跟踪的实体
    在*全局搜索*中输入**。请参阅[配置
    搜索]（../ search / search.xml＃configure_search）了解更多信息。

7.  （可选）输入**要跟踪的实体实例的最大数量
    返回搜索**。这指定了被跟踪实体的数量
    实例将在*全局搜索*中返回。请参阅[配置
    搜索]（../ search / search.xml＃configure_search）了解更多信息。

8.  （可选）添加**跟踪的实体类型属性**。这是用来
    配置搜索，请参阅[配置
    搜索]（configure_search）了解更多信息。

9.  (Optional) Enter an **Alternative name** of the tracked entity.

10. 点击**保存**。

## 配置搜索 { #configure_search } 

 <!--DHIS2-SECTION-ID:configure_search-->

可以为用户提供搜索组织单位，从而可以
在数据捕获之外搜索跟踪的实体实例
组织单位。

搜索可以在程序的上下文中进行，也可以在
跟踪实体类型的上下文。为用户提供以下选择
在程序上下文中搜索，有必要进行配置
可以搜索哪个程序跟踪的实体属性。为了给
用户可以选择在跟踪的实体类型的上下文中进行搜索，
您将必须配置哪个跟踪实体类型属性
是可搜索的。

### 配置搜索跟踪器程序 { #configure-search-for-tracker-program } 

为了能够使用程序进行搜索，您必须制作一些
程序属性可搜索。唯一的程序属性将始终是
可搜索的。

1.  打开**程序应用程序**

2.  打开或创建跟踪器程序

3.  Go to **Attributes**

4.  如果没有属性，请添加一个

5.  将属性设置为可搜索

可搜索的程序属性将分配给搜索组。

  - 唯一组。每个唯一程序属性一组。独特
    属性不能与程序中的其他程序属性组合
    搜索。搜索结果只能是0或1个跟踪实体
    实例。

  - 非唯一组。该组包含所有非唯一程序
    属性，并可以在一个属性中组合多个属性
    搜索。

可以为节目搜索设置两个限制，作为
**程序**配置。

  - 搜索所需的最少属性数量：此属性
    定义必须输入多少个非唯一属性
    才能执行搜索。

<!-- end list -->

  - 返回的跟踪实体实例的最大数量：此属性
    定义用户将在搜索中获得的最大结果数。
    如果发现过多的跟踪实体实例，则用户
    必须提供更具体的搜索。

### 配置搜索以跟踪实体类型 { #configure-search-for-tracked-entity-type } 

> **注意**
>
> TET =跟踪的实体类型

为了能够在没有程序的情况下进行搜索，您必须做一些
TET属性可搜索。唯一的TET属性将始终是
可搜索的。

1.  Open **Tracked entity type app**

2.  打开一个跟踪实体类型

3.  如果TET没有属性，请添加一个

4.  将属性设置为可搜索

可搜索的TET属性将分配给搜索组。

  - 唯一组。每个唯一的TET属性一组。独特属性
    不能与搜索中的其他TET属性结合使用。结果
    来自搜索的只能是0或1个跟踪的实体实例。

  - 非唯一组。该组包含所有非唯一的TET属性
    并可以在搜索中组合多个属性。

可以为TET搜索设置两个限制

  - 搜索所需的最少属性数量：此属性
    定义必须输入多少个非唯一属性
    才能执行搜索。

<!-- end list -->

  - 返回的跟踪实体实例的最大数量：此属性
    定义用户将在搜索中获得的最大结果数。
    如果发现过多的跟踪实体实例，则用户
    必须提供更具体的搜索。

### 为用户配置搜索组织单位 { #configure-search-organisation-units-for-a-user } 

能够搜索用户数据以外的其他组织单位
捕获组织单位，则必须为用户分配搜索
组织单位。给用户一个搜索组织单位也将
授予其在该组织单位所有子级中进行搜索的权限。

1.  开启**使用者应用程式**

2.  点击一个用户

3.  打开**分配搜索组织单位**

4.  选择组织单位

5.  点击**保存**

## 克隆元数据对象 { #clone_metadata } 

 <!--DHIS2-SECTION-ID:clone_metadata-->

克隆数据元素或其他对象可以在创建时节省时间
许多相似的对象。

1.  打开 **Maintenance** 应用程序并找到元数据对象的类型
    你想克隆。

2.  In the object list, click the options menu and select **Clone**.

3.  修改所需的选项。

4.  点击**保存**。

## 删除元数据对象 { #delete-metadata-objects } 

> **注意**
>
>您只能在以下情况下删除数据元素和其他数据元素对象：
>没有数据与数据元素本身关联。

> **警告**
>
>从系统删除的所有数据集都将不可避免地丢失。所有
>数据输入表格，以及可能已经制定的部分表格
>也将被删除。确保您已经备份了您的
>数据库，然后删除任何数据集，以防您需要还原它
>在某个时间点。

1.  打开 **Maintenance** 应用程序并找到元数据对象的类型
    您要删除。

2.  In the object list, click the options menu and select **Delete**.

3.  点击**确认**。

## 更改元数据对象的共享设置 { #change-sharing-settings-for-metadata-objects } 

您可以为元数据对象分配不同的共享设置，例如
示例组织单位和跟踪的实体属性。这些分享
设置可控制哪些用户和用户组可以查看或编辑
元数据对象。

一些元数据对象还允许您更改共享设置
对象的数据输入。这些附加设置控制谁可以
使用元数据查看或在表单字段中输入数据。

> **注意**
>
>默认设置是所有人（**公共访问权限**）都可以找到，
>查看和编辑元数据对象。

1.  打开 **Maintenance** 应用程序并找到元数据对象的类型
    您要修改。

2.  在对象列表中，单击上下文菜单并选择 **共享
    设置**。

3.  （可选）添加用户或用户组：搜索一个或多个用户
    分组并选择它。用户或用户组已添加到列表中。

4.  更改要修改的访问组的共享设置。

      - **可以编辑和查看**：访问组可以查看和编辑
        目的。

      - **只能查看**：访问组可以查看对象。

      - **禁止访问**（仅适用于**公共访问**）：公众
        将无法访问该对象。

5.  更改您要访问的访问组的数据共享设置
    修改。

      - **可以捕获数据**：访问组可以查看和捕获数据
        为对象。

      - **可以查看数据**：访问组可以查看以下数据：
        目的。

      - **无访问权限**：访问组将无法访问以下数据：
        物体。

6.  点击**关闭**。

## 显示元数据对象的详细信息 { #display-details-of-metadata-objects } 

1.  打开 **Maintenance** 应用程序并找到元数据对象的类型
    您想查看。

2.  在对象列表中，单击选项菜单并选择 **显示
    细节**。

## 翻译元数据对象 { #translate-metadata-objects } 

DHIS2提供了用于翻译数据库内容的功能，
示例数据元素，数据元素组，指标，指标组
或组织单位。您可以将这些元素转换为任意数量的
语言环境。地区代表特定的地理，政治或
文化区。

> **提示**
>
> 要激活翻译，请打开 **系统设置** 应用程序，单击 \>
> **外观**并选择一种语言。

1.  打开 **Maintenance** 应用程序并找到元数据对象的类型
    您要翻译。

2.  In the object list, click the options menu and select **Translate**.

    > **Tip**
    >
    > If you want to translate an organisation unit level, click
    > directly on the **Translate** icon next to each list item.

3.  选择一个语言环境。

4.  Type a **Name**, **Short name** and **Description**.

5.  点击**保存**。
