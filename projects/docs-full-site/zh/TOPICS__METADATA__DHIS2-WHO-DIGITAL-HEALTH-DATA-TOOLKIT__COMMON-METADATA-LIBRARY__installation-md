---
edit_url: "https://github.com/dhis2-metadata/GEN_LIB/blob/master/docs/gen_lib-installation.md"
revision_date: '2022-07-01'
tags:
- 元数据
---

# 通用元数据图书馆 - 安装指南{ #gen-lib-installation }

本文件包括通用元数据文件库的安装指南。

系统默认语言：系统默认语言：英语

可用翻译：法语、西班牙语、葡萄牙语、阿拉伯语

## 安装 { #installation } 

下表将帮助你确定哪些元数据文件与你的实施相关：

| 元数据文件                      | 应用领域 |
|------------------------------------|------------------|
| 通用元数据库（完整） | DHIS2 环境包含跟踪和汇总模块，实施已发布的元数据包，开发使用通用元数据的定制程序和模块 |
| 通用跟踪器元数据库    | 基于跟踪器的 DHIS2 环境，实施已发布的跟踪器软件包，开发利用通用跟踪器元数据的定制跟踪器程序 |
| 核心案例简介                  | 基于追踪系统的 DHIS2 环境，实施已发布的追踪软件包，开发利用核心病例概况数据的定制追踪程序（人）。 |
| 通用汇总元数据          | 实施已发布的聚合模块，开发利用通用聚合元数据的定制聚合模块 |

更多信息，请参阅[通用元数据资料库设计指南](#common-metadata-library)

在将元数据文件导入 DHIS2 实例之前，请仔细阅读安装指南的每个部分！

### 将通用元数据导入空白的 DHIS2 实例{ #importing-common-metadata-into-a-blank-dhis2-instance } 

DHIS2 实例的应用区域将帮助您确定要导入的元数据文件。元数据无需任何额外调整即可导入。

### 将通用元数据导入工作中的 DHIS2 实例{ #importing-common-metadata-into-a-working-dhis2-instance } 

覆盖目标实例中的元数据可能会改变现有程序的配置，并可能导致错误。将通用元数据文件库导入正常运行的 DHIS2 环境时，需要确保不会丢失任何现有配置（即共享设置、选项排序顺序等）。

如果通用元数据 库中的元数据对象和目标实例中的元数据对象有相同的 UID，但不完全相同（如聚合类型不 同、分配的选项集不同、选项数量不同），则应考虑在导入通用元数据库之前，为目标实例 中的元数据对象分配新的 UID。

#### UIDs{ #uids } 

替换目标系统中元数据元素的 UID 以匹配源元数据文件可能是一项复杂的任务，因为 uid 可能在其他元数据对象中被引用，如程序规则、指标、预测器、验证规则等。
在导入元数据对象之前，确保用系统中的新 uid 替换旧 uid 的所有出现。

> **EXAMPLE**
>
> To update the uid of a category option use the following command:
>
> ```SQL
> UPDATE dataelementcategoryoption SET uid = '<new-uid>' WHERE uid = '<old-uid>';
> ```

#### 跟踪实体属性、数据元素、选项集和选项{ #tracked-entity-attributes-data-elements-option-sets-and-options } 

对于基于选项集的数据元素和属性，确保源文件和目标实例中的选项集相同。
检查匹配的选项集是否包含相同的选项。

检查源文件和目标实例中数据元素和属性的聚合和值类型。

#### 选项代码{ #option-codes } 

根据 DHIS2 命名规则，元数据代码使用大写字母、下划线和空格。可能出现的一些例外情况在相应的软件包文档中有所说明。如果目标实例中的数据值包含小写代码，则必须直接在数据库中更新这些值。

下表列出了元数据包中代码改为大写的所有选项集。在将元数据导入实例之前，请检查现有系统中的选项集是否与软件包 .json 中的选项集一致，并使用相同的大写选项代码。

> **Important**
>
> During the import, the existing option codes will be overwritten with the updated upper case codes.
> In order to update the existing data values, it is necessary to update the values stored in the database using database commands.
> Make sure to map existing old option codes and new option codes before replacing the values. Use staging instance first, before making adjustments on the production server.

对于数据元素值，请使用

```SQL
UPDATE programstageinstance
SET eventdatavalues = jsonb_set(eventdatavalues, '{"<affected-data-element-uid>","value"}', '"<new-value>"')
WHERE eventdatavalues @> '{"<affected-data-element-uid>":{"value": "<old-value>"}}'::jsonb
AND programstageid=<database_programsatgeid>;
```

对于跟踪的实体属性值，请使用

```SQL
UPDATE trackedentityattributevalue
SET value = <new-value>
WHERE trackedentityattributeid=<affected trackedentityattribute database_id> AND value=<old-value>;
```

#### 跟踪实体类型{ #tracked-entity-type } 

如果通用元数据文件库中的跟踪实体类型与目标实例相匹配，请在导入通用元数据文件库之前重新查看共享设置、分配的跟踪实体类型属性及其设置。

