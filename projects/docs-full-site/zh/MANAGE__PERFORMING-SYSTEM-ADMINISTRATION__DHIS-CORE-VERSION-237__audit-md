---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.37/src/sysadmin/audit.md"
revision_date: '2021-12-02'
tags:
- DHIS 核心 2.37 版
- 管理
---

# 审核 { #audit } 

## 介绍 { #introduction } 

DHIS2 支持基于_Apache ActiveMQ Artemis_ 的新审计服务。Artemis 被 DHIS2 用作异步消息传递系统。

实体保存到数据库后，将创建一条审计消息，并发送到 Artemis 消息消费者服务。然后，该信息将在不同的线程中处理。

可从 DHIS2 数据库检索审计日志。目前还没有可用的用户界面或 API 端点来检索审计条目。


## 单审核表 { #audit_table } 

所有审核条目将保存到一个名为`audit`的表中

| 柱     | 类型                        | 描述 |   |
|------------|-----------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---|
| 受审核者    | 整数                     | 主键。 |   |
| 审核类型  | 文本                        | 读取，创建，更新，删除，搜索                                                                                                                  |   |
| 审计范围 | 文本                        | 元数据，汇总，跟踪器                                                                                                                        |   |
| 克拉斯      | 文本                        | 审计实体 Java 类名。                                                                                                                     |   |
| 属性 | jsonb                       | 包含已审核对象属性的 JSON 字符串。示例：`{"valueType": "TEXT", "categoryCombo": "SWQW313FQY", "domainType": "TRACKER"}`. |   |
| 数据       | 比蒂亚                       | 审计实体的字节数组格式压缩 JSON 字符串（非人工可读）。                                                                                             |   |
| 创建于  | 没有时区的时间戳 | 创建时间 |   |
| 由...制作  | 文本                        | 执行审计操作的用户的用户名。 |   |
| uid        | 文本                        | 被审计对象的 UID。 |   |
| 码       | 文本                        | 被审计对象的代码。 |   |

The audit service makes use of two new concepts: *Audit Scope* and *Audit Type*.

## 审核范围 { #audit_scope } 

审计范围是可以审计的应用程序的逻辑区域。目前有三种审计范围。

| **范围** | 键       | 审计对象                                              |
| --------- | --------- | ------------------------------------------------------------ |
| 追踪器   | 跟踪器   | 跟踪实体实例、跟踪实体属性值、注册、事件。 |
| 元数据  | 元数据  | 所有元数据对象（如数据元素、组织单位）。 |
| 总计 | 总计 | 汇总数据值。                                        |


## 审核类型 { #audit_type } 

审计类型是触发审计操作的操作。目前，我们支持以下四种类型。

| 名称     | 键      | 描述         |
| -------- | -------- | ------------------- |
| 阅读     | 阅读     | 目标已宣读。    |
| 创建   | 创建   | 对象已创建。 |
| 更新   | 更新   | 对象已更新。 |
| 删除   | 删除   | 对象已删除。 |
| 残疾 | 禁用 | 禁用审计。      |

> **注意事项**
>
> READ 审计类型可能会在数据库中生成大量数据，并可能影响性能。

## 设定 { #audit_configuration } 

以下范围和类型默认启用审计系统。

范围

- `CREATE`
- `UPDATE`
- `DELETE`

类型

- `METADATA`
- `TRACKER`
- `AGGREGATE`

这意味着**无需任何操作**即可启用默认审计系统。默认设置相当于以下 `dhis.conf` 配置。

```属性
audit.metadata = 创建;更新;删除
audit.tracker = 创建;更新;删除
audit.aggregate = 创建;更新;删除
```

可以使用_审计矩阵_配置审计。审计矩阵表示范围和类型的有效组合，并在` dhis.conf` 配置文件中使用以下属性定义。每个属性都接受以分号 (`;`) 分隔的审计类型列表。

* `audit.metadata`
* `audit.tracker`
* `audit.aggregate`

## 例子 { #examples } 

本节演示如何在 `dhis.conf` 中配置审计系统。

仅对元数据和跟踪器的创建和更新进行审计：

```properties
audit.metadata = CREATE;UPDATE
audit.tracker = CREATE;UPDATE
audit.aggregate = DISABLED
```

只审核跟踪器相关对象的创建和删除：

```属性
audit.metadata = 禁用
audit.tracker = 创建;删除
audit.aggregate = 禁用
```

要完全禁用所有作用域的审计：
```属性
audit.metadata = 禁用
audit.tracker = 禁用
audit.aggregate = 禁用
```

