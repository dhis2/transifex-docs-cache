---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.33/src/commonmark/en/content/sysadmin/installation.md"
revision_date: '2020-04-27'
---

# 安装 { #installation } 

<!--DHIS2-SECTION-ID:installation-->

安装章节提供了有关如何在以下位置安装DHIS2的信息
各种环境，包括在线中央服务器，离线本地
网络，独立应用程序和称为DHIS2的自包含程序包
生活。

## 介绍 { #install_introduction } 

<!--DHIS2-SECTION-ID:install_introduction-->

DHIS2在存在Java运行时的所有平台上运行
环境版本8或更高版本，其中包括最受欢迎的操作
Windows，Linux和Mac等系统。 DHIS2在PostgreSQL上运行
数据库系统。 DHIS2打包为标准Java Web存档
（WAR文件），因此可以在任何Servlet容器（例如Tomcat和
码头。

DHIS2团队建议使用Ubuntu 16.04 LTS操作系统PostgreSQL
数据库系统和Tomcat Servlet容器为首选
服务器安装的环境。

本章提供了设置上述技术堆栈的指南。
但是，应将其作为起步和运行的指南，而不是
作为上述环境的详尽文档。我们提到
到官方的Ubuntu，PostgreSQL和Tomcat文档进行深入了解
阅读。

dhis2-tools Ubuntu软件包可自动执行以下内容中所述的许多任务
以下指南，推荐给大多数用户，尤其是那些
不熟悉命令行或服务器管理。它
在本指南的单独章节中进行了详细说明。

## 服务器规格 { #install_server_specifications } 

<!--DHIS2-SECTION-ID:install_server_specifications-->

DHIS2是数据库密集型应用程序，需要您的服务器
具有适当数量的RAM，CPU核心数量和快速磁盘。
这些建议应被视为经验法则，而不是
确切的措施。 DHIS2在RAM的数量和数量上线性扩展
CPU内核，因此您负担得起的费用越多，应用程序的性能就会越好。

  - * RAM：*每1百万条捕获的数据记录至少1 GB内存
    月或每1000个并发用户。至少4 GB
    实例，中等实例为12 GB。

  - * CPU核心：* 4个CPU核心用于一个小型实例，8个CPU核心用于一个实例
    中型或大型实例。

  - *磁盘：*理想情况下使用SSD。否则，请使用7200 rpm磁盘。最低要求
    读取速度为150 Mb / s，200 Mb / s好，350 Mb / s或更高
    理想。就磁盘空间而言，至少建议使用60 GB，但是
    将完全取决于其中包含的数据量
    数据值表。 Analytics（分析）表格需要大量
    磁盘空间。提前计划并确保您的服务器可以升级
    需要时具有更多的磁盘空间。

## 软件需求 { #install_software_requirements } 

<!--DHIS2-SECTION-ID:install_software_requirements-->

更高版本的DHIS2需要以下软件版本才能运行。

  - Java JDK或JRE版本8或更高版本。

  - 存在Java JDK或JRE版本8的任何操作系统。

  - PostgreSQL数据库9.6或更高版本。

  - PostGIS数据库扩展版本2.2或更高版本。

  - Tomcat Servlet容器版本8.5.50或更高版本，或其他Servlet API
    3.1兼容的servlet容器。

## 服务器设置 { #install_server_setup } 

<!--DHIS2-SECTION-ID:install_server_setup-->

本节介绍如何在以下平台上建立 DHIS2 服务器实例
Ubuntu 16.04 64 位上设置 DHIS2 服务器实例，将 PostgreSQL 作为数据库系统，将 Tomcat 作为
Servlet 容器。本指南并不是一个分步指南
本身，而是作为在服务器上部署 DHIS2 的参考。
在服务器上部署的参考。有许多可能的部署策略，它们
会因操作系统和数据库以及其他因素而有所不同。
其他因素而有所不同。术语 *invoke* 是指在终端中执行给定命令。
终端中执行指定命令。

对于国家级服务器，建议的配置为四核2 Ghz
处理器或更高以及12 Gb RAM或更高。注意64位
要使用超过4 Gb的RAM，需要操作系统。

对于本指南，我们假设为PostgreSQL和8分配了8 Gb RAM。
GB RAM已分配给Tomcat / JVM和一个64位操作系统
用来。 *如果您运行其他配置，请调整
相应的建议值\！*我们建议可用的内存
在数据库和JVM之间平均分配。记得
将一些物理内存留给操作系统
执行其任务，例如大约2 GB。步骤标记为
*可选*，例如性能调整步骤，可以稍后进行
阶段。

### 创建一个用户来运行DHIS2 { #install_creating_user } 

<!--DHIS2-SECTION-ID:install_creating_user-->

您应该创建一个专用用户来运行DHIS2。

> **重要**
>
>您不应以root用户等特权用户身份运行DHIS2服务器。

通过调用以下命令创建一个名为dhis的新用户：

```sh
sudo useradd -d / home / dhis -m dhis -s / bin / false
```

然后为您的帐户调用设置密码：

```sh
须藤密码
```

确保设置了一个安全密码，该密码至少包含15个随机字符。

### 创建配置目录 { #install_creating_config_directory } 

<!--DHIS2-SECTION-ID:install_creating_config_directory-->

首先为DHIS2配置创建合适的目录
文件。此目录还将用于应用程序，文件和日志文件。
示例目录可以是：

```sh
mkdir / home / dhis / config
chown dhis：dhis / home / dhis / config
```

DHIS2将寻找一个名为* DHIS2 \ _HOME *的环境变量来
找到DHIS2配置目录。该目录将是
在本安装指南中称为* DHIS2 \ _HOME *。我们将定义
在安装过程的后续步骤中使用环境变量。

### 设置服务器时区和语言环境 { #install_setting_server_tz } 

<!--DHIS2-SECTION-ID:install_setting_server_tz-->

可能需要重新配置服务器的时区以匹配
DHIS2服务器将覆盖的位置的时区。
如果您使用的是虚拟专用服务器，则默认时区可能不会
对应于您的DHIS2位置的时区。您可以轻松地
通过调用以下内容并按照以下说明重新配置时区
说明。

```sh
sudo dpkg-重新配置tzdata
```

PostgreSQL对语言环境敏感，因此您可能必须安装
地区优先。要检查现有的语言环境并安装新的语言环境（例如
挪威）：

```sh
语言环境-a
须藤locale-gen nb_NO.UTF-8
```

### PostgreSQL安装 { #install_postgresql_installation } 

<!--DHIS2-SECTION-ID:install_postgresql_installation-->

通过以下方式安装PostgreSQL
    调用：

```sh
sudo apt-get install postgresql-10 postgresql-contrib-10 postgresql-10-postgis-2.4
```

通过调用以下命令创建一个名为* dhis *的非特权用户：

```sh
须藤-u postgres createuser -SDRP dhis
```

在提示符下输入安全密码。通过调用创建数据库：

```sh
须藤-u postgres createdb -O dhis dhis2
```

通过调用`exit`返回您的会话现在您有一个PostgreSQL用户
称为* dhis *和一个名为* dhis2 *的数据库。

* PostGIS *扩展是多种GIS /映射功能所必需的
工作。 DHIS 2将尝试在安装过程中安装PostGIS扩展
启动。如果DHIS 2数据库用户没有创建权限
您可以使用* postgres *用户从控制台创建扩展
使用以下命令：

```sh
sudo -u postgres psql -c“创建扩展名postgis;” dhis2
```

退出控制台，并使用* \\ q *并返回到先前的用户
*出口*。

### PostgreSQL性能调优 { #install_postgresql_performance_tuning } 

<!--DHIS2-SECTION-ID:install_postgresql_performance_tuning-->

调整PostgreSQL是实现高性能系统所必需的，但是
在使DHIS2运行方面是可选的。 PostgreSQL已配置
并通过* postgresql.conf *文件进行了调整，该文件可以像
这个：

```sh
须藤nano /etc/postgresql/10/main/postgresql.conf
```

并设置以下属性：

```属性
max_connections = 200
```

确定PostgreSQL允许的最大连接数。

```属性
shared_buffers = 3200MB
```

确定应专门分配多少内存
PostgreSQL缓存。此设置控制共享内核的大小
应该为PostgreSQL保留的内存。应该设置为
PostgreSQL专用内存的40％。

```属性
work_mem = 20MB
```

确定用于内部排序和哈希的内存量
操作。此设置是针对每个连接，针对每个查询的，因此需要大量内存
如果将其提高得太高，可能会被消耗掉。正确设置该值
对于DHIS2聚合性能至关重要。

```属性
maintenance_work_mem = 512MB
```

确定PostgreSQL可用于维护的内存量
创建索引，运行真空，添加外部文件等操作
键。增加此值可能会提高索引创建的性能
在分析生成过程中。

```属性
Effective_cache_size = 8000MB
```

估计磁盘可用于磁盘缓存的内存量
操作系统（不是分配）和PostgreSQL用于isdb.no
确定查询计划是否适合内存。设置它
高于实际可用价值会导致质量不佳
性能。此值应包含shared \ _buffers
设置。 PostgreSQL有两层缓存：第一层使用
内核共享内存，并由shared \ _buffers设置控制。
PostgreSQL将第二层委托给操作系统磁盘缓存
可用的内存大小可以通过
有效\ _cache \ _size设置。

```属性
checkpoint_completion_target = 0.8
```

设置WAL写过程中用于缓冲的内存。
增大此值可能会提高大量写入系统的吞吐量。

```属性
sync_commit =关
```

指定事务提交是否将等待WAL记录
是否将其写入磁盘，然后再返回客户端。设定这个
关闭将大大提高性能。这也意味着那里
交易之间的轻微延迟被报告为成功
客户端，它实际上是安全的，但是数据库状态不能为
已损坏，这是性能密集型和
像DHIS2这样的重写入系统。

```属性
wal_writer_delay = 10000毫秒
```

指定WAL写操作之间的延迟。将此设置为较高
价值可能会提高大量写入系统的性能，因为
一次刷新到磁盘就可以执行许多写操作。

```属性
random_page_cost = 1.1
```

*仅SSD。*设置查询计划程序对非连续获取的磁盘页面的成本的估计。较低的值将导致系统比顺序扫描更喜欢索引扫描。对于在SSD上运行的数据库或在内存中大量缓存的数据库，较低的值有意义。默认值为4.0，这对于传统磁盘而言是合理的。

```属性
max_locks_per_transaction = 96
```

指定为每个事务分配的对象锁的平均数量。设置该参数主要是为了允许完成涉及大量表的升级例程。

通过调用以下命令来重新启动PostgreSQL：

```sh
sudo /etc/init.d/postgresql重新启动
```

### 系统配置 { #install_database_configuration } 

<!--DHIS2-SECTION-ID:install_database_configuration-->

数据库连接信息通过以下方式提供给DHIS2：
配置文件* dhis.conf *。创建此文件并将其保存在
* DHIS2 \ _HOME *目录。例如，此位置可能是：

```sh
须藤-u dhis nano /home/dhis/config/dhis.conf
```

与上述设置相对应的PostgreSQL配置文件具有
这些属性：

```properties
# ---------------------------------------------------------------------- { #- } 
# Database connection { #database-connection } 
# ---------------------------------------------------------------------- { #- } 

# Hibernate SQL dialect { #hibernate-sql-dialect } 
connection.dialect = org.hibernate.dialect.PostgreSQLDialect

# JDBC driver class { #jdbc-driver-class } 
connection.driver_class = org.postgresql.Driver

# Database connection URL { #database-connection-url } 
connection.url = jdbc:postgresql:dhis2

# Database username { #database-username } 
connection.username = dhis

# Database password { #database-password } 
connection.password = xxxx

# ---------------------------------------------------------------------- { #- } 
# Server { #server } 
# ---------------------------------------------------------------------- { #- } 

# Enable secure settings if deployed on HTTPS, default 'off', can be 'on' { #enable-secure-settings-if-deployed-on-https-default-off-can-be-on } 
# server.https = on { #serverhttps-on } 

# Server base URL { #server-base-url } 
# server.base.url = https://server.com/ { #serverbaseurl-httpsservercom } 
```

强烈建议启用* server.https *设置并通过加密的HTTPS协议部署DHIS 2。此设置将启用例如安全cookie。启用此设置后，需要进行HTTPS部署。

* server.base.url *设置是指最终用户通过网络访问系统的URL。

请注意，配置文件支持环境变量。这个
表示您可以将某些属性设置为环境变量，并且
让他们通过DHIS 2解决，例如像这样* DB \ _PASSWD *是
环境变量的名称：

```属性
connection.password = $ {DB_PASSWD}
```


请注意，此文件包含您的DHIS2数据库的密码（以明文形式）
文本，因此需要对其进行保护，以防止未经授权的访问。去做这个，
调用以下命令，以确保只有dhis用户
拥有该文件的文件被允许读取：

```sh
chmod 0600 dhis.conf
```

### Java安装 { #install_java_installation } 

<!--DHIS2-SECTION-ID:install_java_installation-->

推荐的DHIS 2的Java JDK是OpenJDK8。可以发出以下命令来安装OpenJDK 8：

```
须藤apt-get install openjdk-8-jdk
```

通过调用以下命令来验证安装是否正确：

```
Java版本
```

### Tomcat和DHIS2安装 { #install_tomcat_dhis2_installation } 

<!--DHIS2-SECTION-ID:install_tomcat_dhis2_installation-->

要安装Tomcat Servlet容器，我们将利用Tomcat用户
通过调用打包：

```sh
须藤apt-get install tomcat8-user
```

这个包使我们可以轻松地创建一个新的Tomcat实例。实例
将在当前目录中创建。合适的位置是
dhis用户的主目录：

```sh
cd / home / dhis /
须藤tomcat8-instance-create tomcat-dhis
须藤chown -R dhis：dhis tomcat-dhis /
```

这将在名为* tomcat-dhis *的目录中创建一个实例。注意
tomcat7-user软件包允许创建任意数量的dhis
实例，如果需要的话。

接下来，编辑文件* tomcat-dhis / bin / setenv.sh *并添加以下行。
第一行将设置Java Runtime Environment的位置，
第二个将专用于Tomcat的内存，第三个将设置
DHIS2将在其中搜索* dhis.conf *配置的位置
文件。请检查Java二进制文件的路径是否正确，因为它们
可能因系统而异，例如在AMD系统上，您可能会看到
* / java-8-openjdk-amd64 *请注意，您应该对此进行调整
环境：

```sh
导出JAVA_HOME ='/ usr / lib / jvm / java-1.8.0-openjdk-amd64 /'
出口JAVA_OPTS ='-Xmx7500m -Xms4000m'
导出DHIS2_HOME ='/ home / dhis / config'
```

Tomcat配置文件位于
* tomcat-dhis / conf / server.xml *。定义连接的元素
DHIS是端口8080的* Connector *元素。您可以更改
如果需要，将连接器元素中的端口号连接到所需的端口。
* relaxedQueryChars *属性对于允许某些字符是必需的
在DHIS2前端使用的URL中。

```xml
<Connector port="8080" protocol="HTTP/1.1"
  connectionTimeout="20000"
  redirectPort="8443"
  relaxedQueryChars="[]" />
```

下一步是下载DHIS2 WAR文件并将其放入
Tomcat的webapps目录。您可以下载DHIS2版本2.31 WAR
这样发布（如果您的首选版本替换2.31，
必要）：

```sh
wget https://releases.dhis2.org/2.33/dhis.war
```

或者，对于补丁程序版本，文件夹结构基于补丁程序
主发行版下子文件夹中的发行版ID。例如。你可以下载
像这样的DHIS2版本2.31.1 WAR版本（用您的
首选版本，以及带有首选补丁的2.31.1（如有必要）：

```
wget https://releases.dhis2.org/2.33/2.33.1/dhis.war
```

将WAR文件移到Tomcat webapps目录中。我们想称呼
WAR文件ROOT.war，以使其直接在本地主机上可用
没有上下文路径：

```sh
mv dhis.war tomcat-dhis / webapps / ROOT.war
```

DHIS2绝对不能以特权用户身份运行。修改后
setenv.sh文件，修改启动脚本以检查并验证
脚本尚未以root身份调用。

```sh
＃！/ bin / sh {#binsh}
设置-e

如果[“ $（id -u）” -eq“ 0”];然后
  回声“此脚本不能以root用户身份运行” 1>＆2
  1号出口
科幻

导出CATALINA_BASE =“ / home / dhis / tomcat-dhis”
/usr/share/tomcat8/bin/startup.sh
回显“ Tomcat启动”
```

### 运行DHIS2 { #install_running_dhis2 } 

<!--DHIS2-SECTION-ID:install_running_dhis2-->

DHIS2现在可以通过调用来启动：

    须藤-u dhis tomcat-dhis / bin / startup.sh

> **重要**
>
>绝对不要以root或其他特权用户身份运行DHIS2服务器。

DHIS2可以通过调用来停止：

    须藤-u dhis tomcat-dhis / bin / shutdown.sh

要监视Tomcat的行为，日志是该日志的主要来源
信息。可以使用以下命令查看日志：

    尾巴-f tomcat-dhis / logs / catalina.out

假设WAR文件名为ROOT.war，您现在可以访问
DHIS2实例位于以下URL：

    http://localhost:8080

## 基本网址配置 { #base-url-configuration } 

要设置 DHIS2 实例的基本 URL，可在配置文件 `dhis.conf` 中指定以下属性。该 URL 应指向终端用户可通过网络到达 DHIS2 的位置。

```属性
server.base.url = https://play.dhis2.org/dev
```

## 文件存储配置 { #install_file_store_configuration } 

<!--DHIS2-SECTION-ID:install_file_store_configuration-->

DHIS2能够捕获和存储文件。默认情况下，文件将
被存储在*文件*中运行DHIS2的服务器的本地文件系统上
目录位于* DHIS2 \ _HOME *外部目录位置下。

您还可以配置DHIS2以将文件存储在基于云的存储中
提供者。 AWS S3是当前唯一受支持的提供商。启用
基于云的存储，您必须定义以下附加属性
在您的* dhis.conf *文件中：

```属性
＃文件存储提供者。当前支持“文件系统”和“ aws-s3”。 {支持文件存储提供商当前文件系统和aws-s3}
filestore.provider ='aws-s3'

＃本地文件系统上外部目录中的目录，AWS S3上存储桶{＃directory-in-external-directory-on-local-file-system-and-bucket-on-aws-s3}
filestore.container =文件

＃以下配置仅适用于云存储（AWS S3）{＃以下配置适用于cloud-storage-only-aws-s3}

＃数据中心位置。可选，但出于性能原因建议使用。 {＃datacenter-location-optional-recommended-for-performance-reasons}
filestore.location = eu-west-1

＃AWS S3上的用户名/访问密钥{＃username-access-key-on-aws-s3}
filestore.identity = xxxx

＃AWS S3上的密码/密钥（敏感）{＃password-secret-key-on-aws-s3敏感}
filestore.secret = xxxx
```

此配置是反映默认设置的示例，应为
根据您的需要进行了更改。换句话说，如果
您计划使用默认值。如果您想使用外部
提供者，需要定义最后一个属性块，以及
* provider *属性设置为受支持的提供者（仅当前）
AWS S3）。

> **注意**
>
>如果您在dhis.conf中配置了云存储，则上传的所有文件
>或系统生成的文件将使用云存储。

对于生产系统，文件存储的初始设置应为
被仔细考虑为在存储提供商之间移动文件，而
保持数据库引用的完整性可能很复杂。保持
请记住，文件存储的内容可能包含敏感内容，
以及完整的信息，并保护对文件夹以及
建议在生产中确保备份计划到位
实施。

> **注意**
>
> AWS S3是唯一受支持的提供商，但可能会有更多提供商
>将来添加，例如Google Cloud Store和Azure Blob存储。
>让我们知道您是否还有其他提供商的用例。

## Google服务帐户配置 { #install_google_service_account_configuration } 

<!--DHIS2-SECTION-ID:install_google_service_account_configuration-->

DHIS2可以连接到各种Google服务API。例如，
DHIS2 GIS组件可以利用Google Earth Engine API加载地图
层。为了提供API访问令牌，您必须设置一个Google
服务帐户并创建私钥：

  - 创建一个Google服务帐户。请咨询[Google身份
    平台]（https://developers.google.com/identity/protocols/OAuth2ServiceAccount#overview）
    文档。

  - 访问[Google云控制台]（https://console.cloud.google.com）
    并转到API Manager \>凭据\>创建凭据\>
    服务帐户密钥。选择您的服务帐户和JSON作为密钥
    键入并单击创建。

  - 将JSON密钥重命名为* dhis-google-auth.json *。

下载密钥文件后，将* dhis-google-auth.json *文件放入
DHIS2 \ _HOME目录（与* dhis.conf *文件相同的位置）。
例如，此位置可能是：

    /home/dhis/config/dhis-google-auth.json

## LDAP配置 { #install_ldap_configuration } 

<!--DHIS2-SECTION-ID:install_ldap_configuration-->

DHIS2能够使用LDAP服务器进行用户身份验证。
对于LDAP身份验证，要求在
每个LDAP条目的DHIS2数据库。 DHIS2用户将用于代表
权限/用户角色。

要设置LDAP身份验证，您需要配置LDAP服务器URL，
管理员用户以及LDAP搜索库和搜索过滤器。这个
配置应在主DHIS 2配置文件中完成
（dhis.conf）。 LDAP用户或条目通过区分来标识
名称（此后为DN）。一个示例配置如下所示：

```属性
＃LDAP服务器URL {＃ldap-server-url}
ldap.url = ldaps：//domain.org：636

＃LDAP管理器条目专有名称{＃ldap-manager-entry-distinguished-name}
ldap.manager.dn = cn = johndoe，dc = domain，dc = org

＃LDAP管理器条目密码{＃ldap-manager-entry-password}
ldap.manager.password = xxxx

＃LDAP基本搜索{＃ldap-base-search}
ldap.search.base = dc = domain，dc = org

＃LDAP搜索过滤器{＃ldap-search-filter}
ldap.search.filter =（cn = {0}）
```

LDAP配置属性说明如下：

  - * ldap.url：*要对其进行身份验证的LDAP服务器的URL
    反对。强烈建议使用SSL /加密，以便
    确保身份验证的安全性。例如，URL是
    * ldaps：//domain.org：636 *，其中ldaps是指协议，
    * domain.org *是指域名或IP地址，* 636 *
    指端口（LDAPS默认为636）。

  - * ldap.manager.dn：*绑定到LDAP管理器用户是必需的
    用于用户身份验证过程的LDAP服务器。这个性质
    指该条目的DN。即这不是将
    登录DHIS2时需要认证，而不是
    绑定到LDAP服务器以进行身份验证。

  - * ldap.manager.password：* LDAP管理器用户的密码。

  - * ldap.search.base：*的搜索基础或专有名称
    搜索基础对象，它定义目录中的位置
    LDAP搜索从此开始。

  - * ldap.search.filter：*用于匹配条目中DN的过滤器
    LDAP目录。 {0}变量将由DHIS2替换
    用户名，或者为用户定义的LDAP标识符
    使用提供的用户名。

DHIS2将使用提供的用户名/密码并尝试进行身份验证
针对LDAP服务器条目，然后从中查找用户角色/权限
相应的DHIS2用户。这意味着用户必须具有
LDAP目录中的匹配条目以及DHIS2用户，以便
登录。

在身份验证期间，DHIS2将尝试使用以下方式绑定到LDAP服务器：
配置的LDAP服务器URL以及管理员DN和密码。一旦
绑定完成后，它将使用以下命令在目录中搜索条目
配置的LDAP搜索库和搜索过滤器。

在配置的过滤器中，{0}变量将被替换为
应用过滤器。默认情况下，它将被提供的
用户名。您还可以在相关的
DHIS2用户帐户。可以通过DHIS2用户模块用户来完成
通过设置“ LDAP标识符”，在添加或编辑屏幕中找到界面
属性。设置后，LDAP标识符将替换为{0}
过滤器中的变量。 LDAP通用名称时，此功能很有用
不适合或由于某种原因不能用作DHIS2用户名。

## 加密配置 { #install_encryption_configuration } 

<!--DHIS2-SECTION-ID:install_encryption_configuration-->

DHIS2允许对数据进行加密。但是，这需要一些额外的费用
设定。

### Java密码学扩展 { #install_java_cryptography_extension } 

 <!--DHIS2-SECTION-ID:install_java_cryptography_extension-->

DHIS2使用归类为强的加密算法，因此
需要* Java密码术扩展（JCE）无限强度
要安装的管辖权策略文件*。这些文件可以安装
通过以下步骤：

1.  下载的JCE无限力量管辖权政策文件，用于
    您从Oracle网站获得的Java版本的Java。向下滚动到
    “ Java密码学扩展（JCE）的无限强度
    管辖策略文件”部分。
    的文件与您的Java版本匹配
    服务器。

    [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.htm)

2.  解压缩下载的ZIP存档。它包含两个JAR文件：
    * local \ _policy.jar *和* US \ _export \ _policy.jar *。

3.  找到您的Java安装的JDK目录。从那里，
    导航到* jre / security *目录。在Ubuntu上通常
    在* / usr / lib / jvm / java-8-oracle / jre / lib / security *中找到。

4.  （可选）备份您现有的* local \ _policy.jar *和
    * US \ _export \ _policy.jar *，以备日后还原时使用。

5.  将* local \ _policy.jar *和* US \ _export \ _policy.jar *文件复制到
    安全文件夹。您现在应该拥有以下文件
    完成安装。记住重启你的servlet
    使其生效的容器。

        /usr/lib/jvm/java-8-oracle/jre/lib/security/local_policy.jar
        /usr/lib/jvm/java-8-oracle/jre/lib/security/US_export_policy.jar

### 密码设定 { #install_password_configuration } 

 <!--DHIS2-SECTION-ID:install_password_configuration-->

为了提供加密算法的安全性，您必须设置一个
通过* dhis.conf *配置文件输入密码
* encryption.password *属性：

```属性
加密密码= xxxx
```

* encryption.password *属性是加密时使用的密码
和解密数据库中的数据。请注意，密码不得为
一旦设置好并且数据已经加密，就可以更改
然后不再被解密。

密码必须至少为** 24个字符长**。混合数字
推荐使用大小写字母。加密密码
必须保密。

### 加密注意事项 { #install_considerations_for_encryption } 

 <!--DHIS2-SECTION-ID:install_considerations_for_encryption-->

*警告：*如果无法恢复加密的数据，则
加密密码丢失或更改。相反，加密
如果密码被泄露，则不提供任何安全性。因此，很棒
应考虑将密码存储在安全的地方。

## 读取副本数据库配置 { #install_read_replica_configuration } 

<!--DHIS2-SECTION-ID:install_read_replica_configuration-->

DHIS 2允许利用主数据库的只读副本
（主DHIS 2数据库）。只读副本的目的是为了增强
数据库读取查询的性能并扩展容量
超越了单个数据库的限制。大量读取操作，例如
因为分析和事件查询将从中受益。

The configuration requires that you have created one or more replicated
instances of the master DHIS 2 database. PostgreSQL achieves this
through a concept referred to as *streaming replication*. Configuring
read replicas for PostgreSQL is not covered in this guide.

只读副本可以在* dhis.conf *配置文件中定义。您
每个DHIS 2实例最多可以指定5个只读副本。每个读取副本
用1到5之间的数字表示。JDBC连接URL必须
每个副本定义。可以指定用户名和密码。如果
否，将使用主数据库的用户名和密码
代替。

* dhis.conf *中只读副本的配置如下所示。
每个副本都使用配置键* readN *前缀指定，
其中N表示副本号。

```属性
＃读取副本1配置{＃read-replica-1-configuration}

＃数据库连接URL，用户名和密码{＃database-connection-url-username-and-password}
read1.connection.url = jdbc：postgresql：//127.0.0.11/dbread1
read1.connection.username = dhis
read1.connection.password = xxxx

＃读取副本2的配置{＃read-replica-2-configuration}

＃数据库连接URL，用户名和密码{＃database-connection-url-username-and-password}
read2.connection.url = jdbc：postgresql：//127.0.0.12/dbread2
read2.connection.username = dhis
read2.connection.password = xxxx

＃读取副本3配置{＃read-replica-3-configuration}

＃数据库连接URL，回退到主用户名和密码{＃database-connection-url-fallback-to-master-for-username-and-password}
read3.connection.url = jdbc：postgresql：//127.0.0.13/dbread3
```

请注意，您必须重新启动servlet容器才能更改
生效。 DHIS 2将自动在
读取副本。副本的顺序没有任何意义。

## Web服务器群集配置 { #install_web_server_cluster_configuration } 

<!--DHIS2-SECTION-ID:install_web_server_cluster_configuration-->

本节介绍如何设置DHIS 2应用程序以在
簇。

### 群集概述 { #install_cluster_configuration_introduction } 

<!--DHIS2-SECTION-ID:install_cluster_configuration_introduction-->

集群是提高系统可扩展性和可用性的常用技术。
可用性的常用技术。集群是指设置多个网络服务器，如
Tomcat 实例，让它们为一个应用程序服务。集群
可以*扩展*应用程序，即可以添加新的服务器来提高性能。
以提高性能。它还允许*高
可用性*，因为系统可以容忍实例宕机，而不会
使用户无法访问系统。

有一些方面需要配置才能运行DHIS 2
在集群中。

* 每个DHIS 2实例必须指定DHIS 2实例的其他成员
* dhis.conf *中的群集。

* 必须安装Redis数据存储，并且必须提供连接信息
为* dhis.conf *中的每个DHIS 2应用程序实例提供。

* DHIS 2 实例和服务器必须共享相同的 *files* 文件夹，用于 
应用程序和文件上传，通过* AWS S3云文件存储*选项
或共享的网络驱动器。

* 必须将负载平衡器（如nginx）配置为分发Web请求
跨集群实例。

### DHIS 2实例群集配置 { #install_cluster_configuration } 

<!--DHIS2-SECTION-ID:install_cluster_configuration-->

设置多个Tomcat实例时，需要进行
实例彼此了解。这种认识将使DHIS 2能够保持
本地数据（休眠）同步并处于一致状态。
在一个实例上完成更新后，在另一个实例上缓存
必须通知实例，以便实例可以无效并避免
变得陈旧。

DHIS 2群集设置基于每个设备的手动配置
实例。对于每个DHIS 2实例，必须指定公共
*主机名*以及其他参与实例的主机名
在集群中。

使用* cluster.hostname *指定服务器的主机名
配置属性。参与其中的其他服务器
使用* cluster.members *配置指定集群
属性。该属性需要一个逗号分隔值列表，其中
每个值的格式均为* host：port *。

主机名必须对网络上的参与服务器可见
为集群工作。您可能需要允许传入和
防火墙中配置的端口号上的传出连接。

使用* cluster.cache.port *指定服务器的端口号
配置属性。用于注册表接收的远程对象端口
调用使用* cluster.cache.remote.object.port *指定。指定
端口号通常仅在具有多个群集时才有用
同一台服务器/虚拟机上的实例，或者如果需要
明确指定要使用的端口，以便在
防火墙。在单独的服务器/虚拟机上运行群集实例时
机器，通常适合使用默认端口号并省略
端口配置属性。如果省略，则将4001分配为
监听器端口和一个随机空闲端口将被分配为远程端口
对象端口。

下面介绍了两个Web服务器群集的示例设置。
对于主机名为* 193.157.199.131 *的*服务器A *，可以执行以下操作
在* dhis.conf *中指定：

```属性
＃服务器A的群集配置{＃cluster-configuration-for-server-a}

＃此Web服务器的主机名{＃hostname-for-this-web-server}
cluster.hostname = 193.157.199.131

＃可以省略用于缓存侦听器的端口{＃可以省略用于缓存侦听器的端口}
cluster.cache.port = 4001
cluster.cache.remote.object.port = 5001

＃参与集群的Host：port列表{#hostlist参与集群的列表}
cluster.members = 193.157.199.132:4001
```

对于主机名为* 193.157.199.132 *的*服务器B *，可以执行以下操作
在* dhis.conf *中指定（注意如何省略端口配置）：

```属性
＃服务器B的群集配置{＃cluster-configuration-for-server-b}

＃此Web服务器的主机名{＃hostname-for-this-web-server}
cluster.hostname = 193.157.199.132

＃参与群集的服务器列表{＃-list-of-servers-participating-in-cluster}
cluster.members = 193.157.199.131:4001
```

您必须重新启动每个Tomcat实例，以使更改生效。
现在已使两个实例相互了解，DHIS 2将
确保其缓存保持同步。

### Redis共享数据存储集群配置 { #install_cluster_configuration_redis } 

<!--DHIS2-SECTION-ID:install_cluster_configuration_redis-->

在集群设置中，* Redis *实例是必需的，它将处理
共享用户会话，应用程序缓存和群集节点领导力。

为了获得最佳性能，需要在Redis Server中启用_generic命令_和_expired events_的* Redis键空间事件*。如果您使用的是受云平台管理的Redis服务器（例如，用于Redis的AWS ElastiCache或用于Redis的Azure缓存），则必须使用相应的云接口启用键空间事件通知。如果要设置独立的Redis服务器，则可以通过添加或取消注释以下行来在* redis.conf *文件中启用键空间事件通知：

```
notify-keyspace-events Egx
```

如果* redis.enabled *配置，DHIS2将连接到Redis
* dhis.conf *中的property设置为* true *以及以下属性：

- * redis.host *：指定Redis服务器在何处运行。默认为* localhost *。必选

- * redis.port *：指定Redis服务器正在侦听的端口。默认为* 6379 *。可选的。

- * redis.password *：指定身份验证密码。如果不需要密码，可以将其留空。

- * redis.use.ssl *：指定Redis服务器是否启用了SSL。默认为false。可选的。默认为* false *。

启用Redis后，DHIS2将自动分配
运行实例作为集群的领导者。领导者实例将
用于执行应运行的作业或计划任务
仅由一个实例。您可以选择配置
* dhis.conf *中的* leader.time.to.live.minutes *属性以设置
领导人选举经常需要举行。它也给
指示另一个实例接管需要多长时间
在上一个领导者关闭/崩溃后作为领导者。的
默认值为2分钟。请注意，在集群中分配领导者
仅在启用Redis的情况下完成。 * dhis.conf *的示例片段
启用Redis和领导者选举时间的配置文件
配置如下所示。

```属性
＃Redis配置{＃redis-configuration}

redis.enabled = true

redis.host = 193.158.100.111

redis.port = 6379

redis.password = <your password>

redis.use.ssl = false

＃可选，默认为2分钟{＃optional-defaults-to-2-minutes}
Leader.time.to.live.minutes = 4
```

### 文件文件夹配置 { #files-folder-configuration } 

DHIS 2将在应用程序本身之外存储几种类型的文件，
例如应用程序，保存在数据输入中的文件和用户头像。部署时
在群集中，这些文件的位置必须在所有实例之间共享。
在本地文件系统上，位置为：

```
{DHIS2_HOME} /文件
```

Here, `DHIS2_HOME` refers to the location of the DHIS 2 configuration file
as specifiec by the DHIS 2 environment variable, and `files` is the file
folder immediately below.

有两种方法可以实现共享位置：

* 使用* AWS S3云文件存储*选项。文件将存储在
S3存储桶，由群集中的所有DHIS 2实例自动共享。
请参阅*文件存储配置*部分以获取指导。
* 设置一个在所有DHIS 2实例之间共享的共享文件夹，并且
集群中的服务器。在Linux上，可以使用* NFS *（网络文件系统）来实现
这是一个分布式文件系统协议。注意只有`files`
subfolder under `DHIS2_HOME` should be shared, not the parent folder. 

### 负载均衡器配置 { #install_load_balancing } 

<!--DHIS2-SECTION-ID:install_load_balancing-->

设置了Tomcat实例集群，这是路由的常用方法
传入Web请求到参与
集群正在使用*负载均衡器*。负载均衡器将确保
负载在群集实例之间平均分配。它也会
检测实例是否不可用，如果是，则停止例程
对该实例的请求，而是使用其他可用实例。

负载平衡可以通过多种方式实现。一个简单的方法是
使用* nginx *，在这种情况下，您将定义一个* upstream *元素，
枚举后端实例的位置，以后再使用
* proxy *位置块中的元素。

```text
http {

  # Upstream element with sticky sessions

  upstream dhis_cluster {
    ip_hash;
    server 193.157.199.131:8080;
    server 193.157.199.132:8080;
  }

  # Proxy pass to backend servers in cluster

  server {
    listen 80;

    location / {
      proxy_pass   http://dhis_cluster/;
    }
  }
}
```

DHIS 2在一定程度上将用户会话的服务器端状态保持不变。
使用“粘性会话”是避免复制
服务器会话状态，方法是将请求从同一客户端路由到
同一台服务器。上游元素中的* ip \ _hash *指令可确保
这个。

请注意，为简洁起见，已省略了几条说明
上面的例子。请查阅反向代理部分以获取详细指南。

## Analytics缓存配置 { #install_analytics_cache_configuration } 

<!--DHIS2-SECTION-ID:install_analytics_cache_configuration-->

DHIS 2支持用于所有分析Web应用程序的分析API响应的服务器端缓存。该缓存位于DHIS 2应用程序内，因此受到DHIS 2身份验证和安全层的保护。您可以配置以秒为单位的缓存条目的到期时间。要启用缓存，您可以在`dhis.conf`中定义`analytics.cache.expiration`属性。下面的示例启用了缓存并将过期设置为一小时。

```属性
analytics.cache.expiration = 3600
```

## 在启动时启动Tomcat { #install_starting_tomcat_boot_time } 

 <!--DHIS2-SECTION-ID:install_starting_tomcat_boot_time-->

In certain situations a server might reboot unexpectedly. It is hence
preferable to have Tomcat start automatically when the server starts. To
achieve that the first step is to create init scripts. Create a new file
called `tomcat` and paste the below content into it (adjust the HOME
variable to your environment):

```sh
#!/bin/sh { #binsh } 
#Tomcat init script { #tomcat-init-script } 

HOME=/home/dhis/tomcat/bin

case $1 in
start)
        sh ${HOME}/startup.sh
        ;;
stop)
        sh ${HOME}/shutdown.sh
        ;;
restart)
        sh ${HOME}/shutdown.sh
        sleep 5
        sh ${HOME}/startup.sh
        ;;
esac
exit 0
```

将脚本移动到init脚本目录中，并使它们可执行
调用：

    须藤mv tomcat /etc/init.d
    须藤chmod + x /etc/init.d/tomcat

接下来确保tomcat初始化脚本将在系统运行期间被调用
启动和关闭：

    sudo /usr/sbin/update-rc.d -f tomcat默认值81

Tomcat will now be started at system startup and stopped at system
shutdown. If you later need to revert this you can replace `defaults`
with `remove` and invoke the above commands again.

## 反向代理配置 { #install_reverse_proxy_configuration } 

<!--DHIS2-SECTION-ID:install_reverse_proxy_configuration-->

反向代理是代表服务器运行的代理服务器。使用
反向代理与Servlet容器结合使用是可选的，但
有很多优点：

  - 可以将请求映射并传递到多个servlet容器。
    这提高了灵活性，并使其更易于运行
    同一台服务器上的DHIS2实例。这也使得
    在不影响客户端的情况下更改内部服务器设置。

  - DHIS2应用程序可以作为非root用户在端口上运行
    不同于80，这减少了会话的后果
    劫持。

  - 反向代理可以充当单个SSL服务器并进行配置
    检查恶意内容请求，日志请求和
    响应并提供不敏感的错误消息，这将
    提高安全性。

### 基本的Nginx设置 { #install_basic_nginx_setup } 

<!--DHIS2-SECTION-ID:install_basic_nginx_setup-->

我们建议使用[nginx]（http://www.nginx.org）作为反向代理，因为
其低内存占用和易用性。要安装，请调用
以下：

    须藤apt-get install nginx

现在可以使用以下命令启动，重新加载和停止nginx
命令：

    sudo /etc/init.d/nginx开始
    须藤/etc/init.d/nginx重新加载
    sudo /etc/init.d/nginx停止

现在我们已经安装了nginx，我们将继续配置
定期将请求代理到我们的Tomcat实例，我们假设
在* http：// localhost：8080 *上运行。要配置nginx，您可以打开
通过调用以下配置文件：

    须藤nano /etc/nginx/nginx.conf

nginx配置围绕代表以下内容的块层次结构构建
http，服务器和位置，其中每个块都从父级继承设置
块。以下代码段将nginx配置为通过代理
（重定向）来自端口80的请求（该端口是nginx监听的端口
默认情况下）到我们的Tomcat实例。包括以下配置
在nginx.conf中：

```text
http {
  gzip on; # Enables compression, incl Web API content-types
  gzip_types
    "application/json;charset=utf-8" application/json
    "application/javascript;charset=utf-8" application/javascript text/javascript
    "application/xml;charset=utf-8" application/xml text/xml
    "text/css;charset=utf-8" text/css
    "text/plain;charset=utf-8" text/plain;

  server {
    listen               80;
    client_max_body_size 10M;

    # Proxy pass to servlet container

    location / {
      proxy_pass                http://localhost:8080/;
      proxy_redirect            off;
      proxy_set_header          Host               $host;
      proxy_set_header          X-Real-IP          $remote_addr;
      proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto  http;
      proxy_buffer_size         128k;
      proxy_buffers             8 128k;
      proxy_busy_buffers_size   256k;
      proxy_cookie_path         ~*^/(.*) "/$1; SameSite=Lax";
    }
  }
}
```

现在，您可以通过* http：// localhost *访问DHIS2实例。自从
已经设置了反向代理，我们可以通过使Tomcat来提高安全性
只监听本地连接。在* / conf / server.xml *中，您可以添加一个
连接器元素的* address *属性值为* localhost *
对于HTTP 1.1像这样：

```xml
<Connector address="localhost" protocol="HTTP/1.1" />
```

### 使用nginx {#install_enabling_ssl_on_nginx}启用SSL { #install_enabling_ssl_on_nginx } 

<!--DHIS2-SECTION-ID:install_enabling_ssl_on_nginx-->

为了提高安全性，建议配置服务器
运行DHIS2以通过加密连接与客户端进行通信
并使用受信任的证书向客户端标识自己。这个可以
通过SSL（一种加密通信协议）来实现
在TCP / IP上运行。首先，安装所需的* openssl *库：

    须藤apt-get install openssl

要将 nginx 配置为使用 SSL，您需要一个正确的 SSL 证书
来自 SSL 提供商。证书的费用差异很大，具体取决于
关于加密强度。来自 [Rapid SSL] 的经济实惠的证书
在线](http://www.rapidsslonline.com) 应该可以满足大多数目的。到
生成 CSR（证书签名请求），您可以调用
下面的命令。当系统提示您输入*通用名称*时，请输入
您所在网站的完全限定域名
    确保。

    openssl req -new -newkey rsa：2048 -nodes -keyout server.key -out server.csr

收到证书文件（.pem或.crt）后，您将
需要将其与生成的server.key文件放在一起
nginx可以到达的位置。一个好的位置可以是
与您的nginx.conf文件所在的目录相同。

下面是一个nginx服务器块，其中证书文件被命名
server.crt和server.key。由于SSL连接通常在端口上进行
443（HTTPS）我们将在该端口（443）上的请求传递到DHIS2实例
在* http：// localhost：8080 *上运行
所有连接到端口80的请求并强制使用HTTPS / SSL。这个
这也是必要的，因为DHIS2在内部使用了大量重定向
必须将其传递以使用HTTPS。记住要更换
* \ <server-ip\> *和服务器的IP。这些块应该替换
上一节中的一个。

```text
http {
  gzip on; # Enables compression, incl Web API content-types
  gzip_types
    "application/json;charset=utf-8" application/json
    "application/javascript;charset=utf-8" application/javascript text/javascript
    "application/xml;charset=utf-8" application/xml text/xml
    "text/css;charset=utf-8" text/css
    "text/plain;charset=utf-8" text/plain;

  # HTTP server - rewrite to force use of SSL

  server {
    listen     80;
    rewrite    ^ https://<server-url>$request_uri? permanent;
  }

  # HTTPS server

  server {
    listen               443 ssl;
    client_max_body_size 10M;

    ssl                  on;
    ssl_certificate      server.crt;
    ssl_certificate_key  server.key;

    ssl_session_cache    shared:SSL:20m;
    ssl_session_timeout  10m;

    ssl_protocols              TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers                RC4:HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers  on;

    # Proxy pass to servlet container

    location / {
      proxy_pass                http://localhost:8080/;
      proxy_redirect            off;
      proxy_set_header          Host               $host;
      proxy_set_header          X-Real-IP          $remote_addr;
      proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto  https;
      proxy_buffer_size         128k;
      proxy_buffers             8 128k;
      proxy_busy_buffers_size   256k;
      proxy_cookie_path         ~*^/(.*) "/$1; SameSite=Lax";
    }
  }
}
```

请注意最后一个`https`标头值，该值是通知
servlet容器，该请求通过HTTPS发出。为了
Tomcat还需要使用HTTPS正确生成`Location` URL头
在Tomcat`server.xml`文件中向连接器添加其他两个参数：

```xml
<Connector scheme="https" proxyPort="443" />
```

### 使用Nginx启用缓存 { #install_enabling_caching_ssl_nginx } 

<!--DHIS2-SECTION-ID:install_enabling_caching_ssl_nginx-->

要求提供报告，图表，地图和其他与分析相关的资源
通常会花费一些时间来响应，并且可能会占用大量服务器
资源。为了缩短响应时间，请减少
服务器并隐藏潜在的服务器停机时间，我们可以引入缓存代理
在我们的服务器设置中。缓存的内容将存储在目录中
/ var / cache / nginx，最多将分配250 MB的存储空间。 Nginx的
将自动创建此目录。

```text
http {
  ..
  proxy_cache_path  /var/cache/nginx  levels=1:2  keys_zone=dhis:250m  inactive=1d;


  server {
    ..

    # Proxy pass to servlet container and potentially cache response

    location / {
      proxy_pass                http://localhost:8080/;
      proxy_redirect            off;
      proxy_set_header          Host               $host;
      proxy_set_header          X-Real-IP          $remote_addr;
      proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto  https;
      proxy_buffer_size         128k;
      proxy_buffers             8 128k;
      proxy_busy_buffers_size   256k;
      proxy_cookie_path         ~*^/(.*) "/$1; SameSite=Lax";
      proxy_cache               dhis;
    }
  }
}
```

> **重要**
>
>请注意，服务器端缓存会缩短DHIS2安全性
>从某种意义上说是功能，这些请求命中了服务器端缓存
>将直接从DHIS2控制范围之外的缓存中提供
>和servlet容器。这意味着请求URL可以是
>猜测并由未经授权的用户从缓存中检索报告。
>因此，如果您捕获敏感信息，请设置服务器端
>不建议使用缓存。

### 使用Nginx进行速率限制 { #install_rate_limiting } 

<!--DHIS2-SECTION-ID:install_rate_limiting-->

DHIS 2中的某些Web API调用,如`analytics` API,是计算密集型的。因此，最好对这些API进行速率限制，以允许系统的所有用户充分利用服务器资源。速率限制可以通过`nginx`实现。有多种实现速率限制的方法，这旨在记录基于nginx的方法。

下面的 nginx 配置将限制 `analytics` Web API 的速率，并在 *http* 和 *location* 块级别具有以下元素（为了简洁起见，缩短了配置）：

```text
http {
  ..
  limit_req_zone $binary_remote_addr zone=limit_analytics:10m rate=5r/s;

  server {
    ..

    location ~ ^/api/(\d+/)?analytics(.*)$ {
      limit_req    zone=limit_analytics burst=20;
      proxy_pass   http://localhost:8080/api/$1analytics$2$is_args$args;
      ..
    }
  }
}
```

配置的各个元素可以描述为：

- * limit_req_zone $ binary_remote_addr *：速率限制是针对每个请求IP进行的。
- * zone = limit_analytics：20m *：Analytics API的速率限制区域，最多可容纳10 MB的请求IP地址。
- * rate = 20r / s *：每个IP每秒被授予5个请求。
- *location ~ ^/api/(\d+/)?analytics(.\*)$*：对分析 API 端点的请求受到速率限制。
- *burst=20*：最多 20 个请求的突发将排队等候，并在稍后时间提供服务；更多请求将导致`503`。

有关完整说明，请查阅[nginx文档]（https://www.nginx.com/blog/rate-limiting-nginx/）。

### 有关SSL的其他资源 { #install_additional_resources_ssl } 

 <!--DHIS2-SECTION-ID:install_additional_resources_ssl-->

以上说明的配置应视为绝对配置
为了建立一个安全的服务器最小。但是，加密
方法不断更新，因此实施者
管理自己的服务器，显示确保服务器处于
定期更新以最新的安全补丁（尤其是HTTP）
服务器和SSL库）。

上还有许多其他的教程和信息。
网络，包括有用的[逐步
指南]（https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04）
使用免费的[允许加密SSL证书
系统]（https://letsencrypt.org/）。定期进行也可能有用
使用[this测试您的SSL安全性
网站]（https://www.ssllabs.com/ssltest/）。

### 使用Nginx使资源可用 { #install_making_resources_available_with_nginx } 

<!--DHIS2-SECTION-ID:install_making_resources_available_with_nginx-->

在某些情况下，希望公开发布某些资源
无需身份验证即可在Web上使用。一个例子是
当您想在Web API中进行与数据分析相关的资源时
在Web门户中可用。以下示例将允许访问
基本的图表，地图，报告，报告表和文档资源
通过将* Authorization * HTTP标头注入
请求。它将从请求中删除Cookie标头，
从响应中获取Set-Cookie标头，以避免更改
当前登录的用户。建议为此创建一个用户
目的仅给出所需的最低权限。授权
值可以通过Base64编码，并在用户名后附加一个
冒号和密码，并以“ Basic”作为前缀，更准确地说是“ Basic”
base64 \ _encode（username：password）“。它将检查使用的HTTP方法
用于请求并返回* 405方法不允许*（如果不是GET，则为其他方法）
检测到。

为此类公共用户设置一个单独的域可能是有利的
使用这种方法时。这是因为我们不想更改
已登录用户访问公共帐户时的凭据
资源。例如，当您的服务器部署在somedomain.com上时，
您可以在api.somedomain.com上设置专用的子域，并指向URL
从您的门户到此子域。

```text
http {
  ..

  server {
    listen       80;
    server_name  api.somedomain.com;

    location ~ ^/(api/(charts|chartValues|reports|reportTables|documents|maps|organisationUnits)|dhis-web-commons/javascripts|images|dhis-web-commons-ajax-json|dhis-web-mapping|dhis-web-visualizer) {
    if ($request_method != GET) {
        return 405;
      }

      proxy_pass         http://localhost:8080;
      proxy_redirect     off;
      proxy_set_header   Host               $host;
      proxy_set_header   X-Real-IP          $remote_addr;
      proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Proto  http;
      proxy_set_header   Authorization      "Basic YWRtaW46ZGlzdHJpY3Q=";
      proxy_set_header   Cookie             "";
      proxy_hide_header  Set-Cookie;
    }
  }
}
```

### 使用Apache进行基本的反向代理设置 { #install_basic_reverse_proxy_setup_with_apache } 

 <!--DHIS2-SECTION-ID:install_basic_reverse_proxy_setup_with_apache-->

Apache HTTP服务器是一种流行的HTTP服务器。取决于您的确切
部署的性质，您可能需要使用Apache作为反向代理
您的DHIS2服务器。在本节中，我们将描述如何实现
使用Apache进行简单的反向代理设置。

> **重要**
>
>使用nginx作为DHIS2和
>您不应尝试在同一位置上同时安装nginx和Apache
>服务器。如果您已安装nginx，请忽略此部分。

首先，我们需要为Apache和Windows安装一些必要的程序模块。
启用模块。

    须藤apt-get install apache2 libapache2-mod-proxy-html libapache2-mod-jk
    a2enmod代理proxy_ajp proxy_connect

让我们定义一个AJP连接器，Apache HTTP服务器将使用该连接器
连接到Tomcat。 Tomcat`server.xml`文件应位于
在Tomcat安装目录的/ conf /目录中。确保这行是
您可以将端口设置为您喜欢的任何未使用的端口。

```xml
<Connector port="8009" protocol="AJP/1.3" redirectPort="8443" />
```

现在，我们需要对Apache HTTP服务器进行调整
将在端口80上答复请求并将它们传递给Tomcat服务器
通过AJP连接器。编辑档案
`/ etc / apache2 / mods-enabled / proxy.conf`，看起来像例子
下面。确保配置文件中定义的端口匹配
一个来自Tomcat。

``apache_conf
<IfModule mod_proxy.c>

代理请求关闭
ProxyPass /dhis ajp://localhost:8009/dhis
ProxyPassReverse /dhis ajp://localhost:8009/dhis

<Location "/dhis">
  订单允许、拒绝
  允许所有
</Location>
</IfModule>
````

现在，您可以重新启动Tomcat和Apache HTTPD服务器以及DHIS2
实例应该在http：// * myserver * / dhis上可用，其中* myserver *
是服务器的主机名。

### 使用Apache进行SSL加密 { #install_ssl_encryption_with_apache } 

 <!--DHIS2-SECTION-ID:install_ssl_encryption_with_apache-->

使用Apache和先前描述的反向代理设置
部分，我们可以轻松实现之间的数据加密传输
客户端和服务器通过HTTPS。本节将介绍如何使用
自签名证书，尽管在以下情况下可以使用相同的过程
您也有完全签名的证书。

首先（以根用户身份），生成必要的私钥文件和CSR
（证书签名请求）

    mkdir / etc / apache2 / ssl
    cd / etc / apache2 / ssl
    openssl genrsa -des3 -out server.key 1024
    openssl req-新-key server.key -out server.csr

我们需要从密钥中删除密码，否则Apache将不会
能够使用它。

    cp server.key server.key.org
    openssl rsa -in server.key.org -out server.key

接下来，生成一个自签名证书，该证书对一个证书有效
年。

    openssl x509 -req -days 365 -in server.csr -signkey \ server.key -out server.crt

现在，通过启用SSL模块并创建一个
默认网站。

    a2enmod ssl
    a2ensite 默认 ssl

现在，我们需要编辑default-ssl（位于
`/ etc / apache2 / sites-enabled / default-ssl`）文件以启用
Apache的SSL传输功能。

``apache_conf
<VirtualHost *:443>
    服务器管理员 wemaster@mydomain.org
    SSL 引擎开启
    SSLCertificateFile /etc/apache2/ssl/server.crt
    SSLCertificateKeyFile /etc/apache2/ssl/server.key
    ...
````

确保此文件的\ *：80部分更改为端口\ *：443，
这是默认的SSL端口。另外，请务必更改ServerAdmin
到网站管理员的电子邮件。最后，我们需要确保主机名
在/ etc / hosts中正确设置。在“ localhost”行下，
确保添加服务器的IP地址和域名。

    127.0.0.1本地主机
    XXX.XX.XXX.XXX foo.mydomain.org

现在，只需重新启动Apache，您应该可以查看
https://foo.mydomain.org/dhis。

    /etc/init.d/apache2重新启动

## DHIS2配置参考 { #install_dhis2_configuration_reference } 

<!--DHIS2-SECTION-ID:install_dhis2_configuration_reference-->

下面介绍了* dhis.conf *配置文件的完整配置选项集。配置文件应放置在* DHIS2 \ _HOME *环境变量指向的目录中。

> **注意**
>
>您不应尝试直接使用此配置文件，而应将其用作可用配置选项的参考。许多属性是可选的。

```properties
# ---------------------------------------------------------------------- { #- } 
# Database connection for PostgreSQL [Mandatory] { #database-connection-for-postgresql-mandatory } 
# ---------------------------------------------------------------------- { #- } 

# Hibernate SQL dialect { #hibernate-sql-dialect } 
connection.dialect = org.hibernate.dialect.PostgreSQLDialect

# JDBC driver class { #jdbc-driver-class } 
connection.driver_class = org.postgresql.Driver

# Database connection URL { #database-connection-url } 
connection.url = jdbc:postgresql:dhis2

# Database username { #database-username } 
connection.username = dhis

# Database password (sensitive) { #database-password-sensitive } 
connection.password = xxxx

# Database schema behavior, can be 'validate', 'update', 'create', 'create-drop' { #database-schema-behavior-can-be-validate-update-create-create-drop } 
connection.schema = update

# Max size of connection pool (default: 40) { #max-size-of-connection-pool-default-40 } 
# connection.pool.max_size = 40 { #connectionpoolmax_size-40 } 

# ---------------------------------------------------------------------- { #- } 
# Server [Mandatory] { #server-mandatory } 
# ---------------------------------------------------------------------- { #- } 

# Base URL to the DHIS 2 instance { #base-url-to-the-dhis-2-instance } 
server.base.url = https://play.dhis2.org/dev 

# Enable secure settings if system is deployed on HTTPS, can be 'off', 'on' { #enable-secure-settings-if-system-is-deployed-on-https-can-be-off-on } 
server.https = off

# ---------------------------------------------------------------------- { #- } 
# System [Optional] { #system-optional } 
# ---------------------------------------------------------------------- { #- } 

# System mode for database read operations only, can be 'off', 'on' { #system-mode-for-database-read-operations-only-can-be-off-on } 
system.read_only_mode = off

# Session timeout in seconds, default is 3600 { #session-timeout-in-seconds-default-is-3600 } 
system.session.timeout = 3600

# SQL view protected tables, can be 'on', 'off' { #sql-view-protected-tables-can-be-on-off } 
system.sql_view_table_protection = on

# ---------------------------------------------------------------------- { #- } 
# Encryption [Optional] { #encryption-optional } 
# ---------------------------------------------------------------------- { #- } 

# Encryption password (sensitive) { #encryption-password-sensitive } 
encryption.password = xxxx

# ---------------------------------------------------------------------- { #- } 
# File store [Optional] { #file-store-optional } 
# ---------------------------------------------------------------------- { #- } 

# File store provider, currently 'filesystem' and 'aws-s3' are supported { #file-store-provider-currently-filesystem-and-aws-s3-are-supported } 
filestore.provider = filesystem

# Directory / bucket name, folder below DHIS2_HOME on file system, 'bucket' on AWS S3 { #directory-bucket-name-folder-below-dhis2_home-on-file-system-bucket-on-aws-s3 } 
filestore.container = files

# Datacenter location (not required) { #datacenter-location-not-required } 
filestore.location = eu-west-1

# Public identity / username { #public-identity-username } 
filestore.identity = dhis2-id

# Secret key / password (sensitive) { #secret-key-password-sensitive } 
filestore.secret = xxxx

# ---------------------------------------------------------------------- { #- } 
# LDAP [Optional] { #ldap-optional } 
# ---------------------------------------------------------------------- { #- } 

# LDAP server URL { #ldap-server-url } 
ldap.url = ldaps://300.20.300.20:636

# LDAP manager user distinguished name { #ldap-manager-user-distinguished-name } 
ldap.manager.dn = cn=JohnDoe,ou=Country,ou=Admin,dc=hisp,dc=org

# LDAP manager user password (sensitive) { #ldap-manager-user-password-sensitive } 
ldap.manager.password = xxxx

# LDAP entry distinguished name search base { #ldap-entry-distinguished-name-search-base } 
ldap.search.base = dc=hisp,dc=org

# LDAP entry distinguished name filter { #ldap-entry-distinguished-name-filter } 
ldap.search.filter = (cn={0})

# ---------------------------------------------------------------------- { #- } 
# Node [Optional] { #node-optional } 
# ---------------------------------------------------------------------- { #- } 

# Node identifier, optional, useful in clusters { #node-identifier-optional-useful-in-clusters } 
node.id = 'node-1'

# ---------------------------------------------------------------------- { #- } 
# Analytics [Optional] { #analytics-optional } 
# ---------------------------------------------------------------------- { #- } 

# Analytics server-side cache expiration in seconds { #analytics-server-side-cache-expiration-in-seconds } 
analytics.cache.expiration = 3600

# ---------------------------------------------------------------------- { #- } 
# System monitoring [Optional] { #system-monitoring-optional } 
# ---------------------------------------------------------------------- { #- } 

# System monitoring URL { #system-monitoring-url } 
system.monitoring.url = 

# System monitoring username { #system-monitoring-username } 
system.monitoring.username = 

# System monitoring password (sensitive) { #system-monitoring-password-sensitive } 
system.monitoring.password = xxxx
```

## 应用程序日志记录 { #install_application_logging } 

<!--DHIS2-SECTION-ID:install_application_logging-->

本节介绍DHIS 2中的应用程序日志记录。

### 日志文件 { #log-files } 

DHIS2应用程序日志输出定向到多个文件和位置。首先，将日志输出发送到标准输出。 Tomcat Servlet容器通常将标准输出输出到“ logs”下的文件：

     <tomcat-dir> /logs/catalina.out

其次，将日志输出写入到DHIS2 \ _HOME环境变量所定义的DHIS2主目录下的“ logs”目录中。有一个主日志文件用于所有输出，而单独的日志文件用于各种输出
后台进程。主文件还包括后台进程日志。日志文件的上限为50 Mb，并且日志内容会连续添加。

     <DHIS2_HOME> /logs/dhis.log
     <DHIS2_HOME> /logs/dhis-analytics-table.log
     <DHIS2_HOME> /logs/dhis-data-exchange.log
     <DHIS2_HOME> /logs/dhis-data-sync.log

### 日志配置 { #log-configuration } 

为了覆盖默认的日志配置，您可以指定Java系统属性，其名称为* log4j.configuration *，并且该值指向类路径上的Log4j配置文件。如果要指向
文件系统（例如Tomcat外部）上的文件，您可以使用* file *前缀，例如像这样：

```属性
-Dlog4j.configuration =文件：/home/dhis/config/log4j.properties
```

可以设置Java系统属性，例如通过* JAVA \ _OPTS *环境变量或tomcat启动脚本中。

覆盖日志配置的第二种方法是在* dhis.conf *配置文件中指定日志记录属性。支持的属性是：

```属性
＃日志文件的最大大小，默认为'100MB'{＃max-size-for-log-files-default-is-100mb}
logging.file.max_size = 250MB

＃最大滚动日志归档文件数，默认为0 {＃max-number-of-rolling-log-archive-files-default-is-0}
logging.file.max_archives = 2
```

DHIS2最终将逐步淘汰到标准out / catalina.out的日志记录，因此建议依赖DHIS2 \ _HOME下的日志。

## 使用PostgreSQL数据库 { #install_working_with_the_postgresql_database } 

<!--DHIS2-SECTION-ID:install_working_with_the_postgresql_database-->

管理DHIS2实例时的常见操作是转储和
恢复数据库。假设您要转储数据库（副本）
从安装部分进行设置，您可以调用以下命令：

    pg_dump dhis2 -U dhis -f dhis2.sql

第一个参数（dhis2）引用数据库的名称。的
第二个参数（dhis）指向数据库用户。最后一个论点
（dhis2.sql）是副本的文件名。如果您要压缩
您可以立即复制文件：

    pg_dump dhis2 -U dhis | gzip> dhis2.sql.gz

要在另一个系统上还原此副本，您首先需要创建一个
如安装部分所述清空数据库。你还需要
如果您创建了压缩版本，则将副本打包。你可以
调用：

    psql -d dhis2 -U dhis -f dhis2.sql

## DHIS2实时设置 { #install_dhis2_live_setup } 

 <!--DHIS2-SECTION-ID:install_dhis2_live_setup-->

DHIS2 Live软件包非常易于安装和运行。它是
用于演示，供想要探索该系统的用户使用
对于小型离线安装，通常在地区或
设备。它仅需要Java Runtime Environment即可在所有环境中运行
浏览器（Internet Explorer 7及更低版本除外）。

要安装，请先从* http：//dhis2.org*下载DHIS2 Live，然后
将档案解压缩到任何位置。在Windows上，单击可执行文件
存档。在Linux上，调用startup.sh脚本。启动后
完成此过程，您的默认Web浏览器将自动指向
* http：// localhost：8082 *，可在其中访问该应用程序。一个系统
在大多数可以启动的操作系统上都可以访问任务栏菜单
并停止服务器并启动新的浏览器会话。请注意，如果
您已经在运行服务器，无需再次启动它，只需
从任务栏菜单打开应用程序。

DHIS2 Live在嵌入式Jetty Servlet容器和一个
嵌入式H2数据库。但是，它可以轻松配置为在
其他数据库系统，例如PostgreSQL。请阅读以上部分
关于服务器安装的数据库说明
组态。 * dhis.conf *配置文件位于
* conf *文件夹。切记重新启动Live软件包以更改
生效。默认情况下，服务器端口为8082。可以通过以下方式更改
修改位于以下位置的* jetty.port *配置文件中的值
* conf *目录。
