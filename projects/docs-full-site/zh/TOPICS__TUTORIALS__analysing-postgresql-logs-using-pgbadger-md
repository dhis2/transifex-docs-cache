---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/master/src/tutorials/analysing-postgresql-logs-using-pgbadger.md"
revision_date: '2021-06-14'
tags:
- 教程
title: 使用 pgbadger 分析 PostgreSQL 日志
---

# 使用 pgbadger 分析 PostgreSQL 日志 { #analysing-postgresql-logs-using-pgbadger }

**作为 DHIS 2 系统管理员，了解 PostgreSQL 数据库的情况非常重要。查看 PostgreSQL 日志将为您提供线索，但是仅使用文本编辑器浏览日志很困难，因为日志会变得非常大，并且包含大量重复内容。本教程介绍了 pgbadger PostgreSQL 日志分析工具如何帮助您从日志中获取有用的信息。**

pgbadger PostgreSQL日志分析工具安装简单（仅需要perl）并且易于理解。它允许您使用简单的命令从命令行分析日志文件。

首先确保您已经安装了 perl（在 Debian/Ubuntu Linux 上）：

```
sudo apt-get install perl
```

然后从 GitHub 发布页面下载 pgbadger，解压并安装（调整文件名中的版本）：

```
tar xvf pgbadger-6.4.tar.gz
cd pgbadger-6.4
perl Makefile.PL
make && sudo make install
```

您必须调整 PostgreSQL 配置文件才能为 pgbadger 提供所需的信息。首先，您需要设置“log_line_prefix”设置：

```
log_line_prefix = '%t [%p]: [%l-1] '
```

其次，您应该启用“log_min_duration_statement”。此设置导致 PostgreSQL 记录运行时间超过给定值（以毫秒为单位）的所有语句，其中值 0 将记录所有内容。确保“log_statement”设置为“none”，否则“log_min_duration_statement”设置将不会记录任何内容（无论如何，“none”是默认值）。

```
log_statement = 'none'
log_min_duration_statement = 0
```

第三，您应该启用检查点、锁等日志记录，以从日志分析中获得最大价值：

```
log_checkpoints = on
log_connections = on
log_disconnections = on
log_lock_waits = on
log_temp_files = 0
log_autovacuum_min_duration = 0
```

您还可以在此处获取配置片段。请注意，您不需要重新启动 PostgreSQL 即可使更改生效，只需登录 psql 命令行并调用以下命令（与运行 SQL 语句的方式相同）：

```
select pg_reload_conf();
```

当然，记录所有语句会对您的系统性能产生影响，因此您可以启用它足够的时间，以便为您提供 50 到 200 Mb 的日志，然后再次禁用它。

现在，通过 DHIS 2，我们已经知道分析表生成和索引过程有一些运行时间非常长的查询。我们不希望这些语句占据 pgbadger 的全部注意力，因此我们创建一个新的日志文件，在终端中使用以下命令省略这些语句：

```
cat pg.log | grep -viE "create index|insert into analytics|vacuum analyze analytics" > pg_clean.log
```

我们现在准备进行分析。调用：

```
pgbadger -j 4 pg_clean.log
```

这里的“-j”选项指的是您想要用于该进程的 CPU 数量 - 默认情况下它使用 1，但允许更多的 CPU 可以大大加快进程速度。最后，“pg_clean.log”指的是您的日志文件。

请注意，如果您使用 Amazon RDS（托管数据库托管），它不允许您更改“log_line_prefix”设置。相反，您可以使用“-p”选项运行 pgbadger，该选项允许您为分析指定自定义前缀：

```
pgbadger -j 4 -p '%t:%r:%u@%d:[%p]:' pg_clean.log
```

pgbdager 工具现在将在名为“out.html”的 HTML 文件中创建一个很好的分析演示。只需在您选择的 Web 浏览器中打开该文件即可。

最有趣的部分可能是“顶部”菜单项。它提供了非常有用的统计信息，包括单个最慢的查询和规范化的最耗时的查询、最频繁的查询和最慢的查询。这里，“规范化”意味着忽略 SQL 查询参数。这对于了解哪些查询最慢很有用。如果没有规范化，如果使用许多不同的查询参数运行，单个最慢的查询将完全主导统计信息。

通过对特定 DHIS 2 实例进行分析，我了解到验证功能会导致运行时间相当长的查询，这些查询可以进行优化。我们鼓励您分析自己的 DHIS 2 实例以查看哪些查询需要很长时间。在此基础上，您可以使用索引优化数据库，或向 DHIS 2 开发团队提供有关潜在瓶颈和昂贵查询的反馈。

![](resources/images/pgbadger.png)

监控愉快！

