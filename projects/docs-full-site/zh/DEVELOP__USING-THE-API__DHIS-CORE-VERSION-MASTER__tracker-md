---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/master/src/developer/web-api/tracker.md"
revision_date: '2024-10-25'
tags:
- Develop
- DHIS核心 主版
---

# 跟踪器{ #webapi_tracker }

> **Caution**
>
> Tracker has been re-implemented in DHIS2 2.36. This document describes the new tracker endpoints
>
> * `POST /api/tracker`
> * `GET  /api/tracker/trackedEntities`
> * `GET  /api/tracker/enrollments`
> * `GET  /api/tracker/events`
> * `GET  /api/tracker/relationships`
>
> The deprecated tracker endpoints
>
> * `GET/POST/PUT/DELETE /api/trackedEntityInstance`
> * `GET/POST/PUT/DELETE /api/enrollments`
> * `GET/POST/PUT/DELETE /api/events`
> * `GET/POST/PUT/DELETE /api/relationships`
>
> have been removed in version **42**!
>
> [Migrating to new tracker
> endpoints](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker-deprecated.html#webapi_tracker_migration)
> should help you get started with your migration. Reach out on the [community of
> practice](https://community.dhis2.org) if you need further assistance.

## 跟踪对象{ #webapi_tracker_objects }

Tracker 由几种不同类型的对象组成，这些对象嵌套在一起以表示数据。
在本节中，我们将展示和描述 Tracker API 中使用的每个对象。

### 跟踪实体{ #tracked-entities } 

`跟踪实体`是跟踪器模型的根对象。

| 财产 | 描述 | 需要 | 不可变的 | 类型 | 例 |
|---|---|---|---|---|---|
| 跟踪实体 | 被跟踪实体的标识符。如果未提供则生成 | 不 | 是的 | String:Uid | ABCDEF12345 |
| trackedEntityType | 跟踪实体的类型。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| createdAt | 用户创建跟踪实体时的时间戳。在服务器上设置。 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| createdAtClient | 用户在客户端上创建跟踪实体时的时间戳。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 上次更新对象的时间戳。在服务器上设置。 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAtClient | 对象上次在客户端更新的时间戳。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| orgUnit | 用户创建跟踪实体的组织部门。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| inactive | 指示被跟踪实体是否处于非活动状态。 | 不 | 是的 | Boolean | 默认值：false，true |
| deleted | 指示跟踪的实体是否已被删除。只有删除时才能改变。 | 不 | 不 | Boolean | 假，直至删除 |
| 潜在重复 | 表示跟踪的实体是否可能重复。 | 不 | 不 | Boolean | 默认值：false |
| geometry | 被跟踪实体的地理表示。基于 TrackedEntityType 的 "featureType"。 | 不 | 是的 | GeoJson | {<br>"type": "POINT",<br>"coordinates": [123.0, 123.0]<br>} |
| 存储方式 | 存储/创建被跟踪实体的客户端引用。 | 不 | 是的 | 字符串：任意 | 无名氏 |
| 创建人 | 仅用于读取数据。创建对象的用户。在服务器上设置 | 不 | 是的 | 用户 | {<br>"uid": "ABCDEF12345",<br>"用户名": "用户名",<br>“名字”：“约翰”，<br>“姓氏”：“Doe”<br>} |
| 更新日期 | 仅用于读取数据。最后更新对象的用户。在服务器上设置 | 不 | 是的 | 用户 | {<br>"uid"："ABCDEF12345",<br>"username"："username",<br>"firstName"："John",<br>"surname"："Doe"<br>} |
| 属性 | 被跟踪实体拥有的被跟踪实体属性值列表。 | 不 | 是的 | TrackedEntityAttributeValue 列表 | 参见属性 |
| 注册人数 | 被跟踪实体拥有的注册列表。 | 不 | 是的 | 入学名单 | 查看注册情况 |
| 关系 | 与被跟踪实体相连的关系列表。 | 不 | 是的 | 关系清单 | 查看关系 |
| 程序所有者 | 可通过特定程序访问此被跟踪实体的组织单位列表。更多信息，请参阅 "程序所有权"。 | 不 | 是的 | 程序所有者列表 | 参见 "计划所有权 "部分 |

> **Note**
>
> `Tracked Entities` "owns" all `Tracked Entity Attribute Values` (Or "attributes" as described in
> the previous table). However, `Tracked Entity Attributes` are either connected to a `Tracked
> Entity` through its `Tracked Entity Type` or a `Program`. We often refer to this separation as
> `Tracked Entity Type Attributes` and `Tracked Entity Program Attributes`. The importance of this
> separation is related to access control and limiting what information the user can see.
>
> The "attributes" referred to in the `Tracked Entity` are `Tracked Entity Type Attributes`.

### 注册{ #enrollments } 

`Tracked Entities` can enroll into `Programs` for which they are eligible. Tracked entities are
eligible as long as the program is configured with the same `Tracked Entity Type` as the tracked
entity. We represent the enrollment with the `Enrollment` object, which we describe in this section.

| 物业 | 描述 | 需要 | 不可改变 | 类型 | 例 |
|---|---|---|---|---|---|
| 注册 | 注册的标识符。如果未提供，则生成 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 程序 | 注册所代表的计划。 | 是的 | 不 | String:Uid | ABCDEF12345 |
| 跟踪实体 | 对注册的被跟踪实体的引用。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| 地位 | 注册状态。如果未提供，则为 ACTIVE。 | 不 | 不 | 枚举 | 激活、完成、取消 |
| orgUnit | 用户注册被跟踪实体的组织单位。 | 是的 | 不 | String:Uid | ABCDEF12345 |
| createdAt | 用户创建对象的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| createdAtClient | 用户在客户端创建对象的时间戳 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 对象最后一次更新的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAtClient | 对象最后一次在客户端更新的时间戳 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 入学人数 | 用户注册被跟踪实体时的时间戳。 | 是的 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| occurredAt | 注册发生的时间戳。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| completedAt | 用户完成注册的时间戳。如果客户端未传递，则由服务器设置 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 完成人 | 仅用于读取数据。完成注册的用户。在服务器上设置 | 不 | 不 | 字符串：任意 | 无名氏 |
| 跟进 | 表示注册是否需要跟进。如果未提供，则为假 | 不 | 不 | 布依兰 | Default: False, True |
| deleted | 表示注册是否已被删除。它只能在删除时更改。 | 不 | 是的 | Boolean | 删除前为假 |
| geometry | 注册的地理表示。基于计划的 "特征类型 | 不 | 不 | GeoJson | {<br>"type": "POINT",<br>"coordinates": [123.0, 123.0]<br>} |
| 存储方式 | 存储/创建注册的客户编号。 | 不 | 不 | 字符串：任意 | 无名氏 |
| 创建人 | 仅用于读取数据。创建对象的用户。在服务器上设置 | 不 | 是的 | 用户 | {<br>"uid"："ABCDEF12345",<br>"username"："username",<br>"firstName"："John",<br>"surname"："Doe"<br>} |
| 更新日期 | 仅用于读取数据。最后更新对象的用户。在服务器上设置 | 不 | 是的 | 用户 | {<br>"uid": "ABCDEF12345",<br>"用户名": "用户名",<br>“名字”：“约翰”，<br>“姓氏”：“Doe”<br>} |
| 属性 | 与注册相关的被跟踪实体属性值列表。 | 不 | 不 | TrackedEntityAttributeValue 列表 | 参见属性 |
| 活动 | 注册所拥有的事件列表。 | 不 | 不 | 活动列表 | 查看活动 |
| 关系 | 与注册有关的关系列表。 | 不 | 不 | 关系清单 | 查看关系 |
| 说明 | 连接到注册的备注。只能创建。 | 不 | 是的 | 注释清单 | 参见注释 |

> **Note**
>
> `Tracked Entities` "owns" all `Tracked Entity Attribute Values` (Or "attributes" as described in
> the previous table). However, `Tracked Entity Attributes` are either connected to a `Tracked
> Entity` through its `Tracked Entity Type` or a `Program`. We often refer to this separation as
> `Tracked Entity Type Attributes` and `Tracked Entity Program Attributes`. The importance of this
> separation is related to access control and limiting what information the user can see.
>
> The "attributes" referred to in the `Enrollment` are `Tracked Entity Program Attributes`.

### 大事记 { #events } 

`Events` are either part of an `EVENT PROGRAM` or `TRACKER PROGRAM`. For `TRACKER PROGRAM`, events
belong to an `Enrollment`, which again belongs to a `Tracked Entity`. On the other hand, `EVENT
PROGRAM` is `Events` not connected to a specific `Enrollment` or `Tracked Entity`. The difference is
related to whether we track a specific `Tracked Entity` or not. We sometimes refer to `EVENT
PROGRAM` events as "anonymous events" or "single events" since they only represent themselves and
not another `Tracked Entity`.

In the API, the significant difference is that all events are either connected to the same
enrollment (`EVENT PROGRAM`) or different enrollments (`TRACKER PROGRAM`). The table below will
point out any exceptional cases between these two.

| 物业 | 描述 | 需要 | 不可改变 | 类型 | 例 |
|---|---|---|---|---|---|
| 事件 | 事件的标识符。如果未提供，则生成 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 程序阶段 | 事件所代表的计划阶段。 | 是的 | 不 | String:Uid | ABCDEF12345 |
| 注册 | 对拥有该事件的注册的引用。***不适用于 `EVENT PROGRAM`*** | 是的 | 是的 | String:Uid | ABCDEF12345 |
| 程序 | 仅用于读取数据。拥有该事件的注册程序类型。 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 跟踪实体 | 仅用于读取数据。拥有事件的被跟踪实体。***不适用于 `EVENT PROGRAM`*** | 不 | 不 | String:Uid | ABCDEF12345 |
| 地位 | 事件的状态。如果没有提供，则为 ACTIVE。 | 不 | 不 | 枚举 | 活动、已完成、已访问、计划、逾期、跳过 |
| orgUnit | 用户注册事件的组织单位。 | 是的 | 不 | String:Uid | ABCDEF12345 |
| createdAt | 仅用于读取数据。用户创建事件的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| createdAtClient | 用户在客户端创建事件的时间戳 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 仅用于读取数据。事件最后更新的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAtClient | 客户端最后一次更新事件的时间戳 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 预定日期 | 事件计划发生的时间戳。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| occurredAt | 事情发生的时间戳。 | 是的 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| completedAt | 用户完成事件的时间戳。如果客户端未传递，则由服务器设置 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 完成人 | 仅用于读取数据。完成事件的用户。在服务器上设置 | 不 | 不 | 字符串：任意 | 无名氏 |
| 跟进 | 仅用于读取数据。表示事件是否被标记为需要跟进。 | 不 | 不 | Boolean | 假，真 |
| deleted | 仅用于读取数据。表示事件是否已被删除。只有在删除时才能更改。 | 不 | 是的 | Boolean | 删除前为假 |
| geometry | 事件的地理表示。基于节目阶段的 "特征类型 | 不 | 不 | GeoJson | {<br>"type": "POINT",<br>"coordinates": [123.0, 123.0]<br>} |
| 存储方式 | 存储/创建事件的客户编号。 | 不 | 不 | 字符串：任意 | 无名氏 |
| 创建人 | 仅用于读取数据。创建对象的用户。在服务器上设置 | 不 | 是的 | 用户 | {<br>"uid"："ABCDEF12345",<br>"username"："username",<br>"firstName"："John",<br>"surname"："Doe"<br>} |
| 更新日期 | 仅用于读取数据。最后更新对象的用户。在服务器上设置 | 不 | 是的 | 用户 | {<br>"uid"："ABCDEF12345",<br>"username"："username",<br>"firstName"："John",<br>"surname"："Doe"<br>} |
| 属性选项组合 | 事件的属性选项组合。如果没有提供或配置，则为默认值。 | 不 | 不 | String:Uid | ABCDEF12345
| 属性类别选项 | 事件的属性类别选项。如果没有提供或配置，则为默认值。 | 不 | 不 | String:Uid | ABCDEF12345
| 指定用户 | 指向已被分配给该事件的用户的引用。 | 不 | 不 | 用户 | {<br>"uid"："ABCDEF12345",<br>"username"："username",<br>"firstName"："John",<br>"surname"："Doe"<br>} |
| 数据值 | 与事件相关的数据值列表。 | 不 | 不 | TrackedEntityAttributeValue 列表 | 参见属性 |
| 关系 | 与事件相关的关系列表。 | 不 | 不 | 关系清单 | 查看关系 |
| 说明 | 与事件相关的备注。只能创建。 | 不 | 是的 | 注释清单 | 参见注释 |

### 人际关系 { #relationships } 

`Relationships` are objects that link together two other tracker objects. The constraints each side
of the relationship must conform to are based on the `Relationship Type` of the `Relationship`.

| 物业 | 描述 | 需要 | 不可改变 | 类型 | 例 |
|---|---|---|---|---|---|
| 关系 | 关系的标识符。如果未提供，则生成。 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 关系类型 | 关系类型。决定关系中可以链接的对象。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| 关系名 | 仅用于读取数据。此关系的关系类型名称 | 不 | 不 | 字符串：任意 | 兄弟姐妹 |
| createdAt | 用户创建关系的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 关系最后一次更新的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| createdAtClient | 用户在客户端创建关系的时间戳。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 双向 | 仅用于读取数据。表示关系类型是否双向。 | 不 | 不 | Boolean | 真或假 |
| 从 | 关系中每一方的引用。必须符合关系类型中设置的约束条件 | 是的 | 是的 | 关系项 | {"trackedEntity"：{"trackedEntity"："ABCEF12345"}}，{"注册"：{"注册"："ABCDEF12345"}}或 {"事件"：{"事件"："ABCDEF12345"}} |

> **Note**
>
> `Relationship item` represents a link to an object. Since a `relationship` can be between any
> tracker object like `tracked entity`, `enrollment`, and `event`, the value depends on the
> `relationship type`. For example, if a `relationship type` connects from an `event` to a `tracked
> entity`, the format is strict:

> ```json
> {
>   "from": {
>     "event": { "event": "ABCDEF12345" }
>   },
>   "to": {
>     "trackedEntity": { "trackedEntity": "FEDCBA12345" }
>   }
> }
> ```

### 属性 { #attributes } 

属性是描述被跟踪实体的值。属性可以通过
通过被跟踪实体类型或程序关联。这意味着属性既可以是被追踪实体的一部分，也可以是注册的一部分。
跟踪实体和注册的一部分。重要的是，一个属性只能有一个值，即使一个
一个属性只能有一个值，即使一个被跟踪实体有多个注册表来定义该属性。这是因为
实体最终拥有属性值。

| 物业 | 描述 | 需要 | 不可改变 | 类型 | 例 |
|---|---|---|---|---|---|
| 特质 | 对所代表的跟踪实体属性的引用。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| 码 | 仅用于读取数据。被跟踪实体属性的代码。 | 不 | 不 | 字符串：任意 | 美国广播公司 |
| 显示名称 | 仅用于读取数据。被跟踪实体属性的显示名称。 | 不 | 不 | 字符串：任意 | 名称 |
| createdAt | 添加值的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 值最后一次更新的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 存储方式 | 存储/创建值的客户端引用。 | 不 | 不 | 字符串：任意 | 无名氏 |
| valueType | 仅用于读取数据。属性所代表的值类型。 | 不 | 不 | 枚举 | 文本、INTEGER 等 |
| 价值 | 被跟踪实体属性的值。 | 不 | 不 | 字符串：任意 | 无名氏 |

> **Note**
>
> When adding or updating an attribute, only the `attribute` and `value` properties are required. To
> remove an attribute from a tracked entity or enrollment, set the `value` to `null` [see
> example](#delete-attribute-values).
>
> In the context of the tracker, we refer to `Tracked Entity Attributes` and `Tracked Entity
> Attribute Values` simply as attributes. However, it's important to note that attributes and
> attribute values are also concepts within metadata. Therefore, distinguishing between tracker
> attributes and metadata attributes is essential. In the tracker API, you can reference metadata
> attributes by specifying the `idScheme` (see [request
> parameters](#webapi_tracker_import_request_parameters) for more information).

### 数据值{ #data-values } 

属性描述一个被跟踪的实体，而数据值则描述一个事件。

| 物业 | 描述 | 需要 | 不可改变 | 类型 | 例 |
|---|---|---|---|---|---|
| 数据元素 | 该值代表的数据元素。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| 价值 | 数据值的值。 | 不 | 不 | 字符串：任意 | 123 |
| providedElsewhere | 表示用户是否在其他地方提供了值。如果未提供，则为 "假"。 | 不 | 不 | Boolean | 假或真 |
| createdAt | 用户添加值的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 值最后一次更新的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 存储方式 | 存储/创建值的客户端引用。 | 不 | 不 | 字符串：任意 | 无名氏 |
| 创建人 | 仅用于读取数据。创建对象的用户。在服务器上设置 | 不 | 是的 | 用户 | {<br>"uid"："ABCDEF12345",<br>"username"："username",<br>"firstName"："John",<br>"surname"："Doe"<br>} |
| 更新日期 | 仅用于读取数据。最后更新对象的用户。在服务器上设置 | 不 | 是的 | 用户 | {<br>"uid"："ABCDEF12345",<br>"username"："username",<br>"firstName"："John",<br>"surname"："Doe"<br>} |

> **注**
>
> 添加或更新数据值时，只需使用 `dataElement` 和 `value` 属性。要
> 从事件中删除数据值，请将 `value` 设置为 `null` [见示例](#delete-data-values)。

### 笔记 { #notes } 

跟踪系统可使用数据元素和跟踪实体属性获取数据。
但在某些情况下，需要记录有关具体问题的补充信息或说明。
但在某些情况下，需要记录有关特定问题的附加信息或注释。这些额外的细节可使用注释来捕获，类似于 DHIS2 汇总侧的数据值注释。
DHIS2 汇总侧的数据值注释类似。

笔记有两种类型：注册级笔记和事件级笔记。注册可以由一个或多个事件组成
可记录每个事件的备注，以记录原因，如事件错过的原因、重新安排的原因或部分完成的原因。
错过、重新安排或部分完成活动的原因。注册中的每个事件都可以
有自己的笔记。此外，还可以使用
家长注册记录。注册记录有助于记录原因，如为什么取消注册。
取消注册的原因。备注的使用非常灵活，可根据用户的需求和具体用例进行调整。
具体用例。

注册和事件备注的条目数量不限；可添加的备注数量没有限制。
可以添加的备注数量没有限制。但是，这些备注一旦创建，就无法删除或更新。
一旦创建，就无法删除或更新。它们的功能类似于日志。要修改备忘，可以创建新的备忘。删除备忘的唯一
删除备注的唯一方法是删除父对象，即事件或注册。

注释没有专门的端点，而是作为父事件和/或注册有效载荷的一部分进行交换。
注册有效载荷的一部分。下面是一个有效载荷示例：

```json
{
  "trackedEntity": "oi3PMIGYJH8",
  "enrollments": [
    {
      "enrollment": "EbRsJr8LSSO",
      "notes": [
        {
          "note": "vxmCvYcPdaW",
          "value": "Enrollment note 1"
        },
        {
          "value": "Enrollment note 2."
        }
      ],
      "events": [
        {
          "event": "zfzS9WeO0uM",
          "notes": [
            {
              "note": "MAQFb7fAggS",
              "value": "Event Note 1."
            },
            {
              "value": "Event Note 2."
            }
          ]
        }
      ]
    }
  ]
}
```

| 物业 | 描述 | 需要 | 不可改变 | 类型 | 例 |
|---|---|---|---|---|---|
| 备注 | 注释的引用。若为空则生成 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 价值 | 纸条的内容。 | 是的 | 是的 | 字符串：任意 | 这是一份说明 |
| 存储于 | 用户添加备注的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 存储方式 | 存储/创建备注的客户编号。 | 不 | 不 | 字符串：任意 | 无名氏 |
| 创建人 | 仅用于读取数据。创建对象的用户。在服务器上设置 | 不 | 是的 | 用户 | {<br>"uid"："ABCDEF12345",<br>"username"："username",<br>"firstName"："John",<br>"surname"："Doe"<br>} |

### 用户数 { #users } 

| 物业 | 描述 | 需要 | 不可改变 | 类型 | 例 |
|---|---|---|---|---|---|
| uid | 用户的标识符。 | 是* | 是的 | String:Uid | ABCDEF12345 |
| 用户名 | 用户使用的用户名。 | 是* | 是的 | 字符串：任意 | 123 |
| 名 | 仅用于读取数据。用户名。 | 不 | 是的 | 字符串：任意 | 约翰 |
| 姓氏 | 仅用于读取数据。用户姓氏。 | 不 | 是的 | 字符串：任意 | 无名氏 |

> 必须提供 `uid` 或 `username` 字段中的一个。如果两个都提供，则只考虑用户名。
> 考虑。

## Tracker Import (`POST /api/tracker`) { #webapi_tracker_import }

端点 `POST /api/tracker` 也称为跟踪器导入器。该端点允许客户
导入，即创建、更新和删除

* **跟踪实体**
* **入学人数**
* **活动**
* **关系**
* 以及其他[跟踪器对象]（#webapi_tracker_objects）中嵌入的数据

### 请求参数{ #webapi_tracker_import_request_parameters }

跟踪器导入程序支持以下参数：

| 参数名称 | 描述 | 类型 | 允许值 |
|---|---|---|---|
| 异步 | 表示导入是异步还是同步进行。 | Boolean | `TRUE`, `FALSE` |
| 报告模式 | 仅在执行同步导入时使用。请参阅 importSummary 获取更多信息。 | 枚举 | `FULL`, `ERRORS`, `WARNINGS` |
| 导入模式 | Can either be `VALIDATE` which will report errors in the payload without making changes to the database or `COMMIT` (default) which will validate the payload and make changes to the database. | 枚举 | `VALIDATE`, `COMMIT` |
| 方案 | 表示导入时元数据引用使用的总体 idScheme。默认为 UID。可为特定元数据重写（如下所列） | 枚举 | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| 数据元素标识方案 | 表示导入数据元素时使用的 idScheme。 | 枚举 | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| orgUnitIdScheme | 表示导入时组织单位要使用的 idScheme。 | 枚举 | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| 程序标识方案 | 表示导入程序时使用的 idScheme。 | 枚举 | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| 程序阶段标识方案 | 表示导入时程序阶段使用的 idScheme。 | 枚举 | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| 类别选项组合IdScheme | 表示导入时类别选项组合使用的 idScheme。 | 枚举 | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| 类别选项 IDScheme | 表示导入时类别选项使用的 idScheme。 | 枚举 | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| 导入策略 | Indicates the effect the import should have. Can either be `CREATE`, `UPDATE`, `CREATE_AND_UPDATE` and `DELETE`, which respectively only allows importing new data, importing changes to existing data, importing any new or updates to existing data, and finally deleting data. | 枚举 | `CREATE`, `UPDATE`, `CREATE_AND_UPDATE`, `DELETE` |
| 原子模式 | 表示导入如何响应验证错误。如果是 `ALL`，则导入的所有数据必须有效，才能提交任何数据。如果是 `OBJECT`，只有提交的数据必须有效，其他数据可以无效。 | 枚举 | `ALL`, `OBJECT` |
| 冲洗模式 | 表示刷新的频率。这与导入过程中向数据库推送数据的频率有关。主要用于调试，在生产环境中不应更改 | 枚举 | `AUTO`, `OBJECT` |
| 验证模式 | 表示验证步骤的完整性。可以跳过、设置为快速失败（第一次出错时返回）或完全失败（默认），后者将返回发现的所有错误。 | 枚举 | `FULL`, `FAIL_FAST`, `SKIP` |
| skipPatternValidation | 如果为 "true"，将跳过验证生成属性的模式。 | Boolean | `TRUE`, `FALSE` |
| 跳过侧面效果 | 如果为 "true"，将跳过运行导入的任何副作用 | Boolean | `TRUE`, `FALSE` |
| 跳过规则引擎 | 如果为 "true"，它将跳过运行导入的任何程序规则 | Boolean | `TRUE`, `FALSE` |

**NOTE**: idScheme and its metadata specific idScheme parameters like orgUnitIdScheme,
programIdScheme, ... used to allow and use the default `AUTO`. `AUTO` has been removed. The default
idScheme has already been `UID`. Any requests sent with idScheme `AUTO` will see the same behavior
as before, namely matching done using `UID`.

#### SYNC 和 ASYNC{ #sync-and-async } 

对用户来说，同步导入和异步导入的主要区别在于 API 响应的时间。
API 的响应时间。同步导入会在导入后立即提供 [import
摘要](#webapi_tracker_import_summary)。相比之下，异步导入
则会立即返回导入任务的引用。可以使用
此 `response.location`。下面是一个异步导入响应的示例：

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Tracker job added",
  "response": {
    "id": "cHh2OCTJvRw",
    "location": "https://play.im.dhis2.org/dev/api/tracker/jobs/cHh2OCTJvRw"
  }
}
```

对于大型导入，选择异步导入对客户有利，因为这样可以避免长时间等待响应。
长时间等待响应。

### 有效载荷{ #payload } 

导入器支持平面和嵌套有效载荷。

#### ***扁平***有效载荷{ #flat-payload } 

平面有效载荷可包括每个核心跟踪器对象的集合：被跟踪实体、注册、事件和关系、
注册、事件和关系。这种格式能很好地与现有数据集成，这些数据已
已分配 UID 的现有数据进行了很好的整合。但是，对于新数据，客户端必须为对象间的任何引用提供新的 UIDs。
对象之间的引用提供新的 UID。例如，如果导入一个新注册的新跟踪实体，客户机
必须为跟踪实体提供一个 UID，以便将注册与之链接。

```json
{
  "trackedEntities": [
    {
      "orgUnit": "y77LiPqLMoq",
      "trackedEntity": "Kj6vYde4LHh",
      "trackedEntityType": "nEenWmSyUEp"
    },
    {
      "orgUnit": "y77LiPqLMoq",
      "trackedEntity": "Gjaiu3ea38E",
      "trackedEntityType": "nEenWmSyUEp"
    }
  ],
  "enrollments": [
    {
      "enrolledAt": "2019-08-19T00:00:00.000",
      "enrollment": "MNWZ6hnuhSw",
      "occurredAt": "2019-08-19T00:00:00.000",
      "orgUnit": "y77LiPqLMoq",
      "program": "IpHINAT79UW",
      "status": "ACTIVE",
      "trackedEntity": "Kj6vYde4LHh",
      "trackedEntityType": "nEenWmSyUEp"
    }
  ],
  "events": [
    {
      "attributeCategoryOptions": "xYerKDKCefk",
      "attributeOptionCombo": "HllvX50cXC0",
      "dataValues": [
        {
          "dataElement": "bx6fsa0t90x",
          "value": "true"
        },
        {
          "dataElement": "UXz7xuGCEhU",
          "value": "5.7"
        }
      ],
      "enrollment": "MNWZ6hnuhSw",
      "enrollmentStatus": "ACTIVE",
      "event": "ZwwuwNp6gVd",
      "occurredAt": "2019-08-01T00:00:00.000",
      "orgUnit": "y77LiPqLMoq",
      "program": "IpHINAT79UW",
      "programStage": "A03MvHHogjR",
      "scheduledAt": "2019-08-19T13:59:13.688",
      "status": "ACTIVE",
      "trackedEntity": "Kj6vYde4LHh"
    },
    {
      "attributeCategoryOptions": "xYerKDKCefk",
      "attributeOptionCombo": "HllvX50cXC0",
      "enrollment": "MNWZ6hnuhSw",
      "enrollmentStatus": "ACTIVE",
      "event": "XwwuwNp6gVE",
      "occurredAt": "2019-08-01T00:00:00.000",
      "orgUnit": "y77LiPqLMoq",
      "program": "IpHINAT79UW",
      "programStage": "ZzYYXq4fJie",
      "scheduledAt": "2019-08-19T13:59:13.688",
      "status": "ACTIVE",
      "trackedEntity": "Kj6vYde4LHh"
    }
  ],
  "relationships": [
    {
      "from": {
        "trackedEntity": {
          "trackedEntity": "Kj6vYde4LHh"
        }
      },
      "relationshipType": "dDrh5UyCyvQ",
      "to": {
        "trackedEntity": {
          "trackedEntity": "Gjaiu3ea38E"
        }
      }
    }
  ]
}
```

#### ***NESTED*** 有效载荷{ #nested-payload } 

嵌套有效载荷是最常用的结构，其中跟踪器对象被嵌入到父级对象中。
其父对象，如被跟踪实体中的注册。这种结构的优点是
的优点是，客户端无需为这些引用提供 UID，因为它会自动处理。
自动处理。

> **NOTE**
>
> Although nested payloads can be easier for clients to manage, the payload will always be flattened
> before the import. For large imports, using a flat structured payload offers more control and
> reduces overhead during the import process.
>
> That being said, you cannot nest new tracked entities, enrollments or events in a relationship.

```json
{
  "trackedEntities": [
    {
      "enrollments": [
        {
          "attributes": [
            {
              "attribute": "zDhUuAYrxNC",
              "displayName": "Last name",
              "value": "Kelly"
            },
            {
              "attribute": "w75KJ2mc4zz",
              "displayName": "First name",
              "value": "John"
            }
          ],
          "enrolledAt": "2019-08-19T00:00:00.000",
          "events": [
            {
              "attributeCategoryOptions": "xYerKDKCefk",
              "attributeOptionCombo": "HllvX50cXC0",
              "dataValues": [
                {
                  "dataElement": "bx6fsa0t90x",
                  "value": "true"
                },
                {
                  "dataElement": "UXz7xuGCEhU",
                  "value": "5.7"
                }
              ],
              "enrollmentStatus": "ACTIVE",
              "notes": [
                {
                  "value": "need to follow up"
                }
              ],
              "occurredAt": "2019-08-01T00:00:00.000",
              "orgUnit": "y77LiPqLMoq",
              "program": "IpHINAT79UW",
              "programStage": "A03MvHHogjR",
              "scheduledAt": "2019-08-19T13:59:13.688",
              "status": "ACTIVE"
            }
          ],
          "occurredAt": "2019-08-19T00:00:00.000",
          "orgUnit": "y77LiPqLMoq",
          "program": "IpHINAT79UW",
          "status": "ACTIVE",
          "trackedEntityType": "nEenWmSyUEp"
        }
      ],
      "orgUnit": "y77LiPqLMoq",
      "trackedEntityType": "nEenWmSyUEp"
    }
  ]
}
```

### 创建{ #create } 

向 `/api/tracker` 发送 `POST` 信息，并将 `importStrategy` 设置为 `CREATE` 或 `CREATE_AND_UPDATE` 。
这里](#payload)所述的有效载荷。

### 更新{ #update } 

向 `/api/tracker`发送`POST`，将`importStrategy`设置为`UPDATE`或`CREATE_AND_UPDATE`，并将有效载荷设置为[此处](#payload)。
这里](#payload)所述的有效载荷。

有效负载必须包括要更新对象的所有字段，即使这些字段没有被修改。
修改。唯一的例外是集合。集合中不应更改的项目可以省略。
如 [update attribute values](#update-data-values) 和 [update data
值]（#update-data-values）中所示。

> **Note**
>
> * Deleted tracker objects cannot be updated.
> * Relationships cannot be updated.

#### 更新属性值{ #update-attribute-values } 

以下内容更新了 [被跟踪实体]（#payload）的一个属性值：

    POST /api/tracker?async=false

```json
{
  "trackedEntities": [
    {
      "trackedEntity": "PQfMcpmXeFE",
      "trackedEntityType": "nEenWmSyUEp",
      "orgUnit": "DiszpKrYNg8",
      "attributes": [
        {
          "attribute": "w75KJ2mc4zz",
          "code": "MMD_PER_NAM",
          "displayName": "First name",
          "createdAt": "2016-08-03T23:49:43.308",
          "updatedAt": "2016-08-03T23:49:43.308",
          "valueType": "TEXT",
          "value": "Johnny"
        }
      ]
    }
  ]
}
```

请注意，不必指定跟踪实体的注册人数。但必须指定
被跟踪实体的非注册字段，即使您不更改它们。

#### 删除属性值{ #delete-attribute-values } 

以下内容删除了 [跟踪实体]（#payload）的一个属性值：

    POST /api/tracker?async=false

```json
{
  "trackedEntities": [
    {
      "trackedEntity": "PQfMcpmXeFE",
      "trackedEntityType": "nEenWmSyUEp",
      "orgUnit": "DiszpKrYNg8",
      "attributes": [
        {
          "attribute": "w75KJ2mc4zz",
          "value": null
        }
      ]
    }
  ]
}
```

#### 更新数据值{ #update-data-values } 

下文更新了 [事件]（#payload）的一个数据值：

    POST /api/tracker?async=false

```json
{
  "events": [
    {
      "event": "ZwwuwNp6gVd",
      "dataValues": [
        {
          "dataElement": "bx6fsa0t90x",
          "value": "true"
        }
      ],
      "attributeOptionCombo": "HllvX50cXC0",
      "attributeCategoryOptions": "xYerKDKCefk",
      "enrollment": "MNWZ6hnuhSw",
      "enrollmentStatus": "ACTIVE",
      "occurredAt": "2019-08-01T00:00:00.000",
      "orgUnit": "y77LiPqLMoq",
      "program": "IpHINAT79UW",
      "programStage": "A03MvHHogjR",
      "scheduledAt": "2019-08-19T13:59:13.688",
      "status": "ACTIVE",
      "trackedEntity": "Kj6vYde4LHh"
    }
  ]
}
```

#### 删除数据值{ #delete-data-values } 

下面的命令将删除 [事件]（#payload）的一个数据值：

    POST /api/tracker?async=false

```json
{
  "events": [
    {
      "event": "ZwwuwNp6gVd",
      "dataValues": [
        {
          "dataElement": "bx6fsa0t90x",
          "value": null
        }
      ],
      "attributeOptionCombo": "HllvX50cXC0",
      "attributeCategoryOptions": "xYerKDKCefk",
      "enrollment": "MNWZ6hnuhSw",
      "enrollmentStatus": "ACTIVE",
      "occurredAt": "2019-08-01T00:00:00.000",
      "orgUnit": "y77LiPqLMoq",
      "program": "IpHINAT79UW",
      "programStage": "A03MvHHogjR",
      "scheduledAt": "2019-08-19T13:59:13.688",
      "status": "ACTIVE",
      "trackedEntity": "Kj6vYde4LHh"
    }
  ]
}
```

### 删除{ #delete } 

Make a `POST` to `/api/tracker` with `importStrategy` set to `DELETE`. The payload should include
only the UIDs of the `trackedEntities`, `enrollments`, `events` or `relationships` you wish to
delete.

下文将删除用 [this payload]（#payload）创建的事件：

    POST /api/tracker?async=false&importStrategy=delete

```json
{
  "events": [
    {
      "event": "ZwwuwNp6gVd",
    },
    {
      "event": "XwwuwNp6gVE",
    }
  ]
}
```

下面的操作会删除跟踪的实体及其所有子跟踪器对象（即注册）、
事件和关系：

    POST /api/tracker?async=false&importStrategy=delete

```json
{
  "trackedEntities": [
    {
      "trackedEntity": "Kj6vYde4LHh",
    },
    {
      "trackedEntity": "Gjaiu3ea38E",
    }
  ]
}
```

All the children of a tracker object will be deleted if the user making the request has the
authorities `F_TEI_CASCADE_DELETE` and `F_ENROLLMENT_CASCADE_DELETE`.
Relationships linked to an entity are always deleted, without the need of any authority.

### CSV 导入{ #csv-import } 

要使用 CSV 导入事件，请使用 CSV 主体文件并将`Content-Type`设置为`POST`请求
***application/csv*** 或 ***text/csv***.

#### 大事记 { #events } 

Every row of the CSV payload represents an event and a data value. So, for events with multiple
data values, the CSV file will have `x` rows per event, where `x` is the number of data values
in that event.

##### ***CSV PAYLOAD*** 示例{ #csv-payload-example } 

您的 CSV 文件可以是这样的

```csv
event,status,program,programStage,enrollment,orgUnit,occurredAt,scheduledAt,geometry,latitude,longitude,followUp,deleted,createdAt,createdAtClient,updatedAt,updatedAtClient,completedBy,completedAt,updatedBy,attributeOptionCombo,attributeCategoryOptions,assignedUser,dataElement,value,storedBy,providedElsewhere,storedByDataValue,updatedAtDataValue,createdAtDataValue
A7rzcnZTe2T,ACTIVE,eBAyeGv0exc,Zj7UnCAulEk,RiLEKhWHlxZ,DwpbWkiqjMy,2023-02-12T23:00:00Z,2023-02-12T23:00:00Z,"POINT (-11.468912037323042 7.515913998868316)",7.515913998868316,-11.468912037323042,false,false,2017-09-08T19:40:22Z,,2017-09-08T19:40:22Z,,,,,HllvX50cXC0,xYerKDKCefk,,F3ogKBuviRA,"[-11.4880220438585,7.50978830548003]",admin,false,,2016-12-06T17:22:34.438Z,2016-12-06T17:22:34.438Z
```

有关 CSV 字段的详细定义，请参阅导出部分的 [Events CSV]（#events-csv）。

### 导入摘要{ #webapi_tracker_import_summary }

Tracker API 有两个主要端点，供消费者从导入中获取反馈。
这些端点与异步导入作业最为相关，但也适用于同步作业。
这些端点将返回与导入相关的日志或导入摘要本身。

> **注**
>
> 这些端点依赖于应用程序内存中存储的信息。这意味着信息
> 在某些情况下，如应用程序重启或大量
> 导入请求。

提交跟踪器导入请求后，我们可以访问以下端点，以便监控
工作进度：

`GET /tracker/jobs/{uid}`

| 参数|描述|例
|---|---|---|
|`{uid}`| 现有跟踪器导入任务的 UID | ABCDEF12345

#### ***REQUEST*** example { #request-example } 

`GET /tracker/jobs/PQK63sMwjQp`.

#### ***RESPONSE*** example { #response-example } 

```json
[
  {
    "uid": "PQK63sMwjQp",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.370",
    "message": "Import complete with status OK, 0 created, 0 updated, 0 deleted, 0 ignored",
    "completed": true,
    "id": "PQK63sMwjQp"
  },
  {
    "uid": "XIfTJ1UUNcd",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.369",
    "message": "PostCommit",
    "completed": false,
    "id": "XIfTJ1UUNcd"
  },
  {
    "uid": "uCG4FNJLLBJ",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.364",
    "message": "Commit Transaction",
    "completed": false,
    "id": "uCG4FNJLLBJ"
  },
  {
    "uid": "xfOUv2Lk2MC",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.361",
    "message": "Running Rule Engine Validation",
    "completed": false,
    "id": "xfOUv2Lk2MC"
  },
  {
    "uid": "cSPfA776obb",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.325",
    "message": "Running Rule Engine",
    "completed": false,
    "id": "cSPfA776obb"
  },
  {
    "uid": "mru3HJrFGKA",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.313",
    "message": "Running Validation",
    "completed": false,
    "id": "mru3HJrFGKA"
  },
  {
    "uid": "oTbCUJ2RnA6",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.312",
    "message": "Running PreProcess",
    "completed": false,
    "id": "oTbCUJ2RnA6"
  },
  {
    "uid": "lcUNbWTn6uh",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.312",
    "message": "Calculating Payload Size",
    "completed": false,
    "id": "lcUNbWTn6uh"
  },
  {
    "uid": "l4jQiSS9qdK",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:15.903",
    "message": "Running PreHeat",
    "completed": false,
    "id": "l4jQiSS9qdK"
  },
  {
    "uid": "qGbiuqgwPX5",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:15.850",
    "message": "Loading file content",
    "completed": false,
    "id": "qGbiuqgwPX5"
  },
  {
    "uid": "eWNHzVf7iAj",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:15.838",
    "message": "Loading file resource",
    "completed": false,
    "id": "eWNHzVf7iAj"
  },
  {
    "uid": "t9gOjotekQt",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:15.837",
    "message": "Tracker import started",
    "completed": false,
    "dataType": "PARAMETERS",
    "data": {
      "userId": "xE7jOejl9FI",
      "importMode": "VALIDATE",
      "idSchemes": {
        "dataElementIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "orgUnitIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "programIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "programStageIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "idScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "categoryOptionComboIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "categoryOptionIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        }
      },
      "importStrategy": "CREATE_AND_UPDATE",
      "atomicMode": "ALL",
      "flushMode": "AUTO",
      "validationMode": "FULL",
      "skipPatternValidation": false,
      "skipSideEffects": false,
      "skipRuleEngine": false,
      "filename": null,
      "reportMode": "ERRORS"
    },
    "id": "t9gOjotekQt"
  }
]
```

此外，以下端点将返回导入任务的导入摘要。该导入
摘要仅在导入完成后可用：

`GET /tracker/jobs/{uid}/report`

| 参数|描述|例
|---|---|---|
|path `/{uid}`|现有跟踪器导入任务的 UID。|ABCDEF12345|
|`reportMode`|报告的详细程度。|`FULL`&#124;`ERRORS`&#124;`WARNINGS`|

#### ***REQUEST*** example { #request-example } 

`GET /tracker/jobs/mEfEaFSCKCC/report`.

#### ***RESPONSE*** example { #response-example } 

响应有效载荷与同步导入请求后返回的有效载荷相同。

> **注**
>
> 这两个端点主要用于异步导入；然而，`GET /tracker/jobs/{uid}` 也可用于同步请求，因为它最终会使用与异步导入相同的导入过程和日志记录。
> 也适用于同步请求，因为它最终会使用与同步请求相同的导入流程和日志记录。
> 请求。

### 导入摘要结构{ #import-summary-structure } 

Import summaries have the following overall structure, depending on the requested `reportMode`:

```json
{
  "status": "OK",
  "validationReport": {
    "errorReports": [],
    "warningReports": []
  },
  "stats": {
    "created": 3,
    "updated": 0,
    "deleted": 0,
    "ignored": 0,
    "total": 3
  },
  "bundleReport": {
    "typeReportMap": {
      "EVENT": {
        "trackerType": "EVENT",
        "stats": {
          "created": 1,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 1
        },
        "objectReports": [
          {
            "trackerType": "EVENT",
            "uid": "gTZBPT3Jq39",
            "errorReports": []
          }
        ]
      },
      "ENROLLMENT": {
        "trackerType": "ENROLLMENT",
        "stats": {
          "created": 1,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 1
        },
        "objectReports": [
          {
            "trackerType": "ENROLLMENT",
            "uid": "ffcvJvWjiNZ",
            "errorReports": []
          }
        ]
      },
      "RELATIONSHIP": {
        "trackerType": "RELATIONSHIP",
        "stats": {
          "created": 0,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 0
        },
        "objectReports": []
      },
      "TRACKED_ENTITY": {
        "trackerType": "TRACKED_ENTITY",
        "stats": {
          "created": 1,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 1
        },
        "objectReports": [
          {
            "trackerType": "TRACKED_ENTITY",
            "uid": "aVcGf9iO8Xp",
            "errorReports": []
          }
        ]
      }
    }
  }
}
```

***status***

The property, `status`, of the import summary indicates the overall status of the import. If no
errors or warnings were raised during the import, the `status` is reported as `OK`. The presence of
any error or warnings in the import will result in a status of type `ERROR` or `WARNING`.

`status` is based on the presence of the most significant `validationReport`. `ERROR` has the
highest significance, followed by `WARNING` and finally `OK`. This implies that `ERROR` is reported
as long as a single error was found during the import, regardless of how many warnings occurred.

> **注**
>
> 如果使用 AtomicMode "OBJECT"（原子模式）执行导入，导入时将导入任何数据，而不会出现验证错误。
> 如果发现任何错误，整体状态仍将是 `ERROR`。

***validationReport***

The `validationReport` might include `errorReports` and `warningReports` if any errors or warnings
were present during the import. When present, they provide a detailed list of any errors or warnings
encountered.

例如，导入 `TRACKED_ENTITY` 时出现验证错误：

```json
{
  "validationReport": {
    "errorReports": [
      {
        "message": "Could not find TrackedEntityType: `Q9GufDoplCL`.",
        "errorCode": "E1005",
        "trackerType": "TRACKED_ENTITY",
        "uid": "Kj6vYde4LHh"
      },
      ...
    ],
    "warningReports" : [ ... ]
  }
}
```

The report contains a message and a code describing the actual error (See the [error
codes](#error-codes) section for more information about errors). Additionally, the report includes
the `trackerType` and `uid`, which aims to describe where in the data the error was found. In this
case, there was a `TRACKED_ENTITY` with the uid `Kj6vYde4LHh`, which had a reference to a tracked
entity type that was not found.

> **注**
>
> 当提及跟踪器对象的 `uid` 时，它们在
> 有效载荷。例如，被跟踪实体的 `uid` 在有效载荷中的名称是
> 跟踪实体"。注册"、"事件 "和 "关系 "也是如此、
> 事件和关系。
>
> 如果有效载荷中没有提供 uid，导入过程将生成新的 uid。这意味着
> 错误报告可能会引用一个在有效负载中不存在的 uid。
>
> 错误代表有效载荷中存在导入程序无法规避的问题。任何错误都会
> 阻止数据导入。另一方面，警告是指可以安全规避的问题。
> 但应让用户知道发生了这种情况。警告不会阻止数据
> 无法导入。

***stats***

统计信息提供了导入的快速概览。导入完成后，这些将是
实际计数，表示创建、更新、删除或忽略了多少数据。

例：

```json
{
  "stats": {
    "created": 2,
    "updated": 2,
    "deleted": 1,
    "ignored": 5,
    "total": 10
  }
}
```

`created` 指创建了多少个新对象。一般来说，有效负载中没有 uid
将被视为新对象。

`updated` 指更新对象的数量。如果一个对象的有效载荷中设置了 uid，那么只要数据库中存在相同的 uid，该对象
将被视为更新，只要数据库中存在相同的 uid。

`deleted` refers to the number of objects deleted during the import. Deletion only happens when the
import is configured to delete data and only then when the objects in the payload have existing uids
set.

`ignored` refers to objects that were not persisted. Objects can be ignored for several reasons, for
example trying to create something that already exists. Ignores should always be safe, so if
something was ignored, it was not necessary, or it was due to the configuration of the import.

***bundleReport***

导入完成后，`bundleReport` 会包含所有导入的 [tracker
对象](#tracker-objects)。

例如，`TRACKED_ENTITY`：

```json
{
  "bundleReport": {
    "typeReportMap": {
      "TRACKED_ENTITY": {
        "trackerType": "TRACKED_ENTITY",
        "stats": {
          "created": 1,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 1
        },
        "objectReports": [
          {
            "trackerType": "TRACKED_ENTITY",
            "uid": "aVcGf9iO8Xp",
            "errorReports": []
          }
        ]
      }
    }
  }
}
```

As seen, each type of tracker object will be reported, and each has its own stats and
`objectReports`. These `objectReports` will provide details about each imported object, like their
type, their uid, and any error or warning reports is applicable.

***message***

If the import ended abruptly, the `message` would contain further information in relation to what
happened.

### 导入摘要报告级别{ #import-summary-report-level } 

As previously stated, `GET /tracker/jobs/{uid}/report` can be retrieved using a specific
`reportMode` parameter. By default the endpoint will return an `importSummary` with `reportMode`
`ERROR`.

| 参数 | 描述 |
|---|---|
| `FULL` | 返回 `WARNINGS` 和 `timingsStats` 中的所有内容 |
| `WARNINGS` | 返回 `ERRORS` 中的所有内容，以及 `validationReports` 中的 `warningReports` 内容 |
| `ERRORS` (default) | Returns only `errorReports` in `validationReports` |

此外，所有 `reportModes` 都将在适用时返回 `status`、`stats`、`bundleReport` 和 `message` 。
适用。

### 错误代码{ #webapi_tracker_error_codes }

不同的错误场景有不同的错误代码。下表列出了
新 Tracker API 抛出的错误代码列表，以及错误信息和一些附加说明。
说明。错误信息中的占位符（`{0}`、`{1}`、`{2}`...）通常是 uids，除非另有说明。
另有说明。

| 错误代码 | 错误信息 | 描述 |
|:--|:----|:----|
| E1000 | User: `{0}`, has no write access to OrganisationUnit: `{1}`. | 这通常意味着组织单位 `{1}` 不在用户 `{0}` 的捕获范围内，因此写操作没有授权。 |
| E1001 | User: `{0}`, has no data write access to TrackedEntityType: `{1}`. | 当用户无权创建或修改 TrackedEntityType `{1}` 的数据时会发生错误。  
| E1002 | TrackedEntity: `{0}`, already exists. | 当试图创建一个已有 uid 的新 TrackedEntity 时，会出现此错误。请确保在添加新的 TrackedEntity 时使用新的 uid。 |
| E1003 | OrganisationUnit：TrackedEntity 的 `{0}` 超出了 User: `{1}` 的搜索范围。 | |
| E1005 | 找不到 TrackedEntityType：`{0}`。 | 当试图获取一个不存在的 TrackedEntityType（uid `{0}`）时出错。这也可能意味着用户没有读取 TrackedEntityType 的权限。 |
| E1006 | Attribute: `{0}`, does not exist. | 当系统无法找到 uid `{0}` 匹配的 TrackedEntityAttribute 时抛出的错误。这也可能意味着用户没有访问 TrackedEntityAttribute 的权限。 |
| E1007 | Error validating attribute value type: `{0}`; Error: `{1}`. | TrackedEntityAttribute 的值类型与其提供的属性值不匹配。实际验证错误将显示在 `{1}`。 |
| E1008 | 程序阶段 `{0}` 没有引用程序。检查程序阶段配置 | |
| E1009 | 文件资源：`{0}`，已分配给另一个对象。 | 文件资源 uid `{0}` 已分配给系统中的另一个对象。 |
| E1010 | Could not find Program: `{0}`, linked to Event. | 系统无法找到在事件有效负载中指定了 uid `{0}` 的程序。这也可能意味着登录用户无法访问特定程序。 |
| E1011 | Could not find OrganisationUnit: `{0}`, linked to Event. | 系统无法找到在事件有效载荷中指定了 uid `{0}` 的 OrganisationUnit。  |
| E1012 | Geometry does not conform to FeatureType: `{0}`. | 所提供的 FeatureType 要么是 "无"，要么是与所提供的几何图形值不兼容。 |
| E1013 | 找不到与事件相关联的 ProgramStage: `{0}`。 | 系统无法找到在事件有效载荷中指定了 uid `{0}` 的 ProgramStage。这也可能意味着登录用户无法访问 ProgramStage。  |
| E1014 | Provided Program: `{0}`, is a Program without registration. An Enrollment cannot be created into Program without registration. | 只能为注册的计划创建注册。 |
| E1015 | TrackedEntity: `{0}`, already has an active Enrollment in Program `{1}`. | 如果该计划已存在另一个有效注册，则不能注册该计划。至少必须先完成当前注册。|
| E1016 | TrackedEntity: `{0}`, already has an active enrollment in Program: `{1}`, and this program only allows enrolling one time. | 根据程序 `{1}` 配置，一个 TrackedEntity 只能注册该程序一次。看起来 TrackedEntity `{0}` 已经在该程序中注册过一次了。因此不能再添加另一个注册。 |
| E1018 | Attribute: `{0}`, is mandatory in program `{1}` but not declared in enrollment `{2}`. | 有效负载中缺少被定义为程序强制属性的属性值。确保在有效负载中提供强制属性的属性值。  |
| E1019 | Only Program attributes is allowed for enrollment; Non valid attribute: `{0}`. | 注册有效负载中指定的属性 uid `{0}` 与程序无关。  |
| E1020 | Enrollment date: `{0}`, can`t be future date. | 除非计划配置允许，否则不能在未来日期注册。 |
| E1021 | Incident date: `{0}`, can`t be future date. | 事件发生日期不能是未来日期，除非程序在配置中允许这样做。 |
| E1022 | TrackedEntity: `{0}`, must have same TrackedEntityType as Program `{1}`. | 程序被配置为接受与注册有效负载中提供的不同的 TrackedEntityType uid。 |
| E1023 | DisplayIncidentDate 为 true，但属性 occurredAt 为空。 | 程序已配置 DisplayIncidentDate，但在有效负载中为空。 |
| E1025 | enrolledAt 属性为空。 | EnrolledAt Date 是注册的必填项。请确保它不是空值。 |
| E1029 | Event OrganisationUnit: `{0}`, and Program: `{1}`, don't match. | 事件有效载荷使用程序 `{1}`，该程序未配置为可被组织单位 `{0}` 访问。 |
| E1030 | Event: `{0}`, already exists. | 当尝试使用已存在的 uid 添加新事件时，会出现此错误。请确保在添加新事件时使用新的 uid。 |
| E1031 | 事件发生日期缺失。 | OccuredAt 属性为空或有效负载中的日期格式无效。 |
| E1032 | Event: `{0}`, do not exist. | |
| E1033 | Event: `{0}`, Enrollment value is NULL. | |
| E1035 | Event: `{0}`, ProgramStage value is NULL. | |
| E1039 | ProgramStage: `{0}`，不可重复，且事件已存在。 | 特定注册的 ProgramStage 已存在一个事件。由于程序阶段被配置为不可重复，因此无法为同一程序阶段添加另一个事件。  |
| E1041 | Enrollment OrganisationUnit: `{0}`, and Program: `{1}`, don't match. | 注册有效载荷包含一个程序 `{1}`，该程序未配置为可被组织单位 `{0}` 访问。 |
| E1043 | Event: `{0}`, completeness date has expired. Not possible to make changes to this event. | 没有 "F_EDIT_EXPIRED "权限的用户无法更新已过期的事件，因为该事件已在其程序中配置。 |
| E1045 | Program: `{0}`, expiry date has passed. It is not possible to make changes to this event. | |
| E1046 | Event: `{0}`, needs to have at least one (event or schedule) date. | 事件有效负载中应包含 occuredAt 或 scheduledAt 属性。 |
| E1047 | Event: `{0}`, date belongs to an expired period. It is not possible to create such event. | 事件 occuredAt 或 scheduledAt 的值早于 PeriodType 开始日期。  |
| E1048 | 对象：`{0}`，uid：`{1}`，uid 格式无效。 | 有效的 uid 有 11 个字符。第一个字符必须是字母（a-z 或 A-Z），其余 10 个字符可以是字母数字（a-z 或 A-Z 或 0-9）。 |
| E1049 | Could not find OrganisationUnit: `{0}`, linked to Tracked Entity. | 系统无法找到 uid `{0}` 的 OrganisationUnit。 |
| E1050 | 缺少事件 ScheduledAt 日期。 | 事件有效负载中的 ScheduledAt 属性丢失或日期格式无效。 |
| E1051 | 事件：`{0}`，当状态为 `{1}` 时，completedAt 必须为空。 | 只有当状态为 COMPLETED 时，才能在有效载荷中传递事件 completedAt |
| E1052 | Enrollment: `{0}`, completedAt must be null when status is `{1}`. | 只有当状态为 "已完成 "时，才能在有效载荷中传递报名完成时间 |
| E1054 | AttributeOptionCombo `{0}` 不在事件程序类别组合 `{1}` 中。 |
| E1055 | 由于程序具有非默认的 CategoryCombo，因此不允许使用默认的 AttributeOptionCombo。 | 程序被配置为包含非默认 CategoryCombo，但请求使用了默认 AttributeOptionCombo。 |
| E1056 | 事件日期：`{0}`，在开始日期：`{1}`之前，属性选项：`{2}`。 | 类别选项配置了起始日期，有效载荷中的事件日期不能早于该起始日期。 |
| E1057 | 事件日期: `{0}`, 在结束日期: `{1}` 之后, 属性选项; `{2}`。 | 类别选项已配置结束日期，有效负载中的事件日期不能晚于该结束日期。  |
| E1063 | TrackedEntity: `{0}`, does not exist. | 当试图获取一个不存在的 TrackedEntity（uid `{0}`）时出错。这也可能意味着用户没有读取 TrackedEntity 的权限。 |
| E1064 | 属性 `{1}` 的非唯一属性值 `{0}` | 属性值在定义的范围内必须是唯一的。错误表示该属性值已存在于另一个 TrackedEntity 中。 |
| E1068 | Could not find TrackedEntity: `{0}`, linked to Enrollment. | 系统无法找到注册有效负载中指定的 TrackedEntity。这也可能意味着用户没有读取 TrackedEntity 的权限。 |
| E1069 | Could not find Program: `{0}`, linked to Enrollment. | 系统无法找到注册有效负载中指定的程序。这也可能意味着用户没有程序的读取权限。 |
| E1070 | Could not find OrganisationUnit: `{0}`, linked to Enrollment. | 系统无法找到注册有效负载中指定的 OrganisationUnit。 |
| E1074 | 缺少 FeatureType。 | |
| E1075 | Attribute: `{0}`, is missing uid. | |
| E1076 | `{0}` `{1}` 是必填项，不能为空 | |
| E1077 | Attribute: `{0}`, text value exceed the maximum allowed length: `{0}`. | |
| E1079 | Event: `{0}`, program: `{1}` is different from program defined in enrollment `{2}`. | |
| E1080 | 注册： `{0}`，已存在。 | 当尝试使用已有的 uid 创建新的注册表时，会出现此错误。请确保在添加新注册表时使用新的 uid。 |
| E1081 | 注册： `{0}`，不存在。 | 当尝试获取一个不存在的注册表（uid `{0}`）时出错。这也可能意味着用户没有读取注册信息的权限。 |
| E1082 | Event: `{0}`, is already deleted and can't be modified. | 如果事件被软删除，则不允许对其进行任何修改。 |
| E1083 | 用户：`{0}`，无权修改已完成的事件。 | 只有超级用户或具有 "F_UNCOMPLETE_EVENT "权限的用户才能修改已完成事件。已完成事件是指状态为已完成的事件。 |
| E1084 | 文件资源：`{0}`，无法找到引用。 | |
| E1085 | Attribute: `{0}`, value does not match value type: `{1}`. | 属性值类型与其提供的属性值不匹配。 |
| E1086 | Event: `{0}`, has a program: `{1}`, that is a registration but its ProgramStage is not valid or missing. | |
| E1087 | 事件：`{0}`，找不到数据元素： `{1}`，链接到数据值。 | |
| E1088 | Event: `{0}`, program: `{1}`, and ProgramStage: `{2}`, could not be found. | |
| E1089 | Event: `{0}`, references a Program Stage `{1}` that does not belong to Program `{2}`. | 事件有效负载中的 ProgramStage uid 和 Program uid 不兼容。 |
| E1090 | 属性：`{0}`，在被跟踪实体类型 `{1}` 中是强制性的，但在被跟踪实体 `{2}` 中没有声明。 | 有效负载中缺少强制 TrackedEntityTypeAttributes 的值。 |
| E1091 | User: `{0}`, has no data write access to Program: `{1}`. | 在程序共享配置中，用户没有该程序的写入权限。 |
| E1094 | 不允许更新注册： `{0}`，现有计划 `{1}`。 | 现有注册的注册有效载荷与最初注册的程序 uid 不同。 |
| E1095 | User: `{0}`, 没有数据写入 ProgramStage: `{1}` 的权限。 | 程序阶段共享配置使得用户没有写入该程序阶段的权限。  |
| E1096 | User: `{0}`, has no data read access to Program: `{1}`. | 在程序共享配置中，用户没有该程序的读取权限。 |
| E1099 | User: `{0}`, 没有 CategoryOption: `{1}` 的写入权限。 | 类别选项共享配置使得用户没有写入该类别选项的权限 |
| E1100 | 用户： `{0}`，缺少删除 TrackedEntity 的'F_TEI_CASCADE_DELETE'权限：`{1}`。 | 该 TrackedEntity 存在未删除的注册信息。如果用户没有 "F_TEI_CASCADE_DELETE "权限，则必须先明确删除这些注册信息，才能删除 TrackedEntity。 |
| E1102 | User: `{0}`, does not have access to the tracked entity: `{1}`, Program: `{2}`, combination. | 当用户的组织单位不拥有该特定程序的 TrackedEntity 的所有权时，就会抛出此错误。拥有 TrackedEntity-Program 组合的组织单位应属于用户的捕获范围（有时是搜索范围）。 |
| E1103 | 用户: `{0}`, 没有'F_ENROLLMENT_CASCADE_DELETE'权限删除注册 : `{1}`。 | 该 "注册 "存在未删除的 "事件"。如果用户没有 "F_ENROLLMENT_CASCADE_DELETE "权限，则必须先明确删除这些事件，才能删除注册表。 |
| E1104 | User: `{0}`, has no data read access to program: `{1}`, TrackedEntityType: `{2}`. | 与程序相关联的 TrackedEntityType 的共享配置规定，用户没有数据读取权限。 |
| E1110 | Not allowed to update Event: `{0}`, existing Program `{1}`. | 现有事件的事件有效载荷与最初创建时的程序 uid 不同。  |
| E1112 | 属性值：`{0}`，设置为机密，但系统未正确配置为加密数据。 | Either JCE files is missing or the configuration property `encryption.password` might be missing in `dhis.conf`. |
| E1113 | 注册：`{0}`，已删除，无法修改。 | 如果注册表被软删除，则不允许对其进行任何修改。 |
| E1114 | TrackedEntity: `{0}`, is already deleted and can't be modified. | 如果 TrackedEntity 被软删除，则不允许对其进行任何修改。 |
| E1115 | 找不到 CategoryOptionCombo: `{0}`。 | |
| E1116 | 找不到 CategoryOption: `{0}`。 | 这也可能意味着用户无法访问类别选项。|
| E1117 | CategoryOptionCombo does not exist for given category combo and category options: `{0}`. | |
| E1118 | 指定用户 `{0}` 不是有效的 uid。 | |
| E1119 | 已存在 uid `{0}` 的 Tracker Note。 | |
| E1120 | 程序阶段 `{0}` 不允许用户赋值 | 事件有效载荷具有 assignedUserId，但程序阶段未配置为允许用户分配。 |
| E1121 | Missing required tracked entity property: `{0}`. | |
| E1122 | Missing required enrollment property: `{0}`. | |
| E1123 | Missing required event property: `{0}`. | |
| E1124 | Missing required relationship property: `{0}`. | |
| E1125 | 值 `{0}` 不是选项集 `{1}` 中的有效选项代码。 | |
| E1126 | 不允许更新跟踪实体属性：{0} 。 | |
| E1127 | 不允许更新报名属性：{0} 。 | |
| E1128 | 不允许更新事件属性：{0} 。 | |
| E1300 | 由程序规则生成 (`{0}`) - `{1}` | |
| E1301 | 由程序规则生成 (`{0}`) - 不存在强制性数据元素 `{1}` | |
| E1302 | 由程序规则 (`{0}`) 生成 - 数据元素 `{1}` 无效：`{2}` | |
| E1303 | 必填数据元素 `{0}` 不存在 | |
| E1304 | 由程序规则 (`{0}`) 生成 - 数据元素 `{1}` 不是有效的数据元素 | |
| E1305 | 由程序规则 (`{0}`) 生成 - 数据元素 `{1}` 不是程序阶段 `{2}` 的一部分 | |
| E1306 | 由程序规则 (`{0}`) 生成 - 不存在强制属性 `{1}` | |
| E1307 | 由程序规则生成 (`{0}`) - 无法为数据元素 `{1}` 赋值。提供的值必须为空或与计算值 `{2}` 匹配。 | |
| E1308 | 由程序规则 (`{0}`) 生成 - 数据元素 `{1}` 被事件 `{2}` 替换 | |
| E1309 | 由程序规则 (`{0}`) 生成 - 无法为属性 `{1}` 赋值。提供的值必须为空或与计算值 `{2}` 匹配。 | |
| E1310 | 由程序规则 (`{0}`) 生成 - 属性 `{1}` 被替换为 `{2}` | |
| E1311 | 转介事件需要至少有一个完整的关系 | |
| E1312 | 推荐活动需要有双方的关系 | |
| E1313 | 注册的事件{0} 并不指向现有的跟踪实体。系统中的数据可能已损坏 | 表明现有数据中存在异常，即注册人数可能未提及跟踪实体 |
| E1314 | 由程序规则 (`{0}`) 生成 - 数据元素 `{1}` 是必填项，不能删除。 | |
| E4000 | 关系： `{0}` 不能链接到自身 | |
| E4001 | 关系 `{1}` 的关系项 `{0}` 无效：一个项只能链接一个 Tracker 实体。 | |
| E4006 | Could not find relationship Type: `{0}`. | |
| E4010 | 关系类型 `{0}` 约束需要{1} ，但找到了{2} 。 | |
| E4011 | 关系： `{0}` 无法持久化，因为此关系引用的{1} {2} 无效。 | |
| E4012 | 无法找到 `{0}`： `{1}`，链接到 "关系"。 | |
| E4014 | 关系类型 `{0}` 约束要求跟踪的实体具有 `{1}` 类型，但找到了 `{2}`。 | |
| E4015 | 关系：`{0}`，已经存在。 | |
| E4016 | 关系：`{0}`，不存在。 | |
| E4017 | 关系：`{0}`，已删除，无法修改。 | |
| E4018 | 关系： `{0}`，将{1}: `{2}` 连接到{3} ：`{4}` 已经存在。 | |
| E4019 | 用户：`{0}`，没有关系类型的数据写入权限：`{1}`。 | |
| E5000 | "{0}" `{1}` 不能被持久化，因为由它引用的 "{2}" `{3}` 不能被持久化。 | 导入程序无法持久化跟踪器对象，因为引用无法持久化。 |
| E5001 | "{0}" `{1}` 无法删除，因为其引用的 "{2}" `{3}` 无法删除。 | 导入程序无法删除跟踪器对象，因为引用无法删除。 |
| E9999 | 不适用 | 未定义的错误信息。 |

### 验证{ #webapi_tracker_validation }

使用跟踪器导入程序导入数据时，会执行一系列验证，以确保数据的有效性。
数据的有效性。本节将介绍执行的一些不同类型的验证
以便更好地了解导入验证是否失败。

#### 所需属性{ #required-properties } 

在导入数据时，每个跟踪器对象都有几个必须具备的属性
数据。有关所需属性的详尽列表，请参阅[跟踪器对象
部分]（#webapi_tracker_objects）。

在验证必填属性时，我们通常说的是对其他数据或元数据的引用。
元数据的引用。在这种情况下，有三个主要标准：

1. 有效负载中存在引用，且引用不为空。
2. 引用指向正确的数据类型，并存在于数据库中
3. 用户有权查看参考文献

如果第一个条件失败，导入将失败，并提示缺少引用。
但是，假设引用指向的东西不存在，或者用户无法访问。
访问的内容。在这种情况下，这两种情况都会导致无法找到引用的信息。

#### 格式{ #formats } 

跟踪器对象的某些属性需要特定的格式。导入数据时
属性都会根据预期格式进行验证，并根据哪个属性的格式有误而返回不同的错误信息。
不同的错误。以下是一些通过这种方式验证的属性示例：

- UID（涵盖 DHIS2 中对其他数据或元数据的所有引用。）
- 日期
- 几何图形（坐标必须符合其类型指定的格式）

#### 用户访问{ #user-access } 

所有导入的数据都将根据元数据（[共享](#webapi_tracker_metadata_sharing)
和数据中引用的组织单位（[组织单位范围](#webapi_tracker_orgunit_scope)）进行验证。
数据。有关共享和组织单位作用域的更多信息，请参阅以下章节。
章节。

在数据库中查找参考资料的同时，共享也会得到验证。用户访问权限之外的元数据
将被视为不存在。导入将验证数据中引用的任何元数据。
元数据。

另一方面，组织单位具有双重作用。它主要确保数据
只有在导入用户 "捕获范围 "内的组织单位时，才能导入数据。
范围 "内的组织单位导入数据。其次，组织单位还用于限制可用的程序。这意味着
这意味着，如果你试图为一个组织单位导入数据，而该组织单位无法访问你要导入的
程序，则导入将无效。

Users with the `ALL` authority will ignore the limits of sharing and organisation unit scopes when
they import data. However, they can not import enrollments in organisation units that do not have
access to the enrollment program.

#### 属性和数据值{ #attribute-and-data-values } 

属性和数据值分别是被跟踪实体和事件的一部分。但是
属性可以通过类型（TrackedEntityType）或程序（Program）链接到被跟踪实体。
程序（Program）。此外，属性也可以是唯一的。

导入过程中的初始验证是为了确保为属性或数据元素提供的值符合预期值类型。
数据元素的值符合预期值的类型。例如，假设你为一个
数据元素的值。在这种情况下，预期值就是数值。任何错误
与类型和值不匹配有关的任何错误都会导致相同的错误代码，但会有与违规类型有关的
与违规类型相关的特定信息。

Mandatory attributes and data values are also checked on creation, on update mandatory attributes
and data values are not required in the payload. Currently, removing mandatory attributes and data values is
never allowed. Some use-cases require values to be sent separately, while others require all values to
be sent as one. Programs can be configured to either validate mandatory attributes `ON_COMPLETE` or
`ON_UPDATE_AND_INSERT` to accommodate these use-cases.

导入时将验证唯一属性。这意味着只要提供的
值在整个系统中是唯一的，就可以通过。但是，如果发现唯一值
被任何其他被跟踪实体使用，则导入将失败。

#### 组态 { #configuration } 

导入器中验证的最后一部分是基于用户配置的相关元数据的验证。
相关元数据的配置进行验证。有关每种配置的更多信息，请查看相关章节。
可配置验证的一些示例：

- 特征类型（用于几何图形）
- 用户可指定的事件
- 允许未来日期
- 注册一次
- 还有更多

这些配置将进一步改变导入时的验证方式。

### 生成的跟踪实体属性{ #webapi_generate_te_attributes }

使用自动生成唯一值的跟踪实体属性
应用程序可使用三个端点来生成和保留这些值。
> 有关 TextPattern 工作原理的更多信息，请参阅 [此处](https://docs.dhis2.org/en/use/user-guides/dhis-core-version-master/additional-information/dhis2-tutorials.html#working-with-textpattern)

#### 查找所需数值{ #finding-required-values } 

文本格式可能包含根据不同因素变化的变量。其中有些因素是服务器未知的；
因此，在生成和预留值时，必须提供这些变量的值。

该端点返回服务器在生成新值时将注入 TextPattern 的必填值和可选值的映射。
生成时必须提供必填变量，而可选变量只应在必要时提供。

  GET /api/33/trackedEntityAttributes/Gs1ICEQTPlG/requiredValues

```json
{
  "REQUIRED": [
    "ORG_UNIT_CODE"
  ],
  "OPTIONAL": [
    "RANDOM"
  ]
}
```

####   生成值端点{ #webapi_generate_values }

在线网络应用程序和其他客户端可使用该端点生成一个唯一值，以供立即使用。
生成的值在生成时保证是唯一的，并保留 3 天。
如果您的 TextPattern 包含必填值，可以将它们作为参数传递。

要覆盖过期时间，请在请求中添加 `?expiration=<number-of-days>`。

    GET /api/33/trackedEntityAttributes/Gs1ICEQTPlG/generate?ORG_UNIT_CODE=OSLO

```json
{
  "ownerObject": "TRACKEDENTITYATTRIBUTE",
  "ownerUid": "Gs1ICEQTPlG",
  "key": "RANDOM(X)-OSL",
  "value": "C-OSL",
  "created": "2018-03-02T12:01:36.680",
  "expiryDate": "2018-03-05T12:01:36.678"
}
```

#### 产生并保留价值终点 { #webapi_generate_reserve_values }

离线客户端可以使用此端点保留一定数量的唯一 ID，以便以后注册新的被跟踪实体实例时使用。
可使用 `numberToReserve` 参数（默认为 1）指定要生成的 ID 数量。

要覆盖默认的 60 天过期时间，请在请求中添加 `?expiration=<number-of-days>`。

    GET /api/33/trackedEntityAttributes/Gs1ICEQTPlG/generateAndReserve?numberToReserve=3&ORG_UNIT_CODE=OSLO

```json
[
  {
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "B-OSL",
    "created": "2018-03-02T13:22:35.175",
    "expiryDate": "2018-05-01T13:22:35.174"
  },
  {
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "Q-OSL",
    "created": "2018-03-02T13:22:35.175",
    "expiryDate": "2018-05-01T13:22:35.174"
  },
  {
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "S-OSL",
    "created": "2018-03-02T13:22:35.175",
    "expiryDate": "2018-05-01T13:22:35.174"
  }
]
```

#### 保留值 { #reserved-values } 

目前无法通过 api 访问保留值，但是，它们
由`generate` 和`generateAndReserve` 端点返回。这
下表解释了保留值对象的属性：

表：保留值

| 物业 | 描述 |
|---|---|
| 所有者对象 | 生成和保留值时引用的元数据类型。目前只支持 TRACKEDENTITYATTRIBUTE。 |
| ownerUid | 生成和保留值时引用的元数据对象的 uid。 |
| 密钥 | 部分生成的值，生成的分段尚未添加。 |
| 价值 | 保留的完全解析值。这是存储数据时发送给服务器的值。 |
| 创建 | 预订的时间戳 |
| 到期日 | 不再保留预订的时间戳 |

过期的预订每天都会被删除。如果模式发生变化，则值
存储数据时将接受已经保留的数据，即使
它们与新模式不匹配，只要预订没有
已到期。

### 计划规则{ #webapi_tracker_program_rules }

用户可以配置 [程序规则](#webapi_program_rules)，为跟踪器表单添加条件行为。
跟踪器表单添加条件行为。除了在跟踪器应用程序中运行这些规则外，跟踪器导入程序也会
也会运行这些规则中的一部分。由于导入程序也会运行这些规则，因此我们可以确保
多一层验证。

并非所有程序规则操作都受支持，因为它们只适用于前台演示。
受支持的程序规则操作的完整列表如下。

  |计划规则行动|支持的|
  |---|:---:|
  |**显示文本**| |
  |**显示键值配对**| |
  |**HIDEFIELD**||
  |**隐藏部分**||
  |**分配**|**X**|
  |**显示警告**|**X**|
  |**淋浴**|**X**|
  |**完成时发出警告**|**X**|
  |**完成时出错**|**X**|
  |**创建活动**||
  |**设置必填字段**|**X**|
  |**发送信息**|**X**|
  |**日程安排信息**|**X**|

程序规则在导入程序中的评估方式与在 Tracker 应用程序中的评估方式相同。
总之，执行程序规则时会考虑以下条件：

* 程序规则必须与导入的数据相关联。例如，程序阶段或数据
元件。
* 程序规则的条件必须为真

程序规则的结果取决于这些规则中定义的操作：

* 程序规则操作可能会导致两种不同的结果：警告或错误。
  * 错误会导致验证失败，而警告则会在
  进口摘要。
    * SHOWWARNING 和 WARNINGONCOMPLETION 操作只能生成警告。
    * SHOWERROR、ERRORONCOMPLETION 和 SETMANDATORYFIELD 操作只能生成错误。
    * ASSIGN 操作既可生成警告，也可生成错误。
      * 当操作为空属性/数据元素赋值时，系统会发出警告。
      生成。
      * 当操作正在为一个属性/数据元素赋值时，该元素已经具有与该属性/数据元素相同的
      值，就会发出警告。
      * 当操作为已有值的属性/数据元素赋值时
      和要赋值的值不同，就会产生错误，除非
      `RULE_ENGINE_ASSIGN_OVERWRITE` system setting is set to true.

此外，程序规则也会产生副作用，如发送和计划信息。更多
有关副作用的更多信息，请参阅下一节。

> **注意**
>
> 在导入过程中，可以使用 `skipProgramRules` 参数跳过程序规则。

### 副作用{ #webapi_tracker_side_effects }

导入完成后，可能会触发一些特定任务。
这些任务就是我们所说的 "副作用"。这些任务执行的操作不会
影响导入本身的操作。

副作用是与导入分离运行的任务，但总是由导入触发。由于
侧效应与导入分离，因此即使导入成功，它们也可能失败。
此外，只有在导入成功时才会运行副作用，因此它们不会反过来失败。
反过来。

目前支持以下副作用：

|副作用|支持的|描述|
|---|:---:|---|
|**跟踪通知**|**X**| 更新可触发通知。触发通知的更新包括**注册**、**事件更新**、**事件或注册完成**。 |
|**ProgramRule Notification**|**X**| 程序规则可触发通知。请注意，这些通知是通过 DHIS2 规则引擎生成的程序规则效果的一部分。|

> **注意**
>
> 某些配置可以控制副作用的执行。可以在导入过程中设置 `skipSideEffects` 标志，以完全跳过副作用。例如，如果你导入了一些不想触发通知的内容，这个参数就很有用。

### 为事件分配用户{ #webapi_tracker_user_event_assignment }

将事件当作任务来处理可使特定的工作流受益，因此，您可以为事件指定一个
用户。

Assigning a user to an event will not change the access or permissions for users but will create a
link between the Event and the user. When an event has a user assigned, you can query events from
the API using the `assignedUser` field as a parameter.

When you want to assign a user to an event, you simply provide the UID of the user you want to
assign in the `assignedUser` field. See the following example:

```json
{
  ...
  "events": [
    {
      "event": "ZwwuwNp6gVd",
      "programStage": "nlXNK4b7LVr",
      "orgUnit": "O6uvpzGd5pu",
      "enrollment": "MNWZ6hnuhSw",
      "assignedUser" : "M0fCOxtkURr"
    }
  ],
  ...
}
```

在本例中，uid 为`M0fCOxtkURr`的用户将被分配给uid 为`ZwwuwNp6gVd`的事件。
的事件。一个事件只能分配一个用户。

要使用此功能，相关程序阶段必须启用用户分配功能，为用户提供的 uid
必须是一个有效的现有用户。

## 跟踪器导出{ #webapi_tracker_export }

Tracker 导出端点允许您检索先前导入的对象，这些对象包括

- **跟踪实体**
- **活动**
- ** 注册**
- **关系**

> **NOTE**
>
> * All tracker export endpoints default to a `JSON` response content. `CSV` is only supported
>   by tracked entities and events.
> * You can export a CSV file by adding the `Accept` header ***text/csv*** or ***application/csv***
>   to the request.
> * You can download in zip and gzip formats:
>     *  CSV for Tracked entities
>     *  JSON and CSV for Events
> * You can export a Gzip file by adding the `Accept` header ***application/csv+gzip*** for CSV
> or ***application/json+gzip*** for JSON.
> * You can export a Zip file by adding the `Accept` header ***application/csv+zip*** for CSV or  
> ***application/json+zip*** for JSON.

### 常见请求参数{ #common-request-parameters } 

以下终端支持分页的标准参数。

- **跟踪实体** `GET /api/tracker/trackedEntities`
- **Events** `GET /api/tracker/events`
- **Enrollments** `GET /api/tracker/enrollments`
- **Relationships** `GET /api/tracker/relationships`

#### 分页请求参数{ #request-parameters-for-pagination } 

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`page`|`Integer`|任何正整数|要返回的页码。默认为 1。|
|`pageSize`|`Integer`|任何正整数|页面大小。默认为 50。|
|`totalPages`|`Boolean`|`true`&#124;`false`|Indicates whether to return the total number of elements and pages. Defaults to `false` as getting the totals is an expensive operation.|
|`paging`|`Boolean`|`true`&#124;`false`|表示是否应忽略分页并返回所有行。默认值为 `true`，这意味着除非 `paging=false`，否则所有请求都会分页。|
|`skipPaging` **已过时，将在第 42 版中移除，请使用 `paging`**|`Boolean`|`true`&#124;`false`|表示是否应忽略分页并返回所有行。默认值为 `false`，这意味着除非 `skipPaging=true`，否则所有请求都要分页。|
|`order`|`String`|Comma-separated list of property name and sort direction pairs in format `propName:sortDirection`.<br><br>Example: `createdAt:desc`<br><br>Entities are ordered by newest (internal id desc) by default, meaning when no order parameter is provided.<br><br>**Note:** `propName` is case sensitive. Valid `sortDirections` are `asc` and `desc`. `sortDirection` is case-insensitive. `sortDirection` defaults to `asc` for properties or UIDs without explicit `sortDirection`.||

> **注意事项**
>
> 请注意，性能与请求的数据量直接相关。较大的页面
> 将需要更多时间来返回。

#### 组织单位选择模式的请求参数{ #request-parameters-for-organisational-unit-selection-mode } 

The available organisation unit selection modes are `SELECTED`, `CHILDREN`, `DESCENDANTS`,
`ACCESSIBLE`, `CAPTURE` and `ALL`. Each mode is explained in detail in [this
section](#webapi_tracker_orgunit_scope).

#### 用于过滤响应的请求参数{ #webapi_tracker_field_filter }

All export endpoints accept a `fields` parameter which controls which fields will be returned in the
JSON response. `fields` parameter accepts a comma separated list of field names or patterns. A few
possible `fields` filters are shown below. Refer to [Metadata field
filter](#webapi_metadata_field_filter) for a more complete guide on how to use `fields`.

##### 例子 { #examples } 

|参数示例|意义|
|:---|:---|
|`fields=*`|返回所有字段|
|`fields=createdAt,uid`(字段=创建时间,uid)|only returns fields `createdAt` and `uid`|
|`fields=enrollments[*,!uid]`|返回 `enrollments` 中除 `uid` 以外的所有字段|
|`fields=enrollments[uid]`|只返回 `enrollments` 字段 `uid`|
|`fields=enrollments[uid,enrolledAt]`"（字段=注册[uid,enrolledAt|只返回 `enrollments` 字段 `uid` 和 `enrolledAt`|

### 跟踪实体 (`GET /api/tracker/trackedEntities`){ #tracked-entities-get-apitrackertrackedentities } 

有两个端点专门用于跟踪实体：

- `GET /api/tracker/trackedEntities`
  - 检索符合给定条件的被跟踪实体
- `GET /api/tracker/trackedEntities/{id}`
  - 检索给定 id 的被跟踪实体

如果未另行指定，JSON 将是 `GET` 方法的默认响应。
API 还支持单个和集合端点的 CSV 导出。此外，压缩
CSV 类型是集合端点的一个选项。

#### CSV{ #csv } 

对于 CSV，`fields` 请求参数没有任何作用，响应将始终包含以下字段
将始终包含以下字段：

  - 跟踪实体（UID）
  - 跟踪实体类型 (UID)
  - 创建时间（日期）
  - 创建于客户端（日期时间）
  - updatedAt （日期时间）
  - updatedAtClient （日期时间）
  - 组织单位（UID）
  - 非活动（布尔）
  - 已删除（布尔型）
  - 潜在重复（布尔）
  - 几何图形（WKT, https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry.
    You can omit it in case of a `Point` type and with `latitude` and `longitude` provided)
  - latitude (Latitude of a `Point` type of Geometry)
  - longitude (Longitude of a `Point` type of Geometry)
  - 属性
  - displayName （字符串）
  - attrCreatedAt（属性创建日期时间）
  - attrUpdatedAt（属性最后更新日期 Datetime）
  - valueType （字符串）
  - 值（字符串）
  - storedBy (字符串)
  - createdBy （用户的用户名）
  - updatedBy（用户的用户名）

有关更多字段描述，请参阅 [Tracked Entities](#tracked-entities) 和 [Attributes](#attributes) 。

#### GZIP{ #gzip } 

响应为包含 `trackedEntities.csv` 文件的文件 `trackedEntities.csv.gz` 。

#### ZIP{ #zip } 

响应是包含 `trackedEntities.csv` 文件的文件 `trackedEntities.csv.zip` 。

#### 跟踪实体收集端点 `GET /api/tracker/trackedEntities`{ #tracked-entities-collection-endpoint-get-apitrackertrackedentities } 

该端点的目的是检索与客户提供的标准相匹配的跟踪实体。

端点会返回与请求参数相匹配的被跟踪实体列表。

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`filter`|`String`|以逗号分隔的属性筛选器值。|将响应缩小到符合给定过滤器的跟踪实体。过滤器是以冒号分隔的属性或属性 UID，带有可选的操作符和值对。例如：`filter=H9IlTX2X6SL:sw:A`，运算符以`sw`开头，后跟一个值。特殊字符（如 `+`）需要按百分比编码，因此应使用 `%2B` 代替 `+`。作为过滤值一部分的字符，如 `:`（冒号）或 `,`（逗号），需要用 `/`（斜线）转义。同样，`/` 也需要转义。允许对同一属性使用多个操作符/值对，如 `filter=AuPLng5hLbE:gt:438901703:lt:448901704`。不允许重复相同的属性 UID。用户需要访问属性才能对其进行过滤。|
|`orgUnits`|`String`|Comma-separated list of organisation unit `UID`s.|只返回属于所提供组织单位的被跟踪实体|
|`orgUnit` **已过时，将在第 42 版中移除，请使用 `orgUnits`**|`String`|以分号分隔的组织单位 `UID`s'列表。|只返回属于所提供组织单位的跟踪实体。|
|`orgUnitMode` see [orgUnitModes](#webapi_tracker_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|The mode of selecting organisation units, can be. Default is `SELECTED`, which refers to the selected organisation units only.|
|`ouMode` **已过时，将在第 42 版中移除，请使用 `orgUnitMode`** 参见 [orgUnitModes](#webapi_tracker_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|The mode of selecting organisation units, can be. Default is `SELECTED`, which refers to the selected organisation units only.|
|`program`|`String`|程序 `UID`|程序 `UID` ，响应中的被跟踪实体必须加入该程序。|
|`programStatus` **deprecated for removal in version 43 use `enrollmentStatus`**|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|被跟踪实体在给定项目中的注册状态。|
|`programStage`|`String`|`UID`|程序阶段 `UID` ，响应中的被跟踪实体必须有事件。|
|`followUp`|`Boolean`|`true`&#124;`false`|表示跟踪的实体是否被标记为指定计划的跟进对象。|
|`updatedAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 最后更新的开始日期和时间|
|`updatedBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 最后更新的结束日期和时间|
|`updatedWithin`|`Duration`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) | 返回不早于指定期限的被跟踪实体|
|`enrollmentStatus`|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|被跟踪实体在给定项目中的注册状态。|
|`enrollmentEnrolledAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|注册指定计划的开始日期和时间|
|`enrollmentEnrolledBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|注册指定计划的结束日期和时间|
|`enrollmentOccurredAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|给定程序中出现的开始日期和时间以及时间和时间|
|`enrollmentOccurredBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|给定程序中出现的结束日期和时间|
|`trackedEntityType`|`String`|被跟踪实体类型的 UID|只返回给定类型的跟踪实体。|
|`trackedEntities`|`String`|以逗号分隔的被跟踪实体 `UID`s'列表。|Filter the result down to a limited set of tracked entities using explicit uids of the tracked entities by using `trackedEntity=id1,id2`. This parameter will, at the very least, create the outer boundary of the results, forming the list of all tracked entities using the uids provided. If other parameters/filters from this table are used, they will further limit the results from the explicit outer boundary.|
|`trackedEntity` **deprecated for removal in version 42 use `trackedEntities`**|`String`|以分号分隔的被跟踪实体 `UID`s'列表。|Filter the result down to a limited set of tracked entities using explicit uids of the tracked entities by using `trackedEntity=id1;id2`. This parameter will, at the very least, create the outer boundary of the results, forming the list of all tracked entities using the uids provided. If other parameters/filters from this table are used, they will further limit the results from the explicit outer boundary.|
|`assignedUserMode`|`String`|`CURRENT`&#124;`PROVIDED`&#124;`NONE`&#124;`ANY`|根据指定的用户选择模式，将结果限制为已分配事件的被跟踪实体。有关解释，请参阅下表 "分配的用户模式"。 |
|`assignedUsers`|`String`|以逗号分隔的用户 UID 列表，用于根据分配给用户的事件进行过滤。|使用`assignedUser=id1,id2`，将结果筛选到事件分配给给定用户 ID 的一组有限的跟踪实体。只有当 `assignedUserMode` 为 `PROVIDED` 或 `null` 时，才会考虑该参数。例如，如果`assignedUserMode=CURRENT`和`assignedUser=someId`，API 将出错。|
|`assignedUser` **已过时，将在第 42 版中删除 使用 `assignedUsers`**|`String`|以分号分隔的用户 UID 列表，用于根据分配给用户的事件进行筛选。|Filter the result down to a limited set of tracked entities with events that are assigned to the given user IDs by using `assignedUser=id1;id2`.This parameter will only be considered if assignedUserMode is either `PROVIDED` or `null`. The API will error out, if for example, `assignedUserMode=CURRENT` and `assignedUser=someId`|
|`order`|`String`|以逗号分隔的属性名、属性或 UID 和排序方向对的列表，格式为 `propName:sortDirection`。|Supported values are `createdAt, createdAtClient, enrolledAt, inactive, trackedEntity, updatedAt, updatedAtClient`.|
|`eventStatus`|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`VISITED`&#124;`SCHEDULE`&#124;`OVERDUE`&#124;`SKIPPED`|指定程序中任何事件的状态|
|`eventOccurredAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|指定计划活动的开始日期和时间|
|`eventOccurredBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|指定计划活动的结束日期和时间|
|`includeDeleted`|`Boolean`|`true`&#124;`false`|表示是否包含软删除元素|
|`potentialDuplicate`|`Boolean`|`true`&#124;`false`| true：返回标记为潜在重复的被跟踪实体。false：返回未标记为潜在重复的被跟踪实体。如果省略，我们将不检查跟踪实体是否为潜在重复。 |

下表解释了可用的指定用户模式。

表：指定的用户模式

| 模式 | 描述 |
|---|---|
| 当前 | 包括分配给当前登录用户的事件。 |
| 提供 | 包括分配给请求中提供的用户的事件。 |
| 无 | 仅包括未分配的活动。 |
| 任何 | 包括所有分配的事件，只要是分配给某个人的事件，分配给谁并不重要。 |

查询不区分大小写。以下规则适用于查询
参数。

- 必须使用 `orgUnit` 指定至少一个组织单位。
  参数（一个或多个），或必须指定 `orgUnitMode=ALL` 参数。

- Only one of the `program` and `trackedEntity` parameters can be
  指定（零或一）。

- If `programStatus` is specified, then `program` must also be specified.

- If `enrollmentStatus` is specified, then `program` must also be specified.

- If `followUp` is specified, then `program` must also be specified.

- If `enrollmentEnrolledAfter` or `enrollmentEnrolledBefore` is specified then
  还必须指定 `program`。

- 过滤器项目只能指定一次。

##### 请求示例{ #example-requests } 

与特定组织单位和计划相关的所有被跟踪实体的查询如下所示
如下

    GET /api/tracker/trackedEntities?program=IpHINAT79UW&orgUnits=DiszpKrYNg8

使用带筛选器的一个属性和不带筛选器的一个属性查询被跟踪实体、
使用后代组织单位查询模式查询一个组织单位：

    GET /api/tracker/trackedEntities?program=IpHINAT79UW&orgUnits=DiszpKrYNg8&filter=w75KJ2mc4zz:EQ:John

为过滤器指定了多个操作数和过滤器的查询
物品：

    GET /api/tracker/trackedEntities?orgUnits=DiszpKrYNg8&program=ur1Edk5Oe2n&filter=lw1SqmMlnfh:GT:150&filter=lw1SqmMlnfh:LT:190

查询过滤器，其值需要转义，将被解释为 `:,/`：

    GET /api/tracker/trackedEntities?orgUnits=DiszpKrYNg8&program=ur1Edk5Oe2n&filter=lw1SqmMlnfh:EQ:/:/,//

要将程序注册日期指定为查询的一部分，请执行以下操作：

    GET /api/tracker/trackedEntities?orgUnits=DiszpKrYNg8&program=IpHINAT79UW&fields=trackedEntity,enrollments[enrolledAt]&enrollmentEnrolledAfter=2024-01-01

要在 *IN* 过滤器中使用多个值查询属性：

    GET /api/tracker/trackedEntities?trackedEntityType=nEenWmSyUEp&orgUnits=DiszpKrYNg8&filter=w75KJ2mc4zz:IN:Scott;Jimmy;Santiago

您可以使用一系列运算符进行过滤：

|操作员|  描述|
|---|---|
|`EQ`|等于|
|`GE`|大于或等于|
|`GT`|大于|
|`IN`|等于用"; "分隔的多个值之一|
|`LE`|小于或等于|
|`LIKE`|喜欢（自由文本匹配）|
|`LT`|小于|
|`NE`|不等于|

##### 跟踪实体响应示例{ #tracked-entities-response-example } 

API 支持 CSV 和 JSON 响应 `GET /api/tracker/trackedEntities`。

##### JSON{ #json } 

可根据所需字段过滤响应，请参阅[用于过滤响应的请求参数
响应的请求参数](#webapi_tracker_field_filter)

JSON 响应可以如下所示：

```json
{
  "pager": {
    "page": 1,
    "pageSize": 1
  },
  "trackedEntities": [
    {
      "trackedEntity": "F8yKM85NbxW",
      "trackedEntityType": "Zy2SEgA61ys",
      "createdAt": "2019-08-21T13:25:38.022",
      "createdAtClient": "2019-03-19T01:12:16.624",
      "updatedAt": "2019-08-21T13:31:33.410",
      "updatedAtClient": "2019-03-19T01:12:16.624",
      "orgUnit": "DiszpKrYNg8",
      "inactive": false,
      "deleted": false,
      "potentialDuplicate": false,
      "geometry": {
        "type": "Point",
        "coordinates": [
          -11.7896,
          8.2593
        ]
      },
      "attributes": [
        {
          "attribute": "B6TnnFMgmCk",
          "displayName": "Age (years)",
          "createdAt": "2019-08-21T13:25:38.477",
          "updatedAt": "2019-08-21T13:25:38.477",
          "storedBy": "braimbault",
          "valueType": "INTEGER_ZERO_OR_POSITIVE",
          "value": "30"
        },
        {
          "attribute": "TfdH5KvFmMy",
          "displayName": "First Name",
          "createdAt": "2019-08-21T13:25:38.066",
          "updatedAt": "2019-08-21T13:25:38.067",
          "storedBy": "josemp10",
          "valueType": "TEXT",
          "value": "Sarah"
        },
        {
          "attribute": "aW66s2QSosT",
          "displayName": "Last Name",
          "createdAt": "2019-08-21T13:25:38.388",
          "updatedAt": "2019-08-21T13:25:38.388",
          "storedBy": "karoline",
          "valueType": "TEXT",
          "value": "Johnson"
        }
      ]
    }
  ]
}
```

##### CSV{ #csv } 

CSV 响应可以如下所示：

```
trackedEntity,trackedEntityType,createdAt,createdAtClient,updatedAt,updatedAtClient,orgUnit,inactive,deleted,potentialDuplicate,geometry,latitude,longitude,storedBy,createdBy,updatedBy,attrCreatedAt,attrUpdatedAt,attribute,displayName,value,valueType
F8yKM85NbxW,Zy2SEgA61ys,2019-08-21T11:25:38.022Z,2019-03-19T00:12:16.624Z,2019-08-21T11:31:33.410Z,2019-03-19T00:12:16.624Z,DiszpKrYNg8,false,false,false,"POINT (-11.7896 8.2593)",8.2593,-11.7896,,,,2019-08-21T11:25:38.477Z,2019-08-21T11:25:38.477Z,B6TnnFMgmCk,"Age (years)",30,INTEGER_ZERO_OR_POSITIVE
F8yKM85NbxW,Zy2SEgA61ys,2019-08-21T11:25:38.022Z,2019-03-19T00:12:16.624Z,2019-08-21T11:31:33.410Z,2019-03-19T00:12:16.624Z,DiszpKrYNg8,false,false,false,"POINT (-11.7896 8.2593)",8.2593,-11.7896,,,,2019-08-21T11:25:38.066Z,2019-08-21T11:25:38.067Z,TfdH5KvFmMy,"First Name",Sarah,TEXT
F8yKM85NbxW,Zy2SEgA61ys,2019-08-21T11:25:38.022Z,2019-03-19T00:12:16.624Z,2019-08-21T11:31:33.410Z,2019-03-19T00:12:16.624Z,DiszpKrYNg8,false,false,false,"POINT (-11.7896 8.2593)",8.2593,-11.7896,,,,2019-08-21T11:25:38.388Z,2019-08-21T11:25:38.388Z,aW66s2QSosT,"Last Name",Johnson,TEXT
```

#### Tracked Entities single object endpoint `GET /api/tracker/trackedEntities/{uid}`

该端点的目的是检索一个给定 uid 的被跟踪实体。

##### 请求语法 { #request-syntax } 

`GET /api/tracker/trackedEntities/{uid}?program={programUid}&fields={fields}`

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`uid`|`String`|`uid`|返回具有指定 `uid` 的被跟踪实体|
|`program`|`String`|`uid`| 在响应中包含程序属性（仅限用户可访问的属性） |
|`fields`|`String`| Any valid field filter (default `*,!relationships,!enrollments,!events,!programOwners`) |在响应中包含指定的子对象|

##### 请求示例{ #example-requests } 

对被跟踪实体的查询：

    GET /api/tracker/trackedEntities/PQfMcpmXeFE

##### 跟踪实体响应示例{ #tracked-entity-response-example } 

API 支持对 `GET /api/tracker/trackedEntities/{uid}` 的 CSV 和 JSON 响应。

###### JSON{ #json } 

json 响应示例：

```json
{
  "trackedEntity": "PQfMcpmXeFE",
  "trackedEntityType": "nEenWmSyUEp",
  "createdAt": "2014-03-06T05:49:28.256",
  "createdAtClient": "2014-03-06T05:49:28.256",
  "updatedAt": "2016-08-03T23:49:43.309",
  "orgUnit": "DiszpKrYNg8",
  "inactive": false,
  "deleted": false,
  "potentialDuplicate": false,
  "attributes": [
    {
      "attribute": "w75KJ2mc4zz",
      "code": "MMD_PER_NAM",
      "displayName": "First name",
      "createdAt": "2016-08-03T23:49:43.308",
      "updatedAt": "2016-08-03T23:49:43.308",
      "valueType": "TEXT",
      "value": "John"
    },
    {
      "attribute": "zDhUuAYrxNC",
      "displayName": "Last name",
      "createdAt": "2016-08-03T23:49:43.309",
      "updatedAt": "2016-08-03T23:49:43.309",
      "valueType": "TEXT",
      "value": "Kelly"
    }
  ],
  "enrollments": [
    {
      "enrollment": "JMgRZyeLWOo",
      "createdAt": "2017-03-06T05:49:28.340",
      "createdAtClient": "2016-03-06T05:49:28.340",
      "updatedAt": "2017-03-06T05:49:28.357",
      "trackedEntity": "PQfMcpmXeFE",
      "program": "IpHINAT79UW",
      "status": "ACTIVE",
      "orgUnit": "DiszpKrYNg8",
      "enrolledAt": "2024-03-06T00:00:00.000",
      "occurredAt": "2024-03-04T00:00:00.000",
      "followUp": false,
      "deleted": false,
      "events": [
        {
          "event": "Zq2dg6pTNoj",
          "status": "ACTIVE",
          "program": "IpHINAT79UW",
          "programStage": "ZzYYXq4fJie",
          "enrollment": "JMgRZyeLWOo",
          "trackedEntity": "PQfMcpmXeFE",
          "relationships": [],
          "scheduledAt": "2023-03-10T00:00:00.000",
          "followUp": false,
          "deleted": false,
          "createdAt": "2017-03-06T05:49:28.353",
          "createdAtClient": "2016-03-06T05:49:28.353",
          "updatedAt": "2017-03-06T05:49:28.353",
          "attributeOptionCombo": "HllvX50cXC0",
          "attributeCategoryOptions": "xYerKDKCefk",
          "dataValues": [],
          "notes": [],
          "followup": false
        }
      ],
      "relationships": [],
      "attributes": [
        {
          "attribute": "w75KJ2mc4zz",
          "code": "MMD_PER_NAM",
          "displayName": "First name",
          "createdAt": "2016-08-03T23:49:43.308",
          "updatedAt": "2016-08-03T23:49:43.308",
          "valueType": "TEXT",
          "value": "John"
        },
        {
          "attribute": "zDhUuAYrxNC",
          "displayName": "Last name",
          "createdAt": "2016-08-03T23:49:43.309",
          "updatedAt": "2016-08-03T23:49:43.309",
          "valueType": "TEXT",
          "value": "Kelly"
        },
        {
          "attribute": "AuPLng5hLbE",
          "code": "National identifier",
          "displayName": "National identifier",
          "createdAt": "2016-08-03T23:49:43.301",
          "updatedAt": "2016-08-03T23:49:43.301",
          "valueType": "TEXT",
          "value": "245435245"
        },
        {
          "attribute": "ruQQnf6rswq",
          "displayName": "TB number",
          "createdAt": "2016-08-03T23:49:43.308",
          "updatedAt": "2016-08-03T23:49:43.308",
          "valueType": "TEXT",
          "value": "1Z 1F2 A84 59 4464 173 6"
        },
        {
          "attribute": "cejWyOfXge6",
          "displayName": "Gender",
          "createdAt": "2016-08-03T23:49:43.307",
          "updatedAt": "2016-08-03T23:49:43.307",
          "valueType": "TEXT",
          "value": "Male"
        },
        {
          "attribute": "VqEFza8wbwA",
          "code": "MMD_PER_ADR1",
          "displayName": "Address",
          "createdAt": "2016-08-03T23:49:43.307",
          "updatedAt": "2016-08-03T23:49:43.307",
          "valueType": "TEXT",
          "value": "Main street 2"
        }
      ],
      "notes": []
    }
  ],
  "programOwners": [
    {
      "orgUnit": "DiszpKrYNg8",
      "trackedEntity": "PQfMcpmXeFE",
      "program": "ur1Edk5Oe2n"
    },
    {
      "orgUnit": "DiszpKrYNg8",
      "trackedEntity": "PQfMcpmXeFE",
      "program": "IpHINAT79UW"
    }
  ]
}
```

###### CSV{ #csv } 

响应将与集合端点相同，但引用的是单个跟踪实体，尽管每个属性可能有多行。
实体，尽管每个属性可能有多行。

#### 跟踪实体属性值更改日志{ #webapi_tracker_attribute_change_logs }
`GET /api/tracker/trackedEntities/{uid}/changeLogs`

此端点可检索特定被跟踪实体属性的更改日志。它会返回该实体随时间发生变化的所有被跟踪实体属性的列表。

|参数|类型|允许值|
|---|---|---|
|path `/{uid}`|`String`|跟踪实体 `UID`。|
|`program`|`String`|程序 `UID`（可选）。|

##### 跟踪实体属性值更改日志响应示例{ #tracked-entity-attribute-value-change-logs-response-example } 

json 响应示例：

```json
{
   "pager":{
      "page":1,
      "pageSize":10
   },
   "changeLogs":[
      {
         "createdBy":{
            "uid":"AIK2aQOJIbj",
            "username":"tracker",
            "firstName":"Tracker demo",
            "surname":"User"
         },
         "createdAt":"2024-06-20T14:51:16.433",
         "type":"UPDATE",
         "change":{
            "dataValue":{
               "dataElement":"bx6fsa0t90x",
               "previousValue":"true",
               "currentValue":"false"
            }
         }
      },
      {
         "createdBy":{
            "uid":"AIK2aQOJIbj",
            "username":"tracker",
            "firstName":"Tracker demo",
            "surname":"User"
         },
         "createdAt":"2024-06-20T14:50:32.966",
         "type":"CREATE",
         "change":{
            "dataValue":{
               "dataElement":"ebaJjqltK5N",
               "currentValue":"0"
            }
         }
      }
   ]
}
```

The change log type can be `CREATE`, `UPDATE`, or `DELETE`.
`CREATE` and `DELETE` will always hold a single value: the former shows the current value, and the latter shows the value that was deleted. UPDATE will hold two values: the previous and the current.

### 注册人数 (`GET /api/tracker/enrollments`){ #enrollments-get-apitrackerenrollments } 

有两个端点专门用于注册：

- `GET /api/tracker/enrollments`
    - 检索符合给定条件的注册人数
- `GET /api/tracker/enrollments/{id}`
    - 检索给定 id 的注册信息

#### 注册信息收集端点 `GET /api/tracker/enrollments`{ #enrollment-collection-endpoint-get-apitrackerenrollments } 

根据筛选条件返回事件列表。

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`orgUnits`|`String`|Comma-separated list of organisation unit `UID`s.|只返回属于所提供组织单位的注册信息。|
|`orgUnit` **已过时，将在第 42 版中移除，请使用 `orgUnits`**|`String`|以分号分隔的组织单位 `UID`s'列表。|只返回属于所提供组织单位的注册信息。|
|`orgUnitMode` see [orgUnitModes](#webapi_tracker_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|The mode of selecting organisation units, can be. Default is `SELECTED`, which refers to the selected organisation units only.|
|`ouMode` **已过时，将在第 42 版中移除，请使用 `orgUnitMode`** 参见 [orgUnitModes](#webapi_tracker_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|The mode of selecting organisation units, can be. Default is `SELECTED`, which refers to the selected organisation units only.|
|`program`|`String`|`uid`| 计划标识符|
|`programStatus` **已过时，将在第 43 版中删除，使用 `status`**|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|注册状态。|
|`status`|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|注册状态。|
|`followUp`|`boolean`| `true`&#124;`false` | 给定程序的被跟踪实体的跟踪状态。可以是 `true`|`false` 或省略。|
|`updatedAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 只有在此日期后更新的注册信息|
|`updatedWithin`|`Duration`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| 只有在给定期限后更新的注册信息 |
|`enrolledAfter`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|  仅限此日期之前的注册|
|`enrolledBefore`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| 仅限于此日期之前的注册|
|`trackedEntityType`|`String`|`uid`| 被跟踪实体类型的标识符|
|`trackedEntity`|`String`|`uid`| 被跟踪实体的标识符|
|`order`|`String`|以逗号分隔的属性名、属性或 UID 和排序方向对的列表，格式为 `propName:sortDirection`。|Supported fields: `completedAt, createdAt, createdAtClient, enrolledAt, updatedAt, updatedAtClient`.|
|`enrollments`|`String`|以逗号分隔的报名`UID`列表。|使用 `enrollments=id1,id2`，将结果筛选为有限的一组 ID。|
|`enrollment` **deprecated for removal in version 42 use `enrollments`**|`String`|以半角分隔的 `uid` 列表|使用 `enrollment=id1;id2`，将结果筛选为有限的一组 ID。|
|`includeDeleted`|`Boolean`| |为真时，软删除事件将包含在查询结果中。|

查询不区分大小写。以下规则适用于查询参数。

- 必须使用 `orgUnit` 参数（一个或多个）指定至少一个组织单位，或
必须指定*orgUnitMode=ALL*。

- 只能指定 *program* 和 *trackedEntity* 参数中的一个（0 或 1）。

- 如果指定了 *programStatus*，则还必须指定 *program*。
- 如果指定了*enrollmentStatus*，则还必须指定*program*。

- 如果指定了*followUp*，则还必须指定*program*。

- 如果指定了 *enrolledAfter* 或 *enrolledBefore*，则还必须指定 *program*。

##### 请求示例{ #example-requests } 

查询与特定组织单位关联的所有注册
看起来像这样：

    GET /api/tracker/enrollments?orgUnits=DiszpKrYNg8

要将响应限制在属于特定计划的注册人数上，您可以包含一个
程序查询参数：

    GET /api/tracker/enrollments?orgUnits=O6uvpzGd5pu&orgUnitMode=DESCENDANTS&program=ur1Edk5Oe2n

要将程序注册日期指定为查询的一部分，请执行以下操作：

    GET /api/tracker/enrollments?orgUnits=DiszpKrYNg8&program=M3xtLkYBlKI&enrolledAfter=2023-11-14&enrolledBefore=2024-02-07

要将响应限制为特定跟踪实体的注册，您可以包含一个跟踪实体的
实体查询参数：

    GET /api/tracker/enrollments?trackedEntity=ClJ3fn47c4s

要将响应限制在特定跟踪实体的注册信息上，可以包含一个跟踪实体查询参数。
实体查询参数，在本例中，我们将其限制为可为
当前用户：

    GET /api/tracker/enrollments?orgUnitMode=ACCESSIBLE&trackedEntity=tphfdyIiVL6

##### 回应格式 { #response-format } 

The `JSON` response can look like the following.

```json
{
  "pager": {
    "page": 1,
    "pageSize": 1
  },
  "enrollments": [
    {
      "enrollment": "TRE0GT7eh7Q",
      "createdAt": "2019-08-21T13:28:00.056",
      "createdAtClient": "2018-11-13T15:06:49.009",
      "updatedAt": "2019-08-21T13:29:44.942",
      "updatedAtClient": "2019-08-21T13:29:44.942",
      "trackedEntity": "s4NfKOuayqG",
      "program": "M3xtLkYBlKI",
      "status": "COMPLETED",
      "orgUnit": "DiszpKrYNg8",
      "enrolledAt": "2023-11-13T00:00:00.000",
      "occurredAt": "2023-11-13T00:00:00.000",
      "followUp": false,
      "deleted": false,
      "storedBy": "healthworker1",
      "notes": []
    }
  ]
}
```

#### Enrollments single object endpoint `GET /api/tracker/enrollments/{uid}`

该端点的目的是检索一个给定 uid 的 Enrollment。

##### 请求语法 { #request-syntax } 

`GET /api/tracker/enrollment/{uid}`

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`uid`|`String`|`uid`|返回指定`uid`的注册信息|
|`fields`|`String`| Any valid field filter (default `*,!relationships,!events,!attributes`) |包括
中指定的子对象

##### 请求示例{ #example-requests } 

报名查询：

    GET /api/tracker/enrollments/JMgRZyeLWOo

##### 回应格式 { #response-format } 

```json
{
  "enrollment": "JMgRZyeLWOo",
  "createdAt": "2017-03-06T05:49:28.340",
  "createdAtClient": "2016-03-06T05:49:28.340",
  "updatedAt": "2017-03-06T05:49:28.357",
  "trackedEntity": "PQfMcpmXeFE",
  "program": "IpHINAT79UW",
  "status": "ACTIVE",
  "orgUnit": "DiszpKrYNg8",
  "enrolledAt": "2024-03-06T00:00:00.000",
  "occurredAt": "2024-03-04T00:00:00.000",
  "followUp": false,
  "deleted": false,
  "notes": []
}
```

### 事件 (`GET /api/tracker/events`){ #events-get-apitrackerevents } 

有两个端点专门用于处理事件：

- `GET /api/tracker/events`
    - 检索符合给定条件的事件
- `GET /api/tracker/events/{id}`
    - 检索给定 id 的事件

如果未另行指定，JSON 将是 `GET` 方法的默认响应。
API 还支持单个和集合端点的 CSV 导出。此外，它还支持
压缩 JSON 和 CSV。

#### 活动 CSV{ #events-csv } 

对于 CSV，`fields` 请求参数没有任何作用，响应将始终包含以下字段
将始终包含以下字段：

  - 事件
  - 状态（字符串）
  - 程序
  - 程序阶段
  - 注册
  - 组织单位（UID）
  - occurredAt (DateTime)
  - scheduledAt (DateTime)
  - 几何图形（WKT, https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry.
    You can omit it in case of a `Point` type and with `latitude` and `longitude` provided)
  - latitude (Latitude of a `Point` type of Geometry)
  - longitude (Longitude of a `Point` type of Geometry)
  - followUp （布尔）
  - 已删除（布尔型）
  - 创建时间（DateTime）
  - 创建于客户端（日期时间）
  - updatedAt (DateTime)
  - updatedAtClient (DateTime)
  - completedBy (字符串)
  - completedAt (DateTime)
  - updatedBy（用户的用户名）
  - attributeOptionCombo (UID)
  - attributeCategoryOptions (UID)
  - assignedUser （用户的用户名）
  - dataElement (UID)
  - 值（字符串）
  - storedBy (字符串)
  - providedElsewhere (布尔值)
  - storedByDataValue （字符串）
  - createAtDataValue （日期时间）
  - updatedAtDataValue （日期时间）

有关更多字段说明，请参阅 [事件]（#events）和 [数据值]（#data-values）。

#### 活动 GZIP{ #events-gzip } 

The response is file `events.json.gz` or `events.csv.gzip` containing the `events.json`
or `events.csv` file.

#### 活动 ZIP{ #events-zip } 

The response is file`events.json.gz` or `events.json.zip` containing the `events.json`
or `events.csv` file.

#### 事件收集端点 `GET /api/tracker/events`{ #events-collection-endpoint-get-apitrackerevents } 

根据提供的筛选器返回事件列表。

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`program`|`String`|`uid`| 计划标识符|
|`programStage`|`String`|`uid`| 计划阶段的标识符|
|`programStatus` **deprecated for removal in version 43 use `enrollmentStatus`**|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|事件注册的状态。|
|`filter`|`String`|数据元素过滤器的逗号分隔值|将响应缩小到与给定过滤器匹配的事件。过滤器是以冒号分隔的属性或数据元素 UID，带有可选的操作符和值对。例如：`filter=fazCI2ygYkq:eq:PASSIVE`，操作符以`eq`开头，后跟一个值。作为过滤器值一部分的字符，如 `:`（冒号）或 `,`（逗号），需要用 `/`（斜线）转义。同样，`/` 也需要转义。允许对同一属性/数据元素使用多个操作符/值对，如 `filter=qrur9Dvnyt5:gt:70:lt:80`。不允许重复相同的数据元素 UID。用户需要访问数据元素才能对其进行筛选。|
|`filterAttributes`|`String`|以逗号分隔的属性筛选器值|将响应缩小到符合给定过滤器的跟踪实体。过滤器是以冒号分隔的属性或属性 UID，带有可选的操作符和值对。例如：`filter=H9IlTX2X6SL:sw:A`，运算符以`sw`开头，后跟一个值。特殊字符（如 `+`）需要按百分比编码，因此应使用 `%2B` 代替 `+`。作为过滤值一部分的字符，如 `:`（冒号）或 `,`（逗号），需要用 `/`（斜线）转义。同样，`/` 也需要转义。允许对同一属性使用多个操作符/值对，如 `filter=AuPLng5hLbE:gt:438901703:lt:448901704`。不允许重复相同的属性 UID。用户需要访问属性才能对其进行过滤。|
|`followUp`|`boolean`| `true`&#124;`false` | Whether event is considered for follow up in program. Defaults to `true`|
|`trackedEntity`|`String`|`uid`|被跟踪实体的标识符|
|`orgUnit`|`String`|`uid`|组织单位标识符|
|`orgUnitMode` see [orgUnitModes](#webapi_tracker_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|The mode of selecting organisation units, can be. Default is `SELECTED`, which refers to the selected organisation units only.|
|`ouMode` **已过时，将在第 42 版中移除，请使用 `orgUnitMode`** 参见 [orgUnitModes](#webapi_tracker_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|The mode of selecting organisation units, can be. Default is `SELECTED`, which refers to the selected organisation units only.|
|`status`|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`VISITED`&#124;`SCHEDULE`&#124;`OVERDUE`&#124;`SKIPPED` | 事件状态|
|`occurredAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 筛选此日期之后发生的事件。|
|`occurredBefore`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| 筛选在此日期之前发生的事件。|
|`scheduledAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 筛选在此日期之后安排的事件。|
|`scheduledBefore`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| 筛选在此日期之前安排的事件。|
|`updatedAfter`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| 筛选在此日期后更新的事件。不能与 `updatedWithin` 一起使用。|
|`updatedBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 筛选在此日期之前更新的事件。不能与 `updatedWithin` 一起使用。|
|`updatedWithin`|`Duration`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Durations)| Include only items which are updated within the given duration.<br><br> The format is [ISO-8601#Duration](https://en.wikipedia.org/wiki/ISO_8601#Durations)|
|`enrollmentStatus`|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|事件注册的状态。|
|`enrollmentEnrolledAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|注册指定计划的开始日期和时间|
|`enrollmentEnrolledBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|注册指定计划的结束日期和时间|
|`enrollmentOccurredAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|给定程序的开始日期和时间|
|`enrollmentOccurredBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|给定程序的结束日期和时间|
|`dataElementIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| 用于导出的数据元素 ID 方案。|
|`categoryOptionComboIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| 类别 选项 组合 ID 方案用于导出|
|`orgUnitIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| 出口时使用的组织单位标识方案|
|`programIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| 用于导出的程序 ID 方案|
|`programStageIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| 用于导出的计划阶段 ID 方案|
|`idScheme`|`string`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| 允许一次性为数据元素、类别选项组合、orgUnit、程序和程序阶段设置 id 方案。|
|`order`|`String`|以逗号分隔的属性名称、属性或数据元素 UID 和排序方向对的列表，格式为 `propName:sortDirection`。|支持的字段：`assignedUser, assignedUserDisplayName, attributeOptionCombo, completedAt, completedBy, createdAt, createdAtClient, createdBy, deleted, enrolledAt, enrollment, enrollmentStatus, event, followUp, followup (deprecated), occurredAt, orgUnit, program, programStage, scheduledAt, status, storedBy, trackedEntity, updatedAt, updatedAtClient, updatedBy`.|
|`events`|`String`|以逗号分隔的事件 `UID`列表。|使用 `event=id1,id2` 将结果筛选到有限的一组 ID。|
|`event` **已过时，将在第 42 版中移除，请使用 `events`**|`String`|以半角分隔的 `uid` 列表| 使用 `event=id1;id2` 将结果筛选到有限的一组 ID。|
|`attributeCategoryCombo` (see note)|`String`|属性类别组合标识符。必须与 `attributeCategoryOptions`结合使用。|
|`attributeCc` **已过时，将在第 42 版中移除，请使用 `attributeCategoryCombo`**|`String`|属性类别组合标识符（必须与 attributeCos 结合使用）|
|`attributeCategoryOptions` (see note)|`String`|以逗号分隔的属性类别选项标识符。必须与 `attributeCategoryCombo`结合使用。|
|`attributeCos` **已过时，将在第 42 版中移除，请使用 `attributeCategoryOptions`**|`String`|以分号分隔的属性类别选项标识符。必须与 `attributeCc`结合使用。|
|`includeDeleted`|`Boolean`| |  为真时，软删除事件将包含在查询结果中。|
|`assignedUserMode`|`String`| `CURRENT`&#124;`PROVIDED`&#124;`NONE`&#124;`ANY`| 指定用户选择模式|
|`assignedUsers`|`String`|以逗号分隔的用户 UID 列表，用于根据分配给用户的事件进行过滤。|Filter the result down to a limited set of tracked entities with events that are assigned to the given user IDs by using `assignedUser=id1,id2`.This parameter will only be considered if `assignedUserMode` is either `PROVIDED` or `null`. The API will error out, if for example, `assignedUserMode=CURRENT` and `assignedUser=someId`.|
|`assignedUser` **已过时，将在第 42 版中删除 使用 `assignedUsers`**|`String`|以分号分隔的用户 UID 列表，用于根据分配给用户的事件进行筛选。|Filter the result down to a limited set of tracked entities with events that are assigned to the given user IDs by using `assignedUser=id1;id2`.This parameter will only be considered if assignedUserMode is either `PROVIDED` or `null`. The API will error out, if for example, `assignedUserMode=CURRENT` and `assignedUser=someId`|

> **注**
>
> 如果查询既不包含 `attributeCategoryOptions` 也不包含 `attributeCategoryOptions`、
> 服务器将返回用户具有读取权限的所有属性选项组合的事件。

##### 请求示例{ #example-requests } 

查询具有特定组织单位子机构的所有事件：

    GET /api/tracker/events?orgUnit=YuQRtpLP10I&orgUnitMode=CHILDREN

查询某一组织单位的所有后代的所有事件，即子层次结构中的所有组织单位： 查询某一组织单位的所有后代的所有事件，即子层次结构中的所有组织单位
子层次结构中的所有组织单位：

    GET /api/tracker/events?orgUnit=O6uvpzGd5pu&orgUnitMode=DESCENDANTS

使用特定程序和组织单位查询所有事件：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc

查询具有特定计划和组织单位的所有活动，按预定日期排序
升序：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&order=scheduledAt

查询某一程序和组织单位中发生日期最近的 10 个事件 - 通过分页和按发生日期降序排序的方法
通过分页和按发生日期降序排序：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&order=occurredAt:desc&pageSize=10&page=1

查询特定跟踪实体的某个计划和组织单位的所有事件：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=M3xtLkYBlKI&trackedEntity=dNpxRu1mWG5

查询所有早于或等于 2024-02-03 且与计划和组织相关的事件
单位：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&occurredBefore=2024-02-03

为数据元素 UID 指定多个操作数和筛选器的查询：

    GET /api/tracker/events?orgUnit=g8upMTyEZGZ&program=M3xtLkYBlKI&filter=rFQNCGMYud2:GT:35&filter=rFQNCGMYud2:LT:50

查询过滤器，其值需要转义，将被解释为 `:,/`：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=lxAQ7Zs9VYR&filter=DanTR5x0WDK:EQ:/:/,//

##### 事件响应示例{ #events-response-example } 

API 支持 CSV 和 JSON 响应 `GET /api/tracker/events`。

###### JSON{ #json } 

JSON 响应如下：

```json
{
  "pager": {
    "page": 1,
    "pageSize": 1
  },
  "events": [
    {
      "event": "A7rzcnZTe2T",
      "status": "ACTIVE",
      "program": "eBAyeGv0exc",
      "programStage": "Zj7UnCAulEk",
      "enrollment": "RiLEKhWHlxZ",
      "orgUnit": "DwpbWkiqjMy",
      "occurredAt": "2023-02-13T00:00:00.000",
      "scheduledAt": "2023-02-13T00:00:00.000",
      "followUp": false,
      "deleted": false,
      "createdAt": "2017-09-08T21:40:22.000",
      "createdAtClient": "2016-09-08T21:40:22.000",
      "updatedAt": "2017-09-08T21:40:22.000",
      "attributeOptionCombo": "HllvX50cXC0",
      "attributeCategoryOptions": "xYerKDKCefk",
      "geometry": {
        "type": "Point",
        "coordinates": [
          -11.468912037323042,
          7.515913998868316
        ]
      },
      "dataValues": [
        {
          "createdAt": "2016-12-06T18:22:34.438",
          "updatedAt": "2016-12-06T18:22:34.438",
          "storedBy": "bjorn",
          "providedElsewhere": false,
          "dataElement": "F3ogKBuviRA",
          "value": "[-11.4880220438585,7.50978830548003]"
        },
        {
          "createdAt": "2013-12-30T14:23:57.423",
          "updatedAt": "2013-12-30T14:23:57.423",
          "storedBy": "lars",
          "providedElsewhere": false,
          "dataElement": "eMyVanycQSC",
          "value": "2018-02-07"
        },
        {
          "createdAt": "2013-12-30T14:23:57.382",
          "updatedAt": "2013-12-30T14:23:57.382",
          "storedBy": "lars",
          "providedElsewhere": false,
          "dataElement": "oZg33kd9taw",
          "value": "Male"
        }
      ],
      "notes": [],
      "followup": false
    }
  ]
}
```

###### CSV{ #csv } 

CSV 响应如下：

```csv
event,status,program,programStage,enrollment,orgUnit,occurredAt,scheduledAt,geometry,latitude,longitude,followUp,deleted,createdAt,createdAtClient,updatedAt,updatedAtClient,completedBy,completedAt,updatedBy,attributeOptionCombo,attributeCategoryOptions,assignedUser,dataElement,value,storedBy,providedElsewhere,storedByDataValue,updatedAtDataValue,createdAtDataValue
A7rzcnZTe2T,ACTIVE,eBAyeGv0exc,Zj7UnCAulEk,RiLEKhWHlxZ,DwpbWkiqjMy,2023-02-12T23:00:00Z,2023-02-12T23:00:00Z,"POINT (-11.468912037323042 7.515913998868316)",7.515913998868316,-11.468912037323042,false,false,2017-09-08T19:40:22Z,,2017-09-08T19:40:22Z,,,,,HllvX50cXC0,xYerKDKCefk,,F3ogKBuviRA,"[-11.4880220438585,7.50978830548003]",admin,false,,2016-12-06T17:22:34.438Z,2016-12-06T17:22:34.438Z
A7rzcnZTe2T,ACTIVE,eBAyeGv0exc,Zj7UnCAulEk,RiLEKhWHlxZ,DwpbWkiqjMy,2023-02-12T23:00:00Z,2023-02-12T23:00:00Z,"POINT (-11.468912037323042 7.515913998868316)",7.515913998868316,-11.468912037323042,false,false,2017-09-08T19:40:22Z,,2017-09-08T19:40:22Z,,,,,HllvX50cXC0,xYerKDKCefk,,eMyVanycQSC,2018-02-07,admin,false,,2013-12-30T13:23:57.423Z,2013-12-30T13:23:57.423Z
A7rzcnZTe2T,ACTIVE,eBAyeGv0exc,Zj7UnCAulEk,RiLEKhWHlxZ,DwpbWkiqjMy,2023-02-12T23:00:00Z,2023-02-12T23:00:00Z,"POINT (-11.468912037323042 7.515913998868316)",7.515913998868316,-11.468912037323042,false,false,2017-09-08T19:40:22Z,,2017-09-08T19:40:22Z,,,,,HllvX50cXC0,xYerKDKCefk,,msodh3rEMJa,2018-02-13,admin,false,,2013-12-30T13:23:57.467Z,2013-12-30T13:23:57.467Z
```

#### Events single object endpoint `GET /api/tracker/events/{uid}`

该端点的目的是检索一个给定 uid 的事件。

##### 请求语法 { #request-syntax } 

`GET /api/tracker/events/{uid}?fields={fields}`

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`uid`|`String`|`uid`|返回指定 `uid` 的事件|
|`fields`|`String`| 任何有效的字段过滤器（默认为`*,!关系`）。 |在响应中包含指定的子对象|

##### 请求示例{ #example-requests } 

查询事件：

    GET /api/tracker/events/rgWr86qs0sI

##### 事件响应示例{ #event-response-example } 

应用程序接口支持对 `GET /api/tracker/trackedEntities` 的 CSV 和 JSON 响应

###### JSON{ #json } 

```json
{
  "event": "rgWr86qs0sI",
  "status": "ACTIVE",
  "program": "kla3mAPgvCH",
  "programStage": "aNLq9ZYoy9W",
  "enrollment": "Lo3SHzCnMSm",
  "orgUnit": "DiszpKrYNg8",
  "occurredAt": "2024-10-12T00:00:00.000",
  "followUp": false,
  "deleted": false,
  "createdAt": "2018-10-20T12:09:19.492",
  "createdAtClient": "2017-10-20T12:09:19.492",
  "updatedAt": "2018-10-20T12:09:19.492",
  "attributeOptionCombo": "amw2rQP6r6M",
  "attributeCategoryOptions": "RkbOhHwiOgW",
  "dataValues": [
    {
      "createdAt": "2015-10-20T12:09:19.640",
      "updatedAt": "2015-10-20T12:09:19.640",
      "storedBy": "system",
      "providedElsewhere": false,
      "dataElement": "HyJL2Lt37jN",
      "value": "12"
    }
  ],
  "notes": [],
  "followup": false
}
```

###### CSV{ #csv } 

响应将与收集端点相同，但指的是单个事件、
尽管每个数据元素值可能有多行。

#### 事件数据值更改日志{ #webapi_event_data_value_change_logs }
`GET /api/tracker/events/{uid}/changeLogs`

此端点可检索特定事件数据值的更改日志。它会返回该特定事件随时间变化的所有事件数据值的列表。

|参数|类型|允许值|
|---|---|---|
|path `/{uid}`|`String`|事件 `UID`。|

##### 事件数据值更改日志响应示例{ #event-data-value-change-logs-response-example } 

json 响应示例：

```json
{
   "pager":{
      "page":1,
      "pageSize":10
   },
   "changeLogs":[
      {
         "createdBy":{
            "uid":"AIK2aQOJIbj",
            "username":"tracker",
            "firstName":"Tracker demo",
            "surname":"User"
         },
         "createdAt":"2024-06-20T15:43:36.342",
         "type":"DELETE",
         "change":{
            "dataValue":{
               "dataElement":"UXz7xuGCEhU",
               "previousValue":"12"
            }
         }
      },
      {
         "createdBy":{
            "uid":"AIK2aQOJIbj",
            "username":"tracker",
            "firstName":"Tracker demo",
            "surname":"User"
         },
         "createdAt":"2024-06-20T15:43:27.175",
         "type":"CREATE",
         "change":{
            "dataValue":{
               "dataElement":"UXz7xuGCEhU",
               "currentValue":"12"
            }
         }
      },
      {
         "createdBy":{
            "uid":"AIK2aQOJIbj",
            "username":"tracker",
            "firstName":"Tracker demo",
            "surname":"User"
         },
         "createdAt":"2024-06-20T14:51:16.433",
         "type":"UPDATE",
         "change":{
            "dataValue":{
               "dataElement":"bx6fsa0t90x",
               "previousValue":"true",
               "currentValue":"false"
            }
         }
      }
   ]
}
```

The change log type can be `CREATE`, `UPDATE`, or `DELETE`.
`CREATE` and `DELETE` will always hold a single value: the former shows the current value, and the latter shows the value that was deleted. UPDATE will hold two values: the previous and the current.


### 关系 (`GET /api/tracker/relationships`){ #relationships-get-apitrackerrelationships } 

关系是跟踪器中两个实体之间的链接。这些实体可以是跟踪实体、
注册和事件。

该端点的目的是检索对象之间的关系。

与其他跟踪对象端点不同，关系只暴露一个端点：

- `GET /api/tracker/relationships?[trackedEntity={trackedEntityUid}|enrollment={enrollmentUid}|event={eventUid}]&fields=[fields]`

#### 请求参数{ #request-parameters } 

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`trackedEntity`|`String`|`uid`|被跟踪实体的标识符|
|`enrollment`|`String`|`uid`|注册的标识符|
|`event`|`String`|`uid`|事件的标识符|
|`fields`|`String`|Any valid field filter (default `relationship,relationshipType,createdAtClient,from[trackedEntity[trackedEntity],enrollment[enrollment],event[event]],to[trackedEntity[trackedEntity],enrollment[enrollment],event[event]]`) |在响应中包含指定的子对象|
|`order`|`String`|以逗号分隔的属性名、属性或 UID 和排序方向对的列表，格式为 `propName:sortDirection`。|Supported fields: `createdAt, createdAtClient`.|
|`includeDeleted`|`Boolean`|`true`&#124;`false`| 是否在查询结果中包含软删除元素|

以下规则适用于查询参数。

- only one parameter among `trackedEntity`, `enrollment`, `event` can be passed

> **注意**
>
> 使用跟踪实体、注册或事件参数，将返回任何关系，其中
> 跟踪实体、注册或事件是关系的一部分（从或至）。只要
> 用户有访问权限。

#### 回复示例{ #example-response } 

```json
{
  "pager": {
    "page": 1,
    "pageSize": 2
  },
  "relationships": [
    {
      "relationship": "oGtgtJpp6fG",
      "relationshipType": "Mv8R4MPcNcX",
      "from": {
        "trackedEntity": {
          "trackedEntity": "neR4cmMY22o"
        }
      },
      "to": {
        "trackedEntity": {
          "trackedEntity": "DsSlC54GNXy"
        }
      }
    },
    {
      "relationship": "SSfIicJKbh5",
      "relationshipType": "Mv8R4MPcNcX",
      "from": {
        "trackedEntity": {
          "trackedEntity": "neR4cmMY22o"
        }
      },
      "to": {
        "trackedEntity": {
          "trackedEntity": "rEYUGH97Ssd"
        }
      }
    }
  ]
}
```

## 跟踪器门禁控制{ #webapi_tracker_access_control }

Tracker 在访问控制方面有几个不同的概念，如共享、组织单位
范围、所有权和访问级别。以下章节将简要介绍
不同的主题。

### 元数据共享{ #webapi_tracker_metadata_sharing }

共享设置是 DHIS2 的标准功能，适用于跟踪和汇总
元数据/数据以及仪表盘和可视化项目。共享的核心是
定义谁能看到/做什么。一般来说，有五种可能的共享配置--无
访问、元数据读取、元数据写入、数据读取和数据写入。这些访问配置可以
用户和/或用户组级别授予（更灵活）。以下元数据及其共享设置
以下元数据及其共享设置尤为重要：数据元素、类别
选项、计划、计划阶段、跟踪实体类型、跟踪实体属性以及跟踪器
相关仪表盘和仪表盘项目。

共享设置的工作原理很简单--在 Tracker 数据
导入/导出过程中强制执行。要读取数据值，用户需要拥有数据读取权限。如果用户要
修改数据，则需要拥有数据写入权限。同样，如果用户要修改
元数据，就必须授予元数据写入权限。

Tracker 数据的一个关键点是需要采用整体方法。例如，用户
只拥有数据元素的读取权限是无法查看数据元素值的。用户
需要有数据读取权限，才能访问该数据元素所属的父计划阶段和计划。
所属的父节目阶段和节目。类别选项组合也是如此。在 Tracker 中，事件与
属性选项组合（AttributeOptionCombo）相关，而属性选项组合是由类别选项组合而成的。因此，用户
要读取一个事件的数据，他/她需要有对所有类别选项和相应类别的数据读取权限。
相应类别的数据读取权限。如果用户
用户就无法访问整个事件。
事件。

要访问 "注册 "数据，必须首先访问被跟踪实体。
首先。通过共享设置程序、跟踪实体类型和跟踪实体属性，可控制对跟踪实体的访问。
类型和跟踪实体属性的共享设置来控制对跟踪实体的访问。访问注册后，就可以访问事件
数据，这同样取决于程序阶段和数据元素共享设置。

另一个需要考虑的关键点是如何规划对不同程序阶段的访问。
有时，我们可能需要向特定用户组（实验室技术人员）授予访问特定阶段的权限，如
例如，"实验室结果"）的访问权限。在这种情况下，我们可以
为 "实验室结果 "阶段提供数据写入访问权限，可能为一个或多个阶段提供数据读取 访问权限，以防我们希望实验室技术人员读取数据。
如果我们希望实验室技术人员读取其他医疗结果，也可以不提供访问权限。
如果我们认为实验室技术人员没有必要查看实验室相关数据以外的数据，则不提供访问权限。

总之，DHIS2 具有细粒度的共享设置，我们可以用它来实施数据和元数据层面的访问控制机制。
机制。这些共享设置可直接应用于
用户级别或用户组级别。具体如何应用共享设置取决于当前的使用情况。
而定。

有关数据共享的更多详细信息，请查阅 [数据
共享](https://docs.dhis2.org/en/use/user-guides/dhis-core-version-master/configuring-the-system/about-sharing-of-objects.html#data-sharing-for-event-based-programs)。

### 组织单位范围{ #webapi_tracker_orgunit_scope }

组织单位是 DHIS2 中最基本的对象之一。它们定义了一个范围
允许用户记录和/或读取数据的范围。有三种组织单位
可分配给用户的组织单位有三种。它们是数据采集、数据查看（不用于跟踪器）和跟踪器搜索。
搜索。顾名思义，这些组织单位定义了一个范围，在此范围内，用户可以进行相应的操作。
进行相应操作的范围。用户可以在其搜索范围和捕获范围组织单元中搜索数据。
范围组织单位。

不过，为了进一步微调范围，DHIS2 Tracker 引入了一个概念，我们称之为
**组织单位选择模式（OrganisationUnitSelectionMode）**。这种模式通常在导出跟踪器对象时使用。
例如，如果用户有一个特定的跟踪器搜索范围，这是否意味着我们必须
是否意味着每次用户尝试搜索跟踪器、注册或事件对象时，我们都必须使用该范围？还是说
还是用户希望将搜索范围限制在所选的组织单位或整个捕获
组织单位范围，等等。

用户可以通过在 API 请求中传递 `orgUnitMode` 的特定值来进行微调：

*api/tracker/trackedEntities?orgUnit=UID&orgUnitMode=specific_organisation_unit_selection_mode*

目前有六种选择模式可供选择：*选定、子代、后代、捕获、
和全部*。

1. **选择**：顾名思义，该模式缩小了由
   向请求中指定的组织单位请求 API。
2. **儿童**：在此模式下，组织单位范围使用所选的
   组织单位及其直属单位，即下一级组织单位。
3. **后代**：在此模式下，选定的组织单元及其下的所有内容、
   不仅包括直系子代，还包括所有后代，构成数据操作
宇宙
4. **捕获**：该模式包括与当前系统相关联的数据采集组织单位。
   用户和所有后代。它包括子层次结构中的所有组织单位。
5. **可访问**：该模式旨在检索用户搜索范围内的数据
   组织单位。这包括用户可见的所有内容，包括打开的和已审计的内容。
搜索范围内的程序，以及用户的受保护程序和封闭程序中的数据。
捕获范围。如果用户没有搜索组织单位，系统默认为捕获范围、
确保用户始终可以访问至少一个宇宙。捕获范围
它是强制性的，是保证用户数据环境的基本要素。
6. **全部**：该模式仅供授权用户使用，特别是具有 ALL（全部）权限的用户。
   (超级用户）。具有 F_TRACKED_ENTITY_INSTANCE_SEARCH_IN_ALL_ORGUNITS 权限的用户还可以
在全系统范围内搜索，但需要共享对返回程序、程序阶段和/或跟踪程序的访问权限
实体类型。对于未经授权的用户，将出现异常。

The first three modes, *SELECTED*, *CHILDREN* and *DESCENDANTS* expect an organisation unit to be
supplied in the request, while the last three, *CAPTURE*, *ACCESSIBLE* and *ALL* do not expect it
and in fact the request will fail if an organisation unit is provided.

如果在
API 请求中明确提供时，组织单位模式将是上述所列模式之一。由于这不是一个必填字段，如果没有指定，那么默认值为
如果存在组织单位，则默认值为*SELECTED*，否则为*ACCESSIBLE*。

在进行跟踪器导入操作时传递这些模式没有什么意义。因为在
写入跟踪器数据时，每个对象都需要附加一个特定的组织单元。
组织单位。然后，系统将确保所提及的每个组织单位都属于
CAPTURE 范围。如果不属于，系统将直接拒绝写入操作。

请注意，与 Tracker 对象相关的组织单位关联有 4 种类型。A
跟踪实体有一个组织单位，通常称为注册组织单位。
注册有一个与之相关的组织单位。事件也有一个
关联。跟踪实体-计划组合也有一个所有者组织单元。
组合。

获取 Tracker 对象时，根据上下文，组织单位范围会应用于
上述四个组织单位关联之一。

例如，在没有程序上下文的情况下检索 TrackedEntity 时，组织单位范围适用于注册组织单位。
作用域适用于 TrackedEntity 的注册组织单位。而当
组织单位范围则应用于所有者组织单位。
组织单位范围适用于所有者组织单位。

### 跟踪器计划所有权{ #webapi_tracker_ownership }

A new concept called Tracker Ownership is introduced from 2.30. This introduces a new organisation
unit association for a TrackedEntity - Program combination. We call this the Owner (or Owning)
Organisation unit of a TrackedEntity in the context of a Program. The Owner organisation unit is
used to decide access privileges when reading and writing tracker data related to a program. This,
along with the Program's [Access Level](#webapi_tracker_access_level) configuration, decides the access
behavior for Program-related data (Enrollments and Events). A user can access a TrackedEntity's
Program data if the corresponding Owner OrganisationUnit for that TrackedEntity-Program combination
falls under the user's organisation unit scope (Search/Capture). For Programs that are configured
with access level  *OPEN* or *AUDITED* , the Owner OrganisationUnit has to be in the user's search
scope. For Programs that are configured with access level  *PROTECTED* or *CLOSED* , the Owner
OrganisationUnit has to be in the user's capture scope to be able to access the corresponding
program data for the specific tracked entity. Irrespective of the program access level, to access
Tracker objects, the requested organisation unit must always be within either the user's search
scope or capture scope. A user cannot request objects outside these two scopes unless they are
using the organisation unit mode ALL and have sufficient privileges to use that mode.

请求跟踪实体而不指定程序时，响应将只包括
符合[元数据共享设置]（#webapi_tracker_metadata_sharing）和以下标准之一的被跟踪实体
以下标准之一：

* 被跟踪的实体已加入用户可访问数据的至少一个程序，且用户
 可以进入所有者组织单元。
* 被跟踪的实体没有加入用户有数据访问权的任何程序，但用户有
 访问被跟踪的实体注册组织单位。

#### 追踪器所有权覆盖：打破玻璃{ #webapi_tracker_ownership_override }

It is possible to temporarily override this ownership privilege for a program that is configured
with an access level of *PROTECTED*. Any user will be able to temporarily gain access to the Program
related data if the user specifies a reason for accessing the TrackedEntity-Program data. This act
of temporarily gaining access is termed as *breaking the glass*. Currently, temporary access is
granted for 3 hours. DHIS2 audits breaking the glass along with the reason specified by the user. It
is not possible to gain temporary access to a program that has been configured with an access level
of *CLOSED*. To break the glass for a TrackedEntity-Program combination, the following POST request
can be used:

    /api/tracker/ownership/override?trackedEntity=DiszpKrYNg8&program=eBAyeGv0exc&reason=patient+showed+up+for+emergency+care

#### 追踪器所有权转移{ #webapi_tracker_ownership_transfer }

可将 TrackedEntity-Program 的所有权从一个组织单位转移到另一个组织单位。
转移。这在病人转诊或迁移时非常有用。只有拥有
所有权访问权限（或打破玻璃的临时访问权限）的用户才能转移所有权。要转移
将一个 TrackedEntity-Program 的所有权转移给另一个组织单位，可以使用下面的 PUT 请求
使用：

    /api/tracker/ownership/transfer?trackedEntity=DiszpKrYNg8&program=eBAyeGv0exc&ou=EJNxP3WreNP

### 访问级别{ #webapi_tracker_access_level }

DHIS2 对 Tracker 数据提供额外的保护。除了标准的
元数据和数据保护的标准功能外，Tracker 数据还受到额外的
访问级别保护机制。  目前，可为程序配置四种访问级别
程序：开放、审核、保护和关闭。

只有当用户尝试与计划数据（即
注册和活动数据。程序的不同访问级别配置是程序数据开放（或封闭）的程度。
程序数据的开放（或封闭）程度。需要注意的是，所有其他共享设置仍然有效、
访问级别只是访问控制的附加层。下面简要介绍
程序可配置的四种访问级别。

#### 打开{ #open } 

在所有访问级别中，该访问级别的限制最少。OPEN 程序中的数据可以
用户可以访问和修改 OPEN 程序中的数据。
用户可以访问和修改 OPEN 程序中的数据。  使用此访问级别，可以访问和修改捕获范围之外的数据，而无需任何理由或后果。
无需任何理由或后果。

#### 经审计的{ #audited } 

这与开放访问级别相同。不同之处在于，系统会自动
为特定用户访问的数据添加审计日志条目。

#### 受保护的{ #protected } 

这种访问级别的限制稍多一些。受保护程序中的数据只有在所有者组织单位属于用户捕获范围的情况下才能被用户访问。
只有当所有者组织单位属于用户的捕获范围时，用户才能访问受保护程序内的数据。但是，如果用户
用户可以通过 [打破玻璃](#webaptrl) 获得临时所有权。
玻璃](#webapi_tracker_ownership_override)获得临时所有权。用户必须说明为什么要访问手头的数据。
他们为什么要访问手头的数据。然后，系统会将理由和访问审核记录在案，并提供 3 个月的临时访问权限。
访问审计日志，并为用户提供 3 小时的临时访问权限。请注意，打破玻璃时
时，所有者组织单位保持不变，只有打碎玻璃的用户才能获得临时访问权。
获得临时访问权。

#### 关闭{ #closed } 

这是最受限制的访问级别。在访问级别为
如果所有者组织单位不在用户的捕获范围内，则无法访问 "关闭 "程序下记录的数据。
范围。在这种配置下也无法打破玻璃或获得临时所有权。
请注意，仍有可能将所有权转移到另一个组织单位。只有
才能将 TrackedEntity-Program 组合的所有权转移给另一个组织单位。
另一个组织单位。如果所有权被转移，所有者组织单位将被更新。
跟踪实体

## 工作列表{ #working-lists } 

工作列表允许用户保存筛选器和排序偏好，从而有效地组织工作流程。
首选项。每种类型的工作列表
实体、注册和事件都有专门的应用程序接口进行管理。

工作列表是[元数据](#webapi_metadata)，因此可以共享，并受与其他元数据相同的
[共享](#webapi_sharing) 模式。当使用
[`/api/sharing`](#webapi_sharing)端点时，应将类型参数设置为
工作列表 API 的名称。例如，在 [tracked entity working
列表](#tracked-entity-instance-filters)。

由于工作列表是元数据，关于如何创建、更新和删除元数据，请参阅 [元数据](#webapi_metadata)。
删除元数据。以下各节描述了每个工作列表
端点。

### 跟踪实体工作清单{ #tracked-entity-working-lists } 

使用以下工具创建、更新和删除跟踪实体工作列表

    /api/trackedEntityInstanceFilters

#### 有效载荷{ #payload } 

表：有效载荷

| 物业 | 描述 | 例 |
|---|---|---|
|名称|工作列表名称。必须填写。||
|描述|工作清单说明。||
|排序顺序|工作列表的排序顺序。||
|风格|包含 css 样式的对象。|`{"color": "blue", "icon": "fa fa-calendar"}`|
|程序|包含程序 ID 的对象。必须填写。|`{ "id" : "uy2gU8kTjF"}`|
|实体查询标准|代表各种可能过滤值的对象。请参阅下面的*实体查询标准*定义表。
|事件过滤器|事件筛选器列表。请参阅下面的 *Event filters* 定义表。|`[{"programStage"："eaDH9089uMp"，"eventStatus"："OVERDUE"，"eventCreatedPeriod"：{"periodFrom"：-15，"periodTo"：15}}]`|

表格实体查询标准定义

| 物业 | 描述 | 例 |
|---|---|---|
|属性值过滤器|属性值筛选器列表。用于在列出跟踪实体实例时指定属性值过滤器|`"attributeValueFilters"=[{"attribute"："abcAttributeUid", "le"："20", "ge"："10", "lt"："20", "gt"："10"，"in"：["印度", "挪威"], "like"："abc"，"sw"："abc"，"ew"："abc"，"dateFilter"：{"startDate"："2014-05-01","endDate":"2019-03-20","startBuffer":-5，"endBuffer"：5, "period"："LAST_WEEK", "type"："RELATIVE"}]`|
|注册状态|被跟踪实体的注册状态。可以是 none（任何注册状态）或 ACTIVE|COMPLETED|CANCELLED。||
|跟进|当此参数为 true 时，工作列表只返回注册人数为 `folloWup=true` 的被跟踪实体。||
|组织单位|指定组织单位的 uid|`{"组织单位"："a3kGcGDCuk7"}`|
|ouMode|指定组织单位选择模式。可能的值有：已选|儿童|替代人员|可选|捕获|全部|`"ouMode"："SELECTED"`|
|指定用户模式|指定事件的指定用户选择模式。可能的值有 CURRENT（当前）| PROVIDED（已提供）| NONE（无）| ANY（任意）。请参阅下表了解每个值的含义。如果是 PROVIDED（或空），则将考虑有效负载中的非空 assignedUsers。|"assignedUserMode"："提供"|
|指定用户|指定事件的指定用户列表。与上述 PROVIDED assignedUserMode 一起使用。|`"assignedUsers"：["a3kGcGDCuk7", "a3kGcGDCuk8"]`|
|显示列序|指定列的输出排序|`"displayOrderColumns"：["注册日期", "计划"]`"显示顺序列".|
|订单|以逗号分隔值指定字段的排序/排序方式及其方向。单个排序项的形式为 "orderDimension:direction"。注：支持的 orderDimensions 包括：trackedEntity、created、createdAt、createdAtClient、updatedAt、updatedAtClient、enrolledAt、inactive 和跟踪实体属性。|`"order"="a3kGcGDCuk6:desc"`|
|程序阶段|要指定要过滤的计划阶段 uid，将根据是否在指定计划阶段注册来过滤被跟踪的实体。|`"programStage"="a3kGcGDCuk6"`|
|trackedEntityType|要指定一个 trackedEntityType（跟踪实体类型）来过滤跟踪实体。|`{"trackedEntityType"="a3kGcGDCuk6"}`|
|跟踪实体|指定查询跟踪实体时使用的 trackedEntityInstances 列表。|`"trackedEntityInstances"=["a3kGcGDCuk6", "b4jGcGDCuk7"]`|
|注册创建日期|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 基于注册创建日期的对象日期过滤。|`"enrollmentCreatedDate"：{ "period"："LAST_WEEK", "type"："RELATIVE" }`|
|注册事件日期|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects)基于注册事件日期的对象日期过滤。|`"enrollmentIncidentDate"：{ "startDate"："2014-05-01", "endDate"："2019-03-20", "startBuffer"：-5，"endBuffer"：5, "period"："LAST_WEEK", "type"："相对"}`。|
|事件状态|事件状态。可能的值是 "活动"、"已完成"、"已访问"、"已安排"、"逾期"、"跳过 "和 "已访问"。|`"status": "VISITED"`|
|事件日期|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 基于事件日期的对象日期过滤。|`"事件日期"：{"startBuffer"：-5，"endBuffer"：5, "type"："RELATIVE" }`|
|最后更新日期|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 基于最后更新日期的对象日期过滤。|`"lastUpdatedDate"：{"startDate"："2014-05-01", "endDate"："2019-03-20", "type"："绝对" }`|

表格事件筛选器定义

| 物业 | 描述 | 例 |
|---|---|---|
|程序阶段|被跟踪实体需要返回哪个程序阶段的事件。|`"eaDH9089uMp"`|
|事件状态|事件状态。可以是 none（任何事件状态）或 ACTIVE|COMPLETED|SCHEDULE|OVERDUE。|`ACTIVE`|
|事件创建周期|FilterPeriod 对象，包含必须创建事件的时间段。请参阅下面的 *Period* 定义。|`{"periodFrom"：-15, "periodTo"：15}`|
|指定用户模式|指定事件的指定用户选择模式。可能的值是 CURRENT（分配给当前用户的事件）| PROVIDED（分配给 "assignedUsers "列表中提供的用户的事件）| NONE（没有分配给任何人的事件）| ANY（分配给任何人的事件）。如果是 PROVIDED（或空），则将考虑有效负载中的非空 assignedUsers。|`"assignedUserMode"："PROVIDED"`|
|指定用户|指定事件的指定用户列表。与上述 PROVIDED assignedUserMode 一起使用。|`"assignedUsers"：["a3kGcGDCuk7", "a3kGcGDCuk8"]`|

表格筛选周期定义

| 物业 | 描述 | 例 |
|---|---|---|
|期间从|从当天算起的天数。可以是正整数，也可以是负整数。|-15|
|期间至|从当天算起的天数。必须大于 periodFrom。可以是正整数，也可以是负整数。|15|

#### 查询请求参数{ #query-request-parameters } 

表格：跟踪实体实例筛选器查询参数

| 查询参数 | 描述 |
|---|---|
|程序|程序标识符。将筛选器限制在给定的程序中。|

### 计划阶段工作清单{ #program-stage-working-lists } 

使用以下工具创建、更新和删除计划阶段工作列表

    /api/programStageWorkingLists

#### 有效载荷{ #payload } 

表：有效载荷

| 有效载荷值 | 描述 | 例 |
|---|---|---|
|名称|工作列表名称。必须填写。||
|描述|工作清单说明。||
|程序|包含程序 ID 的对象。必须填写。|`{"id" : "uy2gU8kTjF"}`|
|程序阶段|包含程序阶段 ID 的对象。必须填写。|`{"id" : "oRySG82BKE6"}`|
|程序阶段查询标准|代表各种可能过滤值的对象。请参阅下面的*程序阶段查询标准*定义表。

表：计划阶段查询标准

| 标准值 | 描述 | 例 |
|---|---|---|
|事件状态|事件状态。可能的值是 "活动"、"已完成"、"已访问"、"已安排"、"逾期"、"跳过 "和 "已访问"。|`"status": "VISITED"`|
|事件创建时间|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 基于事件创建日期的对象过滤。|`{"type":"ABSOLUTE","startDate":"2020-03-01","endDate":"2022-12-30"}`|
|事件发生时间|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 根据事件发生日期过滤对象。|`{"type": "RELATIVE", "period": "TODAY"}`|
|事件计划日期|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 根据事件计划日期过滤对象。|`{"type": "RELATIVE", "period": "TODAY"}`|
|注册状态|任何有效的注册状态。可能的值有 "激活"、"已完成 "和 "已取消"。|`"enrollmentStatus"（注册状态）："已完成"`|
|跟进|表示是否过滤标记为后续跟踪的注册信息|`"followUp":true`|
|入学人数|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 根据事件注册日期过滤对象。|`"enrolledAt"：{"type": "RELATIVE", "period": "THIS_MONTH"}`。|
|注册发生时间|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 根据事件发生日期过滤对象。|`{"type": "RELATIVE", "period": "THIS_MONTH"}`|
|orgUnit|有效的组织单位 UID|`"orgUnit"："Rp268JB6Ne4"`|
|ouMode|有效的 OU 选择模式|`"ouMode"："SELECTED"`|
|指定用户模式|事件的有效用户选择模式。可能的值有 CURRENT、Provided、NONE、ANY 和 ALL。如果是 PROVIDED（或空），则预期有效负载中的分配用户为非空。|"assignedUserMode": "PROVIDED" 指定用户模式|
|指定用户|事件的指定用户列表。与上述 PROVIDED assignedUserMode 一起使用。|"分配的用户":["DXyJmlo9rge"]|
|订单|以逗号分隔的字段及其方向的列表，结果将按其排序。单个项目的排序形式为 "orderDimension:direction"。|"顺序"："w75KJ2mc4zz:asc"|
|显示列序|列的输出排序|"displayColumnOrder":["w75KJ2mc4zz", "zDhUuAYrxNC"].|
|数据过滤器|项目列表，包含查询事件时使用的筛选器|"dataFilters":[{"dataItem": "GXNUsigphqK", "ge": "10", "le": "20"}]|
|属性值过滤器|属性值筛选器列表。用于在列出跟踪实体时指定属性值筛选器|"attributeValueFilters":[{"attribute": "ruQQnf6rswq", "eq": "15"}]。|

请看下面的有效载荷示例：

```json
{
  "name": "Test WL",
  "description": "Test WL definition",
  "program": {
    "id": "uy2gU8kT1jF"
  },
  "programStage": {
    "id": "oRySG82BKE6"
  },
  "programStageQueryCriteria": {
    "eventStatus": "VISITED",
    "eventCreatedAt": {
      "type": "ABSOLUTE",
      "startDate": "2020-03-01",
      "endDate": "2022-12-30"
    },
    "eventScheduledAt": {
      "type": "RELATIVE",
      "period": "TODAY"
    },
    "enrollmentStatus": "COMPLETED",
    "followUp": true,
    "enrolledAt": {
      "type": "RELATIVE",
      "period": "THIS_MONTH"
    },
    "enrollmentOccurredAt": {
      "type": "RELATIVE",
      "period": "THIS_MONTH"
    },
    "orgUnit": "Rp268JB6Ne4",
    "ouMode": "SELECTED",
    "assignedUserMode": "PROVIDED",
    "assignedUsers": [
      "DXyJmlo9rge"
    ],
    "order": "w75KJ2mc4zz:asc",
    "displayColumnOrder": [
      "w75KJ2mc4zz",
      "zDhUuAYrxNC"
    ],
    "dataFilters": [
      {
        "dataItem": "GXNUsigphqK",
        "ge": "10",
        "le": "20"
      }
    ],
    "attributeValueFilters": [
      {
        "attribute": "ruQQnf6rswq",
        "eq": "15"
      }
    ]
  }
}
```

### 活动工作清单{ #event-working-lists } 

使用以下功能创建、更新和删除事件工作列表

    /api/eventFilters

#### 有效载荷{ #payload } 

表：有效载荷

| 物业 | 描述 | 例 |
|---|---|---|
|名称|工作清单名称。|"名称": "我的工作清单"|
|描述|工作清单说明。|"description"："用于列出分配给我的所有活动"。|
|程序|程序的 uid。|"程序"："a3kGcGDCuk6"|
|程序阶段|程序阶段的 uid。|"程序阶段"： "a3kGcGDCuk6"|
|事件查询标准|包含用于查询、排序和筛选事件的参数的对象。|"eventQueryCriteria"：{ "organisationUnit": "a3kGcGDCuk6", "status"："COMPLETED", "createdDate"：{ "from"："2014-05-01", "to"："2019-03-20"     }, "dataElements"：["a3kGcGDCuk6:EQ:1", "a3kGcGDCuk6"], "filters"：["a3kGcGDCuk6:EQ:1"]，"programStatus"："ACTIVE", "ouMode"："SELECTED", "assignedUserMode"："PROVIDED", "assignedUsers" : ["a3kGcGDCuk7", "a3kGcGDCuk8"], "followUp": false, "trackedEntityInstance"："a3kGcGDCuk6"，"事件"：["a3kGcGDCuk7"、"a3kGcGDCuk8"]，"字段"："eventDate,dueDate", "order"："dueDate:asc,createdDate:desc" }|

表格事件查询标准定义

| 物业 | 描述 | 例 |
|---|---|---|
|跟进|用于根据注册 followUp 标志过滤事件。可能的值为 true|false。|"followUp": true|
|组织单位|指定组织单位的 uid|"organisationUnit"："a3kGcGDCuk7"|
|ouMode|指定 OU 选择模式。可能的值有：SELECTED（已选）| CHILDREN（子女）|DESCENDANTS（替代者）|ACCESSIBLE（可选）|CAPTURE（捕获）|ALL（全部）。|"ouMode"："选择"|
|指定用户模式|指定事件的指定用户选择模式。可能的值有 CURRENT（当前）| PROVIDED（已提供）| NONE（无）| ANY（任意）。请参阅下表了解每个值的含义。如果是 PROVIDED（或空），则将考虑有效负载中的非空 assignedUsers。|"assignedUserMode"："提供"|
|指定用户|指定事件的指定用户列表。与上述 PROVIDED assignedUserMode 一起使用。|"assignedUsers"：["a3kGcGDCuk7"、"a3kGcGDCuk8"]|
|显示列序 |指定列的输出排序|"displayOrderColumns"（显示顺序列）：["事件日期"、"到期日"、"节目"]|
|订单|以逗号分隔值指定字段的排序/排序方式及其方向。单个排序项的形式为 "dataItem:direction"。|"order"="a3kGcGDCuk6:desc,eventDate:asc"。|
|数据过滤器|指定列出事件时要应用的筛选器|"dataFilters"=[{ "dataItem"："abcDataElementUid", "le"："20", "ge"："10", "lt"："20", "gt"："10"，"in"：["印度"、"挪威"]，"like"："abc"，"dateFilter"：{ "startDate"："2014-05-01", "endDate"："2019-03-20", "startBuffer"：-5，"endBuffer"：5, "period"："LAST_WEEK", "type"："RELATIVE" }     }]|
|地位|任何有效的 EventStatus|"eventStatus"（事件状态）："已完成"|
|活动|指定事件列表|"events"=["a3kGcGDCuk6"]|
|完成日期|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 基于完成日期的对象日期过滤。|"completedDate"：{ "startDate"："2014-05-01", "endDate"："2019-03-20", "startBuffer"：-5，"endBuffer"：5, "period"："LAST_WEEK", "type"："RELATIVE" }|
|事件日期|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 基于事件日期的对象日期过滤。|"eventDate"：{ "startBuffer"：-5，"endBuffer"：5, "type"："RELATIVE" }|
|到期日|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 基于到期日的对象日期过滤。|"dueDate"：{ "period"："LAST_WEEK", "type"："RELATIVE" }|
|最后更新日期|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 基于最后更新日期的对象日期过滤。|"lastUpdatedDate"：{ "startDate"："2014-05-01", "endDate"："2019-03-20", "type"："绝对"}。|

请看下面的有效载荷示例：

```json
{
  "name": "event working list",
  "program": "VBqh0ynB2wv",
  "eventQueryCriteria": {
    "eventDate": {
      "period": "LAST_WEEK",
      "type": "RELATIVE"
    },
    "dataFilters": [
      {
        "ge": "35",
        "le": "70",
        "dataItem": "qrur9Dvnyt5"
      }
    ],
    "assignedUserMode": "PROVIDED",
    "assignedUsers": [
      "CotVI2NX0rI",
      "xE7jOejl9FI"
    ],
    "status": "ACTIVE",
    "order": "occurredAt:desc",
    "displayColumnOrder": [
      "occurredAt",
      "status",
      "assignedUser",
      "qrur9Dvnyt5",
      "oZg33kd9taw"
    ]
  }
}
```

### 常见物品{ #webapi_tracker_workinglists_common_objects }

表格DateFilterPeriod 对象定义

| 物业 | 描述 | 例 |
|---|---|---|
|类型|指定日期周期类型是否为绝对 | 相对|`"type" : "RELATIVE"`|
|时间|指定是否使用相对系统定义的周期。仅当 `type` 为 RELATIVE 时适用。(有关支持的相对周期，请参阅[相对周期](#webapi_date_relative_period_values)|`"period" : "THIS_WEEK"`|
|开始日期|绝对开始日期。仅当 `type` 为绝对时适用|`"startDate":"2014-05-01"`|
|结束日期|绝对结束日期。仅当 `type` 为绝对时适用|`"startDate":"2014-05-01"`|
|startBuffer|相对自定义开始日期。仅当 `type` 为相对时适用|`"startBuffer":-10`|
|endBuffer|相对自定义结束日期。仅当 `type` 为 RELATIVE 时适用。|`"startDate":+10`|


## 潜在重复   { #potential-duplicates } 

潜在重复记录是重复数据删除功能识别出的可能重复的记录。
重复。由于该功能的性质，API 端点有一定的限制。A
潜在重复记录代表一对疑似重复的记录。

要检索潜在重复文件列表，请使用以下端点：

    GET /api/potentialDuplicates

潜在重复的响应有效载荷如下所示：

```json
{
  "created": "2024-06-04T10:11:29.110",
  "lastUpdated": "2024-06-04T10:11:29.110",
  "original": "<UID>",
  "duplicate": "<UID>",
  "status": "OPEN|INVALID|MERGED",
  "id": "<id>"
}
```

这些是该端点接受的参数：

| 参数名称 | 描述 | 类型 | 允许值 |
|---|---|---|---|
| 跟踪实体 | 被跟踪实体清单 | 字符串列表（用逗号分隔）| 现有被跟踪实体的 UID |
| 地位 | 潜在的重复状态 | 字符串 | `OPEN`, `INVALID`, `MERGED`, `ALL` |

要检查单个潜在重复记录，请使用以下终端：

    GET /api/potentialDuplicates/<id>

要创建新的潜在副本，请使用此端点：

    POST / api / potentialDuplicates

您提供的有效载荷必须包括原始和重复跟踪实体的 UID。新的
潜在副本默认是打开的。

```json
{
  "original": "<UID>",
  "duplicate": "<UID>"
}
```

| 状态代码 | 描述
|---|---|
| 400 | 输入的原件或副本为空或具有无效的 uid
| 403 | 用户无权读取原始或复制的 TE
| 404 | 未找到 TE
| 409 | 已有一对原始和复制的 TE

要更新潜在副本的状态，请使用以下终端：

    PUT /api/potentialDuplicates/<id>

| 参数名称 | 描述 | 类型 | 允许值 |
|---|---|---|---|
| 地位 | 潜在的重复状态 | 字符串 | `OPEN`, `INVALID` |

| 状态代码 | 描述
|---|---|
| 400 | 您无法将潜在的重复内容更新为 MERGED，因为这只能通过合并请求来实现
| 400 | 无法更新已处于 MERGED 状态的潜在副本

### 合并跟踪实体{ #merging-tracked-entities } 

如果被跟踪的实体被认为是可行的，它们可以合并在一起。要启动合并，第一步
步是将两个跟踪实体定义为潜在重复。合并端点会将数据从
合并端点会将数据从重复的跟踪实体移至原始跟踪实体，并删除重复实体的剩余数据。
重复的数据。

要合并潜在重复，即潜在重复所代表的两个跟踪实体、
使用以下端点：

    POST /api/potentialDuplicates/<id>/merge

| 参数名称 | 描述 | 类型 | 允许值 |
|---|---|---|---|
| 合并策略 | 用于合并潜在重复数据的策略 | 字符串 | 自动（默认）或手动 |

The endpoint accepts a single parameter, `mergeStrategy`, which determines the strategy used when merging. For the `AUTO` strategy, the server will attempt to merge the two tracked entities automatically without user input. This strategy only allows merging tracked entities without conflicting data (see examples below). The `MANUAL` strategy requires the user to send in a payload describing how the merge should be done. For examples and rules for each strategy, see their respective sections below.

#### 合并策略 自动{ #merge-strategy-auto } 

自动合并功能会评估两个被跟踪实体的可合并性，并在它们被认为可合并时将其合并。
认为可以合并，就会将它们合并。可合并性基于两个被跟踪实体是否有任何
冲突。冲突指的是无法自动合并的数据。可能出现的
冲突的例子包括

- 同一属性在每个被跟踪的实体中具有不同的值。
- 两个被跟踪的实体都参加了同一个计划。
- 跟踪实体有不同的类型。

如果遇到任何冲突，将向用户返回错误信息。

When no conflicts are found, all data in the duplicate that is not already in the original will be
moved to the original. This includes attribute values, enrollments (including events), and
relationships. After the merge completes, the duplicate is deleted and the Potential Duplicate is
marked as `MERGED`. When requesting an automatic merge, a payload is not required and will be
ignored.

#### 合并战略手册{ #merge-strategy-manual } 

手动合并适用于存在可解决的冲突或在合并过程中不需要移动所有数据的情况。
在合并过程中移动。例如，如果一个属性在两个被跟踪实体实例中的值不同
例如，如果一个属性在两个被跟踪的实体实例中都有不同的值，用户可以指定是保留原始值还是移动重复的
值。由于手动合并涉及用户明确要求移动数据，因此需要进行一些
额外的检查：

- 原件和副本之间不能有关系（这将导致无效的
自我参照关系）
- 在两个被跟踪实体中，关系不能是同一类型和同一对象（IE.
这将导致重复关系)

手动合并有两种方法：有有效载荷和无有效载荷。

当请求手动合并时，如果没有有效载荷，我们就会告诉 API 在不移动任何数据的情况下合并两个被跟踪的
实体，而不移动任何数据。换句话说，我们只是删除重复数据并标记
潜在重复已合并。在很多情况下，这可能是有效的，例如被跟踪的实体刚刚创建，但还没有注册。
创建，但未登记的情况下，这可能是有效的。

否则，如果手动合并请求带有有效载荷，则有效载荷指的是应将哪些数据从重复数据移至原始数据。
要从副本移到正本中的数据。有效载荷如下所示

```json
{
  "trackedEntityAttributes": ["B58KFJ45L9D"],
  "enrollments": ["F61SJ2DhINO"],
  "relationships": ["ETkkZVSNSVw"]
}
```

This payload contains three lists, one for each of the types of data that can be moved.
`trackedEntityAttributes` is a list of uids for tracked entity attributes, `enrollments` is a list
of uids for enrollments and `relationships` a list of uids for relationships. The uids in this
payload have to refer to data that actually exists on the duplicate. There is no way to add new data
or change data using the merge endpoint - Only moving data.

#### 有关合并的其他信息{ #additional-information-about-merging } 

由于增加了复杂性，目前还无法合并参加同一计划的跟踪实体。
增加了复杂性。解决方法是在开始合并之前，手动删除其中一个跟踪实体的注册信息。
实体的注册。

所有合并都基于数据库中已持久化的数据，这意味着当前的合并服务不会再次验证这些数据。
服务不会再次验证这些数据。这意味着，如果数据已经无效，在合并过程中也不会报告。
报告。服务中进行的唯一验证与关系有关，如前所述。
中提到的关系。

