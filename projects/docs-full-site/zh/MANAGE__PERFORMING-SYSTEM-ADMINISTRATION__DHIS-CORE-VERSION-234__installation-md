---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.34/src/sysadmin/installation.md"
revision_date: "2021-09-07"
---

# 安装 { #installation }

安装章节提供了有关如何在以下位置安装DHIS2的信息
各种环境，包括在线中央服务器，离线本地
网络，独立应用程序和称为DHIS2的自包含程序包
生活。

## 介绍 { #install_introduction }

DHIS2在存在Java Runtime Environment版本8或更高版本的所有平台上运行，其中包括最流行的操作系统，例如Windows，Linux和Mac。 DHIS2在PostgreSQL数据库系统上运行。 DHIS2打包为标准Java Web存档（WAR文件），因此可以在任何Servlet容器例如Tomcat和Jetty上运行。

DHIS2团队建议使用Ubuntu 16.04 LTS操作系统PostgreSQL
数据库系统和Tomcat Servlet容器为首选
服务器安装的环境。

本章提供了设置上述技术堆栈的指南。
但是，应将其作为起步和运行的指南，而不是
作为上述环境的详尽文档。我们提到
到官方的Ubuntu，PostgreSQL和Tomcat文档进行深入了解
阅读。

dhis2-tools Ubuntu软件包可自动执行以下内容中所述的许多任务
以下指南，推荐给大多数用户，尤其是那些
不熟悉命令行或服务器管理。它
在本指南的单独章节中进行了详细说明。

## 服务器规格 { #install_server_specifications }

DHIS2是数据库密集型应用程序，需要您的服务器
具有适当数量的RAM，CPU核心数量和快速磁盘。
这些建议应被视为经验法则，而不是
确切的措施。 DHIS2在RAM的数量和数量上线性扩展
CPU内核，因此您负担得起的费用越多，应用程序的性能就会越好。

-   _RAM：_ 每月每 100 万条捕获的数据记录或每 1000 个并发用户至少需要 1 GB 内存。小型实例至少 4 GB，中型实例至少 12 GB。

-   _CPU 核心：_ 小型实例 4 个 CPU 核心，中型或大型实例 8 个 CPU 核心。

-   _磁盘：_ 最好使用 SSD。否则请使用 7200 rpm 磁盘。最低读取速度为 150 Mb/s，200 Mb/s 较好，350 Mb/s 或更好是理想的。就磁盘空间而言，建议至少 60 GB，但这完全取决于数据值表中包含的数据量。分析表需要大量磁盘空间。提前计划并确保您的服务器可以在需要时使用更多磁盘空间进行升级。

## 软件需求 { #install_software_requirements }

更高版本的DHIS2需要以下软件版本才能运行。

-   Java JDK或JRE版本8或更高版本。

-   存在Java JDK或JRE版本8的任何操作系统。

-   PostgreSQL数据库9.6或更高版本。

-   PostGIS数据库扩展版本2.2或更高版本。

-   Tomcat servlet 容器版本 8.5.50 或更高版本，或其他 Servlet API 3.1 兼容的 servlet 容器。

## 服务器设置 { #install_server_setup }

本节介绍如何在Ubuntu 16.04 64位系统上以PostgreSQL为数据库系统，以Tomcat为Servlet容器设置DHIS2的服务器实例。该指南本身并不是逐步指南，而是作为DHIS2如何在服务器上部署的参考。有许多可能的部署策略，具体取决于所使用的操作系统和数据库以及其他因素。term _invoke_ refers是指在终端中执行给定命令。

对于国家级服务器，建议的配置为四核2 Ghz
处理器或更高以及12 Gb RAM或更高。注意64位
要使用超过4 Gb的RAM，需要操作系统。

对于本指南，我们假设为PostgreSQL分配了8 Gb RAM，为Tomcat / JVM分配了8 GB RAM，并且使用了64位操作系统。 _if 如果您正在运行其他配置，请相应地调整建议的值\！_ 我们建议在数据库和JVM之间大致平均分配可用内存。请记住，将一些物理内存留给操作系统来执行其任务，例如大约2 GB。标记为 _optional_ 的步骤如性能调整步骤可以在以后的阶段进行。

### 创建一个用户来运行DHIS2 { #install_creating_user }

您应该创建一个专用用户来运行DHIS2。

> **重要**
>
>您不应以root用户等特权用户身份运行DHIS2服务器。

通过调用以下命令创建一个名为dhis的新用户：

```sh
sudo useradd -d / home / dhis -m dhis -s / bin / false
```

然后为您的帐户调用设置密码：

```sh
须藤密码
```

确保设置了一个安全密码，该密码至少包含15个随机字符。

### 创建配置目录 { #install_creating_config_directory }

首先为DHIS2配置创建合适的目录
文件。此目录还将用于应用程序，文件和日志文件。
示例目录可以是：

```sh
mkdir / home / dhis / config
chown dhis：dhis / home / dhis / config
```

DHIS2 将查找名为 _DHIS2_HOME_ 的环境变量来定位 DHIS2 配置目录。在本安装指南中，该目录将被称为 _DHIS2_HOME_。我们将在安装过程的后续步骤中定义环境变量。

### 设置服务器时区和语言环境 { #install_setting_server_tz }

可能需要重新配置服务器的时区以匹配
DHIS2服务器将覆盖的位置的时区。
如果您使用的是虚拟专用服务器，则默认时区可能不会
对应于您的DHIS2位置的时区。您可以轻松地
通过调用以下内容并按照以下说明重新配置时区
说明。

```sh
sudo dpkg-重新配置tzdata
```

PostgreSQL对语言环境敏感，因此您可能必须安装
地区优先。要检查现有的语言环境并安装新的语言环境（例如
挪威）：

```sh
语言环境-a
须藤locale-gen nb_NO.UTF-8
```

### PostgreSQL安装 { #install_postgresql_installation }

通过以下方式安装PostgreSQL
    调用：

```sh
sudo apt-get install postgresql-10 postgresql-contrib-10 postgresql-10-postgis-2.4
```

通过调用以下命令创建一个名为 _dhis_ 的非特权用户：

```sh
须藤-u postgres createuser -SDRP dhis
```

在提示符下输入安全密码。通过调用创建数据库：

```sh
须藤-u postgres createdb -O dhis dhis2
```

通过调用`exit` 返回会话，您现在有一个名为_dhis_的PostgreSQL用户和一个名为_dhis2_的数据库。

多个 GIS/制图功能需要 _PostGIS_ 扩展才能工作。 DHIS 2 将在启动期间尝试安装 PostGIS 扩展。如果 DHIS 2 数据库用户无权创建扩展，您可以使用 _postgres_ 用户通过以下命令从控制台创建扩展：

```sh
sudo -u postgres psql -c“创建扩展名postgis;” dhis2
```

使用 _\\q_ 后跟 _exit_ 退出控制台并返回到之前的用户。

### PostgreSQL性能调优 { #install_postgresql_performance_tuning }

调整 PostgreSQL 对于实现高性能系统是必要的，但对于运行 DHIS2 来说是可选的。 PostgreSQL 通过 _postgresql.conf_ 文件进行配置和调整，可以像这样编辑：

```sh
须藤nano /etc/postgresql/10/main/postgresql.conf
```

并设置以下属性：

```属性
max_connections = 200
```

确定PostgreSQL允许的最大连接数。

```属性
shared_buffers = 3200MB
```

确定应专门分配多少内存
PostgreSQL缓存。此设置控制共享内核的大小
应该为PostgreSQL保留的内存。应该设置为
PostgreSQL专用内存的40％。

```属性
work_mem = 20MB
```

确定用于内部排序和哈希的内存量
操作。此设置是针对每个连接，针对每个查询的，因此需要大量内存
如果将其提高得太高，可能会被消耗掉。正确设置该值
对于DHIS2聚合性能至关重要。

```属性
maintenance_work_mem = 512MB
```

确定PostgreSQL可用于维护的内存量
创建索引，运行真空，添加外部文件等操作
键。增大此值可能会提高索引创建的性能
在分析生成过程中。

```属性
Effective_cache_size = 8000MB
```

操作系统可用于磁盘缓存的内存量估计（不是分配），PostgreSQL 使用 isdb.no 来确定查询计划是否适合内存。将其设置为高于实际可用值将导致性能不佳。该值应包含shared_buffers 设置。 PostgreSQL有两层缓存：第一层使用内核共享内存并由shared_buffers设置控制。 PostgreSQL 将第二层委托给操作系统磁盘缓存，可用内存的大小可以通过 effective_cache_size 设置给出。

```属性
checkpoint_completion_target = 0.8
```

设置WAL写过程中用于缓冲的内存。
增大此值可能会提高大量写入系统的吞吐量。

```属性
sync_commit =关
```

指定事务提交是否将等待WAL记录
是否将其写入磁盘，然后再返回客户端。设定这个
关闭将大大提高性能。这也意味着那里
交易之间的轻微延迟被报告为成功
客户端，它实际上是安全的，但是数据库状态不能为
已损坏，这是性能密集型和
像DHIS2这样的重写入系统。

```属性
wal_writer_delay = 10000毫秒
```

指定WAL写操作之间的延迟。将此设置为较高
价值可能会提高大量写入系统的性能，因为
一次刷新到磁盘就可以执行许多写操作。

```属性
random_page_cost = 1.1
```

_仅限 SSD。_ 设置查询规划器对非顺序获取的磁盘页的成本的估计。较低的值将导致系统更喜欢索引扫描而不是顺序扫描。对于在 SSD 上运行或大量缓存在内存中的数据库来说，较低的值是有意义的。默认值为 4.0，这对于传统磁盘来说是合理的。

```属性
max_locks_per_transaction = 96
```

指定为每个事务分配的对象锁的平均数量。设置该参数主要是为了允许完成涉及大量表的升级例程。

通过调用以下命令来重新启动PostgreSQL：

```sh
sudo /etc/init.d/postgresql重新启动
```

### 系统配置 { #install_database_configuration }

数据库连接信息通过名为 _dhis.conf_ 的配置文件提供给 DHIS2。创建此文件并将其保存在 _DHIS2_HOME_ 目录中。作为示例，该位置可以是：

```sh
/home/dhis/config/dhis.conf
```

与上述设置相对应的PostgreSQL配置文件具有
这些属性：

```属性
＃------------------------------------------------- ---------------------
＃数据库连接
＃------------------------------------------------- ---------------------

＃JDBC驱动程序类
connection.driver_class = org.postgresql.Driver

＃数据库连接URL
connection.url = jdbc：postgresql：dhis2

＃数据库用户名
connection.username = dhis

＃数据库密码
connection.password = xxxx

＃------------------------------------------------- ---------------------
＃服务器
＃------------------------------------------------- ---------------------

＃如果部署在HTTPS上则启用安全设置，默认设置为“关”，可以设置为“开”
服务器.https =开启

＃服务器基本URL
server.base.url = https://server.com/
```

It is strongly recommended to enable the `server.https` setting and deploying DHIS 2 over the encrypted HTTPS protocol. This setting will enable e.g. secure cookies. HTTPS deployment is required when this setting is enabled.

`server.base.url`设置是指最终用户通过网络访问系统的URL。

请注意，配置文件支持环境变量。这意味着您可以将某些属性设置为环境变量，并解析它们，例如像这样，其中`DB \ _PASSWD`是环境变量的名称：

```属性
connection.password = $ {DB_PASSWD}
```

请注意，此文件包含 DHIS2 数据库的明文密码，因此需要防止未经授权的访问。为此，请调用以下命令，以确保仅允许拥有该文件的 _dhis_ 用户读取该文件：

```sh
chmod 0600 dhis.conf
```

### Java安装 { #install_java_installation }

推荐用于DHIS 2的Java JDK是OpenJDK 8。
GPL许可，可以免费运行。您可以使用
以下命令：

```
须藤apt-get install openjdk-8-jdk
```

通过调用以下命令来验证安装是否正确：

```
Java版本
```

### Tomcat和DHIS2安装 { #install_tomcat_dhis2_installation }

要安装Tomcat Servlet容器，我们将利用Tomcat用户
通过调用打包：

```sh
须藤apt-get install tomcat8-user
```

这个包让我们可以轻松创建一个新的 Tomcat 实例。该实例将在当前目录中创建。合适的位置是 _dhis_ 用户的主目录：

```sh
cd / home / dhis /
须藤tomcat8-instance-create tomcat-dhis
须藤chown -R dhis：dhis tomcat-dhis /
```

这将在名为 _tomcat-dhis_ 的目录中创建一个实例。请注意，如果需要，tomcat7-user 包允许创建任意数量的 dhis 实例。

接下来编辑文件 _tomcat-dhis/bin/setenv.sh_ 并添加以下行。第一行将设置 Java 运行时环境的位置，第二行将为 Tomcat 分配内存，第三行将设置 DHIS2 搜索 _dhis.conf_ 配置文件的位置。请检查 Java 二进制文件的路径是否正确，因为它们可能因系统而异，例如在 AMD 系统上，您可能会看到 _/java-8-openjdk-amd64_ 请注意，您应该根据您的环境进行调整：

```sh
导出JAVA_HOME ='/ usr / lib / jvm / java-1.8.0-openjdk-amd64 /'
出口JAVA_OPTS ='-Xmx7500m -Xms4000m'
导出DHIS2_HOME ='/ home / dhis / config'
```

Tomcat 配置文件位于 _tomcat-dhis/conf/server.xml_。定义与 DHIS 的连接的元素是具有端口 8080 的 _Connector_ 元素。如有必要，您可以将 Connector 元素中的端口号更改为所需的端口。 _relaxedQueryChars_ 属性对于允许 DHIS2 前端使用的 URL 中的某些字符是必需的。

```xml
<Connector port="8080" protocol="HTTP/1.1"
  connectionTimeout="20000"
  redirectPort="8443"
  relaxedQueryChars="[]" />
```

下一步是下载DHIS2 WAR文件并将其放入
Tomcat的webapps目录。您可以下载DHIS2版本2.31 WAR
这样发布（如果您的首选版本替换2.31，
必要）：

```sh
wget https://releases.dhis2.org/2.33/dhis.war
```

或者，对于补丁程序版本，文件夹结构基于补丁程序
主发行版下子文件夹中的发行版ID。例如。你可以下载
像这样的DHIS2版本2.31.1 WAR版本（用您的
首选版本，以及带有首选补丁的2.31.1（如有必要）：

```
wget https://releases.dhis2.org/2.33/2.33.1/dhis.war
```

将WAR文件移到Tomcat webapps目录中。我们想称呼
WAR文件ROOT.war，以使其直接在本地主机上可用
没有上下文路径：

```sh
mv dhis.war tomcat-dhis / webapps / ROOT.war
```

DHIS2绝对不能以特权用户身份运行。修改后
setenv.sh文件，修改启动脚本以检查并验证
脚本尚未以root身份调用。

```sh
＃！/ bin / sh
设置-e

如果[“ $（id -u）” -eq“ 0”];然后
  回声“此脚本不能以root用户身份运行” 1>＆2
  1号出口
科幻

导出CATALINA_BASE =“ / home / dhis / tomcat-dhis”
/usr/share/tomcat8/bin/startup.sh
回显“ Tomcat启动”
```

### 运行DHIS2 { #install_running_dhis2 }

DHIS2现在可以通过调用来启动：

    须藤-u dhis tomcat-dhis / bin / startup.sh

> **重要**
>
>绝对不要以root或其他特权用户身份运行DHIS2服务器。

DHIS2可以通过调用来停止：

    须藤-u dhis tomcat-dhis / bin / shutdown.sh

要监视Tomcat的行为，日志是该日志的主要来源
信息。可以使用以下命令查看日志：

    尾巴-f tomcat-dhis / logs / catalina.out

假设WAR文件名为ROOT.war，您现在可以访问
DHIS2实例位于以下URL：

    http://localhost:8080

## 文件存储配置 { #install_file_store_configuration }

DHIS2 能够捕获和存储文件。默认情况下，文件将存储在运行 DHIS2 的服务器的本地文件系统上的 _DHIS2_HOME_ 外部目录位置下的 _files_ 目录中。

您还可以配置 DHIS2 将文件存储在基于云的存储提供商上。 AWS S3 是当前唯一受支持的提供商。要启用基于云的存储，您必须在 _dhis.conf_ 文件中定义以下附加属性：

```属性
＃文件存储提供者。当前支持“文件系统”和“ aws-s3”。
filestore.provider ='aws-s3'

＃本地文件系统上外部目录中的目录，AWS S3上存储桶
filestore.container =文件

＃以下配置仅适用于云存储（AWS S3）

＃数据中心位置。可选，但出于性能原因建议使用。
filestore.location = eu-west-1

＃AWS S3上的用户名/访问密钥
filestore.identity = xxxx

＃AWS S3上的密码/密钥（敏感）
filestore.secret = xxxx
```

此配置是反映默认值的示例，应进行更改以满足您的需求。换句话说，如果您打算使用默认值，则可以完全省略它。如果您想使用外部提供程序，则需要定义最后一个属性块，并将 _provider_ 属性设置为受支持的提供程序（当前仅 AWS S3）。

> **注意**
>
> 如果您在dhis.conf中配置了云存储，则您上传的所有文件或系统生成的文件都将使用云存储。

对于生产系统，文件存储的初始设置应为
被仔细考虑为在存储提供商之间移动文件，而
保持数据库引用的完整性可能很复杂。保持
请记住，文件存储的内容可能包含敏感内容，
以及完整的信息，并保护对文件夹以及
建议在生产中确保备份计划到位
实施。

> **注意**
>
> AWS S3 是唯一受支持的提供商，但将来可能会添加更多提供商，例如 Google Cloud Store 和 Azure Blob Storage。如果您有其他提供商的用例，请告诉我们。

## Google服务帐户配置 { #install_google_service_account_configuration }

DHIS2可以连接到各种Google服务API。例如，
DHIS2 GIS组件可以利用Google Earth Engine API加载地图
层。为了提供API访问令牌，您必须设置一个Google
服务帐户并创建私钥：

-   创建一个 Google 服务帐户。请参阅 [Google 识别平台](https://developers.google.com/identity/protocols/OAuth2ServiceAccount#overview) 文档。

-   访问 [Google 云控制台](https://console.cloud.google.com) 并转到 API Manager \> 凭据 \> 创建凭据 \> 服务帐户密钥。选择您的服务帐户和 JSON 作为密钥类型，然后单击“创建”。

-   将 JSON 密钥重命名为 _dhis-google-auth.json_。

下载密钥文件后，将 _dhis-google-auth.json_ 文件放入 DHIS2_HOME 目录中（与 _dhis.conf_ 文件位于同一位置）。作为示例，该位置可以是：

    /home/dhis/config/dhis-google-auth.json

## LDAP配置 { #install_ldap_configuration }

DHIS2能够使用LDAP服务器进行用户身份验证。
对于LDAP身份验证，要求在
每个LDAP条目的DHIS2数据库。 DHIS2用户将用于代表
权限/用户角色。

要设置LDAP身份验证，您需要配置LDAP服务器URL，
管理员用户以及LDAP搜索库和搜索过滤器。这个
配置应在主DHIS 2配置文件中完成
（dhis.conf）。 LDAP用户或条目通过区分来标识
名称（此后为DN）。一个示例配置如下所示：

```属性
＃LDAP服务器网址
ldap.url = ldaps：//domain.org：636

＃LDAP管理器条目专有名称
ldap.manager.dn = cn = johndoe，dc = domain，dc = org

＃LDAP管理员输入密码
ldap.manager.password = xxxx

＃LDAP基本搜索
ldap.search.base = dc = domain，dc = org

＃LDAP搜索过滤器
ldap.search.filter =（cn = {0}）
```

LDAP配置属性说明如下：

-   _ldap.url：_ 进行身份验证的 LDAP 服务器的 URL。强烈建议使用 SSL/加密，以保证身份验证的安全。例如 URL 为 _ldaps://domain.org:636_，其中 ldaps 指协议，_domain.org_ 指域名或 IP 地址，_636_ 指端口（636 是 LDAPS 的默认值）。

-   _ldap.manager.dn：_ 需要 LDAP 管理器用户来绑定到 LDAP 服务器以进行用户身份验证过程。此属性指的是该条目的 DN。 IE。这不是登录 DHIS2 时将进行身份验证的用户，而是绑定到 LDAP 服务器以进行身份验证的用户。

-   _ldap.manager.password：_ LDAP 管理员用户的密码。

-   _ldap.search.base：_ 搜索库或搜索库对象的专有名称，它定义 LDAP 搜索开始的目录位置。

-   _ldap.search.filter:_ 用于匹配 LDAP 目录中条目 DN 的过滤器。 {0} 变量将替换为 DHIS2 用户名，或者使用提供的用户名为用户定义的 LDAP 标识符。

DHIS2将使用提供的用户名/密码并尝试进行身份验证
针对LDAP服务器条目，然后从中查找用户角色/权限
相应的DHIS2用户。这意味着用户必须具有
LDAP目录中的匹配条目以及DHIS2用户，以便
登录。

在身份验证期间，DHIS2将尝试使用以下方式绑定到LDAP服务器：
配置的LDAP服务器URL以及管理员DN和密码。一旦
绑定完成后，它将使用以下命令在目录中搜索条目
配置的LDAP搜索库和搜索过滤器。

配置的过滤器中的{0}变量将在替换之前
应用过滤器。默认情况下，它将被提供的
用户名。您还可以在相关的
DHIS2用户帐户。可以通过DHIS2用户模块用户来完成
通过设置“ LDAP标识符”，在添加或编辑屏幕中找到界面
属性。设置后，LDAP标识符将替换为{0}
过滤器中的变量。 LDAP通用名称时，此功能很有用
不适合或由于某种原因不能用作DHIS2用户名。

## 加密配置 { #install_encryption_configuration }

DHIS2 允许数据加密。然而，这需要一些额外的设置。要为加密算法提供安全性，您必须通过 _encryption.password_ 属性在 _dhis.conf_ 配置文件中设置密码：

```属性
加密密码= xxxx
```

_encryption.password_ 属性是加密和解密数据库中的数据时使用的密码。请注意，密码一旦设置并且数据已加密，就不得更改，因为数据将无法再解密。

密码必须至少为** 24个字符长**。混合数字
推荐使用大小写字母。加密密码
必须保密。

> **重要**
>
> 温馨提示：如果加密密码丢失或更改，则无法恢复加密数据。如果密码丢失，加密的数据也会丢失。相反，如果密码被泄露，加密就无法提供安全性。因此，应充分考虑将密码存储在安全的地方。

## 读取副本数据库配置 { #install_read_replica_configuration }

DHIS 2允许利用主数据库的只读副本
（主DHIS 2数据库）。只读副本的目的是为了增强
数据库读取查询的性能并扩展容量
超越了单个数据库的限制。大量读取操作，例如
因为分析和事件查询将从中受益。

该配置要求您已创建主DHIS 2数据库的一个或多个复制实例。 PostgreSQL通过称为_流复制_ 的概念来实现这一点。本指南未涵盖为PostgreSQL配置只读副本。

只读副本可以在 _dhis.conf_ 配置文件中定义。您可以为每个 DHIS 2 实例指定最多 5 个只读副本。每个只读副本都用 1 到 5 之间的数字表示。必须为每个副本定义 JDBC 连接 URL。可以指定用户名和密码；如果没有，将使用 master 数据库的用户名和密码。

_dhis.conf_ 中只读副本的配置如下所示。每个副本都使用配置键 _readN_ 前缀指定，其中 N 指副本编号。

```属性
＃读取副本1的配置

＃数据库连接URL，用户名和密码
read1.connection.url = jdbc：postgresql：//127.0.0.11/dbread1
read1.connection.username = dhis
read1.connection.password = xxxx

＃读取副本2的配置

＃数据库连接URL，用户名和密码
read2.connection.url = jdbc：postgresql：//127.0.0.12/dbread2
read2.connection.username = dhis
read2.connection.password = xxxx

＃读取副本3的配置

＃数据库连接URL，后退到主用户名和密码
read3.connection.url = jdbc：postgresql：//127.0.0.13/dbread3
```

请注意，您必须重新启动servlet容器才能更改
生效。 DHIS 2将自动在
读取副本。副本的顺序没有任何意义。

## Web服务器群集配置 { #install_web_server_cluster_configuration }

本节介绍如何设置DHIS 2应用程序以在
簇。

### 群集概述 { #install_cluster_configuration_introduction }

群集是提高系统可伸缩性和可用性的常用技术。群集是指设置多个Web服务器，例如Tomcat实例，并使它们为单个应用程序提供服务。从可以添加新服务器以提高性能的意义上讲，群集允许_scaling out_ 应用程序。它还允许_高可用性_，因为系统可以容忍发生故障的实例，而不会导致用户无法访问系统。

有一些方面需要配置才能运行DHIS 2
在集群中。

-   每个 DHIS 2 实例必须在 _dhis.conf_ 中指定集群的其他 DHIS 2 实例成员。

-   必须安装 Redis 数据存储，并且必须在 _dhis.conf_ 中为每个 DHIS 2 应用程序实例提供连接信息。

-   DHIS 2 实例和服务器必须通过 _AWS S3 云文件存储_选项或共享网络驱动器共享用于应用程序和文件上传的相同 _files_ 文件夹。

-   必须配置负载均衡器（例如 nginx）来跨集群实例分发 Web 请求。

### DHIS 2实例群集配置 { #install_cluster_configuration }

设置多个Tomcat实例时，需要进行
实例彼此了解。这种认识将使DHIS 2能够保持
本地数据（休眠）同步并处于一致状态。
在一个实例上完成更新后，在另一个实例上缓存
必须通知实例，以便实例可以无效并避免
变得陈旧。

A DHIS 2 cluster setup is based on manual configuration of each instance. For each DHIS 2 instance one must specify the public _hostname_ as well as the hostnames of the other instances participating in the cluster.

服务器的主机名是使用 _cluster.hostname_ 配置属性指定的。参与集群的其他服务器是使用 _cluster.members_ 配置属性指定的。该属性需要一个逗号分隔值的列表，其中每个值的格式为 _host:port_。

主机名必须对网络上的参与服务器可见
为集群工作。您可能需要允许传入和
防火墙中配置的端口号上的传出连接。

服务器的端口号是使用 _cluster.cache.port_ 配置属性指定的。用于注册表接收调用的远程对象端口是使用 _cluster.cache.remote.object.port_ 指定的。通常，仅当同一服务器上有多个集群实例或者需要显式指定端口以匹配防火墙配置时，指定端口号才有用。在单独的服务器上运行集群实例时，通常适合使用默认端口号并忽略端口配置属性。如果省略，则 4001 将被分配为侦听器端口，并且随机空闲端口将被分配为远程对象端口。

下面描述了由两个 Web 服务器组成的集群的示例设置。对于主机名 _193.157.199.131_ 可用的_服务器 A_，可以在 _dhis.conf_ 中指定以下内容：

```属性
＃服务器A的集群配置

＃此Web服务器的主机名
cluster.hostname = 193.157.199.131

＃缓存侦听器的端口，可以省略
cluster.cache.port = 4001
cluster.cache.remote.object.port = 5001

＃参与集群的Host：port列表
cluster.members = 193.157.199.132:4001
```

对于主机名 _193.157.199.132_ 可用的_服务器 B_，可以在 _dhis.conf_ 中指定以下内容（注意如何省略端口配置）：

```属性
＃服务器B的集群配置

＃此Web服务器的主机名
cluster.hostname = 193.157.199.132

＃参与集群的服务器列表
cluster.members = 193.157.199.131:4001
```

您必须重新启动每个Tomcat实例，以使更改生效。
现在已使两个实例相互了解，DHIS 2将
确保其缓存保持同步。

### Redis共享数据存储集群配置 { #install_cluster_configuration_redis }

在集群设置中，需要一个_Redis_实例，它将处理共享用户会话、应用程序缓存和集群节点领导。

为获得最佳性能，需要在 Redis 服务器中启用_通用命令_和_过期事件_的_Redis 关键空间事件_。如果使用的是云平台管理的 Redis 服务器（如 _AWS ElastiCache for Redis_ 或 _Azure Cache for Redis_），则必须使用相应的云控制台界面启用关键空间事件通知。如果设置的是独立的 Redis 服务器，则可在 _redis.conf_ 文件中添加或取消注释以下一行，以启用密钥空间事件通知：

```
notify-keyspace-events Egx
```

如果 _dhis.conf_ 中的 _redis.enabled_ 配置属性设置为 _true_ 以及以下属性，DHIS2 将连接到 Redis：

-   _redis.host_：指定redis服务器运行的位置。默认为 _localhost_。强制的。

-   _redis.port_：指定redis服务器监听的端口。默认为_6379_。选修的。

-   _redis.password_：指定认证密码。如果不需要密码，可以留空。

-   _redis.use.ssl_：指定Redis服务器是否启用了SSL。默认为 false。选修的。默认为_false_。

启用 Redis 后，DHIS2 将自动分配正在运行的实例之一作为集群的领导者。领导者实例将用于执行应由一个实例独占运行的作业或计划任务。您也可以选择在 _dhis.conf_ 中配置 _leader.time.to.live.months_ 属性来设置领导者选举需要发生的频率。它还指示在前一个领导者不可用后另一个实例接管领导者身份需要多长时间。默认值为 2 分钟。请注意，只有在启用 Redis 的情况下才能在集群中分配领导者。下面显示了启用了 Redis 并配置了领导者选举时间的 _dhis.conf_ 配置文件的示例片段。

```属性
＃Redis配置

redis.enabled = true

redis.host = 193.158.100.111

redis.port = 6379

redis.password = <your password>

redis.use.ssl = false

＃可选，默认为2分钟
Leader.time.to.live.minutes = 4
```

### 文件文件夹配置 { #files-folder-configuration }

DHIS 2将在应用程序本身之外存储几种类型的文件，
例如应用程序，保存在数据输入中的文件和用户头像。部署时
在群集中，这些文件的位置必须在所有实例之间共享。
在本地文件系统上，位置为：

```
{DHIS2_HOME} /文件
```

在这里，` DHIS2_HOME`是指DHIS 2环境变量所指定的DHIS 2配置文件的位置，而` files`是紧随其后的文件夹。

有两种方法可以实现共享位置：

-   使用_AWS S3 云文件存储_选项。文件将存储在 S3 存储桶中，该存储桶由集群中的所有 DHIS 2 实例自动共享。请参阅_文件存储配置_部分以获取指导。
-   设置一个共享文件夹，该共享文件夹在群集中的所有DHIS 2实例和服务器之间共享。在Linux上，这可以通过 _NFS_（网络文件系统）来实现，它是一种分布式文件系统协议。请注意，只能共享`DHIS2_HOME`下的`文件`子文件夹，而不是父文件夹。

### 负载均衡器配置 { #install_load_balancing }

设置 Tomcat 实例集群后，将传入 Web 请求路由到参与集群的后端实例的常用方法是使用_负载均衡器_。负载均衡器将确保负载在集群实例之间均匀分布。它还将检测实例是否变得不可用，如果是，则停止对该实例的例行请求，而使用其他可用实例。

负载平衡可以通过多种方式实现。一种简单的方法是使用 _nginx_，在这种情况下，您将定义一个 _upstream_ 元素，该元素枚举后端实例的位置，然后在 _proxy_ 位置块中使用该元素。

```text
http {

  # Upstream element with sticky sessions

  upstream dhis_cluster {
    ip_hash;
    server 193.157.199.131:8080;
    server 193.157.199.132:8080;
  }

  # Proxy pass to backend servers in cluster

  server {
    listen 80;

    location / {
      proxy_pass   http://dhis_cluster/;
    }
  }
}
```

DHIS 2 在有限程度上保留用户会话的服务器端状态。使用“粘性会话”是一种简单的方法，可以通过将请求从同一客户端路由到同一服务器来避免复制服务器会话状态。上游元素中的 _ip_hash_ 指令确保了这一点。

请注意，为简洁起见，已省略了几条说明
上面的例子。请查阅反向代理部分以获取详细指南。

## Analytics缓存配置 { #install_analytics_cache_configuration }

DHIS 2支持用于所有分析Web应用程序的分析API响应的服务器端缓存。该缓存位于DHIS 2应用程序内，因此受到DHIS 2身份验证和安全层的保护。您可以配置以秒为单位的缓存条目的到期时间。要启用缓存，您可以在`dhis.conf`中定义`analytics.cache.expiration`属性。下面的示例启用了缓存并将过期设置为一小时。

```属性
analytics.cache.expiration = 3600
```

## 监控 { #monitoring }

DHIS 2可以导出Prometheus兼容的度量标准以监视DHIS2实例。 DHIS2监视基础结构旨在公开与应用程序运行时相关的指标以及其他与应用程序相关的信息。

与基础架构相关的指标（例如主机指标，Tomcat或Postgres）不会直接由应用程序监视引擎公开，因此必须分别收集它们。该应用程序当前公开的指标是：

-   DHIS 2 API（响应时间，调用次数等）
-   JVM（堆大小，垃圾回收等）
-   休眠（查询，缓存等）
-   C3P0数据库池
-   应用正常运行时间
-   中央处理器

可以使用以下属性在`dhis.conf`中启用监视（所有属性默认为`off`）：

```属性
monitoring.api.enabled =开
monitoring.jvm.enabled =开
monitoring.dbpool.enabled =开
monitoring.hibernate.enabled =关
monitoring.uptime.enabled =开
monitoring.cpu.enabled =开
```

推荐使用Prometheus和Grafana收集和可视化这些指标的方法。有关更多信息，请参见[监控基础结构]（https://github.com/dhis2/wow-backend/blob/master/guides/monitoring.md）页面和[Prometheus and Grafana安装]（https：// docs .dhis2.org / master / en / dhis2_system_administration_guide / monitoring.html）一章。

## 反向代理配置 { #install_reverse_proxy_configuration }

反向代理是代表服务器运行的代理服务器。使用
反向代理与Servlet容器结合使用是可选的，但
有很多优点：

-   请求可以被映射并传递到多个 servlet 容器。这提高了灵活性，并使在同一服务器上运行 DHIS2 的多个实例变得更加容易。它还可以在不影响客户端的情况下更改内部服务器设置。

-   DHIS2 应用程序可以作为非 root 用户在 80 以外的端口上运行，从而减少会话劫持的后果。

-   反向代理可以充当单个 SSL 服务器，并配置为检查恶意内容请求、记录请求和响应并提供非敏感错误消息，从而提高安全性。

### 基本的Nginx设置 { #install_basic_nginx_setup }

由于以下原因，我们建议使用[nginx]（http://www.nginx.org）作为反向代理
其低内存占用和易用性。要安装，请调用
以下：

    须藤apt-get install nginx

现在可以使用以下命令启动，重新加载和停止nginx
命令：

    sudo /etc/init.d/nginx开始
    须藤/etc/init.d/nginx重新加载
    sudo /etc/init.d/nginx停止

现在我们已经安装了 nginx，我们现在将继续配置对 Tomcat 实例的请求的常规代理，我们假设该实例在 _http://localhost:8080_ 上运行。要配置 nginx，您可以通过调用以下命令打开配置文件：

    须藤nano /etc/nginx/nginx.conf

nginx配置围绕代表以下内容的块层次结构构建
http，服务器和位置，其中每个块都从父级继承设置
块。以下代码段将nginx配置为通过代理
（重定向）来自端口80的请求（该端口是nginx监听的端口
默认情况下）到我们的Tomcat实例。包括以下配置
在nginx.conf中：

```text
http {
  gzip on; # Enables compression, incl Web API content-types
  gzip_types
    "application/json;charset=utf-8" application/json
    "application/javascript;charset=utf-8" application/javascript text/javascript
    "application/xml;charset=utf-8" application/xml text/xml
    "text/css;charset=utf-8" text/css
    "text/plain;charset=utf-8" text/plain;

  server {
    listen               80;
    client_max_body_size 10M;

    # Proxy pass to servlet container

    location / {
      proxy_pass                http://localhost:8080/;
      proxy_redirect            off;
      proxy_set_header          Host               $host;
      proxy_set_header          X-Real-IP          $remote_addr;
      proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto  http;
      proxy_buffer_size         128k;
      proxy_buffers             8 128k;
      proxy_busy_buffers_size   256k;
      proxy_cookie_path         ~*^/(.*) "/$1; SameSite=Lax";
    }
  }
}
```

您现在可以通过 _http://localhost_ 访问您的 DHIS2 实例。由于已经设置了反向代理，我们可以通过让 Tomcat 仅侦听本地连接来提高安全性。在 _/conf/server.xml_ 中，您可以将值为 _localhost_ 的 _address_ 属性添加到 HTTP 1.1 的 Connector 元素，如下所示：

```xml
<Connector address="localhost" protocol="HTTP/1.1" />
```

### 使用nginx {#install_enabling_ssl_on_nginx}启用SSL { #install_enabling_ssl_on_nginx }

为了提高安全性，建议将运行 DHIS2 的服务器配置为通过加密连接与客户端通信，并使用受信任的证书向客户端标识其自身。这可以通过 SSL 来实现，SSL 是一种运行在 TCP/IP 之上的加密通信协议。首先，安装所需的 _openssl_ 库：

    须藤apt-get install openssl

要将 nginx 配置为使用 SSL，您需要来自 SSL 提供商的正确 SSL 证书。证书的成本根据加密强度的不同而有很大差异。 [Rapid SSL Online](http://www.rapidsslonline.com) 提供的经济实惠的证书应该可以满足大多数用途。要生成 CSR（证书签名请求），您可以调用以下命令。当系统提示您输入_通用名称_时，请输入您要保护的站点的完全限定域名。

    openssl req -new -newkey rsa：2048 -nodes -keyout server.key -out server.csr

收到证书文件（.pem或.crt）后，您将
需要将其与生成的server.key文件放在一起
nginx可以到达的位置。一个好的位置可以是
与您的nginx.conf文件所在的目录相同。

下面是一个 nginx 服务器块，其中证书文件名为 server.crt 和 server.key。由于 SSL 连接通常发生在端口 443 (HTTPS) 上，因此我们将该端口 (443) 上的请求传递到在 _http://localhost:8080_ 上运行的 DHIS2 实例。第一个服务器块将重写连接到端口 80 的所有请求并强制使用HTTPS/SSL 的。这也是必要的，因为 DHIS2 在内部使用大量重定向，必须传递这些重定向才能使用 HTTPS。请记住将 _\<server-ip\>_ 替换为您服务器的 IP。这些块应该替换上一节中的块。

```text
http {
  gzip on; # Enables compression, incl Web API content-types
  gzip_types
    "application/json;charset=utf-8" application/json
    "application/javascript;charset=utf-8" application/javascript text/javascript
    "application/xml;charset=utf-8" application/xml text/xml
    "text/css;charset=utf-8" text/css
    "text/plain;charset=utf-8" text/plain;

  # HTTP server - rewrite to force use of SSL

  server {
    listen     80;
    rewrite    ^ https://<server-url>$request_uri? permanent;
  }

  # HTTPS server

  server {
    listen               443 ssl;
    client_max_body_size 10M;

    ssl                  on;
    ssl_certificate      server.crt;
    ssl_certificate_key  server.key;

    ssl_session_cache    shared:SSL:20m;
    ssl_session_timeout  10m;

    ssl_protocols              TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers                RC4:HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers  on;

    # Proxy pass to servlet container

    location / {
      proxy_pass                http://localhost:8080/;
      proxy_redirect            off;
      proxy_set_header          Host               $host;
      proxy_set_header          X-Real-IP          $remote_addr;
      proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto  https;
      proxy_buffer_size         128k;
      proxy_buffers             8 128k;
      proxy_busy_buffers_size   256k;
      proxy_cookie_path         ~*^/(.*) "/$1; SameSite=Lax";
    }
  }
}
```

请注意最后一个`https`头值，该值是用来通知servlet容器请求通过HTTPS发出的。为了使Tomcat使用HTTPS正确生成`Location` URL头，您还需要在Tomcat`server.xml`文件中的连接器中添加其他两个参数：

```xml
<Connector scheme="https" proxyPort="443" />
```

### 使用Nginx启用缓存 { #install_enabling_caching_ssl_nginx }

要求提供报告，图表，地图和其他与分析相关的资源
通常会花费一些时间来响应，并且可能会占用大量服务器
资源。为了缩短响应时间，请减少
服务器并隐藏潜在的服务器停机时间，我们可以引入缓存代理
在我们的服务器设置中。缓存的内容将存储在目录中
/ var / cache / nginx，最多将分配250 MB的存储空间。 Nginx的
将自动创建此目录。

```text
http {
  ..
  proxy_cache_path  /var/cache/nginx  levels=1:2  keys_zone=dhis:250m  inactive=1d;


  server {
    ..

    # Proxy pass to servlet container and potentially cache response

    location / {
      proxy_pass                http://localhost:8080/;
      proxy_redirect            off;
      proxy_set_header          Host               $host;
      proxy_set_header          X-Real-IP          $remote_addr;
      proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto  https;
      proxy_buffer_size         128k;
      proxy_buffers             8 128k;
      proxy_busy_buffers_size   256k;
      proxy_cookie_path         ~*^/(.*) "/$1; SameSite=Lax";
      proxy_cache               dhis;
    }
  }
}
```

> **重要**
>
> 请注意，服务器端缓存缩短了 DHIS2 安全功能，因为命中服务器端缓存的请求将直接从 DHIS2 和 servlet 容器控制之外的缓存提供服务。这意味着未经授权的用户可以猜测请求 URL 并从缓存中检索报告。因此，如果您捕获敏感信息，则不建议设置服务器端缓存。

### 使用Nginx进行速率限制 { #install_rate_limiting }

DHIS 2中的某些Web API调用,如`analytics` API,是计算密集型的。因此，最好对这些API进行速率限制，以允许系统的所有用户充分利用服务器资源。速率限制可以通过`nginx`实现。有多种实现速率限制的方法，这旨在记录基于nginx的方法。

以下nginx配置将对`analytics`网络API进行速率限制，并在_http_和_location_块级别具有以下元素（为简洁起见，配置被缩短）：

```text
http {
  ..
  limit_req_zone $binary_remote_addr zone=limit_analytics:10m rate=5r/s;

  server {
    ..

    location ~ ^/api/(\d+/)?analytics(.*)$ {
      limit_req    zone=limit_analytics burst=20;
      proxy_pass   http://localhost:8080/api/$1analytics$2$is_args$args;
      ..
    }
  }
}
```

配置的各个元素可以描述为：

-   _limit_req_zone $binary_remote_addr_：对每个请求 IP 进行速率限制。
-   _zone=limit_analytics:20m_：分析 API 的速率限制区域，最多可容纳 10 MB 的请求 IP 地址。
-   _rate=20r/s_：每个IP每秒被授予5个请求。
-   _location ~ ^/api/(\d+/)?analytics(.\*)$_：对分析 API 端点的请求受到速率限制。
-   _burst = 20_：最多20个请求的突发将在以后排队并提供服务；其他请求将导致产生`503`。

有关完整说明，请查阅[nginx文档]（https://www.nginx.com/blog/rate-limiting-nginx/）。

### 使用Nginx使资源可用 { #install_making_resources_available_with_nginx }

在某些情况下，希望在 Web 上公开某些资源而不需要身份验证。一个示例是当您想要在 Web 门户中提供 Web API 中的数据分析相关资源时。以下示例将允许通过将 _Authorization_ HTTP 标头注入到请求中，通过基本身份验证访问图表、地图、报告、报告表和文档资源。它将从请求中删除 Cookie 标头，并从响应中删除 Set-Cookie 标头，以避免更改当前登录的用户。建议为此目的创建一个用户，仅提供所需的最低权限。授权值可以通过对附加冒号的用户名和密码进行 Base64 编码来构造，并为其添加前缀“Basic”，更准确地说是“Basic base64_encode(username:password)”。它将检查用于请求的 HTTP 方法，如果检测到除 GET 之外的任何内容，则返回_405 Method Not allowed_。

为此类公共用户设置一个单独的域可能是有利的
使用这种方法时。这是因为我们不想更改
已登录用户访问公共帐户时的凭据
资源。例如，当您的服务器部署在somedomain.com上时，
您可以在api.somedomain.com上设置专用的子域，并指向URL
从您的门户到此子域。

```text
http {
  ..

  server {
    listen       80;
    server_name  api.somedomain.com;

    location ~ ^/(api/(charts|chartValues|reports|reportTables|documents|maps|organisationUnits)|dhis-web-commons/javascripts|images|dhis-web-commons-ajax-json|dhis-web-mapping|dhis-web-visualizer) {
    if ($request_method != GET) {
        return 405;
      }

      proxy_pass         http://localhost:8080;
      proxy_redirect     off;
      proxy_set_header   Host               $host;
      proxy_set_header   X-Real-IP          $remote_addr;
      proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Proto  http;
      proxy_set_header   Authorization      "Basic YWRtaW46ZGlzdHJpY3Q=";
      proxy_set_header   Cookie             "";
      proxy_hide_header  Set-Cookie;
    }
  }
}
```

## DHIS2配置参考 { #install_dhis2_configuration_reference }

下面描述了 _dhis.conf_ 配置文件的全套配置选项。配置文件应放置在 _DHIS2_HOME_ 环境变量指向的目录中。

> **注意**
>
>您不应尝试直接使用此配置文件，而应将其用作可用配置选项的参考。许多属性是可选的。

属性
# ----------------------------------------------------------------------
# PostgreSQL 的数据库连接 [必填] ```properties
# ----------------------------------------------------------------------

# Hibernate SQL 方言
connection.dialect = org.hibernate.dialect.PostgreSQLDialect

# JDBC 驱动类
connection.driver_class = org.postgresql.Driver

# 数据库连接 URL
connection.url = jdbc:postgresql:dhis2

# 数据库用户名
connection.username = dhis

# 数据库密码（敏感）
connection.password = xxxx

# 连接池的最大大小（默认：40）
connection.pool.max_size = 40

# ----------------------------------------------------------------------
# PostgreSQL 的数据库连接 [可选］
# ----------------------------------------------------------------------

# 数据池在任何给定时间内维护的最少连接数（默认值：5）。
connection.pool.min_size=5

# 连接池的初始大小（默认值：5）
#连接池启动时尝试获取的连接数。应介于 minPoolSize 和 maxPoolSize 之间
connection.pool.initial_size=5

#决定池用完时每次尝试获取的连接数。
connection.pool.acquire_incr=5

#连接在被丢弃前可保持在池中但未使用的秒数。零表示闲置连接永不过期。(默认值：7200）
connection.pool.max_idle_time=7200

#超过 minPoolSize 的连接在被删除前在池中闲置的秒数（默认值：0）
connection.pool.max_idle_time_excess_con=0

#如果这个数字大于 0，dhis2 将每隔这个秒数测试所有闲置的、已入池但未选中的连接。(默认值：0）
connection.pool.idle.con.test.period=0

#如果为 "true"，则每次连接检出时都会执行一次操作，以验证连接是否有效。(默认值：false）
connection.pool.test.on.checkout=false

#如果为 true，将在每次连接检入时异步执行操作，以验证连接是否有效。(默认值：true）
connection.pool.test.on.checkin=true

#定义所有连接测试都要执行的查询。理想情况下不需要此配置，因为 postgresql 驱动程序已经提供了高效的测试查询。该配置仅用于评估，除非有必要，否则请勿使用。
connection.pool.preferred.test.query=select 1

#配置 dhis2 用于 jdbc 操作的辅助线程数量。(默认值：3）
connection.pool.num.helper.threads=3

# ----------------------------------------------------------------------
# 服务器 [必填］
# ----------------------------------------------------------------------

# DHIS 2 实例的基本 URL
server.base.url = https://play.dhis2.org/dev

# 如果系统部署在 HTTPS 上，则启用安全设置，可以是 "关闭"、"打开
server.https = off

# ----------------------------------------------------------------------
# 系统 [可选]
# ----------------------------------------------------------------------

# 仅用于数据库读取操作的系统模式，可以是 "关闭"、"开启
system.read_only_mode = 关闭

# 会话超时（秒），默认为 3600
system.session.timeout = 3600

# SQL 视图保护表，可以是 "开 "或 "关
system.sql_view_table_protection = on

# ----------------------------------------------------------------------
# 加密 [可选]
# ----------------------------------------------------------------------

# 加密密码（敏感）
encryption.password = xxxx

# ----------------------------------------------------------------------
# 文件存储 [可选]
# ----------------------------------------------------------------------

# 文件存储提供程序，目前支持 "filesystem "和 "aws-s3
filestore.provider = filesystem

# 文件系统上 DHIS2_HOME 下面的文件夹/存储桶名称，AWS S3 上的 "bucket
filestore.container = files

# 数据中心位置（非必填）
filestore.location = eu-west-1

# 公共身份/用户名
filestore.identity = dhis2-id

# 密钥/密码（敏感）
filestore.secret = xxxx

# ----------------------------------------------------------------------
# LDAP [可选]
# ----------------------------------------------------------------------

# LDAP 服务器 URL
ldap.url = ldaps://300.20.300.20:636

# LDAP 管理器用户区分名称
ldap.manager.dn = cn=JohnDoe,ou=Country,ou=Admin,dc=hisp,dc=org

# LDAP 管理员用户密码（敏感）
ldap.manager.password = xxxx

# LDAP 条目区分名称搜索基数
ldap.search.base = dc=hisp,dc=org

# LDAP 条目区分名称过滤器
ldap.search.filter = (cn={0})

# ----------------------------------------------------------------------
# 节点 [可选］
# ----------------------------------------------------------------------

# 节点标识符，可选，在集群中有用
node.id = 'node-1'

# ----------------------------------------------------------------------
# 分析 [可选]
# ----------------------------------------------------------------------

# 以秒为单位的分析服务器端缓存过期时间
analytics.cache.expiration = 3600

# ----------------------------------------------------------------------
# 系统监控 [可选]
# ----------------------------------------------------------------------

# 系统监控 URL
system.monitoring.url =

# 系统监控用户名
system.monitoring.username =

# 系统监控密码（敏感）
system.monitoring.password = xxxx
```

## 应用程序日志记录 { #install_application_logging }

本节介绍DHIS 2中的应用程序日志记录。

### 日志文件 { #log-files }

DHIS2应用程序日志输出定向到多个文件和位置。首先，将日志输出发送到标准输出。 Tomcat Servlet容器通常将标准输出输出到“ logs”下的文件：

     <tomcat-dir> /logs/catalina.out

其次，日志输出写入 DHIS2_HOME 环境变量定义的 DHIS2 主目录下的“logs”目录。所有输出都有一个主日志文件，并且各个后台进程都有单独的日志文件。主文件还包括后台进程日志。日志文件的上限为 50 Mb，并且日志内容会连续附加。

     <DHIS2_HOME> /logs/dhis.log
     <DHIS2_HOME> /logs/dhis-analytics-table.log
     <DHIS2_HOME> /logs/dhis-data-exchange.log
     <DHIS2_HOME> /logs/dhis-data-sync.log

### 日志配置 { #log-configuration }

为了覆盖默认日志配置，您可以指定一个名为 _log4j.configuration_ 的 Java 系统属性和一个指向类路径上 Log4j 配置文件的值。如果您想指向文件系统上的文件（即 Tomcat 之外），您可以使用 _file_ 前缀，例如像这样：

```属性
-Dlog4j.configuration =文件：/home/dhis/config/log4j.properties
```

Java 系统属性可以设置，例如通过 _JAVA_OPTS_ 环境变量或者在 tomcat 启动脚本中。

覆盖日志配置的第二种方法是在 _dhis.conf_ 配置文件中指定日志记录属性。支持的属性有：

```属性
＃日志文件的最大大小，默认为'100MB'
logging.file.max_size = 250MB

＃最大滚动日志归档文件数，默认为0
logging.file.max_archives = 2
```

DHIS2 最终将逐步停止记录到标准输出/catalina.out，因此建议依赖 DHIS2_HOME 下的日志。

## 使用PostgreSQL数据库 { #install_working_with_the_postgresql_database }

管理DHIS2实例时的常见操作是转储和
恢复数据库。假设您要转储数据库（副本）
从安装部分进行设置，您可以调用以下命令：

    pg_dump dhis2 -U dhis -f dhis2.sql

第一个参数（dhis2）引用数据库的名称。的
第二个参数（dhis）指向数据库用户。最后一个论点
（dhis2.sql）是副本的文件名。如果您要压缩
您可以立即复制文件：

    pg_dump dhis2 -U dhis | gzip> dhis2.sql.gz

要在另一个系统上还原此副本，您首先需要创建一个
如安装部分所述清空数据库。你还需要
如果您创建了压缩版本，则将副本打包。您可以
调用：

    psql -d dhis2 -U dhis -f dhis2.sql
