---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/master/src/developer/web-api/overview.md"
revision_date: '2023-02-09'
tags:
- Develop
- DHIS核心 主版
---

# 总览 { #webapi } 

Web API 是一个组件，它使外部系统成为可能
访问和操作存储在 DHIS2 实例中的数据。更多的
准确地说，它为广泛的
为第三方等应用程序公开数据和服务方法
软件客户端、门户网站和内部 DHIS2 模块。

## 介绍 { #webapi_introduction } 

Web API 遵循 REST 背后的许多原则
建筑风格。提一些重要的：

1.  基本构建块称为*资源*。
    资源可以是任何暴露在 Web 上的东西，从文档到
    业务流程 - 客户可能想要与之交互的任何内容。
    可以检索或交换资源的信息方面
    通过资源*表示*。表示是一个视图
    任何给定时间的资源状态。例如，*可视化*
    DHIS2 中的资源表示聚合数据的可视化
    一组特定的参数。该资源可以在
    多种表示格式，包括 JSON 和 CSV。
2.  所有资源都可以由 *URI* 唯一标识（也称为
    作为 *URL*）。所有资源都有一个默认表示。你可以
    通过以下方式表明您对特定表示感兴趣
    提供 *Accept* HTTP 标头、文件扩展名或 *格式*
    查询参数。因此，为了检索 CSV 表示
    您可以提供的分析数据响应 *接受：application/csv*
    标头或将 *.csv* 或 *?format=csv* 附加到您的请求 URL。
3.  与 API 的交互需要正确使用 HTTP *方法* 或
    *动词*。这意味着对于资源，您必须发出 *GET*
    当你想要检索它时请求，当你想要时 *POST* 请求
    要创建一个，* PUT *（当您要更新时），* DELETE *（当您要删除时）
    你想删除它。

## 认证方式 { #webapi_authentication } 

DHIS2 Web API 支持三种身份验证协议：

- [基本身份验证](#webapi_basic_authentication)
- [个人访问令牌 (PAT)](#webapi_pat_authentication)
- [OAuth 2](#webapi_oauth2)

您可以验证并获取有关当前已验证的信息
用户通过向以下 URL 发出 GET 请求：

    / api / 33 / me

以及有关权限的更多信息（如果用户有特定的
权限）通过使用端点：

    / api / 33 / me / authorities
    / api / 33 / me / authorities / ALL

## 基本认证 { #webapi_basic_authentication } 

DHIS2 Web API 支持*基本身份验证*。基本认证
是一种客户端通过 HTTP 将登录凭据发送到 Web 的技术
服务器。从技术上讲，用户名后附有冒号和
密码，Base64 编码，前缀 Basic 并作为值提供
*Authorization* HTTP 标头。更正式的是：

    授权：基本base64encode（用户名：password）

大多数网络感知开发环境都支持 Basic
身份验证，例如 *Apache HttpClient* 和 *Spring RestTemplate*。
一个重要的注意事项是此身份验证方案不提供安全性
因为用户名和密码是以纯文本形式发送的，可以很容易地
被攻击者观察到。仅当服务器是
使用 SSL/TLS (HTTPS) 加密与客户端的通信。考虑这个
为了提供与 Web 的安全交互的硬性要求
应用程序接口。

## 两因素验证 { #webapi_2fa } 

DHIS2 支持两因素身份验证。这可以为每个用户启用。
启用后，用户将被要求在登录时输入 2FA 代码。您
可以阅读更多关于 2FA [这里](https://www.google.com/landing/2step/)。

## 个人访问令牌 { #webapi_pat_authentication }
个人访问令牌 (PAT) 是使用密码的替代方法
使用 API 时对 DHIS2 进行身份验证。

PAT 可以是 HTTP 基本身份验证的更安全的替代方案，
在创建新的应用程序/脚本等时应该是您的首选。

HTTP 基本身份验证被认为是不安全的，因为除其他外，
它以明文形式发送您的用户名和密码。它可能会被弃用
未来的 DHIS2 版本或选择加入，这意味着基本身份验证将
需要在配置中明确启用。

#### 重要的安全问题！ { #important-security-concerns }

您的 PAT 将自动继承您的所有权限和授权
用户有。因此，限制授予的访问权限非常重要
您的令牌取决于您打算如何使用它，请参阅**配置您的令牌**。

**如果您只希望令牌能够访问狭窄且特定的部分
服务器，建议创建一个您仅分配的新特殊用户
您希望它有权访问的角色/权限。**


### 创建令牌 { #creating-a-token }
要创建新的 PAT，您有两种选择：
* A. 在您帐户的个人资料页面的 UI 中创建令牌。
* B. 通过 API 创建令牌。

### A. 在账户页面创建令牌{ #a-creating-a-token-on-the-accounts-page }
使用您的用户名和密码登录，转到您的个人资料页面
（单击右上角，然后从下拉列表中选择“编辑个人资料”）。
在您的用户个人资料页面上，从“个人访问令牌”中选择“个人访问令牌”
左侧菜单。
您现在应该位于“管理个人访问令牌”页面并看到
文本：“您没有任何活动的个人访问令牌”。
点击“生成新令牌”来制作新令牌。
将显示“生成新令牌”弹出窗口，并向您提供两个选择：

#### 1. 服务器/脚本上下文：{ #1-serverscript-context }
_“此类型用于浏览器无法访问的集成和脚本”。_

如果您计划在应用程序、脚本或类似内容中使用令牌，则此
类型应该是你的选择。

#### 2. 浏览器上下文：{ #2-browser-context }
_“这种类型用于使用网络浏览器访问的应用程序，例如公共门户”。_

如果您需要在网页上链接到 DHIS2，或者例如嵌入 iframe 中，
这可能是您想要的令牌类型。


### 配置您的令牌 { #configuring-your-token }

选择所需的令牌类型后，您可以配置不同的访问限制
你的代币。约束是指如何限制和缩小代币的使用方式。
如果您计划在公共环境中使用令牌，这可能至关重要，
例如在另一个站点的公共仪表板上，嵌入在 iframe 中。
由于令牌始终具有与您的用户当前拥有的相同的访问/权限，因此需要特殊
如果您打算在任何您无法 100% 控制的环境中使用它，则需要小心。

**注意**：如果其他人拿到了您的代币，他们就可以做您的用户可以做的任何事情。
无法区分使用令牌执行的操作和其他操作
由您的用户执行。

**重要**：强烈建议您创建一个仅具有角色/权限的单独的唯一用户
如果您计划在不安全和/或公共环境中使用 PAT 令牌，您希望拥有该令牌，
例如在 PC 或服务器上，您无法 100% 控制或“嵌入”另一台服务器上的网页。

#### 不同的约束类型如下：{ #the-different-constraint-types-are-as-follows }
* 到期时间
* 允许的 UP 地址
* 允许的 HTTP 方法
* 允许的 HTTP 引荐来源网址

##### 过期时间{ #expiry-time }
过期时间只是设置您希望令牌可用的时间，默认为 30
天。过期时间后，令牌将仅返回 401（未经授权）消息。
您可以设置任何您想要的到期时间，但强烈建议您设置一个到期时间
这对于您的用例来说是合理的。

#### 允许的 IP 地址 { #allowed-ip-addresses }
这是您要限制令牌请求来源的 IP 地址的逗号分隔列表。

**重要**：IP 地址验证依赖于 X-Forwarded-For 标头，该标头可能会被欺骗。
为了安全起见，请确保负载均衡器或反向代理覆盖此标头。

#### 允许的 HTTP 方法 { #allowed-http-methods }
您希望令牌能够使用的 HTTP 方法的逗号分隔列表。
如果您只需要令牌来查看数据，而不需要修改或删除，则仅选择 GET HTTP 方法
说得通。

#### 允许的 HTTP 引荐来源网址 { #allowed-http-referrers }
HTTP Referer 是添加到请求中的标头，当您单击链接时，这表示哪个站点/页面
当您点击该链接时您正在上网。
在此处阅读有关 HTTP Referer 标头的更多信息：https://en.wikipedia.org/wiki/HTTP_referer

这可用于限制嵌入在另一个站点的另一个页面上的“公共”令牌的使用。
确保引用标头与应来自的站点主机名匹配，可以
帮助避免滥用令牌，例如如果有人将其发布在公共论坛上。

**Important**: this is not a security feature. The `referer` header can easily be spoofed.
This setting is intended to discourage unauthorized third-party developers from connecting
to public access instances.

#### 保存您的令牌：{ #saving-your-token }
完成令牌配置后，您可以通过单击“生成新令牌”来保存它
按钮，位于弹出窗口的右下角。
执行此操作时，将保存令牌并在服务器上生成秘密令牌密钥。
新的秘密令牌密钥将以绿色背景显示在 PAT 令牌列表的底部，
以及文本“新创建的令牌”。
秘密令牌密钥将类似于以下内容：
```
d2pat_5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ1151814092
```
**重要**：这个生成的秘密令牌密钥只会显示一次，因此很重要
您现在复制令牌密钥并将其保存在安全的地方以供以后使用。
秘密令牌密钥将在服务器上安全地进行哈希处理，并且只有该秘密令牌的哈希值
密钥将被保存到数据库中。这样做是为了最大限度地减少安全影响，如果有人得到
未经授权访问数据库，类似于处理密码的方式。

### B. 通过 API 创建令牌 { #b-creating-a-token-via-the-api }

如何使用 API 创建新的个人访问令牌的示例：

```
POST https://play.dhis2.org/dev/api/apiToken
Content-Type: application/json
Authorization: Basic admin district

{}
```
**注意**：记住有效负载中的空 JSON 正文 (`{}`)！

这将返回包含类似于以下内容的令牌的响应：
```json
{
  "httpStatus": "已创建",
  "httpStatusCode": 201,
  "status": "正常",
  "response": {
     "responseType": "ApiTokenCreationResponse",
     "key": "d2pat_5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ1151814092",
     "uid": "jJYrtIVP7qU",
     "klass": "org.hisp.dhis.security.apikey.ApiToken",
     "errorReports": []
  }
}
```

**重要**：令牌密钥在此响应中仅显示一次。
您需要将其复制并保存在安全的地方以供以后使用！

令牌本身由三部分组成：
1. 前缀：(`d2pat_`) 表示这是什么类型的令牌。
2. 随机字节 Base64 编码：(`5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ`)
3. CRC32 校验和：(`1151814092`) 校验和部分用 0 填充，使其始终保持十个字符长。


#### 通过 API 配置您的令牌：{ #configure-your-token-via-the-api }
要更改令牌的任何限制，您可以发出以下 HTTP API 请求。

**注意**：创建令牌后只能修改约束！

```
PUT https://play.dhis2.org/dev/api/apiToken/jJYrtIVP7qU
Content-Type: application/json
Authorization: Basic admin district
```

```json
{
  “版本”：1，
  “类型”：“PERSONAL_ACCESS_TOKEN”，
  “过期”：163465349603200，
  “属性”： [
      {
        "type": "IpAllowedList",
        “allowedIps”：[“192.168.0.1”]
      },
      {
        "type": "方法允许列表",
        “允许的方法”：[“GET”]
      }
  ]
}
```

### 使用您的个人访问令牌{ #using-your-personal-access-token }

要使用新创建的令牌发出请求，请使用授权标头
因此。
授权标头格式为：
```
Authorization: ApiToken [YOUR_SECRET_API_TOKEN_KEY]
```
**例子**：
```
GET https://play.dhis2.org/dev/api/apiToken/jJYrtIVP7qU
Content-Type: application/json
Authorization: ApiToken d2pat_5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ1151814092
```


### 删除您的个人访问令牌{ #deleting-your-personal-access-token }
您可以在创建 PAT 的个人资料页面的 UI 中删除 PAT，
或者通过这样的 API：
```
DELETE https://play.dhis2.org/dev/api/apiToken/jJYrtIVP7qU
Content-Type: application/json
Authorization: ApiToken d2pat_5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ1151814092
```


## OAuth2 { #webapi_oauth2 }

DHIS2支持* OAuth2 *身份验证协议。 OAuth2是开放的
授权标准，允许第三方客户代表DHIS2用户进行连接，并为对Web API的后续请求*bearer token* 。 DHIS2不支持细粒度
OAuth2角色，而是根据用户角色提供应用程序访问权限
DHIS2用户的身份。

您要允许其OAuth 2身份验证的每个客户端都必须
在DHIS2中注册。要添加新的OAuth2客户端，请转到`应用>设置> OAuth2客户端`。
在用户界面中，单击*添加新*，然后输入所需的客户端名称和授权类型。

#### 使用Web API添加客户端 { #adding-a-client-using-the-web-api } 

可以通过 Web API 添加 OAuth2 客户端。例如，我们可以
发送这样的有效载荷：

```json
{
  "name": "OAuth2 Demo Client",
  "cid": "demo",
  "secret": "1e6db50c-0fee-11e5-98d0-3c15c2c6caf6",
  "grantTypes": [
    "password",
    "refresh_token",
    "authorization_code"
  ],
  "redirectUris": [
    "http://www.example.org"
  ]
}
```

可用以下命令发送有效负载：

```bash
SERVER="https://play.dhis2.org/dev"
curl -X POST -H "Content-Type: application/json" -d @client.json
  -u admin:district "$SERVER/api/oAuth2Clients"
```

我们将使用此客户端作为下一个赠款类型示例的基础。

#### 授权类型密码 { #webapi_oauth2_password } 

所有授权类型中最简单的是 *password* 授权类型。这
授权类型类似于基本身份验证，因为它
要求客户端收集用户的用户名和密码。作为
例如，我们可以使用我们的演示服务器：

```bash
SERVER="https://play.dhis2.org/dev"
SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"

curl -X POST -H "Accept: application/json" -u demo:$SECRET "$SERVER/uaa/oauth/token"
  -d grant_type=password -d username=admin -d password=district
```

这将给您类似的响应：

```json
{
  "expires_in": 43175,
  "scope": "ALL",
  "access_token": "07fc551c-806c-41a4-9a8c-10658bd15435",
  "refresh_token": "a4e4de45-4743-481d-9345-2cfe34732fcc",
  "token_type": "bearer"
}
```

现在，我们将专注于 `access_token`，这就是我们
将用作我们的身份验证（承载）令牌。例如，我们将得到
使用我们的令牌的所有数据元素：

```bash
SERVER="https://play.dhis2.org/dev"
curl -H "Authorization: Bearer 07fc551c-806c-41a4-9a8c-10658bd15435" "$SERVER/api/33/dataElements.json"
```

#### 授予类型refresh \ _token { #webapi_refresh_token } 

通常，访问令牌的有效性有限。你可以看看
在上一个示例中响应的 `expires_in` 属性处
了解令牌何时到期。要获得新的`access_token`，您
可以再次往返服务器并使用`refresh_token`
这允许您获得更新的令牌而无需要求
再次使用用户凭据。

```bash
SERVER="https://play.dhis2.org/dev"
SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"
REFRESH_TOKEN="a4e4de45-4743-481d-9345-2cfe34732fcc"

curl -X POST -H "Accept: application/json" -u demo:$SECRET "$SERVER/uaa/oauth/token"
  -d "grant_type=refresh_token" -d "refresh_token=$REFRESH_TOKEN"
```

响应与获得令牌开始时的响应完全相同。

#### 授予类型authorization_code { #webapi_authorization_code } 

如果您不想的话，建议使用授权代码授予类型
在外部存储用户凭据。它允许DHIS2收集
用户名/密码直接来自用户而不是客户端
收集它们，然后代表用户进行身份验证。请成为
注意这种方法使用了客户端的` redirectUris`部分
有效载荷。

第 1 步：使用 Web 浏览器访问以下 URL。如果你有不止一个
重定向 URI，您可能需要添加 `&redirect_uri=http://www.example.org`
到网址：

```bash
SERVER="https://play.dhis2.org/dev"
$SERVER/uaa/oauth/authorize?client_id=demo&response_type=code
```

第 2 步：在用户成功登录并接受您的
客户端访问，它将重定向回您的重定向 uri，如下所示：

    http://www.example.org/?code=XYZ

第 3 步：这一步类似于我们在密码授予类型中所做的，
使用给定的代码，我们现在将要求访问令牌：

```bash
SERVER="https://play.dhis2.org/dev"
SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"

curl -X POST -u demo:$SECRET -H "Accept: application/json" $SERVER/uaa/oauth/token
-d "grant_type=authorization_code" -d "code=XYZ"
```

## 错误和信息消息 { #webapi_error_info_messages } 

Web API 对所有错误/警告和
信息性消息：

```json
{
  "httpStatus": "Forbidden",
  "message": "You don't have the proper permissions to read objects of this type.",
  "httpStatusCode": 403,
  "status": "ERROR"
}
```

这里我们可以从消息中看到用户尝试访问
我无法访问的资源。它使用http状态代码403，
HTTP 状态消息*禁止*和描述性消息。

表：WebMessage 属性

| 名称 | 描述 |
|---|---|
| http状态 | 有关此响应的 HTTP 状态消息，请参阅 RFC 2616（第 10 节）了解更多信息。 |
| http状态码 | 此响应的 HTTP 状态代码，请参阅 RFC 2616（第 10 节）了解更多信息。 |
| 地位 | DHIS2状态，可能的值为*OK* | *WARNING* | *ERROR*，其中`OK`表示一切顺利，`ERROR`表示操作未完成，`WARNING`表示操作部分成功，如果消息包含`response`属性，请在那里查找更多信息。 |
| 信息 | 用户友好的消息，告知操作是否成功。 |
| 开发消息 | 更具技术性、对开发人员友好的消息（当前未使用）。 |
| 回复 | Extension point for future extensions of the `WebMessage` format. |

## 日期和期间格式 { #webapi_date_perid_format } 

在整个 Web API 中，我们指的是日期和期间。日期格式
是：

    年-月-日

例如，如果您想表达 2014 年 3 月 20 日，则必须使用
*2014-03-20*。

下表描述了期间格式（也可在
API 端点`/api/periodTypes`)

表：期间格式

| 间隔 | 格式 | 例 | 描述 |
|---|---|---|---|
| 天 | 年月日 | 20040315 | 2004 年 3 月 15 日 |
| 星期 | yyyyWn | 2004W10 | 2004 年第 10 周 |
| 周周三 | yyyy星期三 | 2015年星期三W5 | 第 5 周从周三开始 |
| 周周四 | yyyyThuWn | 2015年第6周星期四 | 第 6 周，周四开始 |
| 周周六 | yyyySatWn | 2015年星期六W7 | 第 7 周从周六开始 |
| 周周日 | yyyySunWn | 2015年周日W8 | 第 8 周从周日开始 |
| 双周 | yyyyBiWn | 2015BiW1 | 20015 年第 1-2 周 |
| 月 | 年月日 | 200403 | 2004年3月 |
| 双月 | yyyyMMB | 200401B | 2004年1月-2月 |
| 四分之一 | yyyyQn | 2004年第一季度 | 2004年1月-3月 |
| 6个月 | yyyySn | 2004S1 | 2004年1月至6月 |
| 四月六个月 | yyyy四月Sn | 2004年4月S1 | 2004年4月-9月 |
| 年 | yyyy | 2004 | 2004 |
| 财政年度四月 | yyyy四月 | 2004年4月 | 2004年4月-2005年3月 |
| 财政年度七月 | yyyy七月 | 2004年7月 | 2004年7月-2005年6月 |
| 财政年度十月 | 十月 | 2004年10月 | 2004年10月-2005年9月 |


### 相对时期 { #webapi_date_relative_period_values } 


在 API 的某些部分，例如分析资源，您可以
除了固定期间（如上定义）之外，还使用相对期间。
相对期间是相对于当前日期并允许例如
用于创建动态报告。可用的相对期间值是：

    THIS_WEEK, LAST_WEEK, LAST_4_WEEKS, LAST_12_WEEKS, LAST_52_WEEKS,
    THIS_MONTH, LAST_MONTH, THIS_BIMONTH, LAST_BIMONTH, THIS_QUARTER, LAST_QUARTER,
    THIS_SIX_MONTH, LAST_SIX_MONTH, MONTHS_THIS_YEAR, QUARTERS_THIS_YEAR,
    THIS_YEAR, MONTHS_LAST_YEAR, QUARTERS_LAST_YEAR, LAST_YEAR, LAST_5_YEARS, LAST_10_YEARS, LAST_10_FINANCIAL_YEARS, LAST_12_MONTHS, 
    LAST_3_MONTHS, LAST_6_BIMONTHS, LAST_4_QUARTERS, LAST_2_SIXMONTHS, THIS_FINANCIAL_YEAR,
    LAST_FINANCIAL_YEAR, LAST_5_FINANCIAL_YEARS

### 自定义日期周期{ #webapi_date_custom_date_periods }

Analytics `query` resources support extra parameters to express periods.

Default `pe` dimension will fall back to:

- `eventDate` for `/analytics/events/query`
- `enrollmentDate` for `/analytics/enrollments/query`

允许在一个或多个日期字段上添加条件并将它们组合起来。

#### 自定义日期周期的使用{ #usage-of-custom-date-periods }

在支持自定义日期周期的资源中，存在额外的查询参数，这些参数将被组合起来表达时间维度上的条件。

| 自定义日期期间 | 事件查询资源  | 招生查询资源 |
|--------------------|------------------------|---------------------------|
| `事件日期`        | [X]                    | [ ]                       |
| `注册日期`   | [X]                    | [X]                       |
| `预定日期`    | [X]                    | [ ]                       |
| `事件日期`     | [X]                    | [X]                       |
| `lastUpdated`      | [X]                    | [X]                       |

条件可以用以下形式表示：

`分析/事件/查询/...？...&eventDate=2021&...`

可以在同一查询中组合更多时间字段：

`分析/事件/查询/...？...&eventDate=2021&incidentDate=202102&...`

All of these conditions can be combined with `pe` dimension:

`分析/事件/查询/...？...&dimension=pe:TODAY&enrollmentDate=2021&incidentDate=202102&...`

Supported formats are described in "date and period format" above. An extra format is provided to express a range of dates: `yyyyMMdd_yyyyMMdd` and `yyyy-MM-dd_yyyy-MM-dd`.

在下面的示例中，端点将返回计划在 20210101 到 20210104 之间发生的事件：

`分析/事件/查询/...？...&dimension=pe:TODAY&enrollmentDate=2021&incidentDate=202102&scheduledDate=20210101_20210104&...`


## 权威机构{ #authorities }
可以使用以下方式列出系统权限 ID 和名称：

    /api/权威机构

它返回以下格式：
```json
{
  "systemAuthorities": [
    {
      "id": "ALL",
      "name": "ALL"
    },
    {
      "id": "F_ACCEPT_DATA_LOWER_LEVELS",
      "name": "Accept data at lower levels"
    }
  ]
}
```

