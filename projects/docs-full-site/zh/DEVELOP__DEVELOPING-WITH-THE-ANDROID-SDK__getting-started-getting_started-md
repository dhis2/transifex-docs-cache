---
edit_url: "https://github.com/dhis2/dhis2-android-sdk/edit/master/docs/content/developer/getting-started.md" 
---
# 入门  { #getting_started } 

 <!--DHIS2-SECTION-ID:getting_started-->

## 安装 { #installation } 

<!--DHIS2-SECTION-ID:installation-->

在build.gradle中包括依赖项。

```等级
依赖项{
    实现“ org.hisp.dhis：android-core：1.3.0”
    ...
}
```

此外，如果尚无此存储库，则需要将该存储库包含在根gradle文件中：

```等级
所有项目{
    储存库{
        ...
        专家{url'https://jitpack.io'}
    }
}
```

## D2初始化 { #initialization } 

 <!--TODO-->

 <!--DHIS2-SECTION-ID:initialization-->

In order to start using the SDK, the first step is to initialize a `D2` object. The helper class `D2Manager` offers static methods to setup and initialize the `D2` instance. Also, it ensures that `D2` is a singleton across the application.

需要传递给`D2Manager`的最低配置如下： 

```java
D2Configuration configuration = D2Configuration.builder()
    .context(context)
    .build();
```

Using the configuration you can instantiate `D2`.

```java
Single<D2> d2Single = D2Manager.instantiateD2(configuration);
```

完成Single之后，您可以使用以下方法访问D2：

```java
D2 d2 = D2Manager.getD2();
```

如果不使用 RxJava，可以采用阻塞方式实例化 `D2`：

```java
D2 d2 = D2Manager.blockingInstantiateD2(configuration);
```

对象 `D2Configuration` 有许多字段，用于配置 SDK 的行为。

|  属性    |   需要    |   描述 | 默认
|-|-|-|-|
| 语境       | 真正          | 应用环境 | --
| appName       | 假         | 用于创建“用户代理”标题 | 从Android清单
| appVersion    | 假         | 用于创建“用户代理”标题 | 从Android清单
| readTimeoutInSeconds | 假  | 读取HTTP查询超时 | 30秒
| connectTimeoutInSeconds | 假 | HTTP查询的连接超时 | 30秒
| writeTimeoutInSeconds | 假 | 为HTTP查询写超时 | 30秒
| 拦截器  | 假         | OkHttpClient的拦截器 | 没有
| 网络拦截器 | 假   | OkHttpClient的NetworkInterceptors | 没有


