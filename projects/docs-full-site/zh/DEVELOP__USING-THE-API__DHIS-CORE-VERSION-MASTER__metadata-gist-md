---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/master/src/developer/web-api/metadata-gist.md"
revision_date: '2022-05-12'
tags:
- Develop
- DHIS核心 主版
---

# 元数据要点 API { #gist_api }
 <!--DHIS2-SECTION-ID:gist_api-->

元数据 Gist API 是一个用于获取和浏览的 RESTful 只读 JSON API
元数据。此 API 中的项目包含元数据 API 中相同项目的要点。

API 专门设计用于避免：

* 由于包含部分嵌套对象，响应负载较大
  图表。
* 请求的内存处理需要大量资源
  （例如，在内存过滤或对象图遍历中）。
* _n + 1_ 次数据库查询是渲染时对象图遍历的结果
  响应。

## 与元数据 API 的比较 { #gist_vs_metadata_api }
<!--DHIS2-SECTION-ID:gist_vs_metadata_api-->

标准元数据 API 是一个灵活而强大的 API，旨在为任何和
每个用例。
这样做的缺点是并非所有功能和组合都可以扩展
在存在大量项目的情况下保持良好的性能。
特别是包含项目的列表，其中每个项目本身都有一个属性，该属性是
大量复杂对象的集合已被证明是有问题的，因为它们很快
引用整个对象图的很大一部分。

添加 `/gist` API 是为了提供元数据 API，其中良好的扩展性是我们的目标
首要任务。这样做的缺点是有更多明显的限制
哪些功能在技术上是合理的，这意味着并非所有功能
Gist API 存在标准元数据 API。

The Gist API uses a divide and conquer strategy to avoid responses with large
partial object graphs. Instead of including nested objects or lists it provides
a `/gist` endpoint URI where this object or list can be viewed in isolation.

**The `/gist` API refers to nested data using URIs rather than including it.**
This means if a client is interested in this nested information more requests
are required but each of them is kept reasonable small and will scale
well in context of huge number of potential items.

已知差异：

* items 仅包含引用的可识别对象的字段（如果这些字段不包含）
  有自己的端点
* 它从不直接包含可识别的对象集合
* 默认情况下，项目不包括所有可用字段，而是取决于的子集
  关于上下文和参数
* lists cannot be used without pager (therefore there is no `pager` parameter)
* fields with collections are not paged using the `pager`-transformer but through
  特定集合属性的分页 API 端点
* 列表中的项目、集合属性大小或布尔转换器结果
  始终考虑对象共享（所考虑的项目的集合始终是集合
  用户可见）
* Gist 提供 `member(<id>)` 和 `not-member(<id>)` 集合字段转换器
* Gist offers `canRead` and `canWrite` access check filter instead of filtering
  on the `access` property
* Gist 提供使用属性 UID 作为字段和过滤器属性名称，以允许
  根据自定义属性值列出或过滤
* Gist 提供过滤器分组

已知限制：

* 默认情况下仅包含持久化的内容；少数特殊的
  可以显式添加非持久字段（合成字段）；其他
  non-persistent fields might be possible to extract using `from` transformation
* 过滤器只能应用于持久化字段
* 订单只能应用于持久化字段
* 令牌过滤器不可用
* 顺序始终区分大小写
* `pluck` 转换器仅限于文本属性
* 包含简单（不可识别）项目集合的字段并不总是
  是否包含在内取决于它们的存储方式

在可能的情况下，应考虑使用 `/gist` API 是更好的方式
获取元数据信息。


## 端点 { #gist_endpoints }
<!--DHIS2-SECTION-ID:gist_endpoints-->

`/gist` API 有 3 种端点：

* <code>/api/&lt;object-type><b>/gist</b></code>: paged list of all known and visible objects of the type (implicit `auto=S`)
* <code>/api/&lt;object-type&gt;/&lt;object-id&gt;<b>/gist</b></code>: view single object by ID (implicit `auto=L`)
* <code>/api/&lt;object-type&gt;/&lt;object-id&gt;/&lt;field-name&gt;<b>/gist</b></code>: paged list of all known and visible items in the collection of owner object's field (implicit `auto=M`; in case this is a simple field just the field value)

这些端点对应于标准元数据 API 的端点，无需
`/gist` 后缀并与以下共享大多数参数及其选项
那个API。


## 浏览数据{ #gist_browse }
<!--DHIS2-SECTION-ID:gist_browse-->

Since `/gist` API avoids deeply nested data structures in the response the
details of referenced complex objects or list of objects is instead provided
in form of a URI to the gist endpoint that only returns the complex object or
list of objects. These URIs are provided by the `apiEndpoints` field of an item
which is automatically added to an item when such references exist.
The item property itself might contain a transformation result on the object
or collection such as its size, emptiness, non-emptiness, id(s) or plucked 
property such as its name.

To manually browse data it can be handy to use the `absoluteUrls=true` parameter.
Linkage between parts of the gist can now be followed directly in browsers that
render JSON responses.


## 参数 { #gist_parameters }
<!--DHIS2-SECTION-ID:gist_parameters-->

`/gist` API 的所有端点都接受相同的参数集。
在端点上下文中没有意义的参数及其选项是
被忽略。


### 总览 { #overview } 
参数按字母顺序排列：

| 范围      | 选项               |  默认     | 描述          |
| -------------- | --------------------- | ------------ | ---------------------|
| `绝对 URL` | `true` or `false`     | `假`      | `true` 在链接中使用相对路径，`false` 在链接中使用绝对 URL |
| `自动`         | `XS`, `S`, `M`, `L`, `XL` | （取决于上下文） | extent of fields selected by `*` field selector |
| `字段`       | （取决于端点） | `*`          | 要包含的字段或预设的逗号分隔列表 |
| `过滤器`       | `<field>:<operator>` 或 `<field>:<operator>:<value>` |   | 逗号分隔的查询字段过滤器列表（可以多次使用） |
| `headless`     | `true` or `false`     | `假`      | `true` skip wrapping result in a pager (ignores `total`), `false` use a pager wrapper object around the result list |
| `inverse`      | `true` or `false`     | `假`      | `true` 返回列表中**不**的项目，`false` 返回列表中的项目 |
| `语言环境`       |                       | （用户帐户配置的语言） | 翻译语言覆盖 |
| `订单`        | `<field>` 或 `<field>:asc` 或 `<field>:desc ` | `:asc` | 逗号分隔的查询顺序字段列表（可以多次使用） |
| `页面`         | 1-n                   | 1            | 页码 |
| `页面大小`     | 1-1000                | 50           | 页面上的项目数 |
| `根连接点` | `与`或`或`         | `AND`        | `filter` 的逻辑组合，`AND`= 全部匹配，`OR`= 至少一个匹配 |
| `总计`        | `true` or `false`     | `假`      | `true` 将匹配总数添加到寻呼机，`false` 跳过匹配总数的计数 |
| `翻译`    | `true` or `false`     | `真实`       | `true` translate all translatable properties, `false` skip translation of translatable properties (no effect on synthetic display names) |


### `absoluteUrls` 参数 { #gist_parameters_absoluteUrls }
<!--DHIS2-SECTION-ID:gist_parameters_absoluteUrls-->

By default, URIs in `apiEndpoints`, `href` and the `pager` `prev` and `next` 
members are relative, starting with `/<object-type>/` path.

可以使用 `absoluteUrls` 参数将 URI 更改为绝对 URL。

For example, `/api/users/rWLrZL8rP3K/gist?fields=id,href` returns:

```json
{
  "id": "rWLrZL8rP3K",
  "href": "/users/rWLrZL8rP3K/gist"
}
```

而 `/api/users/rWLrZL8rP3K/gist?fields=id,href&absoluteUrls=true`
返回：

```json
{
  "id": "rWLrZL8rP3K",
  "href": "http://localhost:8080/api/users/rWLrZL8rP3K/gist?absoluteUrls=true"
}
```

As the example shows the `absoluteUrls` parameter is also forwarded or carried
over to the included URLs so allowing to browse the responses by following the 
provided URLs.


### `auto` 参数 { #the-auto-parameter }
每个端点隐式地设置与匹配的字段范围的默认值
`*` / `:all` 字段选择器：

* `/api/<object-type>/gist`：暗示 `auto=S`
* `/api/<object-type>/<object-id>/gist`：暗示 `auto=L`
* `/api/<object-type>/<object-id>/<field-name>/gist`：暗示`自动=M`

`auto` 参数用于手动覆盖默认值以创建列表项
包括或多或少的字段。此设置再次充当默认值，可以
使用显式转换在每个字段的基础上进一步覆盖。

`auto` 的可能选项有（“T 恤尺寸”）：

* `XS`：仅包含 ID 和文本属性
* `S`：排除复杂（对象）属性，集合仅链接（不计数）
* `M`：复杂的包含作为参考 URL，引用和集合作为计数和参考 URL
* `L`: like `M` but references and collections included as IDs (OBS! unbound in size)
* `XL`：类似于 `L`，但引用和集合包含为 ID 对象：`{ "id": <id> }`

For example, `/api/users/gist` would list items with fields `id`, `surname`, 
`firstName`, `phoneNumber`, `email`, `lastUpdated` whereas 
`/api/users/gist?auto=XS` only lists `id`, `surname`,
`firstName`, `phoneNumber`, `email`. Using `/api/users/gist?auto=L` would also
include `organisationUnits`, `dataViewOrganisationUnits`, 
`teiSearchOrganisationUnits` and `userGroups` each with the list of IDs of the
members in the lists/sets.


### `fields` 参数 { #gist_parameters_fields }
<!--DHIS2-SECTION-ID:gist_parameters_fields-->

指定每个列表项要包含的字段列表。

Fields are included in the result JSON objects for an item in the provided order.
A preset in the list of fields is expanded to the fields it contains at the 
position in the `fields` list it appears.
Fields within the preset are ordered from simple to complex.

If no `fields` parameter is provided `fields=*` is assumed.
Note that the fields of the `*` preset also depend on the `auto` parameter

To remove a field use either `!<name>` or `-<name>` in the list of fields.
For example to remove the userGroups from a user, use:

    /api/users/gist?fields=*,!userGroups

同样的原理也可以用于指定用于
场地。例如，要包含用户的用户组的 ID，请使用：

    /api/users/gist?fields=*,userGroups::ids

The `fields` parameter does allow listing fields of nested objects. 
For example to add `userCredentials` with `id` and `name` of a user use:

    /api/users/gist?fields=*,userCredentials[id,用户名]

这将创建以下形式的项目：

```json
{
  ...
  "userCredentials": {
    "id": "Z9oOHPi3FHB",
    "username": "guest"
  }
}
```

当包含集合的嵌套字段时，嵌套字段必须是文本
财产。

例如，通过以下方式包含用户的`userGroups`的所有`名称`：

    /api/users/gist?fields=*,userGroups[名称]

This lists the `userGroups` as:

```json
{
  "userGroups": {
    "name": [
      "_PROGRAM_Inpatient program",
      "_PROGRAM_TB program",
      "_DATASET_Superuser",
      "_PROGRAM_Superuser",
      "_DATASET_Data entry clerk",
      "_DATASET_M and E Officer"
    ]
  }
}
```
上面的功能与以下内容相同：

    /api/users/gist?fields=*,userGroups::pluck(name)~rename(userGroups.name)

When requesting a single field, like `/api/users/gist?fields=surname` the
response is a (still paged) list of simple values:

```json
{
  "pager": {
    "page": 1,
    "pageSize": 50
  },
  "users": [
    "Kamara",
    "Wakiki",
    "Nana",
    "Malai",
    ...
  ]
}
```

当请求具有简单的特定所有者对象的单个字段时
（非收藏）价值，例如
`/api/users/rWLrZL8rP3K/gist?fields=surname` 响应仅包含纯文本
JSON 值：

```json
"Wakiki"
```

有关字段预设的更多详细信息，请参阅[字段](#gist_fields) 部分。

### `filter` 参数 { #gist_parameters_filter }
<!--DHIS2-SECTION-ID:gist_parameters_filter-->

要过滤返回的项目列表，请添加一个或多个`过滤器`参数。

Multiple filters can either be specified as comma-separated list of a single 
`filter` parameter or as multiple `filter` parameters each with a single filter.

有两种类型的过滤器：

* 一元：`<field>：<operator>`
* 二进制：`<field>:<operator>:<value>`

字段可以是：

* 列出的项目类型的持久字段
* 直接引用对象的持久字段（1:1 关系）
* 属性的 UID

可用的一元运算符有：

| 一元运算符 | 描述                                                 |
| -------- | ----------------------------------------------------------------- |
| `空`   | 字段为_null_（未定义）                                       |
| `!null`  | 字段_not null_（已定义）                                     |
| `empty`  | 字段是_空_集合或字符串                           |
| `！空` | 字段是_非空_集合或字符串                       |

可用的二元运算符有：

| 二元运算符   | 描述                                              |
| ----------------- | -------------------------------------------------------- |
| `eq`              | 字段_等于_值                                     |
| `ieq`             | 字段_等于_值（不区分大小写）                  |
| `!eq`、`neq`、`ne`| field is _not equal_ value                               |
| `lt`              | 字段_小于_值                               |
| `le`、`lte`       | 字段_小于或等于_值                   |
| `gt`              | 字段_大于_值                            |
| `ge`, `gte`       | 字段_大于或等于_值                |
| `在`              | field is a collection and value is an item _contained in_ the collection |
| `!in`             | 字段是一个集合，值是一个_不包含在_集合中的项目 |

If the `<value>` of an `in` or `!in` filter is a list it is given in the form
`[value1,value2,...]`, for example: `userGroups:in:[fbfJHSPpUQD,cYeuwXTCPkU]`.

应用于集合字段的任何 `>`、`>=`、`<`、`<=`、`==` 或 `!=` 比较
带有数值的会将集合的大小与该值进行比较，例如
例如：`userGroups:gt:0`。

应用于文本字段的任何 `>`、`>=`、`<`、`<=`、`==` 或 `!=` 比较
带有整数值会将文本长度与该值进行比较，例如
例如：`name:eq:4`（名称长度为 4）。


可用的二进制模式匹配运算符有：

| 二元运算符                   | 描述                              |
| --------------------------------- | ---------------------------------------- |
| `like`, `ilike`                   | 字段_contains_`<value>`或字段_matches_模式`<value>`（当值中包含通配符`*`或`?`时） |
| `！喜欢`，`！喜欢`                 | 字段_不包含_`<value>`或字段_不匹配_模式`<value>`（当通配符`*`或`?`值） |
| `$like`、`$ilike`、`startsWith`   | 字段 _starts with_ `<value>`            |
| `!$like`、`!$ilike`、`!startsWith`| field does _not start with_ `<value>`    |
| `like$`、`ilike$`、`endsWith`     | 字段_结尾为_`<value>`              |
| `!like$`、`!ilike$`、`!endsWith`  | field does _not end with_ `<value>`      |

The `like` and `!like` operators can be used by either providing a search term
in which case a match is any value where the term occurs anywhere, or they can
be used by providing the search pattern using `*` as _any number of characters_
and `?` as _any single character_.

All pattern matching operators named `like` are case-sensitive. All others 
are case-insensitive. 

请注意，属性值过滤器使用基于文本的比较，这意味着
支持所有文本过滤器。

例如，仅列出第二级组织使用

    /api/organizationUnits/gist?filter=level:eq:2

Similarly, when listing the `children` of a particular organisation unit the
collection can be filtered. To only list those children that are connected to
a program one would use:

    /api/organizationUnits/rZxk3S0qN63/children/gist?filter=程序:gt:0

用于基于访问（共享）的过滤的二元运算符：

| 二元运算符   | 描述                                              |
| ----------------- | -------------------------------------------------------- |
| `可以阅读`         | Has user `<value>` metadata read permission to the object |
| `可以写`        | Has user `<value>` metadata write permission to the object |
| `可以读取数据`     | Has user `<value>` data read permission to the object    |
| `可以数据写入`    | Has user `<value>` data write permission to the object   |
| `可以访问`       | Has user `<value0>` permission `<value1>` to the object  |

When the user ID `<value>` is omitted the check is performed for the currently
logged-in user. Similarly, if `<value0>` is ommitted for `canAccess` filter
the check is performed for the currently logged-in user.

When applied to a simple value property, here `code`, the filter restricts the response to
those data elements (owner object) the user can read/write:

    /api/dataElements/gist?filter=code:canWrite:OYLGMiazHtW

When applied to a reference property, here `categoryCombo`, the filter restricts the response 
to those data elements having a category combo that the user can read/write:

    /api/dataElements/gist?filter=categoryCombo:canWrite:OYLGMiazHtW

When applied to a reference collection property, here `dataElementGroups`, the
filter restricts the response to those data elements where a data element group exists in the
collection property and which the user can read/write:

    /api/dataElements/gist?filter=dataElementGroups:canWrite:OYLGMiazHtW

The `canAccess` expects two arguments, 1st is user ID, 2nd the access pattern,
for example to check metadata read and write access the pattern is `rw%`:

    /api/dataElements/gist?filter=code:canAccess:[OYLGMiazHtW,rw%]


此外，过滤器可以分组，以允许将选定的过滤器与
当通用过滤器组合器为逻辑 AND 时为逻辑 OR，反之亦然
当通用组合器为逻辑或时，为逻辑与。

对于组，过滤器模式扩展如下：

* 一元：`<group>：<field>：<operator>`
* 二进制：`<group>:<field>:<operator>:<value>`

The group is an arbitrary number between `0` and `9` (when omitted `0` is 
assumed). 

The behaviour is best explained with a small example for an imaginary object
type with an `age` and `name` property.

    ?filter=1:age:eq:50&filter=2:name:eq:foo&filter=2:name:eq:bar

The above filter has two groups `1` and `2`, and the `2` group has 2 members.
This is equivalent to the SQL (note the `and` and `or` as well as the 
grouping braces):

    e.age = 50 和 (e.name = 'foo' 或 e.name = 'bar')

现在，如果将相同的`过滤器`与`rootJunction=OR`结合使用

    ?filter=1:age:eq:50&filter=2:name:eq:foo&filter=2:name:eq:bar&rootJunction=OR

其效果相当于以下 SQL：

    e.age = 50 或 (e.name = 'foo' 和 e.name = 'bar')


### `headless` 参数 { #gist_parameters_headless }
<!--DHIS2-SECTION-ID:gist_parameters_headless-->

默认情况下返回列表的端点用包含以下内容的信封包装项目
`pager` 和列表，根据列出的对象类型命名。

例如 `/api/organizationUnits/gist` 返回：

```json
{
  "pager": {
    "page": 1,
    "pageSize": 50,
    "nextPage": "/organisationUnits/gist?page=2"
  },
  "organisationUnits": [
    ...
  ]
}
```

With `headless=true` the response to `/api/organisationUnits/gist?headless=true` 
is just the `[...]` list part in above example.


### `inverse` 参数 { #the-inverse-parameter }
The `inverse` can be used in context of a collection field gist of the form 
`/api/<object-type>/<object-id>/<field-name>/gist` to not list all items that
are contained in the member collection but all items that are **not** contained
in the member collection.

例如，虽然

    /api/organizationUnits/rZxk3S0qN63/children/gist

将列出作为`rZxk3S0qN63`子级的所有组织单位

    /api/organizationUnits/rZxk3S0qN63/children/gist?inverse=true

would list all organisation units that are not children of `rZxk3S0qN63`. 
This would e.g. be used to compose a list of all units that can be made a child 
of a particular unit.

过滤器和订单通常适用，这意味着它们过滤或排序项目
不包含在成员集合中。


### `locale` 参数 { #gist_parameters_locale }
<!--DHIS2-SECTION-ID:gist_parameters_locale-->
`locale` 参数通常用于测试临时切换
显示名称的翻译语言。

如果未指定，则翻译语言为用户中配置的语言
帐号设定。

例子：

    /api/organizationUnits/gist?locale=en
    /api/organizationUnits/gist?locale=en_GB

### `order` 参数 { #gist_parameters_order }
<!--DHIS2-SECTION-ID:gist_parameters_order-->

为了对项目列表进行排序，可以给出一个或多个顺序表达式。

订单表达式要么只是持久化字段的字段名称，要么是一个字段
名称后跟 `:asc` （升序 - 默认）或 `:desc`
（降序排列）。

例如，要按名称字母顺序对组织单位进行排序，请使用：

    /api/organizationUnits/gist?order=名称

逆字母顺序将使用：

    /api/organizationUnits/gist?order=name:desc

要首先按级别排序组织单位，然后按名称排序，请使用：

    /api/organizationUnits/gist?order=级别,名称

这将从级别 1 的根开始。要从叶单元开始，请使用：

    /api/organizationUnits/gist?order=level:desc,名称

如果未指定顺序，结果列表将具有基于的稳定顺序
内部数据组织。


### `page` 参数 { #gist_parameters_page }
<!--DHIS2-SECTION-ID:gist_parameters_page-->

指在分页列表中查看的页面，以`1`开头的第一页。

如果不存在`page`参数，则等于`page=1`。

The `page` is always in relation to the `pageSize`.
If a `page` is given beyond the number of existing matches an empty item list
is returned.


### `pageSize` 参数 { #gist_parameters_pageSize }
<!--DHIS2-SECTION-ID:gist_parameters_pageSize-->

指的是`页面`上的项目数。最多 1000 个项目。

如果没有`pageSize`参数，则等于`pageSize=50`。


### `rootJunction` 参数 { #gist_parameters_rootJunction }
<!--DHIS2-SECTION-ID:gist_parameters_rootJunction-->

`rootJunction` 参数可用于显式设置逻辑结点
在过滤器之间使用。可能的有：

* `AND`: all filters have to match an entry for it to be included in the results
* `OR`: any of the filters matches an entry for it to be included in the results

默认为`与`。


### `total` 参数 { #gist_parameters_total }
<!--DHIS2-SECTION-ID:gist_parameters_total-->

By default, a gist query will **not** count the total number of matches should 
those exceed the `pageSize` limit. Instead, we opt-in to the additional costs
the total count implicates.

When not counting the total matches (`total=false`) the response `pager` will
assume that there is a `next` page in case `pageSize` items were found. This
could however turn out to be false when browsing to the page. Also, the `total`
field stating the number of total matches is not included in the `pager`.

For example, `/api/organisationUnits/gist` returns a `pager`:

```json
{
  "pager": {
    "page": 1,
    "pageSize": 50,
    "nextPage": "/organisationUnits/gist?page=2"
  }
}
```

When counting the total matches (`total=true`) the response `pager` will 
contain the `total` field with the actual number of total matches at the cost
of an additional database operation.

The response to `/api/organisationUnits/gist?total=true` now returns this `pager`:

```json
{
  "pager": {
    "page": 1,
    "pageSize": 50,
    "total": 1332,
    "nextPage": "/organisationUnits/gist?total=true&page=2",
    "pageCount": 27
  }
}
```


### `translate` 参数 { #gist_parameters_translate }
<!--DHIS2-SECTION-ID:gist_parameters_translate-->

像`name`或`shortName`这样的字段可以被翻译（国际化）。

默认情况下，任何具有翻译的可翻译字段都会返回翻译后的结果
假设请求要点的用户配置了界面语言。

要返回普通的非翻译字段，请使用 `translate=false`。

For example, `/api/organisationUnits/gist` returns items like this:

```json
{
  "name": "A translated name",
  ...
}
```

而 `/api/organizationUnits/gist?translate=false` 将返回如下项目：

```json
{
  "name"
  "Plain field name",
  ...
}
```

Note that synthetic fields `displayName` and `displayShortName` are always
returning the translated value independent of the `translate` parameter.


## 字段 { #gist_fields }
<!--DHIS2-SECTION-ID:gist_fields-->

The fields included by default (without `fields` parameter) correspond to 
`fields=*`. 
This means the list of fields shown depends on object type, endpoint context as 
well as the `auto` parameter.

Note that the `/gist` API always excludes certain fields that usually are of no 
interest to clients, like for example the `translations` or `sharing` fields. 
These can be added explicitly.

When not explicitly provided by name in the `fields` parameters the list of 
fields is computed from a preset.
A preset can be used in the list of fields like a field name. 
It expands to zero, one or many fields depending on the object type, used 
endpoint and selector.


### 字段预设 { #field-presets }

* `*` / `:all`：默认字段取决于上下文和 `auto` 参数
* `:identific`：`IdentifyingObject` 接口的所有持久化字段
* `:owner`：列出的类型是所有者的所有持久字段
* `:nameable`：`NameableObject` 接口的所有持久字段
* `:persisted`：字面上所有持久化字段


### 场变压器 { #field-transformers }
A transformer or transformation can be applied to a field by appending 
any of the indicators `::`, `~` or `@` followed by the transformer expression.

可用的变压器表达式有：

| 变压器        | JSON 结果类型    | 描述                       |
| ------------------ | ------------------- | --------------------------------- |
| `重命名(<name>)`   | --                   | renames the field in the response to `<name>` |
| `尺寸`             | `数字`            | 集合字段中的项目数 |
| `是空的`          | `boolean`           | 集合字段为空   |
| `不为空`       | `boolean`           | 集合字段非空 |
| `id`              | `字符串` 或 `[字符串]` | 对象 ID 或集合项 ID |
| `id-对象`       | `[{ "id": <id> }]`  | 作为对象的集合项的 ID |
| `成员(<id>)`     | `boolean`           | 具有`<id>`的成员用于集合字段 |
| `not-member(<id>)` | `boolean`           | 集合字段中没有具有`<id>`的成员 |
| `pluck(<field>)`   | `字符串` 或 `[字符串]` | 提取对象或每个集合项的单个文本属性 |
| `来自(<field>,...)`| 取决于咖啡豆类型 | 从一个或多个持久字段中提取非持久字段 |

A field can receive both the `rename` transformer and one of the other 
transformers, for example:

    /api/organizationUnits/gist?fields=*,children::size~rename(child-count)

The returned items now no longer have a `children` member but a `child-count`
member instead. Note that `rename` also affects the member name of the URI
reference given in `apiEndpoints`.

The `from` transformation can be used with one or more persistent fields as
parameter. These will be loaded from the database, set in an instance of the 
listed element object before the non-persistent property transformed with 
`from` is extracted from that instance by calling the getter. This allows to 
extract derived fields while using the same logic that is used in usual metadata API.

For example, a user's (non-persistent property) `name` is composed of the 
persistent property `firstName` and `surname`. It can be fetched like this:

    /api/users/gist?fields=id,name~from(名字,姓氏)

Since a user's name is such a common case an auto-detection was added so that in
this special case the `from` transformation is added automatically to `name`.
We are allowed to just use the following which internally adds the `from` 
transformation:

    /api/users/gist?fields=id,名称

While this makes non-persistent properties accessible in general these always 
have to be included in the `fields` explicitly. For a user this could be 
done using the following:

    /api/users/gist?fields=*,名称


## 合成字段{ #gist_syntheticFields }
<!--DHIS2-SECTION-ID:gist_syntheticFields-->

The `/gist` API is tightly coupled to properties that exist the database.
This means properties that aren't stored in the database usually aren't 
available.
The exception to this are the "synthetic" properties which are dynamically 
computed on the basis of one or more database stored properties.

综合属性可用于持久化的所有端点
存在计算合成属性所需的属性。

Except for the `apiEndpoints` property which is automatically added when needed 
all other synthetic properties are not included by default and have to be 
requested explicitly in the list of `fields`.


### 总览 { #overview } 
按字母顺序排列的合成字段：

| 领域              | 描述                                             |
| ------------------ | ------------------------------------------------------- |
| `apiEndpoints`     | 包含浏览嵌套复杂对象或集合的链接 |
| `href`             | 链接到列表项本身（单个项目视图）         |
| `显示名称`      | 已翻译的`名称`（始终已翻译）                   |
| `显示短名称` | translated `shortName` (always translated)              |
| `访问`           | 当前用户读/写/修改条目的能力摘要 |


### `href` 字段 { #gist_syntheticFields_href }
<!--DHIS2-SECTION-ID:gist_syntheticFields_href-->

`/gist` 响应中的每个项目都可以链接到自身。该链接在
`href` 属性。

要添加 `href` 字段，请使用（例如）：

    /api/<object-type>/gist?fields=*,href

### `displayName` 和 `displayShortName` 字段 { #gist_syntheticFields_displayName }
<!--DHIS2-SECTION-ID:gist_syntheticFields_displayName-->

By definition the `displayName` is the translated `name` and the 
`displayShortName` is the translated `shortName`. 

要添加 `displayName` 或 `displayShortName` 将其添加到列表中（例如）：

    /api/<object-type>/gist?fields=*,displayName
    /api/<object-type>/gist?fields=*,displayShortName

Note that by default all translatable properties like `name` and `shortName` 
would also be translated. When `translate=false` is used to disable this 
`displayName` and `displayShortName` stay translated.


### `apiEndpoints` 字段 { #gist_syntheticFields_apiEndpoints }
<!--DHIS2-SECTION-ID:gist_syntheticFields_apiEndpoints-->

This property provides the links to further browse complex objects or list of 
items that are included in the `/gist` response in form of a transformed simple 
value like an item count.

The `apiEndpoints` object will have a member of the same name for every member 
in the item that was transformed to a simple value.

例如，

    /api/users/gist?fields=id,userGroups::size,organizationUnits::size

返回以下形式的项目：

```json
{
  "id": "rWLrZL8rP3K",
  "userGroups": 0,
  "organisationUnits": 1,
  "apiEndpoints": {
    "organisationUnits": "/users/rWLrZL8rP3K/organisationUnits/gist",
    "userGroups": "/users/rWLrZL8rP3K/userGroups/gist"
  }
}
```

The list of `userGroups` and `organisationUnits` are included as their `size`. 
Each has a corresponding member in `apiEndpoints` with the path to browse the 
list.

The paths can be changed to URLs by using the `absoluteUrls` parameter. 

    /api/users/gist?fields=id,userGroups::size,organizationUnits::size&absoluteUrls=true

返回以下形式的项目：

```json
{
  "id": "rWLrZL8rP3K",
  "userGroups": 0,
  "organisationUnits": 1,
  "apiEndpoints": {
    "organisationUnits": "http://{host}/api/users/rWLrZL8rP3K/organisationUnits/gist?absoluteUrls=true",
    "userGroups": "http://{host}/api/users/rWLrZL8rP3K/userGroups/gist?absoluteUrls=true"
  }
}
```

### `access` 字段 { #the-access-field }
The `access` summary is based on the `sharing` and the current user.
This means it is only applicable for objects that have a `sharing` property.

For example, when listing data elements with `access` field

    /api/dataElements/gist?fields=*,访问

返回的数据元素项包含一个`访问`成员，如下所示：

```json
"access": {
  "manage": false,
  "externalize": false,
  "write": false,
  "read": true,
  "update": false,
  "delete": false
}
```

### 属性作为字段 { #gist_attributeFields }
DHIS2 allows creating and adding custom attributes to metadata objects.
Their values are contained in the `attributeValues` property of a metadata 
object in form of a map with the attribute UID as the map's key.

直接列出此映射中的一个或多个特定属性值，就好像它们一样
属性 UID 是元数据对象的常用字段，可以像它一样使用
是一个常见领域的名称。

For example, to include the value of the attribute with UID `Y1LUDU8sWBR` as 
the property `unit-of-measure` in the list use:

    /api/dataElements/gist?fields=id,名称,Y1LUDU8sWBR::重命名（测量单位）

这会产生以下形式的列表项：
```json
{
  "id": "qrur9Dvnyt5",
  "name": "Age in years",
  "unit-of-measure": "years"
}
```

By default, the values are fetched as JSON and extracted from the map of 
attribute values. This means the listing will contain the proper JSON type for
the type of attribute value. This comes at the overhead of fetching all 
attribute values. To single out the value within the database the `PLUCK` 
transformation can be used.

    /api/dataElements/gist?fields=id,name,Y1LUDU8sWBR::rename(测量单位)~pluck

结果看起来是一样的，但现在该值被提取为文本
数据库将任何 JSON 值转换为属性输出中的字符串。

## 例子 { #gist_examples } 
<!--DHIS2-SECTION-ID:gist_examples-->
一些示例从简单的列表开始，一直到非常具体的用例。

It is preferable to always supply an explicit list of `fields` so this section 
will do so. 

列出具有 ID 和名称的组织单位：

    /api/organizationUnits/gist?fields=id,名称

列出组织单位及其 ID、名称和总数：

    /api/organizationUnits/gist?fields=id,name&total=true

列出用户的 id 和用户名：

    /api/users/gist?fields=id,userCredentials.用户名

列出用户的 ID、用户名和上次登录日期：

    /api/users/gist?fields=id,userCredentials[用户名,lastLogin]

仅列出第二级组织单位及其 ID、名称和级别：

    /api/organizationUnits/gist?fields=id,名称,level&filter=level:eq:2

仅列出拥有 1 个以上子级（其 ID、姓名和名称）的组织单位
儿童人数：

    /api/organizationUnits/gist?fields=id,名称,children::size&filter=children:gt:1

仅列出还不是其他单位子级的组织单位
`zFDYIgyGmXG`:

    /api/organizationUnits/zFDYIgyGmXG/children/gist?fields=id,name&inverse=true

列出用户并标记他们是否是特定用户组的成员
`NTC8GjJ7p8P` 并在响应中将该字段命名为 `is-member`：

    /api/users/gist?fields=id,userCredentials.username,userGroups::member(NTC8GjJ7p8P)~rename(is-member)

在 10 个项目的页面中列出所有用户的链接：

    /api/users/gist?fields=href&absoluteUrls&pageSize=10

