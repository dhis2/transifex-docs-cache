---
edit_url: "https://github.com/dhis2/dhis2-android-sdk/blob/master/docs/content/developer/settings.md"
revision_date: '2024-05-06'
tags:
- Develop
---

# 设置{ #android_sdk_settings }

每次元数据同步都会下载设置。有多种设置：

```java
d2.settingModule()
```

- **System settings**: system-wide properties such as `flag` or `style`.
- **用户设置**：用户特定的设置，例如`keyDbLocale`或`keyUiLocale`。
- **设置应用**：这些设置可提供对应用行为的更多控制。下一节将对此进行更多介绍。



## 设定应用程式 { #android_sdk_settings_app }

DHIS2实例可能包含一个名为“ Android设置”的Web应用程序，该应用程序可以远程控制应用程序中的某些参数。此应用程序的安装和配置是可选的。

该SDK在每次元数据同步时都会下载此配置并将其保存在数据库中。其中一些参数由 SDK 自动使用（它们在下面以粗体标记），尽管其中大多数参数可能会被应用程序覆盖。

### 常规设置 { #android_sdk_general_settings }

``java
d2.settingModule().generalSetting()
````

它提供了有关应用程序设置的附加信息：

- **加密数据库**：是否加密本地数据库。
- **保留值**：要保留的属性值的数量。它可能会被应用程序覆盖。
- **Bypass DHIS2 version**: if true, the SDK will try to connect to the instance no matter the DHIS2 version installed.
- Mobile configuration: gateway number, result sender number. They must be consumed by the application and used to configure the SMS module in the SDK.
- Matomo configuration: if you have your own Matomo instance, you can expose this information to the app in order to configure its Matomo client.
- AllowScreenCapture: parameter to determine if the application should allow screen capture or not.
- MessageOfTheDay: a message to show to the users.
- ExperimentalFeatures: list of experimental features enabled.

### 同步设定 { #android_sdk_synchronization_settings }

```java
d2.settingModule().synchronizationSettings()
```

If offers additional parameters to control metadata/data synchronization.

- MetadataSync, DataSync: these two parameters define the periodicity of metadata/data sync. They must be used by the app to create scheduled jobs.
- **TrackerImporterVersion:** version of the tracker importer: *V1* refers to the legacy tracker importer (`/api/trackedEntityInstances` endpoint); *V2* refers to the importer introduced in 2.37 (`/api/tracker` endpoint).
- **ProgramSettings:** this section controls the program data synchronization parameters. It has a section to define global or default parameters to be used in the synchronization of all programs. Additionally it allows to set specific settings for particular programs. All these parameters are consumed by the SDK and used in the synchronization process.
- **DataSetsSettings:** this section controls the aggregated data synchronization parameters. It has a section to define global or default parameters to be used in the synchronization of all dataSets. Additionally it allows to set specific setting for particular dataSets. All these parameters are consumed by the SDK and used in the synchronization process.

### 外观设置 { #android_sdk_appearance_settings }

```java
d2.settingModule().appearanceSettings()
```

These settings give control over the appearance of the data entry form. 

- FilterSorting: it defines the filters that must be enabled in the different app menus.
- ProgramConfiguration: it defines two properties for programs.
    - CompletionSpinner: show/hide the completion spinner.
    - OptionalSearch: it defines if searching is mandatory or not before creating data.
    - DisableReferrals: whether referrals must be enabled or not for this program.
    - DisableCollapsibleSections: whether the sections must be collapsible or not for this program.
    - ItemHeader: it defines the element (programIndicator) to be used to generate a header for the TEI. This property is automatically consumed by the SDK when using the `TrackedEntitySearchCollectionRepository`.

Most of the settings refer to visual components so they are usually consumed by the app.

### Analytic settings { #android_sdk_analytic_settings }

```java
d2.settingModule().analyticsSetting()

d2.settingModule().analyticsSetting().teis()

d2.settingModule().analyticsSetting().dhisVisualizations()
```

Analytics settings define the analytic elements (charts, tables,...) that must be displayed to the user.

- **teis collection:** they define analytic elements referred to the context of a single TEI. These elements are intended to be displayed in a TEI dashboard.
- **dhisVisualizations:** they are organized into three sections (home, program, dataSet) and each section is composed of a list of groups. Each group contains a list of visualizations. About the sections:
    - *home:* those visualizations that must be displayed in the *home* screen.
    - *program:* map of objects with the key being a programId. These visualizations are intended to be displayed in the context of a particular program.
    - *dataSet:* map of objects with the key being a dataSetId. These visualizations are intended to be displayed in the context of a particular dataSet.


These settings refer to visual components so they must be consumed by the app.

