---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/master/src/sysadmin/installation.md"
revision_date: '2024-10-21'
tags:
- DHIS核心 主版
- Manage
---

# 安装 { #installation } 

安装章节提供了有关如何在以下位置安装DHIS2的信息
各种环境，包括在线中央服务器，离线本地
网络，独立应用程序和称为DHIS2的自包含程序包
生活。

## 介绍 { #install_introduction } 

DHIS2 可以在所有存在 Java JDK 的平台上运行，其中包括最流行的操作
Windows、Linux 和 Mac 等系统。 DHIS2 在 PostgreSQL 上运行
数据库系统。 DHIS2 被打包为标准 Java Web Archive
（WAR 文件），因此可以在任何 Servlet 容器（例如 Tomcat 和
码头。

DHIS2 团队推荐 Ubuntu 18.04 LTS 操作系统、PostgreSQL
数据库系统和Tomcat Servlet容器为首选
服务器安装环境。

本章提供了设置上述技术堆栈的指南。
但是，应将其作为起步和运行的指南，而不是
作为上述环境的详尽文档。我们提到
到官方的Ubuntu，PostgreSQL和Tomcat文档进行深入了解
阅读。

`dhis2-tools` Ubuntu 软件包可以自动执行中描述的许多任务
以下指南推荐给大多数用户，尤其是那些
不熟悉命令行或服务器管理。它
本指南的单独章节中对此进行了详细描述。

## 服务器规格 { #install_server_specifications } 

DHIS2是数据库密集型应用程序，需要您的服务器
具有适当数量的RAM，CPU核心数量和快速磁盘。
这些建议应被视为经验法则，而不是
确切的措施。 DHIS2在RAM的数量和数量上线性扩展
CPU内核，因此您负担得起的费用越多，应用程序的性能就会越好。

- * RAM：*小型实例至少2 GB，中型实例至少12 GB，大型实例至少64 GB。
- *CPU 核心数：* 小型实例 4 个 CPU 核心，中型实例 8 个 CPU 核心，大型实例 16 个或更多 CPU 核心。
- *磁盘：*建议将SSD用作存储设备。最低要求
  读取速度为150 Mb / s，200 Mb / s好，350 Mb / s或更高
  理想的。建议至少 100 GB 存储空间，但是
  将完全取决于其中包含的数据量
  数据值表。 Analytics（分析）表格需要大量
  储存空间。提前计划并确保您的服务器可以升级
  根据需要具有更多的磁盘空间。

## 软件需求 { #install_software_requirements } 

更高版本的DHIS2需要以下软件版本才能运行。

- Java JDK 或 JRE 版本为 17 的操作系统。建议使用 Linux。
- Java JDK。推荐使用OpenJDK。


表格DHIS2 JDK 兼容性

| DHIS2 版本 | 建议使用 JDK | 需要 JDK |
|---------------|-----------------|--------------|
| 2.41          | 17              | 17           |
| 2.40          | 17              | 11           |
| 2.38          | 11              | 11           |
| 2.35          | 11              | 8            |
| 前 2.35      | 8               | 8            |


- PostgreSQL 数据库版本 9.6 或更高。建议使用更高的 PostgreSQL 版本，如 14 版。
- PostGIS数据库扩展版本2.2或更高版本。
- Tomcat Servlet容器版本8.5.50或更高版本，或其他Servlet API
  3.1兼容的servlet容器。
- 仅群集设置（可选）：Redis数据存储版本4或更高版本。

## 服务器设置 { #install_server_setup } 

本节介绍如何在以下平台上建立 DHIS2 服务器实例
Ubuntu 18.04 64 位上设置 DHIS2 服务器实例，将 PostgreSQL 作为数据库系统，将 Tomcat 作为
Servlet 容器。本指南并不是一个分步指南
本身，而是作为在服务器上部署 DHIS2 的参考。
在服务器上部署的参考。有许多可能的部署策略，它们
会因操作系统和数据库以及其他因素而有所不同。
其他因素而有所不同。术语 *invoke* 是指在终端中执行给定命令。
终端中执行指定命令。

For this guide we assume that 8 Gb RAM is allocated for PostgreSQL and 8
GB RAM is allocated for Tomcat/JVM, and that a 64-bit operating system
is used. *If you are running a different configuration please adjust the
suggested values accordingly\!*

我们建议可用内存
大致平分给数据库和 JVM。切记
将部分物理内存留给操作系统，以便其执行任务。
例如 2 GB 左右。标记为
标记为*可选*的步骤，如性能调整步骤，可在稍后阶段完成。
阶段完成。

### 创建一个用户来运行DHIS2 { #install_creating_user } 

您应该创建一个专用用户来运行DHIS2。

> **重要**
>
>您不应以root用户等特权用户身份运行DHIS2服务器。

通过调用以下命令创建一个名为dhis的新用户：

```sh
sudo useradd -d / home / dhis -m dhis -s / bin / false
```

然后为您的帐户调用设置密码：

```sh
须藤密码
```

确保设置了一个安全密码，该密码至少包含15个随机字符。

### 创建配置目录 { #install_creating_config_directory } 

首先为DHIS2配置创建合适的目录
文件。此目录还将用于应用程序，文件和日志文件。
示例目录可以是：

```sh
sudo mkdir /home/dhis/config
sudo chown dhis:dhis /home/dhis/config
```

DHIS2 会查找一个名为 `DHIS2_HOME` 的环境变量，以确定 DHIS2 配置目录的位置。
来查找 DHIS2 配置目录。在本安装指南中
在本安装指南中称为 `DHIS2_HOME`。我们将在
环境变量。

如果找不到环境变量 `DHIS2_HOME`，则使用默认的 
配置文件位置 `/opt/dhis2`。

### 设置服务器时区和语言环境 { #install_setting_server_tz } 

可能需要重新配置服务器的时区以匹配
DHIS2服务器将覆盖的位置的时区。
如果您使用的是虚拟专用服务器，则默认时区可能不会
对应于您的DHIS2位置的时区。您可以轻松地
通过调用以下内容并按照以下说明重新配置时区
说明。

```sh
sudo dpkg-重新配置tzdata
```

PostgreSQL对语言环境敏感，因此您可能必须安装
地区优先。要检查现有的语言环境并安装新的语言环境（例如
挪威）：

```sh
语言环境-a
须藤locale-gen nb_NO.UTF-8
```

### PostgreSQL安装 { #install_postgresql_installation } 

通过以下方式安装PostgreSQL
    调用：

```sh
sudo apt-get install -y postgresql-12 postgresql-12-postgis-3
```

通过调用以下命令创建一个名为* dhis *的非特权用户：

```sh
须藤-u postgres createuser -SDRP dhis
```

在提示符下输入安全密码。通过调用创建数据库：

```sh
须藤-u postgres createdb -O dhis dhis2
```

通过调用`exit`返回您的会话现在您有一个PostgreSQL用户
称为* dhis *和一个名为* dhis2 *的数据库。

* PostGIS *扩展是多种GIS /映射功能所必需的
工作。 DHIS 2将尝试在安装过程中安装PostGIS扩展
启动。如果DHIS 2数据库用户没有创建权限
您可以使用* postgres *用户从控制台创建扩展
使用以下命令：

```sh
sudo -u postgres psql -c“创建扩展名postgis;” dhis2
```

为了添加三叉索引并与原始列类型复合，必须在 DHIS 2 verision 2.38 及更高版本的数据库中创建两个扩展。这些扩展已经是 posgresql 默认安装的一部分：

```sh
sudo -u postgres psql -c "create extension btree_gin;" dhis2
sudo -u postgres psql -c "create extension pg_trgm;" dhis2
```

退出控制台，并使用* \\ q *并返回到先前的用户
*出口*。

### PostgreSQL性能调优 { #install_postgresql_performance_tuning } 

Tuning PostgreSQL is required to achieve a high-performing system but
is optional in terms of getting DHIS2 to run. The various settings can be
specified in the `postgresql.conf` configuration file or, preferably, in a specific
file in the `conf.d` directory. The settings is based on allocating 8 GB RAM to
PostgreSQL and should be adjusted accordingly to the environment.

```sh
须藤nano /etc/postgresql/12/main/postgresql.conf
```

设置以下属性

```properties
jit = off
```

这对于 postgresql 12 及更高版本来说非常重要。  jit 编译器 
功能会大大降低许多 DHIS2 特定查询的速度，例如 
程序指示器查询。  对于 11 及以下版本，该设置默认为关闭。

```属性
max_connections = 200
```

确定PostgreSQL允许的最大连接数。

```properties
shared_buffers = 3GB
```

确定应专门分配多少内存
PostgreSQL缓存。此设置控制共享内核的大小
应该为PostgreSQL保留的内存。应该设置为
PostgreSQL专用内存的40％。

```properties
work_mem = 24MB
```

确定用于内部排序和哈希的内存量
操作。此设置是针对每个连接，针对每个查询的，因此需要大量内存
如果将其提高得太高，可能会被消耗掉。正确设置该值
对于DHIS2聚合性能至关重要。

```属性
maintenance_work_mem = 1GB
```

确定PostgreSQL可用于维护的内存量
创建索引，运行真空，添加外部文件等操作
键。增大此值可能会提高索引创建的性能
在分析生成过程中。

```properties
temp_buffers = 16MB
```

设置每个数据库会话使用的最大临时缓冲区数量。 
会话。这些是会话本地缓冲区，仅用于访问临时表。 
表。 

```properties
effective_cache_size = 8GB
```

An estimate of how much memory is available for disk caching by the
operating system (not an allocation) and is used by PostgreSQL to
determine whether a query plan will fit into memory or not. Setting it
to a higher value than what is really available will result in poor
performance. This value should be inclusive of the `shared_buffers`
setting. PostgreSQL has two layers of caching: The first layer uses the
kernel shared memory and is controlled by the shared\_buffers setting.
PostgreSQL delegates the second layer to the operating system disk cache
and the size of available memory can be given with the
`effective_cache_size` setting.

```属性
checkpoint_completion_target = 0.8
```

设置WAL写过程中用于缓冲的内存。
增大此值可能会提高大量写入系统的吞吐量。

```属性
sync_commit =关
```

指定事务提交是否将等待WAL记录
是否将其写入磁盘，然后再返回客户端。设定这个
关闭将大大提高性能。这也意味着那里
交易之间的轻微延迟被报告为成功
客户端，它实际上是安全的，但是数据库状态不能为
已损坏，这是性能密集型和
像DHIS2这样的重写入系统。

```属性
wal_writer_delay = 10s
```

指定WAL写操作之间的延迟。将此设置为较高
价值可能会提高大量写入系统的性能，因为
一次刷新到磁盘就可以执行许多写操作。

```属性
random_page_cost = 1.1
```

*仅SSD。*设置查询计划程序对非连续获取的磁盘页面的成本的估计。较低的值将导致系统比顺序扫描更喜欢索引扫描。对于在SSD上运行的数据库或在内存中大量缓存的数据库，较低的值有意义。默认值为4.0，这对于传统磁盘而言是合理的。

```属性
max_locks_per_transaction = 96
```

指定为每个事务分配的对象锁的平均数量。设置该参数主要是为了允许完成涉及大量表的升级例程。

```properties
track_activity_query_size = 8192
```

指定为跟踪每个活动会话的当前执行命令而预留的字节数。用于查看完整的查询字符串，以监控当前运行的查询。

```properties
jit = off
```

此设置可关闭 jit 优化器。  postgresql 12 及以上版本应将其设置为关闭。  许多查询，尤其是程序指示器查询，在默认启用 jit 设置的情况下性能非常差。  关闭 jit 可以将响应时间提高 100 倍，从而显著改善仪表盘性能。

通过调用以下命令来重新启动PostgreSQL：

```sh
sudo systemctl restart postgresql
```

### Java安装 { #install_java_installation } 

DHIS 2 推荐使用的 Java JDK 是 OpenJDK 17（2.40 及更高版本）。您可以使用以下命令安装它：

```
sudo apt-get install -y openjdk-17-jdk
```

通过调用以下命令来验证安装是否正确：

```
Java版本
```

### DHIS2配置 { #install_database_configuration } 

The database connection information is provided to DHIS2 through a
configuration file called `dhis.conf`. Create this file and save it in
the `DHIS2_HOME` directory. As an example this location could be:

```sh
/home/dhis/config/dhis.conf
```

与上述设置相对应的PostgreSQL配置文件具有
这些属性：

```properties
# ----------------------------------------------------------------------
# Database connection
# ----------------------------------------------------------------------

# JDBC driver class
connection.driver_class = org.postgresql.Driver

# Database connection URL
connection.url = jdbc:postgresql:dhis2

# Database username
connection.username = dhis

# Database password
connection.password = xxxx

# ----------------------------------------------------------------------
# Server
# ----------------------------------------------------------------------

# Enable secure settings if deployed on HTTPS, default 'off', can be 'on'
# server.https = on

# Server base URL
# server.base.url = https://server.com
```

强烈建议启用`server.https`设置并使用加密的HTTPS协议部署DHIS 2。此设置将启用例如安全cookie。启用此设置后，需要进行HTTPS部署。

`server.base.url`设置是指最终用户通过网络访问系统的URL。

Note that the configuration file supports environment variables. This
means that you can set certain properties as environment variables and
have them resolved, e.g. like this where `DB\_PASSWD` is the
name of the environment variable:

```属性
connection.password = $ {DB_PASSWD}
```

请注意，此文件包含您的DHIS2数据库的密码（以明文形式）
文本，因此需要对其进行保护，以防止未经授权的访问。去做这个，
调用以下命令，以确保仅允许* dhis *用户读取它：

```sh
chmod 600 dhis.conf
```

### Tomcat和DHIS2安装 { #install_tomcat_dhis2_installation } 

要安装Tomcat Servlet容器，我们将利用Tomcat用户
通过调用打包：

```sh
sudo apt-get install -y tomcat8-user
```

这个包让我们可以轻松创建一个新的 Tomcat 实例。实例
将在当前目录中创建。合适的位置是
`dhis` 用户的主目录：

```sh
sudo tomcat8-instance-create /home/dhis/tomcat-dhis
sudo chown -R dhis:dhis /home/dhis/tomcat-dhis/
```

This will create an instance in a directory called `tomcat-dhis`. Note
that the `tomcat8-user` package allows for creating any number of DHIS2
instances if that is desired.

接下来编辑文件 `tomcat-dhis/bin/setenv.sh` 并添加以下几行。

* `JAVA_HOME` 设置 JDK 安装的位置。
* `JAVA_OPTS` 将参数传递给 JVM。
    * `-Xms` 将内存的初始分配设置为 Java 堆内存空间。
    * `-Xmx` 设置向 Java 堆内存空间分配的最大内存。这应该反映出您希望分配给服务器上的 DHIS 2 软件应用程序的内存量。
* `DHIS2_HOME` 设置 DHIS 2 的 `dhis.conf` 配置文件的位置。

检查 Java 二进制文件的路径是否正确，因为它们可能因系统而异，例如在 AMD 系统上您可能会看到
`/java-11-openjdk-amd64`。请注意，您应该根据您的环境调整这些值。

```sh
JAVA_HOME='/usr/lib/jvm/java-11-openjdk-amd64/'
JAVA_OPTS='-Xms4000m -Xmx7000m'
DHIS2_HOME='/home/dhis/config'
```

Tomcat的配置文件位于
`tomcat-dhis/conf/server.xml`。定义连接的元素
DHIS 是端口 8080 的 *Connector* 元素。您可以更改
如有必要，将连接器元素中的端口号更改为所需端口。
`relaxedQueryChars` 属性是允许某些字符所必需的
在 DHIS2 前端使用的 URL 中。

```xml
<Connector port="8080" protocol="HTTP/1.1"
  connectionTimeout="20000"
  redirectPort="8443"
  relaxedQueryChars="[]" />
```

下一步是下载 DHIS2 WAR 文件并将其放入
Tomcat 的 _webapps_ 目录。您可以从以下位置下载 DHIS2 WAR 文件：

```sh
https://releases.dhis2.org/
```

将 WAR 文件移到 Tomcat 的 `webapps` 目录中。我们要调用
我们要调用 WAR 文件 `ROOT.war` 以使其直接在 `localhost` 中可用，而无需上下文路径
无需上下文路径：

```sh
mv dhis.war tomcat-dhis / webapps / ROOT.war
```

DHIS2 决不应该作为特权用户运行。修改后
`setenv.sh 文件`，修改启动脚本以检查并验证
脚本尚未以 root 身份调用。

```sh
＃！/ bin / sh
设置-e

如果[“ $（id -u）” -eq“ 0”];然后
  回声“此脚本不能以root用户身份运行” 1>＆2
  1号出口
科幻

导出CATALINA_BASE =“ / home / dhis / tomcat-dhis”
/usr/share/tomcat8/bin/startup.sh
回显“ Tomcat启动”
```

### 运行DHIS2 { #install_running_dhis2 } 

DHIS2现在可以通过调用来启动：

    须藤-u dhis tomcat-dhis / bin / startup.sh

> **重要**
>
>绝对不要以root或其他特权用户身份运行DHIS2服务器。

DHIS2可以通过调用来停止：

    须藤-u dhis tomcat-dhis / bin / shutdown.sh

要监视Tomcat的行为，日志是该日志的主要来源
信息。可以使用以下命令查看日志：

    尾巴-f tomcat-dhis / logs / catalina.out

假设WAR文件名为ROOT.war，您现在可以访问
DHIS2实例位于以下URL：

    http://localhost:8080

## 文件存储配置 { #install_file_store_configuration } 

DHIS2 is capable of capturing and storing files. By default, files will be stored on the local file
system of the server which runs DHIS2 in a *files* directory under the `DHIS2_HOME` external
directory location. The directory *files* can be changed via the `filestore.container` property in
the `dhis.conf`.

您还可以将 DHIS2 配置为在云存储提供商上存储文件。目前支持 AWS S3 或 S3
兼容对象存储。

要启用 AWS S3 存储，您必须在 `dhis.conf` 文件中定义以下附加属性
文件中定义以下附加属性：

```properties
# File store provider. Currently 'filesystem' (default), 'aws-s3' and 's3' are supported.
filestore.provider = aws-s3

# Directory in external directory on local file system or bucket in AWS S3 or S3 API
filestore.container = files

# The following configuration is applicable to cloud storage only (provider 'aws-s3' or 's3')

# Datacenter location. Optional but recommended for performance reasons.
filestore.location = eu-west-1

# Username / Access key for AWS S3 or S3 APIs
filestore.identity = xxxx

# Password / Secret key for AWS S3 or S3 APIs (sensitive)
filestore.secret = xxxx
```

要在兼容 S3 的对象存储中启用存储，必须在`dhis.conf`文件中定义以下附加
属性：

```properties
# File store provider. Currently 'filesystem' (default), 'aws-s3' and 's3' are supported.
filestore.provider = s3

# Directory in external directory on local file system or bucket in AWS S3
filestore.container = files

# The following configuration is applicable to cloud storage only (provider 'aws-s3' or 's3')

# URL where the S3 compatible API can be accessed (only for provider 's3')
filestore.endpoint = http://minio:9000 

# Datacenter location. Optional but recommended for performance reasons.
filestore.location = eu-west-1

# Username / Access key for AWS S3 or S3 APIs
filestore.identity = xxxx

# Password / Secret key for AWS S3 or S3 APIs (sensitive)
filestore.secret = xxxx
```

> **注意**
>
>如果您在dhis.conf中配置了云存储，则上传的所有文件
>或系统生成的文件将使用云存储。

这些配置只是示例，应根据需要进行更改。
对于生产系统，应仔细考虑文件存储的初始设置。
对于生产系统，文件存储的初始设置应仔细考虑，因为在存储提供商之间移动文件
保持数据库引用的完整性可能会很复杂。记住
记住，文件存储的内容可能包含敏感和不可分割的信息，因此要保护对文件存储的访问。
和不可分割的信息，因此要保护文件夹的访问权限，并确保备份计划到位。
建议在生产环境中执行备份计划。
实施。

> **注**
> 
> AWS S3 和兼容 S3 的对象存储是唯一受支持的云提供商，但可以添加更多提供商。
> 可以添加。如果您有其他提供商的用例，请告诉我们。

## Google服务帐户配置 { #install_google_service_account_configuration } 

DHIS2 可以连接各种谷歌服务 API。例如
DHIS2 地图应用程序可利用谷歌地球引擎 API 加载地球引擎地图层。
层。获取 Google API 密钥有两种方法。

### 自己设置{ #set-it-up-yourself } 

设置 Google 服务账户并创建私人密钥：

  - 创建一个Google服务帐户。请咨询[Google身份
    平台]（https://developers.google.com/identity/protocols/OAuth2ServiceAccount#overview）
    文档。

  - 访问[Google云控制台]（https://console.cloud.google.com）
    并转到API Manager \>凭据\>创建凭据\>
    服务帐户密钥。选择您的服务帐户和JSON作为密钥
    键入并单击创建。

  - 将JSON密钥重命名为* dhis-google-auth.json *。

After downloading the key file, put the `dhis-google-auth.json` file in
the `DHIS2_HOME` directory (the same location as the `dhis.conf` file).
As an example this location could be:

    /home/dhis/config/dhis-google-auth.json

### 发送电子邮件以设置 Google 地球引擎 API 密钥{ #send-an-email-to-set-up-the-google-earth-engine-api-key } 

如果您只打算将密钥用于 Google 地球引擎地图层、
您只需发送电子邮件即可。请参阅 [Google 地球引擎 API 密钥文档](https://docs.dhis2.org/en/topics/tutorials/google-earth-engine-sign-up.html) 。

## 必应地图 API 密钥{ #install_bing_maps_api_key }

要启用必应地图基图层，需要设置必应地图 API 密钥。有关设置密钥的信息，请参阅[必应地图 API 密钥文档](https://www.microsoft.com/en-us/maps/bing-maps/create-a-bing-maps-key)。

## OpenID Connect（OIDC）配置 { #install_oidc_configuration } 

DHIS2 支持用于单点登录（SSO）的 OpenID Connect（OIDC）身份层。OIDC 是一种标准身份验证协议，用户可通过身份提供商（IdP）（如谷歌）登录。用户成功登录其 IdP 后，将自动登录 DHIS2。

本节提供了与 OIDC 提供商一起使用 DHIS2 的一般信息，以及完整的配置示例。

DHIS2 OIDC "授权码 "验证流程：

1. 用户尝试登录 DHIS2 并点击登录页面上的 OIDC 提供商按钮。

2. DHIS2 会将浏览器重定向到 IdP 的登录页面。

3. 如果尚未登录，系统会提示用户输入凭据。身份验证成功后，IdP 会响应重定向，返回 DHIS2 服务器。重定向包括为用户生成的唯一授权码。

4. DHIS2 服务器会在内部将用户的授权代码连同自己的客户 ID 和客户秘密凭证一起发回给 IdP 服务器。

5. IdP 向 DHIS2 服务器返回 ID 令牌。DHIS2 服务器对令牌进行验证。

6. DHIS2 服务器根据 ID 令牌中的映射要求（默认为电子邮件）查找 DHIS2 内部用户，授权用户并完成登录过程。

### 将 OIDC 与 DHIS2 结合使用的要求：{ #requirements-for-using-oidc-with-dhis2 } 

#### IdP 服务器账户{ #idp-server-account } 

您必须在 DHIS2 支持的在线身份供应商 (IdP) 或独立服务器上拥有一个管理员账户。

目前支持并测试了以下 IdP：

* 谷歌
* Azure AD
* WSO2
* Okta（请参阅单独的教程：[此处](#configure-openid-connect-with-okta))

还有一个**通用提供商**配置，可支持 "任何 "兼容 OIDC 的提供商。

#### DHIS2 用户账户{ #dhis2-user-account } 

您必须在 DHIS2 服务器中明确创建用户，然后他们才能登录身份供应商。目前不支持从 Active Directory 等外部目录导入用户。OIDC 标准不支持使用外部身份存储对用户进行供应和管理。

#### 用户的IdP声明和映射 { #idp-claims-and-mapping-of-users } 

要使用 OIDC 登录 DHIS2，必须在 IdP 中配置特定用户，然后将其映射到 DHIS2 中预先创建的用户账户。OIDC 使用一种方法，依靠声明与其他应用程序共享用户账户属性。声明包括电子邮件、电话号码、姓名等用户账户属性。DHIS2 依靠 IdP 索赔将 IdP 中的用户账户映射到 DHIS2 服务器中的用户账户。默认情况下，DHIS2 希望 IdP 传递 _email_ 声明。根据 IdP 的不同，您可能需要配置 DHIS2 以使用不同的 IdP 声明。

如果使用 Google 或 Azure AD 作为 IdP，默认行为是使用 _email_ 索赔将 IdP 身份映射到 DHIS2 用户账户。

> **注**
>
> 为了使 DHIS2 用户能够使用 IdP 登录，用户配置文件的复选框必须选中：必须选中 *External authentication only OpenID or LDAP*（外部身份验证仅限 OpenID 或 LDAP），并且 *OpenID* 字段必须与 IdP 返回的请求（映射请求）相匹配。电子邮件是 Google 和 Azure AD 使用的默认声明。

### 为OIDC配置身份提供者 { #configure-the-identity-provider-for-oidc } 

本主题提供有关配置身份提供者 (IdP) 以在 DHIS2 中使用 OIDC 的一般信息。这是一个多步骤过程中的一个步骤。每个 IdP 的配置方法略有不同。关于如何创建和配置 OIDC 应用程序，请查阅 IdP 自己的文档。在此，我们将 DHIS2 服务器称为 OIDC "应用程序"。

#### 重定向网址 { #redirect-url } 

所有 IdP 都需要一个指向 DHIS2 服务器的重定向 URL。 
您可以使用以下模式构建它：

```
(协议）：/（您的 DHIS2 主机）/oauth2/code/PROVIDER_KEY
```

使用 Google IdP 时的示例：

```
https://mydhis2-server.org/oauth2/code/google
```

配置 IdP 说明的外部链接：

* [Google](https://developers.google.com/identity/protocols/oauth2/openid-connect)
* [Azure AD 教程](https://medium.com/xebia-engineering/authentication-and-authorization-using-azure-active-directory-266980586ab8)


### Google{ #example-setup-for-google } 设置示例 

1. 注册一个账户并登录。例如，对于 Google，您可以访问 Google [developer console](https://console.developers.google.com)。
2. 在 Google 开发人员控制面板中，点击 "创建新项目"。
3. 请按照说明创建 OAuth 2.0 客户端 ID 和客户秘密。
4. Set your "Authorized redirect URL" to: `https://mydhis2-server.org/oauth2/code/google`
5. 复制并妥善保管 "客户 ID "和 "客户秘密"。

> **Tip**
>
> When testing on a local DHIS2 instance running for example on your laptop, you can use localhost as the redirect URL, like this: `https://localhost:8080/oauth2/code/google`
> *Remember to also add the redirect URL in the Google developer console*

#### Google dhis.conf 示例：{ #google-dhisconf-example } 
```properties

# Enables OIDC login
oidc.oauth2.login.enabled = on

# Client id, given to you in the Google developer console
oidc.provider.google.client_id = my client id

# Client secret, given to you in the Google developer console
oidc.provider.google.client_secret = my client secret

# [Optional] Authorized redirect URI, the same as set in the Google developer console 
# If your public hostname is different from what the server sees internally, 
# you need to provide your full public url, like the example below.
oidc.provider.google.redirect_url = https://mydhis2-server.org/oauth2/code/google

# [Optional] Where to redirect after logging out.
# If your public hostname is different from what the server sees internally, 
# you need to provide your full public url, like the example below. 
oidc.logout.redirect_url = https://mydhis2-server.org

```

### Azure AD 设置示例{ #example-setup-for-azure-ad } 

Make sure your Azure AD account in the Azure portal is configured with a redirect URL like: `(protocol):/(host)/oauth2/code/PROVIDER_KEY`. 
To register your DHIS2 server as an "application" in the Azure portal, follow these steps:

> **注**
>
> PROVIDER_KEY 是配置密钥的 "名称 "部分，例如"oidc.provider.PROVIDER_KEY.tenant = My Azure SSO
> 如果要配置多个 Azure 提供商，可以使用这种名称形式：(azure.0)、(azure.1) 等。
> 重定向 URL 示例：https://mydhis2-server.org/oauth2/code/azure.0

1. 搜索并选择*应用程序注册*。
2. 点击*新注册*。
3. 在 *Name* 字段中，输入 DHIS2 实例的描述性名称。
4. 在 *重定向 URI* 字段中，输入上文指定的重定向 URL。
5. 点击*注册*。

#### Azure AD dhis.conf 示例：{ #azure-ad-dhisconf-example } 
```properties

# Enables OIDC login
oidc.oauth2.login.enabled = on

# First provider (azure.0):

# Alias, or name that will show on the login button in the DHIS2 login screen.
oidc.provider.azure.0.tenant = organization name

# Client id, given to you in the Azure portal
oidc.provider.azure.0.client_id = my client id

# Client secret, given to you in the Azure portal
oidc.provider.azure.0.client_secret = my client secret

# [Optional] Authorized redirect URI, the as set in Azure portal 
# If your public hostname is different from what the server sees internally, 
# you need to provide your full public url, like the example below.
oidc.provider.azure.0.redirect_url = https://mydhis2-server.org/oauth2/code/azure.0

# [Optional] Where to redirect after logging out.
# If your public hostname is different from what the server sees internally, 
# you need to provide your full public URL, like the example below.
oidc.logout.redirect_url = https://mydhis2-server.org

# [Optional], defaults to 'email'
oidc.provider.azure.0.mapping_claim = email

# [Optional], defaults to 'on'
oidc.provider.azure.0.support_logout = on


# Second provider (azure.1):

oidc.provider.azure.1.tenant = other organization name
...
```

### 通用提供商{ #generic-providers } 

通用提供程序可用于配置与 "Spring Security "兼容的 "任何 "标准 OIDC 提供程序。

在下面的示例中，我们将使用提供商密钥`helseid`配置挪威政府 _HelseID_ OIDC 提供商。

已定义的提供程序将作为按钮出现在登录页面上，默认名称为提供程序的密钥、 
或 `display_alias` 的值（如果已定义）。提供程序的关键字是任意的，可以是任何字母数字字符串、 
除了特定提供程序使用的保留名称（`google`、`azure.0,azure.1...`、`wso2`）。

> **Note**
> The generic provider uses the following hardcoded configuration defaults:
> **(These are not possible to change)**
> * Client Authentication, `ClientAuthenticationMethod.BASIC`: [rfc](https://tools.ietf.org/html/rfc6749#section-2.3)
> * Authenticated Requests, `AuthenticationMethod.HEADER`: [rfc](https://tools.ietf.org/html/rfc6750#section-2) 

#### 通用 (helseid) dhis.conf 示例：{ #generic-helseid-dhisconf-example } 

```properties

# Enables OIDC login
oidc.oauth2.login.enabled = on

# Required variables:
oidc.provider.helseid.client_id = CLIENT_ID
oidc.provider.helseid.client_secret = CLIENT_SECRET
oidc.provider.helseid.mapping_claim = helseid://claims/identity/email
oidc.provider.helseid.authorization_uri = https://helseid.no/connect/authorize
oidc.provider.helseid.token_uri = https://helseid.no/connect/token
oidc.provider.helseid.user_info_uri = https://helseid.no/connect/userinfo
oidc.provider.helseid.jwk_uri = https://helseid.no/.well-known/openid-configuration/jwks
oidc.provider.helseid.end_session_endpoint = https://helseid.no/connect/endsession
oidc.provider.helseid.scopes = helseid://scopes/identity/email

# [Optional] Authorized redirect URI, the as set in Azure portal 
# If your public hostname is different from what the server sees internally, 
# you need to provide your full public url, like the example below.
oidc.provider.helseid.redirect_url = https://mydhis2-server.org/oauth2/code/helseid

# [Optional], defaults to 'on'
oidc.provider.helseid.enable_logout = on

# [Optional] Where to redirect after logging out.
# If your public hostname is different from what the server sees internally, 
# you need to provide your full public URL, like the example below.
oidc.logout.redirect_url = https://mydhis2-server.org

# [Optional] PKCE support, see: https://oauth.net/2/pkce/), default is 'false'
oidc.provider.helseid.enable_pkce = on

# [Optional] Extra variables appended to the request. 
# Must be key/value pairs like: "KEY1 VALUE1,KEY2 VALUE2,..."
oidc.provider.helseid.extra_request_parameters = acr_values lvl4,other_key value2

# [Optional] This is the alias/name displayed on the login button in the DHIS2 login page
oidc.provider.helseid.display_alias = HelseID

# [Optional] Link to an url for a logo. (Can use absolute or relative URLs)
oidc.provider.helseid.logo_image = ../security/btn_helseid.svg
# [Optional] CSS padding for the logo image
oidc.provider.helseid.logo_image_padding = 0px 1px
```

### JWT 承载令牌验证{ #jwt-bearer-token-authentication } 

在配置 OIDC 时，可为基于 API 的客户端启用*JWT 承载令牌*身份验证。 
DHIS2 Android 客户端就是这种类型的客户端，如果启用了 OIDC 登录，就必须使用 JWT 身份验证。

> **注**
>
> DHIS2 目前仅支持使用 JWT 进行身份验证的 OAuth2 授权代码授予流（也称为 "三脚 OAuth"）。
> 在使用 JWT 标记时，DHIS2 目前仅支持将 Google 用作 OIDC 提供商


### 要求 { #requirements } 
* 如上所述配置 Google OIDC 提供商 
* Disable the config parameter ```oauth2.authorization.server.enabled``` by setting it to 'off'
* Enable the config parameter ```oidc.jwt.token.authentication.enabled``` by setting it to 'on'
* 按照 [此处](https://developers.google.com/identity/protocols/oauth2/native-app#creatingcred) 的说明生成 Android OAuth2 客户端_id

### JWT 身份验证示例{ #jwt-authentication-example } 

以下`dhis.conf`部分显示了如何为基于 API 的客户端启用 JWT 身份验证的示例。

```properties

# Enables OIDC login
oidc.oauth2.login.enabled = on

# Minimum required config variables:
oidc.provider.google.client_id = my_client_id
oidc.provider.google.client_secret = my_client_secret

# Enable JWT support
oauth2.authorization.server.enabled = off
oidc.jwt.token.authentication.enabled = on

# Define client 1 using JWT tokens
oidc.provider.google.ext_client.0.client_id = JWT_CLIENT_ID

# Define client 2 using JWT tokens
oidc.provider.google.ext_client.1.client_id = JWT_CLIENT_ID

```

> **注**
>
> 查看我们的教程，将 Okta 设置为通用 OIDC 提供商](././././topics/tutorials/configure-oidc-with-okta.md)

### 将单个身份供应商账户连接到多个 DHIS2 账户{ #connecting-a-single-identity-provider-account-to-multiple-dhis2-accounts } 

DHIS2 能够将一个身份供应商账户映射到多个 DHIS2 账户。API 调用可用于列出链接账户，并在这些账户之间进行切换。

When this option is selected, the `openid` database field in the `userinfo` table does not need to be unique.  When presented with an `openid` value from the identity provider, DHIS2 will log in the user that most recently logged in.

下面的 `dhis.conf` 部分说明了如何启用链接账户。

```properties
# Enable a single OIDC account to log in as one of several DHIS2 accounts
linked_accounts.enabled = on
```

有关如何列出链接账户并在它们之间切换的说明，请参阅开发人员文档 "用户 "一章中的[*在连接到同一身份供应商账户的用户账户之间切换*](./././develop/using-the-api/dhis-core-version-master/users.html#switching-between-user-accounts-connected-to-the-same-identity-provider-account)

## LDAP配置 { #install_ldap_configuration } 

DHIS2能够使用LDAP服务器进行用户身份验证。
对于LDAP身份验证，要求在
每个LDAP条目的DHIS2数据库。 DHIS2用户将用于代表
权限/用户角色。

要设置 LDAP 身份验证，需要配置 LDAP 服务器 URL、
管理器用户以及 LDAP 搜索库和搜索过滤器。此
配置应在 DHIS 2 配置文件 `dhis.conf` 中完成。 
LDAP 用户或条目由区分名（DN）标识。 
(以下简称 DN）来标识。配置示例如下

```属性
＃LDAP服务器网址
ldap.url = ldaps：//domain.org：636

＃LDAP管理器条目专有名称
ldap.manager.dn = cn = johndoe，dc = domain，dc = org

＃LDAP管理员输入密码
ldap.manager.password = xxxx

＃LDAP基本搜索
ldap.search.base = dc = domain，dc = org

＃LDAP搜索过滤器
ldap.search.filter =（cn = {0}）
```

LDAP配置属性说明如下：

- * ldap.url：*要对其进行身份验证的LDAP服务器的URL
  反对。强烈建议使用SSL /加密，以便
  确保身份验证的安全性。例如，URL是
  * ldaps：//domain.org：636 *，其中ldaps是指协议，
  * domain.org *是指域名或IP地址，* 636 *
  指端口（LDAPS默认为636）。
- * ldap.manager.dn：*绑定到LDAP管理器用户是必需的
  用于用户身份验证过程的LDAP服务器。这个性质
  指该条目的DN。即这不是将
  登录DHIS2时需要认证，而不是
  绑定到LDAP服务器以进行身份验证。
- * ldap.manager.password：* LDAP管理器用户的密码。
- * ldap.search.base：*的搜索基础或专有名称
  搜索基础对象，它定义目录中的位置
  LDAP搜索从此开始。
- * ldap.search.filter：*用于匹配条目中DN的过滤器
  LDAP目录。 {0}变量将由DHIS2替换
  用户名，或者为用户定义的LDAP标识符
  使用提供的用户名。

DHIS2将使用提供的用户名/密码并尝试进行身份验证
针对LDAP服务器条目，然后从中查找用户角色/权限
相应的DHIS2用户。这意味着用户必须具有
LDAP目录中的匹配条目以及DHIS2用户，以便
登录。

在身份验证期间，DHIS2将尝试使用以下方式绑定到LDAP服务器：
配置的LDAP服务器URL以及管理员DN和密码。一旦
绑定完成后，它将使用以下命令在目录中搜索条目
配置的LDAP搜索库和搜索过滤器。

配置的过滤器中的{0}变量将在替换之前
应用过滤器。默认情况下，它将被提供的
用户名。您还可以在相关的
DHIS2用户帐户。可以通过DHIS2用户模块用户来完成
通过设置“ LDAP标识符”，在添加或编辑屏幕中找到界面
属性。设置后，LDAP标识符将替换为{0}
过滤器中的变量。 LDAP通用名称时，此功能很有用
不适合或由于某种原因不能用作DHIS2用户名。

## 加密配置 { #install_encryption_configuration } 

DHIS2 allows for encryption of data. Enabling it requires some extra
setup. To provide security to the encryption algorithm you will have to set a
password (key) in the `dhis.conf` configuration file through the
*encryption.password* property:

```属性
加密密码= xxxx
```

The *encryption.password* property is the password (key) used when encrypting
and decrypting data in the database.

如果未在 `dhis.conf` 中定义加密密码，则将使用默认密码。
密码。请注意，由于 DHIS 2. 
由于 DHIS 2 的开源性质，使用默认密码不会提供任何额外的安全性。

请注意，一旦设置了密码并对数据进行了加密，就不能再更改密码，因为应用程序将无法再解密数据。

密码必须至少为** 24个字符长**。混合数字
建议使用大小写字母。加密密码
必须保密。

> **重要**
>
>如果丢失或更改了加密密码，则无法恢复加密的数据。如果密码丢失，则加密的数据也会丢失。相反，如果
>密码已泄露。因此，应考虑将密码存储在安全的地方。

请注意，由于加密密钥存储在配置文件 `dhis.conf` 中，而不是数据库中。
中，因此在通过转储和还原在服务器环境之间移动数据库时，加密密钥必须在不同环境中保持一致，以便 DHIS 2
解密数据库内容。

请注意，加密支持取决于 *Java Cryptography Extension* (JCE) 策略文件是否可用。这些文件包含在所有版本的 OpenJDK 和 Oracle JDK 8 Update 144 或更高版本中。

## 读取副本数据库配置 { #install_read_replica_configuration } 

DHIS 2允许利用主数据库的只读副本
（主DHIS 2数据库）。只读副本的目的是为了增强
数据库读取查询的性能并扩展容量
超越了单个数据库的限制。大量读取操作，例如
因为分析和事件查询将从中受益。

The configuration requires that you have created one or more replicated
instances of the master DHIS 2 database. PostgreSQL achieves this
through a concept referred to as *streaming replication*. Configuring
read replicas for PostgreSQL is not covered in this guide.

读取复制可在配置文件 `dhis.conf` 中定义。每个 DHIS 2 实例最多可
每个 DHIS 2 实例最多可指定 5 个读取副本。每个读取副本
用介于 1 和 5 之间的数字表示。JDBC 连接 URL 必须
必须为每个副本定义。可指定用户名和密码；如果未指定用户名和密码，则将使用数据库的用户名和密码。
则将使用主数据库的用户名和密码。
用户名和密码。

The configuration for read replicas in `dhis.conf` looks like the below.
Each replica is specified with the configuration key *readN* prefix,
where N refers to the replica number.

```属性
＃读取副本1的配置

＃数据库连接URL，用户名和密码
read1.connection.url = jdbc：postgresql：//127.0.0.11/dbread1
read1.connection.username = dhis
read1.connection.password = xxxx

＃读取副本2的配置

＃数据库连接URL，用户名和密码
read2.connection.url = jdbc：postgresql：//127.0.0.12/dbread2
read2.connection.username = dhis
read2.connection.password = xxxx

＃读取副本3的配置

＃数据库连接URL，后退到主用户名和密码
read3.connection.url = jdbc：postgresql：//127.0.0.13/dbread3
```

请注意，您必须重新启动servlet容器才能更改
生效。 DHIS 2将自动在
读取副本。副本的顺序没有任何意义。

## Web服务器群集配置 { #install_web_server_cluster_configuration } 

本节介绍如何设置DHIS 2应用程序以在
簇。

### 群集概述 { #install_cluster_configuration_introduction } 

集群是提高系统可扩展性和可用性的常用技术。
可用性的常用技术。集群是指设置多个网络服务器，如
Tomcat 实例，让它们为一个应用程序服务。集群
可以*扩展*应用程序，即可以添加新的服务器来提高性能。
以提高性能。它还允许*高
可用性*，因为系统可以容忍实例宕机，而不会
使用户无法访问系统。

有一些方面需要配置才能运行DHIS 2
在集群中。

* 必须安装Redis数据存储，并且必须提供连接信息
be provided for each DHIS 2 application instance in`dhis.conf`.

* DHIS 2 实例和服务器必须共享相同的 *files* 文件夹，用于 
应用程序和文件上传，通过* AWS S3云文件存储*选项
或共享的网络驱动器。

* 必须启用 DHIS 2 实例缓存失效。

* 应配置负载平衡器（如 nginx）来分发网络请求
跨集群实例。

### 使用 Redis 使 DHIS 2 实例缓存失效{ #install_cluster_cache_invalidation_redis }

DHIS 2 可以通过监听从 Redis 服务器发送和发出的事件（如果配置了这样的功能）来使各种实例的缓存失效。

如果已计划使用 [Redis for
共享数据存储集群配置](#install_cluster_configuration_redis)，它将同时共享这台 Redis 服务器。

#### 先决条件{ #prerequisites } 

* Redis 服务器

#### Redis 配置{ #redis-configuration } 

DHIS 2 缓存失效不需要在 Redis 中进行特定配置。

When you chose to enable shared data store cluster configuration with Redis, you will share the Redis host/port
configuration with the cache invalidation system. In other words you can only have **one** shared Redis server configured.

#### DHIS 2 配置{ #dhis-2-configuration } 

必须在 DHIS 2 `dhis.conf` 配置文件中指定以下属性：

```properties
# Cache invalidation config

redis.cache.invalidation.enabled = on

# Shared Redis configuration
redis.host = REDIS_HOST
redis.port = REDIS_PORT
redis.password = PASSWORD (Optional, only if enabled on Redis server)
redis.use.ssl = true (Optional, only if enabled on Redis server) 
```

### Redis共享数据存储集群配置 { #install_cluster_configuration_redis } 

在集群设置中，需要一个 Redis 服务器，它将处理
共享用户会话、应用程序缓存和集群节点领导。

For optimum performance, *Redis Keyspace events* for _generic commands_ 
and _expired events_ need to be enabled in the Redis Server. If you are 
using a cloud platform-managed Redis server (like *AWS ElastiCache for Redis* 
or *Azure Cache for Redis*), you will have to enable keyspace event notifications 
using the respective cloud console interfaces. If you are setting up a standalone 
Redis server, enabling keyspace event notifications can be done in the 
*redis.conf* file by adding or uncommenting the following line:

```
notify-keyspace-events Egx
```

DHIS2 will connect to Redis if the *redis.enabled* configuration
property in `dhis.conf` is set to *on* along with the following properties:

- * redis.host *：指定Redis服务器在何处运行。默认为* localhost *。必选

- * redis.port *：指定Redis服务器正在侦听的端口。默认为* 6379 *。可选的。

- * redis.password *：指定身份验证密码。如果不需要密码，可以将其留空。

- * redis.use.ssl *：指定Redis服务器是否启用了SSL。默认为false。可选的。默认为* false *。

When Redis is enabled, DHIS2 will automatically assign one of the
running instances as the leader of the cluster. The leader instance will
be used to execute jobs or scheduled tasks that should be run
exclusively by one instance. Optionally you can configure the
*leader.time.to.live.minutes* property in `dhis.conf` to set up how
frequently the leader election needs to occur. It also gives an
indication of how long it would take for another instance to take over
as the leader after the previous leader has become unavailable. The
default value is 2 minutes. Note that assigning a leader in the cluster
is only done if Redis is enabled. An example snippet of the `dhis.conf`
configuration file with Redis enabled and leader election time
configured is shown below.

```properties
# Redis Configuration

redis.enabled = on

# Shared Redis configuration
redis.host = REDIS_HOST
redis.port = REDIS_PORT
redis.password = PASSWORD (Optional, only if enabled on Redis server)
redis.use.ssl = true (Optional, only if enabled on Redis server)

# Optional, defaults to 2 minutes
leader.time.to.live.minutes=4 
```

### 文件文件夹配置 { #files-folder-configuration } 

DHIS 2将在应用程序本身之外存储几种类型的文件，
例如应用程序，保存在数据输入中的文件和用户头像。部署时
在群集中，这些文件的位置必须在所有实例之间共享。
在本地文件系统上，位置为：

```
{DHIS2_HOME} /文件
```

Here, `DHIS2_HOME` refers to the location of the DHIS 2 configuration file
as specified by the DHIS 2 environment variable, and `files` is the file
folder immediately below.

有两种方法可以实现共享位置：

* 使用* AWS S3云文件存储*选项。文件将存储在
S3存储桶，由群集中的所有DHIS 2实例自动共享。
请参阅*文件存储配置*部分以获取指导。
* 设置一个在所有DHIS 2实例之间共享的共享文件夹，并且
集群中的服务器。在Linux上，可以使用* NFS *（网络文件系统）来实现
这是一个分布式文件系统协议。注意只有`files`
subfolder under `DHIS2_HOME` should be shared, not the parent folder. 

### 负载均衡器配置 { #install_load_balancing } 

设置了Tomcat实例集群，这是路由的常用方法
传入Web请求到参与
集群正在使用*负载均衡器*。负载均衡器将确保
负载在群集实例之间平均分配。它也会
检测实例是否不可用，如果是，则停止例程
对该实例的请求，而是使用其他可用实例。

负载平衡可以通过多种方式实现。一个简单的方法是
使用* nginx *，在这种情况下，您将定义一个* upstream *元素，
枚举后端实例的位置，以后再使用
* proxy *位置块中的元素。

```text
http {

  # Upstream element with sticky sessions

  upstream dhis_cluster {
    ip_hash;
    server 193.157.199.131:8080;
    server 193.157.199.132:8080;
  }

  # Proxy pass to backend servers in cluster

  server {
    listen 80;

    location / {
      proxy_pass   http://dhis_cluster/;
    }
  }
}
```

DHIS 2在一定程度上将用户会话的服务器端状态保持不变。
使用“粘性会话”是避免复制
服务器会话状态，方法是将请求从同一客户端路由到
同一台服务器。上游元素中的* ip \ _hash *指令可确保
这个。

请注意，为简洁起见，已省略了几条说明
上面的例子。请查阅反向代理部分以获取详细指南。

## ActiveMQ Artemis 配置{ #webapi_artemis_configuration } 

默认情况下，DHIS2 将在启动时启动 ActiveMQ Artemis 的嵌入式实例。对于大多数使用情况，您不需要做任何事情。如果您想使用现有的 ActiveMQ Artemis 服务来代替嵌入式实例，您可以使用下表中的配置属性来更改 `dhis.conf` 文件中的默认配置。

| 物业                  | 值（默认为第一位） | 描述                                                  |
| ------------------------- | --------------------- | ------------------------------------------------------------ |
| 阿尔忒弥斯模式                 | EMBEDDED\| 本地    | 默认的`EMBEDDED`模式会在 DHIS2 实例启动时启动内部 AMQP 服务。如果要连接到外部 AMQP 服务，请将模式设置为`NATIVE`。 |
| artemis.host                 | 127.0.0.1             | 要绑定的主机。                                             |
| artemis.port                 | 15672                 | 如果 mode 为`EMBEDDED`，则嵌入式服务器将绑定到此端口。如果模式为`NATIVE`，客户端将使用此端口进行连接。 |
| artemis.用户名             | 来宾                 | 使用`NATIVE`模式时要连接的用户名。               |
| 密码             | 来宾                 | 如果使用`NATIVE`模式连接到的密码。               |
| Artemis.embedded.persistence | 关| 关于         | 如果 mode 为`EMBEDDED`，则此属性控制内部队列的持久性。 |


## 监控 { #monitoring } 

DHIS 2可以导出Prometheus兼容的度量标准以监视DHIS2实例。 DHIS2监视基础结构旨在公开与应用程序运行时相关的指标以及其他与应用程序相关的信息。

与基础架构相关的指标（例如主机指标，Tomcat或Postgres）不会直接由应用程序监视引擎公开，因此必须分别收集它们。该应用程序当前公开的指标是：

- DHIS 2 API（响应时间，调用次数等）
- JVM（堆大小，垃圾回收等）
- 休眠（查询，缓存等）
- C3P0数据库池
- 应用正常运行时间
- 中央处理器

可以使用以下属性在`dhis.conf`中启用监视（所有属性默认为`off`）：

```属性
monitoring.api.enabled =开
monitoring.jvm.enabled =开
monitoring.dbpool.enabled =开
monitoring.hibernate.enabled =关
monitoring.uptime.enabled =开
monitoring.cpu.enabled =开
```

推荐使用Prometheus和Grafana收集和可视化这些指标的方法。

有关详细信息，请参阅 [监控基础架构](https://github.com/dhis2/wow-backend/blob/master/guides/monitoring.md) 页面和 [Prometheus 和 Grafana 安装](#monitoring) 章节。

## 系统配置 { #install_system_configuration } 

本节介绍各种系统配置属性。

```properties
system.read_only_mode = on | off
```

将系统设置为只读模式。当您在只读副本数据库上运行 DHIS 2 时，这很有用，以避免 DHIS 2 执行数据库写入操作。可以是`开`或`关`。默认为`关闭`。

```properties
system.session.timeout = (seconds)
```

以秒为单位设置用户会话超时。默认为 3600 秒（1 小时）。

```properties
system.sql_view_table_protection = on | off
```

启用或禁用 SQL 视图的敏感数据库表保护。这将禁止通过 SQL 视图查询包含敏感数据的数据库表。不建议禁用。可以是`开`或`关`。默认为`开`。

```properties
system.system.sql_view_write_enabled = on | off
```

Enables or disables write permissions for SQL views. This will prohibit SQL view performing underlying writes (query can be a select which requires write permission). Enabling is not recommended. Can be `on` or `off`. Default is `off`.

```properties
system.program_rule.server_execution = on | off
```

启用或禁用服务器端项目规则的执行。这是指具有分配值、发送消息或安排要发送的消息的操作的项目规则。可以是`开`或`关`。默认为`开`。

```properties
system.remote_servers_allowed = https://server1.org/,https://server2.org/
```

设置允许调用与 [metadata pull](../developer/web-api/synchronization.md#webapi_sync_metadata_pull) 功能相关的服务器列表。它接受以逗号分隔的值，建议每个服务器都以 `/` 结尾，以增强安全性。默认值为空。


## 反向代理配置 { #install_reverse_proxy_configuration } 

反向代理是代表服务器运行的代理服务器。使用
反向代理与Servlet容器结合使用是可选的，但
有很多优点：

  - 可以将请求映射并传递到多个servlet容器。
    这提高了灵活性，并使其更易于运行
    同一台服务器上的DHIS2实例。这也使得
    在不影响客户端的情况下更改内部服务器设置。

  - DHIS2应用程序可以作为非root用户在端口上运行
    不同于80，这减少了会话的后果
    劫持。

  - 反向代理可以充当单个SSL服务器并进行配置
    检查恶意内容请求，日志请求和
    响应并提供不敏感的错误消息，这将
    提高安全性。

### 基本的Nginx设置 { #install_basic_nginx_setup } 

由于以下原因，我们建议使用[nginx]（http://www.nginx.org）作为反向代理
其低内存占用和易用性。要安装，请调用
以下：

    sudo apt-get install -y nginx

现在可以使用以下命令启动，重新加载和停止nginx
命令：

    sudo /etc/init.d/nginx开始
    须藤/etc/init.d/nginx重新加载
    sudo /etc/init.d/nginx停止

现在我们已经安装了 nginx，接下来将继续配置
将请求定期代理到 Tomcat 实例。
运行在 `http://localhost:8080`。要配置 nginx，可以通过调用
配置文件：

    须藤nano /etc/nginx/nginx.conf

nginx配置围绕代表以下内容的块层次结构构建
http，服务器和位置，其中每个块都从父级继承设置
块。以下代码段将nginx配置为通过代理
（重定向）来自端口80的请求（该端口是nginx监听的端口
默认情况下）到我们的Tomcat实例。包括以下配置
在nginx.conf中：

```text
http {
  gzip on; # Enables compression, incl Web API content-types
  gzip_types
    "application/json;charset=utf-8" application/json
    "application/javascript;charset=utf-8" application/javascript text/javascript
    "application/xml;charset=utf-8" application/xml text/xml
    "text/css;charset=utf-8" text/css
    "text/plain;charset=utf-8" text/plain;

  server {
    listen               80;
    client_max_body_size 10M;

    # Proxy pass to servlet container

    location / {
      proxy_pass                http://localhost:8080/;
      proxy_redirect            off;
      proxy_set_header          Host               $host;
      proxy_set_header          X-Real-IP          $remote_addr;
      proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto  http;
      proxy_buffer_size         128k;
      proxy_buffers             8 128k;
      proxy_busy_buffers_size   256k;
      proxy_cookie_path         ~*^/(.*) "/$1; SameSite=Lax";
    }
  }
}
```

现在，您可以通过* http：// localhost *访问DHIS2实例。自从
已经设置了反向代理，我们可以通过使Tomcat来提高安全性
只监听本地连接。在* / conf / server.xml *中，您可以添加一个
连接器元素的* address *属性值为* localhost *
对于HTTP 1.1像这样：

```xml
<Connector address="localhost" protocol="HTTP/1.1" />
```

### 使用nginx {#install_enabling_ssl_on_nginx}启用SSL { #install_enabling_ssl_on_nginx } 

为了提高安全性，建议配置服务器
运行DHIS2以通过加密连接与客户端进行通信
并使用受信任的证书向客户端标识自己。这个可以
通过SSL（一种加密通信协议）来实现
在TCP / IP上运行。首先，安装所需的* openssl *库：

    sudo apt-get install -y openssl

要配置nginx使用SSL，你需要从SSL提供商处获得适当的SSL证书。
证书。证书费用因加密强度不同而有很大差异。
取决于加密强度。Rapid SSL
Online](http://www.rapidsslonline.com)提供的经济实惠的证书应该能满足大多数需求。要
生成 CSR（证书签名请求），你可以调用下面的
命令。当系统提示你输入*通用名称*时，请输入你的网站的
您要保护的网站的完全合格域名。
    确保安全。

    openssl req -new -newkey rsa：2048 -nodes -keyout server.key -out server.csr

收到证书文件（.pem或.crt）后，您将
需要将其与生成的server.key文件放在一起
nginx可以到达的位置。一个好的位置可以是
与您的nginx.conf文件所在的目录相同。

下面是一个nginx 服务器块，其中的证书文件名为
server.crt 和 server.key。由于 SSL 连接通常发生在端口
443 (HTTPS)，我们会将该端口 (443) 上的请求传递给运行在``上的 DHIS2 实例。
上运行。第一个服务器块将重写
所有连接到 80 端口的请求，并强制使用 HTTPS/SSL。这
这也是必要的，因为 DHIS2 在内部使用了大量的重定向
这些重定向必须传递给 HTTPS。切记将
*\<server-ip\>* 替换为服务器的 IP。这些块应替换
上一节中的内容。

```text
http {
  gzip on; # Enables compression, incl Web API content-types
  gzip_types
    "application/json;charset=utf-8" application/json
    "application/javascript;charset=utf-8" application/javascript text/javascript
    "application/xml;charset=utf-8" application/xml text/xml
    "text/css;charset=utf-8" text/css
    "text/plain;charset=utf-8" text/plain;

  # HTTP server - rewrite to force use of SSL

  server {
    listen     80;
    rewrite    ^ https://<server-url>$request_uri? permanent;
  }

  # HTTPS server

  server {
    listen               443 ssl;
    client_max_body_size 10M;

    ssl                  on;
    ssl_certificate      server.crt;
    ssl_certificate_key  server.key;

    ssl_session_cache    shared:SSL:20m;
    ssl_session_timeout  10m;

    ssl_protocols              TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers                RC4:HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers  on;

    # Proxy pass to servlet container

    location / {
      proxy_pass                http://localhost:8080/;
      proxy_redirect            off;
      proxy_set_header          Host               $host;
      proxy_set_header          X-Real-IP          $remote_addr;
      proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto  https;
      proxy_buffer_size         128k;
      proxy_buffers             8 128k;
      proxy_busy_buffers_size   256k;
      proxy_cookie_path         ~*^/(.*) "/$1; SameSite=Lax";
    }
  }
}
```

请注意最后一个`https`标头值，该值是通知
servlet容器，该请求通过HTTPS发出。为了
Tomcat还需要使用HTTPS正确生成`Location` URL头
在Tomcat`server.xml`文件中向连接器添加其他两个参数：

```xml
<Connector scheme="https" proxyPort="443" />
```

### 使用Nginx启用缓存 { #install_enabling_caching_ssl_nginx } 

要求提供报告，图表，地图和其他与分析相关的资源
通常会花费一些时间来响应，并且可能会占用大量服务器
资源。为了缩短响应时间，请减少
服务器并隐藏潜在的服务器停机时间，我们可以引入缓存代理
在我们的服务器设置中。缓存的内容将存储在目录中
/ var / cache / nginx，最多将分配250 MB的存储空间。 Nginx的
将自动创建此目录。

```text
http {
  ..
  proxy_cache_path  /var/cache/nginx  levels=1:2  keys_zone=dhis:250m  inactive=1d;


  server {
    ..

    # Proxy pass to servlet container and potentially cache response

    location / {
      proxy_pass                http://localhost:8080/;
      proxy_redirect            off;
      proxy_set_header          Host               $host;
      proxy_set_header          X-Real-IP          $remote_addr;
      proxy_set_header          X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header          X-Forwarded-Proto  https;
      proxy_buffer_size         128k;
      proxy_buffers             8 128k;
      proxy_busy_buffers_size   256k;
      proxy_cookie_path         ~*^/(.*) "/$1; SameSite=Lax";
      proxy_cache               dhis;
    }
  }
}
```

> **重要**
>
>请注意，服务器端缓存会缩短DHIS2安全性
>从某种意义上说是功能，这些请求命中了服务器端缓存
>将直接从DHIS2控制范围之外的缓存中提供
>和servlet容器。这意味着请求URL可以是
>猜测并由未经授权的用户从缓存中检索报告。
>因此，如果您捕获敏感信息，请设置服务器端
>不建议使用缓存。

### 使用Nginx进行速率限制 { #install_rate_limiting } 

DHIS 2中的某些Web API调用,如`analytics` API,是计算密集型的。因此，最好对这些API进行速率限制，以允许系统的所有用户充分利用服务器资源。速率限制可以通过`nginx`实现。有多种实现速率限制的方法，这旨在记录基于nginx的方法。

The below nginx configuration will rate limit the `analytics` web API, and has the following elements at the *http* and *location* block level (the configuration is shortened for brevity):

```text
http {
  ..
  limit_req_zone $binary_remote_addr zone=limit_analytics:10m rate=5r/s;

  server {
    ..

    location ~ ^/api/(\d+/)?analytics(.*)$ {
      limit_req    zone=limit_analytics burst=20;
      proxy_pass   http://localhost:8080/api/$1analytics$2$is_args$args;
      ..
    }
  }
}
```

配置的各个元素可以描述为：

- * limit_req_zone $ binary_remote_addr *：速率限制是针对每个请求IP进行的。
- * zone = limit_analytics：20m *：Analytics API的速率限制区域，最多可容纳10 MB的请求IP地址。
- * rate = 20r / s *：每个IP每秒被授予5个请求。
- *location ~ ^/api/(\d+/)?analytics(.\*)$*：对分析 API 端点的请求有速率限制。
- *burst=20*：最多 20 个请求的突发将排队等候，并在稍后时间提供服务；更多请求将导致`503`。

有关完整说明，请查阅[nginx文档]（https://www.nginx.com/blog/rate-limiting-nginx/）。

### 使用Nginx使资源可用 { #install_making_resources_available_with_nginx } 

在某些情况下，希望公开发布某些资源
无需身份验证即可在Web上使用。一个例子是
当您想在Web API中进行与数据分析相关的资源时
在Web门户中可用。以下示例将允许访问
基本的图表，地图，报告，报告表和文档资源
通过将* Authorization * HTTP标头注入
请求。它将从请求中删除Cookie标头，
从响应中获取Set-Cookie标头，以避免更改
当前登录的用户。建议为此创建一个用户
目的仅给出所需的最低权限。授权
值可以通过Base64编码，并在用户名后附加一个
冒号和密码，并以“ Basic”作为前缀，更准确地说是“ Basic”
base64 \ _encode（username：password）“。它将检查使用的HTTP方法
用于请求并返回* 405方法不允许*（如果不是GET，则为其他方法）
检测到。

为此类公共用户设置一个单独的域可能是有利的
使用这种方法时。这是因为我们不想更改
已登录用户访问公共帐户时的凭据
资源。例如，当您的服务器部署在somedomain.com上时，
您可以在api.somedomain.com上设置专用的子域，并指向URL
从您的门户到此子域。

```text
http {
  ..

  server {
    listen       80;
    server_name  api.somedomain.com;

    location ~ ^/(api/(charts|chartValues|reports|reportTables|documents|maps|organisationUnits)|dhis-web-commons/javascripts|images|dhis-web-commons-ajax-json|dhis-web-mapping|dhis-web-visualizer) {
    if ($request_method != GET) {
        return 405;
      }

      proxy_pass         http://localhost:8080;
      proxy_redirect     off;
      proxy_set_header   Host               $host;
      proxy_set_header   X-Real-IP          $remote_addr;
      proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Proto  http;
      proxy_set_header   Authorization      "Basic YWRtaW46ZGlzdHJpY3Q=";
      proxy_set_header   Cookie             "";
      proxy_hide_header  Set-Cookie;
    }
  }
}
```


### 使用nginx{ #install_block_android_versions } 阻止特定的安卓应用程序版本 

在某些情况下，系统管理员可能希望根据 DHIS2 应用程序的版本来阻止某些 Android 客户端。例如，如果现场用户尚未将其 Android 应用程序版本更新到特定版本，系统管理员希望阻止其访问以强制更新；或者完全相反的情况，系统管理员希望阻止应用程序的新版本，因为它们尚未经过测试。这可以通过在 `nginx` 配置文件中使用特定的 *User-Agent* 规则轻松实现。

```text
http {

  server {
    listen       80;
    server_name  api.somedomain.com;

    # Block the latest Android App as it has not been tested
    if ( $http_user_agent ~ 'com\.dhis2/1\.2\.1/2\.2\.1/' ) {
        return 403;
    }

    # Block Android 4.4 (API is 19) as all users should have received new tablets
    if ( $http_user_agent ~ 'com\.dhis2/.*/.*/Android_19' ) {
        return 403;
    }
  }
}
```

> **Note**
> For the implementation of the method described above note the following: 
> * Before version 1.1.0 the *User-Agent* string was not being sent.
> * From version 1.1.0 to 1.3.2 the *User-Agent* followed the pattern Dhis2/AppVersion/AppVersion/Android_XX
> * From version 2.0.0 and above the *User-Agent* follows the pattern com.dhis2/SdkVersion/AppVersion/Android_XX
> * Android_XX refers to the Android API level i.e. the Android version as listed [here](https://developer.android.com/studio/releases/platforms).
> * nginx uses [PCRE](http://www.pcre.org/) for Regular Expression matching .

## DHIS2 配置参考 (dhis.conf){ #install_dhis2_configuration_reference } 

下面介绍了 `dhis.conf` 配置文件的全部配置选项。配置文件应放置在由 `DHIS2_HOME` 环境变量指向的目录中。

> **注意**
>
>您不应尝试直接使用此配置文件，而应将其用作可用配置选项的参考。许多属性是可选的。

属性
# ----------------------------------------------------------------------
# PostgreSQL 的数据库连接 [必填] ```properties
# ----------------------------------------------------------------------

# Hibernate SQL 方言
connection.dialect = org.hibernate.dialect.PostgreSQLDialect

# JDBC 驱动类
connection.driver_class = org.postgresql.Driver

# 数据库连接 URL
connection.url = jdbc:postgresql:dhis2

# 数据库用户名
connection.username = dhis

# 数据库密码（敏感）
connection.password = xxxx

# 连接池的最大大小（默认：40）
connection.pool.max_size = 40

# ----------------------------------------------------------------------
# 数据库连接池 [可选］
# ----------------------------------------------------------------------

# 连接池在任何给定时间内维护的最少连接数（默认值：5）。
connection.pool.min_size = 5

# 启动时池将尝试获取的连接数。应介于 minPoolSize 和 maxPoolSize 之间。
connection.pool.initial_size = 5

# 决定池用完时每次尝试获取的连接数。
connection.pool.acquire_incr = 5

# 连接在被丢弃前可保持在池中但未使用的秒数。零表示闲置连接永不过期。(默认值：7200）
connection.pool.max_idle_time = 7200

# 超过 minPoolSize 的连接在被删除前允许在池中保持闲置的秒数（默认值：0）
connection.pool.max_idle_time_excess_con = 0

# 如果大于 0，dhis2 将每隔此秒数测试池中所有闲置但未选中的连接。(默认值：0）
connection.pool.idle.con.test.period = 0

# 如果开启，则每次连接检出时都会执行一次操作，以验证连接是否有效。(默认值：false）
connection.pool.test.on.checkout = false

# 如果开启，将在每次连接检入时异步执行操作，以验证连接是否有效。(默认值：on）
connection.pool.test.on.checkin = on

# 确定所有连接测试将执行的查询
connection.pool.preferred.test.query = select 1

# 决定 dhis2 用于 jdbc 操作的辅助线程数量。(默认值：3）
connection.pool.num.helper.threads = 3

# 数据库连接池类型，支持的类型有 "c3p0"（默认）、"hikari"、"unpooled
db.pool.type = c3p0

# ----------------------------------------------------------------------
# 服务器 [必填］
# ----------------------------------------------------------------------

# DHIS 2 实例的基本 URL
server.base.url = https://play.dhis2.org/dev 

# 如果系统部署在 HTTPS 上，则启用安全设置，可以是 "关闭"、"打开
server.https = off

# ----------------------------------------------------------------------
# 系统 [可选]
# ----------------------------------------------------------------------

# 系统标识符
system.id = hmis1.country.org

# 仅用于数据库读取操作的系统模式，可以是 "关闭"、"开启
system.read_only_mode = 关闭

# 以秒为单位的会话超时，默认为 3600
system.session.timeout = 3600

# SQL 视图保护表，可以是 "开 "或 "关
system.sql_view_table_protection = on

# 启用 SQL 视图写入功能，可选择 "开启 "或 "关闭
system.sql_view_write_enabled = off

# 禁用服务器端程序规则的执行，可以是 "开"、"关
system.program_rule.server_execution = on

# 允许服务器调用的远程服务器，主机名应以'/'结尾，默认为空
system.remote_servers_allowed = https://server1.org/,https://server2.org/

# ----------------------------------------------------------------------
# 加密 [可选]
# ----------------------------------------------------------------------

# 加密密码（敏感）
encryption.password = xxxx

# ----------------------------------------------------------------------
# 文件存储 [可选]
# ----------------------------------------------------------------------

# 文件存储提供商。目前支持 "filesystem"（默认）、"aws-s3 "和 "s3"。
filestore.provider = filesystem

# 文件系统中 DHIS2_HOME 下方的文件夹/存储桶名称，AWS S3 中的 "bucket
filestore.container = files

# 可访问 S3 兼容 API 的 URL（仅适用于提供商 "s3）
filestore.endpoint = http://minio:9000 

# 数据中心位置（非必填）
filestore.location = eu-west-1

# 公共身份/用户名
filestore.identity = dhis2-id

# 密钥/密码（敏感）
filestore.secret = xxxx

# ----------------------------------------------------------------------
# LDAP [可选]
# ----------------------------------------------------------------------

# LDAP 服务器 URL
ldap.url = ldaps://300.20.300.20:636

# LDAP 管理器用户区分名称
ldap.manager.dn = cn=JohnDoe,ou=Country,ou=Admin,dc=hisp,dc=org

# LDAP 管理员用户密码（敏感）
ldap.manager.password = xxxx

# LDAP 条目区分名称搜索基数
ldap.search.base = dc=hisp,dc=org

# LDAP 条目区分名称过滤器
ldap.search.filter = (cn={0})

# ----------------------------------------------------------------------
# 节点 [可选］
# ----------------------------------------------------------------------

# 节点标识符，可选，在集群中有用
node.id = 'node-1'

# ----------------------------------------------------------------------
# 监控 [可选]
# ----------------------------------------------------------------------

# DHIS2 API 监控
monitoring.api.enabled = on

# JVM 监控
monitoring.jvm.enabled = on

# 数据库连接池监控
monitoring.dbpool.enabled = 开

# 休眠监控，生产中不使用
monitoring.hibernate.enabled = off

# 正常运行时间监控
monitoring.uptime.enabled = on

# CPU 监控
monitoring.cpu.enabled = on

# ----------------------------------------------------------------------
# Redis [可选]
# ----------------------------------------------------------------------

# 启用 Redis
redis.enabled = true

# Redis 主机名
redis.host = localhost

# Redis 端口
redis.port = 6379

# Redis 密码
redis.password = xxxx

# 连接 Redis 时使用 SSL，可选 "开启 "或 "关闭"（默认值）
redis.use.ssl = off

# ----------------------------------------------------------------------
# 分析 [可选]
# ----------------------------------------------------------------------

# 分析数据库 JDBC 驱动程序类
analytics.connection.driver_class = org.postgresql.Driver

# 分析数据库连接 URL
analytics.connection.url = jdbc:postgresql:analytics

# 分析数据库用户名
analytics.connection.username = analytics

# 分析数据库密码
analytics.connection.password = xxxx

# 未记录的分析表。可以是 "开启"（默认）或 "关闭"。开启将提高分析地理生成性能，但代价是无法复制。
analytics.table.unlogged = on

# ----------------------------------------------------------------------
# 系统遥测 [可选］
# ----------------------------------------------------------------------

# 系统监控 URL
system.monitoring.url = 

# 系统监控用户名
system.monitoring.username = dhis

# 系统监控密码（敏感）
system.monitoring.password = xxxx

# ----------------------------------------------------------------------
# 系统更新通知 [可选］
# ----------------------------------------------------------------------

# 系统更新通知，例如 DHIS 2 的新版本可用
system.update_notifications_enabled = on

# ----------------------------------------------------------------------
# 日志记录 [可选]
# ----------------------------------------------------------------------

# 日志文件的最大大小，默认为 100MB
logging.file.max_size = 200MB

# 滚动日志存档文件的最大数量，默认为 0
logging.file.max_archives = 1

# ----------------------------------------------------------------------
# 日志级别 [可选]
# ----------------------------------------------------------------------

# DHIS 2 日志级别（级别可以是 TRACE、DEBUG、INFO、WARN、ERROR）
logging.level.org.hisp.dhis = INFO

# Spring 日志级别（指 Java 类包名称）
logging.level.org.springframework = INFO

# ----------------------------------------------------------------------
# App Hub [可选]
# ----------------------------------------------------------------------

# DHIS2 应用程序集线器服务的基本 URL
apphub.base.url = https://apps.dhis2.org

# DHIS2 App Hub 服务的基本 API URL，用于应用程序更新
apphub.api.url = https://apps.dhis2.org/api

# ----------------------------------------------------------------------
# 会话 [可选]
# ----------------------------------------------------------------------

# 每个用户在不同客户端上可能并发的会话数量
max.sessions.per_user = 10
```

## 变更日志 { #install_changelog } 

当某些实体在系统中更改时，DHIS2将条目写入更改日志。实体分为两类：_Aggregate_和_tracker_。 _aggregate_类别包括对汇总数据值的更改。 _tracker_类别包括对项目实例，项目临时所有权项，跟踪的实体属性值和跟踪的实体数据值的更改。

The changelog for both categories are enabled by default. You can control whether to enable or disable the changelog by category through the `dhis.conf` configuration file using the properties described below. Property options are `on` (default) and `off`.

更改日志的好处是能够查看已对数据执行的更改。禁用更改日志的好处是，通过避免将更改日志项写入数据库的成本以及较少使用的数据库存储，可以对性能进行较小的改进。建议启用变更日志，如果禁用它，则应格外小心。

```属性
＃汇总变更日志，可以为“ on”，“ off”
changelog.aggregate =开启

＃Tracker changelog，可以为“ on”，“ off”
changelog.tracker =开
```

## 应用程序日志记录 { #install_application_logging } 

本节介绍DHIS 2中的应用程序日志记录。

### 日志文件 { #log-files } 

DHIS2应用程序日志输出定向到多个文件和位置。首先，将日志输出发送到标准输出。 Tomcat Servlet容器通常将标准输出输出到“ logs”下的文件：

     <tomcat-dir> /logs/catalina.out

其次，日志输出会写入 DHIS2 主目录下的 "logs "目录，该目录由 `DHIS2_HOME` 环境变量定义。所有输出都有一个主日志文件，各种后台进程也有单独的日志文件。
后台进程的日志文件。主文件还包括后台进程日志。日志文件的上限为 50 Mb，日志内容会不断添加。

     <DHIS2_HOME> /logs/dhis.log
     <DHIS2_HOME> /logs/dhis-analytics-table.log
     <DHIS2_HOME> /logs/dhis-data-exchange.log
     <DHIS2_HOME> /logs/dhis-data-sync.log

### 日志配置 { #log-configuration } 

要覆盖默认日志配置，您可以指定一个名为
属性，其名称为 `log4j2.configurationFile` ，值指向
[Log4j 版本 2］(https://logging.apache.org/log4j/2.x/manual/configuration.html)
配置文件，如下所示：

```属性
-配置文件=/home/dhis/config/log4j2.properties
```

可以设置Java系统属性，例如通过* JAVA \ _OPTS *环境变量或tomcat启动脚本中。

覆盖日志配置的第二种方法是在配置文件 `dhis.conf` 中指定日志属性。支持的属性有

```属性
＃日志文件的最大大小，默认为'100MB'
logging.file.max_size = 250MB

＃最大滚动日志归档文件数，默认为0
logging.file.max_archives = 2
```

DHIS2 最终将逐步停止向标准 out / catalina.out 发送日志，因此建议使用 `DHIS2_HOME` 下的日志。

DHIS2 将提供以下背景值：

* `sessionId`: Current user's session ID
* `xRequestID`: An alphanumeric ID as send by the `X-Request-ID` HTTP header for the currently processed request; empty if not provided

要在日志中使用上下文变量，请使用 `-X{<name>}` 将其添加到日志模式中，如本例所示：

    *%-5p %d {ISO8601} %m (%F [%t])%X{sessionId} %X{xRequestID}%n

### 日志级别配置{ #log-level-configuration } 

要设置单个软件包的日志级别，可以在 `dhis.conf` 中指定格式为 `logging.level.{package-names}` 的属性。例如，要将整个 Spring Framework 的日志级别设为 DEBUG 及以上，可以指定

```
logging.level.org.springframework = DEBUG
```
要将 DHIS2 服务的日志级别设置为 DEBUG，可以指定

```
logging.level.org.hisp.dhis = DEBUG
```

常见的日志级别是`DEBUG`、`INFO`、`WARN`和`ERROR`。

> **注**
> 
> 嵌入式 DHIS2 Jetty 版本不支持日志级别配置。

## 使用PostgreSQL数据库 { #install_working_with_the_postgresql_database } 

管理 DHIS2 实例时的常见操作是转储和恢复数据库。请注意，在备份 DHIS2 数据库时，最好排除系统生成的表，如资源表和分析表。要将数据库转储（复制）到文件中，可以调用以下命令。

```bash
pg_dump{database} -U{user} -T "_*" -T "analytics*" -f{filename}
```
在下面的示例中，数据库名称是 `dhis2`，用户是 `dhis`，输出文件名是 `dhis2.sql`：

```bash
pg_dump dhis2 -U dhis -T "analytics*" -T "_*" -f dhis2.sql
```

使用 `gzip` 压缩输出文件是个好方法，可以这样做：

```bash
pg_dump dhis2 -U dhis -T "analytics*" -T "_*"| gzip > dhis2.sql.gz
```

要在另一个系统上恢复数据库副本，您首先需要创建一个空数据库，如安装部分所述。如果您创建了压缩版本，还需要`gunzip`副本。要恢复副本，您可以调用以下命令：

```bash
psql -d dhis2 -U dhis -f dhis2.sql
```

还原压缩数据库副本，无需先解压缩：

```bash
gunzip -c dhis2.sql.gz | psql -d dhis2 -U dhis
```

