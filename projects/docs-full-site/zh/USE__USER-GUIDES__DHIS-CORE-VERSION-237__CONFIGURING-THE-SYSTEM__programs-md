---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.37/src/user/configure-programs-in-the-maintenance-app.md"
revision_date: '2023-02-20'
tags:
- DHIS core version 2.37
- 使用
---

# 在维护应用中配置程序 { #configure_programs_in_maintenance_app } 

## 关于程序 { #about_program_maintenance_app } 

传统上，公共卫生信息系统一直在报告
整个健康计划中服务提供的汇总数据。这个
不允许您跟踪提供这些服务的人员。在
DHIS2，您可以分阶段定义自己的程序。这些程序是
“跟踪器”功能的重要部分，可让您跟踪
个人记录。您还可以跟踪其他“实体”，例如井或
保险。您可以创建两种类型的程序：



表：项目类型

| 节目类型 | 描述 | 使用示例 |
|---|---|---|
| 事件项目 | *无*注册计划的单一事件（匿名计划或 SEWoR）<br> <br>通过卫生系统跟踪匿名的个别事件。没有任何人或实体与这些单独的交易相关。<br> <br>只有一个程序阶段。 | 记录健康病例，无需在系统中注册任何信息。<br> <br>记录调查数据或监测线列表。 |
| 追踪项目 | *带有*注册程序 (SEWR) 的单一事件<br> <br>通过每个事件跟踪实体（人员、商品等）与卫生系统的个人交易<br> <br>只有一个计划阶段。<br> <br>跟踪的实体实例 (TEI) 只能在计划中注册一次。 | 记录出生证明和死亡证明。 |
|| *使用*注册程序 (MEWR) 的多事件<br> <br>通过每个事件跟踪实体（人员、商品等）与卫生系统的个人交易<br> <br>具有多个计划阶段。 | 母亲健康计划分为 ANC 访视（2-4+）、分娩、PNC 访视等阶段。 |

要创建程序，必须首先配置几种类型的元数据
对象。您可以在**维护**应用中创建这些元数据对象。



表：维护应用程序中的程序元数据对象

| 对象类型 | 描述 | 可用功能 |
|---|---|---|
| 事件项目 | 无需注册即可记录单个事件的程序 | 创建、编辑、共享、删除、显示详细信息和翻译 |
| 追踪项目 | 通过注册记录单个或多个事件的程序 | 创建、编辑、共享、删除、显示详细信息和翻译 |
| 计划指标 | 基于跟踪实体的数据元素和属性的表达式，用于根据公式计算值。 | 创建、编辑、克隆、共享、删除、显示详细信息和翻译 |
| 节目规则 | 允许您在**跟踪器捕获**和**事件捕获**应用程序中创建和控制用户界面的动态行为。 | 创建、编辑、克隆、删除、显示详细信息和翻译 |
| 程序规则变量 | 用于创建程序规则表达式的变量。 | 创建、编辑、克隆、删除、显示详细信息和翻译 |
| 关系类型 | 定义被跟踪实体 A 和被跟踪实体 B 之间的关系，例如母亲和孩子。 | 创建、编辑、克隆、共享、删除、显示详细信息和翻译 |
| 追踪实体类型 | 可通过系统跟踪的实体类型。可以是从人到商品的任何东西，例如药物或人。<br> <br>程序必须有一个跟踪实体。要将跟踪实体实例注册到程序中，实体的跟踪实体和程序的跟踪实体必须相同。<br> <br> **注意**<br> <br> 必须仅使用一个跟踪实体来指定程序。只有与计划的跟踪实体相同的跟踪实体才能注册到该计划。 | 创建、编辑、克隆、共享、删除、显示详细信息和翻译 |
| 跟踪实体属性 | 用于注册跟踪实体的额外信息。<br> <br>可以在程序之间共享。 | 创建、编辑、克隆、共享、删除、显示详细信息和翻译 |
| 程序 | 程序由程序阶段组成。 | 创建、编辑、共享、删除、分配给组织部门、显示详细信息和翻译 |
| 程序阶段 | 计划阶段定义了每个阶段应采取哪些操作。 | 创建、编辑、共享、更改排序顺序、删除、显示详细信息和翻译 |
| 程序指标组 | 一组方案指标 | 创建、编辑、克隆、共享、删除、显示详细信息和翻译 |
| 验证规则 | 验证规则基于定义数据元素值之间的关系的表达式。 | 创建、编辑、克隆、共享、删除、显示详细信息和翻译 |
| 节目通知 | 自动消息提醒<br> <br>将提醒设置为在预定约会之前和错过访问之后自动发送到已注册的跟踪实体实例。 | 创建、编辑和删除 |
| 节目阶段通知 | 自动消息提醒<br> <br>设置提醒，当一个程序阶段完成时，或在到期日期之前或之后自动发送。 | 创建、编辑和删除 |

## 在维护应用程序中配置事件程序 { #configure_event_program_in_maintenance_app } 

### 关于活动计划 { #about_event_program } 

*没有*注册程序的单个事件称为事件程序。
您可以在**维护**应用中对其进行配置。活动节目可以有
三种类型的数据输入形式：



表：活动计划的数据输入表格类型

| 表格类型 | 描述 |
|---|---|
| 基本的 | 列出属于该程序的所有数据元素。您可以更改数据元素的顺序。 |
| 部分 | 部分对数据元素进行分组。然后，您可以排列各部分的顺序，以创建所需的数据输入表单布局。 |
| 风俗 | 将数据输入表单定义为 HTML 页面。 |

> **注意**
>
>-如果自定义表单和部分表单都属于
>现在。
>
>-如果未定义自定义或部分表格，则基本表格为
>使用。
>
>-Android应用程序仅支持部分表格。

您可以为活动节目创建*节目通知*。这
通知通过内部 DHIS2 消息系统发送，
通过电子邮件或短信 (SMS)。您可以使用程序通知
例如，向跟踪的实体发送 10 天自动提醒
在预定的约会之前。您使用程序的跟踪实体
属性（例如名字）和程序参数（例如
注册日期）创建通知模板。在里面
**参数**字段，您将找到可用跟踪实体的列表
属性和程序参数。

### 工作流程：创建事件程序 { #workflow_event_program } 

1.  输入事件程序详细信息。

2.  分配数据元素。

3.  创建数据输入表单：**基本**，**部分**或**自定义**。

4.  将程序分配给组织单位。

5.  创建程序通知。

### 创建或编辑事件程序 { #create_event_program } 

#### 输入活动计划详细信息 { #enter-event-program-details } 

1.  打开**维护**应用程序并单击**程序** \> **程序**。

2.  单击添加按钮，然后在弹出菜单中选择**事件程序**。

3.  输入程序详细信息，然后单击下一步。


    |领域|描述 |
    |---|---|
    | **姓名** |程序的名称。 |
    | **颜色** |数据捕获应用程序中该程序使用的颜色。 |
    | **图标** |数据捕获应用程序中用于该程序的图标。 |
    | **简称** |程序的简称。短名称用作分析应用程序中的默认图表或表格标题。 |
    | **描述** |该程序的详细描述。 |
    | **版本** |程序的版本。例如，当人们在 Android 实现中离线收集数据时，就会使用此方法。当他们上线并同步元数据时，他们应该获得该程序的最新版本。 |
    | **类别组合** |您要使用的类别组合。默认设置是**无**。 |
    | **数据审批工作流程** |您要使用的数据审批工作流程。默认设置是**无值**。 |
    | **已完成的活动截止日期** |定义您可以编辑已完成事件的天数。这意味着，当活动完成且已过了指定的到期天数时，该活动将被锁定。<br> <br>如果如果您将“已完成的事件到期天数”设置为“10”，则事件将在完成日期后十天被锁定。在此日期之后，您将无法再编辑该事件。
    | **到期期限类型**<br> <br>**到期天数** |到期天数定义了上一期间结束后的多少天可以编辑事件。期间类型由到期期间类型定义。这意味着，当自上一期间的结束日期起经过指定的到期天数时，该期间的事件将被锁定。<br>  <br>如果您将到期类型设置为“每月”，并将到期天数设置为“10”，并且月份为 10 月，则您无法在 11 月 10 日之后添加或编辑 10 月的事件。 |
    | **完成后阻止报名表** |选择复选框可在该节目的事件完成后阻止条目表单。<br> <br>这意味着条目中的数据在将状态重置为未完成之前，无法更改表单。 |
    | **功能类型** |设置程序是否要捕获地理特征类型。 <br>- **无** 未捕获任何内容。 <br>- **多边形** 捕获一个区域。对于单个事件程序，该区域将是代表正在捕获的事件的区域。对于跟踪计划，该区域将代表注册区域。 <br>- **点** 捕获点/坐标。对于单事件程序，该点将代表正在捕获的事件。对于跟踪程序，该点将代表注册情况。 |
    | **验证策略** |设置服务器和客户端验证要求。 <br><br>无论验证策略如何，始终都会执行数据类型验证。例如，整数字段永远不会存储包含文本的字段。 <br>- **完成时** 此选项将强制在完成事件时修复必填字段和错误消息，但事件可以保存到服务器而不通过这些验证要求。由于遗留原因，这始终是跟踪器程序的验证策略，其中事件中的每个数据值在输入数据时都存储到服务器。 <br>- **更新和插入时** 此选项将在将事件保存到服务器时强制执行必需的字段验证，无论完成状态如何。使用此选项时，如果没有通过验证，则无法存储任何事件。 |
    | **预生成事件UID** |选择复选框以预先生成唯一的事件 ID 号。 |
    | **报告日期说明** |输入报告日期的说明。<br> <br>此说明显示在案例输入表单中。 |

1.  点击下一步。

#### 分配数据元素 { #assign_data_elements } 

1.  点击**分配数据元素**。

2.  在可用项目列表中，双击要删除的数据元素。
    想要分配给事件程序。

3.  （可选）为每个数据元素添加其他设置：


    |设置|描述 |
    |---|---|
    | **必修** |在完成事件之前，必须将该数据元素的值填写到数据输入表单中。 |
    | **允许在别处提供** |指定该数据元素的值是否来自其他设施，而不是来自输入该数据的设施。 |
    | **在报告中显示** |将此数据元素的值显示到单个事件中，无需注册数据输入功能。 |
    | **未来的日期** |将允许用户为日期数据元素选择将来的日期。 |
    | **移动渲染类型** |可用于为移动设备选择不同的渲染类型。可用选项根据数据元素的值类型而有所不同。例如，对于数值，您可以选择“默认”、“值”、“滑块”、“线性比例”和“微调器”。 |
    | **桌面渲染类型** |警告：尚未实现。<br> <br>可用于为桌面（即 Web 界面）选择不同的渲染类型。可用选项根据数据元素的值类型而有所不同。例如，对于数值，您可以选择“默认”、“值”、“滑块”、“线性比例”和“微调器”。 |

4.  点击下一步。

#### 创建数据输入表单 { #create_data_entry_forms } 

数据输入表单决定数据元素的显示方式
**事件捕获**应用程序中的用户。

1.  点击**创建数据输入表单**。

2.  点击**基本**，**部分**或**自定义**。

3.  要创建**基本**数据输入表单：拖放数据
    元素按您想要的顺序排列。

4.  要创建**部分**数据输入表单，请执行以下操作：

    1.  点击添加按钮，然后输入部分的名称，说明和
        桌面设备和移动设备的渲染类型。

    2.  单击该部分，使其以黑线突出显示。

    3.  通过单击数据旁边的加号来添加数据元素
        元素的名称。

    4.  重复上述步骤，直到获得所需的所有部分。

    5.  更改部分顺序：单击选项菜单，然后拖动
        部分到您想要的地方。

5.  要创建** Custom **数据条目，请执行以下操作：使用WYSIWYG编辑器
    创建一个完全定制的表单。如果您选择**来源**，则您
    可以直接将HTML代码粘贴到编辑区域中。你也可以
    插入图像，例如标志或徽标。

6.  点击下一步。

#### 访问 { #access } 

访问选项决定谁可以捕获程序数据或查看/编辑数据
程序的元数据。程序可以与组织单位共享，
另外，主程序和任何程序阶段的访问选项
可以通过**共享对话框**进行配置。访问选项是
在**访问权限**标签中可用。

分配组织单位：

1.  在组织树中，双击您的组织单位
    想要添加到程序中。

    您可以通过展开目录树来在树中找到组织单位
    分支（单击箭头符号），或通过搜索
    名称。所选组织单位显示为橙色。

更改角色和访问权限：

1.  向下滚动到**角色和访问权限**部分。

    第一行显示主程序的访问选项，每个
    下一行显示一个程序阶段的选项。程序
    带有警告图标（感叹号）的阶段包含访问选项
    偏离主程序，这意味着它们可以通过
    不同的用户组合。

2.  单击任一行，将显示**共享对话框**。

3.  相应地修改访问选项。请参阅有关
    共享对话框以获取详细信息。

4.  点击**应用**按钮。

5.  对每个程序/程序阶段重复该过程。您也可以复制
    从主程序到子程序的所有访问选项：

    1.  选择您想要具有类似访问权限的程序阶段
        切换复选框，将其作为主程序
        程序阶段的右侧。您也可以选择
        **选择全部**程序阶段，**取消选择全部**程序阶段
        或根据访问选项**选择类似**阶段，以
        主程序。默认情况下会切换相似的阶段。

    2.  点击**应用于选定阶段**

#### 创建程序通知 { #create_program_notifications } 

1.  创建您要发送的消息：

    1.  点击**发送什么？**。

    2.  输入一个**名称**。

    3.  创建**主题模板**：双击中的参数
        **模板变量**字段将其添加到您的主题。

        > **Note**
        >
        > The subject is not included in text messages.

    4.  创建**消息模板**：双击参数
        **模板变量**列表中的名称以将它们添加到您的
        信息。

        亲爱的A {w75KJ2mc4zz}：您现在已注册V {program \ _name}。

2.  定义*何时*要发送消息：

    1.  单击**什么时候发送？**。

    2.  选择一个**通知触发器**。


        |通知触发 |描述 |
        |---|---|
        |计划阶段完成|节目阶段完成时发送节目阶段通知 |
        |预定天数（预产期）|计划阶段通知将在截止日期之前或之后 XX 天发送<br> <br>您需要输入天数在发送通知的预定日期之前或之后。 |

3.  定义要将消息发送给的*谁*：

    1.  单击**将其发送给谁？**。

    2.  选择**通知**。


        |通知收件人 |描述 |
        |---|---|
        |跟踪的实体实例 |通过电子邮件或短信接收计划通知。<br> <br>要接收计划通知，收件人必须拥有电子邮箱邮件地址或电话号码属性。 |
        |组织单位联系方式 |通过电子邮件或短信接收计划通知。<br> <br>要接收计划通知，接收组织单位必须拥有注册联系人并提供电子邮件地址和电话号码。 |
        |组织单位的用户 |所有注册到所选组织单位的用户都会通过内部 DHIS2 消息系统接收计划通知。 |
        |用户组|所选用户组的所有成员都会通过内部 DHIS2 消息系统接收计划通知 |
        |节目|待定 |

    3. 单击“**保存**”。

4.  重复上述步骤，创建所需的所有程序通知。

5.  点击**保存**。 

> **注意**
>
> 您可以在 **Data 中配置何时发送程序通知
> 管理**应用程序 \> **日程安排** \> **程序通知
> 调度程序**。
>
> - 单击 **立即运行** 立即发送程序通知。
>
> - 选择一个时间并点击**开始**来安排节目
> 要在特定时间发送的通知
时间。

### 参考信息：程序通知参数 { #reference_information_event_program_notification_parameters } 



表：程序通知中使用的程序通知参数

| 通知类型 | 变量名 | 可变代码 |
|---|---|---|
| 程序 | 当前日期 | `V{current_date}` |
|| 自注册日期起的天数 | `V{days_since_enrollment_date}` |
|| 开学报道日 | `V{enrollment_date}` |
|| 事件日期 | `V{incident_date}` |
|| 组织单位名称 | `V{org_unit_name}` |
|| 节目名称 | `V{program_name}` |
| 程序阶段 | 当前日期 | `V{current_date}` |
|| 自到期日起的天数 | `V{days_since_due_date}` |
|| 距离预产期还有几天 | `V{days_until_due_date}` |
|| 到期日 | `V{due_date}` |
|| 组织单位名称 | `V{org_unit_name}` |
|| 节目名称 | `V{program_name}` |
|| 节目艺名 | `V{program_stage_name}` |
|| 活动状态 | `V{event_status}` |


## 在维护应用程序中配置跟踪器程序 { #configure_tracker_program_in_Maintenance_app } 

### 关于跟踪器程序 { #about-tracker-programs } 
*具有*注册的单个或多个事件程序。程序必须指定一个被查明的实体。只有与程序被查到的身份相同的被查实体才能加入被查明的实体
程序。程序需要您在。**维护**应用程序中创建的各种类型的元数据。

### 工作流程：创建一个跟踪程序 { #workflow_tracker_program } 

1.  输入跟踪器程序的详细信息。

2.  输入注册详细信息。

3.  分配属性并创建**部分**或**自定义**注册表格。

4. 创建程序阶段。

5. 配置访问权限，并分配给组织单位。

6. 创建程序和程序阶段通知。

### 创建或编辑Tracker程序 { #create-or-edit-a-tracker-program } 

1. 打开**维护**应用程序并单击**程序** \> **程序**。

2. 单击添加按钮并在弹出菜单中选择**随访项目**。

#### 输入程序详细信息 { #tracker_enter_programs_details } 

| 领域 | 描述 |
|---|---|
| **名称** | 程序的名称。 |
| **颜色** | 此程序在跟踪器捕获中使用的颜色。 |
| **图标** | Tracker 捕获中用于此程序的图标 |
| **简称** |  程序的简称。短名称用作分析应用程序中的默认图表或表格标题。  |
| **描述** | 该程序的详细描述。 |
| **版本** |  程序的版本。例如，当人们在 Android 实现中离线收集数据时，就会使用此方法。当他们上线并同步元数据时，他们应该获得该程序的最新版本。  |
| **跟踪的实体类型** |  您要使用的跟踪实体类型。一个程序只能有一种类型的跟踪实体。  |
| **类别组合** |  您要使用的类别组合。默认设置是**无**。  |
| **显示首页列表** |  选择复选框以显示跟踪器捕获中跟踪的实体实例的列表。如果未选择，将显示搜索。  |
| **第一阶段出现在注册页面** |  选中复选框可显示第一个程序阶段以及注册（注册）。  |
| **访问权限** | 选择程序的访问级别。 |
| **已完成的活动到期日** |  定义您可以编辑已完成事件的天数。这意味着当事件完成并且指定的到期天数已过时，事件将被锁定。 <br> <br> 如果您将“已完成的活动到期天数”设置为“10”，则活动将在完成日期十天后被锁定。在此日期之后，您将无法再编辑该事件。  |
| **到期期限类型**<br> <br>**到期天数** |  到期天数定义了上一期间结束后的多少天可以编辑事件。期间类型由到期期间类型定义。这意味着，当自上一期间的结束日期起经过指定的到期天数时，该期间的事件将被锁定。 <br> <br> 如果您将到期类型设置为“每月”，并将到期天数设置为“10”且月份为 10 月，那么您就无法在 11 月 10 日之后添加或编辑 10 月的活动。  |
| **搜索所需的最少属性数量** |  指定在程序中搜索跟踪实体时需要填写的跟踪实体属性的数量。  |
| **搜索中返回的跟踪实体实例的最大数量** |  指定搜索中应返回的跟踪实体实例的最大数量。输入 0 表示无限制。  |

#### 输入注册详细信息{ #enter_enrollment_details }

| 领域 | 描述 |
|---|---|
| **允许未来的注册日期** |如果您希望允许跟踪的实体实例在将来的某个日期注册到该计划中，请选择复选框。|
| **允许未来的事件日期** |如果您希望允许程序中的事件日期为将来的日期，请选择复选框。|
| **仅注册一次（每个跟踪实体实例生命周期）** |如果您希望跟踪实体只能在计划中注册一次，请选择复选框。例如，此设置在儿童疫苗接种或尸检计划中很有用，在这些计划中，多次注册跟踪实体是没有意义的。|
| **显示事件日期** |此设置允许您在跟踪实体注册到程序中时显示或隐藏事件日期字段。|
| **事件日期描述** | 输入事件日期的说明<br> <br>例如：<br> <br>在针对 1 岁以下儿童的免疫计划中，事件日期是儿童的生日。 <br> <br>在产妇计划中，事件日期是末次月经的日期。  |
| **输入注册日期的描述** |跟踪实体注册加入计划的日期|
| **忽略逾期事件** |当被跟踪实体注册到计划中时，将创建与计划阶段相对应的事件。如果选中此复选框，系统将不会生成逾期事件。|
| **功能类型** |设置程序是否要捕获地理特征类型。 <br> * **无：** 未捕获任何内容。<br> * **多边形：** 捕获一个区域。对于单个事件程序，该区域将是代表正在捕获的事件的区域。对于跟踪计划，该区域将代表注册区域。 <br> * **点：** 捕获点/坐标。对于单事件程序，该点将代表正在捕获的事件。对于跟踪程序，该点将代表注册情况。 |
| **相关程序** |选择与您正在创建的程序相关的跟踪程序，例如 ANC 和儿童程序。|


#### 分配跟踪的实体属性。 { #assign_tracked_entity_attributes } 

  1. 在**可用程序跟踪实体属性**列表中，双击
        您要分配给程序的属性。

  2. （可选）对于每个分配的属性，添加其他设置：

| 环境 | 描述 |
|---|---|
| **显示在列表中** |                          在跟踪器捕获的跟踪实体实例列表中显示此属性的值。                      |
| **强制的** |                          在完成事件之前，必须将该属性的值填写到数据输入表单中。                      |
| **未来的日期** |                          将允许用户为日期属性选择将来的日期。                      |
| **移动渲染类型** |                          可用于为移动设备选择不同的渲染类型。可用选项根据属性的值类型而有所不同。例如，对于数值，您可以选择“默认”、“值”、“滑块”、“线性比例”和“微调器”。                      |
| **桌面渲染类型** | 警告：尚未实现。<br> <br> 可用于为桌面（即 Web 界面）选择不同的渲染类型。可用选项根据属性的值类型而有所不同。例如，对于数值，您可以选择“默认”、“值”、“滑块”、“线性比例”和“微调器”。                      |

3. 创建注册表

   注册表单定义了如何在使用中的应用（例如Android和Tracker Capture）中向用户显示属性。

    1. 点击**创建注册表格**。

    2. 点击**部分**或**自定义**。

    3. 创建**部分**表格：

        1. 点击添加按钮，然后为台式机和移动设备输入版块的名称，说明和渲染类型。
        2. 单击该部分，使其以黑色边框突出显示。
        3. 通过单击要添加的数据元素名称旁边的加号来添加数据元素。
        4. 重复上述步骤，直到获得所需的所有部分。
            要更改节的顺序：单击选项菜单，然后将节拖动到所需的位置。

    4. 创建** Custom **注册表：使用WYSIWYG编辑器创建一个完全定制的表单。如果选择“源”，则可以将HTML代码直接粘贴到编辑区域中。您还可以插入图像，例如标志或徽标。

    5. 单击添加阶段。


#### 创建程序阶段 { #create_program_stages } 

一个程序由程序阶段组成。程序阶段定义哪个
每个阶段都应采取行动。

> **注意**
>
>在保存程序之前，不会保存对程序阶段的更改。

1. 单击加号创建一个程序阶段。
2. 输入程序阶段详细信息：
    1. 输入一个**名称**。
    2.  （可选）选择将要使用的**颜色**和**图标**
由数据捕获应用确定此程序阶段。
    3. 输入**说明**。
    4. 在 **预定开始天数** 字段中，输入最短天数
等待启动程序阶段的天数。
3. 输入可重复的程序阶段详细信息。
    1. Specify if the program stage is **Repeatable** or not.
    2. Select a **Period type**.
    3. 清除**完成后显示生成事件框**，如果您
    不想显示*创建新事件框*以创建新事件
    单击事件的*完成*后可重复的阶段
    以数据输入形式显示的阶段。该字段由
    默认。
    5. 输入**标准间隔天数**。重复可重复程序阶段的天数。
    6. （可选）选择 **默认的下一个计划日期**。这将显示**日期**类型的已分配数据元素的列表。如果选择了某个元素，Tracker 客户端将使用它作为默认开始日期。程序规则可以使用数据元素来动态安排事件之间的间隔。
4. 输入表格详细信息


  | 选项 | 行动 |
 |---|---|
 | **自动生成事件** |  清除复选框可防止在实体注册到计划中时自动创建此计划阶段的事件。  |
 | **注册后打开数据输入表** |  选择复选框可在实体注册加入该计划后自动打开此阶段的活动。  |
 | **报告使用日期** | 如果您已选中 **注册后打开数据输入表单** 复选框，还请选择 **要使用的报告日期**：**事件日期** 或 **注册日期**。 <br> 这是用作已自动打开的事件的报告日期的日期。 <br> <br> 如果**要使用的报告日期**被选择为这两个日期之一（'事件日期'/'注册日期”），在仪表板中，事件的“报告日期”将设置为这两个日期之一。  |
 | **事件的用户分配** |  选中复选框以启用程序阶段的用户分配。 <br> <br> 这意味着在跟踪器捕获中将有一个可以向其分配事件的用户列表。  |
 | **完成后阻止报名表** |  选中复选框可在本阶段活动完成后阻止报名表。 <br> <br> 这意味着在您将状态重置为不完整之前，条目表单中的数据无法更改。  |
 | **当阶段完成时要求用户完成程序** |  选中复选框以触发弹出窗口，询问用户是否要创建下一阶段的事件。  |
 | **阶段完成后要求用户创建新事件** |  选中复选框以触发弹出窗口，询问用户是否要在该阶段的事件完成时创建该阶段的新事件。 <br> <br> 仅当您选择 **Repeatable** 时，此属性才处于活动状态。  |
 | **按注册日期生成活动** |  选中它可以根据注册日期从该程序的程序阶段自动生成事件的到期日期。如果未选中，则基于事件日期生成截止日期。  |
 | **隐藏截止日期** | 选中复选框以隐藏事件的截止日期。 |
 | **功能类型** |  设置程序是否要捕获地理特征类型。 <br> * **无：** 未捕获任何内容。<br> * **多边形：** 捕获一个区域。对于单个事件程序，该区域将是代表正在捕获的事件的区域。对于跟踪计划，该区域将代表注册区域。 <br> * **点：** 捕获点/坐标。对于单事件程序，该点将代表正在捕获的事件。对于跟踪程序，该点将代表注册情况。 |
 | **预生成事件UID** | 选中复选框以预先生成唯一的事件 ID 号。 |
 | **报告日期说明** | 输入报告日期的说明。<br> <br>此说明显示在数据输入表单中。 |
 | **截止日期说明** | 输入截止日期的描述。 |

5.  将数据元素分配给程序阶段：

    1.  在 **可用数据元素** 列表中，双击
        您要分配给程序阶段的数据元素。

    2.  对于每个分配的数据元素，查看属性。您可以
        选择：


| 选项 | 行动 |
|---|---|
| **必修** |                      在完成事件之前，必须将该数据元素的值填写到数据输入表单中。                  |
| **允许在别处提供** |                      指定该数据元素的值是否来自其他设施，而不是来自输入该数据的设施。                  |
| **在报告中显示** |                      将该数据元素的值显示到单个事件中，无需注册数据输入功能。                  |
| **未来的日期** | 允许为日期数据元素选择未来的日期。 |
| **跳过同步** |                      允许在运行数据同步作业时跳过数据元素。                  |
| **移动渲染类型** |                      可用于为移动设备选择不同的渲染类型。可用选项根据属性的值类型而有所不同。例如，对于数值，您可以选择“默认”、“值”、“滑块”、“线性比例”和“微调器”。                  |
| **桌面渲染类型** | 警告：尚未实现。<br> <br> 可用于为桌面（即 Web 界面）选择不同的渲染类型。可用选项根据属性的值类型而有所不同。例如，对于数值，您可以选择“默认”、“值”、“滑块”、“线性比例”和“微调器”。                  |

6. 创建程序阶段的数据输入表单

    数据输入表单决定如何将数据元素显示为
    **Tracker Capture** 应用程序中的用户。

   1.  点击**创建数据输入表单**。

   2.  点击**基本**，**部分**或**自定义**。

   3.  要创建**基本**数据输入表单：拖放数据
       元素按您想要的顺序排列。

   4.  要创建**部分**数据输入表单，请执行以下操作：

       1.  点击添加按钮，然后输入部分的名称，说明和
           桌面设备和移动设备的渲染类型。

       2.  单击该部分，使其以黑色边框突出显示。

       3.  通过单击数据旁边的加号来添加数据元素
           元素的名称。

       4.  重复上述步骤，直到获得所需的所有部分。

       5.  更改部分顺序：单击选项菜单，然后拖动
           部分到您想要的地方。

   5.  要创建** Custom **数据条目，请执行以下操作：使用WYSIWYG编辑器
           创建一个完全定制的表单。如果您选择**来源**，则您
           可以直接将HTML代码粘贴到编辑区域中。你也可以
           插入图像，例如标志或徽标。

   6.  单击添加阶段。


#### 访问 { #tracker_program_access } 

访问选项决定谁可以捕获程序数据或查看/编辑数据
程序的元数据。程序可以与组织单位共享，
另外，主程序和任何程序阶段的访问选项
可以通过**共享对话框**进行配置。访问选项是
在**访问权限**标签中可用。

分配组织单位：

1.  在组织树中，双击您的组织单位
    想要添加到程序中。

    您可以通过展开目录树来在树中找到组织单位
    分支（单击箭头符号），或通过搜索
    名称。所选组织单位显示为橙色。

更改角色和访问权限：

1.  向下滚动到**角色和访问权限**部分。

    第一行显示主程序的访问选项，每个
    下一行显示一个程序阶段的选项。程序
    带有警告图标（感叹号）的阶段包含访问选项
    偏离主程序，这意味着它们可以通过
    不同的用户组合。

2.  单击任一行，将显示**共享对话框**。

3.  相应地修改访问选项。请参阅有关
    共享对话框以获取详细信息。

4.  点击**应用**按钮。

5.  对每个程序/程序阶段重复该过程。您也可以复制
    从主程序到子程序的所有访问选项：

    1.  选择您想要具有类似访问权限的程序阶段
        切换复选框，将其作为主程序
        程序阶段的右侧。您也可以选择
        **选择全部**程序阶段，**取消选择全部**程序阶段
        或根据访问选项**选择类似**阶段，以
        主程序。默认情况下会切换相似的阶段。

    2.  点击**应用于选定阶段**

#### 创建程序通知 { #create_tracker_program_notifications } 

您可以通过注册和创建程序的程序通知
他们的计划阶段。通知通过内部发送
DHIS2邮件系统，通过电子邮件或文本消息（SMS）。您可以
使用程序通知，例如，将自动提醒发送给
预定约会前10天跟踪的实体。您使用
程序的跟踪实体属性（例如名字）和程序
参数（例如注册日期）以创建通知
模板。


1.  打开 **维护** 应用程序并单击 **程序，然后单击
    通知**。

    所选程序的现有程序通知列表
    打开。如果该程序没有任何程序通知，则
    列表为空。

2.  Click on add button and select **Program notification**.

    ![](resources/images/program/what_to_send.png)
    ![](resources/images/program/where_to_send.png)
    ![](resources/images/program/who_to_send.png)   

3.  输入一个**名称**。

4.  创建**主题模板**。

    双击**参数**字段中的参数进行添加
    对你的主题。

    > **Note**
    >
    > The subject is not included in text messages.

5.  创建**消息模板**。

    双击**参数**字段中的参数名称进行添加
    他们到您的消息。

    亲爱的A {w75KJ2mc4zz}：您现在已注册V {program \ _name}。

6.  在 **何时发送** 字段中，选择应触发的内容
    通知。


    |触发|描述 |注意|
    |---|---|---|
    |项目招生|当 TEI 加入计划时，会发送计划通知。 | - |
    |计划完成 | TEI程序完成时发送程序通知 | - |
    |预定天数（事件日期）|计划通知在事件发生日期之前或之后 XX 天发送 |您需要输入发送通知的预定日期之前或之后的天数。 |
    |预定天数（入学日期）|计划通知在注册日期之前或之后 XX 天发送 |您需要输入发送通知的预定日期之前或之后的天数。 |
    |节目规则|程序规则执行的结果将触发通知。 |需要使用 ProgramRuleActionType.SENDMESSAGE 的程序规则才能成功触发此操作。 |


7.  在 **谁发送** 字段中，选择谁应该接收
    程序通知。


    |收件人类型 |描述 |注意|
    |---|---|---|
    |跟踪的实体实例 |通过电子邮件或短信接收节目通知。 |要接收计划通知，收件人必须具有电子邮件地址或电话号码属性。 |
    |组织单位联系方式 |通过电子邮件或短信接收节目通知。 |要接收计划通知，接收组织单位必须有一个注册联系人，并提供电子邮件地址和电话号码。 |
    |组织单位的用户： |所有注册到所选组织单位的用户都会通过内部 DHIS2 消息系统接收计划通知。 | - |
    |用户组|所选用户组的所有成员都会通过内部 DHIS2 消息系统接收计划通知 | - |
    |限制层次结构 |仅向属于层次结构中任何组织单位的用户发送通知。 |仅当选择用户组作为收件人时，此选项才可用。 |
    |仅限父级组织单位 |仅向属于上级组织部门的用户发送通知。 |仅当选择用户组作为收件人时，此选项才可用。 |
    |节目属性| TrackedEntityAttribute 也可以被选为接收者。 |仅当 TrackedEntityAttribute 值类型为 PHONE_NUMBER/EMAIL 时，此参数才有效。 |

8.  点击**保存**。 


### 创建程序阶段通知 { #create-a-program-stage-notification } 

![](resources/images/program/what_to_send-psnt.png)

1.  打开 **维护** 应用程序并单击 **程序，然后单击
    通知**。

    所选项目的现有程序阶段通知的列表
    程序阶段打开。如果程序阶段没有任何程序
    阶段通知，列表为空。

2.  点击添加按钮，然后选择**程序阶段通知**。

3.  点击**添加新**。

4.  输入一个**名称**。

5.  创建**主题模板**。

    双击**参数**字段中的参数名称进行添加
    他们对你的主题。

    > **Note**
    >
    > The subject is not included in text messages.

6.  创建**消息模板**。

    双击**参数**字段中的参数名称进行添加
    他们到您的消息。

    亲爱的A {w75KJ2mc4zz}，欢迎前来预约
    V {due \ _date}。

7.  在 **何时发送** 字段中，选择应触发的内容
    通知。


    |触发|描述 |注意|
    |---|---|---|
    |计划阶段完成|节目阶段完成时发送节目阶段通知 | - |
    |预定天数（预产期）|计划阶段通知在截止日期之前或之后 XX 天发送 |您需要输入发送通知的预定日期之前或之后的天数。 |
    |节目规则|程序规则执行的结果将触发通知。 |需要使用 ProgramRuleActionType.SENDMESSAGE 的程序规则才能成功触发此操作。 |

    1. **允许多次发送通知**

        如果需要多次发送通知，则可以使用此标志。例如，在可重复的节目阶段的情况下，相同的通知将被发送与阶段重复一样多的次数。

8.  在 **收件人** 字段中，选择谁应该接收该计划
    阶段通知。您可以选择：


    | Recipient type | Description | Note |
    |---|---|---|
    | Tracked entity instance | Receives program notifications via e-mail or text message. | To receive a program stage notification, the recipient must have an e-mail address or a phone number attribute. |
    | Organisation unit contact | Receives program notifications via e-mail or text message. | To receive a program stage notification, the receiving organisation unit must have a registered contact person with e-mail address and phone number.<br>     <br>The system selects the same organisation unit as where the event took place. |
    | Users at organisation unit: | All users registered to the selected organisation unit receive program notifications via the internal DHIS2 messaging system. | - |
    | User group | All members of the selected user group receive the program notifications via the internal DHIS2 messaging system | - |
    | Limit To Hierarchy | Send notification only to those users who belong to any of the organisation unit in the hierarchy. | - |
    | Parent OrgUnit Only | Send notification only to those users who belong to parent organisation unit. | - |
    | Data Element | Data Element associated with ProgramStage can be selected as recipient. | Data Element will only be effective if DataElement has value type PHONE_NUMBER/EMAIL. |
    | Tracked Entity Attribute | Tracked Entity Attribute associated with ProgramInstance/Enrollment can be selected as recipient. | Attribute will only be effective if it has value type PHONE_NUMBER/EMAIL. |


10.  点击**保存**。 


### 参考信息：程序通知参数 { #reference_information_event_program_notification_parameters } 



表：程序通知中使用的程序通知参数

| 通知类型 | 变量名 | 可变代码 |
|---|---|---|
| 程序 | 当前日期 | `V{current_date}` |
|| 自注册日期起的天数 | `V{days_since_enrollment_date}` |
|| 开学报道日 | `V{enrollment_date}` |
|| 事件日期 | `V{incident_date}` |
|| 组织单位名称 | `V{org_unit_name}` |
|| 节目名称 | `V{program_name}` |
| 程序阶段 | 当前日期 | `V{current_date}` |
|| 自到期日起的天数 | `V{days_since_due_date}` |
|| 距离预产期还有几天 | `V{days_until_due_date}` |
|| 到期日 | `V{due_date}` |
|| 组织单位名称 | `V{org_unit_name}` |
|| 节目名称 | `V{program_name}` |
|| 节目艺名 | `V{program_stage_name}` |
|| 活动组织单位 | `V{event_org_unit_id}` |
|| 招生组织单位 | `V{enrollment_org_unit_id}` |
|| 节目阶段 ID | `V{program_stage_id}` |
|| 节目编号 | `V{program_id}` |
|| 程序实例 id/注册 id | `V{enrollment_id}` |
|| 跟踪的实体 ID | `V{tracked_entity_id}` |
|| 事件/执行日期 | `V{event_date}` |

## 配置程序指示器 { #configure_program_indicator } 

### 关于计划指标 { #about_program_indicators } 

程序指示符是基于数据元素和属性的表达式
跟踪实体的数量，可用于基于
式。计划指标包括汇总类型，分析
类型，表达式和过滤器。

根据分配的汇总类型评估计划指标，
表达式和过滤器。评估顺序为：

1.  * filter *将过滤成为
    评估/汇总例程。

2.  * expression *将针对每个事件进行评估。

3.  所有评估的表达式值将根据以下条件进行*统计*
    程序指示器的聚合类型。



表：程序指示器组件

| 程序规则组件 | 描述 |
|---|---|
| 聚集类型 | 聚合类型决定了程序指标的聚合方式。可以使用以下聚合类型：<br> * 平均值<br> * 平均值（数字）<br> * 平均值（数字，分类）<br> * 平均值（组织单位层次结构中的总和）<br> * 平均值（数字）<br> * 平均值（数字总和，分解）<br> * 平均值（是/否）<br> * 计数<br> * 自定义<br> “自定义”聚合类型允许您指定聚合类型内嵌在表达式中。所有其他聚合类型均应用于整个表达式。<br> 使用“自定义”聚合类型可能会导致上述计算顺序出现异常，其中表达式的各个部分可能会出现异常进行计算和聚合，而不是在聚合之前计算整个表达式。<br> * 默认<br> * Max<br> * 最小值<br> * 无<br> * 标准偏差<br> * 总和<br> * 方差 |
| 分析类型 | 可用的分析类型为*事件*和*注册*。<br> <br>分析类型定义计划指标是否基于计算关于活动或计划报名。这会影响可以进行的计算类型。<br> * 事件意味着每个事件作为独立行存在的数据源。这适用于执行聚合，例如计数和求和。<br> * 注册意味着单个注册的所有事件组合在同一行上的数据源。这允许进行可以比较来自计划注册内的各个计划阶段的事件数据的计算。 |
| 分析周期边界 | 定义程序指标计算的边界。边界决定哪些事件或注册包含在聚合中，始终与聚合报告期的开始和结束相关。创建程序指标时，将根据分析类型预先选择默认边界。<br> * 对于分析类型*事件*，默认边界将配置为封装带有报告期开始后和报告期结束前的事件日期。<br> * 对于分析类型*注册*，默认边界将封装注册日期在报告日期之后的所有注册开始和报告期结束之前。此外，默认注册计划指示器会评估所有计划阶段的最新活动，无论日期如何。<br> <br>可以更改上限和下限以包含相对于报告周期更长或更短的时间段，或删除其中一个边界 - 实际上返回特定时间段之前或之后的所有数据。还可以添加更多约束，例如使注册计划指标仅包含给定时间点之前的事件数据。<br> * 边界目标：可以是*事件日期*、*活动日期*、*注册日期*或*自定义*。指定受边界约束的内容。<br> <br> *custom* 用于创建以日期数据元素为目标的边界，跟踪的实体属性或程序阶段中事件的存在。这是通过以下形式的自定义表达式完成的：<br> - 日期类型的数据元素：#{programStageUid.dataElementUid}.<br> `#{A03MvHHogjR.a3kGcGDCuk6}` <br> - 跟踪日期类型的实体属性：#{attributeUid}。<br> `A {GPkGfbmArby}` <br> - 特定程序阶段中存在一个事件：PS_EVENTDATE:programStageUid。<br> `PS_EVENTDATE:A03MvHHogjR` <br> **注意** 此边界目标仅适用于 Analytics 类型注册 <br> * Analytics 期间边界类型：定义是否边界是结束边界 - 从“之前...”开始，或开始边界 - “之后...”。还定义边界是与汇总报告期结束还是与汇总报告期开始相关。<br> * 按金额抵消期间：在某些情况下，例如群组分析，运行数据透视表和报告时，边界应相对于聚合报告期有所偏移。按量计算的偏移周期用于将当前边界及时向后（负）或向前（正）移动。金额和期间类型共同决定偏移量的大小。例如，在为 1 年队列制定简单的入学队列计划指标时，用“-1”和“年”抵消计划指标的每个边界可能就足够了<br> * 周期类型：见上文。可以是任何时期，例如*每周*或*每季度*。 |
| 表达 | 该表达式定义了指标的计算方式。表达式可以包含对各种实体的引用，在计算指标时这些实体将替换为相关值：<br> * 数据元素：将替换为数据元素的值进行计算的时间段和组织单位。指程序阶段和数据元素。<br> * 属性：将替换为进行计算的人员/跟踪实体的属性值。<br> * 变量：将替换为与计划相关的特殊值，包括事件日期和人员注册日期、当前日期以及时间段和组织表达式中的值计数进行计算的单位。<br> * 常量：将替换为常量的值。<br> <br>表达式是一个数学表达式，也可以包含运算符。<br> <br>对于单个分析类型为 *event* 的事件程序和跟踪程序，将计算*每个事件* 的表达式，然后根据其聚合类型进行聚合。<br> <br>对于分析类型*注册*的跟踪程序，将*每个注册*评估表达式，然后根据其聚合类型进行聚合。 |
| 过滤 | 该过滤器应用于事件并过滤用于指标计算的数据源。 IE。在评估指标表达式之前，过滤器会应用于事件集。过滤器的计算结果必须为 true 或 false。它过滤器应用于每个单独的事件。如果过滤器计算结果为 true，则该事件稍后将包含在表达式计算中，否则将被忽略。过滤器可以以与表达式类似的方式包含对数据元素、属性和常量的引用。<br> <br>程序指示器过滤器还可以使用逻辑运算符。这些运算符可用于形成最终计算结果为 true 或 false 的逻辑表达式。例如，您可以断言多个数据元素必须是特定值，或者特定属性的数值必须小于或大于常量。 |

在**维护**应用程序中，您可以管理以下程序指示器
对象：


| 对象类型 | 可用功能 |
|---|---|
| 计划指标 | 创建、编辑、克隆、共享、删除、显示详细信息和翻译 |
| 程序指标组 | 创建、编辑、克隆、共享、删除、显示详细信息和翻译 |

### 创建或编辑程序指示器 { #create_program_indicator } 

> **注意**
>
>程序指示器完全属于一个程序。

1.  打开** Maintenance **应用程序，然后单击** Indicator ** \> ** Program
    指示符**。

2.  点击添加按钮。

3.  Select a **Program** and enter:

      - **名称**

      - **简称**

      - **码**

      - **颜色**

      - **图标**

      - **描述**
4.  Select number of **Decimals in data output**.

5.  Select an **Aggregation type**.

6.  如果要**以表格显示**，请选择一个。

7.  Assign one or multiple **Legend**s.

8.  （可选）输入汇总数据的** Category选项组合
    出口**。

9.  （可选）输入汇总的**属性选项组合
    数据导出**。

10. 创建表达式。

    1.  点击**编辑表达式**。

    2.  根据数学运算符和
        属性，变量和常量在右侧列出。

11. 创建过滤器。

    1.  点击**编辑过滤器**。

    2.  根据数学运算符和
        属性，变量和常量在右侧列出。

12. 点击**保存**。 

### 创建或编辑程序指示器组 { #create_program_indicator_group } 

1.  打开** Maintenance **应用程序，然后单击** Indicator ** \> ** Program
    指标组**。

2.  点击添加按钮。

3.  Enter **Name** and **Code**.

4.  在可用程序指示符列表中，双击
    您要分配给组的程序指示器。

5.  点击**保存**。 

### 参考信息：每种值类型的表达式和过滤器示例 { #reference_information_program_indicator } 

下表显示了如何编写表达式和过滤器的示例
对于不同的数据元素和属性值类型：



表：每个值类型的表达式和过滤器示例

| 值类型 | 示例语法 |
|---|---|
| 整数<br> <br>负整数<br>  <br>正整数或零整数<br> <br>正整数<br> <br>数字<br> <br>百分比 | 数字字段，可作为表达式或过滤器用于聚合：<br> `#{mCXR7u4kNBW.K0A4BauXJDl} >= 3` |
| 是/否<br> <br>仅是 | 布尔字段。 Yes 转换为数字 1，No 转换为数字 0。可作为表达式用于聚合，或在过滤器中使用：<br> `#{mCXR7u4kNBW.Popa3BauXJss} == 1` |
| 文本<br> <br>长文本<br>  <br>电话号码<br> <br>电子邮件 | 文本字段。可以检查过滤器中的相等性：<br> `#{mCXR7u4kNBW.L8K4BauIKsl} == 'LiteralValue'` |
| 日期<br> <br>年龄 | 日期字段。与 d2:daysBetween 函数结合使用时最有用，该函数可生成可聚合为表达式或在过滤器中使用的数字：<br> `d2:daysBetween(#{mCXR7u4kNBW.JKJKBausssl},V{enrollment_date}) >100` <br>也可以直接检查过滤器中的相等性： <br>`#{mCXR7u4kNBW.JKJKBausssl} == '2011-10-28'` |

### 参考信息：在程序指示器表达式和过滤器中使用的函数，变量和运算符 { #program_indicator_functions_variables_operators } 

包含属性，数据元素和常量的表达式
看起来像这样：

    （A {GPkGfbmArby} +＃{mCXR7u4kNBW.NFkjsNiQ9PH}）* C {bCqvfPR02Im}

使用自定义聚合类型的表达式，因此可以使用
内联聚合类型看起来像
    这个：

    （sum（＃{mCXR7u4kNBW.K0A4BauXJDl} *＃{mCXR7u4kNBW.NFkjsNiQ9PH}）/ sum（＃{mCXR7u4kNBW.NFkjsNiQ9PH}）））* 100

注意在表达式内部如何使用“ sum”聚合运算符
本身。

#### 程序指示符表达式或过滤器中使用的函数 { #functions-to-use-in-a-program-indicator-expression-or-filter } 

程序指示符表达式和过滤器支持以下范围
职能。这些函数可以应用于数据元素和属性：



表：程序指示器表达式或过滤器中使用的函数

| 功能 | 论据 | 描述 |
|---|---|---|
| d2：hasValue | （目的） | 如果数据元素/属性有值，则返回 true。可在过滤器中用于区分数字 0 和无值，并区分明确的“否”和“是/否”字段的未选择。 |
| d2:分钟之间 | （日期时间，日期时间） | 生成“日期和时间”类型的两个数据元素/属性之间的分钟数。当第一个参数日期时间出现在第二个参数日期时间之前时，该数字将为正数 - 在相反的情况下，该数字将为负数。静态日期时间格式为“yyyy-MM-dd hh:mm”。任何参数都可以替换为 PS_EVENTDATE:(programStageUid) 以比较给定程序阶段的最新事件日期。 |
| d2：daysBetween | （日期，日期） | 生成日期类型的两个数据元素/属性之间的天数。当第一个参数日期早于第二个参数日期时，数字将为正数 - 在相反的情况下，数字将为负数。静态日期格式为“yyyy-MM-dd”。任何参数都可以替换为 PS_EVENTDATE:(programStageUid) 以比较给定程序阶段的最新事件日期。 |
| d2：星期之间 | （日期，日期） | 生成日期类型的两个数据元素/属性之间的整周数。当第一个参数日期早于第二个参数日期时，数字将为正数 - 在相反的情况下，数字将为负数。静态日期格式为“yyyy-MM-dd”。任何参数都可以替换为 PS_EVENTDATE:(programStageUid) 以比较给定程序阶段的最新事件日期。 |
| d2：monthsBetween | （日期，日期） | 生成日期类型的两个数据元素/属性之间的完整月份数。当第一个参数日期早于第二个参数日期时，数字将为正数 - 在相反的情况下，数字将为负数。静态日期格式为“yyyy-MM-dd”。任何参数都可以替换为 PS_EVENTDATE:(programStageUid) 以比较给定程序阶段的最新事件日期。 |
| d2：年之间 | （日期，日期） | 生成日期类型的两个数据元素/属性之间的完整年份数。当第一个参数日期早于第二个参数日期时，数字将为正数 - 在相反的情况下，数字将为负数。静态日期格式为“yyyy-MM-dd”。任何参数都可以替换为 PS_EVENTDATE:(programStageUid) 以比较给定程序阶段的最新事件日期。 |
| d2：条件 | （布尔表达式、真表达式、假表达式） | 计算布尔表达式，如果 true 返回 true 表达式值，如果 false 返回 false 表达式值。条件表达式必须加引号。 true-expr 和 false-expr 参数必须遵循任何程序指示符表达式（包括函数）的规则。 |
| d2：zing | （表达） | 如果表达式为负数则返回零，否则返回表达式值。该表达式必须遵循任何程序指示器表达式（包括函数）的规则。 |
| d2：oizp | （表达） | 如果表达式为零或正数，则返回 1，否则返回零。该表达式必须遵循任何程序指示器表达式（包括函数）的规则。 |
| d2：zpvc | （对象，[，对象...]） | 返回给定对象参数中数字零和正值的数量。可以提供任意数量的参数。 |
| d2:关系计数 | ([关系类型Uid]) | 生成连接到注册或事件的给定类型的关系数。当没有给出类型时，所有类型都会被计算在内。 |
| d2：计数 | （数据元素） | 仅对注册计划指标有用。计算注册过程中为给定程序阶段和数据元素收集的数据值的数量。参数数据元素由 #{programStage.dataElement} 语法提供。 |
| d2：countIfValue | （数据元素，值） | Useful only for enrollment program indicators. Counts the number of data values that matches the given literal value for the given program stage and data element in the course of the enrollment. The argument data element is supplied with the #{programStage.dataElement} syntax. The value can be a hard coded text or number, for example 'No_anemia' if only the values containing this text should be counted. |
| d2:countIfCondition | (dataElement, condition) | Useful only for enrollment program indicators. Counts the number of data values that matches the given condition criteria for the given program stage and data element in the course of the enrollment. The argument data element is supplied with the #{programStage.dataElement} syntax. The condition is supplied as a expression in single quotes, for example '<10' if only the values less than 10 should be counted. |
| 如果 | (boolean-expr, true-expr, false-expr) | Evaluates the boolean expression and if true returns the true expression value, if false returns the false expression value. This is identical to the d2:condition function except that the boolean-expr is not quoted. |
| 一片空白 | (object) | Returns true if the object value is missing (null), otherwise false. |
| isNotNull | (object) | Returns true if the object value is not missing (not null), otherwise false. |
| firstNonNull | (object [, object ...]) | Returns the value of the first object that is not missing (not null). Can be provided any number of arguments. Any argument may also be a numeric or string literal, which will be returned if all the previous objects have missing values. |
| 最伟大的 | (expression [, expression ...]) | Returns the greatest (highest) value of the expressions given. Can be provided any number of arguments. Each expression must follow the rules of any program indicator expression (including functions). |
| 最小 | (expression [, expression ...]) | Returns the least (lowest) value of the expressions given. Can be provided any number of arguments. Each expression must follow the rules of any program indicator expression (including functions). |
| log | (expression [, base ]) | Returns the natural logarithm (base e) of the numeric expression. If an integer is given as a second argument, returns the logarithm using that base. |
| log10 | (expression) | Returns the common logarithm (base 10) of the numeric expression. |

使用“ hasValue”函数的过滤器如下所示：

    d2：hasValue（＃{mCXR7u4kNBW.NFkjsNiQ9PH}）

使用“ relationshipCount（relationshipTypeUid）”函数的过滤器如下所示：

    d2：relationshipCount（'KLkjshoQ90U'）

使用“ zing”和“ oizp”函数的表达式如下所示：

    d2：zing（A {GPkGfbmArby}）+ d2：oizp（＃{mCXR7u4kNBW.NFkjsNiQ9PH}））

使用“ daysBetween”函数的表达式如下所示：

    d2：daysBetween（＃{mCXR7u4kNBW.k8ja2Aif1Ae}，'2015-06-01'）

使用“ yearBetween”函数将程序阶段“ mCXR7u4kNBW”的最新事件与注册日期进行比较的表达式如下所示：

    d2：daysBetween（V {enrollment_date}，PS_EVENTDATE：mCXR7u4kNBW）

使用“条件”函数的表达式如下所示：

    d2：condition（'＃{mCXR7u4kNBW.NFkjsNiQ9PH}> 100'，150,50）

使用“ countIfValue”函数的表达式仅计算收集值10的次数，如下所示：

    d2：countIfValue（＃{mCXR7u4kNBW.NFkjsNiQ9PH}），10）

使用“ zpvc”函数的表达式如下所示：

    d2：zpvc（A {GPkGfbmArby}），＃{mCXR7u4kNBW.NFkjsNiQ9PH}），4，-1）

使用“ if”和“ isnull”函数的表达式如下所示：

    if（isNull（A {GPkGfbmArby}），10,20）

使用“ firstNonNull”函数的表达式如下所示：

    firstNonNull（A {GPkGfbmArby}），＃{mCXR7u4kNBW.NFkjsNiQ9PH}，44）

使用“最大”函数的表达式如下所示：

    最好的（＃{mCXR7u4kNBW.k8ja2Aif1Ae}，＃{mCXR7u4kNBW.NFkjsNiQ9PH}，1）

#### 程序指示符表达式或过滤器中使用的变量 { #variables-to-use-in-a-program-indicator-expression-or-filter } 

程序指示符表达式和过滤器支持以下范围
变量：



Table: Variables to use in a program indicator expression or filter

| 变量 | 描述 |
|---|---|
| event_date | The date of when the event or the last event in the enrollment took place. |
| creation_date | 在系统中创建事件或注册的日期。 |
| due_date | 事件到期的日期。 |
| sync_date | 事件或注册最后一次与Android应用程序同步的日期。 |
| incident_date | 事件发生的日期。 |
| enrollment_date | 跟踪的实体实例在程序中注册的日期。 |
| enrollment_status | Can be used to include or exclude enrollments in certain statuses.<br> <br>When calculating the haemoglobin improvement/deterioration throughout a pregnancy, it might make sense to only consider completed enrollments. If non-completed enrollments is not filtered out, these will represent half-finished ANC followups, where the final improvement/deterioration is not yet established. |
| current_date | 当前日期。 |
| value_count | 事件的表达式部分中非空值的数量。 |
| zero_pos_value_count | 事件的表达式部分中的正数值。 |
| event_count | 事件计数（与过滤器结合使用）。 |
| enrollment_count | The count of enrollments (useful in combination with filters). Aggregation type for the program indicator must be COUNT.  |
| tei_count | The count of tracked entity instances (useful in combination with filters). Aggregation type for the program indicator must be COUNT. |
| org_unit_count | The count of organisation units (useful in combination with filters). Aggregation type for the program indicator must be COUNT. |
| program_stage_name | Can be used in filters for including only certain program stages in a filter for tracker programs. Uses the name of the program stage:<br> `V{program_stage_name} == 'ANC first visit'` |
| program_stage_id | Can be used in filters for including only certain program stages in a filter for tracker programs. Uses the unique identifier of the program stage:<br> `V{program_stage_id} == 'YPSSfbmAtt1'` |
| analytics_period_start | Can be used in filters or expressions for comparing any date to the first date in each reporting period.<br> `d2:daysBetween(#{WZbXY0S00lP.w4ky6EkVahL}, V{analytics_period_start})` |
| analytics_period_end | 可以在过滤器或表达式中使用，以将任何日期与每个报告期间的最后一个包含日期进行比较。 |
| event_status | Can be used in filters or expressions for comparing event status.<br> `V{event_status} == 'COMPLETED'` |

使用“ Analytics（分析）期末”变量的过滤器仅包含
拥有LMP的女性
    三个月：

    d2：daysBetween（＃{WZbXY0S00lP.w4ky6EkVahL}，V {analytics_period_end}）<= 84

使用“值计数”变量的表达式看起来像
    这个：

    （＃{A03MvHHogjR.a3kGcGDCukuk6} +＃{A03MvHHogjR.wQLfBvPrXqq}）/ V {value_count}

使用“ event \ _date”和“ incident \ _date”变量的表达式
看起来像这样：

    d2：daysBetween（V {incident_date}，V {event_date}）

#### 操作员要在程序指示器过滤器中使用 { #operators-to-use-in-a-program-indicator-filter } 



Table: Operators to use in a program indicator filter

| Operator | 描述 |
|---|---|
| and | Logical AND |
| or | Logical OR |
| == | Equal to |
| != | Not equal to |
| < | Less than |
| <= | Less than or equal to |
| > | Greater than |
| >= | Greater than or equal to |

这些运算符可用于形成逻辑表达式，最终
评估为真或假。例如，您可以断言
多个数据元素必须是一个特定的值，或者那个特定的
属性的数值必须小于或大于常数。

同时使用属性和数据元素的过滤器如下所示：

    A {cejWyOfXge6} =='Female'和＃{A03MvHHogjR.a3kGcGDCuk6} <= 2

> **提示**
>
> DHIS2正在使用JEXL库来评估表达式
>支持超出此范围的其他语法
>文档。请参阅[项目首页中的参考
>页面]（http://commons.apache.org/proper/commons-jexl/reference/syntax.html）
>了解如何创建更复杂的表达式

## 配置程序规则 { #configure_program_rule } 

### 关于计划规则 { #about_program_rules } 

Program rules allows you to create and control dynamic behaviour of the
user interface in the **Tracker Capture** and **Event Capture** apps.
During data entry, the program rules expressions are evaluated each time
the user interface is displayed, and each time a data element is
changed. Most types of actions will take effect immediately when the
user enters values in the **Tracker Capture** and **Event Capture**
apps.



Table: Program rule components

| Program rule component | 描述 |
|---|---|
| Program rule action | Each program rule contains one or multiple actions. These are the behaviours that are triggered in the user interface when the expression is true. Actions will be applied at once if the expression is true, and will be reverted if the expression is no longer true. There are several types of actions and you can have several actions in one program rule. |
| Program rule expression | Each program rule has a single expression that determines whether the program rule actions should be triggered, if the expression evaluates to true. If the expression is true the program rule is in effect and the actions will be executed. If the expression is false, the program rule is no longer in effect and the actions will no longer be applied.<br> <br>You create the expression with standard mathematical operators, custom functions, user-defined static values and program rule variables. The program rule variables represent attribute and data element values which will be evaluated as part of the expression. |
| Program rule variable | Program rule variables lets you include data values and attribute values in program rule expressions. Typically, you'll have to create one or several program rule variables before creating a program rule. This is because program rules expressions usually contain at least one data element or attribute value to be meaningful.<br> <br>The program rule variables are shared between all rules in your program. When you create multiple program rules for the same program, these rules will share the same library of program rule variables. |

In the **Maintenance** app, you manage the following program rule
objects:


| Object type | Available functions |
|---|---|
| Program rule | Create, edit, clone, delete, show details and translate |
| Program rule variable | Create, edit, clone, share, delete, show details and translate |

### 工作流程 { #workflow_program_rule } 

1.  在** Maintenance **应用程序中，如果需要，请创建程序规则变量
    需要。

2.  In the **Maintenance** app, create the program rule:

    1.  输入程序规则详细信息。

    2.  创建程序规则表达式。

    3.  定义程序规则操作。

3.  In the **Tracker Capture** or **Event Capture** apps, verify that
    程序规则的行为符合预期。

### 创建或编辑程序规则变量 { #create_program_rule_variable } 

1.  Open the **Maintenance** app and click **Program** \> **Program rule
    变量**。

2.  点击添加按钮。

3.  Select a **Program** and enter a **Name**.

4.  Select if you want to **Use code for option set**.

    仅当数据元素或已跟踪时，此选项才有效
    实体属性连接到选项集。如果不选择
    此选项时，程序规则变量将填充
    选项集的名称。如果选择该选项，则程序规则
    变量将使用选项集的代码填充。

5.  选择**来源类型**，然后输入所需信息。

    根据来源类型，您必须选择例如
    **程序阶段****数据元素**或**跟踪实体属性**。

    源类型确定程序规则变量的方式
    填充一个值。


    | Source type | Description |
    |---|---|
    | **Data element from the newest event for a program stage** | This source type works the same way as **Data element from the newest event in the current program**, except that it only evaluates values from one program stage.<br>     <br>This source type can be useful in program rules where the same data element is used in several program stages, and a rule needs to evaluate the newest data value from within one specific stage. |
    | **Data element from the newest event in the current program** | This source type is used when a program rule variable needs to reflect the newest known value of a data element, regardless of what event the user currently has open.<br>     <br>This source type is populated slightly differently in **Tracker Capture** and **Event Capture** apps:<br>     <br>**Tracker Capture**: the program rule variable will be populated with the newest data value collected for the given data element within the enrollment.<br>     <br>**Event Capture**: the program rule variable will be populated with the newest data value found within the 10 newest events in the same organisation unit.<br>     <br>The newest data value is determined with event date. |
    | **Data element in current event** | Program rule variables with this source type will contain the data value from the same event that the user currently has open.<br>     <br>This is the most commonly used source type, especially for skip logic (hide actions) and warning/error rules. |
    | **Data element from previous event** | Program rule variables with this source type will contain the value from a specified data element from a previous event. Only older events is evaluated, not including the event that the user currently has open.<br>     <br>This source type is commonly used when a data element only should be collected once during an enrollment, and should be hidden in subsequent events.<br>     <br>Another use case is making rules for validating input where there is an expected progression from one event to the next - a rule can evaluate whether the previous value is higher/lower and give a warning if an unexpected value is entered.<br>     <br>This source type is populated slightly differently in **Tracker Capture** and **Event Capture** apps:<br>     <br>**Tracker Capture**: the program rule variable will be populated with the newest data value collected for the given data element within the enrollment - but only evaluating the events that comes before the current event date.<br>     <br>**Event Capture**: the program rule variable will be populated with the newest data value collected within the 10 events preceding the current event date - not including the current event.<br>     <br>The newest data value is determined with event date. |
    | **Calculated value** | Program rule variable with this source type is not connected directly to any form data - but will be populated as a result of some other program rules **ASSIGN** action.<br>     <br>This variable will be used for making preliminary calculations, having a **ASSIGN** program rule action and assigning a value, this value can be used by other program rules - potentially making the expressions simpler and more maintanable.<br>     <br>These variables will not be persisted and will stay in memory only during the exectution of the set of program rules. Any program rule that assigns a data value to a preliminary calculated value would normally also have a **priority** assigned - to make sure that the preliminary caculation is done before the rule that consumes the calculated value. |
    | **Tracked entity attribute** | Populates the program rule variable with a specified tracked entity attribute for the current enrollment.<br>     <br>Use this is the source type to create program rules that evaluate data values entered during registration.<br>     <br>This source type is also useful when you create program rules that compare data in events to data entered during registration.<br>     <br>This source type is only used for tracker programs (programs with registration). |

6.  点击**保存**。 

### 创建或编辑程序规则 { #create_program_rule } 

> **注意**
>
>程序规则完全属于一个程序。

1.  打开** Maintenance **应用程序，然后单击** Program ** \> ** Program
    规则**。

2.  点击添加按钮。

3.  输入程序规则详细信息。这些字段未显示给
    最终用户，它们仅适用于程序管理员。

      - **程序**

      - **仅适用于计划阶段的触发规则**

        如果选择了程序阶段，则该程序规则将仅对所选程序阶段运行，
        而不是针对程序中的每个程序阶段运行。

      - **名称**

      - **描述**

      - **优先**

        假设您的程序中有16条程序规则。您
        使用以下优先级配置程序规则
        设置：

          - 程序规则A的优先级1

          - 计划规则B-K的优先级2

          - 程序规则L-P没有优先级

        结果：系统运行以下程序规则
        订购：

        1.  计划规则A

        2.  程序规则B-K（您无法在其中找到或配置
            系统运行这些程序规则的顺序）

        3.  程序规则L-P。

4.  Click **Enter program rule expression** and create the program rule
    借助变量，函数和运算符进行表达。

5.  Click **Define program rule actions** and create the actions
    当表达式为真时执行。

    1.  Click the add button, select an **Action** and enter the
        需要的信息。

        根据操作类型，您必须执行不同的操作
        设置类型。对于某些操作类型，还必须输入
        自由文本或创建表达式。


        | Action type | Required settings | Description |
        |---|---|---|
        ||||
        | **Assign value** | **Data element to assign value to**<br>         <br>**Program rule variable to assign value to**<br>         <br>**Expression to evaluate and assign** | Used to help the user calculate and fill out fields in the data entry form. The idea is that the user shouldn’t have to fill in values that the system can calculate, for example BMI.<br>         <br>When a field is assigned a value, the user sees the value but the user can't edit it.<br>         <br>Example from Immunization stock card i Zambia: The data element for vaccine stock outgoing balance is calculated based on the data element for incoming stock balance minus the data elements for consumption and wastage.<br>         <br>Advanced use: configure an 'assign value' to do a part of a calculation and then assign the result of the calculation to a program rule variable. This is the purpose with the "Calculated value" program rule variable. |
        | **Display text** | **Display widget**<br>         <br>**Static text**<br>         <br>**Expression to evaluate and display after static text** | Used to display information that is not an error or a warning, for example feedback to the user. You can also use this action to display important information, for example the patient's allergies, to the user. |
        | **Display key/value pair** | **Display widget**<br>         <br>**Key label**<br>         <br>**Expression to evaluate and display as value** | Used to display information that is not an error or a warning.<br>         <br>Example: calculate number of weeks and days in a pregnancy and display it in the format the clinician is used to see it in. The calculation is based on previous recorded data. |
        | **Error on complete** | **Data element to display error next to**<br>         <br>**Tracked entity attribute to display error next to**<br>         <br>**Static text**<br>         <br>**Expression to evaluate and display after static text** | Used whenever you've cross-consistencies in the form that must be strictly adhered to. This action prevents the user from continuing until the error is resolved.<br>         <br>This action differs from the regular **Show error** since the error is not shown until the user tries to actually complete the form.<br>         <br>If you don't select a data element or a tracked entity attribute to display the error next to, make sure you write a comprehensive error message that helps the user to fix the error. |
        | **Hide field** | **Data element to hide**<br>         <br>**Tracked entity attribute to hide**<br>         <br>**Custom message for blanked field** | Used when you want to hide a field from the user.<br>         <br>**Custom message for blanked field** allows you to define a custom message displayed to the user in case the program rule hides and blanks out the field after the user typed in or selected a value.<br>         <br>If a hide field action hides a field that contains a value, the field will always removed. If no message is defined, a standard message will be displayed to alert the user. |
        | **Hide section** | **Program stage section to hide** | TBA |
        | **Hide program stage** | **Program stage to hide** | Used when you want to hide a program stage section from the user. |
        | **Make field mandatory** | **Data element to make mandatory**<br>         <br>**Tracked entity attribute to make mandatory** | TBA |
        | **Show error** | **Data element to display error next to**<br>         <br>**Tracked entity attribute to display error next to**<br>         <br>**Static text**<br>         <br>**Expression to evaluate and display after static text** | Used whenever there are rules which must strictly be adhered to. The show error action prevents the user from continuing until the error is resolved.<br>         <br>Such a strict validation should only be used when it's certain that the evaluated expression is never true unless the user has made a mistake in data entry.<br>         <br>It's mandatory to define a message that is shown to the user when the expression is true and the action is triggered.<br>         <br>You can select which data element or tracked entity attribute to link the error to. This will help the user to fix the error.<br>         <br>In case several data elements or attributes are involved, select the one that is most likely that the user would need to change. |
        | **Show warning** | **Data element to display warning next to**<br>         <br>**Tracked entity attribute to display warning next to**<br>         <br>**Static text**<br>         <br>**Expression to evaluate and display after static text** | Used to give the user a warning about the entered data, but at the same time to allow the user to save and continue.<br>         <br>You can use warnings to help the user avoid errors in the entered data, while at the same time allow the user to consciously disregard the warnings and save a value that is outside preset expectations.<br>         <br>**Static text** defines the message shown to the user when the expression is true and the action is triggered.<br>         <br>You can select which data element or tracked entity attribute to link the error to. This will help the user to fix the error.<br>         <br>In case several data elements or attributes are involved, select the one that is most likely that the user would need to change. |
        | **Warning on complete** | **Data element to display warning next to**<br>         <br>**Tracked entity attribute to display warning next to**<br>         <br>**Static text**<br>         <br>**Expression to evaluate and display after static text** | Used to give the user a warning if he/she tries to complete inconsistent data, but at the same time to allow the user to continue. The warning is shown in a dialog when the user completes the form.<br>         <br>**Static text** defines the message shown to the user when the expression is true and the action is triggered. This field is mandatory.<br>         <br>You can select which data element or tracked entity attribute to link the error to. This will help the user to fix the error.<br>         <br>If you don't select a data element or a tracked entity attribute to display the error next to, make sure you write a comprehensive error message that helps the user to fix the error. |
        | **Send Message** | **Message template to send** | Send Message triggers a notification based on provided message template. This action will be taken immediately. The message template will be parsed and variables will be substituted with actual values. |
        | **Schedule Message** | **Message template to send**<br>         <br>**Data field which contains expression to evaluate the date which notification should be sent at. If this expression results in any value other than Date, then resultant will be discarded and notification will not get scheduled.** | Schedule Message will schedule notification at date provided by Expression in the data field. Sample expression is given below<br>         d2:addDays( '2018-04-20', '2' )         <br>Message template will be parsed and variables will be substituted with actual values. |
        | **Hide option** | **Data element to hide option for**<br>         <br>**Tracked entity attribute to hide option for**<br>         <br>**Option that should be hidden** | Used to selectively hide a single option for an option set in a given data element/tracked entity attribute.<br>         <br>When combined with **show option group** the **hide option** takes presedence. |
        | **Hide option group** | **Data element to hide option group for**<br>         <br>**Tracked entity attribute to hide option group for**<br>         <br>**Option group that should be hidden** | Used to hide all options in a given option group and data element/tracked entity attribute.<br>         <br>When combined with **show option group** the **hide option group** takes precedence. |
        | **Show option group** | **Data element to show option group for**<br>         <br>**Tracked entity attribute to show option group for**<br>         <br>**Option group that should be shown** | Used to show only options from a given option group in a given data element/tracked entity attribute. To show an option group implicitly hides all options that is not part of the group(s) that is shown. |

    2.  Click **Save**.

    3.  (Optional) Repeat above steps to add more actions.

6.  点击**保存**。 

### 示例：程序规则 { #program_rule_examples } 

> **注意**
>
>您可以在演示服务器上查看所有示例：
> <https://play.dhis2.org/dev/dhis-web-maintenance/#/list/programSection/programRule>

本示例说明如何配置程序规则
怀孕的周数和天数，并将结果显示在
临床医生用来查看的格式。计算基于
先前记录
    数据。

1.  ![](resources/images/maintenance/pg_rule_ex/keyvaluepair_details.png)

2.  ![](resources/images/maintenance/pg_rule_ex/keyvaluepair_expression.png)

3.  ![](resources/images/maintenance/pg_rule_ex/keyvaluepair_action.png)

    ** Data **字段中的完整表达式：

        d2：concatenate（d2：weeksBetween（＃{lmp}，V {current_date}），'+'，
        d2：modulus（d2：daysBetween（＃{lmp}，V {current_date}），7））

![](resources/images/maintenance/pg_rule_ex/keyvaluepair_result.png)

This example shows how to configure a program rule to display text in
the Feedback widget in the **Tracker Capture**
    app.

1.  ![](resources/images/maintenance/pg_rule_ex/displaytext_pgrule_variable.png)

2.  ![](resources/images/maintenance/pg_rule_ex/displaytext_details.png)

3.  ![](resources/images/maintenance/pg_rule_ex/displaytext_expression.png)

4.  ![](resources/images/maintenance/pg_rule_ex/displaytext_action.png)

![](resources/images/maintenance/pg_rule_ex/displaytext_result.png)

This example shows how to configure a program rule to always display
certain data in the Feedback widget in the **Tracker Capture** app. This
is useful when you want to make sure that vital data, for example
medicine allergies, is always
    visible.

1.  ![](resources/images/maintenance/pg_rule_ex/displaytext2_pgrule_variable.png)

2.  ![](resources/images/maintenance/pg_rule_ex/displaytext2_details.png)

3.  ![](resources/images/maintenance/pg_rule_ex/displaytext2_expression.png)

4.  ![](resources/images/maintenance/pg_rule_ex/displaytext2_action.png)

![](resources/images/maintenance/pg_rule_ex/displaytext2_first_pgstage.png)

![](resources/images/maintenance/pg_rule_ex/displaytext2_result.png)

通过使用“分配值”类型的程序规则，您可以计算
“访问时的胎龄”值并将其填写在数据输入表单中。您
配置程序规则以基于以下条件计算“访问时的胎龄”
在“ LMP日期”或“超声估计到期
日期”。

1.  ![](resources/images/maintenance/pg_rule_ex/assign_details.png)

2.  ![](resources/images/maintenance/pg_rule_ex/assign_expression.png)

3.  ![](resources/images/maintenance/pg_rule_ex/assign_action.png)

![](resources/images/maintenance/pg_rule_ex/assign_result.png)

### 参考信息：程序规则表达式中使用的运算符和函数 { #program_rules_operators_functions } 

> **提示**
>
>您可以相互嵌套函数，并使用子表达式来嵌套
>形成更复杂的条件。一个产生妊娠的例子
>周龄，根据最近的月经日期：
>
> d2：floor（d2：daysBetween（＃{lastMenstrualDate}，V {event_date}）/ 7）

> **提示**
>
>源类型将确定d2：函数调用的方式
>评估（源域）参数。
>
>示例：其中\＃{hemoglobinCurrent}设置为源类型** Data
>当前事件中的元素**。以下函数调用带有评估
>是否在当前事件中输入了血红蛋白。
>
> d2：hasValue（'hemoglobinCurrent'）
>
>示例：其中\＃{hemoglobin}设置为源类型**数据元素
>来自当前程序中的最新事件**。以下功能
>致电以评估是否存在血红蛋白值
>注册中的任何事件。
>
> d2：hasValue（'hemoglobin'）
>
>示例：其中\＃{hemoglobinPrevious}设置为源类型** Data
>先前事件中的元素**。下面的函数调用
>评估是否存在血红蛋白值
>当前事件之前的事件。
>
> d2：hasValue（'hemoglobinPrevious'）



Table: Possible operators to use in a program rule expression

| Operator | 描述 |
|---|---|
| + | Add numbers together |
| -- | Subtract numbers from each other |
| \* | Multiply two numbers |
| / | Divide two numbers |
| % | The modulus of two numbers |
| && | Logical AND. True only when the expression on the left and right side is true. The left and right side can be yes/no, yes only or a sub-expression in parenthesis. |
| &#124;&#124; | Logical OR. True when either the expression on the left or the expression on the right side is true. The left and right side can be yes/no, yes only or a sub-expression in parenthesis. |
| > | Left number greater than right number |
| >= | Left number greater than or equal to right number |
| < | Left number less than right number |
| <= | Left number less than or equal to right number. |
| == | Left side equal to right side. Supports numbers, text, yes/no and yes only. |
| != | Left side not equal to right side. Supports numbers, text, yes/no and yes only. |
| ! | Negates the following value. Can be used for yes/no, yes only or a sub-expression in parenthesis. |
| () | Parenthesis is used to group sub-expressions. |



Table: Custom functions to use in a program rule expression

| 功能 | Arguments | 描述 |
|---|---|---|
| d2：ceil | (number) | 将输入参数**向上舍入**到最接近的整数。 <br> 示例：<br>  `d2:ceil(#{hemoglobinValue})` |
| d2：楼层 | (number) | Rounds the input argument **down** to the nearest whole number. <br>An example producing the number of weeks the woman is pregnant. Notice that the sub-expression #{gestationalAgeDays}/7 is evaluated before the floor function is executed:<br> `d2:floor(#{gestationalAgeDays}/7)` |
| d2：圆 | (number) | 将输入参数四舍五入到最接近的整数。 |
| d2：模数 | (number,number) | Produces the modulus when dividing the first with the second argument. <br>An example producing the number of days the woman is into her current pregnancy week:<br> `d2:modulus(#{gestationalAgeDays},7)` |
| d2：zing | (number) | 如果值是负数，则将数字类型的参数评估为零，否则为值本身。 |
| d2：oizp | (number) | 如果值为零或正数，则将类型为number的参数评估为1，否则为零。 |
| d2：串联 | (object, [,object, object,...]) | Produces a string concatenated string from the input parameters. Supports any number of parameters. Will mainly be in use in future action types, for example to display gestational age with d2:concatenate('weeks','+','gestationalageDays'). |
| d2：daysBetween | (date, date) | Produces the number of days between the first and second argument. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'. <br>Example, calculating the gestational age(in days) of a woman, based on the last menstrual period and the current event date:<br> `d2:daysBetween(#{lastMenstrualDate},V{event_date})` |
| d2：星期之间 | (date, date) | Produces the number of full weeks between the first and second argument. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'. |
| d2：monthsBetween | (date, date) | Produces the number of full months between the first and second argument. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'. |
| d2：年之间 | (date, date) | Produces the number of years between the first and second argument. When the first argument date comes before the second argument date, the number will be positive - in the opposite case, the number will be negative. The static date format is 'yyyy-MM-dd'. |
| d2：addDays | (date, number) | Produces a date based on the first argument date, adding the second argument number of days. <br>An example calculating the pregnancy due date based on the last menstrual period:<br> `d2:addDays(#{lastMenstrualDate},283)` |
| d2：计数 | (sourcefield) | Counts the number of values that is entered for the source field in the argument. The source field parameter is the name of one of the defined source fields in the program - see example <br>Example usage where #{previousPregnancyOutcome} is one of the source fields in a repeatable program stage "previous pregnancy":<br> `d2:count('previousPregnancyOutcome')` |
| d2：countIfValue | (sourcefield,text) | Counts the number of matching values that is entered for the source field in the first argument. Only occurrences that matches the second argument is counted. The source field parameter is the name of one of the defined source fields in the program - see example. <br>Example usage where #{previousPregnancyOutcome} is one of the source fields in a repeatable program stage "previous pregnancy". The following function will produce the number of previous pregnancies that ended with abortion:<br> `d2:countIfValue('previousPregnancyOutcome','Abortion')` |
| d2：countIfZeroPos | (sourcefield) | Counts the number of values that is zero or positive entered for the source field in the argument. The source field parameter is the name of one of the defined source fields in the program - see example. <br>Example usage where #{fundalHeightDiscrepancy} is one of the source fields in program, and it can be either positive or negative. The following function will produce the number of positive occurrences:<br> `d2:countIfZeroPos('fundalHeightDiscrepancy')` |
| d2：hasValue | (sourcefield) | Evaluates to true of the argument source field contains a value, false if no value is entered. <br>Example usage, to find if the source field #{currentPregnancyOutcome} is yet filled in:<br> `d2:hasValue('currentPregnancyOutcome')` |
| d2：zpvc | (object, [,object, object,...]) | 返回给定对象参数中数字零和正值的数量。可以提供任意数量的参数。 |
| d2：validatePattern | (text, regex-pattern) | 如果输入文本与提供的正则表达式模式完全匹配，则评估为 true。正则表达式需要转义。 <br> 示例表达式，如果数字不在模式 9999/99/9 上则触发操作, <br>  `!d2:validatePattern(A{nrc},'\\d{6}\/\\d{2}\/\\d')` <br>示例表达式，如果地址不包含字母或空格，则触发操作，然后是空格，然后是数字：  <br>`!d2:validatePattern(A{registrationAddress},'[\\w ]+ \\d+')` <br> 示例，如果名称包含任何数字则触发操作：<br>  `!d2:validatePattern(A{name},'[^\\d]*')` <br> 示例表达式，如果手机号码包含非法号码序列 555:  <br>`d2:validatePattern(A{mobile} ,'.*555.*')` |
| d2：左 | (text, num-chars) | Evaluates to the left part of a text, num-chars from the first character. <br>The text can be quoted or evaluated from a variable:<br> `d2:left(#{variableWithText}, 3)` |
| d2：对 | (text, num-chars) | Evaluates to the right part of a text, num-chars from the last character. <br>The text can be quoted or evaluated from a variable:<br> `d2:right(#{variableWithText}, 2)` |
| d2：子字符串 | (text, start-char-num, end-char-num) | Evaluates to the part of a string specified by the start and end character number. <br>Example expression:<br> `d2:substring(#{variableWithText}, 1, 3)` If the #{variableWithText} in the above example was 'ABCD', then the result of the evaluation would be 'BC' |
| d2：分割 | (text, delimiter, element-num) | Split the text by delimiter, and keep the nth element(0 is the first). <br>The text can be quoted or evaluated from a variable, the delimiter must be quoted:<br> `d2:split(#{variableWithText}, '-', 1)` <br>Note: comma delimiter(,) is not supported. |
| d2：长度 | (text) | Find the length of a string. <br>Example:<br> `d2:length(#{variableWithText})` |
| d2:inOrgUnitGroup | (text) | Evaluates whether the current organisation unit is in the argument group. The argument can be defined with either ID or organisation unit group code. The current organisation unit will be the event organisation unit when the rules is triggered in the context of an event, and the enrolling organisation unit when the rules is triggered in the event of a TEI registration form. <br>Example expression:<br> `d2:inOrgUnitGroup('HIGH_RISK_FACILITY')` |
| d2:hasUserRole | (user role) | 如果当前用户具有此角色，则返回 true，否则返回 false <br>Example expression:<br> d2:hasUserRole('UYXOT4A3ASA') |
| d2:zScoreWFA | Z-Score weight for age indicator | Calculates z-score based on data provided by WHO weight-for-age indicator. e varies between -3.5 to 3.5 depending upon the value of weight. <br>Example expression:<br> `d2:zScoreWFA( ageInMonths, weight, gender )`  <br> **Gender** > Gender is considered female by default. Any of the following codes can > be used to denote male: 'Male', 'MALE', 'male', 'ma', 'm', 'M', 0, false |
| d2:zScoreHFA | Z-Score height for age indicator | Calculates z-score based on data provided by WHO height-for-age indicator. Its value varies between -3.5 to 3.5 depending upon the value of height. <br>Example expression:<br> `d2:zScoreHFA( ageInMonths, height, gender )` |
| d2:zScoreWFH | Z-Score weight for height indicator | Calculates z-score based on data derived from the WHO weight-for-length and weight-for-height indicators. The data used for girls can be found [here](https://github.com/dhis2/dhis2-docs/blob/master/src/commonmark/en/content/user/resources/txt-files/zScoreWFH-girls-table.txt) and for boys [here](https://github.com/dhis2/dhis2-docs/blob/master/src/commonmark/en/content/user/resources/txt-files/zScoreWFH-boys-table.txt). Its value varies between -3.5 to 3.5 depending upon the value of the weight. <br>Example expression:<br> `d2:zScoreWFH( height, weight, gender )` |
| d2:minValue | Get minimum value for provided item | Function gets minimum value of provided data element across entire enrollment. <br>Example expression:<br> `d2:minValue( 'blood-pressure' )` |
| d2:maxValue | Get maximum value for provided item | Function gets maximum value of provided data element across entire enrollment. <br>Example expression:<br> `d2:maxValue( 'blood-pressure' )` |



Table: Standard variables to use in program rule expressions

| 变量 | 类型 | 描述 |
|---|---|---|
| V {current_date} | (date) | Contains the current date whenever the rule is executed. <br>Example expression:<br> `d2:daysBetween(#{symptomDate},V{current_date}) < 0 `|
| V {event_date} | (date) | 包含当前事件执行的事件日期。规则作为注册表格的一部分执行时将没有值。 |
| V {event_status} | (string) | Contains status of the current event or enrollment. <br>Example expression to check status is:<br> `V{event_status} == 'COMPLETED'` |
| V{due_date} | (date) | 执行规则时，此变量将包含当前日期。注意：这意味着该规则可能会在不同时间产生不同的结果，即使没有其他改变。 |
| V {event_count} | (number) | 包含注册中的事件总数。 |
| V{enrollment_date} | (date) | 包含当前注册的注册日期。对于单个事件程序将没有值。 |
| V{incident_date} | (date) | 包含当前注册的事件日期。对于单个事件程序将没有值。 |
| V{enrollment_id} | (string) | Universial identifier string(UID) of the current enrollment. Will not have a value for single event programs. |
| V {event_id} | (string) | Universial identifier string(UID) of the current event context. Will not have a value at the moment the rule is executed as part of the registration form. |
| V {orgunit_code} | (string) | Contains the code of the orgunit that is linked to the current enrollment. For single event programs the code from the current event orgunit will be used instead. <br>Example expression to check whether orgunit code starts with WB_:<br> `d2:left(V{orgunit_code},3) == 'WB_'` |
| V {environment} | (string) | 包含代表规则的当前运行时环境的代码。可能的值为“ WebClient”，“ AndroidClient”和“ Server”。当程序规则仅应在一种或多种客户端类型中运行时可以使用。 |
| V {program_stage_id} | (string) | 包含触发规则的当前程序阶段的ID。这可用于在特定程序阶段运行规则，或避免在某些阶段执行。在TEI注册表单中执行规则时，变量将为空。 |
| V {program_stage_name} | (string) | 包含触发规则的当前程序阶段的名称。这可用于在特定程序阶段运行规则，或避免在某些阶段执行。在TEI注册表单中执行规则时，变量将为空。 |
| V{completed_date} | (string) | 此变量包含触发此规则的事件的完成日期。如果事件尚未完成，则"completed_date"不包含任何内容。 |

## 配置关系类型 { #configure_relationship_type } 

### 关于关系类型 { #about_relationship_types } 

关系表示跟踪器模型中两个实体之间的链接。关系被视为DHIS2中的数据，并且基于关系类型，类似于被跟踪实体实例基于被跟踪实体类型的方式。

关系始终包括两个实体，并且这些实体可以包括“跟踪的实体实例”，“注册”和“事件”，以及这些的任意组合。请注意，当前应用程序中并非所有这些组合都可用。

另外，关系可以定义为单向或双向。当前唯一的功能差异是这些功能需要不同级别的创建权限。单向关系要求用户对“从”实体具有数据写访问权限，而对“至”实体具有数据读访问权限，而双向关系则要求双方都具有数据写访问权限。

有关配置以及“从约束”和“至约束”的含义的更多信息，请参见[关系模型]（relationship_model＃relationship_model_relationship_type）。

### 创建或编辑关系类型 { #create_relationship_type } 

1.  打开** Maintenance **应用程序，然后单击** Program ** \> ** Relationship
    类型**。

2.  点击添加按钮。

3.  Type a **Name** of the relationship type.

4.  （可选）分配**代码**。

5.  (Optional) Provide a **Description** of the relationship.

6. （可选）选择关系是否应为双向

7. Provide **Relationship name seen from inititating entity**. This is the name of the relationship that will be shown in the Data Entry app at the 'left' side of the relationship. E.g. in a Mother-child relationship this could be 'Mother of'.

8. （可选）提供**从接收实体看到的关系名称**。这是关系的名称，将显示在“数据输入”应用程序中关系的“右侧”。例如。在母子关系中，这可能是“母亲”。

9.  选择“来自约束”。这限制了可以包含在关系中的实体类型。 [关系模型]（relationship_model＃relationship_model_relationship_type）。

10. 选择一个“到约束”。这限制了可以包含在关系中的实体类型。 [关系模型]（relationship_model＃relationship_model_relationship_type）。

11. 点击**保存**。 

## 配置跟踪的实体类型 { #configure_tracked_entity } 

### 关于跟踪的实体类型 { #about_tracked_entity } 

跟踪的实体是可以通过
系统。它可以是从人到商品的任何东西，例如
药还是一个人。

一个程序必须有一个跟踪的实体。注册被跟踪实体
实例到程序中，被跟踪的实体类型和被跟踪的
程序的实体类型必须相同。

跟踪的实体属性用于为
跟踪的实体。跟踪的实体属性可以在之间共享
程式。

### 创建或编辑跟踪的实体属性 { #create_tracked_entity_attribute } 

1.  Open the **Maintenance** app and click **Program** \> **Tracked
    实体属性**。

2.  点击添加按钮。

3.  In the **Name** field, type the tracked entity attribute name.

4.  (Optional) Type a **Short name**.

4.  (Optional) Type a **Form name**.

5.  （可选）在 **Code** 字段中，分配一个代码。 

6.  （可选）输入**说明**。

7. (Optional) In the **Field mask** field, you may type a template that's used to provide
   hints for correct formatting of the attribute. **NOTE: So far only implemented in the DHIS2 Android Capture app, not in the Capture and Tracker Capture web apps.**
   以下是可在遮罩中使用的特殊字符。特殊字符与给定类型的一个字符完全匹配。

   |性格匹配|
   | ------------- | ---------------- |
   | \\ d |数字|
   | \\ x |小写字母|
   | \\ X |大写字母|
   | \\ w |任何字母数字字符|

  例如，该模式可用于在数据元素的输入字段中根据需要显示连字符。例如“ \ d \ d \ d- \ d \ d \ d- \ d \ d \ d，
  每三位数显示一个连字符。

8.  Select an **Option set**.

9.  In the **Value type** field, select the type of data that the
    跟踪的实体属性将记录。



    Table: Value types

    | Value type | Description |
    |---|---|
    | Age | - |
    | Coordinate | A point coordinate specified as longitude and latitude in decimal degrees. All coordinate should be specified in the format "-19.23 , 56.42" with a comma separating the longitude and latitude. |
    | Date | Dates render as calendar widget in data entry. |
    | Date & time | - |
    | E-mail | - |
    | File | A file resource where you can store external files, for example documents and photos. |
    | Image | Similar to File, but restricted to images. |
    | Integer | Any whole number (positive and negative), including zero. |
    | Letter | - |
    | Long text | Textual value. Renders as text area in forms. |
    | Negative integer | Any whole number less than (but not including) zero. |
    | Number | Any real numeric value with a single decimal point. Thousands separators and scientific notation is not supported. |
    | Percentage | Whole numbers inclusive between 0 and 100. |
    | Phone number ||
    | Positive integer | Any whole number greater than (but not including) zero. |
    | Positive of zero integer | Any positive whole number, including zero. |
    | Organisation unit | - |
    | Unit interval | Any real number greater than or equal to 0 and less than or equal to 1. |
    | Text | Textual value. The maximum number of allowed characters per value is 50,000. |
    | Time | Time is stored in HH:mm format.<br>     <br>HH is a number between 0 and 23<br>     <br>mm is a number between 00 and 59 |
    | Tracker associate | - |
    | Username |  Rendered as a dialog with a list of users and a search field. The user will need the "View User" authority to be able to utilise this data type |
    | Yes/No | Boolean values, renders as drop-down lists in data entry. |
    | Yes only | True values, renders as check-boxes in data entry. |

9.  Select an **Aggregation type**.



    Table: Aggregation operators

    | Aggregation operator | Description |
    |---|---|
    | Average | Average the values in both the period as and the organisation unit dimensions. |
    | Average (sum in organisation unit hierarchy) | Average of data values in the period dimension, sum in the organisation unit dimensions. |
    | Count | Count of data values. |
    | Min | Minimum of data values. |
    | Max | Maximum of data values. |
    | None | No aggregation is performed in any dimension. |
    | Sum | Sum of data values in the period and organisation unit dimension. |
    | Standard deviation | Standard deviation (population-based) of data values. |
    | Variance | Variance (population-based) of data values. |

10. Select **Unique** to specify that the values of the tracked entity
    属性是唯一的。

    唯一设置有两个选项：

      - **整个系统**：被跟踪实体属性的值
        可以重复使用属于其他跟踪实体的值
        属性。但是此跟踪实体属性中的值必须
        不重复。

        Select **Automatically generated** to allow automatic generation
        跟踪实体的属性值。当生成设置
        被选中时，用于指定图案的可选字段也被选中
        显示。此字段应包含基于
        TextPattern语法。当值自动生成时，
        对于整个系统，此属性将是唯一的。看到
        TextPattern部分以获取有关其工作原理的更多信息。

      - **组织单位**：被跟踪实体的值
        属性不得在同一单位部门中重复。

11. Select **Inherit** to registry a new entity for relationship with an
    可用实体，所有继承实体的实体属性值
    将预先填写在注册表中。

12. (Optional) Select **Confidential**.

    仅当您配置了以下功能的加密时，此选项才可用
    系统。

13. (Optional) Select **Display in list without program**.

14. （可选）分配一个或多个**传奇**。

15. 点击**保存**。 

### 创建或编辑跟踪的实体类型 { #create_tracked_entity } 

1.  Open the **Maintenance** app and click **Program** \> **Tracked
    实体类型**。

2.  点击添加按钮或一个已经存在的**已跟踪实体
    类型**。

3.  Type a **Name** of the tracked entity.

4.  (Optional) select a **Color** and an **Icon** that will be used by
    数据捕获应用程序以识别此跟踪的实体类型。

5.  (Optional) Enter a **Description** of the tracked entity.

6.  （可选）输入**所需的最少数量的属性
    搜索**。这指定了需要设置的属性数量
    填写以便能够搜索此**跟踪的实体
    type** in a *global search*. See [Configure
    搜索]（../ search / search.xml＃configure_search）了解更多信息。

7.  （可选）输入**要跟踪的实体实例的最大数量
    返回搜索**。这指定了被跟踪实体的数量
    实例将在*全局搜索*中返回。请参阅[配置
    搜索]（../ search / search.xml＃configure_search）了解更多信息。

8.  (Optional) Add **Tracked entity type attributes**. This is used to
    配置搜索，请参阅[配置
    搜索]（configure_search）了解更多信息。

9.  (Optional) Enter an **Alternative name** of the tracked entity.

10. 点击**保存**。 

## 配置搜索 { #configure_search } 

可以为用户提供搜索组织单位，从而可以
在数据捕获之外搜索跟踪的实体实例
组织单位。

搜索可以在程序的上下文中进行，也可以在
跟踪实体类型的上下文。为用户提供以下选择
在程序上下文中搜索，有必要进行配置
可以搜索哪个程序跟踪的实体属性。为了给
用户可以选择在跟踪的实体类型的上下文中进行搜索，
您将必须配置哪个跟踪实体类型属性
是可搜索的。

### 配置搜索跟踪器程序 { #configure-search-for-tracker-program } 

为了能够使用程序进行搜索，您必须制作一些
程序属性可搜索。唯一的程序属性将始终是
可搜索的。

1.  Open **Program app**

2.  打开或创建跟踪器程序

3.  Go to **Attributes**

4.  如果没有属性，请添加一个

5.  将属性设置为可搜索

可搜索的程序属性将分配给搜索组。

  - 唯一组。每个唯一程序属性一组。独特
    属性不能与程序中的其他程序属性组合
    搜索。搜索结果只能是0或1个跟踪实体
    实例。

  - 非唯一组。该组包含所有非唯一程序
    属性，并可以在一个属性中组合多个属性
    搜索。

There are two limits that can be set for a program search, as part of
the **Program** configuration.

  - 搜索所需的最少属性数量：此属性
    定义必须输入多少个非唯一属性
    才能执行搜索。

<!-- end list -->

  - 返回的跟踪实体实例的最大数量：此属性通过限制允许用户获取其搜索条件的匹配跟踪实体实例的数量来定义搜索的具体程度。如果匹配的记录数大于此最大值，则不会返回它们。在返回匹配记录之前，用户必须提供更具体的搜索条件，以减少匹配记录的数量。

    > **NOTE**
    >
    > This maximum is only applied to search results outside the users capture org unit. Within the capture scope, the user can see any number of results.

### 配置搜索以跟踪实体类型 { #configure-search-for-tracked-entity-type } 

> **注意**
>
> TET =跟踪的实体类型

为了能够在没有程序的情况下进行搜索，您必须做一些
TET属性可搜索。唯一的TET属性将始终是
可搜索的。

1.  Open **Tracked entity type app**

2.  打开一个跟踪实体类型

3.  如果TET没有属性，请添加一个

4.  将属性设置为可搜索

可搜索的TET属性将分配给搜索组。

  - 唯一组。每个唯一的TET属性一组。独特属性
    不能与搜索中的其他TET属性结合使用。结果
    来自搜索的只能是0或1个跟踪的实体实例。

  - 非唯一组。该组包含所有非唯一的TET属性
    并可以在搜索中组合多个属性。

可以为TET搜索设置两个限制

  - 搜索所需的最少属性数量：此属性
    定义必须输入多少个非唯一属性
    才能执行搜索。

<!-- end list -->

  - 返回的跟踪实体类型的最大数量：此属性通过限制允许用户为其搜索条件获取的匹配跟踪实体类型的数量，定义搜索的特定程度。如果匹配的记录数大于此最大值，则不会返回它们。在返回匹配记录之前，用户必须提供更具体的搜索条件，以减少匹配记录的数量。

    > **NOTE**
    >
    > This maximum is only applied to search results outside the users capture org unit. Within the capture scope, the user can see any number of results.

### 为用户配置搜索组织单位 { #configure-search-organisation-units-for-a-user } 

能够搜索用户数据以外的其他组织单位
捕获组织单位，则必须为用户分配搜索
组织单位。给用户一个搜索组织单位也将
授予其在该组织单位所有子级中进行搜索的权限。

1.  开启**使用者应用程式**

2.  点击一个用户

3.  打开**分配搜索组织单位**

4.  选择组织单位

5.  点击**保存**

## 克隆元数据对象 { #clone_metadata } 

克隆数据元素或其他对象可以在创建时节省时间
许多相似的对象。

1.  Open the **Maintenance** app and find the type of metadata object
    你想克隆。

2.  在对象列表中，单击选项菜单并选择**克隆**。 

3.  修改所需的选项。

4.  点击**保存**。 

## 删除元数据对象 { #delete-metadata-objects } 

> **注意**
>
>您只能在以下情况下删除数据元素和其他数据元素对象：
>没有数据与数据元素本身关联。

> **警告**
>
>从系统删除的所有数据集都将不可避免地丢失。所有
>数据输入表格，以及可能已经制定的部分表格
>也将被删除。确保您已经备份了您的
>数据库，然后删除任何数据集，以防您需要还原它
>在某个时间点。

1.  Open the **Maintenance** app and find the type of metadata object
    您要删除。

2.  在对象列表中，单击选项菜单并选择**删除**。 

3.  点击**确认**。

## 更改元数据对象的共享设置 { #change-sharing-settings-for-metadata-objects } 

您可以为元数据对象分配不同的共享设置，例如
示例组织单位和跟踪的实体属性。这些分享
设置可控制哪些用户和用户组可以查看或编辑
元数据对象。

一些元数据对象还允许您更改共享设置
对象的数据输入。这些附加设置控制谁可以
使用元数据查看或在表单字段中输入数据。

> **注意**
>
>默认设置是所有人（**公共访问权限**）都可以找到，
>查看和编辑元数据对象。

1.  Open the **Maintenance** app and find the type of metadata object
    您要修改。

2.  In the object list, click the context menu and select **Sharing
    设置**。

3.  （可选）添加用户或用户组：搜索一个或多个用户
    分组并选择它。用户或用户组已添加到列表中。

4.  更改要修改的访问组的共享设置。

      - **可以编辑和查看**：访问组可以查看和编辑
        目的。

      - **只能查看**：访问组可以查看对象。

      - **禁止访问**（仅适用于**公共访问**）：公众
        将无法访问该对象。

5.  更改您要访问的访问组的数据共享设置
    修改。

      - **可以捕获数据**：访问组可以查看和捕获数据
        为对象。

      - **可以查看数据**：访问组可以查看以下数据：
        目的。

      - **无访问权限**：访问组将无法访问以下数据：
        物体。

6.  点击**关闭**。

## 显示元数据对象的详细信息 { #display-details-of-metadata-objects } 

1.  Open the **Maintenance** app and find the type of metadata object
    您想查看。

2.  In the object list, click the options menu and select **Show
    细节**。

## 翻译元数据对象 { #translate-metadata-objects } 

DHIS2提供了用于翻译数据库内容的功能，
示例数据元素，数据元素组，指标，指标组
或组织单位。您可以将这些元素转换为任意数量的
语言环境。地区代表特定的地理，政治或
文化区。

> **Tip**
>
> To activate a translation, open the **System Settings** app, click \>
> **Appearance** and select a language.

1.  Open the **Maintenance** app and find the type of metadata object
    您要翻译。

2.  在对象列表中，单击选项菜单并选择**翻译**。 

    > **Tip**
    >
    > If you want to translate an organisation unit level, click
    > directly on the **Translate** icon next to each list item.

3.  选择一个语言环境。

4.  输入**名称**、**简称**和**说明**。 

5.  点击**保存**。 

