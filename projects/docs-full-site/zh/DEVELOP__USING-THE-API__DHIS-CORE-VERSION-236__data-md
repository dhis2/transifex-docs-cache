---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.36/src/developer/web-api/data.md"
revision_date: "2021-06-14"
tags:
    - Develop
    - DHIS 核心版本 2.36
---

# 数据 { #data }

## 数据值 { #webapi_data_values }

本节关于发送和读取数据值。

    / api / 33 / dataValueSets

### 发送数据值 { #webapi_sending_data_values }

系统集成的一个常见用例是需要将一组数据值从第三方系统发送到 DHIS。在这个例子中，我们将使用 `http://play.dhis2.org/demo` 上的 DHIS2 演示作为基础。我们假设我们已经使用在手机上运行的简单软件客户端收集了 2014 年 1 月在 _Ngelehun CHC_ 社区（_Badjia_ 酋长领地，_Bo_ 区）的_死亡率 <5 年_数据集的基于案例的数据。我们有现在将我们的数据聚合到一个统计报告中，并希望将该数据发送到 DHIS2 实例。演示 API 的基本 URL 是 `http://play.dhis2.org/demo/api`。以下链接与基本 URL 相关。

最适合我们发送数据的资源
values 是 `/api/dataValueSets` 资源。一个数据值集代表一个
一组具有关系的数据值，通常来自
从相同的数据输入表单中捕获。格式看起来像
这：

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataSet="dataSetID"
  completeDate="date" period="period" orgUnit="orgUnitID" attributeOptionCombo="aocID">
  <dataValue dataElement="dataElementID" 
    categoryOptionCombo="cocID" value="1" comment="comment1"/>
  <dataValue dataElement="dataElementID" 
    categoryOptionCombo="cocID" value="2" comment="comment2"/>
  <dataValue dataElement="dataElementID" 
    categoryOptionCombo="cocID" value="3" comment="comment3"/>
</dataValueSet>
```

JSON支持以下格式：

```json
{
    "dataSet": "dataSetID",
    "completeDate": "date",
    "period": "period",
    "orgUnit": "orgUnitID",
    "attributeOptionCombo": "aocID",
    "dataValues": [
        {
            "dataElement": "dataElementID",
            "categoryOptionCombo": "cocID",
            "value": "1",
            "comment": "comment1"
        },
        {
            "dataElement": "dataElementID",
            "categoryOptionCombo": "cocID",
            "value": "2",
            "comment": "comment2"
        },
        {
            "dataElement": "dataElementID",
            "categoryOptionCombo": "cocID",
            "value": "3",
            "comment": "comment3"
        }
    ]
}
```

CSV支持以下格式：

```csv
“ dataelement”，“ period”，“ orgunit”，“ catoptcombo”，“ attroptcombo”，“ value”，“ strby”，“ lstupd”，“ cmt”
“ dataElementID”，“ period”，“ orgUnitID”，“ cocID”，“ aocID”，“ 1”，“用户名”，“ 2015-04-01”，“ comment1”
“ dataElementID”，“ period”，“ orgUnitID”，“ cocID”，“ aocID”，“ 2”，“用户名”，“ 2015-04-01”，“ comment2”
“ dataElementID”，“ period”，“ orgUnitID”，“ cocID”，“ aocID”，“ 3”，“用户名”，“ 2015-04-01”，“ comment3”
```

> **注意**
>
>有关时间格式，请参阅上面的日期和期间部分。

从这个例子中，我们可以看出我们需要识别周期，
数据集、组织单位（设施）和数据元素
报告。

为了获取数据集的标识符，我们向 `/api/dataSets` 资源发出请求。从那里我们找到并点击指向 _Mortality < 5 years_ 数据集的链接，该链接将我们带到`/api/dataSets/pBOMPrpg1QX`。 _Mortality < 5 years_ 数据集的资源表示方便地公布指向其成员的数据元素的链接。从这里我们可以按照这些链接获取数据元素的标识符。为简洁起见，我们将仅报告三个数据元素：_Measles_，id 为`f7n9E0hX8qk`，_Dysentery_，id 为`Ix2HsbDMLea`，_Cholera_，id 为`eY5ehpbEsB7`。

What remains is to get hold of the identifier of the organisation unit. The _dataSet_ representation conveniently provides a link to organisation units which report on it so we search for _Ngelehun CHC_ and follow the link to the HTML representation at `/api/organisationUnits/DiszpKrYNg8`, which tells us that the identifier of this org unit is `DiszpKrYNg8`.

根据我们基于病例的数据，我们假设我们有 12 例麻疹病例，14
痢疾16例，霍乱16例。我们现在已经聚集了足够的
能够将 XML 数据值集放在一起的信息
信息：

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataSet="pBOMPrpg1QX"
  completeDate="2014-02-03" period="201401" orgUnit="DiszpKrYNg8">
  <dataValue dataElement="f7n9E0hX8qk" value="12"/>
  <dataValue dataElement="Ix2HsbDMLea" value="14"/>
  <dataValue dataElement="eY5ehpbEsB7" value="16"/>
</dataValueSet>
```

JSON格式：

```json
{
    "dataSet": "pBOMPrpg1QX",
    "completeDate": "2014-02-03",
    "period": "201401",
    "orgUnit": "DiszpKrYNg8",
    "dataValues": [
        {
            "dataElement": "f7n9E0hX8qk",
            "value": "1"
        },
        {
            "dataElement": "Ix2HsbDMLea",
            "value": "2"
        },
        {
            "dataElement": "eY5ehpbEsB7",
            "value": "3"
        }
    ]
}
```

To perform functional testing we will use the _curl_ tool which provides
an easy way of transferring data using HTTP. First, we save the data
value set XML content in a file called `datavalueset.xml`. From the
directory where this file resides we invoke the following from the
command line:

```bash
curl -d @datavalueset.xml "https://play.dhis2.org/demo/api/33/dataValueSets"
  -H "Content-Type:application/xml" -u admin:district
```

要发送 JSON 内容，您必须设置 content-type 标头
因此：

```bash
curl -d @datavalueset.json "https://play.dhis2.org/demo/api/33/dataValueSets"
  -H "Content-Type:application/json" -u admin:district
```

该命令将向演示 Web API 发送请求，设置
`application/xml` 作为内容类型并使用
`admin`/`district` 作为用户名/密码。如果一切顺利，这将返回一个
`200 OK` HTTP 状态代码。您可以验证数据是否已
通过在 DHIS2 中打开数据输入模块并选择组织来接收
本例中使用的单位、数据集和期间。

The API follows normal semantics for error handling and HTTP status
codes. If you supply an invalid username or password, `401 Unauthorized`
is returned. If you supply a content-type other than `application/xml`,
`415 Unsupported Media Type` is returned. If the XML content is invalid
according to the DXF namespace, `400 Bad Request` is returned. If you
provide an invalid identifier in the XML content, `409 Conflict` is
returned together with a descriptive message.

### 发送大量数据值 { #webapi_sending_bulks_data_values }

前面的例子向我们展示了如何发送一组相关的数据值
共享同一时期和组织单位。这个例子将向我们展示
如何发送大量不一定是的数据值
逻辑相关。

我们将再次与`/api/dataValueSets` 资源交互。这次我们
不会指定 `dataSet` 和 `completeDate` 属性。此外，我们将
在单个数据值上指定 `period` 和 `orgUnit` 属性
元素而不是外部数据值集元素。这会
使我们能够发送不同时期和组织单位的数据值：

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0">
  <dataValue dataElement="f7n9E0hX8qk" 
    period="201401" orgUnit="DiszpKrYNg8" value="12"/>
  <dataValue dataElement="f7n9E0hX8qk" 
    period="201401" orgUnit="FNnj3jKGS7i" value="14"/>
  <dataValue dataElement="f7n9E0hX8qk" 
    period="201402" orgUnit="DiszpKrYNg8" value="16"/>
  <dataValue dataElement="f7n9E0hX8qk" 
    period="201402" orgUnit="Jkhdsf8sdf4" value="18"/>
</dataValueSet>
```

JSON格式：

```json
{
    "dataValues": [
        {
            "dataElement": "f7n9E0hX8qk",
            "period": "201401",
            "orgUnit": "DiszpKrYNg8",
            "value": "12"
        },
        {
            "dataElement": "f7n9E0hX8qk",
            "period": "201401",
            "orgUnit": "FNnj3jKGS7i",
            "value": "14"
        },
        {
            "dataElement": "f7n9E0hX8qk",
            "period": "201402",
            "orgUnit": "DiszpKrYNg8",
            "value": "16"
        },
        {
            "dataElement": "f7n9E0hX8qk",
            "period": "201402",
            "orgUnit": "Jkhdsf8sdf4",
            "value": "18"
        }
    ]
}
```

CSV格式：

```csv
“ dataelement”，“ period”，“ orgunit”，“ categoryoptioncombo”，“ attributeoptioncombo”，“ value”
“ f7n9E0hX8qk”，“ 201401”，“ DiszpKrYNg8”，“ bRowv6yZOF2”，“ bRowv6yZOF2”，“ 1”
“ Ix2HsbDMLea”，“ 201401”，“ DiszpKrYNg8”，“ bRowv6yZOF2”，“ bRowv6yZOF2”，“ 2”
“ eY5ehpbEsB7”，“ 201401”，“ DiszpKrYNg8”，“ bRowv6yZOF2”，“ bRowv6yZOF2”，“ 3”
```

我们通过使用curl以XML格式发送数据值进行测试：

```bash
curl -d @datavalueset.xml "https://play.dhis2.org/demo/api/33/dataValueSets"
  -H "Content-Type:application/xml" -u admin:district
```

请注意，使用 CSV 格式时，您必须使用二进制数据选项
保留 CSV 文件中的换行符：

```bash
curl --data-binary @datavalueset.csv "https://play.dhis2.org/demo/24/api/dataValueSets"
  -H "Content-Type:application/csv" -u admin:district
```

数据值集资源提供有用的 XML 响应
当您想验证您的请求所产生的影响时。我们第一次
发送上面的数据值设置请求，服务器将响应
以下导入摘要：

```xml
<importSummary>
  <dataValueCount imported="2" updated="1" ignored="1"/>
  <dataSetComplete>false</dataSetComplete>
</importSummary>
```

此消息告诉我们导入了 3 个数据值，1 个数据值是
在忽略零数据值时更新。单一更新来自
我们在上一个示例中发送该数据值的结果。一个数据
如果引用不存在的数据元素，值将被忽略，
期间、组织单位或数据集。在我们的例子中，这个被忽略的值是
由对组织单位的无效引用的最后一个数据值引起。
数据集完整元素将显示数据的日期
值集已完成，如果没有数据元素属性，则为 false
提供。

### 导入参数 { #webapi_data_values_import_parameters }

可以使用一组导入参数来自定义导入过程：

 <table>
 <caption> 导入参数 </caption>
 <thead>
 <tr class="header">
 <th> 参数 </th>
 <th> 值（默认第一个） </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> dataElementIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射数据值的数据元素对象的属性。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射数据值的组织单位对象的属性。 </td>
 </tr>
 <tr class="odd">
 <td> categoryOptionComboIdScheme </td>
 <td> id |姓名 |代码 |属性：ID </td>
 <td> 用于映射数据值的类别选项组合和属性选项组合对象的属性。 </td>
 </tr>
 <tr class="even">
 <td> idScheme </td>
 <td> id |姓名 |代码|属性：ID </td>
 <td> 所有对象的属性，包括数据元素、组织单位和类别选项组合，用于映射数据值。 </td>
 </tr>
 <tr class="odd">
 <td> preheatCache </td>
 <td> 假 |真 </td>
 <td> 指示是否在开始导入数据值之前预加载元数据缓存，以加快具有高元数据基数的大型导入负载。 </td>
 </tr>
 <tr class="even">
 <td> dryRun </td>
 <td> 假 |真 </td>
 <td> 是在服务器上保存更改还是只返回导入摘要。 </td>
 </tr>
 <tr class="odd">
 <td> 导入策略 </td>
 <td> 创建 |更新 | CREATE_AND_UPDATE |删除 </td>
 <td> 在服务器上保存所有对象、新对象或更新导入状态。 </td>
 </tr>
 <tr class="even">
 <td>skipExistingCheck </td>
 <td> 假 |真 </td>
 <td> 跳过对现有数据值的检查。提高性能。仅用于空数据库或要导入的数据值不存在时。 </td>
 </tr>
 <tr class="even">
 <td> 跳过审核 </td>
 <td> 假 |真 </td>
 <td> 跳过审计，意味着不会生成审计值。以审计变更的能力为代价提高性能。需要权限“F_SKIP_DATA_IMPORT_AUDIT”。 </td>
 </tr>
 <tr class="odd">
 <td> 异步 </td>
 <td> 假 |真 </td>
 <td> 指示导入是异步还是同步。前者适用于非常大的导入，因为它确保请求不会超时，尽管它具有显着的性能开销。后者速度更快，但需要连接持续到进程完成。 </td>
 </tr>
 <tr class="even">
 <td> 强制 </td>
 <td> 假 |真 </td>
 <td> 指示是否应该强制导入。数据导入可能会因数据集锁定的各种原因而被拒绝，例如由于批准、数据输入期限、到期天数等。为了覆盖此类锁定并强制输入数据，可以使用 force=true 的数据导入。但是，要使此参数起作用，您必须是*超级用户*。 </td>
 </tr>
 </tbody>
 </table>

所有参数都是可选的，可以作为查询参数提供
请求 URL 是这样的：

    / api / 33 / dataValueSets？dataElementIdScheme = code＆orgUnitIdScheme = name
      ＆dryRun = true＆importStrategy =创建

它们也可以作为数据值集上的 XML 属性提供
元素如下。 XML 属性将覆盖查询字符串
参数。

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataElementIdScheme="code"
  orgUnitIdScheme="name" dryRun="true" importStrategy="CREATE">
</dataValueSet>
```

请注意，`preheatCache` 参数会对
表现。对于小的导入文件，将其设置为 false 会很快。
对于包含大量不同数据的大型导入文件
元素和组织单位，将其设置为 true 将是
幅度更快。

#### 数据值要求 { #webapi_data_values_import_requirement }

数据值导入支持一组值类型。对于每个值类型，
有一个特殊要求。下表列出了边缘情况
对于值类型。

 <table>
 值类型要求<caption> </caption>
 <thead>
 <tr class="header">
 <th>值类型</th>
 <th>要求</th>
 <th>评论</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> BOOLEAN </td>
 <td>是|是的TRUE |错误错误|假| 1 | 0 | t | f | </td>
 <td>当值是布尔值，true或false时使用。导入服务不关心输入的内容是大写还是小写字母，或者全部是大写字母。 </td>
 </tr>
 </tbody>
 </table>

#### 标识符方案 { #webapi_data_values_identifier_schemes }

Regarding the id schemes, by default the identifiers used in the XML
messages use the DHIS2 stable object identifiers referred to as `UID`.
In certain interoperability situations we might experience that an external
system decides the identifiers of the objects. In that case we can use
the `code` property of the organisation units and other objects to set
fixed identifiers. When importing data values we hence need to reference
the code property instead of the identifier property of these metadata
objects. Identifier schemes can be specified in the XML message as well
as in the request as query parameters. To specify it in the XML payload
you can do this:

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0"
  dataElementIdScheme="CODE" orgUnitIdScheme="UID" idScheme="CODE">
</dataValueSet>
```

上面的参数表解释了如何指定 id 方案
作为查询参数。以下规则适用于
优先级：

-   XML 或 JSON 负载中定义的 ID 方案优先于定义为 URL 查询参数的 ID 方案。

-   包括 dataElementIdScheme 和 orgUnitIdScheme 在内的特定 id 方案优先于通用 idScheme。

-   默认的 id 方案是 UID，如果没有定义明确的 id 方案，将使用该方案。

以下标识符方案可用。

-   uid（默认）

-   码

-   名称

-   属性（后跟属性的UID）

The attribute option is special and refers to meta-data attributes which have been marked as _unique_. When using this option, `attribute` must be immediately followed by the identifier of the attribute, e.g. "attribute:DnrLSdo4hMl".

#### 异步数据值导入 { #webapi_data_values_async_import }

通过提供一个设置为 _true_ 的 `async` 查询参数，可以异步方式发送和导入数据值：

    / api / 33 / dataValueSets？async = true

这将启动一个异步导入作业，您可以对其进行监控
任务摘要 API 中的状态。 API 响应表明
作业的唯一标识符、作业类型和可用于的 URL
监控导入作业状态。响应将类似于以下内容：

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Initiated dataValueImport",
    "response": {
        "name": "dataValueImport",
        "id": "YR1UxOUXmzT",
        "created": "2018-08-20T14:17:28.429",
        "jobType": "DATAVALUE_IMPORT",
        "relativeNotifierEndpoint": "/api/system/tasks/DATAVALUE_IMPORT/YR1UxOUXmzT"
    }
}
```

请阅读_异步任务状态_部分以获取更多信息。

### CSV数据值格式 { #webapi_data_values_csv }

以下部分描述了 DHIS2 中使用的 CSV 格式。首先
行被假定为标题行，在导入期间将被忽略。

 <table>
 <caption> DHIS2 的 CSV 格式 </caption>
 <tbody>
 <tr class="odd">
 <td> 列 </td>
 <td> 需要 </td>
 <td> 说明 </td>
 </tr>
 <tr class="even">
 <td> 数据元素 </td>
 <td> 是 </td>
 <td> 默认指的是ID，也可以是基于选择的id方案的名称和代码 </td>
 </tr>
 <tr class="odd">
 <td> 期间 </td>
 <td> 是 </td>
 <td> ISO 格式 </td>
 </tr>
 <tr class="even">
 <td> 组织单位 </td>
 <td> 是 </td>
 <td> 默认指的是ID，也可以是基于选择的id方案的名称和代码 </td>
 </tr>
 <tr class="odd">
 <td> 类别选项组合 </td>
 <td> 否 </td>
 <td> 指的是 ID </td>
 </tr>
 <tr class="even">
 <td> 属性选项组合 </td>
 <td> 否 </td>
 <td> 指的是 ID（从 2.16 版开始） </td>
 </tr>
 <tr class="odd">
 <td> 值 </td>
 <td> 否 </td>
 <td> 数据值 </td>
 </tr>
 <tr class="even">
 <td> 由 </td> 存储
 <td> 否 </td>
 <td> 指输入值 </td> 的用户的用户名
 </tr>
 <tr class="odd">
 <td> 最后更新 </td>
 <td> 否 </td>
 <td> ISO 格式的日期 </td>
 </tr>
 <tr class="even">
 <td> 评论 </td>
 <td> 否 </td>
 <td> 自由文本评论 </td>
 </tr>
 <tr class="odd">
 <td> 跟进 </td>
 <td> 否 </td>
 <td> 真假 </td>
 </tr>
 </tbody>
 </table>

可以导入DHIS2的CSV文件示例如下所示。

```csv
“ dataelement”，“ period”，“ orgunit”，“ catoptcombo”，“ attroptcombo”，“ value”，“ storedby”，“ timestamp”
“ DUSpd8Jq3M7”，“ 201202”，“ gP6hn503KUX”，“ Prlt0C1RF0s”，“ 7”，“ bombali”，“ 2010-04-17”
“ DUSpd8Jq3M7”，“ 201202”，“ gP6hn503KUX”，“ V6L425pT3A0”，“ 10”，“ bombali”，“ 2010-04-17”
“ DUSpd8Jq3M7”，“ 201202”，“ OjTS752GbZE”，“ V6L425pT3A0”，“ 9”，“孟买”，“ 2010-04-06”
```

### 生成数据值集模板 { #webapi_data_values_template }

要为特定数据集生成数据值集模板，您可以使用
`/api/dataSets/ <id> /dataValueSet` 资源。 XML 和 JSON 响应
支持格式。例子：

    /api/dataSets/BfMAe6Itzgt/dataValueSet.json

描述了可用于进一步调整输出的参数
以下：

 <table style="width:100%;">
 <caption>数据值查询参数</caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 19%" />
 <col style="width: 64%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>查询参数</th>
 <th>必需</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>周期</td>
 <td>否</td>
 <td>使用期限，将被包括在内，无需任何检查。 </td>
 </tr>
 <tr class="even">
 <td> orgUnit </td>
 <td>否</td>
 <td>要使用的组织单位，支持多个orgUnit，id和代码均可使用。 </td>
 </tr>
 <tr class="odd">
 <td>评论</td>
 <td>否</td>
 <td>应包含注释，默认为：是。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitIdScheme </td>
 <td>否</td>
 <td>使用的组织单位方案，支持id |码。 </td>
 </tr>
 <tr class="odd">
 <td> dataElementIdScheme </td>
 <td>否</td>
 要使用的数据元素方案，支持id | <td>码。 </td>
 </tr>
 </tbody>
 </table>

### 读取数据值 { #webapi_reading_data_values }

本节说明如何通过与 _dataValueSets_ 资源交互从 Web API 检索数据值。可以以 _XML_、_JSON_ 和 _CSV_ 格式检索数据值。由于我们要读取数据，我们将使用 _GET_ HTTP 动词。我们还将通过在我们的请求中包含一个`Accept`HTTP 标头来指定我们对 XML 资源表示感兴趣。需要以下查询参数：

 <table>
 <caption>数据值设置查询参数</caption>
 <colgroup>
 <col style="width: 27%" />
 <col style="width: 72%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th>参数</th>
 <th>说明</th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td>数据集</td>
 <td>数据集标识符。可以重复多次。 </td>
 </tr>
 <tr class="even">
 <td> dataElementGroup </td>
 <td>数据元素组标识符。可以重复多次。 </td>
 </tr>
 <tr class="odd">
 <td>周期</td>
 <td> ISO格式的期间标识符。可以重复多次。 </td>
 </tr>
 <tr class="even">
 <td>开始日期</td>
 <td>导出值的时间范围的开始日期。 </td>
 </tr>
 <tr class="odd">
 <td>结束日期</td>
 <td>导出值的时间跨度的结束日期。 </td>
 </tr>
 <tr class="even">
 <td> orgUnit </td>
 <td>组织单位标识符。可以重复多次。 </td>
 </tr>
 <tr class="odd">
 <td>儿童</td>
 <td>是否将子级包括在组织单位的层次结构中。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitGroup </td>
 <td>组织单位组标识符。可以重复多次。 </td>
 </tr>
 <tr class="odd">
 <td> attributeOptionCombo </td>
 <td>属性选项组合标识符。可以重复多次。 </td>
 </tr>
 <tr class="even">
 <td> include已删除</td>
 <td>是否包括已删除的数据值。 </td>
 </tr>
 <tr class="odd">
 <td>最后更新</td>
 <td>仅包含自给定时间戳记以来已更新的数据值。 </td>
 </tr>
 <tr class="even">
 <td> lastUpdatedDuration </td>
 <td>仅包含在给定持续时间内更新的数据值。格式是&lt;value&gt;&lt;time-unit&gt;，其中所支持的时间单位是&quot;d&quot;（天），&quot;h&quot;（小时），&quot;m&quot;（分钟）和&quot;s&quot;（秒）。 </td>
 </tr>
 <tr class="odd">
 <td>限制</td>
 <td>响应中的最大结果数。 </td>
 </tr>
 <tr class="even">
 <td> idScheme </td>
 <td>用于响应的数据值的元数据对象的属性。 </td>
 </tr>
 <tr class="odd">
 <td> dataElementIdScheme </td>
 <td>用于响应的数据值的数据元素对象的属性。 </td>
 </tr>
 <tr class="even">
 <td> orgUnitIdScheme </td>
 <td>用于响应中的数据值的组织单位对象的属性。 </td>
 </tr>
 <tr class="odd">
 <td>类别选项组合ID方案</td>
 <td>类别选项组合和属性选项组合对象的属性，用于响应数据值。 </td>
 </tr>
 <tr class="even">
 <td> dataSetIdScheme </td>
 <td>在响应中使用的数据集对象的属性。 </td>
 </tr>
 </tbody>
 </table>

支持以下响应格式：

-   xml（应用程序/ xml）

-   json（应用程序/ json）

-   csv（应用程序/ csv）

-   adx（应用程序/ adx + xml）

假定我们已经按照上一节_发送数据值_的步骤向 DHIS2 发送了数据值，现在我们就可以使用 cURL 将我们对单个数据值集的请求汇总起来并进行请求：

```bash
curl "https://play.dhis2.org/demo/api/33/dataValueSets?dataSet=pBOMPrpg1QX&period=201401&orgUnit=DiszpKrYNg8"
  -H "Accept:application/xml" -u admin:district
```

我们还可以使用开始和结束日期查询参数来请求一个
大量的数据值。 IE。您还可以请求数据值
多个数据集和组织单位以及一个时间跨度以便导出
更大的数据块。请注意，期间查询参数采用
优先于开始和结束日期参数。一个例子看起来像
这：

```bash
curl "https://play.dhis2.org/demo/api/33/dataValueSets?dataSet=pBOMPrpg1QX&dataSet=BfMAe6Itzgt
  &startDate=2013-01-01&endDate=2013-01-31&orgUnit=YuQRtpLP10I&orgUnit=vWbkYPRmKyS&children=true"
  -H "Accept:application/xml" -u admin:district
```

检索已创建或更新的数据值
过去 10 天，您可以提出这样的请求：

    / api / dataValueSets？dataSet = pBOMPrpg1QX＆orgUnit = DiszpKrYNg8＆lastUpdatedDuration = 10d

响应将如下所示：

```xml
<?xml version='1.0' encoding='UTF-8'?>
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataSet="pBOMPrpg1QX"
  completeDate="2014-01-02" period="201401" orgUnit="DiszpKrYNg8">
<dataValue dataElement="eY5ehpbEsB7" period="201401" orgUnit="DiszpKrYNg8"
  categoryOptionCombo="bRowv6yZOF2" value="10003"/>
<dataValue dataElement="Ix2HsbDMLea" period="201401" orgUnit="DiszpKrYNg8"
  categoryOptionCombo="bRowv6yZOF2" value="10002"/>
<dataValue dataElement="f7n9E0hX8qk" period="201401" orgUnit="DiszpKrYNg8"
  categoryOptionCombo="bRowv6yZOF2" value="10001"/>
</dataValueSet>
```

您可以使用JSON格式请求数据，如下所示：

    /api/dataValueSets.json?dataSet=pBOMPrpg1QX&period=201401&orgUnit=DiszpKrYNg8

响应如下所示：

```json
{
    "dataSet": "pBOMPrpg1QX",
    "completeDate": "2014-02-03",
    "period": "201401",
    "orgUnit": "DiszpKrYNg8",
    "dataValues": [
        {
            "dataElement": "eY5ehpbEsB7",
            "categoryOptionCombo": "bRowv6yZOF2",
            "period": "201401",
            "orgUnit": "DiszpKrYNg8",
            "value": "10003"
        },
        {
            "dataElement": "Ix2HsbDMLea",
            "categoryOptionCombo": "bRowv6yZOF2",
            "period": "201401",
            "orgUnit": "DiszpKrYNg8",
            "value": "10002"
        },
        {
            "dataElement": "f7n9E0hX8qk",
            "categoryOptionCombo": "bRowv6yZOF2",
            "period": "201401",
            "orgUnit": "DiszpKrYNg8",
            "value": "10001"
        }
    ]
}
```

请注意，数据值是软删除的，即删除的值具有
`deleted` 属性设置为 true 而不是被永久删除。
这在集成多个系统以进行通信时很有用
删除。您可以在响应中包含已删除的值，如下所示：

    /api/33/dataValueSets.json?dataSet=pBOMPrpg1QX&period=201401
      ＆orgUnit = DiszpKrYNg8＆includeDeleted = true

您还可以请求CSV格式的数据，如下所示：

    /api/33/dataValueSets.csv?dataSet=pBOMPrpg1QX&period=201401
      ＆orgUnit = DiszpKrYNg8

响应将如下所示：

```csv
数据元素，期限，组织单位，catoptcombo，attroptcombo，值，存储于，最后更新，注释，开始
f7n9E0hX8qk，201401，DiszpKrYNg8，bRowv6yZOF2，bRowv6yZOF2,12，system，2015-04-05T19：58：12.000，comment1，false
Ix2HsbDMLea，201401，DiszpKrYNg8，bRowv6yZOF2，bRowv6yZOF2,14，system，2015-04-05T19：58：12.000，comment2，false
eY5ehpbEsB7,201401，DiszpKrYNg8，bRowv6yZOF2，bRowv6yZOF2,16，系统，2015-04-05T19：58：12.000，comment3，false
FTRrcoaog83,201401，DiszpKrYNg8，bRowv6yZOF2，bRowv6yZOF2,12，系统，2014-03-02T21：45：05.519，comment4，false
```

以下约束适用于数据值集资源：

-   必须至少指定一个数据集。

-   必须指定至少一个期间或开始日期和结束日期。

-   必须至少指定一个组织单位。

-   组织单位必须位于经过身份验证的用户的组织单位的层次结构内。

-   限制不能小于零。

### 发送，读取和删除单个数据值 { #webapi_sending_individual_data_values }

本示例将展示如何在一个请求中发送要保存的单个数据值。这可以通过向 `dataValues` 资源发送 _POST_ 请求来实现：

    / api / dataValues

此资源支持以下查询参数：

 <table style="width:100%;">
 <caption> 数据值查询参数 </caption>
 <colgroup>
 <col style="width: 15%" />
 <col style="width: 19%" />
 <col style="width: 64%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 查询参数 </th>
 <th> 需要 </th>
 <th> 说明 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 德 </td>
 <td> 是 </td>
 <td> 数据元素标识符 </td>
 </tr>
 <tr class="even">
 <td> pe </td>
 <td> 是 </td>
 <td> 期间标识符 </td>
 </tr>
 <tr class="odd">
 <td> 或 </td>
 <td> 是 </td>
 <td> 组织单位标识符 </td>
 </tr>
 <tr class="even">
 <td> co </td>
 <td> 否 </td>
 <td> 类别选项组合标识符，如果省略则默认使用 </td>
 </tr>
 <tr class="odd">
 <td> cc </td>
 <td> 否（必须与cp结合） </td>
 <td> 属性类别组合标识符 </td>
 </tr>
 <tr class="even">
 <td> cp </td>
 <td> 否（必须与 cc 结合） </td>
 <td> 属性类别选项标识符，以 ; 分隔对于多个值 </td>
 </tr>
 <tr class="odd">
 <td> ds </td>
 <td> 否 </td>
 <td> 数据集，用于检查期间和组织单位是否允许 POST 或 DELETE。如果指定，则必须将数据元素分配给该数据集。如果未指定，将选择包含数据元素的数据集来检查是否允许操作。 </td>
 </tr>
 <tr class="even">
 <td> 值 </td>
 <td> 否 </td>
 <td> 数据值。对于布尔值，将接受以下内容：true |真|真|假|错误 |错误 | 1 | 0 |吨| f | </td>
 </tr>
 <tr class="odd">
 <td> 评论 </td>
 <td> 否 </td>
 <td> 数据注释 </td>
 </tr>
 <tr class="even">
 <td> 跟进 </td>
 <td> 否 </td>
 <td> 跟踪数据值，将切换当前布尔值 </td>
 </tr>
 </tbody>
 </table>

如果给定的任何标识符无效、数据值或注释无效或者数据被锁定，则响应将包含 _409 Conflict_ 状态代码和描述性文本消息。如果操作导致保存或更新值，则将返回_200 OK_。请求的示例如下所示：

```bash
curl "https://play.dhis2.org/demo/api/33/dataValues?de=s46m5MS0hxu
  &pe=201301&ou=DiszpKrYNg8&co=Prlt0C1RF0s&value=12"
  -X POST -u admin:district
```

此资源还允许使用特殊语法将值关联到
一个属性选项组合。这可以通过发送
属性类别组合的标识符，连同标识符
值代表的属性类别选项
组合。类别组合由 `cc` 参数指定，而
类别选项被指定为分号分隔的字符串，带有`cp`
范围。有必要确保类别选项都是部分
的类别组合。一个示例如下所示：

```bash
curl "https://play.dhis2.org/demo/api/33/dataValues?de=s46m5MS0hxu&ou=DiszpKrYNg8
  &pe=201308&cc=dzjKKQq0cSO&cp=wbrDrL2aYEc;btOyqprQ9e8&value=26"
  -X POST -u admin:district
```

您可以使用 _GET_ 方法通过请求检索数据值。 value、comment 和 followUp 参数在这方面不适用：

```bash
curl "https://play.dhis2.org/demo/api/33/dataValues?de=s46m5MS0hxu
  &pe=201301&ou=DiszpKrYNg8&co=Prlt0C1RF0s"
  -u admin:district
```

您可以使用 _DELETE_ 方法通过请求删除数据值。

#### 处理文件数据值 { #datavalue_file }

当处理具有 _file_ 类型数据元素的数据值时，与上述方法存在一些偏差。这些数据值的特殊之处在于，值的内容是对 _FileResource_ 对象的 UID 引用，而不是自包含常量。这些数据值的行为就像存储文本内容的其他数据值一样，但应该以不同的方式处理，以便产生有意义的输入和输出。

有两种存储 FileResource 数据值的方法。

**简单方法：** 按照文件资源部分所述，将文件上传到 `/api/dataValues/file` 端点。此方法适用于 2.36 及更高版本。

**困难的方法：** 如果您正在编写需要与 2.36 之前的 DHIS2 版本兼容的代码，那么过程是：

1.  如文件资源部分所述，将文件上传到 `/api/fileResources` 端点。

2.  读取返回的 _FileResource_ 的 `id` 属性。

3.  使用上述任何方法将检索到的 id_作为值_存储到数据值中。

数据值和文件资源之间只有一对一的关系
允许。这是在内部强制执行的，以便保存文件资源 ID
在多个数据值中是不允许的，并且会返回错误。删除
数据值将删除引用的文件资源。直接删除
的文件资源是不可能的。

数据值现在可以作为除返回数据以外的任何其他值进行检索
将是文件资源的 UID。为了检索实际
内容（意味着存储在映射的文件资源中的文件
到数据值）必须向 `/api/dataValues/files` 发出 GET 请求
镜像查询参数，因为它们将用于数据值
本身。 `/api/dataValues/files` 端点仅支持 GET 请求。

值得注意的是，由于底层存储机制工作
异步文件内容可能不会立即准备好
从`/api/dataValues/files` 端点下载。这是特别真实的
对于可能需要耗时上传的大文件
外部文件存储的背景（取决于系统
配置）。从文件资源元数据中检索
`/api/fileResources/ <id> ` 端点允许检查 `storageStatus`
在尝试下载内容之前。

## ADX数据格式 { #webapi_adx_data_format }

从 2.20 版开始，我们已经包含了对国际标准的支持
用于称为 ADX 的聚合数据交换。 ADX 开发和维护
由 IHE 质量研究和公共卫生委员会提供
（整合医疗保健企业）。详细介绍 QRPH 的 wiki 页面
活动可以在
[wiki.ihe.net](http://wiki.ihe.net/index.php?title=Quality,_Research_and_Public_Health#Current_Domain_Activities)。
ADX 仍在积极开发中，现已发布用于
试实施。请注意，当前在 DHIS2 中实现的内容
是读取和写入 adx 格式数据的功能，即什么是
在 ADX 中被描述为内容消费者和内容生产者演员
轮廓。

ADX 数据消息的结构与您可能的结构非常相似
从前面描述的 DXF 2 数据中已经熟悉了。有一个
几个重要的区别。我们将描述这些差异
参考一个小例子：

```xml
<adx xmlns="urn:ihe:qrph:adx:2015" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ihe:qrph:adx:2015 ../schema/adx_loose.xsd" 
  exported="2015-02-08T19:30:00Z">
  <group orgUnit="OU_559" period="2015-06-01/P1M" 
    completeDate="2015-07-01" dataSet="(TB/HIV)VCCT">
    <dataValue dataElement="VCCT_0" GENDER="FMLE" HIV_AGE="AGE0-14" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="FMLE" HIV_AGE="AGE0-14" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="FMLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="FMLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="FMLE" HIV_AGE="AGE0-14" value="10"/>

    <dataValue dataElement="VCCT_0" GENDER="MLE" HIV_AGE="AGE0-14" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="MLE" HIV_AGE="AGE0-14" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="MLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="MLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="MLE" HIV_AGE="AGE0-14" value="10"/>

    <dataValue dataElement="VCCT_0" GENDER="FMLE" HIV_AGE="AGE15-24" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="FMLE" HIV_AGE="AGE15-24" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="FMLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="FMLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="FMLE" HIV_AGE="AGE15-24" value="10"/>

    <dataValue dataElement="VCCT_0" GENDER="MLE" HIV_AGE="AGE15-24" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="MLE" HIV_AGE="AGE15-24" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="MLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="MLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="MLE" HIV_AGE="AGE15-24" value="10"/>
  </group>
</adx>
```

### adx根元素 { #the-adx-root-element }

adx 根元素只有一个强制属性，即 _exported_ 时间戳。与其他 adx 元素一样，该模式是可扩展的，因为它不限制其他应用程序特定的属性。

### 组元素 { #the-group-element }

与 dxf2 不同，adx 要求数据值根据
组织单位、期间和数据集。上面的例子显示了一个数据报告
来自在线演示数据库的“(TB/HIV) VCCT”数据集。这个例子
使用代码作为标识符而不是 dhis2 uid。代码是
使用 adx 时的首选标识符形式。

orgUnit、period 和 dataSet 属性在 adx 中是必需的。这
group 元素可能包含附加属性。在我们的 DHIS2
实现任何附加属性都简单地传递给
基础进口商。这意味着当前所有的属性
在 dxf2 中有意义（例如上例中的 completeDate）可以
继续在 adx 中使用，它们将以相同的方式进行处理。

adx 和 dxf2 之间的显着区别在于句点
被编码。 Adx 严格使用 ISO8601 并对报告进行编码
期间为（日期|日期时间）/（持续时间）。所以上面例子中的句点
是从 2015-06-01 开始的 1 个月 (P1M) 期间。所以是数据
2015 年 6 月。符号有点冗长，但它非常
灵活并允许我们支持 DHIS2 中的所有现有期间类型

### ADX期间定义 { #adx-period-definitions }

DHIS2 在导入期间支持有限数量的期间或持续时间。
期间应从持续时间开始的日期开始，然后是
一个“/”，然后是表中注明的持续时间符号。这
下表详细说明了所有 ADX 支持的周期类型，以及
用例子。

 <table>
 <caption> ADX 周期 </caption>
 <colgroup>
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 <col style="width: 25%" />
 </colgroup>
 <thead>
 <tr class="header">
 <th> 周期类型 </th>
 <th> 持续时间符号 </th>
 <th> 示例 </th>
 <th> 持续时间 </th>
 </tr>
 </thead>
 <tbody>
 <tr class="odd">
 <td> 每日 </td>
 <td> P1D </td>
 <td> 2017-10-01/P1M </td>
 <td> 2017 年 10 月 1 日 </td>
 </tr>
 <tr class="even">
 <td> 每周 </td>
 <td> P7D </td>
 <td> 2017-10-01/P7D </td>
 <td> 2017 年 10 月 1 日-2017 年 10 月 7 日 </td>
 </tr>
 <tr class="odd">
 <td> 每月 </td>
 <td> P1M </td>
 <td> 2017-10-01/P1M </td>
 <td> 2017 年 10 月 1 日至 2017 年 10 月 31 日 </td>
 </tr>
 <tr class="even">
 <td> 双月刊 </td>
 <td> P2M </td>
 <td> 2017-11-01/P2M </td>
 <td> 2017 年 11 月 1 日至 2017 年 12 月 31 日 </td>
 </tr>
 <tr class="odd">
 <td> 季度 </td>
 <td> P3M </td>
 <td> 2017-09-01/P3M </td>
 <td> 2017 年 9 月 1 日至 2017 年 12 月 31 日 </td>
 </tr>
 <tr class="even">
 <td> 六个月 </td>
 <td> P6M </td>
 <td> 2017-01-01/P6M </td>
 <td> 2017 年 1 月 1 日至 2017 年 6 月 30 日 </td>
 </tr>
 <tr class="odd">
 <td> 每年 </td>
 <td> P1Ý </td>
 <td> 2017-01-01/P1Y </td>
 <td> 2017 年 1 月 1 日至 2017 年 12 月 31 日 </td>
 </tr>
 <tr class="even">
 <td> 金融十月 </td>
 <td> P1Y </td>
 <td> 2017-10-01/P1Y </td>
 <td> 2017 年 10 月 1 日至 2018 年 9 月 30 日 </td>
 </tr>
 <tr class="odd">
 <td> 财务 4 月 </td>
 <td> P1Y </td>
 <td> 2017-04-01/P1Y </td>
 <td> 2017 年 4 月 1 日至 2018 年 3 月 31 日 </td>
 </tr>
 <tr class="even">
 <td> 金融七月 </td>
 <td> P1Y </td>
 <td> 2017-07-01/P1Y </td>
 <td> 2017 年 7 月 1 日至 2018 年 6 月 30 日 </td>
 </tr>
 </tbody>
 </table>

### 数据值 { #data-values }

adx 中的 dataValue 元素与 DXF 中的对应元素非常相似。强制属性是_dataElement_ 和_value_。 _orgUnit_ 和 _period_ 属性不会出现在 dataValue 中，因为它们在 _group_ 级别是必需的。

最显着的区别是分解的表示方式。 DXF 使用categoryOptionCombo 来指示数据的分解。在 adx 中，分解（例如 AGE*GROUP 和 SEX）明确表示为属性。使用 adx 的一个重要限制是，数据集中用于数据元素的类别必须分配有一个代码，而且该代码必须采用适合用作 XML 属性的形式。 W3C XML 标准中描述了对 XML 属性名称的确切约束 - 实际上，这意味着不能有空格，不能有除“*”之外的非字母数字字符，并且不能以字母开头。上面的示例显示了“好”类别代码的示例（“GENDER”和“HIV_AGE”）。

这种对代码形式的限制仅适用于类别。
目前，当您分配时，DHIS2 不强制执行该约定
代码，但如果您尝试
导入 adx 数据并且类别代码未分配或未分配
合适的。

使用分解数据的显式维度的主要好处是
那

-   生成数据的系统不必与DHIS2 中的categoryOptionCombo 同步。

-   生产者和消费者可以将他们的代码与第三方权威来源（例如术语服务）进行匹配。请注意，在上面的示例中，性别和年龄组代码使用来自 [WHO 全球卫生观察站](http://apps.who.int/gho/data/node.resources.api) 的代码列表。

请注意，此功能可能非常有用，例如从 EMR 系统生成分类数据时，但在某些情况下，_categoryOptionCombo_ 映射可能更容易或更理想。 adx 的 DHIS2 实现将检查 _categoryOptionCombo_ 属性是否存在，如果存在，它将使用它对分解维度属性的偏好。类似地，_group_ 元素上的 _attributeOptionCombo_ 属性将以传统方式进行处理。否则，attributeOptionCombo 可以被视为分解类别，就像在 _dataValue_ 上一样。

在上面的简单示例中，数据集中的每个数据元素都具有相同的维度（categorycombo），因此数据是整齐的矩形。情况不一定如此。数据集可能包含具有不同类别组合的数据元素，从而产生 _ragged-right_ adx 数据消息。

### 汇入资料 { #importing-data }

DHIS2 exposes an endpoint for POST adx data at `/api/dataValueSets` using _application/xml+adx_ as content type. So, for example, the following curl command can be used to POST the example data above to the DHIS2 demo server:

```bash
curl -u admin:district -X POST -H "Content-Type: application/adx+xml"
  -d @data.xml "https://play.dhis2.org/demo/api/33/dataValueSets?dataElementIdScheme=code&orgUnitIdScheme=code"
```

请注意，查询参数与用于 DXF 数据的参数相同。这
adx 端点应该解释所有现有的 DXF 参数
与 DXF 相同的语义。

### 汇出资料 { #exporting-data }

DHIS2 exposes an endpoint to GET adx data sets at `/api/dataValueSets` using _application/xml+adx_ as the accepted content type. So, for example, the following curl command can be used to retrieve the adx data:

```bash
curl -u admin:district -H "Accept: application/adx+xml"
 "https://play.dhis2.org/demo/api/33/dataValueSets?dataValueSets?orgUnit=M_CLINIC&dataSet=MALARIA&period=201501"
```

请注意，查询参数与用于 DXF 数据的参数相同。一个
重要的区别是 dataSet 和 orgUnit 的标识符是
假定为代码而不是 uid。

## 后续行动 { #webapi_follow_up }

本节介绍了后续的标记数据。

### 数据值跟踪 { #data-value-follow-up }

数据值跟踪端点允许标记数据值以进行跟踪。

```
PUT / api / 36 / dataValues /跟进
```

The payload in `JSON` format looks like this:

```json
{
    "dataElement": "s46m5MS0hxu",
    "period": "202005",
    "orgUnit": "DiszpKrYNg8",
    "categoryOptionCombo": "psbwp3CQEhs",
    "attributeOptionCombo": "HllvX50cXC0",
    "followup": true
}
```

The `categoryOptionCombo` and `attributeOptionCombo` fields are optional. A minimal `JSON` payload looks like this:

```json
{
    "dataElement": "s46m5MS0hxu",
    "period": "202005",
    "orgUnit": "DiszpKrYNg8",
    "followup": false
}
```

The `followup` field should be set to `true` to mark a data value for follow-up, and `false` to remove the mark.

如果操作成功，响应状态代码将为`200 OK`，如果请求出错，则响应状态代码为`409 Conflict`。
