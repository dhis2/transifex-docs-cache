---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.40/src/developer/web-api/tracker.md"
revision_date: '2024-01-19'
tags:
- Develop
- DHIS core version 2.40
---

# 追踪器 { #tracker } 

> **注意**
>跟踪器已在 DHIS2 2.36 中重新实现。本文档描述了新的跟踪器端点
>
> * `POST /api/tracker`
> * `GET /api/tracker/enrollments`
> * `GET /api/tracker/events`
> * `GET /api/tracker/trackedEntities`
> * `GET /api/tracker/relationships`
>
>[追踪器
>（已弃用）](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/tracker-deprecated.html)
>描述已弃用的端点
>
> * `GET/POST/PUT/DELETE /api/trackedEntityInstance`
> * `GET/POST/PUT/DELETE /api/enrollments`
> * `GET/POST/PUT/DELETE /api/events`
> * `GET/POST/PUT/DELETE /api/relationships`
>
>* 如果您仍在生产中使用已弃用的跟踪器端点，请计划迁移
> 到新的端点。 [迁移到新的跟踪器
> 端点](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/tracker-deprecated.html#webapi_tracker_migration)
> 应该可以帮助您入门。联系 [社区]
> 练习](https://community.dhis2.org) 如果您需要进一步帮助。注意：数据功能
> 新的跟踪器端点中未实现sync(importMode=SYNC)，如果您使用此
> 功能，您将不得不推迟迁移，直到新的 SYNC 功能到位。

## 跟踪器对象 { #webapi_nti_tracker_objects }

跟踪器由几种不同类型的对象组成，这些对象嵌套在一起以表示数据。在本节中，我们将展示并描述 Tracker API 中使用的每个对象。

### 跟踪实体 { #tracked-entity }

`跟踪实体`是跟踪器模型的根对象。

| 财产 | 描述 | 需要 | 不可变的 | 类型 | 例 |
|---|---|---|---|---|---|
| 跟踪实体 | 被跟踪实体的标识符。如果未提供则生成 | 不 | 是的 | String:Uid | ABCDEF12345 |
| trackedEntityType | 跟踪实体的类型。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| createdAt | 用户创建跟踪实体时的时间戳。在服务器上设置。 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| createdAtClient | 用户在客户端上创建跟踪实体时的时间戳。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 上次更新对象的时间戳。在服务器上设置。 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAtClient | 对象上次在客户端更新的时间戳。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| orgUnit | 用户创建跟踪实体的组织部门。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| inactive | 指示被跟踪实体是否处于非活动状态。 | 不 | 是的 | Boolean | Default: False, True |
| deleted | 指示跟踪的实体是否已被删除。只有删除时才能改变。 | 不 | 不 | Boolean | 错误直到被删除 |
| geometry | 被跟踪实体的地理表示。基于 TrackedEntityType 的“featureType”。 | 不 | 是的 | GeoJson | {<br>"type": "POINT",<br>"coordinates": [123.0, 123.0]<br>} |
| 存储者 | 存储/创建被跟踪实体的客户参考。 | 不 | 是的 | 字符串：任意 | 约翰·多伊 |
| 由...制作 | 仅用于读取数据。创建该对象的用户。在服务器上设置 | 不 | 是的 | 用户 | { <br> "uid": "ABCDEF12345", <br> "用户名": "用户名", <br> "名字": "约翰", <br> "姓氏": "Doe" <br> } |
| 更新者 | 仅用于读取数据。最后更新对象的用户。在服务器上设置 | 不 | 是的 | 用户 | { <br> "uid": "ABCDEF12345", <br> "用户名": "用户名", <br> "名字": "约翰", <br> "姓氏": "Doe" <br> } |
| 属性 | 被跟踪实体拥有的被跟踪实体属性值的列表。 | 不 | 是的 | TrackedEntityAttributeValue 列表 | 查看属性 |
| 入学人数 | 被跟踪实体拥有的注册列表。 | 不 | 是的 | 招生名单 | 查看报名 |
| 关系 | 连接到被跟踪实体的关系列表。 | 不 | 是的 | 关系列表 | 查看关系 |
| 程序所有者 | 可以通过特定程序访问此跟踪实体的组织单位列表。有关详细信息，请参阅“程序所有权”。 | 不 | 是的 | 程序所有者列表 | 请参阅“程序所有权”部分 |

> **注意**
>
> `被跟踪实体`"拥有"所有`被跟踪实体属性值`（或上表中所述的"属性"）。然而，`被跟踪实体属性`要么通过`被跟踪实体类型`或`程序`连接到`被跟踪实体`。我们经常将这种分离称为`跟踪实体类型属性`和`跟踪实体程序属性`。这种分离的重要性与访问控制和限制用户可以看到的信息有关。
>
> `被跟踪实体`中提到的"属性"是`被跟踪实体类型属性`。


### 注册 { #enrollment } 
`被跟踪实体`可以注册其符合资格的`项目`。只要程序配置了与被跟踪实体相同的`被跟踪实体类型`，被跟踪实体就符合资格。我们用`Enrollment`对象来表示注册，我们将在本节中对此进行描述。


| 财产 | 描述 | 需要 | 不可变的 | 类型 | 例 |
|---|---|---|---|---|---|
| 注册 | 注册的标识符。如果未提供则生成 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 程序 | 注册代表的计划。 | 是的 | 不 | String:Uid | ABCDEF12345 |
| 跟踪实体 | 对注册的跟踪实体的引用。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| trackedEntityType | 仅用于读取数据。注册的跟踪实体的类型 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 地位 | 注册状态。如果未提供，则处于活动状态。 | 不 | 不 | 枚举 | 有效、已完成、已取消 |
| orgUnit | 用户注册跟踪实体的组织部门。 | 是的 | 不 | String:Uid | ABCDEF12345 |
| 组织单位名称 | 仅用于读取数据。进行注册的组织单位的名称。 | 不 | 不 | 字符串：任意 | 塞拉利昂 |
| createdAt | 用户创建对象时的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| createdAtClient | 用户在客户端创建对象时的时间戳 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 上次更新对象的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAtClient | 对象上次在客户端更新的时间戳 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 注册于 | 用户注册跟踪实体时的时间戳。 | 是的 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 发生于 | 注册发生时的时间戳。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 完成时间 | 用户完成注册时的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 完成者 | 参考谁完成了注册 | 不 | 不 | 字符串：任意 | 约翰·多伊 |
| 跟进 | 指示注册是否需要跟进。如果未提供则为假 | 不 | 不 | 布尔兰 | Default: False, True |
| deleted | 指示注册是否已被删除。只有删除时才能改变。 | 不 | 是的 | Boolean | 错误直到被删除 |
| geometry | 招生的地理代表性。基于程序的“featureType” | 不 | 不 | GeoJson | {<br>"type": "POINT",<br>"coordinates": [123.0, 123.0]<br>} |
| 存储者 | 存储/创建注册的客户参考。 | 不 | 不 | 字符串：任意 | 约翰·多伊 |
| 由...制作 | 仅用于读取数据。创建该对象的用户。在服务器上设置 | 不 | 是的 | 用户 | { <br> "uid": "ABCDEF12345", <br> "用户名": "用户名", <br> "名字": "约翰", <br> "姓氏": "Doe" <br> } |
| 更新者 | 仅用于读取数据。最后更新对象的用户。在服务器上设置 | 不 | 是的 | 用户 | { <br> "uid": "ABCDEF12345", <br> "用户名": "用户名", <br> "名字": "约翰", <br> "姓氏": "Doe" <br> } |
| 属性 | 与注册相关的跟踪实体属性值的列表。 | 不 | 不 | TrackedEntityAttributeValue 列表 | 查看属性 |
| 事件 | 注册拥有的事件列表。 | 不 | 不 | 活动一览 | 查看活动 |
| 关系 | 与注册相关的关系列表。 | 不 | 不 | 关系列表 | 查看关系 |
| 笔记 | 与注册相关的注释。它只能被创建。 | 不 | 是的 | 注意事项清单 | 看注释 |

> **Note**
>
> `Tracked Entities` "owns" all `Tracked Entity Attribute Values` (Or "attributes" as described in the previous table). However, `Tracked Entity Attributes` are either connected to a `Tracked Entity` through its `Tracked Entity Type` or a `Program`. We often refer to this separation as `Tracked Entity Type Attributes` and `Tracked Entity Program Attributes`. The importance of this separation is related to access control and limiting what information the user can see.
>
> The "attributes" referred to in the `Enrollment` are `Tracked Entity Program Attributes`.


### 大事记 { #events } 
`Events` are either part of an `EVENT PROGRAM` or `TRACKER PROGRAM`. For `TRACKER PROGRAM`, events belong to an `Enrollment`, which again belongs to a `Tracked Entity`. On the other hand, `EVENT PROGRAM` is `Events` not connected to a specific `Enrollment` or `Tracked Entity`. The difference is related to whether we track a specific `Tracked Entity` or not. We sometimes refer to `EVENT PROGRAM` events as "anonymous events" or "single events" since they only represent themselves and not another `Tracked Entity`.

In the API, the significant difference is that all events are either connected to the same enrollment (`EVENT PROGRAM`) or different enrollments (`TRACKER PROGRAM`). The table below will point out any exceptional cases between these two.

| 财产 | 描述 | 需要 | 不可变的 | 类型 | 例 |
|---|---|---|---|---|---|
| 事件 | 事件的标识符。如果未提供则生成 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 节目阶段 | 事件代表的节目阶段。 | 是的 | 不 | String:Uid | ABCDEF12345 |
| 注册 | A reference to the enrollment which owns the event. ***Not applicable for `EVENT PROGRAM`*** | 是的 | 是的 | String:Uid | ABCDEF12345 |
| 程序 | 仅用于读取数据。拥有该活动的注册所拥有的计划类型。 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 跟踪实体 | Only for reading data. The tracked entity which owns the event. ***Not applicable for `EVENT PROGRAM`*** | 不 | 不 | String:Uid | ABCDEF12345 |
| 地位 | 事件的状态。如果未提供，则处于活动状态。 | 不 | 不 | 枚举 | 活动、已完成、已访问、已安排、逾期、已跳过 |
| 入学状态 | Only for reading data. The status of the enrollment which owns the event. ***Not applicable for `EVENT PROGRAM`*** | 不 | 不 | 枚举 | 有效、已完成、已取消 |
| orgUnit | 用户注册事件的组织单位。 | 是的 | 不 | String:Uid | ABCDEF12345 |
| 组织单位名称 | 仅用于读取数据。用户注册事件的组织单位的名称。 | 不 | 不 | 字符串：任意 | 塞拉利昂 |
| createdAt | 用户创建事件的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| createdAtClient | 用户在客户端创建事件的时间戳 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 事件上次更新的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAtClient | 事件上次在客户端更新的时间戳 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 预定时间 | 安排活动的时间戳。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 发生于 | 发生某事时的时间戳。 | 是的 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 完成时间 | 用户完成事件时的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 完成者 | 参考谁完成了事件 | 不 | 不 | 字符串：任意 | 约翰·多伊 |
| 跟进 | 指示事件是否已标记为后续操作。如果未提供则为假 | 不 | 不 | 布尔兰 | Default: False, True |
| deleted | 指示事件是否已被删除。只有删除时才能改变。 | 不 | 是的 | Boolean | 错误直到被删除 |
| geometry | 事件的地理代表。基于节目阶段的“featureType” | 不 | 不 | GeoJson | {<br>"type": "POINT",<br>"coordinates": [123.0, 123.0]<br>} |
| 存储者 | 存储/创建事件的客户参考。 | 不 | 不 | 字符串：任意 | 约翰·多伊 |
| 由...制作 | 仅用于读取数据。创建该对象的用户。在服务器上设置 | 不 | 是的 | 用户 | { <br> "uid": "ABCDEF12345", <br> "用户名": "用户名", <br> "名字": "约翰", <br> "姓氏": "Doe" <br> } |
| 更新者 | 仅用于读取数据。最后更新对象的用户。在服务器上设置 | 不 | 是的 | 用户 | { <br> "uid": "ABCDEF12345", <br> "用户名": "用户名", <br> "名字": "约翰", <br> "姓氏": "Doe" <br> } |
| 属性选项组合 | 事件的属性选项组合。如果未提供或配置，则为默认值。 | 不 | 不 | String:Uid | ABCDEF12345
| 属性类别选项 | 事件的属性类别选项。如果未提供或配置，则为默认值。 | 不 | 不 | String:Uid | ABCDEF12345
| 分配的用户 | 对已分配给事件的用户的引用。 | 不 | 不 | 用户 | { <br> "uid": "ABCDEF12345", <br> "用户名": "用户名", <br> "名字": "约翰", <br> "姓氏": "Doe" <br> } |
| 数据值 | 与事件相关的数据值列表。 | 不 | 不 | TrackedEntityAttributeValue 列表 | 查看属性 |
| 关系 | 与事件相关的关系列表。 | 不 | 不 | 关系列表 | 查看关系 |
| 笔记 | 与事件相关的注释。它只能被创建。 | 不 | 是的 | 注意事项清单 | 看注释 |

### 关系 { #relationship }

`Relationships` are objects that link together two other tracker objects. The constraints each side of the relationship must conform to are based on the `Relationship Type` of the `Relationship`.


| 财产 | 描述 | 需要 | 不可变的 | 类型 | 例 |
|---|---|---|---|---|---|
| 关系 | 关系的标识符。如果未提供则生成。 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 关系类型 | 关系的类型。决定哪些对象可以在关系中链接。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| 关系名称 | 仅用于读取数据。该关系的关系类型的名称 | 不 | 不 | 字符串：任意 | 兄弟 |
| createdAt | 用户创建关系时的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 上次更新关系的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 双向 | 仅用于读取数据。指示关系类型是否是双向的。 | 不 | 不 | Boolean | 对或错 |
| 从到 | 对关系每一方的引用。必须符合关系类型中设置的约束 | 是的 | 是的 | 关系项目 | {"trackedEntity": {"trackedEntity": "ABCEF12345"}}、{"enrollment": {"enrollment": "ABCDEF12345"}} 或 {"event": {"event": "ABCDEF12345" }} |

> **Note**
>
>`Relationship item` represents a link to an object. Since a `relationship` can be between any tracker object like `tracked entity`, `enrollment`, and `event`, the value depends on the `relationship type`. For example, if the `relationship type` connects from an `event` to a `tracked entity`, the format is strict:
>```json
>{
>   "from": {
>     "event": { "event": "ABCDEF12345" }
>   },
>   "to": {
>     "trackedEntity": { "trackedEntity": "FEDCBA12345" }
>   }
>}
>```

### 属性 { #attribute } 
`Attributes` are the actual values describing the `tracked entities`. They can either be connected through a `tracked entity type` or a `program`. Implicitly this means `attributes` can be part of both a `tracked entity` and an `enrollment`.

| 财产 | 描述 | 需要 | 不可变的 | 类型 | 例 |
|---|---|---|---|---|---|
| 属性 | 对所表示的跟踪实体属性的引用。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| 码 | 仅用于读取数据。被跟踪实体属性的代码。 | 不 | 不 | 字符串：任意 | ABC |
| 显示名称 | 仅用于读取数据。跟踪实体属性的显示名称。 | 不 | 不 | 字符串：任意 | 名称 |
| createdAt | 添加值时的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 上次更新值的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 存储者 | 存储/创造价值的客户参考。 | 不 | 不 | 字符串：任意 | 约翰·多伊 |
| 值类型 | 仅用于读取数据。属性表示的值的类型。 | 不 | 不 | 枚举 | 文本、整数等 |
| 价值 | 被跟踪实体属性的值。 | 不 | 不 | 字符串：任意 | 约翰·多伊 |

> **Note**
>
> For `attributes` only the "attribute" and "value" properties are required when adding data. "value" can be null, which implies the user should remove the value.
>
> In the context of tracker objects, we refer to `Tracked Entity Attributes` and `Tracked Entity Attribute Values` as "attributes". However, attributes are also their own thing, related to metadata. Therefore it's vital to separate Tracker attributes and metadata attributes. In the tracker API, it is possible to reference the metadata attributes when specifying `idScheme` (See request parameters for more information).

### 数据值 { #data-values }
While `Attributes` describes a `tracked entity` or an `enrollment`, `data values` describes an `event`. The major difference is that `attributes` can only have a single value for a given `tracked entity`. In contrast, `data values` can have many different values across different `events` - even if the `events` all belong to the same `enrollment` or `tracked entity`.

| 财产 | 描述 | 需要 | 不可变的 | 类型 | 例 |
|---|---|---|---|---|---|
| 数据元素 | 该值表示的数据元素。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| 价值 | 数据值的值。 | 不 | 不 | 字符串：任意 | 123 |
| 在别处提供 | 指示用户是否在其他地方提供了该值。如果未提供则为假。 | 不 | 不 | Boolean | 是真是假 |
| createdAt | 用户添加值时的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 上次更新值的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 存储者 | 存储/创造价值的客户参考。 | 不 | 不 | 字符串：任意 | 约翰·多伊 |
| 由...制作 | 仅用于读取数据。创建该对象的用户。在服务器上设置 | 不 | 是的 | 用户 | { <br> "uid": "ABCDEF12345", <br> "用户名": "用户名", <br> "名字": "约翰", <br> "姓氏": "Doe" <br> } |
| 更新者 | 仅用于读取数据。最后更新对象的用户。在服务器上设置 | 不 | 是的 | 用户 | { <br> "uid": "ABCDEF12345", <br> "用户名": "用户名", <br> "名字": "约翰", <br> "姓氏": "Doe" <br> } |


> **Note**
>
> For `data elements` only the "dataElement" and "value" properties are required when adding data. "value" can be null, which implies the user should remove the value.

### 跟踪笔记 { #tracker-notes }

DHIS2 跟踪器允许使用数据元素和跟踪实体属性捕获数据。然而，有时可能存在需要记录有关当前问题的附加信息或评论的情况。可以使用跟踪器注释捕获此类附加信息。跟踪器注释相当于聚合 DHIS2 端的数据值注释。

有两种类型的跟踪器注释 - 在事件级别记录的注释和在注册级别记录的注释。一次注册可以包含一个或多个事件。关于每个事件的评论 - 例如，为什么事件被错过、重新安排，或者为什么只填充了几个数据元素等等 - 可以使用事件注释来记录。注册中的每个事件都可以有自己的故事/注释。然后，例如，可以使用家长登记记录记录对这些事件的总体观察。注册注释也有助于记录，例如，注册被取消的原因。这是用户的想象力和用例何时以及如何使用笔记。

注册和活动都可以根据需要添加任意数量的注释 - 没有限制。但是，无法删除或更新这些注释。它们就像一本日志。如果想要修改注释，可以通过创建另一注释来实现。删除注释的唯一方法是删除父对象 - 事件或注册。

跟踪笔记没有专用端点；它们作为父事件和/或注册有效负载的一部分进行交换。下面是一个示例有效负载。

```json
{
  "trackedEntityInstance": "oi3PMIGYJH8",
  <entity_details>,
  ],
  "enrollments": [
    {
      "enrollment": "EbRsJr8LSSO",
      <enrollment_details>
      "notes": [
        {
          "note": "vxmCvYcPdaW",
          "value": "Enrollment note 2.",
        },
        {
          "value": "Enrollment note 1",
        }
      ],

      "events": [
        {
          "event": "zfzS9WeO0uM",
          <event_details>,
          "notes": [
            {
              "note": "MAQFb7fAggS",
              "value": "Event Note 1.",
            },
            {
              "value": "Event Note 2.",
            }
          ],
        },
        {
          ...
        }
      ]
    }
  ]
}
```


| 财产 | 描述 | 需要 | 不可变的 | 类型 | 例 |
|---|---|---|---|---|---|
| 笔记 | 注释的参考。如果为空则生成 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 价值 | 注释的内容。 | 是的 | 是的 | 字符串：任意 | 这是一个注释 |
| 存储于 | 用户添加注释时的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 存储者 | 存储/创建注释的客户参考。 | 不 | 不 | 字符串：任意 | 约翰·多伊 |
| 由...制作 | 仅用于读取数据。创建该对象的用户。在服务器上设置 | 不 | 是的 | 用户 | { <br> "uid": "ABCDEF12345", <br> "用户名": "用户名", <br> "名字": "约翰", <br> "姓氏": "Doe" <br> } |

### 用户 { #user } 

| 财产 | 描述 | 需要 | 不可变的 | 类型 | 例 |
|---|---|---|---|---|---|
| uid | 用户的标识符。 | 是的* | 是的 | String:Uid | ABCDEF12345 |
| 用户名 | 用户使用的用户名。 | 是的* | 是的 | 字符串：任意 | 123 |
| 名 | 仅用于读取数据。用户的名字。 | 不 | 是的 | 字符串：任意 | 约翰 |
| 姓 | 仅用于读取数据。用户的姓氏。 | 不 | 是的 | 字符串：任意 | 美国能源部 |

> 必须提供 `uid` 或 `username` 字段之一。如果两者都提供，则仅考虑用户名。

### 计划阶段工作清单 { #webapi_working_list_filters }

Capture 应用程序中的计划阶段工作列表功能旨在显示与特定计划阶段相关的预先建立的工作列表。此功能使用户能够保存与程序阶段相关的过滤器和排序首选项，从而促进工作流程的组织和管理。要与它们交互，您需要使用 */api/programStageWorkingLists* 资源。这些列表可以共享，并遵循与任何其他元数据相同的共享模式。使用 */api/sharing* 时，类型参数将为 *programStageWorkingLists*。

    /api/40/programStageWorkingLists

##### CRUD 操作的有效负载到编程阶段工作列表 { #payload-on-crud-operations-to-program-stage-working-lists }

上面的端点可用于获取所有程序阶段工作列表。
要获取单个，只需在末尾添加您感兴趣的 ID。如果您想删除它，这也是一样的。
另一方面，如果您希望创建或更新程序阶段工作列表，除了上述端点之外，您还需要提供以下格式的有效负载：

表：有效负载

| 有效负载值 | 描述 | 例 |
|---|---|---|
| 名称 | 工作列表的名称。必需的。 ||
| 描述 | 工作清单的描述。 ||
| 程序 | 包含程序 ID 的对象。必需的。 | {“id”：“uy2gU8kTjF”} |
| 节目阶段 | 包含程序阶段 ID 的对象。必需的。 | {“id”：“oRySG82BKE6”} |
| 程序阶段查询条件 | 表示各种可能的过滤值的对象。请参阅下面的*程序阶段查询标准*定义表。

表：节目阶段查询条件

| 标准值 | 描述 | 例 |
|---|---|---|
| 地位 | 事件状态。可能的值为 ACTIVE、COMPLETED、VISITED、SCHEDULE、OVERDUE、SKIPPED 和 VISITED | “状态”：“已访问” |
| 事件创建时间 | DateFilterPeriod 对象基于事件创建日期进行过滤。 | {“类型”：“绝对”，“开始日期”：“2020-03-01”，“结束日期”：“2022-12-30”} |
| 预定时间 | DateFilterPeriod 对象根据事件预定日期进行过滤。 | {"type":"RELATIVE","period":"今天"} |
| 入学状态 | 任何有效的计划状态。可能的值为“活动”、“已完成”和“已取消”。 | “注册状态”：“已完成” |
| 注册于 | 基于事件注册日期的 DateFilterPeriod 对象过滤。 | "enrolledAt": {"type":"RELATIVE","period":"THIS_MONTH"} |
| 注册发生时间 | DateFilterPeriod 对象根据事件发生日期进行过滤。 | {"type":"RELATIVE","period":"THIS_MONTH"} |
| orgUnit | 有效的组织单位 UID | “orgUnit”：“Rp268JB6Ne4” |
| 模式 | 有效的 OU 选择模式 | “ouMode”：“已选择” |
| 分配的用户模式 | 事件的有效用户选择模式。可能的值为 CURRENT、PROVIDED、NONE、ANY 和 ALL。如果提供（或为空），则有效负载中将预期有非空的signedUsers。 | “分配的用户模式”：“已提供” |
| 分配的用户 | 事件的指定用户列表。与上面提供的指定用户模式一起使用。 | “分配的用户”：[“DXyJmlo9rge”] |
| 命令 | 字段列表及其方向（以逗号分隔值），结果将根据其排序。订单中的单个项目的形式为“orderDimension:direction”。 | “订单”：“w75KJ2mc4zz：asc” |
| 显示列顺序 | 列的输出顺序 | "displayColumnOrder":["w75KJ2mc4zz","zDhUuAYrxNC"] |
| 数据过滤器 | 包含查询事件时要使用的过滤器的项目列表 | “dataFilters”：[{“dataItem”：“GXNUsigphqK”，“ge”：“10”，“le”：“20”}] |
| 属性值过滤器 | 属性值过滤器列表。这用于在列出跟踪的实体实例时指定属性值的过滤器 | "attributeValueFilters":[{"attribute": "ruQQnf6rswq","eq": "15"}] |

请参阅下面的示例有效负载：

```json
{   
    "name":"Test WL",
    "program":{"id":"uy2gU8kT1jF"},
    "programStage":{"id":"oRySG82BKE6"},
    "description": "Test WL definition",
    "programStageQueryCriteria":
        {
            "status":"VISITED",
            "eventCreatedAt":{"type":"ABSOLUTE","startDate":"2020-03-01","endDate":"2022-12-30"},
            "scheduledAt": {"type":"RELATIVE","period":"TODAY"},
            "enrollmentStatus": "COMPLETED",
            "enrolledAt": {"type":"RELATIVE","period":"THIS_MONTH"},
            "enrollmentOccurredAt": {"type":"RELATIVE","period":"THIS_MONTH"},
            "orgUnit": "Rp268JB6Ne4",
            "ouMode": "SELECTED",
            "assignedUserMode":"PROVIDED",
            "assignedUsers":["DXyJmlo9rge"],
            "order": "w75KJ2mc4zz:asc",
            "displayColumnOrder":["w75KJ2mc4zz","zDhUuAYrxNC"],
            "dataFilters":[{
                "dataItem": "GXNUsigphqK",
                "ge": "10",
                "le": "20"
            }],
            "attributeValueFilters":[{
                "attribute": "ruQQnf6rswq",
                "eq": "15"
            }]
        }
}
```
## Tracker Import (`POST /api/tracker`) { #webapi_nti_import }

The `POST /api/tracker` endpoint allows clients to import the following tracker objects into DHIS2:

* **跟踪的实体**
* **报名人数**
* **活动**
* **关系**
* 嵌入其他[跟踪器对象](#webapi_nti_tracker_objects)中的数据

与跟踪器导入的其他端点相比，主要变化是：

1. 导入有效负载可以是***嵌套***或***扁平***
2. 调用可以是***同步***或***异步***
3. 导入***CSV***事件负载

### 请求参数{ #request-parameters }

目前，Tracker导入端点支持以下参数：

| 参数名称 | 描述 | 类型 | 允许值 |
|---|---|---|---|
| 异步 | 指示导入应该异步还是同步进行。 | Boolean | `TRUE`, `FALSE` |
| 报告模式 | 仅在执行同步导入时。有关详细信息，请参阅 importSummary。 | 枚举 | `FULL`, `ERRORS`, `WARNINGS` |
| 导入模式 | 表示导入方式。可以仅验证（试运行）或提交（默认） | 枚举 | `验证`、`提交` |
| 方案 | 指示导入时用于元数据引用的整体 idScheme。默认为 UID。可以覆盖特定元数据（如下所列） | 枚举 | `UID`、`代码`、`名称`、`属性` |
| 数据元素标识方案 | 指示导入时用于数据元素的 idScheme。 | 枚举 | `UID`、`代码`、`名称`、`属性` |
| 组织单位 ID 方案 | 指示导入时用于组织单位的 idScheme。 | 枚举 | `UID`、`代码`、`名称`、`属性` |
| 程序标识方案 | 指示导入时用于程序的 idScheme。 | 枚举 | `UID`、`代码`、`名称`、`属性` |
| 程序阶段标识方案 | 指示导入时用于程序阶段的 idScheme。 | 枚举 | `UID`、`代码`、`名称`、`属性` |
| 类别选项组合 ID 方案 | 指示导入时用于类别选项组合的 idScheme。 | 枚举 | `UID`、`代码`、`名称`、`属性` |
| 类别选项Id方案 | 指示导入时用于类别选项的 idScheme。 | 枚举 | `UID`、`代码`、`名称`、`属性` |
| 导入策略 | Indicates the effect the import should have. Can either be `CREATE`, `UPDATE`, `CREATE_AND_UPDATE` and `DELETE`, which respectively only allows importing new data, importing changes to existing data, importing any new or updates to existing data, and finally deleting data. | 枚举 | `CREATE`, `UPDATE`, `CREATE_AND_UPDATE`, `DELETE` |
| 原子模式 | Indicates how the import responds to validation errors. If `ALL`, all data imported must be valid for any data to be committed. For `OBJECT`, only the data committed needs to be valid, while other data can be invalid. | 枚举 | `ALL`, `OBJECT` |
| 冲洗模式 | 指示冲洗频率。这与导入期间将数据推入数据库的频率有关。主要用于调试原因，不应在生产设置中更改 | 枚举 | `AUTO`, `OBJECT` |
| 验证模式 | 指示验证步骤的完整性。它可以被跳过，设置为快速失败（返回第一个错误）或完整（默认），这将返回发现的任何错误 | 枚举 | `FULL`, `FAIL_FAST`, `SKIP` |
| 跳过模式验证 | 如果为 true，它将跳过验证生成属性的模式。 | Boolean | `TRUE`, `FALSE` |
| 跳过副作用 | 如果为 true，它将跳过运行导入的任何副作用 | Boolean | `TRUE`, `FALSE` |
| 跳过规则引擎 | 如果为 true，它将跳过运行导入的任何程序规则 | Boolean | `TRUE`, `FALSE` |

**NOTE**: idScheme and its metadata specific idScheme parameters like
orgUnitIdScheme, programIdScheme, ... used to allow and use the default `AUTO`.
`AUTO` has been removed. The default idScheme has already been `UID`. Any
requests sent with idScheme `AUTO` will see the same behavior as before, namely
matching done using `UID`.

### 扁平和嵌套有效负载 { #flat-and-nested-payloads }

导入器支持平面和嵌套负载。主要区别在于客户要求如何构建数据。

**平坦的**
：扁平结构的有效负载很简单。它可以包含我们拥有的每个核心跟踪器对象的集合。这可以与已分配 UID 的现有数据无缝协作。但是，对于新数据，客户端必须为对象之间的任何引用提供新的 UID。例如，如果您导入具有新注册的新跟踪实体，则跟踪实体要求客户端提供 UID，以便可以将注册链接到该 UID。

**嵌套**
：嵌套有效负载是最常用的结构。在这里，跟踪器对象嵌入到其父对象中；例如，跟踪实体内的注册。此结构的优点是客户端不需要为这些连接提供 UID，因为它们嵌套在一起，因此在导入过程中将为其提供此连接。

> **注意**
>
> 虽然嵌套有效负载对于客户端来说可能更容易处理，但有效负载在导入之前始终会被展平。这意味着对于大型导入，提供扁平结构的有效负载将为导入过程本身提供更多的控制和更低的开销。

下面列出了有效负载的 **FLAT** 和 **NESTED** 版本的示例。两种情况都使用相同的数据。

#### ***扁平*** 有效负载 { #flat-payload }

```json
{
  "trackedEntities": [
    {
      "orgUnit": "O6uvpzGd5pu",
      "trackedEntity": "Kj6vYde4LHh",
      "trackedEntityType": "Q9GufDoplCL"
    }
  ],
  "enrollments": [
    {
      "orgUnit": "O6uvpzGd5pu",
      "program": "f1AyMswryyQ",
      "trackedEntity": "Kj6vYde4LHh",
      "enrollment": "MNWZ6hnuhSw",
      "trackedEntityType": "Q9GufDoplCL",
      "enrolledAt": "2019-08-19T00:00:00.000",
      "deleted": false,
      "occurredAt": "2019-08-19T00:00:00.000",
      "status": "ACTIVE",
      "notes": [],
      "attributes": [],
    }
  ],
  "events": [
    {
      "scheduledAt": "2019-08-19T13:59:13.688",
      "program": "f1AyMswryyQ",
      "event": "ZwwuwNp6gVd",
      "programStage": "nlXNK4b7LVr",
      "orgUnit": "O6uvpzGd5pu",
      "trackedEntity": "Kj6vYde4LHh",
      "enrollment": "MNWZ6hnuhSw",
      "enrollmentStatus": "ACTIVE",
      "status": "ACTIVE",
      "occurredAt": "2019-08-01T00:00:00.000",
      "attributeCategoryOptions": "xYerKDKCefk",
      "deleted": false,
      "attributeOptionCombo": "HllvX50cXC0",
      "dataValues": [
        {
          "updatedAt": "2019-08-19T13:58:37.477",
          "storedBy": "admin",
          "dataElement": "BuZ5LGNfGEU",
          "value": "20",
          "providedElsewhere": false
        },
        {
          "updatedAt": "2019-08-19T13:58:40.031",
          "storedBy": "admin",
          "dataElement": "ZrqtjjveTFc",
          "value": "Male",
          "providedElsewhere": false
        },
        {
          "updatedAt": "2019-08-19T13:59:13.691",
          "storedBy": "admin",
          "dataElement": "mB2QHw1tU96",
          "value": "[-11.566044,9.477801]",
          "providedElsewhere": false
        }
      ],
      "notes": []
    },
    {
      "scheduledAt": "2019-08-19T13:59:13.688",
      "program": "f1AyMswryyQ",
      "event": "XwwuwNp6gVE",
      "programStage": "PaOOjwLVW23",
      "orgUnit": "O6uvpzGd5pu",
      "trackedEntity": "Kj6vYde4LHh",
      "enrollment": "MNWZ6hnuhSw",
      "enrollmentStatus": "ACTIVE",
      "status": "ACTIVE",
      "occurredAt": "2019-08-01T00:00:00.000",
      "attributeCategoryOptions": "xYerKDKCefk",
      "deleted": false,
      "attributeOptionCombo": "HllvX50cXC0",
      "notes": []
    }
  ],
  "relationships": [
    {
      "relationshipType": "Udhj3bsdHeT",
      "from": {
        "trackedEntity": { "trackedEntity": "Kj6vYde4LHh" }
      },
      "to": {
        "trackedEntity": { "trackedEntity": "Gjaiu3ea38E" }
      }
    }
  ]
}
```

#### ***嵌套***有效负载 { #nested-payload }

```json
{
  "trackedEntities": [
    {
      "orgUnit": "O6uvpzGd5pu",
      "trackedEntity": "Kj6vYde4LHh",
      "trackedEntityType": "Q9GufDoplCL",
      "relationships": [
        {
          "relationshipType": "Udhj3bsdHeT",
          "from": {
            "trackedEntity": { "trackedEntity": "Kj6vYde4LHh" }
          },
          "to": {
            "trackedEntity": { "trackedEntity": "Gjaiu3ea38E" }
          }
        }
      ],
      "enrollments": [
        {
          "orgUnit": "O6uvpzGd5pu",
          "program": "f1AyMswryyQ",
          "trackedEntity": "Kj6vYde4LHh",
          "enrollment": "MNWZ6hnuhSw",
          "trackedEntityType": "Q9GufDoplCL",
          "enrolledAt": "2019-08-19T00:00:00.000",
          "deleted": false,
          "occurredAt": "2019-08-19T00:00:00.000",
          "status": "ACTIVE",
          "notes": [],
          "relationships": [],
          "attributes": [],
          "events": [
            {
              "scheduledAt": "2019-08-19T13:59:13.688",
              "program": "f1AyMswryyQ",
              "event": "ZwwuwNp6gVd",
              "programStage": "nlXNK4b7LVr",
              "orgUnit": "O6uvpzGd5pu",
              "trackedEntity": "Kj6vYde4LHh",
              "enrollment": "MNWZ6hnuhSw",
              "enrollmentStatus": "ACTIVE",
              "status": "ACTIVE",
              "occurredAt": "2019-08-01T00:00:00.000",
              "attributeCategoryOptions": "xYerKDKCefk",
              "deleted": false,
              "attributeOptionCombo": "HllvX50cXC0",
              "dataValues": [
                {
                  "updatedAt": "2019-08-19T13:58:37.477",
                  "storedBy": "admin",
                  "dataElement": "BuZ5LGNfGEU",
                  "value": "20",
                  "providedElsewhere": false
                },
                {
                  "updatedAt": "2019-08-19T13:58:40.031",
                  "storedBy": "admin",
                  "dataElement": "ZrqtjjveTFc",
                  "value": "Male",
                  "providedElsewhere": false
                },
                {
                  "updatedAt": "2019-08-19T13:59:13.691",
                  "storedBy": "admin",
                  "dataElement": "mB2QHw1tU96",
                  "value": "[-11.566044,9.477801]",
                  "providedElsewhere": false
                }
              ],
              "notes": [],
              "relationships": []
            },
            {
              "scheduledAt": "2019-08-19T13:59:13.688",
              "program": "f1AyMswryyQ",
              "event": "XwwuwNp6gVE",
              "programStage": "PaOOjwLVW23",
              "orgUnit": "O6uvpzGd5pu",
              "trackedEntity": "Kj6vYde4LHh",
              "enrollment": "MNWZ6hnuhSw",
              "enrollmentStatus": "ACTIVE",
              "status": "ACTIVE",
              "occurredAt": "2019-08-01T00:00:00.000",
              "attributeCategoryOptions": "xYerKDKCefk",
              "deleted": false,
              "attributeOptionCombo": "HllvX50cXC0",
              "notes": [],
              "relationships": []
            }
          ]
        }
      ]
    }
  ]
}
```

### 同步和异步 { #sync-and-async }
对于用户来说，同步导入与异步导入的主要区别在于 API 的立即响应。对于同步导入，导入完成后将立即返回响应并包含 importSummary。但是，对于异步导入，响应将是立即的，并且包含一个引用，客户端可以在其中轮询导入的更新。

对于重要的导入，客户端使用异步导入可能有益，以避免等待响应太长时间。


**ASYNC** 响应的示例如下所示。对于 **SYNC** 响应，请查看 [importSummary 部分](#webapi_nti_import_summary)。

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Tracker job added",
    "response": {
        "responseType": "TrackerJob",
        "id": "LkXBUdIgbe3",
        "location": "https://play.dhis2.org/dev/api/tracker/jobs/LkXBUdIgbe3"
    }
}
```

### CSV 事件负载 { #csv-events-payload }

In order to maintain compatibility with older versions of tracker, the API allows to import events using the CSV format.
As this format does not allow list as field, every row of the CSV payload represents an event and a data value.
So for events with multiple data values, the CSV file will have `x` rows per event where `x` is the number of data values in that event.
Other fields that are lists as ***relationships*** and ***notes*** are not supported.
To import a CSV payload, the content type of the request must be set to ***application/csv*** or ***text/csv***.

#### ***CSV 有效负载*** 示例 { #csv-payload-example }

|事件|地位|程序|节目阶段|注册|orgUnit|发生于|预定时间|数据元素|价值|存储者|在别处提供
|---|---|---|---|---|---|---|---|---|---|---|---|
|V1CerIi3sdL|完全的|IPHINAT79UW|A03MvHHogjR|CCBLMntFuzb|DiszpKrYNg8|2020-02-26T23:00:00Z|2020-02-27T23:00:00Z|a3kGcGDCuk6|11|行政|假
|V1CerIi3sdL|完全的|IPHINAT79UW|A03MvHHogjR|CCBLMntFuzb|DiszpKrYNg8|2020-02-26T23:00:00Z|2020-02-27T23:00:00Z|mB2QHw1tU96|[-11.566044,9.477801]|行政|假

### 导入摘要 { #webapi_nti_import_summary }

Tracker API 有两个主要端点，供消费者从其进口产品中获取反馈。这些端点与异步导入作业最相关，但也可用于同步作业。这些端点将返回与导入相关的日志或导入摘要本身。

> **注意**
>
> 这些端点依赖于应用程序内存中存储的信息。这意味着在某些情况下，例如应用程序重新启动或在此之后启动大量导入请求后，该信息将不可用。

提交跟踪器导入请求后，我们可以访问以下端点，以便根据日志监控作业进度：

`获取/tracker/jobs/{uid}`

| 范围|描述|例
|---|---|---|
|`{uid}`| 现有跟踪器导入作业的 UID | ABCDEF12345

#### ***请求*** 示例 { #request-example }

`获取/tracker/jobs/mEfEaFSCKCC`

#### ***响应*** 示例 { #response-example }

```json
[
  {
    "uid": "mEfEaFSCKCC",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2021-01-01T00:00:06.00",
    "message": "TRACKER_IMPORT_JOB ( mEfEaFSCKCC ) finished in 6.00000 sec. Import:Done",
    "completed": true,
    "id": "mEfEaFSCKCC"
  },
  {
    "uid": "mEfEaFSCKCC",
    "level": "DEBUG",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2021-01-01T00:00:05.00",
    "message": "TRACKER_IMPORT_JOB ( mEfEaFSCKCC ) commit completed in 1.00000 sec. Import:commit",
    "completed": true,
    "id": "mEfEaFSCKCC"
  },
  {
    "uid": "mEfEaFSCKCC",
    "level": "DEBUG",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2021-01-01T00:00:04.00",
    "message": "TRACKER_IMPORT_JOB ( mEfEaFSCKCC ) programruleValidation completed in 1.00000 sec. Import:programruleValidation",
    "completed": true,
    "id": "mEfEaFSCKCC"
  },
  {
    "uid": "mEfEaFSCKCC",
    "level": "DEBUG",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2021-01-01T00:00:03.00",
    "message": "TRACKER_IMPORT_JOB ( mEfEaFSCKCC ) programrule completed in 1.00000 sec. Import:programrule",
    "completed": true,
    "id": "mEfEaFSCKCC"
  },
  {
    "uid": "mEfEaFSCKCC",
    "level": "DEBUG",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2021-01-01T00:00:02.00",
    "message": "TRACKER_IMPORT_JOB ( mEfEaFSCKCC ) validation completed in 1.00000 sec. Import:validation",
    "completed": true,
    "id": "mEfEaFSCKCC"
  },
  {
    "uid": "mEfEaFSCKCC",
    "level": "DEBUG",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2021-01-01T00:00:01.00",
    "message": "TRACKER_IMPORT_JOB ( mEfEaFSCKCC ) preheat completed in 1.00000 sec. Import:preheat",
    "completed": true,
    "id": "mEfEaFSCKCC"
  },
  {
    "uid": "mEfEaFSCKCC",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2021-01-01T00:00:00.00",
    "message": "TRACKER_IMPORT_JOB ( mEfEaFSCKCC ) started by admin ( xE7jOejl9FI ) Import:Start",
    "completed": true,
    "id": "mEfEaFSCKCC"
  }
]
```

此外，以下端点将返回导入作业的导入摘要。此导入摘要仅在导入完成后才可用：

`获取 /tracker/jobs/{uid}/report`

| 范围|描述|例
|---|---|---|
|路径`/{uid}`| 现有跟踪器导入作业的 UID | ABCDEF12345
|`报告模式`| 返回的报告级别 | `FULL`&#124;`ERRORS`&#124;`WARNINGS`|

#### ***请求*** 示例 { #request-example }

`获取 /tracker/jobs/mEfEaFSCKCC/report`

#### ***响应*** 示例 { #response-example }

[响应负载](#sample-responses) 与同步导入请求后返回的响应负载相同。

> **Note**
>
> Both endpoints are used primarily for async import; however, `GET /tracker/jobs/{uid}` would also work for sync requests as it eventually uses the same import process and logging as async requests.

### 导入摘要结构 { #import-summary-structure }

Import summaries have the following overall structure, depending on the requested `reportMode`:
```json
{
  "status": "...",
  "validationReport": { },
  "stats": { },
  "timingsStats": { },
  "bundleReport": { },
  "message" : { }
}
```

***地位***

The property, `status`, of the import summary indicates the overall status of the import. If no errors or warnings were raised during the import, the `status` is reported as `OK`. The presence of any error or warnings in the import will result in a status of type `ERROR` or `WARNING`.

`status` is based on the presence of the most significant `validationReport`. `ERROR` has the highest significance, followed by `WARNING` and finally `OK`. This implies that `ERROR` is reported as long as a single error was found during the import, regardless of how many warnings occurred.

> **Note**
>
> If the import is performed using the AtomicMode "OBJECT", where the import will import any data without validation errors, the overall status will still be `ERROR` if any errors were found.

***验证报告***

The `validationReport` might include `errorReports` and `warningReports` if any errors or warnings were present during the import. When present, they provide a detailed list of any errors or warnings encountered.

For example, a validation error while importing a `TRACKED_ENTITY`:
```json
{
  "validationReport": {
    "errorReports": [
      {
        "message": "Could not find TrackedEntityType: `Q9GufDoplCL`.",
        "errorCode": "E1005",
        "trackerType": "TRACKED_ENTITY",
        "uid": "Kj6vYde4LHh"
      },
      ...
    ],
    "warningReports" : [ ... ]
  }
}
```

The report contains a message and a code describing the actual error (See the [error codes](#error-codes) section for more information about errors). Additionally, the report includes the `trackerType` and `uid`, which aims to describe where in the data the error was found. In this case, there was a `TRACKED_ENTITY` with the uid `Kj6vYde4LHh`, which had a reference to a tracked entity type that was not found.

> **Note**
>
> When referring to the `uid` of tracker objects, they are labeled as their object names in the payload. For example, the `uid` of a tracked entity would in the payload have the name "trackedEntity". The same goes for "enrollment", "event" and "relationship" for enrollments, events, and relationships, respectively.
>
> If no uid is provided in the payload, the import process will generate new uids. This means the error report might refer to a uid that does not exist in your payload.
>
> Errors represent issues with the payload which the importer can not circumvent. Any errors will block that data from being imported. Warnings, on the other hand, are issues where it's safe to circumvent them, but the user should be made aware that it happened. Warnings will not block data from being imported.

***统计***

统计数据提供了导入的快速概览。导入完成后，这些将是代表创建、更新、删除或忽略的数据量的实际计数。

例：
```json
{
  "stats": {
    "created": 2,
    "updated": 2,
    "deleted": 1,
    "ignored": 5,
    "total": 10
  }
}
```
`created` refers to how many new objects were created. In general, objects without an existing uid in the payload will be treated as new objects.

`updated` refers to the number of objects updated. If an object has a uid set in the payload, it will be treated as an update as long as that same uid exists in the database.

`deleted` refers to the number of objects deleted during the import. Deletion only happens when the import is configured to delete data and only then when the objects in the payload have existing uids set.

`ignored` refers to objects that were not persisted. Objects can be ignored for several reasons, for example trying to create something that already exists. Ignores should always be safe, so if something was ignored, it was not necessary, or it was due to the configuration of the import.

***计时统计***

`timingStats` 表示导入的不同步骤所花费的时间。这些统计数据并不提供准确的导入总时间，而是提供不同步骤的代码所花费的时间。

The `timingStats` are primarily helpful in debugging imports that are causing issues to see which part of the import is having issues.
```json
{
  "timingsStats": {
    "timers": {
      "preheat": "0.234086 sec.",
      "preprocess": "0.000058 sec.",
      ...
      "totalImport": "0.236810 sec.",
      "validation": "0.001533 sec."
    }
  }
}
```

***捆绑报告***

When the import is completed, the `bundleReport` contains all the [tracker objects](#tracker-objects) imported.

For example, `TRACKED_ENTITY`:
```json
{
  "bundleReport": {
    "typeReportMap": {
      "TRACKED_ENTITY": {
        "trackerType": "TRACKED_ENTITY",
        "stats": {
          "created": 1,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 1
        },
        "objectReports": [
          {
            "trackerType": "TRACKED_ENTITY",
            "uid": "FkxTQC4EAKK",
            "index": 0,
            "errorReports": []
          }
        ]
      },
      ...
    }
  }
}
```
As seen, each type of tracker object will be reported, and each has its own stats and `objectReports`. These `objectReports` will provide details about each imported object, like their type, their uid, and any error or warning reports is applicable.

***信息***

If the import ended abruptly, the `message` would contain further information in relation to what happened.

### 导入摘要报告级别 { #import-summary-report-level }

As previously stated, `GET /tracker/jobs/{uid}/report` can be retrieved using a specific `reportMode` parameter. By default the endpoint will return an `importSummary` with `reportMode` `ERROR`.

| 范围 | 描述 |
|---|---|
| `已满` | Returns everything from `WARNINGS`, plus `timingsStats` |
| `警告` | Returns everything from `ERRORS`, plus `warningReports` in `validationReports` |
| `错误`（默认） | Returns only `errorReports` in `validationReports` |

In addition, all `reportModes` will return `status`, `stats`, `bundleReport` and `message` when applicable.

### 错误代码 { #webapi_nti_error_codes }

不同的错误场景有不同的错误代码。下表列出了新 Tracker API 抛出的错误代码以及错误消息和一些附加说明。除非另有说明，错误消息中的占位符（`{0}`、`{1}`、`{2}`..）通常是 uid。

| 错误代码 | 错误信息 | 描述 |
|:--|:----|:----|
| E1000 | User: `{0}`, has no write access to OrganisationUnit: `{1}`. | This typically means that the OrganisationUnit `{1}` is not in the capture scope of the user `{0}` for the write operation to be authorized. |
| E1001 | User: `{0}`, has no data write access to TrackedEntityType: `{1}`. | 当用户无权创建或修改 TrackedEntityType `{1}` 的数据时，会发生错误
| E1002 | TrackedEntityInstance: `{0}`, already exists. | 当尝试使用已存在的 uid 创建新的 TrackedEntity 时，会引发此错误。确保添加新的 TrackedEntity 时使用新的 uid。 |
| E1005 | 找不到 TrackedEntityType：`{0}`。 | 尝试使用 uid `{0}` 获取不存在的 TrackedEntityType 时抛出错误。这也可能意味着用户没有对 TrackedEntityType 的读取访问权限。 |
| E1006 | Attribute: `{0}`, does not exist. | Error thrown when the system was not able to find a matching TrackedEntityAttribute with uid `{0}`. This might also mean that the user does not have access to the TrackedEntityAttribute. |
| E1007 | Error validating attribute value type: `{0}`; Error: `{1}`. | Mismatch between value type of a TrackedEntityAttribute and its provided attribute value. The actual validation error will be displayed in `{1}`. |
| E1009 | 文件资源：`{0}`，已分配给不同的对象。 | 文件资源 uid `{0}` 已分配给系统中的另一个对象。 |
| E1010 | Could not find Program: `{0}`, linked to Event. | The system was unable to find a Program with the uid `{0}` specified inside the Event payload. This might also mean that the specific Program is not accessible by the logged in user. |
| E1011 | Could not find OrganisationUnit: `{0}`, linked to Event. | The system was unable to find a OrganisationUnit with uid `{0}` specified inside the Event payload.  |
| E1012 | Geometry does not conform to FeatureType: `{0}`. | 提供的要素类型要么是“无”，要么是与所提供的几何值不兼容的类型。 |
| E1013 | Could not find ProgramStage: `{0}`, linked to Event. | The system was unable to find a ProgramStage with uid `{0}` specified inside the Event payload. This might also mean that the ProgramStage is not accessible to the logged in user.  |
| E1014 | 提供的程序：`{0}`，是一个无需注册的程序。未经注册，无法将注册创建到计划中。 | 只能为已注册的计划创建注册。 |
| E1015 | TrackedEntityInstance: `{0}`, already has an active Enrollment in Program `{1}`. | 如果该计划已存在另一个有效注册，则无法注册该计划。至少必须首先完成主动注册。 |
| E1016 | TrackedEntityInstance: `{0}`, already has an active enrollment in Program: `{1}`, and this program only allows enrolling one time. | As per the Program `{1}` configuration, a TrackedEntity can only be enrolled into that Program once. It looks like the TrackedEntity `{0}` already has either an ACTIVE or COMPLETED enrollment in that Program. Hence another enrollment cannot be added. |
| E1018 | Attribute: `{0}`, is mandatory in program `{1}` but not declared in enrollment `{2}`. | 对于定义为程序强制的属性，有效负载中缺少属性值。确保有效负载中提供了强制属性的属性值。  |
| E1019 | Only Program attributes is allowed for enrollment; Non valid attribute: `{0}`. | Attribute uid `{0}` specified in the enrollment payload is not associated with the Program.  |
| E1020 | Enrollment date: `{0}`, can`t be future date. | 除非本程序在其配置中允许，否则无法注册未来的日期。 |
| E1021 | Incident date: `{0}`, can`t be future date. | 事件日期不能是未来的日期，除非程序在其配置中允许。 |
| E1022 | TrackedEntityInstance: `{0}`, must have same TrackedEntityType as Program `{1}`. | 本程序配置为接受与注册有效负载中提供的不同的 TrackedEntityType uid。 |
| E1023 | DisplayIncidentDate 为 true，但属性genesisAt 为 null 或格式无效：`{0}`。 | 程序配置了 DisplayIncidentDate，但其负载中的日期为空或无效。 |
| E1025 | Property enrolledAt is null or has an invalid format: `{0}`. | 注册日期对于注册是强制性的。确保它不为空并且具有有效的日期格式。 |
| E1029 | Event OrganisationUnit: `{0}`, and Program: `{1}`, don't match. | The Event payload uses a Program `{1}` which is not configured to be accessible by OrganisationUnit `{0}`. |
| E1030 | Event: `{0}`, already exists. | 尝试使用已存在的 uid 添加新事件时会引发此错误。确保添加新事件时使用新的 uid。 |
| E1031 | 缺少事件发生日期。 | OccuredAt 属性要么为 null，要么在负载中具有无效的日期格式。 |
| E1032 | 事件：`{0}`，不存在。 | |
| E1033 | 事件：`{0}`，注册值为 NULL。 | |
| E1035 | 事件：`{0}`，ProgramStage 值为 NULL。 | |
| E1036 | 事件：`{0}`，TrackedEntityInstance 未指向现有对象。 | 系统无法找到具有事件负载中指定的 uid 的 TrackedEntity。这也可能意味着用户没有对 TrackedEntity 的读取访问权限。 |
| E1039 | ProgramStage: `{0}`, is not repeatable and an event already exists. | 特定注册的 ProgramStage 已存在一个事件。由于 ProgramStage 配置为不可重复，因此无法添加同一 ProgramStage 的另一个事件。  |
| E1041 | Enrollment OrganisationUnit: `{0}`, and Program: `{1}`, don't match. | The Enrollment payload contains a Program `{1}` which is not configured to be accessible by the OrganisationUnit  `{0}`. |
| E1042 | 事件：`{0}`，需要有完成日期。 | 如果程序配置为具有completeExpiryDays，则CompletedDate 对于COMPLETED 事件负载是必需的。状态为“已完成”的事件应具有非空的completedDate 属性和有效的日期格式。 |
| E1048 | Object: `{0}`, uid: `{1}`, has an invalid uid format. | 有效的 uid 有 11 个字符。第一个字符必须是字母（a-z 或 A-Z），其余 10 个字符可以是字母数字（a-z 或 A-Z 或 0-9）。 |
| E1049 | Could not find OrganisationUnit: `{0}`, linked to Tracked Entity. | The system could not find an OrganisationUnit with uid `{0}`. |
| E1050 | 缺少活动计划日期。 | 事件负载中的 ScheduledAt 属性丢失或日期格式无效。 |
| E1055 | 不允许使用默认 AttributeOptionCombo，因为程序具有非默认 CategoryCombo。 | 该程序配置为包含非默认 CategoryCombo，但请求使用默认 AttributeOptionCombo。 |
| E1056 | Event date: `{0}`, is before start date: `{1}`, for AttributeOption: `{2}`. | CategoryOption 配置了开始日期，负载中的事件日期不能早于该开始日期。 |
| E1057 | Event date: `{0}`, is after end date: `{1}`, for AttributeOption; `{2}`. | CategoryOption 配置了结束日期，负载中的事件日期不能晚于该结束日期。  |
| E1063 | TrackedEntityInstance: `{0}`, does not exist. | 尝试使用 uid `{0}` 获取不存在的 TrackedEntity 时抛出错误。这也可能意味着用户没有对 TrackedEntity 的读取访问权限。 |
| E1064 | Non-unique attribute value `{0}` for attribute `{1}` | 属性值在定义的范围内必须是唯一的。该错误表明另一个 TrackedEntity 的属性值已存在。 |
| E1068 | Could not find TrackedEntityInstance: `{0}`, linked to Enrollment. | 系统找不到注册有效负载中指定的 TrackedEntity。这也可能意味着用户没有对 TrackedEntity 的读取访问权限。 |
| E1069 | Could not find Program: `{0}`, linked to Enrollment. | 系统找不到注册有效负载中指定的程序。这也可能意味着用户没有本程序的读取权限。 |
| E1070 | Could not find OrganisationUnit: `{0}`, linked to Enrollment. | 系统找不到注册有效负载中指定的 OrganizationUnit。 |
| E1074 | 缺少功能类型。 | |
| E1075 | Attribute: `{0}`, is missing uid. | |
| E1076 | `{0}` `{1}` 是必需的，不能为空 | |
| E1077 | 属性：`{0}`，文本值超过允许的最大长度：`{0}`。 | |
| E1080 | Enrollment: `{0}`, already exists. | 当尝试使用已存在的 uid 创建新的 Enrollmentt 时，会引发此错误。确保添加新注册时使用新的 uid。 |
| E1081 | 注册：`{0}`，不存在。 | 尝试使用 uid `{0}` 获取不存在的注册时抛出错误。这也可能意味着用户没有注册的读取权限。 |
| E1082 | 事件：`{0}`已被删除且无法修改。 | 如果事件被软删除，则不允许对其进行修改。 |
| E1083 | User: `{0}`, is not authorized to modify completed events. | 只有超级用户或具有“F_UNCOMPLETE_EVENT”权限的用户才能修改已完成的事件。已完成的事件是指状态为“已完成”的事件。 |
| E1084 | 文件资源：`{0}`，找不到参考。 | |
| E1085 | Attribute: `{0}`, value does not match value type: `{1}`. | 属性的值类型与其提供的属性值不匹配。 |
| E1089 | Event: `{0}`, references a Program Stage `{1}` that does not belong to Program `{2}`. | 事件负载中的 ProgramStage uid 和 Program uid 不兼容。 |
| E1090 | Attribute: `{0}`, is mandatory in tracked entity type `{1}` but not declared in tracked entity `{2}`. | 有效负载缺少强制 TrackedEntityTypeAttributes 值。 |
| E1091 | User: `{0}`, has no data write access to Program: `{1}`. | 程序共享配置使得用户没有该程序的写入权限。 |
| E1095 | User: `{0}`, has no data write access to ProgramStage: `{1}`. | ProgramStage 共享配置使得用户没有对此 ProgramStage 的写访问权限。  |
| E1096 | User: `{0}`, has no data read access to Program: `{1}`. | 程序共享配置使得用户没有该程序的读取访问权限。 |
| E1099 | User: `{0}`, has no write access to CategoryOption: `{1}`. | CategoryOption 共享配置使得用户没有对此 CategoryOption 的写入权限 |
| E1100 | User: `{0}`, is lacking 'F_TEI_CASCADE_DELETE' authority to delete TrackedEntityInstance: `{1}`. | 此 TrackedEntity 存在未删除的注册。如果用户没有“F_TEI_CASCADE_DELETE”权限，则必须首先显式删除这些注册才能删除 TrackedEntity。 |
| E1102 | User: `{0}`, does not have access to the tracked entity: `{1}`, Program: `{2}`, combination. | 当用户的 OrganizationUnit 不具有此特定程序的此 TrackedEntity 的所有权时，会引发此错误。 TrackedEntity-Program 组合的所属 OrganizationUnit 应落入用户的捕获范围（在某些情况下为搜索范围）。 |
| E1103 | User: `{0}`, is lacking 'F_ENROLLMENT_CASCADE_DELETE' authority to delete Enrollment : `{1}`. | 此注册存在未删除的事件。如果用户没有“F_ENROLLMENT_CASCADE_DELETE”权限，则必须首先显式删除这些事件才能删除注册。 |
| E1104 | User: `{0}`, has no data read access to program: `{1}`, TrackedEntityType: `{2}`. | 与程序关联的 TrackedEntityType 的共享配置使得用户没有数据读取权限。 |
| E1112 | Attribute value: `{0}`, is set to confidential but system is not properly configured to encrypt data. | Either JCE files is missing or the configuration property `encryption.password` might be missing in `dhis.conf`. |
| E1113 | 注册：`{0}`，已删除且无法修改。 | 如果注册被软删除，则不允许对其进行修改。 |
| E1114 | TrackedEntity：`{0}`，已被删除且无法修改。 | 如果 TrackedEntity 被软删除，则不允许对其进行任何修改。 |
| E1115 | 找不到 CategoryOptionCombo：`{0}`。 | |
| E1116 | 找不到 CategoryOption：`{0}`。 | 这也可能意味着用户无法访问 CategoryOption。|
| E1117 | CategoryOptionCombo does not exist for given category combo and category options: `{0}`. | |
| E1118 | Assigned user `{0}` is not a valid uid. | |
| E1119 | A Tracker Note with uid `{0}` already exists. | |
| E1120 | ProgramStage `{0}` 不允许用户分配 | 事件负载已分配用户 ID，但 ProgramStage 未配置为允许用户分配。 |
| E1121 | Missing required tracked entity property: `{0}`. | |
| E1122 | Missing required enrollment property: `{0}`. | |
| E1123 | Missing required event property: `{0}`. | |
| E1124 | Missing required relationship property: `{0}`. | |
| E1125 | Value `{0}` is not a valid option for `{1}` `{2}` in option set `{3}` | |
| E1017 | Attribute: `{0}`, does not exist. | |
| E1093 | User: `{0}`, has no search access to OrganisationUnit: `{1}`. | |
| E1094 | Not allowed to update Enrollment: `{0}`, existing Program `{1}`. | 现有注册的注册有效负载具有与其最初注册时不同的计划 uid。 |
| E1110 | Not allowed to update Event: `{0}`, existing Program `{1}`. | 现有事件的事件负载具有与最初创建时不同的程序 uid。  |
| E1111 | We have a generated attribute: `{0}`, but no pattern. | |
| E1043 | Event: `{0}`, completeness date has expired. Not possible to make changes to this event. | 没有“F_EDIT_EXPIRED”权限的用户无法更新已超过其程序中配置的到期日的事件。 |
| E1046 | 事件：`{0}`，需要至少有一个（事件或时间表）日期。 | occurredAt 或 ScheduledAt 属性应出现在事件负载中。 |
| E1047 | 事件：`{0}`，日期属于过期期限。不可能创建此类事件。 | 事件“occurredAt”或“scheduledAt”的值早于“PeriodType”开始日期。  |
| E1300 | 由程序规则 (`{0}`) 生成 - `{1}` | |
| E1302 | Generated by program rule (`{0}`) - DataElement `{1}` is not valid: `{2}` | |
| E1303 | Generated by program rule (`{0}`) - Mandatory DataElement `{1}` is not present | |
| E1304 | Generated by program rule (`{0}`) - DataElement `{1}` is not a valid data element | |
| E1305 | Generated by program rule (`{0}`) - DataElement `{1}` is not part of `{2}` program stage | |
| E1306 | 由程序规则 (`{0}`) 生成 - 强制属性 `{1}` 不存在 | |
| E1307 | Generated by program rule (`{0}`) - Unable to assign value to data element `{1}`. The provided value must be empty or match the calculated value `{2}` | |
| E1308 | Generated by program rule (`{0}`) - DataElement `{1}` is being replaced in event `{2}` | |
| E1309 | Generated by program rule (`{0}`) - Unable to assign value to attribute `{1}`. The provided value must be empty or match the calculated value `{2}` | |
| E1310 | 由程序规则 (`{0}`) 生成 - 属性 `{1}` 在 tei `{2}` 中被替换 | |
| E4000 | Relationship: `{0}` cannot link to itself | |
| E4001 | Relationship Item `{0}` for Relationship `{1}` is invalid: an Item can link only one Tracker entity. | |
| E4006 | Could not find relationship Type: `{0}`. | |
| E4009 | Relationship Type `{0}` is not valid. | |
| E4010 | Relationship Type `{0}` constraint requires a {1} but a {2} was found. | |
| E4011 | Relationship: `{0}` cannot be persisted because {1} {2} referenced by this relationship is not valid. | |
| E4012 | Could not find `{0}`: `{1}`, linked to Relationship. | |
| E4013 | Relationship Type `{0}` constraint is missing {1}. | |
| E4014 | Relationship Type `{0}` constraint requires a Tracked Entity having type `{1}` but `{2}` was found. | |
| E4062 | Start date or end date not specified with ABSOLUTE date period type for item `{0}` | |
| E4063 | 当分配用户模式设置为 PROVIDED 时，分配的用户不能为空 | |
| E4064 | Organisation unit cannot be empty with `{0}` org unit mode | |
| E4065 | 过滤器中缺少数据项 UID | |
| E4066 | No data element found for item: `{0}` | |
| E4067 | 过滤器中缺少属性 UID | |
| E4068 | No tracked entity attribute found for attribute: `{0}` | |
| E9999 | 不适用 | 未定义的错误消息。 |

### 验证方式 { #webapi_nti_validation }

使用跟踪器导入器导入数据时，会执行一系列验证以确保数据的有效性。本节将描述所执行的一些不同类型的验证，以便更好地了解导入验证是否失败。

#### 所需属性 { #required-properties }

每个跟踪器对象都有一些导入数据时需要提供的必需属性。有关所需属性的详尽列表，请查看 [Tracker Object 部分](#webapi_nti_tracker_objects)。

在验证所需属性时，我们通常谈论对其他数据或元数据的引用。在这些情况下，有三个主要标准：

1. 该引用在有效负载中存在且不为空。
2. 引用指向正确的数据类型并且存在于数据库中
3. 用户有权查看参考

如果第一个条件失败，导入将失败，并显示一条有关缺少引用的消息。但是，假设引用指向不存在或用户无法访问的内容。在这种情况下，这两种情况都会导致一条有关未找到引用的消息。

#### 格式 { #formats }

跟踪器对象的某些属性需要特定的格式。导入数据时，每个属性都会根据预期格式进行验证，并将根据哪个属性的格式错误返回不同的错误。以这种方式验证的属性的一些示例：

- UID（涵盖对 DHIS2 中其他数据或元数据的所有引用。）
- 日期
- 几何（坐标必须与其类型指定的格式匹配）

#### 用户访问 { #user-access }
所有导入的数据都将根据数据中引用的元数据 ([Sharing](#webapi_nti_metadata_sharing)) 和组织单位 ([组织单位范围](#webapi_nti_ou_scope)) 进行验证。您可以在以下部分中找到有关共享和组织单位范围的更多信息。

在数据库中查找参考文献的同时验证共享。用户访问权限之外的元数据将被视为不存在。导入将验证数据中引用的任何元数据。

另一方面，组织单位有双重目的。它主要确保只有在为用户“捕获范围”内的组织单位导入数据时才能导入数据。其次，组织单位还用于限制可用的程序。这意味着，如果您尝试为无权访问您正在导入的程序的组织单位导入数据，则导入将无效。

Users with the `ALL` authority will ignore the limits of sharing and organisation unit scopes when they import data. However, they can not import enrollments in organisation units that do not have access to the enrollment program.

#### 属性和数据值 { #attribute-and-data-values }

属性和数据值分别是跟踪实体和事件的一部分。但是，属性可以通过其类型 (TrackedEntityType) 或其程序 (Program) 链接到跟踪实体。此外，属性也可以是唯一的。

导入中完成的初始验证是为了确保为属性或数据元素提供的值符合预期值的类型。例如，假设您导入数值类型的数据元素的值。在这种情况下，该值应为数字。与类型和值之间不匹配相关的任何错误都将导致相同的错误代码，但带有与违规类型相关的特定消息。

Mandatory attributes and data values are also checked. Currently, removing mandatory attributes is not allowed. Some use-cases require values to be sent separately, while others require all values to be sent as one. Programs can be configured to either validate mandatory attributes `ON_COMPLETE` or `ON_UPDATE_AND_INSERT` to accommodate these use-cases.

导入将在导入时验证唯一属性。这意味着只要提供的值对于整个系统中的属性来说是唯一的，它就会通过。但是，如果发现该唯一值被除导入实体之外的任何其他跟踪实体使用，则该操作将会失败。

#### 组态 { #configuration } 

导入器中验证的最后一部分是基于用户对相关元数据的配置进行验证。有关每种配置的更多信息，请查看相关部分。可配置验证的一些示例：
- 特征类型（对于几何）
- 用户可分配的事件
- 允许未来的日期
- 报名一次
- 和更多。

这些配置将进一步改变导入期间执行验证的方式。

### 计划规则 { #webapi_nti_program_rules }

用户可以配置[程序规则](#webapi_program_rules)，这会向跟踪器表单添加条件行为。除了在跟踪器应用程序中运行这些规则之外，跟踪器导入器还将运行这些规则的选择。由于进口商也在运行这些规则，因此我们可以确保额外的验证级别。

并非所有程序规则操作都受支持，因为它们仅适合前端演示。下面列出了受支持的程序规则操作的完整列表。

  |程序规则动作|支持的|
  |---|:---:|
  |**显示文本**| |
  |**显示键值对**| |
  |**海德菲尔德**||
  |**隐藏部分**||
  |**分配**|**X**|
  |**显示警告**|**X**|
  |**淋浴间**|**X**|
  |**完成警告**|**X**|
  |**完成错误**|**X**|
  |**创建事件**||
  |**设置强制字段**|**X**|
  |**发信息**|**X**|
  |**安排消息**|**X**|

程序规则在导入器中的评估方式与在 Tracker 应用程序中的评估方式相同。总而言之，执行计划规则时会考虑以下条件：

* 程序规则必须链接到正在导入的数据。例如，程序阶段或数据元素。
* 计划规则的条件必须评估为 true

程序规则的结果取决于这些规则中定义的操作：

* 程序规则操作可能以 2 种不同的结果结束：警告或错误。
  * 错误将使验证失败，而警告将在导入摘要中作为消息报告。
    * SHOWWARNING 和 WARNINGONCOMPLETION 操作只能生成警告。
    * SHOWERROR、ERRORONCOMPLETION 和 SETMANDATORYFIELD 操作只能生成错误。
    * ASSIGN 操作可以生成警告和错误。
      * 当操作为空属性/数据元素分配值时，会生成警告。
      * 当操作正在为已具有要分配的相同值的属性/数据元素分配值时，会生成警告。
      * When the action is assigning a value to an attribute/data element that already has a value and the value to be assigned is different, an error is generated unless the `RULE_ENGINE_ASSIGN_OVERWRITE` system setting is set to true.

此外，程序规则还可能导致副作用，例如发送和安排消息。有关副作用的更多信息可以在以下部分中找到。

> **注意**
>
> 可以使用 `skipProgramRules` 参数在导入过程中跳过程序规则。

### 副作用 { #webapi_nti_side_effects }

导入完成后，导入可能会触发特定任务。这些任务就是我们所说的“副作用”。这些任务执行的操作不会影响导入本身。

副作用是与导入分离运行但始终由导入触发的任务。由于副作用与导入无关，因此即使导入成功，副作用也可能会失败。此外，副作用仅在导入成功时运行，因此它们不会以相反的方式失败。

目前支持以下副作用：

  |副作用|支持的|描述|
  |---|:---:|---|
  |**追踪器通知**|**X**| 更新可以触发通知。触发通知的更新是**注册**、**事件更新**、**事件或注册完成**。 |
  |**程序规则通知**|**X**| 程序规则可以触发通知。请注意，这些通知是通过 DHIS2 规则引擎生成的程序规则效果的一部分。|

  > **NOTE**
  >
  > Certain configurations can control the execution of side effects. `skipSideEffects` flag can be set during the import to skip side effects entirely. This parameter can be useful if you import something you don't want to trigger notifications for, as an example.

### 将用户分配给事件 { #webapi_nti_user_event_assignment }

特定工作流受益于像任务一样处理事件，因此，您可以将用户分配给事件。

Assigning a user to an event will not change the access or permissions for users but will create a link between the Event and the user.
When an event has a user assigned, you can query events from the API using the `assignedUser` field as a parameter.

When you want to assign a user to an event, you simply provide the UID of the user you want to assign in the `assignedUser` field. See the following example:

```json
{
  ...
  "events": [
    {
      "event": "ZwwuwNp6gVd",
      "programStage": "nlXNK4b7LVr",
      "orgUnit": "O6uvpzGd5pu",
      "enrollment": "MNWZ6hnuhSw",
      "assignedUser" : "M0fCOxtkURr"
    }
  ],
  ...
}
```

In this example, the user with uid `M0fCOxtkURr` will be assigned to the Event with uid `ZwwuwNp6gVd`. Only one user can be assigned to a single event.

要使用此功能，相关程序阶段需要启用用户分配，并且为用户提供的 uid 必须引用有效的现有用户。

## 跟踪器导出 { #webapi_nti_export }

跟踪器导出端点允许您检索以前导入的对象，这些对象是：

- **跟踪实体**
- **活动**
- **注册人数**
- **关系**

> **NOTE**
>
> - All these endpoints currently support `JSON`. `CSV` is only supported by tracked entities and events.

### 常用请求参数 { #common-request-parameters }

以下端点支持分页的标准参数。

- **Tracked Entities** `GET /api/tracker/trackedEntities`
- **Events** `GET /api/tracker/events`
- **Enrollments** `GET /api/tracker/enrollments`
- **Relationships** `GET /api/tracker/relationships`

#### 分页请求参数 { #request-parameters-for-pagination }

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`页面`|`整数`| 任意正整数 |要返回的页码。如果缺失则默认为 1|
|`页面大小`|`整数`| 任意正整数 |页面大小。默认为 50。 |
|`总页数`|`Boolean`| `true`&#124;`false` |指示是否返回响应中的总页数 |
|`跳过分页`|`Boolean`| `true`&#124;`false` |Indicates whether paging should be ignored and all rows should be returned. Defaults to `false`, meaning that by default all requests are paginated, unless `skipPaging=true`|

> **Caution**
>
> Be aware that the performance is directly related to the amount of data requested. Larger pages will take more time to return.

#### Request parameters for Organisational Unit selection mode { #request-parameters-for-organisational-unit-selection-mode } 

可用的组织单元选择模式在
下表。

|Mode|描述|
|---|---|
|`SELECTED`|  Organisation units defined in the request.|
|`CHILDREN`|  The selected organisation units and the immediate children, i.e., the organisation units at the level below.|
|`DESCENDANTS`| The selected organisation units and all children, i.e., all organisation units in the sub-hierarchy.|
|`ACCESSIBLE`|  The data view organisation units associated with the current user and all children, i.e., all organisation units in the sub-hierarchy. Will fall back to data capture organisation units associated with the current user if the former is not defined.|
|`CAPTURE`| The data capture organisation units associated with the current user and all children, i.e., all organisation units in the sub-hierarchy.|
|`ALL`| All organisation units in the system. Requires the ALL authority.|

#### Request parameter to filter responses { #webapi_nti_field_filter }

All export endpoints accept a `fields` parameter which controls which fields will be returned in the
JSON response. `fields` parameter accepts a comma separated list of field names or patterns. A few
possible `fields` filters are shown below. Refer to [Metadata field
filter](#webapi_metadata_field_filter) for a more complete guide on how to use `fields`.

##### 例子 { #examples } 

|Parameter example|Meaning|
|:---|:---|
|`fields=*`|returns all fields|
|`fields=createdAt,uid`|only returns fields `createdAt` and `uid`|
|`fields=enrollments[*,!uid]`|returns all fields of `enrollments` except `uid`|
|`fields=enrollments[uid]`|only returns `enrollments` field `uid`|
|`fields=enrollments[uid,enrolledAt]`|only returns `enrollments` fields `uid` and `enrolledAt`|

### Tracked Entities (`GET /api/tracker/trackedEntities`) { #tracked-entities-get-apitrackertrackedentities } 

Two endpoints are dedicated to tracked entities:

- `GET /api/tracker/trackedEntities`
  - retrieves tracked entities matching given criteria
- `GET /api/tracker/trackedEntities/{id}`
  - retrieves a tracked entity given the provided id

#### Tracked Entities Collection endpoint `GET /api/tracker/trackedEntities` { #tracked-entities-collection-endpoint-get-apitrackertrackedentities } 

The purpose of this endpoint is to retrieve tracked entities matching client-provided criteria.

The endpoint returns a list of tracked entities that match the request parameters.

##### 请求语法 { #request-syntax } 

|Request parameter|类型|Allowed values|描述|
|---|---|---|---|
|`query`|`String`|`{operator}:{filter-value}`|Creates a filter over tracked entity attributes. Only the filter value is mandatory. The `EQ` operator is used if `operator` is not specified.|
|`attribute`|`字符串`|Comma separated values of attribute `UID`s |For each tracked entity in the response, only returns specified attributes |
|`filter`|`字符串`|Comma separated values of attribute filters|Narrows response to TEIs matching given filters. A filter is a colon separated property or attribute UID with optional operator and value pairs. Example: `filter=H9IlTX2X6SL:sw:A` with operator starts with `sw` followed by a value. Special characters like `+` need to be percent-encoded so `%2B` instead of `+`. Characters such as `:` (colon) or `,` (comma), as part of the filter value, need to be escaped by `/` (slash). Likewise, `/` needs to be escaped. Multiple operator/value pairs for the same property/attribute like `filter=AuPLng5hLbE:gt:438901703:lt:448901704` are allowed. Repeating the same attribute UID is not allowed. User needs access to the attribute to filter on it.|
|`orgUnit`|`字符串`|semicolon-delimited list of organisational unit `UID`|Only return tracked entity instances belonging to provided organisational units|
|`ouMode` see [ouModes](#Request-parameters-for-Organisational-Unit-selection-mode)|`字符串`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|The mode of selecting organisation units, can be. Default is `SELECTED`, which refers to the selected organisation units only.|
|`program`|`字符串`|Program `UID`| a Program `UID` for which instances in the response must be enrolled into|
|`programStatus`|`字符串`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|The ProgramStatus of the Tracked Entity Instance in the given program|
|`programStage`|`字符串`|`UID`|a Program Stage `UID` for which instances in the response must have events for|
|`followUp`|`Boolean`|`true`&#124;`false`|Indicates whether the Tracked Entity Instance is marked for follow up for the specified Program|
|`updatedAfter`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | Start date for last updated|
|`updatedBefore`|`日期时间`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | End date for last updated|
|`updatedWithin`|`Duration`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) | Returns TEIs not older than specified Duration|
|`enrollmentEnrolledAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Start date for enrollment in the given program|
|`enrollmentEnrolledBefore`|`日期时间`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|End date for enrollment in the given program|
|`enrollmentOccurredAfter`|`日期时间`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Start date for incident in the given program|
|`enrollmentOccurredBefore`|`日期时间`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|End date for incident in the given program|
|`trackedEntityType`|`String`|UID of tracked entity type|Only returns Tracked Entity Instances of given type|
|`trackedEntity`|`字符串`|semicolon-delimited list of tracked entity instance `UID`|Filter the result down to a limited set of tracked entities using explicit uids of the tracked entity instances by using `trackedEntity=id1;id2`. This parameter will, at the very least, create the outer boundary of the results, forming the list of all tracked entities using the uids provided. If other parameters/filters from this table are used, they will further limit the results from the explicit outer boundary.|
|`assignedUserMode`|`字符串`|`CURRENT`&#124;`PROVIDED`&#124;`NONE`&#124;`ANY`|Restricts result to tracked entities with events assigned based on the assigned user selection mode. See table below "Assigned user modes" for explanations. |
|`assignedUser`|`字符串`|Semicolon-delimited list of user UIDs to filter based on events assigned to the users.|Filter the result down to a limited set of tracked entities with events that are assigned to the given user IDs by using `assignedUser=id1;id2`.This parameter will only be considered if assignedUserMode is either `PROVIDED` or `null`. The API will error out, if for example, `assignedUserMode=CURRENT` and `assignedUser=someId`|
|`eventStatus`|`字符串`|`ACTIVE`&#124;`COMPLETED`&#124;`VISITED`&#124;`SCHEDULE`&#124;`OVERDUE`&#124;`SKIPPED`|Status of any events in the specified program|
|`eventOccurredAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Start date for Event for the given Program|
|`eventOccurredBefore`|`日期时间`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|End date for Event for the given Program|
|`skipMeta`|`Boolean`|`true`&#124;`false`|Indicates whether not to include metadata in the response.|
|`includeDeleted`|`Boolean`|`true`&#124;`false`|Indicates whether to include soft-deleted elements|
|`includeAllAttributes`|`Boolean`|`true`&#124;`false`|Indicates whether to include all TEI attributes|
|`attachment`|`String`| |The file name in case of exporting as a file|
|`potentialDuplicate`|`Boolean`|`true`&#124;`false`| Filter the result based on the fact that a TEI is a Potential Duplicate. true: return TEIs flagged as Potential Duplicates. false: return TEIs NOT flagged as Potential Duplicates. If omitted, we don't check whether a TEI is a Potential Duplicate or not. |
|`order`|`String`|comma-delimited list of property name or attribute UID and sort direction pairs in format `propName:sortDirection`.|Supported fields: `createdAtClient`, `createdAt`, `enrolledAt`, `inactive`, `trackedEntity`, `updatedAtClient`, `updatedAt`.|

The available assigned user modes are explained in the following table.


Table: Assigned user modes

| Mode | 描述 |
|---|---|
| CURRENT | Includes events assigned to the current logged in user. |
| PROVIDED | Includes events assigned to the user provided in the request. |
| NONE | Includes unassigned events only. |
| ANY | Includes all assigned events, doesn't matter who are they assigned to as long as they assigned to someone. |

查询不区分大小写。以下规则适用于查询
参数。

- At least one organisation unit must be specified using the `orgUnit`
  parameter (one or many), or `ouMode=ALL` must be specified.

- Only one of the `program` and `trackedEntity` parameters can be
  指定（零或一）。

- If `programStatus` is specified, then `program` must also be
  指定的。

- If `followUp` is specified, then `program` must also be specified.

- If `enrollmentEnrolledAfter` or `enrollmentEnrolledBefore` is specified then
  `program` must also be specified.

- 过滤器项目只能指定一次。

##### Example requests { #example-requests } 

查询与特定组织单位关联的所有实例
看起来像这样：

    GET /api/tracker/trackedEntities?orgUnit=DiszpKrYNg8

使用一个带有过滤器的属性和一个属性来查询实例
没有过滤器的属性，一个组织单位使用
后代组织单位查询方式：

    GET /api/tracker/trackedEntities?filter=zHXD5Ve1Efw:EQ:A
        &attribure=AMpUYgxuCaE&orgUnit=DiszpKrYNg8;yMCshbaVExv

A query for instances where attributes are included in the response
and one attribute is used as a filter:

    GET /api/tracker/trackedEntities?filter=zHXD5Ve1Efw:EQ:A
        &filter=AMpUYgxuCaE:LIKE:Road
        &orgUnit=DiszpKrYNg8

为过滤器指定了多个操作数和过滤器的查询
物品：

    GET /api/tracker/trackedEntities?orgUnit=DiszpKrYNg8
        &program=ur1Edk5Oe2n
        &filter=lw1SqmMlnfh:GT:150
        &filter=lw1SqmMlnfh:LT:190

A query filter with a value that needs escaping and will be interpreted as `:,/`:

    GET /api/tracker/trackedEntities?orgUnit=DiszpKrYNg8
        &program=ur1Edk5Oe2n
        &filter=lw1SqmMlnfh:EQ:/:/,//

要在 *IN* 过滤器中使用多个值查询属性：

    GET /api/tracker/trackedEntities?orgUnit=DiszpKrYNg8
        &filter=dv3nChNSIxy:IN:Scott;Jimmy;Santiago

限制对属于特定事件一部分的实例的响应
program 你可以包含一个 program 查询参数：

    GET /api/tracker/trackedEntities?filter=zHXD5Ve1Efw:EQ:A
        &orgUnit=O6uvpzGd5pu&ouMode=DESCENDANTS
        &program=ur1Edk5Oe2n

要将程序注册日期指定为查询的一部分，请执行以下操作：

    GET /api/tracker/trackedEntities?
        &orgUnit=O6uvpzGd5pu&program=ur1Edk5Oe2n
        &enrollmentEnrolledAfter=2013-01-01
        &enrollmentEnrolledBefore=2013-09-01

要限制对特定跟踪实体实例的响应，您
可以包含跟踪实体查询参数：

    GET /api/tracker/trackedEntities?filter=zHXD5Ve1Efw:EQ:A
        &orgUnit=O6uvpzGd5pu
        &ouMode=DESCENDANTS
        &trackedEntity=cyl5vuJ5ETQ

默认情况下，实例以大小为 50 的页面返回，以更改
您可以使用 page 和 pageSize 查询参数：

    GET /api/tracker/trackedEntities?filter=zHXD5Ve1Efw:EQ:A
        &orgUnit=O6uvpzGd5pu
        &ouMode=DESCENDANTS
        &page=2&pageSize=3

您可以使用一系列运算符进行过滤：

|Operator|  描述|
|---|---|
|`EQ`|  Equal to|
|`GT`|  Greater than|
|`GE`|  Greater than or equal to|
|`LT`|  Less than|
|`LE`|  Less than or equal to|
|`NE`|  Not equal to|
|`LIKE`|  Like (free text match)|
|`IN`|  Equal to one of the multiple values separated by ";"|

##### 回应格式 { #response-format } 

The `JSON` response can look like the following.

Responses can be filtered on desired fields, see [Request parameter to filter responses](#webapi_nti_field_filter)

```json
{
  "instances": [
    {
      "trackedEntity": "IzHblRD2sDH",
      "trackedEntityType": "nEenWmSyUEp",
      "createdAt": "2014-03-26T15:40:36.669",
      "createdAtClient": "2014-03-26T15:40:36.669",
      "updatedAt": "2014-03-28T12:28:17.544",
      "orgUnit": "g8upMTyEZGZ",
      "inactive": false,
      "deleted": false,
      "relationships": [],
      "attributes": [
        {
          "attribute": "VqEFza8wbwA",
          "code": "MMD_PER_ADR1",
          "displayName": "Address",
          "createdAt": "2016-01-12T00:00:00.000",
          "updatedAt": "2016-01-12T00:00:00.000",
          "valueType": "TEXT",
          "value": "1061 Marconi St"
        },
        {
          "attribute": "RG7uGl4w5Jq",
          "code": "Longitude",
          "displayName": "Longitude",
          "createdAt": "2016-01-12T00:00:00.000",
          "updatedAt": "2016-01-12T00:00:00.000",
          "valueType": "TEXT",
          "value": "27.866613"
        },
        ...,
        ...,
      ],
      "enrollments": [],
      "programOwners": []
    }
  ],
  "page": 1,
  "total": 39,
  "pageSize": 1
}
```

#### Tracked Entities single object endpoint `GET /api/tracker/trackedEntities/{uid}`

The purpose of this endpoint is to retrieve one tracked entity given its uid.

##### 请求语法 { #request-syntax } 

`GET /api/tracker/trackedEntities/{uid}?program={programUid}&fields={fields}`

|Request parameter|类型|Allowed values|描述|
|---|---|---|---|
|`uid`|`String`|`uid`|Return the Tracked Entity Instance with specified `uid`|
|`program`|`String`|`uid`| Include program attributes in the response (only the ones user has access to) |
|`fields`|`String`| Any valid field filter (default `*,!relationships,!enrollments,!events,!programOwners`) |Include specified sub-objects in the response| 

##### Example requests { #example-requests } 

A query for a Tracked Entity Instance:

    GET /api/tracker/trackedEntities/IzHblRD2sDH?program=ur1Edk5Oe2n&fields=*

##### 回应格式 { #response-format } 

This endpoint supports returning sub-objects when the `fields` request parameter is passed when json format is requested. In case of csv the `fields` request parameter has no effect and the response will always contain the same fields, which are:
  - trackedEntity (Identifier)
  - trackedEntityType (Identifier)
  - createdAt (Datetime)
  - createdAtClient (Datetime)
  - updatedAt (Datetime)
  - updatedAtClient (Datetime)
  - orgUnit (Identifier)
  - inactive (boolean)
  - deleted (boolean)
  - potentialDuplicate (boolean)
  - geometry (WKT, https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry)
  - storedBy (String)
  - createdBy (Username of user)
  - updatedBy (Username of user)
  - attributes (each valid attribute listed as another column)

An example of a json response:
```json
{
    "trackedEntity": "IzHblRD2sDH",
    "trackedEntityType": "nEenWmSyUEp",
    "createdAt": "2014-03-26T15:40:36.669",
    "updatedAt": "2014-03-28T12:28:17.544",
    "orgUnit": "g8upMTyEZGZ",
    "inactive": false,
    "deleted": false,
    "relationships": [],
    "attributes": [
        {
            "attribute": "w75KJ2mc4zz",
            "code": "MMD_PER_NAM",
            "displayName": "First name",
            "createdAt": "2016-01-12T09:10:26.986",
            "updatedAt": "2016-01-12T09:10:35.884",
            "valueType": "TEXT",
            "value": "Wegahta"
        },
        {
            "attribute": "zDhUuAYrxNC",
            "displayName": "Last name",
            "createdAt": "2016-01-12T09:10:26.986",
            "updatedAt": "2016-01-12T09:10:35.884",
            "valueType": "TEXT",
            "value": "Goytiom"
        }
    ],
    "enrollments": [
        {
            "enrollment": "uT5ZysTES7j",
            "createdAt": "2017-03-28T12:28:17.539",
            "createdAtClient": "2016-03-28T12:28:17.539",
            "updatedAt": "2017-03-28T12:28:17.544",
            "trackedEntity": "IzHblRD2sDH",
            "trackedEntityType": "nEenWmSyUEp",
            "program": "ur1Edk5Oe2n",
            "status": "ACTIVE",
            "orgUnit": "g8upMTyEZGZ",
            "orgUnitName": "Njandama MCHP",
            "enrolledAt": "2020-11-10T12:28:17.532",
            "occurredAt": "2020-10-12T12:28:17.532",
            "followUp": false,
            "deleted": false,
            "events": [
                {
                    "event": "ixDYEGrNQeH",
                    "status": "ACTIVE",
                    "program": "ur1Edk5Oe2n",
                    "programStage": "ZkbAXlQUYJG",
                    "enrollment": "uT5ZysTES7j",
                    "enrollmentStatus": "ACTIVE",
                    "trackedEntity": "IzHblRD2sDH",
                    "relationships": [],
                    "scheduledAt": "2019-10-12T12:28:17.532",
                    "followup": false,
                    "deleted": false,
                    "createdAt": "2017-03-28T12:28:17.542",
                    "createdAtClient": "2016-03-28T12:28:17.542",
                    "updatedAt": "2017-03-28T12:28:17.542",
                    "attributeOptionCombo": "HllvX50cXC0",
                    "attributeCategoryOptions": "xYerKDKCefk",
                    "dataValues": [],
                    "notes": []
                }
            ],
            "relationships": [],
            "attributes": [],
            "notes": []
        }
    ],
    "programOwners": [
        {
            "orgUnit": "g8upMTyEZGZ",
            "trackedEntity": "IzHblRD2sDH",
            "program": "ur1Edk5Oe2n"
        }
    ]
}
```

### Events (`GET /api/tracker/events`) { #events-get-apitrackerevents } 

Two endpoints are dedicated to events:

- `GET /api/tracker/events`
    - retrieves events matching given criteria
- `GET /api/tracker/events/{id}`
    - retrieves an event given the provided id

#### Events Collection endpoint `GET /api/tracker/events` { #events-collection-endpoint-get-apitrackerevents } 

Returns a list of events based on the provided filters.

|Request parameter|类型|Allowed values|描述|
|---|---|---|---|
|`program`|`String`|`uid`| Identifier of program|
|`programStage`|`String`|`uid`| Identifier of program stage|
|`programStatus`|`enum`| `ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`| Status of event in program | 
|`filter`|`String`|Comma separated values of data element filters|Narrows response to events matching given filters. A filter is a colon separated property or data element UID with optional operator and value pairs. Example: `filter=fazCI2ygYkq:eq:PASSIVE` with operator starts with `eq` followed by a value. Characters such as `:` (colon) or `,` (comma), as part of the filter value, need to be escaped by `/` (slash). Likewise, `/` needs to be escaped. Multiple operator/value pairs for the same property/data element like `filter=qrur9Dvnyt5:gt:70:lt:80` are allowed. Repeating the same data element UID is not allowed. User needs access to the data element to filter on it.|
|`filterAttributes`|`String`|Comma separated values of attribute filters|Narrows response to TEIs matching given filters. A filter is a colon separated property or attribute UID with optional operator and value pairs. Example: `filter=H9IlTX2X6SL:sw:A` with operator starts with `sw` followed by a value. Special characters like `+` need to be percent-encoded so `%2B` instead of `+`. Characters such as `:` (colon) or `,` (comma), as part of the filter value, need to be escaped by `/` (slash). Likewise, `/` needs to be escaped. Multiple operator/value pairs for the same property/attribute like `filter=AuPLng5hLbE:gt:438901703:lt:448901704` are allowed. Repeating the same attribute UID is not allowed. User needs access to the attribute to filter on it.|
|`followUp`|`boolean`| `true`&#124;`false` | Whether event is considered for follow up in program. Defaults to `true`|
|`trackedEntityInstance`|`String`|`uid`| Identifier of tracked entity instance|
|`orgUnit`|`String`|`uid`| Identifier of organisation unit|
|`ouMode` see [ouModes](#Request-parameters-for-Organisational-Unit-selection-mode)|`String`| `SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`|  Org unit selection mode| 
|`status`|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`VISITED`&#124;`SCHEDULE`&#124;`OVERDUE`&#124;`SKIPPED` | Status of event|
|`occurredAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | Filter for events which occurred after this date.|
|`occurredBefore`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| Filter for events which occurred up until this date.|
|`scheduledAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | Filter for events which were scheduled after this date.|
|`scheduledBefore`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| Filter for events which were scheduled before this date.|
|`updatedAfter`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| Filter for events which were updated after this date. Cannot be used together with `updatedWithin`.|
|`updatedBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | Filter for events which were updated up until this date. Cannot be used together with `updatedWithin`.|
|`updatedWithin`|`Duration`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Durations)| Include only items which are updated within the given duration.<br><br> The format is [ISO-8601#Duration](https://en.wikipedia.org/wiki/ISO_8601#Durations)|
|`enrollmentEnrolledAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Start date for enrollment in the given program|
|`enrollmentEnrolledBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|End date for enrollment in the given program|
|`enrollmentOccurredAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Start date for incident in the given program|
|`enrollmentOccurredBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|End date for incident in the given program|
|`skipMeta`|`Boolean`| `true`&#124;`false` | Exclude the meta data part of response (improves performance)|
|`dataElementIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| Data element ID scheme to use for export.|
|`categoryOptionComboIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| Category Option Combo ID scheme to use for export|
|`orgUnitIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| Organisation Unit ID scheme to use for export|
|`programIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| Program ID scheme to use for export|
|`programStageIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| Program Stage ID scheme to use for export|
|`idScheme`|`string`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| Allows to set id scheme for data element, category option combo, orgUnit, program and program stage at once.|
|`order`|`String`|Supported fields are: `assignedUser, assignedUserDisplayName, attributeOptionCombo, completedAt, completedBy, createdAt, createdBy, deleted, enrolledAt, enrollment, enrollmentStatus, event, followup, occurredAt, orgUnit, orgUnitName, program, programStage, scheduleAt, status, storedBy, trackedEntity, updatedAt, updatedBy`.|Comma-delimited list of property name, attribute or data element UID and sort direction pairs in format `propName:sortDirection`.<br><br>**Note:** `propName` is case sensitive, `sortDirection` is case insensitive. |
|`event`|`String`|comma-delimited list of `uid`| Filter the result down to a limited set of IDs by using event=id1;id2.|
|`skipEventId`|`Boolean`| | Skips event identifiers in the response|
|`attributeCc` (see note)|`String`| Attribute category combo identifier (must be combined with attributeCos)|
|`attributeCos` (see note)|`String`| Attribute category option identifiers, separated with ; (must be combined with attributeCc)|
|`includeDeleted`|`Boolean`| |  When true, soft deleted events will be included in your query result.|
|`assignedUserMode`|`String`| `CURRENT`&#124;`PROVIDED`&#124;`NONE`&#124;`ANY`| Assigned user selection mode|
|`assignedUser`|`String`|comma-delimited list od `uid`| Filter the result down to a limited set of events that are assigned to the given user IDs by using `assignedUser=id1;id2`.<br><br>This parameter will be considered only if assignedUserMode is either `PROVIDED` or `null`.<br><br>The API will error out, if for example, `assignedUserMode=CURRENT` and `assignedUser=someId`|

> **Note**
>
> If the query contains neither `attributeCC` nor `attributeCos`, 
> the server returns events for all attribute option combos where the user has read access.

##### Example requests { #example-requests } 

The query for all events with children of a particular organisation unit:

    GET /api/tracker/events?orgUnit=YuQRtpLP10I&ouMode=CHILDREN

The query for all events with all descendants of a particular organisation
unit, implying all organisation units in the sub-hierarchy:

    GET /api/tracker/events?orgUnit=O6uvpzGd5pu&ouMode=DESCENDANTS

使用特定程序和组织单位查询所有事件：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc

查询具有一定节目和组织单位的所有事件，
按截止日期排序
    上升：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&order=dueDate

查询某节目中活动日期最新的10个活动
和组织单位 - 按到期日降序分页和排序：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc
      &order=eventDate:desc&pageSize=10&page=1

查询具有特定节目和组织单位的所有事件
特定的跟踪实体实例：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8
      &program=eBAyeGv0exc&trackedEntityInstance=gfVxE3ALA9m

查询某个程序和组织单位较旧的所有事件
或等于
    2014-02-03：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&endDate=2014-02-03

查询具有一定节目阶段、组织单位和
2014年被跟踪实体实例：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc
      &trackedEntityInstance=gfVxE3ALA9m&occurredAfter=2014-01-01&occurredBefore=2014-12-31

Retrieve events with specified Organisation unit and Program, and use `Attribute:Gq0oWTf2DtN` as
identifier scheme

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=lxAQ7Zs9VYR&idScheme=Attribute:Gq0oWTf2DtN

Retrieve events with specified Organisation unit and Program, and use UID as identifier scheme for
organisation units, Code as identifier scheme for Program stages, and _Attribute:Gq0oWTf2DtN_ as the identifier
scheme for the rest of the metadata with assigned attributes.

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=lxAQ7Zs9VYR&idScheme=Attribute:Gq0oWTf2DtN
      &orgUnitIdScheme=UID&programStageIdScheme=Code

A query where multiple operand and filters are specified for a data element UID:

    GET /api/tracker/events?orgUnit=DiszpKrYNg8
        &program=lxAQ7Zs9VYR
        &filter=lw1SqmMlnfh:GT:150
        &filter=lw1SqmMlnfh:LT:190

A query filter with a value that needs escaping and will be interpreted as `:,/`:

    GET /api/tracker/events?orgUnit=DiszpKrYNg8
        &program=lxAQ7Zs9VYR
        &filter=lw1SqmMlnfh:EQ:/:/,//

##### 回应格式 { #response-format } 

The `JSON` response can look like the following.

```json
{
    "instances": [
        {
            "event": "rgWr86qs0sI",
            "status": "ACTIVE",
            "program": "kla3mAPgvCH",
            "programStage": "aNLq9ZYoy9W",
            "orgUnit": "DiszpKrYNg8",
            "orgUnitName": "Ngelehun CHC",
            "relationships": [],
            "occurredAt": "2021-10-12T00:00:00.000",
            "followup": false,
            "deleted": false,
            "createdAt": "2018-10-20T12:09:19.492",
            "updatedAt": "2018-10-20T12:09:19.492",
            "attributeOptionCombo": "amw2rQP6r6M",
            "attributeCategoryOptions": "RkbOhHwiOgW",
            "dataValues": [
                {
                    "createdAt": "2015-10-20T12:09:19.640",
                    "updatedAt": "2015-10-20T12:09:19.640",
                    "storedBy": "system",
                    "providedElsewhere": false,
                    "dataElement": "HyJL2Lt37jN",
                    "value": "12"
                },
              ...
            ],
            "notes": []
        }
    ],
    "page": 1,
    "pageSize": 1
}
```

The `CSV` response can look like the following.

```
|event|status|program|programStage|enrollment|orgUnit|occurredAt|scheduledAt|dataElement|value|storedBy|providedElsewhere
|---|---|---|---|---|---|---|---|---|---|---|---|
|V1CerIi3sdL|COMPLETED|IpHINAT79UW|A03MvHHogjR|CCBLMntFuzb|DiszpKrYNg8|2020-02-26T23:00:00Z|2020-02-27T23:00:00Z|a3kGcGDCuk6|11|admin|false
|V1CerIi3sdL|COMPLETED|IpHINAT79UW|A03MvHHogjR|CCBLMntFuzb|DiszpKrYNg8|2020-02-26T23:00:00Z|2020-02-27T23:00:00Z|mB2QHw1tU96|[-11.566044,9.477801]|admin|false
```

#### Events single object endpoint `GET /api/tracker/events/{uid}`

The purpose of this endpoint is to retrieve one Event given its uid.

##### 请求语法 { #request-syntax } 

`GET /api/tracker/events/{uid}?fields={fields}`

|Request parameter|类型|Allowed values|描述|
|---|---|---|---|
|`uid`|`String`|`uid`|Return the Event with specified `uid`|
|`fields`|`String`| Any valid field filter (default `*,!relationships`) |Include specified sub-objects in the response| 

##### Example requests { #example-requests } 

A query for an Event:

    GET /api/tracker/events/rgWr86qs0sI

##### 回应格式 { #response-format } 

```json
{
  "event": "rgWr86qs0sI",
  "status": "ACTIVE",
  "program": "kla3mAPgvCH",
  "programStage": "aNLq9ZYoy9W",
  "enrollment": "Lo3SHzCnMSm",
  "enrollmentStatus": "ACTIVE",
  "orgUnit": "DiszpKrYNg8",
  "orgUnitName": "Ngelehun CHC",
  "relationships": [],
  "occurredAt": "2021-10-12T00:00:00.000",
  "followup": false,
  "deleted": false,
  "createdAt": "2018-10-20T12:09:19.492",
  "createdAtClient": "2017-10-20T12:09:19.492",
  "updatedAt": "2018-10-20T12:09:19.492",
  "attributeOptionCombo": "amw2rQP6r6M",
  "attributeCategoryOptions": "RkbOhHwiOgW",
  "dataValues": [
    {
      "createdAt": "2015-10-20T12:09:19.640",
      "updatedAt": "2015-10-20T12:09:19.640",
      "storedBy": "system",
      "providedElsewhere": false,
      "dataElement": "HyJL2Lt37jN",
      "value": "12"
    },
    {
      "createdAt": "2015-10-20T12:09:19.514",
      "updatedAt": "2015-10-20T12:09:19.514",
      "storedBy": "system",
      "providedElsewhere": false,
      "dataElement": "b6dOUjAarHD",
      "value": "213"
    },
    {
      "createdAt": "2015-10-20T12:09:19.626",
      "updatedAt": "2015-10-20T12:09:19.626",
      "storedBy": "system",
      "providedElsewhere": false,
      "dataElement": "UwCXONyUtGs",
      "value": "3"
    },
    {
      "createdAt": "2015-10-20T12:09:19.542",
      "updatedAt": "2015-10-20T12:09:19.542",
      "storedBy": "system",
      "providedElsewhere": false,
      "dataElement": "fqnXmRYo5Cz",
      "value": "123"
    },
    {
      "createdAt": "2015-10-20T12:09:19.614",
      "updatedAt": "2015-10-20T12:09:19.614",
      "storedBy": "system",
      "providedElsewhere": false,
      "dataElement": "Qz3kfeKgLgL",
      "value": "23"
    },
    {
      "createdAt": "2015-10-20T12:09:19.528",
      "updatedAt": "2015-10-20T12:09:19.528",
      "storedBy": "system",
      "providedElsewhere": false,
      "dataElement": "W7aC8jLASW8",
      "value": "12"
    },
    {
      "createdAt": "2015-10-20T12:09:19.599",
      "updatedAt": "2015-10-20T12:09:19.599",
      "storedBy": "system",
      "providedElsewhere": false,
      "dataElement": "HrJmqlBqTFG",
      "value": "3"
    }
  ],
  "notes": []
}
```

### Enrollments (`GET /api/tracker/enrollments`) { #enrollments-get-apitrackerenrollments } 

Two endpoints are dedicated to enrollments:

- `GET /api/tracker/enrollments`
    - retrieves enrollments matching given criteria
- `GET /api/tracker/enrollments/{id}`
    - retrieves an enrollment given the provided id

#### Enrollment Collection endpoint `GET /api/tracker/enrollments` { #enrollment-collection-endpoint-get-apitrackerenrollments } 

Returns a list of events based on filters.

|Request parameter|类型|Allowed values|描述|
|---|---|---|---|
|`orgUnit`|`String`|`uid`| Identifier of organisation unit|
|`ouMode` see [ouModes](#Request-parameters-for-Organisational-Unit-selection-mode)|`String`| `SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL| Org unit selection mode| 
|`program`|`String`|`uid`| Identifier of program|
|`programStatus`|`enum`| `ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`| Program Status |
|`followUp`|`boolean`| `true`&#124;`false` | 跟踪给定程序的实例状态。可以是 `true`&#124;`false` 或省略。|
|`updatedAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | Only enrollments updated after this date|
|`updatedWithin`|`Duration`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| Only enrollments updated since given duration |
|`enrolledAfter`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|  Only enrollments newer than this date|
|`enrolledBefore`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| Only enrollments older than this date|
|`trackedEntityType`|`String`|`uid`| Identifier of tracked entity type|
|`trackedEntity`|`String`|`uid`| Identifier of tracked entity instance|
|`enrollment`|`String`|Comma-delimited list of `uid`| Filter the result down to a limited set of IDs by using enrollment=id1;id2.|
|`includeDeleted`|`Boolean`| |  When true, soft deleted events will be included in your query result.|
|`order`|`String`|Supported fields: `assignedUser, assignedUserDisplayName, attributeOptionCombo, completedAt, completedBy, createdAt, createdAtClient, createdBy, deleted, enrolledAt, enrollment, enrollmentStatus, event, followUp, occurredAt, orgUnit, program, programStage, scheduledAt, status, storedBy, trackedEntity, updatedAt, updatedAtClient, updatedBy`.|Comma-delimited list of property name, attribute or data element UID and sort direction pairs in format `propName:sortDirection`.|

The query is case-insensitive. The following rules apply to the query parameters.

- At least one organisation unit must be specified using the `orgUnit`
  参数（一个或多个）或 *ouMode=ALL* 必须指定。

- 只能使用 *program* 和 *trackedEntity* 参数之一
  指定（零或一）。

- If *programStatus* is specified, then *program* must also be
  指定的。

- If *followUp* is specified, then *program* must also be specified.

- If *enrolledAfter* or *enrolledBefore* is specified, then *program* must also be specified.

##### Example requests { #example-requests } 

查询与特定组织单位关联的所有注册
看起来像这样：

    GET /api/tracker/enrollments?orgUnit=DiszpKrYNg8

限制对作为特定活动一部分的注册的响应
程序，您可以包含程序查询
    范围：

    GET /api/tracker/enrollments?orgUnit=O6uvpzGd5pu&ouMode=DESCENDANTS&program=ur1Edk5Oe2n

要将程序注册日期指定为查询的一部分，请执行以下操作：

    GET /api/tracker/enrollments?&orgUnit=O6uvpzGd5pu&program=ur1Edk5Oe2n
      &enrolledAfter=2013-01-01&enrolledBefore=2013-09-01

限制对特定被跟踪实体的注册的响应
您可以包含跟踪实体查询
    范围：

    GET /api/tracker/enrollments?orgUnit=O6uvpzGd5pu&ouMode=DESCENDANTS&trackedEntity=cyl5vuJ5ETQ

To constrain the response to enrollments of a specific tracked entity
you can include a tracked entity instance query parameter, in
In this case, we have restricted it to available enrollments viewable for
current
user:

    GET /api/tracker/enrollments?ouMode=ACCESSIBLE&trackedEntity=tphfdyIiVL6

##### 回应格式 { #response-format } 

The `JSON` response can look like the following.

```json
{
  "instances": [
    {
      "enrollment": "iKaBMOyq7QQ",
      "createdAt": "2017-03-28T12:28:19.812",
      "createdAtClient": "2016-03-28T12:28:19.812",
      "updatedAt": "2017-03-28T12:28:19.817",
      "trackedEntity": "PpqV8ytvW5i",
      "trackedEntityType": "nEenWmSyUEp",
      "program": "ur1Edk5Oe2n",
      "status": "ACTIVE",
      "orgUnit": "NnQpISrLYWZ",
      "orgUnitName": "Govt. Hosp. Bonthe",
      "enrolledAt": "2020-10-23T12:28:19.805",
      "occurredAt": "2020-10-07T12:28:19.805",
      "followUp": false,
      "deleted": false,
      "events": [],
      "relationships": [],
      "attributes": [],
      "notes": []
    }
  ],
  "page": 1,
  "total": 1,
  "pageSize": 5
}
```

#### Enrollments single object endpoint `GET /api/tracker/enrollments/{uid}`

The purpose of this endpoint is to retrieve one Enrollment given its uid.

##### 请求语法 { #request-syntax } 

`GET /api/tracker/enrollment/{uid}`

|Request parameter|类型|Allowed values|描述|
|---|---|---|---|
|`uid`|`String`|`uid`|Return the Enrollment with specified `uid`|
|`fields`|`String`| Any valid field filter (default `*,!relationships,!events,!attributes`) |Include specified sub-objects in the response| 

##### Example requests { #example-requests } 

A query for a Enrollment:

    GET /api/tracker/enrollments/iKaBMOyq7QQ

##### 回应格式 { #response-format } 

```json
{
  "enrollment": "iKaBMOyq7QQ",
  "createdAt": "2017-03-28T12:28:19.812",
  "createdAtClient": "2016-03-28T12:28:19.812",
  "updatedAt": "2017-03-28T12:28:19.817",
  "trackedEntity": "PpqV8ytvW5i",
  "trackedEntityType": "nEenWmSyUEp",
  "program": "ur1Edk5Oe2n",
  "status": "ACTIVE",
  "orgUnit": "NnQpISrLYWZ",
  "orgUnitName": "Govt. Hosp. Bonthe",
  "enrolledAt": "2020-10-23T12:28:19.805",
  "occurredAt": "2020-10-07T12:28:19.805",
  "followUp": false,
  "deleted": false,
  "events": [],
  "relationships": [],
  "attributes": [],
  "notes": []
}
```

### Relationships (`GET /api/tracker/relationships`) { #relationships-get-apitrackerrelationships } 

Relationships are links between two entities in the Tracker.
These entities can be tracked entity instances, enrollments, and events.

The purpose of this endpoint is to retrieve relationships between objects.

Unlike other tracked objects endpoints, relationships only expose one endpoint:

- `GET /api/tracker/relationships?[trackedEntity={trackedEntityUid}|enrollment={enrollmentUid}|event={eventUid}]&fields=[fields]`

#### Request parameters { #request-parameters } 

|Request parameter|类型|Allowed values|描述|
|---|---|---|---|
|`trackedEntity`|`String`|`uid`| Identifier of a Tracked Entity Instance|
|`enrollment`|`String`|`uid`| Identifier of an Enrollment |
|`event`|`String`|`uid`| Identifier of an Event|
|`fields`|`String`| Any valid field filter (default `relationship,relationshipType,from[trackedEntity[trackedEntity],enrollment[enrollment],event[event]],to[trackedEntity[trackedEntity],enrollment[enrollment],event[event]]`) |Include specified sub-objects in the response| 
|`order`|`String`|comma-delimited list of property name and sort direction pairs in format `propName:sortDirection`.|Supported fields: `createdAt`.|

The following rules apply to the query parameters.

- only one parameter among `trackedEntity`, `enrollment`, `event` can be passed

> **NOTE**
>
> Using tracked entity, Enrollment or Event params, will return any relationship where the trackedEntity, enrollment or
> event is part of the relationship (either from or to). As long as user has access, that is.
>

#### Example response { #example-response } 

```json
{
  "instances": [
    {
      "relationship": "SSfIicJKbh5",
      "relationshipType": "Mv8R4MPcNcX",
      "from": {
        "trackedEntity": {
          "trackedEntity": "neR4cmMY22o"
        }
      },
      "to": {
        "trackedEntity": {
          "trackedEntity": "rEYUGH97Ssd"
        }
      }
    },
    {
      "relationship": "S9kZGYPKk3x",
      "relationshipType": "Mv8R4MPcNcX",
      "from": {
        "trackedEntity": {
          "trackedEntity": "neR4cmMY22o"
        }
      },
      "to": {
        "trackedEntity": {
          "trackedEntity": "k8TU70vWtnP"
        }
      }
    }
  ],
  "page": 1,
  "pageSize": 2
}
```

## Tracker Access Control { #webapi_nti_access_control }

Tracker has a few different concepts in regards to access control, like sharing, organisation unit scopes, ownership, and access levels. The following sections provide a short introduction to the different topics.

### Metadata Sharing { #webapi_nti_metadata_sharing }


Sharing setting is standard DHIS2 functionality that applies to both Tracker and Aggregate metadata/data as well as dashboards and visualization items. At the core of sharing is the ability to define who can see/do what. In general, there are five possible sharing configurations – no access, metadata read, metadata write, data read, and data write. These access configurations can be granted at user and/or user group level (for more flexibility). With a focus on Tracker, the following metadata and their sharing setting is of particular importance: Data Element, Category Option, Program, Program Stage, Tracked Entity Type, Tracked Entity Attribute as well as Tracker related Dashboards and Dashboard Items.

How sharing setting works is straightforward – the settings are enforced during Tracker data import/export processes. To read value, one needs to have data read access. If a user is expected to modify data, he/she needs to have data write access. Similarly, if a user is expected to modify metadata, it is essential to grant metadata write access.

One critical point with Tracker data is the need to have a holistic approach. For example, a user won’t be able to see the Data Element value by having read access to just the Data Element. The user needs to have data read to access the parent Program Stage and Program where this Data Element belongs. It is the same with the category option combination. In Tracker, the Event is related to AttributeOptionCombo, which is made up of a combination of Category Options. Therefore, for a user to read data of an Event, he/she needs to have data read access to all Category Options and corresponding Categories that constitute the AttributeOptionCombo of the Event in question. If a user lacks access to just one Category Option or Category, then the user has no access to the entire Event.

When it comes to accessing Enrollment data, it is essential to have access to the Tracked Entity first. Access to a Tracked Entity is controlled through sharing setting of Program, Tracked Entity Type, and Tracked Entity Attribute. Once Enrollment is accessed, it is possible to access Event data, again depending on Program Stage and Data element sharing setting.

Another vital point to consider is how to map out access to different Program Stages of a Program. Sometimes we could be in a situation where we need to grant access to a specific stage – for example, “Lab Result” – to a specific group of users (Lab Technicians). In this situation, we can provide data write access to "Lab Result" stage, probably data read to one or more stages just in case we want Lab Technicians to read other medical results or no access if we think it not necessary for the Lab Technicians to see data other than lab related.

In summary, DHIS2 has a fine-grained sharing setting that we can use to implement access control mechanisms both at the data and metadata level. These sharing settings can be applied directly at the user level or user group level. How exactly to apply a sharing setting depends on the use-case at hand.

For more detailed information about data sharing, check out [Data sharing](https://docs.dhis2.org/en/use/user-guides/dhis-core-version-master/configuring-the-system/about-sharing-of-objects.html#data-sharing-for-event-based-programs).

### Organisation Unit Scopes { #webapi_nti_ou_scope }

Organisation units are one of the most fundamental objects in DHIS2. They define a universe under which a user is allowed to record and/or read data. There are three types of organisation units that can be assigned to a user. These are data capture, data view, and tracker search. As the name implies, these organisation units define a scope under which a user is allowed to conduct the respective operations.

However, to further fine-tune the scope, DHIS2 Tracker introduces a concept that we call **OrganisationUnitSelectionMode**. Such a mode is often used at the time exporting tracker objects. For example, given that a user has a particular tracker search scope, does it mean that we have to use this scope every time a user tries to search for a tracker, Enrollment, or Event object? Or is the user interested in limiting the searching just to the selected org unit, or the entire capture org unit scope, and so on. 

Users can do the fine-tuning by passing a specific value of ouMode in their API request:

*api/tracker/trackedEntities?orgUnit=UID&ouMode=specific_organisation_unit_selection_mode*

Currently, there are six selection modes available: *SELECTED, CHILDREN, DESCENDANTS, CAPTURE, ACCESSIBLE, and ALL*.

1. **SELECTED**: as the name implies, all operations intended by the requesting API narrow down to the selected organisation unit.
2. **CHILDREN**: under this mode, the organisation unit scope will be constructed using the selected organisation unit and its immediate children. 
3. **DESCENDANTS**: here, the selected organisation unit and everything underneath it, not just the immediate children, constitute the data operation universe.
4. **CAPTURE**: as the name implies, organisation units assigned as the user's data capture constitute the universe. Note that, of the three organisation units that can be assigned to a user data capture is the mandatory one. If a user does not have data view and tracker search organisation units, the system will fall back to data capture. This way, we are always sure that a user has at least one universe.
5. **ACCESSIBLE**: technically, this is the same scope as the user's tracker search organisation units.
6. **ALL**: the name ALL makes perfect sense if we are dealing with a superuser. For super users, this scope means the entire organisation unit available in the system. However, for non-superusers, ALL boils down to ACCESSIBLE organisation units.

It makes little sense to pass these modes at the time of tracker import operations. Because when writing tracker data, each of the objects needs to have a specific organisation unit attached to them. The system will then ensure if each of the mentioned organisation units falls under the CAPTURE scope. If not, the system will simply reject the write operation.

Note that there is 4 type of organisation unit associations relevant for Tracker objects. A TrackedEntity has an organisation unit, commonly referred to as the Registration Organisation unit. Enrollments have an organisation unit associated with them. Events also have an organisation unit associated with them. There is also an Owner organisation unit for a TrackedEntity-Program combination. 

When fetching Tracker objects, depending on the context, the organisation unit scope is applied to one of the above four organisation unit associations. 

For example, when retrieving TrackedEntities without the context of a program, the organisation unit scope is applied to the registration organisation unit of the TrackedEntity. Whereas, when retrieving TrackedEntities, including specific program data, the organisation unit scope is applied to the Owner organisation unit. 

  * **Explain how they relate to ownership - Link to Program Ownership**

### Tracker Program Ownership { #webapi_nti_ownership }

A new concept called Tracker Ownership is introduced from 2.30. This introduces a new organisation unit association for a TrackedEntity - Program combination.
We call this the Owner (or Owning) Organisation unit of a TrackedEntity in
the context of a Program. The Owner organisation unit is used to decide access privileges when reading and writing tracker data related to a program.
This, along with the Program's [Access Level](#webapi_nti_access_level) configuration, decides the access behavior for Program-related data (Enrollments and Events). 
A user can access a TrackedEntity's Program data if the corresponding Owner OrganisationUnit for that TrackedEntity-Program combination falls under the user's organisation unit scope (Search/Capture). For Programs that are configured with access level  *OPEN* or *AUDITED* , the Owner OrganisationUnit has to be in the user's search scope.
For Programs that are configured with access level  *PROTECTED* or *CLOSED* , the Owner OrganisationUnit has to be in the user's capture scope to be able to access the corresponding program data for the specific tracked entity.

#### 跟踪器所有权优先：打破常规 { #webapi_nti_tracker_ownership_override }

It is possible to temporarily override this ownership privilege for a
program that is configured with an access level of *PROTECTED*. Any user
will be able to temporarily gain access to the Program related data if
the user specifies a reason for accessing the TrackedEntity-Program
data. This act of temporarily gaining access is termed as *breaking the
glass*. Currently, temporary access is granted for 3 hours. DHIS2
audits breaking the glass along with the reason specified by the user.
It is not possible to gain temporary access to a program that has been
configured with an access level of *CLOSED*. To break the glass for a
TrackedEntity-Program combination, the following POST request can be used:

    / api / 33 / tracker / ownership / override？trackedEntityInstance = DiszpKrYNg8
      ＆program = eBAyeGv0exc＆reason =耐心+显示+急诊+急诊

#### 跟踪器所有权转移 { #webapi_nti_tracker_ownership_transfer }

It is possible to transfer the ownership of a TrackedEntity-Program
from one organisation unit to another. This will be useful in case of patient
referrals or migrations. Only a user who has Ownership access (or temporary access by breaking the glass) can transfer the ownership. To transfer ownership of a TrackedEntity-Program to another organisation unit, the following PUT request can be used:

    / api / 33 / tracker /所有权/转让？trackedEntityInstance = DiszpKrYNg8
      ＆program = eBAyeGv0exc＆ou = EJNxP3WreNP


### Access Level { #webapi_nti_access_level }

DHIS2 treats Tracker data with an extra level of protection. In addition to the standard feature of metadata and data protection through sharing settings, Tracker data are shielded with additional access level protection mechanisms.  Currently, there are four access levels that can be configured for a Program: Open, Audited, Protected, and Closed.

These access levels are only triggered when users try to interact with program data, namely Enrollments and Events data. The different Access Level configuration for Program is a degree of openness (or closedness) of program data. Note that all other sharing settings are still respected, and the access level is only an additional layer of access control. Here is a short description of the four access levels that can be configured for a Program. 

1. Open: This access level is the least restricted among the access levels. Data inside an OPEN program can be accessed and modified by users if the Owner organisation unit falls under the user's search scope.  With this access level, accessing and modifying data outside the capture scope is possible without any justification or consequence. 
2.  Audited: This is the same as the Open access level. The difference here is that the system will automatically add an audit log entry on the data being accessed by the specific user.
3.  Protected: This access level is slightly more restricted. Data inside a PROTECTED program can only be accessed by users if the Owner organisation unit falls under the user's capture scope. However, a user who only has the Owner organisation unit in the search scope can gain temporary ownership by [breaking the glass](#webapi_nti_tracker_ownership_override). The user has to provide a justification of why they are accessing the data at hand. The system will then put a log of both the justification and access audit and provide temporary access for 3 hours to the user. Note that when breaking the glass, the Owner Organisation Unit remains unchanged, and only the user who has broken the glass gains temporary access. 
4.  Closed: This is the most restricted access level. Data recorded under programs configured with access level CLOSED will not be accessible if the Owner Organisation Unit does not fall within the user's capture scope. It is also not possible to break the glass or gain temporary ownership in this configuration. Note that it is still possible to transfer the ownership to another organisation unit. Only a user who has access to the data can transfer the ownership of a TrackedEntity-Program combination to another Organisation Unit. If ownership is transferred, the Owner Organisation Unit is updated.

