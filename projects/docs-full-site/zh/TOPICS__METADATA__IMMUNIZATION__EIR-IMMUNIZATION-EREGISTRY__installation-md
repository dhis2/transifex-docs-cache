---
edit_url: "https://github.com/dhis2-metadata/IMM_EIR/blob/master/docs/imm_eir-installation.md"
revision_date: '2022-11-07'
tags:
- 元数据
---

# 电子免疫登记安装指南{ #imm-eir-installation }

您将必须完全遵循所安装的每个单独软件包的说明。

## 安装 { #installation } 

模块的安装包括以下几个步骤：

1. [准备]（＃preparing-the-metadata-file）具有DHIS2元数据的元数据文件。
2. [导入](#generic-metadata) 将元数据文件导入 DHIS2。
3. [配置]（＃additional-configuration）导入的元数据。
4. 导入后[Adapting]（＃adapting-the-tracker-program）程序

建议在开始DHIS2中的安装和配置过程之前先通读每个部分。根据要导入到新的DHIS2实例还是具有元数据的DHIS2实例，已识别出不适用的节。在重复或转移到DHIS2的生产实例之前，应在测试/分阶段环境中测试本文档中概述的过程。

## 要求 { #requirements } 

为了安装该模块，需要DHIS2上的管理员用户帐户。在DHIS2的生产实例上执行此文档中概述的过程之前，应在测试/分阶段环境中进行测试。

应非常小心地确保服务器本身和 DHIS2 应用程序的安全，以限制对所收集数据的访问。有关保护 DHIS2 系统安全的详细信息超出了本文档的范围，我们请参阅 [DHIS2 文档](https://docs.dhis2.org/en/home.html)。

## 准备元数据文件 { #preparing-the-metadata-file } 

**注意：** 如果您要在 DHIS2 的新实例上安装该软件包，您可以跳过“准备元数据文件”部分，并立即转到“[将元数据文件导入 DHIS2](#generic-元数据）”。

尽管并非总是必要，但在将元数据文件导入DHIS2之前对其进行某些修改通常可能是有利的。

### 默认数据维度 { #default-data-dimension } 

在早期版本的DHIS2中，默认数据维的UID是自动生成的。因此，尽管所有DHIS2实例都具有默认类别选项，数据元素类别，类别组合和类别选项组合，但这些默认的UID可以不同。 DHIS2的更高版本具有用于默认维度的硬编码UID，并且这些UID在配置包中使用。

为了避免导入元数据时发生冲突，建议搜索并替换整个 .json 文件中所有出现的默认对象，将 .json 文件的 UID 替换为要导入该文件的数据库的 UID。表 1 显示了应替换的 UID，以及用于识别现有 UID 的 API 端点。
现有的 UID。

| 目的                      | 用户标识         | API端点                                             |
|-----------------------------|-------------|----------------------------------------------------------|
| 类别                    | GLevLNI9wkl | `../api/categories.json?filter=name:eq:default`          |
| 类别选项             | xYerKDKCefk | `../api/categoryOptions.json?filter=name:eq:default`     |
| 品类组合        | bjDvmb4bfuf | `../api/categoryCombos.json?filter=name:eq:default`      |
| 类别选项组合 | HllvX50cXC0 | `../api/categoryOptionCombos.json?filter=name:eq:default`|

例如，将配置包导入[https://play.dhis2.org/demo](https://play.dhis2.org/demo)，则可以通过[https://play.dhis2.org/demo]识别默认类别选项组合的UID ://play.dhis2.org/demo/api/categoryOptionCombos.json?filter=name:eq:default](https://play.dhis2.org/demo/api/categoryOptionCombos.json?filter=name:eq:默认）为 bRowv6yZOF2。

然后，您可以在 .json 文件中搜索所有出现的 HllvX50cXC0 并将其替换为 bRowv6yZOF2，因为这是您要导入的系统中的默认 ID。请注意，此搜索和替换操作必须使用纯文本编辑器完成，而不是使用 Microsoft Word 等文字处理程序。

### 指标类型 { #indicator-types } 

指标类型是另一种可能导致导入冲突的对象，因为在不同的DHIS2数据库中使用了某些名称（例如“百分比”）。由于指标类型仅由其因子以及是否为无分母的简单数字定义，因此它们是明确的，可以通过搜索和替换UID进行替换。这样可以避免潜在的导入冲突，并避免创建重复的指标类型。表2显示了可以替换的UID以及用于标识现有UID的API端点

| 目的     | 用户标识         | API端点                                                             |
|------------|-------------|--------------------------------------------------------------------------|
| 百分比 | hmSnCXmLYwt | `../api/indicatorTypes.json?filter=number:eq:false&filter=factor:eq:100` |

### 追踪实体类型 { #tracked-entity-type } 

像指示器类型一样，您的DHIS2数据库中可能已经存在跟踪的实体类型。对跟踪实体类型的引用应该更改以反映系统中的内容，因此您不会创建重复项。表3显示了可以替换的UID以及用于标识现有UID的API端点

| 目的 | 用户标识         | API端点                                           |
|--------|-------------|--------------------------------------------------------|
| 人 | MCPQUTHX1Ze | `../api/trackedEntityTypes.json?filter=name:eq:Person` |

### 使用根组织单元 UID 的可视化 { #visualizations-using-root-organisation-unit-uid }

分配给特定组织单位级别或组织单位组的可视化、事件报告、报告表和地图都有一个对根（第 1 级）组织单位的引用。此类对象（如果存在于元数据文件中）包含一个占位符 `<OU_ROOT_UID>`。使用 .json 文件编辑器中的搜索功能可以识别该占位符，并将其替换为目标实例中 1 级组织单位的 UID。

### 导入元数据 { #importing-metadata } 

.json 元数据文件通过 DHIS2 的 [导入/导出](#import_export) 应用程序导入。建议在尝试实际导入元数据之前使用“试运行”功能来识别问题。如果“试运行”报告任何问题或冲突，请参阅下面的[导入冲突](#handling-import-conflicts)部分。
如果“试运行”/“验证”导入工作正常且没有错误，请尝试导入元数据。如果导入成功且没有任何错误，您可以继续[配置](#additional-configuration)模块。在某些情况下，导入冲突或问题在“试运行”期间不会显示，但会在尝试实际导入时出现。在这种情况下，导入摘要将列出需要解决的所有错误。

### 通用元数据 { #generic-metadata }

有关通用元数据概述（多个包使用相同的元数据对象），请参阅各个包的安装附件。

### 处理导入冲突 { #handling-import-conflicts } 

注意：如果您要导入到新的 DHIS2 实例中，则不必担心导入冲突，因为您要导入的数据库中没有任何内容会发生冲突。按照说明导入元数据，然后请继续进行[“其他配置”](#additional-configuration)部分。

可能会发生许多不同的冲突，尽管最常见的是配置包中有目标数据库中已经存在名称，简称和/或代码的元数据对象。对于这些问题，有两种替代解决方案，具有不同的优缺点。哪一个更合适将取决于例如发生冲突的对象的类型。

#### 备选方案1 { #alternative-1 } 

重命名DHIS2数据库中存在冲突的现有对象。这种方法的优点是无需修改.json文件，因为更改是通过DHIS2的用户界面完成的。这很可能不太容易出错。这也意味着配置包将保留原样，例如在使用基于配置包的培训材料和文档时，这可能是一个优势。

#### 备选方案2 { #alternative-2 } 

重命名.json文件中存在冲突的对象。这种方法的优点是现有的DHIS2元数据保持不变。当存在培训材料或文档（例如链接到所讨论对象的数据字典的SOP）时，这可能是一个因素，并且不存在通过修改用户熟悉的元数据而使用户感到困惑的风险。

请注意，对于备选项1和2，修改可以简单到在名称中添加一个小的前缀/后缀，以最大程度地减少混乱的风险。

#### 备选3 { #alternative-3 } 

第三种也是更复杂的方法是修改.json文件以重新使用现有的元数据。例如，在某个概念的某个选项集已经存在的情况下（例如“性别”），可以从.json文件中删除该选项集，并且对其UID的所有引用都将替换为数据库中已经存在的相应选项集。这样做的最大优点（不限于直接导入冲突的情况）是避免在数据库中创建重复的元数据。执行这种类型的修改时，需要考虑一些关键因素：

* 它需要有关DHIS2详细元数据结构的专业知识
* 该方法不适用于所有类型的对象。特别地，某些类型的对象具有依赖关系，这种依赖关系以这种方式难以解决，例如与分解有关。
* 将来对配置包的更新将很复杂。

### 附加配置 { #additional-configuration } 

成功导入所有元数据后，需要执行一些步骤，模块才能正常运行。

#### 分享中 { #sharing } 

首先，您将必须使用DHIS2的*共享*功能来配置哪些用户（用户组）应查看与程序关联的元数据和数据，以及谁可以在程序中注册/输入数据。默认情况下，已为以下配置共享：

* 追踪实体类型
* 程序
* 计划阶段
* 仪表板

一个元数据包通常包含多个用户组：

* EIR-- 免疫接种
* EIR-- 免疫管理
* EIR - 免疫数据采集

默认情况下，将以下内容分配给这些用户组

| 目的              | 用户组                        |                                             |                                                |
|---------------------|------------------------------------|---------------------------------------------|------------------------------------------------|
|                     | EIR-- 免疫接种                         | EIR-- 免疫管理                                   | EIR - 免疫数据采集                               |
| 追踪实体类型 | 元数据：可以查看 <br> 数据：可以查看 | 元数据：可以编辑和查看<br>数据：可以查看 | 元数据：可以查看<br>数据：可以捕获和查看 |
| 程序             | 元数据：可以查看 <br> 数据：可以查看 | 元数据：可以编辑和查看<br>数据：可以查看 | 元数据：可以查看<br>数据：可以捕获和查看 |
| 计划阶段      | 元数据：可以查看 <br> 数据：可以查看 | 元数据：可以编辑和查看<br>数据：可以查看 | 元数据：可以查看<br>数据：可以捕获和查看 |
| 仪表板          | 元数据：可以查看 <br> 数据：可以查看 | 元数据：可以编辑和查看<br>数据：可以查看 | 元数据：可以查看 <br> 数据：可以查看             |

有关用户组的信息请参阅单独包安装附件。

您需要根据用户在系统中的角色将他们分配到适当的用户组。您可能希望根据您的设置启用包中其他对象的共享。有关配置共享的更多信息，请参阅 [DHIS2 文档](#sharing)。

重要提示：存在一个影响版本 2.33 和 2.34 的错误，即使选择 MERGE 作为导入参数，该错误也会在导入同一对象后覆盖对象的共享属性。这对于跟踪实体类型 - 人员（UID：MCPQUTHX1Ze）对象尤其重要，该对象通常与不同包的用户组共享。

如果您的 TET Person 已与包中的对象匹配，并且您希望避免覆盖数据库中该对象的当前共享属性，您可以按照以下步骤操作：

* 从包文件中删除此 TET
* 导入包
* 使用上表更新此 TET 的共享属性。

### 用户角色 { #user-roles } 

用户将需要用户角色才能参与DHIS2中的各种应用程序。建议以下最低角色：

1. 跟踪器数据分析：可以查看事件分析并访问仪表板，事件报告，事件可视化器，数据可视化器，数据透视表，报告和地图。
2. 跟踪器数据捕获：可以添加数据值，更新跟踪的实体，跨组织单位搜索跟踪的实体以及访问跟踪器捕获

有关配置用户角色的更多信息，请参阅 [DHIS2 文档](#manage_user_role_group)。

### 组织单位 { #organisation-units } 

您必须将程序分配给自己的层次结构中的组织单位，以便能够在跟踪器捕获中查看程序。

### 重复的元数据 { #duplicated-metadata } 

**注意：** 本节仅适用于您要导入到其中已存在元数据的 DHIS2 数据库的情况。如果您使用新的 DHIS2 实例，请跳过本节并转到“[调整跟踪器程序](#adapting-the-tracker-program)”。

即使成功导入了元数据而没有任何导入冲突，元数据中也可能存在重复项-数据元素，跟踪的实体属性或已存在的选项集。正如上面有关解决冲突的部分所述，要牢记的一个重要问题是，在DHIS2中更改元数据的决定还需要考虑与现有元数据有不同关联的其他文档和资源。 ，以及通过配置包导入的元数据。因此，解决重复项不仅是“清理数据库”的问题，而且还要确保做到这一点，例如，不破坏与其他系统的集成，使用培训材料的可能性，破坏SOP等。这将非常很大程度上取决于上下文。

要记住的一件重要事情是 DHIS2 拥有可以隐藏元数据中潜在重复的一些复杂性的工具。例如，如果存在重复的选项集，可以通过[共享](#sharing) 对用户组隐藏它们。

### 调整跟踪器程序 { #adapting-the-tracker-program } 

导入程序后，您可能需要对程序进行某些修改。 *可以*进行的本地调整示例包括：

* 向表单添加其他变量。
* 根据国家惯例修改数据元素/选项名称。
* 向变量和/或数据输入表单添加翻译。
* 根据本地案例定义修改程序指标

但是，如果您决定更改或删除任何包含的表格/元数据，强烈建议格外小心。修改可能会破坏功能，例如程序规则和程序指示器。

