---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.37/src/developer/web-api/visualizations.md"
revision_date: '2021-10-14'
tags:
- DHIS core verze 2.37
- Vývoj
---

# Vizualizace { #visualizations } 
## Ovládací panel { #webapi_dashboard } 

The dashboard is designed to give you an overview of multiple analytical
items like maps, charts, pivot tables and reports which together can
provide a comprehensive overview of your data. Dashboards are available
in the Web API through the *dashboards* resource. A dashboard contains a
list of dashboard *items*. An item can represent a single resource, like
a chart, map or report table, or represent a list of links to analytical
resources, like reports, resources, tabular reports and users. A
dashboard item can contain up to eight links. Typically, a dashboard
client could choose to visualize the single-object items directly in a
user interface, while rendering the multi-object items as clickable
links.

    /api/dashboards

### Procházení ovládacích panelů { #webapi_browsing_dashboards } 

To get a list of your dashboards with basic information including
identifier, name and link in JSON format you can make a *GET* request to
the following URL:

    /api/dashboards.json

The dashboards resource will provide a list of dashboards. Remember that
the dashboard object is shared so the list will be affected by the
currently authenticated user. You can retrieve more information about a
specific dashboard by following its link, similar to this:

    /api/dashboards/vQFhmLJU5sK.json

A dashboard contains information like name and creation date and an
array of dashboard items. The response in JSON format will look similar
to this response (certain information has been removed for the sake of
brevity).

```json
{
  "lastUpdated" : "2013-10-15T18:17:34.084+0000",
  "id": "vQFhmLJU5sK",
  "created": "2013-09-08T20:55:58.060+0000",
  "name": "Mother and Child Health",
  "href": "https://play.dhis2.org/demo/api/dashboards/vQFhmLJU5sK",
  "publicAccess": "--------",
  "restrictFilters": false,
  "externalAccess": false,
  "itemCount": 17,
  "displayName": "Mother and Child Health",
  "access": {
    "update": true,
    "externalize": true,
    "delete": true,
    "write": true,
    "read": true,
    "manage": true
  },
  "user": {
    "id": "xE7jOejl9FI",
    "name": "John Traore",
    "created": "2013-04-18T15:15:08.407+0000",
    "lastUpdated": "2014-12-05T03:50:04.148+0000",
    "href": "https://play.dhis2.org/demo/api/users/xE7jOejl9FI"
  },
  "dashboardItems": [{
    "id": "bu1IAnPFa9H",
    "created": "2013-09-09T12:12:58.095+0000",
    "lastUpdated": "2013-09-09T12:12:58.095+0000"
    }, {
    "id": "ppFEJmWWDa1",
    "created": "2013-09-10T13:57:02.480+0000",
    "lastUpdated": "2013-09-10T13:57:02.480+0000"
  }],
  "layout": {
    "spacing": {
      "column": 5,
      "row": 5
    },
    "columns": [{
      "index": 0,
      "span": 2
    }, {
      "index": 1,
      "span": 1
    }]
  },
  "userGroupAccesses": []
}
```

A more tailored response can be obtained by specifying specific fields
in the request. An example is provided below, which would return more
detailed information about each object on a users dashboard.

    /api/dashboards/vQFhmLJU5sK/?fields=:all,dashboardItems[:all]

### Hledání ovládacích panelů { #webapi_searching_dasboards } 

When a user is building a dashboard it is convenient
to be able to search for various analytical resources using the
*/dashboards/q* resource. This resource lets you search for matches on
the name property of the following objects: visualizations, maps,
users, reports and resources. You can do a search by making a *GET*
request on the following resource URL pattern, where my-query should be
replaced by the preferred search query:

    /api/dashboards/q/my-query.json

Například tento dotaz:

    /api/dashboards/q/ma?count=6&maxCount=20&max=REPORT&max=MAP

Vyhledá následující:

* Název analytického objektu obsahuje řetězec „ma“
* Vraťte až 6 z každého typu
* U typů REPORT a MAP vrátí až 20 položek



Tabulka: dashboards/parametry dotazu q

| Parametr dotazu | Popis | Typ | Výchozí |
|---|---|---|---|
| počet | Počet položek každého typu, které se mají vrátit | Kladné celé číslo | 6 |
| maxCount | Počet položek maximálních typů, které se mají vrátit | Kladné celé číslo | 25 |
| max | Typ, pro který se má vrátit maxCount | Řetězec [MAP&#124;USER&#124;REPORT&#124;RESOURCE&#124;VISUALIZATION] | Nedostupné |

Podporovány jsou formáty odpovědí JSON a XML. Odpověď ve formátu JSON bude obsahovat odkazy na odpovídající zdroje a počty nalezených shod celkem a pro každý typ zdroje. Bude vypadat podobně:

```json
{
  "visualizations": [{
    "name": "ANC: ANC 3 Visits Cumulative Numbers",
    "id": "arf9OiyV7df",
    "type": "LINE"
  }, {
    "name": "ANC: 1st and 2rd trends Monthly",
    "id": "jkf6OiyV7el",
    "type": "PIVOT_TABLE"
  }],
  "maps": [{
    "name": "ANC: 1st visit at facility (fixed) 2013",
    "id": "YOEGBvxjAY0"
  }, {
    "name": "ANC: 3rd visit coverage 2014 by district",
    "id": "ytkZY3ChM6J"
  }],
  "reports": [{
    "name": "ANC: 1st Visit Cumulative Chart",
    "id": "Kvg1AhYHM8Q"
  }, {
    "name": "ANC: Coverages This Year",
    "id": "qYVNH1wkZR0"
  }],
  "searchCount": 8,
  "visualizationCount": 3,
  "mapCount": 2,
  "reportCount": 2,
  "userCount": 0,
  "patientTabularReportCount": 0,
  "resourceCount": 0
}
```

### Vytváření, aktualizace a odstraňování ovládacích panelů { #webapi_creating_updating_removing_dashboards } 

Creating, updating and deleting dashboards follow standard REST
semantics. In order to create a new dashboard you can make a *POST*
request to the `/api/dashboards` resource. From a consumer perspective
it might be convenient to first create a dashboard and later add items
to it. JSON and XML formats are supported for the request payload. To
create a dashboard with the name "My dashboard" you can use a payload in
JSON like this:

    {
      "name": "Můj ovládací panel"
    }

To update, e.g. rename, a dashboard, you can make a *PUT* request with a
similar request payload the same api/dashboards resource.

To remove a dashboard, you can make a *DELETE* request to the specific
dashboard resource similar to this:

    /api/dashboards/vQFhmLJU5sK

### Přidávání, přesouvání a odebírání položek a obsahu ovládacích panelů { #webapi_adding_moving_removing_dashboard_items } 

In order to add dashboard items a consumer can use the
`/api/dashboards/<dashboard-id>/items/content` resource, where
<dashboard-id\> should be replaced by the relevant dashboard
identifier. The request must use the *POST* method. The URL syntax and
parameters are described in detail in the following table.



Tabulka: Parametry obsahu položek

| Parametr dotazu | Popis | Možnosti |
|---|---|---|
| typ | Typ zdroje, který má být reprezentován položkou ovládacího panelu | vizualizace &#124; mapa &#124; reportTable &#124; uživatelé &#124; zprávy &#124; zdroje &#124; patientTabularReports &#124; aplikace |
| id | Identifikátor zdroje, který má být reprezentován položkou ovládacího panelu | Identifikátor zdroje |

A *POST* request URL for adding a visualization to a specific dashboard could look like this, where the last id query parameter value is the chart resource identifier:

    /api/dashboards/vQFhmLJU5sK/items/content?type=visualization&id=LW0O27b7TdD

When adding resource of type map, visualization and app, the API
will create and add a new item to the dashboard. When adding a resource
of type users, reports and resources, the API will try to
add the resource to an existing dashboard item of the same type. If no
item of same type or no item of same type with less than eight resources
associated with it exists, the API will create a new dashboard item and
add the resource to it.

In order to move a dashboard item to a new position within the list of
items in a dashboard, a consumer can make a *POST* request to the
following resource URL, where `<dashboard-id>` should be replaced by the
identifier of the dashboard, `<item-id>` should be replaced by the
identifier of the dashboard item and `<index>` should be replaced by the
new position of the item in the dashboard, where the index is
zero-based:

    /api/dashboards/<dashboard-id>/items/<item-id>/position/<index>

To remove a dashboard item completely from a specific dashboard a
consumer can make a *DELETE* request to the below resource URL, where
`<dashboard-id>` should be replaced by the identifier of the dashboard
and `<item-id>` should be replaced by the identifier of the dashboard
item. The dashboard item identifiers can be retrieved through a GET
request to the dashboard resource URL.

    /api/dashboards/<dashboard-id>/items/<item-id>

To remove a specific content resource within a dashboard item a consumer
can make a *DELETE* request to the below resource URL, where
`<content-resource-id>` should be replaced by the identifier of a
resource associated with the dashboard item; e.g. the identifier of a
report or a user. For instance, this can be used to remove a single
report from a dashboard item of type reports, as opposed to removing the
dashboard item completely:

    /api/dashboards/<dashboard-id>/items/<item-id>/content/<content-resource-id>

### Defining a dashboard layout { #webapi_dasboard_layout } 

Pro každý ovládací panel můžete definovat a uložit rozvržení. Následující objekt je zodpovědný za udržení tohoto nastavení.

    {
      "layout": {
        "spacing": {
          "column": 5,
          "row": 5
        },
        "columns": [{
          "index": 0,
          "span": 2
        }, {
          "index": 1,
          "span": 1
        }]
      }
    }

Definice rozvržení bude použita pro všechny položky ovládacího panelu související s daným řídicím panelem, přičemž budou respektovány atributy rozvržení, jako jsou mezery, sloupce, rozpětí a tak dále. Níže naleznete stručný popis každého atributu.

Tabulka: Atributy rozvržení

| Atribut | Popis | Typ |
|---|---|---|
| layout | Toto je kořenový objekt | Objekt |
| spacing | Definuje mezery pro konkrétní součásti rozvržení. V současné době podporuje sloupce a řádky. | Objekt |
| sloupce | Ukládá specifické parametry související se sloupci (v tuto chvíli index a rozsah) | Pole objektů |

## Vizualizace { #webapi_visualization } 

Vizualizace API je navržena tak, aby pomohla klientům komunikovat s grafy a kontingenčními / reportovacími tabulkami. Koncové body tohoto API používá aplikace Vizualizace dat, která umožňuje vytváření, konfiguraci a správu grafů a kontingenčních tabulek na základě definic klienta. Hlavní myšlenkou je umožnit klientům a uživatelům mít jedinečné a centralizované API poskytující všechny typy grafů a kontingenčních tabulek, jakož i specifické parametry a konfiguraci pro každý typ vizualizace.

Toto rozhraní API bylo zavedeno s cílem sjednotit rozhraní API `charts` a `reportTables` a zcela je nahradit rozhraním `vizualizations` API.

A Visualization object is composed of many attributes (some of them related to charts and others related to pivot tables), but the most important ones responsible to reflect the core information of the object are: *"id", "name", "type", "dataDimensionItems", "columns", "rows" and "filters".*

The root endpoint of the API is `/api/visualizations`, and the list of current attributes and elements are described in the table below.



Tabulka: Atributy vizualizace

| Pole | Popis |
|---|---|
| id | Jedinečný identifikátor. |
| code | Vlastní kód k identifikaci vizualizace. |
| název | Název vizualizace |
| typ | Typ vizualizace. Platné typy jsou: COLUMN, STACKED_COLUMN, BAR, STACKED_BAR, LINE, AREA, PIE, RADAR, GAUGE, YEAR_OVER_YEAR_LINE YEAR_OVER_YEAR_COLUMN, SINGLE_VALUE, PIVOT_TABLE. |
| title | Vlastní nadpis. |
| subtitle | Vlastní podnadpis. |
| popis | Definuje vlastní popis pro vizualizaci. |
| created | Datum/čas vytvoření vizualizace. |
| startDate | Počáteční datum použité při filtrování. |
| endDate | Datum ukončení použité během filtrování. |
| sortOrder | Pořadí řazení této vizualizace. Celočíselná hodnota. |
| user | Objekt představující tvůrce vizualizace. |
| publicAccess | Nastavuje oprávnění pro veřejný přístup. |
| displayDensity | Hustota zobrazení textu. |
| fontSize | Velikost písma textu. |
| fontStyle | Vlastní styly písma pro: visualizationTitle, visualizationSubtitle, horizontalAxisTitle, verticalAxisTitle, targetLineLabel, baseLineLabel, seriesAxisLabel, categoryAxisLabel, legenda. |
| relativePeriods | Objekt představující relativní období použitá v analytickém dotazu. |
| legendSet | Objekt představující definice pro legendu. |
| legendDisplayStyle | Styl zobrazení legendy. Může to být: FILL nebo TEXT. |
| legendDisplayStrategy | Styl zobrazení legendy. Může to být: FIXED nebo BY_DATA_ITEM. |
| aggregationType | Určuje, jak se agregují hodnoty v kontingenční tabulce. Platné možnosti: SUM, AVERAGE, AVERAGE_SUM_ORG_UNIT, LAST, LAST_AVERAGE_ORG_UNIT, FIRST, FIRST_AVERAGE_ORG_UNIT, COUNT, STDDEV, VARIANCE, MIN, MAX, NONE, CUSTOM nebo DEFAULT. |
| regressionType | Platný typ regrese: NONE, LINEAR, POLYNOMIAL nebo LOESS. |
| targetLineValue | Cílová čára grafu. Přijímá typ Double. |
| targetLineLabel | Štítek cílové čáry grafu. |
| rangeAxisLabel | Popis / název svislé osy (y) grafu. |
| domainAxisLabel | Popis / název vodorovné osy (x) grafu. |
| rangeAxisMaxValue | Maximální hodnota osy grafu. Hodnoty mimo rozsah se nezobrazí. |
| rangeAxisMinValue | Minimální hodnota osy grafu. Hodnoty mimo rozsah se nezobrazí. |
| rangeAxisSteps | Počet kroků osy mezi minimální a maximální hodnotou. |
| rangeAxisDecimals | Počet desetinných míst pro hodnoty os. |
| baseLineValue | Základní hodnota grafu. |
| baseLineLabel | Popisek základní linie grafu. |
| digitGroupSeparator | Oddělovač skupiny číslic. Platné hodnoty: COMMA, SPACE nebo NONE. |
| topLimit | Horní limit nastavený pro kontingenční tabulku. |
| measureCriteria | Popisuje kritéria použitá pro toto opatření. |
| percentStackedValues | Používá složené hodnoty nebo ne. Pravděpodobnější použití pro grafiku / grafy. Booleovská hodnota. |
| noSpaceBetweenColumns | Zobrazit / skrýt mezeru mezi sloupci. Booleovská hodnota. |
| regression | Označuje, zda vizualizace obsahuje regresní sloupce. S větší pravděpodobností bude použitelný pro Pivot / Report. Booleovská hodnota. |
| externalAccess | Označuje, zda je vizualizace dostupná jako externí pouze pro čtení. Platí pouze v případě, že není přihlášen žádný uživatel. Booleovská hodnota. |
| userOrganisationUnit | Označuje, zda má uživatel organizační jednotku. Booleovská hodnota. |
| userOrganisationUnitChildren | Označuje, zda má uživatel podřízenou organizační jednotku. Booleovská hodnota. |
| userOrganisationUnitGrandChildren | Označuje, zda má uživatel velkou podřízenou organizační jednotku . Booleovská hodnota. |
| reportingParams | Objekt používaný k definování booleovských atributů souvisejících s vytvářením přehledů. |
| rowTotals | Zobrazí (nebo ne) součty řádků. Booleovská hodnota. |
| colTotals | Zobrazí (nebo ne) součty sloupců. Booleovská hodnota. |
| rowSubTotals | Zobrazí (nebo ne) řádkové mezisoučty. Booleovská hodnota. |
| colSubTotals | Zobrazí (nebo ne) mezisoučty sloupců. Booleovská hodnota. |
| cumulativeValues | Označuje, zda vizualizace používá kumulativní hodnoty. Booleovská hodnota. |
| hideEmptyColumns | Označuje, zda se mají skrýt sloupce bez datových hodnot. Booleovská hodnota. |
| hideEmptyRows | Označuje, zda se mají skrýt řádky bez datových hodnot. Booleovská hodnota. |
| fixColumnHeaders | Udržuje záhlaví sloupců v kontingenční tabulce pevná (nebo ne). Booleovská hodnota. |
| fixRowHeaders | Udržuje záhlaví řádků v kontingenční tabulce pevná (nebo ne). Booleovská hodnota. |
| completedOnly | Označuje, zda se mají skrýt sloupce bez datových hodnot. Booleovská hodnota. |
| skipRounding | Použít nebo nezaokrouhlit. Booleovská hodnota. |
| showDimensionLabels | Zobrazuje štítky rozměrů nebo ne. Booleovská hodnota. |
| hideTitle | Skryje název nebo ne. Booleovská hodnota. |
| hideSubtitle | Skryje titulky nebo ne. Booleovská hodnota. |
| hideLegend | Zobrazit / skrýt legendu. Velmi pravděpodobně bude používán grafy. Booleovská hodnota. |
| showHierarchy | Zobrazuje (nebo ne) názvy hierarchie organizačních jednotek. Booleovská hodnota. |
| showData | Používá se v grafech ke skrytí nebo neskrytí dat / hodnot v rámci vykresleného modelu. Booleovská hodnota. |
| lastUpdatedBy | Objekt, který představuje uživatele, který použil poslední změny ve vizualizaci. |
| lastUpdated | Datum / čas poslední změny vizualizace. |
| favorites | Seznam ID uživatelů, kteří označili tento objekt jako oblíbený. |
| subscribers | Seznam ID uživatelů, kteří se přihlásili k odběru této vizualizace. |
| translations | Sada dostupných překladů objektů, obvykle filtrovaných podle národního prostředí. |
| outlierAnalysis | Objekt odpovědný za zachování nastavení souvisejících s analýzou odlehlých hodnot. Interní atribut 'outlierMethod' podporuje: IQR, STANDARD_Z_SCORE, MODIFIED_Z_SCORE. „Metoda normalizace“ prozatím přijímá pouze Y_RESIDUALS_LINEAR. |
| seriesKey | Možnosti stylingu a zda se má či nemá zobrazit klíč řady. |
| legenda | Možnosti a zda použít barvy legendy na řadu grafů. |

### Načítání vizualizací { #webapi_visualization_retrieving_visualizations } 

Chcete-li načíst seznam všech existujících vizualizací, ve formátu JSON, s některými základními informacemi (včetně identifikátoru, názvu a stránkování), můžete na níže uvedenou adresu URL vytvořit požadavek `GET`. Měli byste vidět seznam všech veřejných / sdílených vizualizací a vašich soukromých.

    GET /api/visualizations.json

Pokud chcete načíst definici JSON konkrétní vizualizace, můžete do adresy URL přidat její příslušný identifikátor:

    GET /api/visualizations/hQxZGXqnLS9.json

Následující reprezentace je příkladem odpovědi ve formátu JSON (pro stručnost byly některé informace odstraněny). Pro kompletní schéma použijte `GET /api/schemas/visualization`.

```json
{
  "lastUpdated": "2020-02-06T11:57:09.678",
  "href": "http://my-domain/dhis/api/visualizations/hQxZGXqnLS9",
  "id": "hQxZGXqnLS9",
  "created": "2017-05-19T17:22:00.785",
  "name": "ANC: ANC 1st visits last 12 months cumulative values",
  "publicAccess": "rw------",
  "userOrganisationUnitChildren": false,
  "type": "LINE",
  "access": {},
  "reportingParams": {
    "parentOrganisationUnit": false,
    "reportingPeriod": false,
    "organisationUnit": false,
    "grandParentOrganisationUnit": false
  },
  "dataElementGroupSetDimensions": [],
  "attributeDimensions": [],
  "yearlySeries": [],
  "axes": [
    {
      "index": 0,
      "type": "RANGE",
      "title": {
        "textMode": "CUSTOM",
        "text": "Any Title"
      }
    }
  ],
  "filterDimensions": [
    "dx"
  ],
  "columns": [
    {
      "id": "ou"
    }
  ],
  "dataElementDimensions": [],
  "categoryDimensions": [],
  "rowDimensions": [
    "pe"
  ],
  "columnDimensions": [
    "ou"
  ],
  "dataDimensionItems": [
    {
      "dataDimensionItemType": "DATA_ELEMENT",
      "dataElement": {
        "id": "fbfJHSPpUQD"
      }
    }
  ],
  "filters": [
    {
      "id": "dx"
    }
  ],
  "rows": [
    {
      "id": "pe"
    }
  ]
}
```
Více přizpůsobené odpovědi lze získat zadáním polí, která chcete extrahovat, do adresy URL. Např.:

    GET /api/visualizations/hQxZGXqnLS9.json?fields=interpretations

vrátí se

```json
{
  "interpretations": [
    {
      "id": "Lfr8I2RPU0C"
    },
    {
      "id": "JuwgdJlJPGb"
    },
    {
      "id": "WAoU2rSpyZp"
    }
  ]
}
```

Jak je vidět, výše uvedené `ZÍSKAT` vrátí pouze interpretace související s daným identifikátorem (v tomto případě `hQxZGXqnLS9`).

### Vytváření, aktualizace a odstraňování vizualizací { #webapi_visualization_add_update_remove_visualizations } 

These operations follow the standard *REST* semantics. A new Visualization can be created through a `POST` request to the `/api/visualizations` resource with a valid JSON payload. An example of payload could be:

```json
{
  "columns": [
    {
      "dimension": "J5jldMd8OHv",
      "items": [
        {
          "name": "CHP",
          "id": "uYxK4wmcPqA",
          "displayName": "CHP",
          "displayShortName": "CHP",
          "dimensionItemType": "ORGANISATION_UNIT_GROUP"
        },
        {
          "name": "Hospital",
          "id": "tDZVQ1WtwpA",
          "displayName": "Hospital",
          "displayShortName": "Hospital",
          "dimensionItemType": "ORGANISATION_UNIT_GROUP"
        }
      ]
    }
  ],
  "rows": [
    {
      "dimension": "SooXFOUnciJ",
      "items": [
        {
          "name": "DOD",
          "id": "B0bjKC0szQX",
          "displayName": "DOD",
          "displayShortName": "DOD",
          "dimensionItemType": "CATEGORY_OPTION_GROUP"
        },
        {
          "name": "CDC",
          "id": "OK2Nr4wdfrZ",
          "displayName": "CDC",
          "displayShortName": "CDC",
          "dimensionItemType": "CATEGORY_OPTION_GROUP"
        }
      ]
    }
  ],
  "filters": [
    {
      "dimension": "ou",
      "items": [
        {
          "name": "Sierra Leone",
          "id": "ImspTQPwCqd",
          "displayName": "Sierra Leone",
          "displayShortName": "Sierra Leone",
          "dimensionItemType": "ORGANISATION_UNIT"
        },
        {
          "name": "LEVEL-1",
          "id": "LEVEL-H1KlN4QIauv",
          "displayName": "LEVEL-1"
        }
      ]
    }
  ],
  "name": "HIV Cases Monthly",
  "description": "Cases of HIV across the months",
  "category": "XY1vwCQskjX",
  "showDimensionLabels": true,
  "hideEmptyRows": true,
  "hideEmptyColumns": true,
  "skipRounding": true,
  "aggregationType": "SUM",
  "regressionType": "LINEAR",
  "type": "PIVOT_TABLE",
  "numberType": "VALUE",
  "measureCriteria": "Some criteria",
  "showHierarchy": true,
  "completedOnly": true,
  "displayDensity": "NORMAL",
  "fontSize": "NORMAL",
  "digitGroupSeparator": "SPACE",
  "legendDisplayStyle": "FILL",
  "legendDisplayStrategy": "FIXED",
  "hideEmptyRowItems": "BEFORE_FIRST_AFTER_LAST",
  "fixColumnHeaders": true,
  "fixRowHeaders": false,
  "regression": false,
  "cumulative": true,
  "sortOrder": 1,
  "topLimit": 2,
  "rowTotals": true,
  "colTotals": true,
  "hideTitle": true,
  "hideSubtitle": true,
  "hideLegend": true,
  "showData": true,
  "percentStackedValues": true,
  "noSpaceBetweenColumns": true,
  "rowSubTotals": true,
  "colSubTotals": true,
  "userOrgUnitType": "TEI_SEARCH",
  "externalAccess": false,
  "publicAccess": "--------",
  "reportingParams": {
    "reportingPeriod": true,
    "organisationUnit": true,
    "parentOrganisationUnit": true,
    "grandParentOrganisationUnit": true
  },
  "parentGraphMap": {
    "ImspTQPwCqd": ""
  },
  "access": {
    "read": true,
    "update": true,
    "externalize": true,
    "delete": false,
    "write": true,
    "manage": false
  },
  "optionalAxes": [
    {
      "dimensionalItem": "fbfJHSPpUQD",
      "axis": 1
    },
    {
      "dimensionalItem": "cYeuwXTCPkU",
      "axis": 2
    }
  ],
  "relativePeriods": {
    "thisYear": false,
    "quartersLastYear": true,
    "last52Weeks": false,
    "thisWeek": false,
    "lastMonth": false,
    "last14Days": false,
    "biMonthsThisYear": false,
    "monthsThisYear": false,
    "last2SixMonths": false,
    "yesterday": false,
    "thisQuarter": false,
    "last12Months": false,
    "last5FinancialYears": false,
    "thisSixMonth": false,
    "lastQuarter": false,
    "thisFinancialYear": false,
    "last4Weeks": false,
    "last3Months": false,
    "thisDay": false,
    "thisMonth": false,
    "last5Years": false,
    "last6BiMonths": false,
    "last4BiWeeks": false,
    "lastFinancialYear": false,
    "lastBiWeek": false,
    "weeksThisYear": false,
    "last6Months": false,
    "last3Days": false,
    "quartersThisYear": false,
    "monthsLastYear": false,
    "lastWeek": false,
    "last7Days": false,
    "thisBimonth": false,
    "lastBimonth": false,
    "lastSixMonth": false,
    "thisBiWeek": false,
    "lastYear": false,
    "last12Weeks": false,
    "last4Quarters": false
  },
  "user": {},
  "yearlySeries": [
    "THIS_YEAR"
  ],
  "userGroupAccesses": [
    {
      "access": "rwx-----",
      "userGroupUid": "ZoHNWQajIoe",
      "displayName": "Bo District M&E officers",
      "id": "ZoHNWQajIoe"
    }
  ],
  "userAccesses": [
    {
      "access": "--------",
      "displayName": "John Barnes",
      "id": "DXyJmlo9rge",
      "userUid": "DXyJmlo9rge"
    }
  ],
  "legendSet": {
    "name": "Death rate up",
    "id": "ham2eIDJ9k6",
    "legends": [
      {
        "startValue": 1,
        "endValue": 2,
        "color": "red",
        "image": "some-image"
      },
      {
        "startValue": 2,
        "endValue": 3,
        "color": "blue",
        "image": "other-image"
      }
    ]
  },
  "outlierAnalysis": {
    "enabled": true,
    "outlierMethod": "IQR",
    "thresholdFactor": 1.5,
    "normalizationMethod": "Y_RESIDUALS_LINEAR",
    "extremeLines": {
      "enabled": true,
      "value": 3.5
    }
  },
  "legend": {
    "strategy": "FIXED",
    "style": "FILL",
    "set": {
      "id": "fqs276KXCXi",
      "displayName": "ANC Coverage"
    },
    "showKey": false
  },
  "seriesKey": {
    "hidden": true,
    "label": {
      "fontStyle": {
        "textColor": "#cccddd"
      }
    }
  },
  "axes": [
    {
      "index": 0,
      "type": "RANGE",
      "label": {
        "fontStyle": {
          "textColor": "#cccddd"
        }
      },
      "title": {
        "text": "Range axis title",
        "textMode": "CUSTOM",
        "fontStyle": {
          "textColor": "#000000"
        }
      },
      "decimals": 1,
      "maxValue": 100,
      "minValue": 20,
      "steps": 5,
      "baseLine": {
        "value": 50,
        "title": {
          "text": "My baseline",
          "fontStyle": {
            "textColor": "#000000"
          }
        }
      },
      "targetLine": {
        "value": 80,
        "title": {
          "text": "My targetline",
          "fontStyle": {
            "textColor": "#cccddd"
          }
        }
      }
    },
    {
      "index": 1,
      "type": "DOMAIN",
      "label": {
        "fontStyle": {
          "textColor": "#000000"
        }
      },
      "title": {
        "text": "Domain axis title",
        "textMode": "CUSTOM",
        "fontStyle": {
          "textColor": "#cccddd"
        }
      }
    }
  ],
  "axes": [
    {
      "index": 0,
      "type": "RANGE",
      "label": {
        "fontStyle": {
          "textColor": "#cccddd"
        }
      },
      "title": {
        "text": "Range axis title",
        "fontStyle": {
          "textColor": "#000000"
        }
      },
      "decimals": 1,
      "maxValue": 100,
      "minValue": 20,
      "steps": 5,
      "baseLine": {
        "value": 50,
        "title": {
          "text": "My baseline",
          "fontStyle": {
            "textColor": "#000000"
          }
        }
      },
      "targetLine": {
        "value": 80,
        "title": {
          "text": "My targetline",
          "fontStyle": {
            "textColor": "#cccddd"
          }
        }
      }
    },
    {
      "index": 1,
      "type": "DOMAIN",
      "label": {
        "fontStyle": {
          "textColor": "#000000"
        }
      },
      "title": {
        "text": "Domain axis title",
        "fontStyle": {
          "textColor": "#cccddd"
        }
      }
    }
  ]
}
```

Chcete-li aktualizovat konkrétní vizualizaci, můžete odeslat požadavek `PUT` na stejný prostředek `/api/visualizations` s podobným datovým obsahem `PLUS` a příslušným identifikátorem vizualizace, např.:

    PUT /api/visualizations/hQxZGXqnLS9

Nakonec, chcete-li odstranit existující vizualizaci, můžete provést požadavek `DELETE` s uvedením identifikátoru vizualizace, která má být odstraněna, jak je znázorněno:

    DELETE /api/visualizations/hQxZGXqnLS9

## Interpretace { #webapi_interpretations } 

Pro zdroje související s analýzou dat v DHIS2, jako jsou vizualizace, mapy, zprávy o událostech a grafy událostí, můžete psát a sdílet interpretace dat. Interpretace může být komentář, otázka, pozorování nebo výklad k datové zprávě nebo vizualizaci.

    /api/interpretations

### Čtení interpretací { #webapi_reading_interpretations } 

To read interpretations we will interact with the
`/api/interpretations` resource. A typical GET request using field
filtering can look like this:

    GET /api/interpretations?fields=*,comments[id,text,user,mentions]

The output in JSON response format could look like below (additional
fields omitted for brevity):

```json
{
  "interpretations": [
    {
      "id": "XSHiFlHAhhh",
      "created": "2013-05-30T10:24:06.181+0000",
      "text": "Data looks suspicious, could be a data entry mistake.",
      "type": "MAP",
      "likes": 2,
      "user": {
        "id": "uk7diLujYif"
      },
      "reportTable": {
        "id": "LcSxnfeBxyi"
      },
      "visualization": {
        "id": "LcSxnfeBxyi"
      }
    }, {
      "id": "kr4AnZmYL43",
      "created": "2013-05-29T14:47:13.081+0000",
      "text": "Delivery rates in Bo looks high.",
      "type": "VISUALIZATION",
      "likes": 3,
      "user": {
        "id": "uk7diLujYif"
      },
      "visualization": {
        "id": "HDEDqV3yv3H"
      },
      "mentions": [
        {
          "created": "2018-06-25T10:25:54.498",
          "username": "boateng"
        }
      ],
      "comments": [
        {
          "id": "iB4Etq8yTE6",
          "text": "This report indicates a surge.",
          "user": {
            "id": "B4XIfwOcGyI"
          }
        },
        {
          "id": "iB4Etq8yTE6",
          "text": "Likely caused by heavy rainfall.",
          "user": {
            "id": "B4XIfwOcGyI"
          }
        },
        {
          "id": "SIjkdENan8p",
          "text": "Have a look at this @boateng.",
          "user": {
            "id": "xE7jOejl9FI"
          },
          "mentions": [
            {
              "created": "2018-06-25T10:03:52.316",
              "username": "boateng"
            }
          ]
        }
      ]
    }
  ]
}
```



Tabulka: Interpretační pole

| Pole | Popis |
|---|---|
| id | Identifikátor interpretace. |
| created | Doba, kdy interpretace vznikala. |
| typ | Typ interpretovaného analytického objektu. Platné možnosti: VISUALIZATION, MAP, EVENT_REPORT, EVENT_CHART, DATASET_REPORT. |
| user | Přidružení k uživateli, který interpretaci vytvořil. |
| vizualizace | Přidružení k vizualizaci, pokud je typ VIZUALIZACE |
| mapa | Přidružení k mapě, pokud je typ MAP. |
| eventReport | Přidružení k přehledu události je typu EVENT_REPORT. |
| eventChart | Přidružení k grafu událostí, pokud je typ EVENT_CHART. |
| dataSet | Přidružení k datové sadě, pokud je typ DATASET_REPORT. |
| comments | Soubor komentářů k výkladu. Textové pole obsahuje aktuální komentář. |
| mentions | Soubor zmínek pro výklad. Seznam identifikátorů uživatelů. |

For all analytical objects you can append */data* to the URL to retrieve
the data associated with the resource (as opposed to the metadata). As
an example, by following the map link and appending /data one can
retrieve a PNG (image) representation of the thematic map through the
following URL:

    https://play.dhis2.org/demo/api/maps/bhmHJ4ZCdCd/data

For all analytical objects you can filter by *mentions*. To retrieve all
the interpretations/comments where a user has been mentioned you have
three options. You can filter by the interpretation mentions (mentions
in the interpretation
    description):

    GET /api/interpretations?fields=*,comments[*]&filter=mentions.username:in:[boateng]

Můžete filtrovat podle zmínek v komentářích interpretace (zmínky v jakémkoli komentáři):

    GET /api/interpretations?fields=*,comments[*]
      &filter=comments.mentions.username:in:[boateng]

You can filter by intepretations which contains the mentions either
in the interpretation or in any comment (OR junction):

    GET /api/interpretations?fields=*,comments[*]&filter=mentions:in:[boateng]

### Psaní interpretací { #webapi_writing_interpretations } 

When writing interpretations you will supply the interpretation text as
the request body using a POST request with content type "text/plain".
The URL pattern looks like the below, where {object-type} refers to the
type of the object being interpreted and {object-id} refers to the
identifier of the object being interpreted.

    /api/interpretations/{object-type}/{object-id}

Valid options for object type are *visualization*, *map*,
*eventReport*, *eventChart* and *dataSetReport*.

Některé platné příklady interpretací jsou uvedeny níže.

    /api/interpretations/visualization/hQxZGXqnLS9
    /api/interpretations/map/FwLHSMCejFu
    /api/interpretations/eventReport/xJmPLGP3Cde
    /api/interpretations/eventChart/nEzXB2M9YBz
    /api/interpretations/dataSetReport/tL7eCjmDIgM

As an example, we will start by writing an interpretation for the visualization with identifier *EbRN2VIbPdV*. To write visualization interpretations we will interact with the `/api/interpretations/visualization/{visualizationId}` resource.
The interpretation will be the request body. Based on this we can put
together the following request using cURL:

```bash
curl -d "This visualization shows a significant ANC 1-3 dropout" -X POST
  "https://play.dhis2.org/demo/api/interpretations/visualization/EbRN2VIbPdV" -H "Content-Type:text/plain" -u admin:district
```

Notice that the response provides a Location header with a value
indicating the location of the created interpretation. This is useful
from a client perspective when you would like to add a comment to the
interpretation.

### Aktualizace a odstranění interpretací { #webapi_updating_removing_interpretations } 

To update an existing interpretation you can use a PUT request where the
interpretation text is the request body using the following URL pattern,
where {id} refers to the interpretation identifier:

    /api/interpretations/{id}

Na základě toho můžeme použít curl k aktualizaci interpretace:

```bash
curl -d "This visualization shows a high dropout" -X PUT
  "https://play.dhis2.org/demo/api/interpretations/visualization/EV08iI1cJRA" -H "Content-Type:text/plain" -u admin:district
```

You can use the same URL pattern as above using a DELETE request to
remove the interpretation.

### Vytváření komentářů interpretací { #webapi_creating_interpretation_comments } 

When writing comments to interpretations you will supply the comment
text as the request body using a POST request with content type
"text/plain". The URL pattern looks like the below, where
{interpretation-id} refers to the interpretation identifier.

    /api/interpretations/{interpretation-id}/comments

Second, we will write a comment to the interpretation we wrote in the
example above. By looking at the interpretation response you will see
that a *Location* header is returned. This header tells us the URL of
the newly created interpretation and from that, we can read its
identifier. This identifier is randomly generated so you will have to
replace the one in the command below with your own. To write a comment
we can interact with the `/api/interpretations/{id}/comments`
resource like this:

```bash
curl -d "An intervention is needed" -X POST
  "https://play.dhis2.org/demo/api/interpretations/j8sjHLkK8uY/comments"
  -H "Content-Type:text/plain" -u admin:district
```

### Aktualizace a odstranění komentářů k výkladu { #webapi_updating_removing_interpretation_comments } 

To updating an interpretation comment you can use a PUT request where
the comment text is the request body using the following URL pattern:

    /api/interpretations/{interpretation-id}/comments/{comment-id}

Na základě toho můžeme použít curl k aktualizaci komentáře:

```bash
curl "https://play.dhis2.org/demo/api/interpretations/j8sjHLkK8uY/comments/idAzzhVWvh2"
  -d "I agree with that." -X PUT -H "Content-Type:text/plain" -u admin:district
```

You can use the same URL pattern as above using a DELETE request to the
remove the interpretation comment.

### Interpretace Líbí se mi { #webapi_liking_interpretations } 

To like an interpretation you can use an empty POST request to the
*like* resource:

    POST /api/interpretations/{id}/like

A like will be added for the currently authenticated user. A user can
only like an interpretation once.

To remove a like for an interpretation you can use a DELETE request to
the same resource as for the like operation.

The like status of an interpretation can be viewed by looking at the
regular Web API representation:

    GET /api/interpretations/{id}

The like information is found in the *likes* field, which represents the
number of likes, and the *likedBy* array, which enumerates the users who
have liked the interpretation.

```json
{
  "id": "XSHiFlHAhhh",
  "text": "Data looks suspicious, could be a data entry mistake.",
  "type": "VISUALIZATION",
  "likes": 2,
  "likedBy": [
    {
      "id": "k7Hg12fJ2f1"
    },
    {
      "id": "gYhf26fFkjFS"
    }
  ]
}
```
## Zobrazení SQL { #webapi_sql_views } 

Prostředek SQL views umožňuje vytvářet a načítat výslednou sadu pohledů SQL. Pohledy SQL lze spustit přímo proti databázi a vykreslit sadu výsledků prostřednictvím prostředku Web API.

    /api/sqlViews

SQL views are useful for creating data views which may be more easily
constructed with SQL compared combining the multiple objects of the Web
API. As an example, lets assume we have been asked to provide a view of
all organization units with their names, parent names, organization unit
level and name, and the coordinates listed in the database. The view
might look something like this:

```sql
SELECT ou.name as orgunit, par.name as parent, ou.coordinates, ous.level, oul.name from organisationunit ou
INNER JOIN _orgunitstructure ous ON ou.organisationunitid = ous.organisationunitid
INNER JOIN organisationunit par ON ou.parentid = par.organisationunitid
INNER JOIN orgunitlevel oul ON ous.level = oul.level
WHERE ou.coordinates is not null
ORDER BY oul.level, par.name, ou.name
```

We will use *curl* to first execute the view on the DHIS2 server. This
is essentially a materialization process, and ensures that we have the
most recent data available through the SQL view when it is retrieved
from the server. You can first look up the SQL view from the
api/sqlViews resource, then POST using the following command:

```bash
curl "https://play.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/execute" -X POST -u admin:district
```

The next step in the process is the retrieval of the data.The basic
structure of the URL is as follows

    http://{server}/api/sqlViews/{id}/data(.csv)

The `{server}` parameter should be replaced with your own server. The
next part of the URL `/api/sqlViews/` should be appended with the
specific SQL view identifier. Append either `data` for XML data or
`data.csv` for comma delimited values. Support response formats are
json, xml, csv, xls, html and html+css. As an example, the following
command would retrieve XML data for the SQL view defined above.

```bash
curl "https://play.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/data.csv" -u admin:district
```

Existují tři typy SQL pohledu:

  - *SQL pohled:* Standardní SQL pohledy.

  - *Materializovaný SQL pohled:* SQL pohledy, které jsou zhmotněné
    zapsáním na disk. Je třeba aktualizovat, aby odrážely změny v
    podkladové tabulky. Podporuje kritéria pro filtrování sady výsledků.

  - *SQL dotazy:* Obyčejné SQL dotazy. Podpora inline proměnných pro
    přizpůsobené dotazy.

### Kritéria { #webapi_sql_view_criteria } 

You can do simple filtering on the columns in the result set by
appending *criteria* query parameters to the URL, using the column names
and filter values separated by columns as parameter values, on the
following format:

    /api/sqlViews/{id}/data?criteria=col1:value1&criteria=col2:value2

As an example, to filter the SQL view result set above to only return
organisation units at level 4 you can use the following
    URL:

    https://play.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/data.csv?criteria=level:4

### Proměnné { #webapi_sql_view_variables } 

SQL views support variable substitution. Variable substitution is only
available for SQL view of type *query*, meaning SQL views which are not
created in the database but simply executed as regular SQL queries.
Variables can be inserted directly into the SQL query and must be on
this format:

    ${variable-key}

As an example, an SQL query that retrieves all data elements of a given
value type where the value type is defined through a variable can look
like this:

    select * from dataelement where valuetype = '${valueType}';

These variables can then be supplied as part of the URL when requested
through the *sqlViews* Web API resource. Variables can be supplied on
the following format:

    /api/sqlViews/{id}/data?var=key1:value1&var=key2:value2

Ukázkový dotaz odpovídající výše uvedenému příkladu může vypadat takto:

    /api/sqlViews/dI68mLkP1wN/data.json?var=valueType:int

Proměnná *valueType* bude nahrazena hodnotou *int* a dotaz vrátí datové prvky s hodnotovým typem int.

The variable parameter must contain alphanumeric characters only. The
variables must contain alphanumeric, dash, underscore and whitespace
characters only.

SQL Views of type *query* also support two system-defined variables that allow the query to access information about the user executing the view:

| proměnná | prostředek |
| -------- | ----- |
| ${_current_user_id} | ID uživatele databáze |
| ${_current_username} | uživatelské jméno uživatele |

Hodnoty těchto proměnných nelze zadat jako součást adresy URL. Vždy jsou vyplněny informacemi o uživateli.

For example, the following SQL view of type *query* shows all the organisation units that are assigned to the user:

```sql
    select ou.path, ou.name
    from organisationunit ou_user
    join organisationunit ou on ou.path like ou_user.path || '%'
    join usermembership um on um.organisationunitid = ou_user.organisationunitid
    where um.userinfoid = ${_current_user_id}
    order by ou.path
```

### Filtrování { #webapi_sql_view_filtering } 

The SQL view api supports data filtering, equal to the [metadata object
filter](#webapi_metadata_object_filter). For a complete list of filter
operators you can look at the documentation for [metadata object
filter](#webapi_metadata_object_filter).

To use filters, simply add them as parameters at the end of the request
url for your SQL view like
    this:

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_level:eq:2&filter=orgunit_name:ilike:bo

This request will return a result including org units with "bo" in the
name and which has org unit level 2.

Následující příklad vrátí všechny organizační jednotky s `orgunit_level` 2 nebo 4:

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_level:in:[2,4]

And last, an example to return all org units that does not start with
"Bo"

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_name:!like:Bo


## Datové položky { #webapi_data_items } 

Tento koncový bod umožňuje uživateli dotazovat se na data týkající se několika různých dimenzionálních položek. Jedná se o tyto položky: `INDICATOR`,` DATA_ELEMENT`, `DATA_SET`,` PROGRAM_INDICATOR`, `PROGRAM_DATA_ELEMENT`,` PROGRAM_ATTRIBUTE`. Koncový bod podporuje pouze požadavky `GET` a jako ostatní koncové body může vracet odpovědi ve formátu JSON nebo XML.

URL je `/api/dataItems` a jak si dokážete představit, je schopen načíst různé objekty prostřednictvím stejného koncového bodu ve stejném požadavku `GET`. Z tohoto důvodu se některé dostupné dotazovatelné atributy budou lišit v závislosti na dotazované položce (položkách) dimenze.

Abychom porozuměli výše uvedenému prohlášení, podívejme se na následující příklady požadavků:

1) `GET /api/dataItems?filter=dimensionItemType:eq:DATA_ELEMENT&filter=valueType:eq:TEXT`
V tomto příkladu má typ položky `DATA_ELEMENT` atribut `valueType`, který lze použít v dotazu.

2) `GET /api/dataItems?pageSize=50&order=displayName:asc&filter=dimensionItemType:eq:PROGRAM_INDICATOR&filter=displayName:ilike:someName&filter=programId:eq:WSGAb5XwJ3Y`

Zde `PROGRAM_INDICATOR` umožňuje filtrování podle `programId`.

So, based on the examples `1)` and `2)` if you try filtering a `DATA_ELEMENT` by `programId` or filter a `PROGRAM_INDICATOR` by `valueType`, you should get no results.
In other words, the filter will be applied only when the attribute actually exists for the respective data item.

Another important aspect to be highlighted is that this endpoint does NOT follow the same querying standards as other existing endpoints, like [Metadata object filter](#webapi_metadata_object_filter) for example. As a consequence, it supports a smaller set of features and querying.
The main reason for that is the need for querying multiple different items that have different relationships, which is not possible using the existing filtering components (used by the others endpoints).

### Možné odpovědi koncového bodu { #webapi_data_items_possible_responses } 

Na základě požadavku / dotazu `GET` je možné několik různých odpovědí. Níže shrnujeme jednotlivé možnosti.

#### Results found (HTTP status code 200) { #results-found-http-status-code-200 } 

```
{
  "pager": {
    "page": 1,
    "pageCount": 27,
    "total": 1339,
    "pageSize": 50,
    "nextPage": "https://play.dhis2.org/dev/api/36/dataItems?page=2&filter=displayName:ilike:a&filter=id:eq:nomatch&rootJunction=OR&displayName:asc=&paging=true"
  },
  "dataItems": [
    {
      "simplifiedValueType": "TEXT",
      "displayName": "TB program Gender",
      "displayShortName": "TB prog. Gen.",
      "valueType": "TEXT",
      "name": "TB program Gender",
      "shortName": ""TB prog. Gen.",
      "id": "ur1Edk5Oe2n.cejWyOfXge6",
      "programId": "ur1Edk5Oe2n",
      "dimensionItemType": "PROGRAM_ATTRIBUTE"
    },
    ...
  ]
}
```

#### Results not found (HTTP status code 200) { #results-not-found-http-status-code-200 } 

```
{
  "pager": {
    "page": 1,
    "pageCount": 1,
    "total": 0,
    "pageSize": 50
  },
  "dataItems": []
}
```

#### Neplatný dotaz (stavový kód HTTP 409) { #invalid-query-http-status-code-409 } 

```
{
  "httpStatus": "Conflict",
  "httpStatusCode": 409,
  "status": "ERROR",
  "message": "Unable to parse element `INVALID_TYPE` on filter `dimensionItemType`. The values available are: [INDICATOR, DATA_ELEMENT, DATA_ELEMENT_OPERAND, DATA_SET, PROGRAM_INDICATOR, PROGRAM_DATA_ELEMENT, PROGRAM_ATTRIBUTE]",
  "errorCode": "E2016"
}
```

#### Neošetřená chyba (stavový kód HTTP 500) { #unhandled-error-http-status-code-500 } 

```
{
  "httpStatus": "Internal Server Error",
  "httpStatusCode": 500,
  "status": "ERROR"
}
```

### Stránkování { #webapi_data_items_pagination } 

This endpoint also supports pagination as a default option. If needed, you can disable pagination by adding `paging=false` to the `GET` request.
ie.: `/api/dataItems?filter=dimensionItemType:in:[INDICATOR]&paging=false`.

Zde je příklad datového obsahu, když je povoleno stránkování. Pamatujte, že stránkování je výchozí možnost a není nutné ji výslovně nastavovat.

```
{
  "pager": {
    "page": 1,
    "pageCount": 20,
    "total": 969,
    "pageSize": 50,
    "nextPage": "https://play.dhis2.org/dev/api/dataItems?page=2&filter=dimensionItemType:in:[INDICATOR]"
  },
  "dataItems": [...]
}
```

> **Note**
>
> For elements where there is an associated Program, the program name should also be returned as part of the element name (as a prefix). The only exception is `Program Indicators`. We will not prefix the element name in this case, in order to keep the same behavior as existing endpoints.
>
> The /dataItems endpoint will bring only data items that are defined as aggregatable type. The current list of valid aggregatable types is:
`TEXT, LONG_TEXT`, `LETTER`, `BOOLEAN`, `TRUE_ONLY`, `NUMBER`, `UNIT_INTERVAL`, `PERCENTAGE`, `INTEGER`, `INTEGER_POSITIVE`, `INTEGER_NEGATIVE`, `INTEGER_ZERO_OR_POSITIVE`, `COORDINATE`.
>
> Even though the response returns several different attributes, the filtering can only be applied to specific ones: `displayName`, `name`, `valueType`, `id`, `dimensionItemType`, `programId`.
>
> The `order` will be considered invalid if it is set on top of `name` (ie.: order=*name:asc*) and a `filter` is set to `displayName` (ie.: filter=*displayName:ilike:aName*), and vice-versa.

### Atributy odpovědi { #webapi_data_items_response_attributes } 

Nyní, když máme dobrou představu o hlavních funkcích a použití tohoto koncového bodu, pojďme se podívat na seznam atributů vrácených v odpovědi.



Tabulka: Atributy datových položek

| Pole | Popis |
|---|---|
| id | Jedinečný identifikátor. |
| code | Vlastní kód k identifikaci položky dimenze. |
| název | Název uvedený pro položku. |
| displayName | Definovaný zobrazovaný název. |
| shortName | Krátký název položky. |
| displayShortName | Definovaný zobrazovaný krátký název. |
| dimensionItemType | Typ dimenzí. Možné typy: INDICATOR, DATA_ELEMENT, REPORTING_RATE, PROGRAM_INDICATOR, PROGRAM_DATA_ELEMENT, PROGRAM_ATTRIBUTE. |
| valueType | Typ hodnoty položky (přesnější definice). Možné typy: TEXT, LONG_TEXT, LETTER, BOOLEAN, TRUE_ONLY, UNIT_INTERVAL, PERCENTAGE, INTEGER, INTEGER_POSITIVE, INTEGER_NEGATIVE, INTEGER_ZERO_OR_POSITIVE, COORDINATE |
| simplifiedValueType | Obecná reprezentace hodnotového typu. Platné hodnoty: NUMBER, BOOLEAN, DATE, FILE_RESOURCE, COORDINATE, TEXT |
| programId | Přidružené ID programu. |

## Prohlížení reprezentací analytických zdrojů { #webapi_viewing_analytical_resource_representations } 

DHIS2 has several resources for data analysis. These resources include
*maps*, *visualizations*, *reports* and *documents*. By visiting these resources you will retrieve information about the resource. For instance, by navigating to `/api/visualizations/R0DVGvXDUNP` the response will contain the name, last date of modification and so on for the chart. To retrieve the analytical representation, for instance, a PNG representation of the visualization, you can append */data* to all these resources. For instance, by visiting `/api/visualizations/R0DVGvXDUNP/data` the system will return a PNG image of the visualization.



Tabulka: Analytické zdroje

| Zdroj | Popis | Data URL | Reprezentace zdrojů |
|---|---|---|---|
| eventCharts | Grafy událostí | /api/eventCharts/<identifier\>/data | png |
| mapy | Mapy | /api/maps/<identifier\>/data | png |
| vizualizace | Kontingenční tabulky a grafy | /api/visualizations/<identifier\>/data | json &#124; jsonp &#124; html &#124; xml &#124; pdf &#124; xls &#124; csv | png |
| zprávy | Standardní zprávy | /api/reports/<identifier\>/data | pdf &#124; xls &#124; html |
| dokumenty | Zdroje | /api/documents/<identifier\>/data | <follows document\> |

The data content of the analytical representations can be modified by
providing a *date* query parameter. This requires that the analytical
resource is set up for relative periods for the period dimension.



Tabulka: Parametry dotazu na data

| Parametr dotazu | Hodnota | Popis |
|---|---|---|
| datum | Datum ve formátu yyyy-MM-dd | Základ pro relativní období v přehledu (vyžaduje relativní období) |



Tabulka: Parametry dotazu pro typy png / obrázky (vizualizace, mapy)

| Parametr dotazu | Popis |
|---|---|
| width | Šířka obrázku v pixelech |
| height | Výška obrázku v pixelech |

Some examples of valid URLs for retrieving various analytical
representations are listed below.

    /api/visualization/R0DVGvXDUNP/data
    /api/visualization/R0DVGvXDUNP/data?date=2013-06-01

    /api/visualization/jIISuEWxmoI/data.html
    /api/visualization/jIISuEWxmoI/data.html?date=2013-01-01
    /api/visualization/FPmvWs7bn2P/data.xls
    /api/visualization/FPmvWs7bn2P/data.pdf

    /api/maps/DHE98Gsynpr/data
    /api/maps/DHE98Gsynpr/data?date=2013-07-01

    /api/reports/OeJsA6K1Otx/data.pdf
    /api/reports/OeJsA6K1Otx/data.pdf?date=2014-01-01

## Pluginy { #webapi_plugins } 

DHIS2 comes with plugins which enable you to embed live data directly in
your web portal or web site. Currently, plugins exist for charts, maps
and pivot tables.

Please be aware that all of the code examples in this section are for
demonstration purposes only. They should not be used as is in
production systems. To make things simple, the credentials
(admin/district) have been embedded into the scripts. In a real scenario,
you should never expose credentials in javascript as it opens a
vulnerability to the application. In addition, you would create a user
with more minimal privileges rather than make use of a superuser to
fetch resources for your portal.

It is possible to workaround exposing the credentials by using a reverse
proxy such as nginx or apache2. The proxy can be configured to inject
the required Authorization header for only the endpoints that you wish
to make public. There is some documentation to get you started in the
section of the implementers manual which describes [reverse
proxy](https://docs.dhis2.org/master/en/implementer/html/install_reverse_proxy_configuration.html#install_making_resources_available_with_nginx)
configuration.

### Vkládání kontingenčních tabulek pomocí pluginu Kontingenční tabulka { #webapi_pivot_table_plugin } 

In this example, we will see how we can embed good-looking, light-weight
html pivot tables with data served from a DHIS2 back-end into a Web
page. To accomplish this we will use the Pivot table plug-in. The
plug-in is written in Javascript and depends on the jQuery library only.
A complete working example can be found at
<http://play.dhis2.org/portal/table.html>. Open the page in a web
browser and view the source to see how it is set up.

We start by having a look at what the complete html file could look
like. This setup puts two tables in our web page. The first one is
referring to an existing table. The second is configured inline.

```html
<!DOCTYPE html>
<html>
<head>
  <script src="https://dhis2-cdn.org/v227/plugin/jquery-2.2.4.min.js"></script>
  <script src="https://dhis2-cdn.org/v227/plugin/reporttable.js"></script>

  <script>
    reportTablePlugin.url = "https://play.dhis2.org/demo";
    reportTablePlugin.username = "admin";
    reportTablePlugin.password = "district";
    reportTablePlugin.loadingIndicator = true;

    // Referring to an existing table through the id parameter, render to "report1" div

    var r1 = { el: "report1", id: "R0DVGvXDUNP" };

    // Table configuration, render to "report2" div

    var r2 = {
      el: "report2",
      columns: [
        {dimension: "dx", items: [{id: "YtbsuPPo010"}, {id: "l6byfWFUGaP"}]}
      ],
      rows: [
        {dimension: "pe", items: [{id: "LAST_12_MONTHS"}]}
      ],
      filters: [
        {dimension: "ou", items: [{id: "USER_ORGUNIT"}]}
      ],

      // All following properties are optional
      title: "My custom title",
      showColTotals: false,
      showRowTotals: false,
      showColSubTotals: false,
      showRowSubTotals: false,
      showDimensionLabels: false,
      hideEmptyRows: true,
      skipRounding: true,
      aggregationType: "AVERAGE",
      showHierarchy: true,
      completedOnly: true,
      displayDensity: "COMFORTABLE",
      fontSize: "SMALL",
      digitGroupSeparator: "COMMA",
      legendSet: {id: "fqs276KXCXi"}
    };

    reportTablePlugin.load([r1, r2]);
  </script>
</head>

<body>
  <div id="report1"></div>
  <div id="report2"></div>
</body>
</html>
```

Two files are included in the header section of the HTML document. The
first file is the jQuery JavaScript library (we use the DHIS2 content
delivery network in this case). The second file is the Pivot table
plug-in. Make sure the path is pointing to your DHIS2 server
installation.

Now let us have a look at the various options for the Pivot tables. One
property is required: *el* (please refer to the table below). Now, if
you want to refer to pre-defined tables already made inside DHIS2 it is
sufficient to provide the additional *id* parameter. If you instead want
to configure a pivot table dynamically you should omit the id parameter
and provide data dimensions inside a *columns* array, a *rows* array and
optionally a *filters* array instead.

A data dimension is defined as an object with a text property called
*dimension*. This property accepts the following values: *dx*
(indicator, data element, data element operand, data set, event data
item and program indicator), *pe* (period), *ou* (organisation unit) or
the id of any organisation unit group set or data element group set (can
be found in the web api). The data dimension also has an array property
called *items* which accepts objects with an *id* property.

To sum up, if you want to have e.g. "ANC 1 Coverage", "ANC 2 Coverage"
and "ANC 3 Coverage" on the columns in your table you can make the
following *columns* config:

```json
columns: [{
  dimension: "dx",
  items: [
    {id: "Uvn6LCg7dVU"}, // the id of ANC 1 Coverage
    {id: "OdiHJayrsKo"}, // the id of ANC 2 Coverage
    {id: "sB79w2hiLp8"}  // the id of ANC 3 Coverage
  ]
}]
```



Tabulka: Konfigurace zásuvného modulu kontingenční tabulky

| Param | Typ | Požadované | Možnosti (nejprve výchozí) | Popis |
|---|---|---|---|---|
| url | řetězec | Ano || Základní URL serveru DHIS2 |
| uživatelské jméno | řetězec | Ano (pokud jde o více domén) || Používá se pro ověření, pokud server běží v jiné doméně |
| password | řetězec | Ano (pokud jde o více domén) || Používá se pro ověření, pokud server běží v jiné doméně |
| loadingIndicator | boolean | Ne || Zda se má před zobrazením tabulky zobrazit indikátor načítání |



Tabulka: Konfigurace kontingenční tabulky

| Param | Typ | Požadované | Možnosti (nejprve výchozí) | Popis |
|---|---|---|---|---|
| el | řetězec | Ano || Identifikátor prvku HTML pro vykreslení tabulky na vaší webové stránce |
| id | řetězec | Ne || Identifikátor předdefinované tabulky (oblíbené) v DHIS2 |
| sloupce | array | Ano (pokud není uvedeno ID) || Dimenze dat, které se mají zahrnout do tabulky jako sloupce |
| řádky | array | Ano (pokud není uvedeno ID) || Dimenze dat, které se mají zahrnout do tabulky jako řádky |
| filtr | array | Ne || Dimenze dat, které se mají zahrnout do tabulky jako filtry |
| title | řetězec | Ne || Zobrazit vlastní název nad tabulkou |
| showColTotals | boolean | Ne | true &#124; false | Zda zobrazit součty pro sloupce |
| showRowTotals | boolean | Ne | true &#124; false | Zda zobrazit součty pro řádky |
| showColSubTotals | boolean | Ne | true &#124; false | Zda se mají zobrazovat mezisoučty pro sloupce |
| showRowSubTotals | boolean | Ne | true &#124; false | Zda se mají zobrazovat mezisoučty pro řádky |
| showDimensionLabels | boolean | Ne | true &#124; false | Zda se má v tabulce zobrazit název kóty vlevo nahoře |
| hideEmptyRows | boolean | Ne | false &#124; true | Zda se mají skrýt řádky bez dat |
| skipRounding | boolean | Ne | false &#124; true | Zda se má přeskočit zaokrouhlování hodnot dat |
| completedOnly | boolean | Ne | false &#124; true | Zda zobrazit pouze dokončené události |
| showHierarchy | boolean | Ne | false &#124; true | Zda rozšířit názvy organizačních jednotek o názvy všech předcházejících |
| aggregationType | řetězec | Ne | "SUM" &#124;"AVERAGE" &#124; "AVERAGE_SUM_ORG_UNIT"&#124;"LAST"&#124;"LAST_AVERAGE_ORG_UNIT"&#124; "COUNT" &#124; "STDDEV" &#124; "VARIANCE" &#124; "MIN" &#124; "MAX" | Přepíše výchozí typ agregace datového prvku |
| displayDensity | řetězec | Ne | "NORMAL" &#124; "COMFORTABLE" &#124; "COMPACT" | Množství místa uvnitř buněk tabulky |
| fontSize | řetězec | Ne | "NORMAL" &#124; "LARGE" &#124; "SMALL" | Velikost písma tabulky |
| digitGroupSeparator | řetězec | Ne | "SPACE" &#124; "COMMA" &#124; "NONE" | Jak jsou hodnoty formátovány: 1 000 &#124; 1 000 &#124; 1000 |
| legendSet | objekt | Ne || Hodnoty v tabulce vybarvěte podle sady legend |
| userOrgUnit | řetězec / pole | Ne || Identifikátory organizačních jednotek přepisují organizační jednotky spojené s aktuálním uživatelem, jedním nebo polem |
| relativePeriodDate | řetězec | Ne || Identifikátor data, např.: "2016-01-01". Přepíše počáteční datum relativního období |

### Vkládání grafů pomocí plug-in modulu grafu Visualizer { #webapi_chart_plugin } 

In this example, we will see how we can embed good-looking Highcharts
charts (<http://www.highcharts.com>) with data served from a DHIS2
back-end into a Web page. To accomplish this we will use the DHIS2
Visualizer plug-in. The plug-in is written in JavaScript and depends on
the jQuery library. A complete working example can be found at
<http://play.dhis2.org/portal/chart.html>. Open the page in a web
browser and view the source to see how it is set up.

We start by having a look at what the complete html file could look
like. This setup puts two charts on our web page. The first one is
referring to an existing chart. The second is configured inline.

```html
<!DOCTYPE html>
<html>
<head>
  <script src="https://dhis2-cdn.org/v227/plugin/jquery-2.2.4.min.js"></script>
  <script src="https://dhis2-cdn.org/v227/plugin/chart.js"></script>

  <script>
    chartPlugin.url = "https://play.dhis2.org/demo";
    chartPlugin.username = "admin";
    chartPlugin.password = "district";
    chartPlugin.loadingIndicator = true;

    // Referring to an existing chart through the id parameter, render to "report1" div

    var r1 = { el: "report1", id: "R0DVGvXDUNP" };

    // Chart configuration, render to "report2" div

    var r2 = {
      el: "report2",
      columns: [
        {dimension: "dx", items: [{id: "YtbsuPPo010"}, {id: "l6byfWFUGaP"}]}
      ],
      rows: [
        {dimension: "pe", items: [{id: "LAST_12_MONTHS"}]}
      ],
      filters: [
        {dimension: "ou", items: [{id: "USER_ORGUNIT"}]}
      ],

      // All following properties are optional
      title: "Custom title",
      type: "line",
      showValues: false,
      hideEmptyRows: true,
      regressionType: "LINEAR",
      completedOnly: true,
      targetLineValue: 100,
      targetLineTitle: "My target line title",
      baseLineValue: 20,
      baseLineTitle: "My base line title",
      aggregationType: "AVERAGE",
      rangeAxisMaxValue: 100,
      rangeAxisMinValue: 20,
      rangeAxisSteps: 5,
      rangeAxisDecimals: 2,
      rangeAxisTitle: "My range axis title",
      domainAxisTitle: "My domain axis title",
      hideLegend: true
    };

    // Render the charts

    chartPlugin.load(r1, r2);
  </script>
</head>

<body>
  <div id="report1"></div>
  <div id="report2"></div>
</body>
</html>
```

Two files are included in the header section of the HTML document. The
first file is the jQuery JavaScript library (we use the DHIS2 content
delivery network in this case). The second file is the Visualizer chart
plug-in. Make sure the path is pointing to your DHIS2 server
installation.

Now let us have a look at the various options for the charts. One
property is required: *el* (please refer to the table below). Now, if
you want to refer to pre-defined charts already made inside DHIS2 it is
sufficient to provide the additional *id* parameter. If you instead want
to configure a chart dynamically you should omit the id parameter and
provide data dimensions inside a *columns* array, a *rows* array and
optionally a *filters* array instead.

A data dimension is defined as an object with a text property called
*dimension*. This property accepts the following values: *dx*
(indicator, data element, data element operand, data set, event data
item and program indicator), *pe* (period), *ou* (organisation unit) or
the id of any organisation unit group set or data element group set (can
be found in the web api). The data dimension also has an array property
called *items* which accepts objects with an *id* property.

To sum up, if you want to have e.g. "ANC 1 Coverage", "ANC 2 Coverage"
and "ANC 3 Coverage" on the columns in your chart you can make the
following *columns* config:

```json
columns: [{
  dimension: "dx",
  items: [
    {id: "Uvn6LCg7dVU"}, // the id of ANC 1 Coverage
    {id: "OdiHJayrsKo"}, // the id of ANC 2 Coverage
    {id: "sB79w2hiLp8"}  // the id of ANC 3 Coverage
  ]
}]
```



Tabulka: Konfigurace zásuvného modulu pro grafy

| Param | Typ | Požadované | Možnosti (nejprve výchozí) | Popis |
|---|---|---|---|---|
| url | řetězec | Ano || Základní URL serveru DHIS2 |
| uživatelské jméno | řetězec | Ano (pokud jde o více domén) || Používá se pro ověření, pokud server běží v jiné doméně |
| password | řetězec | Ano (pokud jde o více domén) || Používá se pro ověření, pokud server běží v jiné doméně |
| loadingIndicator | boolean | Ne || Zda se má před zobrazením grafu zobrazit indikátor načítání |



Tabulka: Konfigurace grafu

| Param | Typ | Požadované | Možnosti (nejprve výchozí) | Popis |
|---|---|---|---|---|
| el | řetězec | Ano || Identifikátor prvku HTML pro vykreslení grafu na vaší webové stránce |
| id | řetězec | Ne || Identifikátor předdefinovaného grafu (oblíbeného) v DHIS |
| typ | řetězec | Ne | column &#124; stackedcolumn &#124; bar &#124; stackedbar &#124; line &#124; area &#124; pie &#124; radar &#124; gauge | Typ grafu |
| sloupce | array | Ano (pokud není uvedeno ID) || Dimenze dat, které se mají zahrnout do grafu jako řady |
| řádky | array | Ano (pokud není uvedeno ID) || Datové dimenze k zahrnutí do grafu jako kategorie |
| filtr | array | Ne || Dimenze dat, které se mají zahrnout do grafu jako filtry |
| title | řetězec | Ne || Zobrazit vlastní název nad grafem |
| showValues | boolean | Ne | false &#124; true | Zda se mají v grafu zobrazovat hodnoty dat |
| hideEmptyRows | boolean | Ne | false &#124; true | Zda se mají skrýt prázdné kategorie |
| completedOnly | boolean | Ne | false &#124; true | Zda zobrazit pouze dokončené události |
| regressionType | řetězec | Ne | "NONE" &#124; "LINEAR" | Zobrazit trendové linie |
| targetLineValue | číslo | Ne || Zobrazit cílový řádek s touto hodnotou |
| targetLineTitle | řetězec | Ne || Zobrazit název na cílovém řádku (neplatí bez hodnoty cílového řádku) |
| baseLineValue | číslo | Ne || Zobrazit základní linii s touto hodnotou |
| baseLineTitle | řetězec | Ne || Zobrazit název na základním řádku (neplatí bez hodnoty základního řádku) |
| rangeAxisTitle | číslo | Ne || Název, který se má zobrazit podél osy rozsahu |
| rangeAxisMaxValue | číslo | Ne || Maximální hodnota pro osu rozsahu, která se má zobrazit |
| rangeAxisMinValue | číslo | Ne || Minimální hodnota pro osu rozsahu, která se má zobrazit |
| rangeAxisSteps | číslo | Ne || Počet kroků pro zobrazení osy rozsahu |
| rangeAxisDecimals | číslo | Ne || Počet desetinných míst pro osu rozsahu, která se má zobrazit |
| domainAxisTitle | číslo | Ne || Název, který se má zobrazit podél osy domény |
| aggregationType | řetězec | Ne | "SUM" &#124;"AVERAGE" &#124; "AVERAGE_SUM_ORG_UNIT"&#124;"LAST"&#124;"LAST_AVERAGE_ORG_UNIT"&#124; "COUNT" &#124; "STDDEV" &#124; "VARIANCE" &#124; "MIN" &#124; "MAX" | Přepíše výchozí typ agregace datového prvku |
| hideLegend | boolean | Ne | false &#124; true | Zda skrýt legendu serie |
| hideTitle | boolean | Ne | false &#124; true | Zda skrýt název grafu |
| userOrgUnit | řetězec / pole | Ne || Identifikátory organizačních jednotek přepisují organizační jednotky spojené s aktuálním uživatelem, jedním nebo polem |
| relativePeriodDate | řetězec | Ne || Identifikátor data, např.: "2016-01-01". Přepíše počáteční datum relativního období |

### Vkládání map pomocí pluginu GIS map { #webapi_map_plugin } 

In this example we will see how we can embed maps with data served from
a DHIS2 back-end into a Web page. To accomplish this we will use the GIS
map plug-in. The plug-in is written in JavaScript and depends on the Ext
JS library only. A complete working example can be found at
<http://play.dhis2.org/portal/map.html>. Open the page in a web browser
and view the source to see how it is set up.

We start by having a look at what the complete html file could look
like. This setup puts two maps on our web page. The first one is
referring to an existing map. The second is configured inline.

```html
<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" type="text/css" href="http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css" />
  <script src="http://dhis2-cdn.org/v215/ext/ext-all.js"></script>
  <script src="https://maps.google.com/maps/api/js?sensor=false"></script>
  <script src="http://dhis2-cdn.org/v215/openlayers/OpenLayers.js"></script>
  <script src="http://dhis2-cdn.org/v215/plugin/map.js"></script>

  <script>
    var base = "https://play.dhis2.org/demo";

    // Login - if OK, call the setLinks function

    Ext.onReady( function() {
      Ext.Ajax.request({
        url: base + "dhis-web-commons-security/login.action",
        method: "POST",
        params: { j_username: "portal", j_password: "Portal123" },
        success: setLinks
      });
    });

    function setLinks() {
      DHIS.getMap({ url: base, el: "map1", id: "ytkZY3ChM6J" });

      DHIS.getMap({
        url: base,
        el: "map2",
        mapViews: [{
          columns: [{dimension: "in", items: [{id: "Uvn6LCg7dVU"}]}], // data
          rows: [{dimension: "ou", items: [{id: "LEVEL-3"}, {id: "ImspTQPwCqd"}]}], // organisation units,
          filters: [{dimension: "pe", items: [{id: "LAST_3_MONTHS"}]}], // period
          // All following options are optional
          classes: 7,
          colorLow: "02079c",
          colorHigh: "e5ecff",
          opacity: 0.9,
          legendSet: {id: "fqs276KXCXi"}
        }]
      });
    }
  </script>
</head>

<body>
  <div id="map1"></div>
  <div id="map2"></div>
</body>
</html>
```

Four files and Google Maps are included in the header section of the
HTML document. The first two files are the Ext JS JavaScript library (we
use the DHIS2 content delivery network in this case) and its stylesheet.
The third file is the OpenLayers JavaScript mapping framework
(<http://openlayers.org>) and finally we include the GIS map plug-in.
Make sure the path is pointing to your DHIS2 server
    installation.

    <link rel="stylesheet" type="text/css" href="http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css" />
    <script src="http://dhis2-cdn.org/v215/ext/ext-all.js"></script>
    <script src="https://maps.google.com/maps/api/js?sensor=false"></script>
    <script src="http://dhis2-cdn.org/v215/openlayers/OpenLayers.js"></script>
    <script src="http://dhis2-cdn.org/v215/plugin/map.js"></script>

To authenticate with the DHIS2 server we use the same approach as in the
previous section. In the header of the HTML document we include the
following Javascript inside a script element. The *setLinks* method will
be implemented later. Make sure the *base* variable is pointing to your
DHIS2 installation.

    Ext.onReady( function() {
      Ext.Ajax.request({
        url: base + "dhis-web-commons-security/login.action",
        method: "POST",
        params: { j_username: "portal", j_password: "Portal123" },
        success: setLinks
      });
    });

Nyní se podíváme na různé možnosti zásuvného modulu GIS. Jsou vyžadovány dvě vlastnosti: *el* a *url* (viz tabulka níže). Pokud se nyní chcete odkazovat na předdefinované mapy již vytvořené v DHIS2 GIS, stačí zadat doplňkový parametr *id*. Chcete-li místo toho konfigurovat mapu dynamicky, měli byste parametr id vynechat a místo něj uvést *mapViews* (vrstvy). Místo toho by měly být nakonfigurovány s rozměry dat uvnitř pole *columns*, pole *rows* a volitelně pole *filters*.

A data dimension is defined as an object with a text property called
*dimension*. This property accepts the following values: *in*
(indicator), *de* (data element), *ds* (data set), *dc* (data element
operand), *pe* (period), *ou* (organisation unit) or the id of any
organisation unit group set or data element group set (can be found in
the web api). The data dimension also has an array property called
*items* which accepts objects with an *id* property.

To sum up, if you want to have a layer with e.g. "ANC 1 Coverage" in
your map you can make the following *columns* config:

```json
columns: [{
  dimension: "in", // could be "in", "de", "ds", "dc", "pe", "ou" or any dimension id
  items: [{id: "Uvn6LCg7dVU"}], // the id of ANC 1 Coverage
}]
```



Tabulka: Konfigurace zásuvného modulu pro mapy GIS

| Param | Typ | Požadované | Možnosti (nejprve výchozí) | Popis |
|---|---|---|---|---|
| el | řetězec | Ano || Identifikátor prvku HTML pro vykreslení mapy na vaší webové stránce |
| url | řetězec | Ano || Základní URL serveru DHIS2 |
| id | řetězec | Ne || Identifikátor předdefinované mapy (oblíbené) v DHIS |
| baseLayer | string/boolean | Ne | 'gs', 'googlestreets' &#124; 'gh', 'googlehybrid' &#124; 'osm', 'openstreetmap' &#124; false, null, 'none', 'off' | Zobrazit mapu na pozadí |
| hideLegend | boolean | Ne | false &#124; true | Skrýt panel legendy |
| mapViews | array | Ano (pokud není uvedeno ID) || Pole vrstev |

If no id is provided you must add map view objects with the following
config options:



Tabulka: Konfigurace modulu plug-in mapy

||||||
|---|---|---|---|---|
| vrstva | řetězec | Ne | "thematic1" &#124; "thematic2" &#124; "thematic3" &#124; "thematic4" &#124; "boundary" &#124; "facility" &#124; | Vrstva, do které má být přidán obsah zobrazení mapy |
| sloupce | array | Ano || Indikátor, datový prvek, datový operand nebo datová sada (bude použit pouze jeden) |
| řádky | array | Ano || Organizační jednotky (více povoleno) |
| filtr | array | Ano || Období (bude použito pouze jedno) |
| třídy | celé číslo | Ne | 5 &#124; 1-7 | Počet automatických tříd legend |
| metoda | celé číslo | Ne | 2 &#124; 3 | Metoda výpočtu legendy, kde 2 = stejné intervaly a 3 = stejné počty |
| colorLow | řetězec | Ne | "ff0000" (červená) &#124; Jakákoli hexadecimální barva | Barva představující první třídu automatické legendy |
| colorHigh | řetězec | Ne | "00ff00" (zelená) &#124; Jakákoli hexadecimální barva | Barva představující poslední třídu automatické legendy |
| radiusLow | celé číslo | Ne | 5 &#124; Jakékoli celé číslo | Platí pouze pro zařízení (body) - poloměr bodu s nejnižší hodnotou |
| radiusHigh | celé číslo | Ne | 15 &#124; Jakékoli celé číslo | Platí pouze pro zařízení (body) - poloměr bodu s nejvyšší hodnotou |
| neprůhlednost | dvojnásobek | Ne | 0.8 &#124; 0 - 1 | Neprůhlednost / průhlednost obsahu vrstvy |
| legendSet | objekt | Ne || Předdefinovaná sada legend. Přepíše automatickou sadu legend. |
| štítky | boolean / objekt | Ne | false &#124; true &#124; object properties: fontSize (integer), color (hex string), strong (boolean), italic (boolean) | Zobrazit štítky na mapě |
| width | celé číslo | Ne || Šířka mapy |
| height | celé číslo | Ne || Výška mapy |
| userOrgUnit | řetězec / pole | Ne || Identifikátory organizačních jednotek přepisují organizační jednotky spojené s aktuálním uživatelem, jedním nebo polem |

We continue by adding one pre-defined and one dynamically configured map
to our HTML document. You can browse the list of available maps using
the Web API here: <http://play.dhis2.org/demo/api/33/maps>.

```javascript
function setLinks() {
  DHIS.getMap({ url: base, el: "map1", id: "ytkZY3ChM6J" });

  DHIS.getMap({
 url: base,
 el: "map2",
 mapViews: [
   columns: [ // Chart series
  columns: [{dimension: "in", items: [{id: "Uvn6LCg7dVU"}]}], // data
   ],
   rows: [ // Chart categories
  rows: [{dimension: "ou", items: [{id: "LEVEL-3"}, {id: "ImspTQPwCqd"}]}], // organisation units
   ],
   filters: [
  filters: [{dimension: "pe", items: [{id: "LAST_3_MONTHS"}]}], // period
   ],
   // All following options are optional
   classes: 7,
   colorLow: "02079c",
   colorHigh: "e5ecff",
   opacity: 0.9,
   legendSet: {id: "fqs276KXCXi"}
 ]
  });
}
```

Finally we include some *div* elements in the body section of the HTML
document with the identifiers referred to in the plug-in JavaScript.

```html
<div id="map1"></div>
<div id="map2"></div>
```

Chcete-li vidět kompletní pracovní příklad, navštivte
<http://play.dhis2.org/portal/map.html>.

