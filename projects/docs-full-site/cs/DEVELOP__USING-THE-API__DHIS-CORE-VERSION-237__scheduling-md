---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.37/src/developer/web-api/scheduling.md"
revision_date: '2021-10-26'
tags:
- Vývoj
- DHIS core verze 2.37
---

# Plánování { #webapi_scheduling } 

DHIS2 umožňuje plánování úloh různých typů. Každý typ úlohy má různé vlastnosti pro konfiguraci, což vám dává lepší kontrolu nad tím, jak jsou úlohy spouštěny. Kromě toho můžete nakonfigurovat stejnou úlohu tak, aby běžela s různými konfiguracemi a v případě potřeby v různých intervalech.



Tabulka: Hlavní vlastnosti

| Vlastnictví | Popis | Typ |
|---|---|---|
| název | Název jobu. | Řetězec |
| cronExpression | Výraz cron, který definuje interval, kdy se má úloha spustit. | Řetězec (výraz Cron) |
| jobType | Typ úlohy představuje, která úloha je spuštěna. V další tabulce můžete získat přehled stávajících typů pracovních míst. Každý typ úlohy může mít specifickou sadu parametrů pro konfiguraci úlohy. | Řetězec (výčet) |
| jobParameters | Parametry úlohy, pokud jsou pro typ úlohy použitelné. | (Viz seznam typů úloh) |
| povoleno | Úlohu lze přidat do systému, aniž by byla naplánována, nastavením `enabled` na hodnotu false v datové části JSON. Tuto možnost použijte, pokud chcete dočasně zastavit plánování úlohy nebo pokud konfigurace úlohy ještě není dokončena. | Boolean |



Table: Available job types

| Job type | Parametry | Param(Type:Default) |
|---|---|---|
| DATA_INTEGRITY | NONE ||
| ANALYTICS_TABLE | * lastYears: Number of years back to include<br> * skipTableTypes: Skip generation of tables<br>Possible values: DATA_VALUE, COMPLETENESS, COMPLETENESS_TARGET, ORG_UNIT_TARGET, EVENT, ENROLLMENT, VALIDATION_RESULT<br> * skipResourceTables: Skip generation of resource tables | * lastYears (int:0)<br> * skipTableTypes (Array of String (Enum):None )<br> * skipResourceTables (Boolean) |
| CONTINUOUS_ANALYTICS_TABLE | * fullUpdateHourOfDay: Hour of day for full update of analytics tables (0-23)<br> * lastYears: Number of years back to include<br> * skipTableTypes: Skip generation of tables<br>Possible values: DATA_VALUE, COMPLETENESS, COMPLETENESS_TARGET, ORG_UNIT_TARGET, EVENT, ENROLLMENT, VALIDATION_RESULT<br> * skipResourceTables: Skip generation of resource tables | * lastYears (int:0)<br> * skipTableTypes (Array of String (Enum):None )<br> * skipResourceTables (Boolean) |
| DATA_SYNC | NONE ||
| META_DATA_SYNC | NONE ||
| SEND_SCHEDULED_MESSAGE | NONE ||
| PROGRAM_NOTIFICATIONS | NONE ||
| MONITORING (Validation rule analysis) | * relativeStart: A number related to date of execution which resembles the start of the period to monitor<br> * relativeEnd: A number related to date of execution which resembles the end of the period to monitor<br> * validationRuleGroups: Validation rule groups(UIDs) to include in job<br> * sendNotification: Set "true" if job should send notifications based on validation rule groups<br> * persistsResults: Set "true" if job should persist validation results | * relativeStart (int:0)<br> * relativeEnd (int:0)<br> * validationRuleGroups (Array of String (UIDs):None )<br> * sendNotification (Boolean:false)<br> * persistsResults (Boolean:false) |
| PUSH_ANALYSIS | * pushAnalysis: The uid of the push analysis you want to run | * pushAnalysis (String:None) |
| PREDICTOR | * relativeStart: A number related to date of execution which resembles the start of the period to monitor<br> * relativeEnd: A number related to date of execution which resembles the start of the period to monitor<br> * predictors: Predictors(UIDs) to include in job | * relativeStart (int:0)<br> * relativeEnd (int:0)<br> * predictors (Array of String (UIDs):None ) |

### Získejte dostupné typy úloh { #get-available-job-types } 

Chcete-li získat seznam všech dostupných typů úloh, můžete použít následující koncový bod:

    GET /api/jobConfigurations/jobTypes

Odpověď obsahuje informace o každém typu úlohy, včetně názvu, typu úlohy, klíče, typu plánování a dostupných parametrů. Typ plánování může být buď `CRON`, což znamená, že úlohy lze naplánovat pomocí výrazu cron s polem `cronExpression`, nebo `FIXED_DELAY`, což znamená, že je možné naplánovat spuštění úloh s pevným zpožděním mezi polem `delay`. Zpoždění pole se udává v sekundách.

Odpověď bude vypadat podobně jako tato:

```json
{
  "jobTypes": [
    {
      "name": "Data integrity",
      "jobType": "DATA_INTEGRITY",
      "key": "dataIntegrityJob",
      "schedulingType": "CRON"
    }, {
      "name": "Resource table",
      "jobType": "RESOURCE_TABLE",
      "key": "resourceTableJob",
      "schedulingType": "CRON"
    }, {
      "name": "Continuous analytics table",
      "jobType": "CONTINUOUS_ANALYTICS_TABLE",
      "key": "continuousAnalyticsTableJob",
      "schedulingType": "FIXED_DELAY"
    }
  ]
}
```

### Vytvořit úlohu { #create-job } 

Chcete-li konfigurovat úlohy, můžete provést požadavek POST na následující prostředek:

    /api/jobConfigurations

Úloha bez parametrů ve formátu JSON vypadá takto:

```json
{
  "name": "",
  "jobType": "JOBTYPE",
  "cronExpression": "0 * * ? * *",
}
```

Příklad úlohy analytické tabulky s parametry ve formátu JSON:

```json
{
  "name": "Analytics tables last two years",
  "jobType": "ANALYTICS_TABLE",
  "cronExpression": "0 * * ? * *",
  "jobParameters": {
    "lastYears": "2",
    "skipTableTypes": [],
    "skipResourceTables": false
  }
}
```

Jako příklad úlohy nabízené analýzy s parametry ve formátu JSON:

```json
{
   "name": "Push anlysis charts",
   "jobType": "PUSH_ANALYSIS",
   "cronExpression": "0 * * ? * *",
   "jobParameters": {
     "pushAnalysis": [
       "jtcMAKhWwnc"
     ]
    }
 }
```

Příklad úlohy s typem plánování `FIXED_DELAY` a 120 sekundovým zpožděním:

```json
{
  "name": "Continuous analytics table",
  "jobType": "CONTINUOUS_ANALYTICS_TABLE",
  "delay": "120",
  "jobParameters": {
    "fullUpdateHourOfDay": 4
  }
}
```

### Získání úlohy { #get-jobs } 

Seznam všech konfigurací úloh:

    GET /api/jobConfigurations

Načtení úlohy:

    GET /api/jobConfigurations/{id}

Datový obsah odpovědi vypadá takto:

```json
{
  "lastUpdated": "2018-02-22T15:15:34.067",
  "id": "KBcP6Qw37gT",
  "href": "http://localhost:8080/api/jobConfigurations/KBcP6Qw37gT",
  "created": "2018-02-22T15:15:34.067",
  "name": "analytics last two years",
  "jobStatus": "SCHEDULED",
  "displayName": "analytics last two years",
  "enabled": true,
  "externalAccess": false,
  "jobType": "ANALYTICS_TABLE",
  "nextExecutionTime": "2018-02-26T03:00:00.000",
  "cronExpression": "0 0 3 ? * MON",
  "jobParameters": {
    "lastYears": 2,
    "skipTableTypes": [],
    "skipResourceTables": false
  },
  "favorite": false,
  "configurable": true,
  "access": {
    "read": true,
    "update": true,
    "externalize": true,
    "delete": true,
    "write": true,
    "manage": true
  },
  "lastUpdatedBy": {
    "id": "GOLswS44mh8"
  },
  "favorites": [],
  "translations": [],
  "userGroupAccesses": [],
  "attributeValues": [],
  "userAccesses": []
}
```

### Aktualizovat úlohu { #update-job } 

Aktualizujte úlohu s parametry pomocí následujícího formátu koncového bodu a datového obsahu JSON:

    PUT /api/jobConfiguration/{id}

```json
{
  "name": "analytics last two years",
  "enabled": true,
  "cronExpression": "0 0 3 ? * MON",
  "jobType": "ANALYTICS_TABLE",
  "jobParameters": {
    "lastYears": "3",
    "skipTableTypes": [],
    "skipResourceTables": false
  }
}
```

### Smazat úlohu { #delete-job } 

Smazat úlohu pomocí:

    DELETE /api/jobConfiguration/{id}

Některé úlohy s vlastními konfiguračními parametry nemusí být přidány, pokud nejsou nakonfigurována požadovaná nastavení systému. Příkladem toho je synchronizace dat, která vyžaduje konfiguraci vzdáleného serveru.

## Synchronizace { #webapi_synchronization } 

Tato část pojednává o stahování a odesílání dat a metadat.

### Push datové hodnoty { #webapi_sync_data_push } 

Chcete-li zahájit odeslání datové hodnoty na vzdálený server, musíte nejprve nakonfigurovat adresu URL a přihlašovací údaje pro příslušný server v části Nastavení systému > Synchronizace, poté provést požadavek POST na následující prostředek:

    /api/33/synchronization/dataPush

### Stahování metadat { #webapi_sync_metadata_pull } 

Chcete-li zahájit načítání metadat ze vzdáleného dokumentu JSON, můžete provést požadavek POST s *url* jako datovou částí požadavku na následující prostředek:

    /api/33/synchronization/metadataPull

### Kontrola dostupnosti { #webapi_sync_availability_check } 

Chcete-li zkontrolovat dostupnost vzdáleného datového serveru a ověřit pověření uživatele, můžete odeslat požadavek GET na následující prostředek:

    /api/33/synchronization/availability

