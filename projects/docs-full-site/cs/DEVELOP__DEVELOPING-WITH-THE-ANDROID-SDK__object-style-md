---
edit_url: "https://github.com/dhis2/dhis2-android-sdk/blob/master/docs/content/developer/object-style.md"
revision_date: '2024-05-06'
tags:
- Vývoj
---

# Object style { #android_sdk_object_style }

Některé prvky zahrnují vlastnost nazvanou "styl", která definuje ikonu a barvu. Tyto vizuální informace jsou velmi užitečné pro rychlou navigaci v aplikaci. Některé typické případy použití:

- Rozlišujte různé programy a trackedEntityTypes v seznamu programů.
- Ve formulářích pro zadávání dat s optionSet zobrazte volby s ikonami a barvami místo jmen.
- Různé programStages v rámci programu.

Tato vlastnost je volitelná a ve většině případů není definována. Styl objektu může mít ikonu nebo barvu nebo obojí.

## Ikona { #icon } 

DHIS2 includes a predefined set of icons. Those icons are included in the SDK and are located within the resources, in the "drawable" folder.

Staring on version v41, it is possible to upload user-defined icons and assign them to metadata objects. The actual images of these icons are stored as a FileResource and must be explicitly downloaded in a separate query.

```kt
d2.fileResourceModule().fileResourceDownloader()
    .byDomainType().eq(FileResourceDomainType.ICON)
    .download()
```

You can get the information about a particular icon by using the IconCollectionRepository. It returns an Icon object, which is a sealed class with two possible values: Default or Custom.  

The way to render the actual image will depend on the Icon type.

```kt

val icon = d2.iconModule().icons().key("icon_key").blockingGet()

icon?.let {
    when (icon) {
        is Icon.Custom -> {
            val path = icon.path
            val fileResourceUid = icon.fileResourceUid
            // Use this information to load the file
        }

        is Icon.Default -> {
            val resourceName = icon.key
            // Use this information to load the resource
        }
    }
}
```

## Barva { #color } 

Obsahuje hexadecimální hodnotu barvy. Lze jej použít k přizpůsobení pozadí, barvy textu, nadpisů řádků atd.

```kt
program.style().color()    // For example #9C33FF
```

