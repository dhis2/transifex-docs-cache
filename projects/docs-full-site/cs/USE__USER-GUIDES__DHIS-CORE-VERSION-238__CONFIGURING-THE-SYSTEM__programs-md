---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/2.38/src/user/configure-programs-in-the-maintenance-app.md"
revision_date: '2024-01-03'
tags:
- DHIS core version 2.38
- Použití
---

# Konfigurace programů v aplikaci Údržba { #configure_programs_in_maintenance_app } 

## O programech { #about_program_maintenance_app } 

Traditionally, public health information systems have been reporting
aggregated data of service provision across its health programs. This
does not allow you to trace the people provided with these services. In
DHIS2, you can define your own programs with stages. These programs are
a essential part of the "tracker" functionality which lets you track
individual records. You can also track other ‘entities’ such as wells or
insurances. You can create two types of programs:



Tabulka: Typy programů

| Typ programu | Popis | Příklady použití |
|---|---|---|
| Program akce | Single event *without* registration program (anonymous program or SEWoR)<br> <br>Anonymous, individual events are tracked through the health system. No person or entity is attached to these individual transactions.<br> <br>Has only one program stage. | Zaznamenávat zdravotní případy bez registrace jakýchkoli informací do systému. <br> <br> K záznamu dat průzkumu nebo seznamu sledovacích linií. |
| Tracker program | Single event *with* registration program (SEWR)<br> <br>An entity (person, commodity, etc.) is tracked through each individual transaction with the health system<br> <br>Has only one program stage.<br> <br>A tracked entity instance (TEI) can only enroll in the program once. | Zaznamenat rodný list a úmrtní list. |
|| Multi events *with* registration program (MEWR)<br> <br>An entity (person, commodity, etc.) is tracked through each individual transaction with the health system<br> <br>Has multiple program stages. | Program pro zdraví matky s fázemi jako návštěva ANC (2-4+), porod, návštěva PNC. |

To create a program, you must first configure several types of metadata
objects. You create these metadata objects in the **Maintenance** app.



Tabulka: Naprogramujte objekty metadat v aplikaci Údržba

| Typ objektu | Popis | Dostupné funkce |
|---|---|---|
| Program akce | Program pro záznam jedné události bez registrace | Vytvářejte, upravujte, sdílejte, odstraňujte, zobrazujte podrobnosti a překládejte |
| Tracker program | Program pro záznam jedné nebo více událostí s registrací | Vytvářejte, upravujte, sdílejte, odstraňujte, zobrazujte podrobnosti a překládejte |
| Indikátor programu | Výraz na základě datových prvků a atributů sledovaných entit, které používáte k výpočtu hodnot na základě vzorce. | Vytvářejte, upravujte, klonujte, sdílejte, odstraňujte, zobrazujte podrobnosti a překládejte |
| Pravidlo programu | Umožňuje vytvářet a řídit dynamické chování uživatelského rozhraní v aplikacích **Tracker Capture** a **Event Capture**. | Vytvářejte, upravujte, klonujte, odstraňujte, zobrazujte podrobnosti a překládejte |
| Proměnná pravidla programu | Proměnné, které používáte k vytváření výrazů pravidla programu. | Vytvářejte, upravujte, klonujte, odstraňujte, zobrazujte podrobnosti a překládejte |
| Typ vztahu | Definuje vztah mezi sledovanou entitou A a sledovanou entitou B, například matkou a dítětem. | Vytvářejte, upravujte, klonujte, sdílejte, odstraňujte, zobrazujte podrobnosti a překládejte |
| Typ trasované entity | Types of entities which can be tracked through the system. Can be anything from persons to commodities, for example a medicine or a person.<br> <br>A program must have one tracked entity. To enrol a tracked entity instance into a program, the tracked entity of an entity and tracked entity of a program must be the same.<br>      <br>    **Note**<br>     <br>    A program must be specified with only one tracked entity. Only tracked entity as same as the tracked entity of program can enroll into that program. | Vytvářejte, upravujte, klonujte, sdílejte, odstraňujte, zobrazujte podrobnosti a překládejte |
| Atribut trasované entity | Používá se k registraci dalších informací pro trasovanou entitu. <br> <br> Lze sdílet mezi programy. | Vytvářejte, upravujte, klonujte, sdílejte, odstraňujte, zobrazujte podrobnosti a překládejte |
| Program | Program se skládá z fází programu. | Vytvářejte, upravujte, sdílejte, odstraňujte, přiřazujte organizačním jednotkám, zobrazujte podrobnosti a překládejte |
| Programová fáze | Fáze programu definuje, jaké akce by měly být v každé fázi provedeny. | Vytvářejte, upravujte, sdílejte, měňte pořadí řazení, mazejte, zobrazujte podrobnosti a překládejte |
| Skupina indikátorů programu | Skupina indikátorů programu | Vytvářejte, upravujte, klonujte, sdílejte, odstraňujte, zobrazujte podrobnosti a překládejte |
| Pravidlo ověření | Pravidlo ověření je založeno na výrazu, který definuje vztah mezi hodnotami datových prvků. | Vytvářejte, upravujte, klonujte, sdílejte, odstraňujte, zobrazujte podrobnosti a překládejte |
| Oznámení programu | Automatické připomenutí zpráv <br> <br> Nastavte připomenutí, která se mají automaticky zasílat zaregistrovaným instancím trasovaných entit před plánovanými schůzkami a po zmeškaných návštěvách. | Vytvářejte, upravujte a odstraňujte |
| Oznámení fáze programu | Automatické připomenutí zprávy <br> <br> Nastavte připomenutí, která se mají automaticky odeslat po dokončení fáze programu nebo před nebo po datu platnosti. | Vytvářejte, upravujte a odstraňujte |

## Konfigurace programů událostí v aplikaci Údržba { #configure_event_program_in_maintenance_app } 

### O programech událostí { #about_event_program } 

Single event *without* registration programs are called event programs.
You configure them in the **Maintenance** app. Event programs can have
three types of data entry forms:



Tabulka: Typy formulářů pro zadávání dat pro programy událostí

| Typ formuláře | Popis |
|---|---|
| Základní | Vypíše všechny datové prvky, které patří do programu. Pořadí datových prvků můžete změnit. |
| Sekce | Sekce seskupuje datové prvky. Poté můžete uspořádat pořadí sekcí a vytvořit požadované rozložení formuláře pro zadávání dat. |
| Vlastní | Definuje formulář pro zadávání dat jako stránku HTML. |

> **Poznámka**
>
> - Vlastní formuláře mají přednost před oddílovými formuláři, pokud jsou oba
> v současnosti.
>
> - Pokud není definován žádný vlastní nebo oddílový formulář, bude použit 
>   základní formulář
>
> - Aplikace pro Android podporují pouze formuláře oddílů.

You can create *program notifications* for event programs. The
notifications are sent either via the internal DHIS2 messaging system,
via e-mail or via text messages (SMS). You can use program notifications
to, for example, send an automatic reminder to a tracked entity 10 days
before a scheduled appointment. You use the program’s tracked entity
attributes (for example first name) and program parameters (for example
enrollment date) to create a notification template. In the
**Parameters** field, you'll find a list of available tracked entity
attributes and program parameters.

### Pracovní postup: Vytvořte program událostí { #workflow_event_program } 

1.  Zadejte podrobnosti programu události.

2.  Přiřaďte datové prvky.

3.  Vytvořte formulář(e) pro zadávání údajů: **Základní**, **Sekce** nebo **Vlastní**.

4.  Přiřaďte program organizační jednotce(kám).

5.  Vytvořte oznámení o programu(ech).

### Vytvořte nebo upravte program události { #create_event_program } 

#### Zadejte podrobnosti o programu události { #enter-event-program-details } 

1.  Otevřete aplikaci **Údržba** a klikněte na **Program** \> **Program**.

2.  Klikněte na tlačítko Přidat a v rozbalovací nabídce vyberte **Program událostí**.

3.  Zadejte podrobnosti o programu a klikněte na další.


    | Field | Description |
    |---|---|
    | **Name** | The name of the program. |
    | **Color** | Color used for this program in the data capture apps. |
    | **Icon** | Icon used for this program in the data capture apps. |
    | **Short name** | A short name of the program. The short name is used as the default chart or table title in the analytics apps. |
    | **Description** | A detailed description of the program. |
    | **Version** | The version of the program. This is used for example when people collect data offline in an Android implementation. When they go online and synchronize their metadata, they should get the latest version of the program. |
    | **Category combination** | The category combination you want to use. The default setting is **None**. |
    | **Open days after category option end date** | If you selected a category combination other than None, you may enter zero or a positive number. This lets you enter data for this program for a category option up to the specified number of days after that category option's end date.    |
    | **Data approval workflow** | The data approval workflow you want to use. The default setting is **No value**. |
    | **Completed events expiry date** | Defines the number of days for which you can edit a completed event. This means that when an event is completed and the specified number of expiry days has passed, the event is locked.<br>     <br>If you set "Completed events expiry days" to 10", an event is locked ten days after the completion date. After this date you can no longer edit the event. |
    | **Expiry period type**<br>     <br>**Expiry days** | The expiry days defines for how many days after the end of the previous period, an event can be edited. The period type is defined by the expiry period type. This means that when the specified number of expiry days has passed since the end date of the previous period, the events from that period are locked.<br>     <br>If you set the expiry type to "Monthly" and the expiry days to "10" and the month is October, then you can't add or edit an event to October after the 10th of November. |
    | **Block entry form after completed** | Select checkbox to block the entry form after completion of the event of this program.<br>     <br>This means that the data in the entry form can't be changed until you reset the status to incomplete. |
    | **Feature type** | Sets whether the program is going to capture a geographical feature type or not. <br>- **None**   Nothing is captured. <br>- **Polygon**   An area is captured. For single event programs the area will be the area representing the event being captured. For tracker programs, the area will represent the area of the enrollment. <br>- **Point**   A point/coordinate is captured. For single event programs the point will be representing the event being captured. For tracker programs, the point will represent the enrollment.      |
    | **Validation strategy** | Sets the server and client side validation requirement. <br><br>Data type validation is always performed regardless of the validation strategy. An integer field is never stored containing text, for example. <br>- **On complete**  This option will enforce required field and error messages to be fixed when completing the event, but the event can be saved to the server without passing these validation requirements. For legacy reasons, this is always the validation strategy for tracker programs, where each data value in the event is stored to the server while entering data. <br>- **On update and insert**   This option will enforce required field validation when saving the event to the server regardless of the completion status. When using this option no events can be stored without passing validations. |
    | **Pre-generate event UID** | Select checkbox to pre-generate unique event id numbers. |
    | **Description of report date** | Type a description of the report date.<br>     <br>This description is displayed in the case entry form. |

1.  Klikněte na další.

#### Přiřaďte datové prvky { #assign_data_elements } 

1.  Klikněte na **Přiřadit datové prvky**.

2.  V seznamu dostupných položek poklepejte na datové prvky, které máte
    chcete přiřadit k programu akce.

3.  (Volitelné) Pro každý datový prvek přidejte další nastavení:


    | Setting | Description |
    |---|---|
    | **Compulsory** | The value of this data element must be filled into data entry form before you can complete the event. |
    | **Allow provided elsewhere** | Specify if the value of this data element comes from other facility, not in the facility where this data is entered. |
    | **Display in reports** | Displays the value of this data element into the single event without registration data entry function. |
    | **Date in future** | Will allow user to select a date in future for date data elements. |
    | **Mobile render type** | Can be used to select different render types for mobile devices. Available options vary depending on the data element's value type. For example, for a numerical value you may select "Default", "Value", "Slider", "Linear scale", and "Spinner". |
    | **Desktop render type** | WARNING: NOT IMPLEMENTED YET.<br>     <br>Can be used to select different render types for desktop (i.e. the web interface). Available options vary depending on the data element's value type. For example, for a numerical value you may select "Default", "Value", "Slider", "Linear scale", and "Spinner". |

4.  Klikněte na další.

#### Vytvořte formuláře pro zadávání údajů { #create_data_entry_forms } 

Formuláře pro zadávání údajů rozhodují o tom, jak se datové prvky zobrazí uživateli v aplikaci **Zachycení Události**.

1.  Klikněte na **Vytvořit formulář pro zadávání údajů**.

2.  Klikněte na **Základní**, **Sekce** nebo **Vlastní**.

3.  Vytvoření **základního** formuláře pro zadávání dat: Přetáhněte data
    prvky v požadovaném pořadí.

4.  Vytvoření formuláře pro zadávání údajů **Sekce**:

    1.  Klikněte na tlačítko Přidat a zadejte název sekce, popis a
        typ vykreslení pro stolní a mobilní zařízení.

    2.  Klikněte na část, aby byla zvýrazněna černou čarou.

    3.  Přidejte datové prvky kliknutím na znaménko plus vedle dat
        názvy prvků.

    4.  Opakujte výše uvedené kroky, dokud nenajdete všechny sekce, které potřebujete.

    5.  Změňte pořadí sekcí: klikněte na nabídku možností a poté přetáhněte
        sekci na požadované místo.

5.  Chcete -li vytvořit **vlastní** záznam dat z: Pomocí editoru WYSIWYG
    create a completely customized form. If you select **Source**, you
    can paste HTML code directly in the editing area. You can also
    vkládejte obrázky, například vlajky nebo loga.

6.  Klikněte na další.

#### Přístup { #access } 

Access options decide who can capture data for the program or view/edit
the program's metadata. A program can be shared to organisation units,
and in addition, the main program and any program stages' access options
can be configured through the **Sharing dialog**. Access options are
available in the **Access** tab.

Přiřadit organizační jednotky:

1.  In the organisation tree, double-click the organisation units you
    want to add to the program to.

    You can locate an organisation unit in the tree by expanding the
    branches (click on the arrow symbol), or by searching for it by
    název. Vybrané organizační jednotky se zobrazí oranžově.

Změnit role a přístup:

1.  Přejděte dolů do části **Role a přístup**.

    The first row shows the main program's access options, and each
    subsequent row shows the options of one program stage. Program
    stages with a warning icon (exclamation mark) contain access options
    that deviate from the main program, meaning they are accessed by a
    different combination of users.

2.  Klikněte na jeden z řádků a zobrazí se **dialogové okno sdílení**.

3.  Modify the access options accordingly. See documentation on the
    podrobnosti o sdílení.

4.  Klikněte na tlačítko **Použít**.

5.  Opakujte postup pro každý program / fázi programu. Můžete také kopírovat
    all access options from the main program to your child programs:

    1.  Vyberte fáze programu, ke kterým chcete mít podobný přístup
        options as the main program by toggling the checkboxes on the
        right hand side of the program stages. You can also choose to
        **Select all** program stages, **Deselect all** program stages
        or **Select similar** stages, in terms of access options, to
        hlavního programu. Ve výchozím nastavení jsou podobné fáze přepnuty.

    2.  Klikněte na **Použít na vybrané fáze**

#### Vytvářejte oznámení o programu { #create_program_notifications } 

1.  Vytvořte zprávu, kterou chcete odeslat:

    1.  Klikněte na **Co poslat?**.

    2.  Zadejte **Název**.

    3.  Create the **Subject template**: Double-click the parameters in
        the **Template variables** field to add them to your subject.

        > **Note**
        >
        > The subject is not included in text messages.

    4.  Create the **Message template**: Double-click the parameter
        names in the **Template variables** list to add them to your
        message.

        Vážený uživateli A{w75KJ2mc4zz}, jste nyní zapsán do programu V{program\_name}.

2.  Define *when* you want to send the message:

    1.  Klikněte na **Kdy jej odeslat?**.

    2.  Vyberte **spouštěč oznámení**.


        | Notification trigger | Description |
        |---|---|
        | Program stage completion | The program stage notification is sent when the program stage is completed |
        | Days scheduled (due date) | The program stage notification is sent XX number of days before or after the due date<br>         <br>You need to enter the number of days before or after the scheduled date that the notification will be sent. |

3.  Define *who* you want to send the message to:

    1.  Klikněte na **Komu to poslat?**.

    2.  Vyberte **příjemce oznámení**.


        | Notification recipient | Description |
        |---|---|
        | Tracked entity instance | Receives program notifications via e-mail or text message.<br>         <br>To receive a program notification, the recipient must have an e-mail address or a phone number attribute. |
        | Organisation unit contact | Receives program notifications via e-mail or text message.<br>         <br>To receive a program notification, the receiving organisation unit must have a registered contact person with e-mail address and phone number. |
        | Users at organisation unit | All users registered to the selected organisation unit receive program notifications via the internal DHIS2 messaging system. |
        | User group | All members of the selected user group receive the program notifications via the internal DHIS2 messaging system |
        | Program | TBA |

    3.  Click **Save**.

4.  Opakováním výše uvedených kroků vytvořte všechna programová oznámení, která potřebujete.

5.  Klikněte **Uložit**.

> **Note**
>
> You configure when the program notifications are sent in the **Data
> Administration** app \> **Scheduling** \> **Program notifications
> scheduler**.
>
>   - Click **Run now** to send the program notifications immediately.
>
>   - Select a time and click **Start** to schedule the program
>     notifications to be send at a specific
time.

### Referenční informace: Parametry oznámení programu { #reference_information_event_program_notification_parameters } 



Tabulka: Parametry oznámení programu, které se mají použít v oznámeních programu

| Typ oznámení | Proměnný název | Variabilní kód |
|---|---|---|
| Program | Aktuální datum | `V{current_date}` |
|| Dny od data zápisu | `V{days_since_enrollment_date}` |
|| Datum zápisu | `V{enrollment_date}` |
|| Datum incidentu | `V{incident_date}` |
|| Název organizační jednotky | `V{org_unit_name}` |
|| Název programu | `V{program_name}` |
| Programová fáze | Aktuální datum | `V{current_date}` |
|| Dny od data vypršení platnosti | `V{days_since_due_date}` |
|| Dny do vypršení platnosti | `V{days_until_due_date}` |
|| Datum ukončení platnosti | `V{due_date}` |
|| Název organizační jednotky | `V{org_unit_name}` |
|| Název programu | `V{program_name}` |
|| Název fáze programu | `V{program_stage_name}` |
|| Stav události | `V{event_status}` |


## Konfigurace trasovacích programů v aplikaci Údržba { #configure_tracker_program_in_Maintenance_app } 

### O Trasovacích programech { #about-tracker-programs } 
Single or multiple event programs *with* registration are called Tracker programs. A program must be specified with only one tracked entity. Only tracked entities that are the same as the tracked entity of program can enroll into that
program. A program needs several types of metadata that you create in the **Maintenance** apps.

### Pracovní postup: Vytvořte trasovací program { #workflow_tracker_program } 

1.  Zadejte podrobnosti o programu trasovače.

2.  Zadejte podrobnosti registrace.

3.  Přiřaďte atributy a vytvořte **sekci** nebo **vlastní** registrační formulář.

4. Vytvářejte programové fáze.

5. Nakonfigurujte přístup a přiřaďte jej k organizačním jednotkám.

6. Vytvořte oznámení o programu a fázi(ích) programu.

### Vytvořte nebo upravte program Trasovač { #create-or-edit-a-tracker-program } 

1. Otevřete aplikaci **Údržba** a klikněte na **Program** \> **Program**.

2. Klikněte na tlačítko Přidat a v rozbalovací nabídce vyberte **Tracker Program**.

#### Zadejte podrobnosti o programu { #tracker_enter_programs_details } 

| Pole | Popis |
|---|---|
| **Název** | Název programu. |
| **Barva** | Barva použitá pro tento program v Tracker capture. |
| **Ikona** | Ikona použitá pro tento program v zachycení Trackerem |
| **Krátký název** |  Krátký název programu. Krátký název se používá jako výchozí název grafu nebo tabulky v analytických aplikacích.  |
| **Popis** | Podrobný popis programu. |
| **Verze** |  Verze programu. To se používá například, když lidé shromažďují data offline v implementaci Android. Když se připojí k internetu a synchronizují svá metadata, měli by získat nejnovější verzi programu.  |
| **Typ trasované entity** |  Typ trasované entity, který chcete použít. Program může mít pouze jeden typ sledované entity.  |
| **Kombinace kategorií** |  Kombinace kategorií, kterou chcete použít. Výchozí nastavení je **Žádné**.  |
| **Dny otevření po datu ukončení možnosti kategorie** | Pokud jste vybrali jinou kombinaci kategorií než Žádná, můžete zadat nulu nebo kladné číslo. To vám umožní zadávat data pro tento program pro volbu kategorie až do zadaného počtu dní po datu ukončení dané kategorie.    |
| **Zobrazit seznam úvodní stránky** |  Zaškrtnutím políčka zobrazíte seznam instancí trasovaných entit v aplikaci Tracker Capture. Pokud není vybráno, zobrazí se hledání.  |
| **První fáze se objeví na registrační stránce** |  Zaškrtnutím políčka zobrazíte první fázi programu spolu s registrací (zápisem).  |
| **Úroveň přístupu** | Vyberte úroveň přístupu k programu. |
| **Dny vypršení platnosti dokončených událostí** |  Definuje počet dní, po které můžete upravit dokončenou událost. To znamená, že po dokončení události a uplynutí zadaného počtu dnů vypršení platnosti je událost uzamčena. <br> <br> Pokud nastavíte "Dny vypršení platnosti dokončených událostí" na 10", událost se uzamkne deset dní po datu dokončení. Po tomto datu již nelze událost upravovat.  |
| **Typ doby platnosti** <br> <br> **Dny vypršení** |  Dny vypršení platnosti definují, kolik dní po skončení předchozího období lze událost upravit. Typ období je definován typem období vypršení platnosti. To znamená, že když od data ukončení předchozího období uplyne zadaný počet dnů vypršení platnosti, události z tohoto období jsou uzamčeny. <br> <br> Pokud nastavíte typ vypršení na "Měsíčně" a dny vypršení na "10" a měsícem je říjen, nemůžete přidat nebo upravit událost do října po 10. listopadu.  |
| **Minimální počet atributů potřebných k vyhledávání** |  Zadejte počet atributů trasovaných entit, které je třeba vyplnit, aby bylo možné vyhledávat trasované entity v Programu.  |
| **Maximální počet instancí trasovaných entit, které se mají vrátit ve vyhledávání** |  Zadejte maximální počet instancí trasovaných entit, které by měly být vráceny při vyhledávání. Zadejte 0 pro žádný limit.  |

#### Enter enrollment details { #enter_enrollment_details } 

| Pole | Popis |
|---|---|
| **Povolit budoucí data zápisu** |Zaškrtněte políčko, pokud chcete povolit, aby byly instance trasovaných entit zapsány do programu v budoucnu.|
| **Povolit budoucí data incidentů** |Zaškrtněte políčko, pokud chcete povolit, aby datum incidentu v programu bylo na budoucí datum.|
| **Zaregistrujte se pouze jednou (za dobu trvání instance trasované entity)** |Zaškrtněte políčko, pokud chcete, aby se trasovaná entita mohla do programu zapsat pouze jednou. Toto nastavení je užitečné například v programech očkování dětí nebo posmrtných vyšetření, kde by nedávalo smysl zapsat trasovanou entitu více než jednou.|
| **Zobrazit datum incidentu** |Toto nastavení vám umožňuje zobrazit nebo skrýt pole data incidentu, když se trasovaná entita zaregistruje do programu.|
| **Popis data incidentu** | Zadejte popis data incidentu <br> <br> Například: <br> <br> V očkovacím programu pro dítě mladší 1 roku je datem incidentu datum narození dítěte. <br> <br> V mateřském programu je datem události datum poslední menstruace.  |
| **Zadejte popis data registrace** |Datum, kdy je trasovaná entita zaregistrována do programu|
| **Ignorovat události po splatnosti** |Když se trasovaná entita zapíše do programu, vytvoří se události odpovídající fázím programu. Pokud zaškrtnete toto políčko, systém nebude generovat události po splatnosti.|
| **Typ funkce** |Sets whether the program is going to capture a geographical feature type or not. <br> * **None:** Nothing is captured.<br> * **Polygon:** An area is captured. For single event programs the area will be the area representing the event being captured. For tracker programs, the area will represent the area of the enrollment. <br> * **Point:** A point/coordinate is captured. For single event programs the point will be representing the event being captured. For tracker programs, the point will represent the enrollment. |
| **Související program** |Vyberte program Tracker, který souvisí s programem, který vytváříte, například program ANC a Child.|


#### Assign tracked entity attributes. { #assign_tracked_entity_attributes } 

  1. In the list of **Available program tracked entity attributes**, double-click the
        attributes you want to assign to the program.

  2. (Volitelné) Pro každý přiřazený atribut přidejte další nastavení:

| Nastavení | Popis |
|---|---|
| **Zobrazit v seznamu** |                          Displays the value of this attribute in the list of tracked                         entity instances in Tracker capture.                      |
| **Povinné** |                          The value of this attribute must be filled into data entry                         form before you can complete the event.                      |
| **Datum v budoucnu** |                          Will allow user to select a date in future for date                         attributes.                      |
| **Typ vykreslení pro mobilní zařízení** |                          Can be used to select different render types for mobile                         devices. Available options vary depending on the attribute's                         value type. For example, for a numerical value you may                         select "Default", "Value",                         "Slider", "Linear scale", and                         "Spinner".                      |
| **Typ vykreslení pro webové rozhraní** | WARNING: NOT IMPLEMENTED YET.<br>                     <br>                         Can be used to select different render types for desktop                         (i.e. the web interface). Available options vary depending                         on the attribute's value type. For example, for a numerical                         value you may select "Default", "Value",                         "Slider", "Linear scale", and                         "Spinner".                      |

3. Vytvořte registrační formulář

   Registrační formulář definuje, jak se budou atributy zobrazovat uživateli při používání aplikací, jako je Android a Tracker Capture.

    1. Klikněte na **Vytvořit registrační formulář**.

    2. Klikněte na **Sekce** nebo **Vlastní**.

    3. Vytvoření formuláře **Sekce**:

        1. Klikněte na tlačítko Přidat a zadejte název sekce, popis a typ vykreslení pro počítače a mobilní zařízení.
        2. Klikněte na část tak, aby byla zvýrazněna černým okrajem.
        3. Přidejte datové prvky kliknutím na znaménko plus vedle názvu datových prvků, které chcete přidat.
        4. Repeat above steps until you have all the sections you need.
            To change the section order: click the options menu, then drag the section to the place you want.  

    4. Vytvoření **vlastního** registračního formuláře: Pomocí editoru WYSIWYG vytvořte zcela přizpůsobený formulář. Pokud vyberete Zdroj, můžete vložit HTML kód přímo do editační oblasti. Můžete také vložit obrázky, například vlajky nebo loga.

    5. Klikněte na Přidat fázi.


#### Vytvářejte programové fáze { #create_program_stages } 

A program consist of program stages. A program stage defines which
actions should be taken at each stage.

> **Poznámka**
>
> Změny fáze programu se neuloží, dokud program neuložíte.

1. Kliknutím na znaménko plus vytvoříte programovou fázi.
2. Enter program stage details:
    1. Zadejte **Název**.
    2.  (Optional) select a **Color** and an **Icon** that will be used
by the data capture apps to identify this program stage.
    3. Zadejte **popis**.
    4. In the **Scheduled days from start** field, enter the minimum
number of days to wait for starting the program stage.
3. Zadejte opakovatelné podrobnosti fáze programu.
    1. Určete, zda je fáze programu **Opakovatelná** nebo ne.
    2. Vyberte **Typ období**.
    3. Clear **Display generate event box after completed** if you
    don't want to display *Create new event box* to create new event
    for a repeatable stage after you click *Complete* for an event
    fáze ve formuláři pro zadávání údajů. Toto pole je vybráno uživatelem
    default.
    5. Zadejte **standardní intervalové dny**. Počet dní pro opakování programovatelné fáze programu.
    6. (Volitelné) Vyberte **Výchozí další naplánované datum**. Zobrazí se seznam přiřazených datových prvků typu **datum**. Pokud je vybrán prvek, použije jej klient Trasovače jako výchozí počáteční datum. Datový prvek lze pomocí pravidel programu použít k dynamickému plánování intervalů mezi událostmi.
4. Zadejte podrobnosti formuláře


  | Možnost | Akce |
 |---|---|
 | **Automaticky generovat událost** |  Clear check box to prevent creating an event of this program  stage automatically when a entity is enrolled in the program.  |
 | **Otevřít formulář pro zadání dat po zápisu** |  Select check box to automatically open the event of this  stage as soon as the entity has enrolled into the program.  |
 | **Datum zprávy k použití** | If you have selected the  **Open data entry form after enrollment** check  box, also select a **Report date to use**:  **Date of incident** or  **Date of enrollment**.  <br>  This is the date used as report date for an event that has  been opened automatically.  <br>  <br>  If the **Report date to use** is selected as  one of those two ('incident date'/'enrollment date'), in  Dashboard, the 'Report date' of the event will be set as one  of those two.  |
 | **Přiřazení událostí uživateli** |  Select check box to enable user assignment of the program  stage.  <br>  <br>  This means that in Tracker capture there will be a list of  users to which the event can be assigned.  |
 | **Po vyplnění zablokujte vstupní formulář** |  Select check box to block the entry form after completion of  the event of this stage.  <br>  <br>  This means that the data in the entry form can't be changed  until you reset the status to incomplete.  |
 | **Ask user to complete program when stage is   completed** |  Select check box to trigger a pop-up which asks the user if  he/she wants to create the event of next stage.  |
 | **Ask user to create new event when stage is   complete** |  Select check box to trigger a pop-up which asks the users if  he/she wants to create a new event of this stage when an  event of this stage is completed.  <br>  <br>  This property is active only if you have selected  **Repeatable**.  |
 | **Generujte události podle data zápisu** |  Zkontrolujte na něm automatické generování termínů událostí z programových fází tohoto programu na základě data registrace. Pokud není zaškrtnuto, jsou termíny vygenerovány na základě data incidentu.  |
 | **Skrýt termíny platnosti** | Zaškrtnutím políčka skryjete termíny pro události. |
 | **Typ funkce** |  Sets whether the program is going to capture a geographical  feature type or not.  <br>  * **None:** Nothing is captured.<br> * **Polygon:** An area is captured. For single  event programs the area will be the area representing the  event being captured. For tracker programs, the area will  represent the area of the enrollment. <br> * **Point:** A point/coordinate is captured. For  single event programs the point will be representing the  event being captured. For tracker programs, the point will  represent the enrollment. |
 | **Předem vygenerovat UID události** | Chcete-li předem vygenerovat jedinečná ID událostí, zaškrtněte políčko. |
 | **Popis data zprávy** | Type a description of the report date.<br>  <br>This description is displayed in the data entry form. |
 | **Popis termínu platnosti** | Zadejte popis termínu vypršení platnosti. |

5.  Přiřadit datové prvky fázi programu:

    1.  In the list of **Available data elements**, double-click the
        data elements you want to assign to the program stage.

    2.  For each assigned data element, review the properties. You can
        select:


| Možnost | Akce |
|---|---|
| **Povinný** |                      The value of this data element must be filled into data                     entry form before completing the event.                  |
| **Povolit poskytnuto jinde** |                      Specify if the value of this data element comes from other                     facility, not in the facility where this data is entered.                  |
| **Zobrazení v přehledech** |                      Display the value of this data element into the single event                     without registration data entry function.                  |
| **Datum v budoucnu** | Povolit výběr data v budoucnosti pro datové prvky data. |
| **Přeskočit synchronizaci** |                      Allow data element to be skipped when running data                     synchronization jobs.                  |
| **Typ vykreslení pro mobilní zařízení** |                      Can be used to select different render types for mobile                     devices. Available options vary depending on the attribute's                     value type. For example, for a numerical value you may                     select "Default", "Value",                     "Slider", "Linear scale", and                     "Spinner".                  |
| **Typ vykreslení pro webové rozhraní** | WARNING: NOT IMPLEMENTED YET.<br>                 <br>                     Can be used to select different render types for desktop                     (i.e. the web interface). Available options vary depending                     on the attribute's value type. For example, for a numerical                     value you may select "Default", "Value",                     "Slider", "Linear scale", and                     "Spinner".                  |

6. Vytvořte formuláře pro zadávání dat pro fázi programu

    The data entry forms decide how the data elements will be displayed to
    the user in the **Tracker Capture** app.

   1.  Klikněte na **Vytvořit formulář pro zadávání údajů**.

   2.  Klikněte na **Základní**, **Sekce** nebo **Vlastní**.

   3.  Vytvoření **základního** formuláře pro zadávání dat: Přetáhněte data
       prvky v požadovaném pořadí.

   4.  Vytvoření formuláře pro zadávání údajů **Sekce**:

       1.  Klikněte na tlačítko Přidat a zadejte název sekce, popis a
           typ vykreslení pro stolní a mobilní zařízení.

       2.  Klikněte na část, aby byla zvýrazněna černým okrajem.

       3.  Přidejte datové prvky kliknutím na znaménko plus vedle dat
           názvy prvků.

       4.  Opakujte výše uvedené kroky, dokud nenajdete všechny sekce, které potřebujete.

       5.  Změňte pořadí sekcí: klikněte na nabídku možností a poté přetáhněte
           sekci na požadované místo.

   5.  Chcete -li vytvořit **vlastní** záznam dat z: Pomocí editoru WYSIWYG
           create a completely customized form. If you select **Source**, you
           can paste HTML code directly in the editing area. You can also
           insert images for example flags or logos.

   6.  Klikněte na Přidat fázi.


#### Přístup { #tracker_program_access } 

Access options decide who can capture data for the program or view/edit
the program's metadata. A program can be shared to organisation units,
and in addition, the main program and any program stages' access options
can be configured through the **Sharing dialog**. Access options are
available in the **Access** tab.

Přiřadit organizační jednotky:

1.  In the organisation tree, double-click the organisation units you
    want to add to the program to.

    You can locate an organisation unit in the tree by expanding the
    branches (click on the arrow symbol), or by searching for it by
    název. Vybrané organizační jednotky se zobrazí oranžově.

Změnit role a přístup:

1.  Přejděte dolů do části **Role a přístup**.

    The first row shows the main program's access options, and each
    subsequent row shows the options of one program stage. Program
    stages with a warning icon (exclamation mark) contain access options
    that deviate from the main program, meaning they are accessed by a
    different combination of users.

2.  Klikněte na jeden z řádků a zobrazí se **dialogové okno sdílení**.

3.  Modify the access options accordingly. See documentation on the
    podrobnosti o sdílení.

4.  Klikněte na tlačítko **Použít**.

5.  Opakujte postup pro každý program / fázi programu. Můžete také kopírovat
    all access options from the main program to your child programs:

    1.  Vyberte fáze programu, ke kterým chcete mít podobný přístup
        options as the main program by toggling the checkboxes on the
        right hand side of the program stages. You can also choose to
        **Select all** program stages, **Deselect all** program stages
        or **Select similar** stages, in terms of access options, to
        hlavního programu. Ve výchozím nastavení jsou podobné fáze přepnuty.

    2.  Klikněte na **Použít na vybrané fáze**

#### Vytvářejte oznámení o programu { #create_tracker_program_notifications } 

You can create program notifications for programs with registration and
their program stages. The notifications are sent either via the internal
DHIS2 messaging system, via e-mail or via text messages (SMS). You can
use program notifications to, for example, send an automatic reminder to
a tracked entity 10 days before a scheduled appointment. You use the
program’s tracked entity attributes (for example first name) and program
parameters (for example enrollment date) to create a notification
template.


1.  Open the **Maintenance** app and click **Program and then
    notifications**.

    A list of existing program notifications for the selected program
    opens. If the program doesn't have any program notifications, the
    list is empty.

2.  Klikněte na tlačítko Přidat a vyberte **Oznámení programu**.

    ![](resources/images/program/what_to_send.png)
    ![](resources/images/program/where_to_send.png)
    ![](resources/images/program/who_to_send.png)   

3.  Zadejte **Název**.

4.  Vytvořte **šablonu subjektu**.

    Double-click the parameters in the **Parameters** field to add them
    to your subject.

    > **Note**
    >
    > The subject is not included in text messages.

5.  Vytvořte **šablonu zprávy**.

    Double-click the parameter names in the **Parameters** field to add
    them to your message.

    Vážený uživateli A{w75KJ2mc4zz}, jste nyní zapsán do programu V{program\_name}.

6.  In the **When-to-send it** field, select what should trigger the
    notification.


    | Trigger | Description | Note |
    |---|---|---|
    | Program enrollment | The program notification is sent when the TEI enrols in the program. | - |
    | Program completion | The program notification is sent when the program of TEI is completed | - |
    | Days scheduled (incident date) | The program notification is sent XX number of days before or after the incident date | You need to enter the number of days before or after the scheduled date that the notification will be send. |
    | Days scheduled (enrollment date) | The program notification is sent XX number of days before or after the enrollment date | You need to enter the number of days before or after the scheduled date that the notification will be send. |
    | Program Rule | Notification will be triggered as a result of program rule exeuction. | Program rule with ProgramRuleActionType.SENDMESSAGE need to be in place to make this trigger successful. |


7.  In the **Who-to-send-it** field, select who should receive the
    program notification.


    | Recipient type | Description | Note |
    |---|---|---|
    | Tracked entity instance | Receives program notifications via e-mail or text message. | To receive a program notification, the recipient must have an e-mail address or a phone number attribute. |
    | Organisation unit contact | Receives program notifications via e-mail or text message. | To receive a program notification, the receiving organisation unit must have a registered contact person with e-mail address and phone number. |
    | Users at organisation unit: | All users registered to the selected organisation unit receive program notifications via the internal DHIS2 messaging system. | - |
    | User group | All members of the selected user group receive the program notifications via the internal DHIS2 messaging system | - |
    | Limit To Hierarchy | Send notification only to those users who belong to any of the organisation unit in the hierarchy. | This option is only available when User Group is selected as recipient. |
    | Parent OrgUnit Only | Send notification only to those users who belong to parent organisation unit. | This option is only available when User Group is selected as recipient. |
    | Program Attribute | TrackedEntityAttribute can also be selected as recipient. | This parameter will only be effective if TrackedEntityAttribute value type is PHONE_NUMBER/EMAIL. |

8.  Klikněte **Uložit**.


### Vytvořte oznámení o fázi programu { #create-a-program-stage-notification } 

![](resources/images/program/what_to_send-psnt.png)

1.  Open the **Maintenance** app and click **Program and then
    notifications**.

    A list of existing program stage notifications for the selected
    program stage opens. If the program stage doesn't have any program
    stage notifications, the list is empty.

2.  Klikněte na tlačítko Přidat a vyberte **Oznámení fáze programu**.

3.  Klikněte na **Přidat nový**.

4.  Zadejte **Název**.

5.  Vytvořte **šablonu subjektu**.

    Double-click the parameter names in the **Parameters** field to add
    them to your subject.

    > **Note**
    >
    > The subject is not included in text messages.

6.  Vytvořte **šablonu zprávy**.

    Double-click the parameter names in the **Parameters** field to add
    them to your message.

    Dear A{w75KJ2mc4zz}, please come to your appointment the
    V{due\_date}.

7.  In the **When-to-send-it** field, select what should trigger the
    notification.


    | Trigger | Description | Note |
    |---|---|---|
    | Program stage completion | The program stage notification is sent when the program stage is completed | - |
    | Days scheduled (due date) | The program stage notification is sent XX number of days before or after the due date | You need to enter the number of days before or after the scheduled date that the notification will be send. |
    | Program Rule | Notification will be triggered as a result of program rule execution. | Program rule with ProgramRuleActionType.SENDMESSAGE need to be in place to make this trigger successful. |

    1. **Allow notification to be sent multiple times**

        This flag can be used if notification is required to be sent multiple times. For example in case of repeatable program stage, same notification will be sent as many times as the stage is repeated.

8.  In the **Recipients** field, select who should receive the program
    stage notification. You can select:


    | Recipient type | Description | Note |
    |---|---|---|
    | Tracked entity instance | Receives program notifications via e-mail or text message. | To receive a program stage notification, the recipient must have an e-mail address or a phone number attribute. |
    | Organisation unit contact | Receives program notifications via e-mail or text message. | To receive a program stage notification, the receiving organisation unit must have a registered contact person with e-mail address and phone number.<br>     <br>The system selects the same organisation unit as where the event took place. |
    | Users at organisation unit: | All users registered to the selected organisation unit receive program notifications via the internal DHIS2 messaging system. | - |
    | User group | All members of the selected user group receive the program notifications via the internal DHIS2 messaging system | - |
    | Limit To Hierarchy | Send notification only to those users who belong to any of the organisation unit in the hierarchy. | - |
    | Parent OrgUnit Only | Send notification only to those users who belong to parent organisation unit. | - |
    | Data Element | Data Element associated with ProgramStage can be selected as recipient. | Data Element will only be effective if DataElement has value type PHONE_NUMBER/EMAIL. |
    | Tracked Entity Attribute | Tracked Entity Attribute associated with ProgramInstance/Enrollment can be selected as recipient. | Attribute will only be effective if it has value type PHONE_NUMBER/EMAIL. |


10.  Klikněte **Uložit**.


### Referenční informace: Parametry oznámení programu { #reference_information_event_program_notification_parameters } 



Tabulka: Parametry oznámení programu, které se mají použít v oznámeních programu

| Typ oznámení | Proměnný název | Variabilní kód |
|---|---|---|
| Program | Aktuální datum | `V{current_date}` |
|| Dny od data zápisu | `V{days_since_enrollment_date}` |
|| Datum zápisu | `V{enrollment_date}` |
|| Datum incidentu | `V{incident_date}` |
|| Název organizační jednotky | `V{org_unit_name}` |
|| Název programu | `V{program_name}` |
| Programová fáze | Aktuální datum | `V{current_date}` |
|| Dny od data vypršení platnosti | `V{days_since_due_date}` |
|| Dny do vypršení platnosti | `V{days_until_due_date}` |
|| Datum ukončení platnosti | `V{due_date}` |
|| Název organizační jednotky | `V{org_unit_name}` |
|| Název programu | `V{program_name}` |
|| Název fáze programu | `V{program_stage_name}` |
|| Organizační jednotka události | `V{event_org_unit_id}` |
|| Organizační jednotka zápisu | `V{enrollment_org_unit_id}` |
|| ID fáze programu | `V{program_stage_id}` |
|| ID programu | `V{program_id}` |
|| ID instance programu / ID registrace | `V{enrollment_id}` |
|| ID trasované entity | `V{tracked_entity_id}` |
|| Datum události / provedení | `V{event_date}` |

## Nakonfigurujte indikátory programu { #configure_program_indicator } 

### O indikátorech programu { #about_program_indicators } 

Programové indikátory jsou výrazy založené na datových prvcích a atributech sledovaných entit, které lze použít k výpočtu hodnot na základě vzorce. Programové indikátory se skládají z typu agregace, typu analýzy, výrazu a filtru.

Program indicators are evaluated based on the assigned aggregation type,
expression and filter. The order of evaluation is:

1.  The *filter* will filter the events which become part of the
    evaluation/aggregation routine.

2.  The *expression* will be evaluated per event.

3.  All evaluated expression values will be *aggregated* according to
    the aggregation type of the program indicator.



Tabulka: Komponenty indikátoru programu

| Komponenta programového pravidla | Popis |
|---|---|
| Typ agregace | The aggregation type determines how the program indicator will be aggregated. The following aggregation types are available:<br> * Average<br> * Average (number)<br> * Average (number, disaggregation)<br> * Average (sum in organisation unit hierarchy)<br> * Average (sum of numbers)<br> * Average (sum of numbers, disaggregation)<br> * Average (Yes/No)<br> * Count<br> * Custom<br> The "custom" aggregation type allows you to specify the aggregation type in-line in the expression. All other aggregation types are applied to the entire expression.<br> Using the "custom" aggregation type might lead to an exception of the order of evaluation described above where individual parts of the expression can be evaluated and aggregated, as opposed to the entire expression being evaluated prior to aggregation.<br> * Default<br> * Max<br> * Min<br> * None<br> * Standard deviation<br> * Sum<br> * Variance |
| Typ Analytiky | The available analytics types are *event* and *enrollment*.<br> <br>The analytics type defines whether the program indicator is calculated based on events or program enrollments. This has an impact on what type of calculations can be made.<br> * Events implies a data source where each event exists as an independent row. This is suitable for performing aggregations such as counts and sums.<br> * Enrollments implies a data source where all events for a single enrollment is combined on the same row. This allows for calculations which can compare event data from various program stages within a program enrollment. |
| Hranice období Analytiky | Defines the boundaries for the program indicator calculation. The boundaries determine which events or enrollments gets included in aggregations, always relative to the aggregate reporting period start and end. When creating the program indicator, the default boundaries will get preselected based on analytics type.<br> * For analytics type *event*, the default boundaries will be configured to encapsulate any events with an event date after the reporting period starts and before the reporting period ends.<br> * For analytics type *enrollment*, the default boundaries will encapsulate all enrollments with an enrollment date after the reporting date starts and before the reporting period ends. In addition, the default enrollment program indicator evaluates the newest event for all program stages regardless of date.<br> <br>It is possible to change the upper and lower boundaries to include a longer or shorter period relative to the reporting period, or delete one of the boundaries - in effect returning all data before or after a certain period. It is also possible to add more constraints, for example to make an enrollment program indicator only include event data up to a given point in time.<br> * Boundary target: Can be *incident date*, *event date*, *enrollment date* or *custom*. Designates what is being constrained by the boundary.<br> <br> *custom* is used make boundary that target either a date data element, tracked entity attribute or the presence of an event in a program stage. This is done with a custom expression on the form:<br> - Data element of type date: #{programStageUid.dataElementUid}.<br> `#{A03MvHHogjR.a3kGcGDCuk6}` <br> - Tracked entity attribute of type date: #{attributeUid}.<br> `A{GPkGfbmArby}` <br> - Presence of one event in a specific program stage: PS_EVENTDATE:programStageUid.<br> `PS_EVENTDATE:A03MvHHogjR`  <br> **Note**  This boundary target is only applicable to  Analytics type Enrollment <br> * Analytics period boundary type: Defines whether the boundary is an end boundary - starting with "before...", or a start boundary - "after...". Also defines whether the boundary relates to the end of the aggregate reporting period or the start of the aggregate reporting period.<br> * Offset period by amount: In some cases, for example cohort analytics, the boundary should be offset relative to the aggregate reporting period when running pivots and reports. The offset period by amount is used to move the current boundary either back(negative) or forward(positive) in time. The amount and period type together will determine how big the offset will be. An example can be when making a simple enrollment cohort program indicator for a 1 year cohort, it might be enough to offset each boundary of the program indicator with "-1" and "Years"<br> * Period type: See above. Can be any period, e.g. *Weekly* or *Quarterly*. |
| Výraz | The expression defines how the indicator is being calculated. The expression can contain references to various entities which will be substituted with a related values when the indicator is calculated:<br> * Data elements: Will be substituted with the value of the data element for the time period and organisation unit for which the calculation is done. Refers to both program stage and data element.<br> * Attributes: Will be substituted with the value of the attribute for the person / tracked entity for which the calculation is done.<br> * Variables: Will be substituted with special values linked to the program, including incident date and date of enrollment for the person, current date and count of values in the expression for the time period and organisation unit for which the calculation is done.<br> * Constants: Will be substituted with the value of the constant.<br> <br>The expression is a mathematical expression and can also contain operators.<br> <br>For single event programs and tracker programs with analytics type *event*, the expression will be evaluated *per event*, then aggregated according to its aggregation type.<br> <br>For tracker programs with analytics type *enrollment*, the expression will be evaluated *per enrollment*, then aggregated according to its aggregation type. |
| Filtr | Filtr se aplikuje na události a filtruje zdroj dat použitý pro výpočet indikátoru. Tj. filtr se použije na sadu událostí před vyhodnocením výrazu indikátoru. Filtr musí vyhodnotit buď jako true, nebo false. Filtr se aplikuje na každou jednotlivou událost. Pokud se filtr vyhodnotí jako true, událost je zahrnuta později do vyhodnocení výrazu, pokud ne, je ignorována. Filtr může podobně jako výrazy obsahovat odkazy na datové prvky, atributy a konstanty. <br> <br> Filtr indikátoru programu může navíc používat logické operátory. Tyto operátory lze použít k vytvoření logických výrazů, které se nakonec vyhodnotí jako pravdivé nebo nepravdivé. Můžete například tvrdit, že více datových prvků musí mít určitou hodnotu nebo že konkrétní atributy musí mít číselné hodnoty menší nebo větší než konstanta. |

In the **Maintenance** app, you manage the following program indicator
objects:


| Typ objektu | Dostupné funkce |
|---|---|
| Indikátor programu | Vytvářejte, upravujte, klonujte, sdílejte, odstraňujte, zobrazujte podrobnosti a překládejte |
| Skupina indikátorů programu | Vytvářejte, upravujte, klonujte, sdílejte, odstraňujte, zobrazujte podrobnosti a překládejte |

### Vytvořte nebo upravte indikátor programu { #create_program_indicator } 

> **Poznámka**
>
> Indikátor programu patří přesně k jednomu programu.

1.  Open the **Maintenance** app and click **Indicator** \> **Program
    indicator**.

2.  Klikněte na tlačítko Přidat.

3.  Vyberte **Program** a zadejte:

      - **Název**

      - **Krátký název**

      - **Kód**

      - **Barva**

      - **Ikona**

      - **Popis**
4.  Vyberte počet **desetinných míst ve výstupu dat**.

5.  Vyberte **Typ agregace**.

6.  Vyberte a pokud chcete, tak **Zobrazit ve formuláři**.

7.  Přiřaďte jednu nebo více **legend**.

8.  (Optional) Enter a **Category option combination for aggregate data
    export**.

9.  (Optional) Enter an **Attribute option combination for aggregate
    data export**.

10. Vytvořte výraz.

    1.  Klikněte na **Upravit výraz**.

    2.  Create the expression based on mathematical operators and the
        attributes, variables and constants listed to the right.

11. Vytvořte filtr.

    1.  Klikněte na **Upravit filtr**.

    2.  Create the expression based on mathematical operators and the
        attributes, variables and constants listed to the right.

12. Klikněte **Uložit**.

### Vytvořte nebo upravte skupinu indikátorů programu { #create_program_indicator_group } 

1.  Open the **Maintenance** app and click **Indicator** \> **Program
    indicator group**.

2.  Klikněte na tlačítko Přidat.

3.  Zadejte **Název** a **Kód**.

4.  In the list of available program indicators, double-click the
    program indicators you want to assign to your group.

5.  Klikněte **Uložit**.

### Referenční informace: Příklady výrazů a filtrů podle typu hodnoty { #reference_information_program_indicator } 

The table below shows examples of how to write expressions and filters
for different data element and attribute value types:



Tabulka: Příklady výrazů a filtrů podle typu hodnoty

| Typy hodnot | Příklad syntaxe |
|---|---|
| Celé číslo <br> <br> Negativní číslo <br> <br> kladné nebo nulové celé číslo <br> <br> kladné číslo <br> <br> Číslo <br> <br> Procento | Číselná pole, lze použít pro agregaci jako výraz nebo ve filtrech: <br> `#{mCXR7u4kNBW.K0A4BauXJDl} >= 3` |
| Ano/Ne <br> <br> Pouze ano | Booleovská pole. Ano je přeloženo na numerickou 1, Ne na numerickou 0. Lze použít pro agregaci jako výraz nebo ve filtrech: <br> `#{mCXR7u4kNBW.Popa3BauXJss} == 1` |
| Text <br> <br> Dlouhý text <br> <br> Telefonní číslo <br> <br> E-mail | Textová pole. Lze zkontrolovat rovnost ve filtrech: <br> `#{mCXR7u4kNBW.L8K4BauIKsl} == 'LiteralValue'` |
| Datum <br> <br> Věk | Datumová pole. Nejužitečnější v kombinaci s funkcí d2:daysBetween, která vytváří číslo, které lze agregovat jako výraz nebo použít ve filtrech: <br> `d2:daysBetween(#{mCXR7u4kNBW.JKJKBausssl},V{enrollment_date}) > 100` <br> Lze také přímo zkontrolovat rovnost ve filtrech:  <br>`#{mCXR7u4kNBW.JKJKBausssl} == '2011-10-28'` |

### Referenční informace: Funkce, proměnné a operátory pro použití ve výrazech indikátorů programu a filtrech { #program_indicator_functions_variables_operators } 

An expression that includes both attributes, data elements and constants
looks like this:

    (A{GPkGfbmArby} + #{mCXR7u4kNBW.NFkjsNiQ9PH}) * C{bCqvfPR02Im}

An expression which uses the custom aggregation type and hence can use
inline aggregation types looks like
    this:

    (sum(#{mCXR7u4kNBW.K0A4BauXJDl} * #{mCXR7u4kNBW.NFkjsNiQ9PH}) / sum(#{mCXR7u4kNBW.NFkjsNiQ9PH})) * 100

Note how the "sum" aggregation operator is used inside the expression
itself.

#### Funkce pro použití ve výrazu indikátoru programu nebo filtru { #functions-to-use-in-a-program-indicator-expression-or-filter } 

The program indicator expression and filter support a range of
functions. The functions can be applied to data elements and attributes:



Tabulka: Funkce k použití ve výrazu indikátoru programu nebo filtru

| Funkce | Argumenty | Popis |
|---|---|---|
| d2:hasValue | (objekt) | Vrátí hodnotu true, pokud má datový prvek/atribut hodnotu. Lze použít ve filtrech k rozlišení mezi číslem 0 a žádnou hodnotou a k rozlišení mezi explicitním "Ne" a žádným výběrem pro pole Ano/Ne. |
| d2:minutesBetween | (datum a čas, datum a čas) | Vytváří počet minut mezi dvěma datovými prvky / atributy typu „datum a čas“. Když je první argument datetime před druhým argumentem datetime, bude číslo kladné – v opačném případě bude záporné. Statický formát data a času je 'yyyy-MM-dd hh:mm'. Kterýkoli z argumentů lze nahradit parametrem PS_EVENTDATE:(programStageUid) pro porovnání posledního data události z dané fáze programu. |
| d2:daysBetween | (datum, datum) | Vytváří počet dní mezi dvěma datovými prvky / atributy typu datum. Když datum prvního argumentu předchází datu druhého argumentu, číslo bude kladné – v opačném případě bude číslo záporné. Statický formát data je 'yyyy-MM-dd'. Kterýkoli z argumentů lze nahradit parametrem PS_EVENTDATE:(programStageUid) pro porovnání posledního data události z dané fáze programu. |
| d2:weeksBetween | (datum, datum) | Vytváří počet celých týdnů mezi dvěma datovými prvky / atributy typu datum. Když datum prvního argumentu předchází datu druhého argumentu, číslo bude kladné – v opačném případě bude číslo záporné. Statický formát data je 'yyyy-MM-dd'. Kterýkoli z argumentů lze nahradit parametrem PS_EVENTDATE:(programStageUid) pro porovnání posledního data události z dané fáze programu. |
| d2:monthsBetween | (datum, datum) | Vytváří počet celých měsíců mezi dvěma datovými prvky / atributy typu datum. Když datum prvního argumentu předchází datu druhého argumentu, číslo bude kladné – v opačném případě bude číslo záporné. Statický formát data je 'yyyy-MM-dd'. Kterýkoli z argumentů lze nahradit parametrem PS_EVENTDATE:(programStageUid) pro porovnání posledního data události z dané fáze programu. |
| d2:yearsBetween | (datum, datum) | Vytváří počet celých let mezi dvěma datovými prvky/atributy typu datum. Když datum prvního argumentu předchází datu druhého argumentu, číslo bude kladné – v opačném případě bude číslo záporné. Statický formát data je 'yyyy-MM-dd'. Kterýkoli z argumentů lze nahradit parametrem PS_EVENTDATE:(programStageUid) pro porovnání posledního data události z dané fáze programu. |
| d2:condition | (boolean-expr, true-expr, false-expr) | Vyhodnotí logický výraz a pokud true vrátí hodnotu true výrazu, pokud false vrátí hodnotu výrazu false. Podmíněný výraz musí být označen uvozovkami. Argumenty true-expr a false-expr musí dodržovat pravidla libovolného výrazu indikátoru programu (včetně funkcí). |
| d2:zing | (výraz) | Pokud je výraz záporný, vrátí nulu, v opačném případě vrátí hodnotu výrazu. Výraz musí dodržovat pravidla jakéhokoli výrazu indikátoru programu (včetně funkcí). |
| d2:oizp | (výraz) | Vrací jeden, pokud je výraz nula nebo kladný, v opačném případě vrátí nulu. Výraz musí dodržovat pravidla jakéhokoli výrazu indikátoru programu (včetně funkcí). |
| d2:zpvc | (object, [,object ...]) | Vrátí počet číselných nul a kladných hodnot mezi danými argumenty objektu. Lze uvést libovolný počet argumentů. |
| d2:relationshipCount | ([relationshipTypeUid]) | Produkuje počet vztahů daného typu, který je připojen k zápisu nebo události. Pokud není uveden žádný typ, započítají se všechny typy. |
| d2:count | (dataElement) | Užitečné pouze pro indikátor programu zápisu. Počítá počet hodnot dat, které byly shromážděny pro danou fázi programu a datový prvek v průběhu registrace. Datový prvek argumentu je dodáván se syntaxí #{programStage.dataElement}. |
| d2:countIfValue | (dataElement, value) | Užitečné pouze pro indikátory programu registrace. Spočítá počet datových hodnot, které odpovídají dané doslovné hodnotě pro danou fázi programu a datový prvek v průběhu zápisu. Datový prvek argumentu je dodáván se syntaxí #{programStage.dataElement}. Hodnotou může být pevně zakódovaný text nebo číslo, například 'No_anemia', pokud se mají počítat pouze hodnoty obsahující tento text. |
| d2:countIfCondition | (dataElement, condition) | Užitečné pouze pro indikátory programu registrace. Spočítá počet datových hodnot, které odpovídají daným podmínkovým kritériím pro danou fázi programu a datový prvek v průběhu zápisu. Datový prvek argumentu je dodáván se syntaxí #{programStage.dataElement}. Podmínka se dodává jako výraz v jednoduchých uvozovkách, například '<10', pokud mají být počítány pouze hodnoty menší než 10. |
| if | (boolean-expr, true-expr, false-expr) | Vyhodnotí booleovský výraz a pokud true vrátí hodnotu výrazu true, pokud false vrátí hodnotu výrazu false. To je totožné s funkcí d2:condition kromě toho, že boolean-expr není uvozován. |
| isNull | (objekt) | Vrátí hodnotu true, pokud hodnota objektu chybí (null), jinak hodnotu false. |
| isNotNull | (objekt) | Vrátí hodnotu true, pokud hodnota objektu nechybí (není null), jinak false. |
| firstNonNull | (object [, object ...]) | Vrátí hodnotu prvního objektu, který nechybí (není null). Lze poskytnout libovolný počet argumentů. Jakýkoli argument může být také číselný nebo řetězcový literál, který bude vrácen, pokud všechny předchozí objekty budou mít chybějící hodnoty. |
| největší | (expression [, expression ...]) | Vrátí největší (nejvyšší) hodnotu zadaných výrazů. Lze poskytnout libovolný počet argumentů. Každý výraz musí splňovat pravidla jakéhokoli výrazu indikátoru programu (včetně funkcí). |
| nejméně | (expression [, expression ...]) | Vrátí nejmenší (nejnižší) hodnotu zadaných výrazů. Lze poskytnout libovolný počet argumentů. Každý výraz musí splňovat pravidla jakéhokoli výrazu indikátoru programu (včetně funkcí). |
| log | (expression [, base ]) | Vrátí přirozený logaritmus (základ e) číselného výrazu. Pokud je jako druhý argument zadáno celé číslo, vrátí logaritmus pomocí této báze. |
| log10 | (výraz) | Vrátí běžný logaritmus (základ 10) číselného výrazu. |

Filtr, který používá funkci "hasValue", vypadá takto:

    d2:hasValue(#{mCXR7u4kNBW.NFkjsNiQ9PH})

Filtr, který používá funkci "relationshipCount(relationshipTypeUid)", vypadá takto:

    d2:relationshipCount('KLkjshoQ90U')

Výraz, který používá funkce „zing“ a „oizp“, vypadá takto:

    d2:zing(A{GPkGfbmArby}) + d2:oizp(#{mCXR7u4kNBW.NFkjsNiQ9PH}))

Výraz, který používá funkci "daysBetween", vypadá takto:

    d2:daysBetween(#{mCXR7u4kNBW.k8ja2Aif1Ae},'2015-06-01')

Výraz, který používá funkci "yearBetween" k porovnání poslední události programové fáze „mCXR7u4kNBW“ s datem zápisu, vypadá takto:

    d2:daysBetween(V{enrollment_date},PS_EVENTDATE:mCXR7u4kNBW)

Výraz, který používá funkci „condition“, vypadá takto:

    d2:condition('#{mCXR7u4kNBW.NFkjsNiQ9PH} > 100',150,50)

Výraz, který používá funkci "countIfValue" k počítání pouze počtu shromáždění hodnoty 10, vypadá takto:

    d2:countIfValue(#{mCXR7u4kNBW.NFkjsNiQ9PH}),10)

Výraz, který používá funkci "zpvc", vypadá takto:

    d2:zpvc(A{GPkGfbmArby}),#{mCXR7u4kNBW.NFkjsNiQ9PH}),4,-1)

Výraz, který používá funkce „if“ a „isnull“, vypadá takto:

    if(isNull(A{GPkGfbmArby}),10,20)

Výraz, který používá funkci "firstNonNull", vypadá takto:

    firstNonNull(A{GPkGfbmArby}),#{mCXR7u4kNBW.NFkjsNiQ9PH},44)

Výraz, který používá funkci „největší“, vypadá takto:

    greatest(#{mCXR7u4kNBW.k8ja2Aif1Ae},#{mCXR7u4kNBW.NFkjsNiQ9PH},1)

#### Proměnné, které se mají použít ve výrazu nebo filtru indikátoru programu { #variables-to-use-in-a-program-indicator-expression-or-filter } 

The program indicator expression and filter support a range of
variables:



Tabulka: Proměnné k použití ve výrazu indikátoru programu nebo filtru

| Proměnná | Popis |
|---|---|
| event_date | Datum, kdy se událost nebo poslední událost v zápisu konala. |
| creation_date | Datum, kdy byla v systému vytvořena událost nebo registrace. |
| due_date | Datum ukončení platnosti události. |
| sync_date | Datum, kdy byla událost nebo zápis naposledy synchronizována s aplikací pro Android. |
| incident_date | Datum výskytu události. |
| enrollment_date | Datum, kdy byla trasovaná instance entity zapsána do programu. |
| enrollment_status | Lze použít k zahrnutí nebo vyloučení zápisů v určitých stavech. <br> <br> Při výpočtu zlepšení / zhoršení hemoglobinu během těhotenství může mít smysl brát v úvahu pouze dokončené zápisy. Pokud nedokončené zápisy nejsou odfiltrovány, budou představovat zpola dokončená sledování ANC, kde ještě nebylo zjištěno konečné zlepšení / zhoršení. |
| current_date | Aktuální datum. |
| value_count | Počet nenulových hodnot ve výrazové části události. |
| zero_pos_value_count | Počet číselných kladných hodnot ve výrazové části události. |
| event_count | Počet událostí (užitečné v kombinaci s filtry). |
| enrollment_count | Počet zápisů (užitečné v kombinaci s filtry). Typ agregace pro indikátor programu musí být COUNT.  |
| tei_count | Počet instancí trasovaných entit (užitečné v kombinaci s filtry). Typ agregace pro indikátor programu musí být COUNT. |
| org_unit_count | Počet organizačních jednotek (užitečné v kombinaci s filtry). Typ agregace pro indikátor programu musí být COUNT. |
| program_stage_name | Lze použít ve filtrech pro zahrnutí pouze určitých fází programu do filtru pro sledovací programy. Používá název fáze programu: <br> `V{program_stage_name} == 'První návštěva ANC'` |
| program_stage_id | Lze použít ve filtrech pro zahrnutí pouze určitých fází programu do filtru pro sledovací programy. Používá jedinečný identifikátor fáze programu: <br> `V{program_stage_id} == 'YPSSfbmAtt1'` |
| analytics_period_start | Lze použít ve filtrech nebo výrazech pro porovnání libovolného data s prvním datem v každém vykazovaném období. <br> `d2:daysBetween(#{WZbXY0S00lP.w4ky6EkVahL}, V{analytics_period_start})` |
| analytics_period_end | Lze použít ve filtrech nebo výrazech pro porovnání libovolného data s posledním inkluzivním datem v každém vykazovaném období. |
| event_status | Lze použít ve filtrech nebo výrazech pro porovnání stavu události. <br> `V{event_status} == 'COMPLETED'` |

A filter that uses the "Analytics period end" variable to only include
women who has an LMP that would be in the first
    trimester:

    d2:daysBetween(#{WZbXY0S00lP.w4ky6EkVahL}, V{analytics_period_end}) <= 84

An expression that uses the "value count" variable looks like
    this:

    (#{A03MvHHogjR.a3kGcGDCuk6} + #{A03MvHHogjR.wQLfBvPrXqq}) / V{value_count}

An expression that uses the "event\_date" and "incident\_date" variables
looks like this:

    d2:daysBetween(V{incident_date},V{event_date})

#### Operátoři k použití ve filtru indikátorů programu { #operators-to-use-in-a-program-indicator-filter } 



Tabulka: Operátory k použití ve filtru indikátorů programu

| Operátor | Popis |
|---|---|
| and | Logické AND |
| or | Logické OR |
| == | Rovno |
| != | Nerovná se |
| < | Menší než |
| <= | Menší nebo rovno |
| > | Větší než |
| >= | Větší než nebo rovno |

These operators can be used to form logical expressions which ultimately
evaluate to either true or false. For example you can assert that
multiple data elements must be a specific value, or that specific
attributes must have numerical values less or greater than a constant.

Filtr, který používá atributy i datové prvky, vypadá takto:

    A{cejWyOfXge6} == 'Female' and #{A03MvHHogjR.a3kGcGDCuk6} <= 2

> **Tip**
>
> DHIS2 is using the JEXL library for evaluating expressions which
> supports additional syntax beyond what is covered in this
> documentation. See the reference at the [project home
> page](http://commons.apache.org/proper/commons-jexl/reference/syntax.html)
> to learn how you can create more sophisticated expressions

## Nakonfigurujte pravidla programu { #configure_program_rule } 

### O pravidlech programu { #about_program_rules } 

Program rules allows you to create and control dynamic behaviour of the
user interface in the **Tracker Capture** and **Event Capture** apps.
During data entry, the program rules expressions are evaluated each time
the user interface is displayed, and each time a data element is
changed. Most types of actions will take effect immediately when the
user enters values in the **Tracker Capture** and **Event Capture**
apps.



Tabulka: Komponenty programových pravidel

| Komponenta programového pravidla | Popis |
|---|---|
| Akce programového pravidla | Každé pravidlo programu obsahuje jednu nebo více akcí. Toto jsou chování, která se spouštějí v uživatelském rozhraní, když je výraz pravdivý. Akce budou použity okamžitě, pokud je výraz pravdivý, a budou vráceny, pokud výraz již nebude pravdivý. Existuje několik typů akcí a v jednom pravidle programu můžete mít několik akcí. |
| Výraz programového pravidla | Každé programové pravidlo má jeden výraz, který určuje, zda mají být spuštěny akce programového pravidla, pokud je výraz vyhodnocen jako pravdivý. Pokud je výraz pravdivý, programové pravidlo je platné a akce se provedou. Pokud je výraz nepravdivý, programové pravidlo již neplatí a akce se již nebudou uplatňovat. <br> <br> Výraz vytvoříte pomocí standardních matematických operátorů, uživatelských funkcí, uživatelem definovaných statických hodnot a proměnných programových pravidel. Proměnné programových pravidel představují hodnoty atributů a datových prvků, které budou vyhodnoceny jako součást výrazu. |
| Proměnná pravidla programu | Proměnné programových pravidel vám umožňují zahrnout datové hodnoty a hodnoty atributů do výrazů programových pravidel. Před vytvořením programového pravidla budete obvykle muset vytvořit jednu nebo několik proměnných programového pravidla. Důvodem je, že výrazy programových pravidel obvykle obsahují alespoň jeden datový prvek nebo hodnotu atributu, aby měly smysl. <br> <br> Proměnné programových pravidel jsou sdíleny všemi pravidly ve vašem programu. Když vytvoříte více programových pravidel pro stejný program, budou tato pravidla sdílet stejnou knihovnu proměnných programových pravidel. |

V aplikaci **Údržba** spravujete následující objekty pravidel programu:


| Typ objektu | Dostupné funkce |
|---|---|
| Pravidlo programu | Vytvářejte, upravujte, klonujte, odstraňujte, zobrazujte podrobnosti a překládejte |
| Proměnná pravidla programu | Vytvářejte, upravujte, klonujte, sdílejte, odstraňujte, zobrazujte podrobnosti a překládejte |

### Pracovní postup { #workflow_program_rule } 

1.  In the **Maintenance** app, create program rule variable(s) if
    needed.

2.  V aplikaci **Údržba** vytvořte programové pravidlo:

    1.  Zadejte podrobnosti pravidla programu.

    2.  Vytvořte výraz pravidla programu.

    3.  Definujte akce pravidel programu.

3.  In the **Tracker Capture** or **Event Capture** apps, verify that
    the program rule behaves as expected.

### Vytvořte nebo upravte proměnnou pravidla programu { #create_program_rule_variable } 

1.  Open the **Maintenance** app and click **Program** \> **Program rule
    variable**.

2.  Klikněte na tlačítko Přidat.

3.  Vyberte **Program** a zadejte **Název**.

4.  Vyberte, pokud chcete **Použít kód pro sadu možností**.

    This option is only effective when the data element or tracked
    entity attribute is connected to an option set. If you don't select
    this option, the program rule variable will be populated with the
    option set's name. If you select the option, the program rule
    variable will be populated with the option set's code instead.

5.  Vyberte **Typ zdroje** a zadejte požadované informace.

    Depending on the source type, you'll have to select, for example, a
    **Program stage,** **Data element** or **Tracked entity attribute**.

    The source types determine how the program rule variable is
    populated with a value.


    | Source type | Description |
    |---|---|
    | **Data element from the newest event for a program stage** | This source type works the same way as **Data element from the newest event in the current program**, except that it only evaluates values from one program stage.<br>     <br>This source type can be useful in program rules where the same data element is used in several program stages, and a rule needs to evaluate the newest data value from within one specific stage. |
    | **Data element from the newest event in the current program** | This source type is used when a program rule variable needs to reflect the newest known value of a data element, regardless of what event the user currently has open.<br>     <br>This source type is populated slightly differently in **Tracker Capture** and **Event Capture** apps:<br>     <br>**Tracker Capture**: the program rule variable will be populated with the newest data value collected for the given data element within the enrollment.<br>     <br>**Event Capture**: the program rule variable will be populated with the newest data value found within the 10 newest events in the same organisation unit.<br>     <br>The newest data value is determined with event date. |
    | **Data element in current event** | Program rule variables with this source type will contain the data value from the same event that the user currently has open.<br>     <br>This is the most commonly used source type, especially for skip logic (hide actions) and warning/error rules. |
    | **Data element from previous event** | Program rule variables with this source type will contain the value from a specified data element from a previous event. Only older events is evaluated, not including the event that the user currently has open.<br>     <br>This source type is commonly used when a data element only should be collected once during an enrollment, and should be hidden in subsequent events.<br>     <br>Another use case is making rules for validating input where there is an expected progression from one event to the next - a rule can evaluate whether the previous value is higher/lower and give a warning if an unexpected value is entered.<br>     <br>This source type is populated slightly differently in **Tracker Capture** and **Event Capture** apps:<br>     <br>**Tracker Capture**: the program rule variable will be populated with the newest data value collected for the given data element within the enrollment - but only evaluating the events that comes before the current event date.<br>     <br>**Event Capture**: the program rule variable will be populated with the newest data value collected within the 10 events preceding the current event date - not including the current event.<br>     <br>The newest data value is determined with event date. |
    | **Calculated value** | Program rule variable with this source type is not connected directly to any form data - but will be populated as a result of some other program rules **ASSIGN** action.<br>     <br>This variable will be used for making preliminary calculations, having a **ASSIGN** program rule action and assigning a value, this value can be used by other program rules - potentially making the expressions simpler and more maintanable.<br>     <br>These variables will not be persisted and will stay in memory only during the exectution of the set of program rules. Any program rule that assigns a data value to a preliminary calculated value would normally also have a **priority** assigned - to make sure that the preliminary caculation is done before the rule that consumes the calculated value. |
    | **Tracked entity attribute** | Populates the program rule variable with a specified tracked entity attribute for the current enrollment.<br>     <br>Use this is the source type to create program rules that evaluate data values entered during registration.<br>     <br>This source type is also useful when you create program rules that compare data in events to data entered during registration.<br>     <br>This source type is only used for tracker programs (programs with registration). |

6.  Klikněte **Uložit**.

### Vytvořte nebo upravte programové pravidlo { #create_program_rule } 

> **Poznámka**
>
> Pravidlo programu patří přesně jednomu programu.

1.  Open the **Maintenance** app and click **Program** \> **Program
    rule**.

2.  Klikněte na tlačítko Přidat.

3.  Enter the program rule details. These fields are not shown to the
    end user, they are only meant for the program administrator.

      - **Program**

      - **Pravidlo spouštění pouze pro programovou fázi**

        If a program stage is selected, the program rule will only run for the selected program stage,
        as opposed to being run for every program stage in the program.

      - **Název**

      - **Popis**

      - **Priority**

        Let's say you have 16 program rules in your program. You
        configure the program rules with the following priority
        settings:

          - Priorita 1 pro programové pravidlo A

          - Priorita 2 pro programová pravidla B - K

          - Žádná priorita pro programová pravidla L - P

        Result: the system runs the program rules in the following
        order:

        1.  Programové pravidlo A

        2.  Program rules B - K (you can't find out or configure in
            which order the system runs these program rules)

        3.  Programová pravidla L - P.

4.  Click **Enter program rule expression** and create the program rule
    expression with the help of variables, functions and operators.

5.  Click **Define program rule actions** and create the actions
    executed when the expression is true.

    1.  Click the add button, select an **Action** and enter the
        required information.

        Depending on the action type, you'll have to perform different
        types of settings. For some action types, you must also enter
        free text or create expressions.


        | Action type | Required settings | Description |
        |---|---|---|
        ||||
        | **Assign value** | **Data element to assign value to**<br>         <br>**Program rule variable to assign value to**<br>         <br>**Expression to evaluate and assign** | Used to help the user calculate and fill out fields in the data entry form. The idea is that the user shouldn’t have to fill in values that the system can calculate, for example BMI.<br>         <br>When a field is assigned a value, the user sees the value but the user can't edit it.<br>         <br>Example from Immunization stock card i Zambia: The data element for vaccine stock outgoing balance is calculated based on the data element for incoming stock balance minus the data elements for consumption and wastage.<br>         <br>Advanced use: configure an 'assign value' to do a part of a calculation and then assign the result of the calculation to a program rule variable. This is the purpose with the "Calculated value" program rule variable. |
        | **Display text** | **Display widget**<br>         <br>**Static text**<br>         <br>**Expression to evaluate and display after static text** | Used to display information that is not an error or a warning, for example feedback to the user. You can also use this action to display important information, for example the patient's allergies, to the user. |
        | **Display key/value pair** | **Display widget**<br>         <br>**Key label**<br>         <br>**Expression to evaluate and display as value** | Used to display information that is not an error or a warning.<br>         <br>Example: calculate number of weeks and days in a pregnancy and display it in the format the clinician is used to see it in. The calculation is based on previous recorded data. |
        | **Error on complete** | **Data element to display error next to**<br>         <br>**Tracked entity attribute to display error next to**<br>         <br>**Static text**<br>         <br>**Expression to evaluate and display after static text** | Used whenever you've cross-consistencies in the form that must be strictly adhered to. This action prevents the user from continuing until the error is resolved.<br>         <br>This action differs from the regular **Show error** since the error is not shown until the user tries to actually complete the form.<br>         <br>If you don't select a data element or a tracked entity attribute to display the error next to, make sure you write a comprehensive error message that helps the user to fix the error. |
        | **Hide field** | **Data element to hide**<br>         <br>**Tracked entity attribute to hide**<br>         <br>**Custom message for blanked field** | Used when you want to hide a field from the user.<br>         <br>**Custom message for blanked field** allows you to define a custom message displayed to the user in case the program rule hides and blanks out the field after the user typed in or selected a value.<br>         <br>If a hide field action hides a field that contains a value, the field will always removed. If no message is defined, a standard message will be displayed to alert the user. |
        | **Hide section** | **Program stage section to hide** | TBA |
         | **Prevent adding new events to stage** | **Program stage where users will not be able to add new events** | Used when you do not want users to add any more events to a program stage. Existing events will not be hidden.|
        | **Make field mandatory** | **Data element to make mandatory**<br>         <br>**Tracked entity attribute to make mandatory** | TBA |
        | **Show error** | **Data element to display error next to**<br>         <br>**Tracked entity attribute to display error next to**<br>         <br>**Static text**<br>         <br>**Expression to evaluate and display after static text** | Used whenever there are rules which must strictly be adhered to. The show error action prevents the user from continuing until the error is resolved.<br>         <br>Such a strict validation should only be used when it's certain that the evaluated expression is never true unless the user has made a mistake in data entry.<br>         <br>It's mandatory to define a message that is shown to the user when the expression is true and the action is triggered.<br>         <br>You can select which data element or tracked entity attribute to link the error to. This will help the user to fix the error.<br>         <br>In case several data elements or attributes are involved, select the one that is most likely that the user would need to change. |
        | **Show warning** | **Data element to display warning next to**<br>         <br>**Tracked entity attribute to display warning next to**<br>         <br>**Static text**<br>         <br>**Expression to evaluate and display after static text** | Used to give the user a warning about the entered data, but at the same time to allow the user to save and continue.<br>         <br>You can use warnings to help the user avoid errors in the entered data, while at the same time allow the user to consciously disregard the warnings and save a value that is outside preset expectations.<br>         <br>**Static text** defines the message shown to the user when the expression is true and the action is triggered.<br>         <br>You can select which data element or tracked entity attribute to link the error to. This will help the user to fix the error.<br>         <br>In case several data elements or attributes are involved, select the one that is most likely that the user would need to change. |
        | **Warning on complete** | **Data element to display warning next to**<br>         <br>**Tracked entity attribute to display warning next to**<br>         <br>**Static text**<br>         <br>**Expression to evaluate and display after static text** | Used to give the user a warning if he/she tries to complete inconsistent data, but at the same time to allow the user to continue. The warning is shown in a dialog when the user completes the form.<br>         <br>**Static text** defines the message shown to the user when the expression is true and the action is triggered. This field is mandatory.<br>         <br>You can select which data element or tracked entity attribute to link the error to. This will help the user to fix the error.<br>         <br>If you don't select a data element or a tracked entity attribute to display the error next to, make sure you write a comprehensive error message that helps the user to fix the error. |
        | **Send Message** | **Message template to send** | Send Message triggers a notification based on provided message template. This action will be taken immediately. The message template will be parsed and variables will be substituted with actual values. |
        | **Schedule Message** | **Message template to send**<br>         <br>**Data field which contains expression to evaluate the date which notification should be sent at. If this expression results in any value other than Date, then resultant will be discarded and notification will not get scheduled.** | Schedule Message will schedule notification at date provided by Expression in the data field. Sample expression is given below<br>         d2:addDays( '2018-04-20', '2' )         <br>Message template will be parsed and variables will be substituted with actual values. |
        | **Hide option** | **Data element to hide option for**<br>         <br>**Tracked entity attribute to hide option for**<br>         <br>**Option that should be hidden** | Used to selectively hide a single option for an option set in a given data element/tracked entity attribute.<br>         <br>When combined with **show option group** the **hide option** takes presedence. |
        | **Hide option group** | **Data element to hide option group for**<br>         <br>**Tracked entity attribute to hide option group for**<br>         <br>**Option group that should be hidden** | Used to hide all options in a given option group and data element/tracked entity attribute.<br>         <br>When combined with **show option group** the **hide option group** takes precedence. |
        | **Show option group** | **Data element to show option group for**<br>         <br>**Tracked entity attribute to show option group for**<br>         <br>**Option group that should be shown** | Used to show only options from a given option group in a given data element/tracked entity attribute. To show an option group implicitly hides all options that is not part of the group(s) that is shown. |

    2.  Click **Save**.

    3.  (Optional) Repeat above steps to add more actions.

6.  Klikněte **Uložit**.

### Příklad: Pravidla programu { #program_rule_examples } 

> **Poznámka**
>
> Všechny ukázky si můžete prohlédnout na demo serveru:
> <https://play.dhis2.org/dev/dhis-web-maintenance/#/list/programSection/programRule>

This example shows how to configure a program rule which calculate
number of weeks and days in a pregnancy and display the result in the
format the clinician is used to see it in. The calculation is based on
previous recorded
    data.

1.  ![](resources/images/maintenance/pg_rule_ex/keyvaluepair_details.png)

2.  ![](resources/images/maintenance/pg_rule_ex/keyvaluepair_expression.png)

3.  ![](resources/images/maintenance/pg_rule_ex/keyvaluepair_action.png)

    Celý výraz v poli **Data**:

        d2:concatenate(d2:weeksBetween(#{lmp}, V{current_date}), '+',
        d2:modulus(d2:daysBetween(#{lmp}, V{current_date}), 7))

![](resources/images/maintenance/pg_rule_ex/keyvaluepair_result.png)

This example shows how to configure a program rule to display text in
the Feedback widget in the **Tracker Capture**
    app.

1.  ![](resources/images/maintenance/pg_rule_ex/displaytext_pgrule_variable.png)

2.  ![](resources/images/maintenance/pg_rule_ex/displaytext_details.png)

3.  ![](resources/images/maintenance/pg_rule_ex/displaytext_expression.png)

4.  ![](resources/images/maintenance/pg_rule_ex/displaytext_action.png)

![](resources/images/maintenance/pg_rule_ex/displaytext_result.png)

This example shows how to configure a program rule to always display
certain data in the Feedback widget in the **Tracker Capture** app. This
is useful when you want to make sure that vital data, for example
medicine allergies, is always
    visible.

1.  ![](resources/images/maintenance/pg_rule_ex/displaytext2_pgrule_variable.png)

2.  ![](resources/images/maintenance/pg_rule_ex/displaytext2_details.png)

3.  ![](resources/images/maintenance/pg_rule_ex/displaytext2_expression.png)

4.  ![](resources/images/maintenance/pg_rule_ex/displaytext2_action.png)

![](resources/images/maintenance/pg_rule_ex/displaytext2_first_pgstage.png)

![](resources/images/maintenance/pg_rule_ex/displaytext2_result.png)

By using a program rule of type "Assign value" you can calculate the
"Gestational age at visit" value and fill it in the data entry form. You
configure the program rule to calculate "Gestational age at visit" based
on either "LMP date" or "Ultrasound estimated due
date".

1.  ![](resources/images/maintenance/pg_rule_ex/assign_details.png)

2.  ![](resources/images/maintenance/pg_rule_ex/assign_expression.png)

3.  ![](resources/images/maintenance/pg_rule_ex/assign_action.png)

![](resources/images/maintenance/pg_rule_ex/assign_result.png)

### Referenční informace: Operátory a funkce, které se mají použít ve výrazu pravidel programu { #program_rules_operators_functions } 

> **Tip**
>
> You can nest functions within each other and with sub-expressions to
> form more complex conditions. An example that produces the gestational
> age in weeks, based on last menstrual date:
>
>     d2:floor( d2:daysBetween(#{lastMenstrualDate},V{event_date}) / 7 )

> **Tip**
>
> The source type will determine how the d2: function calls will
> evaluate a (sourcefield) parameter.
>
> Example: where \#{hemoglobinCurrent} is set to source type **Data
> element in current event**. The following function call with evaluate
> whether haemoglobin is entered in the current event.
>
>     d2:hasValue( 'hemoglobinCurrent' )
>
> Example: where \#{hemoglobin} is set to source type **Data element
> from the newest event in the current program**. The following function
> call with evaluate whether there exists a value for the haemoglobin in
> any event in the enrollment.
>
>     d2:hasValue( 'hemoglobin' )
>
> Example: where \#{hemoglobinPrevious} is set to source type **Data
> element from previous event** . The following function call with
> evaluate whether there exists a value for the haemoglobin among the
> events preceding the current event.
>
>     d2:hasValue( 'hemoglobinPrevious' )



Tabulka: Možné operátory pro použití ve výrazu programového pravidla

| Operátor | Popis |
|---|---|
| + | Sečtěte čísla |
| - | Odečtěte od sebe čísla |
| \* | Vynásobte dvě čísla |
| / | Rozdělte dvě čísla |
| % | Modul dvou čísel |
| && | Logické AND. Pravda, pouze když je pravdivý výraz na levé a pravé straně. Levá a pravá strana může být ano/ne, pouze ano nebo podvýraz v závorce. |
| &#124;&#124; | Logické OR. True, když je pravdivý buď výraz nalevo, nebo výraz na pravé straně. Levá a pravá strana může být ano/ne, pouze ano nebo podvýraz v závorce. |
| > | Levé číslo větší než pravé číslo |
| >= | Levé číslo větší nebo rovno pravému číslu |
| < | Levé číslo menší než pravé číslo |
| <= | Levé číslo menší nebo rovno pravému číslu. |
| == | Levá strana se rovná pravé straně. Podporuje čísla, text, ano/ne a pouze ano. |
| != | Levá strana se nerovná pravé straně. Podporuje čísla, text, ano/ne a pouze ano. |
| ! | Neguje následující hodnotu. Lze použít pro ano / ne, pouze ano nebo dílčí výraz v závorkách. |
| () | Závorky se používají k seskupování dílčích výrazů. |



Tabulka: Vlastní funkce pro použití ve výrazu programového pravidla

| Funkce | Argumenty | Popis |
|---|---|---|
| d2:ceil | (číslo) | Zaokrouhlí vstupní argument **nahoru** na nejbližší celé číslo. <br> Příklad: <br> `d2:ceil(#{hemoglobinValue})` |
| d2:floor | (číslo) | Zaokrouhlí vstupní argument **dolů** na nejbližší celé číslo. <br> Příklad udávající počet týdnů, po které je žena těhotná. Všimněte si, že podvýraz #{gestationalAgeDays}/7 je vyhodnocen před provedením funkce podlahy: <br> `d2:floor(#{gestationalAgeDays}/7)` |
| d2:round | (číslo) | Zaokrouhlí vstupní argument na nejbližší celé číslo. |
| d2:modulus | (číslo, číslo) | Vytváří modul při dělení prvního argumentem druhým. <br> Příklad udávající počet dní, po které je žena v aktuálním týdnu těhotenství: <br> `d2:modulus(#{gestationalAgeDays},7)` |
| d2:zing | (číslo) | Vyhodnotí argument typu číslo na nulu, pokud je hodnota záporná, jinak na samotnou hodnotu. |
| d2:oizp | (číslo) | Vyhodnotí argument typu číslo na jeden, pokud je hodnota nula nebo kladná, jinak nula. |
| d2:concatenate | (object, [,object, object,...]) | Vytvoří řetězec zřetězený ze vstupních parametrů. Podporuje libovolný počet parametrů. Bude se používat hlavně v budoucích typech akcí, například k zobrazení gestačního věku pomocí d2:concatenate('weeks','+','gestationalageDays'). |
| d2:daysBetween | (datum, datum) | Vytváří počet dní mezi prvním a druhým argumentem. Když datum prvního argumentu předchází datu druhého argumentu, číslo bude kladné - v opačném případě bude číslo záporné. Statický formát data je 'yyyy-MM-dd'. <br> Příklad výpočtu gestačního věku (ve dnech) ženy na základě poslední menstruace a aktuálního data události: <br> `d2:daysBetween(#{lastMenstrualDate},V{event_date})` |
| d2:weeksBetween | (datum, datum) | Vytváří počet celých týdnů mezi prvním a druhým argumentem. Když datum prvního argumentu předchází datu druhého argumentu, číslo bude kladné - v opačném případě bude číslo záporné. Statický formát data je 'yyyy-MM-dd'. |
| d2:monthsBetween | (datum, datum) | Vytváří počet celých měsíců mezi prvním a druhým argumentem. Když datum prvního argumentu předchází datu druhého argumentu, číslo bude kladné – v opačném případě bude číslo záporné. Statický formát data je 'yyyy-MM-dd'. |
| d2:yearsBetween | (datum, datum) | Vytváří počet let mezi prvním a druhým argumentem. Když datum prvního argumentu předchází datu druhého argumentu, číslo bude kladné – v opačném případě bude číslo záporné. Statický formát data je 'yyyy-MM-dd'. |
| d2:addDays | (datum, číslo) | Vytvoří datum na základě data prvního argumentu a přidá k druhému argumentu počet dní. <br> Příklad výpočtu termínu těhotenství na základě poslední menstruace: <br> `d2:addDays(#{lastMenstrualDate},'283')` |
| d2:count | (zdrojové pole) | Spočítá počet hodnot zadaných pro zdrojové pole v argumentu. Parametr zdrojového pole je název jednoho z definovaných zdrojových polí v programu – viz příklad <br> Příklad použití, kde #{previousPregnancyOutcome} je jedno ze zdrojových polí v opakovatelné fázi programu „předchozí těhotenství“: <br> `d2:count('previousPregnancyOutcome')` |
| d2:countIfValue | (zdrojové pole, text) | Spočítá počet odpovídajících hodnot zadaných pro zdrojové pole v prvním argumentu. Počítají se pouze výskyty, které odpovídají druhému argumentu. Parametr zdrojového pole je název jednoho z definovaných zdrojových polí v programu – viz příklad. <br> Příklad použití, kde #{previousPregnancyOutcome} je jedním ze zdrojových polí v opakovatelné fázi programu „předchozí těhotenství“. Následující funkce vytvoří počet předchozích těhotenství, která skončila potratem: <br> `d2:countIfValue('previousPregnancyOutcome','Abortion')` |
| d2:countIfZeroPos | (zdrojové pole) | Spočítá počet hodnot, které jsou nulové nebo kladné zadané pro zdrojové pole v argumentu. Parametr zdrojového pole je název jednoho z definovaných zdrojových polí v programu – viz příklad. <br> Příklad použití, kde #{fundalHeightDiscrepancy} je jedno ze zdrojových polí v programu a může být kladné nebo záporné. Následující funkce vytvoří počet kladných výskytů: <br> `d2:countIfZeroPos('fundalHeightDiscrepancy')` |
| d2:hasValue | (zdrojové pole) | Vyhodnotí se jako pravdivé pro zdrojové pole argumentu obsahuje hodnotu, false, pokud není zadána žádná hodnota. <br> Příklad použití ke zjištění, zda je zdrojové pole #{currentPregnancyOutcome} ještě vyplněno: <br> `d2:hasValue('currentPregnancyOutcome')` |
| d2:zpvc | (object, [,object, object,...]) | Vrátí počet číselných nul a kladných hodnot mezi danými argumenty objektu. Lze uvést libovolný počet argumentů. |
| d2:validatePattern | (text, vzor regulárního výrazu) | Evaluates to true if the input text is an exact match with the supplied regular expression pattern. The regular expression needs to be escaped. <br>Example expression, triggering actions if a number is not on the pattern 9999/99/9:<br> `!d2:validatePattern(A{nrc},'\\d{6}\/\\d{2}\/\\d')` <br>Example expression, triggering actions that if the address is not consisting of letters or white spaces, then a white space, then a number:<br> `!d2:validatePattern(A{registrationAddress},'[\\w ]+ \\d+')` <br>Example, triggering actions if a name contains any numbers:<br> `!d2:validatePattern(A{name},'[^\\d]*')` <br>Example expression, triggering actions if a mobile number contains the illegal number sequence 555:<br> `d2:validatePattern(A{mobile} ,'.*555.*')` |
| d2:left | (text, počet znaků) | Hodnotí levou část textu, num-znaky od prvního znaku. <br> Text lze citovat nebo vyhodnotit z proměnné: <br> `d2:left(#{variableWithText}, 3)` |
| d2:right | (text, počet znaků) | Hodnotí na pravou část textu, num-znaky od posledního znaku. <br> Text lze citovat nebo vyhodnotit z proměnné: <br> `d2:right(#{variableWithText}, 2)` |
| d2:substring | (text, start-char-num, end-char-num) | Vyhodnocuje se na část řetězce zadanou číslem počátečního a koncového znaku. <br> Příklad výrazu: <br> `d2:substring(#{variableWithText}, 1, 3)` Pokud by #{variableWithText} ve výše uvedeném příkladu bylo 'BC', výsledek vyhodnocení by byl 'ABCD', |
| d2:split | (text, oddělovač, číslo prvku) | Rozdělte text oddělovačem a ponechte n-tý prvek (0 je první). <br> Text může být citován nebo vyhodnocen z proměnné, oddělovač musí být citován: <br> `d2:split(#{variableWithText}, '-', 1)` <br> Poznámka: oddělovač čárkou(,) není podporován. |
| d2:length | (text) | Najděte délku řetězce. <br> Příklad: <br> `d2:length(#{variableWithText})` |
| d2:inOrgUnitGroup | (text) | Vyhodnocuje, zda je aktuální organizační jednotka ve skupině argumentů. Argument lze definovat buď pomocí ID nebo kódu skupiny organizační jednotky. Aktuální organizační jednotka bude organizační jednotkou události, když jsou pravidla spuštěna v kontextu události, a registrující organizační jednotkou, když jsou pravidla spuštěna v případě registračního formuláře TEI. <br> Příklad výrazu: <br> `d2:inOrgUnitGroup('VYSOKÉ_RIZIKO_ZAŘÍZENÍ')` |
| d2:hasUserRole | (role uživatele) | Vrátí hodnotu true, pokud má aktuální uživatel tuto roli, jinak je false <br> Příklad výrazu: <br> d2:hasUserRole('UYXOT4A3ASA') |
| d2:zScoreWFA | Váha Z-Score pro indikátor věku | Calculates z-score based on data provided by WHO weight-for-age indicator. e varies between -3.5 to 3.5 depending upon the value of weight. <br>Example expression:<br> `d2:zScoreWFA( ageInMonths, weight, gender )`  <br> **Gender** > Gender is considered female by default. Any of the following codes can > be used to denote male: 'Male', 'MALE', 'male', 'ma', 'm', 'M', 0, false |
| d2:zScoreHFA | Výška Z-skóre pro ukazatel věku | Vypočítá z-skóre na základě údajů poskytnutých WHO ukazatelem výšky k věku. Jeho hodnota se pohybuje mezi -3,5 až 3,5 v závislosti na hodnotě výšky. <br> Příklad výrazu: <br> `d2:zScoreHFA( ageInMonths, height, gender )` |
| d2:zScoreWFH | Váha Z-Score pro ukazatel výšky | Vypočítá z-skóre na základě údajů odvozených z ukazatelů WHO váha k délce a váha k výšce. Údaje použité pro dívky lze nalézt [zde](https://github.com/dhis2/dhis2-docs/blob/master/src/commonmark/en/content/user/resources/txt-files/zScoreWFH-girls-table.txt) a pro chlapce [zde](https://github.com/dhis2/dhis2-docs/blob/master/src/commonmark/en/content/user/resources/txt-files/zScoreWFH-boys-table.txt). Jeho hodnota se pohybuje mezi -3,5 až 3,5 v závislosti na hodnotě hmotnosti. <br> Příklad výrazu: <br> `d2:zScoreWFH( výška, váha, pohlaví )` |
| d2:minValue | Získejte minimální hodnotu pro poskytnutou položku | Funkce získá minimální hodnotu poskytnutého datového prvku během celého zápisu. <br> Příklad výrazu: <br> `d2:minValue( 'blood-pressure' )` |
| d2:maxValue | Získejte maximální hodnotu pro poskytnutou položku | Funkce získá maximální hodnotu poskytnutého datového prvku v rámci celého zápisu. <br> Příklad výrazu: <br> `d2:maxValue( 'blood-pressure' )` |
| d2:extractDataMatrixValue | Je dána hodnota pole formátovaná standardem datové matice gs1 a klíč řetězce z identifikátorů aplikace GS1. Funkce vyhledá a vrátí hodnotu spojenou s poskytnutým klíčem. <br> Příklad výrazu: <br> `d2:extractDataMatrixValue( 'grin', A{GS1 Value} )` |


Tabulka: Standardní proměnné pro použití ve výrazech programových pravidel

| Proměnná | Typ | Popis |
|---|---|---|
| V{current_date} | (datum) | Obsahuje aktuální datum při každém provedení pravidla. <br> Příklad výrazu: <br> `d2:daysBetween(#{symptomDate},V{current_date}) < 0 `|
| V{event_date} | (datum) | Obsahuje datum události aktuálního provedení události. V okamžiku, kdy je pravidlo provedeno jako součást registračního formuláře, nebude mít hodnotu. |
| V{event_status} | (řetězec) | Contains status of the current event or enrollment. <br>Example expression to check status is:<br> `V{event_status} == 'COMPLETED'` |
| V{due_date} | (datum) | Tato proměnná bude obsahovat aktuální datum, kdy je pravidlo provedeno. Poznámka: To znamená, že pravidlo může produkovat různé výsledky v různých časech, i když se nic jiného nezměnilo. |
| V{event_count} | (číslo) | Obsahuje celkový počet událostí v zápisu. |
| V{enrollment_date} | (datum) | Obsahuje datum zápisu aktuálního zápisu. Nebude mít hodnotu pro jednotlivé programy událostí. |
| V{incident_date} | (datum) | Obsahuje datum incidentu aktuálního zápisu. Nebude mít hodnotu pro jednotlivé programy událostí. |
| V{enrollment_id} | (řetězec) | Univerzální identifikační řetězec (UID) aktuálního zápisu. Nebude mít hodnotu pro jednotlivé programy. |
| V{event_id} | (řetězec) | Univerzální identifikační řetězec (UID) kontextu aktuální události. V okamžiku provedení pravidla jako součást registračního formuláře nebude mít hodnotu. |
| V{orgunit_code} | (řetězec) | Contains the code of the orgunit that is linked to the current enrollment. For single event programs the code from the current event orgunit will be used instead. <br>Example expression to check whether orgunit code starts with WB_:<br> `d2:left(V{orgunit_code},3) == 'WB_'` |
| V{environment} | (řetězec) | Obsahuje kód představující aktuální běhové prostředí pro pravidla. Možné hodnoty jsou „WebClient“, „AndroidClient“ a „Server“. Lze použít, když se pravidlo programu má spustit pouze v jednom nebo více typech klientů. |
| V{program_stage_id} | (řetězec) | Obsahuje ID aktuální programové fáze, která spustila pravidla. To lze použít ke spuštění pravidel ve specifických fázích programu nebo k zabránění provádění v určitých fázích. Při provádění pravidel v kontextu registračního formuláře TEI bude proměnná prázdná. |
| V{program_stage_name} | (řetězec) | Obsahuje název aktuální programové fáze, která spustila pravidla. To lze použít ke spuštění pravidel ve specifických fázích programu nebo k zabránění provádění v určitých fázích. Při provádění pravidel v kontextu registračního formuláře TEI bude proměnná prázdná. |
| V{completed_date} | (řetězec) | Tato proměnná obsahuje datum dokončení události, která spustila toto pravidlo. Pokud událost ještě není dokončena, pak "completed_date" neobsahuje nic. |

## Nakonfigurujte typy vztahů { #configure_relationship_type } 

### O typech vztahů { #about_relationship_types } 

Vztah představuje spojení mezi dvěma entitami v modelu Trasovače. Vztah je považován za data v DHIS2 a je založen na typu vztahu, podobně jako je instance trasované entity založena na typu trasované entity.

Vztahy vždy zahrnují dvě entity a tyto entity mohou zahrnovat trasované instance entit, zápisy a události a jakoukoli jejich kombinaci. Upozorňujeme, že ne všechny tyto kombinace jsou v aktuálních aplikacích k dispozici.

Kromě toho lze vztahy definovat jako jednosměrné nebo obousměrné. Jediným funkčním rozdílem je v současné době to, že jejich vytvoření vyžaduje různé úrovně přístupu. Jednosměrné vztahy vyžadují, aby měl uživatel přístup k zápisu dat do entity „od“ a přístup ke čtení dat pro entitu „komu“, zatímco obousměrné vztahy vyžadují přístup k zápisu dat pro obě strany.

Další informace o konfiguraci a významu 'Od omezení' a 'Do omezení' viz [Relationship model](#relationship_model_relationship_type).

### Vytvořte nebo upravte typ vztahu { #create_relationship_type } 

1.  Open the **Maintenance** app and click **Program** \> **Relationship
    type**.

2.  Klikněte na tlačítko Přidat.

3.  Zadejte **název** typu vztahu.

4.  (Volitelné) Přiřaďte **kód**.

5.  (Volitelné) Uveďte **popis** vztahu.

6. (Volitelné) Vyberte, zda má být vztah obousměrný

7. Uveďte **Název vztahu při pohledu od iniciující entity**. Toto je název vztahu, který se zobrazí v aplikaci Zadávání dat na „levé“ straně vztahu. Např. ve vztahu matka-dítě by to mohla být „matka“.

8. (Volitelné) Uveďte **Název vztahu pohledem od přijímající entity**. Toto je název vztahu, který se zobrazí na „pravé“ straně vztahu v aplikaci Data Entry. Např. ve vztahu nadřazený-podřazený by to mohl být „nadřazený“.

9.  Select a 'From constraint'. This limits what kind of entities can be included in the relationship. [Relationship model](#relationship_model_relationship_type). After selecting a 'From constraint', you have the option to choose which attributes or data elements should be shown in the relationship widget in Tracker Capture and Capture for the "From constraint". The list will vary based on the constraint:
    * When selecting “Tracked Entity Instance”, then a Tracked Entity Type only, choose between the configured Tracked Entity Type Attributes
    * When selecting “Tracked Entity Instance”, then a Tracked Entity Type and a Program, choose between the the attributes that have been configured for both the Tracked Entity Type and for the Program
    * When selecting “Enrollment in program”, choose between the attributes that have been configured for the Program
    * When selecting “Event in program or program stage”, choose between the data elements that have been configured for that Event program or Program stage

10. Select a 'To constraint'. This limits what kind of entities that can be included in the relationship. [Relationship model](#relationship_model_relationship_type). Repeat the selection of attributes or data elements that should be shown in the relationship widget for the "To constraint".

11. Klikněte **Uložit**.

## Nakonfigurujte typy trasovaných entit { #configure_tracked_entity } 

### O typech trasovaných entit { #about_tracked_entity } 

A tracked entity is a types of entities which can be tracked through the
system. It can be anything from persons to commodities, for example a
medicine or a person.

A program must have one tracked entity. To enroll a tracked entity
instance into a program, the tracked entity type and tracked
entity type of a program must be the same.

Tracked entity attributes are used to register extra information for a
tracked entity. Tracked entity attributes can be shared between
programs.

### Vytvořte nebo upravte atribut trasované entity { #create_tracked_entity_attribute } 

1.  Open the **Maintenance** app and click **Program** \> **Tracked
    entity attribute**.

2.  Klikněte na tlačítko Přidat.

3.  Do pole **Název** zadejte název atributu trasované entity.

4.  (Volitelné) Zadejte **Zkrácený název**.

4.  (Volitelné) Zadejte **Název formuláře**.

5.  (Volitelné) V poli **Kód** přiřaďte kód.

6.  (Volitelné) Zadejte **Popis**.

7. (Optional) In the **Field mask** field, you may type a template that's used to provide
   hints for correct formatting of the attribute. **NOTE: So far only implemented in the DHIS2 Android Capture app, not in the Capture and Tracker Capture web apps.**
   Následují speciální znaky, které lze v masce použít. Speciální znaky odpovídají přesně jednomu znaku daného typu.

   | Znak | Odpovídá                        |
   | ------------- |----------------|
   | \\d       | číslice                      |
   | \\x       | malé písmeno          |
   | \\X       | velké písmeno            |
   | \\ w        | jakýkoli alfanumerický znak |

  For example, the pattern can be used to show hyphens as needed in the input field of the data element. E.g "\d\d\d-\d\d\d-\d\d\d, would
  show an hyphen for every third digit.

8.  Vyberte **sadu možností**.

9.  In the **Value type** field, select the type of data that the
    tracked entity attribute will record.



    Table: Value types

    | Value type | Description |
    |---|---|
    | Age | - |
    | Coordinate | A point coordinate specified as longitude and latitude in decimal degrees. All coordinate should be specified in the format "-19.23 , 56.42" with a comma separating the longitude and latitude. |
    | Date | Dates render as calendar widget in data entry. |
    | Date & time | - |
    | E-mail | - |
    | File | A file resource where you can store external files, for example documents and photos. |
    | Image | Similar to File, but restricted to images. |
    | Integer | Any whole number (positive and negative), including zero. |
    | Letter | - |
    | Long text | Textual value. Renders as text area in forms. |
    | Negative integer | Any whole number less than (but not including) zero. |
    | Number | Any real numeric value with a single decimal point. Thousands separators and scientific notation is not supported. |
    | Percentage | Whole numbers inclusive between 0 and 100. |
    | Phone number ||
    | Positive integer | Any whole number greater than (but not including) zero. |
    | Positive of zero integer | Any positive whole number, including zero. |
    | Organisation unit | - |
    | Unit interval | Any real number greater than or equal to 0 and less than or equal to 1. |
    | Text | Textual value. The maximum number of allowed characters per value is 50,000. |
    | Time | Time is stored in HH:mm format.<br>     <br>HH is a number between 0 and 23<br>     <br>mm is a number between 00 and 59 |
    | Tracker associate | - |
    | Username |  Rendered as a dialog with a list of users and a search field. The user will need the "View User" authority to be able to utilise this data type |
    | Yes/No | Boolean values, renders as drop-down lists in data entry. |
    | Yes only | True values, renders as check-boxes in data entry. |

9.  Vyberte **Typ agregace**.



    Table: Aggregation operators

    | Aggregation operator | Description |
    |---|---|
    | Average | Average the values in both the period as and the organisation unit dimensions. |
    | Average (sum in organisation unit hierarchy) | Average of data values in the period dimension, sum in the organisation unit dimensions. |
    | Count | Count of data values. |
    | Min | Minimum of data values. |
    | Max | Maximum of data values. |
    | None | No aggregation is performed in any dimension. |
    | Sum | Sum of data values in the period and organisation unit dimension. |
    | Standard deviation | Standard deviation (population-based) of data values. |
    | Variance | Variance (population-based) of data values. |

10. Select **Unique** to specify that the values of the tracked entity
    attribute is unique.

    Existují dvě možnosti jedinečného nastavení:

      - **Entire system**: The values of the tracked entity attribute
        can duplicate with values which belong to other tracked entity
        attributes. But the values in this tracked entity attribute must
        not duplicate.

        Select **Automatically generated** to allow automatic generation
        of the tracked entity attribute value. When the generate setting
        is selected on, an optional field for specifying pattern also
        displays. This field should contain a pattern based on the
        TextPattern syntax. When the value is automatically generated,
        it will be unique for this attribute for the entire system. See
        the TextPattern section for more information on how it works.

      - **Organisation unit**: The values of the tracked entity
        attribute must not duplicate in the same organisation unit.

11. Select **Inherit** to registry a new entity for relationship with an
    available entity, all inherit entity attribute values of the entity
    will be pre-filled in the registration form.

12. (Volitelné) Vyberte **Důvěrné**.

    This option is only available if you have configured encryption for
    the system.

13. (Volitelné) Vyberte **Zobrazit v seznamu bez programu**.

14. (Volitelné) Přiřaďte jednu nebo více **legend**.

15. Klikněte **Uložit**.

### Vytvořte nebo upravte typ trasované entity { #create_tracked_entity } 

1.  Open the **Maintenance** app and click **Program** \> **Tracked
    entity type**.

2.  Click the add button or an already existing **tracked entity
    type**.

3.  Zadejte **Název** trasované entity.

4.  (Optional) select a **Color** and an **Icon** that will be used by
    the data capture apps to identify this tracked entity type.

5.  (Volitelné) Zadejte **Popis** trasované entity.

6.  (Optional) Enter a **Minimum number of attributes required to
    search**. This specifies the amount of attributes that need to be
    filled out in order to be able to search for this **tracked entity
    type** in a *global search*. See [Configure
    Search](../search/search.xml#configure_search) for more information.

7.  (Optional) Enter a **Maximum number of tracked entity instances to
    return in search**. This specifies the amount of tracked entity
    instances that will be returned in a *global search*. See [Configure
    Search](../search/search.xml#configure_search) for more information.

8.  (Optional) Add **Tracked entity type attributes**. This is used to
    configure search, see [Configure
    Search](configure_search) for more information.

9.  (Volitelné) Zadejte **alternativní název** trasované entity.

10. Klikněte **Uložit**.

## Konfigurujte hledání { #configure_search } 

Users can be given search organisation units, which makes it possible to
search for tracked entity instances outside their data capture
organisation units.

Searching can be done either in the context of a program, or in the
context of a tracked entity type. To be give users the option of
searching in the context of a program, it is necessary to configure
which of the programs tracked entity attributes is searchable. To give
users the option of searching in the context of a tracked entity type,
you will have to configure which of the tracked entity type attributes
is searchable.

### Nakonfigurujte vyhledávání sledovacího programu { #configure-search-for-tracker-program } 

To be able to search with a program, you will have to make some of the
program attributes searchable. Unique program attributes will always be
searchable.

1.  Otevřete aplikaci **Údržba** a klikněte na **Program**

2.  Otevřete nebo vytvořte program Tracker

3.  Přejít na **Atributy**

4.  Pokud nemáte žádné atributy, přidejte jeden

5.  Nastavte atribut prohledávatelný

Atributy prohledávatelného programu budou přiřazeny skupině vyhledávání.

  - Unique group. One group per unique program attribute. Unique
    attributes cannot be combined with other program attributes in a
    search. The result from the search can only be 0 or 1 tracked entity
    instance.

  - Non-unique group. This group contains all non-unique program
    attributes and makes it possible to combine multiple attributes in a
    search.

There are two limits that can be set for a program search, as part of
the **Program details** configuration.

  - Minimum number of attributes required to search: This property
    defines how many of the non-unique attributes that must be entered
    before a search can be performed.

<!-- konec seznamu -->

  - Maximální počet instancí trasovaných entit, které mají být vráceny: Tato vlastnost definuje, jak konkrétní musí být hledání, omezením počtu odpovídajících instancí trasovaných entit, které může uživatel pro svá kritéria hledání získat. Pokud je počet odpovídajících záznamů větší než toto maximum, nebudou vráceny. Uživatel musí před vrácením poskytnout konkrétnější kritéria vyhledávání, aby snížil počet odpovídajících záznamů.

    > **NOTE**
    >
    > This maximum is only applied to search results outside the users capture org unit. Within the capture scope, the user can see any number of results.

### Nakonfigurujte vyhledávání pro typ trasované entity { #configure-search-for-tracked-entity-type } 

> **Poznámka**
>
> TET = Typ trasované entity,  Tracked entity type

To be able to search without a program, you will have to make some of
the TET attributes searchable. Unique TET attributes will always be
searchable.

1.  Otevřete aplikaci **Typ trasované entity**

2.  Otevřete typ trasované entity

3.  Pokud TET nemá žádné atributy, přidejte jeden

4.  Nastavte atribut prohledávatelný

Atributy TET s možností vyhledávání budou přiřazeny skupině vyhledávání.

  - Unique group. One group per unique TET attribute. Unique attributes
    cannot be combined with other TET attributes in a search. The result
    from the search can only be 0 or 1 tracked entity instance.

  - Nejedinečná skupina. Tato skupina obsahuje všechny nejedinečné atributy TET
    and makes it possible to combine multiple attributes in a search.

Pro vyhledávání TET lze nastavit dva limity

  - Minimum number of attributes required to search: This property
    defines how many of the non-unique attributes that must be entered
    before a search can be performed.

<!-- konec seznamu -->

  - Maximální počet typů trasovaných entit, které se mají vrátit: Tato vlastnost definuje, jak konkrétní musí být vyhledávání, omezením počtu shodných typů trasovaných entit, které má uživatel povoleno získat pro svá vyhledávací kritéria. Pokud je počet odpovídajících záznamů větší než toto maximum, nebudou vráceny. Uživatel musí před vrácením poskytnout konkrétnější kritéria vyhledávání, aby snížil počet odpovídajících záznamů.

    > **NOTE**
    >
    > This maximum is only applied to search results outside the users capture org unit. Within the capture scope, the user can see any number of results.

### Nakonfigurujte vyhledávací organizační jednotky pro uživatele { #configure-search-organisation-units-for-a-user } 

To be able to search in other organisation units than the users data
capture organisation units, the user must be assigned with search
organisation units. Giving a user a search organisation unit will also
give it access to search in all children of that organisation unit.

1.  Otevřete aplikaci **Uživatelé**

2.  Klikněte na uživatele

3.  Otevřít **Přiřadit vyhledávací organizační jednotky**

4.  Vyberte organizační jednotky

5.  Klikněte na **Uložit**

## Klonujte objekty metadat { #clone_metadata } 

Klonování datového prvku nebo jiných objektů může ušetřit čas při vytváření mnoha podobných objektů.

1.  Otevřete aplikaci **Údržba** a najděte typ objektu metadat
    který chcete klonovat.

2.  V seznamu objektů klikněte na nabídku možností a vyberte **Klonovat**.

3.  Upravte požadované možnosti.

4.  Klikněte **Uložit**.

## Odstraňte objekty metadat { #delete-metadata-objects } 

> **Poznámka**
>
> Datový prvek a další objekty datových prvků můžete odstranit, pouze 
> pokud k samotnému datovému prvku nejsou přidružena žádná data.

> **Varování**
>
> Jakákoli sada dat, kterou ze systému odstraníte, je nenávratně ztracena.
> Odebrány budou také všechny formuláře pro zadávání údajů a formuláře 
> oddílů, které mohly být vyvinuty. Před odstraněním jakékoli datové sady 
> se ujistěte, že jste vytvořili zálohu své databáze, pro případ, že byste ji 
> v určitém okamžiku potřebovali obnovit.

1.  Otevřete aplikaci **Údržba** a najděte typ objektu metadat
    které chcete smazat.

2.  V seznamu objektů klikněte na nabídku možností a vyberte **Odstranit**.

3.  Klikněte na **Potvrdit**.

## Změňte nastavení sdílení pro objekty metadat { #change-sharing-settings-for-metadata-objects } 

Objektům metadat můžete přiřadit různá nastavení sdílení, například organizační jednotky a atributy sledovaných entit. Tato nastavení sdílení určují, kteří uživatelé a skupiny uživatelů mohou zobrazit nebo upravit objekt metadat.

Některé objekty metadat také umožňují změnit nastavení sdílení zadávání dat pro objekt. Tato další nastavení určují, kdo může pomocí metadat zobrazit nebo zadat data do polí formuláře.

> **Poznámka**
>
> Výchozí nastavení je, že každý (**Veřejný přístup**) může najít,
> prohlížet a upravovat objekty metadat.

1.  Otevřete aplikaci **Údržba** a najděte typ objektu metadat
    chcete upravit.

2.  In the object list, click the context menu and select **Sharing
    settings**.

3.  (Optional) Add users or user groups: search for a user or a user
    group and select it. The user or user group is added to the list.

4.  Změňte nastavení sdílení pro skupiny přístupu, které chcete upravit.

      - **Can edit and view**: The access group can view and edit the
        object.

      - **Může pouze zobrazit**: Přístupová skupina může zobrazit objekt.

      - **No access** (only applicable to **Public access**): The public
        won't have access to the object.

5.  Change data sharing settings for the access groups you want to
    modify.

      - **Can capture data**: The access group can view and capture data
        for the object.

      - **Can view data**: The access group can view data for the
        object.

      - **No access**: The access group won't have access to data for
        the object.

6.  Klikněte na **Zavřít**.

## Zobrazit podrobnosti o objektech metadat { #display-details-of-metadata-objects } 

1.  Otevřete aplikaci **Údržba** a najděte typ objektu metadat
    které chcete zobrazit.

2.  In the object list, click the options menu and select **Show
    details**.

## Přeložte objekty metadat { #translate-metadata-objects } 

DHIS2 poskytuje funkce pro překlady obsahu databáze, například datových prvků, skupin datových prvků, indikátorů, skupin indikátorů nebo organizačních jednotek. Tyto prvky můžete přeložit na libovolný počet národních prostředí. Národní prostředí představuje konkrétní geografickou, politickou nebo kulturní oblast.

> **Tip**
>
> Chcete-li aktivovat překlad, otevřete aplikaci **Nastavení systému** a klikněte na \>
> **Vzhled** a vyberte jazyk.

1.  Otevřete aplikaci **Údržba** a najděte typ objektu metadat
    you want to translate.

2.  V seznamu objektů klikněte na nabídku možností a vyberte **Přeložit**.

    > **Tip**
    >
    > If you want to translate an organisation unit level, click
    > directly on the **Translate** icon next to each list item.

3.  Vyberte národní prostředí.

4.  Zadejte **Název**, **Zkrácený název** a **Popis**.

5.  Klikněte **Uložit**.

