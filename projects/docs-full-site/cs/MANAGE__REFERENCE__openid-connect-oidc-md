---
edit_url: "https://github.com/dhis2/dhis2-docs/blob/new_install_docs/src/sysadmin/reference/oauth.md"
revision_date: '2024-01-30'
tags:
- Správa
---

# Konfigurace OpenID Connect (OIDC) { #install_oidc_configuration } 

DHIS2 podporuje vrstvu identity OpenID Connect (OIDC) pro jednotné přihlášení (SSO). OIDC je standardní ověřovací protokol, který uživatelům umožňuje přihlásit se pomocí poskytovatele identity (IdP), jako je například Google. Poté, co se uživatelé úspěšně přihlásí ke svému IdP, budou automaticky přihlášeni k DHIS2.

Tato část poskytuje obecné informace o používání DHIS2 s poskytovatelem OIDC a také kompletní příklady konfigurace.

Ověřovací postup DHIS2 OIDC „autorizační kód“:

1. Uživatel se pokusí přihlásit do DHIS2 a klikne na tlačítko poskytovatele OIDC na přihlašovací stránce.

2. DHIS2 přesměruje prohlížeč na přihlašovací stránku IdP.

3. Pokud ještě není přihlášen, bude uživatel vyzván k zadání přihlašovacích údajů. Po úspěšné autentizaci IdP odpoví přesměrováním zpět na server DHIS2. Přesměrování obsahuje jedinečný autorizační kód vygenerovaný pro uživatele.

4. Server DHIS2 interně odešle autorizační kód uživatele zpět na server IdP spolu se svým vlastním ID klienta a tajnými pověřeními klienta.

5. IdP vrátí ID token zpět na server DHIS2. Server DHIS2 provede ověření tokenu.

6. Server DHIS2 vyhledá interního uživatele DHIS2 s požadavky na mapování nalezenými v tokenu ID (výchozí nastavení pro e-mail), autorizuje uživatele a dokončí proces přihlášení.

## Requirements for using OIDC with DHIS2: { #requirements-for-using-oidc-with-dhis2 } 

### IdP server account { #idp-server-account } 

Musíte mít účet správce u poskytovatele online identity (IdP) nebo na samostatném serveru, které podporuje DHIS2.

V současné době jsou podporováni a testováni následující IdP:

* Google
* Azure AD
* WSO2
* Okta (Viz samostatný návod: [zde](#configure-openid-connect-with-okta))

K dispozici je také **obecná konfigurace poskytovatele**, která může podporovat „jakéhokoli“ poskytovatele kompatibilního s OIDC.

### DHIS2 user account { #dhis2-user-account } 

Musíte explicitně vytvořit uživatele na serveru DHIS2, než se budou moci přihlásit k poskytovateli identity. Jejich import z externího adresáře, jako je například Active Directory, není v současné době podporován. Standard OIDC nepodporuje zajišťování a správu uživatelů s externím úložištěm identit.

### Nároky IdP a mapování uživatelů { #idp-claims-and-mapping-of-users } 

Chcete-li se přihlásit k DHIS2 pomocí OIDC, musí být daný uživatel zřízen v IdP a poté namapován na předem vytvořený uživatelský účet v DHIS2. OIDC používá metodu, která se opírá o nároky na sdílení atributů uživatelských účtů s jinými aplikacemi. Nároky zahrnují atributy uživatelských účtů, jako je e-mail, telefonní číslo, jméno atd. DHIS2 se spoléhá na nárok IdP k mapování uživatelských účtů z IdP na ty na serveru DHIS2. Ve výchozím nastavení DHIS2 očekává, že IdP předá požadavek _email_. V závislosti na vašem IdP možná budete muset nakonfigurovat DHIS2 tak, aby používal jiný nárok IdP.

Pokud jako IdP používáte Google nebo Azure AD, výchozím chováním je použití nároku _email_ k mapování identit IdP na uživatelské účty DHIS2.

> **Note**
>
> In order for a DHIS2 user to be able to log in with an IdP, the user profile checkbox: *External authentication only OpenID or LDAP* must be checked and *OpenID* field must match the claim (mapping claim) returned by the IdP. Email is the default claim used by both Google and Azure AD.

## Nakonfigurujte poskytovatele identity pro OIDC { #configure-the-identity-provider-for-oidc } 

Toto téma poskytuje obecné informace o konfiguraci poskytovatele identity (IdP) pro použití OIDC s DHIS2. Toto je jeden krok ve vícekrokovém procesu. Každý IdP má mírně odlišné způsoby konfigurace. Podívejte se do vlastní dokumentace vašeho IdP, jak vytvořit a nakonfigurovat aplikaci OIDC. Zde označujeme server DHIS2 jako "aplikaci" OIDC.

### URL přesměrování { #redirect-url } 

All IdPs will require a redirect URL to your DHIS2 server. 
You can construct it using the following pattern:

```
(protocol):/(your DHIS2 host)/oauth2/code/PROVIDER_KEY
```

Příklad při použití Google IdP:

```
https://mydhis2-server.org/oauth2/code/google
```

Externí odkazy na pokyny pro konfiguraci vašeho poskytovatele identity:

* [Google](https://developers.google.com/identity/protocols/oauth2/openid-connect)
* [Výukový program Azure AD](https://medium.com/xebia-engineering/authentication-and-authorization-using-azure-active-directory-266980586ab8)


## Example setup for Google { #example-setup-for-google } 

1. Zaregistrujte si účet a přihlaste se. Například pro Google můžete přejít do Google [konzole pro vývojáře](https://console.developers.google.com).
2. Na panelu vývojáře Google klikněte na „vytvořit nový projekt“.
3. Postupujte podle pokynů pro vytvoření ID klienta OAuth 2.0 a tajného klíče klienta.
4. Nastavte svou adresu URL pro autorizované přesměrování na: `https://mydhis2-server.org/oauth2/code/google`
5. Zkopírujte a uschovejte „ID klienta“ a „tajemství klienta“ na bezpečném místě.

> **Tip**
>
> When testing on a local DHIS2 instance running for example on your laptop, you can use localhost as the redirect URL, like this: `https://localhost:8080/oauth2/code/google`
> *Remember to also add the redirect URL in the Google developer console*

### Google dhis.conf example: { #google-dhisconf-example } 
```properties

# Enables OIDC login
oidc.oauth2.login.enabled = on

# Client id, given to you in the Google developer console
oidc.provider.google.client_id = my client id

# Client secret, given to you in the Google developer console
oidc.provider.google.client_secret = my client secret

# [Optional] Authorized redirect URI, the same as set in the Google developer console 
# If your public hostname is different from what the server sees internally, 
# you need to provide your full public url, like the example below.
oidc.provider.google.redirect_url = https://mydhis2-server.org/oauth2/code/google

# [Optional] Where to redirect after logging out.
# If your public hostname is different from what the server sees internally, 
# you need to provide your full public url, like the example below. 
oidc.logout.redirect_url = https://mydhis2-server.org

```

## Example setup for Azure AD { #example-setup-for-azure-ad } 

Make sure your Azure AD account in the Azure portal is configured with a redirect URL like: `(protocol):/(host)/oauth2/code/PROVIDER_KEY`. 
To register your DHIS2 server as an "application" in the Azure portal, follow these steps:

> **Note**
>
> PROVIDER_KEY is the "name" part of the configuration key, example: "oidc.provider.PROVIDER_KEY.tenant = My Azure SSO"
> If you have multiple Azure providers you want to configure, you can use this name form: (azure.0), (azure.1) etc.
> Redirect URL example: https://mydhis2-server.org/oauth2/code/azure.0

1. Vyhledejte a vyberte *Registrace aplikací*.
2. Klikněte na *Nová registrace*.
3. In the *Name* field, enter a descriptive name for your DHIS2 instance.
4. Do pole *URI přesměrování* zadejte adresu URL přesměrování, jak je uvedeno výše.
5. Klikněte na *Registrovat*.

### Azure AD dhis.conf example: { #azure-ad-dhisconf-example } 
```properties

# Enables OIDC login
oidc.oauth2.login.enabled = on

# First provider (azure.0):

# Alias, or name that will show on the login button in the DHIS2 login screen.
oidc.provider.azure.0.tenant = organization name

# Client id, given to you in the Azure portal
oidc.provider.azure.0.client_id = my client id

# Client secret, given to you in the Azure portal
oidc.provider.azure.0.client_secret = my client secret

# [Optional] Authorized redirect URI, the as set in Azure portal 
# If your public hostname is different from what the server sees internally, 
# you need to provide your full public url, like the example below.
oidc.provider.azure.0.redirect_url = https://mydhis2-server.org/oauth2/code/azure.0

# [Optional] Where to redirect after logging out.
# If your public hostname is different from what the server sees internally, 
# you need to provide your full public URL, like the example below.
oidc.logout.redirect_url = https://mydhis2-server.org

# [Optional], defaults to 'email'
oidc.provider.azure.0.mapping_claim = email

# [Optional], defaults to 'on'
oidc.provider.azure.0.support_logout = on


# Second provider (azure.1):

oidc.provider.azure.1.tenant = other organization name
...
```

## Generic providers { #generic-providers } 

Generického poskytovatele lze použít ke konfiguraci „jakéhokoli“ standardního poskytovatele OIDC, který je kompatibilní s „Spring Security“.

V níže uvedeném příkladu nakonfigurujeme norského vládního poskytovatele _HelseID_ OIDC pomocí klíče poskytovatele `helseid`.

The defined provider will appear as a button on the login page with the provider key as the default name, 
or the value of the `display_alias` if defined. The provider key is arbitrary and can be any alphanumeric string, 
except for the reserved names used by the specific providers (`google`, `azure.0,azure.1...`, `wso2`).

> **Note**
> The generic provider uses the following hardcoded configuration defaults:
> **(These are not possible to change)**
> * Client Authentication, `ClientAuthenticationMethod.BASIC`: [rfc](https://tools.ietf.org/html/rfc6749#section-2.3)
> * Authenticated Requests, `AuthenticationMethod.HEADER`: [rfc](https://tools.ietf.org/html/rfc6750#section-2) 

### Generic (helseid) dhis.conf example: { #generic-helseid-dhisconf-example } 

```properties

# Enables OIDC login
oidc.oauth2.login.enabled = on

# Required variables:
oidc.provider.helseid.client_id = CLIENT_ID
oidc.provider.helseid.client_secret = CLIENT_SECRET
oidc.provider.helseid.mapping_claim = helseid://claims/identity/email
oidc.provider.helseid.authorization_uri = https://helseid.no/connect/authorize
oidc.provider.helseid.token_uri = https://helseid.no/connect/token
oidc.provider.helseid.user_info_uri = https://helseid.no/connect/userinfo
oidc.provider.helseid.jwk_uri = https://helseid.no/.well-known/openid-configuration/jwks
oidc.provider.helseid.end_session_endpoint = https://helseid.no/connect/endsession
oidc.provider.helseid.scopes = helseid://scopes/identity/email

# [Optional] Authorized redirect URI, the as set in Azure portal 
# If your public hostname is different from what the server sees internally, 
# you need to provide your full public url, like the example below.
oidc.provider.helseid.redirect_url = https://mydhis2-server.org/oauth2/code/helseid

# [Optional], defaults to 'on'
oidc.provider.helseid.enable_logout = on

# [Optional] Where to redirect after logging out.
# If your public hostname is different from what the server sees internally, 
# you need to provide your full public URL, like the example below.
oidc.logout.redirect_url = https://mydhis2-server.org

# [Optional] PKCE support, see: https://oauth.net/2/pkce/), default is 'false'
oidc.provider.helseid.enable_pkce = on

# [Optional] Extra variables appended to the request. 
# Must be key/value pairs like: "KEY1 VALUE1,KEY2 VALUE2,..."
oidc.provider.helseid.extra_request_parameters = acr_values lvl4,other_key value2

# [Optional] This is the alias/name displayed on the login button in the DHIS2 login page
oidc.provider.helseid.display_alias = HelseID

# [Optional] Link to an url for a logo. (Can use absolute or relative URLs)
oidc.provider.helseid.logo_image = ../security/btn_helseid.svg
# [Optional] CSS padding for the logo image
oidc.provider.helseid.logo_image_padding = 0px 1px
```

## JWT bearer token authentication { #jwt-bearer-token-authentication } 

Authentication with *JWT bearer tokens* can be enabled for clients which API-based when OIDC is configured. 
The DHIS2 Android client is such a type of client and have to use JWT authentication if OIDC login is enabled.

> **Note**
>
> DHIS2 currently only supports the OAuth2 authorization code grant flow for authentication with JWT, (also known as "three-legged OAuth")
> DHIS2 currently only supports using Google as an OIDC provider when using JWT tokens


## Požadavky { #requirements } 
* Configure your Google OIDC provider as described above 
* Disable the config parameter ```oauth2.authorization.server.enabled``` by setting it to 'off'
* Enable the config parameter ```oidc.jwt.token.authentication.enabled``` by setting it to 'on'
* Vygenerujte Android OAuth2 client_id, jak je popsáno [zde](https://developers.google.com/identity/protocols/oauth2/native-app#creatingcred)

## JWT authentication example { #jwt-authentication-example } 

Následující část `dhis.conf` ukazuje příklad, jak povolit ověřování JWT pro klienta založeného na rozhraní API.

```properties

# Umožňuje přihlášení OIDC
oidc.oauth2.login.enabled = on

# Minimální požadované konfigurační proměnné:
oidc.provider.google.client_id = my_client_id
oidc.provider.google.client_secret = my_client_secret

# Povolte podporu JWT
oauth2.authorization.server.enabled = off
oidc.jwt.token.authentication.enabled = on

# Definujte klienta 1 pomocí tokenů JWT
oidc.provider.google.ext_client.0.client_id = JWT_CLIENT_ID

# Definujte klienta 2 pomocí tokenů JWT
oidc.provider.google.ext_client.1.client_id = JWT_CLIENT_ID

```

> **Note**
>
> [Check out our tutorial for setting up Okta as a generic OIDC provider.](../../../topics/tutorials/configure-oidc-with-okta.md)

## Connecting a single identity provider account to multiple DHIS2 accounts { #connecting-a-single-identity-provider-account-to-multiple-dhis2-accounts } 

DHIS2 has the ability to map a single identity provider account to multiple DHIS2 accounts. API calls are available to list the linked accounts and also switch between then.

When this option is selected, the `openid` database field in the `userinfo` table does not need to be unique.  When presented with an `openid` value from the identity provider, DHIS2 will log in the user that most recently logged in.

The following `dhis.conf` section shows how to enable linked accounts.

```properties
# Enable a single OIDC account to log in as one of several DHIS2 accounts
linked_accounts.enabled = on
```

For instructions on how to list linked accounts and switch between them, see [*Switching between user accounts connected to the same identity provider account* in the Users chapter of the developer documentation.](../../../develop/using-the-api/dhis-core-version-master/users.html#switching-between-user-accounts-connected-to-the-same-identity-provider-account)

