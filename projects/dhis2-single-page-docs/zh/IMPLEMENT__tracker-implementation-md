---
revision_date: '2024-01-30'
tags:
- Implement
template: single.html
---

# 目标观众 { #target-audience } 

This guide is tailored for individuals and entities navigating the process regarding the adoption of DHIS2 Tracker. It serves as a valuable resource for prospective system owners, project managers, decision-makers, and donors seeking clarity on whether DHIS2 Tracker aligns with their specific requirements. Additionally, this guide is instrumental for those actively engaged in planning, budgeting, and overseeing the implementation of DHIS2 Tracker.

Whether you are exploring the feasibility of DHIS2 Tracker for your organization or actively managing its implementation, this guide provides insights to aid in informed decision-making. The intended readership encompasses a spectrum of roles, including system owners, project managers, decision-makers, donors, and professionals responsible for the configuration, training, and ongoing support of DHIS2 Tracker.

The content of this document is rooted in practical experiences drawn from various use cases, which are explicitly referenced throughout the guide. For a comprehensive understanding of DHIS2 Tracker and its implementation, it is recommended to consult this guide in conjunction with the complete documentation available at docs.dhis2.org.


可以按照 [DHIS2 github](https://github.com/dhis2/dhis2-docs/blob/master/src/commonmark/en/content/common/submitting-a-doc-fix.md) 中描述的过程对本指南进行建议的更改和改进



# 介绍 { #introduction } 

Tracker is the app within the DHIS2 platform that enables the capture and use of individual, longitudinal data. The functionality of Tracker covers a wide spectrum of needs, from monitoring the quality and availability of water wells, to collecting student attendance in a classroom, to capturing patient data in a shared health record. For the purposes of this guide, many of the examples will come from health systems, although Tracker is also widely used for education systems, environmental systems, logistics, and more.

Many countries and programs are making use of increased network availability and the widespread presence of mobile devices and other hardware to push information systems closer to the level where primary data are generated. Individual-level data adds granularity and nuance to datasets captured in routine information systems, providing opportunities for ad hoc analysis, shifting indicators over time, and improving data quality. Beyond its usefulness for reporting and analysis, individual-level data can also be used to eliminate reporting redundancies, empower lower level staff with better decision-making tools, and place the client at the center of the information system. In short, individual-level data is the smallest data unit, and as such can be repurposed in many ways to satisfy the various competing needs in national information systems.

The purpose of this guide is to help determine if Tracker is the right fit for a potential use case and provide practical guidance for planning successful implementations. The use of Tracker at scale introduces additional factors that should be planned for beyond what may already be in place for an existing aggregate DHIS2 instance. The opportunities and potential benefits from information systems increase as a system goes from aggregate data → tracked anonymous data → data from identifiable individuals → real-time patient data at the point of care. Those planning for a Tracker implementation should recognize that the challenges increase along with the benefits. 

本实施指南将提供建议，以帮助您：

-  确定Tracker是否可以满足您的需求
-  评估您的设置是否准备好引入个人级别的数据收集
-  了解实施Tracker与DHIS2汇总有何不同
-  address concerns specific to individual-level data systems, including privacy and security
-  回顾从实际用例中学到的经验教训和最佳实践
-  plan for the introduction of your Tracker program(s) at the desired scale
-  建立适当的基础结构，该基础结构将随着时间的推移维护Tracker程序

该指南分为两个基本部分：

- **Is My Project Ready For Tracker?** describes five important contextual factors that should be well understood for your setting before proceeding with planning a Tracker implementation

    - 机构支持和支持
    - 资金
    - 法规与政策
    - Capacity and competency
    - 基础设施

- **构建您的Tracker程序**为Tracker实施的九个不同方面提供具体的指导和建议

    - 确定规模
    - 设计和配置过程
    - 确定您的M＆E框架
    - 实时与辅助数据输入
    - 移动与网络
    - 建立支持人力资源的基础设施
    - 代管
    - 培训和推广
    - 将Tracker与您的聚合系统相关

整个文档以及附录中提供了特定计划工具的链接。

## Tracker可用于什么用途？ { #what-can-tracker-be-used-for } 

As with the rest of the DHIS2 platform, Tracker has a generic data model that allows it to be configured by the user for many different purposes. At its most basic, Tracker allows the user to define a particular kind of thing (person, commodity, lab sample, catchment area, etc.) that they want to follow over time (a tracked entity), define the data that they want to collect about this entity (attributes, data elements), place the data elements in a specific order with accompanying conditions or logic (program stages, program rules), and determine the analytics that should be produced (program indicators, event reports, data visualizations, etc.)

An example of a simple Tracker program could be a program for collecting malaria case information at the point of care. The tracked entity would be a person, defined by attributes such as first name, last name, date of birth, or village. In general, attributes are data about the tracked entity (i.e. person) that are reasonably expected to stay the same over the period of follow-up and are often used to uniquely identify the entity (person). The program would contain data elements such as symptoms, test used and result, treatment provided, etc. These data elements might have pre-configured options for possible responses, such as possible tests available, or logic helping to ensure data quality, such as possible minimum and maximum values for a given data element. The data collected would be visible to the clinical user as a part of the malaria patient’s shared health record, but could also be used to generate monthly reports required by the national malaria control program, provide decision support to the clinician, generate SMS reminders to the patient to promote adherence to treatment, or populate a clinic-facing dashboard containing key performance indicators. For all these purposes, the data were collected only once -- during the patient visit -- but were reused many times for different needs.

DHIS2 also supports the collection of individual data without longitudinal tracking using the Capture and Event apps. Non-longitudinal tracking (Event programs) will be referred to throughout this documentation as well. Event programs generally follow the same data model as Tracker, with the exception of defining a tracked entity which is not required for non-longitudinal tracking. An example of such an Event program could be the reporting of line-listing malaria case data. The line-listing data captured by an Event program would contain the same individual data as in the previous (tracked entity) program, but without linking these data to a tracked entity (patient) for longitudinal tracking over time. As such, the data would not become a part of a shared health record (or perhaps not used to generate SMS message reminders to the patient, or other features that rely on tracking an entity over time); however, the Event program would capture more granular data about malaria cases than an aggregate data model, in turn enhancing analytical capability. 

As seen from the examples above, Tracker and the collection of individual data are quite different from traditional aggregate reporting for health management information systems (HMIS). Only one of the potential uses described above are satisfied by aggregate data collection -- that of monthly reporting -- whereas the patient-, clinician-, and facility-facing uses only become possible through the collection of individual data.

Even with regards to routine reporting, the collection of individual data introduces opportunities for improved data interpretation and analysis, and -- crucially -- for action to be taken. For example, an aggregate report might show that overall immunization coverage is 80%, but lacks detail as to whether the remaining 20% reflects errors in reporting, unintentional exclusion of certain individuals/groups (i.e. due to geographic or demographic factors), or other factors. The aggregate numbers also do not allow for the specific identification of non-vaccinated children that could be followed up with through a targeted outreach program. The aggregate numbers in this example address a basic need of Ministries of Health to report national progress on a global indicator, but not the needs of immunization program managers or providers to take specific actions to improve coverage.

One inherent benefit to using Tracker as an individual level system is the capacity for alignment with the existing aggregate DHIS2 system, which is already used in most lower- and middle-income countries as a national HMIS. Unlike a standalone Electronic Medical Record (EMR) or other application, Tracker encourages the collection of structured data that can natively aggregate upwards and be fed into the national HMIS, thus replacing secondary data entry and aggregation with primary source data.

作为DHIS2平台的核心组件，Tracker与DHIS2其余软件一起每年更新两次。改进Tracker的推动力来自实际的实施，并与全球建议保持一致，特别是[WHO加强卫生系统数字干预指南]（https://www.who.int/reproductivehealth/publications/digital -interventions-health-system-strengthening / en /）。在推荐的十种干预措施中，Tracker具有支持以下功能的特定功能：

- 出生通知
- 死亡通知
- 库存通知和商品管理
- 目标客户沟通
- 卫生工作者决策支持
- 对客户的健康状况和服务进行数字跟踪并结合决策支持
- 数字跟踪与决策支持和目标客户沟通相结合
- 以数字方式为卫生工作者提供培训和教育内容

Taking full advantage of such features requires that the data collected are systematic and adhere to normative standards. In health care, primary and public health services that are strongly driven by fixed guidelines and workflows are particularly suited for Tracker programs. For example in Antenatal Care (ANC), most countries have guidelines with algorithms for screening and patient management in response to test findings that can be incorporated in Tracker to follow a routine clinical workflow, supporting both the care provider and the reporting needs. In more complex areas of health care, with less documented and well-defined decision algorithms (such as in a referral hospital, for example) Tracker may be best used for simple data collection, allowing the clinician to determine the best use of the data for patient triage, and allowing the standardized data elements to be used for additional reporting or other purposes.


## 跟踪器用例示例 { #example-tracker-use-cases } 

Throughout this guide, we will refer to use cases to give real-world examples of planning principles, decision points, software and data utilization, common hurdles and issues, and lessons learned at different stages of the Tracker planning and implementation process. A short introductory summary of these individual use cases is provided here. Greater detail for some of the use cases can be found on www.dhis2.org.

### 预先配置的跟踪程序包 { #pre-configured-tracker-packages } 

在[WHO的卫生设施数据分析和使用工具包]（https://www.who.int/healthinfo/tools_data_analysis_routine_facility/en/）下，已创建了预配置的Tracker程序，以涵盖一系列健康主题。这些软件包旨在作为国别计划的起点，允许进一步配置以适应当地情况，同时保留指标和实践的全球标准。可以将它们一起或单独添加到现有的DHIS2系统中。可以在上面的链接以及who.dhis2.org上访问这些软件包。当前的预配置软件包包括以下主题：

- 免疫不良事件
- CRVS的出生，死产和死亡通知
- 死亡原因（包括启动死亡率列表中的ICD-10代码）
- 疟疾繁殖地调查
- 疟疾的诊断，治疗，病例和家庭调查
- 疟疾疫情调查
- 大规模免疫运动
- 常规免疫注册表
- 结核病病例监测

仍在开发中的其他软件包可以通过https://who.dhis2.org/documentation/work_in_progress.html进行访问。

### 博茨瓦纳：营养与免疫计划 { #botswana-nutrition-and-immunization-program } 

博茨瓦纳制定了一项营养与免疫相结合的计划，为接受营养援助的幼儿提供关键服务，同时确保儿童达到其生长指标并接受全套疫苗。与博茨瓦纳团队合作，增强了Tracker平台，以生成标准化的z得分，从而可以快速评估身高体重，年龄体重和年龄高度。

### 加纳：HIV / ART和其他eTracker模块 { #ghana-hivart-and-other-etracker-modules } 

自2012年以来，加纳健康服务部领导了一项开创性计划，该计划通过DHIS2跟踪程序（“ eTrackers”）报告患者水平的数据。截至2019年，他们正在使用8个不同的eTracker模块。一个很好的例子就是他们的HIV / ART eTracker，它可以通过测试和治疗跟踪各个患者，使卫生人员更容易识别和跟进违法者，同时还支持加纳一直在进行的艾滋病毒汇总数据的报告流程。自2006年以来。

### 巴勒斯坦：母婴健康电子登记系统 { #palestine-maternal-and-child-health-eregistry } 

巴勒斯坦的每位妇女都被分配了一个初级保健诊所，如果该诊所不能提供她所需要的服务，她将被要求去一个更高级别的诊所。此推荐系统需要一个eRegistry，该eRegistry可以控制对临床患者文件的访问，支持跨不同医疗场所的护理连续性，允许从多个不同点输入数据，并提供分析以帮助根据巴勒斯坦的产前护理指南做出决策。我们与巴勒斯坦的合作始于2014年。母婴健康（MCH）电子注册表的开发和实施包括开发人员，决策者，公共卫生官员和医疗保健提供者之间的迭代方法和动态对话。此实现的特点是广泛使用自动SMS消息与患者进行通信，以及质量改进仪表板来衡量诊所的绩效并支持质量护理。

### 津巴布韦：国家疟疾控制计划 { #zimbabwe-national-malaria-control-program } 

DHIS2 Android Tracker在津巴布韦的实施始于2014年，是国家疟疾控制计划（NMCP）和奥斯陆大学之间的一项合作项目，此后已扩展到覆盖该国60多个地区的近一半。此实现具有脱机数据收集，详细的位置数据以及近实时数据收集和分析的功能，并且是与全球多个利益相关者合作开发具有跨地理区域和疾病区域扩展潜力的程序的示例。




# 我的项目准备好进行跟踪了吗？ { #is-my-project-ready-for-tracker } 

## 准备问题和关键注意事项 { #readiness-questions-and-key-considerations } 

本节旨在描述在进行Tracker实施之前应充分理解的一些关键环境条件。由于引入了Tracker的许多国家已经将DHIS2用于国家HMIS或其他汇总目的，因此重要的是要突出DHIS2 Tracker和Aggregate系统之间的一些关键差异，以便针对围绕实施和管理可能需要进行的更改。

跟踪器程序通常会扩展信息系统的范围，将其扩展到以前未使用任何电子信息系统的用户。本质上，单个数据需要围绕数据隐私和安全性进行其他考虑。这两个因素意味着Tracker实施通常需要：

- 在可能也有较高离职率的工人干部中进行更大范围的培训；
- 更加重视用户接受度并映射到现有工作实践；
- 用于数据捕获的附加硬件，包括随着时间的推移对该硬件的管理；
- 可靠的网络覆盖和/或解决间歇性连接的策略；
- 对隐私和安全的认识和能力得到增强；
- 更大的IT支持能力，可以为更大的用户基础解决问题；分布在更大的地理区域。

这些建议和其他建议将在以下各节中详细讨论。在最初评估新的Tracker实施的准备情况时，以下一系列问题可能会有所帮助。 **特别是，如果您的用例涉及个人识别数据的收集（与健康相关或其他方面的数据），则应在开始使用之前查看并思考以下问题。**

- 是否有*政治和机构意愿*来实施服务点个人级别的大规模数据收集？

- 提供一种用于实际即时医疗点数据收集而又不给医疗提供者增加额外文件负担的系统是否可行？

- What is the *added value* and *meaningful use* of patient-level data in this context? What are the specific questions that only this data can answer?

- 护理提供者，管理者和决策者将如何使用这些数据做出实质性决策？

- 是否有法律，法规收集，存储和使用个人级别的个人身份数据？或者，是否有机制确保这些法律在不久的将来到位？

- 是否有足够，持续的资金，资源和人员能力来进行系统的设计，实施（计算机和互联网），培训，维护，数据管理和监控？

- 有没有办法在卫生系统设置中唯一标识客户端？

- 当前如何在纸上收集和分发可识别的患者记录？

- 是否有临床指南/临床干预措施或至少某种形式的临床实践指南？ HMIS中是否有报告项目清单及其详细定义？

- 当前如何在卫生系统内收集，管理和共享设施级和患者级的数据？

*参考*：

1.  mERA清单：[https://www.bmj.com/content/352/bmj.i1174]（https://www.bmj.com/content/352/bmj.i1174）
2.  数字发展原理
3.  公共卫生信息学–发展中国家的观点：[https://global.oup.com/academic/product/public-health-informatics-9780198758778?cc=ps&lang=en&]（https://global.oup.com/academic / product / public-health-informatics-9780198758778？cc = ps＆lang = zh-CN）


## 一般注意事项 { #general-considerations } 

### 机构支持和支持 { #institutional-buy-in-and-support } 

**确保从项目一开始就获得机构的支持和支持**，以建立长期承诺。跟踪器项目将工作实践与数据管理紧密联系在一起，并且需要时间，精力和资源。如果做得好，它将在底层改变工作惯例，如果做得不好，将会改变负面工作。因此，至关重要的是，项目必须获得项目经理，IT部门，部门负责人等关键利益相关者的大力支持。从一开始，关键利益相关者和用户的多元化工作组应参与设计目标和范围系统将有权决定该工作组的决策，例如替换某些级别的纸质报告，或调整监督流程以响应由于捕获和分析单个级别的数据而可能实现的新的关键绩效指标。

确定相关卫生组织（例如卫生部，公共卫生研究所等）内具有可持续增长潜力的部门/部门，以容纳一个长期的核心行政开发团队。与应该参与的相关部门进行接触，例如与数据收集和管理以及IT部门合作的部门，以及可以为卫生工作者的工作流提供意见的卫生政策制定者和实施者。达成共识，即工作组无意在扩大规模时解散，而应转变为长期管理员和系统管理员。

在进行大规模的Tracker项目之前，请考虑可持续性所需的大规模和长期投资的资金前景，尤其是在项目开始时就进行设备采购，持续的网络成本和培训，以及随着时间的推移进行常规培训新用户。筹资机制的目标和资源分配是否与负责实施跟踪程序的小组保持一致？引入Tracker是否会取代其他方面的成本，例如打印报告表格，一旦采用该系统并运行良好，就可以重新编程？

考虑跟踪器如何影响并潜在地改善各个级别，而不仅仅是最终用户。例如，可以设计一个与抗逆转录病毒治疗的临床工作流程相匹配的Tracker程序，以通过预约提醒和ART站点之间共享的临床记录为受治疗者带来益处。通过自动化报告提供者的某些方面并提供决策支持，可以为护理提供者带来好处。通过基于数据提供有关绩效和挑战的具体信息，可以为主管增加好处；并且由于各个级别数据所带来的机会，不仅可以添加实时数据，还可以引入新的指标类型，例如基于及时性或质量的指标，从而为计划经理带来收益。

针对这些结果进行设计不仅可以极大地提高系统的价值，还可以确保用户的使用和满意度，并可以显着改善医疗保健的提供。由于系统可以满足多个目标，因此这些功能还可以帮助确保捐助者的认可和跨捐助者的融资。



*参考*：

 - [Principles of Donor Alignment for Digital Health](https://www.ictworks.org/principles-donors-digital-health/#.XXtj2SiF7mE)
  - [Principles for Digital Development](https://digitalprinciples.org/)


### 资金 { #funding } 

**确保为开发，实施，培训和持续支持提供可持续的资金**，以在跟踪器项目的整个生命周期中持续有效。跟踪器的实施需要以下几个阶段的资金：

- 需求收集和开发
- 对核心IT团队，行政人员和计划经理进行培训，尤其是如果他们仅熟悉汇总报告时
- 购买和更换设备和备份解决方案（替代设备和纸张）
- 展开/缩放
- End user training, including per diem and workers salariesmake sure
- 连接性（互联网）和SMS成本，跟踪器可能需要对基础设施进行投资才能在现场维持它
- 最终用户级别的IT支持
- 代管
- 持续评估和维护跟踪程序
- 进修培训

现有跟踪器实施的经验表明，跟踪器项目的启动和推出是最消耗资源的阶段。复杂的Tracker程序需要对临床工作流程进行建模并替换纸张报告，因此可能需要一年的时间来设计并获得适当的支持和支持。数千名用户的国家培训需要大量资源。提供新的硬件（例如Android设备或笔记本电脑）需要大量投资。在IT部门雇用和培训其他人员来管理用户的大量增加，需要增加预算。

随着时间的流逝，最大的成本与进修培训和持续的用户支持有关。为了确保可持续的跟踪器实施，至关重要的是，不仅要确保扩大规模，而且还要将来支付日常费用。通常，如果没有足够的资金分配给人员充足的IT团队和/或正在进行的维护和进修培训，则项目就无法持续。

引入单个系统的相关成本可以通过改进流程而有所抵消；减少印刷和运输纸质表格的预算；更好地遵守准则和推荐机制；也就是说，对当前的工作流程进行数字化是一项长期投资，因此应从一开始就制定计划，以将此类项目视为常规惯例的更改，需要持续的支持。

*参考*：

 - 学习包-培训（[http://eregistries.org/wp-content/uploads/2017/11/05-training.pdf](http://eregistries.org/wp-content/uploads/2017/11/05 -training.pdf））
 - 评估患者结果的注册机构：用户指南[Internet]。第三版。 [https://www.ncbi.nlm.nih.gov/books/NBK208631/](https://www.ncbi.nlm.nih.gov/books/NBK208631/）

### 法规与政策 { #legislation-and-policies } 

在部署Tracker之前，重要的是要在本地，国家和国际级别上查看相关的隐私和数据管理法规。收集单个数据与聚合数据绝对不同，因此需要更多地关注隐私和安全性。在缺乏明确的国家政策的情况下，必须制定并商定技术和管理方面的数据安全和保密准则。从数据访问，托管要求到用户实践，必须明确并记录在案的正确实践。

如果隐私得不到保护，许多类型的个人健康数据可能会造成严重后果。例如，在未婚孕妇是非法的或在文化上不可接受的国家中，违反此信息可能会对个人和家庭造成伤害。如果客户不确定自己的数据将得到适当的保护，则他们可能不会与他们的护理提供者就健康问题保持联系，从而降低治疗质量。可以出于政治目的或出于系统边缘化群体的目的识别个人身份数据。

在Tracker实施的计划阶段，应检查几个特定领域。如[eRegistries情况分析工具]（http://eregistries.org/wp-content/uploads/2017/06/Situation-Analysis.pdf）所述，有五个重点领域：

1. 了解法律环境
2. 围绕卫生注册的现有治理
3. 与数据收集和存储相关的指导，立法和当前做法
4. 监督和报告要求
5. 潜在的和现有的道德和社会影响

各国之间的政策可能大不相同，因此在每个Tracker项目开始之初就必须对这些政策进行本地评估非常重要。获得本地隐私政策支持也很重要。经验表明，即使没有外部认可的外部精心制作的法律文件也可以搁置，也不能使用，因为当地组织不参与其开发，并且未将其翻译成当地语言。跟踪器的实施应从各个方面考虑最终用户，包括立法和政策。

收集很长时间后，个人级别的数据对于将来的研究和分析具有重要的价值。 [2018 IMIA医学信息学年鉴文章]（https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6115206/?report=reader#!po=43.3333），它显示了健康记录的数量访问请求正在增长。为了帮助确保将来对敏感数据进行适当的数据管理，如果尚未在本地规定，则应考虑建立数据共享协议的程序。这将有助于维持对信息请求及其使用的系统公正的方法，无论是来自研究组织，捐助者还是其他有关方面。在没有指导或指导性很有限的情况下，建议解决[eRegistries治理工具包]（http://eregistries.org/wp-content/uploads/2017/08/eregistries-governance-toolkit中概述的问题。 pdf），并获得有关数据共享和访问常规政策的适当政府支持。

正确的项目计划将包括时间和资源，用于确定隐私和安全性的基本策略，过程和协议。 eRegistries治理工具包提供了有关如何逐步执行这些步骤的实用指南。与当地利益相关者进行彻底的审查，以了解将收集哪些数据以及如何滥用这些数据，可以帮助推动流程向前发展。确定随时间变化的政策重新制定隐私计划的时间表也很重要。随时了解这些更改将有助于您更好地计划Tracker的开发，实施和维护。

可在[DHIS2用户和实施指南]（https://docs.dhis2.org/2.33/en/index.html）中找到有关Tracker软件隐私功能的特定详细信息以及有关正确配置的指南。

*参考*：

 - [Governance guidance toolkit](http://eregistries.org/wp-content/uploads/2017/08/eregistries-governance-toolkit.pdf)
 - [Situation Analysis Toolkit](http://eregistries.org/wp-content/uploads/2017/06/Situation-Analysis.pdf)
 - [Frost MJ, Tran JB, Khatun F, Friberg IK, Rodriguez, DC: What Does It Take to Be an Effective National Steward of  Digital Health Integration for Health Systems Strengthening in Low-and Middle-Income Countries? Global Health: Science and Practice 2018, Vol 6, Supplement 1](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6203416/pdf/S18.pdf)
 - [Myhre SL, Kaye J, Bygrave LA, Aanestad M, Ghanem B, Mechael P, Frøen JF: eRegistries: governance for electronic maternal and child health registries. BMC pregnancy and childbirth 2016, 16(1):279](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5035445/)
 - [Kloss L, Brodnik, M, Rinsehart-Thompson, L: Access and Disclosure of Personal Health Information: A Challenging Privacy Landscape in 2016-2018. IMIA Yearbook of Medical Informatics 2018, 60-66](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6115206/?report=reader#!po=43.3333)
 -  2012年世卫组织和国际电信联盟（ITU）国家电子卫生策略工具包http://apps.who.int/iris/handle/10665/75211
 - 2015年健康衡量和问责制路线图https://www.who.int/hrh/documents/roadmap4health-measurement_accountability.pdf?ua=1Foundations


### 能力和能力 { #capacity-and-competence } 

鉴于Tracker在用户和IT支持方面的覆盖面越来越广，重要的是**评估并确保有足够的能力和相关能力**来计划，设计，开发，支持和使用Tracker程序。根据目标用户的能力以及他们对适当的硬件和网络的访问情况，可能在该国的某些地区使用Tracker，而在其他地区则不合适。在许多情况下，分阶段推出Tracker很有好处，而不是尝试将它作为常规系统引入尚未准备好的区域或用户。在制定推出计划之前，应该进行评估，以根据适当性指导系统的扩大规模和覆盖范围。

**机构买入和支持**部分中描述的主要利益相关者工作组应尽早参与，以评估系统将针对的用户群，确定哪个部门负责长期支持，谁将负责在最初和一段时间内提供培训，等等。

IT部门可能需要额外的培训，以增加其正确管理个人可识别数据的能力，或为所提供的任何新硬件提供支持。

在Tracker中配置的工具和仪表板应与目标用户一起设计，以确保它们适当并被接受。

对用户的培训可能不仅需要系统的特定课程，还需要有关硬件和网络访问的使用，维护和故障排除的常规培训。应该开发和建立简单的工作辅助工具和对第一层IT支持的访问权限，以增加可在中央团队之外处理的用户需求数量。


*参考和资源*：

- Myhre SL，Kaye J，Bygrave LA，Aanestad M，Ghanem B，Mechael P，FrøenJF：电子注册管理机构：电子母婴健康注册管理机构。 BMC怀孕和分娩2016，16（1）：279
- [Software Development learning package](http://eregistries.org/learning-packages/)
- [Governance guidance toolkit](http://eregistries.org/learning-packages/)
- [数字发展原理]（https://digitalprinciples.org/）


### 基础设施 { #infrastructure } 

重要的是要确保适当和足够的基础架构，对于Tracker而言，它可能与其他现有数字系统不同。共有三组必要的基础结构：

**电力和网络**在网络稳定的区域，适合通过笔记本电脑或台式机的浏览器使用Tracker。来自浏览器客户端的数据被立即发送到服务器，浏览器缓存之外没有本地存储。这样可以确保数据保真度并利用服务器端计算的功能。在间歇性或低连接性区域，DHIS2 Android应用程序需要使用Tracker，因为它会创建数据库的本地副本，并允许用户继续工作而无需直接连接到中央服务器。基于Android的项目带来了有关充电电力的其他要求；短信和数据费用；有关更多信息，请查阅[DHIS2 Android应用实施指南]（https://www.dhis2.org/android-documentation）。

**服务器和托管**随着用户数量的增加，用于DHIS2聚合的现有托管解决方案可能不够用，基于Android的实现对服务器资源带来的压力更大。有时使用基于月度的报告系统有时会期望性能低下的托管选项是可以接受的，而支持日常工作流程或临床工作流程的Tracker程序则需要持续的正常运行时间，并且在出现问题时需要及时的IT支持。建立Tracker数据到单独站点的常规备份特别重要，这样可以快速解决主服务器中关键数据的丢失。对当前的托管方法（包括硬件和可用人力资源）进行评估，以开发用于Tracker实施的方法。建议将包含个人身份数据的Tracker程序托管在与聚合系统不同的环境中，以确保更高的安全性。尽管许多国家/地区目前托管DHIS2的本地安装，但值得考虑的是Tracker程序的基于云的托管选项，随着时间的推移，可以在其中确保行业标准的硬件和技术支持。

**最终用户的硬件**鉴于数字医疗项目的广泛采用，目标用户可用的现有硬件可能足以实现新的跟踪器。应该进行评估，以检查计算机和Android设备的可用性，并确定可能需要其他硬件的地方。应该建立维护和更换硬件的长期协议，以确保Tracker系统在最初购买的硬件使用寿命之后仍具有可持续性。

### 安全注意事项 { #security-considerations } 

Security is primarily about people.  The people who are the subjects of data collected; the people who use the data; the people who are responsible for implementing technical measures; and the people whose responsibility it is to manage the security of the particular tracker project.

It is not sufficient to assume that technical implementers will have made a best effort to make the system as secure as possible.  In order to meet any level of regulatory compliance and avoid legal hazard it is usually necessary to be able to demonstrate that reasonable steps have been taken to secure the system.  At a minimum this implies that:

1.  There is a role defined in the organisation whose responsibility it is to be concerned with security related issues.  This might be a chief security officer, a data protection officer or some other designation. The important thing is that there is an individual whose job it is to be concerned about, and to be accountable for addressing, security considerations.  Ideally this is not a technical role, but one closer to senior management.
2.  There should be some documented security plan around the tracker program. This is sometimes referred to as a security posture. It should indicate the principles that are important to the organisation and the processes which are in place to identify, monitor and mitigate risk on an ongoing basis and various. The security plan can include other processes such as acceptable use policies (for employees); Non-Disclosure Agreements (for contracters); access policies; backup and disaster recovery plans; minimum standards for software deployment and configuration etc.

In some organisations the role of security officer is already established and well defined.  In many others it is an evolving need which manifests itself in an environment characterised by the absence of strong regulation, weak IT institutions and management structures, and a lack of appropriate training.  There are existing standards and methodologies which can be useful in shaping such a role, such as the ISO27000 series (including useful free [online material](https://www.iso27001security.com/html/toolkit.html) and templates).  It is not an item frequently seen on funding and budget proposals, but security management training might well be one of the more important items to consider and budget for.

要考虑的高优先级任务的详尽列表：
1.  Make sure the software setup is technically strong, documented and preferably automated.  There are various strategies that can satisfy security concerns, some of which are documented in the DHIS2 Installation Guide.  For system administrators, attending server academy is a good way of meeting peers and exchanging ideas.  Also interact with the server admin community via the community of practice.  There is also telegram group of DHIS2 system administrators, which can be a useful way to ask and answer questions. (to join, email Lamin - laminbjawara@gmail.com ).
2. make sure you have a team (at least 2) of sysadmins that are responsible for the daily maintenance of the system.  Depending on a single person in this role is one of the biggest identified risks in many implementations.
3.  如上所述，必须由他人负责安全性。该角色应：
- report directly to management
- 管理整体风险（风险登记簿是您的朋友）
- 确保系统管理员正在履行职责
- 了解有关数据处理和隐私的当地法律，约束条件和SOP。在他们不在或不在的地方
在当地不足，制定和维护良好实践准则。
4. Ensure that there is a backup plan, including off site, which is regularly tested.  Straightforward unrecoverable data loss has been the single most common security problem countries.
5. DHIS2 Tracker systems should be audited regularly. This can be officially conducted by an auditor general; peer-to-peer within the DHIS2 community; or by engaging the services of an external auditor.  Audits are the best way to ensure that systems remain aligned with secuirty policies.





# Planning your Tracker Implementation { #planning-your-tracker-implementation } 

本部分的目的是概述在您的Tracker实施中将获得成功的注意事项，并按主题进行分组，并提供指向特定工具的链接。

本节将涵盖：

1. Defining purpose, aim and scope
2. 规模
3. Design and Configuration process
4. 实时与辅助数据输入
5. 移动与网络
6. 建立核心团队
7. 代管
8. 训练
9. 推出

## DEFINE PURPOSE, AIM AND SCOPE { #define-purpose-aim-and-scope } 

明确的目的和明确的目标是建立对项目范围和局限性的共识，并能够在内部和外部传达开发和运行Tracker程序的过程的关键。

- 定义跟踪程序的主要目的和次要目的。
- 确定跟踪的实体，数据收集的范围以及数据收集中涉及的卫生干部。
- 确定如何唯一标识目标人群的成员（例如，使用唯一标识号或属性组合）。
- 明确核心团队以及其他利益相关者和系统用户的最初期望。
- 集思广益并讨论在开发阶段要解决的关键问题和关注领域。
- 准备进行开发阶段：制定时间表，并针对可能导致延误的意外事件纳入应急计划。阐明预期的问题并讨论如何缓解。

## 确定规模 { #determining-scale } 

Because individual-level data systems (i.e. Tracker) are aimed at the lowest levels of a system, Tracker programs can dramatically increase the number of users, hardware/devices, technical resources and organisational support required to implement and maintain the system. Countries often have limited personnel that are qualified to manage deployments and there are significant costs associated with the work. 

Scale can refer to several dimensions: programmatic scale, functional scale or geographic scale, to mention a few. 

Scaling geographically can thus take time and resources. There are different strategies to achieving geographical scale i.e. cover one region completely or start “small” in several regions at the same time and scale at a slightly slower pace in parallel.

As implementations scale, a snowball effect tends to take place. When you start scaling things will happen faster; the number of users can increase exponentially, which requires more people and stronger support mechanisms. Hence, planners can ensure that support teams are equipped to handle an increased volume and speed by taking into consideration the following:

**在缩放之前完成并引导跟踪器**
尝试扩展规模之前，先收集证据并证明其影响。考虑减少对未显示影响的功能的投资，或对影响有限的资源密集型功能的投资。您应该有一个最终的设计/配置，该配置/配置应经过用户测试和试验，并在扩展之前产生信息管理和所需报告方面的目标结果。开始缩放时，还不是进行实验的时间。换句话说，测试您的设计并设置100个用户而不是5000个用户。

**治理**
尝试进行扩展之前，请确保有可靠的治理流程和明确的职责分配。确保审核此过程，以确保遵循治理过程。适当的治理对于确保跟踪器项目的灵活性和适应性也至关重要，例如添加新选项集或新诊所的例程。谁做出这些决定，如何记录这些决定，以及如何与用户沟通？

**成本/财务方面的考虑**
考虑您的资金模型，包括创收方案，社交业务模型，每位用户的成本以及维持计划的财务途径。扩展导致支持，设备和连接性方面的运营成本增加。

**扩大基础架构**
随着规模的扩大，您必须处理更多的连接，这又需要增加内存，处理能力，存储和连接性的资源。

扩展过程的一部分可确保您有一个合理的计划来快速恢复，因为更多的人依赖于该系统。

**修改飞行员的程序**
通常无法使用与飞行员完全相同的工具和方法来扩大规模，尤其是涉及培训和支持以达到飞行员所达到的使用水平所需的人力资源和专业知识水平时。因此，请检查您的工具和实施方法，并考虑可以重新设计和简化哪些方面以实现您的核心目标


*参考*：

- 数字发展原理

*工具*：

- 准备评估


## 设计和配置过程 { #design-and-configuration-process } 

**使用户密切关注Tracker程序的设计和配置**，以确保它改善并支持他们的工作。为了开发Tracker程序，需要定义要输入的数据，定义工作流和定义程序规则。所有这些定义决策都应与用户密切协作，因为它们直接关系到并可能影响他们的工作方式。

We recommend to start the design process by asking the following questions to initiate discussions:

1. 您收集的数据的目的是什么？您打算如何使用这些数据？
2. 谁将从Tracker实施中受益？
3. 输入数据的用户将如何从Tracker实施中受益？
4. Do you currently collect this data today? How? What is the current data flow?
5. 当前是否有不需要的数据元素？


**FORMATIVE PHASE**

清楚了解卫生系统（或对于非卫生实施，Tracker计划将涵盖的其他系统），以了解当前系统的“痛点”，确定改进的机会，并最终开发出有用且合适的系统解决这些问题和机会的方法，包括了解卫生工作者，他们收集的数据，他们的临床工作流程以及他们的监督和报告系统。

- 准备并进行现场访问，以绘制临床工作流程，监督和报告要求，并由所有使用Tracker的卫生人员组成。
- 准备并举行利益相关者会议，以告知，探索并获得反馈。
- 验证与跟踪器范围相关的现有国家（临床）指南。
- 映射现有的文档工作流程：记录员工当前的工作，并确保您的设计支持他们的工作实践，而不是使他们变得繁琐。
- 映射指示器和相关数据点以进行报告。
- 考虑是否需要修订准则或报告要点。如果是这样，请制定平行计划以修订指南和报告。

**DEVELOPMENT PHASE**

- 概述当前的临床指南，干预措施，指标和算法。
- 根据当前指南以及报告的指标和数据点，制定用于电子跟踪的算法和数据点。
- 定义目标群体和决策支持的复杂程度。根据工作流支持的级别，为支持创建规则，并将其以商定的需求格式传达给软件开发人员。
- 启用迭代审核过程，以确保开发人员的翻译与医疗保健提供者的需求一致。

**CUSTOMIZATION AND TEST PHASE**

此阶段是与利益相关者，软件开发人员，实施者和用户合作并吸收他们反馈的迭代过程。

- 建立一个结构化且易于访问的数字系统，以在核心工作组之间建立全面而即时的反馈渠道。
- 确保内容开发符合利益相关者，系统用户和出资者的期望。
- 保持有关翻译，使用信息按钮等的开放，开放的讨论，以避免误解。
- 确保在这些阶段中所有用户组之间存在连续且并行的过程，涉及并促进信息流。
- 为开发人员，实施人员和用户定义里程碑。
- 建立结构化且易于访问的在线数字系统，以获取来自最终用户的全面而详细的反馈。

**WHO DHIS2 Health Data Toolkit**

DHIS2 works in partnership with the World Health Organization (WHO) on a variety of health-related initiatives, including the creation of standardized metadata packages to strengthen data use on a national and international level. The WHO-approved DHIS2 Health Data Toolkit provides a digital set of tools to support adoption of WHO routine health data standards into the national routine health information system. Aligned with the WHO Toolkit for Routine Health Information Systems Data, integrated analysis and program-specific DHIS2 modules are designed according to global data analysis guidance and standards for measurement. The DHIS2 toolkit provides a fully digitized reference implementation consisting of installable metadata packages, technical documentation, demo databases and implementation guidance. WHO-approved DHIS2 metadata packages can be installed in standalone DHIS2 systems or integrated into existing DHIS2 instances and adapted according to national context. The metadata packages bring together global standards and DHIS2’s evidence-based design practices for integrated health information systems in an installable toolkit that can be used for design reference or as a direct import for local use.

For more information on the WHO DHIS2 Health Data Toolkit documentation and tools, [see here](https://dhis2.org/who/).

## 确定您的M＆E框架 { #determining-your-me-framework } 

A monitoring and evaluation (M&E) framework is an essential component of a DHIS2 Tracker implementation. It enables the assessment of the implementation's progress and success, and the identification of areas for improvement. A mature tracker implementation should have a robust M&E framework in place to ensure that data collection, use practices, DHIS2 version updates, user administration, security, hosting, user support, and training are all being effectively managed.

**What does a mature tracker implementation look like?**

A mature tracker implementation should have a comprehensive M&E framework that covers all aspects of the implementation. This includes regular evaluations of data collection, data use practices, DHIS2 version updates, user administration, security, hosting, user support, and training. The M&E framework should also include a process for identifying and addressing any issues that arise.

**Maintain and evaluate data collection**

It is important to regularly evaluate the data collection process to ensure that it is accurate, complete, and timely. This includes assessing the quality of data entered, the completeness of the data, and the timeliness of data submission. Identifying and addressing any issues with data collection will improve the overall quality of the data.

**Maintain and evaluate data use practices**

Regularly evaluating data use practices will ensure that the data is being used effectively to inform decision-making and that it is being used in a way that aligns with the organization's goals and objectives. This includes assessing the quality of data analysis, the use of data in decision-making, and the effectiveness of data dissemination.

**Maintain and evaluate keep up with new DHIS 2 versions**

Keeping up with new DHIS2 versions is important to ensure that the implementation is using the most up-to-date version of the software. This includes regularly assessing the version of DHIS2 being used, evaluating the benefits of upgrading to a new version, and implementing any necessary upgrades.

**Maintain and evaluate user admin**

Regularly evaluating user administration will ensure that users have the appropriate access to the system, that user roles and permissions are properly configured, and that user accounts are being managed effectively. This includes assessing the number of active users, the number of new users, and the number of inactive users.

**Maintain and evaluate security**

Regularly evaluating the implementation's security measures will ensure that the data is being protected and that the system is in compliance with security regulations. This includes assessing the effectiveness of the system's authentication and authorization processes, the security of the hosting environment, and the effectiveness of the system's disaster recovery plan.

**Maintain and evaluate hosting**

Regularly evaluating the hosting environment will ensure that the system is properly configured, that the system is performing well, and that the system is available to users. This includes assessing the stability and performance of the hosting environment, the security of the hosting environment, and the availability of the system.

**Maintain and evaluate user support**

Regularly evaluating user support will ensure that users are able to effectively use the system and that any issues are being resolved in a timely manner. This includes assessing the responsiveness of the user support team, the effectiveness of the user support team, and the quality of the user support documentation.

**Maintain and evaluate training**

Regularly evaluating the training program will ensure that users are properly trained and that the training program is meeting the needs of the organization. This includes assessing the effectiveness of the training program, the quality of the training materials, and the number of users who have completed the training program.

It is important to note that the monitoring and evaluation framework should be regularly reviewed and updated to ensure that it is meeting the needs of the organization and that it is aligned with the organization's goals and objectives. It should also be compliant with any national and international regulations and standards related to data security and protection.


## 实时与辅助数据输入 { #real-time-vs-secondary-data-entry } 

**Carefully evaluate whether the data should be entered real time** as this has important implications for how you structure your project. Trackers are used to track individuals through defined programs with associated data elements and rules. The data can be captured by health personnel during the consultation (real-time point of care), or at the end of the day (or when they have time to enter it). The two different approaches naturally have consequences for what the Tracker is used for.

Entering data in real-time allows for real-time decision support, validation of data, and the prevention of double data entry. However, it also requires a reliable internet connection, which may not be available in certain locations. Additionally, real-time data entry may require the use of mobile devices, which can introduce additional challenges such as device maintenance, power supply, and training for health personnel.

If the data are entered at the end of the day or when the health personnel have time, it eliminates these challenges with real-time data entry. However, it also means that the data is not available in real-time and may not be as useful for real-time decision support.

When deciding on the approach, it's important to consider the available resources, the local context, and the organization's goals and objectives. It's also important to have clear Standard Operating Procedures (SOPs) for backup paper files, easy navigation to find clients and mechanisms to prevent errors (such as rules that make it impossible to enter a date in the future).

## 移动与网络 { #mobile-vs-web } 

**考虑数据输入者如何以及何时可以访问Internet **在某些情况下或位置，通过计算机访问在线中央DHIS2服务器非常困难，甚至是不可能的。 DHIS2 Android Capture App是为应对这些情况而设计和开发的。但是，将移动设备引入DHIS2实现将在许多层面上影响您的项目，因此，需要以知情和自觉的方式做出决定。

**网络还是移动？**
在为Tracker实施考虑移动组件时，应考虑两个主要方面：Internet可用性和健康岗位的移动性。给定的Tracker实现可能只需要解决这两个方面之一，或者同时解决这两个方面。我们将尝试定义它们，并在本节中帮助您分析您的情况。

- **流动性**：有些团队通过移动部门在不同的位置提供服务。在移动单元访问的位置，可能有一个带有适当工作站的设施，用于数据收集，但是有时数据输入是在动态环境中或在车辆本身中完成的。在这些情况下，随身携带笔记本电脑并不总是那么容易，取而代之的是使用移动设备。

- ** Internet可用性**：在很多地方，访问Internet都充满挑战。可以在两种主要情况下总结不同的可能情况：* Internet连接不稳定或受限*，并且* Internet连接不可用*。

    - 当* Internet连接不稳定或受限*情况仅限于一天中的某些时刻时，可以考虑使用移动设备或Web进行数据输入。 DHIS2 Web数据输入允许Internet中断时继续输入数据。输入的数据将存储在本地的Web浏览器缓存中，下一次用户上线时，数据将自动上传。需要特别注意的是，此脱机支持取决于Web浏览器的存储，并且仅在浏览器窗口保持打开状态时才起作用。如果用户正在离线收集数据并在离线状态下关闭其正在工作的窗口，那么数据将会丢失。离线支持*吸收*间歇性的Internet连接中断的影响，以提供平稳，稳定的工作体验，但这不是完整的离线解决方案。

    - 如果* Internet连接不可用*，则应考虑使用DHIS2 Android Capture App，该应用程序为数据收集提供了完整的脱机支持。这个应用程式可以在行动装置和平板电脑上使用，也可以在其他装置（例如Chromebook）上执行。因此，Android Capture App可适用于您面临Internet可用性挑战但对数据收集人员的流动性没有挑战的情况。

**使用Android应用程序的含义**
DHIS2 Android Capture App促进了脱机使用Tracker数据收集，但也带来了必须从项目早期阶段就考虑的含义。在您的实施中拥有移动组件可能会影响您的计划，预算，培训，配置和部署策略以及其他方面。

- ** DHIS2配置：**当配置Tracker与移动设备一起使用时，您需要特别注意移动用户的配置，他们对数据输入和组织单位的访问。通常设想移动用户在最偏远和不可访问的区域中物理地收集数据，因此，不期望移动用户从大量设施（例如整个国家的组织单位层次结构）中收集数据。虽然应用程序中没有允许的最大单位部门数量，但大量设备可能会对性能产生影响，具体取决于设备上的资源（内存，处理器）。通常，少于250个组织单位应该是安全的，但是对于典型的移动用例而言，这仍然是一个很大的数目。
It is also very important to pay attention to the configuration of program rules and program indicators. The Android App aims to support all Tracker web functionalities, however some of them might behave slightly differently in Android, or be in the app development roadmap awaiting implementation. A detailed list of the behavior of program rules and program indicators in Android can be found in the _Program Rules_ and _Program indicators_ sections of the [Android App documentation]([https://www.dhis2.org/android-documentation](https://www.dhis2.org/android-documentation)).  

- **Visual representation of data collection:** The user experience of the Android App has been designed to be very visual and intuitive. Icons and colors can be used to configure the data entry forms and how they are displayed. Visual representation is configurable by the system administrator. There is an icon library of over four hundred images and a color palette, and both icons and colors are assignable to most metadata objects: Options, Data Elements, Attributes, Programs / Data Sets. More information for the visual configuration of DHIS2 can be found in the _Visual Configurations_ section of the [Android App documentation]([https://www.dhis2.org/android-documentation](https://www.dhis2.org/android-documentation)).  

- **测试：**在任何DHIS2实现中，测试都是非常重要的阶段。您应与服务器配置并行测试Android App，以确保服务器中进行的所有配置均能正确反映并在App中正常工作。这在配置程序规则期间尤其重要。有关不同类型的测试以及如何计划项目的测试阶段的更多信息，请参见[DHIS2移动实施指南]的_Testing_部分（https://s3-eu-west-1.amazonaws.com/content .dhis2.org / Publications / DHIS + 2 + Mobile + Implementation + Guidelines.pdf）。

- **安全性：** 根据您的 Tracker 配置，您可能将个人数据存储在移动设备上，并且卫生系统对可识别数据的需求与患者的隐私权之间可能存在紧张关系。确保只有获得授权的卫生人员才能访问个人数据至关重要。正确管理个人数据是用户教育的重要组成部分，建立描述要应用的安全措施的 SOP 并确保所有用户共享并遵守这些 SOP 至关重要。系统管理员在配置用户访问级别时也发挥着重要作用，通过确保数据访问适合每个用户并且永远不会不必要地过度。_数据安全和隐私_可以在 [DHIS 2 移动实施指南](https://s3-eu-west-1.amazonaws.com/content .dhis2.org/Publications/DHIS+2+Mobile+Implementation+Guidelines.pdf）找到。
去做;在本文档的“安全性”部分添加链接！

- **购买移动设备：**移动设备的购买是移动部署的关键方面，在规划，预算和物流时需要考虑这些因素。一个好的策略是获得您可以负担得起的最好和最新的设备，以使它们在您的项目生命周期中使用寿命更长。从这个意义上讲，优良作法是尽可能延迟采购的大部分时间（换句话说，任何不需要初始测试和中试阶段的设备），而不是在计划过程的早期购买所有设备。技术-尤其是移动设备-发展非常迅速。给定的模型通常每年更新一次，使消费者能够以相似的价格逐年获得重大的技术改进。可以在[此处]（https://docs.google.com/document/d/1jZjw-hb1W8sszkPU9yPWrPoow91gEkTb0nyZJh3IJQQ/edit）中找到可与DHIS2 Capture Android App一起使用的移动设备的规范。
When you have performed all testing and completed your pilot, you are ready to scale up your deployment with the acquisition of hardware and necessary services. You can find guidance for your mobile acquisition in the _Scale Up_ section of the [DHIS2 Mobile Implementation Guidelines](https://s3-eu-west-1.amazonaws.com/content.dhis2.org/Publications/DHIS+2+Mobile+Implementation+Guidelines.pdf). We summarize below the key aspects to consider in this phase:  

  1）购买设备与BYOD（带上自己的设备）：BYOD的优势在于，它避免了购置的大量初始成本，并减少了管理成本和物流方面的考虑。另一方面，使用BYOD模型会带来管理非常异构的硬件环境的挑战，这意味着不同的设备和Android OS版本会导致不同的最终用户具有不同的捕获和查看数据功能，并最终导致升级核心Tracker实例面临挑战，因为较新的版本与较旧的应用程序版本之间的向后兼容性有限。为最终用户购买设备的主要优势是设备和应用程序版本的一致性，但是这种方法增加了硬件成本，并且涉及与分发移动设备以及随时间进行维护和更换有关的物流挑战。

  2）应用的分发：您可以使用[Github]（https://github.com/dhis2/dhis2-android-capture-app/releases）中提供的APK手动安装Android Capture App，也可以使用[Google播放]（https://play.google.com/store/apps/details?id=com.dhis2）商店。使用Google Play可以更轻松地在所有设备上更新该应用程序，但是您将被迫自动安装该应用程序的所有更新。安装APK可让您控制何时更新以及更新至哪个版本，但是更新所有设备都需要更复杂的过程，对于不使用移动设备管理软件的项目，不建议使用它（请参见下一项）。

  3）电信合同：与移动提供商选择和签订合同的过程因国家/地区而异，并且还取决于组织的采购程序。

- **设备管理和维护：**移动设备管理 (MDM) 是指用于管理移动设备的软件。 MDM 软件对于支持数百种设备、控制所有这些设备上的 APK 文件分发、提供技术支持和执行机构政策是必不可少的。有关 MDM 的理想功能、可用选项以及为您的项目选择正确的 MDM 的指南的更多信息，请参见 [DHIS2 移动实施指南](https://s3-eu- west-1.amazonaws.com/content.dhis2.org/Publications/DHIS+2+Mobile+Implementation+Guidelines.pdf）的_Mobile Device Management_ section。

##  人力资源和IT支持 { #human-resources-and-it-support } 

如果没有合适的人选，那么Tracker的实施将不会成功。在启动跟踪器项目之前，重要的是要确保具有合适能力的合适人员。

建立团队时，请注意以下几点：

1. 争取长期参与。随着时间的推移将保持Tracker实施的人员应该从一开始就成为项目的一部分

2. 从一开始就需要涉及（卫生）系统所有级别的国内资源。从外部顾问到长期员工的项目历史，决策和既定惯例的移交通常具有挑战性。

3. 如果您已经有一个聚合的DHIS2实例，请记住，管理聚合的人员并不会自动获得“ Tracker”项目的“资格”，因为Tracker与聚合报告不同。


|角色 | 职责/任务 |
|:------|----------------------|
|专案经理 | 管理跟踪器项目|
|配置/开发负责人    | 领导开发工作|
|安全经理 | 负责安全政策++|
|培训经理   | 组织培训|
|测试线 | 领导测试工作|
|训练师 | 与最终用户进行培训|
|支持负责人 | 牵头支持工作|
|分布式支持人员| 接收支持和帮助用户的请求|

### IT支持部门 { #it-support-unit } 

支持应该在用户附近提供，这通常需要在地区或分区级别创建新的IT支持结构。如果实时使用Tracker，则应始终在工作时间内提供技术支持，以解决和报告问题。如果Tracker支持临床决策，则IT员工应了解临床工作流程及其在技术系统中的代表。因此，Tracker IT支持团队可能具有与其他健康信息官员不同的技能和背景，并且可能是您的卫生系统中全新的，不同的干部。

**团队结构和管理**

IT支持部门的每个成员都应在第一个最终用户之前接受培训，并且必须证明对系统及其工作原理的高度了解。通常，IT支持部门由领导最终用户培训的相同人员组成。至少应在培训期间向最终用户介绍支持人员，以从一开始就建立融洽的关系和信任。支持人员工作的很大一部分是对工作的“支持性监督”。有效的支持人员也必须知识渊博，受人尊敬和尊重，但通常对最终用户不具有直接授权的权限，因为这可能会降低用户提出技术问题和报告系统问题的意愿。

一旦团队就位，就可以建立内部工作层次结构，从提高层次结构上的技术能力（例如，层次结构顶部的系统管理员），到在层次结构下增加对最终用户的访问权限（例如，最终用户的直接主管） ，现场支持人员）。在人员配置组织阶段，需要开发用于报告和响应最终用户问题的标准操作程序。

**任何IT支持部门的必备工具**

- 常见问题（FAQ）文档：一种简单的文件，以图形和/或本地语言描述了数据输入的标准操作程序以及出现错误时的处理方法。常见问题解答应在所有培训期间分发，并且应由IT支持部门定期更新，并随着Tracker系统的发展与最终用户共享。

- 移动设备管理：为了保护患者级别的数据，必须实施单独的病例管理系统，以跟踪哪些用户有权使用哪个设备来识别丢失/被盗的设备并跟踪病例。该系统可以像电子表格一样简单，但是在更大，更复杂的情况下，可以使用企业级MDM系统来跟踪设备位置，并且可以在需要时远程擦除单个设备。

- 用户管理：IT支持部门应能够记录和管理基本的系统管理任务，例如创建新用户帐户，停用非活动用户帐户或重置密码。

- 用于监视关键系统指标的监视平台：这些关键指标包括按组织部门划分的新注册人数，不活动的用户，服务器停机等。IT支持部门至少应有权访问专用DHIS2仪表板中的汇总指标。按时间和地区划分的实施进度。

- 案例管理平台，用于注册错误和故障单：这些平台（例如JIRA）使IT支持人员可以输入，编辑，分配，跟踪和解决错误和其他故障单，并允许主管监督与服务相关的重要因素，例如未解决的故障单数量和未解决的错误，平均响应时间等。

- 知识管理平台：这是一个存储库，员工可以在其中从以前的票据中学习（从而建立知识库）。与其他任何实施者或系统管理员相比，IT支持部门都更了解用户在Tracker上的实际使用经验，他们的观点对于调整Tracker更好地满足用户的需求至关重要。知识平台（员工之间的电子会议或例行会议）可以分享共同的经验，挫败感或潜在改进的想法

- 报告错误的热线：此热线可以有多种形式。例如，它可以是与每个用户共享的支持人员员工的电话号码，也可以是用户可以发送注释和屏幕截图的电子邮件地址。无论采用哪种格式，都必须有一个SOP，以便将通过热线报告的错误输入上述案例管理平台。

- 公开聊天组：许多支持团队发现，在员工和最终用户之间创建聊天组可以支持对等学习（例如Whatsapp或Wechat可以共享屏幕截图，语音消息或针对常见问题的创造性解决方案）。

*参考*：

- [数字发展原理]（https://digitalprinciples.org/）


## 代管 { #hosting } 

The DHIS2 Tracker program and collected data must be hosted on a server. This can be done locally (such as at the ministry of health or IT), through a local professional service provider, or in the cloud. Each option has its own advantages and disadvantages. For example, hosting a tracker implementation in the cloud means the administrator does not need to worry about server capacity and downtime, but there may be legal issues with hosting the data outside the country's borders unless a local provider is used. Regardless of the hosting strategy, security is a key consideration. This includes identity management, authentication and authorization (restricting access to data or services), and protecting servers.

Additionally, it is important to decide whether to configure the tracker in a separate or the same instance as your aggregate system. A major advantage of having one instance is the ability to directly generate reports from tracker data. However, having the two in the same instance requires stricter standard operating procedures (SOPs) for maintaining user accounts to ensure proper access to patient data is restricted.

**Key hosting and security principles that should be included in your hosting plan, regardless of whether the instance is local or in the cloud:**

- The operating system is a Long-Term Service (LTS) edition
- 有一个自动过程来应用操作系统安全补丁
- A host-based firewall is configured to allow minimal access
- Access is via Secure Shell (SSH) according to agreed policy (keys, no root access, etc.)
- The DHIS2 version is not more than 3 versions behind the latest release, and a process exists to apply patch releases regularly.
- An automated backup system is in place and regularly tested, including offsite.
- PostgreSQL database access controls allow minimal access
- A Web-proxy server is properly (SSL Labs test A+) configured with Secure Sockets Layer (SSL)
- All Database data is stored on a separate data partition (allowing encryption at rest, performance settings)
- A monitoring and alerting system is in place
      - There is a wide range of options available, depending on the environment. For example, boombox might be fine with email + logwatch + munin.
- Enough/stable electricity to charge devices
- If using Android, there must be a network with a certain amount of uptime to sync.
- If web-based, a stable network is present


**Management and sustainability of the IT systems:**

Documentation exists on security plans and protocols, both at a high-level as well as technical procedures. Thi is especially critical for locally-hosted systems without a “security first” culture.

One individual needs to be responsible for developing, maintaining, and implementing the security plan. Another security manager committed to identifying and mitigating risks. Both roles require experience, capacity, and incentives.

Ensure that there is a documented set of technical controls mandated, and that there is an audit process against those controls

Published and available SOPs for operational, network, and physical security (locking PCs, strong passwords, data encryption, etc.), as well as for monitoring and response if the system is down or system breach


## 培训和推广 { #training-and-rollout } 

**计划进行高质量的持续培训。**能力建设对于Tracker计划的成功至关重要，它必须是高质量的，并且在计划的整个生命周期中都必须定期进行。仅提供一次用户培训是不够的-您的培训计划应随时间提供初始和进阶培训。前线跟踪器用户通常是地面级卫生工作者，与经常使用汇总数据的地区职员相比，他们对技术的适应程度可能较低。对培训的重点将包括使学员熟悉工具的时间以及如何将Tracker集成到他们的工作流程中。

一个关键原则是**与用户协作开发培训材料。**在设计培训材料时与用户紧密合作将使您了解用户难以理解的概念，因此您可以优化材料和时间安排培训议程。与一组实际用户进行初步的完整培训，以微调您的课程。

确定适当的培训方法：提供多种培训选项（例如视频，在线测试，现场，会议），这些选项可以单独使用，也可以相互结合使用。

**让卫生人员**参与培训，而不仅仅是IT人员，以解释和强调数据输入流程背后的健康原因。这对于涉及决策支持的配置尤其重要。这样做有助于最终用户更好地了解Tracker程序为何如此重要，这可以导致更完整和准确的数据输入，从而更有可能使该程序成功实现其目标。
根据参加课程的人员的反馈来修订材料，或者如果Tracker计划的修订导致旧的培训材料不准确，则对材料进行修订。

**后勤**
将跟踪器用户的培训计划为一系列培训步骤，以便他们在一段时间后接受进阶培训。理想情况下，进修培训时间表应与Tracker软件的修订周期保持一致，以便于向最终用户介绍程序中的更改和新功能。

Note that training a large group of users (especially spread out over a large geographical area) will often require that you first train other trainers (at a Training of Trainers, or ToT) early on, to help scale your training capacity.
Keep track of which Tracker users have been trained in spreadsheet, list, or other centralized database, and establish an SOP to update this list when new staff members join, or when existing staff members quit or are relocated. New/untrained staff members should be provided with training at the earliest possible opportunity.
Choose a training venue with care. Training can take place either on site (at or close to the users’ work environment) or in centralized trainings that bring larger groups of users from various workplaces to one centralized location. Both approaches have positive and negative aspects. Regardless of where the training takes place, the person responsible for planning the training will need to organize logistical details such as the venue, transport, food and drink, computers, Internet access, etc.

如果可能，请培训用户使用他们将在工作中使用的设备。不要低估人们登录和熟悉设备所需的时间-从培训的角度来看，从技术的角度来看，要使所有参与者做好准备可能会花费大量的时间。建议让培训团队的几名成员来帮助解决出现的这些问题。
安排定期的定期/现场培训/复习培训

**在低带宽设置中进行训练**
如果您的培训地点的互联网连接速度太慢，不可靠或不存在，您将需要安装本地Tracker实例，并在机器/本地服务器上对其进行配置以进行培训，然后对其进行设置，以便参与者可以通过通用的本地网络环境，IP地址或本地主机客户端连接。即使在Internet访问通常良好的环境中，大量用户通过一个WiFi网络或Internet访问点访问基于Web的Tracker实例也可能导致网络问题。因此，在这种情况下，通常建议将培训实例用作备份。



## 将Tracker与您的总体数据系统相关 { #relating-tracker-to-your-aggregate-data-system } 

When designing the tracker, it is important to consider the basic reporting requirements of the Health Management Information System (HMIS) to avoid double reporting. The data entered into the tracker forms the basis for generating aggregate numbers. For example, if there are 4 patient entries, 2 with condition X and 2 with condition Y. The tracker should support the aggregate system, rather than being an additional burden on data collectors. The system design should take into consideration how to meet aggregate data requirements using the data entered through the tracker.

There are different options to consider, such as automation or manual methods with the help of tools. It is crucial to have a clear workflow, tools, and governance model for data quality and completeness assurance and the data authorization process. This includes determining who can approve and process data from individual to aggregate data and how this process occurs.

When designing the integration with the HMIS, make sure to thoroughly review the indicators, create the reports, establish a governance model for data quality and publishing, and ensure that the data revision processes are working. It is important to involve care providers in the process to ensure they understand the indicators and are able to input into how they are calculated. Additionally, involve Ministry/policy-makers in the process so that they understand the fundamental differences between how reporting happened before vs. now in a tracker or eRegistry.

**Feeding into the HMIS**

The data entered into the tracker forms the basis for generating aggregate numbers. The tracker should support the aggregate system, rather than being an additional burden on data collectors. The system design should take into consideration how to meet aggregate data requirements using the data entered through the tracker. In other words, the workflow should avoid additional work for health workers and they should not have to aggregate data manually and enter it manually into the HMIS.

The difference between aggregate data collection systems, where the final numbers are input into online reporting forms, and a tracker/eRegistry that does automated reporting is the significantly more effort required in software design to cover all reporting and indicator needs. It is important to define indicators and understand what is to be measured, including the numerator and denominator.

Removing traditional paper reporting can be time-consuming and behavior-change takes time. It is important to make sure that care providers understand the indicators and are able to input into how they are calculated. Involve Ministry/policy-makers in the process so that they understand the fundamental differences between how reporting happened before vs. now in an eRegistry.

> *References*:  
>
> Venkateswaran M: Attributes and consequences of health information systems data for antenatal care – health status, health system performance and policy, PhD dissertation, University of Bergen 
>
> Venkateswaran M, Mørkrid K, Khader KA, Awwad T, Friberg IK, Ghanem B, Hijaz T, Frøen JF: Comparing individual-level clinical data from antenatal records with routine health information systems indicators for antenatal care in the West Bank: A cross-sectional study. PloS one 2018, 13(11): e0207813 






# Tracker performance at scale { #tracker-performance-at-scale } 

This document describes approaches to optimizing DHIS2 tracker implementations for COVID-19 vaccine delivery at scale.

## Executive summary { #executive-summary } 
> **Server**
>
> * Appropriate software versions are used:
>   * JDK11
>   * PostgreSQL 12 or 13
>   * DHIS2 version 2.35 or later, latest available patch
> * Server monitoring is set up. Recommended: munin, glowroot
> * Server is appropriately sized. For covax, at least:
>   * 32 CPU cores
>   * 32GB RAM
>   * SSD/fast disk
>   * Fast and stable internet and internal network connectivity
> * In shared hosting environment, verify that the server has the
> specified resources in practice
> * Use dedicated server for database/postgresql if possible
>
>
> **Tracker/Tracker Analytics**
>
> * Minimize the use of program indicators in dashboards, as this has cause performance issues.
>   * Alternative: serving tracker analytics through the aggregate data model, using strategies described in this document.
> * Limit access to dashboards that use program indicators, particularly those dashboards that load by default as the 'landing page' upon logging into DHIS2.
>   * Alternative: Set up a text only/information landing dashboard that excludes tracker analytics to minimize impact. Limit dashboards based on program indicators only to those users/users groups who need them for analytical purposes (e.g. not for general data entry users)
> * Enable analytics cache
> * Do not use continuous analytics
> * Tracker: Disable the "Display front page list" check in the
> program details.
> * Apply custom database indexes for frequently searched TEI
> attributes.
> * Ensure that system generated attributes don't use RANDOM pattern
>
>
> **Android**
>
> * Ensure admins responsible for Android deployments are familiar with:
>   * The use of the Android Settings App and the various sync strategies that can improve performance.
>   * Specific configuration for users which will use Android is highly recommended.
>   * Distribution of the Android App mechanisms and management of version updates.
>
> **Implementation Strategies**
>
> * Ensure there is an aggregate configuration available for reporting (e.g. daily reporting based on tally sheets) that can be used routinely, or as a back-up in the case of lag time in Tracker data entry during high-volume periods (e.g. COVAC Aggregate Package)
> 16. Use the latest COVID-19 Immunization/EIR tracker package and related aggregate datasets (for serving the dashboard) as a reference; though we do not recommend 'updating' a package that has already been substantially customized for the country. 


## 背景 { #background } 

### Audience  { #audience } 

The primary audience for section are system administrators supporting MOH with their national COVID-19 vaccine delivery plans. However, while COVID-19 vaccine delivery is the specific use case presented here, much of the guidance is relevant for large-scale tracker implementations in general.


### 目的 { #purpose } 

- To share the 'best information available', real-time/emerging guidance, tips & tools to optimize DHIS2 implementations for anticipated scale of COVID-19 vaccines. This information is often sourced through the community of practice.
- This is not intended to prescriptive guidance, but rather a series of recommendations that may evolve in real-time as we learn from real-world implementations; and update/improve the global products 
- We aim to facilitate information sharing between country implementations that may face similar challenges and can benefit from common solutions

## Guidance for implementers { #guidance-for-implementers } 

### General Guidance { #general-guidance } 

* Substantial performance improvements were introduced from V 2.35. We strongly recommend upgrading tracker instances to the latest patch version of 2.35 or 2.36, where performance improvements have also been added in the point releases. 
* We strongly recommend to set up a server monitoring tool to identify when and why your server is struggling   
    * Some recommendations include [https://glowroot.org](https://glowroot.org/) and    [https://munin-monitoring.org](https://munin-monitoring.org/) 
    * Here is a [tutorial for installing glowroot on DHIS2](https://github.com/dhis2/dhis2-docs/blob/glowroot-tutorial/src/tutorials/glowroot.md)

### Analytics Performance { #analytics-performance } 

Recognizing that country demands for frequency of 'real time' analytics data for decision making may vary and timely data is crucial, we recommend to avoid running analytics during heavy data entry periods. We have seen major spikes in overall response times while analytics tables are being generated. **These seem to have the most impact when many users are accessing dashboards that contain program indicators calculating on the fly.**

#### Dashboard Performance { #dashboard-performance } 

Below are steps that can be taken to improve dashboard performance.

* Users should **not** have dashboards with tracker-based analytics as the landing page after logging in.
    a. Add a dashboard without analytics as the default/first dashboard that users land on after logging in. (i.e. ensure it is the first alphabetically. For example "\*\*NOTICE\*\* or \*\*INFO\*\*) 
    b. This dashboard could be populated with text items to communicate key information, updates, standard operating procedures, etc. 
    c. The dashboard should be shared with Public access

![Example of dashboard without analytics used as landing page after logging in.](resources/images/covax_perf_image2.jpg)

* Limit sharing dashboards only to only those analytics users who need to use data for decision making; restricting from data-entry users. This can be achieved with User Groups, combined with a Landing Dashboard for non-analytics users as above. 

* Tracker analytics requests, in particular for certain program indicator configurations, can be slow and create performance problems. When extracting such data: 
    a. Do it outside peak hours for vaccinators, to avoid any slowdowns hindering their work 
    b. Work with smaller data sets at the time. For example, it may be  necessary to get figures for a subset of organisation units at the time (e.g. by region). 
    c. Rather than several people downloading the same data (e.g. for the national level) from DHIS2, download once and share via for example excel.

* Ensure caching is enabled in the dhis2 configuration, so that repeated requests for the same analytics resources are served from the cache and database queries are skipped. 
    a. dhis.conf - `analytics.cache.expiration` set to at least 3600 (6 hours). 
    b. System settings -\> analytics -\> cache strategy. Recommended value: at least CACHE_6AM_TOMORROW. Set cacheability to    "private" to avoid nginx cache.

* Turn-off continuous analytics. If you turn off continuous analytics you will only see your analytics updated after your analytics tables run.

* As a **last resort/blunt measure for poor performing dashboards, you may also:** a. Remove tracker analytics access for non-critical users. b. Set the default landing app through the system settings to the capture or data entry applications. This will mean that all users will first be directed to those apps. This may be disruptive for users that do not enter data, but it will minimize traffic to the dashboards.

* Consider serving Tracker analytics from the COVID-19 EIR Tracker through the aggregate data model as described in the [Implementation Section](#implementation-strategies). In short:
    a. Mapping PIs to aggregate data elements 
    b. Pushing data values to aggregate data model (via a script) at a predetermined frequency 
    c. Dashboards shared more widely based on the aggregate data model via indicators can be 100 times more performant (dashboard items load in 0.02-0.1 seconds vs 10-200 seconds on testing instance). In addition, they give greater analytical power through the use of dimensions (e.g. to represent and slice/dice CatCombos).

#### Assessing Analytics/Program Indicator Performance { #assessing-analyticsprogram-indicator-performance } 

An analysis of the dashboards originally included in the COVID-19 EIR Tracker Package (note: these tracker dashboards have now been removed from the package and are not recommended) revealed:

* Dashboards are significantly slowed down by long queries for enrollment-type program indicators.

* Dropout rates are good to know, but they take a long time to load even on our test db. We believe that drop out rates are unlikely to require daily monitoring, but rather can be analyzed weekly or even monthly at a higher level through the COVAC Core Module (aggregate datasets & monitoring dashboard for coverage, etc.)

![](resources/images/covax_perf_image6.png)

![](resources/images/covax_perf_image5.png)

Other "heavy" visualizations should be removed from routine monitoring dashboards which are shared with lower-level users and will lead to performance stress. These could be moved to dashboards which are viewed less frequently, an HTML report, or another reporting tool:

a. Maps at lower levels, or requesting unnecessary org units

b. Event reports with more than 100 event rows or 50 enrollment rows

c. Visualizations requesting lengthy periods of longitudinal data, e.g. last 12 months

d. Any visualization with enrollment-type program indicators, such as dropout rates

e. In tests of program indicators from the COVAC package, program indicators of "enrollment type" took the longest response time. Further, they have poorer scalability, as they take longer to serve data when requesting additional periods, org units, or TEI.

### Tracker Performance { #tracker-performance } 

* TEAs that generate a Unique system IDs using the SEQUENTIAL() pattern are much more performant than those using the "RANDOM()" pattern. **We recommend avoiding the RANDOM pattern** because:
    * It's open for race conditions; 
    * It will have a huge downward trend in performance the longer it\'s been used; and 
    * It uses the reserved values table in the database to keep track of which values have been distributed already. This table has been known to be a pain point during tracker import.
    * Note for implementations that use Android: reserving values to the devices for offline use may affect the user's perception of SEQUENTIAL generation as documented here: [https://docs.dhis2.org/en/full/implement/android-implementation.html#implementation_guide_dhis2_config_reserved_id](https://docs.dhis2.org/en/full/implement/android-implementation.html#implementation_guide_dhis2_config_reserved_id)

* In early versions of the COVID-19 vaccine registry, some working lists caused performance issues. These were removed from the packages in the COVID IER package V 1.1.2. If you experience that tracker is showing slow load times, this may be related to the working lists and a large number of TEIs in one org unit. A solution is to disable the "Display front page list" check in the program details (this has the downside of also disabling working lists)

* Searches on TEIs on attributes (especially non-unique ones like firstName, surname, phoneNumber) can significantly improve by adding partial trigram indexes for that particular tracked entity attribute. This has been done in Nigeria and Rwanda and the performance improvement was huge. This is yet to be added into the core, so implementations will have to create them manually for now. For adding trigram indexes and compounding it with primitive column types, two extensions have to be created. The extensions are already part of the default posgresql installation. Extensions:

```
create extension pg_trgm;
create extension btree_gin;
```

Index example for trackedentityattributeid 1234 (eg: PhoneNumber). Has to be repeated for every attribute that is used heavily during searches (firstname, surname, etc)
```
create index concurrently in_gin_teavalue_1234 ON trackedentityattributevalue 
using gin (trackedentityinstanceid,lower(value) gin_trgm_ops) 
where trackedentityattributeid = 1234;
```

* Similarly, trigram indexes will also help if the system searches based on event data values. Nigeria had their QR code for completed vaccinations as an event data value which they searched on heavily (eg: passengers qr code checked before boarding). Depending on search patterns for the specific implementation's configuration, this trigram index can also be applied. Not all implementations will need this. Assuming the extensions mentioned above are already created, an example index creation for a data element (uid=​​LavUrktwH5D, qrCode), attached to a programstage. The dataelementid=233047 and programstageid=64527 in this example.

```
create index concurrently in_gin_psi_edv_64527_233047 on > programstageinstance 
using gin (lower(eventdatavalues #>> '{LavUrktwH5D, value}') gin_trgm_ops);
```

* Usage of custom apps can have a positive or negative impact on performance. The apps can be a way of making more targeted functioanlity that prevents extra clicks and calls to the API. They are also a source of caution, and we have seen some custom apps use API functionalities that cause unnecessary stress on the system. Parameters to skip paging, counting the number of results in the paging, using LIKE operator to compare when EQ(equals) is more suitable are some of the notable culprits that cause some stress. If LIKE operator is used with unique attributes, trigram index as mentioned above should be created for it. SkipPaging should always be avoided. When using paging, the totalPages should always be avoided, as it makes the DB query get the full count of records to count them, instead of only fetching the given page. If feasible, a searchString minimum limit of 3 characters should be enforced on searchable attributes. Nigeria had a custom app that enforced the 3 character minimum search limit on the app side and that helped alleviate several heavy queries. Trigram indexes will only be used by the query optimizer if the search string has at least 3 characters.

> **Note**
>
> The calls made by custom apps need extra attention, as the calls might be constructed in a way that has not been well tested and proven to be performant. The list of common performance culprits provided here is not exhaustive. It is important to have monitoring in place and keep an extra eye on the calls made from custom apps, integration middleware and external scripts.

* Tracker Capture App updates event data values individually. In highly concurrent environment, this can cause database row level locking and waiting. Sri Lanka created a Custom Tracker Capture App using the core Tracker Capture App as a baseline. In the Custom App, they changed the flow so that all event data values are updated together in a single API on user clicking "Save and Complete". The button was "Complete" in the original core app. If the supporting HISP groups/administrators/implementers have the necessary skillset, they can maybe look into doing the same.

### User Management { #user-management } 

* We recommend against sharing user logins across multiple devices. This has resulted in some scenarios where the users are unintentionally logged out.
    * Alternatives: one user per device (e.g. the user follows the device, i.e. vaccine site data entry staff; passwords could be recycled each day for added security)
* Optimizing users for Android (described in Android section)
* Restricting unnecessary access to tracker-based dashboards as described above

## Guidance for Android Deployments { #guidance-for-android-deployments } 

### DHIS2 Configuration recommendations { #dhis2-configuration-recommendations } 

This subsection covers the specific recommendations that can be achieved by tweaking the DHIS2 server configuration directly.

#### User access { #user-access } 

Due to the nature of Android being able to work offline, the application will try to download as much information as possible in case the device goes offline. To reduce the amount of data transferred:

- Set the Organisation Units, Programs and DataSets that users will have access to; this will greatly reduce the amount of data being transferred and the load of the server

- Please see the recommendations on how to [create a user](https://docs.dhis2.org/en/full/implement/android-implementation.html#implementation_guide_dhis2_config_creating_user)

#### Auto-generated Values { #auto-generated-values } 

Because of the offline nature Android will also download reserved values. The application will try to evaluate the amount of remaining values and retrieve more from the server whenever a synchronization happens.

In implementations where users will be offline for long periods of time this value might need to be increased (explained in the section below). If the auto-generated values defined include the usage of dates in any of its forms (days, months, years) the system administrator should pay special attention while defining them and using the Android App. Also note, reserving values to devices for offline use with the SEQUENTIAL() pattern (e.g. for a TEI attribute 'System Generated ID') will take each of these values sequentially as they are *reserved in the devices*, which can be confusing for some users. This behavior is expected as documented [here](https://docs.dhis2.org/en/full/implement/android-implementation.html#implementation_guide_dhis2_config_reserved_id).

Please see more information about this topic in the [official documentation](https://docs.dhis2.org/en/full/implement/android-implementation.html#implementation_guide_dhis2_config_reserved_id) and in [this post in the CoP.](https://community.dhis2.org/t/question-regarding-expiry-of-reserved-ids-of-an-auto-generated-unique-values-configured-with-a-text-pattern-containing-current-date-mm-yyyy/40761/2)

### Android Settings WebApp { #android-settings-webapp } 

The [Android Settings WebApp](https://apps.dhis2.org/app/a1bd6b5b-de8c-4998-8d34-56c18a139683) is an application that can be installed on any of the latest DHIS2 servers and allows the system administrator to define some settings that will be read by each mobile.

#### Reserved Values { #reserved-values } 

In the section above the usage of auto-generated values was briefly explained. With the Android Settings App the system administrator can define how many of those values will be retrieved by each mobile user. If your mobile users will be going offline for very long periods of time it might be a good idea to increment this value, however, setting a huge large number here can incur in the exhausting of values and an increase of the data transferred in the initial sync.

![](resources/images/covax_perf_image4.png)

As an example, imagine we have an implementation with mobile devices which will be going offline for a full week and then come back to a central location for the synchronization of data. Each user might see up to 50 patients per day and therefore during a week up to 350 patients. Setting the *Reserved values downloaded per TEI attribute* to at least 350 would ensure the users can work properly offline without risking exhausting the values.

#### Metadata Sync { #metadata-sync } 

![](resources/images/covax_perf_image1.png)

If your program is very unlikely to be modified, setting a long period value for this setting will reduce the amount of connections towards the server. It is good to find a balance between how important it would be having devices without the metadata fully updated and the load the server can experience due to the number of devices.

As an example, imagine we have an implementation with 10.000 devices and they are set to sync every 1 day. This means that the server should be ready to handle 10.000 metadata update pulls every day. Even though these requests will result in an empty response if no changes have been made, it might be smarter setting that value to 1 week or even manual (with a proper way of communicating with the field users) if no changes will be made in the package or changes are unlikely to be critical.

You can even disable automatic metadata synchronization and rely on manual synchronizations triggered by your users if that is an option for your implementation.

#### Data Sync { #data-sync } 

Data sync follows the same principle as the one for metadata and it should be adjusted according to the implementation. For example, we can find implementations where users are going on the field where they will be working offline therefore it should be important to provide those users with all the data needed for their work. Or there can be implementations where users will be most likely registering patients on the field and transferring data from the devices to the server.

See the following examples:

* In an implementation where users will be working pretty much offline and they need to have as much data as possible on their device, the *data sync* could be set to *Manual* if the users are instructed to perform this before leaving to the field. Or daily if this process should be automated.

* In an implementation where users are going to the field, and they are likely to be robbed, or a fear of devices being lost is present it might be interesting to set the *data sync* to the minimum (30 minutes) so the data is pushed to the server as soon as possible. Users could also be instructed to use [granular sync](https://docs.dhis2.org/en/full/use/dhis2-android-app.html#capture_app_generic_sync_info) every time they add or modify a patient but this might be more cumbersome.

![](resources/images/covax_perf_image3.png)

You can also disable automatic data synchronization and rely on manual synchronizations triggered by your users, however this puts more risk on data being recorded and not synced if users are not systematic.

#### Download Settings { #download-settings } 

These settings allow the users to define the amount of TEIs that will be downloaded when performing the data sync. It should probably be combined with the *Data Sync* setting explained above. It is important to understand how these settings work to define a targeted and valid approach. The official documentation, [synchronization settings](https://docs.dhis2.org/en/full/use/dhis2-android-app.html#capture_app_andoid_settings_webapp_synchronization), explains in detail what to expect when setting this up. The connectivity capabilities of the implementations should also play a big role while defining these, as in implementations with very good connectivity reducing this value to the maximum would decrease the load of the server during the *data sync* without having a big impact in the users (they will always be able to find the patients online). However, this could lead to a server overload while performing very broad searches. The way mobile users will connect to the server (i.e. using mobile data packages instead of wifi) also plays a role as downloading many patients that might not be used will incur in expending mobile data for no reason.

See the following examples:

*  In an implementation where the users will be mainly adding patients to the system (i.e. registering patients with COVID) there is no need to have many patients on the device. Therefore, setting a low value of download TEI would decrease the load of the server during the data sync and will reduce the amount of data transferred (to be taken into account when connecting with mobile data)

*  In an implementation where users will be visiting patients offline without the possibility for an online search the system administrator might want to let the users download as many TEI as possible so they take with them all the patients' data that will need.

*  In an implementation with very good connectivity the user administration could decide to decrease the download settings so the devices have as few TEI as possible relying completely on the online search. As the users will be searching by a unique id (i.e. National ID number) which is a low demanding task for the server the setup seems to be adequate. However, if users will not be able to search for patients by a unique id and will use a family name the server could suffer for an overload on the searches and therefore might be more interesting to allow the users downloading more patients and relying on the offline mode.

### Application Updates { #application-updates } 

![](resources/images/covax_perf_image8.jpg)

The DHIS2 Android App is published via two channels: [Google Play Store](https://play.google.com/store/apps/details?id=com.dhis2) and [Github](https://github.com/dhis2/dhis2-android-capture-app/releases). We publish releases every 6 months and patch releases as often as it is needed. If implementations are using the Google Play Store as their provisioning source they could benefit from automatic updates, however, this might not be desirable in some scenarios where implementations want to test a newer version before making it available for their users. We recommend disabling automatic updates so the App can be heavily tested by administrators/testers before asking their users to do so.

To disable the automatic updates, once the application has been installed in via the Google Play proceed as follows:

- Select the 3-dot menu from the right corner of your screen. By default, "Enable auto-update" will be selected.
- De-select this button. This will ensure that the Android app does not automatically update when an update is available.
- When finished, the box "Enable auto update" should not be checked.

System administrators could now benefit from checking the new versions and then letting the users know when they should update their App that they could do by going to the Play Store and clicking on the Update button that will be presented every time there is a new release.

More information about roll-out plans and testing can be found in the [official guides](https://docs.dhis2.org/en/full/implement/android-implementation.html#implementation_guide_testing).

### Device and management recommendations { #device-and-management-recommendations } 

In this section we cover briefly some recommendations related to the devices themselves and their management.

#### Android device specifications { #android-device-specifications } 

It is very hard to give general recommendations on which device to use. Implementations should test their final configuration on a set of devices to understand the user experience.

For example if an implementation will have users going to the field and working offline with a large number of TEIs they should aim for higher end devices as the Android App will be more resource consuming. However, if implementations are very budget constraint and they will be having thousands of users but working with much smaller amounts of TEIs and data they might prefer using some middle end devices.

More information on this process can be found in the [official guide](https://docs.dhis2.org/en/full/implement/android-implementation.html#implementation_guide_mobile_specs).

#### Mobile Device Management { #mobile-device-management } 

We strongly recommend using a Mobile Device Management (MDM) in mobile implementations. Having an MDM will provide several advantages that can ease the implementation and support. However they usually incur higher costs.

Implementations could opt for ready to use MDMs or deploy a solution in their own infrastructure. The latter might be a better solution in terms of budget but will require high technical skills like system administration and DB management.

This [[official guide]{.ul}](https://docs.dhis2.org/en/full/implement/managing-mobile-devices.html) covers several MDM that have been tested listing their main advantages and disadvantages.

### Mobile recommendations checklist { #mobile-recommendations-checklist } 


| **DHIS2 Mobile Implementation at scale checklist** |  |
| --- | --- |
| User access configuration |  |
| Auto-generated values pattern            |                           |
| Android Settings Webapp:                  |                           |
| *Number of reserved values*              |                           |
| *Automatic metadata sync period*         |                           |
| *Automatic data sync period*             |                           |
| *Data download settings*                 |                           |
| Management of Android App updates        |                           |
| Mobile Devices Management                |                           |


## Server hosting, administration and monitoring { #server-hosting-administration-and-monitoring } 

There are two fundamental requirements related to server hosting:

- There should be somebody - preferably two - people with the requisite training and experience to manage the server.
- There should be a privacy/security policy to cover the storage of large proportion of population data

### Server specifications { #server-specifications } 

As indicated in the documentation on server [specifications](https://docs.dhis2.org/en/manage/performing-system-administration/dhis-core-version-237/installation.html#install_server_specifications), "DHIS2 scales linearly on the amount of RAM and number of CPU cores so the more you can afford, the better the application will perform". Covax implementations, generally targeting the total adult population of a country, will be large-scale even in smaller countries. Exact requirements will vary depending on the expected number of users and TEIs, but 32GB RAM and 32 CPUs could be considered a starting point for all but the smallest implementations. All implementations should be prepared to upgrade the hardware to support changing scale and growing data.

SSD/disk performance is also critical for the overall performance, heavily influencing key activities such as searching for TEIs and analytics. The documentation suggests that "Minimum read speed is 150 Mb/s, 200 Mb/s is good, 350 Mb/s or better is ideal." Real disk performance can also be assessed by looking at disk latency. You can see these figures on munin, a simple one off assessment can be done with dd:

```
dd if=/dev/zero of=/root/testfile bs=512 count=1000 oflag=dsync
```

For a good disk this command should finish in a fraction of a second (\<0.5s). Anything over 5 seconds is probably going to be too slow to reach acceptable levels of performance.

### Server architecture and infrastructure { #server-architecture-and-infrastructure } 

The application (tomcat) and database (postgresql) *could* be hosted on the same server, but ideally the database should be set up on a dedicated server.

Fast and stable internet is always required, but when the database is set up on a separate server, it is also important to ensure that there is a fast and stable *internal* network connection between the two.

Special consideration must be taken when the server is hosted in a shared, virtualized environment. In these cases, the hosting provider may over-provision resources (e.g. CPUs, disks), meaning the server does not actually have the resources it appears to have. This also means that performance fluctuates based on the load on other systems. In some cases, countries have had to negotiate with the hosting provider to ensure the server used is not being over-provisioned, alternatively moving to a physical server.

### 安装与配置 { #installation-and-configuration } 

It is important to ensure that the right software versions are used to optimise performance:

- JDK11
- PostgreSQL version 12 or 13
- DHIS2 version 2.35 or later, **the latest available patch version**

Tomcat needs to be configured with enough memory. This will depend on the total available memory of the server, and whether this is shared with postgresql or if the database is running on a separate server. With a DHIS2 superuser account, you can verify the tomcat memory configuration by opening "About DHIS2" and looking at the "Memory info" field:

![](resources/images/covax_perf_image7.png)

It is also critically important to configure postgresql correctly for good performance. Instructions for this are available in the [server documentation](https://docs.dhis2.org/en/manage/performing-system-administration/dhis-core-version-237/installation.html#install_postgresql_performance_tuning).

### Server monitoring { #server-monitoring } 

We strongly recommend setting up a server monitoring tool to identify when and why your server is struggling. Key performance metrics should be monitored eg. RAM, CPU, disk performance on all nodes and application specific measures on proxy, database and tomcat. Some recommendations include [https://glowroot.org](https://glowroot.org/) and [https://munin-monitoring.org](https://munin-monitoring.org/). A [tutorial for installing glowroot on DHIS2](#glowroot_tutorial) has been written to support this.

Other options which might require more configuration but allow significant customisation include prometheus/grafana and the ELK stack.

## Implementation Strategies { #implementation-strategies } 

Based on experiences from Sri Lanka, Indonesia, Nigeria, Rwanda and others, visualizations based on tracker analytics in large-scale COVID-19 vaccine deployments can result in very heavy TEI count queries, nearly rendering the system unusable. Blunt mitigation strategies taken in Rwanda (disabling of all Analytics apps), while Sri Lanka reverted to SQL queries.

These challenges can be partially addressed with the guidance on performance optimization provided above. We also recognize that:

* The unpredictability of Tracker performance at unprecedented scale, given the many varying factors at play in country implementation, configuration & customization
* Capacities, resources and structures for server administration are highly variable across countries

Meanwhile, daily aggregate reporting through DHIS2 was proven to be highly effective at large scale in the Measles-Rubella campaign in Bangladesh in 2020. Having an aggregate configuration can facilitate daily reporting on stocks and doses administered (e.g. from tally sheets), data which are largely sufficient to serve the purpose of "real-time daily" monitoring of the overall campaign via dashboards. In Uganda, an aggregate implementation was used side-by-side with the COVID EIR Tracker, to enable daily monitoring and check data completeness during high-volume periods when tracker data entry could not be sustained (not enough devices, etc).

Based on feedback, we understand that most implementations require at least daily monitoring during the campaign phases of COVID-19 vaccine delivery, but the definition of 'real-time' is variable. There may be a time of day when campaign operations centers are monitoring the daily performance and should be considered for the country implementation & scheduling of analytics.

### Use of Aggregate Data Model with Tracker Deployments { #use-of-aggregate-data-model-with-tracker-deployments } 

We recommend incorporating aggregate data models into COVID-19 vaccine implementations for two separate functions.

#### Parallel aggregate reporting: daily stock & tally sheets of vaccine doses administered at vaccination site level { #parallel-aggregate-reporting-daily-stock-tally-sheets-of-vaccine-doses-administered-at-vaccination-site-level } 

The recommendation to ensure countries have an aggregate COVAC package in parallel to the Tracker Registry is an old one. Here we provide some reasons why think a country should be prepared with an aggregate configuration for reporting alongside their Tracker deployment:

- For many country contexts, this will be necessary to ensure completeness of data for the purposes of monitoring the campaign: e.g. if the entire population cannot be covered by the Tracker Registry for any number of reasons

- In some contexts, this reporting mechanism (e.g. based on daily tally sheets) can be used during high volume periods in the campaign where individual level data entry can lag (not enough devices, connectivity issues, not enough data entry staff etc).

- Daily reporting from tally sheets is also often used for data quality comparisons to Tracker data, and helps the country to assess their Tracker deployment and make decisions about data sources/data flows

The [COVAC 'Core' Aggregate Package](https://docs.dhis2.org/en/topics/metadata/covid-19-vaccine-delivery/covac-aggregate/version-110/design.html) contains a configuration to support this (aligned to WHO monitoring guidelines, WHO AFRO reporting tools and eJRF):

- Daily dataset: COVIDVAC - Vaccination Delivery (e.g. doses administered, byt target groups)

- Daily dataset: site level stock reporting (e.g. vials used, physical stock count, etc)

- Annual dataset (could also be monthly/quarterly depending on country's plan): setting population targets, that may be disaggregated by priority groups etc

- COVAC Monitoring dashboard that contains coverage rates, doses administered, key stock data, drop-out rates etc. This monitoring dashboard is generally tailored for higher level monitoring of the overall national COVID vaccine delivery plan; not all components of this dashboard are intended for 'real-time'/daily monitoring.

#### Converting tracker data to aggregate data model → for the purpose of analysis (e.g. serving performant dashboards) { #converting-tracker-data-to-aggregate-data-model-for-the-purpose-of-analysis-eg-serving-performant-dashboards } 

Due to the potential for performance issues with dashboards serving tracker-based data (e.g. heavy program indicators calculating on the fly every time the dashboard is loaded), we recommend that a daily/near real-time dashboard can be served using the aggregate data model. In our tests, this has shown to be far more performant and still capable of serving key metrics to analytics users. An additional benefit for analysis is the structuring of data into dimensions (category combos) for pivoting and slicing.

In order to serve COVID-19 analytics from tracker source data (e.g. COVID vaccine registry), you will need:

1. An aggregate data set (in the same instance as the Tracker program or in another instance) and a set of DEs and COCs to receive the data aggregated from tracker

2. A dashboard to replace the tracker-based dashboard for campaign monitoring; the dashboard should be based entirely on indicators and/or data elements based on the aggregate domain.

3. A set of Program Indicators that can aggregate the tracker data to push to the target aggregate DEs/COCs, with attributes mapped to the target aggregate metadata

4. A script to push the tracker data (e.g. values of program indicators) target aggregate DEs. An example script is under development and will be shared soon.

Generic [guidance for tracker-to-aggregate data is available](https://docs.dhis2.org/en/implement/maintenance-and-use/tracker-and-aggregate-data-integration.html#how-to-saving-aggregated-tracker-data-as-aggregate-data-values) and will continue to be updated.

## List of Known Software Issues { #list-of-known-software-issues } 

[COVAC: performance issues](https://docs.google.com/document/d/1NJoio5qkdtdljflbt3_AS6N2HgGTepW_TW2m4-qHlTE/edit#) 

