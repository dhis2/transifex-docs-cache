---
revision_date: '2024-11-04'
tags:
- DHIS核心 主版
- Develop
template: single.html
---

# 总览 { #webapi } 

Web API 是一个组件，它使外部系统成为可能
访问和操作存储在 DHIS2 实例中的数据。更多的
准确地说，它为广泛的
为第三方等应用程序公开数据和服务方法
软件客户端、门户网站和内部 DHIS2 模块。

## 介绍 { #webapi_introduction } 

网络 API 遵循 REST
架构风格背后的许多原则。以下是一些重要原则

1.  基本构建块称为*资源*。
    资源可以是任何暴露在 Web 上的东西，从文档到
    业务流程 - 客户可能想要与之交互的任何内容。
    可以检索或交换资源的信息方面
    通过资源*表示*。表示是一个视图
    资源在任何特定时间的状态。例如，*可视化*
    DHIS2 中的资源代表了汇总数据的可视化，可用于
    一组特定的参数。该资源可以在
    各种表示格式，包括 JSON 和 CSV。
2.  所有资源都可以由 *URI* 唯一标识（也称为
    作为 *URL*）。所有资源都有一个默认表示。你可以
    通过以下方式表明您对特定表示感兴趣
    提供 *Accept* HTTP 标头、文件扩展名或 *格式*
    查询参数。因此，要检索 CSV 表示的
    an analytics data response you can supply an *Accept: application/csv* 
    标题，或在请求 URL 中添加 *.csv* 或 *?format=csv* 。
3.  与 API 的交互需要正确使用 HTTP *方法* 或
    *动词*。这意味着对于资源，您必须发出 *GET*
    当你想要检索它时请求，当你想要时 *POST* 请求
    要创建一个，* PUT *（当您要更新时），* DELETE *（当您要删除时）
    你想删除它。

## 认证方式 { #webapi_authentication } 

DHIS2 Web API 支持三种身份验证协议： 

- [基本身份验证](#webapi_basic_authentication)
- [个人访问令牌 (PAT)]（#webapi_pat_authentication）
- [OAuth 2]（#webapi_oauth2）

您可以通过向以下 URL 发送 GET 请求，验证并获取当前已通过身份验证的 
用户的信息：

    / api / 33 / me

以及有关权限的更多信息（如果用户有特定的
权限）通过使用端点：

    / api / 33 / me / authorities
    / api / 33 / me / authorities / ALL

## 基本认证 { #webapi_basic_authentication } 

DHIS2 Web API 支持*基本身份验证*。基本认证
是一种客户端通过 HTTP 将登录凭据发送到 Web 的技术
服务器。从技术上讲，用户名后附有冒号和
密码，Base64 编码，前缀 Basic 并作为值提供
*Authorization* HTTP 标头。更正式的是：

    授权：基本base64encode（用户名：password）

大多数网络感知开发环境都支持 Basic
身份验证，例如 *Apache HttpClient* 和 *Spring RestTemplate*。
一个重要的注意事项是此身份验证方案不提供安全性
因为用户名和密码是以纯文本形式发送的，可以很容易地
被攻击者观察到。仅当服务器是
使用 SSL/TLS (HTTPS) 加密与客户端的通信。考虑这个
为了提供与 Web 的安全交互的硬性要求
应用程序接口。

## 两因素验证 { #webapi_2fa } 

DHIS2 支持两因素身份验证。这可以为每个用户启用。
启用后，用户将被要求在登录时输入 2FA 代码。您
可以阅读更多关于 2FA [这里](https://www.google.com/landing/2step/)。

## 个人访问令牌{ #webapi_pat_authentication }
个人访问令牌 (PAT) 是使用 API 时对 DHIS2 进行身份验证的密码替代方法。
个人访问令牌（PAT）是在使用 API 时对 DHIS2 进行身份验证的一种替代方式。

PAT 可作为 HTTP 基本身份验证更安全的替代方案、
在创建新应用程序/脚本等时，PAT 应该是您的首选。 

HTTP 基本身份验证被认为是不安全的，原因包括 
它会以明文发送用户名和密码。在 
在未来的 DHIS2 版本中可能会被弃用或改为选择启用，这意味着基本身份验证需要在配置中明确启用。 
需要在配置中明确启用。

#### 重要的安全问题！ { #important-security-concerns } 

您的 PAT 将自动继承用户拥有的所有权限和授权。
用户拥有的所有权限和授权。因此，根据您打算使用令牌的方式，限制授予令牌的访问权限极为重要。
请参阅 **配置您的令牌**。

**If you only want the token to have access to a narrow and specific part of the
server, it is advised to rather create a new special user that you assign only
the roles/authorities you want it to have access to.**


### 创建令牌{ #creating-a-token } 
要创建新的 PAT，您有两个选择：
* A.在账户个人资料页面的用户界面上创建一个令牌。
* B.通过 API 创建令牌。

### A.在账户页面上创建令牌{ #a-creating-a-token-on-the-accounts-page } 
使用用户名和密码登录，进入个人资料页面
(点击右上角，从下拉菜单中选择 "编辑个人资料"）。
在用户配置文件页面，从左侧菜单中选择 "个人访问令牌"。
左侧菜单。
现在您应该在 "管理个人访问令牌 "页面上看到
文本："您没有任何有效的个人访问令牌"。
点击 "生成新令牌 "创建新令牌。
弹出 "生成新令牌 "窗口，为您提供两个选择：

#### 1.服务器/脚本上下文：{ #1-serverscript-context } 
_"This type is used for integrations and scripts that won't be accessed by a browser"._

如果您打算在应用程序、脚本或类似文件中使用令牌，则应选择此类型。
类型。

#### 2.浏览器上下文：{ #2-browser-context } 
_"This type us used for applications, like public portals, that will be accessed with a web browser"._

如果您需要在网页上链接到 DHIS2，或嵌入 iframe、
这可能就是您需要的令牌类型。


### 配置令牌{ #configuring-your-token } 

选择需要的令牌类型后，可以对令牌配置不同的访问限制。
令牌。所谓限制，是指如何限制和缩小令牌的使用范围。
如果计划在公共环境中使用令牌，这一点至关重要、
例如，在其他网站的公共仪表板上，嵌入 iframe。
由于令牌始终拥有与用户当前相同的访问权限/授权，因此如果您打算在公共环境中使用令牌，就需要特别小心。 
如果你打算在任何你无法 100% 控制的环境中使用它，就需要特别小心。

**注意**：如果其他人拿到了您的令牌，他们可以做任何您的用户可以做的事情。 
无法区分使用令牌执行的操作和用户执行的其他操作。
用户执行的其他操作。

**重要**：如果计划在非安全和/或公共环境中使用 PAT 令牌，强烈建议您创建一个单独的唯一用户，该用户只能拥有您希望令牌拥有的角色/权限
如果您打算在非安全和/或公共环境中使用 PAT 令牌，强烈建议您创建一个单独的唯一用户，该用户只能拥有您希望令牌拥有的角色/权限、
例如，在您无法 100% 控制的 PC 或服务器上，或 "嵌入 "到另一台服务器的网页中。

#### 不同的约束类型如下： { #the-different-constraint-types-are-as-follows } 
* 到期时间
* 允许的 UP 地址
* 允许的 HTTP 方法
* 允许的 HTTP 引用程序

##### 有效期{ #expiry-time } 
到期时间只需设置令牌的有效期，默认为 30
天。过期后，令牌将直接返回 401（未授权）信息。
您可以设置任何到期时间，但我们强烈建议您设置的到期时间 
但强烈建议您根据自己的使用情况设置一个合理的过期时间。

#### 允许的 IP 地址{ #allowed-ip-addresses } 
这是一个以逗号分隔的 IP 地址列表，用于限制令牌请求的来源。

**重要**：IP 地址验证依赖于 X-Forwarded-For 标头，该标头会被伪造。
为了安全起见，请确保负载平衡器或反向代理会覆盖该标头。

#### 允许的 HTTP 方法{ #allowed-http-methods } 
以逗号分隔的 HTTP 方法列表，您希望令牌能够使用这些方法。
如果你只需要令牌来查看数据，而不是修改或删除，那么只选择 GET HTTP 方法 
是合理的。

#### 允许的 HTTP 引用程序{ #allowed-http-referrers } 
HTTP 引用器是添加到请求中的一个标头，当你点击链接时，它会显示你点击链接时所在的网站/页面。 
您点击链接时所在的网站/页面。 
点击此处了解有关 HTTP 引用头的更多信息： https://en.wikipedia.org/wiki/HTTP_referer

这可用于限制使用嵌入到其他网站其他页面上的 "公共 "标记。 
确保引用头与网站主机名相匹配，可以帮助避免令牌被滥用，例如有人在公共论坛上发布令牌。
有助于避免令牌被滥用，例如，如果有人在公共论坛上发布令牌。

**Important**: this is not a security feature. The `referer` header can easily be spoofed.
This setting is intended to discourage unauthorized third-party developers from connecting
to public access instances.

#### 保存令牌：{ #saving-your-token } 
完成令牌配置后，单击弹出窗口右下方的 "生成新令牌 "按钮保存令牌。
按钮保存。
这样，令牌将被保存，并在服务器上生成一个秘密令牌密钥。
新的密匙将显示在 PAT 令牌列表底部，背景为绿色、
和文本 "新创建的令牌"。
秘密令牌密钥的外观与此类似：
```
d2pat_5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ1151814092
```
**重要**：生成的秘密令牌密钥只会显示一次，因此请务必 
现在就复制令牌密钥，并将其保存在安全的地方，以便以后使用。 
秘密令牌密钥将在服务器上安全散列，只有该秘密令牌密钥的散列才会保存到数据库中。 
密钥的哈希值才会保存到数据库中。这样做的目的是在有人未经授权访问数据库的情况下尽量减少安全影响。 
这与处理密码的方式类似。

### B.通过 API 创建令牌{ #b-creating-a-token-via-the-api } 

示例说明如何使用 API 创建新的个人访问令牌：

```
POST https://play.dhis2.org/dev/api/apiToken
Content-Type: application/json
Authorization: Basic admin district

{}
```
**注意**：记住有效载荷中的空 JSON 主体 (`{}`)！ 

这将返回一个包含类似标记的响应：
```json
{
  "httpStatus": "已创建",
  "httpStatusCode": 201,
  "status": "正常",
  "response": {
     "responseType": "ApiTokenCreationResponse",
     "key": "d2pat_5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ1151814092",
     "uid": "jJYrtIVP7qU",
     "klass": "org.hisp.dhis.security.apikey.ApiToken",
     "errorReports": []
  }
}
```

**重要**：令牌密钥只会在此回复中显示一次。
您需要将其复制并保存在安全的地方，以便以后使用！

令牌本身由三部分组成：
1. 前缀： (`d2pat_`) 表示这是什么类型的标记。
2. 随机字节 Base64 编码： (`5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ`)
3. CRC32 校验和：(`1151814092`) 校验和部分以 0 填充，因此长度始终为 10 个字符。


#### 通过应用程序接口配置令牌：{ #configure-your-token-via-the-api } 
要更改令牌上的任何限制条件，可发出以下 HTTP API 请求。

**注意**：创建令牌后只能修改约束条件！ 

```
PUT https://play.dhis2.org/dev/api/apiToken/jJYrtIVP7qU
Content-Type: application/json
Authorization: Basic admin district
```

```json
{
  “版本”：1，
  “类型”：“PERSONAL_ACCESS_TOKEN”，
  “过期”：163465349603200，
  “属性”： [
      {
        "type": "IpAllowedList",
        “allowedIps”：[“192.168.0.1”]
      },
      {
        "type": "方法允许列表",
        “允许的方法”：[“GET”]
      }
  ]
}
```

### 使用个人访问令牌{ #using-your-personal-access-token } 

要使用新创建的令牌发出请求，请相应地使用授权标头
。
授权标头格式如下
```
Authorization: ApiToken [YOUR_SECRET_API_TOKEN_KEY]
```
**举例**：
```
GET https://play.dhis2.org/dev/api/apiToken/jJYrtIVP7qU
Content-Type: application/json
Authorization: ApiToken d2pat_5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ1151814092
```


### 删除个人访问令牌{ #deleting-your-personal-access-token } 
您可以在创建 PAT 的个人资料页面的用户界面中删除 PAT、
或像这样通过应用程序接口删除：
```
DELETE https://play.dhis2.org/dev/api/apiToken/jJYrtIVP7qU
Content-Type: application/json
Authorization: ApiToken d2pat_5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ1151814092
```


## OAuth2{ #webapi_oauth2 } 

DHIS2支持* OAuth2 *身份验证协议。 OAuth2是开放的
授权标准，允许第三方客户代表DHIS2用户进行连接，并为对Web API的后续请求*bearer token* 。 DHIS2不支持细粒度
OAuth2角色，而是根据用户角色提供应用程序访问权限
DHIS2用户的身份。

您要允许其OAuth 2身份验证的每个客户端都必须
在DHIS2中注册。要添加新的OAuth2客户端，请转到`应用>设置> OAuth2客户端`。
在用户界面中，单击*添加新*，然后输入所需的客户端名称和授权类型。

#### 使用Web API添加客户端 { #adding-a-client-using-the-web-api } 

可以通过 Web API 添加 OAuth2 客户端。例如，我们可以
发送这样的有效载荷：

```json
{
  "name": "OAuth2 Demo Client",
  "cid": "demo",
  "secret": "1e6db50c-0fee-11e5-98d0-3c15c2c6caf6",
  "grantTypes": [
    "password",
    "refresh_token",
    "authorization_code"
  ],
  "redirectUris": [
    "http://www.example.org"
  ]
}
```

可用以下命令发送有效负载：

```bash
SERVER="https://play.dhis2.org/dev"
curl -X POST -H "Content-Type: application/json" -d @client.json
  -u admin:district "$SERVER/api/oAuth2Clients"
```

我们将使用此客户端作为下一个赠款类型示例的基础。

#### 授权类型密码 { #webapi_oauth2_password } 

所有授权类型中最简单的是 *password* 授权类型。这
授权类型类似于基本身份验证，因为它
要求客户端收集用户的用户名和密码。作为
例如，我们可以使用我们的演示服务器：

```bash
SERVER="https://play.dhis2.org/dev"
SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"

curl -X POST -H "Accept: application/json" -u demo:$SECRET "$SERVER/uaa/oauth/token"
  -d grant_type=password -d username=admin -d password=district
```

这将给您类似的响应：

```json
{
  "expires_in": 43175,
  "scope": "ALL",
  "access_token": "07fc551c-806c-41a4-9a8c-10658bd15435",
  "refresh_token": "a4e4de45-4743-481d-9345-2cfe34732fcc",
  "token_type": "bearer"
}
```

现在，我们将专注于 `access_token`，这就是我们
将用作我们的身份验证（承载）令牌。例如，我们将得到
使用我们的令牌的所有数据元素：

```bash
SERVER="https://play.dhis2.org/dev"
curl -H "Authorization: Bearer 07fc551c-806c-41a4-9a8c-10658bd15435" "$SERVER/api/33/dataElements.json"
```

#### 授予类型refresh \ _token { #webapi_refresh_token } 

通常，访问令牌的有效性有限。你可以看看
在上一个示例中响应的 `expires_in` 属性处
了解令牌何时到期。要获得新的`access_token`，您
可以再次往返服务器并使用`refresh_token`
这允许您获得更新的令牌而无需要求
再次使用用户凭据。

```bash
SERVER="https://play.dhis2.org/dev"
SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"
REFRESH_TOKEN="a4e4de45-4743-481d-9345-2cfe34732fcc"

curl -X POST -H "Accept: application/json" -u demo:$SECRET "$SERVER/uaa/oauth/token"
  -d "grant_type=refresh_token" -d "refresh_token=$REFRESH_TOKEN"
```

响应与获得令牌开始时的响应完全相同。

#### 授予类型authorization_code { #webapi_authorization_code } 

如果您不想的话，建议使用授权代码授予类型
在外部存储用户凭据。它允许DHIS2收集
用户名/密码直接来自用户而不是客户端
收集它们，然后代表用户进行身份验证。请成为
注意这种方法使用了客户端的` redirectUris`部分
有效载荷。

第 1 步：使用 Web 浏览器访问以下 URL。如果你有不止一个
重定向 URI，您可能需要添加 `&redirect_uri=http://www.example.org`
到网址：

```bash
SERVER="https://play.dhis2.org/dev"
$SERVER/uaa/oauth/authorize?client_id=demo&response_type=code
```

第 2 步：在用户成功登录并接受您的
客户端访问，它将重定向回您的重定向 uri，如下所示：

    http://www.example.org/?code=XYZ

第 3 步：这一步类似于我们在密码授予类型中所做的，
使用给定的代码，我们现在将要求访问令牌：

```bash
SERVER="https://play.dhis2.org/dev"
SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"

curl -X POST -u demo:$SECRET -H "Accept: application/json" $SERVER/uaa/oauth/token
-d "grant_type=authorization_code" -d "code=XYZ"
```

## 错误和信息消息 { #webapi_error_info_messages } 

Web API 对所有错误/警告和
信息性消息：

```json
{
  "httpStatus": "Forbidden",
  "message": "You don't have the proper permissions to read objects of this type.",
  "httpStatusCode": 403,
  "status": "ERROR"
}
```

Here we can see from the message that the user tried to access a
resource I did not have access to. It uses the http status code 403, the
HTTP status message *forbidden* and a descriptive message.

表格WebMessage 属性

| 名称 | 描述 |
|---|---|
| httpStatus | 此响应的 HTTP 状态信息，更多信息请参见 RFC 2616（第 10 节）。 |
| httpStatusCode | 此响应的 HTTP 状态代码，更多信息请参见 RFC 2616（第 10 节）。 |
| 地位 | DHIS2状态，可能的值为*OK* | *WARNING* | *ERROR*，其中`OK`表示一切顺利，`ERROR`表示操作未完成，`WARNING`表示操作部分成功，如果消息包含`response`属性，请在那里查找更多信息。 |
| 信息 | 用户友好型信息，说明操作是否成功。 |
| devMessage | 技术性更强、对开发人员更友好的信息（目前尚未使用）。 |
| 回应 | Extension point for future extensions of the `WebMessage` format. |

## 日期和期间格式 { #webapi_date_perid_format } 

在整个 Web API 中，我们指的是日期和期间。日期格式
是：

    年-月-日

例如，如果您想表达 2014 年 3 月 20 日，则必须使用
*2014-03-20*。

下表描述了期间格式（也可在
API 端点`/api/periodTypes`)

表格周期格式

| 间隔 | 格式 | 例 | 描述 |
|---|---|---|---|
| 日 | yyyyMMdd | 20040315 | 2004 年 3 月 15 日 |
| 周数 | yyyyWn | 2004W10 | 2004 年第 10 周 |
| 周三 | yyyyWedWn | 2015WedW5 | 第 5 周，周三开始 |
| 周四 | yyyyThuWn | 2015年第6周星期四 | 第 6 周，周四开始 |
| 周 星期六 | yyyySatWn | 2015SatW7 | 第 7 周周六开始 |
| 周日 | yyyySunWn | 2015SunW8 | 第 8 周，周日开始 |
| 双周 | yyyyBiWn | 2015BiW1 | 第 1-2 周 20015 |
| 月份 | yyyyMM | 200403 | 2004 年 3 月 |
| 双月 | yyyyMMB | 200401B | 2004 年 1-2 月 |
| 季度 | yyyyQn | 2004Q1 | 2004 年 1-3 月 |
| 六个月 | yyyySn | 2004S1 | 2004 年 1 月至 6 月 |
| 4 月份六个月 | yyyyAprilSn | 2004年4月1日 | 2004 年 4 月至 9 月 |
| 年份 | yyyy | 2004 | 2004 |
| 财政年度 4 月 | 年4月 | 2004 年 4 月 | 2004 年 4 月至 2005 年 3 月 |
| 财政年度 7 月 | 七月 | 2004 年 7 月 | 2004 年 7 月至 2005 年 6 月 |
| 财政年度 10 月 | 年 10 月 | 2004 年 10 月 | 2004 年 10 月至 2005 年 9 月 |


### 相对时期 { #webapi_date_relative_period_values } 


在 API 的某些部分，例如分析资源，您可以
除了固定期间（如上定义）之外，还使用相对期间。
相对期间是相对于当前日期并允许例如
用于创建动态报告。可用的相对期间值是：

    THIS_WEEK, LAST_WEEK, LAST_4_WEEKS, LAST_12_WEEKS, LAST_52_WEEKS,
    THIS_MONTH, LAST_MONTH, THIS_BIMONTH, LAST_BIMONTH, THIS_QUARTER, LAST_QUARTER,
    THIS_SIX_MONTH, LAST_SIX_MONTH, MONTHS_THIS_YEAR, QUARTERS_THIS_YEAR,
    THIS_YEAR, MONTHS_LAST_YEAR, QUARTERS_LAST_YEAR, LAST_YEAR, LAST_5_YEARS, LAST_10_YEARS, LAST_10_FINANCIAL_YEARS, LAST_12_MONTHS, 
    LAST_3_MONTHS, LAST_6_BIMONTHS, LAST_4_QUARTERS, LAST_2_SIXMONTHS, THIS_FINANCIAL_YEAR,
    LAST_FINANCIAL_YEAR, LAST_5_FINANCIAL_YEARS

### 自定义日期时段{ #webapi_date_custom_date_periods }

Analytics `query` resources support extra parameters to express periods.

将回到默认的 `pe` 尺寸：

- `eventDate` for `/analytics/events/query`
- `enrollmentDate` for `/analytics/enrollments/query`

允许在一个或多个日期字段上添加条件并将它们合并。

#### 自定义日期时段的使用{ #usage-of-custom-date-periods } 

在支持自定义日期时间段的资源中，有一些额外的查询参数，这些参数将被组合起来，以表达时间维度上的条件。

| 自定义日期周期 | 事件查询资源  | 入学查询资源 |
|--------------------|------------------------|---------------------------|
| `eventDate`        | [x]                    | [ ]                       |
| `enrollmentDate`   | [x]                    | [x]                       |
| `scheduledDate`    | [x]                    | [ ]                       |
| `incidentDate`     | [x]                    | [x]                       |
| `lastUpdated`      | [x]                    | [x]                       |

条件可以用以下形式表示

`analytics/events/query/...?..&eventDate=2021&...`

可以在同一查询中合并多个时间字段：

`analytics/events/query/...?..&eventDate=2021&incidentDate=202102&...`

所有这些条件都可以与 `pe` 维度相结合：

`analytics/events/query/...?..&dimension=pe:TODAY&enrollmentDate=2021&incidentDate=202102&...`

Supported formats are described in "date and period format" above. An extra format is provided to express a range of dates: `yyyyMMdd_yyyyMMdd` and `yyyy-MM-dd_yyyy-MM-dd`.

在下面的示例中，端点将返回计划在 20210101 和 20210104 之间发生的事件：

`analytics/events/query/...?..&dimension=pe:TODAY&enrollmentDate=2021&incidentDate=202102&scheduledDate=20210101_20210104&...`


## 当局{ #authorities } 
系统授权 ID 和名称可通过以下方式列出：

    /api/authorities

返回格式如下
```json
{
  "systemAuthorities": [
    {
      "id": "ALL",
      "name": "ALL"
    },
    {
      "id": "F_ACCEPT_DATA_LOWER_LEVELS",
      "name": "Accept data at lower levels"
    }
  ]
}
```

# 元数据{ #webapi_metadata }

## 标识符方案 { #webapi_identifier_schemes } 

本节将解释标识符方案的概念。
在导入过程中，标识符方案用于将元数据对象映射到其他元数据
并将元数据作为导出的一部分。请注意
注意并非所有方案都适用于所有 API 调用，也并非所有方案都能同时用于输入和输出。
方案可同时用于输入和输出。在
章节解释了各种 API 端点。

列出了可用的全套标识符方案对象类型
下面，使用在查询中使用的属性名称：

  - 方案

  - 数据元素标识方案

  - 类别选项组合IdScheme

  - orgUnitIdScheme

  - 程序标识方案

  - 程序阶段标识方案

  - 跟踪实体 ID 方案

  - 跟踪实体属性 IDScheme

通用 idScheme 适用于所有类型的对象。有可能
被特定的对象类型覆盖。

所有参数的默认方案是 UID（稳定的 DHIS2
身份标识）。支持的标识符方案在
下表。

表：计划值

| 计划 | 描述 |
|---|---|
| ID, UID | 与 DHIS2 稳定标识符匹配，这是默认标识方案。 |
| 代码 | 与 DHIS2 编码匹配，主要用于与外部系统交换数据。 |
| 名称 | 在 DHIS2 名称上匹配，请注意这使用的是可用的 *object.name*，而不是翻译后的名称。还请注意，名称并不总是唯一的，在这种情况下，不能使用它们。 |
| ATTRIBUTE:ID | 根据元数据属性进行匹配，需要将此属性分配给要匹配的类型，并将唯一属性设置为*true*。它的主要用途也是与外部系统交换数据，与 *CODE* 相比，它有一些优势，因为可以添加多个属性，所以可以用于与多个系统同步。 |

请注意，标识符方案不是一个独立的功能，需要与数据值导入和元数据导入等资源结合使用。
需要与数据值导入、元数据导入和
GeoJson 导入。

例如，指定 CODE 作为通用 id 方案并覆盖
使用 UID 作为组织单位 ID 方案，您可以使用这些查询
参数：

    ？idScheme = CODE＆orgUnitIdScheme = UID

再举一个例子，为组织单位 id 指定一个属性
方案，数据元素 id 方案的代码并使用默认 UID id
您可以使用这些参数的所有其他对象的方案：

    ？orgUnitIdScheme =属性：j38fk2dKFsG＆dataElementIdScheme = CODE

## 浏览Web API { #webapi_browsing_the_web_api } 

浏览 Web API 的入口点是 `/api`。这个资源
提供所有可用资源的链接。四种资源表示
格式始终适用于所有资源：HTML、XML、JSON、
和 JSONP。某些资源将具有其他可用格式，例如 MS
Excel、PDF、CSV 和 PNG。要从 Web 浏览器探索 API，请导航
到 `/api` 入口点并按照链接到您想要的
资源，例如`/api/dataElements`。对于所有资源
返回元素列表，某些查询参数可用于修改
响应：

表格查询参数

| 参数 | 选项值 | 默认选项 | 描述 |
|---|---|---|---|
| 分页 | true &#124; false | 真正 | 表示是否返回页面中的元素列表。 |
| 页码 | 编号 | 1 | 定义要返回的页码。 |
| 页面大小 | 编号 | 50 | 定义每页返回的元素数量。 |
| 订单 | property:asc/iasc/desc/idesc || iasc 和 idesc 是不区分大小写的排序。如果要对多个属性进行排序，请使用逗号将它们分开。  |

如何使用这些参数获取完整列表的示例
XML 响应格式的数据元素组是：

    /api/dataElementGroups.xml?links=false&paging=false

您可以在 name 属性上查询元素而不是返回
使用 *query* 查询变量的完整元素列表。在这个例子中
我们查询名称中带有“贫血”一词的所有数据元素：

    / api / dataElements？query =贫血

您可以像这样获取特定页面和对象的页面大小：

    /api/dataElements.json?page=2&pageSize=20

您可以像这样完全禁用分页：

    /api/indicatorGroups.json?paging=false

要基于特定属性对结果进行排序：

    /api/indicators.json?order=shortName:desc

首先根据创建的日期时间属性排序（降序），然后根据名称属性排序（升序）：

    /api/indicators.json?order=created:desc,name:asc

您可以通过以下方式在所有对象类型中根据对象的 ID 查找对象
*identifiableObjects* 资源：

    / api / identifiableObjects / <id>

### 翻译 { #webapi_translation } 

DHIS2 支持数据库内容的翻译，如数据元素、指标和计划、
指标和程序。网络应用程序接口中的所有元数据对象都有
属性，其中包括
*displayName*, *displayShortName*, *displayDescription* 和
*displayFormName*（用于数据元素和跟踪实体属性）。

表格翻译选项

| 参数 | 价值观 | 描述 |
|---|---|---|
| 译 | true &#124; false | 翻译元数据输出中的 display\* 属性（数据元素和跟踪实体属性的 displayName、displayShortName、displayDescription 和 displayFormName）。默认值为 true。 |
| 地点 | 使用的本地语言 | 使用指定的本地语言翻译元数据输出（要求 translate=true）。 |

### 翻译API { #webapi_translation_api } 

对象的翻译呈现为对象本身的一部分
在* translation *数组中。请注意，
JSON / XML有效负载的*翻译*数组通常为您预先过滤，这意味着它们不能直接用于导入/导出翻译（因为那样会
通常会覆盖当前用户以外的语言环境）。

在用户语言环境中过滤了转换数组的数据元素示例：

```json
{
  "id": "FTRrcoaog83",
  "displayName": "Accute French",
  "translations": [
    {
      "property": "SHORT_NAME",
      "locale": "fr",
      "value": "Accute French"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Accute French"
    }
  ]
}
```

转换关闭的数据元素示例：

```json
{
  "id": "FTRrcoaog83",
  "displayName": "Accute Flaccid Paralysis (Deaths < 5 yrs)",
  "translations": [
    {
      "property": "FORM_NAME",
      "locale": "en_FK",
      "value": "aa"
    },
    {
      "property": "SHORT_NAME",
      "locale": "en_GB",
      "value": "Accute Flaccid Paral"
    },
    {
      "property": "SHORT_NAME",
      "locale": "fr",
      "value": "Accute French"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Accute French"
    },
    {
      "property": "NAME",
      "locale": "en_FK",
      "value": "aa"
    },
    {
      "property": "DESCRIPTION",
      "locale": "en_FK",
      "value": "aa"
    }
  ]
}
```

请注意，即使您得到未过滤的结果，并且正在使用
适当的类型端点，即我们不允许的 `/api/dataElements` 
更新，因为这样做很容易犯错误并覆盖
其他可用的语言环境。

要阅读和更新翻译，您可以使用特殊翻译
每个对象资源的端点。可以通过*GET*或访问
在适当的`/ api / <object-type> / <object-id> / translations `端点上* PUT *。

As an example, for a data element with identifier `FTRrcoaog83`, you could use
`/api/dataElements/FTRrcoaog83/translations` to get and update
translations. The fields available are `property` with options *NAME*,
*SHORT_NAME*, *FORM_NAME*, *DESCRIPTION*, `locale` which supports any valid
locale ID and the translated property `value`.

法语语言环境的NAME属性示例：

```json
{
  "property": "NAME",
  "locale": "fr",
  "value": "Paralysie Flasque Aiguë (Décès <5 ans)"
}
```

然后将此有效负载添加到翻译数组中，并发回
到适当的端点：

```json
{
  "translations": [
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Paralysie Flasque Aiguë (Décès <5 ans)"
    }
  ]
}
```

对于ID为* FTRrcoaog83 *的数据元素，您可以* PUT *此代码为
`/ api / dataElements / FTRrcoaog83 / translations`。确保发送全部
特定对象的翻译，而不仅仅是单个语言环境的翻译
（否则，您可能会覆盖其他区域的现有语言环境
语言环境）。

如果数据值已成功保存或更新，则状态代码将为`204 No Content`，如果存在验证错误（例如，同一`语言环境`有多个`SHORT_NAME`），则状态代码将为`404 Not Found`。


### Web API版本 { #webapi_api_versions } 

Web API的版本从DHIS 2.25开始。 API版本
遵循DHIS2主版本号。例如，API
DHIS 2.33的版本是`33`。

您可以通过包含版本号来访问特定的 API 版本
在`/api` 组件之后，作为这样的例子：

    / api / 33 / dataElements

如果省略 URL 的 version 部分，系统将使用当前的
API 版本。例如，对于 DHIS 2.25，在省略 API 部分时，
系统将使用 API 版本 25。在开发 API 客户端时，它是
建议使用显式 API 版本（而不是省略 API
版本），因为这将保护客户端免受不可预见的 API 更改。

将支持最后三个 API 版本。例如，DHIS
2.27 版本将支持 API 版本 27、26 和 25。

请注意，元数据模型没有版本控制，您可能
体验变化，例如在对象之间的关联中。这些变化
将记录在 DHIS2 主要版本发行说明中。

## 元数据对象过滤器 { #webapi_metadata_object_filter } 

To filter the metadata there are several filter operations that can be
applied to the returned list of metadata. The format of the filter
itself is straight-forward and follows the pattern
*property:operator:value*, where *property* is the property on the
metadata you want to filter on, *operator* is the comparison operator
you want to perform and *value* is the value to check against (not all
operators require value). 

请参阅 "*模式*"部分，了解哪些属性可用。 
除列出的属性外，筛选器还可应用于自定义属性 
值，方法是使用属性的 ID 作为属性名。

还支持递归过滤，即对关联对象或对象集合进行过滤。 
也支持递归过滤。

表格：可用操作符

| 操作员 | 类型 | 所需数值 | 描述 |
|---|---|---|---|
| 等式 | 字符串 | 布尔值 | 整数 | 浮点 | 枚举 | 集合（检查大小） | 日期 | 真正 | 平等 |
| !eq | 字符串 | 布尔值 | 整数 | 浮点 | 枚举 | 集合（检查大小） | 日期 | 真正 | 不平等 |
| ieq | 字符串  | 真正  | 不区分大小写字符串，精确匹配 |
| 霓 | 字符串 | 布尔值 | 整数 | 浮点 | 枚举 | 集合（检查大小） | 日期 | 真正 | 不平等 |
| 喜欢 | 字符串 | 真正 | 区分大小写的字符串，任意匹配 |
| 喜欢 | 字符串 | 真正 | 区分大小写的字符串，任何地方都不匹配 |
| $like | 字符串 | 真正 | 区分大小写的字符串，匹配开始 |
| !$like | 字符串 | 真正 | 区分大小写的字符串，不匹配起始位置 |
| 喜欢$ | 字符串 | 真正 | 区分大小写的字符串，匹配末尾 |
| 喜欢$ | 字符串 | 真正 | 区分大小写的字符串，不匹配尾部 |
| 我喜欢 | 字符串 | 真正 | 不区分大小写的字符串，可在任意位置匹配 |
| 我喜欢 | 字符串 | 真正 | 不区分大小写的字符串，不匹配任何地方 |
| $ilike | 字符串 | 真正 | 不区分大小写字符串，匹配开始 |
| !$ilike | 字符串 | 真正 | 不区分大小写的字符串，不匹配起始位置 |
| 我喜欢$ | 字符串 | 真正 | 不区分大小写字符串，匹配末尾 |
| 我喜欢$ | 字符串 | 真正 | 不区分大小写的字符串，不匹配末尾 |
| gt | 字符串 | 布尔值 | 整数 | 浮点 | 集合（检查大小） | 日期 | 真正 | 大于 |
| ge | 字符串 | 布尔值 | 整数 | 浮点 | 集合（检查大小） | 日期 | 真正 | 大于或等于 |
| lt | 字符串 | 布尔值 | 整数 | 浮点 | 集合（检查大小） | 日期 | 真正 | 小于 |
| 勒 | 字符串 | 布尔值 | 整数 | 浮点 | 集合（检查大小） | 日期 | 真正 | 小于或等于 |
| 无效 | 一应俱全 | 假 | 属性为空 |
| 无效 | 一应俱全 | 假 | 属性不为空 |
| 空的 | 系列 | 假 | 藏品为空 |
| 象征性 | 字符串 | 真正 | 在搜索属性中对多个标记进行匹配 |
| 令牌 | 字符串 | 真正 | 搜索属性中的多个标记不匹配 |
| 在 | 字符串 | 布尔值 | 整数 | 浮点 | 日期 | 真正 | 查找匹配 1 个或多个值的对象 |
| 在 | 字符串 | 布尔值 | 整数 | 浮点 | 日期 | 真正 | 查找与 1 个或多个值不匹配的对象 |

Operators will be applied as logical *and* query. If you need a *or*
query, you can have a look at the *in* filter and the section below.
The filtering mechanism allows for recursion. See below for some examples.

获取ID属性为ID1或ID2的数据元素：

    / api / dataElements？filter = id：eq：ID1＆filter = id：eq：ID2

获取名称属性为 MyDataElement 的数据元素，忽略大小写：

    /api/dataElements?filter=name:ieq:mydataelement

获取具有 ID1 数据集的所有数据元素：

    /api/dataElements?filter=dataSetElements.dataSet.id:eq:ID1

获取所有使用聚合运算符 *sum* 和值类型的数据元素
*int*：

    /api/dataElements.json?filter=aggregationOperator:eq:sum&filter=type:eq:int

您可以在集合内进行筛选，例如，要获取属于 *ANC* 数据元素组的数据元素，您可以使用以下方法
数据元素组中的数据元素，可以使用下面的
使用相关数据元素组的 id 属性进行查询：

    /api/dataElements.json?filter=dataElementGroups.id:eq:qfxEYY9xAl6

要获取元数据属性中具有特定属性值的数据元素 
属性的数据元素时，可使用相同的集合查询语法指定属性 ID 和属性值的过滤器 
使用相同的集合查询语法：

    /api/dataElements.json?filter=attributeValues.attribute.id:eq:n2xYlNbsfko&filter=attributeValues.value:eq:AFP

获取已设置任何选项的数据元素：

    /api/dataElements?filter=optionSet:!null

由于默认情况下所有运算符都是 *and*，因此您无法找到数据
匹配多个 id 的元素，为此您可以使用 *in*
操作员。

    /api/dataElements.json?filter=id:in:[fbfJHSPpUQD,cYeuwXTCPkU]。

### 逻辑运算符 { #webapi_metadata_logical_operator } 

如前一节所述，应用了默认逻辑运算符
过滤器是 *AND* 这意味着所有对象过滤器必须是
匹配。但是，在某些情况下，您希望匹配其中之一
几个过滤器（可能是 id 和 code 字段），在这些情况下，它是
可以将根逻辑运算符从 *AND* 切换为 *OR*
使用 *rootJunction* 参数。

示例：正常过滤，其中 id 和 code 必须匹配才能具有
结果返回

    /api/dataElements.json?filter=id:in:[id1,id2]&filter=code:eq:code1

示例：过滤逻辑运算符已切换为 OR 的位置
现在只有一个过滤器必须匹配才能产生结果
    回

    /api/dataElements.json?filter=id:in:[id1,id2]&filter=code:eq:code1&rootJunction=OR

### 可识别的令牌过滤器 { #identifiable-token-filter } 

除了上述基于特定属性的过滤之外，
我们还通过* token *基于* AND *过滤了一组
属性：ID，代码和名称（如果可用，还包括shortName）。这些
属性通常称为*可识别*。这个想法是为了
过滤ID，名称，代码或简称中包含某些内容的元数据。

示例：过滤所有包含 *2nd* 的数据元素
如下： id,name,code,shortName

    /api/dataElements.json?filter=identifiable:token:2nd

也可以指定多个过滤值。

示例：获取在任何 *identifiable* 属性中找到 *ANC visit* 的所有数据元素。系统返回所有数据元素，其中在可识别属性中的任何地方都可以找到令牌（ANC 和访问）。

    /api/dataElements.json?filter=identifiable:token:ANC访问

也可以将可识别过滤器与基于属性的过滤器结合起来，并期望应用 *rootJunction*。

    /api/dataElements.json?filter=identifiable:token:ANC visit＆filter = displayName：ilike：tt1

    /api/dataElements.json?filter=identifiable:token:ANC访问
      ＆filter = displayName：ilike：tt1＆rootJunction = OR

### 仅可索引跟踪实体属性的过滤器{ #indexable-only-filter-for-tracked-entity-attributes } 

对于跟踪的实体属性，除了前面提到的过滤功能外，还有一个特殊的过滤器。 
有些被跟踪的实体属性可以创建三叉索引，以提高查询性能。 
使用设置为 true 的 *indexableOnly* 参数，可以筛选出只包含可建立三叉索引的属性的结果。

示例获取所有可索引的跟踪实体属性。

    /api/trackedEntityAttributtes.json?indexableOnly=true

可指定附加过滤器和 `indexableOnly` 参数。

示例获取 *NAME* 属性中包含 *ANC* 的所有被跟踪实体属性。系统会返回名称与提供的关键字相匹配的被跟踪实体属性，如果属性是可索引的，也会返回。

    /api/trackedEntityAttributtes.json?filter=name:like:ANC&indexableOnly=true

## 元数据字段过滤器 { #webapi_metadata_field_filter } 

在许多情况下，元数据的默认视图可能过于冗长。
冗长。客户可能只需要每个对象中的几个字段，并希望从响应中删除不必要的字段。
从响应中删除不必要的字段。要了解每个对象有哪些字段
请参阅 "*模式*"部分。
除了列出的属性外，还可以通过使用属性
属性 ID 作为属性名称。

The format for include/exclude allows for infinite recursion. To filter
at the "root" level you can just use the name of the field,
i.e. `?fields=id,name` which would only display the `id` and
`name` fields for every object. For objects that are either collections or
complex objects with properties on their own, you can use the format
`?fields=id,name,dataSets[id,name]` which would return `id`, `name` of
the root, and the `id` and `name` of every data set on that object.
Negation can be done with the exclamation operator, and we have a set of
presets of field select. Both XML and JSON formats are supported.

**示例**：在指标资源上获取`id`和`name`：

    / api / indicators？fields = id，名称

**Example**: Get `id` and `name` from data elements, and `id` and `name`
from the associated data sets:

    / api / dataElements？fields = id，name，dataSets [id，name]

**示例**：获取用户定义属性的 `id`、`name` 和值 
ID 为 `DnrLSdo4hMl` 的组织单位的用户自定义属性值：

    /api/organisationUnits?fields=id,name,DnrLSdo4hMl

然后，该属性将作为每个匹配对象的属性 `DnrLSdo4hMl` 包含在响应中。
属性。可以使用 `rename` 
转换器进行重命名，如下一节所示。

要从输出中排除字段，可以使用感叹号`!`。
操作符。这是在查询中的任何地方都允许的，而根本不会
包括该属性，因为它可能已经插入了某些
预设。

一些预设（选定的字段组）可用并且可以应用
使用`:` 运算符。

表格属性操作符

| 操作员 | 描述 |
|---|---|
| <field-name\> | 如果存在，则包含带有名称的属性。 |
| <object\>[<field-name\>, ...] | 包含一个集合中的字段（将应用于该集合中的每个对象），或只包含一个对象上的字段。 |
| !<field-name\>,<object\>[！<field-name\> | 请勿包含此字段名，它也适用于对象/集合内部。在使用预设包含字段时非常有用。 |
| *,<object\>[\*] | 包括某个对象上的所有字段，如果应用于某个集合，则会包括该集合中所有对象上的所有字段。 |
| :<preset\> | 用于选择多个字段的别名。目前有三种预设，请参阅下表了解说明。 |

表格字段预设

| 预设 | 描述 |
|---|---|
| 一应俱全 | 对象的所有字段 |
| \* | 所有的别名 |
| 可识别 | 包括 id、名称、代码、创建、最后更新和最后更新由字段 |
| 可命名 | 包括 id、名称、简称、代码、描述、创建和最后更新字段 |
| 持续 | 返回对象的所有持久化属性，不考虑对象是否是关系的所有者。 |
| 所有者 | 返回对象上的所有持久化属性，其中该对象是所有属性的所有者，此有效负载可用于通过 API 进行更新。 |

**示例**：包括数据集中除组织单位以外的所有字段：

    / api / dataSets？fields =：all，！organizationUnits

**示例**：仅包含ID，名称和数据集中的组织单位集合，但不包含组织单位中的ID：

    / api / dataSets / BfMAe6Itzgt？fields = id，name，organisationUnits [：all，！id]

**示例**：包括所有指标的可命名属性：

    /api/indicators.json?fields=:nameable

### 现场变压器 { #webapi_field_transformers } 

字段变换可用于变换属性。语法说明如下。

    /api/dataElements/ID?fields=id~rename(i),name~rename(n)

这会将 *id* 属性重命名为 *i*，将 *name* 属性重命名为 *n*。

通过重复变压器操作符，可对一个属性应用多个变压器：

    /api/dataElementGroups.json?fields=id,displayName,dataElements~isNotEmpty~rename(haveDataElements）

下表列出了支持的变压器运营商。

表格：可用变压器

| 名称 | 论据 | 描述 |
|---|---|---|
| 尺寸 || 给出字符串（长度）和集合的大小 |
| isEmpty || 字符串或集合是否为空 |
| isNotEmpty || 字符串或集合是否为空 |
| 重命名 | 参数 1：名称 | 重命名属性名称 |
| 分页 | 参数 1：页面，参数 2：页面大小 | 页面集合，默认页面大小为 50。 |
| 采摘 | 可选参数 1：字段名 | 将对象数组转换为对象选定字段的数组。默认情况下，使用集合返回的第一个字段（通常是 ID）。 |
| keyBy | 可选参数 1：字段名 | 将对象数组转换为以字段名（默认 id）为键的对象。这对 JavaScript 中的快速查找非常有用，例如 |

#### 例子 { #webapi_field_transformers_examples } 

变压器使用示例如下。

获取集合的大小：

    /api/dataElements?fields=dataSets~size

测试集合是否为空：

    /api/dataElements?fields=dataSets~isEmpty

测试集合是否为空：

    /api/dataElements?fields=dataSets~isNotEmpty

重命名属性

    /api/dataElements/ID?fields=id~rename(i),name~rename(n)

对集合进行分页：

    /api/dataElementGroups?fields=id,displayName,dataElements~paging(1;20)

获取包含组织单位 ID 的数组：

    /api/categoryOptions.json?fields=id,organisationUnits~pluck

获取包含组织单位名称的数组：

    /api/categoryOptions.json?fields=id,organisationUnits~pluck[name]。

通过`d`字段键入 dataElements 数组：

    /api/dataElementGroups.json?fields=id,name,dataElements~keyBy[id,name,valueType]。

通过`valueType`字段键入 dataElements 数组，因为多次点击这将生成（数据元素的）数组：

    /api/dataElementGroups.json?fields=id,name,dataElements~keyBy(valueType)[id,name,valueType]。

## 元数据创建，读取，更新，删除，验证 { #webapi_metadata_crud } 

DHIS2 中的所有元数据实体都有自己的 API 端点，支持
*CRUD* 操作（创建、读取、更新和删除）。端点 URL
遵循以下格式：

    / api / <entityName>

_entityName_ 使用驼峰命名法。例如，端点
对于_数据元素_是：

    / api / dataElements

> **_注意：_** 更新对象时，所有现有属性值都将被覆盖，即使新值为空。如果要对对象进行部分更新，请使用 [JSON Patch API]（#webapi_partial_updates）。

### 创建/更新参数 { #webapi_metadata_create_update } 

以下请求查询参数可用于所有元数据端点。

表：可用的查询过滤器

| 参数 | 类型 | 需要 | 选项（默认为默认） | 描述 |
|---|---|---|---|---|
| 预热缓存 | 布尔 | 假 | true &#124; false | 打开/关闭缓存映射预热。默认情况下是打开的，关闭此选项将大大缩短导入程序的初始加载时间（但会使导入本身变慢）。这主要用于要导入一个小的 XML/JSON 文件，而不想等待缓存映射预热的情况。 |
| 导入策略 | 枚举 | 假 | 创建_并_更新&#124;创建&#124;更新&#124;删除 | 使用的导入策略，更多信息请参阅下文。 |

### 创建和更新对象 { #webapi_creating_updating_objects } 

要创建新对象，您需要知道端点、类型
格式，并确保您拥有所需的权限。作为
例如，我们将创建和更新一个*常量*。为了弄清楚
格式，我们可以使用新的 *schema* 端点来获取格式
描述。因此，我们将从获取该信息开始：

    http：// <server> /api/schemas/constant.json

从输出中，您可以看到创建所需的权限
是`F_CONSTANT_ADD`，重要的属性是：*name* 和
*价值*。由此，我们可以创建一个 JSON 负载并将其保存为文件
称为constant.json：

```json
{
  "name": "PI",
  "value": "3.14159265359"
}
```

与XML有效内容相同的内容：

```xml
<constant name="PI" xmlns="http://dhis2.org/schema/dxf/2.0">
  <value>3.14159265359</value>
</constant>
```

我们现在准备通过发送 POST 请求来创建新的*常量*
使用curl 的带有JSON 有效负载的`constants`端点：

```bash
curl -d @constant.json "http://server/api/constants" -X POST
  -H "Content-Type: application/json" -u user:password
```

将常量发布到演示中的具体示例
    服务器：

```bash
curl -d @constant.json "https://play.dhis2.org/api/constants" -X POST
  -H "Content-Type: application/json" -u admin:district
```

如果一切顺利，您应该看到类似以下的输出：

```json
{
  "status": "SUCCESS",
  "importCount": {
    "imported": 1,
    "updated": 0,
    "ignored": 0,
    "deleted": 0
  },
  "type": "Constant"
}
```

更新过程将完全相同，您进行更改
到 JSON/XML 负载，找出常量的 *ID*，然后
向端点发送包含 ID 的 PUT 请求：

```bash
curl -X PUT -d @pi.json -H "Content-Type: application/json"
  -u user:password "http://server/api/constants/ID"
```

### 删除物件 { #webapi_deleting_objects } 

删除对象非常简单，您需要知道
*ID* 和你要删除的类型的端点，让我们继续我们的
上一节中的示例并使用*常量*。让我们假设
id 是 *abc123*，那么你需要做的就是发送 DELETE
对端点的请求 + id：

```bash
curl -X DELETE -u user:password "http://server/api/constants/ID"
```

成功删除应返回HTTP状态204（无内容）。

### 在集合中添加和删除对象 { #webapi_adding_removing_objects_collections } 

集合资源允许您修改集合
对象。

#### 添加或删除单个对象 { #webapi_collections_adding_removing_single_objects } 

为了在对象集合中添加或删除对象，您
可以使用以下
    图案：

    / api / {collection-object} / {collection-object-id} / {collection-name} / {object-id}

应该使用POST方法添加，使用DELETE方法删除
一个东西。当对象之间存在多对多关系时，
您必须首先确定哪个对象拥有该关系。如果不是
清除这是哪个对象，尝试两种方式调用以查看哪个有效。

模式的组成部分是：

  - 集合对象：拥有您的集合的对象类型
    想修改。

  - 集合对象 id：拥有该对象的对象的标识符
    要修改的集合。

  - 集合名称：您要修改的集合的名称。

  - object id：要添加或删除的对象的标识符
    从集合。

例如，为了删除标识符为 IDB 的数据元素
从具有标识符 IDA 的数据元素组中，您可以执行 DELETE
要求：

    删除/ api / dataElementGroups / IDA / dataElements / IDB

将带有标识符 IDB 的类别选项添加到带有
标识符 IDA 你可以做一个 POST
要求：

    POST / api / categories / IDA / categoryOptions / IDB

#### 添加或删除多个对象 { #webapi_collections_adding_removing_multiple_objects } 

您可以在一个请求中从集合中添加或删除多个对象
具有这样的有效载荷：

```json
{
  "identifiableObjects": [{
      "id": "IDA"
    }, {
      "id": "IDB"
    }, {
      "id": "IDC"
    }
  ]
}
```

使用此有效负载，您可以添加，替换或删除项目：

*添加项目：*

    POST / api / categories / IDA / categoryOptions

*更换物品：*

    PUT /api/categories/IDA/categoryOptions

*删除
项目：*

    删除/ api / categories / IDA / categoryOptions

#### 在单个请求中添加和删除对象 { #webapi_collections_adding_removing_objects_single_request } 

您可以在单个 POST 中从集合中添加和删除对象
请求到以下 URL：

    POST / api / categories / IDA / categoryOptions

有效负载格式为：

```json
{
  "additions": [{
      "id": "IDA"
    }, {
      "id": "IDB"
    }, {
      "id": "IDC"
    }
  ],
  "deletions": [{
      "id": "IDD"
    }, {
      "id": "IDE"
    }, {
      "id": "IDF"
    }
  ]
}
```

### 验证有效载荷 { #webapi_validating_payloads } 

DHIS 2 支持元数据有效载荷的系统范围验证，这意味着
将检查 API 端点上的创建和更新操作
允许进行更改之前的有效负载。找出哪些验证
为特定端点准备好了，看看`/api/schemas`
端点，即要找出数据元素具有哪些约束，您
会去`/api/schemas/dataElement`。

您还可以手动验证您的有效负载，方法是将其发送到适当的
架构端点。如果您想从创建中验证常量
之前的部分，您可以这样发送：

    POST / api / schemas / constant

一个简单的（非验证）示例为：

```bash
curl -X POST -d "{\"name\": \"some name\"}" -H "Content-Type: application/json"
  -u admin:district "https://play.dhis2.org/dev/api/schemas/dataElement"
```

这样就能得到结果：

```json
[
   {
      "message" : "Required property missing.",
      "property" : "type"
   },
   {
      "property" : "aggregationOperator",
      "message" : "Required property missing."
   },
   {
      "property" : "domainType",
      "message" : "Required property missing."
   },
   {
      "property" : "shortName",
      "message" : "Required property missing."
   }
]
```

### 部分更新 { #webapi_partial_updates } 

对于处理元数据的 API 端点，我们支持使用 JSON 补丁 [标准](https://tools.ietf.org/html/rfc6902) 进行部分更新 (PATCH)。有效负载基本上概述了您想要应用于现有元数据对象的一组操作。有关 JSON 补丁的详细信息和示例，请参阅 [jsonpatch.com](http://jsonpatch.com/)。支持三个运算符：`添加`、`删除`和`替换`。

下面是几个与 DHIS2 相关的示例。请注意，对有效载荷的任何更新都应视为 HTTP PUT 操作，即任何突变都必须产生有效的 PUT 元数据有效载荷。

The default `importReportMode` for JSON patch is `ERRORS_NOT_OWNER` which implies that when updating any property which is not owned by that particular object (for example trying to add a indicator group directly to an indicator) you will get an error.

根据 JSON 补丁规范，发送补丁时必须始终使用 mimetype `application/json-patch+json`。

#### 例子 { #examples } 

##### 更新数据元素的名称和值类型{ #update-name-and-value-type-of-data-element } 

```
PATCH /api/dataElements/{id}
```

```json
[
  {"op": "add", "path": "/name", "value": "New Name"},
  {"op": "add", "path": "/valueType", "value": "INTEGER"}
] 
```

##### 在数据元素组中添加新数据元素{ #add-new-data-element-to-a-data-element-group } 

```
PATCH /api/dataElementGroups/{id}
```

```json
[
  {"op": "add", "path": "/dataElements/-", "value": {"id": "data-element-id"}}
]
```

##### 从数据元素组中删除所有数据元素关联{ #remove-all-data-element-associations-from-a-data-element-group } 

```
PATCH /api/dataElementGroups/{id}
```

```json
[
  {"op": "remove", "path": "/dataElements"}
]
```

##### 更改数据元素的域和值类型{ #change-domain-and-value-type-of-a-data-element } 

```
PATCH /api/dataElements/{id}
```

```json
[
    {"op": "add", "path": "/domainType", "value": "TRACKER"},
    {"op": "add", "path": "/valueType", "value": "INTEGER"}
]
```

##### 从 orgUnit 组中删除特定 orgUnit{ #remove-a-specific-orgunit-from-an-orgunit-group } 

```
PATCH /api/organisationUnitGroups/{id}
```

```json
[
  {"op": "remove", "path": "/organisationUnits/1"}
]
```

#### 受阻 将 dataElementGroup 添加到 dataElement{ #blocked-add-dataelementgroup-to-dataelement } 

```
PATCH /api/dataElements/{id}?importReportMode=ERRORS_NOT_OWNER
```

```json
[
    {"op": "add", "path": "/dataElementGroups/-", "value": {"id": "data-element-group-id"}}
]
```

#### 数据元素{ #blocked-update-name-of-dataelementgroup-in-dataelement } 中的数据元素组名称更新受阻 

```
PATCH /api/dataElements/{id}?importReportMode=ERRORS_NOT_OWNER
```

```json
[
    {"op": "add", "path": "/dataElementGroups/0", "value": {"name": "new-name"}}
]
```
#### 按 id 删除收藏项{ #remove-collection-item-by-id } 

```
补丁 /api/dataSets/{id}?importReportMode=ERRORS_NOT_OWNER
```

```json
[
    {"op": "remove-by-id", "path": "/organisationUnits", "id": "u6CvKyF0Db5"}
]
```

#### 路径无效的补丁请求{ #patch-request-with-invalid-path } 
如果`path`属性无效或不存在，则修补服务将返回如下错误。


```
补丁 /api/dataSets/{id}?importReportMode=ERRORS_NOT_OWNER
```

```json
[
    {"op": "remove-by-id", "path": "/test", "id": "u6CvKyF0Db5"}
]
```
回应
```json
{
    "httpStatus": "Bad Request",
    "httpStatusCode": 400,
    "status": "ERROR",
    "message": "Invalid path /test"
}
```

### 元数据 CSV 导出{ #webapi_metadata_csv_export } 

CSV字段过滤与CSV（请注意，在`/api/metadata`端点上使用CSV不受支持）几乎相同，但字段转换尚不支持。

对于支持CSV的端点（如`/api/dataElements` `/api/organisationUnits`等我们的元数据端点），您可以使用`Accept`头部和值`text/csv`，或者您可以使用扩展名`.csv`。请注意，不支持复杂对象，我们仅支持id-object集合（因此将返回一个UID列表）。

| 名称 | 选项 | 描述 |
|---|---|---|
| 领域 | 与元数据字段过滤器相同（有上述注意事项） | 默认过滤器是`id，displayName` |
| skipHeader | 假/真 | 标题（包含列名）是否应包括在内
| 分隔符 | 默认值： `.` | 立柱分离器
| 数组分隔符 | 默认值：`;` | 如果其中一个字段是一个 ID 对象集合，该分隔符将分隔所有 UID

#### 例子 { #examples } 

#### 获取包括组关联在内的所有数据元素{ #get-all-data-elements-including-their-group-associations } 

```
/api/dataElements.csv?fields=id,displayName,dataElementGroups
```

#### 获取所有组织单位，包括几何（将被忽略）{ #get-all-org-units-including-geometry-which-will-get-ignored } 

```
/api/organisationUnits.csv?fields=id,displayName,organisationUnitGroups,geometry
```

## 元数据导出 { #webapi_metadata_export } 

本节介绍了可在以下位置获得的元数据 API
`/api/元数据`。支持 XML 和 JSON 资源表示。

    / api /元数据

最常用的参数在下面的“导出参数”中描述
桌子。您还可以使用以下方法将其应用于所有可用类型
`type:fields=<filter>` 和 `type:filter=<filter>`。你也可以
通过设置 `type=true|false` 启用/禁用某些类型的导出。

表：导出参数

| 名称 | 选项 | 描述 |
|---|---|---|
| 领域 | 与元数据字段过滤器相同 | 适用于所有类型的默认字段过滤器，默认为 `:owner`。 |
| 过滤 | 与元数据对象过滤器相同 | 适用于所有类型的默认对象过滤器，默认为`无`。 |
| 订单 | 与元数据顺序相同 | 适用于所有类型的默认顺序，如果可用，则默认为 `name`；如果不可用，则默认为 `created`。 |
| 译 | 假/真 | 启用翻译。请注意，默认情况下这是关闭的（在其他端点，默认情况下是打开的）。 |
| 地点 | <locale\> | 从用户本地语言更改为自定义本地语言。 |
| 默认 | 包括/排除 | 是否应在有效载荷中包含自动生成的类别对象。如果您要在两个非同步实例之间移动元数据，可能需要将其设置为 EXCLUDE，以方便处理这些生成的对象。 |
| 跳过共享 | 假/真 | 启用此功能将从导出对象中剥离共享属性。这包括 *user*、*publicAccess*、*userGroupAccesses*、*userAccesses* 和 *externalAccess*。 |
| 下载 | 假/真 | 启用此功能将添加 HTTP 标头 Content-Disposition，指定数据应作为附件处理，并由网络浏览器提供下载。 |

### 元数据导出示例 { #webapi_metadata_export_examples } 

导出所有元数据。小心，因为响应可能非常大，具体取决于
关于您的元数据配置：

    / api /元数据

导出由lastUpdated降序排列的所有元数据：

    / api / metadata？defaultOrder = lastUpdated：desc

导出仅包括指标和指标组的元数据：

    / api / metadata？indicators = true＆indicatorGroups = true

导出所有数据元素的id和displayName，按displayName排序：

    / api / metadata？dataElements：fields = id，name＆dataElements：order = displayName：desc

导出名称以“ ANC”开头的数据元素和指示符：

    / api / metadata？filter = name：^ like：ANC＆dataElements = true＆indicators = true

### 具有依赖项的元数据导出 { #webapi_dataset_program_export_dependencies } 

当您想交换数据集、程序、类别组合、仪表盘、选项集或数据元素组的元数据时、
仪表板、选项集或数据元素组的元数据时
时，有六个专用端点可供使用：

```
/api/dataSets/{id}/metadata.json

/api/programs/{id}/metadata.json

/api/categoryCombos/{id}/metadata.json

/api/dashboards/{id}/metadata.json

/api/optionSets/{id}/metadata.json

/api/dataElementGroups/{id}/metadata.json
```

然后可以使用`/ api / metadata`导入这些导出。

这些端点还支持以下参数：

表：导出参数

| 名称 | 选项 | 描述 |
|---|---|---|
| 跳过共享 | 假/真 | 启用此功能将从导出对象中剥离共享属性。这包括 *user*、*publicAccess*、*userGroupAccesses*、*userAccesses* 和 *externalAccess*。 |
| 下载 | 假/真 | 启用此功能将添加 HTTP 标头 Content-Disposition，指定数据应作为附件处理，并由网络浏览器提供下载。 |

## 元数据导入 { #webapi_metadata_import } 

本节介绍元数据导入 API。 XML 和 JSON 资源
支持表示。可以使用 *POST* 请求导入元数据。

    / api /元数据

导入器允许您导入元数据有效负载，其中可能包括许多
不同的实体和每个实体的任意数量的对象。元数据导出
元数据导出API生成的可以直接导入。

元数据导入端点支持多种参数，分别是
下面列出。

表：导入参数

| 名称 | 选项（第一项为默认值） | 描述 |
|---|---|---|
| 导入模式 | 提交、验证 | 设置整体导入模式，决定是否仅 `VALIDATE` 或也 `COMMIT` 元数据，这与我们旧的 dryRun 标志具有相似的功能。 |
| 标识符 | uid、代码、自动 | Sets the identifier scheme to use for reference matching. `AUTO` means try `UID` first, then `CODE`. |
| 导入报告模式 | 错误、全部、调试 | Sets the `ImportReport` mode, controls how much is reported back after the import is done. `ERRORS` only includes *ObjectReports* for object which has errors. `FULL` returns an *ObjectReport* for all objects imported, and `DEBUG` returns the same plus a name for the object (if available). |
| 预热模式 | 参考、全部、无 | 设置预热器模式，用于指示是否应该对 `ALL` 进行预热（就像以前使用 *preheatCache=true* 一样）或对对象进行更智能的扫描以查看要预热的内容（现在是默认设置），将其设置为不推荐使用`无`。 |
| 导入策略 | CREATE_AND_UPDATE, CREATE, UPDATE, DELETE | Sets import strategy, `CREATE_AND_UPDATE` will try and match on identifier, if it doesn't exist, it will create the object. |
| 原子模式 | 全部，无 | 设置原子模式，在旧的导入器中，我们总是进行*best effort*导入，这意味着即使某些引用不存在，我们仍然会导入（即数据元素组导入时缺少数据元素）。新进口商的默认设置是不允许这样做，并且类似地拒绝任何验证错误。设置 `NONE` 模式模拟了旧的行为. |
| 冲洗模式 | 自动，目标 | 设置刷新模式，控制何时刷新内部缓存。*强烈*建议将其保留为`AUTO`（这是默认设置）。仅将 `OBJECT` 用于调试目的，您会看到休眠异常并想查明堆栈发生的确切位置（休眠只会在刷新时抛出，因此很难知道哪个对象有问题）。 | 
| 跳过共享 | 假，真 | 跳过共享属性，更新时不合并共享，创建新对象时不添加用户组访问权限。 |
| 跳过验证 | 假，真 | 跳过导入的验证。`不推荐`。 |
| 异步 | 假，真 | 异步导入时，会立即返回一个 *Location* 标头，指向 *importReport* 的位置。有效载荷还包含一个已创建任务的 json 对象。 |
| 包容策略 | NON_NULL, ALWAYS, NON_EMPTY | *NON_NULL* 包括非空属性，*ALLWAYS* 包括所有属性，*NON_EMPTY* 包括非空属性（不包括长度为 0 的字符串、大小为 0 的集合等）。 |
| 用户覆盖模式 | 无、当前、选定 | 允许你覆盖正在导入的每个对象的用户属性，选项包括 NONE（不做任何操作）、CURRENT（使用导入用户）、SELECTED（使用 overrideUser=X 选择特定用户）。 |
| 覆盖用户 | 用户 ID | 如果 userOverrideMode 为 SELECTED，则使用此参数选择要覆盖的用户。 |

> **NOTE** When updating objects, all property values will be overwritten even if the new values are `null`. Please use [JSON Patch API](#webapi_partial_updates) in case you want do partial update to an object.


要导入的元数据负载的示例如下所示。注意如何
每个实体类型都有自己的属性和一个对象数组：

```json
{
  "dataElements": [
    {
      "name": "EPI - IPV 3 doses given",
      "shortName": "EPI - IPV 3 doses given",
      "aggregationType": "SUM",
      "domainType": "AGGREGATE",
      "valueType": "INTEGER_ZERO_OR_POSITIVE"
    },
    {
      "name": "EPI - IPV 4 doses given",
      "shortName": "EPI - IPV 4 doses given",
      "aggregationType": "SUM",
      "domainType": "AGGREGATE",
      "valueType": "INTEGER_ZERO_OR_POSITIVE"
    }
  ],
  "indicators": [
    {
      "name": "EPI - ADS stock used",
      "shortName": "ADS stock used",
      "numerator": "#{LTb8XeeqeqI}+#{Fs28ZQJET6V}-#{A3mHIZd2tPg}",
      "numeratorDescription": "ADS 0.05 ml used",
      "denominator": "1",
      "denominatorDescription": "1",
      "annualized": false,
      "indicatorType": {
        "id": "kHy61PbChXr"
      }
    }
  ]
}
```

将此有效负载发布到元数据端点时，响应将包含
有关导入过程中使用的参数的信息和每个摘要
实体类型，包括创建、更新、删除和
忽略：

```json
{
  "importParams": {
    "userOverrideMode": "NONE",
    "importMode": "COMMIT",
    "identifier": "UID",
    "preheatMode": "REFERENCE",
    "importStrategy": "CREATE_AND_UPDATE",
    "atomicMode": "ALL",
    "flushMode": "AUTO",
    "skipSharing": false,
    "skipTranslation": false,
    "skipValidation": false,
    "metadataSyncImport": false,
    "firstRowIsHeader": true,
    "username": "UNICEF_admin"
  },
  "status": "OK",
  "typeReports": [
    {
      "klass": "org.hisp.dhis.dataelement.DataElement",
      "stats": {
        "created": 2,
        "updated": 0,
        "deleted": 0,
        "ignored": 0,
        "total": 2
      }
    },
    {
      "klass": "org.hisp.dhis.indicator.Indicator",
      "stats": {
        "created": 1,
        "updated": 0,
        "deleted": 0,
        "ignored": 0,
        "total": 1
      }
    }
  ],
  "stats": {
    "created": 3,
    "updated": 0,
    "deleted": 0,
    "ignored": 0,
    "total": 3
  }
}
```

## GeoJSON 导入<!-- DHIS2-EDIT:https://github.com/dhis2/dhis2-docs/edit/master/src/developer/web-api/geo-json.md --> { #geojson-import } 

GeoJSON 导入用于将几何数据附加到组织单位。

对于批量导入，需要一个带有特征集合的 GeoJSON 文件。
该集合中的每个地物都需要一个指向其应链接到的组织单位的引用。
的引用。

默认情况下，文件中的几何图形存储为组织单位的`几何图形`属性。要存储额外的几何图形，可以创建`GEOJSON`类型的属性。当使用属性时，文件中的所有几何图形都存储为相同的属性，该属性提供了一个附加参数`attributeId`。

### GeoJSON 批量数据导入{ #webapi_geojson_bulk_import }

表：导入参数

| 名称              | 类型                           | 默认 | 描述                                                                                                                       |
|-------------------|--------------------------------|---|-----------------------------------------------------------------------------------------------------------------------------------|
| `geoJsonId`       | `boolean`                      | `true` | 当`true`时，预期GeoJSON要素的`id`属性将保存组织单元标识符。                        |
| `geoJsonProperty` | `String`                       | _未定义_ | 如果 `geoJsonId` 为 `false`，该参数将命名 GeoJSON 地物 `properties` 中保存组织单位标识符的属性 |
| `orgUnitProperty` | `enum`：[`id`、`code`、`name`] | `id` | GeoJSON 文件中使用的标识符所指向的组织单位属性                             |
| `attributeId`     | `String` | _未定义_ | 设置后，几何体将存储为 ID 所引用属性的值                                                       |
| `dryRun`          | `boolean` | `false` | When `true` the import is processed without actually updating the organisation units |
| `async`           | `boolean` | `false` | When `true` the import is processed asnychronously |

Uasge：

    POST /api/organisationUnits/geometry

The post body is the GeoJSON file. Content type should be `application/json` or
`application/geo+json`. The file may be `.zip` or `.gzip` compressed.

For example, a default file where `id` is used to refer to an organisation unit 
id has this structure:

```json
{ 
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "id": "O6uvpzGd5pu",
      "geometry": { ... }
    },
    ...
  ]
}
```

一个使用特征属性来引用组织单位代码的文件
将采用这种结构：

```json
{ 
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": { "code": "OU1_CODE" },
      "geometry": { ... }
    },
    ...
  ]
}
```
The `coordinates` in a `geometry` may be pairs or triplets. 
If a third dimension is present it is stripped during the import.

A `geometry` may also be `null` to effectively clear or delete the geometry 
for specific organisation units. There is a special bulk deletion API that is
described in the next section.

When run synchronously an import report is returned directly.
The HTTP status code is always `OK`, the `status` in the message payload
indicates if all rows were imported successfully.
The import counts statistics contained in the report give further information:

* `imported`: number of organisation units that were successfully updated with a geometry that did not have one before for the updated property
* `updated`: number of organisation units that were successfully updated with a geometry that did have value for the updated property already
* `ignored`: number of organisation units that failed to update
* `deleted`: number of organisation units that where successfully update with a _empty_ geometry

When the import is run asynchronous the request returns immediately with status 
`OK` and job configuration response that contains a relative reference to 
the task endpoint that allows to track the status of the asynchronous import.
For example:

    /api/system/tasks/GEOJSON_IMPORT/{job-id}

同步执行时直接返回的摘要见

    /api/system/taskSummaries/GEOJSON_IMPORT/{job-id}

一旦导入完成。

### GeoJSON 批量数据删除{ #webapi_geojson_bulk_deletion }
要清除或取消设置所有组织单位的`几何`数据，请使用：

    DELETE /api/organisationUnits/geometry

要清除或取消设置所有组织单位的特定 `GEOJSON` 属性的几何体数据，请使用
所有组织单位使用：

    DELETE /api/organisationUnits/geometry?attributeId={attr-id}

Clearing is always synchronous and returns a similar report as the bulk import.
It does not support any other parameters. No `dry-run` can be performed.
Bulk clearing requires the `F_PERFORM_MAINTENANCE` authority.

### GeoJSON 单一数据导入{ #webapi_geojson_single_import }
单次导入可以更新单个组织单元的几何图形。

    POST /api/organisationUnits/{id}/geometry

例如，帖子正文只包含 GeoJSON `geometry` 值：
```json
{
  "type": "Polygon",
  "coordinates": [...]
}
```
单次导入只支持 `attributeId` 和 `dryRun` 参数。

### GeoJSON 单一数据删除{ #webapi_geojson_single_deletion }
要清除单个组织单位的 `geometry` GeoJSON 数据，请使用

    DELETE /api/organisationUnits/{id}/geometry

同样，要清除单个组织的 `GEOJSON` 属性值 
单位使用：

    DELETE /api/organisationUnits/{id}/geometry?attributeId={attr-id}

Clearing is always synchronous returns a similar report as single import.
The `dry-run` parameter is supported as well. 
The performing user requires authority to modify the target organisation unit.



## 架构图 { #webapi_schema } 

可用于内省所有可用 DXF 2 对象的资源
可以在`/api/schemas` 上找到。对于特定资源，您可以拥有
查看`/api/schemas/<type>`。

要获取XML中所有可用的模式：

    GET /api/schemas.xml

要获取JSON中所有可用的模式，请执行以下操作：

    GET /api/schemas.json

要获取特定类的JSON模式：

    GET /api/schemas/dataElement.json


## 图示 { #webapi_icons } 

DHIS2 包含一系列图标，可用于为元数据提供可视化语境。
元数据的上下文。有两种不同的图标：
  - 默认图标：预装在应用程序中，无法修改或删除。
  - 自定义图标：可任意创建、更新和删除。

它们都可以通过图标资源访问。

    GET /api/icons

此端点返回有关可用默认图标和自定义图标的信息列表。
默认情况下，关键字、描述、关键字和 href 将包含在响应中。但可以使用字段参数来改变这种行为。

```json
{
  key: "mosquito_outline",
  description: "Mosquito outline",
  keywords: [
    "malaria",
    "mosquito",
    "dengue"
  ],
  "created": "2024-02-12T09:50:11.794",
  "lastUpdated": "2024-02-12T09:50:11.794",
  href: "<dhis server>/api/icons/mosquito_outline/icon.svg"
}
```

也可以通过关键字过滤直接获取特定图标，在下面的例子中，关键字是 mosquito_outline。

    GET /api/icons/mosquito_outline

### 自定义图标操作{ #webapi_icons_custom }

可通过某些请求参数获取自定义图标列表

    GET /api/icons?type=CUSTOM

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`type`|`Text`| 默认、自定义、全部 |应检索哪种类型的图标。默认为全部|
|`keys`|`Text`| | 应检索自定义图标的键列表 | 
|`keywords`|`Text`| | 应检索自定义图标的关键字列表| 
|`search`|`Text`| | 在图标键和关键字中搜索给定文本，并检索键或关键字中包含该文本的所有图标。| 
|`createdStartDate`|`Date`| | 创建日期的起点|
|`createdEndDate`|`Date`| | 创建日期的终点| 
|`lastUpdatedStartDate`|`Date`| | 最后更新日期的起点| 
|`lastUpdatedEndDate`|`Date`| | 最后更新日期的终点| 


#### 分页请求参数{ #request-parameters-for-pagination } 

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`page`|`Integer`| 任何正整数 |要返回的页码。如果缺少，默认为 1|
|`pageSize`|`Integer`| 任何正整数 |页面大小。默认为 50。 |
|`paging`|`Boolean`| `true`&#124;`false` |表示是否应忽略分页并返回所有行。默认为 `true`，即默认情况下所有请求都分页，除非 `paging=false`.|

#### 用于订购{ #request-parameters-for-ordering } 的请求参数 

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`order`|`Text`| 创建：描述 | 以逗号分隔的属性名称和排序方向对列表，格式为 propName:sortDirection。默认情况下，图标将根据 key:asc 排序|


#### 用于过滤响应的请求参数{ #request-parameter-to-filter-responses } 

The endpoints accept a `fields` parameter which controls which fields will be returned in the
JSON response. `fields` parameter accepts a comma separated list of field names. If nothing is specified, default fields will be used and those are 

`key,keywords,description,fileResourceUid,createdByUserUid,href`

可通过提供图标密钥下载自定义图标资源：

    GET /api/icons/{key}/icon

自定义图标可以创建、修改和删除。
要创建自定义图标，请使用下面的资源。

    POST /api/icons

它需要一个包含图标关键字、描述、关键字列表和文件资源 uid 的有效载荷来链接数据。

```json
{
    "key": "iconKey",
    "description": "description",
    "keywords": ["keyword 1","keyword 2"],
    "fileResourceUid": "ARsqBjfB2cf"
}
```

只能使用以下资源更新自定义图标。 

    PUT /api/icons

通过以下有效载荷，图标的描述和关键字将被更新。

```json
{
    "key": "iconKey",
    "description": "new description",
    "keywords": ["new keyword 1", "new keyword 2"] 
}
```

请注意，也可以只更新其中一个。也就是说，如果我们想更新描述，同时保留关键字，只需提供图标键和描述 json 字段即可。反之亦然，更新关键字的同时保留原始描述。

只能使用以下资源删除自定义图标。

    DELETE /api/icons/{icon_key}


## 渲染类型 { #webapi_render_type } 

某些元数据类型具有名为 *renderType* 的属性。渲染类型
属性是 *device* 和 *renderingType* 之间的映射。应用
可以使用此信息作为有关如何呈现对象的提示
在特定设备上。例如，移动设备可能想要渲染
与台式计算机不同的数据元素。

当前有两种不同的renderingTypes可用：

1.  值类型渲染

2.  程序阶段部分渲染

还提供2种设备类型：

1.  移动

2.  桌面

下表列出了可用的元数据和呈现类型。
值类型呈现具有基于元数据的附加约束
配置，这将显示在第二个表中。

表格元数据和渲染类型概览

| 元数据类型 | 可用的渲染类型 |
|---|---|
| 程序阶段部分 | * 列表（默认）<br> * 序列<br> * 矩阵 |
| 数据元素 | * DEFAULT<br> * DROPDOWN<br> * VERTICAL_RADIOBUTTONS<br> * HORIZONTAL_RADIOBUTTONS<br> * VERTICAL_CHECKBOXES<br> * HORIZONTAL_CHECKBOXES<br> * SHARED_HEADER_RADIOBUTTONS<br> * ICONS_AS_BUTTONS<br> * SPINNER<br> * ICON<br> * TOGGLE<br> * VALUE<br> * SLIDER<br> * LINEAR_SCALE<br> * AUTOCOMPLETE<br> * QR_CODE<br> * BAR_CODE<br> * GS1_DATAMATRIX |

由于处理数据元素和跟踪实体的默认呈现
属性取决于对象的值类型，还有
一个 DEFAULT 类型告诉客户端它应该被正常处理。
程序阶段部分默认为“列表”。

表：根据值类型允许的渲染类型

| 值类型               | 对象是一个选项集吗？ | 允许的渲染类型 |
|--------------------------|---|---|
| TRUE_ONLY                | 不 | DEFAULT, VERTICAL_RADIOBUTTONS, HORIZONTAL_RADIOBUTTONS, VERTICAL_CHECKBOXES, HORIZONTAL_CHECKBOXES, TOGGLE |
| BOOLEAN                  | 不 ||
| --                        | 是的 | DEFAULT, DROPDOWN, VERTICAL_RADIOBUTTONS, HORIZONTAL_RADIOBUTTONS, VERTICAL_CHECKBOXES, HORIZONTAL_CHECKBOXES, SHARED_HEADER_RADIOBUTTONS, ICONS_AS_BUTTONS, SPINNER, ICON |
| 整数                  | 不 | DEFAULT, VALUE, SLIDER, LINEAR_SCALE, SPINNER |
| 文本                     | 不 | DEFAULT, VALUE, AUTOCOMPLETE, QR_CODE, BAR_CODE, GS1_DATAMATRIX |
| INTEGER_POSITIVE         | 不 ||
| INTEGER_NEGATIVE         | 不 ||
| INTEGER_ZERO_OR_POSITIVE | 不 ||
| 数字                   | 不 ||
| UNIT_INTERVAL            | 不 ||
| 百分比               | 不 ||

上表的完整参考也可以使用
以下端点：

    GET /api/staticConfiguration/renderingOptions

值类型渲染也有一些额外的属性，可以
设置，通常在渲染某些特定类型时需要：

表：renderType 对象属性

| 物业 | 描述 | 类型 |
|---|---|---|
| 类型 | 对象的渲染类型（RenderingType），如第一个表格所示。该属性对于值类型和程序阶段部分都是相同的，但对于程序阶段部分是唯一可用的属性。 | 枚举（参见元数据和渲染类型表中的列表） |
| 分钟 | 仅用于值类型渲染。表示该字段可以具有的最小值。 | 整数 |
| 最大 | 仅用于值类型渲染。表示此字段可具有的最大值。 | 整数 |
| 步骤 | 仅用于值类型渲染。代表数值应增加的步长，例如 SLIDER 或 LINEAR_SCALE 的步长 | 整数 |
| 小数点 | 仅用于数值类型渲染。表示数值应使用的小数点个数。 | 整数 |

*renderingType* 可以在创建或更新第一个表中列出的元数据时设置。程序阶段部分的渲染类型的示例负载如下所示：

```json
{
  "renderingType": {
    "type": "MATRIX"
  }
}
```

对于数据元素和跟踪的实体属性：

```json
{
  "renderingType": {
    "type": "SLIDER",
    "min": 0,
    "max": 1000,
    "step": 50,
    "decimalPoints": 0
  }
}
```

## 对象样式 { #webapi_object_style } 

大多数元数据都有一个属性名称“样式”。可以使用此属性
由客户以某种方式表示对象。属性
目前支持的样式如下：

表格样式属性

| 物业 | 描述 | 类型 |
|---|---|---|
| 颜色 | 一种颜色，用十六进制表示。 | 字符串 (#000000) |
| 图标 | 图标，由图标名称表示。 | 串 |

目前，没有官方列表或对图标库的支持，所以
这目前由客户提供。下面的列表显示
所有支持样式的对象：

  - 数据元素

  - 数据元素类别选项

  - 资料集

  - 指示符

  - 选项

  - 程序

  - 计划指标

  - 计划科

  - 程序阶段

  - 程序阶段部分

  - 关系（跟踪器）

  - 跟踪实体属性

  - 追踪实体类型

在创建或更新任何这些对象时，您可以包括
以下有效负载更改样式：

```json
{
  "style": {
    "color": "#ffffff",
    "icon": "my-beautiful-icon"
  }
}
```
## 类别选项{ #category-option } 

### 合并类别选项{ #category_option_merge }

通过类别选项合并端点，可以将多个类别选项（源）合并为一个目标类别选项。

#### 授权{ #authorisation } 

执行类别选项合并所需的主要权限是 `F_CATEGORY_OPTION_MERGE`。  
其他所需的权限涉及类别选项的一般共享和访问，即 `F_CATEGORY_OPTION_PUBLIC_ADD` 和 `F_CATEGORY_OPTION_DELETE`。

#### 请求{ #request } 

通过 POST 请求合并类别选项：

```
POST /api/categoryOptions/merge
```

JSON 格式的有效载荷如下所示：

```json
{
  "sources": [
    "FbLZS3ueWbQ",
    "dPSWsKeAZNw"
  ],
  "target": "rEq3Hkd3XXH",
  "deleteSources": true
}
```

下表描述了 JSON 属性。

表格合并有效载荷字段

| 领域             | 需要 | 值                                                                                                                                                                                   |
|-------------------|----------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| 资源           | 是的      | 要合并的类别选项（源类别选项）的标识符数组                                                                                                     |
| 目标            | 是的      | 将来源合并到类别选项（目标类别选项）中的标识符                                                                                                |
| 删除资源     | 不       | 是否在操作后删除源类别选项。默认为假。                                                                                                    |

合并操作将把源类别选项合并到目标类别选项中。可以指定一个或多个源类别选项。只能指定一个目标。

合并操作会将所有源类别选项元数据关联转移到目标类别选项。
以下元数据将被更新：


| 元数据            | 物业        | 采取的行动               |
|---------------------|-----------------|----------------------------|
| 类别            | 类别选项 | 删除来源，添加目标 |
| 类别维度   | 项目           | 删除来源，添加目标 |
| 类别选项组合 | 类别选项 | 删除来源，添加目标 |
| 类别选项组 | 成员         | 删除来源，添加目标 |
| 组织单位    | 类别选项 | 删除来源，添加目标 |


#### 验证{ #validation } 

适用以下限制条件和错误代码。

表：限制条件和错误代码

| 错误代码 | 描述                                               |
|------------|-----------------------------------------------------------|
| E1650      | 必须指定至少一个来源类别选项     |
| E1651      | 必须指定目标类别选项                  |
| E1652      | 目标类别选项不能是来源类别选项 |
| E1653      | 源/目标类别选项不存在： `{uid}`     |


#### 回复{ #response } 
##### 成功{ #success } 
成功响应示例如下

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "response": {
        "mergeReport": {
            "mergeErrors": [],
            "mergeType": "CATEGORY_OPTION",
            "sourcesDeleted": [
                "FbLZS3ueWbQ", "dPSWsKeAZNw"
            ],
            "message": "CATEGORY_OPTION merge complete"
        }
    }
}
```

##### 失败{ #failure } 
错误响应示例如下

```json
{
    "httpStatus": "Conflict",
    "httpStatusCode": 409,
    "status": "WARNING",
    "message": "One or more errors occurred, please see full details in merge report.",
    "response": {
        "mergeReport": {
            "mergeErrors": [
                {
                    "message": "At least one source category options must be specified",
                    "errorCode": "E1650",
                    "args": []
                },
                {
                    "message": "Target category option does not exist: `abcdefg1221`",
                    "errorCode": "E1653",
                    "args": [
                        "Target",
                        "abcdefg1221"
                    ]
                }
            ],
            "mergeType": "CATEGORY_OPTION",
            "sourcesDeleted": [],
            "message": "CATEGORY_OPTION merge has errors"
        }
    }
}
```


## 数据元素 { #data-elements } 

### 合并数据元素{ #data_element_merge }

> **注意事项**
>
> 合并 DataElements 时应格外小心。特别注意
> 应特别注意合并涉及数据元素引用的数据值。
> 合并。在执行合并之前，应充分了解合并的潜在副作用。
> 合并。数据元素的合并具有深远的影响。以下信息
> 数据元素合并的内容。数据元素合并
> 涉及系统的所有主要部分（元数据、数据、跟踪器、分析和审计）。
> 
> 如果源 DataElements 与大量数据/审计记录链接，系统性能可能会受到影响。

数据元素合并端点允许您将多个数据元素（源）合并为一个目标数据元素。

#### 授权{ #authorisation } 

执行数据元素合并所需的主要权限是 `F_DATA_ELEMENT_MERGE`。  
所需的其他权限涉及数据元素的一般共享和访问，即 `F_DATAELEMENT_PUBLIC_ADD` 和 `F_DATAELEMENT_DELETE`。

#### 请求{ #request } 

通过 POST 请求合并数据元素：

```
POST /api/dataElements/merge
```

JSON 格式的有效载荷如下所示：

```json
{
  "sources": [
    "jNb63DIHuwU",
    "WAjjFMDJKcx"
  ],
  "target": "V9rfpjwHbYg",
  "deleteSources": true,
  "dataMergeStrategy": "DISCARD"
}
```

下表描述了 JSON 属性。

表格合并有效载荷字段

| 领域             | 需要 | 值                                                                                                                                                                                   |
|-------------------|----------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| 资源           | 是的      | 要合并的数据元素（源数据元素）的标识符数组                                                                                                           |
| 目标            | 是的      | 将数据源合并为数据元素（目标数据元素）的标识符                                                                                                      |
| 删除资源     | 不       | 是否在操作后删除源数据元素。默认为假。如果选择 "true"，则所有源审计记录也将被删除。                                |
| 数据合并策略 | 是的      | 如何处理数据值的合并。选项有 "DISCARD "或 "LAST_UPDATED"。DISCARD 将删除所有源数据值。LAST_UPDATED 将使用最后更新的数据值。 |

合并操作将把源数据元素合并到目标数据元素中。可以指定一个或多个源数据元素。只能指定一个目标。

合并操作会将所有源数据元素元数据关联转移到目标数据元素。
以下元数据将被更新：


| 元数据                          | 物业                  | 采取的行动               |
|-----------------------------------|---------------------------|----------------------------|
| 数据维度项目                 | 数据元素               | 设定为目标              |
| 事件可视化                | dataElementValueDimension | 设定为目标              |
| 程序阶段数据元素           | 数据元素               | 设定为目标              |
| 程序通知模板       | 收件人数据元素      | 设定为目标              |
| 程序规则变量               | 数据元素               | 设定为目标              |
| 程序规则行动                 | 数据元素               | 设定为目标              |
| 跟踪实体数据元素维度 | 数据元素               | 设定为目标              |
| 最小最大数据元素                 | 数据元素               | 设定为目标              |
| SMSCode                           | 数据元素               | 设定为目标              |
| SMSCode                           | 数据元素               | 设定为目标              |
| 预测变量                         | 产量                    | 设定为目标              |
| 数据集元素                    | 数据元素               | 设定为目标              |
| 数据元素操作数                | 数据元素               | 设定为目标              |
| 程序阶段数据元素           | dataElements              | 删除来源，添加目标 |
| 部门                           | dataElements              | 删除来源，添加目标 |
| 数据元素组                  | 成员                   | 删除来源，添加目标 |
| 事件                             | 事件数据值           | 删除来源，添加目标 |
| 指示符                         | 分子                 | 以目标取代源 |
| 指示符                         | 分母               | 以目标取代源 |
| 预测变量                         | 发生器                 | 以目标取代源 |
| 预测变量                         | 示例跳转测试            | 以目标取代源 |
| 数据条目表格                     | htmlCode                  | 以目标取代源 |
| 计划指示器                  | 表情                | 以目标取代源 |
| 计划指示器                  | 过滤                    | 以目标取代源 |
| 数据值                         | 数据元素               |                            |


| 数据                            | 物业        | 采取的行动                                                                                                                                                                                             |
|---------------------------------|-----------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| 事件                           | 事件数据值 | 根据合并策略（DISCARD / LAST_UPDATED）进行操作。DISCARD 将删除所有源事件数据值。LAST_UPDATED 将使用最后更新的事件数据值（如果存在多个值）。 |
| 数据值                       | 数据元素     | 根据合并策略（DISCARD / LAST_UPDATED）进行操作。DISCARD 将删除所有源数据值。LAST_UPDATED 将使用最后更新的数据值（如果存在多个数据值）。             |
| TrackedEntityDataValueChangeLog |                 | 如果要删除信息源，则删除，否则不做任何操作。                                                                                                                                               |
| 数据值审计                  |                 | 如果要删除信息源，则删除，否则不做任何操作。                                                                                                                                               |


#### 验证{ #validation } 

适用以下限制条件和错误代码。

表：限制条件和错误代码

| 错误代码 | 描述                                                                                                                                 |
|------------|---------------------------------------------------------------------------------------------------------------------------------------------|
| E1550      | 必须指定至少一个源数据元素                                                                                          |
| E1551      | 必须指定目标数据元素                                                                                                       |
| E1552      | 目标数据元素不能是源指标                                                                                            |
| E1553      | 源/目标数据元素不存在： `{uid}`                                                                                          |
| E1554      | All source ValueTypes must match target ValueType: `ValueType`. Other ValueTypes found: `ValueType`                                         |
| E1555      | 所有源 DataElementDomain 必须与目标 DataElementDomain 匹配：`DataElementDomain`。找到的其他 DataElementDomain：`DataElementDomain`。 |
| E1556      | 必须指定 dataMergeStrategy 字段。值为 `DISCARD` 或 `LAST_UPDATED` 时                                                           |

#### 数据库约束{ #database-constraints } 
有一些独特的约束条件可能会妨碍成功合并。这些限制由 DHIS2 设置，以维护一个逻辑域模型。    
以下是撰写本文时已知的数据库唯一键约束列表。例如
只能有 1 个具有相同数据集和数据元素的数据集元素。

表：数据库表唯一键约束

| 表格                   | 唯一键约束                     |
|-------------------------|-------------------------------------------|
| 最小数据元素       | orgunit, dataelement, categoryoptioncombo |
| 计划阶段 | 程序阶段、数据元素                 |
| 数据元素          | 数据集、数据元素                      |


#### 回复{ #response } 
##### 成功{ #success } 
成功响应示例如下

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "response": {
        "mergeReport": {
            "mergeErrors": [],
            "mergeType": "DATA_ELEMENT",
            "sourcesDeleted": [
                "vQ0dGV9EDrw"
            ],
            "message": "DATA_ELEMENT merge complete"
        }
    }
}
```

##### 失败{ #failure } 
错误响应示例如下

```json
{
    "httpStatus": "Conflict",
    "httpStatusCode": 409,
    "status": "WARNING",
    "message": "One or more errors occurred, please see full details in merge report.",
    "response": {
        "mergeReport": {
            "mergeErrors": [
                {
                    "message": "At least one source data element must be specified",
                    "errorCode": "E1550",
                    "args": []
                },
                {
                    "message": "Target data element does not exist: `abcdefg1221`",
                    "errorCode": "E1553",
                    "args": [
                        "Target",
                        "abcdefg1221"
                    ]
                }
            ],
            "mergeType": "DATA_ELEMENT",
            "sourcesDeleted": [],
            "message": "DATA_ELEMENT merge has errors"
        }
    }
}
```

另一个验证错误响应示例：

```json
{
    "httpStatus": "Conflict",
    "httpStatusCode": 409,
    "status": "WARNING",
    "message": "One or more errors occurred, please see full details in merge report.",
    "response": {
        "mergeReport": {
            "mergeErrors": [
                {
                    "message": "All source ValueTypes must match target ValueType: `TEXT`. Other ValueTypes found: `NUMBER`",
                    "errorCode": "E1554",
                    "args": []
                }
            ],
            "mergeType": "DATA_ELEMENT",
            "sourcesDeleted": [],
            "message": "DATA_ELEMENT merge has errors"
        }
    }
}
```

数据库约束样本错误响应：

```json
{
  "httpStatus": "Conflict",
  "httpStatusCode": 409,
  "status": "ERROR",
  "message": "ERROR: duplicate key value violates unique constraint \"minmaxdataelement_unique_key\"\n  Detail: Key (sourceid, dataelementid, categoryoptioncomboid)=(193236, 1148617, 167661) already exists."
}
```

## 指标 { #webapi_indicators } 

本节介绍指标和指标表达式。

### 综合指标 { #webapi_aggregate_indicators } 

要检索指标，您可以向指标发出 GET 请求
像这样的资源：

    / api /指标

指标表示可以计算和呈现的表达式
因此。指标表达式分为分子和
分母。分子和分母是数学的
可以包含对数据元素、其他指标、常量和
组织单位组。变量将替换为数据
使用时的值，例如在报告中。允许的变量
表达式在下表中描述。

表：指标变量

| 变量 | 目的 | 描述 |
|---|---|---|
| #{<data-element-id\>.<category-option-combo-id\>.<attribute-option-combo-id\>} | 数据元素操作数 | 指集合数据元素和类别选项组合的组合。类别和属性选项组合 id 都是可选的，可以使用通配符"\*"来表示任何值。 |
| #{<dataelement-id\>.<category-option-group-id\>.<attribute-option-combo-id\>} | 类别 选项组 | 指一个综合数据元素和一个类别选项组，包含多个类别选项组合。 |
| #{<data-element-id\>} | 汇总数据元素 | 指所有类别选项组合中的聚合数据元素的总值。 |
| D{<program-id\>.<data-element-id\>} | 程序数据元素 | 引用程序中跟踪器数据元素的值。 |
| A{<program-id\>.<attribute-id\>} | 程序跟踪的实体属性 | 指程序中被跟踪实体属性的值。 |
| I{<program-indicator-id\>} | 计划指标 | 指程序指示器的值。 |
| R{<dataset-id\>.<metric\>} | 报告率 | 指报告率指标。指标可以是REPORTING_RATE，REPORTING_RATE_ON_TIME，ACTUAL_REPORTS，ACTUAL_REPORTS_ON_TIME，EXPECTED_REPORTS。 |
| C{<constant-id\>} | 不变 | 指恒定值。 |
| N{<indicator-id\>} | 指示符 | 指现有指标。 |
| OUG{<orgunitgroup-id\>} | 组织单位组 | 指组织单位组内组织单位的数量。 |

在数据元素操作数或聚合数据元素内，可进行以下替换：

| 项目 | 值 | 描述 |
|---|---|---|
| data-element-id | data-element-id | 汇总数据元素 |
| data-element-id | deGroup:data-element-group-id | 数据元素组中的所有汇总数据元素 |
| 类别-选项-组合-id | 类别-选项-组合-id | 类别选项组合 |
| 类别-选项-组合-id | co:category-option-id | 类别选项中的所有类别选项组合 |
| 类别-选项-组合-id | coGroup:category-option-group-id | 类别选项组中的所有类别选项组合 |
| 类别-选项-组合-id | coGroup:co-group-id1&co-group-id2... | 属于多个类别选项组的所有类别选项组合 |

语法看起来像
    这：

＃

相应的示例如下所示：

＃

请注意，对于数据元素变量，类别选项组合
标识符可以省略。该变量将代表总数
对于数据元素，例如在所有类别选项组合中。例子：

＃

数据元素操作数可以包括任何类别选项组合和
属性选项组合，并使用通配符表示任何
    价值：

＃

使用数据元素组的示例

    #{deGroup:oDkJh5Ddh7d}+ #{deGroup:GBHN1a1Jddh.j8vBiBqGf6O}

使用类别选项、数据元素组和类别选项组的示例：

    #{P3jJH5Tu5VC.co:FbLZS3ueWbQ}+ #{deGroup:GBHN1a1Jddh.coGroup:OK2Nr4wdfrZ.j8vBiBqGf6O}

使用多个类别选项组的示例：

    #{P3jJH5Tu5VC.coGroup:OK2Nr4wdfrZ&j3C417uW6J7&ddAo6zmIHOk}

使用程序数据元素和程序属性的示例：

    （D {eBAyeGv0exc.vV9UWAZohSf} * A {IpHINAT79UW.cejWyOfXge6}）/ D {eBAyeGv0exc.GieVkTxp4HH}

结合计划指标和综合指标的示例：

    I {EMOt6Fwhs1n} * 1000 /＃{WUg3MYWQ7pt}

以报告率为例：

    R {BfMAe6Itzgt.REPORTING_RATE} *＃{P3jJH5Tu5VC.S34ULMcHMca}

另一个使用实际数据集报告和预期报告的报告率示例：

    R {BfMAe6Itzgt.ACTUAL_REPORTS} / R {BfMAe6Itzgt.EXPECTED_REPORTS}

使用现有指标的示例

    N {Rigf2d2Zbjp} *＃{P3jJH5Tu5VC.S34ULMcHMca}

表达式可以是任何类型的有效数学表达式，作为
例子：

    （2 *＃{P3jJH5Tu5VC.S34ULMcHMca}）/（＃{FQ2o8UBlcrS.S34ULMcHMca}-200）* 25

### 计划指标 { #webapi_program_indicators } 

要检索程序指标，您可以向程序发出 GET 请求
像这样的指标资源：

    / api / programIndicators

程序指示器可以包含在程序中收集的信息。
指标有一个表达式，可以包含对数据的引用
元素、属性、常量和程序变量。变量
下表中描述了允许在表达式中使用。



表：计划指标变量

| 变量 | 描述 |
|---|---|
| #{<programstage-id\>.<dataelement-id\>} | 指计划阶段和数据元素 ID 的组合。 |
| A{<attribute-id\>} | 指跟踪的实体属性。 |
| V{<variable-id\>} | 指程序变量。 |
| C{<constant-id\>} | 指一个常数。 |

语法看起来像
    这：

＃

一个相应的例子看起来像
    这：

＃

### 表达方式 { #webapi_expressions } 

表达式是数学公式，可以包含对
数据元素、常量和组织单元组。验证和
获取表达式的文本描述，您可以发出 GET 请求
到表达式资源：

    / api / expressions / description？expression = <expression-string>

响应遵循标准的 JSON Web 消息格式。 *状态*
属性表示验证的结果，如果
成功和“错误”如果失败。 *message* 属性将为“有效”
如果成功并提供原因的文字描述
如果不是，则验证失败。 *描述*提供了文字说明
表达式的描述。

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Valid",
  "description": "Acute Flaccid Paralysis"
}
```

### 合并指标{ #webapi_indicator_merge }

通过指标合并端点，可以将多个指标（源）合并为一个目标指标。

#### 授权{ #authorisation } 

执行指标合并需要使用权限 `F_INDICATOR_MERGE`。

#### 请求{ #request } 

通过 POST 请求合并指标：

```
POST /api/indicators/merge
```

JSON 格式的有效载荷如下所示：

```json
{
  "sources": [
    "jNb63DIHuwU",
    "WAjjFMDJKcx"
  ],
  "target": "V9rfpjwHbYg",
  "deleteSources": true
}
```

下表描述了 JSON 属性。

表格合并有效载荷字段

| 领域         | 需要 | 值                                                                         |
|---------------|----------|-------------------------------------------------------------------------------|
| 资源       | 是的      | 要合并的指标（源指标）的标识符数组       |
| 目标        | 是的      | 将来源合并为指标（目标指标）的标识符  |
| 删除资源 | 不       | 是否在操作后删除源指示符。默认为假 |

合并操作将把源指标合并到目标指标中。可指定一个或多个源指标。只能指定一个目标。

合并操作将把所有源指标元数据关联转移到目标指标。 
以下元数据将被更新：


| 元数据            | 物业                                   | 采取的行动                                                                |
|---------------------|--------------------------------------------|-----------------------------------------------------------------------------|
| 指标组      | 成员                                    | 删除源指标，增加目标指标                            |
| 数据集             | 指标                                 | 删除源指标，增加目标指标                            |
| 数据维项目 | 不适用                                        | 任何有来源的链接数据项都将与目标数据项链接           |
| 部门             | 指标                                 | 删除源指标，增加目标指标                            |
| 组态       | 基础设施指标（指标组） | 删除源指标，增加目标指标                            |
| 指示符           | 分子/分母                    | 用目标引用替换任何源引用                      |
| 数据条目表格       | htmlCode                                   | 用目标引用替换任何源引用                      |
| 可视化       | 分选                                    | 将任何源引用替换为目标引用作为排序维度 |


#### 验证{ #validation } 

适用以下限制条件和错误代码。

表：限制条件和错误代码

| 错误代码 | 描述                                     |
|------------|-------------------------------------------------|
| E1540      | 必须指定至少一个源指标 |
| E1541      | 必须指定目标指标              |
| E1542      | 目标指标不能是源指标   |
| E1543      | 源/目标指标不存在： `{uid}` |

#### 回复{ #response } 
##### 成功{ #success } 
成功响应示例如下

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "response": {
        "mergeReport": {
            "mergeErrors": [],
            "mergeType": "INDICATOR",
            "sourcesDeleted": [
                "vQ0dGV9EDrw"
            ],
            "message": "INDICATOR merge complete"
        }
    }
}
```

错误响应示例如下

```json
{
    "httpStatus": "Conflict",
    "httpStatusCode": 409,
    "status": "WARNING",
    "message": "One or more errors occurred, please see full details in merge report.",
    "response": {
        "mergeReport": {
            "mergeErrors": [
                {
                    "message": "At least one source indicator must be specified",
                    "errorCode": "E1540",
                    "args": []
                },
                {
                    "message": "Target indicator does not exist: `abcdefg1221`",
                    "errorCode": "E1543",
                    "args": [
                        "Target",
                        "abcdefg1221"
                    ]
                }
            ],
            "mergeType": "INDICATOR",
            "sourcesDeleted": [],
            "message": "INDICATOR merge has errors"
        }
    }
}
```

## 指标类型 { #webapi_indicator_types}

### 合并指标类型 { #webapi_indicator_type_merge}

通过指标类型合并端点，可以将多个指标类型合并为一个目标指标类型。

#### 授权{ #authorisation } 

执行指示符类型合并需要使用权限 `F_INDICATOR_TYPE_MERGE`。

#### 请求{ #request } 

通过 POST 请求合并指标类型：

```
POST /api/indicatorType/merge
```

JSON 格式的有效载荷如下所示：

```json
{
  "sources": [
    "jNb63DIHuwU",
    "WAjjFMDJKcx"
  ],
  "target": "V9rfpjwHbYg",
  "deleteSources": true
}
```

下表描述了 JSON 属性。

表格合并有效载荷字段

| 领域         | 需要 | 值                                                                                   |
|---------------|----------|-----------------------------------------------------------------------------------------|
| 资源       | 是的      | 要合并的指标类型（源指标类型）的标识符数组。      |
| 目标        | 是的      | 将来源合并为指标类型（目标指标类型）的标识符。 |
| 删除资源 | 不       | 是否在操作后删除源指标类型。默认为假。     |

合并操作将把源指标类型合并到目标指标类型中。可以指定一个或多个源指标类型。只能指定一个目标。

合并操作将把源指标类型的所有指标元数据关联转移到目标指标类型。

#### 验证{ #validation } 

适用以下限制条件和错误代码。

表：限制条件和错误代码

| 错误代码 | 描述                                             |
|------------|---------------------------------------------------------|
| E1530      | 必须指定至少一种源指标类型    |
| E1531      | 必须指定目标指标类型                 |
| E1532      | 目标指标类型不能是源指标类型 |
| E1533      | 源/目标指标类型不存在： `{uid}`    |

#### 回复{ #response } 
##### 成功{ #success } 
成功响应示例如下

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "response": {
        "mergeReport": {
            "mergeErrors": [],
            "mergeType": "INDICATOR_TYPE",
            "sourcesDeleted": [
                "vQ0dGV9EDrw"
            ],
            "message": "INDICATOR_TYPE merge complete"
        }
    }
}
```

错误响应示例如下

```json
{
    "httpStatus": "Conflict",
    "httpStatusCode": 409,
    "status": "WARNING",
    "message": "One or more errors occurred, please see full details in merge report.",
    "response": {
        "mergeReport": {
            "mergeErrors": [
                {
                    "message": "At least one source indicator type must be specified",
                    "errorCode": "E1530",
                    "args": []
                },
                {
                    "message": "Target indicator type does not exist: `abcdefg1221`",
                    "errorCode": "E1533",
                    "args": [
                        "Target",
                        "abcdefg1221"
                    ]
                }
            ],
            "mergeType": "INDICATOR_TYPE",
            "sourcesDeleted": [],
            "message": "INDICATOR_TYPE merge has errors"
        }
    }
}
```

## 组织单位 { #webapi_organisation_units } 

*organisationUnits* 资源遵循标准约定，如
DHIS2 中的其他元数据资源。该资源支持一些
附加查询参数。

### 获取组织单位列表 { #webapi_list_of_organisation_units } 

要获取组织单位的列表，可以使用以下资源。

    / api / 33 / organisationUnits

表：组织单位查询参数

| 查询参数 | 选项 | 描述 |
|---|---|---|
| 仅限用户 | 假 | 真 | 数据采集组织单位只与当前用户相关。 |
| 仅 userDataView | 假 | 真 | 数据视图组织单位只与当前用户相关。 |
| userDataViewFallback | 假 | 真 | 仅与当前用户相关联的数据视图组织单位，可退回到数据采集组织单位。 |
| 询问 | 字符串 | 查询名称、代码和 ID 属性。 |
| 夷为平地 | 整数 | 层次结构中指定级别的组织单位。 |
| maxLevel | 整数 | 在给定的最大级别或更高级别上的组织单位。 |
| 用户层级内 | 假 | 真 | 将搜索和检索限制在用户数据采集范围内的组织单位。 |
| withinUserSearchHierarchy | 假 | 真 | 将搜索和检索限制在当前用户搜索范围内的组织单位。注意："in withinUserHierarchy"（如果为 true）优先级更高。 |
| 会员收藏 | 字符串 | 对于显示集合中成员的计数，指的是与组织单位相关联的集合名称。 |
| 成员对象 | 用户标识 | 用于显示集合中成员的计数，指集合对象成员的标识符。 |

### 获取带有子层次结构的组织单位{ #webapi_organisation_units_with_sub_hierarchy } 

要获得一个组织单位，包括其子层次结构中的组织单位，可以使用以下资源。

    / api / 33 / organisationUnits / {id}

表：组织单位参数

| 查询参数 | 选项 | 描述 |
|---|---|---|
| 包括儿童 | 假 | 真 | 包括指定组织单位的直接子单位，即子层次结构中的直接下一级单位。 |
| 包含后代 | 假 | 真 | 包括指定组织单位的所有子单位，即子层次结构中的所有单位。 |
| 包括祖先 | 假 | 真 | 包括指定组织单位的所有家长。 |
| 夷为平地 | 整数 | 包括子层次结构中指定级别的指定组织单位的子机构。这是相对于组织单位而言的，从 1 开始为紧接组织单位之下的层级。 |

### 按类别获取组织单位选项 { #webapi_organisation_units_by_category_options }

专门用于检索类别选项与组织单位之间关联的端点。该端点是检索程序组织单位关联的首选方式。

    /api/33/categoryOptions/orgUnits?categoryOptions={categoryOptionIdA} 、{categoryOptionIdB}

答复的格式如下

```json
{
  "<categoryOptionIdA>": [
    "<orgUnitUid>",
    "<orgUnitUid>"
  ],
  "<categoryOptionIdB>": [
    "<orgUnitUid>",
    "<orgUnitUid>"
  ],
  "<categoryOptionIdC>": []
}
```

所有组织单位都能访问的类别选项会以组织单位的空数组（`[]`）返回。

### 按程序获取组织单位{ #webapi_organisation_units_by_programs } 

专用端点，用于检索程序与组织单位之间的关联。该端点是检索程序与组织单位关联的首选方式。

    /api/33/programs/orgUnits?programs={programIdA} 、{programIdB}

答复的格式如下

```json
{
  "<programIdA>": [
    "<orgUnitUid>",
    "<orgUnitUid>"
  ],
  "<programIdB>": [
    "<orgUnitUid>",
    "<orgUnitUid>"
  ],
  "<programIdC>": []
}
```

所有组织单位都能访问的程序将以组织单位的空数组（`[]`）返回。

### 分体式组织单位{ #webapi_organisation_unit_split }

通过组织单位分割端点，可以将组织单位分割为多个目标组织单位。 

#### 请求{ #request } 

通过 POST 请求拆分组织单位：

```
POST /api/organisationUnits/split
```

JSON 格式的有效载荷如下所示：

```json
{
  "source": "rspjJHg4WY1",
  "targets": [
    "HT0w9YLMLyn",
    "rEpnzuNpRKM"
  ],
  "primaryTarget": "HT0w9YLMLyn",
  "deleteSource": true
}
```

下表描述了 JSON 属性。

表格分割有效载荷字段

| 领域         | 需要 | 值 |
| ------------- | -------- |------ |
| 消息来源        | 是的      | 要拆分的组织单位（源组织单位）的标识符。 |
| 目标       | 是的      | 要将源代码分割成的组织单位（目标组织单位）的标识符数组。 |
| 主要目标 | 不       | 要将与源相关的汇总数据、事件和跟踪实体转移到的组织单位的标识符。如果未指定，将使用第一个目标。 |
| 删除源  | 不       | 操作后是否删除源组织单位。默认为`真`。 |

拆分操作将把源组织单位拆分为目标组织单位。建议在执行拆分之前先创建新的目标组织单位，并至少确保目标组织单位不存在汇总数据。可以指定任意数量的目标组织单位。

拆分操作将把源组织单位的所有元数据关联转移到目标组织单位。这包括数据集、程序、组织单位组、类别选项、用户、可视化、地图和事件报告。

该操作将把源组织单位的所有数据记录转移到指定为主要目标的组织单位，如果没有指定，则转移到第一个指定的目标组织单位。这包括汇总数据值、数据批准记录、事件、跟踪实体等。

#### 验证{ #validation } 

适用以下限制条件和错误代码。

表：限制条件和错误代码

| 错误代码 | 描述                                     |
| ---------- | ----------------------------------------------- |
| E1510      | 必须指定来源网络单位               |
| E1511      | 必须指定至少两个目标组织单位 |
| E1512      | 源组织单位不能是目标组织单位     |
| E1513      | 必须指定主要目标                |
| E1514      | 主要目标必须是目标组织单位        |
| E1515      | 目标组织单位不存在                  |

### 合并组织单位 { #webapi_organisation_unit_merge}

通过组织单位合并端点，可以将多个组织单位合并为一个目标组织单位。

#### 请求{ #request } 

通过 POST 请求合并组织单位：

```
POST /api/organisationUnits/merge
```

JSON 格式的有效载荷如下所示：

```json
{
  "sources": [
    "jNb63DIHuwU",
    "WAjjFMDJKcx"
  ],
  "target": "V9rfpjwHbYg",
  "dataValueMergeStrategy": "LAST_UPDATED",
  "dataApprovalMergeStrategy": "LAST_UPDATED",
  "deleteSources": true
}
```

下表描述了 JSON 属性。

表格合并有效载荷字段

| 领域                     | 需要 | 值 |
| ------------------------- | -------- | ----- |
| 资源                   | 是的      | 要合并的组织单位（源组织单位）的标识符数组。 |
| 目标                    | 是的      | 要将数据源合并到的组织单位（目标组织单位）的标识符。 |
| 数据值合并策略    | 不       | Strategy for merging data values. Options: `LAST_UPDATED` (default), `DISCARD`. |
| 数据审批合并策略 | 不       | Strategy for merging data approval records. Options: `LAST_UPDATED` (default), `DISCARD`. |
| 删除资源             | 不       | 是否在操作后删除源组织单位。默认为 "true"。 |

合并操作将把源组织单位合并到目标组织单位中。建议在执行合并之前，先创建一个新的目标组织单位，并至少确保目标组织单位不存在汇总数据。可以指定任意数量的源组织单位。

合并操作将把源组织单位的所有元数据关联转移到目标组织单位。这包括数据集、程序、组织单位组、类别选项、用户、可视化、地图和事件报告。该操作还将把所有事件和跟踪器数据（如事件、注册、所有权历史、程序所有权和跟踪实体）转移到目标组织单位。

指定的数据值合并策略定义了如何处理数据值。对于`LAST_UPDATED`策略，所有源组织单位的数据值都将转移到目标组织单位，并且在相同参数存在数据值的情况下，将使用最后更新或创建的数据值。这样做是为了避免数据重复。对于`DISCARD`策略，数据值不会转移到目标组织单位，而是简单地删除。指定的数据审批合并策略定义了数据审批记录的处理方式，并遵循与数据值相同的逻辑。

#### 验证{ #validation } 

适用以下限制条件和错误代码。

表：限制条件和错误代码

| 错误代码 | 描述                                     |
| ---------- | ----------------------------------------------- |
| E1500      | 必须指定至少两个来源组织单位 |
| E1501      | 必须指定目标组织单位               |
| E1502      | 目标组织单位不能是源组织单位     |
| E1503      | 源机构单位不存在                  |

## 数据集 { #webapi_data_sets } 

*dataSets* 资源遵循标准约定作为其他
DHIS2 中的元数据资源。此资源支持一些额外的
查询参数。

    / api / 33 / dataSets

要检索数据集的版本，您可以发出GET请求：

    GET /api/33/dataSets/<uid>/version

要提高（增加一个）数据集的版本，您可以发出 POST
要求：

    POST / api / 33 / dataSets / <uid> / version

### 数据集通知模板{ #webapi_dataset_notifications } 

*数据集通知模板*资源遵循标准
DHIS2 中其他元数据资源的约定。

    GET /api/33/dataSetNotficationTemplate

要检索数据集通知模板，您可以发出GET请求：

    GET /api/33/dataSetNotficationTemplates/<uid>

要添加数据集通知模板，您可以发出POST请求：

    POST / api / 33 / dataSetNotficationTemplates

要删除数据集通知模板，您可以发出DELETE请求：

    删除/ api / 33 / dataSetNotficationTemplates / <uid>

JSON有效负载示例如下：

```json
{
  "name": "dataSetNotificationTemplate1",
  "dataSetNotificationTrigger": "DATA_SET_COMPLETION",
  "relativeScheduledDays": 0,
  "notificationRecipient": "ORGANISATION_UNIT_CONTACT",
  "dataSets": [{
    "id": "eZDhcZi6FLP"
  }],
  "deliveryChannels": ["SMS","EMAIL"],
  "subjectTemplate": "V{data_set_name}",
  "messageTemplate": "V{data_set_name}V{registration_period}",
  "sendStrategy": "SINGLE_NOTIFICATION"
}

```

`notificationRecipient` can be one of:
- `USER_GROUP` for internal messages
- `ORGANISATION_UNIT_CONTACT` for external messages


## 填充的组织单位级别 { #webapi_filled_organisation_unit_levels } 

*fillOrganisationUnitLevels* 资源提供了一个有序的列表
组织单元级别，其中生成的级别被注入到
列表以填充不存在持久级别的位置。

    GET /api/33/filledOrganisationUnitLevels

要设置组织单位级别，您可以发出一个 POST 请求，其中包含一个
内容类型为 `application/json` 的 POST 请求：

```json
{
  "organisationUnitLevels": [{
    "name": "National",
    "level": 1,
    "offlineLevels": 3
  }, {
    "name": "District",
    "level": 2
  }, {
    "name": "Chiefdom",
    "level": 3
  }, {
    "name": "Facility",
    "level": 4
  }]
}
```

## 预测变量 { #webapi_predictors } 

预测器允许您根据表达式生成数据值。
这可以用于例如生成目标、阈值、
或估计值。

要检索预测器，您可以向预测器发出 GET 请求
像这样的资源：

    / api / predictors

### 创建预测变量 { #webapi_create_predictor } 

您可以使用对预测器的 POST 请求创建预测器
资源：

    POST / api / predictors

有效负载样本如下所示：

```json
{
  "id": "AG10KUJCrRk",
  "name": "Malaria Outbreak Threshold Predictor",
  "shortName": "Malaria Outbreak Predictor",
  "description": "Computes the threshold for potential malaria outbreaks based on the mean plus 1.5x the std dev",
  "output": {
    "id": "nXJJZNVAy0Y"
  },
  "generator": {
    "expression": "AVG(#{r6nrJANOqMw})+1.5*STDDEV(#{r6nrJANOqMw})",
    "description": "Maximum normal malaria case count",
    "missingValueStrategy": "NEVER_SKIP",
    "slidingWindow": false
  },
  "periodType": "Monthly",
  "sequentialSampleCount": 4,
  "sequentialSkipCount": 1,
  "annualSampleCount": 3,
  "organisationUnitLevels": [4]
}
```

输出元素是指数据元素的标识符
其中保存预测数据值。生成器元素是指
计算预测值时使用的表达式。

### 预测表达式 { #webapi_predictor_expressions } 

预测器总是有一个生成器表达式来描述
计算出预测值。预测器也可能有跳过测试
表达式返回一个布尔值。当跳过测试表达式为
目前，在每个采样周期中对其进行评估，以判断是否
应该跳过那个时期的值。

以下变量可用于生成器表达式
或跳过测试表达式：

| 变量    | 目的     | 描述 |
| ----------- | ---------- | ----------- |
| #{<dataelement-id>} | 汇总数据元素 | 指所有类别选项组合中的聚合数据元素的总值。 |
| #{<dataelement-id>.<categoryoptcombo-id> | 数据元素操作数 | 指聚合数据元素和类别选项组合的组合。 |
| D{<program-id>.<dataelement-id>} | 程序数据元素 | 引用程序中跟踪器数据元素的值。 |
| A{<program-id>.<attribute-id>} | 程序跟踪的实体属性 | 指程序中被跟踪实体属性的值。 |
| I{<program-indicator-id>} | 计划指标 | 指程序指示器的值。 |
| R{<dataset-id>.<metric>} | 报告率 | 指报告率指标。指标可以是REPORTING_RATE，REPORTING_RATE_ON_TIME，ACTUAL_REPORTS，ACTUAL_REPORTS_ON_TIME，EXPECTED_REPORTS。 |
| C{<constant-id>} | 不变 | 指恒定值。 |
| OUG{<orgunitgroup-id>} | 组织单位组 | 指组织单位组内组织单位的数量。 |
| [天] | 天数 | 当前期间的天数。 |

### 生成预测值 { #webapi_generating_predicted_values } 

要运行所有预测器（生成预测值），您可以进行 POST
请求运行资源：

    POST / api / predictors / run

要运行单个预测器，您可以向运行发出 POST 请求
预测器的资源：

    POST / api / predictors / AG10KUJCrRk / run

## 计划规则 { #webapi_program_rules } 

本节是关于发送和读取程序规则，并解释
程序规则数据模型。程序规则赋予功能
在 DHIS2 程序中配置动态行为。

### 程序规则模型 { #webapi_program_rule_model } 

程序规则数据模型由 programRuleVariables、
程序规则和程序规则操作。 programRule 包含一个
表达式 - 当这个表达式为真时，子程序RuleActions
被触发。 programRuleVariables 用于寻址数据元素，
跟踪实体数据值和运行所需的其他数据值
表达式。一个程序中的所有程序规则共享同一个程序库
programRuleVariables，一个 programRuleVariable 可以用于多个
程序规则的表达式。

![](resources/images/program_rules/program-rule-model.jpg)

#### 程序规则模型详细信息 { #program-rule-model-details } 

下表给出了程序规则的详细概述
模型。

表：程序规则

| 名称 | 描述 | 强制性 |
|---|---|---|
| 程序 | 执行程序规则的程序。 | 强制性 |
| 名称 | 程序规则显示给 dhis2 配置器的名称。程序最终用户看不到。 | 强制性 |
| 描述 | 程序规则的描述，配置器可用于描述规则。程序的最终用户看不到。 | 强制性 |
| 程序阶段 | 如果为程序规则设置了程序阶段（programStage），则该规则只能在指定的程序阶段内进行评估。 | 可选的 |
| 健康）状况 | 为使程序规则触发其子操作，需要求值为 true 的表达式。表达式使用运算符、函数调用、硬编码值、常量和程序规则变量编写。`d2:hasValue('hemoglobin') && #{hemoglobin} <= 7 `.| 强制性 |
| 优先权 | 在规则顺序重要的情况下运行规则的优先级。在大多数情况下，规则并不取决于在其他规则之前或之后运行，在这种情况下，可以省略优先级。如果没有设置优先级，规则将在任何已定义优先级的规则之后运行。如果设置了优先级（整数），则优先级最低的规则将在优先级较高的规则之前运行。 | 可选的 |

#### 计划规则操作模型详细信息 { #program-rule-action-model-details } 

下表给出了对 programRuleAction 的详细概述
模型。

表：程序规则操作

| 名称 | 描述 | 强制性 |
|---|---|---|
| 程序规则 | 该操作的父程序规则。 | 强制性 |
| 程序规则--动作类型 | The type of action that is to be performed.<br>  * `DISPLAYTEXT` - Displays a text in a given widget.<br> * `DISPLAYKEYVALUEPAIR` - Displays a key and value pair(like a program indicator) in a given widget.<br> * `HIDEFIELD` - Hide a specified dataElement or trackedEntityAttribute.<br>    -         *content* - if defined, the text in *content* will be displayed to the end user in the instance where a value is previously entered into a field that is now about to be hidden (and therefore blanked). If *content* is not defined, a standard message will be shown to the user in this instance.<br>   -         *dataElement* - if defined, the HIDEFIELD action will hide this dataElement when the rule is effective.<br>   -         *trackedEntityDataValue* - if defined, the HIDEFIELD action will hide this trackedEntityDataValue when the rule is effective.<br>  * `HIDESECTION` - Hide a specified section.<br>    -         *programStageSection* - must be defined. This is the programStageSection that will be hidden in case the parent rule is effective.<br>  * `ASSIGN` - Assign a dataElement a value(help the user calculate something or fill in an obvious value somewhere)<br>    -         *content* - if defined, the value in *data* is assigned to this variable. If content id defined, and thus a variable is assigned for use in other rules, it is important to also assign a *programRule.priority* to make sure the rule with an ASSIGN action runs before the rule that will in turn evaluate the assigned variable.<br>   -         *data* - must be defined, data forms an expression that is evaluated and assigned to either a variable(#{myVariable}), a dataElement, or both.<br>   -         *dataElement* - if defined, the value in *data* is assigned to this data element.<br>  Either the content or dataElement must be defined for the ASSIGN action to be effective.<br> * `SHOWWARNING` - Show a warning to the user, not blocking the user from completing the event or registration.<br>    -         *content* - if defined, content is a static part that is displayed at the end of the error message.<br>   -         *data* - if defined, data forms an expression that is evaluated and added to the end of the warning message.<br>   -         *dataElement* - if defined, the warning message is displayed next to this data element.<br>   -         *trackedEntityAttribute* - if defined, the warning message is displayed next to this tracked entity attribute.<br>  Either dataElement or trackedEntityAttribute must be specified.<br> * `SHOWERROR` - Show an error to the user, blocking the user from completing the event or registration.<br>    -         *content* - if defined, content is a static part that is displayed in the start of the error message.<br>   -         *data* - if defined, data forms an expression that is evaluated and added to the end of the error message.<br>   -         *dataElement* - if defined, the error message is linked to this data element.<br>   -         *trackedEntityAttribute* - if defined, the error message is linked to this tracked entity attribute.<br>  Either dataElement or trackedEntityAttribute must be specified.<br> * `WARNINGONCOMPLETE` - Show a warning to the user on the "Complete form" dialog, but allowing the user to complete the event.<br>    -         *content* - if defined, content is a static part that is displayed at the end of the error message.<br>   -         *data* - if defined, data forms an expression that is evaluated and added to the end of the warning message.<br>   -         *dataElement* - if defined, the warning message prefixed with the name/formName of the data element.<br>  * `ERRORONCOMPLETE` - Show an error to the user on in a modal window when the user tries to complete the event. The user is prevented from completing the event.<br>    -         *content* - if defined, content is a static part that is displayed in the start of the error message.<br>   -         *data* - if defined, data forms an expression that is evaluated and added to the end of the error message.<br>   -         *dataElement* - if defined, the error message is linked to this data element.<br>  * `CREATEEVENT` - Create an event within the same enrollment.<br>    -         *content*<br>   -         *data* - if defined, contains data values to assign the created event. The format is <uid\>:<data value\>. Where several values is specified, these are separated with comma.<br> AcMrnleqHqc:100,AqK1IHqCkEE:'Polyhydramnios'   -         *programStage* - must be defined, and designates the program stage that the rule shall create an event of.<br>  * `SETMANDATORYFIELD` - Set a field to be mandatory.<br>    -         *dataElement* - if defined, this data element will be set to be mandatory in the data entry form.<br>   -         *trackedEntityAttribute* - if defined, this tracked entity attribute will be set to mandatory in the registration form or profile.<br>  * `SENDMESSAGE` - To send message at completion of event/enrollment or at data value update.<br>    -         *messageTemplate* - if defined, this template will be delivered either as SMS or EMAIL depending upon DeliveryChannel value in message template.<br>  * `SCHEDULEMESSAGE` - To schedule message at completion of event/enrollment or at data value update.<br>    -         *messageTemplate* - if defined, this template will be delivered either as SMS or EMAIL depending upon DeliveryChannel value in message template.<br>   -         *Date to send message* - Expression which is going to be used for evaluation of scheduled date. This expression should result in Date, any other resultant will be discarded and notification will not get scheduled. | 强制性 |
| 地点 | 用于动作类型 DISPLAYKEYVALUEPAIR 和 DISPLAYTEXT，以指定在哪个部件中显示文本或按键对。必须用于 DISPLAYKEYVALUEPAIR 和 DISPLAYTEXT。 | 参见说明 |
| 内容 | 用于不同操作中的用户信息。有关在每种操作类型中如何使用的详细说明，请参阅操作类型概述。SHOWWARNING、SHOWERROR、WARNINGONCOMPLETE、ERRORONCOMPLETE、DISPLAYTEXT 和 DISPLAYKEYVALUEPAIR 必须使用。HIDEFIELD 和 ASSIGN 可选。 | 参见说明 |
| 数据 | 用于不同操作中的表达式。有关在每种操作类型中如何使用的详细说明，请参阅操作类型概述。ASSIGN 必须使用。SHOWWARNING、SHOWERROR、WARNINGONCOMPLETE、ERRORONCOMPLETE、DISPLAYTEXT、CREATEEVENT 和 DISPLAYKEYVALUEPAIR 可选。 | 参见说明 |
| 数据元素 | 用于将规则操作链接到数据元素。有关在每种操作类型中如何使用的详细说明，请参阅操作类型概述。SHOWWARNING、SHOWERROR、WARNINGONCOMPLETE、ERRORONCOMPLETE、ASSIGN 和 HIDEFIELD 的可选项。 | 参见说明 |
| 跟踪属性 | 用于将规则操作链接到跟踪实体属性（trackedEntityAttributes）。有关在每种操作类型中如何使用的详细说明，请参阅操作类型概述。SHOWWARNING、SHOWERROR 和 HIDEFIELD 的可选项。 | 参见说明 |
| 选择权 | 用于将规则操作链接到选项。有关在每种操作类型中如何使用的详细说明，请参阅操作类型概述。HIDEOPTION 的可选项 | 参见说明 |
| 选项组 | 用于将规则操作链接到选项组。有关在每种操作类型中如何使用的详细说明，请参阅操作类型概述。SHOWOPTIONGROUP 和 HIDEOPTIONGROUP 必须使用。 | 参见说明 |
| 程序阶段 | 仅用于 CREATEEVENT 规则操作。必须用于 CREATEEEVENT。 | 参见说明 |
| 程序阶段-部分 | 仅用于 HIDESECTION 规则操作。必须用于 HIDESECTION | 参见说明 |

##### 程序规则行动验证{ #programruleaction-validation } 
2.37 中为 ProgramRuleAction 模型添加了一些验证。主要目的是防止用户创建错误的程序规则，以保持数据库的一致性。这些验证取决于程序规则动作类型。每种操作类型都有各自的验证。 

表：程序规则动作验证

| 名称 | 验证检查 ID 是否存在 |
|---|---|
|短信| 通知模板 ID |
|日程消息| 通知模板 ID |
|隐藏| ProgramStage 段落 ID |
|隐藏计划阶段| 节目阶段 id |
|希德菲尔德| 数据元素或跟踪实体属性 id |
|隐藏选项| 选项 id |
|隐藏选项组| 选项组 ID |
|显示选项组| 选项组 ID |
|设置必填字段| 数据元素或跟踪实体属性 id |
|淋浴器| 始终有效 |
|显示警告| 始终有效 |
|显示文本| 数据元素或跟踪实体属性 id |
|显示键值对||
|分配| 数据元素或跟踪实体属性 id |
|完成警告| 数据元素或跟踪实体属性 id |
|erroroncomplete| 数据元素或跟踪实体属性 id |

除上述验证外，程序规则操作中通常包含表达式的 `data` 字段也可使用以下 api 端点进行评估。

    POST /api/programRuleActions/data/expression/description?programId=<uid>


```json
{
  "condition": "1 + 1"
}
```

#### 程序规则变量模型的详细信息 { #program-rule-variable-model-details } 

下表详细概述了
程序规则变量模型。

表：程序规则变量

| 名称 | 描述 | 强制性 |
|---|---|---|
| 名称 | programRuleVariable 的名称 - 该名称用于表达式中。#{myVariable} \> 5 | 强制性 |
| 源类型 | 定义如何用来自注册和事件的数据填充该变量。 <br> * DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE - 在跟踪捕获中，获取当前注册中给定计划阶段事件中数据元素的最新值。在事件捕获中，获取组织单元上 10 个最新事件中的最新值。<br> * DATAELEMENT_NEWEST_EVENT_PROGRAM - 在跟踪捕获中，获取一个数据元素在整个注册过程中的最新值。在事件捕获中，获取组织单位上 10 个最新事件中的最新值。<br> * DATAELEMENT_CURRENT_EVENT - 仅在当前事件中获取给定数据元素的值。<br> * DATAELEMENT_PREVIOUS_EVENT - 在跟踪捕获中，获取当前事件之前程序中事件的最新值。在事件捕获中，获取组织单元上登记的 10 个前置事件中的最新值。<br> * CALCULATED_VALUE - 用于保留变量名，该变量名将由 ASSIGN 程序规则操作分配<br> * TEI_ATTRIBUTE - 获取给定跟踪实体属性的值 | 强制性 |
| valueType | valueType 参数定义此 ProgramRuleVariable 可包含的值的类型。其值取决于 sourceType 参数。如果源是 DataElement 或 TrackedEntityAttribute<br> ，那么 valueType 将从源的 valueType 派生。当 sourceType 为 CALCULATED_VALUE 时，valueType 应由用户提供，否则<br> 将默认为 ValueType.TEXT| 强制性
| 数据元素 | 用于将程序规则变量链接到数据元素。必须用于所有以 DATAELEMENT_ 开头的源类型。 | 参见说明 |
| 跟踪属性 | 用于将 programRuleVariable（程序规则变量）链接到跟踪实体属性（trackedEntityAttribute）。必须用于源类型 TEI_ATTRIBUTE。 | 参见说明 |
| useCodeFor- 选项集 | 如果选中，变量将使用任何链接选项集的代码（而不是名称）。默认值为未选中，即输入选项名称。 ||
| 程序阶段 | 用于指定从哪个特定程序阶段获取 programRuleVariable 值。DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE 必须使用。 | 参见说明 |

### 创建程序规则 { #webapi_creating_program_rules } 

- To perform crud operations, `programRules` resource is available in API.

要检索programRules的列表，您可以执行GET请求，如下所示：

    / api / programRules

要检索单个programRule，您可以执行GET请求，如下所示：

    / api / programRules / <program_rule_uid>

要保存/添加单个programRule，您可以执行POST请求，如下所示：

    / api / programRules / <program_rule_uid>

要更新单个programRule，您可以执行如下PUT请求：

    / api / programRules / <program_rule_uid>

要删除单个programRule，您可以执行以下DELETE请求：

    / api / programRules / <program_rule_uid>

要检索programRule条件的描述，可以使用POST并在POST正文中提供条件字符串。

    / api / programRules / condition / description？ <program_rule_uid>

## 形式 { #webapi_forms } 

To retrieve information about a form (which corresponds to a data set
and its sections) you can interact with the `form` resource. The form
response is accessible as XML and JSON and will provide information
about each section (group) in the form as well as each field in the
sections, including labels and identifiers. By supplying period and
organisation unit identifiers the form response will be populated with
data values.

表格表单查询参数

| 参数 | 选项 | 描述 |
|---|---|---|
| 聚乙烯 | ISO 期 | 填入表格数据值的时间段。 |
| 欧 | 用户标识 | 用于填充表单数据值的组织单位。 |
| 元数据 | 假 | 真 | 是否包含表格各部分每个数据元素的元数据。 |

要检索数据集的表单，您可以执行GET请求，如下所示：

    / api / dataSets / <dataset-id> /form.json

检索具有标识符“BfMAe6Itzgt”的数据集的表单
XML：

    / api / dataSets / BfMAe6Itzgt / form

要检索包含JSON中的元数据的表单，请执行以下操作：

    /api/dataSets/BfMAe6Itzgt/form.json?metaData=true

检索填充了特定时期数据值的表单，并
XML 中的组织单位：

    /api/dataSets/BfMAe6Itzgt/form.xml?ou=DiszpKrYNg8&pe=201401

当涉及自定义数据输入表单时，此资源还允许
直接为数据集创建此类表单。这可以通过一个
内容类型为 text/html 的 POST 或 PUT 请求，其中有效负载是
自定义表单标记，例如：

```bash
curl -d @form.html "localhost/api/dataSets/BfMAe6Itzgt/form"
  -H "Content-Type:text/html" -u admin:district -X PUT
```

## 文件资料 { #webapi_documents } 

对文件的引用可以与文档资源一起存储。



表格文件字段

| 字段名称 | 描述 |
|---|---|
| 名称 | 文件唯一名称 |
| 外部 | 标识文件位置的标志。外部文件为 TRUE，内部文件为 FALSE |
| 网址 | 文件的位置。外部文件的 URL。内部文件的文件资源 ID（请参阅 [文件资源](#webapi_file_resources)）。 |

对文档端点的GET请求将返回所有文档：

    / api / documents

对文档端点的POST请求将创建一个新文档：

```bash
curl -X POST -d @document.json -H "Content-type: application/json"
  "http://dhis.domain/api/documents"
```

```json
{
  "name": "dhis home",
  "external": true,
  "url": "https://www.dhis2.org"
}
```

带有附加文档 ID 的 GET 请求将返回信息
关于文件。对同一端点的 PUT 请求将更新
文档的字段：

    / api / documents / <documentId>

将 */data* 附加到 GET 请求将返回实际文件内容
文件的：

    / api / documents / <documentId> / data

## CSV元数据导入 { #webapi_csv_metadata_import } 

DHIS2支持以CSV格式导入元数据，例如数据元素，组织单位和验证规则。根据列顺序/列索引来标识各种元数据对象的属性（有关详细信息，请参见下文）。您可以省略不需要的对象属性/列，但是由于列顺序很重要，因此必须包括一个空列。换句话说，如果您要指定在列顺序中排在后面的属性/列，但不指定在列顺序中排在较早的位置的某些列，则可以为它们添加空白/空白列。

CSV文件的第一行被视为标题，在导入期间将被忽略。 _comma_字符应用作文本定界符。包含逗号的文本必须放在_双引号_中。

要上传CSV格式的元数据，您可以向元数据端点发出POST请求：

    POST / api / metadata？classKey = CLASS-KEY

支持以下对象类型。 `classKey` 查询参数是强制性的，可以在下表中的每个对象类型旁边找到。

表格对象类型和关键字

| 对象类型 | 类键 |
|---|---|
| 资料元素 | DATA_ELEMENT |
| 数据元素组 | DATA_ELEMENT_GROUP |
| 类别选项 | CATEGORY_OPTION |
| 类别选项组 | CATEGORY_OPTION_GROUP |
| 组织单位 | ORGANISATION_UNIT |
| 组织单位组 | ORGANISATION_UNIT_GROUP |
| 验证规则 | VALIDATION_RULE |
| 选项集 | OPTION_SET |
| 翻译 | 翻译 |

> **提示**
>
> 如果使用 *curl*，应该使用 `--data-binary` 选项，因为它保留了换行符和换行符，这对于 CSV 数据是必不可少的。

例如，要使用`curl`上传CSV格式的数据元素文件，可以使用以下命令：

```bash
curl --data-binary @data_elements.csv "http://localhost/api/metadata?classKey=DATA_ELEMENT"
  -H "Content-Type:application/csv" -u admin:district
```

以下各节列出了CSV导入当前支持的对象类型的格式。

### 资料元素 { #webapi_csv_data_elements } 

表：数据元素 CSV 格式

| 索引 | 柱 | 需要 | 值（默认为第一位） | 描述 |
|---|---|---|---|---|
| 1 | 名称 | 是的 || 名称。最多 230 个字符。唯一。 |
| 2 | 用户标识 | 不 | 用户标识 | 稳定的标识符。正好 11 个字母数字字符，以字母开头。如果未指定，将由系统生成。 |
| 3 | 码 | 不 || 稳定代码。最多 50 个字符。 |
| 4 | 简称 | 不 | 50 名字的第一个字符 | 如果未指定，将返回姓名的前 50 个字符。最多 50 个字符。唯一。 |
| 5 | 描述 | 不 || 自由文本描述。 |
| 6 | 表格名称 | 不 || 最大 230 字符。 |
| 7 | 域名类型 | 不 | 汇总跟踪器 | 数据元素的域类型，可以是聚合或跟踪。最多 16 个字符。 |
| 8 | 值类型 | 不 | INTEGER &#124; NUMBER &#124; UNIT_INTERVAL &#124; PERCENTAGE &#124; INTEGER_POSITIVE &#124; INTEGER_NEGATIVE &#124; INTEGER_ZERO_OR_POSITIVE &#124; FILE_RESOURCE &#124; COORDINATE &#124;TEXT &#124; LONG_TEXT &#124; LETTER &#124; PHONE_NUMBER &#124; EMAIL &#124; BOOLEAN &#124; TRUE_ONLY &#124; DATE &#124; DATETIME | 数值类型。最多 16 个字符。 |
| 9 | 聚集类型 | 不 | SUM &#124; AVERAGE &#124; AVERAGE_SUM_ORG_UNIT &#124; COUNT &#124; STDDEV &#124; VARIANCE &#124; MIN &#124; MAX &#124; NONE | 聚合类型，表示如何按不同维度聚合数据。最多 16 个字符。 |
| 10 | 类别组合 | 不 | 用户标识 | 类别组合的 UID。如果未指定，将默认为默认类别组合。 |
| 11 | 网址 | 不 || 数据元素资源的 URL。最多 255 个字符。 |
| 12 | 零具有重要意义 | 不 | 假 | 真 | 表示该数据元素是否存储零值。 |
| 13 | 选项集 | 不 | 用户标识 | 要用于数据的选项集的 UID。 |
| 14 | 评论选项设置 | 不 | 用户标识 | 用于注释的选项集的 UID。 |

下面是数据元素的 CSV 文件示例。首先
行将始终被忽略。请注意如何跳过列并依赖
系统使用的默认值。您还可以跳过列
你不使用出现在右边的

```csv
名称，uid，代码，简称，描述
“妇女参加技能发展培训”，“ D0001”，“妇女参加培训”
“妇女参与社区组织”，“ D0002”，“妇女参与组织”
```

### 组织单位 { #webapi_csv_org_units } 

表：组织单位 CSV 格式

| 索引 | 柱 | 需要 | 值（默认为第一位） | 描述 |
|---|---|---|---|---|
| 1 | 名称 | 是的 || 姓名。最多 230 个字符。唯一。 |
| 2 | 用户标识 | 不 | 用户标识 | 稳定的标识符。最多 11 个字符。如果未指定，将由系统生成。 |
| 3 | 码 | 不 || 稳定代码。最多 50 个字符。 |
| 4 | 家长 | 不 | 用户标识 | 上级组织单位的 UID。 |
| 5 | 简称 | 不 | 50 名字的第一个字符 | 如果未指定，将返回姓名的前 50 个字符。最多 50 个字符。唯一。 |
| 6 | 描述 | 不 || 自由文本描述。 |
| 7 | 开幕日期 | 不 | 1970-01-01 | 以 YYYY-MM-DD 格式表示的组织单位成立日期。 |
| 8 | 关闭日期 | 不 || 组织单位的关闭日期，格式为 YYYY-MM-DD，如果当前开放，则跳过。 |
| 9 | 评论 | 不 || 组织单位的自由文本注释。 |
| 10 | 功能类型 | 不 | NONE &#124; MULTI_POLYGON &#124; POLYGON &#124; POINT &#124; SYMBOL | 地理空间特征类型。 |
| 11 | 坐标 | 不 || 用于地理空间分析的坐标，采用 Geo JSON 格式。 |
| 12 | 网址 | 不 || 组织单位资源的 URL。最多 255 个字符。 |
| 13 | 联系人 | 不 || 组织单位的联系人。最多 255 个字符。 |
| 14 | 地址 | 不 || 组织单位地址。最多 255 个字符。 |
| 15 | 电子邮件 | 不 || 组织单位的电子邮件。最多 150 个字符。 |
| 16 | 电话号码 | 不 || 组织单位的电话号码。最多 150 个字符。 |

使用父单位导入组织单位的最小示例
看起来像这样：

```csv
名称，uid，代码，父项
“西部省份”，“ WESTP”，“ ImspTQPwCqd”
“东部省”，“ EASTP”，“ ImspTQPwCqd”
```

### 验证规则 { #webapi_csv_validation_rules } 

表格验证规则 CSV 格式

| 索引 | 柱 | 需要 | 值（默认为第一位） | 描述 |
|---|---|---|---|---|
| 1 | 名称 | 是的 || 姓名。最多 230 个字符。唯一。 |
| 2 | 用户标识 | 不 | 用户标识 | 稳定的标识符。最多 11 个字符。如果未指定，将由系统生成。 |
| 3 | 码 | 不 || 稳定代码。最大 50 |
| 4 | 描述 | 不 || 自由文本描述。 |
| 5 | 教学 | 不 || 自由文本教学。 |
| 6 | 重要性 | 不 | 中 | 高 | 低 | 验证规则的重要性。 |
| 7 | 规则类型（忽略） | 不 | 验证 | 验证规则类型。 |
| 8 | 操作员 | 不 | equal_to &#124; not_equal_to &#124; greater_than &#124; greater_than_or_equal_to &#124; less_than &#124; less_than_or_equal_to &#124; compulsory_pair &#124; exclusive_pair | 表达运算符。 |
| 9 | 期间类型 | 不 | 月刊 | 日刊 | 周刊 | 季刊 | 半年刊 | 年刊 | 时期类型。 |
| 10 | 左侧表达 | 是的 || 基于数据元素和选项组合 UID 的数学公式。 |
| 11 | 左侧表情描述 | 是的 || 自由文本。 |
| 12 | 左侧缺失值策略 | 不 | skip_if_any_value_missing | skip_if_all_value_missing | never_skip | 左侧表达式中出现缺失值时的行为。 |
| 13 | 右侧表达 | 是的 || 基于数据元素和选项组合 UID 的数学公式。 |
| 14 | 右侧表达描述 | 是的 || 自由文本。 |
| 15 | 右侧缺失值策略 | 不 | skip_if_any_value_missing | skip_if_all_value_missing | never_skip | 右侧表达式中出现缺失值时的行为。 |

### 选项集 { #webapi_csv_option_sets } 

表：选项集 CSV 格式

| 索引 | 柱 | 需要 | 值（默认为第一位） | 描述 |
|---|---|---|---|---|
| 1 | 选项集名称 | 是的 || 姓名。最多 230 个字符。唯一。每个选项都应重复。 |
| 2 | 选项设置 UID | 不 | 用户标识 | 稳定的标识符。最多 11 个字符。如果未指定，将由系统生成。每个选项都应重复。 |
| 3 | 选项设置代码 | 不 || 稳定代码。最多 50 个字符。每个选项都应重复。 |
| 4 | 选项名称 | 是的 || 选项名称。最多 230 个字符。 |
| 5 | 选项 UID | 不 | 用户标识 | 稳定的标识符。最多 11 个字符。如果未指定，将由系统生成。 |
| 6 | 选项代码 | 是的 || 稳定代码。最多 50 个字符。 |

选项集的格式很特殊。前三个值代表
一个选项集。最后三个值代表一个选项。首先
代表选项集的三个值应该对每个值重复
选项。

```csv
optionsetname，optionsetuid，optionsetcode，optionname，optionuid，optioncode
“颜色”，“颜色”，“蓝色”，“蓝色”
“颜色”，“颜色”，“绿色”，“绿色”
“颜色”，“颜色”，“黄色”，“黄色”
“性别”，“男”，“男”
“性别”，“女性”，“女性”
“性别”，“未知”，“未知”
“结果”，“高”，“高”
“结果”，“中”，“中”
“结果”，“低”，“低”
“ Impact”，“ cJ82jd8sd32”，“ IMPACT”，“ Great”，“ GREAT”
“影响”，“ cJ82jd8sd32”，“影响”，“中等”，“中等”
“影响”，“ cJ82jd8sd32”，“影响”，“不良”，“不良”
```

### 选项组 { #option-group } 

表：选项组 CSV 格式

| 索引 | 柱 | 需要 | 值（默认为第一位） | 描述 |
|---|---|---|---|---|
| 1 | 选项组名称 | 是的 || 姓名。最多 230 个字符。唯一。每个选项都应重复。 |
| 2 | OptionGroupUid | 不 || 稳定的标识符。最多 11 个字符。如果未指定，将由系统生成。每个选项都应重复。 |
| 3 | 选项组代码 | 不 || 稳定代码。最多 50 个字符。每个选项都应重复。 |
| 4 | 选项组简称 | 是的 || 简称。最多 50 个字符。唯一。每个选项都应重复。 |
| 5 | OptionSetUid | 是的 || 稳定的标识符。最多 11 个字符。每个选项都应重复。 |
| 6 | OptionUid | 不 || 稳定的标识符。最多 11 个字符。 |
| 7 | 选项代码 | 不 || 稳定代码。最多 50 个字符。 |

OptionGroup CSV有效负载样本

```csv
optionGroupName，optionGroupUid，optionGroupCode，optionGroupShortName，optionSetUid，optionUid，optionCode
optionGroupA，groupA，xmRubJIhmaK，OptionA
optionGroupA，groupgroup，xmRubJIhmaK，OptionB
optionGroupB 、、 groupB，QYDAByFgTr1，OptionC
```
### 选项组集 { #option-group-set } 



表：选项组设置 CSV 格式

| 索引 | 柱 | 需要 | 值（默认为第一位） | 描述 |
|---|---|---|---|---|
| 1 | 选项组设置名称 | 是的 || 姓名。最多 230 个字符。唯一。每个选项都应重复。 |
| 2 | OptionGroupSetUid | 不 || 稳定的标识符。最多 11 个字符。如果未指定，将由系统生成。每个选项都应重复。 |
| 3 | 选项组设置代码 | 不 || 稳定代码。最多 50 个字符。每个选项都应重复。 |
| 4 | 选项组设置描述 | 不 || 说明每个选项都应重复。 |
| 5 | 数据维度 | 不 || 真，假 |
| 6 | OptionSetUid | 不 || OptionSet UID。稳定标识符。最多 11 个字符。 |

OptionGroupSet CSV有效负载样本

```csv
名称，uid，代码，描述，数据维度，选项
optiongroupsetA，...，xmRubJIhmaK
optiongroupsetB 、、、、 false，QYDAByFgTr1
```
要将OptionGroups添加到导入的OptionGroupSet中，请按照导入集合成员身份的步骤进行操作

### 指标{ #webapi_csv_indicators } 

表：指标 CSV 格式

| 索引 | 柱 | 需要 | 值（默认为第一位） | 描述 |
|---|---|---|---|---|
| 1 | 名称 | 是的 || 名称。最多 230 个字符。唯一。 |
| 2 | 用户标识 | 不 | 用户标识 | 稳定的标识符。正好 11 个字母数字字符，以字母开头。如果未指定，将由系统生成。 |
| 3 | 码 | 不 || 稳定代码。最多 50 个字符。 |
| 4 | 简称 | 是的 | 50 名字的第一个字符 | 如果未指定，将返回姓名的前 50 个字符。最多 50 个字符。唯一。 |
| 5 | 分母 | 是的 || 指标表达。 |
| 6 | 分母描述 | 不 || 最大 230 字符。 |
| 5 | 分子 | 是的 || 指标表达。 |
| 6 | numeratorDescription | 不 || 最大 230 字符。 |
| 6 | 年化 | 是的 ||  真，假 |
| 6 | 小数 | 不 || 指标值使用的小数位数，空表示默认值。
| 6 | 指标类型 | 是的 || 用户标识 | 指标类型的 UID。

指标 CSV 文件示例如下。第一
行将被忽略。请注意，您可以跳过列，依靠
系统将使用的默认值。您还可以跳过
您不使用的列，这些列显示在

```csv
Name,UID,Code,Description,shortName,denominator,denominatorDescription,numerator,numeratorDescription,annualized,decimals,indicatorType
Indicator A,yiAKjiZVoOU,CodeA,Indicator A description,Indicator A shortname,#{fbfJHSPpUQD},denominatorDescription,#{h0xKKjijTdI},numeratorDescription,false,2,sqGRzCziswD
Indicator B,Uvn6LCg7dVU,CodeB,Indicator B description,Indicator B shortname,#{fbfJHSPpUQD},denominatorDescription,#{h0xKKjijTdI},numeratorDescription,false,2,sqGRzCziswD
```

### 收藏会员 { #collection-membership } 

除了导入对象，您还可以选择只导入对象
对象和组之间的组成员关系。目前，该
支持以下组和对象对

  - 组织单位组-组织单位

  - 数据元素组-数据元素

  - 指标组-指标

  - 选项组集-选项组

这些导入的CSV格式相同



表格：收集成员 CSV 格式

| 索引 | 柱 | 需要 | 值（默认为第一位） | 描述 |
|---|---|---|---|---|
| 1 | 用户标识 | 是的 | 用户标识 | 要添加对象的集合的 UID |
| 2 | 用户标识 | 是的 | 用户标识 | 要添加到集合中的对象的 UID |

### 类别 选项组{ #category-option-group } 

| 索引 | 柱 | 需要 | 值（默认为第一位） | 描述 |
|---|---|---|---|---|
| 1 | 名称 | 是的 || 姓名。最多 230 个字符。唯一。 |
| 2 | 用户标识 | 不 | 用户标识 | 稳定标识符。最多 11 个字符。如果未指定，将由系统生成。 |
| 3 | 码 | 不 || 稳定代码。最多 50 个字符。 |
| 4 | 简称 | 不 || 简称。最多 50 个字符。 |
| 5 | 数据尺寸类型 | 是的 || 数据维度类型，可以是 "分类 "或 "属性"。 |

### 其他物件 { #webapi_csv_other_objects } 

表格数据元素组、类别选项、组织单位组 CSV 格式

| 索引 | 柱 | 需要 | 值（默认为第一位） | 描述 |
|---|---|---|---|---|
| 1 | 名称 | 是的 || 姓名。最多 230 个字符。唯一。 |
| 2 | 用户标识 | 不 | 用户标识 | 稳定标识符。最多 11 个字符。如果未指定，将由系统生成。 |
| 3 | 码 | 不 || 稳定代码。最多 50 个字符。 |
| 4 | 简称 | 不 || 简称。最多 50 个字符。 |

类别选项的示例如下所示：

```csv
名称，uid，代码，简称
“男”，“男”
“女性”，“女性”
```

## 删除的对象 { #webapi_deleted_objects } 

删除的对象资源提供了元数据对象的日志
删除。

    / api / deletedObjects

每当删除元数据类型的对象时，都会保留日志
uid、代码、类型和删除时间。这个 API 是
在`/api/deletedObjects` 字段过滤和对象过滤中可用
与其他元数据资源类似。

获取类型为数据元素的已删除对象：

    GET /api/deletedObjects.json?klass=DataElement

获取在 2015 年删除的指标类型的已删除对象和
向前：

    GET /api/deletedObjects.json?klass=Indicator&deletedAt=2015-01-01

## 收藏夹 { #webapi_favorites } 

某些类型的元数据对象可以标记为收藏夹
当前登录的用户。这目前适用于仪表板。

    / api / dashboards / <uid> /收藏

要使仪表板成为收藏夹，您可以发出 *POST* 请求（无内容
type required) 到这样的 URL：

    / api /仪表板/ iMnYyBfSxmM /收藏

要将仪表板删除为收藏夹，您可以发出 *DELETE* 请求
使用与上面相同的 URL。

收藏夹状态将显示为布尔值 *收藏夹* 字段
元数据响应中的对象（例如仪表板）。

## 订阅内容 { #webapi_subscription } 

已登录的用户可以订阅某些类型的对象。目前
可订阅的对象类型包括 EventChart、EventReport.Map、Visualization 和 EventVisualization、
地图、可视化和事件可视化类型的对象。

> **注**
>
> 事件图表（EventChart）和事件报告（EventReport）对象已被弃用。请使用 EventVisualization 代替。

要获取对象的订阅者（返回用户 ID 数组），您
可以发出 *GET* 请求：

    / api / <object-type> / <object-id> /订阅者

请参见以下示例：

    /api/visualizations/DkPKc1EUmC2/subscribers

检查当前用户是否订阅了一个对象（返回一个
boolean) 您可以执行 *GET* 调用：

    / api / <object-type> / <object-id> /已订阅

请参见以下示例：

    /api/visualizations/DkPKc1EUmC2/subscribed

要订阅/取消订阅对象，请执行 *POST/DELETE*
请求（不需要内容类型）：

    / api / <object-type> / <object-id> / subscriber

## 文件资源 { #webapi_file_resources } 

*文件资源*是用于表示和存储二进制内容的对象。
*FileResource* 对象本身包含文件元数据（名称、
内容类型、大小等）以及允许检索
来自数据库外部文件存储的内容。 *FileResource* 对象
与其他数据库一样存储在数据库中，但内容（文件）是
存储在别处并可使用包含的引用检索
*（存储密钥）*。

    / api / fileResources

文件资源的内容不能直接访问，但可以
从其他对象（如数据值）引用来存储二进制
几乎无限大小的内容。

创建不需要相应数据值的文件资源、
以多部分上传方式 POST 到端点 `/api/fileResources`：

```bash
curl "https://server/api/fileResources" -X POST
  -F "file=@/path/to/file/name-of-file.png"
```
文件资源的` uid `可以在创建时提供，例如：
```bash
curl "https://server/api/fileResources?uid=0123456789x" -X POST
  -F "file=@/path/to/file/name-of-file.png"
```

创建文件资源和引用该文件的数据值、
在 DHIS 2.36 或更高版本中，POST 到 `/api/dataValues/file` 端点：

```bash
curl "https://server/api/dataValues/file?de=xPTAT98T2Jd
  &pe=201301&ou=DiszpKrYNg8&co=Prlt0C1RF0s" -X POST
  -F "file=@/path/to/file/name-of-file.png"
```

For the `api/fileResources` endpoint, the only form parameter required is
*file*, which is the file to upload. For the `api/dataValues/file`
endpoint, the parameters required are the same as for a post to
`api/dataValues`, with the addition of *file*.

文件名和内容类型也应包含在请求中，但
如果没有提供，将用默认值代替。

成功创建文件资源后，返回的数据将包含
一个 `response` 字段，它又包含这样的 `fileResource`：

```json
{
  "httpStatus": "Accepted",
  "httpStatusCode": 202,
  "status": "OK",
  "response": {
    "responseType": "FileResource",
    "fileResource": {
      "name": "name-of-file.png",
      "created": "2015-10-16T16:34:20.654+0000",
      "lastUpdated": "2015-10-16T16:34:20.667+0000",
      "externalAccess": false,
      "publicAccess": "--------",
      "user": { ... },
      "displayName": "name-of-file.png",
      "contentType": "image/png",
      "contentLength": 512571,
      "contentMd5": "4e1fc1c3f999e5aa3228d531e4adde58",
      "storageStatus": "PENDING",
      "id": "xm4JwRwke0i"
    }
  }
}
```

注意响应是*202 Accepted*，表示返回的
资源已提交后台处理（持续到
在这种情况下是外部文件存储）。另外，请注意 `storageStatus` 字段
指示内容是否已存储。在这
点，到外部存储的持久化还没有完成（它是
可能会上传到某个地方的基于云的商店）
`PENDING` 状态。

即使内容尚未完全存储，文件资源
现在可以使用，例如作为数据值中的引用内容（参见
[使用文件数据值](#datavalue_file))。如果我们需要检查
更新的 *storageStatus* 或以其他方式检索
文件，可以查询`fileResources`端点。

```bash
curl "https://server/api/fileResources/xm4JwRwke0i" -H "Accept: application/json"
```

此请求将返回 `FileResource` 对象，如
上面例子的反应。

### 文件资源限制 { #webapi_file_resources_constraints } 

  - 文件资源*必须*从另一个对象引用（分配）
    以便长期坚持。一个文件资源是
    创建但未被其他对象（例如数据值）引用
    被认为处于*分期*。此中的任何文件资源
    状态并且超过*两个小时*将被标记为删除
    并将最终从系统中清除。

  - 文件资源初始创建返回的ID不是
    可从任何其他位置检索，除非文件资源具有
    已被引用（其中 ID 将被存储为引用），
    所以丢失它需要重复 POST 请求和一个新的
    要创建的对象。 *孤立*文件资源将被清理
    自动起来。

  - 文件资源对象是*不可变的*，意味着修改不是
    允许并需要创建一个全新的资源。

### 文件资源阻止列表 { #file-resource-blocklist } 

出于安全原因，某些类型的文件被阻止上传。

以下内容类型被阻止。

| 内容类型 | 内容类型 |
| ------------------------------------- | ---- |
| 文字/ HTML                             | 应用程序/ x-ms-dos-可执行 |
| 文字/ css                              | application / vnd.microsoft.portable-executable |
| 文字/ javascript                       | application / vnd.apple.installer + xml |
| 字体/ otf                              | application / vnd.mozilla.xul + xml |
| 应用程序/ x-shockwave-flash         | 应用程序/ x-httpd-php  |
| application / vnd.debian.binary-package | 应用程序/ x-sh |
| 应用/ x-rpm                     | 应用程序/ x-csh |
| 应用程序/ Java归档              |  |

以下文件扩展名被阻止。

| 文件扩展名 | 文件扩展名 | 文件扩展名 |
| ---- | ---- | ---- |
| 网页 | 黛比  | ul  |
| htm  | 转数  | 的PHP  |
| 的CSS  | 罐  | 箱子  |
| js   | jsp  | SH   |
| 微信  | 可执行程序  | csh  |
| OTF  | 微星  | 蝙蝠  |
| 瑞士法郎  | 每公斤 |      |

## 元数据版本控制 { #webapi_metadata_versioning } 

本节将解释元数据版本化 API。

  - `/api/metadata/version`：这个端点将返回当前的元数据
    调用它的系统的版本。



表格查询参数

| 名称 | 需要 | 描述 |
|---|---|---|
| 版本名称 | 假 | 如果未指定该参数，则将返回系统的当前版本，否则将返回作为参数传递的版本名称的详细信息。(版本名称的语法为 "Version_<id\>" |

### 获取元数据版本示例 { #webapi_metadata_versioning_examples } 

**示例：**获取此系统的当前元数据版本

请求：

```
/ api /元数据/版本
```

响应：

```json
{
  "name": "Version_4",
  "created": "2016-06-30T06:01:28.684+0000",
  "lastUpdated": "2016-06-30T06:01:28.685+0000",
  "externalAccess": false,
  "displayName": "Version_4",
  "type": "BEST_EFFORT",
  "hashCode": "848bf6edbaf4faeb7d1a1169445357b0",
  "id": "Ayz2AEMB6ry"
}
```

**示例：**获取名称为“ Version_2”的版本的详细信息

请求：

```
/ api / metadata / version？versionName = Version_2
```

响应：

```json
{
  "name": "Version_2",
  "created": "2016-06-30T05:59:33.238+0000",
  "lastUpdated": "2016-06-30T05:59:33.239+0000",
  "externalAccess": false,
  "displayName": "Version_2",
  "type": "BEST_EFFORT",
  "hashCode": "8050fb1a604e29d5566675c86d02d10b",
  "id": "SaNyhusVxBG"
}
```

  - `/api/metadata/version/history`：这个端点将返回所有
    调用它的系统的元数据版本。



表格查询参数

| 名称 | 需要 | 描述 |
|---|---|---|
| 底线 | 假 | 如果未指定该参数，将返回所有元数据版本的列表。否则，我们需要传递一个形式为 "Version_<id\>"的 versionName 参数。然后，它将返回系统中在作为查询参数提供的版本名称之后创建的版本列表。 |

### 获取所有元数据版本的列表 { #webapi_get_list_of_metadata_versions } 

**示例：**获取此系统中所有版本的列表

请求：

```
/ api /元数据/版本/历史记录
```

响应：

```json
{
  "metadataversions": [{
    "name": "Version_1",
    "type": "BEST_EFFORT",
    "created": "2016-06-30T05:54:41.139+0000",
    "id": "SjnhUp6r4hG",
    "hashCode": "fd1398ff7ec9fcfd5b59d523c8680798"
  }, {
    "name": "Version_2",
    "type": "BEST_EFFORT",
    "created": "2016-06-30T05:59:33.238+0000",
    "id": "SaNyhusVxBG",
    "hashCode": "8050fb1a604e29d5566675c86d02d10b"
  }, {
    "name": "Version_3",
    "type": "BEST_EFFORT",
    "created": "2016-06-30T06:01:23.680+0000",
    "id": "FVkGzSjAAYg",
    "hashCode": "70b779ea448b0da23d8ae0bd59af6333"
  }]
}
```

**示例：**获取此系统在“ Version_2”之后创建的所有版本的列表

请求：

```
/ api / metadata / version / history？baseline = Version_2
```

响应：

```json
{
  "metadataversions": [{
    "name": "Version_3",
    "type": "BEST_EFFORT",
    "created": "2016-06-30T06:01:23.680+0000",
    "id": "FVkGzSjAAYg",
    "hashCode": "70b779ea448b0da23d8ae0bd59af6333"
  }, {
    "name": "Version_4",
    "type": "BEST_EFFORT",
    "created": "2016-06-30T06:01:28.684+0000",
    "id": "Ayz2AEMB6ry",
    "hashCode": "848bf6edbaf4faeb7d1a1169445357b0"
  }]
 }
```

  - `/api/metadata/version/create`：这个端点将创建元数据
    version 参数中指定的版本类型。



表格查询参数

| 名称 | 需要 | 描述 |
|---|---|---|
| 类型 | 真正 | The type of metadata version which needs to be created.<br>  * BEST_EFFORT<br> * ATOMIC |

用户可以选择需要创建的元数据类型。
元数据版本类型决定了进口商应该如何对待给定的
版本。导入元数据时将使用此类型。有
两种类型的元数据。

  - *BEST_EFFORT*：这种类型表明丢失的引用可以
    忽略，导入器可以继续导入元数据（例如
    数据元素组导入中缺少数据元素）。

  - *ATOMIC*：这种类型确保对元数据进行严格的类型检查
    如果有任何引用，则引用和元数据导入将失败
    不存在。

> **注意**
>
> 建议有一个 ATOMIC 类型的版本，以确保所有
> 系统（中央和本地）具有相同的元数据。任何遗漏
> 引用在验证阶段本身被捕获。请参阅
> 进口商详细信息的完整解释。

### 创建元数据版本 { #webapi_create_metadata_version } 

**示例：** 创建类型为 `BEST_EFFORT` 的元数据版本

请求：

```bash
curl -X POST -u admin:district "https://play.dhis2.org/dev/api/metadata/version/create?type=BEST_EFFORT"
```

响应：

```json
{
  "name": "Version_1",
  "created": "2016-06-30T05:54:41.139+0000",
  "lastUpdated": "2016-06-30T05:54:41.333+0000",
  "externalAccess": false,
  "publicAccess": "--------",
  "user": {
    "name": "John Traore",
    "created": "2013-04-18T17:15:08.407+0000",
    "lastUpdated": "2016-04-06T00:06:06.571+0000",
    "externalAccess": false,
    "displayName": "John Traore",
    "id": "xE7jOejl9FI"
  },
  "displayName": "Version_1",
  "type": "BEST_EFFORT",
  "hashCode": "fd1398ff7ec9fcfd5b59d523c8680798",
  "id": "SjnhUp6r4hG"
}
```

  - `/api/metadata/version/{versionName}/data`：这个端点将下载
    特定于作为路径传递的版本名称的实际元数据
    范围。

  - `/api/metadata/version/{versionName}/data.gz`：这个端点将下载
    特定于作为路径传递的版本名称的实际元数据
    压缩格式（gzipped）的参数。



表格路径参数

| 名称 | 需要 | 描述 |
|---|---|---|
| 版本名称 | 真正 | 格式为 "Version_<id\>"的路径参数，以便 API 下载特定版本 |

### 下载版本元数据 { #webapi_download_version_metadata } 

**示例：**获取“版本5”的实际元数据

请求：

```bash
curl -u admin:district "https://play.dhis2.org/dev/api/metadata/version/Version_5/data"
```

响应：

```json
{
  "date": "2016-06-30T06:10:23.120+0000",
  "dataElements": [
    {
      "code": "ANC 5th Visit",
      "created": "2016-06-30T06:10:09.870+0000",
      "lastUpdated": "2016-06-30T06:10:09.870+0000",
      "name": "ANC 5th Visit",
      "id": "sCuZKDsix7Y",
      "shortName": "ANC 5th Visit ",
      "aggregationType": "SUM",
      "domainType": "AGGREGATE",
      "zeroIsSignificant": false,
      "valueType": "NUMBER",
      "categoryCombo": {
        "id": "p0KPaWEg3cf"
      },
      "user": {
        "id": "xE7jOejl9FI"
      }
    }
  ]
}
```

## 元数据同步{ #webapi_metadata_synchronization } 

本节介绍了可用的元数据同步 API
2.24 开始

  - `/api/metadata/sync`：此端点执行元数据同步
    通过下载和在查询参数中传递的版本名称
    从远程服务器导入指定的版本，如定义
    设置应用程序。



表格查询参数

| 名称 | 需要 | 描述 |
|---|---|---|
| 版本名称 | 真正 | versionName 查询参数的形式为 "Version_<id\>" 。api 会从远程服务器下载该版本，并将其导入本地系统。 |

  - 使用此 API 时应格外小心。请注意，有
    以完全自动化的方式实现同步的另一种方法
    利用“数据管理”中的元数据同步任务
    应用程序。详见用户手册第 22 章 22.17 节
    关于元数据同步任务。

  - 此同步 API 也可用于同步元数据
    从元数据同步调度程序失败的版本。由于
    它依赖于给定的元数据版本号，应该注意
    为调用 this 的顺序而采用。例如。如果这个api是
    用于从中央实例同步一些更高版本，然后
    同步可能会失败，因为元数据依赖项不存在于
    本地实例。

  - 假设本地实例在 `Version_12` 并且如果使用这个端点
    从中央同步`Version_15`（类型`BEST_EFFORT`）
    例如，调度程序将从以下位置开始同步元数据
    `版本_16`。所以本地实例不会有元数据
    `Version_12` 和 `Version_15` 之间的版本。你需要手动
    仅使用这些端点同步丢失的版本。

### 同步元数据版本 { #webapi_metadata_synchronization_version } 

**示例：**将Version_6从中央系统同步到该系统

请求：

```bash
curl -u admin:district "https://play.dhis2.org/dev/api/metadata/sync?versionName=Version_6"
```

## 元数据存储库 { #webapi_metadata_repository } 

DHIS2 提供了一个包含元数据包的元数据存储库
各种内容。元数据包是符合 DHIS2 的 JSON 文档
它描述了一组元数据对象。

要检索可用元数据包的索引，您可以发出
对 *metadataRepo* 资源的 GET 请求：

    GET /api/synchronization/metadataRepo

元数据包条目包含有关包的信息和
相关包的 URL。索引可能如下所示：

```json
{
  "packages": [
    {
      "id": "sierre-leone-demo",
      "name": "Sierra Leone demo",
      "description": "Sierra Leone demo database",
      "version": "0.1",
      "href": "https://dhis2.org/metadata-repo/221/sierra-leone-demo/metadata.json"
    },
    {
      "id": "trainingland-org-units",
      "name": "Trainingland organisation units",
      "description": "Trainingland organisation units with four levels",
      "version": "0.1",
      "href": "https://dhis2.org/metadata-repo/221/trainingland-org-units/metadata.json"
    }
  ]
}
```

客户端可以通过 URL 安装元数据包
带有元数据包的内容类型 *text/plain* 的 POST 请求
URL 作为 *metadataPull* 资源的有效负载：

    POST / api / synchronization / metadataPull

curl命令示例如下所示：

```bash
curl "localhost:8080/api/synchronization/metadataPull" -X POST
  -d "https://dhis2.org/metadata-repo/221/trainingland-org-units/metadata.json"
  -H "Content-Type:text/plain" -u admin:district
```


> **注**
>
> 提供的 URL 将根据 `dhis.conf` 文件中的配置属性 `system.remote_servers_allowed`进行检查。
> 如果基本 URL 不在允许的配置服务器之列，则不允许执行操作。请看下面的失败示例。  
> 配置集为 `system.remote_servers_allowed=https://server1.org/,https://server2.org/` 的一些示例
> - 提供 `https://server1.org/path/to/resource` -> 这将被接受
> - 提供 `https://server2.org/resource/path` -> 这将被接受
> - 提供 `https://oldserver.org/resource/path` -> 这将被拒绝
>
失败响应示例

```json
 {
  "httpStatus": "Conflict",
  "httpStatusCode": 409,
  "status": "ERROR",
  "message": "Provided URL is not in the remote servers allowed list",
  "errorCode": "E1004"
}
```


## 参考用户创建的{ #reference-to-created-by-user } 

Each object created in DHIS2 will have a property named `user` which is linked to `User` who created the object.

From version 2.36 we have changed the name of this property to `createdBy` to avoid confusion.

不过，为了保持向后兼容性，传统的 `user` 属性仍包含在有效载荷中，并像以前一样正常工作。

```json
{
  "createdBy": {
      "displayName": "John Kamara",
      "name": "John Kamara",
      "id": "N3PZBUlN8vq",
      "username": "district"
  },
  "user": {
      "displayName": "John Kamara",
      "name": "John Kamara",
      "id": "N3PZBUlN8vq",
      "username": "district"
  }
}
```

## 元数据提案工作流程{ #webapi_metadata_proposal_workflow }

元数据提议工作流程端点可实现提议和接受元数据更改的工作流程。

```
/api/metadata/proposals
```

### 提议更改元数据{ #webapi_metadata_proposal_propose }

一个提案总是针对一个元数据对象，使用

    POST /api/metadata/proposals

根据有效载荷的不同，该提案可以

* 添加一个新的元数据对象。
* 按 ID 更新现有元数据对象引用。
* 删除 ID 引用的现有元数据对象。

要提议添加新的元数据对象，请发送类似下面的 JSON 有效负载：

```json
{
  "type": "ADD",
  "target": "ORGANISATION_UNIT",
  "change": {"name":"My Unit", "shortName":"MyOU", "openingDate": "2020-01-01"}
}
```
`change` 属性包含相同的 JSON 对象，可直接发布到相应的端点以创建对象。

要提议更新现有元数据对象，请发送一个 JSON 有效载荷，如下例所示：

```json
{
  "type": "UPDATE",
  "target": "ORGANISATION_UNIT",
  "targetId": "<id>",
  "change": [
    {"op": "replace", "path": "/name", "value": "New name"}
  ]
}
```
The `targetId` refers to the object by its ID which should be updated. The `change` property here contains a JSON patch payload. This is the same
patch payload that could be posted to the corresponding endpoint to directly apply the update.

要提议删除现有对象，请发送一个有效载荷，如上一个示例：

```json
{
  "type": "REMOVE",
  "target": "ORGANISATION_UNIT",
  "targetId": "<id>"
}
```
The `targetId` refers to the object  by its ID which should be removed. A free text `comment` can be added to any type of comment.

Only `target` type `ORGANISATION_UNIT` is supported currently.

### 接受元数据更改建议{ #webapi_metadata_proposal_accept }
要接受一个开放的提案，请在提案资源上使用`POST`

    POST /api/metadata/proposals/<uid>

成功后，提案的状态变为`接受`状态。一旦被接受，提案就不能再被拒绝。

Should a proposal fail to apply it changes to status `NEEDS_UPDATE`. The `reason` field contains a summary of the failures when this information is 
available.

### 反对元数据变更提案{ #webapi_metadata_proposal_oppose }
如果提案不太正确并且需要调整，可以通过发送提案资源的`PATCH`来反对提案

    PATCH /api/metadata/proposals/<uid>

可选地，可以在其中添加纯文本正文，以给出提案遭到反对的`原因`。

反对的提案必须处于`PROPOSED`状态，并将更改为`NEEDS_UPDATE`状态。

### 调整元数据更改建议{ #webapi_metadata_proposal_adjust }
A proposal in state `NEEDS_UPDATE` needs to be adjusted before it can be accepted. To adjust the proposal a `PUT` request is made for the proposal's 
resource

    PUT /api/metadata/proposals/<uid>

这种调整可以不带正文，也可以使用 JSON 正文，其中包含一个对象，该对象包含更新后的 `change` 和 `targetId` 为 
调整：

```json
{
  "targetId": "<id>",
  "change": ...
}
```
The JSON type of the `change` value depends on the proposal `type` analogous to when a proposal is initially made.

### 拒绝元数据更改建议{ #webapi_metadata_proposal_reject }
要拒绝打开的提案，请在提案资源上使用`DELETE`

    DELETE /api/metadata/proposals/<uid>

这最终将提案的状态更改为`拒绝`。不能对此提案进行进一步的更改。它作为事件的文档保存。

### 元数据变更建议清单{ #webapi_metadata_proposal_list }
所有提案均可列入清单：

    GET /api/metadata/proposals/

可以使用`filter`参数过滤结果列表。
例如，要只列出已接受的提案，请使用

    GET /api/metadata/proposals?filter=status:eq:ACCEPTED

同样，只显示公开提案的使用情况：

    GET /api/metadata/proposals?filter=status:eq:PROPOSED

过滤器也可应用于除 `change` 以外的任何字段。支持的过滤器操作符是 Gist Metadata API 中描述的操作符。这也包括 Gist API 中描述的属性转换器。

可用字段列表如下

| 领域       | 描述 |
| ----------- | -------------------------------------------------------------- |
| 本我          | 提案的唯一标识符 |
| 类型        | `ADD` a new object, `UPDATE` an existing object, `REMOVE` an existing object |
| 地位      | `PROPOSED` (open proposal), `ACCEPTED` (successful), `NEEDS_UPDATE` (accepting caused error or opposed), `REJECTED` |
| 目标      | type of metadata object to add/update/remove; currently only `ORGANISATION_UNIT` |
| targetId    | 更新或删除对象的 UID，未为`添加`定义 |
| 创建人   | 创建提案的用户 |
| 创建     | 创建提案的日期时间 |
| 定稿于 | 接受或拒绝建议的用户 |
| 定稿   | 提案转为接受或拒绝的决定性状态的日期时间 |
| 评论     | 为初步建议提供可选的纯文本注释 |
| 理由      | 可选的纯文本，在提案被反对或接受提案失败时出现的错误时给出 | 
| 改变      | JSON object for `ADD` proposal, JSON array for `UPDATE` proposal, nothing for `REMOVE` proposal |

### 查看元数据更改建议{ #webapi_metadata_proposal_show }
单个变更建议可通过以下方式查看 

    GET /api/metadata/proposals/<uid>

参数 `fields` 可用来缩小显示对象所包含字段的范围。例如

    GET /api/metadata/proposals/<uid>?fields=id,type,status,change

## 元数据 属性值 类型和验证{ #metadata-attribute-value-type-and-validations } 
| 类型 | 验证
|---| --- |
| 文本 | 没有
| LONG_TEXT | 没有
| 信 | 数值长度 = 1 并且是字母
| PHONE_NUMBER  | 验证基于此 regex `^[0-9+\(\)#\.\s\/ext-]{6,50}$`.最大长度为 50。  <br /> 例如+4733987937, (+47) 3398 7937, (47) 3398 7937.123
| 电子邮件 | 一般电子邮件格式 abc@email.com
| BOOLEAN | `true` or `false`
| TRUE_ONLY | Only accept `true`
| 日期 | Use format `yyyy-MM-dd`
| 日期 | 使用格式`yyyy-MM-dd HH:mm:ssZ` 或`yyyy-MM-dd'T'HH:mm:ss`。
| 时间 | Use fornat `HH:mm`
| 数字 | 数值必须是数字，最大长度 = 250
| UNIT_INTERVAL | 数值为数字，包含 0 和 1 之间的值
| 百分比 | 数值是 0-100 范围内的一个数字
| 整数 | 值为整数
| INTEGER_POSITIVE | 值为正整数
| INTEGER_NEGATIVE | 值为负整数
| INTEGER_ZERO_OR_POSITIVE | 值为正整数或零整数
| TRACKER_ASSOCIATE | 没有
| 用户名 | Value is a username of an existing `User`
| 协调 | 没有
| ORGANISATION_UNIT | Value is a valid UID of an existing `OrganisationUnit`
| 参考资料 | 没有
| 年龄 | 值为出生日期。使用与 DATE 类型相同的格式。
| 网址 | 值是一个有效的 URL
| FILE_RESOURCE | 值是现有`文件资源`的有效 UID
| 图片 | 值是现有`文件资源`的有效 UID
| GEOJSON |遵循 [GeoJson 规范](https://geojson.org)
| MULTI_TEXT | 没有

## 复制程序{ #copy-program } 

### 介绍 { #introduction } 

A user will often want to create many `Program`s which share many of the same characteristics, and instead of having to create a new `Program` from scratch, it is efficient and beneficial to copy an existing `Program` and make modifications to it.  
A template `Program` could theoretically be setup as a base to copy from, which may help with the consistency of `Program` setups also.

### 应用程序接口信息{ #api-info } 

#### 端点{ #endpoint } 

    POST /api/programs/{uid}/copy

具有 `UID` 为 `Program123a` 的 `Program` 的示例

    POST /api/programs/Program123a/copy

Successful response will include the new `Program` `UID` and will look like this:

```json
{
    "httpStatus": "Created",
    "httpStatusCode": 201,
    "status": "OK",
    "message": "Program created: 'Program456b'"
}
```

The response will also contain a `Location` header with a link to the newly-created `Program`. e.g. when run locally the `Location` value would be `http://localhost:9090/api/programs/Program456b`

#### 复制选项{ #copy-options } 

API 确实允许提供自定义前缀，该前缀将作为以下属性的前缀。

| 目的           | 物业  | 信息                                     |
|------------------|-----------|------------------------------------------|
| 程序          | 名称      | 帮助确定新计划            |
| 计划指示器 | 名称      | 数据库约束 - 需要唯一 |
| 计划指示器 | 简称 | 数据库约束 - 需要唯一 |

In this example when a custom prefix is supplied, an original `Program` with a name of `My Simple Program` would be copied to a new `Program` with the name `my prefix My Simple Program` 

If no copy options are sent in the API call then the default `Copy of ` prefix will be used for the above properties.  
To send a custom prefix just add a HTTP request param `prefix` like so:  

     POST /api/programs/{uid}/copy?prefix=my prefix 

> **注**
>
> 数据库对属性所允许的字符数有限制。在撰写本文时，这些限制已在下表中列出。请注意这些限制。

| 物业  | 字数限制 |
|-----------|-----------------|
| 名称      | 230             |
| 简称 | 50              |

如果属性超出了字符数限制，则会像这样返回错误信息：

```json
{
    "httpStatus": "Conflict",
    "httpStatusCode": 409,
    "status": "ERROR",
    "message": "ERROR: value too long for type character varying(230)",
    "errorCode": "E1004"
}
```

如果试图复制一个未找到的程序，将返回类似这样的响应：
```json
{
    "httpStatus": "Not Found",
    "httpStatusCode": 404,
    "status": "ERROR",
    "message": "Program with id {uid} could not be found.",
    "errorCode": "E1005"
}
```

### 授权{ #authorisation } 

#### 当局{ #authorities } 

A `User` will need the following authorities to be able to copy a `Program`:

- f_program_public_add
- F_program_indicator_public_add

#### 访问 { #access } 

A `Program` needs one of the following states for it to be able to be copied:

- Public `read` & `write` access
- A specific `User` to have sharing `read` & `write` access
- A `User` is part of a `UserGroup` that has sharing `read` & `write` access

If a `User` does not have the correct permissions, a `Forbidden` response is returned like so:

```json
{
    "httpStatus": "Forbidden",
    "httpStatusCode": 403,
    "status": "ERROR",
    "message": "You don't have write permissions for Program Program123a",
    "errorCode": "E1006"
}
```

### 注意事项{ #points-to-note } 

#### 深度和浅度复制{ #deep-and-shallow-copy } 

When a `Program` is copied, certain properties of the `Program` need different kinds of copying. It is important to be aware of what has been deep-copied and what has been shallow-copied.  
First of all let's explain the difference between deep and shallow copying in this context.  

##### 深度复制{ #deep-copy } 

A deep copy in this context means that a completely new instance of a `Program` or `Program` property has been created with its own unique identifiers. These include amongst others:

- 本我
- uid  

Deep copies of `Program` properties will all belong to the newly-created `Program` copy.

##### 浅层复制{ #shallow-copy } 

这里的浅层拷贝是指现有的 `Program` 属性将被新创建的 `Program` 或 `Program` 属性重用。

#### 深度复制的属性{ #properties-that-get-deep-copied } 

以下所有属性均已深度复制。表中未包含的任何内容都表示已被浅复制。

| 目的                         | 财产  |
|--------------------------------|--------------|
| 程序                        |              |
| 计划部分                 | 程序      |
| 计划指示器               | 程序      |
| 程序规则变量            | 程序      |
| 程序阶段                   | 程序      |
| 节目阶段部分            | 程序阶段 |
| ProgramStageSectionDataElement | 程序阶段 |
| 注册                     |              |

> **注**
>
> 作为初始方法，以下属性被设置为空。这种方法可以在开始时保持简单。  

| 目的                        | 物业          |
|-------------------------------|-------------------|
| 计划指示器              | 组别            |
| 节目阶段部分           | 计划指标 |
| 注册                    | 活动            |


# 元数据 Gist API{ #gist_api } 
<!--DHIS2-SECTION-ID:gist_api-->

元数据 Gist API 是一个 RESTful 只读 JSON API，用于获取和浏览元数据。 
元数据。此 API 中的项目包含 Metadata API 中相同项目的要点。

应用程序接口是专门为避免以下情况而设计的：

* 由于包含部分嵌套对象，响应有效载荷较大 
  图形。
* 内存处理请求的资源密集型 
  (例如内存过滤或对象图遍历）。
* _n+1_个数据库查询，作为渲染时对象图遍历的结果
  的回应。

## 与元数据应用程序接口{ #gist_vs_metadata_api } 的比较 
<!--DHIS2-SECTION-ID:gist_vs_metadata_api-->

标准元数据应用程序接口是一个灵活而强大的应用程序接口，可为任何 
用例。
但这样做的缺点是，并非所有功能和组合都能在扩展的同时 
同时保持良好的性能。
尤其是带有项目的列表，其中每个项目本身都有一个属性，而这个属性是一个复杂对象的大集合。 
的大量复杂对象的集合，这已被证明是个问题，因为它们会很快
引用整个对象图的很大一部分。

添加`/gist`应用程序接口是为了提供一个元数据应用程序接口，其中良好的扩展性是我们的 
的首要任务。这样做的弊端是对
技术上合理的功能，这意味着并非标准元数据 API 的所有功能都适用于 Gist API。 
标准元数据 API 的所有功能都适用于 Gist API。

The Gist API uses a divide and conquer strategy to avoid responses with large
partial object graphs. Instead of including nested objects or lists it provides
a `/gist` endpoint URI where this object or list can be viewed in isolation.

**`/gist` API 使用 URI 而不是包含嵌套数据**。
这意味着，如果客户端对嵌套信息感兴趣，则需要更多请求
需要更多请求，但每个请求都保持在合理的小范围内，在潜在项目数量巨大的情况下也能很好地扩展
这意味着如果客户端对这些嵌套信息感兴趣，则需要更多请求，但每个请求的数量都保持在合理的范围内，而且在潜在项目数量巨大的情况下也能很好地扩展。

已知差异：

* 项目只包括被引用的可识别对象的字段，如果这些字段没有
  有自己的终端
* 它从不直接包括可识别的对象集合
* 默认情况下，项目并不包括所有可用字段，而是包括一个子集，该子集取决于 
  关于背景和参数
* 列表不能在没有 pager 的情况下使用（因此没有 `pager` 参数）
* fields with collections are not paged using the `pager`-transformer but through
  特定集合属性的分页 API 端点
* 列表中的项目、集合属性大小或布尔转换器结果 
  总是考虑对象共享（考虑的项目集合总是
  用户可见）
* Gist 提供`member(<id>)`和`not-member(<id>)`集合字段转换器
* Gist offers `canRead` and `canWrite` access check filter instead of filtering
  on the `access` property
* Gist 提供了使用属性 UID 作为字段和过滤器属性名称的方法，以便
  根据自定义属性值进行列表或筛选
* Gist 提供过滤分组功能
* Gist 提供了使用 `pageListName` 重命名分页响应中的 enrty 列表的方法
* Gist 提供拔取多个简单属性的功能

已知限制

* 默认情况下只包括持久性；少数几个特殊的 
  可以明确添加非持久字段（合成字段）；其他 
  非持久字段也许可以使用 `from` 转换来提取
* 筛选器只能应用于持久化字段
* 命令只能应用于持久化字段
* 令牌过滤器不可用
* 顺序总是区分大小写
* `pluck` transformer limited to text properties (or simple properties for multi-pluck)
* 保存简单（不可识别）项目集合的字段不能总是
  视其存储方式而定

在可能的情况下，应将使用 `/gist` API 视为获取元数据信息的首选方式。
获取元数据信息。


## 终点{ #gist_endpoints } 
<!--DHIS2-SECTION-ID:gist_endpoints-->

`/gist` API 有 3 种端点：

* <code>/api/&lt;object-type><b>/gist</b></code>: paged list of all known and visible objects of the type (implicit `auto=S`)
* <code>/api/&lt;object-type&gt;/&lt;object-id&gt;<b>/gist</b></code>: view single object by ID (implicit `auto=L`)
* <code>/api/&lt;object-type&gt;/&lt;object-id&gt;/&lt;field-name&gt;<b> /gist</b></code> : 物件所有者字段集合中所有已知和可见项目的分页列表（隐式 `auto=M`；如果是简单字段，则只显示字段值）。

These endpoints correspond to the endpoints of the standard metadata API without 
the `/gist` suffix and share the majority of parameters and their options with 
that API.


## 浏览数据{ #gist_browse } 
<!--DHIS2-SECTION-ID:gist_browse-->

由于 `/gist` 应用程序接口避免在响应中使用深嵌套数据结构，因此会提供被引用的复杂对象或对象列表的详细信息。
引用的复杂对象或对象列表的详细信息会以
gist 端点的 URI 形式提供，该端点只返回复杂对象或对象列表。
对象列表。这些 URI 由项目的 `apiEndpoints` 字段提供。
字段提供，当存在此类引用时，它会自动添加到项目中。
项属性本身可能包含对象或集合的转换结果
或集合的转换结果，例如其大小、空性、非空性、id 或摘取的 
属性（如名称）。

要手动浏览数据，使用 `absoluteUrls=true` 参数会很方便。
现在，在可渲染 JSON 响应的浏览器中，可直接跟踪要旨各部分之间的链接。
呈现 JSON 响应。


## 参数{ #gist_parameters } 
<!--DHIS2-SECTION-ID:gist_parameters-->

All endpoints of the `/gist` API accept the same set of parameters.
Parameters and their options that do not make sense in the endpoint context are 
ignored.


### 总览 { #overview } 
参数按字母顺序排列：

| 参数      | 选项               | 默认                            | 描述          |
| -------------- | --------------------- |------------------------------------| ---------------------|
| `absoluteUrls` | `true` or `false`     | `false`                            | `true` use relative paths in links, `false` use absolute URLs in links |
| `auto`         | `xs`, `s`, `m`, `l`, `xl` | (视情况而定）                | extent of fields selected by `*` field selector |
| `fields`       | (取决于终端） | `*`                                | 以逗号分隔的要包含的字段或预置列表 |
| `filter`       | `<field>:<operator>` or `<field>:<operator>:<value>` |                                    | 以逗号分隔的查询字段筛选器列表（可多次使用） |
| `headless`     | `true` or `false`     | `false`                            | `true` skip wrapping result in a pager (ignores `total`), `false` use a pager wrapper object around the result list |
| `inverse`      | `true` or `false`     | `false`                            | `true` return items **not** in the list, `false` return items in the list |
| `locale`       |                       | (用户账户配置语言） | 翻译语言覆盖 |
| `order`        | `<field>` 或 `<field>:asc` 或 `<field>:desc` | `:asc`                             | 以逗号分隔的查询顺序字段列表（可多次使用） |
| `page`         | 1-n                   | 1                                  | 页码 |
| `pageSize`     | 1-1000                | 50                                 | 页数 |
| `pageListName` | `<text>` | （对象类型复数） | 重置结果条目列表的属性名称 | 
| `rootJunction` | `与`或`或`         | `AND`                              | logical combination of `filter`s, `AND`= all must match, `OR`= at least one must match |
| `total`/`totalPages`        | `true` or `false`     | `false`                            | `true` add total number of matches to the pager, `false` skip counting total number of matches |
| `translate`    | `true` or `false`     | `true`                             | `true` translate all translatable properties, `false` skip translation of translatable properties (no effect on synthetic display names) |



### The `absoluteUrls` Parameter { #gist_parameters_absoluteUrls } 
<!--DHIS2-SECTION-ID:gist_parameters_absoluteUrls-->

By default, URIs in `apiEndpoints`, `href` and the `pager` `prev` and `next` 
members are relative, starting with `/<object-type>/` path.

可以使用 `absoluteUrls` 参数将 URI 更改为绝对 URL。

例如，`/api/users/rWLrZL8rP3K/gist?fields=id,href` 返回：

```json
{
  "id": "rWLrZL8rP3K",
  "href": "/users/rWLrZL8rP3K/gist"
}
```

其中 `/api/users/rWLrZL8rP3K/gist?fields=id,href&absoluteUrls=true` 返回 
返回：

```json
{
  "id": "rWLrZL8rP3K",
  "href": "http://localhost:8080/api/users/rWLrZL8rP3K/gist?absoluteUrls=true"
}
```

As the example shows the `absoluteUrls` parameter is also forwarded or carried
over to the included URLs so allowing to browse the responses by following the 
provided URLs.


### The `auto` Parameter { #the-auto-parameter } 
每个端点都隐式地设置了由
`*` / `:all` 字段选择器匹配的字段范围的默认值：

* `/api/<object-type>/gist`：意味着`auto=S`。
* `/api/<object-type>/<object-id>/gist`：意味着`auto=L`。
* `/api/<object-type>/<object-id>/<field-name>/gist`：意味着 `auto=M`。

The `auto` parameter is used to manually override the default to make list items
include more or less fields. This setting again acts as a default which can be
further overridden on a per field basis using an explicit transformation.

Possible options for `auto` are ("t-shirt sizes"):

* `XS`: includes only IDs and textual properties
* `S`: excludes complex (object) properties, collection are only linked (not counted)
* `M`: complex included as reference URL, references and collections as count and reference URL
* `L`: like `M` but references and collections included as IDs (OBS! unbound in size)
* `XL`: 与 `L` 类似，但引用和集合作为 ID 对象包含在内：`{ "id"： <id> }`

For example, `/api/users/gist` would list items with fields `id`, `surname`, 
`firstName`, `phoneNumber`, `email`, `lastUpdated` whereas 
`/api/users/gist?auto=XS` only lists `id`, `surname`,
`firstName`, `phoneNumber`, `email`. Using `/api/users/gist?auto=L` would also
include `organisationUnits`, `dataViewOrganisationUnits`, 
`teiSearchOrganisationUnits` and `userGroups` each with the list of IDs of the
members in the lists/sets.


### The `fields` Parameter { #gist_parameters_fields } 
<!--DHIS2-SECTION-ID:gist_parameters_fields-->

指定每个列表项目要包含的字段列表。

Fields are included in the result JSON objects for an item in the provided order.
A preset in the list of fields is expanded to the fields it contains at the 
position in the `fields` list it appears.
Fields within the preset are ordered from simple to complex.

如果没有提供 `fields` 参数，则假定`fields=*`。
请注意，`*` 预置的字段也取决于 `auto` 参数

要删除字段，请使用字段列表中的 `!<name>` 或 `-<name>`。
例如，要删除用户的 userGroups，请使用

    /api/users/gist?fields=*,!userGroups

同样的原理也可用于指定一个字段使用的变压器。 
字段的转换器。例如，要包含用户的用户组 ID，请使用

    /api/users/gist?fields=*,userGroups::ids

The `fields` parameter does allow listing fields of nested objects. 
For example to add `userCredentials` with `id` and `name` of a user use:

    /api/users/gist?fields=*,userCredentials[id,username] /api/users/gist?

这样就创建了格式为

```json
{
  ...
  "userCredentials": {
    "id": "Z9oOHPi3FHB",
    "username": "guest"
  }
}
```

当包含集合的嵌套字段时，嵌套字段必须是文本属性。
属性。 

例如，通过以下方式包含用户的`userGroups`的所有`名称`：

    /api/users/gist?fields=*,userGroups[name]

This lists the `userGroups` as:

```json
{
  "userGroups": {
    "name": [
      "_PROGRAM_Inpatient program",
      "_PROGRAM_TB program",
      "_DATASET_Superuser",
      "_PROGRAM_Superuser",
      "_DATASET_Data entry clerk",
      "_DATASET_M and E Officer"
    ]
  }
}
```
上述功能与

    /api/users/gist?fields=*,userGroups::pluck(name)~rename(userGroups.name)

当请求单个字段（如 `/api/users/gist?fields=surname`）时，响应是一个简单值的列表（仍然是分页的）。
响应是一个（仍然分页的）简单值列表：

```json
{
  "pager": {
    "page": 1,
    "pageSize": 50
  },
  "users": [
    "Kamara",
    "Wakiki",
    "Nana",
    "Malai",
    ...
  ]
}
```

When requesting a single field of a specific owner object which has a simple
(non collection) value, like for example 
`/api/users/rWLrZL8rP3K/gist?fields=surname` the response only include the plain
JSON value:

```json
"Wakiki"
```

有关字段预设的更多详情，请参阅 [字段](#gist_fields) 部分。

### The `filter` Parameter { #gist_parameters_filter } 
<!--DHIS2-SECTION-ID:gist_parameters_filter-->

要过滤返回的项目列表，请添加一个或多个`过滤器`参数。

Multiple filters can either be specified as comma-separated list of a single 
`filter` parameter or as multiple `filter` parameters each with a single filter.

过滤器有两种类型：

* 一元： `<field>:<operator>`
* 二进制： `<field>:<operator>:<value>`

一个字段可以是 

* 所列项目类型的持久字段 
* 直接引用对象的持久字段（1:1 关系）
* 一个属性的 UID

可用的一元运算符有

| 一元运算符 | 描述                                                 |
| -------- | ----------------------------------------------------------------- |
| `null`   | 字段为_null_（未定义）                                       |
| `!null`  | field is _not null_ (defined)                                     |
| `empty`  | 字段是_空_集合或字符串                           |
| `!empty` | 字段是一个_非空_集合或字符串                       |

可用的二进制运算符有

| 二进制运算符   | 描述                                              |
| ----------------- | -------------------------------------------------------- |
| `eq`              | 字段 _equals_ 值                                     |
| `ieq`             | 字段 _equals_ 值（不区分大小写）                  |
| `!eq`, `neq`, `ne`| field is _not equal_ value                               |
| `lt`              | 字段_小于_值                               |
| `le`, `lte`       | field is _less than or equal to_ value                   |
| `gt`              | field is _greater than_ value                            |
| `ge`, `gte`       | field is _greater than or equal to_ value                |
| `in`              | field is a collection and value is an item _contained in_ the collection |
| `!in`             | 字段是一个集合，而值是一个_不包含在_集合中的项目 |

If the `<value>` of an `in` or `!in` filter is a list it is given in the form
`[value1,value2,...]`, for example: `userGroups:in:[fbfJHSPpUQD,cYeuwXTCPkU]`.

Any `>`, `>=`, `<` `<=`, `==` or `!=` comparison applied to a collection field 
with a numeric value will compare the size of the collection to the value, for
example: `userGroups:gt:0`.

Any `>`, `>=`, `<` `<=`, `==` or `!=` comparison applied to a text field 
with a integer number value will compare the text length to the value, for 
example: `name:eq:4` (name has length 4).


可用的二进制模式匹配运算符有

| 二进制运算符                   | 描述                              |
| --------------------------------- | ---------------------------------------- |
| `like`, `ilike`                   | field _contains_ `<value>` or field _matches_ pattern `<value>` (when wildcards `*` or `?` in value) |
| `!like`, `!ilike`                 | field does _not contain_ `<value>` or field does _not match_ pattern `<value>` (when wildcards `*` or `?` in value) |
| `$like`, `$ilike`, `startsWith`   | 字段_开头为_ `<value>`            |
| `!$like`, `!$ilike`, `!startsWith`| field does _not start with_ `<value>`    |
| `like$`, `ilike$`, `endsWith`     | 字段_ends with_ `<value>`              |
| `!like$`, `!ilike$`, `!endsWith`  | field does _not end with_ `<value>`      |

The `like` and `!like` operators can be used by either providing a search term
in which case a match is any value where the term occurs anywhere, or they can
be used by providing the search pattern using `*` as _any number of characters_
and `?` as _any single character_.

所有名为 `like` 的模式匹配运算符都区分大小写。所有其他 
不区分大小写。 

请注意，属性值筛选器使用基于文本的比较，这意味着 
支持所有文本筛选器。

例如，要只列出二级机构，请使用

    /api/organisationUnits/gist?filter=level:eq:2

Similarly, when listing the `children` of a particular organisation unit the
collection can be filtered. To only list those children that are connected to
a program one would use:

    /api/organisationUnits/rZxk3S0qN63/children/gist?filter=programs:gt:0

基于访问（共享）过滤的二进制运算符：

| 二进制运算符   | 描述                                              |
| ----------------- | -------------------------------------------------------- |
| `canRead`         | 用户 `<value>` 是否拥有读取对象元数据的权限 |
| `canWrite`        | 用户 `<value>` 元数据是否有写入对象的权限 |
| `canDataRead`     | 用户 `<value>` 是否拥有读取对象数据的权限    |
| `canDataWrite`    | 用户 `<value>` 拥有写入对象数据的权限   |
| `canAccess`       | 用户 `<value0>` 拥有对象 `<value1>` 的权限  |

当省略用户 ID `<value>` 时，将对当前登录的用户进行检查。
登录用户进行检查。同样，如果在 `canAccess` 过滤器中省略了 `<value0>`，则会对当前登录的用户进行检查。
则会对当前登录的用户进行检查。

When applied to a simple value property, here `code`, the filter restricts the response to
those data elements (owner object) the user can read/write:

    /api/dataElements/gist?filter=code:canWrite:OYLGMiazHtW

When applied to a reference property, here `categoryCombo`, the filter restricts the response 
to those data elements having a category combo that the user can read/write:

    /api/dataElements/gist?filter=categoryCombo:canWrite:OYLGMiazHtW

当应用到引用集合属性（此处为 `dataElementGroups` ）时，过滤器会将响应限制为数据元素组在引用集合中存在的数据元素。
过滤器会将响应限制在数据元素组存在于
集合属性中存在数据元素组且用户可以读/写的数据元素：

    /api/dataElements/gist?filter=dataElementGroups:canWrite:OYLGMiazHtW

The `canAccess` expects two arguments, 1st is user ID, 2nd the access pattern,
for example to check metadata read and write access the pattern is `rw%`:

    /api/dataElements/gist?filter=code:canAccess:[OYLGMiazHtW,rw%]。


此外，还可以对筛选器进行分组，以便在一般筛选器组合器为逻辑 AND 时，用逻辑 OR 组合所选筛选器，反之亦然。 
逻辑 OR 组合选定的筛选器，反之亦然 
当一般组合器为逻辑 OR 时，则使用逻辑 AND。

对于组，过滤模式扩展如下：

* 一元： `<group>:<field>:<operator>`
* 二进制： `<group>:<field>:<operator>:<value>`

组是介于 `0` 和 `9` 之间的任意数字（省略时假定为 `0`）。 
则假定为 0）。 

The behaviour is best explained with a small example for an imaginary object
type with an `age` and `name` property.

    filter=1:age:eq:50&filter=2:name:eq:foo&filter=2:name:eq:bar

上述过滤器有两个组`1`和`2`，`2`组有 2 个成员。
这等同于 SQL 语句（注意其中的 `and` 和 `or` 以及 
分组大括号）：

    e.age = 50 且（e.name = 'foo' 或 e.name = 'bar')

现在，如果将相同的`过滤器`与`rootJunction=OR`结合使用

    filter=1:age:eq:50&filter=2:name:eq:foo&filter=2:name:eq:bar&rootJunction=OR

的效果将等同于下面的 SQL 语句：

    e.age = 50 或 (e.name = 'foo' and e.name = 'bar')


### The `headless` Parameter { #gist_parameters_headless } 
<!--DHIS2-SECTION-ID:gist_parameters_headless-->

Endpoints returning a list by default wrap the items with an envelope containing 
the `pager` and the list, which is named according to the type of object listed.

例如 `/api/organisationUnits/gist` 返回：

```json
{
  "pager": {
    "page": 1,
    "pageSize": 50,
    "nextPage": "/organisationUnits/gist?page=2"
  },
  "organisationUnits": [
    ...
  ]
}
```

With `headless=true` the response to `/api/organisationUnits/gist?headless=true` 
is just the `[...]` list part in above example.


### The `inverse` Parameter { #the-inverse-parameter } 
The `inverse` can be used in context of a collection field gist of the form 
`/api/<object-type>/<object-id>/<field-name>/gist` to not list all items that
are contained in the member collection but all items that are **not** contained
in the member collection.

例如，当 

    /api/organisationUnits/rZxk3S0qN63/children/gist

将列出作为`rZxk3S0qN63`子级的所有组织单位

    /api/organisationUnits/rZxk3S0qN63/children/gist?inverse=true

将列出所有不是 `rZxk3S0qN63` 子单元的组织单元。 
例如，这可用于编制所有可成为某一特定单元的子单元的列表。 
的所有单位的列表。

过滤和排序通常会应用，这意味着它们会过滤或排序
不包含在成员集合中。


### The `locale` Parameter { #gist_parameters_locale } 
<!--DHIS2-SECTION-ID:gist_parameters_locale-->
The `locale` parameter is usually used for testing purposes to ad-hoc switch 
translation language of display names. 

If not specified the translation language is the one configured in the users
account settings.

Examples:

    /api/organisationUnits/gist?locale=en
    /api/organisationUnits/gist?locale=en_GB

### The `order` Parameter { #gist_parameters_order } 
<!--DHIS2-SECTION-ID:gist_parameters_order-->

要对项目列表进行排序，可以给出一个或多个顺序表达式。

顺序表达式既可以是一个持久化字段的字段名，也可以是一个字段名后跟有
字段名后的 `:asc`（升序，默认值）或 `:desc`（降序，默认值）。 
(降序）。

例如，要按名称的字母顺序对组织单位进行排序，请使用

    /api/organisationUnits/gist?order=name

按字母顺序倒序排列：

    /api/organisationUnits/gist?order=name:desc

要先按级别，然后按名称对组织单位进行排序，请使用

    /api/organisationUnits/gist?order=level,name

这将从第 1 级的根单元开始。要从叶单元开始，请使用

    /api/organisationUnits/gist?order=level:desc,name

如果没有指定顺序，结果列表将根据 
内部数据组织的稳定顺序。


### The `page` Parameter { #gist_parameters_page } 
<!--DHIS2-SECTION-ID:gist_parameters_page-->

指在分页列表中查看的页面，以`1`开头的第一页。

如果不存在`page`参数，则等于`page=1`。

The `page` is always in relation to the `pageSize`.
If a `page` is given beyond the number of existing matches an empty item list
is returned.


### The `pageSize` Parameter { #gist_parameters_pageSize } 
<!--DHIS2-SECTION-ID:gist_parameters_pageSize-->

指的是`页面`上的项目数。最多 1000 个项目。

如果没有`pageSize`参数，则等于`pageSize=50`。


### The `rootJunction` Parameter { #gist_parameters_rootJunction } 
<!--DHIS2-SECTION-ID:gist_parameters_rootJunction-->

The `rootJunction` parameter can be used to explicitly set the logic junction
used between filters. Possible are:

* `AND`: all filters have to match an entry for it to be included in the results
* `OR`: any of the filters matches an entry for it to be included in the results

默认为`与`。


### The `pageListName` Parameter { #gist_parameters_pageListName }
<!--DHIS2-SECTION-ID:gist_parameters_pageListName-->
The array property in a paged response that contains the matching entry list is 
named  after the object type contained in the list. 
For `/api/organisationUnits/gist` it would be named `organisationUnits`.

This default naming can be customized using the `pageListName` parameter.
For example, `/api/organisationUnits/gist?pageListName=matches` returns a
response root object with the format:

```json
{
  "pager": {},
  "matches": []
}
```
(details of the pager and matches are omitted here)


### The `total` or `totalPages` Parameter { #gist_parameters_total } 

<!--DHIS2-SECTION-ID:gist_parameters_total-->

By default, a gist query will **not** count the total number of matches should 
those exceed the `pageSize` limit. Instead, we opt-in to the additional costs
the total count implicates.

When not counting the total matches (`total=false`) the response `pager` will
assume that there is a `next` page in case `pageSize` items were found. This
could however turn out to be false when browsing to the page. Also, the `total`
field stating the number of total matches is not included in the `pager`.

例如，`/api/organisationUnits/gist` 返回一个`pager`：

```json
{
  "pager": {
    "page": 1,
    "pageSize": 50,
    "nextPage": "/organisationUnits/gist?page=2"
  }
}
```

When counting the total matches (`total=true`) the response `pager` will 
contain the `total` field with the actual number of total matches at the cost
of an additional database operation.

对 `/api/organisationUnits/gist?total=true`的响应现在会返回这个 `pager`：

```json
{
  "pager": {
    "page": 1,
    "pageSize": 50,
    "total": 1332,
    "nextPage": "/organisationUnits/gist?total=true&page=2",
    "pageCount": 27
  }
}
```


### The `translate` Parameter { #gist_parameters_translate } 
<!--DHIS2-SECTION-ID:gist_parameters_translate-->

像`name`或`shortName`这样的字段可以被翻译（国际化）。

默认情况下，任何有翻译的可翻译字段都会被翻译后返回。
的翻译字段。

要返回普通的非翻译字段，请使用 `translate=false`。

例如，`/api/organisationUnits/gist` 会返回如下项目：

```json
{
  "name": "A translated name",
  ...
}
```

而 `/api/organisationUnits/gist?translate=false`会返回类似的项目：

```json
{
  "name"
  "Plain field name",
  ...
}
```

Note that synthetic fields `displayName` and `displayShortName` are always
returning the translated value independent of the `translate` parameter.


## 字段{ #gist_fields } 
<!--DHIS2-SECTION-ID:gist_fields-->

The fields included by default (without `fields` parameter) correspond to 
`fields=*`. 
This means the list of fields shown depends on object type, endpoint context as 
well as the `auto` parameter.

Note that the `/gist` API always excludes certain fields that usually are of no 
interest to clients, like for example the `translations` or `sharing` fields. 
These can be added explicitly.

如果未在`字段`参数中明确提供字段名称，则字段列表将从预设值中计算得出。 
字段列表是通过预设计算得出的。
预设可以像字段名一样用于字段列表。 
根据对象类型、使用的 
端点和选择器。


### 现场预设{ #field-presets } 

* `*` / `:all`：默认字段取决于上下文和 `auto` 参数
* `:identifiable`: all persisted fields of the `IdentifiableObject` interface
* `:owner`: all persisted fields where the listed type is the owner
* `:nameable`: all persisted fields of the `NameableObject` interface
* `:持久化`：字面意义上的所有持久化字段


### 现场变压器{ #field-transformers } 
转换器或转换可以通过在转换器表达式后添加 
指示符 `::`、`~` 或 `@`，并在变换表达式后添加这些指示符。

可用的变压器表达式有

| 变压器          | JSON 结果类型       | 描述                                                                                           |
|----------------------|------------------------|-------------------------------------------------------------------------------------------------------|
| `rename(<name>)`     | --                      | 将响应中的字段重命名为 `<name>`                                                         |
| `size`               | `number`               | 藏品字段中的数量                                                               |
| `isEmpty`            | `boolean`              | 收集领域的空虚                                                                       |
| `isNotEmpty`         | `boolean`              | 集合字段不完整                                                                   |
| `ids`                | `string` or `[string]` | 对象的 ID 或集合项的 ID                                                            |
| `id-objects`         | `[{"id":<id> }]`     | 作为对象的集合项目 ID                                                                     |
| `member(<id>)`       | `boolean`              | 具有`<id>`的成员用于集合字段                                                           |
| `not-member(<id>)`   | `boolean`              | 集合字段中没有具有`<id>`的成员                                                       |
| `pluck(<field>,...)` | `string` or `[string]` | 从对象或每个集合项中提取单个文本属性或多个简单属性 |
| `from(<field>,...)`  | 取决于豆类类型   | 从一个或多个持久字段中提取一个非持久字段                                      |

A field can receive both the `rename` transformer and one of the other 
transformers, for example:

    /api/organisationUnits/gist?fields=*,children::size~rename(child-count)

返回的项目现在不再有 `children` 成员，而是有一个 `child-count` 成员。
成员。请注意，`rename` 也会影响在 `apiEndpoints` 中给出的 URI
引用的成员名称。

The `from` transformation can be used with one or more persistent fields as
parameter. These will be loaded from the database, set in an instance of the 
listed element object before the non-persistent property transformed with 
`from` is extracted from that instance by calling the getter. This allows to 
extract derived fields while using the same logic that is used in usual metadata API.

For example, a user's (non-persistent property) `name` is composed of the 
persistent property `firstName` and `surname`. It can be fetched like this:

    /api/users/gist?fields=id,name~from(firstName,surname)

由于用户名是很常见的情况，因此添加了自动检测功能，这样在这种特殊情况下，`from` 转换会自动添加到`name`中。
在这种特殊情况下，"from "转换会自动添加到 "name "中。
我们可以使用以下内部添加 `from` 变量的方法 
转换：

    /api/users/gist?fields=id,name

While this makes non-persistent properties accessible in general these always 
have to be included in the `fields` explicitly. For a user this could be 
done using the following:

    /api/users/gist?fields=*,name


## 合成球场{ #gist_syntheticFields } 
<!--DHIS2-SECTION-ID:gist_syntheticFields-->

The `/gist` API is tightly coupled to properties that exist the database.
This means properties that aren't stored in the database usually aren't 
available.
The exception to this are the "synthetic" properties which are dynamically 
computed on the basis of one or more database stored properties.

合成属性适用于存在计算合成属性所需的持久化属性的所有端点。 
属性的所有端点都可使用合成属性。

Except for the `apiEndpoints` property which is automatically added when needed 
all other synthetic properties are not included by default and have to be 
requested explicitly in the list of `fields`.


### 总览 { #overview } 
合成字段按字母顺序排列：

| 领域              | 描述                                             |
| ------------------ | ------------------------------------------------------- |
| `apiEndpoints`     | 包含浏览嵌套复杂对象或集合的链接 |
| `href`             | 链接到列表项目本身（单个项目视图）         |
| `displayName`      | 已翻译的`名称`（始终已翻译）                   |
| `displayShortName` | 翻译的`shortName`（始终翻译）              |
| `access`           | 当前用户读/写/修改条目的能力摘要 |


### The `href` Field { #gist_syntheticFields_href } 
<!--DHIS2-SECTION-ID:gist_syntheticFields_href-->

Each item in a `/gist` response can link to itself. This link is given in the 
`href` property.

要添加 `href` 字段，请使用（例如）：

    /api/<object-type>/gist?fields=*,href

### The `displayName` and `displayShortName` Field { #gist_syntheticFields_displayName } 
<!--DHIS2-SECTION-ID:gist_syntheticFields_displayName-->

By definition the `displayName` is the translated `name` and the 
`displayShortName` is the translated `shortName`. 

要将 `displayName` 或 `displayShortName` 添加到列表中，请使用（例如）：

    /api/<object-type>/gist?fields=*,displayName
    /api/<object-type>/gist?fields=*,displayShortName

Note that by default all translatable properties like `name` and `shortName` 
would also be translated. When `translate=false` is used to disable this 
`displayName` and `displayShortName` stay translated.


### The `apiEndpoints` Field { #gist_syntheticFields_apiEndpoints } 
<!--DHIS2-SECTION-ID:gist_syntheticFields_apiEndpoints-->

This property provides the links to further browse complex objects or list of 
items that are included in the `/gist` response in form of a transformed simple 
value like an item count.

The `apiEndpoints` object will have a member of the same name for every member 
in the item that was transformed to a simple value.

例如 

    /api/users/gist?fields=id,userGroups::size,organisationUnits::size 

返回表格中的项目：

```json
{
  "id": "rWLrZL8rP3K",
  "userGroups": 0,
  "organisationUnits": 1,
  "apiEndpoints": {
    "organisationUnits": "/users/rWLrZL8rP3K/organisationUnits/gist",
    "userGroups": "/users/rWLrZL8rP3K/userGroups/gist"
  }
}
```

The list of `userGroups` and `organisationUnits` are included as their `size`. 
Each has a corresponding member in `apiEndpoints` with the path to browse the 
list.

可以使用 `absoluteUrls` 参数将路径更改为 URL。 

    /api/users/gist?fields=id,userGroups::size,organisationUnits::size&absoluteUrls=true

返回表格中的项目：

```json
{
  "id": "rWLrZL8rP3K",
  "userGroups": 0,
  "organisationUnits": 1,
  "apiEndpoints": {
    "organisationUnits": "http://{host}/api/users/rWLrZL8rP3K/organisationUnits/gist?absoluteUrls=true",
    "userGroups": "http://{host}/api/users/rWLrZL8rP3K/userGroups/gist?absoluteUrls=true"
  }
}
```

### The `access` Field { #the-access-field } 
The `access` summary is based on the `sharing` and the current user.
This means it is only applicable for objects that have a `sharing` property.

For example, when listing data elements with `access` field

    /api/dataElements/gist?fields=*,access

返回的数据元素项包含一个`访问`成员，如下所示：

```json
"access": {
  "manage": false,
  "externalize": false,
  "write": false,
  "read": true,
  "update": false,
  "delete": false
}
```

### 属性作为字段{ #gist_attributeFields }
DHIS2 允许为元数据对象创建和添加自定义属性。
它们的值包含在元数据对象的 `attributeValues` 属性中。 
对象的 "attributeValues "属性中。

要直接列出该映射表中的一个或多个特定属性值，就好像它们是元数据对象的常规字段一样
元数据对象的常规字段一样，直接列出该映射表中的一个或多个特定属性值。
作为普通字段的名称。

例如，要将 UID `Y1LUDU8sWBR` 属性的值作为 
属性 `unit-of-measure`"的值，请使用

    /api/dataElements/gist?fields=id,name,Y1LUDU8sWBR::rename(unit-of-measure)

这样，列表项的形式就变成了
```json
{
  "id": "qrur9Dvnyt5",
  "name": "Age in years",
  "unit-of-measure": "years"
}
```

默认情况下，属性值以 JSON 格式获取，并从 
属性值的映射中提取。这意味着列表中将包含适合于
属性值类型。这样做的代价是获取所有 
属性值的开销。要在数据库中单独找出值，可使用 `PLUCK` 转换。 
转换。

    /api/dataElements/gist?fields=id,name,Y1LUDU8sWBR::rename(unit-of-measure)~pluck

结果看起来是一样的，但现在值会以文本形式提取到 
在属性输出中，数据库会将任何 JSON 值转换为字符串。 

## 例子 { #gist_examples } 
<!--DHIS2-SECTION-ID:gist_examples-->
从简单的列表到非常具体的使用案例，举几个例子。 

It is preferable to always supply an explicit list of `fields` so this section 
will do so. 

列出带有 ID 和名称的组织单位：

    /api/organisationUnits/gist?fields=id,name

列出组织单位的 ID、名称和总数：

    /api/organisationUnits/gist?fields=id,name&total=true

用 ID 和用户名列出用户：

    /api/users/gist?fields=id,userCredentials.username

根据 ID、用户名和最后登录日期列出用户：

    /api/users/gist?fields=id,userCredentials[username,lastLogin] /api/users/gist?

仅列出第二层的组织单位，并注明 ID、名称和层级：

    /api/organisationUnits/gist?fields=id,name,level&filter=level:eq:2

仅列出有 1 个以上子机构的组织单位，并注明 id、名称和
子女数量：

    /api/organisationUnits/gist?fields=id,name,children::size&filter=children:gt:1

仅列出尚未成为另一个单元的子单元的组织单元
`zFDYIgyGmXG`：

    /api/organisationUnits/zFDYIgyGmXG/children/gist?fields=id,name&inverse=true

List users and flag whether they are a member of a specific user group 
`NTC8GjJ7p8P` and name that field `is-member` in the response:

    /api/users/gist?fields=id,userCredentials.username,userGroups::member(NTC8GjJ7p8P)~rename(is-member)

列出所有用户的链接，每页 10 个项目：

    /api/users/gist?fields=href&absoluteUrls&pageSize=10




# 数据 { #data } 

## 数据值 { #webapi_data_values } 

本节关于发送和读取数据值。

    /api/dataValueSets

### 发送数据值 { #webapi_sending_data_values } 

要发送数据值，可以向以下资源发出 POST 请求。

```
POST /api/dataValueSets
```

A common use-case for system integration is the need to send a set of
data values from a third-party system into DHIS. In this example, we will
use the DHIS2 demo on `http://play.dhis2.org/demo` as basis. We assume
that we have collected case-based data using a simple software client
running on mobile phones for the *Mortality <5 years* data set in the
community of *Ngelehun CHC* (in *Badjia* chiefdom, *Bo* district) for
the month of January 2014. We have now aggregated our data into a
statistical report and want to send that data to the DHIS2 instance. The
base URL to the demo API is `http://play.dhis2.org/demo/api`. The following
links are relative to the base URL.


最适合我们发送数据的资源
values 是 `/api/dataValueSets` 资源。一个数据值集代表一个
一组具有关系的数据值，通常来自
从相同的数据输入表单中捕获。格式看起来像
这：

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataSet="dataSetID"
  completeDate="date" period="period" orgUnit="orgUnitID" attributeOptionCombo="aocID">
  <dataValue dataElement="dataElementID" 
    categoryOptionCombo="cocID" value="1" comment="comment1"/>
  <dataValue dataElement="dataElementID" 
    categoryOptionCombo="cocID" value="2" comment="comment2"/>
  <dataValue dataElement="dataElementID" 
    categoryOptionCombo="cocID" value="3" comment="comment3"/>
</dataValueSet>
```

JSON支持以下格式：

```json
{
  "dataSet": "dataSetID",
  "completeDate": "date",
  "period": "period",
  "orgUnit": "orgUnitID",
  "attributeOptionCombo": "aocID",
  "dataValues": [
    {
      "dataElement": "dataElementID", 
      "categoryOptionCombo": "cocID", 
      "value": "1", 
      "comment": "comment1"
    },
    {
      "dataElement": "dataElementID", 
      "categoryOptionCombo": "cocID", 
      "value": "2", 
      "comment": "comment2"
    },
    {
      "dataElement": "dataElementID", 
      "categoryOptionCombo": "cocID", 
      "value": "3", 
      "comment": "comment3"
    }
  ]
}
```

CSV支持以下格式：

```csv
“ dataelement”，“ period”，“ orgunit”，“ catoptcombo”，“ attroptcombo”，“ value”，“ strby”，“ lstupd”，“ cmt”
“ dataElementID”，“ period”，“ orgUnitID”，“ cocID”，“ aocID”，“ 1”，“用户名”，“ 2015-04-01”，“ comment1”
“ dataElementID”，“ period”，“ orgUnitID”，“ cocID”，“ aocID”，“ 2”，“用户名”，“ 2015-04-01”，“ comment2”
“ dataElementID”，“ period”，“ orgUnitID”，“ cocID”，“ aocID”，“ 3”，“用户名”，“ 2015-04-01”，“ comment3”
```

> **注**
>
> 有关时间格式，请参阅上文日期和周期部分。

> **注**
>
> 任何被视为未更改的导入数据值都将被忽略，导入摘要也将反映这一点。未更改的数据值是指以下 3 个属性的值都相同：
> - 值
> - 注释
> - 后续

从这个例子中，我们可以看出我们需要识别周期，
数据集、组织单位（设施）和数据元素
报告。

To obtain the identifier for the data set we make a request to the
`/api/dataSets` resource. From there we find and follow the link to 
the *Mortality < 5 years* data set which leads us to `/api/dataSets/pBOMPrpg1QX`. 
The resource representation for the *Mortality < 5 years* data set conveniently
advertises links to the data elements which are members of it. From here
we can follow these links and obtain the identifiers of the data
elements. For brevity we will only report on three data elements:
*Measles* with id `f7n9E0hX8qk`, *Dysentery* with id `Ix2HsbDMLea` and
*Cholera* with id `eY5ehpbEsB7`.

剩下的就是掌握组织的标识符
单元。 *dataSet* 表示方便地提供了到组织的链接
报告它的单位，所以我们搜索 *Ngelehun CHC* 并按照
链接到 `/api/organisationUnits/DiszpKrYNg8` 中的 HTML 表示，其中
告诉我们这个组织单位的标识符是`DiszpKrYNg8`。

根据我们基于病例的数据，我们假设我们有 12 例麻疹病例，14
痢疾16例，霍乱16例。我们现在已经聚集了足够的
能够将 XML 数据值集放在一起的信息
信息：

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataSet="pBOMPrpg1QX"
  completeDate="2014-02-03" period="201401" orgUnit="DiszpKrYNg8">
  <dataValue dataElement="f7n9E0hX8qk" value="12"/>
  <dataValue dataElement="Ix2HsbDMLea" value="14"/>
  <dataValue dataElement="eY5ehpbEsB7" value="16"/>
</dataValueSet>
```

JSON格式：

```json
{
  "dataSet": "pBOMPrpg1QX",
  "completeDate": "2014-02-03",
  "period": "201401",
  "orgUnit": "DiszpKrYNg8",
  "dataValues": [
    {
      "dataElement": "f7n9E0hX8qk", 
      "value": "1"
    },
    {
      "dataElement": "Ix2HsbDMLea", 
      "value": "2"
    },
    {
      "dataElement": "eY5ehpbEsB7", 
      "value": "3"
    }
  ]
}
```

To perform functional testing we will use the _curl_ tool which provides
an easy way of transferring data using HTTP. First, we save the data
value set XML content in a file called `datavalueset.xml`. From the
directory where this file resides we invoke the following from the
command line:

```bash
curl -d @datavalueset.xml "https://play.dhis2.org/demo/api/dataValueSets"
  -H "Content-Type:application/xml" -u admin:district
```

要发送 JSON 内容，您必须设置 content-type 标头
因此：

```bash
curl -d @datavalueset.json "https://play.dhis2.org/demo/api/dataValueSets"
  -H "Content-Type:application/json" -u admin:district
```

该命令将向演示 Web API 发送请求，设置
`application/xml` 作为内容类型并使用
`admin`/`district` 作为用户名/密码。如果一切顺利，这将返回一个
`200 OK` HTTP 状态代码。您可以验证数据是否已
通过在 DHIS2 中打开数据输入模块并选择组织来接收
本例中使用的单位、数据集和期间。

The API follows normal semantics for error handling and HTTP status
codes. If you supply an invalid username or password, `401 Unauthorized`
is returned. If you supply a content-type other than `application/xml`,
`415 Unsupported Media Type` is returned. If the XML content is invalid
according to the DXF namespace, `400 Bad Request` is returned. If you
provide an invalid identifier in the XML content, `409 Conflict` is
returned together with a descriptive message.

### 发送大量数据值 { #webapi_sending_bulks_data_values } 

前面的例子向我们展示了如何发送一组相关的数据值
共享同一时期和组织单位。这个例子将向我们展示
如何发送大量不一定是的数据值
逻辑相关。

我们将再次与`/api/dataValueSets` 资源交互。这次我们
不会指定 `dataSet` 和 `completeDate` 属性。此外，我们将
在单个数据值上指定 `period` 和 `orgUnit` 属性
元素而不是外部数据值集元素。这会
使我们能够发送不同时期和组织单位的数据值：

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0">
  <dataValue dataElement="f7n9E0hX8qk" 
    period="201401" orgUnit="DiszpKrYNg8" value="12"/>
  <dataValue dataElement="f7n9E0hX8qk" 
    period="201401" orgUnit="FNnj3jKGS7i" value="14"/>
  <dataValue dataElement="f7n9E0hX8qk" 
    period="201402" orgUnit="DiszpKrYNg8" value="16"/>
  <dataValue dataElement="f7n9E0hX8qk" 
    period="201402" orgUnit="Jkhdsf8sdf4" value="18"/>
</dataValueSet>
```

JSON格式：

```json
{
  "dataValues": [
    {
      "dataElement": "f7n9E0hX8qk", 
      "period": "201401", 
      "orgUnit": "DiszpKrYNg8", 
      "value": "12"
    }, 
    {
      "dataElement": "f7n9E0hX8qk", 
      "period": "201401", 
      "orgUnit": "FNnj3jKGS7i", 
      "value": "14"
    }, 
    {
      "dataElement": "f7n9E0hX8qk", 
      "period": "201402", 
      "orgUnit": "DiszpKrYNg8", 
      "value": "16"
    }, 
    {
      "dataElement": "f7n9E0hX8qk", 
      "period": "201402", 
      "orgUnit": "Jkhdsf8sdf4", 
      "value": "18"
    }
  ]
}
```

CSV格式：

```csv
“ dataelement”，“ period”，“ orgunit”，“ categoryoptioncombo”，“ attributeoptioncombo”，“ value”
“ f7n9E0hX8qk”，“ 201401”，“ DiszpKrYNg8”，“ bRowv6yZOF2”，“ bRowv6yZOF2”，“ 1”
“ Ix2HsbDMLea”，“ 201401”，“ DiszpKrYNg8”，“ bRowv6yZOF2”，“ bRowv6yZOF2”，“ 2”
“ eY5ehpbEsB7”，“ 201401”，“ DiszpKrYNg8”，“ bRowv6yZOF2”，“ bRowv6yZOF2”，“ 3”
```

我们通过使用curl以XML格式发送数据值进行测试：

```bash
curl -d @datavalueset.xml "https://play.dhis2.org/demo/api/dataValueSets"
  -H "Content-Type:application/xml" -u admin:district
```

请注意，使用 CSV 格式时，您必须使用二进制数据选项
保留 CSV 文件中的换行符：

```bash
curl --data-binary @datavalueset.csv "https://play.dhis2.org/demo/24/api/dataValueSets"
  -H "Content-Type:application/csv" -u admin:district
```

数据值集资源提供有用的 XML 响应
当您想验证您的请求所产生的影响时。我们第一次
发送上面的数据值设置请求，服务器将响应
以下导入摘要：

```xml
<importSummary>
  <dataValueCount imported="2" updated="1" ignored="1"/>
  <dataSetComplete>false</dataSetComplete>
</importSummary>
```

此消息告诉我们导入了 3 个数据值，1 个数据值是
在忽略零数据值时更新。单一更新来自
我们在上一个示例中发送该数据值的结果。一个数据
如果引用不存在的数据元素，值将被忽略，
期间、组织单位或数据集。在我们的例子中，这个被忽略的值是
由对组织单位的无效引用的最后一个数据值引起。
数据集完整元素将显示数据的日期
值集已完成，如果没有数据元素属性，则为 false
提供。

### 导入参数 { #webapi_data_values_import_parameters } 

可使用一组导入参数自定义导入过程。

表：导入参数

| 参数 | 数值（默认为先） | 描述 |
|---|---|---|
| 数据元素标识方案 | uid | name | code | attribute:ID | 用于映射数据值的数据元素对象的属性。 |
| orgUnitIdScheme | uid | name | code | attribute:ID | 用于映射数据值的 org 单位对象的属性。 |
| 属性 OptionComboIdScheme | uid | name | code | attribute:ID | 用于映射数据值的属性选项组合对象的属性。 |
| 类别选项组合IdScheme | uid | name | code | attribute:ID | 类别选项组合对象的属性，用于映射数据值。 |
| dataSetIdScheme | uid | name | code | attribute:ID | 用于映射数据值的数据集对象的属性。 |
| 类别 IDScheme | uid | name | code | attribute:ID | 类别对象的属性，用于映射数据值（仅限 ADX）。 |
| 类别选项 IDScheme | uid | name | code | attribute:ID | 类别选项对象的属性，用于映射数据值（仅限 ADX）。 |
| 方案 | uid | name | code | attribute:ID | 如果未指定，则使用上述任何对象的属性来映射数据值。 |
| 预热缓存 | 假 | 真 | 表示是否在开始导入数据值之前预加载元数据缓存，这将加快元数据卡片性高的大型导入有效载荷的速度。 |
| 干运行 | 假 | 真 | 是在服务器上保存更改，还是只返回导入摘要。 |
| 导入策略 | CREATE &#124; UPDATE &#124; CREATE_AND_UPDATE &#124; DELETE | 在服务器上保存所有、新增或更新导入状态的对象。 |
| 跳过现有检查 | 假 | 真 | 跳过对现有数据值的检查。提高性能。仅用于空数据库或导入的数据值不存在时。 |
| 跳过审计 | 假 | 真 | 跳过审计，即不生成审计值。提高性能的代价是无法审计更改。需要 "F_SKIP_DATA_IMPORT_AUDIT "授权。 |
| 异步 | 假 | 真 | 表示导入是以异步方式还是同步方式进行。前者适用于非常大的导入，因为它能确保请求不会超时，但性能开销很大。后者速度更快，但要求连接持续到进程结束。 |
| 强逼 | 假 | 真 | Indicates whether the import should be forced. Data import could be rejected for various reasons of data set locking for example due to approval, data input period, expiry days, etc. In order to override such locks and force data input one can use data import with force=true. However, one needs to be a \*superuser\* for this parameter to work. |
| 数据集 | uid | 为 CSV 导入提供数据集 ID，如果文件本身无法提供 ID |

所有参数都是可选的，可以作为查询参数提供
请求 URL 是这样的：

    /api/dataValueSets?dataElementIdScheme=code&orgUnitIdScheme=name
      &dryRun=true&importStrategy=CREATE

它们也可以作为数据值集上的 XML 属性提供
元素如下。 XML 属性将覆盖查询字符串
参数。

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataElementIdScheme="code"
  orgUnitIdScheme="name" dryRun="true" importStrategy="CREATE">
</dataValueSet>
```

请注意，`preheatCache` 参数会对
表现。对于小的导入文件，将其设置为 false 会很快。
对于包含大量不同数据的大型导入文件
元素和组织单位，将其设置为 true 将是
幅度更快。

#### 数据值要求 { #webapi_data_values_import_requirement } 

数据值导入支持一组值类型。对于每个值类型，
有一个特殊要求。下表列出了边缘情况
对于值类型。



表：值类型要求

| 值类型 | 要求 | 评论 |
|---|---|---|
| BOOLEAN | true | true | TRUE | false | false | FALSE | 1 | 0 | t | f | | 用于布尔值、真值或假值。导入服务不关心输入是否以大写或小写字母开头，也不关心输入是否全部大写。 |

#### 标识符方案 { #webapi_data_values_identifier_schemes } 

Regarding the id schemes, by default the identifiers used in the XML
messages use the DHIS2 stable object identifiers referred to as `UID`.
In certain interoperability situations we might experience that an external
system decides the identifiers of the objects. In that case we can use
the `code` property of the organisation units and other objects to set
fixed identifiers. When importing data values we hence need to reference
the code property instead of the identifier property of these metadata
objects. Identifier schemes can be specified in the XML message as well
as in the request as query parameters. To specify it in the XML payload
you can do this:

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0"
  dataElementIdScheme="CODE" orgUnitIdScheme="UID" idScheme="CODE">
</dataValueSet>
```

上面的参数表解释了如何指定 id 方案
作为查询参数。以下规则适用于
优先级：

  - XML 或 JSON 负载中定义的 ID 方案优先于
    id 方案定义为 URL 查询参数。

  - 特定的 id 方案，如 dataElementIdScheme 或
    orgUnitIdScheme 优先于一般 idScheme。

  - 如果没有定义明确的 ID 方案，则默认 ID 方案为`code`。
    for ADX format, and `uid` for all other formats.

以下标识符方案可用。

  - uid

  - 码

  - 名称

  - 属性（后跟属性的UID）

属性选项是特殊的，指的是元数据属性
已被标记为*独特*。使用此选项时，`attribute` 必须
紧随其后的是属性的标识符，例如
“属性：DnrLSdo4hMl”。

#### 异步数据值导入 { #webapi_data_values_async_import } 

可以通过以下方式以异步方式发送和导入数据值
提供设置为 *true* 的 `async` 查询参数：

    /api/dataValueSets?async=true

这将启动一个异步导入作业，您可以对其进行监控
任务摘要 API 中的状态。 API 响应表明
作业的唯一标识符、作业类型和可用于的 URL
监控导入作业状态。响应将类似于以下内容：

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Initiated dataValueImport",
  "response": {
    "name": "dataValueImport",
    "id": "YR1UxOUXmzT",
    "created": "2018-08-20T14:17:28.429",
    "jobType": "DATAVALUE_IMPORT",
    "relativeNotifierEndpoint": "/api/system/tasks/DATAVALUE_IMPORT/YR1UxOUXmzT"
  }
}
```

请阅读有关*异步任务状态*的部分了解更多信息
信息。

### CSV数据值格式 { #webapi_data_values_csv } 

以下部分描述了 DHIS2 中使用的 CSV 格式。首先
行被假定为标题行，在导入期间将被忽略。

表格DHIS2 的 CSV 格式

||||
|---|---|---|
| 柱 | 需要 | 描述 |
| 数据元素 | 是的 | 默认指 ID，也可根据所选 ID 方案指名称和代码 |
| 期 | 是的 | ISO 格式 |
| 组织单位 | 是的 | 默认指 ID，也可根据所选 ID 方案指名称和代码 |
| 类别选项组合 | 不 | 指身份证 |
| 属性选项组合 | 不 | 指 ID（自 2.16 版起） |
| 值 | 不 | 资料值 |
| 存储 | 不 | 指输入值的用户的用户名 |
| 最后更新 | 不 | ISO 格式的日期 |
| 评论 | 不 | 自由文本评论 |
| 后续行动 | 不 | 真假 |

可以导入DHIS2的CSV文件示例如下所示。

```csv
“ dataelement”，“ period”，“ orgunit”，“ catoptcombo”，“ attroptcombo”，“ value”，“ storedby”，“ timestamp”
“ DUSpd8Jq3M7”，“ 201202”，“ gP6hn503KUX”，“ Prlt0C1RF0s”，“ 7”，“ bombali”，“ 2010-04-17”
“ DUSpd8Jq3M7”，“ 201202”，“ gP6hn503KUX”，“ V6L425pT3A0”，“ 10”，“ bombali”，“ 2010-04-17”
“ DUSpd8Jq3M7”，“ 201202”，“ OjTS752GbZE”，“ V6L425pT3A0”，“ 9”，“孟买”，“ 2010-04-06”
```

### 生成数据值集模板 { #webapi_data_values_template } 

要为特定数据集生成数据值集模板，您可以使用
`/api/dataSets/ <id> /dataValueSet` 资源。 XML 和 JSON 响应
支持格式。例子：

    /api/dataSets/BfMAe6Itzgt/dataValueSet

描述了可用于进一步调整输出的参数
以下：



表：数据值查询参数

| 查询参数 | 需要 | 描述 |
|---|---|---|
| 时间 | 不 | 使用期间，将不作任何检查。 |
| orgUnit | 不 | 要使用的组织单位，支持多个 orgUnits，可同时使用 id 和代码。 |
| 评论 | 不 | 是否应包含注释，默认值：是。 |
| orgUnitIdScheme | 不 | 使用的组织单位方案，支持 id | 代码。 |
| 数据元素标识方案 | 不 | 使用的数据元素方案，支持 id | 代码。 |

### 读取数据值 { #webapi_reading_data_values } 

要读取数据值，可以向以下资源发出 GET 请求。

```
GET /api/dataValueSets
```

Data values can be retrieved in *XML*, *JSON*, *CSV*, and *ADX* format. Since we want to read data we will use the *GET* HTTP verb. We will also specify that we are
interested in the XML resource representation by including an `Accept` HTTP header with our request. The following query parameters are
available.

表：数据值集查询参数

| 参数 | 描述 |
|---|---|
| 数据集 | 数据集标识符。可重复任意次数。 |
| 数据元素组 | 数据元素组标识符。可重复任意次数（不支持 ADX）。 |
| 数据元素 | 数据元素标识符。可重复任意次数。 |
| 时间 | ISO 格式的句号标识符。可重复任意次数。 |
| 开始日期 | 要导出的数值时间跨度的起始日期。 |
| 结束日期 | 要导出的数值时间跨度的结束日期。 |
| orgUnit | 组织单位标识符。可重复任意次数。 |
| 儿童 | 是否将子女纳入组织单位的层次结构中。 |
| 组织单位组 | 组织单位组标识符。可重复任意次数。 |
| 属性选项组合 | 属性选项组合标识符。可重复任意次数。 |
| 包含删除 | 是否包含已删除的数据值。 |
| 最后更新 | 只包括给定时间戳后更新的数据值。 |
| 最后更新持续时间 | 只包括在给定时间内更新的数据值。格式为<value\><time-unit\> ，其中支持的时间单位为 "d"（天）、"h"（小时）、"m"（分钟）和 "s"（秒）。 |
| 限额 | 回复中结果的最大数量。 |
| 数据元素标识方案 | 数据元素对象的属性，用于响应中的数据值。 |
| orgUnitIdScheme | 响应中数据值使用的 org 单位对象的属性。 |
| 类别选项组合IdScheme | 类别选项组合的属性，用于响应数据值。 |
| 属性 OptionComboIdScheme | 属性选项组合对象的属性，用于响应中的数据值。 |
| dataSetIdScheme | 响应中要使用的数据集对象的属性。 |
| 类别 IDScheme | 响应中要使用的类别对象的属性（仅限 ADX）。 |
| 类别选项 IDScheme | 响应中使用的类别选项对象的属性（仅限 ADX）。 |
| 方案 | 上述任何对象的属性（如果未指定），将在响应中使用。如果未指定，ADX 的默认 idScheme 是 code，所有其他格式的默认 idScheme 是 uid。 |
| 输入机构单位标识主题 | 用于所提供的`orgUnit`参数值的标识符属性；`id`或`code`。 |
| 输入数据集 IDScheme | Identifier property used for the provided `dataSet` parameter values; `id` or `code` |
| inputDataElementGroupIdScheme | Identifier property used for the provided `dataElementGroup` parameter values; `id` or `code` |
| 输入数据元素 IDScheme | Identifier property used for the provided `dataElement` parameter values; `id` or `code` |
| inputIdScheme | General identifier property used for all object types, specific identifier schemes will override the general scheme; `id` or `code` |
| 压缩 | Whether to compress the response payload; `none`, `gzip` or `zip` |
| 附件 | 响应使用的文件名，非空值表示将响应作为附件渲染。 |

需要上述列表中的以下参数：
- dataSet 或 dataElementGroup（对于 ADX，必须是 dataSet）
- 期间、开始日期和结束日期、最后更新或最后更新持续时间
- orgUnit 或 orgUnitGroup

支持以下响应格式：

  - xml（应用程序/ xml）

  - json（应用程序/ json）

  - csv（应用程序/ csv）

  - adx（应用程序/ adx + xml）

假设我们已经根据
上一节称为 *发送数据值* 我们现在可以放在一起
我们对单个数据值集的请求并使用 cURL 请求它：

```bash
curl "https://play.dhis2.org/demo/api/dataValueSets?dataSet=pBOMPrpg1QX&period=201401&orgUnit=DiszpKrYNg8"
  -H "Accept:application/xml" -u admin:district
```

我们还可以使用开始和结束日期查询参数来请求一个
大量的数据值。 IE。您还可以请求数据值
多个数据集和组织单位以及一个时间跨度以便导出
更大的数据块。请注意，期间查询参数采用
优先于开始和结束日期参数。一个例子看起来像
这：

```bash
curl "https://play.dhis2.org/demo/api/dataValueSets?dataSet=pBOMPrpg1QX&dataSet=BfMAe6Itzgt
  &startDate=2013-01-01&endDate=2013-01-31&orgUnit=YuQRtpLP10I&orgUnit=vWbkYPRmKyS&children=true"
  -H "Accept:application/xml" -u admin:district
```

检索已创建或更新的数据值
过去 10 天，您可以提出这样的请求：

    / api / dataValueSets？dataSet = pBOMPrpg1QX＆orgUnit = DiszpKrYNg8＆lastUpdatedDuration = 10d

响应将如下所示：

```xml
<?xml version='1.0' encoding='UTF-8'?>
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataSet="pBOMPrpg1QX"
  completeDate="2014-01-02" period="201401" orgUnit="DiszpKrYNg8">
<dataValue dataElement="eY5ehpbEsB7" period="201401" orgUnit="DiszpKrYNg8"
  categoryOptionCombo="bRowv6yZOF2" value="10003"/>
<dataValue dataElement="Ix2HsbDMLea" period="201401" orgUnit="DiszpKrYNg8"
  categoryOptionCombo="bRowv6yZOF2" value="10002"/>
<dataValue dataElement="f7n9E0hX8qk" period="201401" orgUnit="DiszpKrYNg8"
  categoryOptionCombo="bRowv6yZOF2" value="10001"/>
</dataValueSet>
```

您可以使用JSON格式请求数据，如下所示：

    /api/dataValueSets.json?dataSet=pBOMPrpg1QX&period=201401&orgUnit=DiszpKrYNg8

响应将如下所示：

```json
{
  "dataSet": "pBOMPrpg1QX",
  "completeDate": "2014-02-03",
  "period": "201401",
  "orgUnit": "DiszpKrYNg8",
  "dataValues": [
    {
      "dataElement": "eY5ehpbEsB7", 
      "categoryOptionCombo": "bRowv6yZOF2", 
      "period": "201401",
      "orgUnit": "DiszpKrYNg8", 
      "value": "10003"
    }, 
    {
      "dataElement": "Ix2HsbDMLea", 
      "categoryOptionCombo": "bRowv6yZOF2", 
      "period": "201401",
      "orgUnit": "DiszpKrYNg8", 
      "value": "10002"
    }, 
    {
      "dataElement": "f7n9E0hX8qk", 
      "categoryOptionCombo": "bRowv6yZOF2", 
      "period": "201401",
      "orgUnit": "DiszpKrYNg8", 
      "value": "10001"
    }
  ]
}
```

请注意，数据值是软删除的，即删除的值具有
`deleted` 属性设置为 true 而不是被永久删除。
这在集成多个系统以进行通信时很有用
删除。您可以在响应中包含已删除的值，如下所示：

    /api/dataValueSets.json?dataSet=pBOMPrpg1QX&period=201401
      &orgUnit=DiszpKrYNg8&includeDeleted=true

您还可以请求CSV格式的数据，如下所示：

    /api/dataValueSets.csv?dataSet=pBOMPrpg1QX&period=201401&orgUnit=DiszpKrYNg8

响应将如下所示：

```csv
数据元素，期限，组织单位，catoptcombo，attroptcombo，值，存储于，最后更新，注释，开始
f7n9E0hX8qk，201401，DiszpKrYNg8，bRowv6yZOF2，bRowv6yZOF2,12，system，2015-04-05T19：58：12.000，comment1，false
Ix2HsbDMLea，201401，DiszpKrYNg8，bRowv6yZOF2，bRowv6yZOF2,14，system，2015-04-05T19：58：12.000，comment2，false
eY5ehpbEsB7,201401，DiszpKrYNg8，bRowv6yZOF2，bRowv6yZOF2,16，系统，2015-04-05T19：58：12.000，comment3，false
FTRrcoaog83,201401，DiszpKrYNg8，bRowv6yZOF2，bRowv6yZOF2,12，系统，2014-03-02T21：45：05.519，comment4，false
```

请求使用 `gzip` 压缩 CSV 格式的数据值：

```
/api/dataValueSets.csv?dataSet=pBOMPrpg1QX&period=202401&orgUnit=DiszpKrYNg8&compression=gzip
```

回复将是压缩 CSV 格式。内容可以用`gunzip`工具解压缩。

以下约束适用于数据值集资源：

  - 必须至少指定一个数据集。

  - 必须是至少一个期间或开始日期和结束日期
    指定的。

  - 必须至少指定一个组织单位。

  - 组织单位必须在组织的层次结构内
    认证用户的单位。

  - 限制不能小于零。

### 发送，读取和删除单个数据值 { #webapi_sending_individual_data_values } 

此示例将显示如何发送要保存的单个数据值
一个要求。这可以通过发送一个 *POST* 请求到
`dataValues` 资源：

    POST /api/dataValues

此资源支持以下查询参数：

表：数据值查询参数

| 查询参数 | 需要 | 描述 |
|---|---|---|
| 德 | 是的 | 数据元素标识符 |
| 聚乙烯 | 是的 | 期间标识符 |
| 欧 | 是的 | 组织单位标识符 |
| 媾 | 不 | 类别选项组合标识符，省略时使用默认值 |
| cc | 否（必须与 cp 结合使用） | 属性类别组合标识符 |
| cp | 否（必须与 CC 合并） | 属性类别选项标识符，多个值用;分隔 |
| ds | 不 | 数据集，用于检查期间和组织单位是否允许 POST 或 DELETE。如果指定，数据元素必须分配给该数据集。如果未指定，将选择包含该数据元素的数据集来检查是否允许操作。 |
| 价值 | 不 | 数据值。对于布尔值，将接受以下内容： true | True | TRUE | false | False | FALSE | 1 | 0 | t | f | |
| 评论 | 不 | 数据评论 |
| 跟进 | 不 | 跟进数据值，切换当前布尔值 |

如果给定的任何标识符无效，如果数据值或
评论无效或如果数据被锁定，响应将包含
*409 Conflict* 状态代码和描述性文本消息。如果
操作导致保存或更新的值，*200 OK* 将被返回。
请求的示例如下所示：

```bash
curl "https://play.dhis2.org/demo/api/dataValues?de=s46m5MS0hxu
  &pe=201301&ou=DiszpKrYNg8&co=Prlt0C1RF0s&value=12"
  -X POST -u admin:district
```

此资源还允许使用特殊语法将值关联到
一个属性选项组合。这可以通过发送
属性类别组合的标识符，连同标识符
值代表的属性类别选项
组合。类别组合由 `cc` 参数指定，而
类别选项被指定为分号分隔的字符串，带有`cp`
范围。有必要确保类别选项都是部分
的类别组合。一个示例如下所示：

```bash
curl "https://play.dhis2.org/demo/api/dataValues?de=s46m5MS0hxu&ou=DiszpKrYNg8
  &pe=201308&cc=dzjKKQq0cSO&cp=wbrDrL2aYEc;btOyqprQ9e8&value=26"
  -X POST -u admin:district
```

您可以使用 *GET* 方法通过请求检索数据值。这
value、comment 和 followUp 参数在这方面不适用：

```bash
curl "https://play.dhis2.org/demo/api/dataValues?de=s46m5MS0hxu
  &pe=201301&ou=DiszpKrYNg8&co=Prlt0C1RF0s"
  -u admin:district
```

您可以使用 *DELETE* 方法通过请求删除数据值。

### 发送单个数据值作为有效载荷{ #webapi_sending_individual_data_values_as_payload } 

您可以使用以下资源，使用 `Content-Type: application/json` 将单个数据值作为 JSON 有效载荷发送。

```
POST /api/dataValues
```

该资源将创建一个新的数据值，或更新一个已存在的数据值。JSON 有效负载格式定义如下。

```json
{
  "dataElement": "fbfJHSPpUQD",
  "categoryOptionCombo": "PT59n8BQbqM",
  "period": "202201",
  "orgUnit": "DiszpKrYNg8",
  "value": "10",
  "comment": "OK"
}
```

该终端支持在嵌套结构中指定属性选项组合。

```json
{
  "dataElement": "BOSZApCrBni",
  "categoryOptionCombo": "TkDhg29x18A",
  "attribute": {
    "combo": "O4VaNks6tta",
    "options": [
      "C6nZpLKjEJr", "i4Nbp8S2G6A"
    ]
  },
  "dataSet": "lyLU2wR22tC",
  "period": "202201",
  "orgUnit": "DiszpKrYNg8",
  "value": "15",
  "comment": "Good"
}
```

如果数据值已成功保存或更新，则状态代码将为`201 Created`，如果存在验证错误，则状态代码将为`409 Conflict`。

### 处理文件数据值 { #datavalue_file } 

处理具有 *file* 类型数据元素的数据值时
与上述方法存在一些偏差。这些数据
值的特殊之处在于值的内容是一个 UID 引用
到 *FileResource* 对象而不是自包含常量。这些
数据值的行为就像其他存储文本的数据值一样
内容，但应以不同方式处理以产生
有意义的输入和输出。

有两种存储文件资源数据值的方法。

* 将文件上传到 `/api/dataValues/file` 端点，格式为
  文件资源部分所述。  该功能适用于 2.36 及更高版本。

* 如果您编写的代码需要兼容
  版本的 DHIS2，则流程为

1.  如所述将文件上传到 `/api/fileResources` 端点
    在文件资源部分。

2.  读取返回文件资源的 `id` 属性。

3.  使用数据值的 `value` 属性存储检索到的标识符。
    上面描述的方法。

数据值和文件资源之间只有一对一的关系
允许。这是在内部强制执行的，以便保存文件资源 ID
在多个数据值中是不允许的，并且会返回错误。删除
数据值将删除引用的文件资源。直接删除
的文件资源是不可能的。

数据值现在可以作为除返回数据以外的任何其他值进行检索
将是文件资源的 UID。为了检索实际
内容（意味着存储在映射的文件资源中的文件
到数据值）必须向 `/api/dataValues/files` 发出 GET 请求
镜像查询参数，因为它们将用于数据值
本身。 `/api/dataValues/files` 端点仅支持 GET 请求。

值得注意的是，由于底层存储机制工作
异步文件内容可能不会立即准备好
从`/api/dataValues/files` 端点下载。这是特别真实的
对于可能需要耗时上传的大文件
外部文件存储的背景（取决于系统
配置）。从文件资源元数据中检索
`/api/fileResources/ <id> ` 端点允许检查 `storageStatus`
在尝试下载内容之前。

## ADX数据格式 { #webapi_adx_data_format } 

从 2.20 版开始，我们将支持名为 ADX 的集合数据交换国际标准。
的支持。ADX 由
由 IHE 的质量研究和公共卫生委员会开发和维护。
(整合医疗保健企业）的质量研究与公共卫生委员会负责开发和维护。详细介绍 QRPH
活动的维基页面可在
[wiki.ihe.net](http://wiki.ihe.net/index.php?title=Quality,_Research_and_Public_Health#Current_Domain_Activities)。
ADX 仍在积极开发中，目前已发布试用版。
试运行。请注意，目前在 DHIS2 中实现的
中实现的是读写 ADX 格式化数据的功能，即所描述的
即 ADX 配置文件中描述的内容消费者和内容生产者角色。
配置文件中的内容消费者和内容生产者角色。

ADX 数据消息的结构与您可能的结构非常相似
从前面描述的 DXF 2 数据中已经熟悉了。有一个
几个重要的区别。我们将描述这些差异
参考一个小例子：

```xml
<adx xmlns="urn:ihe:qrph:adx:2015" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ihe:qrph:adx:2015 ../schema/adx_loose.xsd" 
  exported="2015-02-08T19:30:00Z">
  <group orgUnit="OU_559" period="2015-06-01/P1M" 
    completeDate="2015-07-01" dataSet="(TB/HIV)VCCT">
    <dataValue dataElement="VCCT_0" GENDER="FMLE" HIV_AGE="AGE0-14" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="FMLE" HIV_AGE="AGE0-14" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="FMLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="FMLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="FMLE" HIV_AGE="AGE0-14" value="10"/>

    <dataValue dataElement="VCCT_0" GENDER="MLE" HIV_AGE="AGE0-14" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="MLE" HIV_AGE="AGE0-14" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="MLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="MLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="MLE" HIV_AGE="AGE0-14" value="10"/>

    <dataValue dataElement="VCCT_0" GENDER="FMLE" HIV_AGE="AGE15-24" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="FMLE" HIV_AGE="AGE15-24" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="FMLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="FMLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="FMLE" HIV_AGE="AGE15-24" value="10"/>

    <dataValue dataElement="VCCT_0" GENDER="MLE" HIV_AGE="AGE15-24" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="MLE" HIV_AGE="AGE15-24" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="MLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="MLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="MLE" HIV_AGE="AGE15-24" value="10"/>
  </group>
</adx>
```

### ADX 根元素{ #the-adx-root-element } 

The ADX root element has only one mandatory attribute, which is the
*exported* timestamp. In common with other ADX elements, the schema is
extensible in that it does not restrict additional application specific
attributes.

### ADX 组元素{ #the-adx-group-element } 

与 dxf2 不同，ADX 要求数据值按照
orgUnit、期间和数据集进行分组。上面的示例显示了
(TB/HIV) VCCT "数据集的数据报告。该示例
使用代码作为标识符，而不是 dhis2 uids。代码是
在使用 ADX 时，代码是首选的标识符形式。

在 ADX 中，orgUnit、period 和 dataSet 属性是必选属性。组
组元素可包含其他属性。在我们的 DHIS2
实现中，任何附加属性都会简单地传递给
底层导入器。这意味着目前在
在 dxf2 中具有意义的所有属性（如上例中的 completeDate）都可以在 ADX 中继续使用，并将被处理。
继续在 ADX 中使用，并以同样的方式进行处理。

ADX 和 dxf2 之间的一个显著区别在于周期的编码方式。
的编码方式。ADX 严格使用 ISO8601，并将报告期编码为
期间编码为 (日期|日期时间)/(持续时间)。因此，上例中的周期
是指从 2015-06-01 开始的 1 个月（P1M）。因此它是
2015 年 6 月的数据。这种符号比较啰嗦，但非常灵活，可以让我们支持所有现有的
非常灵活，可以支持 DHIS2 中所有现有的周期类型

### ADX期间定义 { #adx-period-definitions } 

期限以期限开始的日期开头，后面跟一个"/"，然后是表中注明的期限符号。
之后是"/"，然后是表中注明的期限符号。下表
下表详细列出了所有 DHIS2 周期类型及其在 ADX 中的表示方法，并附有示例。
并附有示例。

表：ADX 周期

| 期间类型 | 时长符号 | 示例 | 期限 |
|---|---|---|---|
| 日常 | P1D | 2017-10-01/P1M | 2017 年 10 月 01 日 |
| 每周 | P7D | 2017-10-02/P7D | 2017 年 10 月 02 日-2017 年 10 月 08 日 |
| 每周星期三 | P7D | 2017-10-04/P7D | 2017 年 10 月 04 日-2017 年 10 月 10 日 |
| 每周星期四 | P7D | 2017-10-05/P7D | 2017 年 10 月 05 日-2017 年 10 月 011 日 |
| 每周星期六 | P7D | 2017-10-07/P7D | 2017年10月7日-2017年10月13日 |
| 每周日 | P7D | 2017-10-01/P7D | 2017年10月1日-2017年10月7日 |
| 双周 | P14D | 2017-10-02/P14D | 2017 年 10 月 02 日-2017 年 10 月 15 日 |
| 每月 | P1M | 2017-10-01/P1M | 2017 年 10 月 1 日-2017 年 10 月 31 日 |
| 双月刊 | P2M | 2017-11-01/P2M | 2017 年 11 月 1 日至 2017 年 12 月 31 日 |
| 季刊 | P3M | 2017-09-01/P3M | 2017年9月1日-2017年12月31日 |
| 每六个月 | P6M | 2017-01-01/P6M<br>2017-07-01/P6M | 2017 年 1 月 1 日-2017 年 6 月 30 日<br>2017 年 7 月 1 日-2017 年 12 月 31 日 |
| 每六个月一次的四月 | P6M | 2017-04-01/P6M<br>2017-10-01/P6M | 2017 年 4 月 1 日至 2017 年 9 月 30 日<br>2017 年 10 月 1 日至 2018 年 3 月 31 日 |
| 每六个月一次的 11 月 | P6M | 2017-10-01/P6M<br>2018-05-01/P6M | 2017 年 11 月 1 日至 2018 年 4 月 30 日<br>2018 年 5 月 1 日至 2018 年 10 月 31 日 |
| 每年 | P1Y | 2017-01-01/P1Y | 2017 年 1 月 1 日至 2017 年 12 月 31 日 |
| 财务四月 | P1Y | 2017-04-01/P1Y | 2017 年 4 月 1 日至 2018 年 3 月 31 日 |
| 财政七月 | P1Y | 2017-07-01/P1Y | 2017 年 7 月 1 日至 2018 年 6 月 30 日 |
| 财务 10 月 | P1Y | 2017-10-01/P1Y | 2017 年 10 月 1 日至 2018 年 9 月 30 日 |
| 财政十一月 | P1Y | 2017-11-01/P1Y | 2017 年 11 月 1 日至 2018 年 10 月 31 日 |

### ADX 数据值{ #adx-data-values } 

The dataValue element in ADX is very similar to its equivalent in DXF.
The mandatory attributes are *dataElement* and *value*. The *orgUnit* and
*period* attributes don't appear in the dataValue as they are required
at the *group* level.

The most significant difference is the way that disaggregation is
represented. DXF uses the categoryOptionCombo to indicate the disaggregation
of data. In ADX the disaggregations (e.g. AGE_GROUP and SEX) are
expressed explicitly as attributes. If you use `code` as the id scheme for
`category`, not that you must assign a code to all the categories used for
dataElements in the dataSet, and further, that code must be of a form
which is suitable for use as an XML attribute. The exact constraint on
an XML attribute name is described in the W3C XML standard - in practice,
this means no spaces, no non-alphanumeric characters other than '_' and
it may not start with a letter. The example above shows examples of
'good' category codes ('GENDER' and 'HIV_AGE'). The same restrictions
apply if you use `name` or `attribute` as id schemes.

在 ADX 中，只有类别标识符可用作 XML 属性；其他元数据类型的标识符不必用作 XML 属性。
其他元数据类型的标识符不必用作 XML 属性。
请注意，DHIS2 在指定名称、代码或 DHIS2 属性时并不强制使用这种语法。
名称、代码或 DHIS2 属性时，DHIS2 并不强制执行此语法，但如果您尝试导入 ADX 文件，您将会收到一条说明性的错误信息。
但如果您尝试导入 ADX 数据，而类别标识符未分配或不合适，您将收到一条提示性错误信息。
但如果您尝试导入 ADX 数据，而类别标识符未指定或不合适，则会收到提示性错误信息。

使用分解数据的显式维度的主要好处是
那

  - 生成数据的系统不必与
    DHIS2 中的 categoryOptionCombo。

  - 生产者和消费者可以将他们的代码与第三方进行匹配
    权威来源，例如 vterminology 服务。请注意，在
    上面的性别和年龄组代码示例使用的是代码列表
    来自[世卫组织全球卫生观察站](http://apps.who.int/gho/data/node.resources.api)。

Note that this feature may be extremely useful, for example when
producing disaggregated data from an EMR system, but there may be cases
where a *categoryOptionCombo* mapping is easier or more desirable. The
DHIS2 implementation of ADX will check for the existence of a
*categoryOptionCombo* attribute and, if it exists, it will use that in
preference to exploded dimension attributes. Similarly, an
*attributeOptionCombo* attribute on the *group* element will be
processed in the legacy way. Otherwise, the attributeOptionCombo can be
treated as exploded categories just as on the *dataValue*.

In the simple example above, each of the dataElements in the dataSet
have the same dimensionality (categorycombo) so the data is neatly
rectangular. This need not be the case. dataSets may contain
dataElements with different categoryCombos, resulting in a
*ragged-right* ADX data message (i.e. values for different dataElements
may have different numbers of categories.)

### 导入 ADX 数据{ #importing-adx-data } 

DHIS2 在 `/api/dataValueSets` 中为 POST ADX 数据提供了一个端点。
使用 *application/xml+adx* 作为内容类型。因此，例如
可以使用以下 curl 命令将上述示例数据 POST 到
DHIS2 演示服务器：

```bash
curl -u admin:district -X POST -H "Content-Type: application/adx+xml"
  -d @data.xml "https://play.dhis2.org/demo/api/dataValueSets?dataElementIdScheme=code&orgUnitIdScheme=code"
```

请注意，查询参数与 DXF 数据使用的参数相同。ADX
ADX 端点应以与 DXF 相同的语义解释所有现有的 DXF 参数。
语义相同。

### 导出 ADX 数据{ #exporting-adx-data } 

DHIS2 在 `/api/dataValueSets` 中提供了一个 GET ADX 数据集的端点。
使用 *application/xml+adx* 作为可接受的内容类型。因此
例如，可以使用以下 curl 命令来检索 ADX 数据
数据：

```bash
curl -u admin:district -H "Accept: application/adx+xml"
 "https://play.dhis2.org/demo/api/dataValueSets?dataValueSets?orgUnit=M_CLINIC&dataSet=MALARIA&period=201501"
```

请注意，查询参数与 DXF 数据使用的参数相同。一个重要区别是
数据集和 orgUnit 的标识符可以是 uids 或代码。
可以是 uids 或代码。

## 后续行动 { #webapi_follow_up } 

本节介绍了后续的标记数据。

### 数据值跟踪 { #data-value-follow-up } 

数据值跟踪端点允许标记数据值以进行跟踪。

```
PUT / api / 36 / dataValues /跟进
```

The payload in `JSON` format looks like this:

```json
{
  "dataElement": "s46m5MS0hxu",
  "period": "202005",
  "orgUnit": "DiszpKrYNg8",
  "categoryOptionCombo": "psbwp3CQEhs",
  "attributeOptionCombo": "HllvX50cXC0",
  "followup": true
}
```

The `categoryOptionCombo` and `attributeOptionCombo` fields are optional. A minimal `JSON` payload looks like this:

```json
{
  "dataElement": "s46m5MS0hxu",
  "period": "202005",
  "orgUnit": "DiszpKrYNg8",
  "followup": false
}
```

The `followup` field should be set to `true` to mark a data value for follow-up, and `false` to remove the mark.

如果操作成功，响应状态代码将为`200 OK`，如果请求出错，则响应状态代码为`409 Conflict`。

批量更新数据值，以便后续使用：

    PUT /api/dataValues/followups

with `JSON` payload:

```json
{
  "values": [
    {
      "dataElement": "s46m5MS0hxu",
      "period": "202005",
      "orgUnit": "DiszpKrYNg8",
      "categoryOptionCombo": "psbwp3CQEhs",
      "attributeOptionCombo": "HllvX50cXC0",
      "followup": true
    }
  ]
}
```

批量更新的每个项目的字段和要求与单个
更新端点的字段和要求相同。

批量更新成功时同样会以 `200 OK` 确认，或在输入错误时返回 `409 Conflict` 。 
409 冲突"。



# 数据验证 { #data-validation } 

## 验证方式 { #webapi_validation } 

要生成数据验证摘要，您可以与
验证资源。数据集资源针对数据输入进行了优化
用于验证数据集/表单的客户端，可以像这样访问：

    GET /api/33/validation/dataSet/QX4ZTUbOt3a.json?pe=201501&ou=DiszpKrYNg8

除了基于数据集验证规则外，还有两种
执行验证的其他方法：自定义验证和
预定验证。

第一个路径变量是引用数据集的标识符
证实。支持 XML 和 JSON 资源表示。这
响应包含违反验证规则。这将延长
在即将到来的版本中有更多的验证类型。

要检索与特定数据集相关的验证规则，
意思是所有数据元素都是一部分的带有公式的验证规则
的特定数据集，您可以向
`validationRules` 资源如下：

    GET /api/validationRules?dataSet=<dataset-id>

验证规则有左边和右边，也就是
根据运营商比较有效性。有效的运算符
值见下表。



表格操作符

| 值 | 描述 |
|---|---|
| equal_to | 等于 |
| not_equal_to | 不等于 |
| greater_than | 大于 |
| greater_than_or_equal_to | 大于或等于 |
| less_than | 小于 |
| less_than_or_equal_to | 小于或等于 |
| compulsory_pair | 如果任何一方在场，另一方也必须在场 |
| exclusive_pair | 如果一方在场，另一方不得在场 |

左边和右边的表达式是数学表达式
其中可以包含对数据元素和类别选项的引用
以下格式的组合：

    $ {<dataelement-id>。 <catoptcombo-id>}

左侧和右侧表达式有一个 *missing 值
战略*。这是指系统应该如何处理数据值
缺少数据元素/类别选项组合引用
在公式中是否应该检查验证规则
为有效性或跳过。有效的缺失值策略见于
下表。



表格缺失值策略

| 值 | 描述 |
|---|---|
| skip_if_any_value_missing | 如果缺少任何数据值，则跳过验证规则 |
| SKIP_IF_ALL_VALUES_MISSING | 如果所有数据值都缺失，则跳过验证规则 |
| NEVER_SKIP | 无论数据值是否缺失，绝不跳过验证规则 |

## 验证结果{ #webapi_validation_results } 

验证结果是在执行期间发现的违规的持久结果
验证分析。如果您在开始时选择“持久结果”或
安排验证分析，发现的任何违规将存储在
数据库。当结果存储在数据库中时，它将被使用
对于 3 件事：

1.  根据存储的结果生成分析。

2.  未生成通知的持久结果将这样做，
    一次。

3.  跟踪结果是否产生了
    通知。

4.  跳过运行时已经检查过的规则
    验证分析。

这意味着如果你不坚持你的结果，你将无法
为验证结果生成分析，如果选中，结果将
每次找到并运行验证时生成通知
分析可能会更慢。

### 查询验证结果{ #query-validation-results } 

持久化的验证结果可以在下面查看
端点：

    GET /api/33/validationResults

您还可以使用验证结果 ID 检查单个结果
在这个端点：

    GET /api/33/validationResults/<id>

验证结果也可以通过以下属性过滤：

* 组织单位：`ou = <UID>`
* 验证规则：`vr = <UID>`
* 期间：`pe = <ISO-expression>`

上面的每个过滤器属性可以多次出现，例如：

    GET /api/36/validationResults?ou=jNb63DIHuwU&ou=RzgSFJ9E46G

同一过滤器的多个值与OR组合，结果必须匹配给定值之一。

如果使用了一个以上的过滤器属性，则将它们与AND组合在一起，结果必须与每个属性的值之一匹配。

对于时段过滤器，匹配结果必须与任何指定的时段重叠。

此外，验证结果还可以按其创建日期进行过滤：

    GET /api/36/validationResults?createdDate=<date>

该过滤器可以与其他任何过滤器结合使用。

### 触发验证结果通知{ #trigger-validation-result-notifications } 

验证结果每天向相应用户发送一次、
但也可以使用以下方式手动触发，按需运行
API 端点：

    POST / api / 33 / validation / sendNotifications

使用此端点仅发送未发送的结果。

### 删除验证结果{ #delete-validation-results } 

验证结果可以通过ID手动删除，

    删除/ api / 36 / validationResults / <id>

或使用过滤器

    删除/ api / 36 / validationResults？ <filters>

支持的过滤参数包括

* `ou = <UID>`以匹配组织单位的所有验证结果；提供多个参数时，多个单元组合或
* `vr = <UID>`以匹配验证规则的所有验证结果；提供多个参数时，多个规则组合或
* `pe = <ISO-expression>`以匹配与与指定时期重叠的时期相关的所有验证结果
* `created = <ISO-expression>`以匹配在规定时间内创建的所有验证结果
* `notificationSent=<boolean>` to match either only validation results for which a notification was or wasn't sent

如果组合了过滤器，则所有条件都必须为真（AND逻辑）。

举几个例子：

要删除 2020 年第一季度与 UID 为`NqwvaQC1ni4`的组织单位相关的所有验证结果，请使用：

```
DELETE /api/36/validationResults?ou=NqwvaQC1ni4&pe=2020Q1
```

要删除在2019年第1周创建的且已发送通知的所有验证结果，请使用：

```
DELETE /api/36/validationResults?created=2019W1&notificationSent=true
```

任何删除操作都需要_执行维护任务_的权限。


## 离群值检测 { #outlier-detection } 

异常值检测端点可检测汇总数据值中的异常值。

```
GET / api / 36 / outlierDetection
```

该端点支持两种用于检测离群值的算法：

* ** Z分数：** Z分数定义为分数与平均值之间的绝对偏差除以标准偏差。必须使用z分数算法指定一个阈值参数，该阈值参数表示与平均值之间的标准偏差，以定义异常值的上限和下限。
* **修改后的 Z-score：** 与 Z-score 相同，但它使用中位数而不是平均数来衡量中心倾向。参数与 Z 值相同。
* ** Min-max：** Min-max数据元素值是指可以根据数据元素，组织单位和类别选项组合插入DHIS 2的自定义边界。

离群值将*根据显着性*排序，默认情况下是与均值的绝对偏差，最高有效值在前。这有助于快速识别对数据质量和数据分析影响最大的离群值。

### 请求查询参数 { #request-query-parameters } 

支持以下查询参数。

| 查询参数 | 描述                                                  | 强制的 | 选项（默认为默认）                   |
| --------------- | ------------------------------------------------------------ | --------- | ----------------------------------------- |
| ds              | 数据集，可以多次指定。                   | 不 [*]    | 数据集标识符。                      |
| 德              | 数据元素，可以多次指定。               | 不 [*]    | 数据元素标识符。                  |
| 开始日期       | 间隔的开始日期，以检查异常值。               | 是的       | 日期（yyyy-MM-dd）。                        |
| 结束日期         | 检查异常值的时间间隔的结束日期。                 | 是的       | 日期（yyyy-MM-dd）。                        |
| 欧              | 组织单位，可以多次指定。          | 是的       | 组织单位标识符。             |
| 算法       | 用于离群值检测的算法。                      | 不        | `Z_SCORE`, `MIN_MAX`, `MOD_Z_SCORE`       |
| 临界点       | 异常值阈值。仅限于 `Z_SCORE` 和 `MOD_Z_SCORE` 算法。 | 不        | 数值，大于零。默认值：3.0。 |
| 数据起始日期   | 计算均值和 std dev 的区间起始日期。仅限于 `Z_SCORE` 和 `MOD_Z_SCORE` 算法。 | 不        | 日期（yyyy-MM-dd）。 |
| 数据结束日期     | 平均值和 std dev 计算间隔的结束日期。仅限于 `Z_SCORE` 和 `MOD_Z_SCORE` 算法。 | 不        | 日期（yyyy-MM-dd）。   |
| 订购         | 按字段排序。仅限`Z_SCORE`和`MOD_Z_SCORE`算法。| 不        | `MEAN_ABS_DEV`，`Z_SCORE`                 |
| 最大结果      | 输出的最大限制。                                    | 不        | 整数，大于零。默认值：500。 |

[*]  You must specify either data sets with the `ds` parameter, which will include all data elements in the data sets, _or_ specify data elements with the `de` parameter.

必须定义至少一个数据集或数据元素，开始日期和结束日期以及至少一个组织单位。

The `startDate` and `endDate` parameters are mandatory and refer to the time interval for which you want to detect outliers. The `dataStartDate` and `dataEndDate` parameters are optional and refer to the time interval for the data to use when calculating the mean and std dev, which are used to eventually calculate the z-score.

### 用法和示例{ #usage-and-examples } 

使用默认的z分数算法获取异常值：

```
GET / api / 36 / outlierDetection？ds = BfMAe6Itzgt＆ds = QX4ZTUbOt3a
  ＆ou = O6uvpzGd5pu＆ou = fdc6uOvgoji＆startDate = 2020-01-01＆endDate = 2020-12-31
```

使用特定算法和特定阈值获取异常值：

```
GET / api / 36 / outlierDetection？ds = BfMAe6Itzgt＆ds = QX4ZTUbOt3a
  ＆ou = O6uvpzGd5pu＆startDate = 2020-01-01＆endDate = 2020-12-31
  ＆algorithm = Z_SCORE＆threshold = 2.5
```

获取按z分数排序的异常值：

```
GET / api / 36 / outlierDetection？ds = BfMAe6Itzgt
  ＆ou = O6uvpzGd5pu＆startDate = 2020-01-01＆endDate = 2020-12-31
  ＆orderBy = Z_SCORE
```

获取前10个离群值：

```
GET / api / 36 / outlierDetection？ds = BfMAe6Itzgt
  ＆ou = O6uvpzGd5pu＆startDate = 2020-01-01＆endDate = 2020-12-31
  ＆maxResults = 10
```

获取具有定义间隔的离群值，以供在计算均值和标准差开发数据时使用的数据：

```
GET / api / 36 / outlierDetection？ds = BfMAe6Itzgt
  ＆ou = O6uvpzGd5pu＆startDate = 2020-01-01＆endDate = 2020-12-31
  ＆dataStartDate = 2018-01-01＆dataEndDate = 2020-12-31
```

使用最小-最大算法获取离群值：

```
GET / api / 36 / outlierDetection？ds = BfMAe6Itzgt＆ds = QX4ZTUbOt3a
  ＆ou = O6uvpzGd5pu＆ou = fdc6uOvgoji＆startDate = 2020-01-01＆endDate = 2020-12-31
  ＆algorithm = MIN_MAX
```

### 回应格式 { #response-format } 

支持以下响应格式。

| 格式 | API格式                                                   |
| ------ | ------------------------------------------------------------ |
| JSON格式   | `/ api / 36 / outlierDetection.json`或`Accept：application / json`（默认格式） |
| CSV    | `/ api / 36 / outlierDetection.csv`或`接受：application / csv`  |

响应包含以下字段：

| 领域      | 描述                                                  |
| ---------- | ------------------------------------------------------------ |
| 德         | 数据元素标识符。                                     |
| 取消命名     | 数据元素名称。                                           |
| 聚乙烯         | 期间ISO标识符。                                       |
| 欧         | 组织单位标识符。                                |
| 用户名     | 组织单位名称。                                      |
| 可可        | 类别选项组合标识符。                      |
| 代码名    | 类别选项组合名称。                            |
| 冠捷        | 属性选项组合标识符。                     |
| aocName    | 属性选项组合名称。                           |
| 价值      | 数据值。                                                  |
| 意思是       | 时间维度中数据值的平均值。                   |
| 标准差     | 标准偏差。                                          |
| 绝对值     | 对于z得分，与均值的绝对偏差。对于最小-最大，与最小或最大边界的绝对偏差。 |
| 分数     | Z分数。仅Z分数算法。                         |
| 下界 | 下边界。                                          |
| 上限 | 上限。                                          |
| 跟进   | 数据值是否标记为后续。                  |

The `mean`, `stdDev` and `zScore` fields are only present when `algorithm` is `Z_SCORE`.

响应将与此类似。 `元数据`部分包含请求和响应的元数据。 `outlierValues` 部分包含异常值。

```json
{
  "metadata": {
    "algorithm": "Z_SCORE",
    "threshold": 2.5,
    "orderBy": "MEAN_ABS_DEV",
    "maxResults": 10,
    "count": 10
  },
  "outlierValues": [
    {
      "de": "rbkr8PL0rwM",
      "deName": "Iron Folate given at ANC 3rd",
      "pe": "202011",
      "ou": "Pae8DR7VmcL",
      "ouName": "MCH (Kakua) Static",
      "coc": "pq2XI5kz2BY",
      "cocName": "Fixed",
      "aoc": "HllvX50cXC0",
      "aocName": "default",
      "value": 9000.0,
      "mean": 1524.5555,
      "stdDev": 2654.4661,
      "absDev": 7475.4444,
      "zScore": 2.8161,
      "lowerBound": -5111.6097,
      "upperBound": 8160.7208,
      "followUp": false
    },
    {
      "de": "rbkr8PL0rwM",
      "deName": "Iron Folate given at ANC 3rd",
      "pe": "202010",
      "ou": "vELbGdEphPd",
      "ouName": "Jimmi CHC",
      "coc": "pq2XI5kz2BY",
      "cocName": "Fixed",
      "aoc": "HllvX50cXC0",
      "aocName": "default",
      "value": 8764.0,
      "mean": 1448.0833,
      "stdDev": 2502.3031,
      "absDev": 7315.9166,
      "zScore": 2.9236,
      "lowerBound": -4807.6745,
      "upperBound": 7703.8412,
      "followUp": false
    }
  ]
}
```

### 约束与验证 { #constraints-and-validation } 

在查询验证期间，以下约束适用。每个验证错误都有一个对应的错误代码。

| 错误代码 | 信息                                                      |
| ---------- | ------------------------------------------------------------ |
| E2200      | 必须至少指定一个数据元素                  |
| E2201      | 必须指定开始日期和结束日期                    |
| E2202      | 开始日期必须早于结束日期                           |
| E2203      | 必须至少指定一个组织单位             |
| E2204      | 阈值必须为正数                          |
| E2205      | 最高结果必须为正数                        |
| E2206      | 最大结果超出了允许的最大限制：{d}               |
| E2207      | 数据开始日期必须早于数据结束日期                 |
| E2208      | 离群值检测期间遇到的非数字数据值 |

## 数据分析 { #webapi_data_analysis } 

用于执行数据分析和查找数据质量的多种资源
并提供验证问题。

**注意：**不建议使用此端点，该端点将在2.38中删除。请改用`outlierAnalysis`端点。

### 验证规则分析 { #webapi_data_analysis_validation_rules } 

要运行验证规则并检索违规：

    GET /api/dataAnalysis/validationRules

支持以下查询参数：



表：验证规则分析查询参数

| 查询参数 | 描述 | 选项 |
|---|---|---|
| vrg | 验证规则组 | 身份证 |
| 欧 | 组织单位 | 身份证 |
| 开始日期 | 时间段的开始日期 | 日期 |
| 结束日期 | 时间段的结束日期 | 日期 |
| 坚执 | 是否在系统中持续存在违规行为 | 假 | 真 |
| 通知 | 是否发送违规通知 | 假 | 真 |

样本输出：
```json
    [{
    "validationRuleId": "kgh54Xb9LSE",
    "validationRuleDescription": "Malaria outbreak",
    "organisationUnitId": "DiszpKrYNg8",
    "organisationUnitDisplayName": "Ngelehun CHC",
    "organisationUnitPath": "/ImspTQPwCqd/O6uvpzGd5pu/YuQRtpLP10I/DiszpKrYNg8",
    "organisationUnitAncestorNames": "Sierra Leone / Bo / Badjia / ",
    "periodId": "201901",
    "periodDisplayName": "January 2019",
    "attributeOptionComboId": "HllvX50cXC0",
    "attributeOptionComboDisplayName": "default",
    "importance": "MEDIUM",
    "leftSideValue": 10.0,
    "operator": ">",
    "rightSideValue": 14.0
}, {
    "validationRuleId": "ZoG4yXZi3c3",
    "validationRuleDescription": "ANC 2 cannot be higher than ANC 1",
    "organisationUnitId": "DiszpKrYNg8",
    "organisationUnitDisplayName": "Ngelehun CHC",
    "organisationUnitPath": "/ImspTQPwCqd/O6uvpzGd5pu/YuQRtpLP10I/DiszpKrYNg8",
    "organisationUnitAncestorNames": "Sierra Leone / Bo / Badjia / ",
    "periodId": "201901",
    "periodDisplayName": "January 2019",
    "attributeOptionComboId": "HllvX50cXC0",
    "attributeOptionComboDisplayName": "default",
    "importance": "MEDIUM",
    "leftSideValue": 22.0,
    "operator": "<=",
    "rightSideValue": 19.0
}]
```

### 基于标准差的离群分析 { #webapi_data_analysis_std_dev_outlier } 

根据平均值的标准偏差识别数据异常值
价值：

    GET /api/dataAnalysis/stdDevOutlier

支持以下查询参数：



表：标准偏差离群值分析查询参数

| 查询参数 | 描述 | 选项 |
|---|---|---|
| 欧 | 组织单位 | 身份证 |
| 开始日期 | 时间段的开始日期 | 日期 |
| 结束日期 | 时间段的结束日期 | 日期 |
| ds | 数据集，参数可重复 | 身份证 |
| 标准偏差 | 与平均值的标准差数 | 数值 |

### 基于最小值/最大值的离群值分析 { #webapi_data_analysis_min_max_outlier } 

要基于最小/最大值来识别数据离群值：

    GET /api/dataAnalysis/minMaxOutlier

支持的查询参数等于基于 *std dev 的异常值
上面描述的分析*资源。

### 后续数据分析 { #follow-up-data-analysis } 

要识别标记为后续的数据：

    GET /api/dataAnalysis/followup

必须至少定义一个数据集或数据元素、开始日期和结束日期或期间，以及至少一个 组织单位。

支持以下查询参数。

| 参数  | 描述                                                  | 强制的 | 选项（默认为默认）                   |
| ---------- | ------------------------------------------------------------ | --------- | ----------------------------------------- |
| 欧         | 组织单位，可以多次指定。          | 是的       | 组织单位标识符。             |
| ds         | 数据集，可以多次指定。                   | 不 [*]    | 数据集标识符。                      |
| 德         | 数据元素，可以多次指定。               | 不 [*]    | 数据元素标识符。                  |
| 开始日期  | 间隔的开始日期，以检查异常值。               | 不 [*]    | 日期（yyyy-MM-dd）。                        |
| 结束日期    | 检查异常值的时间间隔的结束日期。                 | 不 [*]    | 日期（yyyy-MM-dd）。                        |
| 聚乙烯         | ISO 周期 ID。                                               | 不 [*]    | 期间 ISO ID。                        |
| peType     | ISO 期。                                                  | 不 [*]    | 句号 ISO 字符串。                        |
| 可可        | 类别选项组合，可多次指定。     | 不        | 类别选项组合标识符。         |
| 最大结果 | 输出的最大限制。                                    | 不        | 整数，大于零。默认值：50。  |

[*]  You must specify either data sets with the `ds` parameter, which will include all data elements in the data sets, _or_ specify data elements with the `de` parameter.
     Equally, either `startDate` and `endDate` _or_ `period` must be specified.

The `startDate` and `endDate` parameters refer to the time interval for which you want to detect outliers.
If a period `pe` is provided instead the interval start and end is that of the period.

如果未提供选项组合`coc`，则考虑所有数值类型的数据元素。


## 数据的完整性 { #webapi_data_integrity } 

数据管理模块的数据完整性功能通过网络应用程序接口提供。
可通过网络 API 使用。本节介绍如何运行
数据完整性流程和检索结果。具体
详细信息请参见用户手册。

### 列出可用的数据完整性检查{ #webapi_data_integrity_list }
通过向以下机构提出请求，将返回可用检查的说明：

    GET /api/dataIntegrity

```
[
    {
        "名称"："data_elements_without_groups"、
        "displayName"（显示名称）："缺少分组的数据元素"、
        "部分"："数据元素"、
        "严重性"："警告"、
        "描述"："列出没有数据元素组的所有数据元素"、
        "issuesIdType"："dataElements"、
        "isSlow": false
    }
]
```

The `name` member of the returned check elements is the identifier used for the
`checks` parameter to declare the set of checks to run.

> **注**
> 
> 每项检查都会通过 `isSlow` 字段说明完成检查是否需要大量时间和资源。 
> 用户在生产系统上运行这些
> 检查，因为它们可能导致性能下降。 
> 这些检查可以单独运行，但除非特别要求，否则不会运行。 
> 除非特别要求，否则不会运行。

Checks are grouped semantically by the `section` member and categorised in 
one of four `severity` levels:

| 严重性 | 描述                                                                                                                   |
| -------- |-------------------------------------------------------------------------------------------------------------------------------|
| 信息     | 表示仅供参考。                                                                                  |
| 警告  | 警告表示这可能是一个问题，但不一定是错误。但建议对这些问题进行分流。 |
| 严重   | 应修复但不一定导致系统无法运行的错误。                               |
| 关键 | 必须修复的错误，可能导致最终用户出错或系统崩溃。                                           |

可使用 `checks` 参数过滤可用的检查。

    GET /api/dataIntegrity?checks=<pattern1> 、<pattern2>

可提供一个或多个精确名称或使用 `*` 作为通配符的模式。

Additional results can be filtered using a `section` parameter.

    GET /api/dataIntegrity?section=Categories

The `section` filter will return all exact matches which have the specified section. 

此外，要只过滤（选择）标记为 `isSlow` 的校验，请使用 `slow=true`、

    GET /api/dataIntegrity?slow=true

或仅过滤（选择）不通过数据库查询执行的检查 
(程序化检查）时使用 `programmatic=true`：

    GET /api/dataIntegrity?programmatic=true

The `slow`, `programmatic` and `section` filters can be combined in which case
all conditions must be met.

### 运行数据完整性汇总{ #webapi_data_integrity_run_summary }

自 2.38 版起，数据完整性检查有两个特定级别： 
- a `summary` level that provides an overview of the number of issues
- a `details` level that provides a list of issues pointing to individual data integrity violations.

要对运行的一组检查触发汇总分析：

    POST /api/dataIntegrity/summary?checks=<name1> 、<name2>

这将触发一个异步运行检查的作业。单个检查结果
将在检查完成后立即返回应用程序缓存。

另外，检查列表也可以作为 POST 请求的 BODY 提供。
如果列表过长，无法在 URL 中使用，这将非常有用。

要获取已触发检查的数据完整性摘要，请使用

    GET /api/dataIntegrity/summary?checks=<name1> 、<name2>

When the `checks` parameter is omitted, all checks are fetched from the server cache.

响应是检查结果的 "映射"，每个已完成的检查结果都有一个 "映射"。
这些信息将缓存一小时或直到重新运行检查。

To wait for the summary to be available in the cache a `timeout` in milliseconds can be added:

    GET /api/dataIntegrity/summary?checks=<name1>,<name2>&timeout=500

简要回复的示例如下 
```json
{
  "<name1>": {
    "name": "<name1>",
    "displayName": "<displayName1>",
    "startTime": "2023-01-11T06:12:56.436",
    "finishedTime": "2023-01-11T06:12:57.021",
    "section": "...",
    "severity": "WARNING",
    "description": "...",
    "count": 12,
    "percentage": 2.3
  },
  "<name2>": {
    "name": "<name2>",
    "displayName": "<displayName2>",
    "startTime": "2023-01-11T06:12:57.345",
    "finishedTime": "2023-01-11T06:12:58.007",
    "section": "...",
    "severity": "WARNING",
    "description": "...",
    "count": 4,
    "percentage": 5.1
  }
}
```

Each summary response will contain the `name`, `section`, `severity`, 
`description` and optionally  an `introduction` and `recommendation`.  
Each summary contains the number of issues found in the `count` field. When possible,
an optional `percentage` field will provide the percentage of objects with data
integrity issues when compared to all objects of the same type.
The `startTime` field indicates when the check was initiated. Using the `finishedTime`
the duration which was required to execute the check can be calculated.

Should a check analysis fail due to programming error or unforeseen data inconsistencies
both the summary and the details will have an `error` field describing the error that occurred.
The `count` of any checks which failed will be set to -1. 
No `percentage` will be returned in such cases.

```json
{
  "<name1>": {
    "name": "<name1>",
    "displayName": "<displayName1>",
    "finishedTime": "2022-02-15 14:55",
    "section": "...",
    "severity": "WARNING",
    "description": "...",
    "error": "what has happened",
    "issues": []
  }
}
```

> **注**
> 
> 每次元数据检查都在服务器上异步运行。  结果
> 每次检查完成后都会立即返回结果。最安全的方法是确保 
> 确保已检索到最新的结果集的最安全方法是 
> 最安全的方法是将发出请求的时间戳
> 与响应中的 `finishedTime` 进行比较。

要获取当前由 
使用

    GET /api/dataIntegrity/summary/running

要获取已有结果的检查名称列表，请使用

    GET /api/dataIntegrity/summary/completed


### 运行数据完整性详情{ #webapi_data_integrity_run_details }

To run a selection of details checks first trigger them using a  `POST` request:

    POST /api/dataIntegrity/details?checks=<name1> 、<name2>

与摘要类似，检查列表也可以作为 POST 主体提供。

然后从缓存中获取结果：

    GET /api/dataIntegrity/details?checks=<name1>,<name2>&timeout=500

When the `checks` parameter is not provided,  all checks which 
have not been marked as `isSlow` will be scheduled to be run on the server.

省略 `timeout` 将不会等待在缓存中找到结果、 
而是不会有请求检查的结果。

The `/details` response returns a map similar to the `summary`, but does not contain
a `count` or `percentage`. Instead, a list of `issues` is returned.

```json
{
  "<name1>": {
    "name": "<name1>",
    "displayName": "<displayName1>",
    "startTime": "2023-01-11T06:12:56.436",
    "finishedTime": "2023-01-11T06:12:57.021",
    "section": "...",
    "severity": "WARNING",
    "description": "...",
    "issuesIdType": "<object-type-plural>",
    "isSlow": false,
    "issues": [{
      "id": "<id-or-other-identifier>",
      "name": "<name-of-the-id-obj>",
      "comment": "optional plain text description or hint of the issue",
      "refs": ["<id1>", "<id2>"]
    }]
  },
  "<name2>": {
    "name": "<name2>",
    "displayName": "<displayName2>",
    "startTime": "2023-01-11T06:12:57.345",
    "finishedTime": "2023-01-11T06:12:58.007",
    "section": "...",
    "severity": "WARNING",
    "description": "...",
    "issuesIdType": "<object-type-plural>",
    "isSlow": false,
    "issues": []
  }
}
```
Each issue will always have `id` and `name` members.  Often the `issuesIdType`
is available to indicate the type of objects the `id` refers to. If the 
`issuesIdType` is not available, the `id` often is not available either and the
`name` is used for an aggregate key of an issue that has no object equivalent.

The `comment` and `refs` fields are optional for each issue.
A `comment` may provide more context or
insight into why this particular issue is regarded to be a data integrity problem. 
The `refs` list may also give the identifiers of other objects that contributed to the violation.
The `finishedTime` field shows when the particular check finished processing on the server.
The cache will store the result of each completed check for one hour.

> **Tip**
>
> A set of checks can also be specified using wild-cards. To include all 
> checks with _element_ in the name use `checks=*element*`. Like full names 
> such patterns can be used in a comma-separated list and be mixed with full 
> names as well. Duplicates will be eliminated. 
> Also a check can be given by its code. A code consists of the first letters
> of each word in the name as upper case letter. 
> For example, `orgunits_invalid_geometry` has the code `OIG`.

与摘要类似，当前执行的和已完成的详细检查的名称集也可以用
可以使用

    GET /api/dataIntegrity/details/running
    GET /api/dataIntegrity/details/completed

### 自定义数据完整性检查{ #custom_data_integrity_checks } 

DHIS2 的用户现在可以创建和提供自己的数据完整性检查。如果用户
如果用户希望利用这一功能，并扩展所提供的核心数据完整性检查集，这将非常有用。

> **提示**
> 
> 我们也鼓励用户通过在 
> 用户也可以在 [dhis2-core](https://github.com/dhis2/dhis2-core) 源中打开一个拉取请求，包含他们的 `.yaml` 文件，与他人分享他们的自定义检查。
> 请选择 `platform-backend` 作为审核者，以便尽早将 PR 提交给我们。团队将 
> 团队将负责检查并正确链接该检查，使其成为下一版本中提供的检查套件的一部分。 
> 检查套件的一部分。 

自定义检查的一个例子是确定某些用户是否是特定用户组的成员。
这种类型的检查对实施非常具体，一般不适用于所有安装。
这些类型的元数据检查可用于扩展 DHIS2 中的默认检查。

自定义校验可以通过满足以下要求来实现，我们将对每个要求进行详细说明：
- Supplying your own list of custom data integrity checks in a list file named `custom-data-integrity-checks.yaml`
 in your `DHIS2_HOME` directory
- 在您的 `DHIS2_HOME` 目录中建立名为 `custom-data-integrity-checks` 的目录
- 提供有效的自定义数据完整性检查 yaml 文件

#### 自定义数据完整性检查列表文件{ #custom-data-integrity-check-list-file } 

DHIS2 只在需要时才会尝试加载数据完整性文件。
数据完整性检查时：

    GET /api/dataIntegrity

加载数据完整性文件时，DHIS2 会在您的 `DHIS2_HOME` 目录中查找名为 `custom-data-integrity-checks.yaml` 的文件。
数据完整性文件。如果不使用自定义检查，且该文件不存在，则会出现如下警告日志
的警告日志：

```text
08:29:57.729  WARN o.h.d.d.DataIntegrityYamlReader: Failed to load data integrity check from YAML. Error message `{DHIS2_HOME}/custom-data-integrity-checks.yaml (No such file or directory)
```

如果要执行自定义数据完整性检查，则必须有该文件。要查看核心数据完整性检查
文件的示例，请查看 [this file](https://github.com/dhis2/dhis2-core/blob/master/dhis-2/dhis-services/dhis-service-administration/src/main/resources/data-integrity-checks.yaml)。


The `custom-data-integrity-checks.yaml` file should list all of your custom data integrity checks.
As an example, it could look something like this:

```yaml
检查
  - categories/my_custom_check.yaml
  - users/my_user_group_check.yaml
  - base_check.yaml
```

该文件中的检查名称前面可以加上一个目录名称，以便进行逻辑分组。从上面列出的 3 个检查示例 
目录结构应如下所示：

```
├── DHIS2_HOME
├── dhis.conf
├── custom-data-integrity-checks.yaml
│ ├─── custom-data-integrity-checks
类别
│ │ ├── my_custom_check.yaml
│ ├── 用户
│ │ ├── my_user_group_check.yaml
│ ├─── base_check.yaml
```

#### 名称和代码限制{ #name-and-code-constraints } 

每个数据完整性检查 `name` 和 `code` 必须是唯一的。如果有任何冲突，那么违反的自定义
检查将不会被加载。

> **注**
>
> 系统数据完整性检查总是先加载。因
> 自定义检查不会影响这些核心系统检查。

数据完整性检查 yaml 文件示例位于 [此处](https://github.com/dhis2/dhis2-core/blob/master/dhis-2/dhis-services/dhis-service-administration/src/main/resources/data-integrity-checks/orgunits/orgunits_orphaned.yaml)
供参考。请注意 `name` 属性。

The data integrity `code` is calculated dynamically by using the first letter of each word in the `name`. Some examples:

| 名称                   | 码 |
|------------------------|------|
| my_custom_check        | MCC  |
| my_second_custom_check | MSCC |
| another_custom_check   | ACC  |

If there is a `name` clash, a warning log like this will be present:
```text
09:48:43.138  WARN o.h.d.d.DefaultDataIntegrityService: Data Integrity Check `my_custom_check` not added as a check with that name already exists
```

If there is a `code` clash, a warning log like this will be present:
```text
09:48:43.138  WARN o.h.d.d.DefaultDataIntegrityService: Data Integrity Check `my_custom_check` not added as a check with the code `MCC` already exists
```

#### 数据完整性检查模式{ #data-integrity-check-schema } 

数据完整性检查文件必须符合[JSON 模式](https://github.com/dhis2/dhis2-core/blob/master/dhis-2/dhis-services/dhis-service-administration/src/main/resources/data-integrity-checks/integrity_check_schema.json)。
如果检查不符合该模式，则会出现如下警告：
```text
09:48:43.136  WARN o.h.d.d.DataIntegrityYamlReader: JsonSchema validation errors found for Data Integrity Check `categories/my_custom_check.yaml`. Errors: [$.name: is missing but it is required]
```

在加载和使用该检查之前，必须纠正任何违反模式的行为。

如果数据完整性检查文件包含无效的 yaml，就会出现类似这样的警告日志：
```text
10:30:37.858  WARN o.h.d.d.DataIntegrityYamlReader: JsonSchema validation errors found for Data Integrity Check `my_custom_check.yaml`. Errors: [$: string found, object expected]
```

要查看和使用自定义检查，请参阅主 [数据完整性部分](#webapi_data_integrity)

> **注**
>
> 建议在实施自定义检查时遵循上述示例中的命名和格式约定。
> 自己的自定义检查，以避免出现任何问题

#### 数据完整性文件{ #data-integrity-file } 

数据完整性检查 yaml 文件的详细信息，摘自 JSON 模式文件

| 财产        | 所需 | 信息                                                                                                                          |
|-----------------|----------|-------------------------------------------------------------------------------------------------------------------------------|
| 名称            | 是      | 支票的唯一名称                                                                                                      |
| 描述     | 是      | 描述                                                                                                                   |
| 部分         | 是      | 用于对检查（如类别、用户）进行逻辑分组                                                                    |
| section_order   | 是      | 在用户界面中显示时的检查顺序                                                                               |
| 摘要_sql     | 是      | SQL 查询，该查询应返回代表问题总数的单一结果                                   |
| 详情_sql     | 是      | SQL 查询，该查询应返回该特定问题中已识别对象的列表。至少应返回 uid 和名称 |
| details_id_type | 是      | 一个短字符串，用于标识详细信息 SQL 的部分                                                                |
| 严重性        | 是      | 问题的严重程度。INFO、WARNING、SEVERE、CRITICAL] 中的一个                                                      |
| 导言    | 是      | 概述检查目标                                                                                          |
| 建议  | 是      | 概述如何解决发现的问题                                                                                    |

### 自定义数据完整性检查示例{ #example-custom-data-integrity-check } 


自定义检查的一个例子是确定用户是否有电子邮件。电子邮件对于
与用户沟通、向他们发送通知以及找回密码。因此，在某些
因此，在 DHIS2 的某些系统中，可以规定所有用户都必须有电子邮件。这种类型的
如下所示。

```
---
name: users_should_have_emails
描述：用户应该有电子邮件。
section：用户
section_order：6
summary_sql：>-
  WITH users_noo_email as (
  SELECT uid,username from
  userinfo where email IS NULL)
  SELECT COUNT(*) as value、
  100*COUNT(*) / NULLIF( ( select COUNT(*) from userinfo), 0) as percent
  from users_no_email；
details_sql：>-
  WITH users_noo_email as (
  SELECT uid,username from
  userinfo 中 SELECT uid,username where email IS NULL)
  SELECT uid,username as from users_no_email；
严重性：警告
介绍：>
  用户应定义电子邮件。这对找回密码和向用户发送通知都很重要。
  向用户发送通知。
建议>
  确保所有用户都已定义电子邮件。
details_id_type: 用户
```

关于不同类型元数据完整性检查的更多示例，请参阅 DHIS2 源代码[此处](https://github.com/dhis2/dhis2-core/tree/master/dhis-2/dhis-services/dhis-service-administration/src/main/resources/data-integrity-checks)。

## 完整的数据集注册 { #webapi_complete_data_set_registrations }

本节是关于数据集的完整数据集注册。一种
注册标记作为完全捕获的数据集。

### 完成数据集 { #webapi_completing_data_sets }

本节说明如何将数据集注册为完整。这是
通过与 *completeDataSetRegistrations* 交互实现
资源：

    GET /api/33/completeDataSetRegistrations

端点支持*POST*方法注册数据集
完成。端点在功能上非常类似于
*dataValueSets* 端点，支持批量导入完整
注册。

支持导入 *XML* 和 *JSON* 格式的有效负载。这
这个有效负载的基本格式，在这个例子中以 *XML* 给出，就像
所以：

```xml
<completeDataSetRegistrations xmlns="http://dhis2.org/schema/dxf/2.0">
  <completeDataSetRegistration period="200810" dataSet="eZDhcZi6FLP" 
    organisationUnit="qhqAxPSTUXp" attributeOptionCombo="bRowv6yZOF2" storedBy="imported"/>
  <completeDataSetRegistration period="200811" dataSet="eZDhcZi6FLP" 
    organisationUnit="qhqAxPSTUXp" attributeOptionCombo="bRowv6yZOF2" storedBy="imported"/>
</completeDataSetRegistrations>
```

*storedBy* 属性是可选的（因为它是
完整的注册对象）。您还可以选择设置
*date* 属性（注册时间）作为属性。是时候了
未设置，将使用当前时间。

导入过程支持以下查询参数：



表：完整数据集登记查询参数

| 参数 | 价值观 | 描述 |
|---|---|---|
| dataSetIdScheme | id | name | code | attribute:ID | 用于映射完整注册信息的数据集属性。 |
| orgUnitIdScheme | id | name | code | attribute:ID | 组织单位的属性，用于映射完整的注册信息。 |
| 属性 OptionComboIdScheme | id | name | code | attribute:ID | 用于映射完整注册的属性选项组合的属性。 |
| 方案 | id | name | code | attribute:ID | 所有对象（包括数据集、组织单位和属性选项组合）的属性，用于映射完整的注册。 |
| 预热缓存 | 假 | 真 | 是在服务器上保存更改，还是只返回导入摘要。 |
| 干运行 | 假 | 真 | 登记是否适用于次级单位 |
| 导入策略 | CREATE &#124; UPDATE &#124; CREATE_AND_UPDATE &#124; DELETE | 在服务器上保存所有、新增或更新导入状态的对象。 |
| 跳过现有检查 | 假 | 真 | 跳过对现有完整注册的检查。提高性能。仅用于空数据库或要导入的注册信息不存在时。 |
| 异步 | 假 | 真 | 表示导入是以异步方式还是同步方式进行。前者适用于非常大的导入，因为它能确保请求不会超时，但性能开销很大。后者速度更快，但要求连接持续到进程结束。 |

The `idScheme`, `dataSetIdScheme`, `orgUnitIdScheme`, `attributeOptionComboIdScheme`, 
`dryRun` and `strategy` (note the dissimilar naming to parameter `importStrategy`) 
can also be set as part of the payload.
In case of XML these are attributes, in case of JSON these are members in the
`completeDataSetRegistrations` node.

例如：
```xml
<completeDataSetRegistrations xmlns="http://dhis2.org/schema/dxf/2.0"
      orgUnitIdScheme="CODE">
    <completeDataSetRegistration period="200810" dataSet="eZDhcZi6FLP"
    organisationUnit="OU_559" attributeOptionCombo="bRowv6yZOF2" storedBy="imported"/>
</completeDataSetRegistrations>
```

如果 URL 参数和有效载荷都设置了方案，则有效载荷优先。 

### 读取完整的数据集注册 { #webapi_reading_complete_data_sets } 

本节说明如何检索数据集完整性
注册。我们将使用 *completeDataSetRegistrations*
资源。要使用的查询参数如下：



表：数据值集查询参数

| 参数 | 描述 |
|---|---|
| 数据集 | 数据集标识符，允许多个数据集 |
| 时间 | ISO 格式的句号标识符。允许使用多个句号。 |
| 开始日期 | 要导出的数值时间跨度的起始日期 |
| 结束日期 | 要导出的数值时间跨度的结束日期 |
| 创建 | 只包括给定时间戳后创建的注册 |
| 创建持续时间 | 只包括在给定时间内创建的注册。格式为<value\><time-unit\> ，其中支持的时间单位为 "d"、"h"、"m"、"s" *（天、小时、分钟、秒）。* 时间单位相对于当前时间。 |
| orgUnit | 组织单位标识符，可多次指定。如果给出 orgUnitGroup，则不适用。 |
| 组织单位组 | 组织单位组标识符，可多次指定。如果给出 orgUnit，则不适用。 |
| 儿童 | 是否将子女纳入组织单位的层级结构中 |
| 限额 | 要包含在回复中的最大注册数。 |
| 方案 | 用于响应中元数据对象的标识符属性。 |
| dataSetIdScheme | 用于响应中数据集的标识符属性。重载 idScheme。 |
| orgUnitIdScheme | 响应中用于组织单位的标识符属性。重载 idScheme。 |
| 属性 OptionComboIdScheme | 用于响应中属性选项组合的标识符属性。重载 idScheme。 |
The `dataSet` and `orgUnit` parameters can be repeated in order to include multiple data sets and organisation units.

The `period`, `startDate`,  `endDate`, `created` and `createdDuration` parameters provide multiple ways to set the time dimension for the request, thus only
one can be used. For example, it doesn't make sense to both set the start/end date and to set the periods.

请求示例如下所示：

```bash
GET /api/33/completeDataSetRegistrations?dataSet=pBOMPrpg1QX
  &startDate=2014-01-01&endDate=2014-01-31&orgUnit=YuQRtpLP10I
  &orgUnit=vWbkYPRmKyS&children=true
```

您可以获得 *xml* 和 *json* 格式的响应。你可以指出
通过 *Accept* HTTP 标头，您更喜欢哪种响应格式
在上面的例子中。对于 xml，您使用 *application/xml*；对于 json 你
使用*应用程序/json*。

### 未完成的数据集 { #webapi_uncompleting_data_sets } 

本节说明如何取消注册数据的完整性
放。要取消完成数据集，您将与
completeDataSetRegistrations 资源：

    GET /api/33/completeDataSetRegistrations

此资源支持*DELETE* 取消注册。以下查询
支持参数：



表：完整数据集登记查询参数

| 查询参数 | 需要 | 描述 |
|---|---|---|
| ds | 是的 | 数据集标识符 |
| 聚乙烯 | 是的 | 期间标识符 |
| 欧 | 是的 | 组织单位标识符 |
| cc | 否（必须与 cp 结合） | 属性组合标识符（用于锁定检查） |
| cp | 否（必须与 cp 结合） | 属性选项标识符，多个值用 ; 分隔（用于锁定检查） |
| 多欧 | 否（默认为假） | 登记是否适用于次级单位 |



# 数据审批 { #data-approval } 

## 数据审批 { #webapi_data_approval } 

本节说明如何批准、取消批准和检查批准
使用 *dataApprovals* 资源的状态。批准是按数据完成的
审批工作流、期间、组织单位和属性选项组合。

    /api/33/dataApprovals

数据批准工作流与多个实体相关联：

* 定义批准频率的期间类型
* 可选类别组合
* 工作流程中的一个或多个数据批准级别
* 一个或多个用于数据收集的数据集

### 获取批准状态 { #webapi_data_approval_get_status } 

要获取数据集的批准信息，您可以发出GET请求：

    / api / dataApprovals？wf = rIUL3hYOjJc＆pe = 201801＆ou = YuQRtpLP10I



表：数据核准查询参数

| 查询参数 | 需要 | 描述 |
|---|---|---|
| wf | 是的 | 数据批准工作流标识符 |
| 聚乙烯 | 是的 | 期间标识符 |
| 欧 | 是的 | 组织单位标识符 |
| 冠捷 | 不 | 属性选项组合标识符 |

> **注意**
>
> 为了向后兼容，在此和其他数据批准请求中，可能会为数据集提供参数`ds`而不是`wf`，如下所述。如果给出了数据集，则将使用与该数据集关联的工作流。

这将产生类似于以下的响应：

```json
{
  "mayApprove": false,
  "mayUnapprove": false,
  "mayAccept": false,
  "mayUnaccept": false,
  "state": "APPROVED_HERE",
  "approvedBy": "User A",
  "approvedAt": "2022-01-13T12:56:07.005",
  "acceptedBy": "User A",
  "acceptedAt": "2022-01-13T12:56:07.005"
}
```

返回的参数是：

表：数据核准返回参数

| 返回参数 | 描述 |
|---|---|
| 可批准        | 当前用户是否可以批准该数据选择。 |
| 可以不批准      | 当前用户是否可以取消对该数据选择的批准。 |
| 可接受         | 当前用户是否可以接受该数据选择。 |
| 可以不接受       | 当前用户是否可以不接受该数据选择。 |
| 州             | 下表中有一项数据批准声明。 |
| 通过        | 如果选择已获批准，如果存在（不一定需要），则表示批准的用户名。 |
| 核准时间        | 如果选择已获批准，如果存在（不一定需要），则表示创建最高级别批准的日期和时间。 |
| 已接受        | 如果选择已批准，如果存在（不一定需要），则是上次更新的用户名。 |
| 已接受        | 如果选择已获批准，如果存在（不一定需要），则表示最高批准级别最后一次更新的日期和时间。 |


表：数据审批状态

| 国家 | 描述 |
|---|---|
| 不可批准 | 数据批准不适用于此选择。(数据既非已批准也非未批准）。 |
| UNAPPROVED_WAITING | 数据可被批准用于此选择，但在准备批准之前，还在等待下级批准。 |
| UNAPPROVED_ELSEWHERE | 数据未经批准，正在其他地方等待批准（此处无法批准）。 |
| UNAPPROVED_READY | 数据未经批准，准备批准该选择。 |
| APPROVED_HERE | 数据已获批准，并在此处获得批准（因此可能在此处未获批准）。 |
| APPROVED_ELSEWHERE | 数据已获批准，但此处未获批准（因此此处无法取消批准）： <br> * 数据在更高级别获得批准。<br> * 批准数据用于更广泛的类别选项。<br> * 所选时期的所有子时期的数据都已批准。<br> 在前两种情况下，有一个单一的数据批准对象涵盖所选内容。第三种情况则没有。 |
| ACCEPTED_HERE | 数据在此处已获批准和接受（因此在此处可能未获批准）。 |
| ACCEPTED_ELSEWHERE | 数据得到批准和接受，但在其他地方。 |

注意查询数据审批状态时，可以指定
查询参数的任意组合。您指定的组合
不需要描述数据被批准的地方
审批级别。例如：

  - 组织单位可能不在审批级别。这
    批准状态取决于数据是否在某个时间被批准
    组织单位上级的批准级别。

  - 您可以指定单个属性类别选项。批准
    状态取决于数据是否被批准用于属性
    包含其中一项或多项的类别选项组合
    选项。

  - 您可以指定一个时间段，该时间段长于
    数据输入和批准的数据集。批准
    状态取决于数据是否被批准用于所有
    指定期间内的数据集期间。

对于与您可能需要的类别组合关联的数据集
获取单个属性选项组合的数据批准记录
从具有 GET 请求的以下资源：

    /api/dataApprovals/categoryOptionCombos?wf=rIUL3hYOjJc&pe=201801&ou=YuQRtpLP10I

### 批量获取批准状态 { #bulk-get-approval-status } 

要获取多个批准状态的列表，可以发出类似于以下内容的GET请求：

    /api/dataApprovals/approvals?wf=rIUL3hYOjJc&pe=201801,201802&ou=YuQRtpLP10I

参数 `wf`、`pe`、`ou` 和 `aoc` 与获取单个批准状态的参数相同，但您可以为每个参数提供一个以逗号分隔的一个或多个值的列表。

这将为您提供一个包含批准参数和状态列表的响应，如下所示：

```json
[
  {
    "aoc": "HllvX50cXC0",
    "pe": "201801",
    "level": "KaTJLhGmU95",
    "ou": "YuQRtpLP10I",
    "permissions": {
      "mayApprove": false,
      "mayUnapprove": true,
      "mayAccept": true,
      "mayUnaccept": false,
      "mayReadData": true,
      "approvedBy": "User A",
      "approvedAt": "2022-01-13T12:56:07.005",
      "acceptedBy": "User A",
      "acceptedAt": "2022-01-13T12:56:07.005"      
    },
    "state": "APPROVED_HERE",
    "wf": "rIUL3hYOjJc"
  },
  {
    "aoc": "HllvX50cXC0",
    "pe": "201802",
    "ou": "YuQRtpLP10I",
    "permissions": {
      "mayApprove": true,
      "mayUnapprove": false,
      "mayAccept": false,
      "mayUnaccept": false,
      "mayReadData": true
    },
    "state": "UNAPPROVED_READY",
    "wf": "rIUL3hYOjJc"
  }
]
```

下表描述了返回的字段。

| 领域       | 描述 |
| ----------- | ----------- |
| 冠捷         | 属性选项组合标识符 |
| 聚乙烯          | 期间标识符 |
| 欧          | 组织单位标识符 |
| 权限 | 权限：与获取单一审批状态的定义相同（见表_数据审批返回参数_）。 |
| 州       | 数据批准状态之一（与获取单个批准状态相同）。 |
| wf          | 数据批准工作流标识符 |

### 批准数据 { #webapi_data_approval_approve_data } 

要批准数据，您可以向 *dataApprovals* 发出 *POST* 请求
资源。要取消批准数据，您可以发送*DELETE*请求到数据批准资源。

    POST DELETE /api/33/dataApprovals

要接受已经批准的数据，您可以发出 *POST* 请求
到 *dataAcceptances* 资源。要取消接受数据，您可以发出
*DELETE* 对 *dataAcceptances* 资源的请求。

    POST DELETE /api/33/dataAcceptances

这些请求包含以下参数：



表：数据审批操作参数

| 动作参数 | 需要 | 描述 |
|---|---|---|
| wf | 是的 | 数据批准工作流标识符 |
| 聚乙烯 | 是的 | 期间标识符 |
| 欧 | 是的 | 组织单位标识符 |
| 冠捷 | 不 | 属性选项组合标识符 |

注意，与查询数据审批状态不同，必须指定
对应于可以选择的数据的参数
得到正式认可的。特别是，以下两项都必须为真：

  - 组织单位的级别必须由审批级别指定
    在工作流程中。

  - 指定的时间段必须与
    工作流程。

### 批量批准数据 { #webapi_data_approval_bulk_approve_data } 

您可以通过发布到批准大量数据记录
`/api/dataApprovals/approvals` 资源。

    POST /api/33/dataApprovals/approvals

您可以通过发布到
`/api/dataApprovals/unapprovals` 资源。

    POST /api/33/dataApprovals/unapprovals

您可以通过发布到
`/api/dataAcceptances/acceptances` 资源。

    POST /api/33/dataAcceptances/acceptances

您可以通过发布到
`/api/dataAcceptances/unacceptances` 资源。

    POST /api/33/dataAcceptances/unacceptances

批准有效负载受JSON支持，如下所示：

```json
{
  "wf": [
    "pBOMPrpg1QX", "lyLU2wR22tC"
  ],
  "pe": [
    "201601", "201602"
  ],
  "approvals": [
    {
      "ou": "cDw53Ej8rju",
      "aoc": "ranftQIH5M9"
    }, 
    {
      "ou": "cDw53Ej8rju",
      "aoc": "fC3z1lcAW5x"
    }
  ]
}
```

### 获取数据批准级别 { #get-data-approval-levels } 

要检索数据审批工作流及其数据审批级别，您
可以发出类似这样的 GET 请求：

    /api/dataApprovalWorkflows?
      fields=id,name,periodType,dataApprovalLevels[id,name,level,orgUnitLevel]


### 数据审批机关{ #authorities-for-data-approval } 

- `F_DATA_APPROVAL_WORKFLOW` : allow user to Add/Update Data Approval Workflow
- `F_DATA_APPROVAL_LEVEL` : allow user to Add/Update Data Approval Level


# 分享中 { #sharing } 

## 分享中 { #webapi_sharing } 

共享解决方案允许您共享系统中的大多数对象
特定的用户组并定义对象是否应该公开
可访问或私有。要获取和设置对象的共享状态，您可以
与*共享*资源互动。

    /api/33/sharing

### 获取共享状态 { #webapi_get_sharing_status } 

要请求对象的共享状态，请使用GET请求执行以下操作：

    / api / 33 / sharing？type = dataElement＆id = fbfJHSPpUQD

响应如下所示。

```json
{
  "meta": {
    "allowPublicAccess": true,
    "allowExternalAccess": false
  },
  "object": {
    "id": "fbfJHSPpUQD",
    "name": "ANC 1st visit",
    "publicAccess": "rw------",
    "externalAccess": false,
    "user": {},
    "userGroupAccesses": [
      {
        "id": "hj0nnsVsPLU",
        "access": "rw------"
      },
      {
        "id": "qMjBflJMOfB",
        "access": "r-------"
      }
    ]
  }
}
```

### 设定分享状态 { #webapi_set_sharing_status } 

您可以使用相同的 URL 定义对象的共享状态
一个 POST 请求，其中 JSON 格式的有效负载如下所示：

```json
{
  "object": {
    "publicAccess": "rw------",
    "externalAccess": false,
    "user": {},
    "userGroupAccesses": [
      {
        "id": "hj0nnsVsPLU",
        "access": "rw------"
      },
      {
        "id": "qMjBflJMOfB",
        "access": "r-------"
      }
    ]
  }
}
```

在此示例中，有效负载定义了具有读写权限的对象
公共访问，无外部访问（无需登录），读写访问
一个用户组和另一个用户组的只读访问权限。你可以
使用 curl 将其提交到共享资源：

```bash
curl -d @sharing.json "localhost/api/33/sharing?type=dataElement&id=fbfJHSPpUQD"
  -H "Content-Type:application/json" -u admin:district
```
**注**
> 可以创造出令人惊讶的共享组合。例如
> 例如，如果 `externalAccess` 设置为 `true` 但 `publicAccess` 设置为
> 设置为 `--------`，那么用户只有在注销时才能访问该对象。 
> 只有在注销时才能访问对象。




## 新共享对象{ #new-sharing-object } 
From 2.36 a new `sharing` property has been introduced in order to replace the old sharing properties `userAccesses`, `userGroupAccesses`, `publicAccess`, `externalAccess` in all metadata classes that have sharing enabled. This `Sharing` object is saved as a JSONB column in database. 
However, in order make it backward compatible the old sharing objects still work normally as before, for both import and export. In backend sharing data will be saved to new  JSONb `sharing` column instead of the old `*accesses` tables.

格式如下
```json
{
  "name": "ANC 1st visit",
  "publicAccess": "rw------",
  "externalAccess": false,
  "userGroupAccesses": [
      {
          "access": "r-r-----",
          "userGroupUid": "Rg8wusV7QYi",
          "displayName": "HIV Program Coordinators",
          "id": "Rg8wusV7QYi"
      }
  ],
  "userAccesses": [],
  "user": {
      "displayName": "Tom Wakiki",
      "name": "Tom Wakiki",
      "id": "GOLswS44mh8",
      "username": "system"
  },
  "sharing": {
      "owner": "GOLswS44mh8",
      "external": false,
      "users": {},
      "userGroups": {
          "Rg8wusV7QYi": {
              "access": "r-r-----",
              "id": "Rg8wusV7QYi"
          }
      },
      "public": "rw------"
  }
}
```

### 使用新的 JSON 补丁应用程序设置共享状态{ #webapi_set_sharing_status_using_json_patch_api } 
您可以使用 [JSON Patch API]（#webapi_partial_updates）更新对象的共享，方法是向该端点发送 `PATCH` 请求，并在请求头中注明 `Content-Type: application/json-patch+json` 字样。
```
api/dataElements/fbfJHSPpUQD
```
Please note that this function ***only supports*** new `sharing` format. The payload in JSON format looks like this:
```json
[
  {
    "op": "replace",
    "path": "/sharing/users",
    "value": {
      "NOOF56dveaZ": {
        "access": "rw------",
        "id": "NOOF56dveaZ"
      },
      "Kh68cDMwZsg": {
        "access": "rw------",
        "id": "Kh68cDMwZsg"
      }
    }
  }
]
```
You can add users to `sharing` property of an object like this
```json
[
  {
    "op": "add",
    "path": "/sharing/users",
    "value": {
      "NOOF56dveaZ": {
        "access": "rw------",
        "id": "NOOF56dveaZ"
      },
      "Kh68cDMwZsg": {
        "access": "rw------",
        "id": "Kh68cDMwZsg"
      }
    }
  }
]
```
You can add one user to `sharing` like this
```json
[
  {
    "op": "add",
    "path": "/sharing/users/NOOF56dveaZ",
    "value": {
      "access": "rw------",
      "id": "NOOF56dveaZ"
    }
  }
]
```
You can remove one user from `sharing` like this
```json
[
  { 
    "op": "remove", 
    "path": "/sharing/users/N3PZBUlN8vq"
  }
]
```

## 级联共享仪表板{ #cascade-sharing-for-dashboard } 

### 总览 { #overview } 

- `cascadeSharing` 可用于仪表盘。该函数会将仪表盘的 `userAccesses` 和 `userGroupAccesses` 复制到其 `DashboardItems` 中的所有对象，包括 `Map`, `EventReport`, `EventChart`, `Visualization`。 
- 此函数不会复制 `METADATA_WRITE` 访问权限。复制的 `UserAccess` 和 `UserGroupAccess` 将**只**获得 `METADATA_READ` 权限。 
- The `publicAccess` setting of the Dashboard is not copied.
- If any target object has `publicAccess` enabled, then it will be skipped and will not receive the `UserAccesses` or `UserGroupAccesses` from the Dashboard.
- 当前用户必须拥有所有目标对象的 `METADATA_READ` 共享权限。如果用户没有，则会产生错误 `E5001`。
- 当前用户必须拥有 `METADATA_WRITE` 共享权限才能更新任何目标对象。如果要更新目标对象，而用户没有此权限，则会产生错误 `E3001`。

### 用例示例{ #sample-use-case } 

- DashboardA is shared to userA with `METADATA_READ_WRITE` permission. 
- DashboardA 具有 VisualizationA，而 VisualizationA 具有 DataElementA。
- VisualizationA, DataElementA have `publicAccess` *disabled* and are *not shared* to userA.
- 执行 DashboardA 的级联共享后，用户 A 将拥有对 VisualizationA 和 DataElementA 的 `METADATA_READ` 访问权限。

### 应用程序接口端点{ #api-endpoint } 

- Send `POST` request to endpoint 
```
api/dashboards/cascadeSharing/{dashboardUID}
```


### 应用程序接口参数{ #api-parameters } 

| 名称 | 默认 | 描述 |
| --- | --- | -- |
| 干运行 | 假 | If this is set to `true`, then cascade sharing function will proceed without updating any objects. </br> The response will includes errors if any and all objects which will be updated. </br>This helps user to know the result before actually executing the cascade sharing function.
| 原子 | 假 | If this is set to `true`, then the cascade sharing function will stop and not updating any objects if there is an error. </br>Otherwise, if this is `false` then the function will try to proceed with best effort mode.

答复样本： 

```json
{
  "errorReports": [
    {
      "message": "No matching object for reference. Identifier was s46m5MS0hxu, and object was DataElement.",
      "mainKlass": "org.hisp.dhis.dataelement.DataElement",
      "errorCode": "E5001",
      "errorProperties": [
        "s46m5MS0hxu",
        "DataElement"
      ]
    }
  ],
  "countUpdatedDashBoardItems": 1,
  "updateObjects": {
    "dataElements": [
      {
        "id": "YtbsuPPo010",
        "name": "Measles doses given"
      },
      {
        "id": "l6byfWFUGaP",
        "name": "Yellow Fever doses given"
      }
    ]
  }
}
```

### 响应特性： { #response-properties } 

- `errorReports`: 包括级联共享过程中的所有错误。
- `countUpdatedDashBoardItems`: Number of `DashboardItem` will be or has been updated depends on `dryRun` mode.
- `updateObjects`：将更新或已更新的所有对象的列表，取决于 `dryRun` 模式。

## 批量共享补丁 API{ #webapi_bulk_sharing } 
- 批量共享 API 允许您对多个元数据对象应用共享设置。这意味着可以在一个 API 操作中为多个对象添加或删除多个用户和用户组。
- 该应用程序接口不应支持元数据对象的长期同步，而应将其视为一次性操作。
- 应用程序接口需要尊重共享访问控制，即当前用户必须有权限编辑正在更新的对象的共享。
- 从 2.38 版开始引入了两个新的 api 端点，允许批量共享补丁更新，如下所述。
- 请注意，这些 `PATCH` 请求必须使用标头 `Content-type:application/json-patch+json`

### 将 `/api/{object-type}/sharing` 与 `PATCH` 请求一起使用
- 通过该端点，用户可为*个对象类型*的多个元数据对象应用一套共享设置。
- 请注意，我们仍然支持通过端点 `api/{object-type}/{uid}` 为一个对象发送 JsonPatch 请求。例如，您仍然可以通过向 `api/dataElements/cYeuwXTCPkU/sharing` 发送 PATCH 请求来更新数据元素的共享。

例如 
```
curl -X PATCH -d @payload.json -H "Content-Type: application/json-patch+json" "https://play.dhis2.org/dev/api/dataElements/sharing"
```

### 使用 `/api/metadata/sharing` 与 `PATCH` 请求{ #using-apimetadatasharing-with-patch-request } 
- 该端点允许用户在一个有效载荷中为*多个对象类型*应用共享设置。

例：
```
curl -X PATCH -d @payload.json -H "Content-Type: application/json-patch+json" "https://play.dhis2.org/dev/api/metadata/sharing"
```

## 参数{ #parameters } 
- 两个补丁应用程序端点的参数相同：

| 名称  |  默认  |  描述  |
| ---- | ---- | -------------------- |
| 原子 | 假 | 如果设置为 "true"，那么如果出现错误，批处理函数将停止，不再更新任何对象<br> 否则，如果设置为 "false"，那么函数将尝试以 "尽力而为 "模式继续运行。 |


## 验证{ #validation } 
- 将验证所有对象 ID 是否存在。
- 当前用户需要拥有更新对象的元数据读取/写入权限。
- 元数据导入服务中的所有现有验证也将应用。

## 回复{ #response } 
- 响应格式应与 `/api/metadata` api 相同。

## 有效载荷格式{ #payload-formats } 
- 使用 `/api/{object-type}/sharing` 的单一对象类型的有效载荷如下所示
```json
{
  "dataSets":[
    "cYeuwXTCPkU",
    "aYeuwXTCPkU"
  ],
  "patch":[
    {
      "op":"add",
      "path":"/sharing/users/DXyJmlo9rge",
      "value":{
        "access":"rw------",
        "id":"DXyJmlo9rge"
      }
    },
    {
      "op":"remove",
      "path":"/sharing/users/N3PZBUlN8vq"
    }
  ]
}
```

- 使用 `api/metadata/sharing` 在一个有效载荷中包含多个对象类型的有效载荷
```json
{
  "dataElements": {
    "fbfJHSPpUQD": [
      {
        "op": "replace",
        "path": "/sharing/users",
        "value": {
          "NOOF56dveaZ": {
            "access": "rw------",
            "id": "CotVI2NX0rI"
          },
          "Kh68cDMwZsg": {
            "access": "rw------",
            "id": "DLjZWMsVsq2"
          }
        }
      }
    ]
  },
  "dataSets": {
    "cYeuwXTCPkA": [
      {
        "op": "remove",
        "path": "/sharing/users/N3PZBUlN8vq"
      }
    ],
    "cYeuwXTCPkU": [
      {
        "op": "add",
        "path": "/sharing/users/DXyJmlo9rge",
        "value": {
          "access": "rw------",
          "id": "DXyJmlo9rge"
        }
      }
    ]
  },
  "programs": {
    "GOLswS44mh8": [
      {
        "op": "add",
        "path": "/sharing/userGroups",
        "value": {
          "NOOF56dveaZ": {
            "access": "rw------",
            "id": "NOOF56dveaZ"
          },
          "Kh68cDMwZsg": {
            "access": "rw------",
            "id": "Kh68cDMwZsg"
          }
        }
      }
    ]
  }
}
```


# 排程 { #webapi_scheduling }

## 获取可用的工作类型{ #types }

要获取所有可用作业类型的列表，可以使用以下端点：

    GET /api/jobConfigurations/jobTypes

响应包含有关每个作业类型的信息，包括名称、作业类型、键、调度类型和可用参数。调度类型可以是 `CRON`，这意味着可以使用带有 `cronExpression` 字段的 cron 表达式来调度作业，或者是`FIXED_DELAY`，意味着可以使用 `delay` 字段将作业调度为以固定延迟运行.场延迟以秒为单位。

响应将类似于以下内容：

```json
{
  "jobTypes": [
    {
      "name": "Data integrity",
      "jobType": "DATA_INTEGRITY",
      "key": "dataIntegrityJob",
      "schedulingType": "CRON"
    }, {
      "name": "Resource table",
      "jobType": "RESOURCE_TABLE",
      "key": "resourceTableJob",
      "schedulingType": "CRON"
    }, {
      "name": "Continuous analytics table",
      "jobType": "CONTINUOUS_ANALYTICS_TABLE",
      "key": "continuousAnalyticsTableJob",
      "schedulingType": "FIXED_DELAY"
    }
  ]
}
```

## 工作配置{ #job-configurations } 
DHIS2允许安排各种类型的作业。每种类型的作业都有不同的配置属性，可让您更好地控制作业的运行方式。此外，如果需要，您可以将同一作业配置为以不同的配置和不同的时间间隔运行。

表：主要特性

| 物业 | 描述 | 类型 |
|---|---|---|
| 名称 | 工作名称 | 串 |
| cronExpression | cron 表达式，用于定义作业运行的时间间隔。 | 字符串（Cron 表达式） |
| 职位类型 | 任务类型代表运行的任务。在下表中，您可以概览现有的任务类型。每种任务类型都有一套特定的任务配置参数。 | 字符串（枚举） |
| 工作参数 | 工作参数（如果适用于工作类型）。 | (参见工作类型列表） |
| 启用 | A job can be added to the system without it being scheduled by setting `enabled` to false in the JSON payload. Use this if you want to temporarily stop scheduling for a job, or if a job configuration is not complete yet. | Boolean |



### 工作参数{ #job-parameters }

Table: `DATA_INTEGRITY` job parameters

| 名称          | 类型          | 默认 | 描述                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `checks` | 字符串数组 | `[]` = 全部 | 按执行顺序运行的检查名称 |
| `type`   | 枚举            | `REPORT`   | 报告、摘要或细节                       |

Table: `ANALYTICS_TABLE` job parameters

| 名称          | 类型          | 默认 | 描述                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `lastYears` | int  | 0       | 包括的年份数 |
| `skipTableTypes` | 枚举数组  | `[]`    | Skip generation of tables; Possible values: `DATA_VALUE`, `COMPLETENESS`, `COMPLETENESS_TARGET`, `ORG_UNIT_TARGET`, `EVENT`, `ENROLLMENT`, `VALIDATION_RESULT` |
| `skipResourceTables` | 布尔 | `false`   | 跳过生成资源表 |
| `skipPrograms` | 字符串数组 | `[]`    | 应跳过的程序（ID）的可选列表 |

Table: `CONTINUOUS_ANALYTICS_TABLE` job parameters

| 名称          | 类型          | 默认 | 描述                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `lastYears` | int           | `0`     | 包括的年份数 |
| `skipTableTypes` | 枚举数组 | `[]`    | Skip generation of tables; Possible values: `DATA_VALUE`, `COMPLETENESS`, `COMPLETENESS_TARGET`, `ORG_UNIT_TARGET`, `EVENT`, `ENROLLMENT`, `VALIDATION_RESULT` |
| `fullUpdateHourOfDay` | int           | `0`     | 全面更新分析表的时段（0-23） |

Table: `DATA_SYNC` job parameters

| 名称          | 类型          | 默认 | 描述                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `pageSize` | int | `10000` | 单位处理的数据值个数 |

Table: `META_DATA_SYNC` job parameters

| 名称          | 类型          | 默认 | 描述                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `trackerProgramPageSize` | int | `20` | 作为一个单位处理的跟踪实体数量 |
| `eventProgramPageSize` | int | `60` | 单位处理的事件数           |
| `dataValuesPageSize` | int | `10000` | 单位处理的数据值个数  |

Table: `MONITORING` (Validation rule analysis) job parameters

| 名称          | 类型          | 默认 | 描述                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `relativeStart` | int | `0` | 与执行日期有关的数字，该日期与监测期的起始日期相似 |
| `relativeEnd` | int | `0` | 与执行日期有关的数字，该日期与监测期结束日期相似 |
| `validationRuleGroups` | 字符串数组 | `[]` | 工作中要包括的验证规则组 (UID) |
| `sendNotification` | 布尔 | `false` | Set `true` if job should send notifications based on validation rule groups |
| `persistsResults` | 布尔 | `false` | Set `true` if job should persist validation results |

Table: `PUSH_ANALYSIS` job parameters

| 名称          | 类型          | 默认 | 描述                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `pushAnalysis` | 字符串数组 | `[]` |  要运行的推送分析的 UID |

Table: `PREDICTOR` job parameters

| 名称          | 类型          | 默认 | 描述                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `relativeStart` | int | `0` | 与执行日期有关的数字，该日期与监测期的起始日期相似 |
| `relativeEnd` | int | `0` | 与执行日期有关的数字，该日期与监测期的起始日期相似 |
| `predictors` | 字符串数组 | `[]` | 工作中应包括的预测因子（UID                                                      |
| `predictorGroups` | 字符串数组 | `[]` | 工作中应包括的预测组（UID                                                |

Table: `MATERIALIZED_SQL_VIEW_UPDATE` job parameters

| 名称          | 类型          | 默认 | 描述                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `sqlViews`    | 字符串数组 | `[]` | 工作更新的 SQL 视图的 UID |


### 创建工作配置{ #create-a-job-configuration } 

要配置作业，您可以对以下资源发出POST请求：

    /api/jobConfigurations

不含JSON格式参数的作业如下所示：

```json
{
  "name": "",
  "jobType": "JOBTYPE",
  "cronExpression": "0 * * ? * *",
}
```

参数为JSON格式的分析表作业的示例：

```json
{
  "name": "Analytics tables last two years",
  "jobType": "ANALYTICS_TABLE",
  "cronExpression": "0 * * ? * *",
  "jobParameters": {
    "lastYears": "2",
    "skipTableTypes": [],
    "skipResourceTables": false
  }
}
```

作为带有JSON格式参数的推送分析作业的示例：

```json
{
   "name": "Push anlysis charts",
   "jobType": "PUSH_ANALYSIS",
   "cronExpression": "0 * * ? * *",
   "jobParameters": {
     "pushAnalysis": [
       "jtcMAKhWwnc"
     ]
    }
 }
```

An example of a job with scheduling type `FIXED_DELAY` and 120 seconds delay:

```json
{
  "name": "Continuous analytics table",
  "jobType": "CONTINUOUS_ANALYTICS_TABLE",
  "delay": "120",
  "jobParameters": {
    "fullUpdateHourOfDay": 4
  }
}
```

### 获取工作配置{ #get-job-configurations } 

列出所有作业配置：

    GET /api/jobConfigurations

检索作业：

    GET /api/jobConfigurations/{id}

响应有效负载如下所示：

```json
{
  "lastUpdated": "2018-02-22T15:15:34.067",
  "id": "KBcP6Qw37gT",
  "href": "http://localhost:8080/api/jobConfigurations/KBcP6Qw37gT",
  "created": "2018-02-22T15:15:34.067",
  "name": "analytics last two years",
  "jobStatus": "SCHEDULED",
  "displayName": "analytics last two years",
  "enabled": true,
  "externalAccess": false,
  "jobType": "ANALYTICS_TABLE",
  "nextExecutionTime": "2018-02-26T03:00:00.000",
  "cronExpression": "0 0 3 ? * MON",
  "jobParameters": {
    "lastYears": 2,
    "skipTableTypes": [],
    "skipResourceTables": false
  },
  "favorite": false,
  "configurable": true,
  "access": {
    "read": true,
    "update": true,
    "externalize": true,
    "delete": true,
    "write": true,
    "manage": true
  },
  "lastUpdatedBy": {
    "id": "GOLswS44mh8"
  },
  "favorites": [],
  "translations": [],
  "userGroupAccesses": [],
  "attributeValues": [],
  "userAccesses": []
}
```

### 更新任务配置{ #update-a-job-configuration } 

使用以下端点和JSON有效负载格式，通过参数更新作业：

    PUT /api/jobConfigurations/{id}

```json
{
  "name": "analytics last two years",
  "enabled": true,
  "cronExpression": "0 0 3 ? * MON",
  "jobType": "ANALYTICS_TABLE",
  "jobParameters": {
    "lastYears": "3",
    "skipTableTypes": [],
    "skipResourceTables": false
  }
}
```

### 删除作业配置{ #delete-a-job-configuration } 

使用以下方法删除作业：

    DELETE /api/jobConfigurations/{id}

请注意，某些具有自定义配置参数的作业可能不会被添加，如果
未配置所需的系统设置。一个例子是数据
同步，这需要远程服务器配置。

### 手动运行作业{ #execute }

可以使用

    POST /api/jobConfigurations/{id}/execute


### 搜索有执行错误的工作{ #searching-for-jobs-with-execution-errors } 

自 2.41 版起，作业可存储作业运行的错误，以便日后检查。
错误。 

> **Note** This feature is only accessible for administrator
> with the `F_JOB_LOG_READ` authority and superusers.

要查看与特定任务相关的错误，请使用

    GET /api/jobConfigurations/{id}/errors

要搜索符合用户指定搜索条件的工作，请使用

    GET /api/jobConfigurations/errors

使用以下一个或多个搜索参数

* `user`: include jobs ran by this user
* `from`: include jobs that started after this point in time
* `to`: include jobs that did not start later than this point in time
* `code`: include jobs that have errors with one of the given error codes
* `object`: include jobs that have errors linked to one of the given object IDs
* `type`: 包括有指定类型错误的工作

当使用多个标准时，所有标准都必须符合（AND 逻辑）。
如果给出多个 `code`、`object` 或 `type` 参数，则只需有一个符合即可（OR 逻辑）。

例如，要查找 2024 年 1 月 1 日错误代码为`E1002`的跟踪器导入错误 
(被跟踪实体已存在）的跟踪器导入错误，搜索结果如下：

    GET /api/jobConfigurations/errors?type=TRACKER_IMPORT_JOB&code=E1002&from=2024-01-01&to=2024-01-02

The results show the job run error details. By default, the `input` (the payload of the impport) 
is excluded from the results. To include it add `includeInput=true`:

    GET /api/jobConfigurations/errors?includeInput=true

> **注意**
> 并非所有工作类型都会存储错误。目前，这项功能主要
> 导入作业支持。


## 调度程序应用程序接口{ #scheduler-api } 
而 `/api/jobConfigurations` 则以作业配置对象为中心
API 反映调度程序的状态，而 `/api/scheduler` API 则提供作业进度跟踪信息。 
和 `/api/scheduling` API 提供作业进度跟踪信息。  

### 观察运行中的工作 { #running}
作业运行时，可以观察到执行步骤和状态。
当前正在运行的所有作业类型的列表可通过以下方式提供：

    GET /api/scheduling/running/types

要按作业类型查看所有正在运行的作业，请使用

    GET /api/scheduling/running

由于每种类型在同一时间只能有一个工作在运行，因此可使用
可以使用

    GET /api/scheduling/running/{type}

例如，要查看正在运行的 `ANALYTICS_TABLE` 作业的状态，请使用

    GET /api/scheduling/running/ANALYTICS_TABLE

A job is a sequence of processes. Each process has a sequence of `stages`.
Within each stage there might be zero, one or many `items`. Items could be
processed strictly sequential or parallel, n items at a time. Often the
number of `totalItems` is known up-front.

一般来说，流程中的阶段和阶段中的项目是作为处理数据的 "副作用 "而被 "发现 "的。
作为处理数据的 "副作用"。虽然大多数流程都有固定的
的阶段顺序，但有些处理过程可能会根据处理数据的不同而有不同的阶段。
处理的数据而定。项目通常取决于数据。大多数工作只包括一个
单个流程。

流程-阶段-项目树中的每个节点的状态都是
* `RUNNING`: is currently processed (not yet finished)
* `SUCCESS`: when completed successful
* `ERROR`: when completed with errors or when an exception has occurred
* `CANCELLED`: when cancellation was requested and the item will not complete

### 查看已完成的任务运行{ #completed }
作业一旦成功完成或因异常或取消而失败
或取消，状态就会从运行状态集转移到已完成的作业状态。
已完成的任务状态。这组状态只保留每个作业类型的最新执行状态。
状态。有关概述，请访问

    GET /api/scheduling/completed

有关特定工种的详细信息，请参见以下网站：

    GET /api/scheduling/completed/{type}

In case of the `ANALYTICS_TABLE` job this would be:

    GET /api/scheduling/completed/ANALYTICS_TABLE

### 请求取消正在运行的工作{ #cancel }
任务启动后，会经过一系列步骤。每个步骤可能
又有一系列要处理的项目。虽然作业通常
无法在任何时间点停止，但我们可以请求取消。
一旦进程完成一个项目或步骤，并识别到有人要求取消，它就会合作放弃。
一旦进程完成一个项目或步骤，并识别到取消请求，它就会以合作方式放弃。这意味着工作不会立即停止
立即停止，而是在某些处理过程中的某个未知点离开。
处理。相反，它们会在有机会跳到最后时放弃。
结束。这仍然意味着整个流程是未完成的，不会回滚。
回滚。它可能只是完成了一些步骤，最后跳过了其他步骤。
结束。

要取消正在运行的作业，请使用

    POST /api/scheduling/cancel/{type}

例如，取消运行 `ANALYTICS_TABLE` 作业：

    POST /api/scheduling/cancel/ANALYTICS_TABLE

Depending on the current step and item performed this can take from
milliseconds to minutes before the cancellation becomes effective.
However, the status of the overall process will be shown as `CANCELLED`
immediately when check using

    GET /api/scheduling/running/ANALYTICS_TABLE

只有分成流程、阶段和项目的工作才能有效取消。
才能有效取消。并非所有工作都已拆分。这些工作将运行到
即使已申请取消，这些工作也会运行到完成为止。


## 工作队列{ #queues }
可以使用作业队列创建作业序列（配置）。
队列总是使用唯一的名称和 CRON 表达式触发器。 
队列一旦启动，就会按照给定的顺序运行队列中的所有作业。
第一个作业完成后，第二个作业也会依次开始。

### 列出作业队列名称{ #queues-list } 
要列出现有队列的唯一名称，请使用

    GET /api/scheduler/queues

响应是一个名称数组：
```json
["queue_a", "queue_b"]
```

### 获取任务队列{ #queues-info }
要获取特定队列的所有详细信息，请使用

    GET /api/scheduler/queues/{name}

详细信息包括其名称、CRON 表达式和作业序列：

```json
{
  "name": "myQ",
  "cronExpression": "0 0 1 ? * *",
  "sequence": ["FgAxa6eRSzQ", "BeclVERfWbg" ]
}
```

### 创建新作业队列{ #queues-add }
要创建新队列，请发送 POST 请求，并在有效载荷对象中包含名称、 
CRON 表达式和任务序列的 payload 对象发送 POST 请求：

    POST /api/scheduler/queues/{name}

要创建名称为 `myQ` 的队列，请使用 POST 到 `/api/scheduler/queues/myQ`：

```json
{
  "cronExpression": "0 0 1 ? * *",
  "sequence": ["FgAxa6eRSzQ", "BeclVERfWbg" ]
}
```
A `name` can be present in the payload as well but name specified in the URL
path takes precedence. 

> **注意**
>
> 除队列中的第一个作业外，所有作业配置的 cron 表达式都会被清除。
> 清除，因为它们不再有自己的触发器。需要
> 从队列中删除作业后，需要手动恢复。

### 更新作业队列{ #queues-update }
要更新现有队列 CRON 表达式或序列，请使用 PUT 请求   

    PUT /api/scheduler/queues/{name}

有效负载必须同时说明新的 CRON 表达式和作业序列，如上例中的 
创建新队列的示例。

要重命名队列，可以在有效载荷中说明新名称，而旧名称 
则用于 URL 路径。  

### 删除作业队列{ #queues-delete }
要删除作业队列，请向其资源 URL 发送 DELETE 请求：

    DELETE /api/scheduler/queues/{name}

> **注意**
>
> 删除队列不会删除任何引用的作业配置。任何作业
> 删除队列不会删除任何引用的作业配置。
> 删除队列会禁用任何作业配置。要单独使用它，请提供一个 CRON 
> 表达式并重新启用配置。


## 工作调度员{ #scheduler }
调度程序中的计划是一个基于作业配置和作业队列的列表。
和作业队列为基础的列表。计划表中的条目要么是一个简单的作业配置，要么是一个作业队列、
或作业队列。两者使用相同的条目格式表示。

要获取调度程序列表，请使用 

    GET /api/scheduler

该列表中的工作配置如下所示：

```json
  {
    "name": "User account expiry alert",
    "type": "ACCOUNT_EXPIRY_ALERT",
    "cronExpression": "0 0 2 ? * *",
    "nextExecutionTime": "2023-03-15T02:00:00.000",
    "status": "SCHEDULED",
    "enabled": true,
    "configurable": false,
    "sequence": [
      {
        "id": "fUWM1At1TUx",
        "name": "User account expiry alert",
        "type": "ACCOUNT_EXPIRY_ALERT",
        "cronExpression": "0 0 2 ? * *",
        "nextExecutionTime": "2023-03-15T02:00:00.000",
        "status": "SCHEDULED"
      }
    ]
  }
```
Most notably the `sequence` has only a single item. Information on top level
object and the object in the `sequence` both originate from the job configuration.

列表中的作业队列如下所示：

```json
  {
    "name": "myQ",
    "type": "Sequence",
    "cronExpression": "0 0 1 ? * *",
    "nextExecutionTime": "2023-03-15T01:00:00.000",
    "status": "SCHEDULED",
    "enabled": true,
    "configurable": true,
    "sequence": [
      {
        "id": "FgAxa6eRSzQ",
        "name": "test Q1",
        "type": "ANALYTICS_TABLE",
        "cronExpression": "0 0 1 ? * *",
        "nextExecutionTime": "2023-03-15T01:00:00.000",
        "status": "SCHEDULED"
      },
      {
        "id": "BeclVERfWbg",
        "name": "est Q2",
        "type": "DATA_INTEGRITY",
        "status": "SCHEDULED"
      }
    ]
  }
```
顶层对象源自队列和汇总信息。
序列内的对象源自作为序列一部分的作业配置。
序列的一部分。

### 列出可添加到作业队列的作业条目{ #queueable }
并非所有运行任务配置都能添加到队列中。 
系统作业和已属于队列的作业不能在另一个队列中使用。 
队列中使用。要列出可作为任何队列一部分的作业配置，请使用

    GET /api/scheduler/queueable

要列出可作为特定队列一部分的作业配置，请使用

    GET /api/scheduler/queueable?name={queue}

这还将排除已在指定队列中的所有作业。


# 同步化 { #webapi_synchronization }

本节介绍数据和元数据的提取和推送。

## 数据值推送 { #webapi_sync_data_push }

要将数据值推送到远程服务器，必须首先配置
系统设置 > 中相关服务器的 URL 和凭据
同步，然后向以下资源发出 POST 请求：

    / api / 33 / synchronization / dataPush

## 元数据拉取 { #webapi_sync_metadata_pull }

要从远程 JSON 文档中启动元数据拉取，您可以创建一个
使用 *url* 作为请求负载的 POST 请求到以下资源：

    / api / 33 / synchronization / metadataPull

> **注**
>
> 提供的 URL 将根据 `dhis.conf` 文件中的配置属性 `system.remote_servers_allowed`进行检查。
> 如果基本 URL 不在允许的配置服务器之列，则不允许执行操作。请看下面的失败示例。  
> 配置集为 `system.remote_servers_allowed=https://server1.org/,https://server2.org/` 的一些示例
> - 提供 `https://server1.org/path/to/resource` -> 这将被接受
> - 提供 `https://server2.org/resource/path` -> 这将被接受
> - 提供 `https://oldserver.org/resource/path` -> 这将被拒绝
>
失败响应示例

```json
 {
  "httpStatus": "Conflict",
  "httpStatusCode": 409,
  "status": "ERROR",
  "message": "Provided URL is not in the remote servers allowed list",
  "errorCode": "E1004"
}
```

## 可用性检查 { #webapi_sync_availability_check }

检查远程数据服务器的可用性并验证用户
您可以向以下资源发出 GET 请求：

    / api / 33 /同步/可用性



# 审核 { #audit } 

## 稽核 { #webapi_auditing }

DHIS2 将审核汇总数据值、跟踪实体数据值、跟踪实体属性值和数据批准记录的更新和删除。本节将解释如何检索上述实体的审计记录。请注意，其中几个查询参数可重复多次。

### 汇总数据价值审核 { #webapi_auditing_aggregate_audits }

汇总数据值审计的端点位于

```
/api/audits/dataValue
```

表格汇总数据值查询参数

| 参数 | 选项 | 描述 |
|---|---|---|
| ds | 数据集 ID | 从一个或多个数据集标识符获取数据元素 |
| 德 | 数据元素 ID | 一个或多个数据元素标识符 |
| 聚乙烯 | ISO 期 | 一个或多个 ISO 标识符 |
| 欧 | 组织单位标识 | 一个或多个组织单位标识符 |
| 审计类型 | 更新 | 删除 | 按一种或多种审计类型筛选 |
| 跳过分页 | 假 | 真 | 打开/关闭传呼 |
| 分页 | 错误| 真正 | 启用或禁用寻呼 |
| 页码 | 数 | 页码（默认为 1） |
| 页面大小 | 数 | 页面大小（默认值 50） |

示例获取数据集 `lyLU2wR22tC` 和审核类型 `CREATE` 或 `UPDATE` 的审核：

    /api/33/audits/dataValue?ds=lyLU2wR22tC&auditType=CREATE,UPDATE

Example: Get audits for data element `BOSZApCrBni`, org unit `DiszpKrYNg8` and category option combination `TkDhg29x18A`:

    /api/33/audits/dataValue?de=BOSZApCrBni&ou=DiszpKrYNg8&co=TkDhg29x18A

### 跟踪实体数据价值审核 { #webapi_tracked_entity_data_value_audits }
** 过时，将在第 43 版中删除使用 [跟踪实体数据值更改日志端点](https://github.com/dhis2/dhis2-docs/blob/master/src/developer/web-api/tracker.md#event-data-value-change-logs--webapi_event_data_value_change_logs-)**

跟踪实体数据值审计的端点位于

```
/api/audits/trackedEntityDataValue
```

表：跟踪实体数据值查询参数

| 参数 | 选项 | 描述 |
|---|---|---|
| 德 | 数据元素 ID | 一个或多个数据元素标识符 |
| 欧 | 组织单位标识 | 审计事件的一个或多个组织单位标识符 |
| 活动 | 活动 ID | 一个或多个审计事件的事件标识符（用逗号分隔） |
| ps | 计划阶段 ID | 审计活动计划的一个或多个计划负责人 |
| 开始日期 | 开始日期 | 仅返回日期后创建的审计记录 |
| 结束日期 | 结束日期 | 仅返回日期前创建的审计记录 |
| ouMode | 组织单位选择模式 | 精选| 后裔 |
| 审计类型 | 更新 | 删除 | 按一种或多种审计类型筛选 |
| 跳过分页 | 假 | 真 | 打开/关闭传呼 |
| 分页 | 错误| 真正 | 是否启用或禁用寻呼 |
| 页码 | 数 | 页码（默认为 1） |
| 页面大小 | 数 | 页面大小（默认值 50） |

示例：获取数据元素 `eMyVanycQSC` 和 `qrur9Dvnyt5` 的审核：

    / api / 33 / audits / trackedEntityDataValue？de = eMyVanycQSC＆de = qrur9Dvnyt5

示例：获取组织单位 `O6uvpzGd5pu` 的审计信息，包括组织单位层次结构中的后代组织单位：

    /api/audits/trackedEntityDataValue?ou=O6uvpzGd5pu&ouMode=DESCENDANTS

### 跟踪实体属性值审核 { #webapi_tracked_entity_attribute_value_audits }

** 过时，将在第 43 版中删除使用[跟踪实体属性更改日志端点](https://github.com/dhis2/dhis2-docs/blob/master/src/developer/web-api/tracker.md#tracked-entity-attribute-value-change-logs--webapi_tracker_attribute_change_logs-)**

跟踪实体属性值审计的端点位于

```
/api/audits/trackedEntityAttributeValue
```

表格：跟踪实体属性值查询参数

| 参数 | 选项 | 描述 |
|---|---|---|
| 茶 | 被跟踪实体属性 ID | 一个或多个被跟踪实体属性标识符 |
| 跟踪实体 | 被跟踪实体 ID | 一个或多个跟踪实体标识符（用逗号分隔） |
| 审计类型 | 更新 | 删除 | 按一种或多种审计类型筛选 |
| 跳过分页 | 假 | 真 | 打开/关闭传呼 |
| 分页 | 错误| 真正 | 是否启用或禁用寻呼 |
| 页码 | 数 | 页码（默认为 1） |
| 页面大小 | 数 | 页面大小（默认值 50） |

示例：获取已跟踪实体属性 `VqEFza8wbwA` 的审计：

    / api / 33 / audits / trackedEntityAttributeValue？tea = VqEFza8wbwA

示例：获取被跟踪实体实例 `wNiQ2coVZ39` 和审核类型 `DELETE` 的审核：

    /api/33/audits/trackedEntityAttributeValue?trackedEntities=wNiQ2coVZ39&auditType=DELETE

### 跟踪实体实例审核 { #webapi_tracked_entity_instance_audits }

一旦为跟踪实体启用了审计（将跟踪实体类型的 `allowAuditLog` 设置为 `true`），所有读取和搜索操作都会被记录。访问审计日志的端点位于

```
/api/audits/trackedEntity
```

表：被跟踪实体审计查询参数

| 参数 | 选项 | 描述 |
|---|---|---|
| 跟踪实体 | 跟踪实体 UIDS | 一个或多个跟踪实体标识符（用逗号分隔） |
| 用户 | 用户 | 一个或多个用户标识符 |
| 审计类型 | 搜索 | 阅读 | 按一种或多种审计类型筛选 |
| 开始日期 | 开始日期 | Start date for audits in `yyyy-mm-dd` format |
| 结束日期 | 结束日期 | End date for audits in `yyyy-mm-dd` format |
| 跳过分页 | 假 | 真 | 打开/关闭寻呼。 |
| 分页 | 错误| 真正 | 是否启用或禁用寻呼 |
| 页码 | 数 | 页码（默认为 1） |
| 页面大小 | 数 | 页面大小（默认值 50） |

Example: Get audits of audit type `READ` with `startDate` 2018-03-01 and `endDate` 2018-04-24 with a page size of 5:

    /api/33/audits/trackedEntity.json?startDate=2021-03-01&endDate=2022-04-24&auditType=READ&pageSize=5

示例：获取被跟踪实体 `wNiQ2coVZ39` 的审计信息：

    /api/33/audits/trackedEntity.json?trackedEntities=wNiQ2coVZ39

### ***DEPRECATED*** Tracked entity instance audits { #webapi_tracked_entity_instance_audits }

一旦跟踪实体实例启用了审计（将跟踪实体类型的`allowAuditLog`设置为`true`），所有读取和搜索操作都会被记录。访问审计日志的端点位于

```
/api/audits/trackedEntityInstance
```

表：跟踪实体实例审计查询参数

| 参数 | 选项 | 描述 |
|---|---|---|
| 跟踪实体 | 跟踪实体 UIDS | 一个或多个跟踪实体标识符（用逗号分隔） |
| 用户 | 用户 | 一个或多个用户标识符 |
| 审计类型 | 搜索 | 阅读 | 按一种或多种审计类型筛选 |
| 开始日期 | 开始日期 | Start date for audits in `yyyy-mm-dd` format |
| 结束日期 | 结束日期 | End date for audits in `yyyy-mm-dd` format |
| 跳过分页 | 假 | 真 | 打开/关闭寻呼。 |
| 分页 | 错误| 真正 | 是否启用或禁用寻呼 |
| 页码 | 数 | 页码（默认为 1） |
| 页面大小 | 数 | 页面大小（默认值 50） |

Example: Get audits of audit type `READ` with `startDate` 2018-03-01 and `endDate` 2018-04-24 with a page size of 5:

    /api/33/audits/trackedEntityInstance.json?startDate=2021-03-01&endDate=2022-04-24&auditType=READ&pageSize=5

示例：获取被跟踪实体 `wNiQ2coVZ39` 的审计信息：

    /api/33/audits/trackedEntityInstance.json?trackedEntities=wNiQ2coVZ39


### 数据审批审核 { #data-approval-audits } 

数据审批审计的终点位于

```
/api/audits/dataApproval
```

表：数据核准查询参数

| 参数 | 选项 | 描述 |
|---|---|---|
| 谷物 | 数据审批级别 ID | 一个或多个数据批准级别标识符 |
| wf | 数据审批工作流程 ID | 一个或多个数据审批工作流程标识符 |
| 欧 | 组织单位标识 | 一个或多个组织单位标识符 |
| 冠捷 | 属性选项组合 ID | 一个或多个属性选项组合标识符 |
| 开始日期 | 开始日期 | Start date for approvals in `yyyy-mm-dd` format |
| 结束日期 | 结束日期 | End date for approvals in `yyyy-mm-dd` format |
| 跳过分页 | 假 | 真 | 打开/关闭传呼 |
| 页码 | 数 | 页码（默认为 1） |
| 页面大小 | 数 | 页面大小（默认值 50） |

示例：获取数据审批工作流程 `i5m0JPw4DQi` 的审核：

    /api/33/audits/dataApproval?wf=i5m0JPw4DQi

示例: 获取组织单位 `DiszpKrYNg8` 在 `2021-01-01` 和 `2022-01-01` 之间的审计：

    /api/33/audits/dataApproval?ou=DiszpKrYNg8&startDate=2021-01-01&endDate=2022-01-01



# 讯息传递 { #messaging } 

## 讯息对话 { #webapi_message_conversations } 

DHIS2 具有发送消息的机制，例如
用户反馈、通知和给用户的一般信息。留言
被分组到对话中。与消息对话交互
您可以向 *messageConversations* 发送 POST 和 GET 请求
资源。

    / api / 33 / messageConversations

消息会传送到 DHIS2 消息收件箱，但也可以发送
以短信形式发送到用户的电子邮件地址和手机。在这个例子中，
我们将看到如何利用 Web API 来发送、读取和管理
消息。我们将伪装成*DHIS2管理员*用户并发送
给*移动*用户的消息。然后我们会假装是手机
用户并阅读我们的新消息。在此之后，我们将管理管理员
用户收件箱通过标记和删除邮件。

### 撰写和阅读邮件 { #webapi_writing_messages } 

我们在发送和阅读消息时需要交互的资源
是 *messageConversations* 资源。我们首先访问 Web API
在 <http://play.dhis2.org/demo/api> 的入口点我们找到并跟随
*messageConversations* 资源的链接位于
 <http://play.dhis2.org/demo/api/messageConversations> 。说明
告诉我们可以使用 POST 请求来创建新消息
发送给多个用户的以下 XML 格式：

```xml
<message xmlns="http://dhis2.org/schema/dxf/2.0">
  <subject>This is the subject</subject>
  <text>This is the text</text>
  <users>
    <user id="user1ID" />
    <user id="user2ID" />
    <user id="user3ID" />
  </users>
</message>
```

为了发送给一个或多个用户组中的所有用户，我们可以
用：

```xml
<message xmlns="http://dhis2.org/schema/dxf/2.0">
  <subject>This is the subject</subject>
  <text>This is the text</text>
  <userGroups>
    <userGroup id="userGroup1ID" />
    <userGroup id="userGroup2ID" />
    <userGroup id="userGroup3ID" />
  </userGroups>
</message>
```

为了发送给连接到一个或多个组织单位的所有用户，我们
可以使用：

```xml
<message xmlns="http://dhis2.org/schema/dxf/2.0">
  <subject>This is the subject</subject>
  <text>This is the text</text>
  <organisationUnits>
    <organisationUnit id="ou1ID" />
    <organisationUnit id="ou2ID" />
    <organisationUnit id="ou3ID" />
  </organisationUnits>
</message>
```

Since we want to send a message to our friend the mobile user we need to
look up her identifier. We do so by going to the Web API entry point and
follow the link to the *users* resource at `/api/users`. We continue by 
following link to the mobile user at `/api/users/PhzytPW3g2J` where we learn
that her identifier is *PhzytPW3g2J*. We are now ready to put our XML
message together to form a message where we want to ask the mobile user
whether she has reported data for January 2014:

```xml
<message xmlns="http://dhis2.org/schema/dxf/2.0">
  <subject>Mortality data reporting</subject>
  <text>Have you reported data for the Mortality data set for January 2014?</text>
  <users>
    <user id="PhzytPW3g2J" />
  </users>
</message>
```

为了测试这一点，我们将 XML 内容保存到一个名为 *message.xml* 的文件中。
我们使用 cURL 将消息发送到 DHIS2 演示实例
指示内容类型是 XML 并以 *admin* 身份进行身份验证
用户：

```bash
curl -d @message.xml "https://play.dhis2.org/demo/api/messageConversations"
  -H "Content-Type:application/xml" -u admin:district -X POST
```

JSON和POST命令中的相应有效负载如下所示：

```json
{
  "subject": "Hey",
  "text": "How are you?",
  "users": [
    {
      "id": "OYLGMiazHtW"
    },
    {
      "id": "N3PZBUlN8vq"
    }
  ],
  "userGroups": [
    {
      "id": "ZoHNWQajIoe"
    }
  ],
  "organisationUnits": [
    {
      "id": "DiszpKrYNg8"
    }
  ]
}
```

```bash
curl -d @message.json "https://play.dhis2.org/demo/api/33/messageConversations"
  -H "Content-Type:application/json" -u admin:district -X POST
```

如果一切顺利，我们会收到一个 *201 Created* HTTP 状态代码。另外，请注意
我们收到一个 *Location* HTTP 标头，该标头的值通知我们
新创建的消息对话资源的 URL - 这可以是
消费者使用它来执行进一步的操作。

我们现在将假装是移动用户并阅读消息
刚刚通过向 *messageConversations* 发送 GET 请求发送
资源。我们提供一个带有 *application/xml* 的 *Accept* 标头作为
表示我们对 XML 资源感兴趣的值
表示，我们以*移动*用户身份进行身份验证：

```bash
curl "https://play.dhis2.org/demo/api/33/messageConversations"
  -H "Accept:application/xml" -u mobile:district
```

作为响应，我们得到以下XML：

```xml
<messageConversations xmlns="http://dhis2.org/schema/dxf/2.0"
  link="https://play.dhis2.org/demo/api/messageConversations">
  <messageConversation name="Mortality data reporting" id="ZjHHSjyyeJ2"
    link="https://play.dhis2.org/demo/api/messageConversations/ZjHHSjyyeJ2"/>
  <messageConversation name="DHIS2 version 2.7 is deployed" id="GDBqVfkmnp2"
    link="https://play.dhis2.org/demo/api/messageConversations/GDBqVfkmnp2"/>
</messageConversations>
```

从响应中，我们能够读取新发送的标识符
消息是 *ZjHHSjyyeJ2*。注意具体链接
资源已嵌入，可以关注以阅读完整内容
信息。一旦我们知道，我们可以直接回复现有的消息对话
通过包含消息文本作为请求负载来获取 URL。我们
现在可以构造一个 URL 来发送我们的回复：

```bash
curl -d "Yes the Mortality data set has been reported"
  "https://play.dhis2.org/demo/api/messageConversations/ZjHHSjyyeJ2"
  -H "Content-Type:text/plain" -u mobile:district -X POST
```

如果一切按计划进行，您将收到 *200 OK* 状态代码。

在2.30中，我们添加了URL搜索参数：

    queryString =？＆queryOperator =？

过滤器在主题、文本和发件人中搜索消息的匹配项
对话。默认查询运算符是 *token*，但是其他运算符
可以在查询中定义。

### 管理讯息 { #webapi_managing_messages } 

随着用户接收和发送消息，对话将开始堆积
在他们的收件箱中，最终变得难以跟踪。我们现在将
看看通过删除和标记来管理用户的消息收件箱
通过 Web-API 进行对话。我们将通过执行一些
在“DHIS 管理员”用户的收件箱中维护。

首先，让我们看看从收件箱中删除一些邮件。是
一定要注意这里描述的所有删除操作只删除
用户和消息对话之间的关系。实际上
这意味着我们不会删除消息本身（或任何
内容），但只是从
用户使其不再列在
`/api/messageConversations` 资源。

To remove a message conversation from a users inbox we need to issue a
*DELETE* request to the resource identified by the id of the message
conversation and the participating user. For example, to remove the user
with id `xE7jOejl9FI` from the conversation with id `jMe43trzrdi`:

```bash
curl "https://play.dhis2.org/demo/api/33/messageConversations/jMe43trzrdi
```

如果请求成功，服务器将回复 *200 OK*。这
响应正文包含一个 XML 或 JSON 对象（根据接受
请求的标头）包含已删除用户的 ID。

```json
{
  "removed" : ["xE7jOejl9FI"]
}
```

失败时，返回的对象将包含一个消息有效负载
描述错误。

```json
{
  "message" : "No user with uid: dMV6G0tPAEa"
}
```

细心的读者已经注意到对象返回了
在我们的例子中，成功实际上是一个 id 列表（包含一个
入口）。这是因为端点也支持批量删除。这
对相同的 *messageConversations* 资源发出请求，但遵循
语义略有不同。对于批处理操作，会话 ID
作为查询字符串参数给出。以下示例删除了两个
当前用户的单独消息对话：

```bash
curl "https://play.dhis2.org/demo/api/messageConversations?mc=WzMRrCosqc0&mc=lxCjiigqrJm"
  -X DELETE -u admin:district
```

如果您有足够的权限，可以删除对话
通过提供可选的用户 ID 参数代表另一个用户。

```bash
curl "https://play.dhis2.org/demo/api/messageConversations?mc=WzMRrCosqc0&mc=lxCjiigqrJm&user=PhzytPW3g2J"
  -X DELETE -u admin:district
```

如上所述，批量删除将返回与
单一操作。删除的对象列表将反映成功
执行的移除。部分错误的请求（即不存在的 ID）
因此不会取消整个批处理操作。

消息带有布尔 *read* 属性。这允许跟踪是否
用户是否看到（打开）了一条消息。在典型应用中
场景（例如 DHIS2 网络门户），消息将被标记为已读
用户第一次打开它。然而，用户可能想要
管理他们的消息的已读或未读状态，以保持
跟踪某些对话。

标记消息已读或未读遵循与批处理类似的语义
移除，并且还支持批量操作。将消息标记为已读
我们向 `messageConversations/read` 资源发出一个 *POST*
包含一个或多个消息 ID 的请求正文。将消息标记为
未读我们向 `messageConversations/unread` 发出相同的请求
资源。与删除的情况一样，可选的 *user* 请求参数
可以给。

让我们将几条消息标记为当前用户已读：

```bash
curl "https://play.dhis2.org/dev/api/messageConversations/read"
  -d '["ZrKML5WiyFm","Gc03smoTm6q"]' -X POST
  -H "Content-Type: application/json" -u admin:district
```

响应是带有以下 JSON 正文的 *200 OK*：

```json
{
  "markedRead": ["ZrKML5WiyFm", "Gc03smoTm6q"]
}
```

您可以将收件人添加到现有的消息对话中。该资源位于：

    / api / 33 / messageConversations / id /收件人

此资源的选项是用户、用户组和
组织单位。请求应如下所示：

```json
{
  "users": [
    {
      "id": "OYLGMiazHtW"
    },
    {
      "id": "N3PZBUlN8vq"
    }
  ],
  "userGroups": [
    {
      "id": "DiszpKrYNg8"
    }
  ],
  "organisationUnits": [
    {
      "id": "DiszpKrYNg8"
    }
  ]
}

```

### 邮件附件 { #webapi_message_attachments } 

创建带附件的消息分两步完成：上传
文件添加到 *attachments* 资源，然后包括一个或几个
创建新邮件时的附件 ID。

对 *attachments* 资源的 POST 请求会将文件上传到
服务器。

```
curl -F file=@attachment.png“ https://play.dhis2.org/demo/api/messageConversations/attachments”
  -u管理员：区
```

该请求返回一个表示附件的对象。的标识
创建消息时必须使用此对象以链接
邮件附件。

```json
{
  "created": "2018-07-20T16:54:18.210",
  "lastUpdated": "2018-07-20T16:54:18.212",
  "externalAccess": false,
  "publicAccess": "--------",
  "user": {
    "name": "John Traore",
    "created": "2013-04-18T17:15:08.407",
    "lastUpdated": "2018-03-09T23:06:54.512",
    "externalAccess": false,
    "displayName": "John Traore",
    "favorite": false,
    "id": "xE7jOejl9FI"
  },
  "lastUpdatedBy": {
    "id": "xE7jOejl9FI",
    "name": "John Traore"
  },
  "favorite": false,
  "id": "fTpI4GOmujz"
}
```

创建新消息时，可以在请求正文中传递 id
将上传的文件链接到正在创建的消息。

```json
{
  "subject": "Hey",
  "text": "How are you?",
  "users": [
    {
      "id": "OYLGMiazHtW"
    },
    {
      "id": "N3PZBUlN8vq"
    }
  ],
  "userGroups": [
    {
      "id": "ZoHNWQajIoe"
    }
  ],
  "organisationUnits": [
    {
      "id": "DiszpKrYNg8"
    }
  ],
  "attachments": [
    "fTpI4GOmujz",
    "h2ZsOxMFMfq"
  ]
}
```

回复消息时，可以将 id 作为请求传递
范围。

```bash
curl -d "Yes the Mortality data set has been reported"
  "https://play.dhis2.org/demo/api/33/messageConversations/ZjHHSjyyeJ2?attachments=fTpI4GOmujz,h2ZsOxMFMfq"
  -H "Content-Type:text/plain" -u mobile:district -X POST
```

创建带有附件的邮件后，附加文件
可以通过对以下 URL 的 GET 请求访问：

    / api / messageConversations / <mcv-id> / <msg-id> / attachments / <attachment-id>

其中 <mcv-id> 是*消息对话* ID，<msg-id> 是
包含附件和 <attachment-id> 的 *message* 是
特定*消息附件*的 ID。

### 票证和验证结果通知 { #webapi_messaging_tickets } 

您可以使用“写反馈”工具来创建工单和消息。
一张票和一条消息的唯一区别是你可以给
票证的状态和优先级。设置状态：

    POST / api / messageConversations / <uid> / status

设置优先级：

    POST / api / messageConversations / <uid> / priority

在 2.29 中，验证分析生成的消息现在也用于
状态和优先级属性。默认情况下，消息由
验证分析将继承验证规则的优先级
问题，或者如果消息包含多个最重要的
规则。

在 2.30 中，可以将验证规则分配给任何用户，同时工单
仍然需要分配给系统反馈接收者中的一个用户
团体。



表格有效状态和优先级值列表

| 状态 | 优先权 |
|---|---|
| 开放 | 低 |
| 待定 | 中型 |
| 无效 | 高 |
| 已解决 ||

也可以给工单添加内部消息，只能看到
拥有“管理票证”权限的用户。创建一个内部
回复，包括“内部”参数，并将其设置为

```bash
curl -d "This is an internal message"
  "https://play.dhis2.org/demo/api/33/messageConversations/ZjHHSjyyeJ2?internal=true"
  -H "Content-Type:text/plain" -u admin:district -X POST
```




# 可视化 { #visualizations } 
## 仪表板 { #webapi_dashboard } 

仪表板旨在为您提供多个分析的概览
地图、图表、数据透视表和报告等项目，它们一起可以
提供您数据的全面概览。仪表板可用
通过 *dashboards* 资源在 Web API 中。仪表板包含一个
仪表板*项目*列表。一个项目可以代表一个单一的资源，比如
图表、地图或报告表，或表示指向分析的链接列表
资源，如报告、资源、表格报告和用户。一种
仪表板项目最多可以包含八个链接。通常，仪表板
客户可以选择直接在一个
用户界面，同时将多对象项目渲染为可点击
链接。

    / api /仪表板

### 浏览仪表板 { #webapi_browsing_dashboards } 

获取包含基本信息的仪表板列表，包括
JSON 格式的标识符、名称和链接，您可以向其发出 *GET* 请求
以下网址：

    /api/dashboards.json

仪表板资源将提供仪表板列表。请记住
仪表板对象是共享的，因此列表将受
当前已验证的用户。您可以检索有关一个的更多信息
特定的仪表板，请点击其链接，类似于：

    /api/dashboards/vQFhmLJU5sK.json

仪表板包含名称和创建日期等信息以及
仪表板项目数组。 JSON 格式的响应看起来类似
对此回复（某些信息已被删除，以便
简洁）。

```json
{
  "lastUpdated" : "2013-10-15T18:17:34.084+0000",
  "id": "vQFhmLJU5sK",
  "created": "2013-09-08T20:55:58.060+0000",
  "name": "Mother and Child Health",
  "href": "https://play.dhis2.org/demo/api/dashboards/vQFhmLJU5sK",
  "publicAccess": "--------",
  "restrictFilters": false,
  "externalAccess": false,
  "itemCount": 17,
  "displayName": "Mother and Child Health",
  "access": {
    "update": true,
    "externalize": true,
    "delete": true,
    "write": true,
    "read": true,
    "manage": true
  },
  "user": {
    "id": "xE7jOejl9FI",
    "name": "John Traore",
    "created": "2013-04-18T15:15:08.407+0000",
    "lastUpdated": "2014-12-05T03:50:04.148+0000",
    "href": "https://play.dhis2.org/demo/api/users/xE7jOejl9FI"
  },
  "dashboardItems": [{
    "id": "bu1IAnPFa9H",
    "created": "2013-09-09T12:12:58.095+0000",
    "lastUpdated": "2013-09-09T12:12:58.095+0000"
    }, {
    "id": "ppFEJmWWDa1",
    "created": "2013-09-10T13:57:02.480+0000",
    "lastUpdated": "2013-09-10T13:57:02.480+0000"
  }],
  "layout": {
    "spacing": {
      "column": 5,
      "row": 5
    },
    "columns": [{
      "index": 0,
      "span": 2
    }, {
      "index": 1,
      "span": 1
    }]
  },
  "userGroupAccesses": []
}
```

通过指定特定字段可以获得更定制的响应
在请求中。下面提供了一个示例，它将返回更多
有关用户仪表板上每个对象的详细信息。

    / api / dashboards / vQFhmLJU5sK /？fields =：all，dashboardItems [：all]

### 搜索仪表板 { #webapi_searching_dasboards } 

当用户建立仪表盘时，可以方便地
搜索各种分析资源。
*/dashboards/q* 或 */dashboards/search* 资源搜索各种分析资源。 
这些资源可让您搜索匹配的
可视化、事件可视化地图、用户、报告和资源、
用户、报告和资源。您可以通过 *GET*
请求进行搜索。
替换为首选搜索查询：

    /api/dashboards/q/my-query.json
    /api/dashboards/search?q=my-query

例如，此查询：

    /api/dashboards/q/ma?count=6&maxCount=20&max=REPORT&max=MAP
    /api/dashboards/search?q=ma?count=6&maxCount=20&max=REPORT&max=MAP

将搜索以下内容：

* 分析对象名称包含字符串“ ma”
* 每种类型最多返回6
* 对于 REPORT 和 MAP 类型，最多可返回 20 个项目



表：仪表盘/Q 和仪表盘/搜索查询参数

| 查询参数 | 描述 | 类型 | 默认 |
|---|---|---|---|
| 计数 | 要返回的每种类型的项目数 | 正整数 | 6 |
| maxCount | 要返回的最大类型的项目数 | 正整数 | 25 |
| 最大 | 返回 maxCount 的类型 | 字符串 [MAP|USER|REPORT|RESOURCE|VISUALIZATION#124;EVENT_VISUALIZATION,EVENT_CHART,EVENT_REPORT] （地图|用户|报告|资源|显示#124;事件显示,事件图表,事件报告 | 不适用 |

支持 JSON 和 XML 响应格式。 JSON 格式的响应
将包含对匹配资源的引用和数量
总共找到匹配项，并为每种类型的资源找到匹配项。它会看起来
类似于：

```json
{
  "visualizations": [{
    "name": "ANC: ANC 3 Visits Cumulative Numbers",
    "id": "arf9OiyV7df",
    "type": "LINE"
  }, {
    "name": "ANC: 1st and 2rd trends Monthly",
    "id": "jkf6OiyV7el",
    "type": "PIVOT_TABLE"
  }],
  "eventVisualizations": [{
    "name": "Inpatient: Cases 5 to 15 years this year (case)",
    "id": "TIuOzZ0ID0V",
    "type": "LINE_LIST"
  }, {
    "name": "Inpatient: Cases last quarter (case)",
    "id": "R4wAb2yMLik",
    "type": "LINE_LIST"
  }],
  "maps": [{
    "name": "ANC: 1st visit at facility (fixed) 2013",
    "id": "YOEGBvxjAY0"
  }, {
    "name": "ANC: 3rd visit coverage 2014 by district",
    "id": "ytkZY3ChM6J"
  }],
  "reports": [{
    "name": "ANC: 1st Visit Cumulative Chart",
    "id": "Kvg1AhYHM8Q"
  }, {
    "name": "ANC: Coverages This Year",
    "id": "qYVNH1wkZR0"
  }],
  "searchCount": 8,
  "visualizationCount": 2,
  "eventVisualizationCount": 2,
  "mapCount": 2,
  "reportCount": 2,
  "userCount": 0,
  "eventReports": 0,
  "eventCharts" :0,
  "resourceCount": 0
}
```

### 创建，更新和删除仪表板 { #webapi_creating_updating_removing_dashboards } 

创建、更新和删除仪表板遵循标准 REST
语义。为了创建一个新的仪表板，您可以创建一个 *POST*
请求`/api/dashboards` 资源。从消费者的角度
首先创建仪表板然后添加项目可能会很方便
到它。请求有效负载支持 JSON 和 XML 格式。至
创建一个名为“我的仪表板”的仪表板，您可以在其中使用有效负载
像这样的 JSON：

    {
      “名称”：“我的仪表板”
    }

更新，例如重命名，仪表板，您可以使用 *PUT* 请求
类似的请求负载相同的 api/dashboards 资源。

要删除仪表板，您可以向特定的人发出 *DELETE* 请求
与此类似的仪表板资源：

    / api /仪表板/ vQFhmLJU5sK

### 添加，移动和删除仪表板项目和内容 { #webapi_adding_moving_removing_dashboard_items } 

为了添加仪表盘项目，用户可以使用
`/api/dashboards/<dashboard-id>/items/content` 资源，其中
<dashboard-id\> 应替换为相关的仪表板
标识符。请求必须使用 *POST* 方法。URL 语法和
参数在下表中有详细说明。



表：项目内容参数

| 查询参数 | 描述 | 选项 |
|---|---|---|
| 类型 | 仪表板项目所代表的资源类型 | 可视化 | 地图 | 事件可视化 | 用户 | 报告 | 资源 | 应用程序 |
| 本我 | 仪表板项目所代表的资源的标识符 | 资源标识符 |

将可视化添加到特定仪表盘的 *POST* 请求 URL 可以如下所示，其中最后一个 id 查询参数值是图表资源标识符：

    /api/dashboards/vQFhmLJU5sK/items/content?type=visualization&id=LW0O27b7TdD

添加地图、可视化和应用程序类型的资源时，API
将创建一个新项目并添加到仪表板。添加用户、报告和资源类型的资源时
用户、报告和资源类型的资源时，API 将尝试
将资源添加到相同类型的现有仪表板项目中。如果没有
同类型的项目或同类型的项目中关联的资源少于 8 个时
则 API 将创建一个新的仪表板项目并将资源添加到该项目中。
添加资源。

In order to move a dashboard item to a new position within the list of
items in a dashboard, a consumer can make a *POST* request to the
following resource URL, where `<dashboard-id>` should be replaced by the
identifier of the dashboard, `<item-id>` should be replaced by the
identifier of the dashboard item and `<index>` should be replaced by the
new position of the item in the dashboard, where the index is
zero-based:

    / api /仪表板/ <dashboard-id> / items / <item-id> / position / <index>

要从特定仪表板中完全删除仪表板项目
消费者可以向以下资源 URL 发出 *DELETE* 请求，其中
` <dashboard-id> ` 应替换为仪表板的标识符
和 `<item-id>` 应替换为仪表板的标识符
物品。可以通过 GET 检索仪表板项目标识符
对仪表板资源 URL 的请求。

    / api /仪表板/ <dashboard-id> / items / <item-id>

要删除仪表板项目中的特定内容资源，消费者
可以向以下资源 URL 发出 *DELETE* 请求，其中
` <content-resource-id> ` 应替换为
与仪表板项目关联的资源；例如a 的标识符
报告或用户。例如，这可用于删除单个
报告类型的仪表板项目中的报告，而不是删除
仪表板项目完全：

    / api /仪表板/ <dashboard-id> / items / <item-id> / content / <content-resource-id>

### 定义仪表板布局{ #webapi_dasboard_layout } 

您可以为每个仪表盘定义并保存布局。以下对象负责保存此设置。

    {
      "布局"：{
        "spacing"：{
          "column"：5,
          "行"：5
        },
        "列"：[{
          "index"：0,
          "span"：2
        }, {
          "index"：1,
          "span"：1
        }]
      }
    }

布局定义将应用于与给定仪表盘相关的所有仪表盘项目，并尊重间距、列、跨度等布局属性。请看下面对每个属性的简要说明。

表格布局属性

| 属性 | 描述 | 类型 |
|---|---|---|
| 设计 | 这是根对象 | 目的 |
| 株距 | 定义特定布局组件的间距。目前，它支持列和行。 | 目的 |
| 列 | 存储与列相关的特定参数（目前、索引和跨度） | 对象数组 |

## 可视化 { #webapi_visualization } 

Visualization API旨在帮助客户与图表和数据透视表/报表交互。数据可视化应用程序使用此API的端点，该应用程序允许基于客户端的定义创建，配置和管理图表和数据透视表。主要思想是使客户和用户拥有一个独特的集中式API，该API提供所有类型的图表和数据透视表以及每种可视化类型的特定参数和配置。

This API was introduced to unify both `charts` and `reportTables` APIs and entirely replace them by the `visualizations` API.

一个可视化对象由很多属性组成（有些与图表相关，有些与数据透视表相关），但负责反映对象核心信息的最重要的属性是：*"id"、"name"、"type" ”、“dataDimensionItems”、“列”、“行”和“过滤器”。*

API的根端点是`/ api / visualizations`，下表中描述了当前属性和元素的列表。



表：可视化属性

| 领域 | 描述 |
|---|---|
| 本我 | 唯一标识符。 |
| 码 | 用于识别可视化的自定义代码。 |
| 名称 | 可视化名称 |
| 类型 | 可视化的类型。有效类型包括column, stacked_column, bar, stacked_bar, line, area, pie, radar, gauge, year_over_year_line year_over_year_column, single_value, pivot_table。 |
| 标题 | 自定义标题。 |
| 副题 | 自定义字幕。 |
| 描述 | 定义可视化的自定义描述。 |
| 创建 | 创建可视化的日期/时间。 |
| 开始日期 | 筛选时使用的起始日期。 |
| 结束日期 | 筛选过程中使用的结束日期。 |
| 排序顺序 | 此可视化的排序顺序。整数值。 |
| 用户 | 代表可视化创建者的对象。 |
| 公共访问 | 设置公众访问权限。 |
| 显示密度 | 文字的显示密度。 |
| 字体大小 | 文本的字体大小。 |
| fontStyle | 自定义字体样式：可视化标题（visualizationTitle）、可视化副标题（visualizationSubtitle）、水平轴标题（horizontalAxisTitle）、垂直轴标题（verticalAxisTitle）、目标行标签（targetLineLabel）、基准行标签（baseLineLabel）、系列轴标签（seriesAxisLabel）、类别轴标签（categoryAxisLabel）、图例。 |
| 相对周期 | 代表分析查询中使用的相对时间段的对象。 |
| 图例集 | 表示图例定义的对象。 |
| 图例显示风格 | 图例的显示样式。可以是填充（FILL）或文本（TEXT）。 |
| 图例显示策略 | 图例的显示样式。可以是FIXED 或 BY_DATA_ITEM。 |
| 聚合类型 | 决定如何汇总数据透视表中的值。有效选项：SUM、AVERAGE、AVERAGE_SUM_ORG_UNIT、LAST、LAST_AVERAGE_ORG_UNIT、FIRST、FIRST_AVERAGE_ORG_UNIT、COUNT、STDDEV、VARIANCE、MIN、MAX、NONE、CUSTOM 或 DEFAULT。 |
| 回归类型 | 有效的回归类型：无、线性、多项式或 LOESS。 |
| targetLineValue | 图表目标线。接受 Double 类型。 |
| targetLineLabel | 图表目标线标签。 |
| rangeAxisLabel | 图表纵轴（y）标签/标题。 |
| 域轴标签 | 图表横轴 (x) 标签/标题。 |
| rangeAxisMaxValue | 图表轴的最大值。超出范围的值将不会显示。 |
| rangeAxisMinValue | 图表轴最小值。超出范围的值将不会显示。 |
| 范围轴步数 | 最小值和最大值之间的轴步数。 |
| 轴向十进制范围 | 坐标轴数值的小数点位数。 |
| 基线值 | 图表基线值。 |
| 基线标签 | 图表基线标签。 |
| 数字组分隔符 | 数字组分隔符。有效值为逗号、空格或无。 |
| 上限 | 为透视表设置的上限。 |
| 衡量标准 | 说明适用于该测量的标准。 |
| 堆叠值百分比 | 是否使用堆叠值。更有可能用于图形/图表。布尔值。 |
| 列间无空间 | 显示/隐藏列间空格。布尔值。 |
| 回归 | 表示可视化是否包含回归列。更有可能适用于透视/报表。布尔值。 |
| 外部访问 | 表示可视化是否以外部只读方式提供。仅在无用户登录时适用。布尔值。 |
| 用户组织单位 | 表示用户是否有组织单位。布尔值。 |
| 用户组织单位子女 | 表示用户是否有子女组织单位。布尔值。 |
| 用户组织单位大子女数 | 表示用户是否有孙子女组织单位。布尔值。 |
| 报告参数 | 用于定义与报告相关的布尔属性的对象。 |
| 行总数 | 显示（或不显示）行总数。布尔值。 |
| 总计 | 显示（或不显示）列总数。布尔值。 |
| 行次总计 | 显示（或不显示）行小计。布尔值。 |
| colSubTotals | 显示（或不显示）列的小计。布尔值。 |
| 累积值 | 表示可视化是否使用累积值。布尔值。 |
| 隐藏空列 | 表示是否隐藏无数据值的列。布尔值。 |
| 隐藏空行 | 表示是否隐藏无数据值的行。布尔值。 |
| fixColumnHeaders | 在透视表中固定（或不固定）列标题。布尔值。 |
| fixRowHeaders | 在透视表中固定（或不固定）行标题。布尔值。 |
| 仅完成 | 分析请求中使用的标志。如果为 "true"，则只考虑已完成的事件/注册。布尔值。 |
| 跳读 | 是否四舍五入。布尔值。 |
| 显示尺寸标签 | 是否显示尺寸标注。布尔值。 |
| 隐藏标题 | 是否隐藏标题。布尔值。 |
| 隐藏副标题 | 是否隐藏字幕。布尔值。 |
| 隐藏传奇 | 显示/隐藏图例。很可能用于图表。布尔值。 |
| 显示层次 | 显示（或不显示）组织单位层次结构名称。布尔值。 |
| 显示数据 | 用于图表隐藏或不隐藏渲染模型中的数据/值。布尔值。 |
| 最后更新时间 | 表示对可视化应用最后更改的用户的对象。 |
| 最后更新 | 可视化上次更改的日期/时间。 |
| 最爱 | 将此对象标记为收藏夹的用户 ID 列表。 |
| 用户 | 已订阅此可视化的用户 ID 列表。 |
| 译文 | 可用对象翻译集，通常按地域筛选。 |
| 离群值分析 | 负责保存离群值分析相关设置的对象。内部属性 "outlierMethod "支持IQR、standard_z_score、modified_z_score。归一化方法 "目前只接受 Y_RESIDUALS_LINEAR。 |
| 系列键 | 是否显示系列键的样式选项。 |
| 传说 | 是否为图表系列应用图例颜色的选项。 |

### 检索可视化 { #webapi_visualization_retrieving_visualizations } 

To retrieve a list of all existing visualizations, in JSON format, with some basic information (including identifier, name and pagination) you can make a `GET` request to the URL below. You should see a list of all public/shared visualizations plus your private ones.

    GET /api/visualizations.json

如果要检索特定可视化的JSON定义，可以将其各自的标识符添加到URL：

    GET /api/visualizations/hQxZGXqnLS9.json

以下表示是JSON格式的响应示例（为简便起见，某些信息已被删除）。对于完整的模式，请使用`GET / api / schemas / visualization`。

```json
{
  "lastUpdated": "2020-02-06T11:57:09.678",
  "href": "http://my-domain/dhis/api/visualizations/hQxZGXqnLS9",
  "id": "hQxZGXqnLS9",
  "created": "2017-05-19T17:22:00.785",
  "name": "ANC: ANC 1st visits last 12 months cumulative values",
  "publicAccess": "rw------",
  "userOrganisationUnitChildren": false,
  "type": "LINE",
  "access": {},
  "reportingParams": {
    "parentOrganisationUnit": false,
    "reportingPeriod": false,
    "organisationUnit": false,
    "grandParentOrganisationUnit": false
  },
  "dataElementGroupSetDimensions": [],
  "attributeDimensions": [],
  "yearlySeries": [],
  "axes": [
    {
      "index": 0,
      "type": "RANGE",
      "title": {
        "textMode": "CUSTOM",
        "text": "Any Title"
      }
    }
  ],
  "filterDimensions": [
    "dx"
  ],
  "columns": [
    {
      "id": "ou"
    }
  ],
  "dataElementDimensions": [],
  "categoryDimensions": [],
  "rowDimensions": [
    "pe"
  ],
  "columnDimensions": [
    "ou"
  ],
  "dataDimensionItems": [
    {
      "dataDimensionItemType": "DATA_ELEMENT",
      "dataElement": {
        "id": "fbfJHSPpUQD"
      }
    }
  ],
  "filters": [
    {
      "id": "dx"
    }
  ],
  "rows": [
    {
      "id": "pe"
    }
  ]
}
```
通过在URL中指定要提取的字段，可以获得更定制的响应。即：

    GET /api/visualizations/hQxZGXqnLS9.json?fields=interpretations

将返回

```json
{
  "interpretations": [
    {
      "id": "Lfr8I2RPU0C"
    },
    {
      "id": "JuwgdJlJPGb"
    },
    {
      "id": "WAoU2rSpyZp"
    }
  ]
}
```

As seen, the `GET` above will return only the interpretations related to the given identifier (in this case `hQxZGXqnLS9`).

### 创建，更新和删除可视化 { #webapi_visualization_add_update_remove_visualizations } 

These operations follow the standard *REST* semantics. A new Visualization can be created through a `POST` request to the `/api/visualizations` resource with a valid JSON payload. An example of payload could be:

```json
{
  "columns": [
    {
      "dimension": "J5jldMd8OHv",
      "items": [
        {
          "name": "CHP",
          "id": "uYxK4wmcPqA",
          "displayName": "CHP",
          "displayShortName": "CHP",
          "dimensionItemType": "ORGANISATION_UNIT_GROUP"
        },
        {
          "name": "Hospital",
          "id": "tDZVQ1WtwpA",
          "displayName": "Hospital",
          "displayShortName": "Hospital",
          "dimensionItemType": "ORGANISATION_UNIT_GROUP"
        }
      ]
    }
  ],
  "rows": [
    {
      "dimension": "SooXFOUnciJ",
      "items": [
        {
          "name": "DOD",
          "id": "B0bjKC0szQX",
          "displayName": "DOD",
          "displayShortName": "DOD",
          "dimensionItemType": "CATEGORY_OPTION_GROUP"
        },
        {
          "name": "CDC",
          "id": "OK2Nr4wdfrZ",
          "displayName": "CDC",
          "displayShortName": "CDC",
          "dimensionItemType": "CATEGORY_OPTION_GROUP"
        }
      ]
    }
  ],
  "filters": [
    {
      "dimension": "ou",
      "items": [
        {
          "name": "Sierra Leone",
          "id": "ImspTQPwCqd",
          "displayName": "Sierra Leone",
          "displayShortName": "Sierra Leone",
          "dimensionItemType": "ORGANISATION_UNIT"
        },
        {
          "name": "LEVEL-1",
          "id": "LEVEL-H1KlN4QIauv",
          "displayName": "LEVEL-1"
        }
      ]
    }
  ],
  "name": "HIV Cases Monthly",
  "description": "Cases of HIV across the months",
  "category": "XY1vwCQskjX",
  "showDimensionLabels": true,
  "hideEmptyRows": true,
  "hideEmptyColumns": true,
  "skipRounding": true,
  "aggregationType": "SUM",
  "regressionType": "LINEAR",
  "type": "PIVOT_TABLE",
  "numberType": "VALUE",
  "measureCriteria": "Some criteria",
  "showHierarchy": true,
  "completedOnly": true,
  "displayDensity": "NORMAL",
  "fontSize": "NORMAL",
  "digitGroupSeparator": "SPACE",
  "legendDisplayStyle": "FILL",
  "legendDisplayStrategy": "FIXED",
  "hideEmptyRowItems": "BEFORE_FIRST_AFTER_LAST",
  "fixColumnHeaders": true,
  "fixRowHeaders": false,
  "regression": false,
  "cumulative": true,
  "sortOrder": 1,
  "topLimit": 2,
  "rowTotals": true,
  "colTotals": true,
  "hideTitle": true,
  "hideSubtitle": true,
  "hideLegend": true,
  "showData": true,
  "percentStackedValues": true,
  "noSpaceBetweenColumns": true,
  "rowSubTotals": true,
  "colSubTotals": true,
  "userOrgUnitType": "TEI_SEARCH",
  "externalAccess": false,
  "publicAccess": "--------",
  "reportingParams": {
    "reportingPeriod": true,
    "organisationUnit": true,
    "parentOrganisationUnit": true,
    "grandParentOrganisationUnit": true
  },
  "parentGraphMap": {
    "ImspTQPwCqd": ""
  },
  "access": {
    "read": true,
    "update": true,
    "externalize": true,
    "delete": false,
    "write": true,
    "manage": false
  },
  "optionalAxes": [
    {
      "dimensionalItem": "fbfJHSPpUQD",
      "axis": 1
    },
    {
      "dimensionalItem": "cYeuwXTCPkU",
      "axis": 2
    }
  ],
  "relativePeriods": {
    "thisYear": false,
    "quartersLastYear": true,
    "last52Weeks": false,
    "thisWeek": false,
    "lastMonth": false,
    "last14Days": false,
    "biMonthsThisYear": false,
    "monthsThisYear": false,
    "last2SixMonths": false,
    "yesterday": false,
    "thisQuarter": false,
    "last12Months": false,
    "last5FinancialYears": false,
    "thisSixMonth": false,
    "lastQuarter": false,
    "thisFinancialYear": false,
    "last4Weeks": false,
    "last3Months": false,
    "thisDay": false,
    "thisMonth": false,
    "last5Years": false,
    "last6BiMonths": false,
    "last4BiWeeks": false,
    "lastFinancialYear": false,
    "lastBiWeek": false,
    "weeksThisYear": false,
    "last6Months": false,
    "last3Days": false,
    "quartersThisYear": false,
    "monthsLastYear": false,
    "lastWeek": false,
    "last7Days": false,
    "thisBimonth": false,
    "lastBimonth": false,
    "lastSixMonth": false,
    "thisBiWeek": false,
    "lastYear": false,
    "last12Weeks": false,
    "last4Quarters": false
  },
  "user": {},
  "yearlySeries": [
    "THIS_YEAR"
  ],
  "userGroupAccesses": [
    {
      "access": "rwx-----",
      "userGroupUid": "ZoHNWQajIoe",
      "displayName": "Bo District M&E officers",
      "id": "ZoHNWQajIoe"
    }
  ],
  "userAccesses": [
    {
      "access": "--------",
      "displayName": "John Barnes",
      "id": "DXyJmlo9rge",
      "userUid": "DXyJmlo9rge"
    }
  ],
  "legendSet": {
    "name": "Death rate up",
    "id": "ham2eIDJ9k6",
    "legends": [
      {
        "startValue": 1,
        "endValue": 2,
        "color": "red",
        "image": "some-image"
      },
      {
        "startValue": 2,
        "endValue": 3,
        "color": "blue",
        "image": "other-image"
      }
    ]
  },
  "outlierAnalysis": {
    "enabled": true,
    "outlierMethod": "IQR",
    "thresholdFactor": 1.5,
    "normalizationMethod": "Y_RESIDUALS_LINEAR",
    "extremeLines": {
      "enabled": true,
      "value": 3.5
    }
  },
  "legend": {
    "strategy": "FIXED",
    "style": "FILL",
    "set": {
      "id": "fqs276KXCXi",
      "displayName": "ANC Coverage"
    },
    "showKey": false
  },
  "seriesKey": {
    "hidden": true,
    "label": {
      "fontStyle": {
        "textColor": "#cccddd"
      }
    }
  },
  "axes": [
    {
      "index": 0,
      "type": "RANGE",
      "label": {
        "fontStyle": {
          "textColor": "#cccddd"
        }
      },
      "title": {
        "text": "Range axis title",
        "textMode": "CUSTOM",
        "fontStyle": {
          "textColor": "#000000"
        }
      },
      "decimals": 1,
      "maxValue": 100,
      "minValue": 20,
      "steps": 5,
      "baseLine": {
        "value": 50,
        "title": {
          "text": "My baseline",
          "fontStyle": {
            "textColor": "#000000"
          }
        }
      },
      "targetLine": {
        "value": 80,
        "title": {
          "text": "My targetline",
          "fontStyle": {
            "textColor": "#cccddd"
          }
        }
      }
    },
    {
      "index": 1,
      "type": "DOMAIN",
      "label": {
        "fontStyle": {
          "textColor": "#000000"
        }
      },
      "title": {
        "text": "Domain axis title",
        "textMode": "CUSTOM",
        "fontStyle": {
          "textColor": "#cccddd"
        }
      }
    }
  ],
  "axes": [
    {
      "index": 0,
      "type": "RANGE",
      "label": {
        "fontStyle": {
          "textColor": "#cccddd"
        }
      },
      "title": {
        "text": "Range axis title",
        "fontStyle": {
          "textColor": "#000000"
        }
      },
      "decimals": 1,
      "maxValue": 100,
      "minValue": 20,
      "steps": 5,
      "baseLine": {
        "value": 50,
        "title": {
          "text": "My baseline",
          "fontStyle": {
            "textColor": "#000000"
          }
        }
      },
      "targetLine": {
        "value": 80,
        "title": {
          "text": "My targetline",
          "fontStyle": {
            "textColor": "#cccddd"
          }
        }
      }
    },
    {
      "index": 1,
      "type": "DOMAIN",
      "label": {
        "fontStyle": {
          "textColor": "#000000"
        }
      },
      "title": {
        "text": "Domain axis title",
        "fontStyle": {
          "textColor": "#cccddd"
        }
      }
    }
  ]
}
```

要更新特定的可视化，您可以向相同的 `/api/visualizations` 资源发送一个 `PUT` 请求，该资源具有类似的负载 `PLUS` 以及相应的可视化的标识符，即：

    PUT /api/visualizations/hQxZGXqnLS9

最后，要删除现有的可视化，您可以发出一个 `DELETE` 请求，指定要删除的可视化的标识符，如下所示：

    删除/ api / visualizations / hQxZGXqnLS9

## 事件可视化{ #webapi_event_visualization } 
<!--DHIS2-SECTION-ID:webapi_event_visualization-->
The EventVisualization API is designed to help clients to interact with event charts and reports. The endpoints of this API are used by the Event Visualization application which allows the creation, configuration and management of charts and reports based on the client's definitions. The main idea is to enable clients and users to have a unique and centralized API providing all types of event charts and reports as well as specific parameters and configuration for each type of event visualization.
This API was introduced with the expectation to unify both `eventCharts` and `eventReports` APIs and entirely replace them in favour of the `eventVisualizations` API (which means that the usage of `eventCharts` and `eventReports` APIs should be avoided). In summary, the following resources/APIs:
    /api/eventCharts, /api/eventReports
*are being replaced by*
    /api/eventVisualizations

> **注**
>
> 新应用程序和客户端应避免使用 `eventCharts` 和 `eventReports` API，因为它们已被弃用。请使用 `eventVisualizations` API。

An EventVisualization object is composed of many attributes (some of them related to charting and others related to reporting), but the most important ones responsible to reflect the core information of the object are: *"id", "name", "type", "dataDimensionItems", "columns", "rows" and "filters".*
The root endpoint of the API is `/api/eventVisualizations`, and the list of current attributes and elements are described in the table below.



表：事件可视化属性

| 领域 | 描述 |
|---|---|
| 本我 | 唯一标识符。 |
| 码 | 用于识别 EventVisualiation 的自定义代码。 |
| 名称 | 事件可视化的名称 |
| 类型 | 事件可视化的类型。有效类型包括column, stacked_column, bar, stacked_bar, line, line_list, area, stacked_area, pie, radar, gauge, year_over_year_line, year_over_year_column, single_value, pivot_table, scatter, bubble。 |
| 标题 | 自定义标题。 |
| 副题 | 自定义字幕。 |
| 描述 | 定义事件可视化的自定义描述。 |
| 创建 | 事件可视化创建的日期/时间。 |
| 开始日期 | 筛选时使用的起始日期。 |
| 结束日期 | 筛选过程中使用的结束日期。 |
| 排序顺序 | 此 EventVisualiation 的排序顺序。整数值。 |
| 用户 | 代表可视化创建者的对象。 |
| 公共访问 | 设置公众访问权限。 |
| 显示密度 | 文字的显示密度。 |
| 字体大小 | 文本的字体大小。 |
| 相对周期 | 代表分析查询中使用的相对时间段的对象。 |
| 传说 | 表示图例和图例集、显示样式（FILL 或 TEXT）和显示策略（FIXED 或 BY_DATA_ITEM）定义的对象。 |
| 聚合类型 | 确定数值的汇总方式（如适用）。有效选项：SUM、AVERAGE、AVERAGE_SUM_ORG_UNIT、LAST、LAST_AVERAGE_ORG_UNIT、FIRST、FIRST_AVERAGE_ORG_UNIT、COUNT、STDDEV、VARIANCE、MIN、MAX、NONE、CUSTOM 或 DEFAULT。 |
| 回归类型 | 有效的回归类型：无、线性、多项式或 LOESS。 |
| targetLineValue | 图表目标线。接受 Double 类型。 |
| targetLineLabel | 图表目标线标签。 |
| rangeAxisLabel | 图表纵轴（y）标签/标题。 |
| 域轴标签 | 图表横轴 (x) 标签/标题。 |
| rangeAxisMaxValue | 图表轴的最大值。超出范围的值将不会显示。 |
| rangeAxisMinValue | 图表轴最小值。超出范围的值将不会显示。 |
| 范围轴步数 | 最小值和最大值之间的轴步数。 |
| 轴向十进制范围 | 坐标轴数值的小数点位数。 |
| 基线值 | 图表基线值。 |
| 基线标签 | 图表基线标签。 |
| 数字组分隔符 | 数字组分隔符。有效值为逗号、空格或无。 |
| 上限 | 为透视表设置的上限。 |
| 衡量标准 | 说明适用于该测量的标准。 |
| 堆叠值百分比 | 是否使用堆叠值。更有可能用于图形/图表。布尔值。 |
| 列间无空间 | 显示/隐藏列间空格。布尔值。 |
| 外部访问 | 表示事件可视化是否可作为只读外部文件使用。布尔值。 |
| 用户组织单位 | 表示用户是否有组织单位。布尔值。 |
| 用户组织单位子女 | 表示用户是否有子女组织单位。布尔值。 |
| 用户组织单位大子女数 | 表示用户是否有孙子女组织单位。布尔值。 |
| 行总数 | 显示（或不显示）行总数。布尔值。 |
| 总计 | 显示（或不显示）列总数。布尔值。 |
| 行次总计 | 显示（或不显示）行小计。布尔值。 |
| colSubTotals | 显示（或不显示）列的小计。布尔值。 |
| 累积值 | 表示事件可视化是否使用累积值。布尔值。 |
| 隐藏空行 | 表示是否隐藏无数据值的行。布尔值。 |
| 仅完成 | 分析请求中使用的标志。如果为 "true"，则只考虑已完成的事件/注册。布尔值。 |
| 显示尺寸标签 | 是否显示尺寸标注。布尔值。 |
| 隐藏标题 | 是否隐藏标题。布尔值。 |
| 隐藏副标题 | 是否隐藏字幕。布尔值。 |
| 显示层次 | 显示（或不显示）组织单位层次结构名称。布尔值。 |
| 显示数据 | 用于图表隐藏或不隐藏渲染模型中的数据/值。布尔值。 |
| 最后更新时间 | 表示对事件可视化进行最后更改的用户的对象。 |
| 最后更新 | 事件可视化上次更改的日期/时间。 |
| 最爱 | 将此对象标记为收藏夹的用户 ID 列表。 |
| 用户 | 已订阅此 EventVisualization 的用户 ID 列表。 |
| 译文 | 可用对象翻译集，通常按地域筛选。 |
| 程序 | 相关计划 |
| 程序阶段 | 相关的计划阶段。 |
| 程序状态 | 程序状态。可以是 "激活"、"已完成 "或 "已取消"。 |
| 事件状态 | 事件状态。可以是 "活动"、"已完成"、"已访问"、"计划"、"逾期"、"跳过"。 |
| 数据类型 | 事件数据类型。可以是 AGGREGATED_VALUES 或 EVENTS。 |
| 列尺寸 | 为列定义的尺寸。 |
| 行尺寸 | 为行定义的尺寸。 |
| 过滤器尺寸 | 为筛选器定义的尺寸。 |
| 输出类型 | 表示事件可视化的输出类型。可以是 EVENT、ENROLLMENT 或 TRACKED_ENTITY_INSTANCE。 |
| collapseDataDimensions | 表示是否将所有数据维度折叠为单一维度。布尔值。 |
| 隐藏 NaData | 表示是否隐藏不适用数据。布尔值。 |

### 检索事件可视化{ #webapi_event_visualization_retrieving_event_visualizations } 
<!--DHIS2-SECTION-ID:webapi_event_visualization_retrieving_event_visualizations-->
要检索所有现有事件可视化（JSON 格式）的列表以及一些基本信息（包括标识符、名称和分页），可以向下面的 URL 发出 `GET` 请求。您将看到所有公共/共享事件可视化以及您的私人事件可视化的列表。
    GET /api/eventVisualizations.json
如果要检索特定事件可视化的 JSON 定义，可以在 URL 中添加相应的标识符：
    GET /api/eventVisualizations/hQxZGXqnLS9.json
下面是一个 JSON 格式的响应示例（为简洁起见，删除了某些信息）。如需完整模式，请使用 `GET /api/schemas/eventVisualization`。

```json
{
    "lastUpdated": "2021-11-25T17:18:03.834",
    "href": "http://localhost:8080/dhis/api/eventVisualizations/EZ5jbRTxRGh",
    "id": "EZ5jbRTxRGh",
    "created": "2021-11-25T17:18:03.834",
    "name": "Inpatient: Mode of discharge by facility type this year",
    "publicAccess": "rw------",
    "userOrganisationUnitChildren": false,
    "type": "STACKED_COLUMN",
    "subscribed": false,
    "userOrganisationUnit": false,
    "rowSubTotals": false,
    "cumulativeValues": false,
    "showDimensionLabels": false,
    "sortOrder": 0,
    "favorite": false,
    "topLimit": 0,
    "collapseDataDimensions": false,
    "userOrganisationUnitGrandChildren": false,
    "displayName": "Inpatient: Mode of discharge by facility type this year",
    "percentStackedValues": false,
    "noSpaceBetweenColumns": false,
    "showHierarchy": false,
    "hideTitle": false,
    "showData": true,
    "hideEmptyRows": false,
    "hideNaData": false,
    "regressionType": "NONE",
    "completedOnly": false,
    "colTotals": false,
    "sharing": {
      "owner": "GOLswS44mh8",
      "external": false,
      "users": {},
      "userGroups": {},
      "public": "rw------"
    },
    "programStatus": "CANCELLED",
    "hideEmptyRowItems": "NONE",
    "hideSubtitle": false,
    "outputType": "EVENT",
    "hideLegend": false,
    "externalAccess": false,
    "colSubTotals": false,
    "rowTotals": false,
    "digitGroupSeparator": "SPACE",
    "program": {
      "id": "IpHINAT79UW"
    },
    "access": {
      "read": true,
      "update": true,
      "externalize": true,
      "delete": true,
      "write": true,
      "manage": true
    },
    "lastUpdatedBy": {
      "displayName": "John Traore",
      "name": "John Traore",
      "id": "xE7jOejl9FI",
      "username": "admin"
    },
    "relativePeriods": {
      "thisYear": false,
      ...
    },
    "programStage": {
      "id": "A03MvHHogjR"
    },
    "createdBy": {
      "displayName": "Tom Wakiki",
      "name": "Tom Wakiki",
      "id": "GOLswS44mh8",
      "username": "system"
    },
    "user": {
      "displayName": "Tom Wakiki",
      "name": "Tom Wakiki",
      "id": "GOLswS44mh8",
      "username": "system"
    },
    "attributeDimensions": [],
    "translations": [],
    "legend": {
      "set": {
        "id": "gFJUXah1uRH"
      },
      "showKey": false,
      "style": "FILL",
      "strategy": "FIXED"
    },
    "filterDimensions": [
      "ou",
      "H6uSAMO5WLD"
    ],
    "interpretations": [],
    "userGroupAccesses": [],
    "subscribers": [],
    "columns": [
      {
        "id": "X8zyunlgUfM"
      }
    ]
    "periods": [],
    "categoryDimensions": [],
    "rowDimensions": [
      "pe"
    ],
    "itemOrganisationUnitGroups": [],
    "programIndicatorDimensions": [],
    "attributeValues": [],
    "columnDimensions": [
      "X8zyunlgUfM"
    ],
    "userAccesses": [],
    "favorites": [],
    "dataDimensionItems": [],
    "categoryOptionGroupSetDimensions": [],
    "organisationUnitGroupSetDimensions": [],
    "organisationUnitLevels": [],
    "organisationUnits": [
      {
        "id": "ImspTQPwCqd"
      }
    ],
    "filters": [
      {
        "id": "ou"
      },
      {
        "id": "H6uSAMO5WLD"
      }
    ],
    "rows": [
      {
        "id": "pe"
      }
    ]
}
```

通过在 URL 中指定要提取的字段，可以获得更有针对性的响应。例如
    GET /api/eventVisualizations/hQxZGXqnLS9.json?fields=interpretations
将返回

```json
{
  "interpretations": [
    {
      "id": "Lfr8I2RPU0C"
    },
    {
      "id": "JuwgdJlJPGb"
    },
    {
      "id": "WAoU2rSpyZp"
    }
  ]
}
```

As seen, the `GET` above will return only the interpretations related to the given identifier (in this case `hQxZGXqnLS9`).

### 创建、更新和删除事件可视化{ #webapi_event_visualization_add_update_remove_event_visualizations } 
<!--DHIS2-SECTION-ID:webapi_event_visualization_add_update_remove_event_visualizations-->
这些操作遵循标准 *REST* 语义。可以通过向带有有效 JSON 有效负载的`/api/eventVisualizations`资源发出`POST`请求来创建新的事件可视化。有效负载的示例如下

```json
{
    "name": "Inpatient: Cases under 10 years last 4 quarters",
    "publicAccess": "rw------",
    "userOrganisationUnitChildren": false,
    "type": "STACKED_COLUMN",
    "subscribed": false,
    "userOrganisationUnit": false,
    "rowSubTotals": false,
    "cumulativeValues": false,
    "showDimensionLabels": false,
    "sortOrder": 0,
    "favorite": false,
    "topLimit": 0,
    "collapseDataDimensions": false,
    "userOrganisationUnitGrandChildren": false,
    "displayName": "Inpatient: Cases under 10 years last 4 quarters",
    "percentStackedValues": false,
    "noSpaceBetweenColumns": false,
    "showHierarchy": false,
    "hideTitle": false,
    "showData": true,
    "hideEmptyRows": false,
    "userAccesses": [],
    "userGroupAccesses": [],
    "hideNaData": false,
    "regressionType": "NONE",
    "completedOnly": false,
    "colTotals": false,
    "programStatus": "CANCELLED",
    "sharing": {
      "owner": "GOLswS44mh8",
      "external": false,
      "users": {},
      "userGroups": {},
      "public": "rw------"
    },
    "displayFormName": "Inpatient: Cases under 10 years last 4 quarters",
    "hideEmptyRowItems": "NONE",
    "hideSubtitle": false,
    "outputType": "EVENT",
    "hideLegend": false,
    "externalAccess": false,
    "colSubTotals": false,
    "rowTotals": false,
    "digitGroupSeparator": "SPACE",
    "access": {
      "read": true,
      "update": true,
      "externalize": false,
      "delete": true,
      "write": true,
      "manage": true
    },
    "lastUpdatedBy": {
      "displayName": "Tom Wakiki",
      "name": "Tom Wakiki",
      "id": "GOLswS44mh8",
      "username": "system"
    },
    "legend": {
      "set": {
        "id": "gFJUXah1uRH"
      },
      "showKey": false,
      "style": "FILL",
      "strategy": "FIXED"
    },
    "relativePeriods": {
      "thisYear": false,
    ...
    },
    "program": {
      "id": "IpHINAT79UW",
      "enrollmentDateLabel": "Date of enrollment",
      "incidentDateLabel": "Date of birth",
      "name": "Child Programme"
    },
    "programStage": {
      "id": "A03MvHHogjR",
      "executionDateLabel": "Report date",
      "name": "Birth"
    },
    "createdBy": {
      "displayName": "Tom Wakiki",
      "name": "Tom Wakiki",
      "id": "GOLswS44mh8",
      "username": "system"
    },
    "user": {
      "displayName": "Tom Wakiki",
      "name": "Tom Wakiki",
      "id": "GOLswS44mh8",
      "username": "system"
    },
    "translations": [],
    "filterDimensions": [
      "ou"
    ],
    "interpretations": [],
    "dataElementDimensions": [
      {
        "filter": "LE:10",
        "dataElement": {
          "id": "qrur9Dvnyt5"
        }
      }
    ],
    "periods": [],
    "categoryDimensions": [],
    "rowDimensions": [
      "pe"
    ],
    "columnDimensions": [
      "qrur9Dvnyt5"
    ],
    "organisationUnits": [
      {
        "id": "ImspTQPwCqd"
      }
    ],
    "filters": [
      {
        "dimension": "ou",
        "items": [
          {
            "id": "ImspTQPwCqd"
          }
        ]
      },
      {
        "dimension": "H6uSAMO5WLD",
        "items": []
      }
    ],
    "columns": [
      {
        "dimension": "X8zyunlgUfM",
        "items": [],
        "repetition": {
          "indexes": [1, 2, 3, -2, -1, 0]
        }
      },
      {
        "dimension": "eventDate",
        "items": [
          {
            "id": "2021-07-21_2021-08-01"
          },
          {
            "id": "2021-01-21_2021-02-01"
          }
        ]
      },
      {
        "dimension": "incidentDate",
        "items": [
          {
            "id": "2021-10-01_2021-10-30"
          }
        ]
      },
      {
        "dimension": "eventStatus",
        "items": [
          {
            "id": "ACTIVE"
          },
          {
            "id": "COMPLETED"
          }
        ]
      },
      {
        "dimension": "createdBy",
        "items": [
          {
            "id": "userA"
          }
        ]
      },
      {
        "dimension": "lastUpdatedBy",
        "items": [
          {
            "id": "userB"
          }
        ]
      }
    ],
    "rows": [
      {
        "dimension": "pe",
        "items": [
          {
            "id": "LAST_12_MONTHS"
          }
        ]
      }
    ]
}
```

For multi-program support, the root `program` should not be specified. This will turn the `eventVisualization` into a multi-program. Consequently, we have to specify the `program` and `programStage` (when applicable) for each `dimension` in `rows`, `columns`, and `filters`.

例：

```json
"program": null,
"columns": [
  {
    "dimension": "ou",
    "items": [
        {
            "id": "O6uvpzGd5pu"
        }
    ],
    "program": {
        "id": "IpHINAT79UW"
    }
  },
  {
    "dimensionType": "CATEGORY_OPTION_GROUP_SET",
    "items": [
      {
          "id": "JLGV7lRQRAg"
      },
      {
          "id": "p916ZCVGNyq"
      }
    ],
    "dimension": "C31vHZqu0qU",
    "program": {
        "id": "kla3mAPgvCH"
    },
    "programStage": {
        "id": "aNLq9ZYoy9W"
    }
  }
]
```

> **注**
>
> `repetition`属性（在`rows`、`columns`或`filters`中）表示要检索的事件索引。以上面的示例（在之前的 `json` 有效负载中）为例，可将其解读如下：
> 
    1 = 第一个事件
    2 = 第二个事件
    3 = 第三个事件
    ...
    -2 = 第三个最新事件
    -1 = 第二个最新事件
    0 = 最新事件（默认）

要更新特定的事件可视化，可以向相同的 `/api/eventVisualizations`资源发送`PUT`请求，并使用类似的有效载荷`PLUS`各事件可视化的标识符，即
    PUT /api/eventVisualizations/hQxZGXqnLS9
最后，要删除现有的 EventVisualization，可以发出 `DELETE` 请求，指定要删除的 EventVisualization 的标识符，如图所示：
    DELETE /api/eventVisualizations/hQxZGXqnLS9

## 释义 { #webapi_interpretations } 

对于 DHIS2 中与数据分析有关的资源，如可视化、地图、事件报告、事件图表甚至可视化，您都可以撰写和分享数据解释。解释可以是对数据报告或可视化的评论、问题、观察或解释。

    / api /解释

### 阅读口译 { #webapi_reading_interpretations } 

为了阅读解释，我们将与
`/api/interpretations` 资源。使用字段的典型 GET 请求
过滤可以是这样的：

    GET /api/interpretations?fields=*,comments[id,text,user,mentions] (注释)

JSON 响应格式的输出可能如下所示（附加
为简洁起见省略了字段）：

```json
{
  "interpretations": [
    {
      "id": "XSHiFlHAhhh",
      "created": "2013-05-30T10:24:06.181+0000",
      "text": "Data looks suspicious, could be a data entry mistake.",
      "type": "MAP",
      "likes": 2,
      "user": {
        "id": "uk7diLujYif"
      },
      "reportTable": {
        "id": "LcSxnfeBxyi"
      },
      "visualization": {
        "id": "LcSxnfeBxyi"
      }
    }, {
      "id": "kr4AnZmYL43",
      "created": "2013-05-29T14:47:13.081+0000",
      "text": "Delivery rates in Bo looks high.",
      "type": "VISUALIZATION",
      "likes": 3,
      "user": {
        "id": "uk7diLujYif"
      },
      "visualization": {
        "id": "HDEDqV3yv3H"
      },
      "mentions": [
        {
          "created": "2018-06-25T10:25:54.498",
          "username": "boateng"
        }
      ],
      "comments": [
        {
          "id": "iB4Etq8yTE6",
          "text": "This report indicates a surge.",
          "user": {
            "id": "B4XIfwOcGyI"
          }
        },
        {
          "id": "iB4Etq8yTE6",
          "text": "Likely caused by heavy rainfall.",
          "user": {
            "id": "B4XIfwOcGyI"
          }
        },
        {
          "id": "SIjkdENan8p",
          "text": "Have a look at this @boateng.",
          "user": {
            "id": "xE7jOejl9FI"
          },
          "mentions": [
            {
              "created": "2018-06-25T10:03:52.316",
              "username": "boateng"
            }
          ]
        }
      ]
    }
  ]
}
```



表：解释字段

| 领域 | 描述 |
|---|---|
| 本我 | 口译标识符。 |
| 创建 | 释义创建的时间。 |
| 类型 | The type of analytical object being interpreted. Valid options: VISUALIZATION, MAP, EVENT_REPORT, EVENT_CHART, EVENT_VISUALIZATION, DATASET_REPORT. |
| 用户 | 与创建解释的用户的关联。 |
| 可视化 | 如果类型为 VISUALIZATION，则与可视化关联 |
| 事件可视化 | 如果类型为 EVENT_VISUALIZATION，则与事件可视化相关联 |
| 地图 | 如果类型为 MAP，则与地图关联。 |
| 事件报告 | 事件报告的关联类型为 EVENT_REPORT。 |
| 事件图表 | 如果类型为 EVENT_CHART，则与事件图表关联。 |
| 数据集 | 如果类型为 DATASET_REPORT，则与数据集关联。 |
| 评论 | 解释的注释数组。文本字段包含实际注释。 |
| 提及 | 解释的提及数组。用户标识符列表。 |

对于所有分析对象，您可以将 */data* 附加到 URL 以检索
与资源关联的数据（相对于元数据）。作为
一个例子，通过跟随地图链接并附加 /data 可以
通过检索主题地图的 PNG（图像）表示
以下网址：

    https://play.dhis2.org/demo/api/maps/bhmHJ4ZCdCd/data

对于所有分析对象，您可以通过*提及*进行过滤。检索所有
您提到的用户的解释/评论
三个选项。您可以通过解释提及（提及
在解释中
    描述）：

    GET /api/interpretations?fields=*,comments[*]&filter=mentions.username:in:[boateng]

您可以通过解释评论提及（在任何
评论）：

    GET / api / interpretations？fields = *，评论[*]
      ＆filter = comments.mentions.username：in：[boateng]

您可以按包含提及的解释进行过滤
在解释或任何评论中（或结点）：

    GET /api/interpretations?fields=*,comments[*]&filter=mentions:in:[boateng]

### 写作解释 { #webapi_writing_interpretations } 

在编写解释时，您将提供解释文本作为
使用内容类型为“text/plain”的 POST 请求的请求正文。
URL 模式如下所示，其中 {object-type} 指的是
被解释的对象的类型，{object-id} 指的是
被解释对象的标识符。

    / api / interpretations / {object-type} / {object-id}

Valid options for object type are *visualization*, *map*,
*eventReport*, *eventChart*, *eventVisualization* and *dataSetReport*.

下面列出了一些有效的解释示例。

> **注**
>
> `eventCharts` 和 `eventReports` API 已被弃用。我们建议使用 `eventVisualizations` API 代替。

    /api/interpretations/visualization/hQxZGXqnLS9
    /api/interpretations/map/FwLHSMCejFu
    /api/interpretations/eventReport/xJmPLGP3Cde
    /api/interpretations/eventChart/nEzXB2M9YBz
    /api/interpretations/eventVisualization/nEzXB2M9YBz
    /api/interpretations/dataSetReport/tL7eCjmDIgM

举例来说，我们将首先为标识符为 *EbRN2VIbPdV* 的可视化内容编写释义。要编写可视化解释，我们将与 `/api/interpretations/visualization/{visualizationId}` 资源交互。
解释将是请求体。在此基础上，我们可以
下面的请求：

```bash
curl -d "This visualization shows a significant ANC 1-3 dropout" -X POST
  "https://play.dhis2.org/demo/api/interpretations/visualization/EbRN2VIbPdV" -H "Content-Type:text/plain" -u admin:district
```

请注意，响应提供了一个带有值的 Location 标头
指示创建的解释的位置。这很有用
从客户的角度来看，当您想向
解释。

### 更新和删除解释 { #webapi_updating_removing_interpretations } 

要更新现有解释，您可以使用 PUT 请求，其中
解释文本是使用以下 URL 模式的请求正文，
其中 {id} 指的是解释标识符：

    / api / interpretations / {id}

基于此，我们可以使用curl来更新解释：

```bash
curl -d "This visualization shows a high dropout" -X PUT
  "https://play.dhis2.org/demo/api/interpretations/visualization/EV08iI1cJRA" -H "Content-Type:text/plain" -u admin:district
```

您可以使用与上面相同的 URL 模式使用 DELETE 请求来
删除解释。

### 创建解释注释 { #webapi_creating_interpretation_comments } 

在为解释撰写评论时，您将提供评论
text 作为使用内容类型的 POST 请求的请求正文
“文本/纯文本”。 URL 模式如下所示，其中
{interpretation-id} 指的是解释标识符。

    / api / interpretations / {interpretation-id} /评论

其次，我们将对我们在
上面的例子。通过查看解释响应，您将看到
返回一个 *Location* 标头。这个标题告诉我们的 URL
新创建的解释，从中我们可以阅读它的
标识符。此标识符是随机生成的，因此您必须
用您自己的命令替换下面命令中的那个。写评论
我们可以与`/api/interpretations/{id}/comments`进行交互
像这样的资源：

```bash
curl -d "An intervention is needed" -X POST
  "https://play.dhis2.org/demo/api/interpretations/j8sjHLkK8uY/comments"
  -H "Content-Type:text/plain" -u admin:district
```

### 更新和删除解释注释 { #webapi_updating_removing_interpretation_comments } 

要更新解释注释，您可以使用 PUT 请求，其中
评论文本是使用以下 URL 模式的请求正文：

    / api / interpretations / {interpretation-id} / comments / {comment-id}

基于此，我们可以使用curl来更新注释：

```bash
curl "https://play.dhis2.org/demo/api/interpretations/j8sjHLkK8uY/comments/idAzzhVWvh2"
  -d "I agree with that." -X PUT -H "Content-Type:text/plain" -u admin:district
```

您可以使用与上面相同的 URL 模式，使用 DELETE 请求到
删除解释注释。

### 喜欢的解释 { #webapi_liking_interpretations } 

要喜欢一个解释，你可以使用一个空的 POST 请求到
*喜欢*资源：

    POST / api / interpretations / {id} / like

将为当前经过身份验证的用户添加一个赞。一个用户可以
只喜欢解释一次。

要删除解释的赞，您可以使用 DELETE 请求
与类似操作相同的资源。

可以通过查看解释的类似状态来查看
常规 Web API 表示：

    GET /api/interpretations/{id}

在 *likes* 字段中可以找到喜欢的信息，它代表
喜欢的数量，以及 *likedBy* 数组，它枚举了喜欢的用户
喜欢这个解释。

```json
{
  "id": "XSHiFlHAhhh",
  "text": "Data looks suspicious, could be a data entry mistake.",
  "type": "VISUALIZATION",
  "likes": 2,
  "likedBy": [
    {
      "id": "k7Hg12fJ2f1"
    },
    {
      "id": "gYhf26fFkjFS"
    }
  ]
}
```
## SQL视图 { #webapi_sql_views } 

SQL 视图资源允许您创建和检索结果集
SQL 视图。 SQL 视图可以直接针对
数据库并通过 Web API 资源呈现结果集。

    / api / sqlViews

SQL 视图对于创建可能更容易的数据视图很有用
用SQL构造比较结合Web的多个对象
应用程序接口。举个例子，假设我们被要求提供一个视图
所有组织单位及其名称、父名称、组织单位
级别和名称，以及数据库中列出的坐标。风景
可能看起来像这样：

```sql
select ou.name as orgunit, par.name as parent, ou.coordinates, ous.level, oul.name 
from organisationunit ou
inner join _orgunitstructure ous on ou.organisationunitid = ous.organisationunitid
inner join organisationunit par on ou.parentid = par.organisationunitid
inner join orgunitlevel oul on ous.level = oul.level
where ou.coordinates is not null
order by oul.level, par.name, ou.name;
```

我们将使用 *curl* 首先在 DHIS2 服务器上执行视图。这
本质上是一个物化过程，并确保我们拥有
检索时可通过 SQL 视图获得的最新数据
从服务器。您可以先从 SQL 视图中查找
api/sqlViews 资源，然后使用以下命令进行 POST：

```bash
curl "https://play.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/execute" -X POST -u admin:district
```

流程的下一步是检索数据。端点的地址是

    /api/sqlViews/{id}/data(.csv)

The `id` path represents the SQL view identifier. The path extensions refers to the format of the data download. Append either `data` for JSON data or `data.csv` for comma separated  values. Support response formats are json, xml, csv, xls, html and html+css. 

例如，以下命令将为上文定义的 SQL 视图检索 CSV 数据。

```bash
curl "https://play.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/data.csv" -u admin:district
```

SQL视图有三种类型：

  - *SQL 视图：* 标准 SQL 视图。

  - *物化的SQL视图：*物化的SQL视图，意思是
    写入磁盘。需要更新以反映变化
    底层表。支持过滤结果集的标准。

  - *SQL 查询：* 普通 SQL 查询。支持内联变量
    自定义查询。

### 标准 { #webapi_sql_view_criteria } 

您可以通过以下方式对结果集中的列进行简单过滤
使用列名将 *criteria* 查询参数附加到 URL
并过滤由列分隔的值作为参数值，在
以下格式：

    / api / sqlViews / {id} / data？criteria = col1：value1＆criteria = col2：value2

例如，要过滤上述 SQL 视图结果集，使其只返回
级别为 4 的组织单位，可以使用以下 URL：

    https://play.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/data.csv?criteria=level:4

### 变数 { #webapi_sql_view_variables } 

SQL 视图支持变量替换。变量替换只是
可用于 *query* 类型的 SQL 视图，这意味着 SQL 视图不是
在数据库中创建，但只是作为常规 SQL 查询执行。
变量可以直接插入到 SQL 查询中，并且必须在
这种格式：

    $ {variable-key}

例如，检索给定的所有数据元素的 SQL 查询
通过变量定义值类型的值类型可以看
像这样：

    从dataelement中选择*，其中valuetype ='$ {valueType}';

然后可以在请求时将这些变量作为 URL 的一部分提供
通过 *sqlViews* Web API 资源。可以提供变量
以下格式：

    / api / sqlViews / {id} / data？var = key1：value1＆var = key2：value2

与上面的示例相对应的示例查询如下所示：

    /api/sqlViews/dI68mLkP1wN/data.json?var=valueType:int

*valueType* 变量将替换为 *int* 值，并且
查询将返回具有 int 值类型的数据元素。

变量参数必须仅包含字母数字字符。这
变量必须包含字母数字、破折号、下划线和空格
仅字符。

*query* 类型的 SQL 视图还支持两个系统定义的变量，这些变量允许查询访问有关执行视图的用户的信息：

| 变量 | 手段 |
| -------- | ----- |
| ${_current_user_id} | 用户的数据库ID |
| ${_current_username} | 用户的用户名 |

这些变量的值不能作为URL的一部分提供。它们始终充满有关用户的信息。

例如，以下 *query* 类型的 SQL 视图显示分配给用户的所有组织单位：

```sql
select ou.path, ou.name
from organisationunit ou_user
join organisationunit ou on ou.path like ou_user.path || '%'
join usermembership um on um.organisationunitid = ou_user.organisationunitid
where um.userinfoid = ${_current_user_id}
order by ou.path;
```

### 筛选 { #webapi_sql_view_filtering } 

SQL 视图 API 支持数据过滤，相当于 [metadata object_filter](#webapi_metadata_object_filter)。有关过滤操作符的完整列表，请参阅 [metadata object_filter](#webapi_metadata_object_filter) 文档。

要使用筛选器，只需在 SQL 视图的请求 URL 末尾添加筛选器作为参数，如下所示。该请求将返回一个结果，其中包括名称中含有 "bo "的第 2 层组织单位：

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_level:eq:2&filter=orgunit_name:ilike:bo

以下示例将返回所有带有 `orgunit_level` 2 或
4：

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_level:in:[2,4]

最后，举例说明如何返回所有不以 "Bo "开头的组织单位：

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_name:!like:Bo


## 数据项 { #webapi_data_items } 

This endpoint allows the user to query data related to a few different dimensional items. These items are: `INDICATOR`, `DATA_ELEMENT`, `DATA_SET`, `PROGRAM_INDICATOR`, `PROGRAM_DATA_ELEMENT`, `PROGRAM_ATTRIBUTE`. The endpoint supports only `GET` requests and, as other endpoints, can return responses in JSON or XML format.

该URL是`/ api / dataItems`，并且可以想象，它能够在同一`GET`请求中通过同一端点检索不同的对象。因此，某些可用的可查询属性将根据要查询的维项目而有所不同。

为了理解上面的陈述，让我们看一下以下请求示例：

1)`GET /api/dataItems?filter=dimensionItemType:eq:DATA_ELEMENT&filter=valueType:eq:TEXT`
在这个例子中，项目类型`DATA_ELEMENT` 有一个`valueType` 属性，可以在查询中使用。

2) `GET /api/dataItems?pageSize=50&order=displayName:asc&filter=dimensionItemType:eq:PROGRAM_INDICATOR&filter=displayName:ilike:someName&filter=programId:eq:WSGAb5XwJ3Y`

Here, the `PROGRAM_INDICATOR` allows filtering by `programId`.

因此，根据示例`1)`和`2)`，如果您尝试用`programId`过滤`DATA_ELEMENT`或用`valueType`过滤`PROGRAM_INDICATOR`，应该不会得到任何结果。
换句话说，只有当相应数据项的属性实际存在时，才会应用过滤器。

另一个需要强调的重要方面是，该端点与其他现有端点（如[元数据对象过滤器](#webapi_metadata_object_filter)）并不遵循相同的查询标准。因此，它支持的功能和查询范围较小。
其主要原因是需要查询具有不同关系的多个不同项目，而现有的过滤组件（其他端点使用的）无法做到这一点。

### 端点响应{ #webapi_data_items_possible_responses } 

根据`GET`请求/查询，可返回以下状态代码和响应。

#### 找到结果（状态代码 200）{ #results-found-status-code-200 } 

```json
{
  "pager": {
    "page": 1,
    "pageCount": 27,
    "total": 1339,
    "pageSize": 50
  },
  "dataItems": [
    {
      "simplifiedValueType": "TEXT",
      "displayName": "TB program Gender",
      "displayShortName": "TB prog. Gen.",
      "valueType": "TEXT",
      "name": "TB program Gender",
      "shortName": "TB prog Gen",
      "id": "ur1Edk5Oe2n.cejWyOfXge6",
      "programId": "ur1Edk5Oe2n",
      "dimensionItemType": "PROGRAM_ATTRIBUTE"
    }
  ]
}
```

#### 未找到结果（状态代码 200）{ #results-not-found-status-code-200 } 

```json
{
  "pager": {
    "page": 1,
    "pageCount": 1,
    "total": 0,
    "pageSize": 50
  },
  "dataItems": [
  ]
}
```

#### 无效查询（状态代码 409）{ #invalid-query-status-code-409 } 

```json
{
  "httpStatus": "Conflict",
  "httpStatusCode": 409,
  "status": "ERROR",
  "message": "Unable to parse element `INVALID_TYPE` on filter dimensionItemType`. The values available are: [INDICATOR, DATA_ELEMENT, DATA_ELEMENT_OPERAND, DATA_SET, PROGRAM_INDICATOR, PROGRAM_DATA_ELEMENT, PROGRAM_ATTRIBUTE]",
  "errorCode": "E2016"
}
```

### 分页 { #webapi_data_items_pagination } 

作为默认选项，该端点还支持分页。如果需要，可以在 `GET` 请求中添加 `paging=false` 来禁用分页，即： `/api/dataItems?filter=dimensionItemType:in:[指示符]&paging=false`。

这是启用分页时的有效负载示例。请记住，分页是默认选项，不需要显式设置。

```json
{
  "pager": {
    "page": 1,
    "pageCount": 20,
    "total": 969,
    "pageSize": 50
  },
  "dataItems": [...]
}
```

> **Note**
>
> For elements where there is an associated Program, the program name should also be returned as part of the element name (as a prefix). The only exception is `Program Indicators`. We will not prefix the element name in this case, in order to keep the same behavior as existing endpoints.
>
> The /dataItems endpoint will bring only data items that are defined as aggregatable type. The current list of valid aggregatable types is:
`TEXT, LONG_TEXT`, `LETTER`, `BOOLEAN`, `TRUE_ONLY`, `NUMBER`, `UNIT_INTERVAL`, `PERCENTAGE`, `INTEGER`, `INTEGER_POSITIVE`, `INTEGER_NEGATIVE`, `INTEGER_ZERO_OR_POSITIVE`, `COORDINATE`.
>
> Even though the response returns several different attributes, the filtering can only be applied to specific ones: `displayName`, `name`, `valueType`, `id`, `dimensionItemType`, `programId`.
>
> The `order` will be considered invalid if it is set on top of `name` (ie.: order=*name:asc*) and a `filter` is set to `displayName` (ie.: filter=*displayName:ilike:aName*), and vice-versa.

### 响应属性 { #webapi_data_items_response_attributes } 

现在，我们已经了解了此端点的主要功能和用法，让我们看一下响应中返回的属性列表。

表：数据项属性

| 领域 | 描述 |
|---|---|
| 本我 | 唯一标识符。 |
| 码 | 用于标识维度项目的自定义代码。 |
| 名称 | 物品的名称。 |
| 显示名称 | 定义的显示名称。 |
| 简称 | 项目的简称。 |
| 显示短名 | 已定义的显示短名。 |
| dimensionItemType | The dimension type. Possible types: INDICATOR, DATA_ELEMENT, REPORTING_RATE, PROGRAM_INDICATOR, PROGRAM_DATA_ELEMENT, PROGRAM_ATTRIBUTE. |
| valueType | The item value type (more specific definition). Possitble types: TEXT, LONG_TEXT, LETTER, BOOLEAN, TRUE_ONLY, UNIT_INTERVAL, PERCENTAGE, INTEGER, INTEGER_POSITIVE, INTEGER_NEGATIVE, INTEGER_ZERO_OR_POSITIVE, COORDINATE |
| 简化值类型 | The genereal representation of a value type. Valid values: NUMBER, BOOLEAN, DATE, FILE_RESOURCE, COORDINATE, TEXT |
| 程序Id | 相关的程序 ID。 |

## 查看分析性资源表示 { #webapi_viewing_analytical_resource_representations } 

DHIS2 has several resources for data analysis. These resources include
*maps*, *visualizations*, *eventVisualizations*, *reports* and *documents*. By visiting these resources you will retrieve information about the resource. For instance, by navigating to `/api/visualizations/R0DVGvXDUNP` the response will contain the name, last date of modification and so on for the chart. To retrieve the analytical representation, for instance, a PNG representation of the visualization, you can append */data* to all these resources. For instance, by visiting `/api/visualizations/R0DVGvXDUNP/data` the system will return a PNG image of the visualization.

表格分析资源

| 资源 | 描述 | 数据 URL | 资源表述 |
|---|---|---|---|
| 事件图表 | 活动图 | /api/eventCharts/<identifier\>/data | png |
| 地图 | 地图 | /api/maps/<identifier\>/data | png |
| 可视化 | 透视表和图表 | /api/visualizations/<identifier\>/data | json | jsonp | html | xml | pdf | xls | csv 
| 事件可视化 | 活动图 | /api/eventVisualizations/<identifier\>/data | png 
| png |
| 报告 | 标准报告 | /api/reports/<identifier\>/data | pdf | xls | html |
| 文件 | 资源资源 | /api/documents/<identifier\>/data | <follows document\> |

解析表示的数据内容可以通过以下方式修改
提供 *date* 查询参数。这就要求分析
为期间维度的相对期间设置资源。

表格数据查询参数

| 查询参数 | 值 | 描述 |
|---|---|---|
| 日期 | 日期（yyyy-MM-dd 格式 | 报告中相对时期的依据（需要相对时期） |

表格：png / 图像类型（可视化、地图）的查询参数

| 查询参数 | 描述 |
|---|---|
| 宽度 | 图像宽度（像素 |
| 高度 | 图像高度（像素 |

用于检索各种分析的有效 URL 的一些示例
代表如下。

    /api/visualizations/R0DVGvXDUNP/data
    /api/visualizations/R0DVGvXDUNP/data?date=2013-06-01

    /api/visualizations/jIISuEWxmoI/data.html
    /api/visualizations/jIISuEWxmoI/data.html?date=2013-01-01
    /api/visualizations/FPmvWs7bn2P/data.xls
    /api/visualizations/FPmvWs7bn2P/data.pdf

    /api/eventVisualizations/x5FVFVt5CDI/data
    /api/eventVisualizations/x5FVFVt5CDI/data.png

    /api/maps/DHE98Gsynpr/data
    /api/maps/DHE98Gsynpr/data?date=2013-07-01

    /api/reports/OeJsA6K1Otx/data.pdf
    /api/reports/OeJsA6K1Otx/data.pdf?date=2014-01-01



# 分析工具 { #analytics } 

## 分析工具 { #webapi_analytics } 

要访问 DHIS2 中的分析汇总数据，您可以使用
*分析*资源。分析资源非常强大，因为它可以让您
查询和检索沿所有可用数据维度聚合的数据。
例如，您可以要求分析资源提供
一组数据元素、时间段和
组织单位。此外，您可以检索聚合数据
基于数据元素的任意数量维度的组合和
组织单位组集。

    /api/analytics

### 请求查询参数 { #webapi_analytics_query_parameters } 

分析资源可让您指定一系列查询参数：



表格查询参数

| 查询参数 | 需要 | 描述 | 选项（默认为默认） |
|---|---|---|---|
| 维度 | 是的 | 要检索的维度和维度项，每项重复。 | 任何尺寸 |
| 过滤 | 不 | 应用于查询的筛选器和筛选项，每个筛选器和筛选项重复。 | 任何尺寸 |
| 聚合类型 | 不 | 聚合过程中使用的聚合类型。 | sum | average | average_sum_org_unit | last | last_average_org_unit | count | stddev | variance | min | max |
| 衡量标准 | 不 | 数据/措施的过滤器。 | eq | gt | ge | lt | le |
| 预聚合测量标准 | 不 | 数据/测量的筛选器，在进行汇总之前应用。 | eq | gt | ge | lt | le |
| 开始日期 | 不 | 日期范围的起始日期。将作为筛选器使用。不能与周期维度或筛选器一起使用。 | 日期 |
| 结束日期 | 不 | 日期范围的结束日期。将作为筛选器使用。不能与周期维度或筛选器一起使用。 | 日期 |
| skipMeta | 不 | 排除响应中的元数据部分（提高性能）。 | 假 | 真 |
| 跳过数据 | 不 | 排除回复中的数据部分。 | 假 | 真 |
| 跳读 | 不 | 跳过数据值的四舍五入，即提供全精度。 | 假 | 真 |
| 层次结构 | 不 | 在元数据中包含组织单位祖先的名称和组织单位的层次路径。 | 假 | 真 |
| 忽略限制 | 不 | 忽略响应中最多 50 000 条记录的限制--谨慎使用。 | 假 | 真 |
| 表格布局 | 不 | 响应时使用普通数据源或表格布局。 | 假 | 真 |
| 隐藏空行 | 不 | 隐藏响应中的空行，适用于表格布局为 true 时。 | 假 | 真 |
| 隐藏空列 | 不 | 隐藏响应中的空列，适用于表格布局为 true 时。 | 假 | 真 |
| 显示层次 | 不 | 显示完整的组织单位层次路径和组织单位名称。 | 假 | 真 |
| 包括编号 | 不 | 在答复中包括计算数值所用的分子和分母。 | 假 | 真 |
| includeMetadataDetails | 不 | 在原始数据回复中包含元数据详情。 | 假 | 真 |
| 显示属性 | 不 | 显示元数据的属性。 | 姓名 | 简称 |
| 输出标识主题 | 不 | 用于查询响应中元数据项的标识符方案。它可接受标识符、代码或属性。 | uid | uuid | 代码 | 名称 | 属性：<ID\> |
| 输出机构单位标识方案 | 不 | 查询响应中元数据项使用的标识符方案。该参数覆盖了专门用于机关单位的 "outputIdScheme"。它可接受标识符、代码或属性。 | uuid | 代码 | 名称 | 属性：<ID\> |
| 输出数据元素 IDScheme | 不 | 查询响应中元数据项使用的标识符方案。该参数专门用于覆盖数据元素的 "outputIdScheme"。它可接受标识符、代码或属性。 | uuid | 代码 | 名称 | 属性：<ID\> |
| inputIdScheme | 不 | 查询请求中元数据项使用的标识符方案，可以是标识符、代码或属性。 | uid | 代码 | 属性：<ID\> |
| 批准级别 | 不 | 包括至少已批准到给定批准级别的数据，指批准级别的标识符。 | 批准级别标识符 |
| 相对周期日期 | 不 | 用作相对时期基础的日期。 | 日期 |
| 用户机构单位 | 不 | 明确定义要使用的用户组织单位，覆盖与当前用户相关的组织单位，多个标识符可用分号分隔。 | 组织单位标识符。 |
| 列 | 不 | 用作表格布局列的尺寸。 | 任何维度（必须是查询维度） |
| 行数 | 不 | 用作表格布局行的尺寸。 | 任何维度（必须是查询维度） |
| 订单 | 不 | 根据值指定行的排序。 | ASC | DESC |
| timeField | 不 | 事件聚合所依据的时间字段。仅适用于事件数据项。可以是预定义选项，也可以是具有基于时间的值类型的属性或数据元素的 ID。 | EVENT_DATE &#124; ENROLLMENT_DATE &#124; INCIDENT_DATE &#124; DUE_DATE &#124; COMPLETED_DATE &#124; CREATED &#124; LAST_UPDATED &#124; <Attribute ID\> &#124; <Data element ID\> |
| orgUnitField | 不 | 事件汇总所依据的组织单位字段。仅适用于事件数据项。可以是具有组织单位值类型的属性或数据元素的 ID。默认选项为省略查询参数。 | <Attribute ID\> &#124; <Data element ID\> &#124; REGISTRATION &#124; ENROLLMENT &#124; OWNER_AT_START &#124; OWNER_AT_END |
| 增强的条件           | 不       | 启用尺寸/筛选器的增强条件 | 假 | 真 |

*dimension* 查询参数定义了哪些维度应该是
包含在分析查询中。可以是任意数量的维度
指定的。每个维度都应该重复维度参数
包含在查询响应中。查询响应可能
包含指定的所有组合的聚合值
维度项。

*filter* 参数定义应将哪些维度用作
在分析查询中检索到的数据的过滤器。任意数量
可以指定过滤器。过滤器参数应该重复
要在查询中使用的每个过滤器。过滤器与维度的不同之处在于
过滤器维度不会成为查询响应的一部分
内容，并且响应中的聚合值将是
在过滤器尺寸上折叠。换句话说，数据在
响应将在过滤器维度上聚合，但过滤器
不会作为维度包含在实际响应中。作为
例如，查询按句点过滤的某些数据元素和
您可以使用以下 URL 的组织单位：

    /api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&filter=pe:2014Q1;2014Q2
      &filter=ou:O6uvpzGd5pu;lc3eMKXaEfw

*aggregationType* 查询参数允许您定义哪个聚合
运算符应该用于查询。默认情况下，聚合
将使用为查询中包含的数据元素定义的运算符。
如果您的查询不包含任何数据元素但包含数据
元素组，第一个数据元素的聚合运算符
将使用第一组。组和数据元素的顺序是
不明确的。此查询参数允许您覆盖默认值和
指定特定的聚合运算符。例如，您可以设置
使用以下 URL 进行“计数”的聚合运算符：

    /api/analytics?dimension=dx:fbfJHSPpUQD&dimension=pe:2014Q1&dimension=ou:O6uvpzGd5pu
      &aggregationType=COUNT

*measureCriteria* 查询参数可让您过滤掉数据范围
要返回的记录。您可以指示系统仅返回记录
其中聚合数据值等于、大于、大于或
等于、小于或小于或等于某些值。您可以指定任何
以下格式的标准数量，其中 *criteria* 和
*value* 应替换为实际值：

    /api/analytics?measureCriteria=criteria:value;criteria:value

例如，以下查询将仅返回以下记录
数据值大于或等于 6500 且小于 33000：

    /api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&dimension=pe:2014
      &dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw&measureCriteria=GE:6500;LT:33000

类似于 *measureCriteria*，*preAggregationMeasureCriteria* 查询
参数让你过滤掉数据，只有在聚合之前
执行。例如，以下查询仅聚合数据，其中
原始值在定义的标准内：

    /api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&dimension=pe:2014
      &dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw&preAggregationMeasureCriteria=GE:10;LT:100

*startDate* 和 *endDate* 参数可用于指定自定义
要汇总的日期范围。指定日期范围时，您不能
将相对或固定期间指定为维度或过滤器。日期范围
将过滤分析响应。你可以这样使用它：

    /api/analytics.json?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      &dimension=ou:ImspTQPwCqd&startDate=2018-01-01&endDate=2018-06-01

为了让分析资源生成形状中的数据
一个现成的表格，你可以提供 *tableLayout* 参数
true 作为值。而不是生成一个普通的、规范化的数据源，
分析资源现在将生成表格布局中的数据。你
可以将 *columns* 和 *rows* 参数与维度标识符一起使用
用分号分隔作为值以指示使用哪些值
表格列和行。列和行维度必须存在
作为查询中的数据维度（不是过滤器）。这样的请求可以看
像这样：

    /api/analytics.html?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&dimension=pe:2014Q1;2014Q2
      &dimension=ou:O6uvpzGd5pu&tableLayout=true&columns=dx;ou&rows=pe

*order* 参数可用于分析资源生成
有序数据。数据将按升序（或降序）排序
值。以降序对值进行排序的示例请求
顺序是：

    /api/analytics?dimension=dx:fbfJHSPpUQD&dimension=pe:LAST_12_MONTHS
      &dimension=ou:O6uvpzGd5pu&order=DESC

### 尺寸和项目 { #webapi_analytics_dimensions_and_items } 

DHIS2 采用多维数据模型，有多个固定和动态数据维度。
动态数据维度。固定维度是数据元素、
期间（时间）和组织单位维度。您可以通过类别、类别选项组
维度、 
组织单位组组集、数据元素组组集和组织单位组组集来动态添加维度。
单位组集。下表显示了 DHIS2 中可用的数据维度。
下表显示了 DHIS2 中可用的数据维度。每个数据维度都有相应的*维度
标识符*，每个维度可以有一组*维度项*：



表：维度和维度项目

| 尺寸 | 尺寸 ID | 尺寸项目 |
|---|---|---|
| 数据元素、指标、数据集报告率指标、数据元素操作数、计划指标、计划数据元素、计划属性、验证规则 | dx | 数据元素、指标、数据集报告率指标、数据元素操作数、程序指标、程序属性标识符、关键字 DE_GROUP-<group-id\>, IN_GROUP-<group-id\>, 使用<dataelement-id\>.<optioncombo-id\> 表示数据元素操作数，<program-id\>.<dataelement-id\> 表示程序数据元素，<program-id\>.<attribute-id\> 表示程序属性，<validationrule-id\> 表示验证结果。 |
| 周期（时间） | 聚乙烯 | ISO 期间和相对期间，请参见 "日期和期间格式" |
| 组织单位层次结构 | 欧 | 组织单位标识符，以及关键字 USER_ORGUNIT、USER_ORGUNIT_CHILDREN、USER_ORGUNIT_GRANDCHILDREN、LEVEL-<level\> 和 OU_GROUP-<group-id\> |
| 类别选项组合 | 媾 | 类别选项组合标识符（省略可获得所有项目） |
| 属性选项组合 | ao | 类别选项组合标识符（省略可获得所有项目） |
| 分类目录 | <category id\> | 类别选项标识符（省略可获得所有项目） |
| 数据元素组集 | <group set id\> | 数据元素组标识符（省略可获得所有项目） |
| 组织单位组套 | <group set id\> | 组织单位组标识符（省略可获得所有项目） |
| 类别选项组套 | <group set id\> | 类别选项组标识符（省略可获得所有项目） |

没有必要知道哪些对象用于
设计分析查询时的各种动态维度。你可以得到
通过访问 Web API 中的此 URL 获得动态维度的完整列表：

    /api/dimensions

如果只想检索给定动态维度的维度项，可以使用下面的示例。
使用下面的示例。分页默认为禁用。可通过在 URL 中添加
分页参数 `paging=true` 来启用。

    /api/dimensions/J5jldMd8OHv/items?paging=true

The `/dimensions` API also provides an endpoint where the clients can get the *recomendations* for a given set of *dimensions*. For example:

    /api/33/dimensions/recommendations?fields=id&dimension=dx:fbfJHSPpUQD

In the example above, the client will receive back all the *Categories* that are configured as `Data dimension`s and associated (through data sets and category combos) with the data element `fbfJHSPpUQD`.
In addition, all *Organization Unit Group Set*s that are configured as `Data dimension`s will also (and always) be returned as part of the response.


端点支持多个数据元素。如果希望发送多个数据元素，则应以`;`分隔。例如

    /api/33/dimensions/recommendations?fields=id&dimension=dx:fbfJHSPpUQD;JuTpJ2Ywq5b

> 注意
>
> 该端点只返回当前登录用户可以读取的维度。它会检查当前用户是否可以读取相应推荐维度的数据或元数据。未经授权的维度将从列表中删除。


分析资源的基本 URL 是`/api/analytics`。请求
您可以在其上使用查询字符串的特定维度和维度项目
以下格式，其中 `dim-id` 和 `dim-item` 应替换为实际值：

    /api/analytics?dimension=dim-id:dim-item;dim-item&dimension=dim-id:dim-item;dim-item

如上所示，维度标识符后跟一个冒号
而维度项之间用分号分隔。例如，一个
查询两个数据元素，两个期间和两个组织单位可以
使用以下 URL 完成：

    /api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      &dimension=pe:2016Q1;2016Q2&dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw

查询按类别选项组合细分的数据，而不是
您可以在查询中包含类别维度的数据元素总计
字符串，例如像这样：

    /api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      &dimension=co&dimension=pe:201601&dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw

When selecting data elements you can also select all data elements in a
group as items by using the `DE_GROUP-<id>` syntax:

    /api/analytics?dimension=dx:DE_GROUP-h9cuJOkOwY2
      &dimension=pe:201601&dimension=ou:O6uvpzGd5pu

选择数据集报告率时，语法包含数据
设置标识符后跟报告率指标：

    /api/analytics?dimension=dx:BfMAe6Itzgt.REPORTING_RATE;BfMAe6Itzgt.ACTUAL_REPORTS
      &dimension=pe:201601&dimension=ou:O6uvpzGd5pu

To query for program data elements (of tracker domain type) you can get
those by specifying the program for each data element using the
`<program-id>.<dataelement-id>` syntax:

    /api/analytics.json?dimension=dx:eBAyeGv0exc.qrur9Dvnyt5;eBAyeGv0exc.GieVkTxp4HH
      &dimension=pe:LAST_12_MONTHS&filter=ou:ImspTQPwCqd

To query for program attributes (tracked entity attributes) you can get
those by specifying the program for each attribute using the
`<program.id>.<attribute-id>` syntax:

    /api/analytics.json?dimension=dx:IpHINAT79UW.a3kGcGDCuk6;IpHINAT79UW.UXz7xuGCEhU
      &dimension=pe:LAST_4_QUARTERS&dimension=ou:ImspTQPwCqd

要查询可以使用的组织单位组集和数据元素
以下网址。请注意如何将组集标识符用作
维度标识符和作为维度项的组：

    /api/analytics?dimension=Bpx0589u8y0:oRVt7g429ZO;MAs88nJc9nL
      &dimension=pe:2016&dimension=ou:ImspTQPwCqd

要查询数据元素和类别，您可以使用此 URL。使用
类别标识符作为维度标识符，类别选项作为
维度项目：

    /api/analytics?dimension=dx:s46m5MS0hxu;fClA2Erf6IO&dimension=pe:2016
      &dimension=YNZyaJHiHYq:btOyqprQ9e8;GEqzEKCHoGA&filter=ou:ImspTQPwCqd

使用相关期间和组织单位进行查询
当前用户可以使用这样的 URL：

    /api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      &dimension=pe:LAST_12_MONTHS&dimension=ou:USER_ORGUNIT

When selecting organisation units for a dimension you can select an
entire level optionally constrained by any number of boundary
organisation units with the `LEVEL-<level>` syntax. Boundary refers to a
top node in a sub-hierarchy, meaning that all organisation units at the
given level below the given boundary organisation unit in the hierarchy
will be included in the response, and is provided as regular organisation unit 
dimension items. The level value can either be a numerical level or refer to the identifier
of the organisation unit level entity. A simple query for all org units at level three:

    /api/analytics?dimension=dx:fbfJHSPpUQD&dimension=pe:2016&dimension=ou:LEVEL-3

具有两个边界组织单位的三级和四级查询可以是
指定如下：

    /api/analytics?dimension=dx:fbfJHSPpUQD&dimension=pe:2016
      &dimension=ou:LEVEL-3;LEVEL-4;O6uvpzGd5pu;lc3eMKXaEf

When selecting organisation units you can also select all organisation
units in an organisation unit group to be included as dimension items
using the `OU_GROUP-<id>` syntax. The organisation units in the groups
can optionally be constrained by any number of boundary organisation
units. Both the level and the group items can be repeated any number of
times:

    /api/analytics?dimension=dx:fbfJHSPpUQD&dimension=pe:2016
      &dimension=ou:OU_GROUP-w0gFTTmsUcF;OU_GROUP-EYbopBOJWsW;O6uvpzGd5pu;lc3eMKXaEf

您可以将标识符方案用于元数据部分
具有 outputIdScheme 属性的分析响应，如下所示。你可以
使用 ID、代码和属性作为标识符方案：

    /api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      &dimension=pe:2017Q1;2017Q2&dimension=ou:O6uvpzGd5pu&outputIdScheme=CODE

列出了使用分析资源时需要注意的一些事项
以下。

  - 数据元素、指标、数据集报告率、计划数据
    要素和计划指标是共同数据维度的一部分，
    标识为“dx”。这意味着您可以使用任何数据
    元素、指标和数据集标识符以及“dx”
    查询中的维度标识符。

  - 对于类别、数据元素组集和组织单元组
    设置维度，如果没有，将在查询中使用所有维度项
    维度项目被指定。

  - 对于期间维度，维度项为 ISO 期间
    标识符和/或相对周期。请参阅部分
    上面称为“日期和期间格式”的期间格式和
    可用的相对时期。

  - 对于组织单位维度，可以将项目指定为
    的组织单位或其下属单位。
    已验证用户。组织单位使用 USER_ORGUNIT 密钥
    本身，或为其子单元指定 USER_ORGUNIT_CHILDREN。您还可以指定
    直接使用组织单位标识符，或将两者结合使用。
    通过身份验证的用户必须拥有导出和分析数据的权限
    指定组织单位的权限。如果没有组织单位权限
    明确授予数据采集和维护权
    将被应用。

  - 对于组织单位维度，您可以指定组织
    层次结构级别和用于请求的边界单元
    格式`LEVEL-<level>-<boundary-id>`;举个例子
    `LEVEL-3-ImspTQPwCqd`意味着低于给定的所有组织单位
    层次结构中第 3 级的边界单元。

  - 对于组织单位维度，维度项是
    组织单位及其子层次结构 - 数据将被聚合
    对于指定组织单位下的所有组织单位
    等级制度。

  - 您不能为类别选项指定维度项目
    组合维度。相反，响应将包含项目
    链接到数据值。

### dx尺寸 { #webapi_analytics_dx_dimension } 

`dx` 维度是一个特殊的维度，它可以包含所有的
以下数据类型。



表：数据 dx 维度类型

| 类型 | 语法 | 描述 | 数据源 |
|---|---|---|---|
| 指示符 | <indicator-id\> | 指标标识符。 | 汇总数据 |
| 指示灯 | IN_GROUP-<indicatorgroup-id\> | 关键词后跟一个指标组标识符。将在回复中包含该组中的所有指标。 | 汇总数据 |
| 数据元素 | <dataelement-id\> | 数据元素标识符。 | 汇总数据 |
| 数据元素组 | DE_GROUP-<dataelementgroup-id\> | 关键词后跟数据元素组标识符。将在回复中包含该组中的所有数据元素。 | 汇总数据 |
| 数据元素操作数 | <dataelement-id\><categoryoptcombo-id\>.<attributeoptcombo-id\> | 数据元素标识符，后跟类别选项组合和属性选项组合标识符中的一个或两个。通配符"\*"可用于表示任何选项组合值。属性选项组合标识符可以完全省略。 | 汇总数据 |
| 资料集 | <dataset-id\>.<reporting-rate-metric\> | 数据集标识符，后跟报告率指标。可以是 REPORTING_RATE | REPORTING_RATE_ON_TIME | ACTUAL_REPORTS | ACTUAL_REPORTS_ON_TIME | EXPECTED_REPORTS。 | 数据集完整性登记 |
| 程序数据元素 | <program-id\>.<dataelement-id\> | 程序标识符，后跟数据元素标识符。读取指定程序内的事件。 | 给定程序中的事件 |
| 计划指标 | <programindicator-id\> | 程序指示器标识符。从与程序标识符相关的程序中读取事件。 | 计划指标的计划事件 |
| 验证结果 | <validationrule-id\> | 验证规则标识符。将包括违反验证规则的验证规则，要求生成并持久保存验证结果。 | 验证结果 |

Items from all of the various `dx` types can be combined in an analytics
request. An example looks like this:

    /api/analytics.json
      dimension=dx:Uvn6LCg7dVU;BfMAe6Itzgt.REPORTING_RATE;IpHINAT79UW.a3kGcGDCuk6
      &dimension=pe:LAST_12_MONTHS&filter=ou:ImspTQPwCqd

组语法也可以与任何其他项目一起使用。一个
示例如下所示：

    /api/analytics.json
      dimension=dx:DE_GROUP-qfxEYY9xAl6;IN_GROUP-oehv9EO3vP7;BfMAe6Itzgt.REPORTING_RATE
      &dimension=pe:LAST_12_MONTHS&filter=ou:ImspTQPwCqd

数据元素操作数可以选择性地指定属性选项
组合并使用通配符，例如指定所有类别选项
组合值：

    /api/analytics.json
      dimension=dx:Uvn6LCg7dVU.*.j8vBiBqGf6O;Uvn6LCg7dVU.Z4oQs46iTeR
      &dimension=pe:LAST_12_MONTHS&filter=ou:ImspTQPwCqd

> **Tip**
>
> A great way to learn how to use the analytics API is to use the DHIS2
> Data Visualizer web app and create a pivot table. You can play around 
> with pivot tables using the various dimensions and items and click 
> **Download** > **Plain data source** > **JSON** to see the resulting analytics 
> API calls in the address bar of your web browser.

### 回应格式 { #webapi_analytics_response_formats } 

包含聚合数据的分析响应可以在
各种表现形式。像往常一样，您可以表示对某个项目感兴趣
通过将文件扩展名附加到 URL，通过
`Accept` HTTP 标头或通过 `format` 查询参数。这
默认格式为 JSON。可用的格式和内容类型是
下面列出。

  - json（应用程序/ json）

  - jsonp（应用程序/ javascript）

  - xml（应用程序/ xml）

  - csv（应用程序/ csv）

  - html（text / html）

  - html + css（text / html）

  - xls（application / vnd.ms-excel）

例如，要请求 XML 格式的分析响应，您可以
使用以下网址：

    /api/analytics.xml?dimension=dx:fbfJHSPpUQD
      &dimension=pe:2016&dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw

JSON响应如下所示：

```json
{
  "headers": [
    {
      "name": "dx",
      "column": "Data",
      "meta": true,
      "type": "java.lang.String"
    },
    {
      "name": "pe",
      "column": "Period",
      "meta": true,
      "type": "java.lang.String"
    },
    {
      "name": "value",
      "column": "Value",
      "meta": false,
      "type": "java.lang.Double"
    }
  ],
  "height": 4,
  "metaData": {
    "pe": [
      "2016Q1",
      "2016Q2"
    ],
    "ou": [
      "ImspTQPwCqd"
    ],
    "names": {
      "2016Q1": "Jan to Mar 2016",
      "2016Q2": "Apr to Jun 2016",
      "FbKK4ofIv5R": "Measles Coverage <1 y",
      "ImspTQPwCqd": "Sierra Leone",
      "eTDtyyaSA7f": "Fully Immunized Coverage"
    }
  },
  "rows": [
    [
      "eTDtyyaSA7f",
      "2016Q2",
      "81.1"
    ],
    [
      "eTDtyyaSA7f",
      "2016Q1",
      "74.7"
    ],
    [
      "FbKK4ofIv5R",
      "2016Q2",
      "88.9"
    ],
    [
      "FbKK4ofIv5R",
      "2016Q1",
      "84.0"
    ]
  ],
  "width": 3
}
```

响应表示维度数据表。 *headers* 数组
概述了表中包含哪些列以及哪些列
列包含。 *column* 属性显示列维度
标识符，或者如果列包含度量，则为“值”一词。这
*meta* 属性为 *true* 如果列包含维度项或
*false* 如果列包含度量（聚合数据值）。这
*name* 属性类似于 column 属性，不同之处在于它显示
如果列包含度量，则为“值”。 *type* 属性
表示列值的 Java 类类型。

*height* 和 *width* 属性表示有多少数据列和
行分别包含在响应中。

*metaData period* 属性包含一个唯一的有序数组
响应中包含的时间段。 *metaData ou* 属性包含一个
响应中包含的组织单位标识符数组。
*metaData names* 属性包含标识符之间的映射
用于数据响应和它们代表的对象的名称。
客户端可以使用它来替换数据中的标识符
响应名称以提供更有意义的数据视图
桌子。

*rows* 数组包含维度数据表。它包含
具有维度项（对象或期间标识符）和一列的列
具有聚合数据值。上面的示例响应有一个
数据/指标列、期间列和值列。首先
列包含指标标识符，第二列包含 ISO 句点
标识符，第三个包含聚合数据值。

### 约束与验证 { #webapi_analytics_constraints } 

您可以提供给
分析资源。如果违反任何约束，API 将
返回一个 *409 Conflict* 响应和一个类似于下面的响应消息：

```json
{
  "httpStatus": "Conflict",
  "httpStatusCode": 409,
  "status": "ERROR",
  "message": "Only a single indicator can be specified as filter",
  "errorCode": "E7108"
}
```

`httpStatus` 和 `httpStatusCode` 字段表示 HTTP 状态和
根据 HTTP 规范的状态代码。 `message` 字段提供了一个
验证错误的人类可读描述。 `errorCode` 字段
提供一个机器可读的代码，客户端可以使用它来处理
验证错误。聚合分析的可能验证错误
API 如下表所述。

| 错误代码 | 信息 |
| ---------- | ------- |
| E7100      | 查询参数不能为空 |
| E7101      | 必须至少指定一个尺寸 |
| E7102      | 必须至少指定一个数据维项目或数据元素组集合维项目 |
| E7103      | 尺寸不能同时指定为尺寸和过滤器 |
| E7104      | 必须至少指定一个期间作为维度或过滤器，或者开始和日期 |
| E7105      | 不能同时指定期间，开始日期和结束日期 |
| E7106      | 开始日期不能晚于结束日期 |
| E7107      | 无法为报告费率指定开始日期和结束日期 |
| E7108      | 只能将一个指标指定为过滤器 |
| E7109      | 只能将单个报告率指定为过滤器 |
| E7110      | 类别选项组合不能指定为过滤器 |
| E7111      | 尺寸不能多次指定 |
| E7112      | 只能与类型的尺寸一起指定报告率 |
| E7113      | 未指定数据元素时无法指定分配的类别 |
| E7114      | 指定的类别只能与数据元素一起指定，不能与指标或报告率一起指定 |
| E7115      | 数据元素必须具有允许聚合的值和聚合类型 |
| E7116      | 指标表达式不能包含循环引用 |
| E7117      | 当输出格式为DATA_VALUE_SET时，必须指定数据尺寸“ dx” |
| E7118      | 当输出格式为DATA_VALUE_SET时，必须指定期间尺寸“ pe” |
| E7119      | 当输出格式为DATA_VALUE_SET时，必须指定组织单位维度“ ou” |
| E7120      | 不允许用户查看组织单位 |
| E7121      | 不允许用户读取对象的数据 |
| E7122      | 数据批准级别不存在 |
| E7123      | 当前用户受维度限制，但无权访问任何维度项目 |
| E7124      | 维度存在于查询中，没有任何有效的维度选项 |
| E7125      | 维度标识符未引用任何维度 |
| E7126      | 列必须作为查询中的维存在 |
| E7127      | 行必须作为查询中的维存在 |
| E7128      | 查询结果集超出最大限制 |
| E7129      | 程序已指定但不存在 |
| E7130      | 已指定程序阶段，但不存在 |
| E7131      | 查询失败，可能是因为查询超时 |

### 数据值设定格式 { #webapi_analytics_data_value_set_format } 

分析 *dataValueSet* 资源允许返回聚合
数据值集格式的数据。这种格式代表原始数据
值，而不是按照各种方式汇总的数据
方面。将聚合数据导出为常规数据值很有用
当目标系统包含数据时，用于系统之间的数据交换
与目标系统存储的内容相比具有更精细的粒度。

例如，可以在目标系统中指定一个指标来
汇总多个数据元素的数据并将此数据导入
目标系统中的单个数据元素。再举一个例子，一个
可以汇总在目标的组织单位级别 4 收集的数据
系统级别 2 并将该数据导入目标系统。

您可以从原始数据值集格式中检索数据
数据值集资源：

    /api/analytics/dataValueSet

支持以下资源表示形式：

  - json（应用程序/ json）

  - xml（应用程序/ xml）

使用数据值集格式时，必须正好三个维度
指定为分析维度，每个维度至少有一个维度项目：

  - 资料（dx）

  - 周期（pe）

  - 组织单位（ou）

任何其他维度都将被忽略。过滤器将被应用
定期分析请求。请注意，任何数据维度类型都可以
指定，包括指示符、数据元素、数据元素操作数、
数据集和计划指标。

汇总特定指标数据的示例请求，
期间和组织单位并将其作为常规数据值返回
XML 看起来像这样：

    api / analytics / dataValueSet.xml？dimension = dx：Uvn6LCg7dVU; OdiHJayrsKo
      ＆dimension = pe：LAST_4_QUARTERS＆dimension = ou：lc3eMKXaEfw; PMa2VCrupOd

聚合数据元素操作数的数据并使用 CODE 的请求
因为输出标识符方案如下所示。当定义
输出标识符方案，响应的所有元数据对象部分都是
做作的：

    api / analytics / dataValueSet.json？dimension = dx：fbfJHSPpUQD.pq2XI5kz2BY; fbfJHSPpUQD.PT59n8BQbqM
      ＆dimension = pe：LAST_12_MONTHS＆dimension = ou：ImspTQPwCqd＆outputIdScheme = CODE

使用基于属性的标识符方案进行导出时存在风险
产生重复的数据值。布尔查询参数
duplicatesOnly 可用于调试目的仅返回
重复数据值。此响应可用于清理
重复：

    api / analytics / dataValueSet.xml？dimension = dx：Uvn6LCg7dVU; OdiHJayrsKo
      ＆dimension = pe：LAST_4_QUARTERS＆dimension = ou：lc3eMKXaEfw＆duplicatesOnly = true

### 原始数据格式 { #webapi_analytics_raw_data } 

分析 *rawData* 资源允许返回存储在
未执行任何聚合的分析数据表。这
对于想要执行聚合和的客户很有用
自行过滤，而无需对数据进行非规范化
可用的数据维度本身。

    / api / analytics / rawData

支持以下资源表示形式：

  - json（应用程序/ json）

  - csv（应用程序/ csv）

此资源遵循常规分析资源的语法。仅有的
支持查询参数的子集。此外，一个
*startDate* 和 *endDate* 参数可用。支持的
参数如下表所示。



表格查询参数

| 查询参数 | 要求/备注 |
|---|---|
| 维度 | 是的 |
| 开始日期 | 否 / 年-月-日 |
| 结束日期 | 否 / 年-月-日 |
| skipMeta | 不 |
| 跳过数据 | 不 |
| 层次结构 | 不 |
| 显示层次 | 不 |
| 显示属性 | 不 |
| 输出标识主题 | 不 |
| 输出机构单位标识方案 | 不 |
| 输出数据元素 IDScheme | 不 |
| inputIdScheme | 不 |
| 用户机构单位 | 不 |

*dimension* 查询参数定义了哪些维度（表列）
应包含在响应中。它可以选择性地受到约束
与项目。 *filter* 查询参数定义了哪些项目和
维度（表格列）应用作响应的过滤器。

对于组织单位维度，响应将包含数据
与组织单位和该组织中的所有组织单位相关联
子层次结构（树中的孩子）。这与
常规分析资源，其中只有明确选择的
包括组织单位。

要检索具有特定数据元素、特定时间段的响应，
两个自定义维度的特定组织单位和所有数据
可以发出这样的请求：

    /api/analytics/rawData.json?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU;Jtf34kNZhzP
      ＆dimension = J5jldMd8OHv＆dimension = Bpx0589u8y0
      ＆dimension = pe：LAST_12_MONTHS
      ＆dimension = ou：O6uvpzGd5pu; fdc6uOvgoji

*startDate* 和 *endDate* 参数允许获取链接的数据
到这些日期之间的任何时间段。这避免了定义所有
期间明确在
    要求：

    /api/analytics/rawData.json?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU;Jtf34kNZhzP
      ＆dimension = J5jldMd8OHv＆dimension = Bpx0589u8y0
      ＆startDate = 2015-01-01＆endDate = 2015-12-31
      ＆dimension = ou：O6uvpzGd5pu; fdc6uOvgoji

*filter* 参数可用于过滤响应，而无需
包括该维度作为响应的一部分，这次是在 CSV 中
格式：

    /api/analytics/rawData.csv?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU;Jtf34kNZhzP
      ＆filter = J5jldMd8OHv：uYxK4wmcPqA; tDZVQ1WtwpA
      ＆startDate = 2015-01-01＆endDate = 2015-12-31
      ＆dimension = ou：O6uvpzGd5pu

如果您想要人类可读的数据，*outputIdScheme* 参数很有用
响应，因为它可以像这样设置为 *NAME*：

    /api/analytics/rawData.csv?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      ＆filter = J5jldMd8OHv：uYxK4wmcPqA; tDZVQ1WtwpA
      ＆startDate = 2017-01-01＆endDate = 2017-12-31
      ＆dimension = ou：O6uvpzGd5pu
      ＆outputIdScheme = NAME

来自 *rawData* 资源的响应看起来与
定期分析资源；不同之处在于响应包含
原始的、非聚合的数据，适合进一步聚合
第三方系统。

### 调试 { #webapi_analytics_debugging } 

在调试分析请求时，检查数据会很有用
聚合分析响应的价值来源。这
*analytics/debug/sql* 资源将提供一个 SQL 语句
返回数据值表的相关内容。你可以生产
通过执行内容类型为“text/html”的 GET 请求或
如下所示的“文本/纯文本”。维度和过滤器语法与
常规分析查询：

    / api / analytics / debug / sql？dimension = dx：fbfJHSPpUQD; cYeuwXTCPkU
      ＆filter = pe：2016Q1; 2016Q2＆filter = ou：O6uvpzGd5pu

## 事件分析 { #webapi_event_analytics } 

事件分析 API 允许您访问聚合的事件数据和查询
*事件*在 DHIS2 中捕获。此资源可让您检索基于事件的
在程序和可选的程序阶段，并让您检索和
在任何事件维度上过滤事件。

    /api/analytics/events

### 尺寸和项目 { #webapi_event_analytics_dimensions_items } 

事件维度包括数据元素、属性、组织单位
和时期。聚合的事件分析资源将返回
聚合信息，例如计数或平均值。查询分析
资源将简单地返回匹配一组条件的事件，并且不会
不执行任何聚合。您可以在表单中指定维度项
来自选项集的选项和来自数据图例集的图例
与此相关的元素和属性。事件
尺寸如下表所示。



表格活动尺寸

| 尺寸 | 尺寸 ID | 描述 |
|---|---|---|
| 资料元素 | <id\> | 数据元素标识符 |
| 属性 | <id\> | 属性标识符 |
| 句号 | 聚乙烯 | ISO 期间和相对期间，请参见 "日期和期间格式" |
| 组织单位 | 欧 | 组织单位标识符和关键词 USER_ORGUNIT、USER_ORGUNIT_CHILDREN、USER_ORGUNIT_GRANDCHILDREN、LEVEL-<level\> 和 OU_GROUP-<group-id\> |
| 组织单位组套 | <org unit group set id\> | 组织单位组集合标识符 |
| 分类目录 | <category id\> | 类别标识符（仅限程序属性类别） |

### 请求查询参数 { #webapi_event_analytics_request_query_parameters } 

Analytics事件API可让您指定一系列查询参数。



表格事件查询和汇总分析的查询参数

| 查询参数 | 需要 | 描述 | 选项（默认为默认） |
|---|---|---|---|
| 程序 | 是的 | 计划标识符。 | 任何程序标识符 |
| 阶段 | 不 | 计划阶段标识符。 | 任何程序阶段标识符 |
| 开始日期 | 是的 | 活动开始日期。 | 日期（yyyy-MM-dd 格式 |
| 结束日期 | 是的 | 活动结束日期。 | 日期（yyyy-MM-dd 格式 |
| 维度 | 是的 | 维度标识符包括数据元素、属性、程序指标、期间、组织单元和组织单元组集。参数可以重复任意次数。项目过滤器可以应用于维度的格式<item-id\>:<operator\>:<filter\>。过滤器值不区分大小写。 | 操作符可以是 EQ | GT | GE | LT | LE | NE | LIKE | IN |
| 过滤 | 不 | 维度标识符包括数据元素、属性、期间、组织单位和组织单位组集。参数可以重复任意次数。项目过滤器可以应用于维度，格式为<item-id\>:<operator\>:<filter\>。过滤器值不区分大小写。 ||
| 层次结构 | 不 | 在元数据中包含组织单位祖先的名称和组织单位的层次路径。 | 假 | 真 |
| 事件状态 | 不 | 指定要包含的事件状态。 | 活动 | 已完成 | 计划 | 逾期 | 跳过。可以逗号分隔（*仅用于查询*）。 |
| 程序状态 | 不 | 指定要包含的事件的注册状态。 | 活动 | 已完成 | 已取消。可以逗号分隔（*仅用于查询*）。 |
| 相对周期日期 | 字符串 | 不 | 日期标识符，例如："2016-01-01"。覆盖相对时间段的开始日期 |
| 列 | 不 | 用作表格布局列的尺寸。 | 任何维度（必须是查询维度） |
| 行数 | 不 | 用作表格布局行的尺寸。 | 任何维度（必须是查询维度） |
| timeField | 不 | 事件汇总/查询中使用的时间字段。仅适用于事件数据项。可以是预定义选项，也可以是具有基于时间的值类型的属性或数据元素的 ID。对于"/analytics/events/"端点，默认 "timeField "为 EVENT_DATE。 | event_date | scheduled_date |<Attribute ID\> |<Data element ID\> |



表格：仅用于事件查询分析的查询参数

| 查询参数 | 需要 | 描述 | 选项 |
|---|---|---|---|
| ouMode | 不 | 选择组织单位的模式。默认值为 DESCENDANTS，指层次结构中的所有子单位。CHILDREN 指层次结构中的直接子单位；SELECTED 仅指选定的组织单位。更多详情[此处](#webapi_tracker_orgunit_scope) | 后裔、子女、选定 |
| 升 | 不 | 尺寸以升序排序，可参考事件日期、组织单位名称和代码以及任何项目标识符。 | | `ouname` | `programstatus` | `eventstatus` | `createdbydisplayname` | `lastupdatedbydisplayname` | `eventdate` | `enrollmentdate` | `incidentdate` | `lastupdated` | 项目标识符 |
| 描述 | 不 | 以降序排序的维度，可参考事件日期、组织单位名称和代码以及任何项目标识符。 | | `ouname` | `programstatus` | `eventstatus` | `createdbydisplayname` | `lastupdatedbydisplayname` | `eventdate` | `enrollmentdate` | `incidentdate` | `lastupdated` | 项目标识符 |
| 仅坐标 | 不 | 是否只返回有坐标的事件。 | 假 | 真 |
| 坐标回调 | 不 | 只要缺少组织单元几何图形，就会应用程序实例几何图形。 | 假 | 真 |
| dataIdScheme | 不 | 用于数据的 Id 方案，更具体地说是用于有选项集或图例集的数据元素和属性，例如，在数据响应中返回选项名称而不是代码，或图例名称而不是图例 ID。 | 名称 | 代码 | uid |
| 标头 | 不 | 作为响应的一部分返回的标头的名称。 | 用逗号分隔的一个或多个标头名称 |
| 页码 | 不 | 页码。默认页码为 1。 | 数字正值 |
| 页面大小 | 不 | 页面大小。默认大小为每页 50 个项目。 | 数字零值或正值 |
| 事件日期 | 没有 | (`events` resource only) Custom period on `eventDate` (see "custom date periods" section) | 参见 "日期和句号格式 "部分 |
| 注册日期 | 没有 | Custom period on `enrollmentDate` (see "custom date periods" section) | 参见 "日期和句号格式 "部分 |
| 预定日期 | 没有 | (仅限于 `events` 资源） `scheduledDate` 上的自定义期限（请参阅 "自定义日期期限 "部分） | 参见 "日期和句号格式 "部分 |
| 事件日期 | 没有 | Custom period on `incidentDate` (see "custom date periods" section) | 参见 "日期和句号格式 "部分 |
| 最后更新 | 没有 | Custom period on `lastUpdated` (see "custom date periods" section) | 参见 "日期和句号格式 "部分 |



表格仅用于汇总事件分析的查询参数

| 查询参数 | 需要 | 描述 | 选项 |
|---|---|---|---|
| 价值 | 不 | 值维度标识符。可以是数据元素或属性，必须是数值类型。 | 数据元素或属性标识符 |
| 聚合类型 | 不 | 值维度的聚合类型。默认为平均值。 | sum | average | average_sum_org_unit | last | last_average_org_unit | count | stddev | variance | min | max |
| 显示层次 | 不 | 显示完整的组织单位层次路径和组织单位名称。 | 假 | 真 |
| 显示属性 | 不 | 显示元数据的属性。 | 姓名 | 简称 |
| 排序顺序 | 不 | 按升序或降序对值列上的记录进行排序。 | ASC | DESC |
| 限额 | 不 | 要返回的最大记录数。不能大于 10 000。 | 数字正值 |
| 输出类型 | 不 | 指定分析数据的输出类型，可以是事件、注册人数或跟踪实体实例。最后两个选项仅适用于注册计划。 | EVENT &#124; ENROLLMENT &#124; TRACKED_ENTITY_INSTANCE |
| collapseDataDimensions | 不 | 在响应中将所有数据维度（数据元素和属性）合并为一个维度。 | 假 | 真 |
| skipMeta | 不 | 排除响应中的元数据部分（提高性能）。 | 假 | 真 |
| 跳过数据 | 不 | 排除回复中的数据部分。 | 假 | 真 |
| 跳读 | 不 | 跳过汇总数据值的四舍五入。 | 假 | 真 |
| 聚合数据 | 不 | 生成数据维度的汇总值（而不是维度项）。 | 假 | 真 |
| orgUnitField | 不 | 事件汇总所依据的组织单位字段。仅适用于事件数据项。可以是具有组织单位值类型的属性或数据元素的 ID。默认选项为省略查询参数。 | <Attribute ID\> &#124; <Data element ID\> &#124; REGISTRATION &#124; ENROLLMENT &#124; OWNER_AT_START &#124; OWNER_AT_END |




表格仅用于群集事件分析的查询参数

| 查询参数 | 需要 | 描述 | 选项 |
|---|---|---|---|
| 集群大小 | 是的 | 集群的大小，以米为单位。 | 数字正值 |
| coordinateField | 不 | 地理空间事件分析所依据的字段。默认为事件。可设置为属性标识符和坐标值类型的数据元素。 | EVENT |<attribute-id\> |<dataelement-id\> |
| 框 | 是的 | 以 "最小经度、最小纬度、最大经度、最大纬度 "为格式，在回复中包含事件的边界框/区域。 | 串 |
| 包括群集点 | 不 | 包括每个群组的基本点信息，如果群组代表的点数非常多，则要小心。 | 假 | 真 |

### 事件查询分析 { #webapi_event_query_analytics } 

*analytics/events/query* 资源可让您查询捕获的
事件。此资源不执行任何聚合，而是让
您查询和过滤有关事件的信息。

    /api/analytics/events/query

您可以指定任意数量的维度和任意数量的过滤器
询问。维度项标识符可以引用任何数据元素，
人员属性、人员标识符、固定和相对时间段以及
组织单位。维度可以选择有一个查询运算符和
一个过滤器。事件查询应采用所描述的格式
    以下。

    /api/analytics/events/query/<program-id>?startDate=yyyy-MM-dd&endDate=yyyy-MM-dd
      &dimension=ou:<ou-id>;<ou-id>&dimension=<item-id>&dimension=<item-id>:<operator> ：<filter>

例如，要从“住院发病率和
2016 年 1 月至 10 月期间的死亡率”计划，其中“性别”
和“年龄”数据元素被包括在内并且“年龄”维度被过滤
在“18”上，您可以使用以下内容
    询问：

    /api/analytics/events/query/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31
      &dimension=ou:O6uvpzGd5pu;fdc6uOvgoji&dimension=oZg33kd9taw&dimension=qrur9Dvnyt5:EQ:18

检索“Child”的“Birth”程序阶段的事件
2016 年 3 月至 12 月期间的“计划”计划，其中“重量”
数据元素，过滤大于
    2000年：

    /api/analytics/events/query/IpHINAT79UW?stage=A03MvHHogjR&startDate=2016-03-01
      &endDate=2016-12-31&dimension=ou:O6uvpzGd5pu&dimension=UXz7xuGCEhU:GT:2000

排序可以应用于查询事件的事件日期和
任何尺寸。按事件日期降序和升序排序
您可以使用的“年龄”数据元素维度
    用：

    /api/analytics/events/query/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31
      &dimension=ou:O6uvpzGd5pu&dimension=qrur9Dvnyt5&desc=EVENTDATE&asc=qrur9Dvnyt5

分页可以通过指定页码和
页面大小参数。如果指定了页码但未指定页面大小，
将使用 50 的页面大小。如果指定了页面大小但页面
number 不是，将使用页码 1。获取第三页
页面大小为 20 的响应，您可以使用类似的查询
    这：

    /api/analytics/events/query/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31
      &dimension=ou:O6uvpzGd5pu&dimension=qrur9Dvnyt5&page=3&pageSize=20

#### 筛选 { #filtering } 

过滤器可以应用于数据元素，人员属性和人员标识符。过滤是通过以下格式的查询参数值完成的：

    ＆dimension = <item-id>：<operator>：<filter-value>

例如，您可以过滤“ Weight”数据元素以获取大于2000且小于4000的值，如下所示：

    ＆dimension = UXz7xuGCEhU：GT：2000＆dimension = UXz7xuGCEhU：LT：4000

您可以使用以下方法过滤多个特定年龄的“年龄”数据元素
像这样的 IN 运算符：

    ＆dimension = qrur9Dvnyt5：IN：18; 19; 20

您可以通过重复运算符和过滤器组件为给定项目指定多个过滤器，所有组件均用分号分隔：

    ＆dimension = qrur9Dvnyt5：GT：5：LT：15

下面列出了可用的运算符。



表格筛选操作符

| 操作员 | 描述 |
|---|---|
| EQ | 等于 |
| !EQ | 不等于 |
| IEQ | 等于，忽略情况 |
| !IEQ | 不等于，忽略情况 |
| GT | 大于 |
| 通用电器 | 大于或等于 |
| LT | 小于 |
| LE | 小于或等于 |
| NE | 不等于 |
| 喜欢 | 喜欢（自由文本匹配） |
| 喜欢 | 不喜欢（自由文本匹配） |
| 喜欢 | 比如，忽略大小写（自由文本匹配） |
| 我喜欢 | 不喜欢，忽略情况（自由文本匹配） |
| IN | 等于用"; "分隔的多个值之一 |

#### 时间字段过滤{ #time-field-filtering } 

By default, the `query` endpoints filter periods based on `eventDate`.
However, it is possible to filter entries based on `lastUpdated` or `schedule` instead, by using the `timeField` query parameter.
For example:

    &timeField=LAST_UPDATED
    &timeField=SCHEDULED_DATE

#### 强化条件{ #enhanced-conditions } 

By default `enhancedConditions` flag is set to `false`. This means all conditions expressed in `dimension` and `filter` are meant as `AND` conditions.
For example:

    dimension=a:GT:20:LT:40& dimension=b:GT:1:LT:5

转化为以下逻辑条件

    a>20 和 a<40 and b>1 和 b<5 

不过，在某些情况下，可能需要对条件进行更多控制，这可以通过将查询参数 `enhancedConditions` 设置为 `true`来启用。
这样，客户端就可以使用特殊的 `_OR_` 分隔符，使用 `OR` 逻辑操作符连接条件。

例：

    dimension=a:GT:20:LT:40_OR_b:GT:1:LT:5&dimension=c:EQ:test

转化为以下逻辑条件

    (a>20，a<40) or (b>1，b<5）），c = "测试"

#### 回应格式 { #response-formats } 

默认的响应表示格式是 JSON。请求必须使用 HTTP *GET* 方法。支持以下响应格式。

  - json（应用程序/ json）

  - jsonp（应用程序/ javascript）

  - xls（application / vnd.ms-excel）

例如，要获得Excel格式的响应，可以在请求URL中使用文件扩展名，如下所示：

    /api/analytics/events/query/eBAyeGv0exc.xls?startDate=2016-01-01&endDate=2016-10-31
      &dimension=ou:O6uvpzGd5pu&dimension=oZg33kd9taw&dimension=qrur9Dvnyt5

您可以将hierarchyMeta 查询参数设置为true，以便
在元部分中包括所有祖先组织单位的名称
响应：

    /api/analytics/events/query/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31
      &dimension=ou:YuQRtpLP10I&dimension=qrur9Dvnyt5:EQ:50&hierarchyMeta=true

默认响应JSON格式将类似于以下内容：

```json
{
  "headers": [
    {
      "name": "psi",
      "column": "Event",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "ps",
      "column": "Program stage",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "eventdate",
      "column": "Event date",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "storedby",
      "column": "Stored by",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "lastupdated",
      "column": "Last Updated",
      "valueType": "DATE",
      "type": "java.time.LocalDate",
      "hidden": false,
      "meta": true
    },
    {
      "name": "createdbydisplayname",
      "column": "Created by (display name)",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "lastupdatedbydisplayname",
      "column": "Last updated by (display name)",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "coordinates",
      "column": "Coordinates",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "ouname",
      "column": "Organisation unit name",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "oucode",
      "column": "Organisation unit code",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "ou",
      "column": "Organisation unit",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "oZg33kd9taw",
      "column": "Gender",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "qrur9Dvnyt5",
      "column": "Age",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    }
  ],
  "metaData": {
    "names": {
      "qrur9Dvnyt5": "Age",
      "eBAyeGv0exc": "Inpatient morbidity and mortality",
      "ImspTQPwCqd": "Sierra Leone",
      "O6uvpzGd5pu": "Bo",
      "YuQRtpLP10I": "Badjia",
      "oZg33kd9taw": "Gender"
    },
    "ouHierarchy": {
      "YuQRtpLP10I": "/ImspTQPwCqd/O6uvpzGd5pu"
    }
  },
  "width": 8,
  "height": 4,
  "rows": [
    [
      "yx9IDINf82o",
      "Zj7UnCAulEk",
      "2016-08-05",
      "system",
      "2018-08-07",
      "[5.12, 1.23]",
      "Ngelehun",
      "OU_559",
      "YuQRtpLP10I",
      "Female",
      "50"
    ],
    [
      "IPNa7AsCyFt",
      "Zj7UnCAulEk",
      "2016-06-12",
      "system",
      "2018-08-07",
      "[5.22, 1.43]",
      "Ngelehun",
      "OU_559",
      "YuQRtpLP10I",
      "Female",
      "50"
    ],
    [
      "ZY9JL9dkhD2",
      "Zj7UnCAulEk",
      "2016-06-15",
      "system",
      "2018-08-07",
      "[5.42, 1.33]",
      "Ngelehun",
      "OU_559",
      "YuQRtpLP10I",
      "Female",
      "50"
    ],
    [
      "MYvh4WAUdWt",
      "Zj7UnCAulEk",
      "2016-06-16",
      "system",
      "2018-08-07",
      "[5.32, 1.53]",
      "Ngelehun",
      "OU_559",
      "YuQRtpLP10I",
      "Female",
      "50"
    ]
  ]
}
```

响应的 *headers* 部分描述了查询的内容
结果。事件唯一标识符、节目阶段标识符、
事件日期、组织单位名称、组织单位代码和
组织单位标识符显示为前六个维度
响应并将始终存在。接下来是数据元素，
指定为的人员属性和人员标识符
请求中的维度，在本例中为“性别”和“年龄”数据
元素尺寸。标题部分包含的标识符
“名称”属性中的维度项和可读维度
“列”属性中的描述。

*metaData* 部分，*ou* 对象包含映射到表示层次结构的字符串的响应中存在的所有组织单位的标识符。此层次结构字符串从根开始列出组织单位的祖先（父）的标识符。 *names* 对象包含响应中映射到其名称的所有项目的标识符。

*rows* 部分包含查询产生的事件。每一行
正好代表一个事件。

为了让事件分析资源在
一个现成的表格的形状，你可以提供*行*和*列*
具有请求的维度标识符的参数以分号分隔
作为值来指示哪些用作表列和行。
事件不是生成一个普通的、规范化的数据源
分析资源现在将生成表格布局中的数据。这
列和行维度必须作为数据维度出现在
查询（不是过滤器）。这样的请求可能如下所示：

    /api/analytics.html+css?dimension=dx:cYeuwXTCPkU;fbfJHSPpUQD&dimension=pe:WEEKS_THIS_YEAR
      &filter=ou:ImspTQPwCqd&displayProperty=SHORTNAME&columns=dx&rows=pe

### 事件汇总分析 { #webapi_event_aggregate_analytics } 

`/analytics/events/aggregate` 资源可让您检索 *aggregated
DHIS2 中捕获的事件数量*。此资源可让您检索
基于程序和可选的程序阶段聚合数据，以及
允许您过滤任何事件维度。

    /api/analytics/events/aggregate

事件聚合资源不返回事件信息
本身，而不是与请求匹配的事件总数
询问。事件维度包括数据元素、人员属性、人员
标识符、期间和组织单位。聚合事件查询
应该是下面描述的格式。

    /api/analytics/events/aggregate/<program-id>?startDate=yyyy-MM-dd&endDate=yyyy-MM-dd
      &dimension=ou:<ou-id>;<ou-id>&dimension=<item-id>&dimension=<item-id>:<operator> ：<filter>

例如，要从
1 月至 10 月期间的“住院发病率和死亡率”计划
2016 年，其中包含“性别”和“年龄”数据元素，“年龄”
维度项目在“18”上过滤，“性别”项目在过滤上
“女性”，您可以使用以下查询：

    /api/analytics/events/aggregate/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31
      &dimension=ou:O6uvpzGd5pu&dimension=oZg33kd9taw:EQ:Female&dimension=qrur9Dvnyt5:GT:50

检索固定和相对时期的数据，而不是开始和结束
日期，在本例中为 2016 年 5 月和过去 12 个月，以及组织
与当前用户关联的单位，可以使用以下查询：

    /api/analytics/events/aggregate/eBAyeGv0exc?dimension=pe:201605;LAST_12_MONTHS
      &dimension=ou:USER_ORGUNIT;fdc6uOvgo7ji&dimension=oZg33kd9taw

为了将“女性”指定为数据的“性别”过滤器
响应，意思是“性别”不会是响应的一部分，但会
过滤其中的聚合数字，您可以使用以下语法：

    /api/analytics/events/aggregate/eBAyeGv0exc?dimension=pe:2016；
      &dimension=ou:O6uvpzGd5pu&filter=oZg33kd9taw:EQ:Female

要将“Bo”组织单位和期间“2016”指定为过滤器，
和“放电方式”和“性别”作为维度，其中“性别”是
在“男性”项目上过滤，您可以使用这样的查询：

    /api/analytics/events/aggregate/eBAyeGv0exc?filter=pe:2016&filter=ou:O6uvpzGd5pu
      &dimension=fWIAEtYVEGk&dimension=oZg33kd9taw:EQ:Male

要为_出院模式_创建“前 3 名报告”，您可以使用限制
和 sortOrder 查询参数类似：

    /api/analytics/events/aggregate/eBAyeGv0exc?filter=pe:2016&filter=ou:O6uvpzGd5pu
      &dimension=fWIAEtYVEGk&limit=3&sortOrder=DESC

要指定具有相应聚合类型的值维度，您
可以使用 value 和aggregationType 查询参数。指定一个
值维度将使分析引擎返回聚合值
对于响应中该维度的值，而不是计数
事件。

    /api/analytics/events/aggregate/eBAyeGv0exc.json?stage=Zj7UnCAulEk
      &dimension=ou:ImspTQPwCqd&dimension=pe:LAST_12_MONTHS&dimension=fWIAEtYVEGk
      &value=qrur9Dvnyt5&aggregationType=AVERAGE

基于特定数据元素或属性的事件分析聚合
对于值类型日期或日期时间，您可以使用 `timeField` 参数：

    /api/analytics/events/aggregate/IpHINAT79UW.json?dimension=ou:ImspTQPwCqd
      &dimension=pe:LAST_12_MONTHS&dimension=cejWyOfXge6&stage=A03MvHHogjR
      &timeField=ENROLLMENT_DATE

基于特定数据元素或属性的事件分析聚合
对于值类型的组织单元，您可以使用 `orgUnitField` 参数：

    /api/analytics/events/aggregate/eBAyeGv0exc.json?dimension=ou:ImspTQPwCqd
      &dimension=pe:THIS_YEAR&dimension=oZg33kd9taw&stage=Zj7UnCAulEk
      &orgUnitField=S33cRBsnXPo

The `orgUnitField` parameter value may be one of the following:

| orgUnitField | 描述 |
| --- | --- |
| <Attribute ID\> | 组织单位值类型属性的 ID |
| <Data element ID\> | 组织单位值类型数据元素的 ID |
| 注册 | 被跟踪实体实例注册（创建）的组织单位 |
| 注册 | 被跟踪实体实例参加计划的组织单位 |
| OWNER_AT_START | 报告期开始时被跟踪实体实例的所有组织单位 |
| OWNER_AT_END | 报告期末被跟踪实体实例的所有组织单位 |

#### 范围/图例集 { #ranges-legend-sets } 

对于聚合查询，您可以为数值指定范围/图例集
数据元素和属性维度。目的是将
数值范围内。举个例子，而不是生成数据
对于不同年份的“年龄”数据元素，您可以将
年龄组的信息。为了实现这一点，数据元素或
属性必须与图例集相关联。格式是
如下面所描述的：

    ？dimension = <item-id>-<legend-set-id>

一个示例如下所示：

    /api/analytics/events/aggregate/eBAyeGv0exc.json?stage=Zj7UnCAulEk
      &dimension=qrur9Dvnyt5-Yf6UHoPkdS6&dimension=ou:ImspTQPwCqd&dimension=pe:LAST_MONTH

#### 回应格式 { #response-formats } 

默认的响应表示格式是 JSON。请求必须是
使用 HTTP *GET* 方法。响应将类似于以下内容：

```json
{
  "headers": [
    {
      "name": "oZg33kd9taw",
      "column": "Gender",
      "type": "java.lang.String",
      "meta": false
    },
    {
      "name": "qrur9Dvnyt5",
      "column": "Age",
      "type": "java.lang.String",
      "meta": false
    },
    {
      "name": "pe",
      "column": "Period",
      "type": "java.lang.String",
      "meta": false
    },
    {
      "name": "ou",
      "column": "Organisation unit",
      "type": "java.lang.String",
      "meta": false
    },
    {
      "name": "value",
      "column": "Value",
      "type": "java.lang.String",
      "meta": false
    }
  ],
  "metaData": {
    "names": {
      "eBAyeGv0exc": "Inpatient morbidity and mortality"
    }
  },
  "width": 5,
  "height": 39,
  "rows": [
    [
      "Female",
      "95",
      "201605",
      "O6uvpzGd5pu",
      "2"
    ],
    [
      "Female",
      "63",
      "201605",
      "O6uvpzGd5pu",
      "2"
    ],
    [
      "Female",
      "67",
      "201605",
      "O6uvpzGd5pu",
      "1"
    ],
    [
      "Female",
      "71",
      "201605",
      "O6uvpzGd5pu",
      "1"
    ],
    [
      "Female",
      "75",
      "201605",
      "O6uvpzGd5pu",
      "14"
    ],
    [
      "Female",
      "73",
      "201605",
      "O6uvpzGd5pu",
      "5"
    ]
  ]
}
```

请注意，单个响应中返回的行的最大限制为 10 000。
如果查询产生超过最大限制，*409 Conflict* 状态代码
将被退回。

### 事件聚类分析 { #webapi_event_clustering_analytics } 

*analytics/events/cluster* 资源提供集群地理空间
事件数据。请求如下所示：

    /api/analytics/events/cluster/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31
      &dimension=ou:LEVEL-2&clusterSize=100000
      &bbox=-13.2682125,7.3721619,-10.4261178,9.904012&includeClusterPoints=false

集群响应提供基础点的计数，中心
每个集群的点和范围。如果 `includeClusterPoints` 查询
参数设置为 true，以逗号分隔的字符串与标识符
包括基础事件。示例响应如下所示：

```json
{
  "headers": [
    {
      "name": "count",
      "column": "Count",
      "type": "java.lang.Long",
      "meta": false
    },
    {
      "name": "center",
      "column": "Center",
      "type": "java.lang.String",
      "meta": false
    },
    {
      "name": "extent",
      "column": "Extent",
      "type": "java.lang.String",
      "meta": false
    },
    {
      "name": "points",
      "column": "Points",
      "type": "java.lang.String",
      "meta": false
    }
  ],
  "width": 3,
  "height": 4,
  "rows": [
    [
      "3",
      "POINT(-13.15818 8.47567)",
      "BOX(-13.26821 8.4St7215,-13.08711 8.47807)",
      ""
    ],
    [
      "9",
      "POINT(-13.11184 8.66424)",
      "BOX(-13.24982 8.51961,-13.05816 8.87696)",
      ""
    ],
    [
      "1",
      "POINT(-12.46144 7.50597)",
      "BOX(-12.46144 7.50597,-12.46144 7.50597)",
      ""
    ],
    [
      "7",
      "POINT(-12.47964 8.21533)",
      "BOX(-12.91769 7.66775,-12.21011 8.49713)",
      ""
    ]
  ]
}
```

### 事件计数和范围分析 { #webapi_event_count_extent_analytics } 

*analytics/events/count* 资源适用于与几何相关的请求，用于检索事件计数和范围（边界框）。
请求，用于检索特定查询的事件计数和范围（边界框
的次数和范围（边界框）。查询语法等同于 *events/query* 资源。
资源。请求如下

    /api/analytics/events/count/eBAyeGv0exc?startDate=2016-01-01
      &endDate=2016-10-31&dimension=ou:O6uvpzGd5pu

响应将以JSON格式提供计数和范围：

```json
{
  extent: "BOX(-13.2682125910096 7.38679562779441,-10.4261178860988 9.90401290212795)",
  count: 59
}
```

### 约束与验证 { #webapi_event_analytics_constraints } 

您可以提供给
事件分析资源。如果违反任何约束，API 将
返回一个 *409 Conflict* 响应和一个类似于下面的响应消息：

```json
{
  "httpStatus": "Conflict",
  "httpStatusCode": 409,
  "status": "ERROR",
  "message": "At least one organisation unit must be specified",
  "errorCode": "E7200"
}
```

描述了事件分析 API 的可能验证错误
在下表中。

| 错误代码 | 信息 |
| ---------- | ------- |
| E7200      | 必须至少指定一个组织单位 |
| E7201      | 尺寸不能多次指定 |
| E7202      | 不能多次指定查询项 |
| E7203      | 值维也不能指定为项目或项目过滤器 |
| E7204      | 指定聚合类型时，必须指定值维或聚合数据 |
| E7205      | 必须指定开始和结束日期或至少一个期间 |
| E7206      | 开始日期晚于结束日期 |
| E7207      | 页码必须为正数 |
| E7208      | 页面大小必须为零或正数 |
| E7209      | 限制大于最大限制 |
| E7210      | 时间字段无效 |
| E7211      | 组织单位字段无效 |
| E7212      | 群集大小必须为正数 |
| E7213      | Bbox无效，必须采用以下格式：'min-lng，min-lat，max-lng，max-lat' |
| E7214      | 当指定bbox或集群大小时，必须指定集群字段 |
| E7215      | 查询项目不能同时指定图例集和选项集 |
| E7216      | 在汇总查询中使用时，查询项必须是可汇总的 |
| E7217      | 不允许用户查看事件分析数据 |
| E7218      | 未启用空间数据库支持 |
| E7219      | 数据元素必须是值类型坐标才能用作坐标字段 |
| E7220      | 属性必须是坐标值类型，才能用作坐标域 |
| E7221      | 座标栏位无效 |
| E7222      | 查询项目或过滤器无效 |
| E7223      | 值不引用数字元素或程序一部分的数据元素或属性 |
| E7224      | 项目标识符未引用程序的任何数据元素，属性或指标部分 |
| E7225      | 计划阶段对于注册分析查询中的数据元素维度是必需的 |
| E7226      | 维度不是有效的查询项目 |
| E7227      | 不支持关系实体类型 |
| E7228      | 回退坐标字段无效 |
| E7229      | 操作符不允许缺失值 |

## 入学分析 { #webapi_enrollment_analytics } 

注册分析 API 允许您访问聚合事件数据并查询*注册及其在 DHIS2 中捕获的事件数据*。除了跟踪的实体属性之外，此资源还允许您根据程序阶段和数据元素检索程序的数据。在每个注册中查询特定程序阶段的事件数据时，每个程序阶段的数据元素值将作为来自 api 的响应中的一行返回。如果在可重复的程序阶段查询数据元素，则最新的数据元素值将用于 api 响应中的该数据元素。

### 尺寸和项目 { #webapi_enrollment_analytics_dimensions } 

注册维度包括数据元素，属性，组织单位和期间。查询分析资源将仅返回符合一组条件的注册，并且不执行任何汇总。



表：招生规模

| 尺寸 | 尺寸 ID | 描述 |
|---|---|---|
| 计划阶段的数据要素 | <program stage id\>.<data element id\> | 在查询注册数据时，数据元素标识符必须包括计划阶段。 dimension=edqlbukwRfQ.vANAXwtLwcT |
| 属性 | <id\> | 属性标识符 |
| 句号 | 聚乙烯 | ISO 期间和相对期间，请参见 "日期和期间格式" |
| 组织单位 | 欧 | 组织单位标识符和关键词 USER_ORGUNIT、USER_ORGUNIT_CHILDREN、USER_ORGUNIT_GRANDCHILDREN、LEVEL-<level\> 和 OU_GROUP-<group-id\> |

#### 可重复阶段{ #repeatable-stages } 

数据元素标识符必须包括计划阶段。程序阶段可以重复。例如，维度 edqlbukwRfQ.vANAXwtLwcT 可指可重复的程序阶段。可通过索引参数（用 [ ]括起来）访问该阶段的数据元素。

表：可重复阶段的可能索引

| 尺寸                                  | 索引参数             | 数据元素值是指                                                                |
|--------------------------------------------|------------------------------|--------------------------------------------------------------------------------------------|
| edqlbukwRfQ.vANAXwtLwcT                    | 不适用                          | 最后执行日期                                                                        |
| edqlbukwRfQ[0].vANAXwtLwcT                 | 0                            | 最后执行日期                                                                        |
| dqlbukwRfQ[-2].vANAXwtLwcT                 | -2                           | 从最后执行日算起的第二年                                                            |
| dqlbukwRfQ[1].vANAXwtLwcT                  | 1                            | 首次执行日期                                                                       |
| dqlbukwRfQ[3].vANAXwtLwcT                  | 3                            | 第三个执行日                                                                       |
| edqlbukwRfQ[*].vANAXwtLwcT                 | *                            | 所有重复                                                                            |
| edqlbukwRfQ[-1~3].vANAXwtLwcT              | -1, 3                        | 从 -1 开始重复 3 次（最后执行日期后的第一次）                           |
| edqlbukwRfQ[0~5~LAST_3_MONTHS ].vANAXwtLwcT | 0, 5, last_3_months          | 从最后一次执行日期开始，到最近 3 个月内的第五次执行日期，重复 5 次 |
| edqlbukwRfQ[-1~3~2021-01-01~2022-05-31].vANAXwtLwcT            | -1, 3, 2021-01-01,2022-05-31 | 在指定日期内以 -1 开始的 3 次重复（最后一次执行日期后的第一次）。                                     |

警告：对不可重复的程序阶段进行索引会导致参数验证错误。

### 注册查询分析 { #webapi_enrollment_query_analytics } 

通过 `analytics/enrollments/query` 资源，您可以查询捕获的注册信息。该资源不执行任何聚合，而是让您查询和筛选注册信息。

    /api/analytics/enrollments/query

您可以在查询中指定任意数量的维度和任意数量的过滤器。维项目标识符可以引用程序阶段，已跟踪实体属性，固定和相对期间以及组织单位中的任何数据元素。维度可以选择具有查询运算符和过滤器。注册查询应采用以下所述的格式。

    /api/analytics/enrollments/query/<program-id>?startDate=yyyy-MM-dd&endDate=yyyy-MM-dd
      &dimension=ou:<ou-id>;<ou-id>&dimension=<item-id>&dimension=<item-id>:<operator> ：<filter>

例如，要从2019年1月起从“产前护理”计划中检索入学申请，该计划从属性中提取“名字”，则在第一个计划阶段包括“慢性病”和“吸烟”数据元素，并且来自以下程序阶段的“血红蛋白值”，并且仅包括具有“疯子病”的女性，您可以使用以下查询：

    /api/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=ou:ImspTQPwCqd
      &dimension=w75KJ2mc4zz&dimension=WZbXY0S00lP.de0FEHSIoxh:eq:1&dimension=w75KJ2mc4zz
      &dimension=WZbXY0S00lP.sWoqcoByYmD&dimension=edqlbukwRfQ.vANAXwtLwcT
      &startDate=2019-01-01&endDate=2019-01-31

要从上个月（相对于执行查询的时间点）的“产前护理”程序中检索入学登记，其中“慢性病”和“吸烟”数据元素包含在第一程序阶段，而“后续计划阶段的“血红蛋白价值”，仅包括吸烟的血红蛋白少于20岁的女性：

    /api/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=ou:ImspTQPwCqd
      &dimension=WZbXY0S00lP.de0FEHSIoxh&dimension=w75KJ2mc4zz
      &dimension=WZbXY0S00lP.sWoqcoByYmD:eq:1&dimension=edqlbukwRfQ.vANAXwtLwcT:lt:20
      &dimension=pe:LAST_MONTH

可以将排序应用于注册的查询和注册的事件日期：

    /api/analytics/enrollments/query/WSGAb5XwJ3Y.xls?dimension=ou:ImspTQPwCqd
      &columns=w75KJ2mc4zz&dimension=WZbXY0S00lP.sWoqcoByYmD&dimension=pe:LAST_MONTH
      &stage=WZbXY0S00lP&pageSize=10&page=1&asc=ENROLLMENTDATE&ouMode=DESCENDANTS

通过指定页码和页面大小参数，可以将分页应用于查询。如果指定了页码，但未指定页码，则将使用50页码。如果指定了页面大小，但未指定页面号，则将使用页面号1。要获得页面大小为10的响应的第二页，可以使用如下查询：

    /api/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=ou:ImspTQPwCqd
      &dimension=WZbXY0S00lP.de0FEHSIoxh&dimension=w75KJ2mc4zz&dimension=pe:LAST_MONTH
      &dimension=WZbXY0S00lP.sWoqcoByYmD&pageSize=10&page=2

#### 筛选 { #filtering } 

过滤器可以应用于数据元素，人员属性和人员标识符。过滤是通过以下格式的查询参数值完成的：

    ＆dimension = <item-id>：<operator>：<filter-value>

例如，您可以过滤“ Weight”数据元素以获取大于2000且小于4000的值，如下所示：

    ＆dimension = WZbXY0S00lP.UXz7xuGCEhU：GT：2000＆dimension = WZbXY0S00lP.UXz7xuGCEhU：LT：4000

您可以使用IN运算符过滤多个特定年龄的“年龄”属性，如下所示：

    ＆dimension = qrur9Dvnyt5：IN：18; 19; 20

您可以通过重复运算符和过滤器组件为给定项目指定多个过滤器，所有组件均用分号分隔：

    ＆dimension = qrur9Dvnyt5：GT：5：LT：15

#### 时间字段过滤{ #time-field-filtering } 

By default, the `query` endpoints filter periods based on `enrollmentDate`.
However, it is possible to filter entries based on `lastUpdated` instead, by using the `timeField` query parameter.

    &timeField=LAST_UPDATED

##### NV 关键字{ #nv-keyword } 
可以使用特殊关键字 `NV` 来过滤 `null` 值

按年龄筛选为空

    &dimension=qrur9Dvnyt5:EQ:NV

筛选条件：年龄不为空

    &dimension=qrur9Dvnyt5:NE:NV

按年龄筛选 18 岁、19 岁或为空

    &dimension=qrur9Dvnyt5:IN:18;19;NV

`NV` can be used with `EQ`, `NE` and `IN` operators

##### 操作员{ #operators } 

下面列出了可用的运算符。

表格筛选操作符

| 操作员 | 描述 |
|---|---|
| EQ | 等于 |
| GT | 大于 |
| 通用电器 | 大于或等于 |
| LT | 小于 |
| LE | 小于或等于 |
| NE | 不等于 |
| 喜欢 | 喜欢（自由文本匹配） |
| IN | 等于用"; "分隔的多个值之一 |

### 请求查询参数 { #webapi_enrollment_analytics_query_parameters } 

借助Analytics（分析）注册查询API，您可以指定一系列查询参数。



表格注册查询终端的查询参数

| 查询参数 | 需要 | 描述 | 选项（默认为默认） |
|---|---|---|---|
| 程序 | 是的 | 计划标识符。 | 任何程序标识符 |
| 开始日期 | 不 | 注册开始日期。 | 日期（yyyy-MM-dd 格式 |
| 结束日期 | 不 | 注册结束日期。 | 日期（yyyy-MM-dd 格式 |
| 维度 | 是的 | 维度标识符包括数据元素、属性、程序指标、期间、组织单元和组织单元组集。参数可以重复任意次数。项目过滤器可以应用于维度的格式<item-id\>:<operator\>:<filter\>。过滤器值不区分大小写。 | 操作符可以是 EQ | GT | GE | LT | LE | NE | LIKE | IN |
| 过滤 | 不 | 维度标识符包括数据元素、属性、期间、组织单位和组织单位组集。参数可以重复任意次数。项目过滤器可以应用于维度，格式为<item-id\>:<operator\>:<filter\>。过滤器值不区分大小写。 ||
| 程序状态 | 不 | 指定要包括的注册状态。 | 激活 | 完成 | 取消 |
| 相对周期日期 | 字符串 | 不 | 日期标识符，例如："2016-01-01"。覆盖相对时间段的开始日期 |
| ouMode | 不 | 选择组织单位的模式。默认值为 DESCENDANTS，指层次结构中的所有子单位。CHILDREN 指层次结构中的直接子单位；SELECTED 仅指选定的组织单位。更多详情[此处](#webapi_tracker_orgunit_scope) | 后裔、子女、选定 |
| 升 | 不 | 尺寸以升序排序，可参考注册日期、事件日期、组织单位名称和代码。 | | `ouname` | `programstatus` | `createdbydisplayname` | `lastupdatedbydisplayname` | `enrollmentdate` | `incidentdate` | `lastupdated` | 项目标识符 |
| 描述 | 不 | 以降序排序的维度，可参考注册日期、事件发生日期、组织单位名称和代码。 | | `ouname` | `programstatus` | `createdbydisplayname` | `lastupdatedbydisplayname` | `enrollmentdate` | `incidentdate` | `lastupdated` | 项目标识符 |
| 仅坐标 | 不 | 是否只返回有坐标的注册信息。 | 假 | 真 |
| 标头 | 不 | 作为响应的一部分返回的标头的名称。 | 用逗号分隔的一个或多个标头名称 |
| 页码 | 不 | 页码。默认页码为 1。 | 数字正值 |
| 页面大小 | 不 | 页面大小。默认大小为每页 50 个项目。 | 数字零值或正值 |
| timeField | 不 | 时间字段，用于对注册数据进行汇总/查询。仅适用于注册数据项。可以是预定义选项，也可以是具有基于时间的值类型的属性或数据元素的 ID。对于"/analytics/enrollments/"端点，默认 "timeField "为 ENROLLMENT_DATE。 | enrollment_date | last_updated |<Attribute ID\> |<Data element ID\> |

#### 回应格式 { #response-formats } 

默认的响应表示格式是 JSON。请求必须使用 HTTP *GET* 方法。支持以下响应格式。

  - json（应用程序/ json）
  - xml（应用程序/ xml）
  - xls（application / vnd.ms-excel）
  - csv（应用程序/ csv）
  - html（text / html）
  - html + css（text / html）

例如，要获得Excel格式的响应，可以在请求URL中使用文件扩展名，如下所示：

    /api/analytics/enrollments/query/WSGAb5XwJ3Y.xls?dimension=ou:ImspTQPwCqd
      &dimension=WZbXY0S00lP.de0FEHSIoxh&columns=w75KJ2mc4zz
      &dimension=WZbXY0S00lP.sWoqcoByYmD&dimension=pe:LAST_MONTH&stage=WZbXY0S00lP
      &pageSize=10&page=1&asc=ENROLLMENTDATE&ouMode=DESCENDANTS

默认响应JSON格式将类似于以下内容：

```json
{
  "headers": [
    {
      "name": "pi",
      "column": "Enrollment",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "tei",
      "column": "Tracked entity instance",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "enrollmentdate",
      "column": "Enrollment date",
      "valueType": "DATE",
      "type": "java.util.Date",
      "hidden": false,
      "meta": true
    },
    {
      "name": "incidentdate",
      "column": "Incident date",
      "valueType": "DATE",
      "type": "java.util.Date",
      "hidden": false,
      "meta": true
    },
    {
      "name": "storedby",
      "column": "Stored by",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "lastupdated",
      "column": "Last Updated",
      "valueType": "DATE",
      "type": "java.time.LocalDate",
      "hidden": false,
      "meta": true
    },
    {
      "name": "storedby",
      "column": "Stored by",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "createdbydisplayname",
      "column": "Created by (display name)",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "lastupdatedbydisplayname",
      "column": "Last updated by (display name)",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "geometry",
      "column": "Geometry",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "longitude",
      "column": "Longitude",
      "valueType": "NUMBER",
      "type": "java.lang.Double",
      "hidden": false,
      "meta": true
    },
    {
      "name": "latitude",
      "column": "Latitude",
      "valueType": "NUMBER",
      "type": "java.lang.Double",
      "hidden": false,
      "meta": true
    },
    {
      "name": "ouname",
      "column": "Organisation unit name",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "oucode",
      "column": "Organisation unit code",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "ou",
      "column": "Organisation unit",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "de0FEHSIoxh",
      "column": "WHOMCH Chronic conditions",
      "valueType": "BOOLEAN",
      "type": "java.lang.Boolean",
      "hidden": false,
      "meta": true
    },
    {
      "name": "sWoqcoByYmD",
      "column": "WHOMCH Smoking",
      "valueType": "BOOLEAN",
      "type": "java.lang.Boolean",
      "hidden": false,
      "meta": true
    }
  ],
  "metaData": {
    "pager": {
      "page": 2,
      "total": 163,
      "pageSize": 4,
      "pageCount": 41
    },
    "items": {
      "ImspTQPwCqd": {
        "name": "Sierra Leone"
      },
      "PFDfvmGpsR3": {
        "name": "Care at birth"
      },
      "bbKtnxRZKEP": {
        "name": "Postpartum care visit"
      },
      "ou": {
        "name": "Organisation unit"
      },
      "PUZaKR0Jh2k": {
        "name": "Previous deliveries"
      },
      "edqlbukwRfQ": {
        "name": "Antenatal care visit"
      },
      "WZbXY0S00lP": {
        "name": "First antenatal care visit"
      },
      "sWoqcoByYmD": {
        "name": "WHOMCH Smoking"
      },
      "WSGAb5XwJ3Y": {
        "name": "WHO RMNCH Tracker"
      },
      "de0FEHSIoxh": {
        "name": "WHOMCH Chronic conditions"
      }
    },
    "dimensions": {
      "pe": [],
      "ou": [
        "ImspTQPwCqd"
      ],
      "sWoqcoByYmD": [],
      "de0FEHSIoxh": []
    }
  },
  "width": 12,
  "rows": [
    [
      "A0cP533hIQv",
      "to8G9jAprnx",
      "2019-02-02 12:05:00.0",
      "2019-02-02 12:05:00.0",
      "system",
      "2020-08-06 21:20:52.0",
      "",
      "0.0",
      "0.0",
      "Tonkomba MCHP",
      "OU_193264",
      "xIMxph4NMP1",
      "0",
      "1"
    ],
    [
      "ZqiUn2uXmBi",
      "SJtv0WzoYki",
      "2019-02-02 12:05:00.0",
      "2019-02-02 12:05:00.0",
      "system",
      "2020-08-06 21:20:52.0",
      "",
      "0.0",
      "0.0",
      "Mawoma MCHP",
      "OU_254973",
      "Srnpwq8jKbp",
      "0",
      "0"
    ],
    [
      "lE747mUAtbz",
      "PGzTv2A1xzn",
      "2019-02-02 12:05:00.0",
      "2019-02-02 12:05:00.0",
      "system",
      "2020-08-06 21:20:52.0",
      "",
      "0.0",
      "0.0",
      "Kunsho CHP",
      "OU_193254",
      "tdhB1JXYBx2",
      "",
      "0"
    ],
    [
      "nmcqu9QF8ow",
      "pav3tGLjYuq",
      "2019-02-03 12:05:00.0",
      "2019-02-03 12:05:00.0",
      "system",
      "2020-08-06 21:20:52.0",
      "",
      "0.0",
      "0.0",
      "Korbu MCHP",
      "OU_678893",
      "m73lWmo5BDG",
      "",
      "1"
    ]
  ],
  "height": 4
}
```

响应的 *headers* 部分描述了查询结果的内容。注册唯一标识符、被跟踪实体实例标识符、注册日期、事件日期、几何形状、纬度、经度、组织单位名称和组织单位代码作为响应中的第一个维度出现并且将始终存在。接下来是数据元素和在请求中指定为维度的跟踪实体属性，在本例中为“WHOMCH 慢性条件”和“WHOMCH 吸烟”数据元素维度。标题部分在“名称”属性中包含维度项的标识符，在“列”属性中包含可读的维度描述。

*metaData* 部分，*ou* 对象包含映射到表示层次结构的字符串的响应中存在的所有组织单位的标识符。此层次结构字符串从根开始列出组织单位的祖先（父）的标识符。 *names* 对象包含响应中映射到其名称的所有项目的标识符。

*rows* 部分包含查询生成的注册。每一行正好代表一个注册。

### 使用计划指标{ #analytics-across-tei-relationships-with-program-indicators }进行TEI关系分析 { #analytics-across-tei-relationships-with-program-indicators } 

非汇总注册分析API还支持将程序指示器链接到关系类型，以显示应用于所列出的跟踪实体实例的相关实体的特定程序指示器的计算结果。

![](resources/images/enrollments/enrollments-pi-relationship.jpg)

要使计划指标/关系类型链接正常工作，`/api/analytics/enrollments/query` API 需要一个附加维度，其中必须包括所选关系类型 UID 和所选计划指标 UID：

    /api/analytics/enrollments/query/ ?dimension=  .<program-id>
      dimension=<relationshiptype-id>.<programindicator-id>

例如，要从“ WHO RMNCH Tracker”程序中检索2019年1月的注册列表，并按“与人相关的疟疾病例”类型的关系显示与该注册相关的疟疾病例数，则可以使用以下查询

    /api/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=mxZDvSZYxlw.nFICjJluo74
      &startDate=2019-01-01&endDate=2019-01-31    

API 支持使用与“主”程序（即在`/query/` 之后指定的程序 ID）无关的程序指示符。

## 跟踪实体分析{ #webapi_te_analytics } 

跟踪实体（TE）分析 API 允许查询 *TE 及其在 DHIS2 中捕获的注册和事件数据*。 
该资源可针对给定的跟踪实体类型，从 TE、注册人数、事件和跨多个计划的数据元素中检索数据。

### 尺寸和项目{ #webapi_te_analytics_dimensions } 

跟踪实体实例维度包括程序属性（TE 属性）、数据元素、 
组织单位和不同种类的期间。分析查询只会返回与一组标准相匹配的 TE。
它不会执行任何聚合。

表格TE 尺寸

| 尺寸                          | 尺寸 ID                                                | 描述 |
|------------------------------------|-------------------------------------------------------------|---|
| 程序属性（TE 属性） | `<attribute id>`                                            | 程序属性的标识符。
| 计划阶段的数据要素    | `<program id>.<program stage id>[offset].<data element id>` | 数据元素标识符必须包括程序和程序阶段，即：`dimension=IpHINAT79UW.ZzYYXq4fJie.GQY2lXrypjO`。 |
| 句号                            | N.A.                                                        | 没有对 `period` 维度的直接支持。周期通过几个不同的特定参数来支持。请参阅下面的*周期*部分。 |
| TEI 组织单位             | `ou`                                                        | 组织单位标识符，以及关键字 USER_ORGUNIT、USER_ORGUNIT_CHILDREN、USER_ORGUNIT_GRANDCHILDREN、LEVEL-<level\> 和 OU_GROUP-<group-id\> 。 |
| 招生组织单位      | `<program id>.ou`                                           | 组织单位标识符，以及关键字 USER_ORGUNIT、USER_ORGUNIT_CHILDREN、USER_ORGUNIT_GRANDCHILDREN、LEVEL-<level\> 和 OU_GROUP-<group-id\> 。 |
| 活动组织单位           | `<program id><program stage id> .ou`                         | 组织单位标识符，以及关键字 USER_ORGUNIT、USER_ORGUNIT_CHILDREN、USER_ORGUNIT_GRANDCHILDREN、LEVEL-<level\> 和 OU_GROUP-<group-id\> 。 |

#### 偏移{ #offset } 

在可重复事件中引用项目的标注可以包含一个可选的偏移量。
偏移量用于指定使用事件的哪一次重复。
重复的顺序以发生日期为基础，最近的事件为最近的重复。
偏移量是一个整数值，0 表示最后一次重复，-1 表示倒数第二次重复，以此类推。
正值指第一次（最旧）重复、第二次重复，以此类推。
偏移量用方括号 [ ]括起来。

例：

    IpHINAT79UW.ZzYYXq4fJie.GQY2lXrypjO -- 指最后一次重复
    IpHINAT79UW.ZzYYXq4fJie[-1].GQY2lXrypjO -- 指倒数第二次重复
    IpHINAT79UW.ZzYYXq4fJie[2].GQY2lXrypjO -- 指第二次重复 

### 跟踪实体 (TE) 查询分析{ #webapi_te_query_analytics } 

The *analytics/trackedEntities/query* endpoint provides queries for captured TEs, allowing querying and filtering for information related to TEs, along with their respective enrollments and events. It does not perform any aggregation.

    /api/41/analytics/trackedEntities/query

您可以在查询中指定任意数量的维度和任意数量的筛选器。维度项目标识符可以指计划阶段、计划属性、跟踪实体属性、固定和相对期间以及组织单位中的任何数据元素。维度可以选择查询操作符和过滤器。TEs 查询应采用下述格式。

    /api/41/analytics/trackedEntities/query/<tracked-entity-type-id>?dimension=ou:<ou-id>;<ou-id>&
        dimension=<item-id>&dimension=<item-id>:<operator> ：<filter>

For example, to retrieve TEs of type `Person` from the "Child Program" and "Antenatal care" programs, where the "First name" is "James":

    /api/41/analytics/trackedEntities/query/nEenWmSyUEp?program=IpHINAT79UW,WSGAb5XwJ3Y&dimension=IpHINAT79UW.w75KJ2mc4zz:eq:James

可通过指定页码和页面大小参数对查询进行分页。如果指定了页码但未指定页面大小，将使用 50 的页面大小。如果指定了页面大小，但未指定页码，则将使用页码 1。要获取页面大小为 10 的第二页响应，可以使用如下查询：

    /api/41/analytics/trackedEntities/query/nEenWmSyUEp?program=IpHINAT79UW,WSGAb5XwJ3Y&dimension=IpHINAT79UW.w75KJ2mc4zz:eq:James
        &pageSize=10&page=2

#### 筛选 { #filtering } 

过滤器可应用于数据元素、跟踪实体属性和跟踪实体标识符。过滤是通过以下格式的查询参数完成的：

    ＆dimension = <item-id>：<operator>：<filter-value>

例如，您可以过滤计划 "儿童计划 "和计划阶段 "产后婴儿 "的 "母婴保健婴儿体重（克）" 数据元素，查找大于 2000 和小于 4000 的值。过滤器的定义如下

    &dimension=IpHINAT79UW.ZzYYXq4fJie.GQY2lXrypjO:GT:2000&dimension=IpHINAT79UW.ZzYYXq4fJie.GQY2lXrypjO:LT:4000

#### 时期{ #periods } 

与注册和事件查询端点不同，TE 端点支持多种方法来指定数据所属的时间段。如下所示，它们基于不同的 *date* 参数：

| 参数      | 描述                                                                      | 
|----------------|----------------------------------------------------------------------------------|
| 事件日期      | 将根据事件发生日期过滤 TE。                       |
| 注册日期 | TE 将根据注册日期进行筛选。                            |
| 预定日期  | TE 将根据事件的计划日期进行筛选。                  |
| 事件日期   | TE 将根据注册的事件日期进行筛选。                        |
| 最后更新    | TE 将根据 TE/注册/事件的最后更新日期进行筛选。 |
| 创建        | TE 将根据 TE/注册/事件的创建日期进行筛选。      |

上面提到的某些时段可应用于跟踪实体、注册或事件，具体取决于它们的表达方式。

例子：

* 过滤去年更新的 TE：

`lastUpdated=LAST_YEAR`

* 筛选去年更新了 "儿童计划 "最新注册信息的 TE：

`lastUpdated=IpHINAT79UW.LAST_YEAR`

* 筛选在 "产后婴儿 "计划阶段、在 "儿童计划 "计划的最新注册中最近一次活动在过去一年中已更新的 TE：

`lastUpdated=IpHINAT79UW.ZzYYXq4fJie.LAST_YEAR`

* 筛选最近一年参加 "儿童计划 "的 TE：

`enrollmentDate=IpHINAT79UW.LAST_YEAR`

### 请求查询参数{ #webapi_te_analytics_query_parameters } 

分析 TE 查询 API 支持一系列查询参数。

表格TE 查询端点的查询参数

| 查询参数         | 需要 | 描述                                                                                                                                                                                                                                                                                                                                                               | 选项（默认为默认）                                                                                                                                                                              |
|-------------------------|----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| trackedEntityType       | 是的      | 跟踪实体类型标识符。                                                                                                                                                                                                                                                                                                                                           | 任何被跟踪的实体类型标识符。                                                                                                                                                                  |
| 程序                 | 不       | 程序标识符。                                                                                                                                                                                                                                                                                                                                                      | 任何程序标识符。接受多个逗号分隔的标识符。                                                                                                                                |
| 维度               | 不       | 维度标识符，包括数据元素、属性、计划指标、期间、组织单位和组织单位组集。该参数可指定多次。维度筛选器可应用于格式为<dimension-id\>:<operator\>:<filter-value\> 的维度。筛选值可以不区分大小写（取决于操作符）。 | 支持的运算符：eq | ieq | gt | ge | lt | le | ne | like | ilike | in                                                                              |
| 过滤                  | 不       | 维度标识符，包括数据元素、属性、期间、组织单位和组织单位组集。该参数可指定多次。维度筛选器可应用于格式为<dimension-id\>:<operator\>:<filter-value\> 的维度。筛选值可以不区分大小写（取决于操作符）。                     | 支持的运算符：eq | ieq | gt | ge | lt | le | ne | like | ilike | in                                                                              |
| 标头                 | 不       | 作为响应的一部分返回的标头的名称。                                                                                                                                                                                                                                                                                                           | 一个或多个标头名称（用逗号分隔）。                                                                                                                                                     |
| 相对周期日期      | 不       | 覆盖起始日期，因此相对时段将使用此日期作为起始日期。                                                                                                                                                                                                                                                                                    | 例如"2016-01-01"                                                                                                                                                                                |
| ouMode                  | 不       | 组织单位的选择模式。默认值为 DESCENDANTS，即层次结构中的所有子单位。子女（CHILDREN）指层次结构中的直系子女；选定（SELECTED）仅指选定的组织单位。                                                                                                                                     | 后裔、子女、选定                                                                                                                                                                      |
| 升                     | 不       | 尺寸以升序排序。可参考注册日期、事件日期、组织单位名称和代码。                                                                                                                                                                                                                                                              | `ouname` | `programstatus` | `createdbydisplayname` | `lastupdatedbydisplayname` | `enrollmentdate` | `incidentdate` | `lastupdated` | `<dimension identifier>`   |
| 描述                    | 不       | 按降序排序的维度，可参考注册日期、事件日期、组织单位名称和代码。                                                                                                                                                                                                                                                              | `ouname` | `programstatus` | `createdbydisplayname` | `lastupdatedbydisplayname` | `enrollmentdate` | `incidentdate` | `lastupdated` | `<dimension identifier>`   |
| 页码                    | 不       | 页码。默认值为 1。                                                                                                                                                                                                                                                                                                                                  | 正数值。                                                                                                                                                                              |
| 页面大小                | 不       | 页面大小。默认值为 50（即每页 50 个项目）。                                                                                                                                                                                                                                                                                                   | 数字零值或正值。                                                                                                                                                                      |
| 显示属性         | 不       | 显示元数据的属性。                                                                                                                                                                                                                                                                                                                                         | 姓名 | 简称                                                                                                                                                                                |
| includeMetadataDetails  | 不       | 在原始数据回复中包含元数据详情。                                                                                                                                                                                                                                                                                                                            | 假 | 真                                                                                                                                                                                    |
| 输出标识主题          | 不       | 用于查询响应中元数据项的标识符方案。它可接受标识符、代码或属性。                                                                                                                                                                                                                                                            | uid | uuid | 代码 | 名称 | 属性：<ID\>                                                                                                                                       |
| dataIdScheme            | 不       | 用于数据的 id 方案，更具体地说是用于有选项集或图例集的数据元素和属性的 id 方案，例如，在数据响应中返回选项名称而不是代码，或返回图例名称而不是图例 ID。                                                                                                                    | 名称 | 代码 | uid                                                                                                                                                                          |
| 程序状态           | 不       | 指定要包含的事件的注册状态。*已删除，首选 `enrollmentStatus`*                                                                                                                                                                                                                                                                                   | 活动 | 已完成 | 已取消。可以逗号分隔（*仅用于查询*）。                                                                                                                 |
| 注册状态        | 不       | 指定要包含的事件的注册状态。                                                                                                                                                                                                                                                                                                                           | 活动 | 已完成 | 已取消。可以逗号分隔（*仅用于查询*）。                                                                                                                 |
| 事件状态             | 不       | 指定要包含的事件状态。                                                                                                                                                                                                                                                                                                                                  | 活动 | 已完成 | 计划 | 逾期 | 跳过。可以逗号分隔（*仅用于查询*）。                                                                                    |
| 仅坐标         | 不       | 是否只返回有坐标的事件。                                                                                                                                                                                                                                                                                                                      | 假 | 真                                                                                                                                                                                    |
| 仅几何            | 不       | 是否只返回有几何图形的事件。                                                                                                                                                                                                                                                                                                                       | 假 | 真                                                                                                                                                                                    |
| 用户机构单位             | 不       | 用户组织单位标识符。                                                                                                                                                                                                                                                                                                                                        | 任何组织单位标识符。                                                                                                                                                                    | 
| skipMeta                | 不       | 跳过响应中的元数据。                                                                                                                                                                                                                                                                                                                                            | 假 | 真                                                                                                                                                                                    |
| 跳过数据                | 不       | 跳过响应中的数据。                                                                                                                                                                                                                                                                                                                                                | 假 | 真                                                                                                                                                                                    |
| 跳读            | 不       | 跳过数据值的四舍五入。                                                                                                                                                                                                                                                                                                                                             | 假 | 真                                                                                                                                                                                    |
| skipHeaders             | 不       | 跳过响应中的标题。                                                                                                                                                                                                                                                                                                                                             | 假 | 真                                                                                                                                                                                    |
| 总页数              | 不       | 包括答复的总页数。                                                                                                                                                                                                                                                                                                                        | 假 | 真                                                                                                                                                                                    |
| 显示属性         | 不       | 显示元数据的属性。                                                                                                                                                                                                                                                                                                                                         | 姓名 | 简称                                                                                                                                                                                |

## 尺寸{ #webapi_dimensions }

五种资源可轻松检索数据维度：

- [事件查询数据维度](#webapi_event_query_analytics_dimension)`/analytics/events/query/dimensions`) 
- [Event Aggregate data dimensions](#webapi_event_aggregate_analytics_dimension) `/analytics/events/aggregate/dimensions`
- [Enrollment Query data dimensions](#webapi_enrollment_query_analytics_dimension) `/analytics/enrollments/query/dimensions`
- [注册汇总数据维度](#webapi_enrollment_aggregate_analytics_dimension) `/analytics/enrollments/aggregate/dimensions`)
- [跟踪实体查询数据维度](#webapi_teis_query_analytics_dimensions)) `/analytics/teis/query/dimensions`

上述资源共用以下请求参数：

| 查询参数 | 所需                                         | 描述                                                                                       | 选项                                                                                                                                              |
|-----------------|--------------------------------------------------|---------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------|
| 过滤          | 没有                                               | Allows field value filtering on the format: <br/> `filter=field:OP:value&filter=field:OP:value&...` | 请参阅 [维度筛选器部分](#webapi_analytics_dimension_filters)。                                                                                |
| 领域          | 没有                                               | 允许过滤字段                                                  |
| 页码            | 没有 | 页码                                                                                       | 默认为 1（第一页）                                                                                                                           |
| 页面大小        | 没有 | 页面大小                                                                                         | 默认为每页 50 个元素                                                                                                                     |
| 分页          | 没有 | Disables pagination when `false`                                                                  | `true` or `false`, defaults to `true`                                                                                                                |
| 订单           | 没有 | Allows sorting on the format: `order=field:direction`                                                                   | Sortable fields: `created` (default), `lastUpdated`, `code`, `uid`, `id`, `name`, `displayName`, `dimensionType`<br/><br/> Direction can be `ASC` (default) or `DESC` |

#### 尺寸过滤器{ #webapi_analytics_dimension_filters }

维度端点支持过滤输出，以便将响应范围缩小到所需元素。
过滤器的格式为`filter=field:op:value&filter=field:op:value&...&filter=field:op:value`。

Supported `field` values are:

- **id**/**uid** - 维度 ID
- **代码** - 尺寸代码
- **valueType** - 尺寸值类型
- **名称** -标度的名称
- **维度类型** - 维度的类型 
    - `DATA_ELEMENT`
    - `PROGRAM_INDICATOR`
    - `PROGRAM_ATTRIBUTE`
    - `CATEGORY`
    - `CATEGORY_OPTION_GROUP_SET`
- **显示名称** -标注的显示名称
- **显示短名** - 标注的显示短名

Supported `op`values are:

- `startsWith` - 字段开始于
- `!startsWith` - field does not start with
- `endsWith` - 字段结束于
- `!endsWith` - 字段不以- 结尾。 
- `eq` - 等于
- `ieq` - 忽略等号情况
- `ne` - 不等于
- `like` - 包含
- `!like` - does not contain
- `ilike` - contains ignoring case
- `!ilike` - 不包含忽略情况

### 事件分析维度{ #event-analytics-dimensions } 
#### 事件查询分析维度{ #webapi_event_query_analytics_dimension }

资源接受 `/analytics/events/query/dimensions?programId={programId}&programStageId={programStageId}`：

- a tracker `program`
- 一个跟踪器 `programStage`
- both `program` and `programStage`

程序和程序阶段的组合是有限制的：

- If only `program` is specified, the resource returns data dimensions for each program stage in the provided program
- If only `programStage` is specified, the resource returns data dimensions for the provided `programStage`
- If both `program` and `programStage` are specified, the resource returns data dimensions for the provided `programStage` if it belongs to the provided `program`. Returns an error otherwise.

返回的数据维数为

- 与计划相关的**计划指标**（源自计划阶段 ID）
- **Data elements** of *supported types* in the program stage
- **Tracked entity attributes** of *supported types* associated with the program (derived from programStageId)
- 与程序相关联的类别组合中的**类别**（源自程序阶段 ID）
- **Category option group sets** of type `ATTRIBUTE`

除了 `IMAGE`、`FILE_RESOURCE` 和 `TRACKER_ASSOCIATE`，所有数据元素和跟踪实体属性的值类型都被视为*支持的类型*。

#### 事件汇总维度{ #webapi_event_aggregate_analytics_dimension }

The `/analytics/events/aggregate/dimensions?programStageId=...` resource accepts a mandatory `programStageId` parameter and returns the following data dimensions:

- **Data elements** of *supported types* in the program stage
- **Tracked entity attributes** of *supported types* associated with the program (derived from programStageId)
- 与程序相关联的类别组合中的**类别**（源自程序阶段 ID）
- 与节目相关联的 `ATTRIBUTE` 类型的**类别选项组集**（源自 programStageId）

如果数据元素和跟踪实体属性的值类型是以下类型之一，则视为*支持类型*：

- `NUMBER`
- `UNIT_INTERVAL`
- `PERCENTAGE`
- `INTEGER`
- `INTEGER_POSITIVE`
- `INTEGER_NEGATIVE`
- `INTEGER_ZERO_OR_POSITIVE`
- `BOOLEAN`
- `TRUE_ONLY`

### 入学分析维度{ #enrollment-analytics-dimensions } 

#### 入学查询分析维度{ #webapi_enrollment_query_analytics_dimension }

The `/analytics/enrollments/query/dimensions?programId=...` resource accepts a mandatory id of a tracker program and returns the following data dimensions:

- 与程序连接的**程序指示器**
- **Data elements** of *supported types* in the program, with program stage for each data element
- **Tracked entity attributes** of *supported types* associated with the program that are not confidential

除了 `IMAGE`、`FILE_RESOURCE` 和 `TRACKER_ASSOCIATE`，所有数据元素和跟踪实体属性的值类型都被视为*支持的类型*。

#### 入学总人数{ #webapi_enrollment_aggregate_analytics_dimension }

The `/analytics/enrollments/aggregate/dimensions?programId=...` resource accepts a mandatory id of a tracker program, referring to a program with registration, and returns the following data dimensions:

- **Data elements** of *supported types* in the program, with program stage for each data element
- **Tracked entity attributes** of *supported types* associated with the program that are not confidential

如果数据元素和跟踪实体属性的值类型是以下类型之一，则视为*支持类型*：

- `NUMBER`
- `UNIT_INTERVAL`
- `PERCENTAGE`
- `INTEGER`
- `INTEGER_POSITIVE`
- `INTEGER_NEGATIVE`
- `INTEGER_ZERO_OR_POSITIVE`
- `BOOLEAN`
- `TRUE_ONLY`

### 跟踪实体分析维度{ #tracked-entities-analytics-dimensions } 

#### 跟踪实体查询分析维度{ #webapi_teis_query_analytics_dimensions }

The `/analytics/teis/query/dimensions?trackedEntityType=TET` resource accepts a mandatory id of a tracked entity type `TET` and returns the following data dimensions:

for each program `P` associated with a tracked entity instance of type `TET`:
- **Program indicators** associated to `P`
- **Data elements** of *supported types* in `P`, with program stage for each data element
- **Tracked entity attributes** of *supported types* associated with the program that are not confidential
- **Program attributes** of `P`

除了 `IMAGE`、`FILE_RESOURCE` 和 `TRACKER_ASSOCIATE`，所有数据元素和跟踪实体属性的值类型都被视为*支持的类型*。

### 请求和答复样本{ #sample-request-and-response } 

    GET /api/analytics/teis/query/dimensions?programStageId=A03MvHHogjR&order=code&filter=name:ilike:weight

```json
{
   "page":1,
   "total":5,
   "pageSize":50,
   "dimensions":[
      {
         "dimensionType":"PROGRAM_INDICATOR",
         "created":"2015-08-06T22:49:20.128",
         "lastUpdated":"2015-08-06T22:51:19.787",
         "name":"Measles + Yellow fever doses low infant weight",
         "displayName":"Measles + Yellow fever doses low infant weight",
         "id":"tt54DiKuQ9c",
         "uid":"tt54DiKuQ9c",
         "displayShortName":"Measles + Yellow fever doses low infant weight"
      },
      {
         "dimensionType":"PROGRAM_INDICATOR",
         "created":"2017-01-20T10:32:26.388",
         "lastUpdated":"2017-01-20T10:32:26.388",
         "name":"Weight gain(in g) between birth and last postnatal",
         "displayName":"Weight gain(in g) between birth and last postnatal",
         "id":"qhTkqwAJLMv",
         "uid":"qhTkqwAJLMv",
         "displayShortName":"Weight gain(g)"
      },
      {
         "dimensionType":"PROGRAM_INDICATOR",
         "created":"2015-09-14T20:25:55.543",
         "lastUpdated":"2018-08-28T12:22:47.857",
         "name":"Average weight (g)",
         "displayName":"Average weight (g)",
         "id":"GxdhnY5wmHq",
         "uid":"GxdhnY5wmHq",
         "displayShortName":"Average weight (g)"
      },
      {
         "dimensionType":"PROGRAM_INDICATOR",
         "created":"2015-08-06T22:35:40.391",
         "lastUpdated":"2015-08-06T22:35:40.391",
         "name":"BCG doses low birth weight",
         "displayName":"BCG doses low birth weight",
         "id":"hCYU0G5Ti2T",
         "uid":"hCYU0G5Ti2T",
         "displayShortName":"BCG doses low birth weight"
      },
      {
         "valueType":"NUMBER",
         "dimensionType":"DATA_ELEMENT",
         "created":"2012-09-20T17:37:45.474",
         "lastUpdated":"2014-11-11T21:56:05.418",
         "name":"MCH Weight (g)",
         "displayName":"MCH Weight (g)",
         "id":"A03MvHHogjR.UXz7xuGCEhU",
         "uid":"UXz7xuGCEhU",
         "code":"DE_2005736",
         "displayShortName":"Weight (g)"
      }
   ]
}
```

## 组织单位分析 { #webapi_org_unit_analytics } 

组织单位分析API提供有关按组织单位组集分类的组织单位的统计信息，即组织单位组集中每个组织单位组的组织单位计数。

    GET /api/orgUnitAnalytics?ou=<org-unit-id>&ougs=<org-unit-group-set-id>

该API需要至少一个组织单位和至少一个组织单位组集。可以提供多个组织单位和组集，以分号分隔。

### 请求查询参数 { #request-query-parameters } 

组织单位分析资源使您可以指定一系列查询参数：



表格：机关单位分析查询参数

| 物业 | 描述 | 需要 |
|---|---|---|
| 欧 | Org 单位标识符，可能用分号分隔。 | 是的 |
| 奥格斯 | 机关单位组集标识符，可能用分号分隔。 | 是的 |
| 列 | Org 单位组集标识符，可能用分号分隔。定义哪些组集在表格布局中显示为列。 | 不 |

响应将包含用于父组织单位的列，用于请求的每个组织单位组集部分的列以及用于计数的列。统计信息包括组织单位的数量，该组织单位是请求中指定的组织单位的子层次结构的一部分。该响应包含一个元数据部分，该元数据部分指定由其标识符引用的响应的每个组织单位和组织单位组部分的名称。

默认响应使用单个 `count` 列进行标准化。通过使用 `columns` 查询参数指定至少一个组织单位组集，可以在表格布局中呈现响应。

### 回应格式 { #response-formats } 

组织单位分析端点支持以下表示格式：

- json（应用程序/ json）
- csv（应用程序/ csv）
- xls（application / vnd.ms-excel）
- pdf（应用程序/ pdf）

### 例子 { #examples } 

要获取组织单位和组织单位组集的组织单位分析，请执行以下操作：

    GET /api/orgUnitAnalytics?ou=lc3eMKXaEfw&ougs=J5jldMd8OHv

要获取两个组织单位和两个组织单位组集合的组织单位分析数据：

    GET /api/orgUnitAnalytics?ou=lc3eMKXaEfw;PMa2VCrupOd&ougs=J5jldMd8OHv;Bpx0589u8y0

要以表格模式获取组织单位分析数据，并将一组设置为列：

    GET / api / orgUnitAnalytics？ou = fdc6uOvgoji; jUb8gELQApl; lc3eMKXaEfw; PMa2VCrupOd
      ＆ougs = J5jldMd8OHv＆列= J5jldMd8OHv

### 约束与验证 { #constraints-and-validation } 

下表描述了专门针对组织单位分析API的可能的验证错误。为汇总分析API指定的某些错误也相关。

| 错误代码 | 信息 |
| ---------- | ------- |
| E7300      | 必须至少指定一个组织单位 |
| E7301      | 必须至少指定一个组织单位组集 |

## 数据集报告 { #webapi_data_set_report } 

可以使用 web api 生成数据集报告
`/dataSetReport` 资源。此资源生成有关数据集的报告
并以 HTML 表格的形式返回结果。

    /api/dataSetReport

### 请求查询参数 { #request-query-parameters } 

该请求支持以下参数：



表：数据集报告查询参数

| 参数 | 描述 | 类型 | 需要 |
|---|---|---|---|
| ds | 创建报告的数据集。 | 数据集 UID | 是的 |
| 聚乙烯 | 创建报告的时期。可以是逗号分隔的列表。 | ISO 字符串 | 是的 |
| 欧 | 创建报告的组织单位。 | 组织单位 UID | 是的 |
| 过滤 | 用作报告筛选器的筛选器。可重复任意次数。遵循分析 API 语法。 | 一个或多个 UID | 不 |
| 仅选定单位 | 是只使用捕获的数据，还是使用汇总数据。 | Boolean | 不 |

The data set report resource accepts `GET` requests only. The response content type is `application/json` and returns data in a grid. This endpoint works for all types of data sets, including default, section and custom forms.

检索 2018 年 10 月月度数据集和组织单位报告的请求示例如下：

    GET /api/dataSetReport?ds=BfMAe6Itzgt&pe=201810&ou=ImspTQPwCqd&selectedUnitOnly=false

检索 2018 年 10 月、11 月和 12 月的月度数据集和组织单位报告的请求示例如下：

    GET /api/dataSetReport?ds=BfMAe6Itzgt&pe=201810,201811,201812&ou=ImspTQPwCqd&selectedUnitOnly=false

要获得带有过滤器的数据集报告，可以使用`filter`参数。在这种情况下，过滤器基于一个组织单位组集和两个组织单位组：

    GET /api/dataSetReport?ds=BfMAe6Itzgt&pe=201810&ou=ImspTQPwCqd
      &filter=J5jldMd8OHv:RXL3lPSK8oG;tDZVQ1WtwpA

### 回应格式 { #response-formats } 

数据集报告端点支持以下格式的输出。您可以使用文件扩展名或 `Accept` HTTP 标头检索特定端点。

- json（应用程序/ json）
- pdf（应用程序/ pdf）
- xls（application / vnd.ms-excel）

### 自订表格 { #custom-forms } 

A dedicated endpoint is available for data sets with custom HTML forms. This endpoint returns the HTML form content with content type `text/html` with data inserted into it. Note that you can use the general data set report endpoint also for data sets with custom forms; however, that will return the report in JSON format as a grid. This endpoint only works for data sets with custom HTML forms.

    GET /api/dataSetReport/custom

否则，此端点的语法等于常规数据集报告端点。要检索自定义HTML数据集报告，您可以发出如下请求：

    GET /api/dataSetReport/custom?ds=lyLU2wR22tC&pe=201810&ou=ImspTQPwCqd


## 推送分析 { #webapi_push_analysis } 

推送分析 API 包括用于预览推送分析的端点
报告登录用户并手动触发系统
生成和发送推送分析报告，除了正常的 CRUD
操作。使用创建和更新端点进行推送时
分析，推送分析将根据
推分析的性质。删除或更新一个
禁用推送分析，作业也将停止运行
将来。

要获得现有推送分析的 HTML 预览，您可以执行 GET
请求到以下端点：

    /api/pushAnalysis/<id>/render

要手动触发推送分析作业，您可以执行 POST 请求以
这个端点：

    /api/pushAnalysis/<id>/run

推送分析包含以下属性，其中一些是
自动运行推送分析作业所需：



表格推力分析特性

| 物业 | 描述 | 类型 | 需要 |
|---|---|---|---|
| 仪表盘 | 报告所依据的仪表板 | 仪表板 UID | 是的 |
| 信息 | 出现在报告标题之后 | 串 | 不 |
| 收件人用户组 | 一组应接收报告的用户组 | 一个或多个用户组 UID | 没有收件人的预定任务将被跳过。 |
| 启用 | 表示是否应安排此推送分析。默认为假。 | Boolean | 是的。必须是真实的，才能安排。 |
| 调度频率 | 应安排报告的频率。 | "每天"、"每周"、"每月" | 不安排无频率的推送分析 |
| 调度日频率 | 应安排工作的频率日。 | 整数。频率为 "每天 "时为任意值。频率为 "周 "时为 0-7。频率为 "月 "时为 1-31 | 没有频率集有效频率日的推送分析将不会被安排。 |

## 数据使用情况分析 { #webapi_usage_analytics } 

使用情况分析 API 可让您访问有关人们使用情况的信息
使用基于数据分析的 DHIS2。当用户访问收藏夹时，
事件被记录。事件由用户名、UID 组成
最喜欢的、事件发生的时间以及事件的类型。这
表中列出了不同类型的事件。

    /api/dataStatistics

使用情况分析 API 可让您检索使用情况的汇总快照
基于时间间隔的分析。 API 捕获用户视图（对于
例如，图表或数据透视表被用户查看的次数
用户）和保存的分析收藏夹（例如收藏夹图表和
数据透视表）。 DHIS2 将捕获夜间快照，然后
应要求汇总。

### 请求查询参数 { #webapi_usage_analytics_request_query_parameters } 

使用情况分析（数据统计）API支持两种操作：

  - *POST:* 创建一个视图事件

  - *GET:* 检索汇总统计信息

### 创建视图事件（POST） { #webapi_usage_analytics_create_view_events } 

使用情况分析 API 可让您创建事件视图。这
dataStatisticsEventType 参数描述了项目的类型
看过。最喜欢的参数表示相关的标识符
最喜欢的。

创建新事件视图的 URL
    图表：

    POST /api/dataStatistics?eventType=CHART_VIEW&favorite=LW0O27b7TdD

成功的保存操作会返回 HTTP 状态代码 201。表
下面显示了支持的事件类型。


表：支持的事件类型

| 键 | 描述 |
|---|---|
| VISUALIZATION_VIEW | 可视化视图 |
| MAP_VIEW | 地图视图 (GIS) |
| EVENT_REPORT_VIEW | 事件报告视图 |
| EVENT_CHART_VIEW | 事件图表视图 |
| EVENT_VISUALIZATION_VIEW | 事件可视化视图 |
| DASHBOARD_VIEW | 仪表板视图 |
| PASSIVE_DASHBOARD_VIEW | 仪表盘视图（未明确选择仪表盘时） |
| data_set_report_view | 数据集报告视图 |

### 检索汇总的使用情况分析报告（GET） { #webapi_aggregated_usage_analytics } 

使用情况分析（数据统计）API 允许您指定特定查询
请求汇总报告时的参数。



表：综合使用分析（数据统计）的查询参数

| 查询参数 | 需要 | 描述 | 选项 |
|---|---|---|---|
| 开始日期 | 是的 | 期间开始日期 | 日期（yyyy-MM-dd 格式 |
| 结束日期 | 是的 | 期间结束日期 | 日期（yyyy-MM-dd 格式 |
| 间隙 | 是的 | 要汇总的区间类型 | 日、周、月、年 |

startDate 和 endDate 参数指定期间
将在聚合中使用快照。您必须格式化日期
如上图所示。如果在指定时间段内没有保存快照，则
空列表被送回。称为间隔的参数指定了什么
将进行聚合类型。

用于创建每月查询的 API 查询
    聚合：

    GET /api/dataStatistics?startDate=2014-01-02&endDate=2016-01-01&interval=MONTH

### 检索热门收藏夹 { #webapi_usage_analytics_top_favorites } 

使用情况分析 API 可让您检索最常用的
DHIS2，并由用户。


表格收藏夹查询参数

| 查询参数 | 需要 | 描述 | 选项 |
|---|---|---|---|
| 事件类型 | 是的 | 数据统计事件类型 | 见上表 |
| 页面大小 | 不 | 返回列表的大小 | 例如 5、10、25。默认值为 25 |
| 排序顺序 | 不 | 下降或上升 | ASC 或 DESC。默认为 DESC。 |
| 用户名 | 不 | 如果指定，响应将只包含该用户的收藏。 | 例如 "admin |

API 查询可以不用用户名，然后会找到顶部
系统的最爱。

    /api/dataStatistics/favorites?eventType=CHART_VIEW&pageSize=25&sortOrder=ASC

如果指定了用户名，则响应将仅包含该用户的最爱。

    /api/dataStatistics/favorites?eventType=CHART_VIEW&pageSize=25
      &sortOrder=ASC&username=admin

### 回应格式 { #webapi_usage_analytics_response_format } 

您可以在使用情况分析响应中返回聚合数据
几种表示格式。默认格式为 JSON。这
可用的格式和内容类型有：

  - json（应用程序/ json）

  - xml（应用程序/ xml）

  - html（text / html）

请求 XML 格式的使用情况分析响应的 API 查询
    格式：

    /api/dataStatistics.xml?startDate=2014-01-01&endDate=2016-01-01&interval=WEEK

要以 JSON 格式获取使用情况分析响应：

    /api/dataStatistics?startDate=2016-02-01&endDate=2016-02-14&interval=WEEK

JSON响应如下所示：

```json
[
  {
    "year": 2016,
    "week": 5,
    "mapViews": 2181,
    "chartViews": 2227,
    "reportTableViews": 5633,
    "eventReportViews": 6757,
    "eventChartViews": 9860,
    "eventVisualizationViews": 2387,
    "dashboardViews": 10082,
    "passiveDashboardViews": 0,
    "totalViews": 46346,
    "averageViews": 468,
    "averageMapViews": 22,
    "averageChartViews": 22,
    "averageReportTableViews": 56,
    "averageEventReportViews": 68,
    "averageEventChartViews": 99,
    "averageEventVisualizationViews": 10,
    "averageDashboardViews": 101,
    "averagePassiveDashboardViews": 0,
    "savedMaps": 1805,
    "savedCharts": 2205,
    "savedReportTables": 1995,
    "savedEventReports": 1679,
    "savedEventCharts": 1613,
    "savedEventVisualizations": 1231,
    "savedDashboards": 0,
    "savedIndicators": 1831,
    "activeUsers": 99,
    "users": 969
  },
  {
    "year": 2016,
    "week": 6,
    "mapViews": 2018,
    "chartViews": 2267,
    "reportTableViews": 4714,
    "eventReportViews": 6697,
    "eventChartViews": 9511,
    "dashboardViews": 12181,
    "passiveDashboardViews": 0,
    "totalViews": 47746,
    "averageViews": 497,
    "averageMapViews": 21,
    "averageChartViews": 23,
    "averageReportTableViews": 49,
    "averageEventReportViews": 69,
    "averageEventChartViews": 99,
    "averageDashboardViews": 126,
    "averagePassiveDashboardViews": 0,
    "savedMaps": 1643,
    "savedCharts": 1935,
    "savedReportTables": 1867,
    "savedEventReports": 1977,
    "savedEventCharts": 1714,
    "savedDashboards": 0,
    "savedIndicators": 1646,
    "activeUsers": 96,
    "users": 953
  }
]
```

Note that the number of `activeUsers` indicates the number of distinct users who had any events during the requested time period. The number of `users` represents the total number of users in the system (both enabled and disabled).

### 检索收藏的统计信息 { #webapi_usage_analytics_retrieve_favorite_statistics }

您可以使用
*收藏夹* 资源，其中 *{favorite-id}* 应替换为
感兴趣的收藏夹的标识符：

    /api/dataStatistics/favorites/{favorite-id}.json

响应将包含给定收藏的观看次数和
看起来像这样：

```json
{
  "views": 3
}
```

## 地理空间特征 { #webapi_geospatial_features } 

*geoFeatures* 资源可让您从中检索地理空间信息
DHIS2。地理空间特征与组织单位一起存储。
检索特征的语法与用于检索特征的语法相同
分析资源的组织单位维度。这是
建议在继续之前阅读分析 api 资源
阅读本节。您必须使用 GET 请求类型，并且只能使用 JSON
支持响应格式。

例如，在以下位置检索所有组织单位的地理特征
组织单位层次结构中的第 3 级，您可以使用 GET 请求
使用以下网址：

    /api/geoFeatures.json?ou=ou:LEVEL-3

检索组织单位内某个级别的地理特征
组织单位的边界（例如在第 2 级），您可以使用以下 URL：

    /api/geoFeatures.json?ou=ou:LEVEL-4;O6uvpzGd5pu

响应坐标值可从两个属性中读取，这两个属性由参数 `坐标字段` 决定。
  - The `geometry` property of the OrganisationUnit: this is the default behaviour which is applied when parameter `coordinateField` is not provided.
  - 值类型为 GeoJSON 的 OrgansationUnit 属性：API 将使用提供的 `coordinateField={attributeId}` 从该属性值中获取 GeoJSON 坐标。

例如，要检索第 3 级所有组织单位的地理特征，方法同上，但要从组织单位属性 `tJqtSV4quLb` 获取坐标

    /api/geoFeatures.json?ou=ou:LEVEL-3&coordinateField=tJqtSV4quLb

响应属性的语义描述如下
桌子。

表：地理特征响应

| 物业 | 描述 |
|---|---|
| 本我 | 组织单位/地理特征标识符 |
| na | 组织单位/地理特征名称 |
| hcd | 向下有坐标，表示是否存在一个或多个有坐标的子组织单位（在层次结构中位于下方）。 |
| hcu | 向上有坐标，表示上级组织单位是否有坐标（在层次结构中位于上层）。 |
| 勒 | 该组织单位/地理特征的级别。 |
| 页码 | 父级图，父级组织单位标识符图，直至层次结构中的根节点 |
| pi | 父标识符，该组织单位的父标识符 |
| pn | 父单位名称，该组织单位的父单位名称 |
| 类型 | 地理特征类型，1 = 点，2 = 多边形或多多边形 |
| 媾 | 该地理特征的坐标 |


### GeoJSON{ #geojson } 

要导出 GeoJSON，您只需添加 *.geosjon* 作为扩展名
端点 */api/organisationUnits*，或者您可以使用 *Accept* 标头
*应用程序/json+geojson*。

支持两个参数：`level`（默认为 1）和 `parent`（默认为根组织单位）。两者都可以多次包含。一些例子：

获得第2级和第4级的所有功能：

    /api/organisationUnits.geojson?level=2&level=4

使用边界组织单位获取级别3的所有功能：

    /api/organisationUnits.geojson?parent=fdc6uOvgoji&level=3

## 分析表挂钩 { #webapi_analytics_table_hooks } 

Analytics 表挂钩提供了一种调用 SQL 脚本的机制
在分析表生成过程的不同阶段。这
对于自定义资源和分析表中的数据很有用，例如在
以实现计算和聚合的特定逻辑。
可以在以下 API 端点操作分析表挂钩：

    / api / analyticsTableHooks

分析表钩子 API 支持标准的 HTTP CRUD 操作
用于创建（POST）、更新（PUT）、检索（GET）和删除
（删除）实体。

### 钩场 { #webapi_analytics_table_hook_fields } 

Analytics表挂钩具有以下字段：



表格分析表钩子字段

| 领域 | 选项 | 描述 |
|---|---|---|
| 名称 | 文本 | 钩子的名称。 |
| 相位 | resource_table_populated, analytics_table_populated | 调用 SQL 脚本的阶段。 |
| resourceTableType | 参见下表 "阶段、表格类型和临时表格 "中的 "表格类型 "栏 | 调用 SQL 脚本的资源表类型。仅适用于使用 RESOURCE_TABLE_POPULATED 阶段定义的钩子。 |
| 分析表类型 | 参见下表 "阶段、表格类型和临时表格 "中的 "表格类型 "栏 | 要调用 SQL 脚本的分析表类型。仅适用于使用 ANALYTICS_TABLE_POPULATED 阶段定义的钩子。 |
| sql | 文本 | 要调用的 SQL 脚本。 |

The *ANALYTICS_TABLE_POPULATED* phase takes place after the analytics
table has been populated, but before indexes have been created and the
temp table has been swapped with the main table. As a result, the SQL
script should refer to the analytics temp table, e.g. *analytics_temp*,
*analytics_completeness_temp*, *analytics_event_temp_ebayegv0exc*.

这也适用于 *RESOURCE_TABLE_POPULATED* 阶段，它需要
放置在资源表被填充之后，索引之前
已创建并且临时表已与主表交换
桌子。因此，SQL 脚本应参考资源临时
表，例如*_orgunitstructure_temp*，*_categorystructure_temp*。

您应该只定义 *resourceTableType* 和
*analyticsTableType* 字段，取决于定义的 *phase*。

可以参考匹配的临时数据库表
仅指定挂钩表类型（其他临时表不会
可用的）。例如，如果您指定 *ORG_UNIT_STRUCTURE* 作为
资源表类型，可以参考*_orgunitstructure_temp*
仅临时数据库表。

下表显示了阶段、表格类型的有效组合
和临时表。



表格阶段、表格类型和临时表格

| 相 | 表格类型 | 临时表格 |
|---|---|---|
| RESOURCE_TABLE_POPULATED | ORG_UNIT_STRUCTURE | \_orgunitstructure\_temp |
|| data_set_org_unit_category |\_datasetorgunitcategory\_temp |
|| CATEGORY_OPTION_COMBO_NAME | \_categoryoptioncomboname\_temp |
|| data_element_group_set_structure | \_dataelementgroupsetstructure\_temp |
|| INDICATOR_GROUP_SET_STRUCTURE |\_indicatorgroupsetstructure\_temp |
|| org_unit_group_set_structure | \_organisationunitgroupsetstructure\_temp |
|| CATEGORY_STRUCTURE | \_categorystructure\_temp |
|| DATA_ELEMENT_STRUCTURE | \_dataelementstructure\_temp |
|| PERIOD_STRUCTURE | \_periodstructure\_temp |
|| DATE_PERIOD_STRUCTURE | \_dateperiodstructure\_temp |
|| data_element_category_option_combo | \_dataelementcategoryoptioncombo\_temp |
|| DATA_APPROVAL_MIN_LEVEL | \_dataapprovalminlevel\_temp |
| ANALYTICS_TABLE_POPULATED | DATA_VALUE | analytics\_temp |
|| 完整性 | analytics\_completeness\_temp |
|| COMPLETENESS_TARGET | analytics\_completenesstarget\_temp |
|| org_unit_target | analytics\_orgunittargetget\_temp |
|| 活动 | analytics\_event\_temp\_{program-uid} |
|| 注册 | analytics\_enrollment\_temp\_{program-uid} |
|| VALIDATION_RESULT | analytics\_validationresult\_temp |

### 创建钩子 { #webapi_create_analytics_table_hook } 

您可以使用维护程序或应用程序接口创建钩子。

要创建一个在资源表填充完成后运行的钩子，可以使用 *JSON* 作为内容类型，像这样发送一个 *POST* 请求：

```
POST /api/analyticsTableHooks
```

```json
{
  "name": "Update 'Area' in org unit group set resource table",
  "phase": "RESOURCE_TABLE_POPULATED",
  "resourceTableType": "ORG_UNIT_GROUP_SET_STRUCTURE",
  "sql": "update _organisationunitgroupsetstructure_temp set \"uIuxlbV1vRT\" = 'b0EsAxm8Nge'"
}
```

要创建一个在数据值分析表填充完成后运行的钩子，可以使用 *JSON* 格式像这样发送一个 *POST* 请求：

```json
{
  "name": "Update 'Currently on treatment' data in analytics table",
  "phase": "ANALYTICS_TABLE_POPULATED",
  "analyticsTableType": "DATA_VALUE",
  "sql": "update analytics_temp set monthly = '200212' where monthly in ('200210', '200211')"
}
```

要创建一个在事件分析表填充后运行的钩子，可以使用 *JSON* 格式像这样发送一个 *POST* 请求：

```json
{
  "name": "Delete data for a data element",
  "phase": "ANALYTICS_TABLE_POPULATED",
  "analyticsTableType": "EVENT",
  "sql": "delete from analytics_event_temp_lxaq7zs9vyr where dx = 'uDX9LKGRwaH'"
}
```



## SVG转换 { #webapi_svg_conversion } 

Web API 提供了可用于转换 SVG 内容的资源
转换为更广泛使用的格式，例如 PNG 和 PDF。理想情况下这个
转换应该发生在客户端，但不是所有的客户端
技术能够完成这项任务。目前为 PNG 和 PDF
支持输出格式。 SVG 内容本身应该通过
一个 *svg* 查询参数和一个可选的查询参数 *filename* 可以
用于指定响应附件文件的文件名。笔记
应该省略文件扩展名。对于 PNG，您可以发送 *POST*
使用 Content-type 请求以下 URL
`application/x-www-form-urlencoded`，与常规 HTML 表单相同
提交。

    api / svg.png

对于 PDF，您可以将 *POST* 请求发送到以下 URL
内容类型`application/x-www-form-urlencoded`。

    api / svg.pdf

表格查询参数

| 查询参数 | 需要 | 描述 |
|---|---|---|
| svg | 是的 | SVG 内容 |
| 文件名 | 不 | 返回附件的文件名，不带文件扩展名 |

## 分析异常值检测{ #webapi_analytics_outlier_detection } 

outliert API 分析提供了基于 Z Score 和 Modified Z Score 的数据质量调查端点。这两个分数都是统计量，有助于在偏离中间值的情况下分析和解释数据。它们对识别数据集中的异常值或极端值特别有用。该应用程序接口是作为一个单一的分析端点实现的：

- /api/analytics/outlierDetection

### 请求{ #webapi_analytics_outlier_detection_request } 

**查询参数**

| 查询参数    | 描述                                                                                                 | 需要                                            | 选项（默认为默认）                                                                          |                                                                          
|--------------------|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------|--------------------------------------------------------------------------------------------------|
| ds                 | 资料集                                                                                                    | 是的                                                 | 数据集标识符                                                                              |
| 开始日期          | 检查异常值的区间开始日期                                                                | 否（在这种情况下，相对日期段是强制性的） | 日期（年-月-日）                                                                                |
| 结束日期            | 检查异常值的区间结束日期                                                                 | 否（在这种情况下，相对日期段是强制性的） | 日期（年-月-日）                                                                                |
| 聚乙烯                 | ISO 周期和相对周期                                                                            | 否（开始和结束日期为必填项）   | 参见 "日期和句号格式"                                                                     |
| 相对周期日期 | 用作相对时期基础的日期。                                                                    | 不                                                  | 日期（年-月-日）                                                                                |
| 欧                 | 组织单位、组织单位级别或组（可以合并）                                      | 不                                                  | 组织单位（级别、组别）标识符                                                      |
| 标头            | 作为响应的一部分返回的标头名称。用逗号分隔的一个或多个标头名称 | 不                                                  | (NULL), dx, dxname, pename, pe ...                                                               |
| 订购            | 根据值列对记录排序                                                                        | 不                                                  | absdev、zscore、modifiedzscore、median、mean、stddev、medianabsdeviation、lowerbound、upperbound |
| 排序顺序          | 按升序或降序对值列上的记录进行排序                                       | 不                                                  | ASC、DESC                                                                                        |
| 算法          | 用于离群点检测的算法                                                                      | 不                                                  | z_score, modified_z_score                                                                        |
| 临界点          | 异常值 Z_SCORE 或 MODIFIED_Z_SCORE 的阈值                                                    | 不                                                  | 数值，大于零。默认值：3.0                                                         |
| inputIdScheme      | 查询请求中元数据项使用的标识符方案，可以是标识符、代码或属性。 | 不                                                  | uid、id、代码、名称                                                                              |
| 最大结果         | 最大行数（回复）                                                                                    | 不                                                  | 500                                                                                              |
| 跳读       | 跳过数据值的四舍五入，即提供精细精度（刻度 10）。                                       | 不                                                  | 假，真                                                                                      |

**请求示例**

    GET api/analytics/outlierDetection?ds=BfMAe6Itzgt&ou=ImspTQPwCqd&startDate=2022-07-26&endDate=2022-10-26&algorithm=Z_SCORE&maxResults=30&orderBy=value&threshold=3.0&sortOrder=asc&outputIdScheme=code


### 回复{ #webapi_analytics_outlier_detection_response } 

响应以多种表示格式交付。默认格式为 JSON。可用的
可用格式和内容类型是

  - json（应用程序/ json）
  - xml（应用程序/ xml）
  - xsl (application/vnd.ms-excel)
  - csv（应用程序/ csv）
  - html（text / html）
  - html + css（text / html）

**答复示例**

```json
{
    "headers": [
        {
            "name": "dx",
            "column": "Data",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "dxname",
            "column": "Data name",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "pe",
            "column": "Period",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "pename",
            "column": "Period name",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "ou",
            "column": "Organisation unit",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "ouname",
            "column": "Organisation unit name",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "ounamehierarchy",
            "column": "Organisation unit name hierarchy",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "coc",
            "column": "Category option combo",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "cocname",
            "column": "Category option combo name",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "aoc",
            "column": "Attribute option combo",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "aocname",
            "column": "Attribute option combo name",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "value",
            "column": "Value",
            "valueType": "NUMBER",
            "type": "java.lang.Double",
            "hidden": false,
            "meta": false
        },
        {
            "name": "mean",
            "column": "Mean",
            "valueType": "NUMBER",
            "type": "java.lang.Double",
            "hidden": false,
            "meta": false
        },
        {
            "name": "stddev",
            "column": "Standard deviation",
            "valueType": "NUMBER",
            "type": "java.lang.Double",
            "hidden": false,
            "meta": false
        },
        {
            "name": "absdev",
            "column": "Absolute deviation",
            "valueType": "NUMBER",
            "type": "java.lang.Double",
            "hidden": false,
            "meta": false
        },
        {
            "name": "zscore",
            "column": "zScore",
            "valueType": "NUMBER",
            "type": "java.lang.Double",
            "hidden": false,
            "meta": false
        },
        {
            "name": "lowerbound",
            "column": "Lower boundary",
            "valueType": "NUMBER",
            "type": "java.lang.Double",
            "hidden": false,
            "meta": false
        },
        {
            "name": "upperbound",
            "column": "Upper boundary",
            "valueType": "NUMBER",
            "type": "java.lang.Double",
            "hidden": false,
            "meta": false
        }
    ],
    "metaData": {
        "maxResults": 30,
        "count": 3,
        "orderBy": "VALUE",
        "threshold": 3.0,
        "algorithm": "Z_SCORE"
    },
    "rowContext": {},
    "width": 18,
    "rows": [
        [
            "DE_22",
            "Q_Early breastfeeding (within 1 hr after delivery) at BCG",
            "202209",
            "September 2022",
            "OU_204860",
            "Sandaru CHC",
            "/Sierra Leone/Kailahun/Penguia/Sandaru CHC",
            "COC_292",
            "Fixed, <1y",
            "default",
            "default",
            "105.0",
            "18.3",
            "28.7",
            "86.7",
            "3.0",
            "-67.9",
            "104.4"
        ],
        [
            "DE_359706",
            "BCG doses given",
            "202208",
            "August 2022",
            "OU_595",
            "Ngalu CHC",
            "/Sierra Leone/Bo/Bargbe/Ngalu CHC",
            "COC_292",
            "Fixed, <1y",
            "default",
            "default",
            "220.0",
            "41.6",
            "57.4",
            "178.3",
            "3.1",
            "-130.7",
            "213.9"
        ],
        [
            "DE_35",
            "Yellow Fever doses given",
            "202209",
            "September 2022",
            "OU_1027",
            "Yemoh Town CHC",
            "/Sierra Leone/Bo/Kakua/Yemoh Town CHC",
            "COC_292",
            "Fixed, <1y",
            "default",
            "default",
            "466.0",
            "48.1",
            "114.2",
            "417.8",
            "3.6",
            "-294.6",
            "391.0"
        ]
    ],
    "headerWidth": 18,
    "height": 3
}
```
### 回应统计{ #webapi_analytics_outlier_detection_stats_in_response }

| 统计测量 | 标题名称 | 描述 | 链接 |
|---|---|---|---|
| 值 | 价值 | 数据集/数据元素数值（Penta1 注射剂量、麻疹注射剂量等）。 | |
| 平均值 | 意思是 |一组数字的平均值。计算方法是将所有数值相加除以计数。| https://www.khanacademy.org/math/statistics-probability/summarizing-quantitative-data |
| 标准偏差 | stddev | 衡量一组数值的变化或离散程度。 | https://www.statisticshowto.com/probability-and-statistics/standard-deviation/ |
| 绝对偏差 | absdev | 每个数据值与中间值的绝对差值。 | https://www.mathsisfun.com/data/mean-absolute-deviation.html |
| Z 分数 | zscore | 标准化分数，表示数据值与平均值的标准差。 | https://www.statisticshowto.com/probability-and-statistics/z-score/ |
| 修改后的 Z 评分 | 修改后的分数 | 与 Z 分数类似，但对异常值更稳健。它使用中位数和中位数绝对偏差。 | https://www.statisticshowto.com/modified-z-scores/ |
| 绝对偏差中值 | 中位数偏差 | 数据值分布的稳健度量，以偏离中位数的绝对偏差的中位数计算。 | https://math.stackexchange.com/questions/2232309/median-absolute-deviation-mad-formula |
| 最低 | 下行 | 最小值是数据集中的最小值。它代表所有数据值中最低的观测值。 | |
| 最大| 上行 | 最大值是数据集中的最大值。它代表所有数据值中最高的观测值。 | |


### 错误信息{ #webapi_analytics_outlier_detection_error_messages } 

**_NOTE:_** *All messages are delivered with http status code 409.*

| 码 | 信息 |
|---|---|
| E2200 | 必须至少指定一个数据元素。 |
| E2201 | 必须指定开始日期和结束日期或相对时间段。 |
| E2202 | 开始日期必须在结束日期之前。 |
| E2203 | 必须至少指定一个组织单位。 | 
| E2204 | 阈值必须是正数。 |
| E2205 | 最大结果必须是正数。 |
| E2206 | 最大结果超过允许的最大限制：*500*. |
| E2207 | 数据开始日期必须在数据结束日期之前。 |
| E2208 | 异常值检测过程中遇到的非数值数据值。 |
| E2209 | 数据开始日期不允许。 |
| E2210 | 不允许数据结束日期。 |
| E2211 | 不允许算法最小-最大值。 |
| E2212 | 不允许同时指定开始日期/结束日期和相对时间段。 |
| E2213 | 参数 orderBy 的值与算法 *Z_SCORE* 不兼容。 |
| E7180 | 分析异常值数据不存在。请确保已运行分析任务，且未跳过异常值。 |
| E7181 | orderBy 中指定的列 *dxname*不符合 orderBy 条件或不存在。 |

**_NOTE:_** *The values in error messages are examples only*

**错误信息示例**
```json
{
    "httpStatus": "Conflict",
    "httpStatusCode": 409,
    "status": "ERROR",
    "message": "Start date and end date or relative period must be specified",
    "errorCode": "E2201"
}
```
## 分析查询执行计划和成本，包括执行时间估算{ #analytics-query-execution-plan-and-costs-including-execution-time-estimation } 

分析 API 提供了用于调查查询性能问题的端点。它是所有分析端点的一部分：

- 分析/解释
- 分析/事件/解释
- 分析/注册/解释

**例**

    GET /api/analytics/explain?displayProperty=NAME
      &dimension=dx:Uvn6LCg7dVU;sB79w2hiLp8,ou:USER_ORGUNIT
      &filter=pe:THIS_YEAR&includeNumDen=false&skipMeta=false
      &skipData=true&includeMetadataDetails=true

答复是这样的

```json
{
    "headers": [
        {
            "name": "dx",
            "column": "Data",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": true
        },
        {
            "name": "ou",
            "column": "Organisation unit",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": true
        },
        {
            "name": "value",
            "column": "Value",
            "valueType": "NUMBER",
            "type": "java.lang.Double",
            "hidden": false,
            "meta": false
        }
    ],
    "metaData": {
        "items": {
            "ImspTQPwCqd": {
                "uid": "ImspTQPwCqd",
                "code": "OU_525",
                "name": "Sierra Leone",
                "dimensionItemType": "ORGANISATION_UNIT",
                "valueType": "NUMBER",
                "totalAggregationType": "SUM"
            },
            "sB79w2hiLp8": {
                "uid": "sB79w2hiLp8",
                "name": "ANC 3 Coverage",
                "description": "Total 3rd ANC visits (Fixed and outreach) by expected number of pregnant women.",
                "legendSet": "fqs276KXCXi",
                "dimensionItemType": "INDICATOR",
                "valueType": "NUMBER",
                "totalAggregationType": "AVERAGE",
                "indicatorType": {
                    "name": "Per cent",
                    "displayName": "Per cent",
                    "factor": 100,
                    "number": false
                }
            },
            "dx": {
                "uid": "dx",
                "name": "Data",
                "dimensionType": "DATA_X"
            },
            "pe": {
                "uid": "pe",
                "name": "Period",
                "dimensionType": "PERIOD"
            },
            "ou": {
                "uid": "ou",
                "name": "Organisation unit",
                "dimensionType": "ORGANISATION_UNIT"
            },
            "Uvn6LCg7dVU": {
                "uid": "Uvn6LCg7dVU",
                "code": "IN_52486",
                "name": "ANC 1 Coverage",
                "description": "Total 1st ANC visits (Fixed and outreach) by expected number of pregnant women.",
                "legendSet": "fqs276KXCXi",
                "dimensionItemType": "INDICATOR",
                "valueType": "NUMBER",
                "totalAggregationType": "AVERAGE",
                "indicatorType": {
                    "name": "Per cent",
                    "displayName": "Per cent",
                    "factor": 100,
                    "number": false
                }
            },
            "THIS_YEAR": {
                "name": "This year"
            },
            "2022": {
                "uid": "2022",
                "code": "2022",
                "name": "2022",
                "dimensionItemType": "PERIOD",
                "valueType": "NUMBER",
                "totalAggregationType": "SUM",
                "startDate": "2022-01-01T00:00:00.000",
                "endDate": "2022-12-31T00:00:00.000"
            }
        },
        "dimensions": {
            "dx": [
                "Uvn6LCg7dVU",
                "sB79w2hiLp8"
            ],
            "pe": [
                "2022"
            ],
            "ou": [
                "ImspTQPwCqd"
            ],
            "co": []
        }
    },
    "performanceMetrics": {
        "totalTimeInMillis": 90.894,
        "executionPlans": [
            {
                "timeInMillis": 12.314,
                "planningTime": 6.801,
                "executionTime": 5.513,
                "query": "select ax.\"dx\",ax.\"uidlevel1\", sum(daysxvalue) / 365 as value from analytics_2022 as ax where ax.\"dx\" in ('h0xKKjijTdI') and ax.\"uidlevel1\" in ('ImspTQPwCqd') and ( ax.\"yearly\" in ('2022') ) and ax.\"year\" in (2022) group by ax.\"dx\",ax.\"uidlevel1\"",
                "plan": {
                    "Node Type": "Aggregate",
                    "Strategy": "Sorted",
                    "Partial Mode": "Simple",
                    "Parallel Aware": false,
                    "Async Capable": false,
                    "Startup Cost": 20.21,
                    "Total Cost": 5602.98,
                    "Plan Rows": 260,
                    "Plan Width": 32,
                    "Actual Startup Time": 5.448,
                    "Actual Total Time": 5.449,
                    "Actual Rows": 1,
                    "Actual Loops": 1,
                    "Group Key": [
                        "dx",
                        "uidlevel1"
                    ],
                    "Plans": [
                        {
                            "Node Type": "Bitmap Heap Scan",
                            "Parent Relationship": "Outer",
                            "Parallel Aware": false,
                            "Async Capable": false,
                            "Relation Name": "analytics_2022",
                            "Alias": "ax",
                            "Startup Cost": 20.21,
                            "Total Cost": 5588.33,
                            "Plan Rows": 1520,
                            "Plan Width": 32,
                            "Actual Startup Time": 0.446,
                            "Actual Total Time": 5.003,
                            "Actual Rows": 1032,
                            "Actual Loops": 1,
                            "Recheck Cond": "(dx = 'h0xKKjijTdI'::bpchar)",
                            "Rows Removed by Index Recheck": 0,
                            "Filter": "((uidlevel1 = 'ImspTQPwCqd'::bpchar) AND (yearly = '2022'::text) AND (year = 2022))",
                            "Rows Removed by Filter": 0,
                            "Exact Heap Blocks": 46,
                            "Lossy Heap Blocks": 0,
                            "Plans": [
                                {
                                    "Node Type": "Bitmap Index Scan",
                                    "Parent Relationship": "Outer",
                                    "Parallel Aware": false,
                                    "Async Capable": false,
                                    "Index Name": "in_dx_ao_ax_2022_MClNI",
                                    "Startup Cost": 0.0,
                                    "Total Cost": 19.83,
                                    "Plan Rows": 1520,
                                    "Plan Width": 0,
                                    "Actual Startup Time": 0.406,
                                    "Actual Total Time": 0.407,
                                    "Actual Rows": 1032,
                                    "Actual Loops": 1,
                                    "Index Cond": "(dx = 'h0xKKjijTdI'::bpchar)"
                                }
                            ]
                        }
                    ]
                }
            },
            {
                "timeInMillis": 38.35,
                "planningTime": 0.627,
                "executionTime": 37.723,
                "query": "select ax.\"dx\",ax.\"uidlevel1\", sum(value) as value from analytics_2022 as ax where ax.\"dx\" in ('Jtf34kNZhzP') and ax.\"uidlevel1\" in ('ImspTQPwCqd') and ( ax.\"yearly\" in ('2022') ) and ax.\"year\" in (2022) group by ax.\"dx\",ax.\"uidlevel1\"",
                "plan": {
                    "Node Type": "Aggregate",
                    "Strategy": "Sorted",
                    "Partial Mode": "Simple",
                    "Parallel Aware": false,
                    "Async Capable": false,
                    "Startup Cost": 193.57,
                    "Total Cost": 47322.83,
                    "Plan Rows": 261,
                    "Plan Width": 32,
                    "Actual Startup Time": 37.685,
                    "Actual Total Time": 37.685,
                    "Actual Rows": 1,
                    "Actual Loops": 1,
                    "Group Key": [
                        "dx",
                        "uidlevel1"
                    ],
                    "Plans": [
                        {
                            "Node Type": "Bitmap Heap Scan",
                            "Parent Relationship": "Outer",
                            "Parallel Aware": false,
                            "Async Capable": false,
                            "Relation Name": "analytics_2022",
                            "Alias": "ax",
                            "Startup Cost": 193.57,
                            "Total Cost": 47191.38,
                            "Plan Rows": 17179,
                            "Plan Width": 32,
                            "Actual Startup Time": 1.981,
                            "Actual Total Time": 32.332,
                            "Actual Rows": 17462,
                            "Actual Loops": 1,
                            "Recheck Cond": "(dx = 'Jtf34kNZhzP'::bpchar)",
                            "Rows Removed by Index Recheck": 0,
                            "Filter": "((uidlevel1 = 'ImspTQPwCqd'::bpchar) AND (yearly = '2022'::text) AND (year = 2022))",
                            "Rows Removed by Filter": 0,
                            "Exact Heap Blocks": 1165,
                            "Lossy Heap Blocks": 0,
                            "Plans": [
                                {
                                    "Node Type": "Bitmap Index Scan",
                                    "Parent Relationship": "Outer",
                                    "Parallel Aware": false,
                                    "Async Capable": false,
                                    "Index Name": "in_dx_ax_2022_Eb64F",
                                    "Startup Cost": 0.0,
                                    "Total Cost": 189.27,
                                    "Plan Rows": 17179,
                                    "Plan Width": 0,
                                    "Actual Startup Time": 1.765,
                                    "Actual Total Time": 1.765,
                                    "Actual Rows": 17462,
                                    "Actual Loops": 1,
                                    "Index Cond": "(dx = 'Jtf34kNZhzP'::bpchar)"
                                }
                            ]
                        }
                    ]
                }
            }
        ]
    },
    "width": 0,
    "rows": [],
    "height": 0,
    "headerWidth": 2
}
```

此响应显示 PostgreSQL 计划器为所提供语句生成的执行计划。

执行计划显示了语句引用表的扫描方式：普通顺序扫描、索引扫描，以及如果引用了多个表，将使用哪些连接来汇集每个输入表中所需的记录。

显示中最关键的部分是语句执行成本估算，即查询规划器对运行语句所需时间的估算。

All entry points are secured by authorization. The `F_PERFORM_ANALYTICS_EXPLAIN` role is required.

## 分析解释{ #webapi_analytics_explain }

    /api/analytics/explain

## 事件分析说明{ #webapi_event_analytics_explain }

    /api/analytics/event/aggregate/{program}/explain

    /api/analytics/event/query/{program}/explain

## 入学分析说明{ #webapi_enrollment_analytics_explain }

    /api/analytics/enrollment/query/{program}/explain

## 离群值分析解释{ #webapi_analytics_outlier_detection_explain } 

    /api/analytics/outlierDetection/explain


# 保养 { #maintenance } 

## 资源和分析表{ #webapi_generating_resource_analytics_tables } 

DHIS2 具有一组生成的数据库表，用作
各种系统功能的基础。这些表可以执行
立即或计划通过定期执行
用户界面。它们也可以通过 Web API 生成为
本节说明。此任务通常是针对系统的一项任务
管理员而不使用客户端。

资源表由 DHIS2 应用程序内部使用
各种分析功能。这些表对用户也很有价值
编写高级 SQL 报告。它们可以通过 POST 或 PUT 生成
请求到以下 URL：

    / api / 33 / resourceTables

分析表针对数据聚合进行了优化并使用
目前在 DHIS2 中用于数据透视表模块。分析表可以
使用 POST 或 PUT 请求生成：

    / api / 33 / resourceTables / analytics



表格：分析表可选查询参数

| 查询参数 | 选项 | 描述 |
|---|---|---|
| 跳过资源表 | 假 | 真 | 跳过生成资源表 |
| 跳过聚合 | 假 | 真 | 跳过生成汇总数据和完整性数据 |
| 跳过事件 | 假 | 真 | 跳过事件数据的生成 |
| 跳过注册 | 假 | 真 | 跳过生成注册数据 |
| 跳过机构单位所有权 | 假 | 真 | 跳过组织单位所有权数据的生成 |
| 最后一年 | 整数 | 要包括的最近几年数据的数量 |

> **注**
>
> lastYears=0 表示最新或连续分析，定义见
[Continuous analytics table]（.../.../.../use/user-guides/dhis-core-version-master/maintaining-the-system/scheduling.html#scheduling_continuous_analytics_table）中定义。


“数据质量”和“数据监控”可通过监控运行
任务，由以下端点触发：

    / api / 33 / resourceTables / monitoring

此任务将分析您的验证规则，查找任何违规并
将它们保存为验证结果。

这些请求将立即返回并启动服务器端
过程。

## 保养 { #webapi_maintenance } 

要执行维护，您可以与 *maintenance* 资源进行交互。您应该使用 *POST* 或 *PUT* 作为请求方法。可以使用以下方法。

清除分析表将删除所有分析表。

    开机自检/ api / maintenance / analyticsTablesClear

分析表分析将收集有关数据库中分析表内容的统计信息。

    开机自检/ api / maintenance / analyticsTablesAnalyze

清除过期邀请将删除所有用户帐户邀请
已过期。

    开机自检/ api / maintenance / expiredInvitationsClear

期间修剪将删除未链接到任何数据的期间
值。

    开机自检/ api / maintenance / periodPruning

零数据值删除将删除链接到数据的零数据值
零数据被定义为不重要的元素：

    开机自检/ api / maintenance / zeroDataValueRemoval

软删除的数据值删除将永久删除软删除的数据值。

    开机自检/ api / maintenance / softDeletedDataValueRemoval

软删除的程序阶段实例删除将永久删除软删除的事件。

    开机自检/ api / maintenance / softDeletedProgramStageInstanceRemoval

软删除程序实例的删除将永久删除软删除的注册。

    开机自检/ api / maintenance / softDeletedProgramInstanceRemoval

软删除的跟踪实体实例的删除将永久删除软删除的跟踪实体实例。

    开机自检/ api / maintenance / softDeletedTrackedEntityInstanceRemoval

删除SQL视图将删除数据库中的所有SQL视图。请注意，它不会删除DHIS2 SQL视图实体。

    开机自检/ api / maintenance / sqlViewsDrop

创建SQL视图将重新创建数据库中的所有SQL视图。

    开机自检/ api / maintenance / sqlViewsCreate

类别选项组合更新将删除过时并为所有类别组合生成缺少的类别选项组合。

    开机自检/ api / maintenance / categoryOptionComboUpdate

也可以使用以下端点为单个类别组合更新类别选项组合。

    开机自检/ api / maintenance / categoryOptionComboUpdate / categoryCombo / <category-combo-uid>

缓存清除将清除应用程序Hibernate缓存和分析分区缓存。

    开机自检/ api / maintenance / cacheClear

组织单位路径更新将重新生成组织单位路径属性。这可能是有用的，例如如果您使用SQL导入组织单位。

    开机自检/ api / maintenance / ouPathsUpdate

数据修剪将删除完整的数据集注册，数据批准，数据价值审核和数据价值，在这种情况下是组织单位。

    开机自检/ api / maintenance / dataPruning / organisationUnits / <org-unit-id>

数据元素的数据修剪，这将删除数据值审核和数据值。

    开机自检/ api / maintenance / dataPruning / dataElement / <data-element-uid>

元数据验证将应用所有元数据验证规则，并返回操作结果。

    开机自检/ api / metadataValidation

应用程序重新加载将通过从文件系统读取来刷新已安装应用程序的DHIS2托管缓存。

    开机自检/ api / appReload

通过对api / maintenance资源的POST请求以批处理方式支持维护操作，在api / maintenance资源中，该操作作为查询参数提供：

    开机自检/ api / maintenance？analyticsTablesClear = true＆expiredInvitationsClear = true
      ＆periodPruning = true＆zeroDataValueRemoval = true＆sqlViewsDrop = true＆sqlViewsCreate = true
      ＆categoryOptionComboUpdate = true＆cacheClear = true＆ouPathsUpdate = true

## 系统信息 { #webapi_system_resource } 

系统资源为您提供方便的信息和
职能。系统资源可以在 */api/system* 中找到。

### 产生识别码 { #webapi_system_resource_generate_identifiers } 

要生成有效的随机 DHIS2 标识符，您可以执行 GET 请求
此资源：

    / api / 33 / system / id？limit = 3

*limit* 查询参数是可选的，表示有多少
您希望与响应一起返回的标识符。默认为
返回一个标识符。响应将包含一个带有
数组命名代码，类似于：

```json
{
  "codes": [
    "Y0moqFplrX4",
    "WI0VHXuWQuV",
    "BRJNBBpu4ki"
  ]
}
```

DHIS2 UID格式具有以下要求：

  - 长11个字符。

  - 仅字母数字字符，即。字母或数字字符
    (A-Za-z0-9)。

  - 以字母字符（A-Za-z）开头。

### 查看系统信息 { #webapi_system_resource_view_system_information } 

要获取有关当前系统的信息，您可以执行 GET 请求
这个网址：

    / api / 33 / system / info

支持 JSON 和 JSONP 响应格式。系统信息响应
目前包括以下属性。

```json
{
  "contextPath": "http://yourdomain.com",
  "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 Chrome/29.0.1547.62",
  "calendar": "iso8601",
  "dateFormat": "yyyy-mm-dd",
  "serverDate": "2021-01-05T09:16:03.548",
  "serverTimeZoneId": "Etc/UTC",
  "serverTimeZoneDisplayName": "Coordinated Universal Time",
  "version": "2.13-SNAPSHOT",
  "revision": "11852",
  "buildTime": "2013-09-01T21:36:21.000+0000",
  "serverDate": "2013-09-02T12:35:54.311+0000",
  "environmentVariable": "DHIS2_HOME",
  "javaVersion": "1.7.0_06",
  "javaVendor": "Oracle Corporation",
  "javaIoTmpDir": "/tmp",
  "javaOpts": "-Xms600m -Xmx1500m -XX:PermSize=400m -XX:MaxPermSize=500m",
  "osName": "Linux",
  "osArchitecture": "amd64",
  "osVersion": "3.2.0-52-generic",
  "externalDirectory": "/home/dhis/config/dhis2",
  "databaseInfo": {
    "type": "PostgreSQL",
    "name": "dhis2",
    "user": "dhis",
    "spatialSupport": false
  },
  "memoryInfo": "Mem Total in JVM: 848 Free in JVM: 581 Max Limit: 1333",
  "cpuCores": 8
}
```

> **注意**
>
>如果请求此资源的用户不具有完全权限，则仅包括不被视为敏感的属性。

仅获取有关系统上下文的信息，即`contextPath` 和
`userAgent`，您可以向以下 URL 发出 GET 请求。 JSON 和
支持 JSONP 响应格式：

    / api / 33 / system / context

### 检查用户名和密码组合是否正确 { #webapi_system_resource_check_username_password } 

检查某些用户凭据（用户名和密码组合）
是正确的，您可以使用以下资源向以下资源发出 *GET* 请求
*基本认证*：

    / api / 33 / system / ping

您可以通过检查 *HTTP 来检测身份验证的结果
响应头的状态码*。可能状态的含义
代码如下。请注意，这适用于 Web API 请求
一般的。



表格HTTP 状态代码

| HTTP 状态代码 | 描述 | 成果 |
|---|---|---|
| 200 | 好的 | 验证成功 |
| 302 | 已找到 | 请求时未提供凭证 - 未进行身份验证 |
| 401 | 未经授权 | 用户名和密码组合不正确 - 验证失败 |

### 查看异步任务状态 { #webapi_system_resource_view_async_task_status } 

Tasks which often take a long time to complete can be performed
asynchronously. After initiating an async task you can poll the status
through the `system/tasks` resource by supplying the task category and
the task identifier of interest.

轮询任务状态时，您需要进行身份验证
启动任务的用户。以下任务类别是
支持的：



表：任务类别

| 识别码 | 描述 |
|---|---|
| ANALYTICS_TABLE | 生成分析表。 |
| RESOURCE_TABLE | 生成资源表。 |
| 监测 | 处理数据监视/监测验证规则。 |
| DATAVALUE_IMPORT | 导入数据值。 |
| EVENT_IMPORT | 事件导入。 |
| ENROLLMENT_IMPORT | 输入注册人数。 |
| TEI_IMPORT | 导入跟踪的实体实例。 |
| METADATA_IMPORT | 导入元数据。 |
| DATA_INTEGRITY | 处理数据完整性检查。 |

每个异步任务都会自动分配一个标识符，该标识符可以
用于监视任务的状态。这个任务标识符是
当您通过各种方式启动异步任务时由 API 返回
启用异步的端点。

#### 监控任务 { #monitoring-a-task } 

您可以通过对系统任务的 GET 请求轮询任务状态
像这样的资源：

    / api / 33 / system / tasks / {task-category-id} / {task-id}

一个示例请求可能看起来像这样：

    / api / 33 / system / tasks / DATAVALUE_IMPORT / j8Ki6TgreFw

响应将提供有关状态的信息，例如
通知级别、类别、时间和状态。 *已完成的*属性
指示该过程是否被认为是完整的。

```json
[{
  "uid": "hpiaeMy7wFX",
  "level": "INFO",
  "category": "DATAVALUE_IMPORT",
  "time": "2015-09-02T07:43:14.595+0000",
  "message": "Import done",
  "completed": true
}]
```

#### 监视类别的所有任务 { #monitoring-all-tasks-for-a-category } 

您可以通过 GET 请求轮询特定类别的所有任务
系统任务资源：

    / api / 33 / system / tasks / {task-category-id}

轮询数据值导入任务状态的示例请求
看起来像这样：

    / api / 33 / system / tasks / DATAVALUE_IMPORT

#### 监控所有任务 { #monitor-all-tasks } 

您可以使用以下命令请求系统中所有当前正在运行的任务的列表
对系统任务资源的 GET 请求：

    / api / 33 / system / tasks

响应将类似于以下内容：

```json
[{
  "EVENT_IMPORT": {},
  "DATA_STATISTICS": {},
  "RESOURCE_TABLE": {},
  "FILE_RESOURCE_CLEANUP": {},
  "METADATA_IMPORT": {},
  "CREDENTIALS_EXPIRY_ALERT": {},
  "SMS_SEND": {},
  "MOCK": {},
  "ANALYTICSTABLE_UPDATE": {},
  "COMPLETE_DATA_SET_REGISTRATION_IMPORT": {},
  "DATAVALUE_IMPORT": {},
  "DATA_SET_NOTIFICATION": {},
  "DATA_INTEGRITY": {
    "OB1qGRlCzap": [{
      "uid": "LdHQK0PXZyF",
      "level": "INFO",
      "category": "DATA_INTEGRITY",
      "time": "2018-03-26T15:02:32.171",
      "message": "Data integrity checks completed in 38.31 seconds.",
      "completed": true
    }]
  },
  "PUSH_ANALYSIS": {},
  "MONITORING": {},
  "VALIDATION_RESULTS_NOTIFICATION": {},
  "REMOVE_EXPIRED_RESERVED_VALUES": {},
  "DATA_SYNC": {},
  "SEND_SCHEDULED_MESSAGE": {},
  "DATAVALUE_IMPORT_INTERNAL": {},
  "PROGRAM_NOTIFICATIONS": {},
  "META_DATA_SYNC": {},
  "ANALYTICS_TABLE": {},
  "PREDICTOR": {}
}]
```

### 查看异步任务摘要 { #view-asynchronous-task-summaries } 

任务摘要资源允许您检索任务摘要
异步任务调用。您需要指定类别和
可选的任务标识符。任务标识符可以是
从发起请求的 API 请求的响应中检索
异步任务。

要检索特定任务的摘要，您可以发出以下请求：

    / api / 33 / system / taskSummaries / {task-category-id} / {task-id}

一个示例请求可能看起来像这样：

    / api / 33 / system / taskSummaries / DATAVALUE_IMPORT / k72jHfF13J1

响应将类似于以下内容：

```json
{
  "responseType": "ImportSummary",
  "status": "SUCCESS",
  "importOptions": {
    "idSchemes": {},
    "dryRun": false,
    "async": true,
    "importStrategy": "CREATE_AND_UPDATE",
    "reportMode": "FULL",
    "skipExistingCheck": false,
    "sharing": false,
    "skipNotifications": false,
    "datasetAllowsPeriods": false,
    "strictPeriods": false,
    "strictCategoryOptionCombos": false,
    "strictAttributeOptionCombos": false,
    "strictOrganisationUnits": false,
    "requireCategoryOptionCombo": false,
    "requireAttributeOptionCombo": false,
    "skipPatternValidation": false
  },
  "description": "Import process completed successfully",
  "importCount": {
    "imported": 0,
    "updated": 431,
    "ignored": 0,
    "deleted": 0
  },
  "dataSetComplete": "false"
}
```

您还可以检索多个任务的导入摘要
具有类似请求的特定类别
这：

    / api / 33 / system / taskSummaries / {task-category-id}

### 获取外观信息 { #webapi_system_resource_get_appearance_information } 

您可以使用 GET 以 JSON 格式检索可用的标志图标
要求：

    / api / 33 / system / flags

您可以使用 GET 以 JSON 格式检索可用的 UI 样式
要求：

    / api / 33 / system / styles


## Trigram 指数摘要{ #trigram-index-summary } 

可以使用跟踪搜索优化任务创建三元组索引。了解哪些跟踪实体属性已被索引，哪些未被索引非常有用。可使用以下 API 获取三叉索引状态摘要。API 支持使用字段查询参数进行字段选择和过滤。

与属性 "indexedAttributes "相对应的属性当前已在系统中建立索引。与属性 "indexableAttributes "相对应的属性当前未编入索引，但可根据需要创建索引。与属性 "obsoleteIndexedAttributes "相对应的属性在系统中已编入索引，但由于属性配置发生变化，不再符合可编入索引的条件，因此这些索引已经过时。

```
GET /api/39/trigramSummary
```

JSON 响应示例如下：

```json
{
    "indexedAttributes": [{
        "displayName": "First name",
        "id": "w75KJ2mc4zz"
    }, {
        "displayName": "Last name",
        "id": "zDhUuAYrxNC"
    }],
    "indexableAttributes": [{
        "displayName": "Phone number",
        "id": "P2cwLGskgxn"
    }],
    "obsoleteIndexedAttributes": [{
        "displayName": "TB identifier",
        "id": "xs8A6tQJY0s"
    }, {
        "displayName": "Provider ID",
        "id": "DODgdr5Oo2v"
    }]
}
```

## 集群信息{ #cluster-info } 

在集群配置中设置 DHIS 2 时，了解集群中哪个节点是集群的领导节点非常有用。以下 API 可用于获取领导节点实例的详细信息。该 API 支持 JSON 和 XML 格式。

```
GET /api/36/cluster/leader
```

JSON 响应示例如下：

```json
{
  "leaderNodeId": "play-dhis2-org-dev",
  "leaderNodeUuid": "d386e46b-26d4-4937-915c-025eb99c8cad",
  "currentNodeId": "play-dhis2-org-dev",
  "currentNodeUuid": "d386e46b-26d4-4937-915c-025eb99c8cad",
  "leader": true
}
```

## 最小-最大数据元素 { #webapi_min_max_data_elements } 

min-max 数据元素资源允许您设置最小值和最大值
数据元素的值范围。它是独一无二的
组织单位、数据元素和类别选项组合。

    / api / minMaxDataElements



表格最小-最大数据元素数据结构

| 项目 | 描述 | 数据类型 |
|---|---|---|
| 消息来源 | 组织单位标识符 | 串 |
| 数据元素 | 数据元素标识符 | 串 |
| 选项组合 | 数据元素类别选项组合标识符 | 串 |
| 分钟 | 最小值 | 整数 |
| 最大 | 最大值 | 整数 |
| 生成的 | 表示该对象是否由系统生成（而非手动设置）。 | Boolean |

您可以从以下位置检索所有最小-最大数据元素的列表
资源：

    GET /api/minMaxDataElements.json

您可以像这样过滤响应：

    GET /api/minMaxDataElements.json?filter=dataElement.id:eq:UOlfIjgN8X6

    GET /api/minMaxDataElements.json?filter=dataElement.id:in:[UOlfIjgN8X6,xc8gmAKfO95] (UOlfIjgN8X6,xc8gmAKfO95)

min-max 数据元素的过滤器参数支持两种运算符：
eq 和 in。您还可以使用 `fields` 查询参数。

    GET /api/minMaxDataElements.json?fields=:all,dataElement[id,name]

### 添加/更新最小-最大数据元素 { #webapi_add_update_min_max_data_element } 

要添加新的最小-最大数据元素，请使用POST请求执行以下操作：

    POST /api/minMaxDataElements.json

JSON内容格式如下所示：

```json
{
  "min": 1,
  "generated": false,
  "max": 100,
  "dataElement": {
    "id": "UOlfIjgN8X6"
   },
  "source": {
    "id": "DiszpKrYNg8"
  },
  "optionCombo": {
    "id": "psbwp3CQEhs"
  }
}
```

如果数据元素、组织单位和类别的组合
选项组合存在，最小值-最大值将被更新。

### 删除最小-最大数据元素 { #webapi_delete_min_max_data_element } 

要删除最小-最大数据元素，请使用DELETE方法发送请求：

    删除/api/minMaxDataElements.json

JSON内容的格式与上述类似：

```json
{
  "min": 1,
  "generated": false,
  "max": 100,
  "dataElement": {
    "id": "UOlfIjgN8X6"
   },
  "source": {
    "id": "DiszpKrYNg8"
  },
  "optionCombo": {
    "id": "psbwp3CQEhs"
  }
}
```

## 锁定异常 { #webapi_lock_exceptions } 

锁定异常资源允许您打开其他锁定的数据
用于特定数据集、时期和组织的数据输入集
单元。您可以从以下资源中读取锁定异常：

    / api / lockExceptions

要创建新的锁定异常，您可以使用 POST 请求并指定
数据集、期间和组织单位：

    POST / api / lockExceptions？ds = BfMAe6Itzgt＆pe = 201709＆ou = DiszpKrYNg8

要删除锁定异常，您可以使用类似的请求语法
删除请求：

    删除/ api / lockExceptions？ds = BfMAe6Itzgt＆pe = 201709＆ou = DiszpKrYNg8




# 数据交换{ #data-exchange } 

## 汇总数据交换{ #aggregate-data-exchange } 

本节介绍聚合数据交换服务和应用程序接口。

### 介绍 { #introduction } 

聚合数据交换服务提供在 DHIS 2 实例之间交换数据的功能，也可能在支持 DHIS 2 数据值集 JSON 格式的其他软件之间交换数据。它还允许在 DHIS 2 的单个实例内进行数据交换，例如汇总跟踪器数据并将结果保存为汇总数据。 

汇总数据交换服务适用于以下用例

* HMIS 实例与 DHIS 数据门户或数据仓库实例之间的数据交换 2.
* DHIS 2 追踪器实例与 HMIS 总实例之间的数据交换。
* 预先计算跟踪器数据，并将程序指标保存为综合数据值。
* 从国家 HMIS 向全球捐助者报告数据。

### 总览 { #overview } 

The aggregate data exchange service allows for data exchange between a *source* instance of DHIS 2 and a *target* instance of DHIS 2. A data exchange can be *external*, for which the target instance is different/external to the source instance. A data exchange can also be *internal*, for which the target instance is the same as the source instance. The aggregate data exchange source can contain multiple source requests, where a source request roughly corresponds to an analytics API request.

数据值将被检索并转换为*数据值集*格式，然后推送到 DHIS 2 的目标实例。汇总数据交换服务支持*标识符方案*，以便在实例之间灵活映射元数据。

将使用分析引擎从源实例中检索和汇总数据。这意味着数据元素、汇总指标、数据集报告率和计划指标都可以在对源实例的请求中引用。源请求还包含时段（支持固定时段和相对时段）和组织单位。源请求可应用任意数量的*过滤器*。

数据交换可作为计划任务运行，其中数据交换可设置为在特定时间间隔运行。数据交换也可以通过应用程序接口按需运行。

要创建和操作聚合数据交换，需要`F_AGGREGATE_DATA_EXCHANGE_PUBLIC_ADD` / `F_AGGREGATE_DATA_EXCHANGE_PRIVATE_ADD` and `F_AGGREGATE_DATA_EXCHANGE_DELETE`权限。

聚合数据交换定义是 DHIS 2 中的常规元数据，这意味着这些定义可以在 DHIS 2 实例之间导入和导出。凭证在存储过程中会进行加密，以提供额外的安全保护。

聚合数据交换服务在 2.39 版中引入，这意味着 DHIS 2 的源实例必须是 2.39 版或更高版本。DHIS 2 的目标实例必须是 2.38 版或更高版本。

### 验证{ #authentication } 

对于外部类型的数据交换，必须指定目标 DHIS 2 实例的基本 URL 和身份验证凭证。在身份验证方面，支持基本身份验证和个人访问令牌 (PAT)。

建议指定基本身份验证或 PAT 身份验证。如果同时指定，则 PAT 身份验证优先。

请注意，2.38.1 版引入了 PAT 支持，这意味着要使用 PAT 身份验证，目标 DHIS 2 实例必须是 2.38.1 版或更高版本。

### 分享中 { #sharing } 
与其他元数据对象一样，细粒度的安全性可与集合数据交换相关联。每个交换都可以与单个用户和/或用户组共享，以控制哪些用户可以访问特定的交换。外部数据交换包含目标系统上用户的身份验证详细信息，因此应特别注意
确保只有经授权的用户才能实际提交交换数据。

下表概述了如何在汇总数据交换中使用共享功能。


| 分享中 | 有效权限                                                              |
| -------- |-----------------------------------------------------------------------------------|
| "r-------" | 可以查看数据交换的元数据。 |
| "-w------" | 可以编辑数据交换的元数据。 |
| "--r-----" | 可以查看作为交换一部分的数据。 |
| "---w----" | 可以提交作为交换一部分的数据。 |

### API{ #api } 

下一节将介绍汇总数据交换应用程序接口。

#### 创建汇总数据交换{ #create-aggregate-data-exchange } 

```
POST /api/aggregateDataExchanges
```

```
内容类型：application/json
```

内部数据交换有效载荷示例，其中事件数据与程序指标一起计算，并保存为综合数据值： 

```json
{
  "name": "Internal data exchange",
  "source": {
    "params": {
      "periodTypes": [
        "MONTHLY",
        "QUARTERLY"
      ]
    },
    "requests": [
      {
        "name": "ANC",
        "visualization": null,
        "dx": [
          "fbfJHSPpUQD",
          "cYeuwXTCPkU",
          "Jtf34kNZhzP"
        ],
        "pe": [
          "LAST_12_MONTHS",
          "202201"
        ],
        "ou": [
          "ImspTQPwCqd"
        ],
        "filters": [
          {
            "dimension": "Bpx0589u8y0",
            "items": [
              "oRVt7g429ZO",
              "MAs88nJc9nL"
            ]
          }
        ],
        "inputIdScheme": "UID",
        "outputDataElementIdScheme": "UID",
        "outputOrgUnitIdScheme": "UID",
        "outputIdScheme": "UID"
      }
    ]
  },
  "target": {
    "type": "INTERNAL",
    "request": {
      "dataElementIdScheme": "UID",
      "orgUnitIdScheme": "UID",
      "categoryOptionComboIdScheme": "UID",
      "idScheme": "UID"
    }
  }
}
```

带有基本身份验证和 ID 方案 *code* 的外部数据交换有效载荷示例，其中数据被推送到外部 DHIS 2 实例：

```json
{
  "name": "External data exchange with basic authentication",
  "source": {
    "requests": [
      {
        "name": "ANC",
        "visualization": null,
        "dx": [
          "fbfJHSPpUQD",
          "cYeuwXTCPkU",
          "Jtf34kNZhzP"
        ],
        "pe": [
          "LAST_12_MONTHS",
          "202201"
        ],
        "ou": [
          "ImspTQPwCqd"
        ],
        "inputIdScheme": "UID",
        "outputIdScheme": "CODE"
      }
    ]
  },
  "target": {
    "type": "EXTERNAL",
    "api": {
        "url": "https://play.dhis2.org/2.38.2.1",
        "username": "admin",
        "password": "district"
    },
    "request": {
      "idScheme": "CODE"
    }
  }
}
```

带有 PAT 身份验证和 ID 方案 *code* 的外部数据交换有效载荷示例，其中数据被推送到外部 DHIS 2 实例：

```json
{
  "name": "External data exchange with PAT authentication",
  "source": {
    "requests": [
      {
        "name": "ANC",
        "dx": [
          "fbfJHSPpUQD",
          "cYeuwXTCPkU",
          "Jtf34kNZhzP"
        ],
        "pe": [
          "LAST_12_MONTHS",
          "202201"
        ],
        "ou": [
          "ImspTQPwCqd"
        ],
        "inputIdScheme": "UID",
        "outputIdScheme": "CODE"
      }
    ]
  },
  "target": {
    "type": "EXTERNAL",
    "api": {
        "url": "https://play.dhis2.org/2.38.2.1",
        "accessToken": "d2pat_XIrqgAGjW935LLPuSP2hXSZwpTxTW2pg3580716988"
    },
    "request": {
      "idScheme": "CODE"
    }
  }
}
```

The syntax for the source requests follow the analytics endpoint API syntax. This means that for the `dx` part, data elements, indicators, data set reporting rates, program data elements and program indicators are supported. Note that for program data elements, the data element must be prefixed with the program identifier. For the `pe` part, relative periods as well as fixed periods are supported. For the `ou` part, user org units, org unit levels and org unit groups as well as individual org units are supported. Consult the *Analytics* chapter > the *Dimensions and items* and *The dx dimension* sections for a full explanation.

##### 回复{ #response } 

```
201 创建
```

```json
{
  "httpStatus": "Created",
  "httpStatusCode": 201,
  "status": "OK",
  "response": {
    "responseType": "ObjectReport",
    "uid": "pG4bBTMiCqO",
    "klass": "org.hisp.dhis.dataexchange.aggregate.AggregateDataExchange",
    "errorReports": []
  }
}
```

#### 更新汇总数据交换{ #update-aggregate-data-exchange } 

```
PUT /api/aggregateDataExchanges/{id}
```

```
内容类型：application/json
```

请求有效载荷与创建操作相同。

##### 回复{ #response } 

```
200 确定
```

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "response": {
    "responseType": "ObjectReport",
    "uid": "pG4bBTMiCqO",
    "klass": "org.hisp.dhis.dataexchange.aggregate.AggregateDataExchange",
    "errorReports": []
  }
}
```

#### 获取汇总数据交换{ #get-aggregate-data-exchange } 

```
GET /api/aggregateDataExchanges/{id}
```

``` 
接受：application/json
```

检索端点遵循常规的元数据端点字段过滤和对象过滤语义。JSON 是唯一受支持的响应格式。

##### 回复{ #response } 

```
200 确定
```

#### 删除汇总数据交换{ #delete-aggregate-data-exchange } 

```
DELETE /api/aggregateDataExchanges/{id}
```

##### 回复{ #response } 

```
204 无内容
```

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "response": {
    "responseType": "ObjectReport",
    "uid": "pG4bBTMiCqO",
    "klass": "org.hisp.dhis.dataexchange.aggregate.AggregateDataExchange",
    "errorReports": []
  }
}
```

#### 运行汇总数据交换{ #run-aggregate-data-exchange } 

聚合数据交换可以通过向以下端点发送 POST 请求的方式直接运行：

```
POST /api/aggregateDataExchanges/{id}/exchange
```

##### 回复{ #response } 

```
200 确定
```

```json
{
  "responseType": "ImportSummaries",
  "status": "SUCCESS",
  "imported": 36,
  "updated": 0,
  "deleted": 0,
  "ignored": 0,
  "importSummaries": ["<import summaries here>"]
}
```

将返回导入摘要，说明数据交换的结果，包括导入、更新、删除和忽略的数据值数量。

#### 获取源数据{ #get-source-data } 

可通过向以下端点发送 GET 请求，以分析数据格式检索汇总数据交换源请求的汇总数据：

```
GET /api/aggregateDataExchanges/{id}/sourceData
```

```
接受：application/json
```

##### 回复{ #response } 

```
200 确定
```

##### 查询参数{ #query-parameters } 

| 查询参数 | 需要 | 描述                                                  | 选项                       |
| --------------- | -------- | ------------------------------------------------------------ | ----------------------------- |
| 输出标识主题  | 不       | 覆盖数据响应的输出标识符方案。 | UID| 代码| 属性：{ID} |

响应有效载荷格式与分析 API 端点相同。该端点可用于调试。更多详情请查阅分析 API 指南。

#### 获取源数据值集{ #get-source-data-value-sets } 

通过向以下端点发送 GET 请求，可以数据值集格式检索汇总数据交换源请求的汇总数据：

```
GET /api/aggregateDataExchanges/{id}/sourceDataValueSets
```

```
接受：application/json
```

##### 回复{ #response } 

```
200 确定
```

##### 查询参数{ #query-parameters } 

| 查询参数 | 需要 | 描述                                                  | 选项                       |
| --------------- | -------- | ------------------------------------------------------------ | ----------------------------- |
| 输出标识主题  | 不       | 覆盖数据响应的输出标识符方案。 | UID| 代码| 属性：{ID} |

响应有效载荷格式与数据值集 API 端点相同。该端点可用于调试。有关详细信息，请查阅数据值集 API 指南。

### 数据模型 { #data-model } 

汇总数据交换数据模型/有效载荷将在下一节中介绍。

| 领域                                             | 数据类型      | 强制的   | 描述                                                  |
| ------------------------------------------------- | -------------- | ----------- | ------------------------------------------------------------ |
| 名称                                              | 串         | 是的         | 汇总数据交换的名称。唯一。                     |
| 消息来源                                            | 目的         | 是的         | 汇总数据交换的来源。                          |
| source.params                                     | 目的         | 不          | 源请求参数。                               |
| source.params.periodTypes                         | 数组/字符串   | 不          | 允许用于覆盖源请求中周期的周期类型。 |
| 源请求                                   | 数组/对象   | 是的         | 来源请求。                                             |
| 源请求名称                              | 串         | 是的         | 请求源名称。                                      |
| 源请求可视化                     | 串         | 不          | 相关可视化对象的标识符。               |
| source.requests.dx                                | 数组/字符串   | 是的         | 源请求的数据元素、指标、数据集和计划指标的标识符。 |
| source.requests.pe                                | 数组/字符串   | 是的         | 源请求的固定周期和相对周期的标识符。 |
| source.requests.ou                                | 数组/字符串   | 是的         | 源请求的组织单位标识符。    |
| source.requests.filters                           | 数组（对象） | 不          | 源请求的过滤器。                              |
| source.requests.filters.dimension                 | 串         | 不          | 过滤器的尺寸标识符。                         |
| source.requests.filters.items                     | 数组/字符串   | 不          | 过滤器的项目标识符。                             |
| source.requests.inputIdScheme                     | 串         | 不          | 输入 ID 方案，可以是 `UID`、`CODE`、`ATTRIBUTE:{ID}`。     |
| source.requests.outputDataElementIdScheme         | 串         | 不          | 输出数据元素 ID 方案，可以是 `UID`、`CODE`、`ATTRIBUTE:{ID}`。 |
| source.requests.outputDataItemIdScheme         | 串         | 不          | Output data item ID scheme applies to data elements, indicators and program indicators, can be `UID`, `CODE`, `ATTRIBUTE:{ID}`. |
| source.requests.outputOrgUnitIdScheme             | 串         | 不          | 输出 org 单元 ID 方案，可以是 `UID`、`CODE`、`ATTRIBUTE:{ID}`。 |
| source.requests.outputIdScheme                    | 串         | 不          | 输出一般 ID 方案，可以是 `UID`、`CODE`、`ATTRIBUTE:{ID}`。 |
| 源目标                                     | 目的         | 是的         | 汇总数据交换的目标。                         |
| source.target.type                                | 串         | 是的         | Type of target, can be `EXTERNAL`, `INTERNAL`.               |
| source.target.api                                 | 目的         | 有条件 | 目标 API 信息，仅对`EXTERNAL`类型是必需的。  |
| source.target.api.url                             | 串         | 有条件 | Base URL of target DHIS 2 instance, do not include the `/api` part. |
| source.target.api.accessToken                     | 串         | 有条件 | 目标 DHIS 2 实例的访问令牌 (PAT)，用于 PAT 身份验证。 |
| source.target.api.username                        | 串         | 有条件 | 目标 DHIS 2 实例的用户名，用于基本身份验证。 |
| source.target.api.password                        | 串         | 有条件 | 目标 DHIS 2 实例的密码，用于基本身份验证。 |
| source.target.request                             | 目的         | 不          | 目标请求信息。                                  |
| source.target.request.dataElementIdScheme         | 串         | 不          | 输入数据元素 ID 方案，可以是 `UID`、`CODE`、`ATTRIBUTE:{ID}`。 |
| source.target.request.orgUnitIdScheme             | 串         | 不          | 输入 org 单位 ID 方案，可以是 `UID`、`CODE`、`ATTRIBUTE:{ID}`。 |
| source.target.request.categoryOptionComboIdScheme | 串         | 不          | 输入类别选项组合 ID 方案，可以是 `UID`、`CODE`、`ATTRIBUTE:{ID}`。 |
| source.target.request.idScheme                    | 串         | 不          | 输入一般 ID 方案，可以是 `UID`、`CODE`、`ATTRIBUTE:{ID}`。 |
| source.target.request.importStrategy                    | 串         | 不          | 导入策略，可以是 `CREATE_AND_UPDATE`、 `CREATE`、 `UPDATE`、 `DELETE`。 |
| source.target.request.skipAudit                    | Boolean         | 不          | 跳过审计，即不生成审计值。提高性能的代价是无法审计更改。需要 "F_SKIP_DATA_IMPORT_AUDIT "授权。 |
| source.target.request.dryRun                    | Boolean         | 不          | 是在服务器上保存更改，还是只返回导入摘要。 |

### 错误处理{ #error-handling } 

通过标识符运行数据交换时，有关操作结果的信息将在响应有效载荷中提供。响应将包含导入摘要列表，即每个源请求一个导入摘要。导入摘要将指出从源实例检索数据和在目标实例导入数据时可能产生的任何冲突。

### 例子 { #examples } 

#### 使用标识符方案代码进行外部数据交换{ #external-data-exchange-with-identifier-scheme-code } 

This example will demonstrate how to exchange data based on program indicators in the source DHIS 2 instance and data elements in the target instance. The `code` identifier scheme, which means the data exchange will use the `code` property on the metadata to reference the data. Using codes is useful when the ID properties don't match across DHIS 2 instances. The example will demonstrate how data can be aggregated in the source instance, including aggregation in time and the unit hierarchy, before being exchanged with the target instance.

该示例将使用 DHIS 2 的播放环境交换数据，并将位于 `https://play.dhis2.org/2.39` 的 2.39 版本作为*源实例*，将位于 `https://play.dhis2.org/2.38.2.1` 的 2.38 版本作为*目标实例*。请注意，随着新补丁版本的发布，URL 也会随之改变，因此请务必更新目标 URL。

* 登录**源**实例，导航到 "维护 "应用程序，观察是否存在三个程序指示器。

  * _BCG doses_ with code `BCG_DOSE`
  * _Measles doses_ with code `MEASLES_DOSE` 
  * _Yellow fever doses_ with code `YELLOW_FEVER_DOSE`

* 请注意，根组织单位是`塞拉利昂`，代码为`OU_525`。

* 登录**目标**实例，并导航至*维护*应用程序。创建三个数据元素，其中代码与前面提到的计划指标相匹配：

  * 名称 _BCG 剂量_ 和代码 `BCG_DOSE`
  * 名称_Measles doses_和代码`MEASLES_DOSE`。
  * 用代码`YELLOW_FEVER_DOSE`命名_黄热病剂量_

* 在**目标**实例中，创建一个新数据集，名称不限，如 _Data exchange_，选择新创建的数据元素树，并将数据集分配给根组织单位 _Sierra Leone_。

* Observe that the root org unit `Sierra Leone` has the code `OU_525`, which is equal to the source instance.

* 打开 HTTP 工具（如 _Postman_），用 JSON 格式拼凑出以下聚合数据交换有效载荷。
  ```
  POST /api/aggregateDataExchanges
  ```

  ```
  Content-Type: application/json
  ```

  ```json
  {
    "name": "Immunization doses program indicators to data elements",
    "source": {
      "requests": [
        {
          "name": "Immunization doses",
          "dx": [
            "BCG_DOSE",
            "MEASLES_DOSE",
            "YELLOW_FEVER_DOSE"
          ],
          "pe": [
            "202201"
          ],
          "ou": [
            "OU_525"
          ],
          "inputIdScheme": "code",
          "outputIdScheme": "code"
        }
      ]
    },
    "target": {
      "type": "EXTERNAL",
      "api": {
        "url": "https://play.dhis2.org/2.38.2.1",
        "username": "admin",
        "password": "district"
      },
      "request": {
        "idScheme": "code"
      }
    }
  }
  ```

* In this payload, observe that for the source request, program indicators are referred to using codes. The `inputIdScheme` is set to `code`, which means that the DHIS 2 analytics engine will use the `code` property to reference metadata, such as program indicators. The `outputIdScheme` is set to `code`, which means that the `code` property will be used to reference metadata in the output. For the target request, the `idScheme` is also set to `code`, which means that the `code` property will be used to reference metadata during the data value import. Note that ID schemes can be specified per entity type, such as `dataElementIdScheme` and `orgUnitIdScheme`. 

* 请注意，期间为`202201`或_2022 年1 月_。请注意，时间段可能需要随着时间的推移而更新。

* 运行 POST 请求，创建聚合数据交换定义。确认 API 响应状态代码为 201。注意数据交换的名称是唯一的。通过查看响应体中的 `response` > `uid`，记下新创建对象的 ID。

* 通过 POST 请求运行新创建的数据交换（用数据交换的 ID 替换 `{id}`）：
  ```
  POST /api/aggregateDataExchanges/{id}/exchange
  ```

* 确认 API 响应表明已成功导入三个数据值。 
  ```json
  {
    "responseType": "ImportSummaries",
    "status": "SUCCESS",
    "imported": 3,
    "updated": 0,
    "deleted": 0,
    "ignored": 0
  }
  ```

* 在**目标**实例中，导航到*数据录入*应用程序，选择组织单位_塞拉利昂_、数据集_数据交换_和期间_2022 年 1 月_。观察交换的数据值在表单中是否可见。

总而言之，在此示例中，事件数据记录在组织单位层次结构中从设施级别汇总到国家级别，并使用计划指标从事件数据汇总到每月数据值。通过使用`代码`属性引用元数据，数据值与目标 DHIS 2 实例交换。



# I18n{ #i18n } 

## 语言环境 { #webapi_locales } 

DHIS2 支持用户界面和数据库的翻译
内容。

### UI语言环境 { #ui-locales } 

您可以通过以下方式检索用户界面的可用区域设置
以下资源带有 GET 请求。 XML 和 JSON 资源
支持表示。

    / api / 33 / locales / ui

### 数据库内容语言环境 { #database-content-locales } 

You can retrieve and create locales for the database content with GET and POST requests through the `dbLocales` resource. XML and JSON resource representations are supported. To POST data, there are two required parameters: `country` and `language`. 

    /api/locales/dbLocales?country=US&language=en

## 翻译 { #webapi_translations } 

DHIS2 允许翻译数据库内容。 
如果元数据可以翻译，那么它就会有一个 `translations` 属性。

That means you can retrieve and update translations using metadata class resources such as `api/dataElements`, `api/organisationUnits`, `api/dataSets`, etc.

### 获取翻译 { #get-translations } 

您可以向 `api/dataElements/{dataElementUID}` 发送 GET 请求，获取 DataElement 等元数据对象的翻译。

响应包含 DataElement 的全部详细信息，其中还包括 `translations` 属性，如下所示

```json
{
  "id": "fbfJHSPpUQD",
  "href": "https://play.dhis2.org/dev/api/29/dataElements/fbfJHSPpUQD",
  "created": "2010-02-05T10:58:43.646",
  "name": "ANC 1st visit",
  "shortName": "ANC 1st visit",
  "translations": 
  [
    {
      "property": "SHORT_NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Soin prénatal 1"
    },
    {
      "property": "NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    }
  ]
}
```
您也可以只获取对象的 `translations` 属性，方法是发送 GET 请求到 
`api/dataElements/{dataElementUID}/translations` 的 GET 请求。

```json
{
  "translations": 
  [
    {
      "property": "SHORT_NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Soin prénatal 1"
    },
    {
      "property": "NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    }
  ]
}
```

### 创建/更新翻译{ #createupdate-translations } 

您可以通过向 `api/dataElements/{dataElementUID}/translations` 发送具有相同 JSON 格式的 PUT 请求来创建翻译。

```json
{
  "translations": 
  [
    {
      "property": "SHORT_NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Soin prénatal 1"
    },
    {
      "property": "DESCRIPTION",
      "locale": "fr",
      "value": "description in french"
    },
    {
      "property": "FORM_NAME",
      "locale": "fr",
      "value": "name in french"
    }
  ]
}
```

或者，您也可以直接更新对象的有效载荷，其中包括 `translations` 属性。

向 `api/dataElements/{dataElementUID}` 发送 PUT 请求，完整对象有效载荷如下：

```json
{
  "id": "fbfJHSPpUQD",
  "created": "2010-02-05T10:58:43.646",
  "name": "ANC 1st visit",
  "shortName": "ANC 1st visit",
  "translations": 
  [
    {
      "property": "SHORT_NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Soin prénatal 1"
    },
    {
      "property": "NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    }
  ]
}
```

The status code will be `204 No Content` if the data value was successfully saved or updated, or `409 Conflict` if there was a validation error (e.g. more than one `SHORT_NAME` for the same `locale`).

下表列出了支持翻译的常用属性。

表格属性名称

| 财产名称 | 描述 |
|---|---|
| 名称 | 对象名称 |
| 简称 | 对象简称 |
| 描述 | 对象描述 |

下表列出了支持翻译的类。

表格类名

| 班级名称 | 描述 | 其他可翻译属性 |
|---|---|---|
| 数据元素类别选项 | 类别选项 | |
| 数据元素类别 | 类别 | |
| 数据元素类别组合 | 类别组合 | |
| 数据元素 | 数据元素 | |
| 数据元素组 | 数据元素组 | |
| 数据元素组集 | 数据元素组集 | |
| 指示符 | 指示符 | 分子描述、分母描述 |
| 指标类型 | 指标类型 | |
| 指标组 | 指标组 | |
| 指标组集 | 指标组设置 | |
| 组织单位 | 组织单位 | |
| 组织单位组 | 组织单位组 | |
| 组织单位组集 | 组织单位组套 | |
| 数据集 | 资料集 | |
| 部门 | 数据集部分 | |
| 验证规则 | 验证规则 | 说明 |
| 验证规则组 | 验证规则组 | |
| 程序 | 程序 | 注册日期标签，事件日期标签 |
| 程序阶段 | 程序阶段 | 执行日期标签, 到期日标签 |
| 跟踪实体属性 | 跟踪实体属性 | |
| 跟踪实体 | 跟踪实体 | |
| 关系类型 | 跟踪实体实例的关系类型 | fromToName, toFromName |
| 选项集 | 选项集 | |
| 选项 | 选项 | |
| 属性 | 元数据属性 | |
| 程序通知模板 | 计划通知模板 | 主题模板、消息模板 |
| 验证通知模板 | 验证通知模板 | 主题模板、消息模板 |
| 数据集通知模板 | 数据集通知模板 | 主题模板、消息模板 |
| 可视化 | 可视化 | 标题、副标题、rangeAxisLabel、baseLineLabel、targetLineLabel、domainAxisLabel |
| 程序规则行动 | 计划规则行动 | 内容 |
| 预测变量 | 预测变量 | 名称、简称、描述、生成器描述  |
| 验证规则 | 验证规则 | 名称、描述、指令、左侧表达式、右侧表达式 |

## 国际化 { #webapi_i18n } 

为了检索翻译字符串的键值对，您可以使用
*i18n* 资源。

    / api / 33 / i18n

端点位于 */api/i18n* 并且请求格式是一个简单的
键值对数组：

```json
[
  "access_denied",
  "uploading_data_notification"
]
```

请求必须是 *POST* 类型并使用 *application/json* 作为
内容类型。使用 curl 的示例，假设请求数据已保存
作为文件`keys.json`：

```bash
curl -d @keys.json "play.dhis2.org/demo/api/33/i18n" -X POST
  -H "Content-Type: application/json" -u admin:district
```

结果将如下所示：

```json
{
  "access_denied":"Access denied",
  "uploading_data_notification":"Uploading locally stored data to the server"
}
```





# 短信 { #sms } 

## 短消息服务（SMS） { #webapi_sms } 

本节介绍用于发送和接收短文本的 SMS Web API
消息。

### 出站短信服务 { #outbound-sms-service } 

Web API 支持使用 POST 方法发送外发 SMS。短信可以
发送到单个或多个目的地。一个或多个网关需要
在使用服务之前进行配置。如果出现以下情况，将不会发送短信
没有配置网关。它需要一组接收者和
JSON 格式的消息文本，如下所示。

    / api / sms / outbound

```json
{
  "message":"Sms Text",
  "recipients": [
    "004712341234",
    "004712341235"
  ]
}
```

> **Note**
>
> Recipients list will be partitioned if the size exceeds `MAX_ALLOWED_RECIPIENTS` limit of 200.

Web API 也支持查询参数版本，但
参数化 API 只能用于发送短信到单个
目的地。

    / api / sms / outbound？message = text＆recipient = 004712341234

可以使用GET资源提取出站邮件。

    GET / api / sms / outbound
    GET / api / sms / outbound？filter = status：eq：SENT
    GET / api / sms / outbound？filter = status：eq：SENT＆fields = *

可以使用DELETE资源删除出站邮件。

    删除/ api / sms / outbound / {uid}
    删除/ api / sms / outbound？ids = uid1，uid2

#### 网关响应码 { #gateway-response-codes } 

网关可以使用以下响应代码进行响应。



表：网关响应代码

| 响应代码 | 回复信息 | 详细说明 |
|---|---|---|
| RESULT_CODE_0 | 成功 | 信息已成功发送 |
| RESULT_CODE_1 | 预定 | 信息已成功排定 |
| RESULT_CODE_22 | 内部致命错误 | 内部致命错误 |
| RESULT_CODE_23 | 认证失败 | 验证凭据不正确 |
| RESULT_CODE_24 | 数据验证失败 | 请求中提供的参数不正确 |
| RESULT_CODE_25 | 积分不足 | 信用不足以传递信息 |
| RESULT_CODE_26 | 没有上游信贷 | 没有上游信贷 |
| RESULT_CODE_27 | 超过您的每日限额 | 您已超过每日配额 |
| RESULT_CODE_40 | 暂不可用 | 服务暂时中断 |
| RESULT_CODE_201 | 超过最大批量 | 超过最大批量 |
| RESULT_CODE_200 | 成功 | 请求已成功完成 |
| RESULT_CODE_202 | 无争议 | 信息将被处理 |
| RESULT_CODE_207 | 多状态 | 向应用程序接口提交了多条信息，但并非所有信息的状态都相同 |
| 结果_代码_400 | 不情之请 | 验证失败（如缺少/无效参数或标头） |
| RESULT_CODE_401 | 违例 | 验证失败。这也可能是 IP 锁定设置造成的 |
| RESULT_CODE_402 | 需要付款 | 发送信息的信用不足 |
| RESULT_CODE_404 | 未找到 | 资源不存在 |
| RESULT_CODE_405 | 方法不允许 | 资源不支持 Http 方法 |
| RESULT_CODE_410 | 逝去的 | 手机号码被屏蔽 |
| RESULT_CODE_429 | 要求太多 | 通用速率限制误差 |
| RESULT_CODE_503 | 服务不可用 | 我们的平台出现临时错误，请重试 |

### 入站短信服务 { #inbound-sms-service } 

Web API 支持使用 POST 收集传入的 SMS 消息
方法。路由到 DHIS2 Web API 的传入消息可以是
使用此 API 接收。 API 收集入站 SMS 消息和
根据短信内容（SMS
命令）。下面给出了 JSON 格式的示例负载。文本，
发起者、接收日期和发送日期是强制性参数。这
其余是可选的，但系统将使用这些默认值
参数。

    / api / sms / inbound

```json
{
  "text": "sample text",
  "originator": "004712341234",
  "gatewayid": "unknown",
  "receiveddate": "2016-05-01",
  "sentdate":"2016-05-01",
  "smsencoding": "1",
  "smsstatus":"1"
}
```

可以使用GET resourcef获取入站消息

    GET / api / sms / inbound
    GET / api / sms / inbound？fields = *＆filter = smsstatus = INCOMING

可以使用DELETE资源删除入站邮件

    删除/ api / sms / inbound / {uid}
    删除/ api / sms / inbound？ids = uid1，uid2

导入所有未解析的消息

    POST /api/sms/入站/导入



表格用户查询参数

| 参数 | 类型 | 描述 |
|---|---|---|
| 信息 | 串 | 这是一个必填参数，包含实际文本信息。 |
| 开山祖师 | 串 | 这是必选参数，用于显示该信息的实际发送人。 |
| 网关 | 串 | 这是一个可选参数，提供网关 ID。如果不存在，将存储默认文本 "UNKNOWN"（未知 |
| 接收时间 | 日期 | 这是一个可选参数。它是网关收到信息的时间戳。 |

### 网关服务管理 { #gateway-service-administration } 

Web API 公开资源，这些资源提供了一种配置和
更新短信网关配置。

可以使用 GET 检索配置的不同网关的列表
方法。

    GET /api/33/gateways

还可以使用特定网关类型检索配置
获取方法。

    GET /api/33/gateways/{uid}

可以使用 POST 添加新的网关配置。 POST api 需要类型请求参数，目前它的值可以有一个 *http,bulksms,clickatell,smpp*。第一个添加的网关将设置为默认值。一次只能默认一个网关。默认网关只能通过其 api 更改。如果删除了默认网关，则列表中的下一个网关将自动变为默认网关。

    POST / api / 33 / gateways

可以通过提供如下所述的uid和网关配置来更新配置

    PUT /api/33/gateways/{uids}

可以使用 DELETE 删除特定网关类型的配置
方法。

    删除/ api / 33 / gateways / {uid}

可以检索和更新默认网关。

    GET /api/33/gateways/default

可以使用PUT方法设置默认网关。

    PUT /api/33/gateways/default/{uid}

### 网关配置 { #gateway-configuration } 

Web API 允许您创建和更新网关配置。对于每个
网关类型 JSON 有效负载中有不同的参数。
下面给出了每个网关的示例 JSON 有效负载。 POST 用于
create 和 PUT 以更新配置。标头参数可用于
GenericHttpGateway 将一个或多个参数作为 http 标头发送的情况。

#### Clickatell{ #clickatell } 

```json
{
  "type" : "clickatell",
  "name" : "clickatell",
  "username": "clickatelluser",
  "authToken": "XXXXXXXXXXXXXXXXXXXX",
  "urlTemplate": "https://platform.clickatell.com/messages"
}
```

#### 散装 { #bulksms } 

```json
{
  "type": "bulksms",
  "name": "bulkSMS",
  "username": "bulkuser",
  "password": "abc123"
}
```

#### SMPP网关 { #smpp-gateway } 

```json
{
  "type": "smpp",
  "name": "smpp gateway2",
  "systemId": "smppclient1",
  "host": "localhost",
  "systemType": "cp",
  "numberPlanIndicator": "UNKNOWN",
  "typeOfNumber": "UNKNOWN",
  "bindType": "BIND_TX",
  "port": 2775,
  "password":"password",
  "compressed": false
}
```

#### 通用HTTP { #generic-http } 

```json
{
  "type": "http",
  "name": "Generic",
  "configurationTemplate": "username=${username}&password=${password}&to=${recipients}&countrycode=880&message=${text$}&messageid=0",
  "useGet": false,
  "sendUrlParameters":false,
  "contentType": "APPLICATION_JSON",
  "urlTemplate":"https://samplegateway.com/messages",
  "parameters": [
    {
      "header": true,
      "encode": false,
      "key": "username",
      "value": "user_uio",
      "confidential": true
    },
    {
      "header": true,
      "encode": false,
      "key": "password",
      "value": "123abcxyz",
      "confidential": true
    },
    {
      "header": false,
      "encode": false,
      "key": "deliveryReport",
      "value": "yes",
      "confidential": false
    }
  ],
  "isDefault": false
}
```

在通用的http网关中，可以添加任意数量的参数。



表：通用短信网关参数

| 参数 | 类型 | 描述 |
|---|---|---|
| 名称 | 串 | 网关名称 |
| 配置模板 | 串 | 配置模板，其中会填充参数值。例如，上面给出的配置模板将这样填充 { "to"："+27001234567", "body"："Hello World!"} |
| 使用获取 | Boolean | 默认使用 Http POST 方式。要将其改为 Http GET，用户可以将 useGet 标志设为 true。 |
| 内容类型 | 串 | 内容类型指定发送的数据类型。支持的类型有 APPLICATION_JSON、APPLICATION_XML、FORM_URL_ENCODED、TEXT_PLAIN。 |
| urlTemplate | 串 | 网址模板 |
| 页眉 | Boolean | 如果需要在 Http 标头中发送参数 |
| 加码 | Boolean | 如果参数需要编码 |
| 密钥 | 串 | 参数键 |
| 价值 | 串 | 参数值 |
| 保密 | Boolean | 如果参数保密。该参数将不会通过 API 公开 |
| sendUrlParameters | Boolean | 如果选中此标记，则 urlTemplate 可以附加查询参数。如果网关 API 仅支持 HTTP GET，这一点就非常有用。urlTemplate 样本如下 `"urlTemplate": "https://samplegateway.com/messages?apiKey={apiKey}&to={recipients},content={text},deliveryreport={dp}"` |

如果配置保存成功则返回 HTTP.OK 否则 *Error*

## 短信命令 { #webapi_sms_commands } 

SMS 命令用于通过 SMS 收集数据。这些命令
属于特定的解析器类型。每个解析器都有不同的功能。

可以使用GET检索命令列表。

    GET /api/smsCommands

可以使用GET检索一个特定的命令。

    GET /api/smsCommands/uid

可以使用PUT更新一个特定的命令。

    PUT /api/smsCommands/uid

可以使用POST创建命令。

    POST / api / smsCommands

可以使用DELETE删除一个特定命令。

    删除/ api / smsCommands / uid

#### 短信命令类型 { #sms-command-types } 

| 类型 | 用法 |
|---|---|
|KEY_VALUE_PARSER | 用于汇总数据收集。|
|ALERT_PARSER | 发送警报消息。|
|未注册_解析器 | 用于疾病监测病例报告。|
|TRACKED_ENTITY_REGISTRATION_PARSER | 用于跟踪器实体注册。|
|PROGRAM_STAGE_DATAENTRY_PARSER | 程序阶段的数据收集。 （根据phoneNumner确定TEI）|
|EVENT_REGISTRATION_PARSER | 单个事件的注册。这用于事件程序。|

#### Android的SMS命令类型 { #sms-command-types-for-android } 

当互联网不可用时，Android应用程序可以使用这些命令类型通过SMS提交数据。 SMS由Android应用程序组成。

| 类型 | 用法 |
|---|---|
|AGGREGATE_DATASET | 用于汇总数据收集。|
|注册 | 用于跟踪器实体注册。|
|TRACKER_EVENT | 跟踪器程序的事件注册。|
|SIMPLE_EVENT | 活动节目的活动注册。|
|关系 | 建立关系。|
|删除 | 删除事件。|



# 用户数 { #users } 

## 用户数 { #webapi_users } 

本节介绍用户资源方法。

    /api/users

### 用户查询 { #webapi_users_query } 

*users* 资源提供了额外的查询参数
标准参数（例如分页）。在用户处查询用户
资源可以使用以下参数。

表格用户查询参数

| 参数 | 类型 | 描述 |
|---|---|---|
| 询问 | 文本 | 名、姓、用户名和电子邮件的查询值，区分大小写。 |
| 电话号码 | 文本 | 查询电话号码。 |
| 管理 | 假 | 真 | 筛选当前用户是否可以通过受管用户组关系管理返回的用户。 |
| authSubset | 假 | 真 | 筛选返回的用户是否拥有当前用户权限的子集。 |
| 最后登录 | 日期 | 筛选登录日期晚于给定日期的用户。 |
| 非活动月 | 数 | 筛选在给定月数内未登录的用户。 |
| InactiveSince | 日期 | 筛选未在给定日期后登录的用户。 |
| 自我注册 | 假 | 真 | 过滤已自行注册用户账户的用户。 |
| 邀请状态 | 无 | 全部 | 过期 | 筛选用户邀请，包括所有邀请或过期邀请。 |
| 欧 | 识别码 | 筛选与给定标识符的组织单位有关联的用户。 |
| 用户机构单位 | 假 | 真 | 筛选与当前登录用户相关联的组织单位的用户。 |
| 包括儿童 | 假 | 真 | 包括 ou 参数的所有子组织单位的用户。 |
| 页码 | 数 | 页码。 |
| 页面大小 | 数 | 页面大小。 |
| 组织单位边界 | data_capture &#124; data_output &#124; tei_search | 在给定边界内，搜索仅限于与当前用户有共同组织单位的用户        |

以“konan”作为名字或姓氏的最多 10 个用户的查询（案例
不敏感）与当前相比拥有部分权限的人
用户：

    /api/users?query=konan&authSubset=true&pageSize=10

检索最初自行注册的所有用户账户：

```
/api/users?selfRegistered=true
```

#### 按标识符查询用户{ #user-query-by-identifier } 

您可以使用以下语法检索具有特定标识符的用户的完整信息。

```
/api/users/{id}
```

某个标识符的示例如下：

```
/api/users/OYLGMiazHtW
```

### 用户查找 { #user-lookup } 

用户查找 API 提供了一个端点来检索用户
响应包含最少的信息集。它不需要一个
特定权限，适合客户端查询信息
例如用户名和姓氏，不会暴露潜在的敏感信息
用户信息。

```
/ api / userLookup
```

用户查找端点有两种方法。

#### 通过标识符查找用户 { #user-lookup-by-identifier } 

您可以使用以下API请求按标识符进行用户查找。

```
GET / api / userLookup / {id}
```

用户 `id` 将与以下用户属性匹配
按照指定的顺序：

- 用户标识
- 用户名
- 用户名

请求示例如下所示：

```
/ api / userLookup / QqvaU7JjkUV
```

该响应将包含有关用户的最少信息。

```json
{
  "id": "QqvaU7JjkUV",
  "username": "nkono",
  "firstName": "Thomas",
  "surname": "Nkono",
  "displayName": "Thomas Nkono"
}
```

#### 用户查询 { #user-lookup-query } 

您可以使用以下API请求向用户查询。

```
GET / api / userLookup？query = {string}
```

`query` 请求参数是强制性的。查询`string`将被匹配
针对以下用户属性：

- 名字
- 姓
- 电子邮件
- 用户名

除 `query` 参数外，还可通过 `orgUnitBoundary` 参数限制搜索，如上文用户参数表所述。
orgUnitBoundary "参数限制搜索，如上文用户参数表所述。

请求示例如下所示：

```
/ api / userLookup？query = John
```

响应将包含有关与请求匹配的用户的信息。

```json
{
  "users": [
    {
      "id": "DXyJmlo9rge",
      "username": "jbarnes",
      "firstName": "John",
      "surname": "Barnes",
      "displayName": "John Barnes"
    },
    {
      "id": "N3PZBUlN8vq",
      "username": "jkamara",
      "firstName": "John",
      "surname": "Kamara",
      "displayName": "John Kamara"
    }
  ]
}
```

### 用户帐户创建和更新 { #webapi_users_create_update } 

通过 API 支持创建和更新用户。一个基本的
创建用户的有效负载类似于以下示例。注意密码
将以纯文本形式发送，因此请记住为网络传输启用 SSL/HTTPS。

```json
{
  "id": "Mj8balLULKp",
  "firstName": "John",
  "surname": "Doe",
  "email": "johndoe@mail.com",
  "userCredentials": {
    "id": "lWCkJ4etppc",
    "userInfo": {
    "id": "Mj8balLULKp"
  },
  "username": "johndoe123",
  "password": "Your-password-123",
  "skype": "john.doe",
  "telegram": "joh.doe",
  "whatsApp": "+1-541-754-3010",
  "facebookMessenger": "john.doe",
  "avatar": {
    "id": "<fileResource id>"
  },
  "userRoles": [
    {
      "id": "Ufph3mGRmMo"
    }
  ]
  },
  "organisationUnits": [
    {
      "id": "Rp268JB6Ne4"
    }
  ],
  "userGroups": [
    {
      "id": "wl5cDMuUhmF"
    }
  ]
}
```

```bash
curl -X POST -d @u.json "http://server/api/33/users" -u user:pass 
  -H "Content-Type: application/json" 
```

在用户创建负载中，仅在导入时支持用户组
或一次*发布*一个用户。如果您尝试创建多个
user 在指定用户组时，您将不会收到错误，并且
将创建用户，但不会分配用户组。这是设计使然
并且由于用户和用户之间的多对多关系而受到限制
用户组，其中用户组是关系的所有者。更新
或者创建多个用户和他们的用户组，考虑一个程序来*POST*
一次一个，或 *POST* 所有用户，然后执行另一个操作
在指定新用户的标识符的同时更新他们的用户组。

创建用户时，有效载荷还可能包含用户设置。
这些设置将作为 `settings` 对象添加到根对象中。
例如，每个键值对都会成为`settings`对象中的一个成员：
```json
{
    "id": "Mj8balLULKp",
    "firstName": "John",
    "surname": "Doe",
    "settings": {
        "keyUiLocale": "de"
    },
    //...
}
```

创建用户后，*Location* 标头与
新生成的 ID（你也可以使用 `/api/system/id` 提供你自己的
端点）。然后可以使用相同的有效负载进行更新，但请记住
然后使用 *PUT* 而不是 *POST* 并且端点现在是`/api/users/ID`。

```bash
curl -X PUT -d @u.json "http://server/api/33/users/ID" -u user:pass 
  -H "Content-Type: application/json" 
```

有关可用的全部有效负载的更多信息，请参见`/ api / schemas / user`。

有关上传和检索用户头像的更多信息，请参阅
`/fileResources` 端点。

### 用户帐户邀请 { #webapi_user_invitations } 

The Web API supports inviting people to create user accounts through the
`invite` resource. To create an invitation you should POST a user in XML
or JSON format to the invite resource. A specific username can be forced
by defining the username in the posted entity. By omitting the username,
the person will be able to specify it herself. The system will send out
an invitation through email. This requires that email settings have been
properly configured.

邀请资源可用于安全地
允许人们在其他人不知道密码的情况下创建帐户
或通过以纯文本形式传输密码。用于的有效载荷
邀请与创建用户相同。 JSON 格式的示例负载
看起来像这样：

```json
{
  "firstName": "John",
  "surname": "Doe",
  "email": "johndoe@mail.com",
  "userCredentials": {
    "username": "johndoe",
    "userRoles": [{
      "id": "Euq3XfEIEbx"
    }]
  },
  "organisationUnits": [ {
    "id": "ImspTQPwCqd"
  } ],
  "userGroups": [ {
    "id": "vAvEltyXGbD"
  }]
}
```

用户邀请实体可以这样发布：

```bash
curl -d @invite.json "localhost/api/33/users/invite" -u admin:district
  -H "Content-Type:application/json" 
```

要同时向多个用户发送邀请，您必须使用
格式略有不同。对于 JSON：

```json
{
  "users": [ {
    "firstName": "John",
    "surname": "Doe",
    "email": "johndoe@mail.com",
    "userCredentials": {
      "username": "johndoe",
      "userRoles": [ {
        "id": "Euq3XfEIEbx"
      } ]
    },
    "organisationUnits": [ {
      "id": "ImspTQPwCqd"
      } ]
    }, {
    "firstName": "Tom",
    "surname": "Johnson",
    "email": "tomj@mail.com",
    "userCredentials": {
      "userRoles": [ {
        "id": "Euq3XfEIEbx"
      } ]
    },
    "organisationUnits": [ {
      "id": "ImspTQPwCqd"
      } ]
    }
  ]
}
```

要创建多个邀请，您可以将有效负载发布到
api/users/invites 资源如下：

```bash
curl -d @invites.json "localhost/api/33/users/invites" -u admin:district
  -H "Content-Type:application/json"
```

发送用户账号邀请有一定的要求
出去：

  - 电子邮件SMTP服务器必须在服务器上正确配置。

  - 被邀请的用户必须指定了有效的电子邮件。

  - 如果指定了用户名，则它不得已被其他人使用
    现有用户。

如果不满足这些要求中的任何一个，邀请资源将返回
带有 *409 Conflict* 状态代码和描述性消息。


### 用户登录（试验性）{ #webapi_user_login }

该端点不用于外部使用，除非你正在实施一个自定义登录应用程序，除非你有非常好的理由，否则你可能不应该这样做。

用户可以通过以下示例登录并获取会话 cookie：  
`POST` `/api/auth/login`  
正文为`JSON`：

```json
{
    "username": "username",
    "password": "password",
    "twoFactorCode": "two_factor_code"
}

```
成功的答复是这样的  

```json
{
    "loginStatus": "SUCCESS",
    "redirectUrl": "/dhis-web-dashboard/"
}
```


### 用户账户确认邀请（试验性）{ #webapi_user_confirm_invite }

> **重要**  
> 在确认邀请之前，管理员用户应设置用户并发送邀请链接。为了完成邀请，前提条件还包括在 `userinfo` 数据库表中为该用户添加一些必要的数据（`idToken`, `restoreToken`, `restoreExpiry`）。

用户可以通过以下端点确认邀请：  
`POST` `/api/auth/invite`  
并附带 `JSON` 主体：

```json
{
    "username": "TestUser",
    "firstName": "Test",
    "surname": "User",
    "password": "Test123!",
    "email": "test@test.com",
    "phoneNumber": "123456789",
    "g-recaptcha-response": "recaptchaResponse",
    "token": "aWRUb2tlbjpJRHJlc3RvcmVUb2tlbg=="
}
```

> **Note**  
> The `g-recaptcha-response` value would be populated through the use of the core Login App UI normally.  
> The `token` field expects a Base64-encoded value. In this example, decoded, it's `idToken:IDrestoreToken`. This would be sent by email to the invited user (it is actually created internally (and populated in the database) during the `/api/users/invite` operation).

成功的答复是这样的  

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Account updated"
}
```

### 用户账户注册（试验性）{ #webapi_user_registration }
用户可通过以下端点直接注册：  
`POST` `/api/auth/registration` 带有 `JSON` 主体：  

```json
{
    "username": "testSelfReg",
    "firstName": "test",
    "surname": "selfReg",
    "password": "P@ssword123",
    "email": "test@test.com",
    "phoneNumber": "12345oooo",
    "g-recaptcha-response": "recap response"
}

```

成功的答复是这样的  

```json
{
    "httpStatus": "Created",
    "httpStatusCode": 201,
    "status": "OK",
    "message": "Account created"
}
```

### 用户忘记密码（试验性）{ #webapi_user_forgot_password }

This endpoint is used to trigger the forgotten password flow. It can be triggered by supplying the username or email of the user whose password needs resetting.  
`POST` `/api/auth/forgotPassword` with `JSON` body:  

```json
{
    "emailOrUsername": "testUsername1"
}
```

成功响应会返回空的 `200 OK`。这将触发一封电子邮件发送给用户，允许他们重置密码。

### 用户密码重置（试验性）{ #webapi_user_password_reset }

Once a user has received an email with a link to reset their password, it will contain a token which can be used to reset their password.  
`POST` `/api/auth/passwordReset` with `JSON` body:  

```json
{
    "newPassword": "ChangeMe123!",
    "resetToken": "token-value-from-email-link"
}
```

成功响应将返回空的 `200 OK`。现在用户应该可以使用新密码登录了。


### 用户复制 { #webapi_user_replication }

要复制用户，您可以使用 *replica* 资源。复制一个
用户在调试或重现报告的问题时很有用
特定用户。您需要提供新的用户名和密码
您稍后将用于验证的复制用户。请注意，您
需要 ALL 权限才能执行此操作。要复制用户，您
可以发布如下所示的 JSON 有效负载：

```json
{
  "username": "user_replica",
  "password": "SecretPassword"
}
```

此有效负载可以发布到您提供的副本资源
要在 URL 中复制的用户标识符：

    / api / 33 / users / <uid> /副本

使用curl复制用户的示例如下所示：

```bash
curl -d @replica.json "localhost/api/33/users/N3PZBUlN8vq/replica"
  -H "Content-Type:application/json" -u admin:district
```

### 重置用户密码{ #webapi_user_reset }

用户管理员（拥有适当权限）可通过触发密码恢复来重置其他用户的账户。
触发密码恢复。一旦触发，就会向用户发送一封电子邮件
包含一个密码恢复链接。用户通过链接进入一个表单，可以
设置新密码。

To trigger this workflow for user `tH7WIiIJ0O3` use:

    POST /api/37/users/tH7WIiIJ0O3/reset

### 禁用和启用用户帐户 { #webapi_user_disable } 

可以将用户帐户标记为禁用。
禁用的用户无法再登录。

要将具有UID`tH7WIiIJ0O3`的用户标记为已禁用（需要具有适当权限的用户）：

    POST / api / 36 / users / tH7WIiIJ0O3 / disabled

要再次启用禁用的用户，请相应地使用（要求具有适当权限的用户）：

    POST / api / 36 / users / tH7WIiIJ0O3 / enabled

### 用户有效期 { #webapi_user_expiration } 

可以为用户帐户设置到期日期。
它标记了用户帐户已过期的时间点
并且无法再使用。过期的用户无法再登录。

要更新 UID 名为 `tH7WIiIJ0O3` 的用户的过期日期 
并将其设置为`2021-01-01`的日期（需要具有相应权限的用户）：

    POST / api / 36 / users / tH7WIiIJ0O3 / expired？date = 2021-01-01

取消设置到期日期，以使帐户永不过期
相应地使用（需要具有适当权限的用户）：

    POST / api / 36 / users / tH7WIiIJ0O3 /未过期

### 用户数据批准工作流程 { #user-data-approval-workflows } 

要查看用户可以访问哪些数据批准工作流和级别，
您可以按以下方式使用* dataApprovalWorkflows *资源：

```
GET / api / users / {id} / dataApprovalWorkflows
```

### 在连接到同一身份供应商账户的用户账户之间切换{ #switching-between-user-accounts-connected-to-the-same-identity-provider-account } 

如果[dhis.conf 中已启用链接账户]（../../../manage/performing-system-administration/dhis-core-version-master/installation.html#connecting-a-single-identity-provider-account-to-multiple-dhis2-accounts）且用户已通过 OIDC 登录，则用户可使用此 API 调用在链接至同一身份提供者账户的 DHIS2 账户之间切换：

```
GET /dhis-web-commons-security/logout.action?current={current_username}&switch={username_to_switch_to}
```

这样做的效果是注销当前用户并登录新用户。除了新用户最终会出现在 DHIS2 实例的默认页面上外，其他操作看起来都很顺利。

请注意，这个 API 调用将来可能会改变，但其一般功能将保持不变。

要查看可切换到的用户列表，请使用此 API 调用：

```
GET /api/account/linkedAccounts
```

## 当前用户信息 { #webapi_current_user_information } 

为了获取有关当前已验证用户的信息和
它与其他资源的关联，您可以使用 *me* 资源
（您也可以通过其旧名称 *currentUser* 来引用它）。目前
用户相关资源为您提供有用的信息
构建客户端，例如用于数据输入和用户管理。这
下面描述了这些资源及其用途。

提供有关您当前登录的用户的基本信息
in as，包括用户名、用户凭据、分配的组织
单位：

    / api / me

提供有关当前未读消息和解释的信息：

    / api / me / dashboard

为了更改密码，此端点可用于验证
新输入的密码。密码验证将基于
系统中配置的 PasswordValidationRules。这个端点支持
POST 和密码字符串应在 POST 正文中发送。

    / api / me / validatePassword

更改密码时，此端点（支持 POST）可用于
验证旧密码。密码字符串应在 POST 正文中发送。

    / api / me / verifyPassword

返回授予当前用户的权限集：

    / api / me / authorization

返回 true 或 false，表示当前用户是否已被
授予给定的`<auth>`授权：

    / api / me / authorization / <auth>

给出与当前用户相关的数据批准级别：

    / api / me / dataApprovalLevels

提供当前用户可以访问的数据批准工作流。
对于每个工作流程，显示用户可能看到的数据批准级别，以及
他们在每个级别上具有什么权限：

    / api / me / dataApprovalWorkflows



# 设置和配置 { #settings-and-configuration } 

## 系统设置 { #webapi_system_settings } 

您可以通过与
*系统设置*资源。系统设置是一个简单的键值对，
其中键和值都是纯文本字符串。保存或
更新系统设置，您可以向以下 URL 发出 *POST* 请求：

    / api / 33 / systemSettings / my-key？value = my-val

或者，您可以将设置值作为请求正文提交，
其中内容类型设置为“文本/纯文本”。例如，您可以使用
像这样卷曲：

```bash
curl "play.dhis2.org/demo/api/33/systemSettings/my-key" -d "My long value"
  -H "Content-Type: text/plain" -u admin:district
```

要批量设置系统设置，您可以发送带有
使用 POST 请求的每个系统设置键值对的属性和值：

```json
{
  "keyApplicationNotification": "Welcome",
  "keyApplicationIntro": "DHIS2",
  "keyApplicationFooter": "Read more at dhis2.org"
}
```

可以通过指定语言环境来设置可翻译设置键的翻译
可以指定的查询参数和翻译值
作为查询参数或与正文有效负载一起使用。查看示例网址：

    / api / 33 / systemSettings / <my-key>？locale = <my-locale>＆value = <my-translated-value>

您应该将 my-key 替换为您的真实密钥，并将 my-val 替换为您的真实密钥
价值。检索给定键的值（以 JSON 或纯文本形式）
您可以向以下 URL 发出 *GET* 请求：

    / api / 33 / systemSettings / my-key

或者，您可以将键指定为查询参数：

    / api / 33 / systemSettings？key =我的密钥

如果未找到密钥或密钥被标记为机密，则会像这样返回一个 `404` 响应：

```json
{
    "httpStatus": "Not Found",
    "httpStatusCode": 404,
    "status": "ERROR",
    "message": "Setting does not exist or is marked as confidential",
    "errorCode": "E1005"
}
```

您可以通过重复键以 JSON 形式检索特定的系统设置
查询参数：

```bash
curl "play.dhis2.org/demo/api/33/systemSettings?key=keyApplicationNotification&key=keyApplicationIntro"
  -u admin:district
```

您可以使用GET请求检索所有系统设置：

    / api / 33 / systemSettings

要检索给定可翻译键的特定翻译，您可以指定
作为查询参数的语言环境：

    / api / 33 / systemSettings / <my-key>？locale = <my-locale>

如果存在，则返回给定语言环境的翻译。否则默认
值被返回。如果没有为可翻译键指定语言环境，则用户默认
UI 语言环境用于获取正确的翻译。如果给定的翻译不是
现在，再次返回默认值。

可翻译键的优先级如下：

    指定的区域设置>用户的默认UI区域设置> defaut值

要删除系统设置，您可以向 URL 发出 *DELETE* 请求
类似于上面用于检索的那个。如果一个可翻译的键是
使用，所有现有的翻译也将被删除。

仅删除可翻译键的特定翻译，相同的 URL
至于添加翻译应该使用，空值应该是
假如：

    / api / 33 / systemSettings / <my-key>？locale = <my-locale>＆value =

可用的系统设置在下面列出。

表格系统设置

| 键 | 描述 | 可翻译 |
|---|---|---|
| keyUiLocale | 用户界面的地区语言 | 不 |
| keyDbLocale | 数据库的地域 | 不 |
| 关键分析显示属性 | 分析中要显示的属性。默认值："名称 | 不 |
| 键分析数字组分隔符 | 用于分隔数字组的分隔符 | 不 |
| keyCurrentDomainType | 尚未使用 | 不 |
| keyTrackerDashboardLayout | 用于跟踪捕捉 | 不 |
| 应用程序标题 | 应用程序标题。默认："DHIS2 | 是的 |
| keyApplicationIntro | 申请简介 | 是的 |
| 关键应用程序通知 | 申请通知 | 是的 |
| keyApplicationFooter | 应用程序左页脚 | 是的 |
| keyApplicationRightFooter | 应用程序右页脚 | 是的 |
| keyFlag | 应用标志 | 不 |
| keyFlagImage | 仪表板菜单中使用的标志 | 不 |
| 启动模块 | 应用程序的起始页。默认："dhis-web-dashboard-integration | 不 |
| 启动模块启用轻量级 | 渲染轻量级着陆页的起始页应用程序。默认值："false | 不 |
| 因子偏差 | 数据分析标准偏差系数。默认值："2d"。 | 不 |
| keyEmailHostName | 电子邮件服务器主机名 | 不 |
| keyEmailPort | 电子邮件服务器端口 | 不 |
| keyEmailTls | 使用 TLS。默认值："true | 不 |
| 关键电子邮件发件人 | 电子邮件发送人 | 不 |
| keyEmailUsername | 电子邮件服务器用户名 | 不 |
| KeyEmailPassword | 电子邮件服务器密码 | 不 |
| 最小密码长度 | 密码最小长度 | 不 |
| 最大密码长度 | 密码最大长度 | 不 |
| 键短信设置 | 短信配置 | 不 |
| 键缓存策略 | 缓存策略。默认："CACHE_6AM_TOMORROW | 不 |
| 键缓存性 | PUBLIC 或 PRIVATE。决定是否允许代理服务器缓存数据。 | 不 |
| 电话号码地区代码 | 电话区号 | 不 |
| 多组织单位表格 | 启用多组织单位表格。默认值："false | 不 |
| keyConfig || 不 |
| 密钥账户恢复 | 启用用户账户恢复。默认值："false | 不 |
| 键锁定多次登录失败 | 在多次登录失败后启用锁定访问功能 | 不 |
| googleAnalyticsUA | 用于跟踪网站使用情况的 Google Analytic UA 密钥 | 不 |
| 证书过期 | 要求更改用户账户密码。默认："0"（从不） | 不 |
| 凭据到期提醒 | 当证书接近失效日期时发出警报 | 不 |
| 凭证到期提醒天数 | 凭证到期警告应在实际到期前发送的天数。默认：28 | 不 |
| 账户到期提醒 | 向因设置了过期日期而账户即将过期的用户发送提示邮件。默认值："false | 不 |
| 账户过期天数 | 账户到期提醒应在实际到期前发送的天数。默认值：7 | 不 |
| keySelfRegistrationNoRecaptcha | 自助注册不需要 recaptcha。默认值："false | 不 |
| recaptchaSecret | Google API recaptcha 密钥。默认值：dhis2 play instance API secret，但这仅适用于本地实例，不适用于生产实例。 | 不 |
| recaptchaSite | Google API recaptcha 站点。默认值：dhis2 play instance API site，但这仅适用于本地实例，不适用于生产环境。 | 不 |
| keyCanGrantOwnUserAuthorityGroups 用户权限组 | 允许用户授予自己的用户角色。默认值："false | 不 |
| keySqlViewMaxLimit | SQL 视图的最大限制 | 不 |
| keyRespectMetaDataStartEndDatesInAnalyticsTableExport | 为 "true "时，分析将跳过不在类别选项开始和结束日期内的数据。默认值："false | 不 |
| keySkipDataTypeValidationInAnalyticsTableExport | 在导出分析表时跳过数据类型验证 | 不 |
| keyCustomLoginPageLogo | 自定义登录页面的徽标 | 不 |
| keyCustomTopMenuLogo | 自定义顶部菜单的徽标 | 不 |
| keyCacheAnalyticsDataYearThreshold | 超过此值（以年为单位）的分析数据将始终被缓存。0 "禁用此设置。默认值：0 | 不 |
| 分析财务年度开始 | 设置财务年度起始时间。默认：十月 | 不 |
| keyIgnoreAnalyticsApprovalYearThreshold 临界值 | 0 "对所有数据进行审批检查。"-1 "禁用审批检查。1 "或更高版本对所有新于 "1 "年的数据进行审批检查。 | 不 |
| keyAnalyticsMaxLimit | 分析记录的最大数量。默认值："50000 | 不 |
| 关键跟踪实体最大限制 | 跟踪实体的最大数量。默认值："50000 | 不 |
| 关键分析维护模式 | 将分析功能置于维护模式。默认值："false | 不 |
| keyAnalyticsPeriodYearsOffset | Defines the years' offset to be used in the analytics export process. If the year of a respective date is out of the offset the system sends back a warning message during the process. At this point, the period generation step is skipped. ie.: suppose the system user sets the offset value to `5`, and we are in the year 2023. It means that analytics will accept exporting dates from 2018 (inclusive) to 2028 (inclusive). Which translates to: [2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028]. NOTE: The offset will have a significant influence on resource usage. Higher values will trigger higher usage of memory RAM/HEAP and CPU. Setting negative numbers to this key will disable any kind of validation (which means no warnings) and the internal range of years will be used (1970 to current year plus 10) Default: 22 | 不 |
| keyDatabaseServerCpus | 数据库服务器 CPU 数量。默认："0"（自动） | 不 |
| keyLastSuccessfulAnalyticsTablesRuntime | 保存上次成功运行分析表的时间戳 | 不 |
| keyLastSuccessfulLatestAnalyticsPartitionRuntime | 保存上次成功运行最新分析分区的时间戳 | 不 |
| keyLastMonitoringRun | 保存上次监控运行的时间戳 | 不 |
| keyLastSuccessfulDataSynch | 保存上次成功同步数据值的时间戳 | 不 |
| keyLastSuccessfulEventsDataSynch | 保存上次成功同步事件程序数据的时间戳 | 不 |
| keyLastCompleteDataSetRegistrationSyncSuccess | 保存上次成功同步完整性的时间戳 | 不 |
| syncSkipSyncForDataChangedBefore | 指定用于跳过同步在此时间点之前更改的所有数据的时间戳 | 不 |
| keyLastSuccessfulAnalyticsTablesUpdate | 保存上次成功更新分析表的时间戳 | 不 |
| keyLastSuccessfulLatestAnalyticsPartitionUpdate | 保留上次成功更新分析分区的时间戳 | 不 |
| keyLastSuccessfulResourceTablesUpdate | 保存上次成功更新资源表的时间戳 | 不 |
| 键上次成功系统监控推送 | 保存上次成功推送系统监控的时间戳 | 不 |
| keyLastSuccessfulMonitoring | 保存上次成功监控的时间戳 | 不 |
| keyNextAnalyticsTableUpdate | 保存下一次分析表更新的时间戳 | 不 |
| 帮助页面链接 | 帮助页面链接。默认值："[https://dhis2.github.io/dhis2-docs/master/en/user/html/dhis2_user_manual_en.html](http://dhis2.github.io/dhis2-docs/master/en/user/html/dhis2_user_manual_en.html) | 不 |
| keyAcceptanceRequiredForApproval | 批准前必须验收。默认值："false | 不 |
| keySystemNotificationsEmail | 通过电子邮件发送系统通知 | 不 |
| 关键分析相对周期 | 用于分析的默认相对周期。默认值："LAST_12_MONTHS"（最近 12 个月 | 不 |
| keyRequireAddToView | 添加到查看对象列表时需要授权。默认值："false | 不 |
| keyAllowObjectAssignment | 允许在添加或更新时将对象分配给相关对象。默认值："false | 不 |
| keyUseCustomLogoFront | 启用在首页使用自定义徽标。默认值："false | 不 |
| keyUseCustomLogoBanner | 启用网站上的自定义横幅。默认值："false | 不 |
| keyDataImportStrictPeriods（关键数据严格导入期 || 不 |
| keyDataImportStrictPeriods（关键数据严格导入期 | 要求周期与数据集的周期类型相匹配。默认值："false | 不 |
| keyDataImportStrictDataElements | 要求数据元素成为数据集的一部分。默认值："false | 不 |
| keyDataImportStrictCategoryOptionCombos | 要求类别选项组合与数据元素的类别组合匹配。默认值："false | 不 |
| 关键数据导入严格组织单位 | 要求组织单位与数据集的分配相匹配。默认值："false | 不 |
| keyDataImportStrictAttributeOptionsCombos | 要求属性选项 combis 与数据集的类别组合匹配。默认值："false | 不 |
| keyDataImportStrictDataSetApproval | true： 如果给定数据值条目存在已批准的数据集，则不允许使用；false： 如果给定数据值条目存在尚未批准的数据集，则允许使用：如果给定的数据值条目存在尚未批准的数据集，则允许使用。默认值："true | 不 |
| keyDataImportStrictDataSetLocking | true：如果存在数据集，且输入项已过期，则不允许给定数据值输入项出现锁定异常；false：如果存在数据集，且输入项未过期或给定数据值输入项出现锁定异常，则允许给定数据值输入项出现锁定异常：如果存在数据集，且该数据集的条目未过期或存在锁定异常，则允许输入给定的数据值条目。默认值："true | 不 |
| keyDataImportStrictDataSetInputPeriods | true：如果存在数据集，但不允许输入输入期已关闭的给定数据值条目；false：如果存在数据集，但允许输入输入期已开放的给定数据值条目：如果存在允许输入特定数据值的输入期为开放的数据集。默认值："true | 不 |
| keyDataImportRequireCategoryOptionCombo | 要求指定类别选项组合。默认值："false | 不 |
| keyDataImportRequireAttributeOptionCombo | 要求指定属性选项组合。默认值："false | 不 |
| keyCustomJs | 在网站上使用自定义 JavaScript | 不 |
| keyCustomCss | 在网站上使用自定义 CSS | 不 |
| 关键日历 | 日历类型。默认值："iso8601"。 | 不 |
| 关键日期格式 | 显示日期的格式。默认值："yyyy-MM-dd"。 | 不 |
| keyStyle | DHIS2 网页使用的样式。默认值："light_blue/light_blue.css"。 | 不 |
| keyRemoteInstanceUrl | 用于连接远程实例的 Url | 不 |
| keyRemoteInstanceUsername | 用于连接远程 DHIS2 实例的用户名 | 不 |
| keyRemoteInstancePassword 密钥 | 用于连接远程 DHIS2 实例的密码 | 不 |
| keyGoogleMapsApiKey | 谷歌地图 API 密钥 | 不 |
| keyGoogleCloudApiKey | 谷歌云 API 密钥 | 不 |
| keyLastMetaDataSyncSuccess | 保存上次成功同步元数据的时间戳 | 不 |
| 已启用 keyVersionEnabled | 启用元数据版本管理 | 不 |
| keyMetadataFailedVersion | 保留元数据版本同步失败的详细信息 | 不 |
| keyMetadataLastFailedTime | 保留上次元数据同步失败的时间戳 | 不 |
| keyLastSuccessfulScheduledProgramNotifications || 不 |
| keyLastSuccessfulScheduledDataSetNotifications || 不 |
| keyRemoteMetadataVersion | 远程实例元数据版本的详细信息 | 不 |
| keySystemMetadataVersion | 系统元数据版本的详细信息 | 不 |
| keyStopMetadataSync | 停止元数据同步的标志 | 不 |
| 关键文件资源保留策略 | 确定与已删除或更新的值相关联的文件资源保留的时间长度。NONE，THREE_MONTHS，ONE_YEAR或FOREVER。 | 不 |
| 同步最大远程服务器可用性检查尝试次数 | 指定在同步工作失败前检查远程服务器可用性的次数。 | 不 |
| 同步最大尝试次数 | 指定同步工作的最大尝试次数 | 不 |
| 远程服务器可用性检查尝试之间的同步延迟（syncDelayBetweenRemoteServerAvailabilityCheckAttempts | 远程服务器可用性检查之间的延迟 | 不 |
| 最后成功数据统计 | 保留上次成功数据分析的时间戳 | 不 |
| keyHideDailyPeriods | 未使用 | 不 |
| 键隐藏周周期 || 不 |
| 键隐藏双周周期 | 用于隐藏/显示双周期的布尔标志 | 不 |
| 键隐藏月度周期 || 不 |
| 键隐藏双月周期 || 不 |
| keyGatherAnalyticalObjectStatisticsInDashboardViews（在仪表板视图中收集分析对象统计数据 | 在仪表板中查看对象时，是否收集对象的分析统计数据 | 不 |
| keyCountPassiveDashboardViewsInUsageAnalytics | 在使用分析中计算 "被动 "仪表盘浏览量（未选择特定仪表盘）。 | 不 |
| keyDashboardContextMenuItemSwitchViewType | 允许用户切换仪表板收藏夹的视图类型 | 是的 |
| keyDashboardContextMenuItemOpenInRelevantApp | 允许用户在相关应用程序中打开仪表板收藏夹 | 是的 |
| keyDashboardContextMenuItemShowInterpretationsAndDetails（键盘上下文菜单项目显示解释和细节 | 允许用户显示仪表盘收藏夹的解释和详细信息 | 是的 |
| keyDashboardContextMenuItemViewFullscreen | 允许用户全屏查看仪表板收藏夹 | 是的 |
| 工作岗位日程表分钟后 | If a job is in state `RUNNING` for this amount of minutes or longer without making progress in form of updating its `lastAlive` timestamp the job is considered stale and reset to `SCHEDULED` state | 不 |
| 工作岗位分钟后清理 | 当 "运行一次 "作业成功或失败后超过此分钟数时，该作业将被删除 | 不 |                                                                                                                                                                                                                        
| 工作最大延迟时间 | CRON 表达式触发的任务只能在一天中的目标时间与此小时数之间的窗口中触发。如果无法在该窗口内运行，则跳过执行，根据 CRON 表达式，下一次执行将是下一个目标执行时间。 | 不 |
| 工作日志调试低于秒数 | 执行间隔少于此秒数的作业会将其信息记录在调试信息中，而不是信息中。 | 不 |
| keyParallelJobsInAnalyticsTableExport | 返回用于处理分析表的并行工作的数量。其优先级高于 "keyDatabaseServerCpus"。默认值：-1 | 不 |

## 用户设置 { #webapi_user_settings } 

您可以通过与 *userSettings* 交互来操作用户设置
资源。用户设置是一个简单的键值对，其中键
并且值是纯文本字符串。用户设置将链接到
已针对 Web API 请求进行身份验证的用户。返回列表
在所有用户设置中，您可以向以下 URL 发送 *GET* 请求：

    / api / 33 / userSettings

用户未设置的用户设置，将回退到等效的
系统设置。只返回用户明确设置的值，
您可以将 ?useFallback=false 附加到上述 URL，如下所示：

    / api / 33 / userSettings？useFallback = false

要为当前经过身份验证的用户保存或更新设置，您可以
向以下 URL 发出 *POST* 请求：

    / api / 33 / userSettings / my-key？value = my-val

您可以指定要为其显式保存设置的用户
这个语法：

    / api / 33 / userSettings / my-key？user = username＆value = my-val

或者，您可以将设置值作为请求正文提交，
其中内容类型设置为“文本/纯文本”。例如，您可以使用
像这样卷曲：

```bash
curl "https://play.dhis2.org/demo/api/33/userSettings/my-key" -d "My long value"
  -H "Content-Type: text/plain" -u admin:district
```

例如，要将当前用户的 UI 语言环境设置为法语，您
可以使用以下命令。

```bash
curl "https://play.dhis2.org/demo/api/33/userSettings/keyUiLocale?value=fr" 
  -X POST -u admin:district
```

您应该将 my-key 替换为您的真实密钥，并将 my-val 替换为您的真实密钥
价值。要以纯文本形式检索给定键的值，您可以
对以下 URL 的 *GET* 请求：

    / api / 33 / userSettings / my-key

要删除用户设置，您可以向 URL 发出 *DELETE* 请求
类似于上面用于检索的那个。

可用的系统设置在下面列出。



表格用户设置

| 键 | 选项 | 描述 |
|---|---|---|
| keyStyle | light_blue/light_blue.css | green/green.css | vietnam/vietnam.css | 用户界面样式表 |
| 关键信息电子邮件通知 | 假 | 真 | 是否发送电子邮件通知。 |
| 关键信息短信通知 | 假 | 真 | 是否发送短信通知。 |
| keyUiLocale | 位置值 | 用户界面语言。 |
| keyDbLocale | 位置值 | 数据库内容本地化。 |
| 关键分析显示属性 | name | shortName | 在分析应用程序中显示元数据的属性。 |
| keyCurrentDomainType | all | aggregate | tracker | 在列表中显示的数据元素域类型。 |
| keyAutoSaveCaseEntryForm | 假 | 真 | 定期保存案件登记表。 |
| keyAutoSaveTrackedEntityForm | 假 | 真 | 定期保存个人登记表。 |
| keyAutoSaveDataEntryForm | 假 | 真 | 定期保存汇总数据输入表。 |
| keyTrackerDashboardLayout | 假 | 真 | Tracker dasboard 布局。 |

## 组态 { #webapi_configuration } 

要访问配置，您可以与 *configuration* 交互
资源。您可以通过 *Accept* 标头获取 XML 和 JSON 响应
或使用 .json 或 .xml 扩展名。你可以*GET*所有属性
配置来自：

    / api / 33 /配置

您可以将 *GET* 和 *POST* 请求发送到以下特定
资源：

    GET /api/33/configuration/systemId

    GET POST DELETE /api/configuration/feedbackRecipients

    GET POST DELETE /api/configuration/offlineOrganisationUnitLevel

    GET POST /api/configuration/infrastructuralDataElements

    GET POST /api/configuration/infrastructuralIndicators

    GET POST /api/configuration/infrastructuralPeriodType

    GET POST DELETE /api/configuration/selfRegistrationRole

    GET POST DELETE /api/configuration/selfRegistrationOrgUnit

    GET POST /api/facilityOrgUnitGroupSet

    GET POST /api/facilityOrgUnitLevel

对于 CORS allowlist 配置，您可以使用
数组作为有效载荷，使用 "application/json "作为
内容类型，例如

```json
["www.google.com", "www.dhis2.org", "www.who.int"]
```

    GET POST /api/33/configuration/corsAllowlist

对于 POST 请求，配置值应作为请求发送
有效载荷为文本。下表显示了适当的配置
每个属性的值。



表格配置值

| 配置属性 | 值 |
|---|---|
| 反馈收件人 | 用户组 ID |
| 离线组织单位级别 | 组织单位级别 ID |
| 基础设施数据元素 | 数据元素组 ID |
| 基础设施指标 | 指标组 ID |
| 基础设施周期类型 | 周期类型名称（如 "月度） |
| 自我注册角色 | 用户角色 ID |
| 自我注册组织单位 | 组织单位标识 |
| smtpPassword | SMTP 电子邮件服务器密码 |
| 远程服务器地址 | 远程服务器的 URL |
| 远程服务器用户名 | 用于远程服务器验证的用户名 |
| 远程服务器密码 | 远程服务器验证密码 |
| corsAllowlist | JSON URL 列表 |

例如，要设置反馈接收者用户组，您可以调用
以下 curl 命令：

```bash
curl "localhost/api/33/configuration/feedbackRecipients" -d "wl5cDMuUhmF"
  -H "Content-Type:text/plain"-u admin:district
```

## 只读配置 { #webapi_readonly_configuration_interface } 

要访问所有配置设置和属性，您可以使用只读配置端点。这将提供对 *UserSettings、SystemSettings 和 DHIS2 服务器配置*的只读访问权限。您可以通过 *Accept* 标头获得 XML 和 JSON 响应。您可以*获取*所有设置：

    / api / 33 / configuration / settings

您可以根据设置类型获得过滤设置：

    GET / api / 33 / configuration / settings / filter？type = USER_SETTING

    GET / api / 33 / configuration / settings / filter？type = CONFIGURATION

可以提供一种以上的类型：

    GET /api/33/configuration/settings/filter?type=USER_SETTING&type=SYSTEM_SETTING



表格设置类型值

| 值 | 描述 |
|---|---|
| 用户_设置 | 获取用户设置 |
| SYSTEM_SETTING | 获取系统设置 |
| 配置 | 获取 DHIS 服务器设置 |

> **注意**
>
>将在输出中提供机密字段，但没有值。

## 代币 { #webapi_tokens } 

*tokens* 资源提供对各种服务的访问令牌。

### Google服务帐号 { #webapi_tokens_google_service_account } 

您可以使用以下命令检索 Google 服务帐户 OAuth 2.0 访问令牌
对以下资源的 GET 请求。

    GET /api/tokens/google

令牌将在一定时间内有效，之后
必须从此资源请求另一个令牌。响应
包含匹配令牌到期的缓存控制标头。这
响应将包含以下 JSON 格式的属性。



表格令牌响应

| 物业 | 描述 |
|---|---|
| access_token | 对 Google 服务进行身份验证时使用的 OAuth 2.0 访问令牌。 |
| expires_in | 访问令牌过期前的秒数，通常为 3600 秒（1 小时）。 |
| client_id | 谷歌服务账户客户 ID。 |

假定已为DHIS2设置并配置了Google服务帐户。请查阅安装指南以获取更多信息。

## 静态内容 { #webapi_static_content } 

*staticContent* 资源允许您上传和检索自定义
DHIS2 中使用的徽标。该资源允许用户上传带有
关联的密钥，稍后可以使用密钥检索。只有 PNG
文件受支持，只能上传到`logo_banner` 和
`logo_front` 键。

    / api / 33 / staticContent



表格静态内容键

| 键 | 描述 |
|---|---|
| logo_banner | 左侧应用程序顶部菜单中的徽标。 |
| logo_front | 登录页面登录表格上方的徽标。 |

要上传文件，请将带有 *POST* 请求的文件发送至：

    POST / api / 33 / staticContent / <key>

请求将logo.png上传到`logo_front`键的示例：

```bash
curl -F "file=@logo.png;type=image/png" "https://play.dhis2.org/demo/api/33/staticContent/logo_front"
  -X POST -H "Content-Type: multipart/form-data" -u admin:district
```

使用相同的密钥上传多个文件将覆盖现有的
文件。这样，检索任何给定键的文件只会返回
最新上传的文件。

要检索徽标，您可以*获取*以下内容：

    GET /api/33/staticContent/<key>

Example of requests to retrieve the file stored for `logo_front`:

* 将“Accept: text/html”添加到 HTTP 标头。*__ 在这种情况下，如果未定义任何内容，端点将返回默认图像。找到自定义或默认图像时将返回图像流。

```bash
curl "https://play.dhis2.org/demo/api/33/staticContent/logo_front" 
  -H "Accept: text/html" -L -u admin:district
```

* 将“Accept: application/json”添加到 HTTP 标头。*__ 设置此参数后，如果未找到自定义徽标，端点将永远不会返回默认图像。相反，将返回一条错误消息。找到自定义图像后，此端点将返回一个 JSON 响应，其中包含相应图像的路径/URL。

```bash
curl "https://play.dhis2.org/demo/api/33/staticContent/logo_front" 
  -H "Accept: application/json" -L -u admin:district
```

成功和错误消息将如下所示：

```json
{
  "images": {
    "png": "http://localhost:8080/dhis/api/staticContent/logo_front"
  }
}
```

```json
{
  "httpStatus": "Not Found",
  "httpStatusCode": 404,
  "status": "ERROR",
  "message": "No custom file found."
}
```

要使用自定义标志，您需要启用相应的系统
通过将其设置为 *true* 来设置。如果相应的设置为false，
将提供默认徽标。

## 用户界面定制 { #webapi_ui_customization } 

要自定义 DHIS2 应用程序的 UI，您可以插入自定义
JavaScript 和 CSS 样式通过 *files* 资源。

```
POST删除后/ api / 33 / files / script
POST GET DELETE / api / 33 / files / style
```

通过此资源插入的 JavaScript 和 CSS 内容将由
DHIS2 网络应用程序。这在某些情况下特别有用：

  - 覆盖 DHIS2 应用程序的 CSS 样式，例如
    登录页面或主页。

  - 定义几个自定义的通用 JavaScript 函数
    数据输入表单和基于 HTML 的报告。

  - 包括用于自定义数据输入表单的 CSS 样式和
    基于 HTML 的报告。

## 登录应用程序定制{ #login_app_customization }

设置应用程序允许用户定义各种元素（文本、徽标、旗帜），用于定制 DHIS2 的登录页面。此外，用户还可以在两种预设布局（默认布局和侧边栏布局）中进行选择。

如有需要，可通过上传 HTML 模板（也可在设置程序中定义）进一步定制登录程序的样式和布局。该 HTML 模板会替换某些元素（基于 ID）；下表列出了保留的 ID。通过这种方式，可以结合自定义样式（使用 css）和自定义布局（使用 HTML）来改变登录应用程序的外观。自定义模板不支持自定义脚本，任何上传的模板都将删除脚本标记。

要创建自定义模板，建议从现有模板开始（这些模板可在登录应用程序的扩展 dhis-web-login/#download 中下载）。

ID | Replaced by |
|---|---|
| **login-box** | The main login dialog, which prompts the user to enter their username/password. **This must be included for the login app to work as intended.**  |
| **application-title** | Text for the application title.  |
| **application-introduction** | Text for the application introduction. |
| **flag** | The selected flag. |
| **logo** | The logo (DHIS2 logo is used if custom logo is not defined). |
| **powered-by** | A link to DHIS2.org. |
| **application-left-footer** | Text for the left-side footer. |
| **application-right-footer** | Text for the right-side footer. |
| **language-select** | Selection to control the language of the login app. |

登录对话框的外观也可以通过在 HTML 模板中定义 css 变量来修改。以下 css 变量可供自定义：
```
--form-container-margin-block-start
--form-container-margin-block-end(表格边距块结束)
--form-container-margin-inline-start, auto
--form-container-margin-inline-end
--form-container-default-width默认宽度
--form-container-padding
--form-container-background-color背景色
--form-container-box-border-radius
--表单内容框阴影
--表单容器字体颜色
--表单标题-字体大小
--表单标题-字体-重量
--表单容器标题颜色
```



# 跟踪器{ #webapi_tracker }

> **Caution**
>
> Tracker has been re-implemented in DHIS2 2.36. This document describes the new tracker endpoints
>
> * `POST /api/tracker`
> * `GET  /api/tracker/trackedEntities`
> * `GET  /api/tracker/enrollments`
> * `GET  /api/tracker/events`
> * `GET  /api/tracker/relationships`
>
> The deprecated tracker endpoints
>
> * `GET/POST/PUT/DELETE /api/trackedEntityInstance`
> * `GET/POST/PUT/DELETE /api/enrollments`
> * `GET/POST/PUT/DELETE /api/events`
> * `GET/POST/PUT/DELETE /api/relationships`
>
> have been removed in version **42**!
>
> [Migrating to new tracker
> endpoints](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker-deprecated.html#webapi_tracker_migration)
> should help you get started with your migration. Reach out on the [community of
> practice](https://community.dhis2.org) if you need further assistance.

## 跟踪对象{ #webapi_tracker_objects }

Tracker 由几种不同类型的对象组成，这些对象嵌套在一起以表示数据。
在本节中，我们将展示和描述 Tracker API 中使用的每个对象。

### 跟踪实体{ #tracked-entities } 

`跟踪实体`是跟踪器模型的根对象。

| 物业 | 描述 | 需要 | 不可改变 | 类型 | 例 |
|---|---|---|---|---|---|
| 跟踪实体 | 被跟踪实体的标识符。如果未提供，则生成 | 不 | 是的 | String:Uid | ABCDEF12345 |
| trackedEntityType | 被跟踪实体的类型。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| createdAt | 用户创建跟踪实体的时间戳。在服务器上设置。 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| createdAtClient | 用户在客户端创建被跟踪实体的时间戳。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 对象最后一次更新的时间戳。在服务器上设置。 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAtClient | 对象最后一次在客户端更新的时间戳。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| orgUnit | 用户创建跟踪实体的组织单位。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| inactive | 表示被跟踪实体是否处于非活动状态。 | 不 | 是的 | Boolean | 默认值：false，true |
| deleted | 表示跟踪的实体是否已被删除。它只能在删除时更改。 | 不 | 不 | Boolean | 假，直至删除 |
| 潜在重复 | 表示跟踪的实体是否可能重复。 | 不 | 不 | Boolean | 默认值：false |
| geometry | 被跟踪实体的地理表示。基于 TrackedEntityType 的 "featureType"。 | 不 | 是的 | GeoJson | {<br>"type": "POINT",<br>"coordinates": [123.0, 123.0]<br>} |
| 存储方式 | 存储/创建被跟踪实体的客户端引用。 | 不 | 是的 | 字符串：任意 | 无名氏 |
| 创建人 | 仅用于读取数据。创建对象的用户。在服务器上设置 | 不 | 是的 | 用户 | {<br>"uid"："ABCDEF12345",<br>"username"："username",<br>"firstName"："John",<br>"surname"："Doe"<br>} |
| 更新日期 | 仅用于读取数据。最后更新对象的用户。在服务器上设置 | 不 | 是的 | 用户 | {<br>"uid"："ABCDEF12345",<br>"username"："username",<br>"firstName"："John",<br>"surname"："Doe"<br>} |
| 属性 | 被跟踪实体拥有的被跟踪实体属性值列表。 | 不 | 是的 | TrackedEntityAttributeValue 列表 | 参见属性 |
| 注册人数 | 被跟踪实体拥有的注册列表。 | 不 | 是的 | 入学名单 | 查看注册情况 |
| 关系 | 与被跟踪实体相连的关系列表。 | 不 | 是的 | 关系清单 | 查看关系 |
| 程序所有者 | 可通过特定程序访问此被跟踪实体的组织单位列表。更多信息，请参阅 "程序所有权"。 | 不 | 是的 | 程序所有者列表 | 参见 "计划所有权 "部分 |

> **Note**
>
> `Tracked Entities` "owns" all `Tracked Entity Attribute Values` (Or "attributes" as described in
> the previous table). However, `Tracked Entity Attributes` are either connected to a `Tracked
> Entity` through its `Tracked Entity Type` or a `Program`. We often refer to this separation as
> `Tracked Entity Type Attributes` and `Tracked Entity Program Attributes`. The importance of this
> separation is related to access control and limiting what information the user can see.
>
> The "attributes" referred to in the `Tracked Entity` are `Tracked Entity Type Attributes`.

### 注册{ #enrollments } 

`Tracked Entities` can enroll into `Programs` for which they are eligible. Tracked entities are
eligible as long as the program is configured with the same `Tracked Entity Type` as the tracked
entity. We represent the enrollment with the `Enrollment` object, which we describe in this section.

| 物业 | 描述 | 需要 | 不可改变 | 类型 | 例 |
|---|---|---|---|---|---|
| 注册 | 注册的标识符。如果未提供，则生成 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 程序 | 注册所代表的计划。 | 是的 | 不 | String:Uid | ABCDEF12345 |
| 跟踪实体 | 对注册的被跟踪实体的引用。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| 地位 | 注册状态。如果未提供，则为 ACTIVE。 | 不 | 不 | 枚举 | 激活、完成、取消 |
| orgUnit | 用户注册被跟踪实体的组织单位。 | 是的 | 不 | String:Uid | ABCDEF12345 |
| createdAt | 用户创建对象的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| createdAtClient | 用户在客户端创建对象的时间戳 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 对象最后一次更新的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAtClient | 对象最后一次在客户端更新的时间戳 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 入学人数 | 用户注册被跟踪实体时的时间戳。 | 是的 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| occurredAt | 注册发生的时间戳。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| completedAt | 用户完成注册的时间戳。如果客户端未传递，则由服务器设置 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 完成人 | 仅用于读取数据。完成注册的用户。在服务器上设置 | 不 | 不 | 字符串：任意 | 无名氏 |
| 跟进 | 表示注册是否需要跟进。如果未提供则为假 | 不 | 不 | 布依兰 | Default: False, True |
| deleted | 表示注册是否已被删除。它只能在删除时更改。 | 不 | 是的 | Boolean | 删除前为假 |
| geometry | 注册的地理表示。基于计划的 "特征类型 | 不 | 不 | GeoJson | {<br>"type": "POINT",<br>"coordinates": [123.0, 123.0]<br>} |
| 存储方式 | 存储/创建注册的客户编号。 | 不 | 不 | 字符串：任意 | 无名氏 |
| 创建人 | 仅用于读取数据。创建对象的用户。在服务器上设置 | 不 | 是的 | 用户 | {<br>"uid"："ABCDEF12345",<br>"username"："username",<br>"firstName"："John",<br>"surname"："Doe"<br>} |
| 更新日期 | 仅用于读取数据。最后更新对象的用户。在服务器上设置 | 不 | 是的 | 用户 | {<br>"uid"："ABCDEF12345",<br>"username"："username",<br>"firstName"："John",<br>"surname"："Doe"<br>} |
| 属性 | 与注册相关的被跟踪实体属性值列表。 | 不 | 不 | TrackedEntityAttributeValue 列表 | 参见属性 |
| 活动 | 注册所拥有的事件列表。 | 不 | 不 | 活动列表 | 查看活动 |
| 关系 | 与注册有关的关系列表。 | 不 | 不 | 关系清单 | 查看关系 |
| 说明 | 连接到注册的备注。只能创建。 | 不 | 是的 | 注释清单 | 参见注释 |

> **Note**
>
> `Tracked Entities` "owns" all `Tracked Entity Attribute Values` (Or "attributes" as described in
> the previous table). However, `Tracked Entity Attributes` are either connected to a `Tracked
> Entity` through its `Tracked Entity Type` or a `Program`. We often refer to this separation as
> `Tracked Entity Type Attributes` and `Tracked Entity Program Attributes`. The importance of this
> separation is related to access control and limiting what information the user can see.
>
> The "attributes" referred to in the `Enrollment` are `Tracked Entity Program Attributes`.

### 大事记 { #events } 

`Events` are either part of an `EVENT PROGRAM` or `TRACKER PROGRAM`. For `TRACKER PROGRAM`, events
belong to an `Enrollment`, which again belongs to a `Tracked Entity`. On the other hand, `EVENT
PROGRAM` is `Events` not connected to a specific `Enrollment` or `Tracked Entity`. The difference is
related to whether we track a specific `Tracked Entity` or not. We sometimes refer to `EVENT
PROGRAM` events as "anonymous events" or "single events" since they only represent themselves and
not another `Tracked Entity`.

In the API, the significant difference is that all events are either connected to the same
enrollment (`EVENT PROGRAM`) or different enrollments (`TRACKER PROGRAM`). The table below will
point out any exceptional cases between these two.

| 物业 | 描述 | 需要 | 不可改变 | 类型 | 例 |
|---|---|---|---|---|---|
| 事件 | 事件的标识符。如果未提供，则生成 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 程序阶段 | 事件所代表的计划阶段。 | 是的 | 不 | String:Uid | ABCDEF12345 |
| 注册 | 对拥有该事件的注册的引用。***不适用于 `EVENT PROGRAM`*** | 是的 | 是的 | String:Uid | ABCDEF12345 |
| 程序 | 仅用于读取数据。拥有该事件的注册程序类型。 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 跟踪实体 | 仅用于读取数据。拥有事件的被跟踪实体。***不适用于 `EVENT PROGRAM`*** | 不 | 不 | String:Uid | ABCDEF12345 |
| 地位 | 事件的状态。如果没有提供，则为 ACTIVE。 | 不 | 不 | 枚举 | 活动、已完成、已访问、计划、逾期、跳过 |
| orgUnit | 用户注册事件的组织单位。 | 是的 | 不 | String:Uid | ABCDEF12345 |
| createdAt | 仅用于读取数据。用户创建事件的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| createdAtClient | 用户在客户端创建事件的时间戳 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 仅用于读取数据。事件最后更新的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAtClient | 客户端最后一次更新事件的时间戳 | 不 | 不 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 预定日期 | 事件计划发生的时间戳。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| occurredAt | 事情发生的时间戳。 | 是的 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| completedAt | 用户完成事件的时间戳。如果客户端未传递，则由服务器设置 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 完成人 | 仅用于读取数据。完成事件的用户。在服务器上设置 | 不 | 不 | 字符串：任意 | 无名氏 |
| 跟进 | 仅用于读取数据。表示事件是否被标记为需要跟进。 | 不 | 不 | Boolean | 假，真 |
| deleted | 仅用于读取数据。表示事件是否已被删除。只有在删除时才能更改。 | 不 | 是的 | Boolean | 删除前为假 |
| geometry | 事件的地理表示。基于节目阶段的 "特征类型 | 不 | 不 | GeoJson | {<br>"type": "POINT",<br>"coordinates": [123.0, 123.0]<br>} |
| 存储方式 | 存储/创建事件的客户编号。 | 不 | 不 | 字符串：任意 | 无名氏 |
| 创建人 | 仅用于读取数据。创建对象的用户。在服务器上设置 | 不 | 是的 | 用户 | {<br>"uid"："ABCDEF12345",<br>"username"："username",<br>"firstName"："John",<br>"surname"："Doe"<br>} |
| 更新日期 | 仅用于读取数据。最后更新对象的用户。在服务器上设置 | 不 | 是的 | 用户 | {<br>"uid"："ABCDEF12345",<br>"username"："username",<br>"firstName"："John",<br>"surname"："Doe"<br>} |
| 属性选项组合 | 事件的属性选项组合。如果没有提供或配置，则为默认值。 | 不 | 不 | String:Uid | ABCDEF12345
| 属性类别选项 | 事件的属性类别选项。如果没有提供或配置，则为默认值。 | 不 | 不 | String:Uid | ABCDEF12345
| 指定用户 | 指向已被分配给该事件的用户的引用。 | 不 | 不 | 用户 | {<br>"uid"："ABCDEF12345",<br>"username"："username",<br>"firstName"："John",<br>"surname"："Doe"<br>} |
| 数据值 | 与事件相关的数据值列表。 | 不 | 不 | TrackedEntityAttributeValue 列表 | 参见属性 |
| 关系 | 与事件相关的关系列表。 | 不 | 不 | 关系清单 | 查看关系 |
| 说明 | 与事件相关的备注。只能创建。 | 不 | 是的 | 注释清单 | 参见注释 |

### 人际关系 { #relationships } 

`Relationships` are objects that link together two other tracker objects. The constraints each side
of the relationship must conform to are based on the `Relationship Type` of the `Relationship`.

| 物业 | 描述 | 需要 | 不可改变 | 类型 | 例 |
|---|---|---|---|---|---|
| 关系 | 关系的标识符。如果未提供，则生成。 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 关系类型 | 关系类型。决定关系中可以链接的对象。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| 关系名 | 仅用于读取数据。此关系的关系类型名称 | 不 | 不 | 字符串：任意 | 兄弟姐妹 |
| createdAt | 用户创建关系的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 关系最后一次更新的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| createdAtClient | 用户在客户端创建关系的时间戳。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 双向 | 仅用于读取数据。表示关系类型是否双向。 | 不 | 不 | Boolean | 真或假 |
| 从 | 关系中每一方的引用。必须符合关系类型中设置的约束条件 | 是的 | 是的 | 关系项 | {"trackedEntity"：{"trackedEntity"："ABCEF12345"}}，{"注册"：{"注册"："ABCDEF12345"}}或 {"事件"：{"事件"："ABCDEF12345"}} |

> **Note**
>
> `Relationship item` represents a link to an object. Since a `relationship` can be between any
> tracker object like `tracked entity`, `enrollment`, and `event`, the value depends on the
> `relationship type`. For example, if a `relationship type` connects from an `event` to a `tracked
> entity`, the format is strict:

> ```json
> {
>   "from": {
>     "event": { "event": "ABCDEF12345" }
>   },
>   "to": {
>     "trackedEntity": { "trackedEntity": "FEDCBA12345" }
>   }
> }
> ```

### 属性 { #attributes } 

属性是描述被跟踪实体的值。属性可以通过
通过被跟踪实体类型或程序关联。这意味着属性既可以是被追踪实体的一部分，也可以是注册的一部分。
跟踪实体和注册的一部分。重要的是，一个属性只能有一个值，即使一个
一个属性只能有一个值，即使一个被跟踪实体有多个注册表来定义该属性。这是因为
实体最终拥有属性值。

| 物业 | 描述 | 需要 | 不可改变 | 类型 | 例 |
|---|---|---|---|---|---|
| 特质 | 对所代表的跟踪实体属性的引用。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| 码 | 仅用于读取数据。被跟踪实体属性的代码。 | 不 | 不 | 字符串：任意 | 美国广播公司 |
| 显示名称 | 仅用于读取数据。被跟踪实体属性的显示名称。 | 不 | 不 | 字符串：任意 | 名称 |
| createdAt | 添加值的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 值最后一次更新的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 存储方式 | 存储/创建值的客户端引用。 | 不 | 不 | 字符串：任意 | 无名氏 |
| valueType | 仅用于读取数据。属性所代表的值类型。 | 不 | 不 | 枚举 | 文本、INTEGER 等 |
| 价值 | 被跟踪实体属性的值。 | 不 | 不 | 字符串：任意 | 无名氏 |

> **Note**
>
> When adding or updating an attribute, only the `attribute` and `value` properties are required. To
> remove an attribute from a tracked entity or enrollment, set the `value` to `null` [see
> example](#delete-attribute-values).
>
> In the context of the tracker, we refer to `Tracked Entity Attributes` and `Tracked Entity
> Attribute Values` simply as attributes. However, it's important to note that attributes and
> attribute values are also concepts within metadata. Therefore, distinguishing between tracker
> attributes and metadata attributes is essential. In the tracker API, you can reference metadata
> attributes by specifying the `idScheme` (see [request
> parameters](#webapi_tracker_import_request_parameters) for more information).

### 数据值{ #data-values } 

属性描述一个被跟踪的实体，而数据值则描述一个事件。

| 物业 | 描述 | 需要 | 不可改变 | 类型 | 例 |
|---|---|---|---|---|---|
| 数据元素 | 该值代表的数据元素。 | 是的 | 是的 | String:Uid | ABCDEF12345 |
| 价值 | 数据值的值。 | 不 | 不 | 字符串：任意 | 123 |
| providedElsewhere | 表示用户是否在其他地方提供了值。如果未提供，则为 "假"。 | 不 | 不 | Boolean | 假或真 |
| createdAt | 用户添加值的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| updatedAt | 值最后一次更新的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 存储方式 | 存储/创建值的客户端引用。 | 不 | 不 | 字符串：任意 | 无名氏 |
| 创建人 | 仅用于读取数据。创建对象的用户。在服务器上设置 | 不 | 是的 | 用户 | {<br>"uid"："ABCDEF12345",<br>"username"："username",<br>"firstName"："John",<br>"surname"："Doe"<br>} |
| 更新日期 | 仅用于读取数据。最后更新对象的用户。在服务器上设置 | 不 | 是的 | 用户 | {<br>"uid"："ABCDEF12345",<br>"username"："username",<br>"firstName"："John",<br>"surname"："Doe"<br>} |

> **注**
>
> 添加或更新数据值时，只需使用 `dataElement` 和 `value` 属性。要
> 删除数据值，请将 `value` 设置为 `null` [见示例](#delete-data-values)。

### 笔记 { #notes } 

跟踪系统可使用数据元素和跟踪实体属性获取数据。
但在某些情况下，需要记录有关具体问题的补充信息或说明。
但在某些情况下，需要记录有关特定问题的附加信息或注释。这些额外的细节可以使用注释来捕获，类似于 DHIS2 汇总侧的数据值注释。
DHIS2 汇总侧的数据值注释类似。

笔记有两种类型：注册级笔记和事件级笔记。注册可以由一个或多个事件组成
可记录每个事件的备注，以记录原因，如事件错过的原因、重新安排的原因或部分完成的原因。
错过、重新安排或部分完成活动的原因。注册中的每个事件都可以
有自己的笔记。此外，还可以使用
家长注册记录。注册记录有助于记录原因，如为什么取消注册。
取消注册的原因。备注的使用非常灵活，可根据用户的需求和具体用例进行调整。
具体用例。

注册和事件备注的条目数量不限；可添加的备注数量没有限制。
可以添加的备注数量没有限制。但是，这些备注一旦创建，就无法删除或更新。
一旦创建，就无法删除或更新。它们的功能类似于日志。要修改备忘，可以创建新的备忘。删除备忘的唯一
删除备注的唯一方法是删除父对象，即事件或注册。

注释没有专门的端点，而是作为父事件和/或注册有效载荷的一部分进行交换。
注册有效载荷的一部分。下面是一个有效载荷示例：

```json
{
  "trackedEntity": "oi3PMIGYJH8",
  "enrollments": [
    {
      "enrollment": "EbRsJr8LSSO",
      "notes": [
        {
          "note": "vxmCvYcPdaW",
          "value": "Enrollment note 1"
        },
        {
          "value": "Enrollment note 2."
        }
      ],
      "events": [
        {
          "event": "zfzS9WeO0uM",
          "notes": [
            {
              "note": "MAQFb7fAggS",
              "value": "Event Note 1."
            },
            {
              "value": "Event Note 2."
            }
          ]
        }
      ]
    }
  ]
}
```

| 物业 | 描述 | 需要 | 不可改变 | 类型 | 例 |
|---|---|---|---|---|---|
| 备注 | 注释的引用。若为空则生成 | 不 | 是的 | String:Uid | ABCDEF12345 |
| 价值 | 纸条的内容。 | 是的 | 是的 | 字符串：任意 | 这是一份说明 |
| 存储于 | 用户添加备注的时间戳。在服务器上设置。 | 不 | 是的 | Date:ISO 8601 | YYYY-MM-DDThh:mm:ss |
| 存储方式 | 存储/创建备注的客户编号。 | 不 | 不 | 字符串：任意 | 无名氏 |
| 创建人 | 仅用于读取数据。创建对象的用户。在服务器上设置 | 不 | 是的 | 用户 | {<br>"uid"："ABCDEF12345",<br>"username"："username",<br>"firstName"："John",<br>"surname"："Doe"<br>} |

### 用户数 { #users } 

| 物业 | 描述 | 需要 | 不可改变 | 类型 | 例 |
|---|---|---|---|---|---|
| uid | 用户的标识符。 | 是* | 是的 | String:Uid | ABCDEF12345 |
| 用户名 | 用户使用的用户名。 | 是* | 是的 | 字符串：任意 | 123 |
| 名 | 仅用于读取数据。用户名。 | 不 | 是的 | 字符串：任意 | 约翰 |
| 姓氏 | 仅用于读取数据。用户姓氏。 | 不 | 是的 | 字符串：任意 | 无名氏 |

> 必须提供 `uid` 或 `username` 字段中的一个。如果两个都提供，则只考虑用户名。
> 考虑。

## Tracker Import (`POST /api/tracker`) { #webapi_tracker_import }

端点 `POST /api/tracker` 也称为跟踪器导入器。该端点允许客户
导入，即创建、更新和删除

* **跟踪实体**
* **入学人数**
* **活动**
* **关系**
* 以及其他[跟踪器对象]（#webapi_tracker_objects）中嵌入的数据

### 请求参数{ #webapi_tracker_import_request_parameters }

跟踪器导入程序支持以下参数：

| 参数名称 | 描述 | 类型 | 允许值 |
|---|---|---|---|
| 异步 | 表示导入是异步还是同步进行。 | Boolean | `TRUE`, `FALSE` |
| 报告模式 | 仅在执行同步导入时使用。请参阅 importSummary 获取更多信息。 | 枚举 | `FULL`, `ERRORS`, `WARNINGS` |
| 导入模式 | Can either be `VALIDATE` which will report errors in the payload without making changes to the database or `COMMIT` (default) which will validate the payload and make changes to the database. | 枚举 | `VALIDATE`, `COMMIT` |
| 方案 | 表示导入时元数据引用使用的总体 idScheme。默认为 UID。可为特定元数据重写（如下所列） | 枚举 | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| 数据元素标识方案 | 表示导入数据元素时使用的 idScheme。 | 枚举 | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| orgUnitIdScheme | 表示导入时组织单位要使用的 idScheme。 | 枚举 | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| 程序标识方案 | 表示导入程序时使用的 idScheme。 | 枚举 | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| 程序阶段标识方案 | 表示导入时程序阶段使用的 idScheme。 | 枚举 | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| 类别选项组合IdScheme | 表示导入时类别选项组合使用的 idScheme。 | 枚举 | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| 类别选项 IDScheme | 表示导入时类别选项使用的 idScheme。 | 枚举 | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| 导入策略 | Indicates the effect the import should have. Can either be `CREATE`, `UPDATE`, `CREATE_AND_UPDATE` and `DELETE`, which respectively only allows importing new data, importing changes to existing data, importing any new or updates to existing data, and finally deleting data. | 枚举 | `CREATE`, `UPDATE`, `CREATE_AND_UPDATE`, `DELETE` |
| 原子模式 | 表示导入如何响应验证错误。如果是 `ALL`，则所有导入的数据必须有效，才能提交任何数据。如果是 `OBJECT`，只有提交的数据必须有效，其他数据可以无效。 | 枚举 | `ALL`, `OBJECT` |
| 冲洗模式 | 表示刷新的频率。这与导入过程中向数据库推送数据的频率有关。主要用于调试，在生产环境中不应更改 | 枚举 | `AUTO`, `OBJECT` |
| 验证模式 | 表示验证步骤的完整性。可以跳过、设置为快速失败（第一次出错时返回）或完全失败（默认），后者将返回发现的所有错误。 | 枚举 | `FULL`, `FAIL_FAST`, `SKIP` |
| skipPatternValidation | 如果为 "true"，将跳过验证生成属性的模式。 | Boolean | `TRUE`, `FALSE` |
| 跳过侧面效果 | 如果为 "true"，将跳过运行导入的任何副作用 | Boolean | `TRUE`, `FALSE` |
| 跳过规则引擎 | 如果为 "true"，它将跳过运行导入的任何程序规则 | Boolean | `TRUE`, `FALSE` |

**NOTE**: idScheme and its metadata specific idScheme parameters like orgUnitIdScheme,
programIdScheme, ... used to allow and use the default `AUTO`. `AUTO` has been removed. The default
idScheme has already been `UID`. Any requests sent with idScheme `AUTO` will see the same behavior
as before, namely matching done using `UID`.

#### SYNC 和 ASYNC{ #sync-and-async } 

对用户来说，同步导入和异步导入的主要区别在于 API 响应的时间。
API 的响应时间。同步导入会在导入后立即提供 [import
摘要](#webapi_tracker_import_summary)。相比之下，异步导入
则会立即返回导入任务的引用。可以使用
此 `response.location`。下面是一个异步导入响应的示例：

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Tracker job added",
  "response": {
    "id": "cHh2OCTJvRw",
    "location": "https://play.im.dhis2.org/dev/api/tracker/jobs/cHh2OCTJvRw"
  }
}
```

对于大型导入，选择异步导入对客户有利，因为这样可以避免长时间等待响应。
长时间等待响应。

### 有效载荷{ #payload } 

导入器支持平面和嵌套有效载荷。

#### ***扁平***有效载荷{ #flat-payload } 

平面有效载荷可包括每个核心跟踪器对象的集合：被跟踪实体、注册、事件和关系、
注册、事件和关系。这种格式能很好地与现有数据整合，这些数据已
已分配 UID 的现有数据进行了很好的整合。但是，对于新数据，客户端必须为对象间的任何引用提供新的 UIDs。
对象之间的引用提供新的 UID。例如，如果导入一个新注册的新跟踪实体，客户机
必须为跟踪实体提供一个 UID，以便将注册与之链接。

```json
{
  "trackedEntities": [
    {
      "orgUnit": "y77LiPqLMoq",
      "trackedEntity": "Kj6vYde4LHh",
      "trackedEntityType": "nEenWmSyUEp"
    },
    {
      "orgUnit": "y77LiPqLMoq",
      "trackedEntity": "Gjaiu3ea38E",
      "trackedEntityType": "nEenWmSyUEp"
    }
  ],
  "enrollments": [
    {
      "enrolledAt": "2019-08-19T00:00:00.000",
      "enrollment": "MNWZ6hnuhSw",
      "occurredAt": "2019-08-19T00:00:00.000",
      "orgUnit": "y77LiPqLMoq",
      "program": "IpHINAT79UW",
      "status": "ACTIVE",
      "trackedEntity": "Kj6vYde4LHh",
      "trackedEntityType": "nEenWmSyUEp"
    }
  ],
  "events": [
    {
      "attributeCategoryOptions": "xYerKDKCefk",
      "attributeOptionCombo": "HllvX50cXC0",
      "dataValues": [
        {
          "dataElement": "bx6fsa0t90x",
          "value": "true"
        },
        {
          "dataElement": "UXz7xuGCEhU",
          "value": "5.7"
        }
      ],
      "enrollment": "MNWZ6hnuhSw",
      "enrollmentStatus": "ACTIVE",
      "event": "ZwwuwNp6gVd",
      "occurredAt": "2019-08-01T00:00:00.000",
      "orgUnit": "y77LiPqLMoq",
      "program": "IpHINAT79UW",
      "programStage": "A03MvHHogjR",
      "scheduledAt": "2019-08-19T13:59:13.688",
      "status": "ACTIVE",
      "trackedEntity": "Kj6vYde4LHh"
    },
    {
      "attributeCategoryOptions": "xYerKDKCefk",
      "attributeOptionCombo": "HllvX50cXC0",
      "enrollment": "MNWZ6hnuhSw",
      "enrollmentStatus": "ACTIVE",
      "event": "XwwuwNp6gVE",
      "occurredAt": "2019-08-01T00:00:00.000",
      "orgUnit": "y77LiPqLMoq",
      "program": "IpHINAT79UW",
      "programStage": "ZzYYXq4fJie",
      "scheduledAt": "2019-08-19T13:59:13.688",
      "status": "ACTIVE",
      "trackedEntity": "Kj6vYde4LHh"
    }
  ],
  "relationships": [
    {
      "from": {
        "trackedEntity": {
          "trackedEntity": "Kj6vYde4LHh"
        }
      },
      "relationshipType": "dDrh5UyCyvQ",
      "to": {
        "trackedEntity": {
          "trackedEntity": "Gjaiu3ea38E"
        }
      }
    }
  ]
}
```

#### ***NESTED*** 有效载荷{ #nested-payload } 

嵌套有效载荷是最常用的结构，其中跟踪器对象被嵌入到父级对象中。
其父对象，如被跟踪实体中的注册。这种结构的优点是
优点是客户端无需为这些引用提供 UID，因为它会自动处理。
自动处理。

> **NOTE**
>
> Although nested payloads can be easier for clients to manage, the payload will always be flattened
> before the import. For large imports, using a flat structured payload offers more control and
> reduces overhead during the import process.
>
> That being said, you cannot nest new tracked entities, enrollments or events in a relationship.

```json
{
  "trackedEntities": [
    {
      "enrollments": [
        {
          "attributes": [
            {
              "attribute": "zDhUuAYrxNC",
              "displayName": "Last name",
              "value": "Kelly"
            },
            {
              "attribute": "w75KJ2mc4zz",
              "displayName": "First name",
              "value": "John"
            }
          ],
          "enrolledAt": "2019-08-19T00:00:00.000",
          "events": [
            {
              "attributeCategoryOptions": "xYerKDKCefk",
              "attributeOptionCombo": "HllvX50cXC0",
              "dataValues": [
                {
                  "dataElement": "bx6fsa0t90x",
                  "value": "true"
                },
                {
                  "dataElement": "UXz7xuGCEhU",
                  "value": "5.7"
                }
              ],
              "enrollmentStatus": "ACTIVE",
              "notes": [
                {
                  "value": "need to follow up"
                }
              ],
              "occurredAt": "2019-08-01T00:00:00.000",
              "orgUnit": "y77LiPqLMoq",
              "program": "IpHINAT79UW",
              "programStage": "A03MvHHogjR",
              "scheduledAt": "2019-08-19T13:59:13.688",
              "status": "ACTIVE"
            }
          ],
          "occurredAt": "2019-08-19T00:00:00.000",
          "orgUnit": "y77LiPqLMoq",
          "program": "IpHINAT79UW",
          "status": "ACTIVE",
          "trackedEntityType": "nEenWmSyUEp"
        }
      ],
      "orgUnit": "y77LiPqLMoq",
      "trackedEntityType": "nEenWmSyUEp"
    }
  ]
}
```

### 创建{ #create } 

向 `/api/tracker` 发送 `POST` 信息，并将 `importStrategy` 设置为 `CREATE` 或 `CREATE_AND_UPDATE` 。
这里](#payload)所述的有效载荷。

### 更新{ #update } 

向 `/api/tracker`发送`POST`，将`importStrategy`设置为`UPDATE`或`CREATE_AND_UPDATE`，并将有效载荷设置为[此处](#payload)。
这里](#payload)所述的有效载荷。

有效负载必须包括要更新对象的所有字段，即使这些字段没有被修改。
修改。唯一的例外是集合。集合中不应更改的项目可以省略。
省略，如 [update attribute values](#update-data-values) 和 [update data
值]（#update-data-values）中所示。

> **Note**
>
> * Deleted tracker objects cannot be updated.
> * Relationships cannot be updated.

#### 更新属性值{ #update-attribute-values } 

以下内容更新了 [被跟踪实体]（#payload）的一个属性值：

    POST /api/tracker?async=false

```json
{
  "trackedEntities": [
    {
      "trackedEntity": "PQfMcpmXeFE",
      "trackedEntityType": "nEenWmSyUEp",
      "orgUnit": "DiszpKrYNg8",
      "attributes": [
        {
          "attribute": "w75KJ2mc4zz",
          "code": "MMD_PER_NAM",
          "displayName": "First name",
          "createdAt": "2016-08-03T23:49:43.308",
          "updatedAt": "2016-08-03T23:49:43.308",
          "valueType": "TEXT",
          "value": "Johnny"
        }
      ]
    }
  ]
}
```

请注意，不必指定跟踪实体的注册人数。但必须指定
被跟踪实体的非注册字段，即使您不更改它们。

#### 删除属性值{ #delete-attribute-values } 

以下内容删除了 [跟踪实体]（#payload）的一个属性值：

    POST /api/tracker?async=false

```json
{
  "trackedEntities": [
    {
      "trackedEntity": "PQfMcpmXeFE",
      "trackedEntityType": "nEenWmSyUEp",
      "orgUnit": "DiszpKrYNg8",
      "attributes": [
        {
          "attribute": "w75KJ2mc4zz",
          "value": null
        }
      ]
    }
  ]
}
```

#### 更新数据值{ #update-data-values } 

下文更新了 [事件]（#payload）的一个数据值：

    POST /api/tracker?async=false

```json
{
  "events": [
    {
      "event": "ZwwuwNp6gVd",
      "dataValues": [
        {
          "dataElement": "bx6fsa0t90x",
          "value": "true"
        }
      ],
      "attributeOptionCombo": "HllvX50cXC0",
      "attributeCategoryOptions": "xYerKDKCefk",
      "enrollment": "MNWZ6hnuhSw",
      "enrollmentStatus": "ACTIVE",
      "occurredAt": "2019-08-01T00:00:00.000",
      "orgUnit": "y77LiPqLMoq",
      "program": "IpHINAT79UW",
      "programStage": "A03MvHHogjR",
      "scheduledAt": "2019-08-19T13:59:13.688",
      "status": "ACTIVE",
      "trackedEntity": "Kj6vYde4LHh"
    }
  ]
}
```

#### 删除数据值{ #delete-data-values } 

下面的命令将删除 [事件]（#payload）的一个数据值：

    POST /api/tracker?async=false

```json
{
  "events": [
    {
      "event": "ZwwuwNp6gVd",
      "dataValues": [
        {
          "dataElement": "bx6fsa0t90x",
          "value": null
        }
      ],
      "attributeOptionCombo": "HllvX50cXC0",
      "attributeCategoryOptions": "xYerKDKCefk",
      "enrollment": "MNWZ6hnuhSw",
      "enrollmentStatus": "ACTIVE",
      "occurredAt": "2019-08-01T00:00:00.000",
      "orgUnit": "y77LiPqLMoq",
      "program": "IpHINAT79UW",
      "programStage": "A03MvHHogjR",
      "scheduledAt": "2019-08-19T13:59:13.688",
      "status": "ACTIVE",
      "trackedEntity": "Kj6vYde4LHh"
    }
  ]
}
```

### 删除{ #delete } 

Make a `POST` to `/api/tracker` with `importStrategy` set to `DELETE`. The payload should include
only the UIDs of the `trackedEntities`, `enrollments`, `events` or `relationships` you wish to
delete.

下文将删除用 [this payload]（#payload）创建的事件：

    POST /api/tracker?async=false&importStrategy=delete

```json
{
  "events": [
    {
      "event": "ZwwuwNp6gVd",
    },
    {
      "event": "XwwuwNp6gVE",
    }
  ]
}
```

下面的操作会删除跟踪的实体及其所有子跟踪器对象（即注册）、
事件和关系：

    POST /api/tracker?async=false&importStrategy=delete

```json
{
  "trackedEntities": [
    {
      "trackedEntity": "Kj6vYde4LHh",
    },
    {
      "trackedEntity": "Gjaiu3ea38E",
    }
  ]
}
```

All the children of a tracker object will be deleted if the user making the request has the
authorities `F_TEI_CASCADE_DELETE` and `F_ENROLLMENT_CASCADE_DELETE`.
Relationships linked to an entity are always deleted, without the need of any authority.

### CSV 导入{ #csv-import } 

要使用 CSV 导入事件，请使用 CSV 主体文件并将`Content-Type`设置为`POST`请求
***application/csv*** 或 ***text/csv***.

#### 大事记 { #events } 

Every row of the CSV payload represents an event and a data value. So, for events with multiple
data values, the CSV file will have `x` rows per event, where `x` is the number of data values
in that event.

##### ***CSV PAYLOAD*** 示例{ #csv-payload-example } 

您的 CSV 文件可以是这样的

```csv
event,status,program,programStage,enrollment,orgUnit,occurredAt,scheduledAt,geometry,latitude,longitude,followUp,deleted,createdAt,createdAtClient,updatedAt,updatedAtClient,completedBy,completedAt,updatedBy,attributeOptionCombo,attributeCategoryOptions,assignedUser,dataElement,value,storedBy,providedElsewhere,storedByDataValue,updatedAtDataValue,createdAtDataValue
A7rzcnZTe2T,ACTIVE,eBAyeGv0exc,Zj7UnCAulEk,RiLEKhWHlxZ,DwpbWkiqjMy,2023-02-12T23:00:00Z,2023-02-12T23:00:00Z,"POINT (-11.468912037323042 7.515913998868316)",7.515913998868316,-11.468912037323042,false,false,2017-09-08T19:40:22Z,,2017-09-08T19:40:22Z,,,,,HllvX50cXC0,xYerKDKCefk,,F3ogKBuviRA,"[-11.4880220438585,7.50978830548003]",admin,false,,2016-12-06T17:22:34.438Z,2016-12-06T17:22:34.438Z
```

有关 CSV 字段的详细定义，请参阅导出部分的 [Events CSV]（#events-csv）。

### 导入摘要{ #webapi_tracker_import_summary }

Tracker API 有两个主要端点，供消费者从导入中获取反馈。
这些端点与异步导入作业最为相关，但也适用于同步作业。
这些端点将返回与导入相关的日志或导入摘要本身。

> **注**
>
> 这些端点依赖于应用程序内存中存储的信息。这意味着信息
> 在某些情况下，如应用程序重启或大量
> 导入请求。

提交跟踪器导入请求后，我们可以访问以下端点，以便监控
工作进度：

`GET /tracker/jobs/{uid}`

| 参数|描述|例
|---|---|---|
|`{uid}`| 现有跟踪器导入任务的 UID | ABCDEF12345

#### ***REQUEST*** example { #request-example } 

`GET /tracker/jobs/PQK63sMwjQp`.

#### ***RESPONSE*** example { #response-example } 

```json
[
  {
    "uid": "PQK63sMwjQp",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.370",
    "message": "Import complete with status OK, 0 created, 0 updated, 0 deleted, 0 ignored",
    "completed": true,
    "id": "PQK63sMwjQp"
  },
  {
    "uid": "XIfTJ1UUNcd",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.369",
    "message": "PostCommit",
    "completed": false,
    "id": "XIfTJ1UUNcd"
  },
  {
    "uid": "uCG4FNJLLBJ",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.364",
    "message": "Commit Transaction",
    "completed": false,
    "id": "uCG4FNJLLBJ"
  },
  {
    "uid": "xfOUv2Lk2MC",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.361",
    "message": "Running Rule Engine Validation",
    "completed": false,
    "id": "xfOUv2Lk2MC"
  },
  {
    "uid": "cSPfA776obb",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.325",
    "message": "Running Rule Engine",
    "completed": false,
    "id": "cSPfA776obb"
  },
  {
    "uid": "mru3HJrFGKA",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.313",
    "message": "Running Validation",
    "completed": false,
    "id": "mru3HJrFGKA"
  },
  {
    "uid": "oTbCUJ2RnA6",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.312",
    "message": "Running PreProcess",
    "completed": false,
    "id": "oTbCUJ2RnA6"
  },
  {
    "uid": "lcUNbWTn6uh",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.312",
    "message": "Calculating Payload Size",
    "completed": false,
    "id": "lcUNbWTn6uh"
  },
  {
    "uid": "l4jQiSS9qdK",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:15.903",
    "message": "Running PreHeat",
    "completed": false,
    "id": "l4jQiSS9qdK"
  },
  {
    "uid": "qGbiuqgwPX5",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:15.850",
    "message": "Loading file content",
    "completed": false,
    "id": "qGbiuqgwPX5"
  },
  {
    "uid": "eWNHzVf7iAj",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:15.838",
    "message": "Loading file resource",
    "completed": false,
    "id": "eWNHzVf7iAj"
  },
  {
    "uid": "t9gOjotekQt",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:15.837",
    "message": "Tracker import started",
    "completed": false,
    "dataType": "PARAMETERS",
    "data": {
      "userId": "xE7jOejl9FI",
      "importMode": "VALIDATE",
      "idSchemes": {
        "dataElementIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "orgUnitIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "programIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "programStageIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "idScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "categoryOptionComboIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "categoryOptionIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        }
      },
      "importStrategy": "CREATE_AND_UPDATE",
      "atomicMode": "ALL",
      "flushMode": "AUTO",
      "validationMode": "FULL",
      "skipPatternValidation": false,
      "skipSideEffects": false,
      "skipRuleEngine": false,
      "filename": null,
      "reportMode": "ERRORS"
    },
    "id": "t9gOjotekQt"
  }
]
```

此外，以下端点将返回导入任务的导入摘要。该导入
摘要仅在导入完成后可用：

`GET /tracker/jobs/{uid}/report`

| 参数|描述|例
|---|---|---|
|path `/{uid}`|现有跟踪器导入任务的 UID。|ABCDEF12345|
|`reportMode`|报告的详细程度。|`FULL`&#124;`ERRORS`&#124;`WARNINGS`|

#### ***REQUEST*** example { #request-example } 

`GET /tracker/jobs/mEfEaFSCKCC/report`.

#### ***RESPONSE*** example { #response-example } 

响应有效载荷与同步导入请求后返回的有效载荷相同。

> **注**
>
> 这两个端点主要用于异步导入；然而，`GET /tracker/jobs/{uid}` 也可用于同步请求，因为它最终会使用与异步导入相同的导入过程和日志记录。
> 也适用于同步请求，因为它最终会使用与同步请求相同的导入流程和日志记录。
> 请求。

### 导入摘要结构{ #import-summary-structure } 

Import summaries have the following overall structure, depending on the requested `reportMode`:

```json
{
  "status": "OK",
  "validationReport": {
    "errorReports": [],
    "warningReports": []
  },
  "stats": {
    "created": 3,
    "updated": 0,
    "deleted": 0,
    "ignored": 0,
    "total": 3
  },
  "bundleReport": {
    "typeReportMap": {
      "EVENT": {
        "trackerType": "EVENT",
        "stats": {
          "created": 1,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 1
        },
        "objectReports": [
          {
            "trackerType": "EVENT",
            "uid": "gTZBPT3Jq39",
            "errorReports": []
          }
        ]
      },
      "ENROLLMENT": {
        "trackerType": "ENROLLMENT",
        "stats": {
          "created": 1,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 1
        },
        "objectReports": [
          {
            "trackerType": "ENROLLMENT",
            "uid": "ffcvJvWjiNZ",
            "errorReports": []
          }
        ]
      },
      "RELATIONSHIP": {
        "trackerType": "RELATIONSHIP",
        "stats": {
          "created": 0,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 0
        },
        "objectReports": []
      },
      "TRACKED_ENTITY": {
        "trackerType": "TRACKED_ENTITY",
        "stats": {
          "created": 1,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 1
        },
        "objectReports": [
          {
            "trackerType": "TRACKED_ENTITY",
            "uid": "aVcGf9iO8Xp",
            "errorReports": []
          }
        ]
      }
    }
  }
}
```

***status***

The property, `status`, of the import summary indicates the overall status of the import. If no
errors or warnings were raised during the import, the `status` is reported as `OK`. The presence of
any error or warnings in the import will result in a status of type `ERROR` or `WARNING`.

`status` is based on the presence of the most significant `validationReport`. `ERROR` has the
highest significance, followed by `WARNING` and finally `OK`. This implies that `ERROR` is reported
as long as a single error was found during the import, regardless of how many warnings occurred.

> **注**
>
> 如果使用 AtomicMode "OBJECT"（原子模式）执行导入，导入时将导入任何数据，而不会出现验证错误。
> 如果发现任何错误，整体状态仍将是 `ERROR`。

***validationReport***

The `validationReport` might include `errorReports` and `warningReports` if any errors or warnings
were present during the import. When present, they provide a detailed list of any errors or warnings
encountered.

例如，导入 `TRACKED_ENTITY` 时出现验证错误：

```json
{
  "validationReport": {
    "errorReports": [
      {
        "message": "Could not find TrackedEntityType: `Q9GufDoplCL`.",
        "errorCode": "E1005",
        "trackerType": "TRACKED_ENTITY",
        "uid": "Kj6vYde4LHh"
      },
      ...
    ],
    "warningReports" : [ ... ]
  }
}
```

The report contains a message and a code describing the actual error (See the [error
codes](#error-codes) section for more information about errors). Additionally, the report includes
the `trackerType` and `uid`, which aims to describe where in the data the error was found. In this
case, there was a `TRACKED_ENTITY` with the uid `Kj6vYde4LHh`, which had a reference to a tracked
entity type that was not found.

> **注**
>
> 当引用跟踪器对象的 `uid` 时，它们在
> 有效载荷。例如，被跟踪实体的 `uid` 在有效载荷中的名称是
> 跟踪实体"。注册"、"事件 "和 "关系 "也是如此、
> 事件和关系。
>
> 如果有效载荷中没有提供 uid，导入过程将生成新的 uid。这意味着
> 错误报告可能会提到一个不存在于有效负载中的 uid。
>
> 错误代表有效载荷中存在导入程序无法规避的问题。任何错误都会
> 阻止数据导入。另一方面，警告是指可以安全规避的问题。
> 但应让用户知道发生了这种情况。警告不会阻止数据
> 无法导入。

***stats***

统计信息提供了导入的快速概览。导入完成后，这些将是
实际计数，表示创建、更新、删除或忽略了多少数据。

例：

```json
{
  "stats": {
    "created": 2,
    "updated": 2,
    "deleted": 1,
    "ignored": 5,
    "total": 10
  }
}
```

`created` 指创建了多少个新对象。一般来说，有效负载中没有 uid
将被视为新对象。

`updated` 指更新对象的数量。如果一个对象的有效载荷中设置了 uid，那么只要数据库中存在相同的 uid，该对象
将被视为更新，只要数据库中存在相同的 uid。

`deleted` refers to the number of objects deleted during the import. Deletion only happens when the
import is configured to delete data and only then when the objects in the payload have existing uids
set.

`ignored` refers to objects that were not persisted. Objects can be ignored for several reasons, for
example trying to create something that already exists. Ignores should always be safe, so if
something was ignored, it was not necessary, or it was due to the configuration of the import.

***bundleReport***

导入完成后，`bundleReport` 会包含所有导入的 [tracker
对象](#tracker-objects)。

例如，`TRACKED_ENTITY`：

```json
{
  "bundleReport": {
    "typeReportMap": {
      "TRACKED_ENTITY": {
        "trackerType": "TRACKED_ENTITY",
        "stats": {
          "created": 1,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 1
        },
        "objectReports": [
          {
            "trackerType": "TRACKED_ENTITY",
            "uid": "aVcGf9iO8Xp",
            "errorReports": []
          }
        ]
      }
    }
  }
}
```

As seen, each type of tracker object will be reported, and each has its own stats and
`objectReports`. These `objectReports` will provide details about each imported object, like their
type, their uid, and any error or warning reports is applicable.

***message***

If the import ended abruptly, the `message` would contain further information in relation to what
happened.

### 导入摘要报告级别{ #import-summary-report-level } 

As previously stated, `GET /tracker/jobs/{uid}/report` can be retrieved using a specific
`reportMode` parameter. By default the endpoint will return an `importSummary` with `reportMode`
`ERROR`.

| 参数 | 描述 |
|---|---|
| `FULL` | 返回 `WARNINGS` 和 `timingsStats` 中的所有内容 |
| `WARNINGS` | 返回 `ERRORS` 中的所有内容，以及 `validationReports` 中的 `warningReports` 内容 |
| `ERRORS` (default) | Returns only `errorReports` in `validationReports` |

此外，所有 `reportModes` 都将在适用时返回 `status`、`stats`、`bundleReport` 和 `message` 。
适用。

### 错误代码{ #webapi_tracker_error_codes }

不同的错误场景有不同的错误代码。下表列出了
新 Tracker API 抛出的错误代码列表，以及错误信息和一些附加说明。
说明。错误信息中的占位符（`{0}`、`{1}`、`{2}`...）通常是 uids，除非另有说明。
另有说明。

| 错误代码 | 错误信息 | 描述 |
|:--|:----|:----|
| E1000 | User: `{0}`, has no write access to OrganisationUnit: `{1}`. | 这通常意味着组织单位 `{1}` 不在用户 `{0}` 的捕获范围内，因此写操作没有授权。 |
| E1001 | User: `{0}`, has no data write access to TrackedEntityType: `{1}`. | 当用户无权创建或修改 TrackedEntityType `{1}` 的数据时会发生错误。  
| E1002 | TrackedEntity: `{0}`, already exists. | 当试图创建一个已有 uid 的新 TrackedEntity 时，会出现此错误。请确保在添加新的 TrackedEntity 时使用新的 uid。 |
| E1003 | OrganisationUnit：TrackedEntity 的 `{0}` 超出了 User: `{1}` 的搜索范围。 | |
| E1005 | 找不到 TrackedEntityType：`{0}`。 | 当试图获取一个不存在的 TrackedEntityType（uid `{0}`）时出错。这也可能意味着用户没有读取 TrackedEntityType 的权限。 |
| E1006 | Attribute: `{0}`, does not exist. | 当系统无法找到 uid `{0}` 匹配的 TrackedEntityAttribute 时抛出的错误。这也可能意味着用户没有访问 TrackedEntityAttribute 的权限。 |
| E1007 | Error validating attribute value type: `{0}`; Error: `{1}`. | TrackedEntityAttribute 的值类型与其提供的属性值不匹配。实际验证错误将显示在 `{1}`。 |
| E1008 | 程序阶段 `{0}` 没有引用程序。检查程序阶段配置 | |
| E1009 | 文件资源：`{0}`，已分配给另一个对象。 | 文件资源 uid `{0}` 已分配给系统中的另一个对象。 |
| E1010 | Could not find Program: `{0}`, linked to Event. | 系统无法找到在事件有效负载中指定了 uid `{0}` 的程序。这也可能意味着登录用户无法访问特定程序。 |
| E1011 | Could not find OrganisationUnit: `{0}`, linked to Event. | 系统无法找到在事件有效载荷中指定了 uid `{0}` 的 OrganisationUnit。  |
| E1012 | Geometry does not conform to FeatureType: `{0}`. | 所提供的 FeatureType 要么是 "无"，要么是与所提供的几何图形值不兼容。 |
| E1013 | 找不到与事件相关联的 ProgramStage: `{0}`。 | 系统无法找到在事件有效载荷中指定了 uid `{0}` 的 ProgramStage。这也可能意味着登录用户无法访问 ProgramStage。  |
| E1014 | Provided Program: `{0}`, is a Program without registration. An Enrollment cannot be created into Program without registration. | 只能为注册的计划创建注册。 |
| E1015 | TrackedEntity: `{0}`, already has an active Enrollment in Program `{1}`. | 如果该计划已存在另一个有效注册，则不能注册该计划。至少必须先完成当前注册。|
| E1016 | TrackedEntity: `{0}`, already has an active enrollment in Program: `{1}`, and this program only allows enrolling one time. | 根据程序 `{1}` 配置，一个 TrackedEntity 只能注册该程序一次。看起来 TrackedEntity `{0}` 已经在该程序中注册过一次。因此不能再添加另一个注册。 |
| E1018 | Attribute: `{0}`, is mandatory in program `{1}` but not declared in enrollment `{2}`. | 有效负载中缺少被定义为程序强制属性的属性值。确保在有效负载中提供强制属性的属性值。  |
| E1019 | Only Program attributes is allowed for enrollment; Non valid attribute: `{0}`. | 注册有效负载中指定的属性 uid `{0}` 与程序无关。  |
| E1020 | Enrollment date: `{0}`, can`t be future date. | 除非计划配置允许，否则不能在未来日期注册。 |
| E1021 | Incident date: `{0}`, can`t be future date. | 事件发生日期不能是未来日期，除非程序在配置中允许这样做。 |
| E1022 | TrackedEntity: `{0}`, must have same TrackedEntityType as Program `{1}`. | 程序被配置为接受与注册有效负载中提供的不同的 TrackedEntityType uid。 |
| E1023 | DisplayIncidentDate 为 true，但属性 occurredAt 为空。 | 程序已配置 DisplayIncidentDate，但在有效负载中为空。 |
| E1025 | enrolledAt 属性为空。 | EnrolledAt Date 是注册的必填项。请确保它不是空值。 |
| E1029 | Event OrganisationUnit: `{0}`, and Program: `{1}`, don't match. | 事件有效载荷使用程序 `{1}`，该程序未配置为可被组织单位 `{0}` 访问。 |
| E1030 | Event: `{0}`, already exists. | 当尝试使用已存在的 uid 添加新事件时，会出现此错误。请确保在添加新事件时使用新的 uid。 |
| E1031 | 事件发生日期缺失。 | OccuredAt 属性为空或有效负载中的日期格式无效。 |
| E1032 | Event: `{0}`, do not exist. | |
| E1033 | Event: `{0}`, Enrollment value is NULL. | |
| E1035 | Event: `{0}`, ProgramStage value is NULL. | |
| E1039 | ProgramStage: `{0}`，不可重复，且事件已存在。 | 特定注册的 ProgramStage 已存在一个事件。由于程序阶段被配置为不可重复，因此无法为同一程序阶段添加另一个事件。  |
| E1041 | Enrollment OrganisationUnit: `{0}`, and Program: `{1}`, don't match. | 注册有效载荷包含一个程序 `{1}`，该程序未配置为可被组织单位 `{0}` 访问。 |
| E1043 | Event: `{0}`, completeness date has expired. Not possible to make changes to this event. | 没有 "F_EDIT_EXPIRED "权限的用户无法更新已过期的事件，因为该事件已在其程序中配置。 |
| E1045 | Program: `{0}`, expiry date has passed. It is not possible to make changes to this event. | |
| E1046 | Event: `{0}`, needs to have at least one (event or schedule) date. | 事件有效负载中应包含 occuredAt 或 scheduledAt 属性。 |
| E1047 | Event: `{0}`, date belongs to an expired period. It is not possible to create such event. | 事件 occuredAt 或 scheduledAt 的值早于 PeriodType 开始日期。  |
| E1048 | 对象：`{0}`，uid：`{1}`，uid 格式无效。 | 有效的 uid 有 11 个字符。第一个字符必须是字母（a-z 或 A-Z），其余 10 个字符可以是字母数字（a-z 或 A-Z 或 0-9）。 |
| E1049 | Could not find OrganisationUnit: `{0}`, linked to Tracked Entity. | 系统无法找到 uid `{0}` 的 OrganisationUnit。 |
| E1050 | 缺少事件 ScheduledAt 日期。 | 事件有效负载中的 ScheduledAt 属性丢失或日期格式无效。 |
| E1051 | 事件：`{0}`，当状态为 `{1}` 时，completedAt 必须为空。 | 只有当状态为 COMPLETED 时，才能在有效载荷中传递事件 completedAt |
| E1052 | Enrollment: `{0}`, completedAt must be null when status is `{1}`. | 只有当状态为 "已完成 "时，才能在有效载荷中传递报名完成时间 |
| E1054 | AttributeOptionCombo `{0}` 不在事件程序类别组合 `{1}` 中。 |
| E1055 | 由于程序具有非默认的 CategoryCombo，因此不允许使用默认的 AttributeOptionCombo。 | 程序被配置为包含非默认 CategoryCombo，但请求使用了默认 AttributeOptionCombo。 |
| E1056 | 事件日期：`{0}`，在开始日期：`{1}`之前，属性选项：`{2}`。 | 类别选项配置了起始日期，有效载荷中的事件日期不能早于该起始日期。 |
| E1057 | 事件日期: `{0}`, 在结束日期: `{1}` 之后, 属性选项; `{2}`。 | 类别选项已配置结束日期，有效负载中的事件日期不能晚于该结束日期。  |
| E1063 | TrackedEntity: `{0}`, does not exist. | 当试图获取一个不存在的 TrackedEntity（uid `{0}`）时出错。这也可能意味着用户没有读取 TrackedEntity 的权限。 |
| E1064 | 属性 `{1}` 的非唯一属性值 `{0}` | 属性值在定义的范围内必须是唯一的。错误表示该属性值已存在于另一个 TrackedEntity 中。 |
| E1068 | Could not find TrackedEntity: `{0}`, linked to Enrollment. | 系统无法找到注册有效负载中指定的 TrackedEntity。这也可能意味着用户没有读取 TrackedEntity 的权限。 |
| E1069 | Could not find Program: `{0}`, linked to Enrollment. | 系统无法找到注册有效负载中指定的程序。这也可能意味着用户没有程序的读取权限。 |
| E1070 | Could not find OrganisationUnit: `{0}`, linked to Enrollment. | 系统无法找到注册有效负载中指定的 OrganisationUnit。 |
| E1074 | 缺少 FeatureType。 | |
| E1075 | Attribute: `{0}`, is missing uid. | |
| E1076 | `{0}` `{1}` 是必填项，不能为空 | |
| E1077 | Attribute: `{0}`, text value exceed the maximum allowed length: `{0}`. | |
| E1079 | Event: `{0}`, program: `{1}` is different from program defined in enrollment `{2}`. | |
| E1080 | 注册： `{0}`，已存在。 | 当尝试使用已有的 uid 创建新的注册表时，会出现此错误。请确保在添加新注册表时使用新的 uid。 |
| E1081 | 注册： `{0}`，不存在。 | 当尝试获取一个不存在的注册表（uid `{0}`）时出错。这也可能意味着用户没有读取注册信息的权限。 |
| E1082 | Event: `{0}`, is already deleted and can't be modified. | 如果事件被软删除，则不允许对其进行任何修改。 |
| E1083 | 用户：`{0}`，无权修改已完成的事件。 | 只有超级用户或具有 "F_UNCOMPLETE_EVENT "权限的用户才能修改已完成事件。已完成事件是指状态为已完成的事件。 |
| E1084 | 文件资源：`{0}`，无法找到引用。 | |
| E1085 | 属性：`{0}`，值与值类型不匹配：`{1}`. | 属性值类型与其提供的属性值不匹配。 |
| E1086 | Event: `{0}`, has a program: `{1}`, that is a registration but its ProgramStage is not valid or missing. | |
| E1087 | 事件：`{0}`，找不到数据元素： `{1}`，链接到数据值。 | |
| E1088 | Event: `{0}`, program: `{1}`, and ProgramStage: `{2}`, could not be found. | |
| E1089 | Event: `{0}`, references a Program Stage `{1}` that does not belong to Program `{2}`. | 事件有效负载中的 ProgramStage uid 和 Program uid 不兼容。 |
| E1090 | 属性：`{0}`，在被跟踪实体类型 `{1}` 中是强制性的，但在被跟踪实体 `{2}` 中没有声明。 | 有效负载中缺少强制 TrackedEntityTypeAttributes 的值。 |
| E1091 | User: `{0}`, has no data write access to Program: `{1}`. | 在程序共享配置中，用户没有该程序的写入权限。 |
| E1094 | 不允许更新注册： `{0}`，现有计划 `{1}`。 | 现有注册的注册有效载荷与最初注册的程序 uid 不同。 |
| E1095 | User: `{0}`, 没有数据写入 ProgramStage: `{1}` 的权限。 | 程序阶段共享配置使得用户没有写入该程序阶段的权限。  |
| E1096 | User: `{0}`, has no data read access to Program: `{1}`. | 在程序共享配置中，用户没有该程序的读取权限。 |
| E1099 | User: `{0}`, 没有 CategoryOption: `{1}` 的写入权限。 | 类别选项共享配置使得用户没有写入该类别选项的权限 |
| E1100 | 用户： `{0}`，缺少删除 TrackedEntity 的'F_TEI_CASCADE_DELETE'权限：`{1}`。 | 该 TrackedEntity 存在未删除的注册信息。如果用户没有 "F_TEI_CASCADE_DELETE "权限，则必须先明确删除这些注册信息才能删除 TrackedEntity。 |
| E1102 | 用户： `{0}`, 没有访问被跟踪实体的权限：`{1}`, 程序：`{2}`, 组合。 | 当用户的组织单位不拥有此特定程序的 TrackedEntity 的所有权时，就会抛出此错误。拥有 TrackedEntity-Program 组合的组织单位应属于用户的捕获范围（有时是搜索范围）。 |
| E1103 | 用户: `{0}`, 没有'F_ENROLLMENT_CASCADE_DELETE'权限删除注册 : `{1}`。 | 该 "注册 "存在未删除的 "事件"。如果用户没有 "F_ENROLLMENT_CASCADE_DELETE "权限，则必须先明确删除这些事件，才能删除注册表。 |
| E1104 | User: `{0}`, has no data read access to program: `{1}`, TrackedEntityType: `{2}`. | 与程序相关联的 TrackedEntityType 的共享配置规定，用户没有数据读取权限。 |
| E1110 | Not allowed to update Event: `{0}`, existing Program `{1}`. | 现有事件的事件有效载荷与最初创建时的程序 uid 不同。  |
| E1112 | 属性值：`{0}`，设置为机密，但系统未正确配置为加密数据。 | Either JCE files is missing or the configuration property `encryption.password` might be missing in `dhis.conf`. |
| E1113 | 注册：`{0}`，已删除，无法修改。 | 如果注册表被软删除，则不允许对其进行任何修改。 |
| E1114 | TrackedEntity: `{0}`, is already deleted and can't be modified. | 如果 TrackedEntity 被软删除，则不允许对其进行任何修改。 |
| E1115 | 找不到 CategoryOptionCombo: `{0}`。 | |
| E1116 | 找不到 CategoryOption: `{0}`。 | 这也可能意味着用户无法访问类别选项。|
| E1117 | CategoryOptionCombo does not exist for given category combo and category options: `{0}`. | |
| E1118 | 指定用户 `{0}` 不是有效的 uid。 | |
| E1119 | 已存在 uid `{0}` 的 Tracker Note。 | |
| E1120 | 程序阶段 `{0}` 不允许用户赋值 | 事件有效载荷具有 assignedUserId，但程序阶段未配置为允许用户分配。 |
| E1121 | Missing required tracked entity property: `{0}`. | |
| E1122 | Missing required enrollment property: `{0}`. | |
| E1123 | Missing required event property: `{0}`. | |
| E1124 | Missing required relationship property: `{0}`. | |
| E1125 | 值 `{0}` 不是选项集 `{1}` 中的有效选项代码。 | |
| E1126 | 不允许更新跟踪实体属性：{0} 。 | |
| E1127 | 不允许更新报名属性：{0} 。 | |
| E1128 | 不允许更新事件属性：{0} 。 | |
| E1300 | 由程序规则生成 (`{0}`) - `{1}` | |
| E1301 | 由程序规则生成 (`{0}`) - 不存在强制性数据元素 `{1}` | |
| E1302 | 由程序规则 (`{0}`) 生成 - 数据元素 `{1}` 无效：`{2}` | |
| E1303 | 必填数据元素 `{0}` 不存在 | |
| E1304 | 由程序规则 (`{0}`) 生成 - 数据元素 `{1}` 不是有效的数据元素 | |
| E1305 | 由程序规则 (`{0}`) 生成 - 数据元素 `{1}` 不是程序阶段 `{2}` 的一部分 | |
| E1306 | 由程序规则 (`{0}`) 生成 - 不存在强制属性 `{1}` | |
| E1307 | 由程序规则生成 (`{0}`) - 无法为数据元素 `{1}` 赋值。提供的值必须为空或与计算值 `{2}` 匹配。 | |
| E1308 | 由程序规则 (`{0}`) 生成 - 数据元素 `{1}` 被事件 `{2}` 替换 | |
| E1309 | 由程序规则 (`{0}`) 生成 - 无法为属性 `{1}` 赋值。提供的值必须为空或与计算值 `{2}` 匹配。 | |
| E1310 | 由程序规则 (`{0}`) 生成 - 属性 `{1}` 被替换为 `{2}` | |
| E1311 | 转介事件需要至少有一个完整的关系 | |
| E1312 | 推荐活动需要有双方的关系 | |
| E1313 | 注册的事件{0} 并不指向现有的跟踪实体。系统中的数据可能已损坏 | 表明现有数据中存在异常，即注册人数可能未提及跟踪实体 |
| E1314 | 由程序规则 (`{0}`) 生成 - 数据元素 `{1}` 是必填项，不能删除。 | |
| E4000 | 关系： `{0}` 不能链接到自身 | |
| E4001 | 关系 `{1}` 的关系项 `{0}` 无效：一个项只能链接一个 Tracker 实体。 | |
| E4006 | Could not find relationship Type: `{0}`. | |
| E4010 | 关系类型 `{0}` 约束需要{1} ，但找到了{2} 。 | |
| E4011 | 关系： `{0}` 无法持久化，因为此关系引用的{1} {2} 无效。 | |
| E4012 | 无法找到 `{0}`： `{1}`，链接到 "关系"。 | |
| E4014 | 关系类型 `{0}` 约束要求跟踪的实体具有 `{1}` 类型，但找到了 `{2}`。 | |
| E4015 | 关系：`{0}`，已经存在。 | |
| E4016 | 关系：`{0}`，不存在。 | |
| E4017 | 关系：`{0}`，已删除，无法修改。 | |
| E4018 | 关系： `{0}`，将{1}: `{2}` 连接到{3} ：`{4}` 已经存在。 | |
| E4019 | 用户：`{0}`，没有关系类型的数据写入权限：`{1}`。 | |
| E5000 | "{0}" `{1}` 不能被持久化，因为由它引用的 "{2}" `{3}` 不能被持久化。 | 导入程序无法持久化跟踪器对象，因为引用无法持久化。 |
| E5001 | "{0}" `{1}` 无法删除，因为其引用的 "{2}" `{3}` 无法删除。 | 导入程序无法删除跟踪器对象，因为引用无法删除。 |
| E9999 | 不适用 | 未定义的错误信息。 |

### 验证{ #webapi_tracker_validation }

使用跟踪器导入程序导入数据时，会执行一系列验证，以确保数据的有效性。
数据的有效性。本节将介绍执行的一些不同类型的验证
以便更好地了解导入验证是否失败。

#### 所需属性{ #required-properties } 

在导入数据时，每个跟踪器对象都有几个必须具备的属性
数据。有关所需属性的详尽列表，请参阅[跟踪器对象
部分]（#webapi_tracker_objects）。

在验证必填属性时，我们通常说的是对其他数据或元数据的引用。
元数据的引用。在这种情况下，有三个主要标准：

1. 有效负载中存在引用，且引用不为空。
2. 引用指向正确的数据类型，并存在于数据库中
3. 用户有权查看参考文献

如果第一个条件失败，导入将失败，并提示缺少引用。
但是，假设引用指向的东西不存在，或者用户无法访问。
访问的内容。在这种情况下，这两种情况都会导致无法找到引用的消息。

#### 格式{ #formats } 

跟踪器对象的某些属性需要特定的格式。导入数据时
属性都会根据预期格式进行验证，并根据哪个属性的格式有误而返回不同的错误信息。
不同的错误。以下是一些通过这种方式验证的属性示例：

- UID（涵盖 DHIS2 中对其他数据或元数据的所有引用。）
- 日期
- 几何图形（坐标必须符合其类型指定的格式）

#### 用户访问{ #user-access } 

所有导入的数据都将根据元数据（[共享](#webapi_tracker_metadata_sharing)
和数据中引用的组织单位（[组织单位范围](#webapi_tracker_orgunit_scope)）进行验证。
数据。有关共享和组织单位作用域的更多信息，请参阅以下章节。
章节。

在数据库中查找参考资料的同时，共享也会得到验证。用户访问权限之外的元数据
将被视为不存在。导入将验证数据中引用的任何元数据。
元数据。

另一方面，组织单位具有双重目的。它主要确保数据
只有在导入用户 "捕获范围 "内的组织单位时，才能导入数据。
范围 "内的组织单位导入数据。其次，组织单位还用于限制可用的程序。这意味着
这意味着，如果你试图为一个组织单位导入数据，而该组织单位无法访问你要导入的
程序，则导入将无效。

Users with the `ALL` authority will ignore the limits of sharing and organisation unit scopes when
they import data. However, they can not import enrollments in organisation units that do not have
access to the enrollment program.

#### 属性和数据值{ #attribute-and-data-values } 

属性和数据值分别是被跟踪实体和事件的一部分。但是
属性可以通过类型（TrackedEntityType）或程序（Program）链接到被跟踪实体。
程序（Program）。此外，属性也可以是唯一的。

导入过程中的初始验证是为了确保为属性或数据元素提供的值符合预期值类型。
数据元素的值符合预期的值类型。例如，假设你为一个
数据元素的值。在这种情况下，预期值就是数值。任何错误
与类型和值不匹配相关的错误都会产生相同的错误代码，但会有与违规类型相关的特定信息。
与违规类型相关的特定信息。

Mandatory attributes and data values are also checked on creation, on update mandatory attributes
and data values are not required in the payload. Currently, removing mandatory attributes and data values is
never allowed. Some use-cases require values to be sent separately, while others require all values to
be sent as one. Programs can be configured to either validate mandatory attributes `ON_COMPLETE` or
`ON_UPDATE_AND_INSERT` to accommodate these use-cases.

导入时将验证唯一属性。这意味着只要提供的
值在整个系统中是唯一的，就可以通过。但是，如果发现唯一值
被任何其他被跟踪实体使用，则导入将失败。

#### 组态 { #configuration } 

导入器中验证的最后一部分是基于用户配置的相关元数据的验证。
相关元数据的配置进行验证。有关每种配置的更多信息，请查看相关章节。
可配置验证的一些示例：

- 特征类型（用于几何图形）
- 用户可指定的事件
- 允许未来日期
- 注册一次
- 还有更多

这些配置将进一步改变导入时的验证方式。

### 生成的跟踪实体属性{ #webapi_generate_te_attributes }

使用自动生成唯一值的跟踪实体属性
应用程序可使用三个端点来生成和保留这些值。
> 有关 TextPattern 工作原理的更多信息，请参阅 [此处](https://docs.dhis2.org/en/use/user-guides/dhis-core-version-master/additional-information/dhis2-tutorials.html#working-with-textpattern)

#### 查找所需数值{ #finding-required-values } 

文本格式可能包含根据不同因素变化的变量。其中有些因素是服务器未知的；
因此，在生成和预留值时必须提供这些变量的值。

该端点返回服务器在生成新值时将注入 TextPattern 的必填值和可选值的映射。
生成时必须提供必填变量，而可选变量只应在必要时提供。

  GET /api/33/trackedEntityAttributes/Gs1ICEQTPlG/requiredValues

```json
{
  "REQUIRED": [
    "ORG_UNIT_CODE"
  ],
  "OPTIONAL": [
    "RANDOM"
  ]
}
```

####   生成值端点{ #webapi_generate_values }

在线网络应用程序和其他客户端可使用该端点生成一个唯一值，以供立即使用。
生成的值在生成时保证是唯一的，并保留 3 天。
如果您的 TextPattern 包含必填值，可以将它们作为参数传递。

要覆盖过期时间，请在请求中添加 `?expiration=<number-of-days>`。

    GET /api/33/trackedEntityAttributes/Gs1ICEQTPlG/generate?ORG_UNIT_CODE=OSLO

```json
{
  "ownerObject": "TRACKEDENTITYATTRIBUTE",
  "ownerUid": "Gs1ICEQTPlG",
  "key": "RANDOM(X)-OSL",
  "value": "C-OSL",
  "created": "2018-03-02T12:01:36.680",
  "expiryDate": "2018-03-05T12:01:36.678"
}
```

#### 产生并保留价值终点 { #webapi_generate_reserve_values }

离线客户端可以使用此端点保留一定数量的唯一 ID，以便以后注册新的被跟踪实体实例时使用。
可使用 `numberToReserve` 参数（默认为 1）指定要生成的 ID 数量。

要覆盖默认的 60 天过期时间，请在请求中添加 `?expiration=<number-of-days>`。

    GET /api/33/trackedEntityAttributes/Gs1ICEQTPlG/generateAndReserve?numberToReserve=3&ORG_UNIT_CODE=OSLO

```json
[
  {
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "B-OSL",
    "created": "2018-03-02T13:22:35.175",
    "expiryDate": "2018-05-01T13:22:35.174"
  },
  {
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "Q-OSL",
    "created": "2018-03-02T13:22:35.175",
    "expiryDate": "2018-05-01T13:22:35.174"
  },
  {
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "S-OSL",
    "created": "2018-03-02T13:22:35.175",
    "expiryDate": "2018-05-01T13:22:35.174"
  }
]
```

#### 保留值 { #reserved-values } 

目前无法通过 api 访问保留值，但是，它们
由`generate` 和`generateAndReserve` 端点返回。这
下表解释了保留值对象的属性：

表：保留值

| 物业 | 描述 |
|---|---|
| 所有者对象 | 生成和保留值时引用的元数据类型。目前只支持 TRACKEDENTITYATTRIBUTE。 |
| ownerUid | 生成和保留值时引用的元数据对象的 uid。 |
| 密钥 | 部分生成的值，生成的分段尚未添加。 |
| 价值 | 保留的完全解析值。这是存储数据时发送给服务器的值。 |
| 创建 | 预订的时间戳 |
| 到期日 | 不再保留预订的时间戳 |

过期的预订每天都会被删除。如果模式发生变化，则值
存储数据时将接受已经保留的数据，即使
它们与新模式不匹配，只要预订没有
已到期。

### 计划规则{ #webapi_tracker_program_rules }

用户可以配置 [程序规则](#webapi_program_rules)，为跟踪器表单添加条件行为。
跟踪器表单添加条件行为。除了在跟踪器应用程序中运行这些规则外，跟踪器导入程序也会
也会运行这些规则中的一部分。由于导入程序也会运行这些规则，因此我们可以确保
多一层验证。

并非所有程序规则操作都受支持，因为它们只适用于前台演示。
受支持的程序规则操作的完整列表如下。

  |计划规则行动|支持的|
  |---|:---:|
  |**显示文本**| |
  |**显示键值配对**| |
  |**HIDEFIELD**||
  |**隐藏部分**||
  |**分配**|**X**|
  |**显示警告**|**X**|
  |**淋浴**|**X**|
  |**完成时发出警告**|**X**|
  |**完成时出错**|**X**|
  |**创建活动**||
  |**设置必填字段**|**X**|
  |**发送信息**|**X**|
  |**日程安排信息**|**X**|

程序规则在导入程序中的评估方式与在 Tracker 应用程序中的评估方式相同。
总之，执行程序规则时会考虑以下条件：

* 程序规则必须与导入的数据相关联。例如，程序阶段或数据
元件。
* 程序规则的条件必须为真

程序规则的结果取决于这些规则中定义的操作：

* 程序规则操作可能会导致两种不同的结果：警告或错误。
  * 错误会导致验证失败，而警告则会在
  进口摘要。
    * SHOWWARNING 和 WARNINGONCOMPLETION 操作只能生成警告。
    * SHOWERROR、ERRORONCOMPLETION 和 SETMANDATORYFIELD 操作只能生成错误。
    * ASSIGN 操作既可生成警告，也可生成错误。
      * 当操作为空属性/数据元素赋值时，系统会发出警告。
      生成。
      * 当操作正在为一个属性/数据元素赋值时，该元素已经具有与该属性/数据元素相同的
      值，就会发出警告。
      * 当操作为已有值的属性/数据元素赋值时
      和要赋值的值不同，就会产生错误，除非
      `RULE_ENGINE_ASSIGN_OVERWRITE` system setting is set to true.

此外，程序规则也会产生副作用，如发送和计划信息。更多
有关副作用的更多信息，请参阅下一节。

> **注意**
>
> 在导入过程中，可以使用 `skipProgramRules` 参数跳过程序规则。

### 副作用{ #webapi_tracker_side_effects }

导入完成后，可能会触发一些特定任务。
这些任务就是我们所说的 "副作用"。这些任务执行的操作不会
影响导入本身的操作。

副作用是与导入分离运行的任务，但总是由导入触发。由于
侧效应与导入分离，因此即使导入成功，它们也可能失败。
此外，只有在导入成功时才会运行副作用，因此它们不能反过来失败。
反过来。

目前支持以下副作用：

|副作用|支持的|描述|
|---|:---:|---|
|**跟踪通知**|**X**| 更新可触发通知。触发通知的更新包括**注册**、**事件更新**、**事件或注册完成**。 |
|**ProgramRule Notification**|**X**| 程序规则可触发通知。请注意，这些通知是通过 DHIS2 规则引擎生成的程序规则效果的一部分。|

> **注意**
>
> 某些配置可以控制副作用的执行。可以在导入过程中设置 `skipSideEffects` 标志，以完全跳过副作用。例如，如果你导入了一些不想触发通知的内容，这个参数就很有用。

### 为事件分配用户{ #webapi_tracker_user_event_assignment }

将事件当作任务来处理可使特定的工作流受益，因此，您可以为事件指定一个
用户。

Assigning a user to an event will not change the access or permissions for users but will create a
link between the Event and the user. When an event has a user assigned, you can query events from
the API using the `assignedUser` field as a parameter.

When you want to assign a user to an event, you simply provide the UID of the user you want to
assign in the `assignedUser` field. See the following example:

```json
{
  ...
  "events": [
    {
      "event": "ZwwuwNp6gVd",
      "programStage": "nlXNK4b7LVr",
      "orgUnit": "O6uvpzGd5pu",
      "enrollment": "MNWZ6hnuhSw",
      "assignedUser" : "M0fCOxtkURr"
    }
  ],
  ...
}
```

在本例中，uid 为`M0fCOxtkURr`的用户将被分配给uid 为`ZwwuwNp6gVd`的事件。
的事件。一个事件只能分配一个用户。

要使用此功能，相关程序阶段必须启用用户分配功能，为用户提供的 uid
必须是一个有效的现有用户。

## 跟踪器导出{ #webapi_tracker_export }

Tracker 导出端点允许您检索先前导入的对象，这些对象包括

- **跟踪实体**
- **活动**
- ** 注册**
- **关系**

> **NOTE**
>
> * All tracker export endpoints default to a `JSON` response content. `CSV` is only supported
>   by tracked entities and events.
> * You can export a CSV file by adding the `Accept` header ***text/csv*** or ***application/csv***
>   to the request.
> * You can download in zip and gzip formats:
>     *  CSV for Tracked entities
>     *  JSON and CSV for Events
> * You can export a Gzip file by adding the `Accept` header ***application/csv+gzip*** for CSV
> or ***application/json+gzip*** for JSON.
> * You can export a Zip file by adding the `Accept` header ***application/csv+zip*** for CSV or  
> ***application/json+zip*** for JSON.

### 常见请求参数{ #common-request-parameters } 

以下终端支持分页的标准参数。

- **跟踪实体** `GET /api/tracker/trackedEntities`
- **Events** `GET /api/tracker/events`
- **Enrollments** `GET /api/tracker/enrollments`
- **Relationships** `GET /api/tracker/relationships`

#### 分页请求参数{ #request-parameters-for-pagination } 

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`page`|`Integer`|任何正整数|要返回的页码。默认为 1。|
|`pageSize`|`Integer`|任何正整数|页面大小。默认为 50。|
|`totalPages`|`Boolean`|`true`&#124;`false`|Indicates whether to return the total number of elements and pages. Defaults to `false` as getting the totals is an expensive operation.|
|`paging`|`Boolean`|`true`&#124;`false`|表示是否应忽略分页并返回所有行。默认值为 `true`，这意味着除非 `paging=false`，否则所有请求都会分页。|
|`skipPaging` **已过时，将在第 42 版中移除，请使用 `paging`**|`Boolean`|`true`&#124;`false`|表示是否应忽略分页并返回所有行。默认值为 `false`，这意味着除非 `skipPaging=true`，否则所有请求都要分页。|
|`order`|`String`|Comma-separated list of property name and sort direction pairs in format `propName:sortDirection`.<br><br>Example: `createdAt:desc`<br><br>Entities are ordered by newest (internal id desc) by default, meaning when no order parameter is provided.<br><br>**Note:** `propName` is case sensitive. Valid `sortDirections` are `asc` and `desc`. `sortDirection` is case-insensitive. `sortDirection` defaults to `asc` for properties or UIDs without explicit `sortDirection`.||

> **注意事项**
>
> 请注意，性能与请求的数据量直接相关。较大的页面
> 将需要更多时间返回。

#### 组织单位选择模式的请求参数{ #request-parameters-for-organisational-unit-selection-mode } 

The available organisation unit selection modes are `SELECTED`, `CHILDREN`, `DESCENDANTS`,
`ACCESSIBLE`, `CAPTURE` and `ALL`. Each mode is explained in detail in [this
section](#webapi_tracker_orgunit_scope).

#### 用于过滤响应的请求参数{ #webapi_tracker_field_filter }

All export endpoints accept a `fields` parameter which controls which fields will be returned in the
JSON response. `fields` parameter accepts a comma separated list of field names or patterns. A few
possible `fields` filters are shown below. Refer to [Metadata field
filter](#webapi_metadata_field_filter) for a more complete guide on how to use `fields`.

##### 例子 { #examples } 

|参数示例|意义|
|:---|:---|
|`fields=*`|返回所有字段|
|`fields=createdAt,uid`(字段=创建时间,uid)|only returns fields `createdAt` and `uid`|
|`fields=enrollments[*,!uid]`|返回 `enrollments` 中除 `uid` 以外的所有字段|
|`fields=enrollments[uid]`|只返回 `enrollments` 字段 `uid`|
|`fields=enrollments[uid,enrolledAt]`"（字段=注册[uid,enrolledAt|只返回 `enrollments` 字段 `uid` 和 `enrolledAt`|

### 跟踪实体 (`GET /api/tracker/trackedEntities`){ #tracked-entities-get-apitrackertrackedentities } 

有两个端点专门用于跟踪实体：

- `GET /api/tracker/trackedEntities`
  - 检索符合给定条件的被跟踪实体
- `GET /api/tracker/trackedEntities/{id}`
  - 检索给定 id 的被跟踪实体

如果未另行指定，JSON 将是 `GET` 方法的默认响应。
API 还支持单个端点和集合端点的 CSV 导出。此外，压缩
CSV 类型是集合端点的一个选项。

#### CSV{ #csv } 

对于 CSV，`fields` 请求参数没有任何作用，响应将始终包含以下字段
将始终包含以下字段：

  - 跟踪实体（UID）
  - 跟踪实体类型 (UID)
  - 创建时间（日期）
  - 创建于客户端（日期时间）
  - updatedAt （日期时间）
  - updatedAtClient （日期时间）
  - 组织单位（UID）
  - 非活动（布尔）
  - 已删除（布尔型）
  - 潜在重复（布尔）
  - 几何图形（WKT, https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry.
    You can omit it in case of a `Point` type and with `latitude` and `longitude` provided)
  - latitude (Latitude of a `Point` type of Geometry)
  - longitude (Longitude of a `Point` type of Geometry)
  - 属性
  - displayName （字符串）
  - attrCreatedAt（属性创建日期时间）
  - attrUpdatedAt（属性最后更新日期 Datetime）
  - valueType （字符串）
  - 值（字符串）
  - storedBy (字符串)
  - createdBy （用户的用户名）
  - updatedBy（用户的用户名）

有关更多字段描述，请参阅 [Tracked Entities](#tracked-entities) 和 [Attributes](#attributes) 。

#### GZIP{ #gzip } 

响应为包含 `trackedEntities.csv` 文件的文件 `trackedEntities.csv.gz` 。

#### ZIP{ #zip } 

响应是包含 `trackedEntities.csv` 文件的文件 `trackedEntities.csv.zip` 。

#### 跟踪实体收集端点 `GET /api/tracker/trackedEntities`{ #tracked-entities-collection-endpoint-get-apitrackertrackedentities } 

该端点的目的是检索与客户提供的标准相匹配的跟踪实体。

端点会返回与请求参数相匹配的被跟踪实体列表。

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`filter`|`String`|以逗号分隔的属性筛选器值。|将响应缩小到符合给定过滤器的跟踪实体。过滤器是以冒号分隔的属性或属性 UID，带有可选的操作符和值对。例如：`filter=H9IlTX2X6SL:sw:A`，运算符以`sw`开头，后跟一个值。特殊字符（如 `+`）需要按百分比编码，因此应使用 `%2B` 代替 `+`。作为过滤值一部分的字符，如 `:`（冒号）或 `,`（逗号），需要用 `/`（斜线）转义。同样，`/` 也需要转义。允许对同一属性使用多个操作符/值对，如 `filter=AuPLng5hLbE:gt:438901703:lt:448901704`。不允许重复相同的属性 UID。用户需要访问属性才能对其进行过滤。|
|`orgUnits`|`String`|Comma-separated list of organisation unit `UID`s.|只返回属于所提供组织单位的被跟踪实体|
|`orgUnit` **已过时，将在第 42 版中移除，请使用 `orgUnits`**|`String`|以分号分隔的组织单位 `UID`s'列表。|只返回属于所提供组织单位的跟踪实体。|
|`orgUnitMode` see [orgUnitModes](#webapi_tracker_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|The mode of selecting organisation units, can be. Default is `SELECTED`, which refers to the selected organisation units only.|
|`ouMode` **已过时，将在第 42 版中移除，请使用 `orgUnitMode`** 参见 [orgUnitModes](#webapi_tracker_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|The mode of selecting organisation units, can be. Default is `SELECTED`, which refers to the selected organisation units only.|
|`program`|`String`|程序 `UID`|程序 `UID` ，响应中的被跟踪实体必须加入该程序。|
|`programStatus` **deprecated for removal in version 43 use `enrollmentStatus`**|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|被跟踪实体在给定项目中的注册状态。|
|`programStage`|`String`|`UID`|程序阶段 `UID` ，响应中的被跟踪实体必须有事件。|
|`followUp`|`Boolean`|`true`&#124;`false`|表示跟踪的实体是否被标记为指定计划的跟进对象。|
|`updatedAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 最后更新的开始日期和时间|
|`updatedBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 最后更新的结束日期和时间|
|`updatedWithin`|`Duration`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) | 返回不早于指定期限的被跟踪实体|
|`enrollmentStatus`|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|被跟踪实体在给定项目中的注册状态。|
|`enrollmentEnrolledAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|注册指定计划的开始日期和时间|
|`enrollmentEnrolledBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|注册指定计划的结束日期和时间|
|`enrollmentOccurredAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|给定程序中出现的开始日期和时间以及时间和时间|
|`enrollmentOccurredBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|给定程序中出现的结束日期和时间|
|`trackedEntityType`|`String`|被跟踪实体类型的 UID|只返回给定类型的跟踪实体。|
|`trackedEntities`|`String`|以逗号分隔的被跟踪实体 `UID`s'列表。|Filter the result down to a limited set of tracked entities using explicit uids of the tracked entities by using `trackedEntity=id1,id2`. This parameter will, at the very least, create the outer boundary of the results, forming the list of all tracked entities using the uids provided. If other parameters/filters from this table are used, they will further limit the results from the explicit outer boundary.|
|`trackedEntity` **deprecated for removal in version 42 use `trackedEntities`**|`String`|以分号分隔的被跟踪实体 `UID`s'列表。|Filter the result down to a limited set of tracked entities using explicit uids of the tracked entities by using `trackedEntity=id1;id2`. This parameter will, at the very least, create the outer boundary of the results, forming the list of all tracked entities using the uids provided. If other parameters/filters from this table are used, they will further limit the results from the explicit outer boundary.|
|`assignedUserMode`|`String`|`CURRENT`&#124;`PROVIDED`&#124;`NONE`&#124;`ANY`|根据指定的用户选择模式，将结果限制为已分配事件的被跟踪实体。有关解释，请参阅下表 "分配的用户模式"。 |
|`assignedUsers`|`String`|以逗号分隔的用户 UID 列表，用于根据分配给用户的事件进行过滤。|使用`assignedUser=id1,id2`，将结果筛选到事件分配给给定用户 ID 的一组有限的跟踪实体。只有当 `assignedUserMode` 为 `PROVIDED` 或 `null` 时，才会考虑该参数。例如，如果`assignedUserMode=CURRENT`和`assignedUser=someId`，API 将出错。|
|`assignedUser` **已过时，将在第 42 版中删除 使用 `assignedUsers`**|`String`|以分号分隔的用户 UID 列表，用于根据分配给用户的事件进行筛选。|Filter the result down to a limited set of tracked entities with events that are assigned to the given user IDs by using `assignedUser=id1;id2`.This parameter will only be considered if assignedUserMode is either `PROVIDED` or `null`. The API will error out, if for example, `assignedUserMode=CURRENT` and `assignedUser=someId`|
|`order`|`String`|以逗号分隔的属性名、属性或 UID 和排序方向对的列表，格式为 `propName:sortDirection`。|Supported values are `createdAt, createdAtClient, enrolledAt, inactive, trackedEntity, updatedAt, updatedAtClient`.|
|`eventStatus`|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`VISITED`&#124;`SCHEDULE`&#124;`OVERDUE`&#124;`SKIPPED`|指定程序中任何事件的状态|
|`eventOccurredAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|指定计划活动的开始日期和时间|
|`eventOccurredBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|指定计划活动的结束日期和时间|
|`includeDeleted`|`Boolean`|`true`&#124;`false`|表示是否包含软删除元素|
|`potentialDuplicate`|`Boolean`|`true`&#124;`false`| true：返回标记为潜在重复的被跟踪实体。false：返回未标记为潜在重复的被跟踪实体。如果省略，我们将不检查跟踪实体是否为潜在重复。 |

下表解释了可用的指定用户模式。

表：指定的用户模式

| 模式 | 描述 |
|---|---|
| 当前 | 包括分配给当前登录用户的事件。 |
| 提供 | 包括分配给请求中提供的用户的事件。 |
| 无 | 仅包括未分配的活动。 |
| 任何 | 包括所有分配的事件，只要是分配给某个人的事件，分配给谁并不重要。 |

查询不区分大小写。以下规则适用于查询
参数。

- 必须使用 `orgUnit` 指定至少一个组织单位。
  参数（一个或多个），或必须指定 `orgUnitMode=ALL` 参数。

- Only one of the `program` and `trackedEntity` parameters can be
  指定（零或一）。

- If `programStatus` is specified, then `program` must also be specified.

- If `enrollmentStatus` is specified, then `program` must also be specified.

- If `followUp` is specified, then `program` must also be specified.

- If `enrollmentEnrolledAfter` or `enrollmentEnrolledBefore` is specified then
  还必须指定 `program`。

- 过滤器项目只能指定一次。

##### 请求示例{ #example-requests } 

与特定组织单位和计划相关的所有被跟踪实体的查询如下所示
如下

    GET /api/tracker/trackedEntities?program=IpHINAT79UW&orgUnits=DiszpKrYNg8

使用带筛选器的一个属性和不带筛选器的一个属性查询被跟踪实体、
使用后代组织单位查询模式查询一个组织单位：

    GET /api/tracker/trackedEntities?program=IpHINAT79UW&orgUnits=DiszpKrYNg8&filter=w75KJ2mc4zz:EQ:John

为过滤器指定了多个操作数和过滤器的查询
物品：

    GET /api/tracker/trackedEntities?orgUnits=DiszpKrYNg8&program=ur1Edk5Oe2n&filter=lw1SqmMlnfh:GT:150&filter=lw1SqmMlnfh:LT:190

查询过滤器，其值需要转义，将被解释为 `:,/`：

    GET /api/tracker/trackedEntities?orgUnits=DiszpKrYNg8&program=ur1Edk5Oe2n&filter=lw1SqmMlnfh:EQ:/:/,//

要将程序注册日期指定为查询的一部分，请执行以下操作：

    GET /api/tracker/trackedEntities?orgUnits=DiszpKrYNg8&program=IpHINAT79UW&fields=trackedEntity,enrollments[enrolledAt]&enrollmentEnrolledAfter=2024-01-01

要在 *IN* 过滤器中使用多个值查询属性：

    GET /api/tracker/trackedEntities?trackedEntityType=nEenWmSyUEp&orgUnits=DiszpKrYNg8&filter=w75KJ2mc4zz:IN:Scott;Jimmy;Santiago

您可以使用一系列运算符进行过滤：

|操作员|  描述|
|---|---|
|`EQ`|等于|
|`GE`|大于或等于|
|`GT`|大于|
|`IN`|等于用"; "分隔的多个值之一|
|`LE`|小于或等于|
|`LIKE`|喜欢（自由文本匹配）|
|`LT`|小于|
|`NE`|不等于|

##### 跟踪实体响应示例{ #tracked-entities-response-example } 

API 支持 CSV 和 JSON 响应 `GET /api/tracker/trackedEntities`。

##### JSON{ #json } 

可根据所需字段过滤响应，请参阅[用于过滤响应的请求参数
响应的请求参数](#webapi_tracker_field_filter)

JSON 响应可以如下所示：

```json
{
  "pager": {
    "page": 1,
    "pageSize": 1
  },
  "trackedEntities": [
    {
      "trackedEntity": "F8yKM85NbxW",
      "trackedEntityType": "Zy2SEgA61ys",
      "createdAt": "2019-08-21T13:25:38.022",
      "createdAtClient": "2019-03-19T01:12:16.624",
      "updatedAt": "2019-08-21T13:31:33.410",
      "updatedAtClient": "2019-03-19T01:12:16.624",
      "orgUnit": "DiszpKrYNg8",
      "inactive": false,
      "deleted": false,
      "potentialDuplicate": false,
      "geometry": {
        "type": "Point",
        "coordinates": [
          -11.7896,
          8.2593
        ]
      },
      "attributes": [
        {
          "attribute": "B6TnnFMgmCk",
          "displayName": "Age (years)",
          "createdAt": "2019-08-21T13:25:38.477",
          "updatedAt": "2019-08-21T13:25:38.477",
          "storedBy": "braimbault",
          "valueType": "INTEGER_ZERO_OR_POSITIVE",
          "value": "30"
        },
        {
          "attribute": "TfdH5KvFmMy",
          "displayName": "First Name",
          "createdAt": "2019-08-21T13:25:38.066",
          "updatedAt": "2019-08-21T13:25:38.067",
          "storedBy": "josemp10",
          "valueType": "TEXT",
          "value": "Sarah"
        },
        {
          "attribute": "aW66s2QSosT",
          "displayName": "Last Name",
          "createdAt": "2019-08-21T13:25:38.388",
          "updatedAt": "2019-08-21T13:25:38.388",
          "storedBy": "karoline",
          "valueType": "TEXT",
          "value": "Johnson"
        }
      ]
    }
  ]
}
```

##### CSV{ #csv } 

CSV 响应可以如下所示：

```
trackedEntity,trackedEntityType,createdAt,createdAtClient,updatedAt,updatedAtClient,orgUnit,inactive,deleted,potentialDuplicate,geometry,latitude,longitude,storedBy,createdBy,updatedBy,attrCreatedAt,attrUpdatedAt,attribute,displayName,value,valueType
F8yKM85NbxW,Zy2SEgA61ys,2019-08-21T11:25:38.022Z,2019-03-19T00:12:16.624Z,2019-08-21T11:31:33.410Z,2019-03-19T00:12:16.624Z,DiszpKrYNg8,false,false,false,"POINT (-11.7896 8.2593)",8.2593,-11.7896,,,,2019-08-21T11:25:38.477Z,2019-08-21T11:25:38.477Z,B6TnnFMgmCk,"Age (years)",30,INTEGER_ZERO_OR_POSITIVE
F8yKM85NbxW,Zy2SEgA61ys,2019-08-21T11:25:38.022Z,2019-03-19T00:12:16.624Z,2019-08-21T11:31:33.410Z,2019-03-19T00:12:16.624Z,DiszpKrYNg8,false,false,false,"POINT (-11.7896 8.2593)",8.2593,-11.7896,,,,2019-08-21T11:25:38.066Z,2019-08-21T11:25:38.067Z,TfdH5KvFmMy,"First Name",Sarah,TEXT
F8yKM85NbxW,Zy2SEgA61ys,2019-08-21T11:25:38.022Z,2019-03-19T00:12:16.624Z,2019-08-21T11:31:33.410Z,2019-03-19T00:12:16.624Z,DiszpKrYNg8,false,false,false,"POINT (-11.7896 8.2593)",8.2593,-11.7896,,,,2019-08-21T11:25:38.388Z,2019-08-21T11:25:38.388Z,aW66s2QSosT,"Last Name",Johnson,TEXT
```

#### Tracked Entities single object endpoint `GET /api/tracker/trackedEntities/{uid}`

该端点的目的是检索一个给定 uid 的被跟踪实体。

##### 请求语法 { #request-syntax } 

`GET /api/tracker/trackedEntities/{uid}?program={programUid}&fields={fields}`

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`uid`|`String`|`uid`|返回具有指定 `uid` 的被跟踪实体|
|`program`|`String`|`uid`| 在响应中包含程序属性（仅限用户可访问的属性） |
|`fields`|`String`| Any valid field filter (default `*,!relationships,!enrollments,!events,!programOwners`) |在响应中包含指定的子对象|

##### 请求示例{ #example-requests } 

对被跟踪实体的查询：

    GET /api/tracker/trackedEntities/PQfMcpmXeFE

##### 跟踪实体响应示例{ #tracked-entity-response-example } 

API 支持对 `GET /api/tracker/trackedEntities/{uid}` 的 CSV 和 JSON 响应。

###### JSON{ #json } 

json 响应示例：

```json
{
  "trackedEntity": "PQfMcpmXeFE",
  "trackedEntityType": "nEenWmSyUEp",
  "createdAt": "2014-03-06T05:49:28.256",
  "createdAtClient": "2014-03-06T05:49:28.256",
  "updatedAt": "2016-08-03T23:49:43.309",
  "orgUnit": "DiszpKrYNg8",
  "inactive": false,
  "deleted": false,
  "potentialDuplicate": false,
  "attributes": [
    {
      "attribute": "w75KJ2mc4zz",
      "code": "MMD_PER_NAM",
      "displayName": "First name",
      "createdAt": "2016-08-03T23:49:43.308",
      "updatedAt": "2016-08-03T23:49:43.308",
      "valueType": "TEXT",
      "value": "John"
    },
    {
      "attribute": "zDhUuAYrxNC",
      "displayName": "Last name",
      "createdAt": "2016-08-03T23:49:43.309",
      "updatedAt": "2016-08-03T23:49:43.309",
      "valueType": "TEXT",
      "value": "Kelly"
    }
  ],
  "enrollments": [
    {
      "enrollment": "JMgRZyeLWOo",
      "createdAt": "2017-03-06T05:49:28.340",
      "createdAtClient": "2016-03-06T05:49:28.340",
      "updatedAt": "2017-03-06T05:49:28.357",
      "trackedEntity": "PQfMcpmXeFE",
      "program": "IpHINAT79UW",
      "status": "ACTIVE",
      "orgUnit": "DiszpKrYNg8",
      "enrolledAt": "2024-03-06T00:00:00.000",
      "occurredAt": "2024-03-04T00:00:00.000",
      "followUp": false,
      "deleted": false,
      "events": [
        {
          "event": "Zq2dg6pTNoj",
          "status": "ACTIVE",
          "program": "IpHINAT79UW",
          "programStage": "ZzYYXq4fJie",
          "enrollment": "JMgRZyeLWOo",
          "trackedEntity": "PQfMcpmXeFE",
          "relationships": [],
          "scheduledAt": "2023-03-10T00:00:00.000",
          "followUp": false,
          "deleted": false,
          "createdAt": "2017-03-06T05:49:28.353",
          "createdAtClient": "2016-03-06T05:49:28.353",
          "updatedAt": "2017-03-06T05:49:28.353",
          "attributeOptionCombo": "HllvX50cXC0",
          "attributeCategoryOptions": "xYerKDKCefk",
          "dataValues": [],
          "notes": [],
          "followup": false
        }
      ],
      "relationships": [],
      "attributes": [
        {
          "attribute": "w75KJ2mc4zz",
          "code": "MMD_PER_NAM",
          "displayName": "First name",
          "createdAt": "2016-08-03T23:49:43.308",
          "updatedAt": "2016-08-03T23:49:43.308",
          "valueType": "TEXT",
          "value": "John"
        },
        {
          "attribute": "zDhUuAYrxNC",
          "displayName": "Last name",
          "createdAt": "2016-08-03T23:49:43.309",
          "updatedAt": "2016-08-03T23:49:43.309",
          "valueType": "TEXT",
          "value": "Kelly"
        },
        {
          "attribute": "AuPLng5hLbE",
          "code": "National identifier",
          "displayName": "National identifier",
          "createdAt": "2016-08-03T23:49:43.301",
          "updatedAt": "2016-08-03T23:49:43.301",
          "valueType": "TEXT",
          "value": "245435245"
        },
        {
          "attribute": "ruQQnf6rswq",
          "displayName": "TB number",
          "createdAt": "2016-08-03T23:49:43.308",
          "updatedAt": "2016-08-03T23:49:43.308",
          "valueType": "TEXT",
          "value": "1Z 1F2 A84 59 4464 173 6"
        },
        {
          "attribute": "cejWyOfXge6",
          "displayName": "Gender",
          "createdAt": "2016-08-03T23:49:43.307",
          "updatedAt": "2016-08-03T23:49:43.307",
          "valueType": "TEXT",
          "value": "Male"
        },
        {
          "attribute": "VqEFza8wbwA",
          "code": "MMD_PER_ADR1",
          "displayName": "Address",
          "createdAt": "2016-08-03T23:49:43.307",
          "updatedAt": "2016-08-03T23:49:43.307",
          "valueType": "TEXT",
          "value": "Main street 2"
        }
      ],
      "notes": []
    }
  ],
  "programOwners": [
    {
      "orgUnit": "DiszpKrYNg8",
      "trackedEntity": "PQfMcpmXeFE",
      "program": "ur1Edk5Oe2n"
    },
    {
      "orgUnit": "DiszpKrYNg8",
      "trackedEntity": "PQfMcpmXeFE",
      "program": "IpHINAT79UW"
    }
  ]
}
```

###### CSV{ #csv } 

响应将与集合端点相同，但引用的是单个跟踪实体，尽管每个属性可能有多行。
实体，尽管每个属性可能有多行。

#### 跟踪实体属性值更改日志{ #webapi_tracker_attribute_change_logs }
`GET /api/tracker/trackedEntities/{uid}/changeLogs`

此端点可检索特定被跟踪实体属性的更改日志。它会返回该实体随时间发生变化的所有被跟踪实体属性的列表。

|参数|类型|允许值|
|---|---|---|
|path `/{uid}`|`String`|跟踪实体 `UID`。|
|`program`|`String`|程序 `UID`（可选）。|

##### 跟踪实体属性值更改日志响应示例{ #tracked-entity-attribute-value-change-logs-response-example } 

json 响应示例：

```json
{
   "pager":{
      "page":1,
      "pageSize":10
   },
   "changeLogs":[
      {
         "createdBy":{
            "uid":"AIK2aQOJIbj",
            "username":"tracker",
            "firstName":"Tracker demo",
            "surname":"User"
         },
         "createdAt":"2024-06-20T14:51:16.433",
         "type":"UPDATE",
         "change":{
            "dataValue":{
               "dataElement":"bx6fsa0t90x",
               "previousValue":"true",
               "currentValue":"false"
            }
         }
      },
      {
         "createdBy":{
            "uid":"AIK2aQOJIbj",
            "username":"tracker",
            "firstName":"Tracker demo",
            "surname":"User"
         },
         "createdAt":"2024-06-20T14:50:32.966",
         "type":"CREATE",
         "change":{
            "dataValue":{
               "dataElement":"ebaJjqltK5N",
               "currentValue":"0"
            }
         }
      }
   ]
}
```

The change log type can be `CREATE`, `UPDATE`, or `DELETE`.
`CREATE` and `DELETE` will always hold a single value: the former shows the current value, and the latter shows the value that was deleted. UPDATE will hold two values: the previous and the current.

### 注册人数 (`GET /api/tracker/enrollments`){ #enrollments-get-apitrackerenrollments } 

有两个端点专门用于注册：

- `GET /api/tracker/enrollments`
    - 检索符合给定条件的注册人数
- `GET /api/tracker/enrollments/{id}`
    - 检索给定 id 的注册信息

#### 注册信息收集端点 `GET /api/tracker/enrollments`{ #enrollment-collection-endpoint-get-apitrackerenrollments } 

根据筛选条件返回事件列表。

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`orgUnits`|`String`|Comma-separated list of organisation unit `UID`s.|只返回属于所提供组织单位的注册信息。|
|`orgUnit` **已过时，将在第 42 版中移除，请使用 `orgUnits`**|`String`|以分号分隔的组织单位 `UID`s'列表。|只返回属于所提供组织单位的注册信息。|
|`orgUnitMode` see [orgUnitModes](#webapi_tracker_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|The mode of selecting organisation units, can be. Default is `SELECTED`, which refers to the selected organisation units only.|
|`ouMode` **已过时，将在第 42 版中移除，请使用 `orgUnitMode`** 参见 [orgUnitModes](#webapi_tracker_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|The mode of selecting organisation units, can be. Default is `SELECTED`, which refers to the selected organisation units only.|
|`program`|`String`|`uid`| 计划标识符|
|`programStatus` **已过时，将在第 43 版中删除，使用 `status`**|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|注册状态。|
|`status`|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|注册状态。|
|`followUp`|`boolean`| `true`&#124;`false` | 给定程序的被跟踪实体的跟踪状态。可以是 `true`|`false` 或省略。|
|`updatedAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 只有在此日期后更新的注册信息|
|`updatedWithin`|`Duration`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| 只有在给定期限后更新的注册信息 |
|`enrolledAfter`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|  仅限此日期之前的注册|
|`enrolledBefore`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| 仅限于此日期之前的注册|
|`trackedEntityType`|`String`|`uid`| 被跟踪实体类型的标识符|
|`trackedEntity`|`String`|`uid`| 被跟踪实体的标识符|
|`order`|`String`|以逗号分隔的属性名、属性或 UID 和排序方向对的列表，格式为 `propName:sortDirection`。|Supported fields: `completedAt, createdAt, createdAtClient, enrolledAt, updatedAt, updatedAtClient`.|
|`enrollments`|`String`|以逗号分隔的报名`UID`列表。|使用 `enrollments=id1,id2`，将结果筛选为有限的一组 ID。|
|`enrollment` **deprecated for removal in version 42 use `enrollments`**|`String`|以半角分隔的 `uid` 列表|使用 `enrollment=id1;id2`，将结果筛选为有限的一组 ID。|
|`includeDeleted`|`Boolean`| |为真时，软删除事件将包含在查询结果中。|

查询不区分大小写。以下规则适用于查询参数。

- 必须使用 `orgUnit` 参数（一个或多个）指定至少一个组织单位，或
必须指定*orgUnitMode=ALL*。

- 只能指定 *program* 和 *trackedEntity* 参数中的一个（0 或 1）。

- 如果指定了 *programStatus*，则还必须指定 *program*。
- 如果指定了*enrollmentStatus*，则还必须指定*program*。

- 如果指定了*followUp*，则还必须指定*program*。

- 如果指定了 *enrolledAfter* 或 *enrolledBefore*，则还必须指定 *program*。

##### 请求示例{ #example-requests } 

查询与特定组织单位关联的所有注册
看起来像这样：

    GET /api/tracker/enrollments?orgUnits=DiszpKrYNg8

要将响应限制在属于特定计划的注册人数上，您可以包含一个
程序查询参数：

    GET /api/tracker/enrollments?orgUnits=O6uvpzGd5pu&orgUnitMode=DESCENDANTS&program=ur1Edk5Oe2n

要将程序注册日期指定为查询的一部分，请执行以下操作：

    GET /api/tracker/enrollments?orgUnits=DiszpKrYNg8&program=M3xtLkYBlKI&enrolledAfter=2023-11-14&enrolledBefore=2024-02-07

要将响应限制为特定跟踪实体的注册，您可以包含一个跟踪实体的
实体查询参数：

    GET /api/tracker/enrollments?trackedEntity=ClJ3fn47c4s

要将响应限制在特定跟踪实体的注册信息上，可以包含一个跟踪实体查询参数。
实体查询参数，在本例中，我们将其限制为可为
当前用户：

    GET /api/tracker/enrollments?orgUnitMode=ACCESSIBLE&trackedEntity=tphfdyIiVL6

##### 回应格式 { #response-format } 

The `JSON` response can look like the following.

```json
{
  "pager": {
    "page": 1,
    "pageSize": 1
  },
  "enrollments": [
    {
      "enrollment": "TRE0GT7eh7Q",
      "createdAt": "2019-08-21T13:28:00.056",
      "createdAtClient": "2018-11-13T15:06:49.009",
      "updatedAt": "2019-08-21T13:29:44.942",
      "updatedAtClient": "2019-08-21T13:29:44.942",
      "trackedEntity": "s4NfKOuayqG",
      "program": "M3xtLkYBlKI",
      "status": "COMPLETED",
      "orgUnit": "DiszpKrYNg8",
      "enrolledAt": "2023-11-13T00:00:00.000",
      "occurredAt": "2023-11-13T00:00:00.000",
      "followUp": false,
      "deleted": false,
      "storedBy": "healthworker1",
      "notes": []
    }
  ]
}
```

#### Enrollments single object endpoint `GET /api/tracker/enrollments/{uid}`

该端点的目的是检索一个给定 uid 的 Enrollment。

##### 请求语法 { #request-syntax } 

`GET /api/tracker/enrollment/{uid}`

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`uid`|`String`|`uid`|返回指定`uid`的注册信息|
|`fields`|`String`| Any valid field filter (default `*,!relationships,!events,!attributes`) |包括
中指定的子对象

##### 请求示例{ #example-requests } 

报名查询：

    GET /api/tracker/enrollments/JMgRZyeLWOo

##### 回应格式 { #response-format } 

```json
{
  "enrollment": "JMgRZyeLWOo",
  "createdAt": "2017-03-06T05:49:28.340",
  "createdAtClient": "2016-03-06T05:49:28.340",
  "updatedAt": "2017-03-06T05:49:28.357",
  "trackedEntity": "PQfMcpmXeFE",
  "program": "IpHINAT79UW",
  "status": "ACTIVE",
  "orgUnit": "DiszpKrYNg8",
  "enrolledAt": "2024-03-06T00:00:00.000",
  "occurredAt": "2024-03-04T00:00:00.000",
  "followUp": false,
  "deleted": false,
  "notes": []
}
```

### 事件 (`GET /api/tracker/events`){ #events-get-apitrackerevents } 

有两个端点专门用于处理事件：

- `GET /api/tracker/events`
    - 检索符合给定条件的事件
- `GET /api/tracker/events/{id}`
    - 检索给定 id 的事件

如果未另行指定，JSON 将是 `GET` 方法的默认响应。
API 还支持单个和集合端点的 CSV 导出。此外，它还支持
压缩 JSON 和 CSV。

#### 活动 CSV{ #events-csv } 

对于 CSV，`fields` 请求参数没有任何作用，响应将始终包含以下字段
将始终包含以下字段：

  - 事件
  - 状态（字符串）
  - 程序
  - 程序阶段
  - 注册
  - 组织单位（UID）
  - occurredAt (DateTime)
  - scheduledAt (DateTime)
  - 几何图形（WKT, https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry.
    You can omit it in case of a `Point` type and with `latitude` and `longitude` provided)
  - latitude (Latitude of a `Point` type of Geometry)
  - longitude (Longitude of a `Point` type of Geometry)
  - followUp （布尔）
  - 已删除（布尔型）
  - 创建时间（DateTime）
  - 创建于客户端（日期时间）
  - updatedAt (DateTime)
  - updatedAtClient (DateTime)
  - completedBy (字符串)
  - completedAt (DateTime)
  - updatedBy（用户的用户名）
  - attributeOptionCombo (UID)
  - attributeCategoryOptions (UID)
  - assignedUser （用户的用户名）
  - dataElement (UID)
  - 值（字符串）
  - storedBy (字符串)
  - providedElsewhere (布尔值)
  - storedByDataValue （字符串）
  - createAtDataValue （日期时间）
  - updatedAtDataValue （日期时间）

有关更多字段说明，请参阅 [事件]（#events）和 [数据值]（#data-values）。

#### 活动 GZIP{ #events-gzip } 

The response is file `events.json.gz` or `events.csv.gzip` containing the `events.json`
or `events.csv` file.

#### 活动 ZIP{ #events-zip } 

The response is file`events.json.gz` or `events.json.zip` containing the `events.json`
or `events.csv` file.

#### 事件收集端点 `GET /api/tracker/events`{ #events-collection-endpoint-get-apitrackerevents } 

根据提供的筛选器返回事件列表。

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`program`|`String`|`uid`| 计划标识符|
|`programStage`|`String`|`uid`| 计划阶段的标识符|
|`programStatus` **deprecated for removal in version 43 use `enrollmentStatus`**|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|事件注册的状态。|
|`filter`|`String`|数据元素过滤器的逗号分隔值|将响应缩小到与给定过滤器匹配的事件。过滤器是以冒号分隔的属性或数据元素 UID，带有可选的操作符和值对。例如：`filter=fazCI2ygYkq:eq:PASSIVE`，操作符以`eq`开头，后跟一个值。作为过滤器值一部分的字符，如 `:`（冒号）或 `,`（逗号），需要用 `/`（斜线）转义。同样，`/` 也需要转义。允许对同一属性/数据元素使用多个操作符/值对，如 `filter=qrur9Dvnyt5:gt:70:lt:80`。不允许重复相同的数据元素 UID。用户需要访问数据元素才能对其进行筛选。|
|`filterAttributes`|`String`|以逗号分隔的属性筛选器值|将响应缩小到符合给定过滤器的跟踪实体。过滤器是以冒号分隔的属性或属性 UID，带有可选的操作符和值对。例如：`filter=H9IlTX2X6SL:sw:A`，运算符以`sw`开头，后跟一个值。特殊字符（如 `+`）需要按百分比编码，因此应使用 `%2B` 代替 `+`。作为过滤值一部分的字符，如 `:`（冒号）或 `,`（逗号），需要用 `/`（斜线）转义。同样，`/` 也需要转义。允许对同一属性使用多个操作符/值对，如 `filter=AuPLng5hLbE:gt:438901703:lt:448901704`。不允许重复相同的属性 UID。用户需要访问属性才能对其进行过滤。|
|`followUp`|`boolean`| `true`&#124;`false` | Whether event is considered for follow up in program. Defaults to `true`|
|`trackedEntity`|`String`|`uid`|被跟踪实体的标识符|
|`orgUnit`|`String`|`uid`|组织单位标识符|
|`orgUnitMode` see [orgUnitModes](#webapi_tracker_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|The mode of selecting organisation units, can be. Default is `SELECTED`, which refers to the selected organisation units only.|
|`ouMode` **已过时，将在第 42 版中移除，请使用 `orgUnitMode`** 参见 [orgUnitModes](#webapi_tracker_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|The mode of selecting organisation units, can be. Default is `SELECTED`, which refers to the selected organisation units only.|
|`status`|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`VISITED`&#124;`SCHEDULE`&#124;`OVERDUE`&#124;`SKIPPED` | 事件状态|
|`occurredAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 筛选此日期之后发生的事件。|
|`occurredBefore`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| 筛选在此日期之前发生的事件。|
|`scheduledAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 筛选在此日期之后安排的事件。|
|`scheduledBefore`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| 筛选在此日期之前安排的事件。|
|`updatedAfter`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| 筛选在此日期后更新的事件。不能与 `updatedWithin` 一起使用。|
|`updatedBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | 筛选在此日期之前更新的事件。不能与 `updatedWithin` 一起使用。|
|`updatedWithin`|`Duration`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Durations)| Include only items which are updated within the given duration.<br><br> The format is [ISO-8601#Duration](https://en.wikipedia.org/wiki/ISO_8601#Durations)|
|`enrollmentStatus`|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|事件注册的状态。|
|`enrollmentEnrolledAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|注册指定计划的开始日期和时间|
|`enrollmentEnrolledBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|注册指定计划的结束日期和时间|
|`enrollmentOccurredAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|给定程序的开始日期和时间|
|`enrollmentOccurredBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|给定程序的结束日期和时间|
|`dataElementIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| 用于导出的数据元素 ID 方案。|
|`categoryOptionComboIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| 类别 选项 组合 ID 方案用于导出|
|`orgUnitIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| 出口时使用的组织单位标识方案|
|`programIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| 用于导出的程序 ID 方案|
|`programStageIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| 用于导出的计划阶段 ID 方案|
|`idScheme`|`string`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| 允许一次性为数据元素、类别选项组合、orgUnit、程序和程序阶段设置 id 方案。|
|`order`|`String`|以逗号分隔的属性名称、属性或数据元素 UID 和排序方向对的列表，格式为 `propName:sortDirection`。|支持的字段：`assignedUser, assignedUserDisplayName, attributeOptionCombo, completedAt, completedBy, createdAt, createdAtClient, createdBy, deleted, enrolledAt, enrollment, enrollmentStatus, event, followUp, followup (deprecated), occurredAt, orgUnit, program, programStage, scheduledAt, status, storedBy, trackedEntity, updatedAt, updatedAtClient, updatedBy`.|
|`events`|`String`|以逗号分隔的事件 `UID`列表。|使用 `event=id1,id2` 将结果筛选到有限的一组 ID。|
|`event` **已过时，将在第 42 版中移除，请使用 `events`**|`String`|以半角分隔的 `uid` 列表| 使用 `event=id1;id2` 将结果筛选到有限的一组 ID。|
|`attributeCategoryCombo` (see note)|`String`|属性类别组合标识符。必须与 `attributeCategoryOptions`结合使用。|
|`attributeCc` **已过时，将在第 42 版中移除，请使用 `attributeCategoryCombo`**|`String`|属性类别组合标识符（必须与 attributeCos 结合使用）|
|`attributeCategoryOptions` (see note)|`String`|以逗号分隔的属性类别选项标识符。必须与 `attributeCategoryCombo`结合使用。|
|`attributeCos` **已过时，将在第 42 版中移除，请使用 `attributeCategoryOptions`**|`String`|以分号分隔的属性类别选项标识符。必须与 `attributeCc`结合使用。|
|`includeDeleted`|`Boolean`| |  为真时，软删除事件将包含在查询结果中。|
|`assignedUserMode`|`String`| `CURRENT`&#124;`PROVIDED`&#124;`NONE`&#124;`ANY`| 指定用户选择模式|
|`assignedUsers`|`String`|以逗号分隔的用户 UID 列表，用于根据分配给用户的事件进行过滤。|Filter the result down to a limited set of tracked entities with events that are assigned to the given user IDs by using `assignedUser=id1,id2`.This parameter will only be considered if `assignedUserMode` is either `PROVIDED` or `null`. The API will error out, if for example, `assignedUserMode=CURRENT` and `assignedUser=someId`.|
|`assignedUser` **已过时，将在第 42 版中删除 使用 `assignedUsers`**|`String`|以分号分隔的用户 UID 列表，用于根据分配给用户的事件进行筛选。|Filter the result down to a limited set of tracked entities with events that are assigned to the given user IDs by using `assignedUser=id1;id2`.This parameter will only be considered if assignedUserMode is either `PROVIDED` or `null`. The API will error out, if for example, `assignedUserMode=CURRENT` and `assignedUser=someId`|

> **注**
>
> 如果查询既不包含 `attributeCategoryOptions` 也不包含 `attributeCategoryOptions`、
> 服务器将返回用户具有读取权限的所有属性选项组合的事件。

##### 请求示例{ #example-requests } 

查询具有特定组织单位子机构的所有事件：

    GET /api/tracker/events?orgUnit=YuQRtpLP10I&orgUnitMode=CHILDREN

查询某一组织单位的所有后代的所有事件，即子层次结构中的所有组织单位： 查询某一组织单位的所有后代的所有事件，即子层次结构中的所有组织单位
子层次结构中的所有组织单位：

    GET /api/tracker/events?orgUnit=O6uvpzGd5pu&orgUnitMode=DESCENDANTS

使用特定程序和组织单位查询所有事件：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc

查询具有特定计划和组织单位的所有活动，按预定日期排序
升序：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&order=scheduledAt

查询某一程序和组织单位中发生日期最近的 10 个事件 - 通过分页和按发生日期降序排序的方法
通过分页和按发生日期降序排序：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&order=occurredAt:desc&pageSize=10&page=1

查询特定跟踪实体的某个计划和组织单位的所有事件：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=M3xtLkYBlKI&trackedEntity=dNpxRu1mWG5

查询所有早于或等于 2024-02-03 且与计划和组织相关的事件
单位：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&occurredBefore=2024-02-03

为数据元素 UID 指定多个操作数和筛选器的查询：

    GET /api/tracker/events?orgUnit=g8upMTyEZGZ&program=M3xtLkYBlKI&filter=rFQNCGMYud2:GT:35&filter=rFQNCGMYud2:LT:50

查询过滤器，其值需要转义，将被解释为 `:,/`：

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=lxAQ7Zs9VYR&filter=DanTR5x0WDK:EQ:/:/,//

##### 事件响应示例{ #events-response-example } 

API 支持 CSV 和 JSON 响应 `GET /api/tracker/events`。

###### JSON{ #json } 

JSON 响应如下：

```json
{
  "pager": {
    "page": 1,
    "pageSize": 1
  },
  "events": [
    {
      "event": "A7rzcnZTe2T",
      "status": "ACTIVE",
      "program": "eBAyeGv0exc",
      "programStage": "Zj7UnCAulEk",
      "enrollment": "RiLEKhWHlxZ",
      "orgUnit": "DwpbWkiqjMy",
      "occurredAt": "2023-02-13T00:00:00.000",
      "scheduledAt": "2023-02-13T00:00:00.000",
      "followUp": false,
      "deleted": false,
      "createdAt": "2017-09-08T21:40:22.000",
      "createdAtClient": "2016-09-08T21:40:22.000",
      "updatedAt": "2017-09-08T21:40:22.000",
      "attributeOptionCombo": "HllvX50cXC0",
      "attributeCategoryOptions": "xYerKDKCefk",
      "geometry": {
        "type": "Point",
        "coordinates": [
          -11.468912037323042,
          7.515913998868316
        ]
      },
      "dataValues": [
        {
          "createdAt": "2016-12-06T18:22:34.438",
          "updatedAt": "2016-12-06T18:22:34.438",
          "storedBy": "bjorn",
          "providedElsewhere": false,
          "dataElement": "F3ogKBuviRA",
          "value": "[-11.4880220438585,7.50978830548003]"
        },
        {
          "createdAt": "2013-12-30T14:23:57.423",
          "updatedAt": "2013-12-30T14:23:57.423",
          "storedBy": "lars",
          "providedElsewhere": false,
          "dataElement": "eMyVanycQSC",
          "value": "2018-02-07"
        },
        {
          "createdAt": "2013-12-30T14:23:57.382",
          "updatedAt": "2013-12-30T14:23:57.382",
          "storedBy": "lars",
          "providedElsewhere": false,
          "dataElement": "oZg33kd9taw",
          "value": "Male"
        }
      ],
      "notes": [],
      "followup": false
    }
  ]
}
```

###### CSV{ #csv } 

CSV 响应如下：

```csv
event,status,program,programStage,enrollment,orgUnit,occurredAt,scheduledAt,geometry,latitude,longitude,followUp,deleted,createdAt,createdAtClient,updatedAt,updatedAtClient,completedBy,completedAt,updatedBy,attributeOptionCombo,attributeCategoryOptions,assignedUser,dataElement,value,storedBy,providedElsewhere,storedByDataValue,updatedAtDataValue,createdAtDataValue
A7rzcnZTe2T,ACTIVE,eBAyeGv0exc,Zj7UnCAulEk,RiLEKhWHlxZ,DwpbWkiqjMy,2023-02-12T23:00:00Z,2023-02-12T23:00:00Z,"POINT (-11.468912037323042 7.515913998868316)",7.515913998868316,-11.468912037323042,false,false,2017-09-08T19:40:22Z,,2017-09-08T19:40:22Z,,,,,HllvX50cXC0,xYerKDKCefk,,F3ogKBuviRA,"[-11.4880220438585,7.50978830548003]",admin,false,,2016-12-06T17:22:34.438Z,2016-12-06T17:22:34.438Z
A7rzcnZTe2T,ACTIVE,eBAyeGv0exc,Zj7UnCAulEk,RiLEKhWHlxZ,DwpbWkiqjMy,2023-02-12T23:00:00Z,2023-02-12T23:00:00Z,"POINT (-11.468912037323042 7.515913998868316)",7.515913998868316,-11.468912037323042,false,false,2017-09-08T19:40:22Z,,2017-09-08T19:40:22Z,,,,,HllvX50cXC0,xYerKDKCefk,,eMyVanycQSC,2018-02-07,admin,false,,2013-12-30T13:23:57.423Z,2013-12-30T13:23:57.423Z
A7rzcnZTe2T,ACTIVE,eBAyeGv0exc,Zj7UnCAulEk,RiLEKhWHlxZ,DwpbWkiqjMy,2023-02-12T23:00:00Z,2023-02-12T23:00:00Z,"POINT (-11.468912037323042 7.515913998868316)",7.515913998868316,-11.468912037323042,false,false,2017-09-08T19:40:22Z,,2017-09-08T19:40:22Z,,,,,HllvX50cXC0,xYerKDKCefk,,msodh3rEMJa,2018-02-13,admin,false,,2013-12-30T13:23:57.467Z,2013-12-30T13:23:57.467Z
```

#### Events single object endpoint `GET /api/tracker/events/{uid}`

该端点的目的是检索一个给定 uid 的事件。

##### 请求语法 { #request-syntax } 

`GET /api/tracker/events/{uid}?fields={fields}`

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`uid`|`String`|`uid`|返回指定 `uid` 的事件|
|`fields`|`String`| 任何有效的字段过滤器（默认为`*,!关系`）。 |在响应中包含指定的子对象|

##### 请求示例{ #example-requests } 

查询事件：

    GET /api/tracker/events/rgWr86qs0sI

##### 事件响应示例{ #event-response-example } 

应用程序接口支持对 `GET /api/tracker/trackedEntities` 的 CSV 和 JSON 响应

###### JSON{ #json } 

```json
{
  "event": "rgWr86qs0sI",
  "status": "ACTIVE",
  "program": "kla3mAPgvCH",
  "programStage": "aNLq9ZYoy9W",
  "enrollment": "Lo3SHzCnMSm",
  "orgUnit": "DiszpKrYNg8",
  "occurredAt": "2024-10-12T00:00:00.000",
  "followUp": false,
  "deleted": false,
  "createdAt": "2018-10-20T12:09:19.492",
  "createdAtClient": "2017-10-20T12:09:19.492",
  "updatedAt": "2018-10-20T12:09:19.492",
  "attributeOptionCombo": "amw2rQP6r6M",
  "attributeCategoryOptions": "RkbOhHwiOgW",
  "dataValues": [
    {
      "createdAt": "2015-10-20T12:09:19.640",
      "updatedAt": "2015-10-20T12:09:19.640",
      "storedBy": "system",
      "providedElsewhere": false,
      "dataElement": "HyJL2Lt37jN",
      "value": "12"
    }
  ],
  "notes": [],
  "followup": false
}
```

###### CSV{ #csv } 

响应将与收集端点相同，但指的是单个事件、
尽管每个数据元素值可能有多行。

#### 事件数据值更改日志{ #webapi_event_data_value_change_logs }
`GET /api/tracker/events/{uid}/changeLogs`

此端点可检索特定事件数据值的更改日志。它会返回该特定事件随时间变化的所有事件数据值的列表。

|参数|类型|允许值|
|---|---|---|
|path `/{uid}`|`String`|事件 `UID`。|

##### 事件数据值更改日志响应示例{ #event-data-value-change-logs-response-example } 

json 响应示例：

```json
{
   "pager":{
      "page":1,
      "pageSize":10
   },
   "changeLogs":[
      {
         "createdBy":{
            "uid":"AIK2aQOJIbj",
            "username":"tracker",
            "firstName":"Tracker demo",
            "surname":"User"
         },
         "createdAt":"2024-06-20T15:43:36.342",
         "type":"DELETE",
         "change":{
            "dataValue":{
               "dataElement":"UXz7xuGCEhU",
               "previousValue":"12"
            }
         }
      },
      {
         "createdBy":{
            "uid":"AIK2aQOJIbj",
            "username":"tracker",
            "firstName":"Tracker demo",
            "surname":"User"
         },
         "createdAt":"2024-06-20T15:43:27.175",
         "type":"CREATE",
         "change":{
            "dataValue":{
               "dataElement":"UXz7xuGCEhU",
               "currentValue":"12"
            }
         }
      },
      {
         "createdBy":{
            "uid":"AIK2aQOJIbj",
            "username":"tracker",
            "firstName":"Tracker demo",
            "surname":"User"
         },
         "createdAt":"2024-06-20T14:51:16.433",
         "type":"UPDATE",
         "change":{
            "dataValue":{
               "dataElement":"bx6fsa0t90x",
               "previousValue":"true",
               "currentValue":"false"
            }
         }
      }
   ]
}
```

The change log type can be `CREATE`, `UPDATE`, or `DELETE`.
`CREATE` and `DELETE` will always hold a single value: the former shows the current value, and the latter shows the value that was deleted. UPDATE will hold two values: the previous and the current.


### 关系 (`GET /api/tracker/relationships`){ #relationships-get-apitrackerrelationships } 

关系是跟踪器中两个实体之间的链接。这些实体可以是跟踪实体、
注册和事件。

该端点的目的是检索对象之间的关系。

与其他跟踪对象端点不同，关系只暴露一个端点：

- `GET /api/tracker/relationships?[trackedEntity={trackedEntityUid}|enrollment={enrollmentUid}|event={eventUid}]&fields=[fields]`

#### 请求参数{ #request-parameters } 

|请求参数|类型|允许值|描述|
|---|---|---|---|
|`trackedEntity`|`String`|`uid`|被跟踪实体的标识符|
|`enrollment`|`String`|`uid`|注册的标识符|
|`event`|`String`|`uid`|事件的标识符|
|`fields`|`String`|Any valid field filter (default `relationship,relationshipType,createdAtClient,from[trackedEntity[trackedEntity],enrollment[enrollment],event[event]],to[trackedEntity[trackedEntity],enrollment[enrollment],event[event]]`) |在响应中包含指定的子对象|
|`order`|`String`|以逗号分隔的属性名、属性或 UID 和排序方向对的列表，格式为 `propName:sortDirection`。|Supported fields: `createdAt, createdAtClient`.|
|`includeDeleted`|`Boolean`|`true`&#124;`false`| 是否在查询结果中包含软删除元素|

以下规则适用于查询参数。

- only one parameter among `trackedEntity`, `enrollment`, `event` can be passed

> **注意**
>
> 使用跟踪实体、注册或事件参数，将返回跟踪实体、注册或事件作为关系一部分（从或至）的任何关系。
> 跟踪实体、注册或事件是关系的一部分（从或至）。只要
> 用户有访问权限。

#### 回复示例{ #example-response } 

```json
{
  "pager": {
    "page": 1,
    "pageSize": 2
  },
  "relationships": [
    {
      "relationship": "oGtgtJpp6fG",
      "relationshipType": "Mv8R4MPcNcX",
      "from": {
        "trackedEntity": {
          "trackedEntity": "neR4cmMY22o"
        }
      },
      "to": {
        "trackedEntity": {
          "trackedEntity": "DsSlC54GNXy"
        }
      }
    },
    {
      "relationship": "SSfIicJKbh5",
      "relationshipType": "Mv8R4MPcNcX",
      "from": {
        "trackedEntity": {
          "trackedEntity": "neR4cmMY22o"
        }
      },
      "to": {
        "trackedEntity": {
          "trackedEntity": "rEYUGH97Ssd"
        }
      }
    }
  ]
}
```

## 跟踪器门禁控制{ #webapi_tracker_access_control }

Tracker 在访问控制方面有几个不同的概念，如共享、组织单位
范围、所有权和访问级别。以下章节将简要介绍
不同的主题。

### 元数据共享{ #webapi_tracker_metadata_sharing }

共享设置是 DHIS2 的标准功能，适用于跟踪和汇总
元数据/数据以及仪表盘和可视化项目。共享的核心是
定义谁能看到/做什么。一般来说，有五种可能的共享配置--无
访问、元数据读取、元数据写入、数据读取和数据写入。这些访问配置可以
用户和/或用户组级别授予（更具灵活性）。以下元数据及其共享设置
以下元数据及其共享设置尤为重要：数据元素、类别
选项、计划、计划阶段、跟踪实体类型、跟踪实体属性以及跟踪器
相关仪表盘和仪表盘项目。

共享设置的工作原理很简单--在 Tracker 数据
导入/导出过程中强制执行。要读取数据值，用户需要拥有数据读取权限。如果用户要
修改数据，则需要拥有数据写入权限。同样，如果用户要修改
元数据，就必须授予元数据写入权限。

Tracker 数据的一个关键点是需要采用整体方法。例如，用户
只对数据元素有读取权限是无法查看数据元素值的。用户
需要有数据读取权限，才能访问该数据元素所属的父计划阶段和计划。
所属的父节目阶段和节目。类别选项组合也是如此。在 Tracker 中，事件与
属性选项组合（AttributeOptionCombo）相关，而属性选项组合是由类别选项组合而成的。因此，用户
要读取一个事件的数据，他/她需要有对所有类别选项和相应类别的数据读取权限。
相应类别的数据读取权限。如果用户
用户就无法访问整个事件。
事件。

要访问 "注册 "数据，必须首先访问被跟踪实体。
首先。通过共享设置程序、跟踪实体类型和跟踪实体属性，可控制对跟踪实体的访问。
类型和跟踪实体属性的共享设置来控制对跟踪实体的访问。访问注册后，就可以访问事件
数据，这同样取决于程序阶段和数据元素共享设置。

另一个需要考虑的关键点是如何规划对不同程序阶段的访问。
有时，我们可能需要向特定用户组（实验室技术人员）授予访问特定阶段的权限，如
例如 "实验室结果"）的访问权限。在这种情况下，我们可以
为 "实验室结果 "阶段提供数据写入访问权限，可能为一个或多个阶段提供数据读取 访问权限，以防我们希望实验室技术人员读取数据。
如果我们希望实验室技术人员读取其他医疗结果，则可以提供对 "实验室结果 "阶段的数 据写入访问权限；如果我们认为实验室技术人员没有必要查看数据，则可以不提供访问权限。
如果我们认为实验室技术人员没有必要查看实验室相关数据以外的数据，则不提供访问权限。

总之，DHIS2 具有细粒度的共享设置，我们可以用它来实施数据和元数据层面的访问控制机制。
机制。这些共享设置可直接应用于
用户级别或用户组级别。具体如何应用共享设置取决于当前的使用情况。
而定。

有关数据共享的更多详细信息，请查阅 [数据
共享](https://docs.dhis2.org/en/use/user-guides/dhis-core-version-master/configuring-the-system/about-sharing-of-objects.html#data-sharing-for-event-based-programs)。

### 组织单位范围{ #webapi_tracker_orgunit_scope }

组织单位是 DHIS2 中最基本的对象之一。它们定义了一个范围
允许用户记录和/或读取数据的范围。有三种组织单位
可分配给用户的组织单位有三种。它们是数据采集、数据查看（不用于跟踪器）和跟踪器搜索。
搜索。顾名思义，这些组织单位定义了一个范围，在此范围内，用户可以进行相应的操作。
进行相应操作的范围。用户可以在其搜索范围和捕获范围组织单元中搜索数据。
范围组织单位。

不过，为了进一步微调范围，DHIS2 Tracker 引入了一个概念，我们称之为
**组织单位选择模式（OrganisationUnitSelectionMode）**。这种模式通常在导出跟踪器对象时使用。
例如，如果用户有一个特定的跟踪器搜索范围，这是否意味着我们必须
是否意味着每次用户尝试搜索跟踪器、注册或事件对象时，我们都必须使用该范围？还是说
还是用户希望将搜索范围限制在所选的组织单位或整个捕获
组织单位范围，等等。

用户可以通过在 API 请求中传递 `orgUnitMode` 的特定值来进行微调：

*api/tracker/trackedEntities?orgUnit=UID&orgUnitMode=specific_organisation_unit_selection_mode*

目前有六种选择模式可供选择：*选定、子代、后代、捕获、
和全部*。

1. **选择**：顾名思义，该模式缩小了由
   向请求中指定的组织单位请求 API。
2. **儿童**：在此模式下，组织单位范围使用所选的
   组织单位及其直属单位，即下一级组织单位。
3. **后代**：在此模式下，选定的组织单元及其下的所有内容、
   不仅包括直系子代，还包括所有后代，构成数据操作
宇宙
4. **捕获**：该模式包括与当前系统相关联的数据采集组织单位。
   用户和所有后代。它包括子层次结构中的所有组织单位。
5. **可访问**：该模式旨在检索用户搜索范围内的数据
   组织单位。这包括用户可见的所有内容，包括打开的和已审计的内容。
搜索范围内的程序，以及用户的受保护程序和封闭程序中的数据。
捕获范围。如果用户没有搜索组织单位，系统默认为捕获范围、
确保用户始终可以访问至少一个宇宙。捕获范围
它是强制性的，是保证用户数据环境的基本要素。
6. **全部**：该模式仅供授权用户使用，特别是具有 ALL（全部）权限的用户。
   (超级用户）。具有 F_TRACKED_ENTITY_INSTANCE_SEARCH_IN_ALL_ORGUNITS 权限的用户还可以
在全系统范围内搜索，但需要共享对返回程序、程序阶段和/或跟踪程序的访问权限
实体类型。对于未经授权的用户，将出现异常。

The first three modes, *SELECTED*, *CHILDREN* and *DESCENDANTS* expect an organisation unit to be
supplied in the request, while the last three, *CAPTURE*, *ACCESSIBLE* and *ALL* do not expect it
and in fact the request will fail if an organisation unit is provided.

如果在
API 请求中明确提供时，组织单位模式将是上述所列模式之一。由于这不是一个必填字段，如果没有指定，那么默认值为
默认值为*SELECTED*，否则为*ACCESSIBLE*。

在进行跟踪器导入操作时传递这些模式没有什么意义。因为在
写入跟踪器数据时，每个对象都需要附加一个特定的组织单元。
组织单位。然后，系统将确保所提及的每个组织单位都属于
CAPTURE 范围。如果不属于，系统将直接拒绝写入操作。

请注意，与 Tracker 对象相关的组织单位关联有 4 种类型。A
跟踪实体有一个组织单位，通常称为注册组织单位。
注册有一个与之相关的组织单位。事件也有一个
关联。跟踪实体-计划组合也有一个所有者组织单元。
组合。

获取 Tracker 对象时，根据上下文，组织单位范围会应用于
上述四个组织单位关联之一。

例如，在没有程序上下文的情况下检索 TrackedEntity 时，组织单位范围适用于注册组织单位。
作用域适用于 TrackedEntity 的注册组织单位。而当
组织单位范围则应用于所有者组织单位。
组织单位范围适用于所有者组织单位。

### 跟踪器计划所有权{ #webapi_tracker_ownership }

A new concept called Tracker Ownership is introduced from 2.30. This introduces a new organisation
unit association for a TrackedEntity - Program combination. We call this the Owner (or Owning)
Organisation unit of a TrackedEntity in the context of a Program. The Owner organisation unit is
used to decide access privileges when reading and writing tracker data related to a program. This,
along with the Program's [Access Level](#webapi_tracker_access_level) configuration, decides the access
behavior for Program-related data (Enrollments and Events). A user can access a TrackedEntity's
Program data if the corresponding Owner OrganisationUnit for that TrackedEntity-Program combination
falls under the user's organisation unit scope (Search/Capture). For Programs that are configured
with access level  *OPEN* or *AUDITED* , the Owner OrganisationUnit has to be in the user's search
scope. For Programs that are configured with access level  *PROTECTED* or *CLOSED* , the Owner
OrganisationUnit has to be in the user's capture scope to be able to access the corresponding
program data for the specific tracked entity. Irrespective of the program access level, to access
Tracker objects, the requested organisation unit must always be within either the user's search
scope or capture scope. A user cannot request objects outside these two scopes unless they are
using the organisation unit mode ALL and have sufficient privileges to use that mode.

请求跟踪实体而不指定程序时，响应将只包括
符合[元数据共享设置]（#webapi_tracker_metadata_sharing）和以下标准之一的被跟踪实体
以下标准之一：

* 被跟踪的实体已加入用户可访问数据的至少一个程序，且用户
 可以进入所有者组织单元。
* 被跟踪的实体没有加入用户有数据访问权的任何程序，但用户有
 访问被跟踪的实体注册组织单位。

#### 追踪器所有权覆盖：打破玻璃{ #webapi_tracker_ownership_override }

It is possible to temporarily override this ownership privilege for a program that is configured
with an access level of *PROTECTED*. Any user will be able to temporarily gain access to the Program
related data if the user specifies a reason for accessing the TrackedEntity-Program data. This act
of temporarily gaining access is termed as *breaking the glass*. Currently, temporary access is
granted for 3 hours. DHIS2 audits breaking the glass along with the reason specified by the user. It
is not possible to gain temporary access to a program that has been configured with an access level
of *CLOSED*. To break the glass for a TrackedEntity-Program combination, the following POST request
can be used:

    /api/tracker/ownership/override?trackedEntity=DiszpKrYNg8&program=eBAyeGv0exc&reason=patient+showed+up+for+emergency+care

#### 追踪器所有权转移{ #webapi_tracker_ownership_transfer }

可将 TrackedEntity-Program 的所有权从一个组织单位转移到另一个组织单位。
转移。这在病人转诊或迁移时非常有用。只有拥有
所有权访问权限（或打破玻璃的临时访问权限）的用户才能转移所有权。要转移
将一个 TrackedEntity-Program 的所有权转移给另一个组织单位，可以使用下面的 PUT 请求
使用：

    /api/tracker/ownership/transfer?trackedEntity=DiszpKrYNg8&program=eBAyeGv0exc&ou=EJNxP3WreNP

### 访问级别{ #webapi_tracker_access_level }

DHIS2 对 Tracker 数据提供额外的保护。除了标准的
元数据和数据保护的标准功能外，Tracker 数据还受到额外的
访问级别保护机制。  目前，可为程序配置四种访问级别
程序：开放、审核、保护和关闭。

只有当用户尝试与计划数据（即
注册和活动数据。程序的不同访问级别配置是程序数据开放（或封闭）的程度。
程序数据的开放（或封闭）程度。请注意，所有其他共享设置仍然受到尊重、
访问级别只是访问控制的附加层。下面简要介绍
程序可配置的四种访问级别。

#### 打开{ #open } 

在所有访问级别中，该访问级别的限制最少。OPEN 程序中的数据可以
用户可以访问和修改 OPEN 程序中的数据。
用户可以访问和修改 OPEN 程序中的数据。  使用此访问级别，可以访问和修改捕获范围之外的数据，而无需任何理由或后果。
无需任何理由或后果。

#### 经审计的{ #audited } 

这与开放访问级别相同。不同之处在于，系统会自动
为特定用户访问的数据添加审计日志条目。

#### 受保护的{ #protected } 

这种访问级别的限制稍多一些。受保护程序中的数据只有在所有者组织单位属于用户捕获范围的情况下才能被用户访问。
只有当所有者组织单位属于用户的捕获范围时，用户才能访问受保护程序内的数据。但是，如果用户
用户可以通过 [打破玻璃](#webaptrl) 获得临时所有权。
玻璃](#webapi_tracker_ownership_override)获得临时所有权。用户必须说明为什么要访问手头的数据。
他们为什么要访问手头的数据。然后，系统会将理由和访问审核记录在案，并提供 3 个月的临时访问权限。
访问审计日志，并为用户提供 3 小时的临时访问权限。请注意，打破玻璃时
时，所有者组织单位保持不变，只有打碎玻璃的用户才能获得临时访问权。
获得临时访问权。

#### 关闭{ #closed } 

这是最受限制的访问级别。在访问级别为
如果所有者组织单位不在用户的捕获范围内，则无法访问 "关闭 "程序下记录的数据。
范围。在这种配置下也无法打破玻璃或获得临时所有权。
请注意，仍有可能将所有权转移到另一个组织单位。只有
才能将跟踪实体-程序组合的所有权转移给另一个组织单位。
另一个组织单位。如果所有权被转移，所有者组织单位将被更新。
跟踪实体

## 工作列表{ #working-lists } 

工作列表允许用户保存筛选器和排序偏好，从而有效地组织工作流程。
首选项。每种类型的工作列表
实体、注册和事件都有专门的应用程序接口进行管理。

工作列表是[元数据](#webapi_metadata)，因此可以共享，并受与其他元数据相同的
[共享](#webapi_sharing) 模式。当使用
[`/api/sharing`](#webapi_sharing)端点时，应将类型参数设置为
工作列表 API 的名称。例如，在 [tracked entity working
列表](#tracked-entity-instance-filters)。

由于工作列表是元数据，关于如何创建、更新和删除元数据，请参阅 [元数据](#webapi_metadata)。
删除元数据。以下各节描述了每个工作列表
端点。

### 跟踪实体工作清单{ #tracked-entity-working-lists } 

使用以下工具创建、更新和删除跟踪实体工作列表

    /api/trackedEntityInstanceFilters

#### 有效载荷{ #payload } 

表：有效载荷

| 物业 | 描述 | 例 |
|---|---|---|
|名称|工作列表名称。必须填写。||
|描述|工作清单说明。||
|排序顺序|工作列表的排序顺序。||
|风格|包含 css 样式的对象。|`{"color": "blue", "icon": "fa fa-calendar"}`|
|程序|包含程序 ID 的对象。必须填写。|`{ "id" : "uy2gU8kTjF"}`|
|实体查询标准|代表各种可能过滤值的对象。请参阅下面的*实体查询标准*定义表。
|事件过滤器|事件筛选器列表。请参阅下面的 *Event filters* 定义表。|`[{"programStage"："eaDH9089uMp"，"eventStatus"："OVERDUE"，"eventCreatedPeriod"：{"periodFrom"：-15，"periodTo"：15}}]`|

表格实体查询标准定义

| 物业 | 描述 | 例 |
|---|---|---|
|属性值过滤器|属性值筛选器列表。用于在列出跟踪实体实例时指定属性值过滤器|`"attributeValueFilters"=[{"attribute"："abcAttributeUid", "le"："20", "ge"："10", "lt"："20", "gt"："10"，"in"：["印度", "挪威"], "like"："abc"，"sw"："abc"，"ew"："abc"，"dateFilter"：{"startDate"："2014-05-01","endDate":"2019-03-20","startBuffer":-5，"endBuffer"：5, "period"："LAST_WEEK", "type"："RELATIVE"}]`|
|注册状态|被跟踪实体的注册状态。可以是 none（任何注册状态）或 ACTIVE|COMPLETED|CANCELLED。||
|跟进|当此参数为 true 时，工作列表只返回注册人数为 `folloWup=true` 的被跟踪实体。||
|组织单位|指定组织单位的 uid|`{"组织单位"："a3kGcGDCuk7"}`|
|ouMode|指定组织单位选择模式。可能的值有：已选|儿童|替代人员|可选|捕获|全部|`"ouMode"："SELECTED"`|
|指定用户模式|指定事件的指定用户选择模式。可能的值有 CURRENT（当前）| PROVIDED（已提供）| NONE（无）| ANY（任意）。请参阅下表了解每个值的含义。如果是 PROVIDED（或空），则将考虑有效负载中的非空 assignedUsers。|"assignedUserMode"："提供"|
|指定用户|指定事件的指定用户列表。与上述 PROVIDED assignedUserMode 一起使用。|`"assignedUsers"：["a3kGcGDCuk7", "a3kGcGDCuk8"]`|
|显示列序|指定列的输出排序|`"displayOrderColumns"：["注册日期", "计划"]`"显示顺序列".|
|订单|以逗号分隔值指定字段的排序/排序方式及其方向。单个排序项的形式为 "orderDimension:direction"。注：支持的 orderDimensions 包括：trackedEntity、created、createdAt、createdAtClient、updatedAt、updatedAtClient、enrolledAt、inactive 和跟踪实体属性。|`"order"="a3kGcGDCuk6:desc"`|
|程序阶段|要指定要过滤的计划阶段 uid，将根据是否在指定计划阶段注册来过滤被跟踪的实体。|`"programStage"="a3kGcGDCuk6"`|
|trackedEntityType|要指定一个 trackedEntityType（跟踪实体类型）来过滤跟踪实体。|`{"trackedEntityType"="a3kGcGDCuk6"}`|
|跟踪实体|指定查询跟踪实体时使用的 trackedEntityInstances 列表。|`"trackedEntityInstances"=["a3kGcGDCuk6", "b4jGcGDCuk7"]`|
|注册创建日期|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 基于注册创建日期的对象日期过滤。|`"enrollmentCreatedDate"：{ "period"："LAST_WEEK", "type"："RELATIVE" }`|
|注册事件日期|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects)基于注册事件日期的对象日期过滤。|`"enrollmentIncidentDate"：{ "startDate"："2014-05-01", "endDate"："2019-03-20", "startBuffer"：-5，"endBuffer"：5, "period"："LAST_WEEK", "type"："相对"}`。|
|事件状态|事件状态。可能的值是 "活动"、"已完成"、"已访问"、"已安排"、"逾期"、"跳过 "和 "已访问"。|`"status": "VISITED"`|
|事件日期|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 基于事件日期的对象日期过滤。|`"事件日期"：{"startBuffer"：-5，"endBuffer"：5, "type"："RELATIVE" }`|
|最后更新日期|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 基于最后更新日期的对象日期过滤。|`"lastUpdatedDate"：{"startDate"："2014-05-01", "endDate"："2019-03-20", "type"："绝对" }`|

表格事件筛选器定义

| 物业 | 描述 | 例 |
|---|---|---|
|程序阶段|被跟踪实体需要返回哪个程序阶段的事件。|`"eaDH9089uMp"`|
|事件状态|事件状态。可以是 none（任何事件状态）或 ACTIVE|COMPLETED|SCHEDULE|OVERDUE。|`ACTIVE`|
|事件创建周期|FilterPeriod 对象，包含必须创建事件的时间段。请参阅下面的 *Period* 定义。|`{"periodFrom"：-15, "periodTo"：15}`|
|指定用户模式|指定事件的指定用户选择模式。可能的值是 CURRENT（分配给当前用户的事件）| PROVIDED（分配给 "assignedUsers "列表中提供的用户的事件）| NONE（没有分配给任何人的事件）| ANY（分配给任何人的事件）。如果是 PROVIDED（或空），则将考虑有效负载中的非空 assignedUsers。|`"assignedUserMode"："PROVIDED"`|
|指定用户|指定事件的指定用户列表。与上述 PROVIDED assignedUserMode 一起使用。|`"assignedUsers"：["a3kGcGDCuk7", "a3kGcGDCuk8"]`|

表格筛选周期定义

| 物业 | 描述 | 例 |
|---|---|---|
|期间从|从当天算起的天数。可以是正整数，也可以是负整数。|-15|
|期间至|从当天算起的天数。必须大于 periodFrom。可以是正整数，也可以是负整数。|15|

#### 查询请求参数{ #query-request-parameters } 

表格：跟踪实体实例筛选器查询参数

| 查询参数 | 描述 |
|---|---|
|程序|程序标识符。将筛选器限制在给定的程序中。|

### 计划阶段工作清单{ #program-stage-working-lists } 

使用以下工具创建、更新和删除计划阶段工作列表

    /api/programStageWorkingLists

#### 有效载荷{ #payload } 

表：有效载荷

| 有效载荷值 | 描述 | 例 |
|---|---|---|
|名称|工作列表名称。必须填写。||
|描述|工作清单说明。||
|程序|包含程序 ID 的对象。必须填写。|`{"id" : "uy2gU8kTjF"}`|
|程序阶段|包含程序阶段 ID 的对象。必须填写。|`{"id" : "oRySG82BKE6"}`|
|程序阶段查询标准|代表各种可能过滤值的对象。请参阅下面的*程序阶段查询标准*定义表。

表：计划阶段查询标准

| 标准值 | 描述 | 例 |
|---|---|---|
|事件状态|事件状态。可能的值是 "活动"、"已完成"、"已访问"、"已安排"、"逾期"、"跳过 "和 "已访问"。|`"status": "VISITED"`|
|事件创建时间|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 基于事件创建日期的对象过滤。|`{"type":"ABSOLUTE","startDate":"2020-03-01","endDate":"2022-12-30"}`|
|事件发生时间|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 根据事件发生日期过滤对象。|`{"type": "RELATIVE", "period": "TODAY"}`|
|事件计划日期|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 根据事件计划日期过滤对象。|`{"type": "RELATIVE", "period": "TODAY"}`|
|注册状态|任何有效的注册状态。可能的值有 "激活"、"已完成 "和 "已取消"。|`"enrollmentStatus"（注册状态）："已完成"`|
|跟进|表示是否过滤标记为后续跟踪的注册信息|`"followUp":true`|
|入学人数|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 根据事件注册日期过滤对象。|`"enrolledAt"：{"type": "RELATIVE", "period": "THIS_MONTH"}`。|
|注册发生时间|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 根据事件发生日期过滤对象。|`{"type": "RELATIVE", "period": "THIS_MONTH"}`|
|orgUnit|有效的组织单位 UID|`"orgUnit"："Rp268JB6Ne4"`|
|ouMode|有效的 OU 选择模式|`"ouMode"："SELECTED"`|
|指定用户模式|事件的有效用户选择模式。可能的值有 CURRENT、PROVIDED、NONE、ANY 和 ALL。如果是 PROVIDED（或空），则预期有效负载中的分配用户为非空。|"assignedUserMode": "PROVIDED" 指定用户模式|
|指定用户|事件的指定用户列表。与上述 PROVIDED assignedUserMode 一起使用。|"分配的用户":["DXyJmlo9rge"]|
|订单|以逗号分隔的字段及其方向的列表，结果将按其排序。单个项目的排序形式为 "orderDimension:direction"。|"顺序"："w75KJ2mc4zz:asc"|
|显示列序|列的输出排序|"displayColumnOrder":["w75KJ2mc4zz", "zDhUuAYrxNC"].|
|数据过滤器|项目列表，包含查询事件时使用的筛选器|"dataFilters":[{"dataItem": "GXNUsigphqK", "ge": "10", "le": "20"}]|
|属性值过滤器|属性值筛选器列表。用于在列出跟踪实体时指定属性值筛选器|"attributeValueFilters":[{"attribute": "ruQQnf6rswq", "eq": "15"}]。|

请看下面的有效载荷示例：

```json
{
  "name": "Test WL",
  "description": "Test WL definition",
  "program": {
    "id": "uy2gU8kT1jF"
  },
  "programStage": {
    "id": "oRySG82BKE6"
  },
  "programStageQueryCriteria": {
    "eventStatus": "VISITED",
    "eventCreatedAt": {
      "type": "ABSOLUTE",
      "startDate": "2020-03-01",
      "endDate": "2022-12-30"
    },
    "eventScheduledAt": {
      "type": "RELATIVE",
      "period": "TODAY"
    },
    "enrollmentStatus": "COMPLETED",
    "followUp": true,
    "enrolledAt": {
      "type": "RELATIVE",
      "period": "THIS_MONTH"
    },
    "enrollmentOccurredAt": {
      "type": "RELATIVE",
      "period": "THIS_MONTH"
    },
    "orgUnit": "Rp268JB6Ne4",
    "ouMode": "SELECTED",
    "assignedUserMode": "PROVIDED",
    "assignedUsers": [
      "DXyJmlo9rge"
    ],
    "order": "w75KJ2mc4zz:asc",
    "displayColumnOrder": [
      "w75KJ2mc4zz",
      "zDhUuAYrxNC"
    ],
    "dataFilters": [
      {
        "dataItem": "GXNUsigphqK",
        "ge": "10",
        "le": "20"
      }
    ],
    "attributeValueFilters": [
      {
        "attribute": "ruQQnf6rswq",
        "eq": "15"
      }
    ]
  }
}
```

### 活动工作清单{ #event-working-lists } 

使用以下功能创建、更新和删除事件工作列表

    /api/eventFilters

#### 有效载荷{ #payload } 

表：有效载荷

| 物业 | 描述 | 例 |
|---|---|---|
|名称|工作清单名称。|"名称": "我的工作清单"|
|描述|工作清单说明。|"description"："用于列出分配给我的所有活动"。|
|程序|程序的 uid。|"程序"："a3kGcGDCuk6"|
|程序阶段|程序阶段的 uid。|"程序阶段"： "a3kGcGDCuk6"|
|事件查询标准|包含用于查询、排序和筛选事件的参数的对象。|"eventQueryCriteria"：{ "organisationUnit": "a3kGcGDCuk6", "status"："COMPLETED", "createdDate"：{ "from"："2014-05-01", "to"："2019-03-20"     }, "dataElements"：["a3kGcGDCuk6:EQ:1", "a3kGcGDCuk6"], "filters"：["a3kGcGDCuk6:EQ:1"]，"programStatus"："ACTIVE", "ouMode"："SELECTED", "assignedUserMode"："PROVIDED", "assignedUsers" : ["a3kGcGDCuk7", "a3kGcGDCuk8"], "followUp": false, "trackedEntityInstance"："a3kGcGDCuk6"，"事件"：["a3kGcGDCuk7"、"a3kGcGDCuk8"]，"字段"："eventDate,dueDate", "order"："dueDate:asc,createdDate:desc" }|

表格事件查询标准定义

| 物业 | 描述 | 例 |
|---|---|---|
|跟进|用于根据注册 followUp 标志过滤事件。可能的值为 true|false。|"followUp": true|
|组织单位|指定组织单位的 uid|"organisationUnit"："a3kGcGDCuk7"|
|ouMode|指定 OU 选择模式。可能的值有：SELECTED（已选）| CHILDREN（子女）|DESCENDANTS（替代者）|ACCESSIBLE（可选）|CAPTURE（捕获）|ALL（全部）。|"ouMode"："选择"|
|指定用户模式|指定事件的指定用户选择模式。可能的值有 CURRENT（当前）| PROVIDED（已提供）| NONE（无）| ANY（任意）。请参阅下表了解每个值的含义。如果是 PROVIDED（或空），则将考虑有效负载中的非空 assignedUsers。|"assignedUserMode"："提供"|
|指定用户|指定事件的指定用户列表。与上述 PROVIDED assignedUserMode 一起使用。|"assignedUsers"：["a3kGcGDCuk7"、"a3kGcGDCuk8"]|
|显示列序 |指定列的输出排序|"displayOrderColumns"（显示顺序列）：["事件日期"、"到期日"、"节目"]|
|订单|以逗号分隔值指定字段的排序/排序方式及其方向。单个排序项的形式为 "dataItem:direction"。|"order"="a3kGcGDCuk6:desc,eventDate:asc"。|
|数据过滤器|指定列出事件时要应用的筛选器|"dataFilters"=[{ "dataItem"："abcDataElementUid", "le"："20", "ge"："10", "lt"："20", "gt"："10"，"in"：["印度"、"挪威"]，"like"："abc"，"dateFilter"：{ "startDate"："2014-05-01", "endDate"："2019-03-20", "startBuffer"：-5，"endBuffer"：5, "period"："LAST_WEEK", "type"："RELATIVE" }     }]|
|地位|任何有效的 EventStatus|"eventStatus"（事件状态）："已完成"|
|活动|指定事件列表|"events"=["a3kGcGDCuk6"]|
|完成日期|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 基于完成日期的对象日期过滤。|"completedDate"：{ "startDate"："2014-05-01", "endDate"："2019-03-20", "startBuffer"：-5，"endBuffer"：5, "period"："LAST_WEEK", "type"："RELATIVE" }|
|事件日期|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 基于事件日期的对象日期过滤。|"eventDate"：{ "startBuffer"：-5，"endBuffer"：5, "type"："RELATIVE" }|
|到期日|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 基于到期日的对象日期过滤。|"dueDate"：{ "period"："LAST_WEEK", "type"："RELATIVE" }|
|最后更新日期|[DateFilterPeriod](#webapi_tracker_workinglists_common_objects) 基于最后更新日期的对象日期过滤。|"lastUpdatedDate"：{ "startDate"："2014-05-01", "endDate"："2019-03-20", "type"："绝对"}。|

请看下面的有效载荷示例：

```json
{
  "name": "event working list",
  "program": "VBqh0ynB2wv",
  "eventQueryCriteria": {
    "eventDate": {
      "period": "LAST_WEEK",
      "type": "RELATIVE"
    },
    "dataFilters": [
      {
        "ge": "35",
        "le": "70",
        "dataItem": "qrur9Dvnyt5"
      }
    ],
    "assignedUserMode": "PROVIDED",
    "assignedUsers": [
      "CotVI2NX0rI",
      "xE7jOejl9FI"
    ],
    "status": "ACTIVE",
    "order": "occurredAt:desc",
    "displayColumnOrder": [
      "occurredAt",
      "status",
      "assignedUser",
      "qrur9Dvnyt5",
      "oZg33kd9taw"
    ]
  }
}
```

### 常见物品{ #webapi_tracker_workinglists_common_objects }

表格DateFilterPeriod 对象定义

| 物业 | 描述 | 例 |
|---|---|---|
|类型|指定日期周期类型是否为绝对 | 相对|`"type" : "RELATIVE"`|
|时间|指定是否使用相对系统定义的周期。仅当 `type` 为 RELATIVE 时适用。(有关支持的相对周期，请参阅[相对周期](#webapi_date_relative_period_values)|`"period" : "THIS_WEEK"`|
|开始日期|绝对开始日期。仅当 `type` 为绝对时适用|`"startDate":"2014-05-01"`|
|结束日期|绝对结束日期。仅当 `type` 为绝对时适用|`"startDate":"2014-05-01"`|
|startBuffer|相对自定义开始日期。仅当 `type` 为相对时适用|`"startBuffer":-10`|
|endBuffer|相对自定义结束日期。仅当 `type` 为 RELATIVE 时适用。|`"startDate":+10`|


## 潜在重复   { #potential-duplicates } 

潜在重复记录是重复数据删除功能识别出的可能重复的记录。
重复。由于该功能的性质，API 端点有一定的限制。A
潜在重复记录代表一对疑似重复的记录。

要检索潜在重复文件列表，请使用以下端点：

    GET /api/potentialDuplicates

潜在重复的响应有效载荷如下所示：

```json
{
  "created": "2024-06-04T10:11:29.110",
  "lastUpdated": "2024-06-04T10:11:29.110",
  "original": "<UID>",
  "duplicate": "<UID>",
  "status": "OPEN|INVALID|MERGED",
  "id": "<id>"
}
```

这些是该端点接受的参数：

| 参数名称 | 描述 | 类型 | 允许值 |
|---|---|---|---|
| 跟踪实体 | 被跟踪实体清单 | 字符串列表（用逗号分隔）| 现有被跟踪实体的 UID |
| 地位 | 潜在的重复状态 | 字符串 | `OPEN`, `INVALID`, `MERGED`, `ALL` |

要检查单个潜在重复记录，请使用以下终端：

    GET /api/potentialDuplicates/<id>

要创建新的潜在副本，请使用此端点：

    POST / api / potentialDuplicates

您提供的有效载荷必须包括原始和重复跟踪实体的 UID。新的
潜在副本默认是打开的。

```json
{
  "original": "<UID>",
  "duplicate": "<UID>"
}
```

| 状态代码 | 描述
|---|---|
| 400 | 输入的原件或副本为空或具有无效的 uid
| 403 | 用户无权读取原始或复制的 TE
| 404 | 未找到 TE
| 409 | 已有一对原始和复制的 TE

要更新潜在副本的状态，请使用以下终端：

    PUT /api/potentialDuplicates/<id>

| 参数名称 | 描述 | 类型 | 允许值 |
|---|---|---|---|
| 地位 | 潜在的重复状态 | 字符串 | `OPEN`, `INVALID` |

| 状态代码 | 描述
|---|---|
| 400 | 您无法将潜在的重复内容更新为 MERGED，因为这只能通过合并请求来实现
| 400 | 无法更新已处于 MERGED 状态的潜在副本

### 合并跟踪实体{ #merging-tracked-entities } 

如果被跟踪的实体被认为是可行的，它们可以合并在一起。要启动合并，第一步
步是将两个被跟踪实体定义为潜在重复。合并端点会将数据从
合并端点会将数据从重复的跟踪实体移至原始跟踪实体，并删除重复实体的剩余数据。
重复的数据。

要合并潜在重复，即潜在重复所代表的两个跟踪实体、
使用以下端点：

    POST /api/potentialDuplicates/<id>/merge

| 参数名称 | 描述 | 类型 | 允许值 |
|---|---|---|---|
| 合并策略 | 用于合并潜在重复数据的策略 | 字符串 | 自动（默认）或手动 |

The endpoint accepts a single parameter, `mergeStrategy`, which determines the strategy used when merging. For the `AUTO` strategy, the server will attempt to merge the two tracked entities automatically without user input. This strategy only allows merging tracked entities without conflicting data (see examples below). The `MANUAL` strategy requires the user to send in a payload describing how the merge should be done. For examples and rules for each strategy, see their respective sections below.

#### 合并策略 自动{ #merge-strategy-auto } 

自动合并功能会评估两个被跟踪实体的可合并性，并在它们被认为可合并时将其合并。
认为可以合并，就会将它们合并。可合并性基于两个被跟踪实体是否有任何
冲突。冲突指的是无法自动合并的数据。可能出现的
冲突的例子包括

- 同一属性在每个被跟踪的实体中具有不同的值。
- 两个被跟踪的实体都参加了同一个计划。
- 跟踪实体有不同的类型。

如果遇到任何冲突，将向用户返回错误信息。

When no conflicts are found, all data in the duplicate that is not already in the original will be
moved to the original. This includes attribute values, enrollments (including events), and
relationships. After the merge completes, the duplicate is deleted and the Potential Duplicate is
marked as `MERGED`. When requesting an automatic merge, a payload is not required and will be
ignored.

#### 合并战略手册{ #merge-strategy-manual } 

手动合并适用于存在可解决的冲突或在合并过程中不需要移动所有数据的情况。
在合并过程中移动。例如，如果一个属性在两个被跟踪实体实例中的值不同
例如，如果一个属性在两个被跟踪的实体实例中都有不同的值，用户可以指定是保留原始值还是移动重复的
值。由于手动合并涉及用户明确要求移动数据，因此需要进行一些
额外的检查：

- 原件和副本之间不能有关系（这将导致无效的
自我参照关系）
- 在两个被跟踪实体中，关系不能是同一类型和同一对象（IE.
这将导致重复关系)

手动合并有两种方法：有有效载荷和无有效载荷。

当请求手动合并时，如果没有有效载荷，我们就会告诉 API 在不移动任何数据的情况下合并两个被跟踪的
实体，而不移动任何数据。换句话说，我们只是删除重复数据，并将
潜在重复已合并。在很多情况下，这可能是有效的，例如被跟踪的实体刚刚创建，但还没有注册。
创建，但未登记的情况下，这可能是有效的。

否则，如果手动合并请求带有有效载荷，则有效载荷指的是应将哪些数据从重复数据移至原始数据。
要从副本移到正本中的数据。有效载荷如下所示

```json
{
  "trackedEntityAttributes": ["B58KFJ45L9D"],
  "enrollments": ["F61SJ2DhINO"],
  "relationships": ["ETkkZVSNSVw"]
}
```

This payload contains three lists, one for each of the types of data that can be moved.
`trackedEntityAttributes` is a list of uids for tracked entity attributes, `enrollments` is a list
of uids for enrollments and `relationships` a list of uids for relationships. The uids in this
payload have to refer to data that actually exists on the duplicate. There is no way to add new data
or change data using the merge endpoint - Only moving data.

#### 有关合并的其他信息{ #additional-information-about-merging } 

由于增加了复杂性，目前还无法合并参加同一计划的跟踪实体。
增加了复杂性。解决方法是在开始合并之前，手动删除其中一个被跟踪实体的注册信息。
实体的注册。

所有合并都基于数据库中已持久化的数据，这意味着当前的合并服务不会再次验证这些数据。
服务不会再次验证这些数据。这意味着，如果数据已经无效，在合并过程中也不会报告。
报告。服务中进行的唯一验证与关系有关，如前所述。
中提到的关系。



# 电子邮件 { #email } 

## 电子邮件 { #webapi_email } 

Web API 具有用于发送电子邮件的资源。对于电子邮件
发送 需要已正确设置 SMTP 配置
并且 DHIS2 实例的系统通知电子邮件地址具有
被定义。您可以从电子邮件设置屏幕设置 SMTP 设置
和来自常规设置屏幕的系统通知电子邮件地址
在 DHIS2 中。

    / api / 33 /电子邮件

### 系统通知 { #webapi_email_system_notification } 

*notification* 资源可让您发送系统电子邮件通知
使用 JSON 或 XML 格式的给定主题和文本。电子邮件将发送至
DHIS2 通用系统中定义的通知电子邮件地址
设置：

```json
{
  "subject": "Integrity check summary",
  "text": "All checks ran successfully"
}
```

您可以通过发布到通知来发送系统电子邮件通知
像这样的资源：

```bash
curl -d @email.json "localhost/api/33/email/notification" -X POST 
  -H "Content-Type:application/json" -u admin:district
```

### 出站电子邮件 { #outbound-emails } 

您还可以通过发布到
通知资源如下所述。 `F_SEND_EMAIL` 或 `ALL`
权限必须在系统中才能使用这个 api。主题
参数是可选的。 “DHIS 2”字符串将作为默认主题发送
如果 url 中没有提供。应该对 URL 进行编码才能使用它
应用程序接口。

```bash
curl "localhost/api/33/email/notification?recipients=xyz%40abc.com&message=sample%20email&subject=Test%20Email" 
  -X POST -u admin:district
```

### 测试讯息 { #webapi_email_test_message } 

通过发送测试电子邮件来测试 SMTP 设置是否正确
您可以自己与 *test* 资源进行交互。发送测试邮件
您的 DHIS2 用户帐户必须具有有效的电子邮件地址
与之相关。您可以像这样发送测试电子邮件：

```bash
curl "localhost/api/33/email/test" -X POST -H "Content-Type:application/json" -u admin:district
```






# 数据存储 { #data-store } 

## 数据存储 { #webapi_data_store } 

使用 *dataStore* 资源，开发人员可以存储任意数据
他们的应用程序。对数据存储密钥的访问基于其共享设置。
默认情况下，所有创建的密钥都可以公开访问（读取和写入）。
此外，对数据存储命名空间的访问仅限于用户的
访问相应的应用程序，如果应用程序保留了命名空间。
例如，有权访问“sampleApp”应用程序的用户也将
能够使用数据存储中的 sampleApp 命名空间。如果一个命名空间
没有保留，使用它不需要特定的访问权限。

    / api / 33 / dataStore

Note that there are reserved namespaces used by the system that require 
special authority to be able to read or write entries. 
For example the namespace for the android settings app `ANDROID_SETTINGS_APP`
will require the `M_androidsettingsapp` authority.

### 数据存储结构 { #webapi_data_store_structure } 

数据存储条目由命名空间、键和值组成。这
命名空间和键的组合是唯一的。值数据类型为 JSON。

表格数据存储结构

| 项目 | 描述 | 数据类型 |
|---|---|---|
| 命名空间 | 用于组织条目的命名空间。 | 串 |
| 键 | 识别值的关键。 | 串 |
| 值 | 保存条目信息的值。 | JSON格式 |
| 加密 | 表示是否要对给定密钥的值进行加密 | Boolean |

### 获取键和名称空间 { #webapi_data_store_get_keys_and_namespaces } 

有关所有现有名称空间的列表：

    GET /api/33/dataStore

清单示例curl请求：

```bash
curl "play.dhis2.org/demo/api/33/dataStore" -u admin:district
```

响应示例：

```json
[
  "foo",
  "bar"
]
```

有关命名空间中所有键的列表：

    GET /api/33/dataStore/<namespace>

清单示例curl请求：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo" -u admin:district
```

响应示例：

```json
[
  "key_1",
  "key_2"
]
```

要从名称空间检索现有键的值：

    GET /api/33/dataStore/<namespace>/<key>

卷曲请求检索示例：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo/key_1"-u admin:district
```

响应示例：

```json
{
  "foo":"bar"
}
```

要从名称空间检索现有键的元数据：

    GET /api/33/dataStore/<namespace>/<key>/metaData

卷曲请求检索示例：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo/key_1/metaData" -u admin:district
```

响应示例：

```json
{
  "id": "dsKeyUid001", 
  "created": "...",
  "user": {...},
  "namespace": "foo",
  "key": "key_1"
}
```

### 查询应用程序接口{ #query-api } 
通过查询 API，可以对命名空间中的所有键值进行查询和过滤。参数 `fields` 用于指定查询。这对于在单个请求中检索整个命名空间中键的特定值非常有用。 

    GET /api/dataStore/<namespace>?fields=

The list of `fields` can be:

* 空：只返回条目键
* `.`: 返回存储的根值
* 以逗号分隔的路径列表： `<path>[,<path>]`; 每个 `<path>` 可以是一个简单的属性名（如 `年龄 `）或一个嵌套路径（如 `person.age `）。 

此外，还可以使用一个或多个 `filter` 参数过滤条目，并使用 `order` 参数排序。 
参数对条目排序。 

可使用 `rootJunction=OR`（默认）或 `rootJunction=AND`组合多个过滤器。 

All details on the `fields`, `filter` and `order` parameters are given in the following sections.

#### 分页{ #paging } 
默认情况下，结果使用分页。使用 `pageSize` 和 `page` 调整大小和偏移量。 
可以使用参数 `paging=false` 选择不使用分页，并始终返回所有匹配结果。 
由于名称空间中可能有很多条目，因此应谨慎使用。默认页面大小为 50。

    GET /api/dataStore/<namespace>?fields=.&page=2&pageSize=10

关闭分页后，条目将以纯结果数组的形式返回，作为根 JSON 结构。通过使用 `headless=true`，可以在分页结果中实现相同的效果。

```json
{
  "pager": { ... },
  "entries": [...]
}
```
对
```json
[...]
```

#### 价值提取{ #value-extraction } 
数据存储允许提取整个简单或复杂的值 
以及提取复杂 JSON 值的部分内容。

> **注**
> 
> 为了使示例更清晰，示例中显示的响应大多省略了包含 `pager` 信息的最外层对象
> 和 `entries` 数组。

要过滤特定字段集，请在命名空间中添加一个 `fields` 参数 
查询：

    GET /api/dataStore/<namespace>?fields=name,description

This returns a list of all entries having a non-null `name` and/or a 
`description` field like in the following example:

```json
[
  {"key": "key1", "name": "name1", "description": "description1"},
  {"key": "key2", "name": "name2", "description": "description2"}
]
```

如果出于某种原因，我们甚至希望结果列表中不包含任何提取字段为非空的条目 
为非空的条目，可以在结果列表中添加 `includeAll` 参数 
参数：

    GET /api/dataStore/<namespace>?fields=name,description&includeAll=true

现在的答复可能是这样的

```json
[
  {"key": "key1", "name": "name1", "description": "description1"},
  {"key": "key2", "name": "name2", "description": "description2"},
  {"key": "key3", "name": null, "description": null},
  {"key": "key4", "name": null, "description": null}
]
```

提取不仅限于简单的根级成员，还可以通过在成员名称后使用方括号或圆括号来提取嵌套成员。 
嵌套成员：

    GET /api/dataStore/<namespace>?fields=name,root[child1,child2]
    GET /api/dataStore/<namespace>?fields=name,root(child1,child2)

回复示例如下

```json
[
  { "key": "key1", "name": "name1", "root": {"child1": 1, "child2": []}},
  { "key": "key2", "name": "name2", "root": {"child1": 2, "child2": []}}
]
```

同样的语法也适用于嵌套成员：

    GET /api/dataStore/<namespace>?fields=root[level1[level2[level3]]]
    GET /api/dataStore/<namespace>?fields=root(level1(level2(level3)))

此处为答复示例：

```json
[
  { "key": "key1", "root": {"level1": {"level2": {"level3": 42}}}},
  { "key": "key1", "root": {"level1": {"level2": {"level3": 13}}}}
]
```

当提取这种深度嵌套的值时，我们可能不想保留 
结构，而是将叶子成员提取到响应中的顶层成员。
可以使用别名来实现这一点。别名可以放在 
在成员名称之后的任何地方，使用 `~hoist` 并在圆括号中紧跟别名，如下所示：

    GET /api/dataStore/<namespace>?fields=root[level1[level2[level3~hoist(my-prop)]]]

现在的回复是这样的

```json
[
  { "key": "key1", "my-prop": 42},
  { "key": "key2", "my-prop": 13}
]
```

如果在为嵌套成员提供别名时需要保留完整路径，那么 
父路径时，需要使用点号语法来重复表示嵌套。
这也可用于以新的不同结构重组响应 
例如

    GET /api/dataStore/<namespace>?fields=root[level1[level2[level3~hoist(my-root.my-prop)]]]

新结构的回复现在看起来是这样的：

```json
[
  { "key": "key1", "my-root": {"my-prop": 42}},
  { "key": "key2", "my-root": {"my-prop": 13}}
]
```

OBS！别名不能用于重命名中间层。但是，别名
可用于解决与 `key` 成员的名称冲突。

    GET /api/dataStore/<namespace>?fields=id,key~hoist(value-key)

```json
[
  { "key": "key1", "id": 1, "value-key": "my-key1"},
  { "key": "key2", "id": 2, "value-key": "my-key2"}
]
```

### 结果排序{ #sorting-results } 
可使用 `order=<path>[:direction]` 参数按单一属性对结果进行分类。
这可以是任何有效值 `<path>` 或条目关键字（使用 `_` 作为路径）。

默认情况下，如果路径上的值是混合类型的字符串，则按字母数字排序。

例如，要提取名称属性并对结果进行排序，请使用

    GET /api/dataStore/<namespace>?fields=name&order=name

要切换到降序，请使用 `:desc`：

    GET /api/dataStore/<namespace>?fields=name&order=name:desc

有时，排序的属性是数字，因此用字母数字解释会引起混淆。
在这种情况下，可以使用特殊的排序类型 `:nasc` 和 `:ndesc`。

总之，订单可以是以下其中之一：

* `asc`: alphanumeric ascending order
* `desc:`: alphanumeric descending order
* `nasc`: numeric ascending order
* `ndesc`: numeric descending order

> **OBS!**
> 
> When using numeric order all matches must have a numeric value for the property at the provided `<path>`.

### 过滤条目{ #filtering-entries } 
要在查询 API 上下文中过滤条目，请添加一个或多个 `filter` 参数，同时也使用 `fields` 参数。
参数。

Each `filter` parameter has the following form:

* unary operators: `<path>:<operator>`
* binary operators: `<path>:<operator>:<value>`
* 集合运算符：`<path>:<operator>:[<value>,<value>,...]`

一元运算符有

| 操作员 | 描述 |
| -------- | ----------- |
| `null`   | value is JSON `null` |
| `!null`  | 值已定义，但与 JSON `null` 不同 |
| `empty`  | 值为空对象、空数组或长度为零的 JSON 字符串 |
| `!empty` | 值不同于空对象、空数组或零长度字符串 |

二进制运算符有

| 操作员 | 描述 |
| -------- | ----------- |
| `eq`     | 值等于给定的布尔值、数字或字符串 |
| `!eq`, `ne`, `neq` | 值不等于给定的布尔值、数字或字符串 |
| `lt`     | 值在数字或字母上小于给定的数字或字符串 |
| `le`     | 值在数字或字母上小于或等于给定的数字或字符串 |
| `gt`     | 值在数值或字母上大于给定的数字或字符串 |
| `ge`     | 值在数字或字母上大于或等于给定的数字或字符串 |

文本模式匹配二进制运算符有

| 操作员 | 大小写不敏感 |  描述 |
| -------- | ---------------- | ----------- |
| `like`   | `ilike`          | 值符合所给文本模式 |
| `!like`  | `!ilike`         | 值与给定的文本模式不匹配 |
| `$like`  | `$ilike`, `startswith`.   | 值以给定的文本模式开头 |
| `!$like` | !$ilike`，`!startswith`，`! | 值不是以给定的文本模式开头 |
| `like$`  | `ilike$`, `endswith`     | 值以给定的文本模式结束 |
| `!like$` | `!ilike$`, `!endswith`   | 值不是以给定的文本模式结束 |

For operators that work for multiple JSON node types the semantic is determined from the provided value.
If the value is `true` or `false` the filter matches boolean JSON values.
If the value is a number the filter matches number JSON values.
Otherwise, the value matches string JSON values or mixed types of values.

> **提示**
>
> 要强制对数值进行文本比较，请在数值前加上单引号。
> 例如，值 `'13'` 是文本 13，而 `13` 是数字 13。  

集合运算符为

| 操作员 | 描述 |
| -------- | ----------- |
| `in`     | 条目值在文字上等于给定值之一（在集合中） |
| `!in`    | 条目值与任何给定值的文本值不相等（不在集合中） |

The `<path>` can be:

* `_`: 输入键是
* `.`: the entry root value is
* `<member>`: the member of the root value is
* `<member>.<member>`：路径上的成员是（最多 5 级深度）

A `<member>` path expression can be a member name or in case of arrays an array index.
In case of an array the index can also be given in the form: `[<index>]`.
For example, the path `addresses[0].street` would be identical to `addresses.0.street`.

下面是一些查询示例。

名称（根对象）为 "Luke"：

    GET /api/dataStore/<namespace>?fields=.&filter=name:eq:Luke

根对象）的年龄大于 42（数值）：

    GET /api/dataStore/<namespace>?fields=.&filter=age:gt:42

根值是一个大于 42 的数字（根据数值推断出数字匹配）：

    GET /api/dataStore/<namespace>?fields=.&filter=.:gt:42

已启用（根对象）为 true（从值推断出布尔匹配）：

    GET /api/dataStore/<namespace>?fields=.&filter=enabled:eq:true

根对象的名称包含 "Pet"，年龄大于 20 岁：

    GET /api/dataStore/<namespace>?fields=.&filter=name:like:Pet&filter=age:gt:20

根对象被标记为未成年人或年龄小于 18 岁：

    GET /api/dataStore/<namespace>?fields=.&filter=minor:eq:true&filter=age:lt:18&rootJunction=or

### 创造价值 { #webapi_data_store_create_values } 

为命名空间创建新的键和值：

    POST / api / 33 / dataStore / <namespace> / <key>

假设有效的JSON有效负载，创建示例的curl请求：

```bash
curl "https://play.dhis2.org/demo/api/33/dataStore/foo/key_1" -X POST
  -H "Content-Type: application/json" -d "{\"foo\":\"bar\"}" -u admin:district
```

响应示例：

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 201,
  "status": "OK",
  "message": "Key 'key_1' created."
}
```

如果您需要加密存储的数据（例如用户
凭据或类似的），您可以像这样将查询附加到 url：

    GET /api/33/dataStore/<namespace>/<key>?encrypt=true

### 更新值 { #webapi_data_store_update_values } 

更新命名空间中存在的密钥：

    PUT /api/33/dataStore/<namespace>/<key>

假设有效的JSON有效负载，示例curl请求更新：

```bash
curl "https://play.dhis2.org/demo/api/33/dataStore/foo/key_1" -X PUT -d "[1, 2, 3]"
  -H "Content-Type: application/json" -u admin:district
```

响应示例：

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Key 'key_1' updated."
}
```

### 删除键 { #webapi_data_store_delete_keys } 

要从名称空间中删除现有键：

    删除/ api / 33 / dataStore / <namespace> / <key>

删除示例curl请求：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo/key_1" -X DELETE -u admin:district
```

响应示例：

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Key 'key_1' deleted from namespace 'foo'."
}
```

要删除名称空间中的所有键：

    删除/ api / 33 / dataStore / <namespace>

删除示例curl请求：

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo" -X DELETE -u admin:district
```

响应示例：

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Namespace 'foo' deleted."
}
```

### 共享数据存储密钥{ #webapi_data_store_sharing } 

数据存储键的共享遵循与其他元数据共享相同的原则（参见
[共享](#webapi_sharing))。

获取特定数据存储键的共享设置：

    GET /api/33/sharing?type=dataStore&id=<uid>

其中数据存储键的 id 来自该键的 `/metaData` 端点：

    GET /api/33/dataStore/<namespace>/<key>/metaData

As usual the `access` property in the response reflects the capabilities of the 
current user for the target entry.
Namespace wide protection might still apply and render a user incapable to
perform certain changes.

修改特定数据存储键的共享设置：

    POST / api / 33 / sharing？type = dataStore＆id = <uid>

具有以下要求：

```json
{
  "object": {
    "publicAccess": "rw------",
    "externalAccess": false,
    "user": {},
    "userAccesses": [],
    "userGroupAccesses": [
      {
        "id": "hj0nnsVsPLU",
        "access": "rw------"
      },
      {
        "id": "qMjBflJMOfB",
        "access": "r-------"
      }
    ]
  }
}
```

## 用户数据存储 { #webapi_user_data_store } 

除了在所有用户之间共享的 *dataStore*
系统，还可以使用基于用户的数据存储。数据存储到
*userDataStore* 与单个用户相关联，以便每个用户
在相同的命名空间和组合键上可以有不同的数据。全部
对 *userDataStore* 的调用将与登录的
用户。这意味着只能查看、更改、删除和添加值
与当前登录的用户相关联。

    / api / 33 / userDataStore

### 用户数据存储结构 { #webapi_user_data_store_structure } 

*userDataStore* 由用户、命名空间、键和关联的
值。用户、命名空间和密钥的组合是唯一的。

表格用户数据存储结构

| 项目 | 描述 | 数据类型 |
|---|---|---|
| 用户 | 该数据关联的用户 | 串 |
| 命名空间 | 密钥所属的命名空间 | 串 |
| 键 | 存储值的键 | 串 |
| 值 | 存储的值 | JSON格式 |
| 加密 | 表示是否要对值进行加密 | Boolean |

### 获取名称空间 { #webapi_user_data_store_get_namespaces } 

返回所有现有名称空间的数组

    GET /api/33/userDataStore

请求示例：

```bash
curl -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/33/userDataStore"
```

```json
[
  "foo",
  "bar"
]
```

### 取得金钥 { #webapi_user_data_store_get_keys } 

返回给定名称空间中所有现有键的数组

    GET /api/userDataStore/<namespace>

请求示例：

```bash
curl -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/33/userDataStore/foo"
```

```json
[
  "key_1",
  "key_2"
]
```

### 获取价值 { #webapi_user_data_store_get_values } 

返回给定名称空间和键的值

    GET /api/33/userDataStore/<namespace>/<key>

请求示例：

```bash
curl -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
  "some": "value"
}
```

### 创造价值 { #webapi_user_data_store_create_values } 

向给定名称空间中的给定键添加新值。

    POST / api / 33 / userDataStore / <namespace> / <key>

请求示例：

```bash
curl -X POST -H "Content-Type: application/json" -u admin:district -d "['some value']"
  "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
  "httpStatus": "Created",
  "httpStatusCode": 201,
  "status": "OK",
  "message": "Key 'bar' in namespace 'foo' created."
}
```

如果您需要加密该值（例如用户凭据
等等）您可以像这样将查询附加到网址：

    GET /api/33/userDataStore/<namespace>/<key>?encrypt=true

### 更新值 { #webapi_user_data_store_update_values } 

更新现有值

    PUT /api/33/userDataStore/<namespace>/<key>

请求示例：

```bash
curl -X PUT -H "Content-Type: application/json" -u admin:district -d "['new value']"
  "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
  "httpStatus":"Created",
  "httpStatusCode":201,
  "status":"OK",
  "message":"Key 'bar' in namespace 'foo' updated."
}
```

### 删除键 { #webapi_user_data_store_delete_key } 

删除金钥

    删除/ api / 33 / userDataStore / <namespace> / <key>

请求示例：

```bash
curl -X DELETE -u admin:district "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
  "httpStatus":"OK",
  "httpStatusCode":200,
  "status":"OK",
  "message":"Key 'bar' deleted from the namespace 'foo."
}
```

### 删除名称空间 { #webapi_user_data_store_delete_namespace } 

删除给定名称空间中的所有键

    删除/ api / 33 / userDataStore / <namespace>

请求示例：

```bash
curl -X DELETE -u admin:district "play.dhis2.org/api/33/userDataStore/foo"
```

```json
{
  "httpStatus":"OK",
  "httpStatusCode":200,
  "status":"OK",
  "message":"All keys from namespace 'foo' deleted."
}
```

### 对其他用户数据存储的管理访问{ #admin-access-to-another-users-datastore } 
Admins can manipulate another user's datastore by adding the `username`
parameter to any of the manipulations described above to not have them affect
the admins own datastore but the datastore of the user given by the `username`
parameter.

例如，要在 `Peter` 的数据存储中添加一个值，管理员需要使用

    POST /api/userDataStore/<namespace>/<key>?username=Peter

## 部分更新（试验性）{ #partial-update-experimental } 
数据存储和用户数据存储都允许部分更新条目值。  

All the subsequent examples operate on the basis that the following JSON entry is in the namespace `pets` with key `whiskers`.  

```json
{
  "name": "wisker",
  "favFood": [
    "fish", "rabbit"
  ]
}
```

我们可以对该条目执行许多更新操作。以下示例在 API 调用中使用了 `{store}`，请根据具体情况用 `dataStore` 或 `userDataStore` 代替。

### 更新根目录（整个条目）{ #update-root-entire-entry } 
我们可以通过不提供 `path` 请求参数或留空 `path=` 来更新根目录下的条目。  

`PUT` `/api/{store}/pets/whiskers` 加上 body `"whiskers"`，将条目更新为所提供的 body。因此，对 `/api/{store}/pets/whiskers` 的 `GET` 请求现在会显示：  
```json
"whiskers"
```

### 在特定路径上更新{ #update-at-specific-path } 
我们可以通过提供 `path` 请求参数和要更新的属性来更新特定路径上的条目。

`PUT` `/api/{store}/pets/whiskers?path=name` 与 body `"whiskers"`仅更新了`name`属性的条目。因此，向 `/api/{store}/pets/whiskers` 提出的 `GET` 请求现在将显示更新后的 `name`：

```json
{
    "name": "whiskers",
    "favFood": [
        "fish",
        "rabbit"
    ]
}
```

我们可以更新特定路径上的数组元素。

`PUT` `/api/{store}/pets/whiskers?path=favFood.[0]` 带有 body `"carrot"`，只更新 `favFood` 数组中的第一个元素。因此，向 `/api/{store}/pets/whiskers` 提出的 `GET` 请求将显示更新后的 `favFood`：

```json
{
    "name": "wisker",
    "favFood": [
        "carrot",
        "rabbit"
    ]
}
```

### 福利{ #benefits } 
- 小变化所需的较小有效载荷
- 不易出错（无需为更改一个属性而复制粘贴大量条目）

## 滚动（实验）{ #roll-experimental } 
通过 `roll` 请求参数，用户可以在数组中 "滚动 "元素的数量。在我们的示例中，我们有一个 `favFood` 数组。如果我们想更新这个数组，就必须像这样提供整个有效载荷：  
`PUT` `/api/{store}/pets/whiskers` 带正文

```json
{
    "name": "wisker",
    "favFood": [
        "fish",
        "rabbit",
        "carrot"
    ]
}
```

现在，我们可以使用 `roll` 请求参数（与 `path` 功能一起使用）来说明我们需要_n_个元素的滚动功能。
在本例中，我们说明希望数组的滚动值为 3，并在调用中传递了一个额外的元素。  
`PUT` `/api/{store}/pets/whiskers?roll=3&path=favFood` 加上 body `"carrot"` 会产生以下状态。

```json
{
    "name": "wisker",
    "favFood": [
        "fish",
        "rabbit",
        "carrot"
    ]
}
```

由于我们传递的滚动值是 `3`，这表明我们只希望将最后 3 个元素传递到数组中。因此，如果我们现在再次调用并向数组添加一个新元素，我们希望第一个元素（`fish`）从数组中删除。
`PUT` `/api/{store}/pets/whiskers?roll=3&path=favFood` 加上 body `"bird"` 会产生以下状态：

```json
{
    "name": "wisker",
    "favFood": [
        "rabbit",
        "carrot",
        "bird"
    ]
}
```

> **注**
>
> 一旦设置了滚动值（例如 `role=3`），就只能增加（例如 `roll=5`）而不能减少（例如 `roll=2`)

圆点符号允许嵌套调用。比方说，我们有这样一个当前条目值：

```json
{
  "name": "wisker",
  "favFood": [
    "fish", "rabbit"
  ],
  "type": {
    "breed": ["shorthair"]
  }
}
```

如果我们想使用滚动数组添加另一个品种，我们可以进行调用：
`PUT` `/api/{store}/pets/whiskers?roll=3&path=type.breed` 加上 body `"small"`，会产生以下状态：

```json
{
  "name": "wisker",
  "favFood": [
    "fish", "rabbit"
  ],
  "type": {
    "breed": ["shorthair, small"]
  }
}
```

### 福利{ #benefits } 
- 只想跟踪 _n_ 个可能随时间变化的值


# 组织单位简介{ #org_unit_profile }

组织单位简介资源允许您在 DHIS 2 中定义和检索组织单位的信息简介。

```
/api/organisationUnitProfile
```

可创建适用于所有组织单位的单一组织单位配置文件。

组织单位概况的信息部分包括

- 名称、简称、描述、上级组织单位、级别、开放日期、关闭日期、URL。
- 联系人、地址、电子邮件、电话号码（如有）。
- 位置（经度/纬度）。
- 元数据属性（可配置）。
- 组织单位组套和组（可配置）。
- 数据元素、指标、报告率、计划指标的汇总数据（可配置）。

## 创建组织单位简介{ #create-organisation-unit-profile } 

To define the organisation unit profile you can use a `POST` request:

```
POST /api/organisationUnitProfile
```

The payload in JSON format looks like this, where `attributes` refers to metadata attributes,  `groupSets` refer to organisation unit group sets and `dataItems` refers to data elements, indicators, data sets and program indicators:

```json
{
  "attributes": [
    "xqWyz9jNCA5",
    "n2xYlNbsfko"
  ],
  "groupSets": [
    "Bpx0589u8y0",
    "J5jldMd8OHv"
  ],
  "dataItems": [
    "WUg3MYWQ7pt",
    "vg6pdjObxsm",
    "DTVRnCGamkV",
    "Uvn6LCg7dVU",
    "eTDtyyaSA7f"
  ]
}
```

定义配置文件需要使用 `F_ORG_UNIT_PROFILE_ADD` 权限。

## 获取组织单位简介{ #get-organisation-unit-profile } 

要检索组织单位配置文件定义，可以使用 `GET` 请求：

```
GET /api/organisationUnitProfile
```

响应将采用 JSON 格式。

## 获取组织单位概况数据{ #get-organisation-unit-profile-data } 

要检索组织单位配置文件数据，可以使用 `GET` 请求：

```
GET /api/organisationUnitProfile/{org-unit-id}/data?period={iso-period}
```

组织单位配置文件数据端点将把配置文件定义与相关信息/数据值结合起来。 

* The `org-unit-id` path variable is required and refers to the ID of the organisation unit to provide aggregated data for.
* The `iso-period` query parameter is optional and refers to the ISO period ID for the period to provide aggregated data for the data items. If none is specified, the _this year_ relative period will be used as fallback.

答复将包括以下部分：

* `info`：关于组织单位的固定信息。
* `attributes`: Metadata attributes with corresponding attribute values.
* `groupSets`: Organisation unit group sets with the corresponding organisation unit group which the organisation unit is a member of.
* `dataItems`: Data items with the corresponding aggregated data value.

请注意，将执行访问控制检查，当前用户无法访问的元数据项将被省略。

请求示例如下所示：

```
GET /api/organisationUnitProfile/DiszpKrYNg8/data?period=2021
```

JSON 格式的配置文件数据响应有效载荷如下所示，其中 `id` 和 `label` 字段指的是元数据项，而 `value` 字段指的是相关值：

```json
{
  "info": {
    "id": "DiszpKrYNg8",
    "code": "OU_559",
    "name": "Ngelehun CHC",
    "shortName": "Ngelehun CHC",
    "parentName": "Badjia",
    "level": 4,
    "levelName": "Facility",
    "openingDate": "1970-01-01T00:00:00.000",
    "longitude": -11.4197,
    "latitude": 8.1039
  },
  "attributes": [
    {
      "id": "n2xYlNbsfko",
      "label": "NGO ID",
      "value": "GHE51"
    },
    {
      "id": "xqWyz9jNCA5",
      "label": "TZ code",
      "value": "NGE54"
    }
  ],
  "groupSets": [
    {
      "id": "Bpx0589u8y0",
      "label": "Facility Ownership",
      "value": "Public facilities"
    },
    {
      "id": "J5jldMd8OHv",
      "label": "Facility Type",
      "value": "CHC"
    }
  ],
  "dataItems": [
    {
      "id": "WUg3MYWQ7pt",
      "label": "Total Population",
      "value": 3503
    },
    {
      "id": "DTVRnCGamkV",
      "label": "Total population < 1 year",
      "value": 140
    },
    {
      "id": "vg6pdjObxsm",
      "label": "Population of women of child bearing age (WRA)",
      "value": 716
    },
    {
      "id": "Uvn6LCg7dVU",
      "label": "ANC 1 Coverage",
      "value": 368.2
    },
    {
      "id": "eTDtyyaSA7f",
      "label": "FIC <1y",
      "value": 291.4
    }
  ]
}
```

## 为组织单位上传图片{ #upload-image-for-organisation-unit } 

要为组织单位上传图片，可以使用 `fileResources` 端点。

```
/api/fileResources
```

The `fileResource` endpoint accepts a raw file as the request body. The `JPG`, `JPEG` and `PNG` formats are supported for organisation unit images. The domain for organisation unit images is `ORG_UNIT`.

有关 `fileResources` 端点的详细信息，请参阅*元数据*部分中的*文件资源*。 

To upload an image you can send a `POST` request with `ORG_UNIT` as domain query parameter together with the image as the request payload. The `Content-Type` header should match the type of file being uploaded.

```
POST /api/fileResources?domain=ORG_UNIT
```

JSON 响应中的 `response` > `fileResource` 对象的 `id ` 属性将包含文件资源标识符的引用。

组织单位实体有一个 `image` 属性，指向文件资源图像。要在组织单位上设置文件资源引用，可以向组织单位发送带有 JSON 有效负载的`PATCH`请求：

```
PATCH /api/organisationUnits/{id}
```

```json
{ 
  "image": "{file-resource-id}" 
}
```

或者，也可以使用带有完整组织单位有效载荷（为简洁起见省略字段）的 `PUT` 请求：

```
PUT /api/organisationUnits/{id}
```

```json
{
  "id": "Rp268JB6Ne4",
  "name": "Adonkia CHP",
  "image": {
    "id":  "{file-resource-iid}"
  }
}
```

## 获取组织单位的图像{ #get-image-for-organisation-unit } 

组织单位实体有一个 `image` 对象，该对象通过标识符指向文件资源。您可以从 `organisationUnits` 端点获取组织单位信息。如果设置了，JSON 格式如下：

```
GET /api/organisationUnits/{id}
```

```json
{
  "id": "Rp268JB6Ne4",
  "name": "Adonkia CHP",
  "image": {
    "id":  "{file-resource-id}"
  }
}
```

图像文件资源标识符可用于向 `fileResources` 端点发出请求，以检索文件内容：

```
GET /api/fileResources/{id}/data
```

The `Content-Type` header will reflect the type of file being retrieved.



# 应用 { #apps } 

## 应用 { #webapi_apps } 

`/api/apps` 端点可用于安装、删除和
列出应用程序。应用程序密钥基于应用程序名称，但与所有
删除了非字母数字字符，并用破折号替换了空格。
*My app!* 将返回密钥 *My-app*。

> **注意**
>
> 在 2.28 之前，应用密钥是从 ZIP 的名称派生的
> 存档，不包括文件扩展名。使用旧格式的 URL
> 仍应在 api 中返回正确的应用程序。

    / api / 33 / apps

### 获取应用 { #webapi_get_apps } 

> **注意**
>
> 2.28之前的app属性folderName指的是实际
> 已安装应用程序的路径。能够在云上存储应用程序
> 服务，folderName 的用途已更改，现在将引用应用程序
> 键。

您可以通过列出应用程序中的所有应用程序来读取应用程序的密钥
资源并查找 *key* 属性。列出所有已安装的应用程序
JSON：

```bash
curl -u user:pass -H "Accept: application/json" "http://server.com/api/33/apps"
```

您也可以简单地将Web浏览器指向资源URL：

    http://server.com/api/33/apps

应用列表也可以按应用类型和名称过滤，通过附加
URL 的一个或多个 *filter* 参数：

    http://server.com/api/33/apps?filter=appType:eq:DASHBOARD_APP&filter=name:ilike:youtube

应用程序名称支持 *eq* 和 *ilike* 过滤器运算符，而 *appType*
仅支持 *eq*。

### 安装应用 { #webapi_install_app } 

要安装应用程序，可以发出以下命令：

```bash
curl -X POST -u user:pass -F file=@app.zip "http://server.com/api/33/apps"
```

### 删除应用 { #webapi_delete_app } 

要删除一个应用程序，您可以发出以下命令：

```bash
curl -X DELETE -u user:pass "http://server.com/api/33/apps/<app-key>"
```

### 重新加载应用 { #webapi_reload_apps } 

要强制重新加载当前安装的应用程序，您可以发出
以下命令。如果您直接手动添加文件，这很有用
到文件系统，而不是通过 DHIS2 用户上传
界面。

```bash
curl -X PUT -u user:pass "http://server.com/api/33/apps"
```

### 在实例之间共享应用 { #webapi_share_apps_between_instances } 

如果 DHIS2 实例已配置为使用云存储，应用程序
现在将安装并存储在云服务上。这将启用
多个实例在已安装的应用程序上共享相同的版本，而不是
在每个单独的实例上安装相同的应用程序。

> **注意**
>
> 在 2.28 之前，安装的应用程序只会存储在实例的
> 本地文件系统。 2.28 之前安装的应用程序仍可在
> 实例已安装，但不会与其他人共享
> 实例，因为它仍然位于实例本地文件系统上。

## 应用商店 { #webapi_app_store } 

网络应用程序接口将 DHIS2 应用程序商店的内容以 JSON
表示，可在 `/api/appHub`资源中找到。

    /api/33/appHub

### 获取应用 { #webapi_get_app_store_apps } 

您可以使用GET请求检索应用程序：

    GET /api/33/appHub

JSON响应示例如下所述。

```json
{
  [
    {
      "name": "Tabular Tracker Capture",
      "description": "Tabular Tracker Capture is an app that makes you more effective.",
      "sourceUrl": "https://github.com/dhis2/App-repository",
      "appType": "DASHBOARD_WIDGET",
      "status": "PENDING",
      "id": "NSD06BVoV21",
      "developer": {
        "name": "DHIS",
        "organisation": "Uio",
        "address": "Oslo",
        "email": "dhis@abc.com",
      },
      "versions": [
        {
          "id": "upAPqrVgwK6",
          "version": "1.2",
          "minDhisVersion": "2.17",
          "maxDhisVersion": "2.20",
          "downloadUrl": "https://dhis2.org/download/appstore/tabular-capture-12.zip",
          "demoUrl": "http://play.dhis2.org/demo"
        }
      ],
      "images": [
        {
          "id": "upAPqrVgwK6",
          "logo": "true",
          "imageUrl": "https://dhis2.org/download/appstore/tabular-capture-12.png",
          "description": "added feature snapshot",
          "caption": "dialog",
        }
      ]
    }
  ]
}
```

### 安装应用 { #webapi_install_app_store_apps } 

您可以在 DHIS2 实例上安装应用程序，前提是您拥有
适当的权限。使用 `id` 属性引用应用程序
应用程序的相关版本。使用 POST 安装应用程序
使用版本 ID 请求以下资源：

    POST /api/33/appHub/{app-version-id}



# OpenAPI{ #openapi } 

DHIS2 服务器可为其应用程序接口提供 OpenAPI 文档。
该文档是根据对实际应用程序接口的分析即时创建的。
这意味着该文件是完整的，但由于分析的局限性，可能会丢失或误报细节。
由于分析的局限性。

所有 OpenAPI 端点都支持 JSON 和 YAML 格式。
YAML 应使用 `Accept` 标头，即 `application/x-yaml`。

要获取包含服务器所有端点的单个文档，请使用

    GET /api/openapi.json
    GET /api/openapi.yaml

OBS！请注意，这样生成的文件有几 MB 大小。

A document for a specific endpoint can be accessed by appending either 
`openapi.json` or `openapi.yaml` to an endpoint root path. 
For example, to generate a document for the `/users` endpoints use:

    GET /api/users/openapi.json
    GET /api/users/openapi.yaml

要生成带有特定根路径和/或标记的文档，可使用
通用 `/openapi` 端点可与一个或多个 `tag` 和 `path` 选择器一起使用。
选择器。

    GET /api/openapi/openapi.json?path=/users&path=/dataElements
    GET /api/openapi/openapi.yaml?tag=system&tag=metadata

可用的标签有

* `user`
* `data`
* `metadata`
* `ui`
* `analytics`
* `system`
* `messaging`
* `tracker`
* `integration`
* `login`
* `query`
* `management`

所有生成 OpenAPI 文档的端点都支持以下可选的 
请求参数：

### `failOnNameClash`{ #failonnameclash } 
设置为 `true` 时，两个或两个以上具有相同简单（未限定）名称的类型将被视为冲突，生成失败并显示错误。 

When set `false` (default), name clashes are resolved by adding numbers to the simple name to make each of them unique.
As a result the names are not predictable or stable. Merging simple names with their intended markdown documentation based on name will be broken. 
This option is meant as a preview feature which should only be used during development.

### `failOnInconsistency`{ #failoninconsistency } 
When set to `true`, a semantic inconsistency in the declaration causes the generation to fail with an error.
Usually this indicates a programming mistake. For example, declaring a field both as required and having a default value.

When set to `false`, a semantic inconsistency is logged as warning but the generation proceeds.
This might produce a document that contradicts itself semantically but is valid formally.
