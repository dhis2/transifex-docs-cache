---
revision_date: '2024-03-19'
tags:
- Vývoj
- Hlavní verze jádra DHIS
template: single.html
---

# Přehled { #webapi } 

Web API je komponenta, která umožňuje externím systémům přistupovat k datům uloženým v instanci DHIS2 a manipulovat s nimi. Přesněji řečeno, poskytuje programové rozhraní k široké škále vystavených dat a metod služeb pro aplikace, jako jsou softwaroví klienti třetích stran, webové portály a interní moduly DHIS2.

## Úvod { #webapi_introduction } 

The Web API adheres to many of the principles behind the REST
architectural style. To mention some important ones:

1.  Základní stavební kameny se označují jako *zdroje*. 
    Zdrojem může být cokoli vystavené na webu, od dokumentu po
    obchodní proces – cokoliv, s čím by klient mohl chtít interagovat.
    Informační aspekty zdroje lze vyhledávat nebo vyměňovat
    prostřednictvím zdrojů *reprezentací*. Reprezentace je pohled na a
    resource's state at any given time. For instance, the *visualizations*
    resource in DHIS2 represents visualizations of aggregated data for
    je určitý soubor parametrů. Tento zdroj lze získat v 
    variety of representation formats including JSON and CSV.
2.  Všechny zdroje lze jednoznačně identifikovat pomocí *URI* (také odkazováno
    to as *URL*). All resources have a default representation. You can
    uvést, že máte zájem o konkrétní zastoupení podle
    poskytnutí *Accept* HTTP hlavičky, přípony souboru nebo *formátu*
    query parameter. So in order to retrieve a CSV representation of
    an analytics data response you can supply an *Accept: application/csv* 
    header or append *.csv* or *?format=csv* to your request URL.
3.  Interactions with the API requires the correct use of HTTP *methods* or
    *slovesa*. To znamená, že pro zdroj musíte vydat *GET*
    požadavek, když jej chcete získat, požadavek *POST*, když chcete
    chcete-li jej vytvořit, *PUT*, když jej chcete aktualizovat, a *DELETE*, když
    you want to remove it.

## Ověření { #webapi_authentication } 

The DHIS2 Web API supports three protocols for authentication: 

- [Základní ověřování](#webapi_basic_authentication)
- [Tokeny osobního přístupu (PAT)](#webapi_pat_authentication)
- [OAuth 2](#webapi_oauth2)

You can verify and get information about the currently authenticated 
user by making a GET request to the following URL:

    /api/33/me

And more information about authorities (and if a user has a certain
authority) by using the endpoints:

    /api/33/me/authorities
    /api/33/me/authorities/ALL

## Základní ověřování { #webapi_basic_authentication } 

The DHIS2 Web API supports *Basic authentication*. Basic authentication
is a technique for clients to send login credentials over HTTP to a web
server. Technically speaking, the username is appended with a colon and
the password, Base64-encoded, prefixed Basic and supplied as the value
of the *Authorization* HTTP header. More formally that is:

    Autorizace: Základní base64encode(username:password)

Most network-aware development environments provide support for Basic
authentication, such as *Apache HttpClient* and *Spring RestTemplate*.
An important note is that this authentication scheme provides no security
since the username and password are sent in plain text and can be easily
observed by an attacker. Using Basic is recommended only if the server is
using SSL/TLS (HTTPS) to encrypt communication with clients. Consider this
a hard requirement in order to provide secure interactions with the Web
API.

## Dvoufaktorové ověřování { #webapi_2fa } 

DHIS2 supports two-factor authentication. This can be enabled per user.
When enabled, users will be asked to enter a 2FA code when logging in. You
can read more about 2FA [here](https://www.google.com/landing/2step/).

## Osobní přístupový token { #webapi_pat_authentication }
Personal access tokens (PATs) are an alternative to using passwords for
authentication to DHIS2 when using the API.

PATs can be a more secure alternative to HTTP Basic Authentication,
and should be your preferred choice when creating a new app/script etc. 

HTTP Basic Authentication is considered insecure because, among other things, 
it sends your username and password in clear text. It may be deprecated in 
future DHIS2 versions or made opt-in, meaning that basic authentication would 
need to be explicitly enabled in the configuration.

#### Important security concerns! { #important-security-concerns } 

Your PATs will automatically inherit all the permissions and authorizations your
user has. It is therefore extremely important that you limit the access granted to
your token depending on how you intend to use it, see **Configuring your token**.

**If you only want the token to have access to a narrow and specific part of the
server, it is advised to rather create a new special user that you assign only
the roles/authorities you want it to have access to.**


### Creating a token { #creating-a-token } 
Chcete-li vytvořit nový PAT, máte dvě možnosti:
* A. Vytvořte token v uživatelském rozhraní na stránce profilu vašeho účtu.
* B. Vytvořte token prostřednictvím rozhraní API.

### A. Creating a token on the account's page { #a-creating-a-token-on-the-accounts-page } 
Log in with your username and password, go to your profile page
(Click top right corner, and chose "Edit profile" from the dropdown).
On your user profile page, choose "Personal access tokens" from the
left side menu.
You should now be on the "Manage personal access tokens" page and see the
text: "You don't have any active personal access tokens".
Click "Generate new token" to make a new token.
A "Generate new token" popup will be shown and present you with two choices:

#### 1. Server/script context: { #1-serverscript-context } 
_"Tento typ se používá pro integrace a skripty, ke kterým nebude mít prohlížeč přístup."_

If you plan to use the token in an application, a script or similar, this
type should be your choice.

#### 2. Browser context: { #2-browser-context } 
_"Tento typ se používá pro aplikace, jako jsou veřejné portály, ke kterým bude přístup pomocí webového prohlížeče."_

If you need to link to DHIS2 on a webpage, or e.g. embed in an iframe,
this is probably the type of token you want.


### Configuring your token { #configuring-your-token } 

After choosing what token type you want, you can configure different access constraints on
your token. By constraint, we mean how to limit and narrow down how your token can be used.
This can be of crucial importance if you plan on using the token in a public environment,
e.g. on a public dashboard on another site, embedded in an iframe.
Since tokens always have the same access/authorities that your user currently has, taking special 
care is needed if you intend to use it in any environment you don't have 100% control over.

**NB**: If anyone else gets their hands on your token, they can do anything your user can do. 
It is not possible to distinguish between actions performed using the token and other actions
performed by your user.

**Important**: It is strongly advised that you create a separate unique user with only the roles/authorities
you want the token to have if you plan on using PAT tokens in a non-secure and/or public environment,
e.g. on a PC or server, you don't have 100% control over, or "embedded" in a webpage on another server.

#### The different constraint types are as follows: { #the-different-constraint-types-are-as-follows } 
* Doba platnosti
* Povolené adresy UP
* Povolené metody HTTP
* Povolené referrery HTTP

##### Expiry time { #expiry-time } 
Expiry time simply sets for how long you want your token to be usable, the default is 30
days. After the expiry time, the token will simply return a 401 (Unauthorized) message.
You can set any expiry time you want, but it is strongly advised that you set an expiry time 
that is reasonable for your use case.

#### Allowed IP addresses { #allowed-ip-addresses } 
Toto je čárkami oddělený seznam IP adres, u kterých chcete omezit, odkud mohou pocházet požadavky na token.

**Important**: IP address validation relies on the X-Forwarded-For header, which can be spoofed.
For security, make sure a load balancer or reverse proxy overwrites this header.

#### Allowed HTTP methods { #allowed-http-methods } 
A comma-separated list of HTTP methods you want your token to be able to use.
If you only need your token to view data, not modify or delete, selecting only the GET HTTP method 
makes sense.

#### Allowed HTTP referrers { #allowed-http-referrers } 
HTTP referer is a header added to the request, when you click on a link, this says which site/page 
you were on when you clicked the link. 
Read more about the HTTP referer header here: https://en.wikipedia.org/wiki/HTTP_referer

This can be used to limit the use of a "public" token embedded on another page on another site. 
Making sure that the referer header match the site hostname in should come from, can
help avoid abuse of the token, e.g. if someone posts it on a public forum.

**Important**: this is not a security feature. The `referer` header can easily be spoofed.
This setting is intended to discourage unauthorized third-party developers from connecting
to public access instances.

#### Saving your token: { #saving-your-token } 
When you are done configuring your token, you can save it by clicking the "Generate new token"
button, on the bottom right of the pop-up.
When doing so the token will be saved and a secret token key will be generated on the server.
The new secret token key will be shown on the bottom of the PAT token list with a green background,
and the text "Newly created token".
The secret token key will look similar to this:
```
d2pat_5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ1151814092
```
**Important**: This generated secret token key will only be shown once, so it is important 
that you copy the token key now and save it in a secure place for use later. 
The secret token key will be securely hashed on the server, and only the hash of this secret token 
key will be saved to the database. This is done to minimize the security impact if someone gets 
unauthorized access to the database, similar to the way passwords are handled.

### B. Creating a token via the API { #b-creating-a-token-via-the-api } 

Příklad, jak vytvořit nový osobní přístupový token pomocí API:

```
POST https://play.dhis2.org/dev/api/apiToken
Content-Type: application/json
Oprávnění: Základní správní obvod

{}
```
**NB**: Remember the empty JSON body (`{}`) in the payload! 

To vrátí odpověď obsahující token podobný tomuto:
```json
{
  "httpStatus": "Created",
  "httpStatusCode": 201,
  "status": "OK",
  "response": {
     "responseType": "ApiTokenCreationResponse",
     "key": "d2pat_5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ1151814092",
     "uid": "jJYrtIVP7qU",
     "klass": "org.hisp.dhis.security.apikey.ApiToken",
     "errorReports": []
  }
}
```

**Important**: The token key will only be shown once here in this response.
You need to copy and save this is in a secure place for use later!

Samotný token se skládá ze tří částí:
1. Prefix: (`d2pat_`) označuje, o jaký typ tokenu se jedná.
2. Náhodné bajty kódované Base64: (`5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ`)
3. Kontrolní součet CRC32: (`1151814092`) část kontrolního součtu je doplněna 0, takže vždy zůstane deset znaků dlouhá.


#### Configure your token via the API: { #configure-your-token-via-the-api } 
Chcete-li změnit kterékoli z omezení vašeho tokenu, můžete zadat následující požadavek HTTP API.

**NB**: Only the constraints are possible to modify after the token is created! 

```
PUT https://play.dhis2.org/dev/api/apiToken/jJYrtIVP7qU
Content-Type: application/json
Authorization: Basic admin district
```

```json
{
  "version": 1,
  "type": "PERSONAL_ACCESS_TOKEN",
  "expire": 163465349603200,
  "attributes": [
      {
        "type": "IpAllowedList",
        "allowedIps": ["192.168.0.1"]
      },
      {
        "type": "MethodAllowedList",
        "allowedMethods": ["GET"]
      }
  ]
}
```

### Using your Personal Access Token { #using-your-personal-access-token } 

To issue a request with your newly created token, use the Authorization header
accordingly.
The Authorization header format is:
```
Authorization: ApiToken [YOUR_SECRET_API_TOKEN_KEY]
```
**Příklad**:
```
GET https://play.dhis2.org/dev/api/apiToken/jJYrtIVP7qU
Content-Type: application/json
Authorization: ApiToken d2pat_5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ1151814092
```


### Deleting your Personal Access Token { #deleting-your-personal-access-token } 
You can delete your PATs either in the UI on your profile page where you created it,
or via the API like this:
```
DELETE https://play.dhis2.org/dev/api/apiToken/jJYrtIVP7qU
Content-Type: application/json
Authorization: ApiToken d2pat_5xVA12xyUbWNedQxy4ohH77WlxRGVvZZ1151814092
```


## OAuth2 { #webapi_oauth2 } 

DHIS2 supports the *OAuth2* authentication protocol. OAuth2 is an open
standard for authorization which allows third-party clients to
connect on behalf of a DHIS2 user and get a reusable *bearer token* for
subsequent requests to the Web API. DHIS2 does not support fine-grained
OAuth2 roles but rather provides applications access based on user roles
of the DHIS2 user.

Each client for which you want to allow OAuth 2 authentication must be
registered in DHIS2. To add a new OAuth2 client go to `Apps > Settings > OAuth2 Clients`
in the user interface, click *Add new* and enter the desired client name and the grant types.

#### Přidání klienta pomocí webového rozhraní API { #adding-a-client-using-the-web-api } 

An OAuth2 client can be added through the Web API. As an example, we can
send a payload like this:

```json
{
  "name": "OAuth2 Demo Client",
  "cid": "demo",
  "secret": "1e6db50c-0fee-11e5-98d0-3c15c2c6caf6",
  "grantTypes": [
    "password",
    "refresh_token",
    "authorization_code"
  ],
  "redirectUris": [
    "http://www.example.org"
  ]
}
```

Datový obsah lze odeslat pomocí následujícího příkazu:

```bash
SERVER="https://play.dhis2.org/dev"
curl -X POST -H "Content-Type: application/json" -d @client.json
  -u admin:district "$SERVER/api/oAuth2Clients"
```

Tohoto klienta použijeme jako základ pro naše další příklady udělení typů.

#### Udělení typu hesla { #webapi_oauth2_password } 

The simplest of all grant types is the *password* grant type. This
grant type is similar to basic authentication in the sense that it
requires the client to collect the user's username and password. As an
example we can use our demo server:

```bash
SERVER="https://play.dhis2.org/dev"
SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"

curl -X POST -H "Accept: application/json" -u demo:$SECRET "$SERVER/uaa/oauth/token"
  -d grant_type=password -d username=admin -d password=district
```

Získáte tak podobnou odpověď:

```json
{
  "expires_in": 43175,
  "scope": "ALL",
  "access_token": "07fc551c-806c-41a4-9a8c-10658bd15435",
  "refresh_token": "a4e4de45-4743-481d-9345-2cfe34732fcc",
  "token_type": "bearer"
}
```

For now, we will concentrate on the `access_token`, which is what we
will use as our authentication (bearer) token. As an example, we will get
all data elements using our token:

```bash
SERVER="https://play.dhis2.org/dev"
curl -H "Authorization: Bearer 07fc551c-806c-41a4-9a8c-10658bd15435" "$SERVER/api/33/dataElements.json"
```

#### Grant type refresh\_token { #webapi_refresh_token } 

In general the access tokens have limited validity. You can have a look
at the `expires_in` property of the response in the previous example
to understand when a token expires. To get a fresh `access_token` you
can make another round trip to the server and use `refresh_token`
which allows you to get an updated token without needing to ask for the
user credentials one more time.

```bash
SERVER="https://play.dhis2.org/dev"
SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"
REFRESH_TOKEN="a4e4de45-4743-481d-9345-2cfe34732fcc"

curl -X POST -H "Accept: application/json" -u demo:$SECRET "$SERVER/uaa/oauth/token"
  -d "grant_type=refresh_token" -d "refresh_token=$REFRESH_TOKEN"
```

Odpověď bude přesně stejná, jako když dostanete token, kterým začnete.

#### Typ udělení authorization_code { #webapi_authorization_code }

Authorized code grant type is the recommended approach if you don't want
to store the user credentials externally. It allows DHIS2 to collect the
username/password directly from the user instead of the client
collecting them and then authenticating on behalf of the user. Please be
aware that this approach uses the `redirectUris` part of the client
payload.

Step 1: Visit the following URL using a web browser. If you have more than one
redirect URIs, you might want to add `&redirect_uri=http://www.example.org`
to the URL:

```bash
SERVER="https://play.dhis2.org/dev"
$SERVER/uaa/oauth/authorize?client_id=demo&response_type=code
```

Step 2: After the user has successfully logged in and accepted your
client access, it will redirect back to your redirect uri like this:

    http://www.example.org/?code=XYZ

Step 3: This step is similar to what we did in the password grant type,
using the given code, we will now ask for an access token:

```bash
SERVER="https://play.dhis2.org/dev"
SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"

curl -X POST -u demo:$SECRET -H "Accept: application/json" $SERVER/uaa/oauth/token
-d "grant_type=authorization_code" -d "code=XYZ"
```

## Chybové a informační zprávy { #webapi_error_info_messages } 

The Web API uses a consistent format for all error/warning and
informational messages:

```json
{
  "httpStatus": "Forbidden",
  "message": "You don't have the proper permissions to read objects of this type.",
  "httpStatusCode": 403,
  "status": "ERROR"
}
```

Here we can see from the message that the user tried to access a
resource I did not have access to. It uses the http status code 403, the
HTTP status message *forbidden* and a descriptive message.

Tabulka: Vlastnosti WebMessage

| Název | Popis |
|---|---|
| httpStatus | Zpráva o stavu HTTP pro tuto odpověď, další informace naleznete v RFC 2616 (část 10). |
| httpStatusCode | Stavový kód HTTP pro tuto odpověď naleznete v dokumentu RFC 2616 (část 10), kde najdete další informace. |
| status | DHIS2 status, possible values are *OK* &#124; *WARNING* &#124; *ERROR*, where `OK` means everything was successful, `ERROR` means that operation did not complete and `WARNING` means the operation was partially successful, if the message contains a `response` property, please look there for more information. |
| message | Uživatelsky přívětivá zpráva informující o tom, zda byla operace úspěšná či nikoli. |
| devMessage | Technickější a pro vývojáře přívětivější zpráva (v současnosti se nepoužívá). |
| Odezva | Extension point for future extensions of the `WebMessage` format. |

## Formát data a období { #webapi_date_perid_format } 

Throughout the Web API, we refer to dates and periods. The date format
is:

    yyyy-MM-dd

For instance, if you want to express March 20, 2014, you must use
*2014-03-20*.

The period format is described in the following table (also available on
the API endpoint `/api/periodTypes`)

Tabulka: Formát období

| Časový úsek | Formát | Příklad | Popis |
|---|---|---|---|
| Den | yyyyMMdd | 20040315 | 15. března 2004 |
| Týden | yyyyWn | 2004W10 | 10. týden 2004 |
| Týden středa | yyyyWedWn | 2015WedW5 | 5. týden s nástupem ve středu |
| Týden čtvrtek | yyyyThuWn | 2015ThuW6 | 6. týden se začátkem ve čtvrtek |
| Týden sobota | yyyySatWn | 2015SatW7 | 7. týden se začátkem v sobotu |
| Týden neděle | yyyySunWn | 2015SunW8 | 8. týden se začátkem neděle |
| Dvoutýdenní | yyyyBiWn | 2015BiW1 | Týden 1-2 20015 |
| Měsíc | yyyyMM | 200403 | březen 2004 |
| Dvouměsíční | yyyyMMB | 200401B | leden–únor 2004 |
| Čtvrtletí | yyyyQn | 2004Q1 | leden–březen 2004 |
| Šest měsíců | yyyySn | 2004S1 | leden až červen 2004 |
| Šestiměsíční duben | yyyyAprilSn | 2004AprilS1 | duben-září 2004 |
| Rok | yyyy | 2004 | 2004 |
| Finanční rok duben | yyyy duben | 2004April | duben 2004-březen 2005 |
| Finanční rok červenec | yyyyJuly | 2004July | Červenec 2004-červen 2005 |
| Finanční rok říjen | yyyyOct | 2004 října | Říjen 2004-září 2005 |


### Relativní období { #webapi_date_relative_period_values } 


In some parts of the API, like for the analytics resource, you can
utilize relative periods in addition to fixed periods (defined above).
The relative periods are relative to the current date and allow e.g.
for creating dynamic reports. The available relative period values are:

    THIS_WEEK, LAST_WEEK, LAST_4_WEEKS, LAST_12_WEEKS, LAST_52_WEEKS,
    THIS_MONTH, LAST_MONTH, THIS_BIMONTH, LAST_BIMONTH, THIS_QUARTER, LAST_QUARTER,
    THIS_SIX_MONTH, LAST_SIX_MONTH, MONTHS_THIS_YEAR, QUARTERS_THIS_YEAR,
    THIS_YEAR, MONTHS_LAST_YEAR, QUARTERS_LAST_YEAR, LAST_YEAR, LAST_5_YEARS, LAST_10_YEARS, LAST_10_FINANCIAL_YEARS, LAST_12_MONTHS, 
    LAST_3_MONTHS, LAST_6_BIMONTHS, LAST_4_QUARTERS, LAST_2_SIXMONTHS, THIS_FINANCIAL_YEAR,
    LAST_FINANCIAL_YEAR, LAST_5_FINANCIAL_YEARS

### Vlastní období data { #webapi_date_custom_date_periods }

Zdroje `query` Analytiky podporují další parametry pro vyjádření období.

Default `pe` dimension will fall back to:

- `eventDate` pro `/analytics/events/query`
- `denrollmentDate` pro `/analytics/enrollments/query`

Adding conditions on one or more date fields and combining them are allowed.

#### Usage of custom date periods { #usage-of-custom-date-periods } 

Ve zdrojích podporujících vlastní období data jsou další parametry dotazu, které budou zkombinovány za účelem vyjádření podmínek v časové dimenzi.

| vlastní datum období | zdroj dotazu na události  | zdroj dotazu na zápis |
|--------------------|------------------------|---------------------------|
| `eventDate`        | [x]                    | [ ]                       |
| `enrollmentDate`   | [x]                    | [x]                       |
| `scheduledDate`    | [x]                    | [ ]                       |
| `incidentDate`     | [x]                    | [x]                       |
| `lastUpdated`      | [x]                    | [x]                       |

Podmínky mohou být vyjádřeny v následující formě:

`analytics/events/query/...?...&eventDate=2021&...`

V jednom dotazu je možné kombinovat více časových polí:

`analytics/events/query/...?...&eventDate=2021&incidentDate=202102&...`

Všechny tyto podmínky lze kombinovat s dimenzí `pe`:

`analytics/events/query/...?...&dimension=pe:TODAY&enrollmentDate=2021&incidentDate=202102&...`

Podporované formáty jsou popsány výše v části „Formát data a období“. K dispozici je další formát pro vyjádření rozsahu dat: `yyyyMMdd_yyyyMMdd` a `yyyy-MM-dd_yyyy-MM-dd`.

V níže uvedeném příkladu bude koncový bod vracet události, které se mají uskutečnit mezi 20210101 a 20210104:

`analytics/events/query/...?...&dimension=pe:TODAY&enrollmentDate=2021&incidentDate=202102&scheduledDate=20210101_20210104&...`


## Authorities { #authorities } 
ID a názvy systémových autorit lze vypsat pomocí:

    /api/authorities

Vrací následující formát:
```json
{
  "systemAuthorities": [
    {
      "id": "ALL",
      "name": "ALL"
    },
    {
      "id": "F_ACCEPT_DATA_LOWER_LEVELS",
      "name": "Accept data at lower levels"
    }
  ]
}
```

# Metadata { #metadata } 

## Schémata identifikátorů { #webapi_identifier_schemes } 

This section provides an explanation of the identifier scheme concept.
Identifier schemes are used to map metadata objects to other metadata
during import, and to render metadata as part of exports. Note
that not all schemes work for all API calls, and not all
schemes can be used for both input and output. This is outlined in the
sections explaining the various API endpoints.

Úplná sada dostupných typů objektů schématu identifikátorů je uvedena níže s použitím názvu vlastnosti pro použití v dotazech:

  - idScheme

  - dataElementIdScheme

  - categoryOptionComboIdScheme

  - orgUnitIdScheme

  - programIdScheme

  - programStageIdScheme

  - trackedEntityIdScheme

  - trackedEntityAttributeIdScheme

The general idScheme applies to all types of objects. It can be
overridden by specific object types.

The default scheme for all parameters is UID (stable DHIS2
identifiers). The supported identifier schemes are described in the
table below.

Tabulka: Hodnoty schématu

| Schéma | Popis |
|---|---|
| ID, UID | Shoda na stabilním identifikátoru DHIS2, toto je výchozí schéma ID. |
| CODE | Shoda na kódu DHIS2, který se používá hlavně k výměně dat s externím systémem. |
| NÁZEV | Match on DHIS2 Name, please note that this uses what is available as *object.name*, and not the translated name. Also note that names are not always unique, and in that case, they can not be used. |
| ATTRIBUTE:ID | Match on metadata attribute, this attribute needs to be assigned to the type you are matching on, and also that the unique property is set to *true*. The main usage of this is also to exchange data with external systems, it has some advantages over *CODE* since multiple attributes can be added, so it can be used to synchronize with more than one system. |

Note that identifier schemes is not an independent feature but needs to
be used in combination with resources such as data value import, metadata import and
GeoJson import.

Například pro zadání CODE jako obecného schématu ID a přepsání pomocí UID pro schéma ID organizační jednotky můžete použít tyto parametry dotazu:

    ?idScheme=CODE&orgUnitIdScheme=UID

As another example, to specify an attribute for the organisation unit id
scheme, code for the data element id scheme and use the default UID id
scheme for all other objects you can use these parameters:

    ?orgUnitIdScheme=ATTRIBUTE:j38fk2dKFsG&dataElementIdScheme=CODE

## Procházení webového API { #webapi_browsing_the_web_api } 

The entry point for browsing the Web API is `/api`. This resource
provides links to all available resources. Four resource representation
formats are consistently available for all resources: HTML, XML, JSON,
and JSONP. Some resources will have other formats available, like MS
Excel, PDF, CSV, and PNG. To explore the API from a web browser, navigate
to the `/api` entry point and follow the links to your desired
resource, for instance `/api/dataElements`. For all resources which
return a list of elements certain query parameters can be used to modify
the response:

Tabulka: Parametry databázového dotazu

| Parametr | Hodnoty možností | Výchozí možnost | Popis |
|---|---|---|---|
| stránkování | true &#124; false | true | Udává, zda chcete vrátit seznamy prvků na stránkách. |
| strana | číslo | 1 | Definuje, které číslo stránky se má vrátit. |
| pageSize | číslo | 50 | Definuje počet prvků, které se mají vrátit pro každou stránku. |
| řazení | property:asc/iasc/desc/idesc || Seřazení výstupu pomocí zadaného pořadí, podporovány jsou pouze trvalé a jednoduché vlastnosti (žádné kolekce, idObjects atd.). iasc a idesc nerozlišují velká a malá písmena při řazení. |

Příkladem použití těchto parametrů k získání úplného seznamu skupin datových prvků ve formátu odpovědi XML je:

    /api/dataElementGroups.xml?links=false&paging=false

You can query for elements on the name property instead of returning
a full list of elements using the *query* query variable. In this example
we query for all data elements with the word "anaemia" in the name:

    /api/dataElements?query=anaemia

Můžete získat konkrétní stránky a velikosti stránek takových objektů:

    /api/dataElements.json?page=2&pageSize=20

Stránkování můžete zcela deaktivovat takto:

    /api/indicatorGroups.json?paging=false

Chcete-li řadit výsledek na základě konkrétní vlastnosti:

    /api/indicators.json?order=shortName:desc

You can find an object based on its ID across all object types through
the *identifiableObjects* resource:

    /api/identifiableObjects/<id>

### Překlad { #webapi_translation } 

DHIS2 supports translations of database content, such as data elements,
indicators, and programs. All metadata objects in the Web API have
properties meant to be used for display / UI purposes, which include
*displayName*, *displayShortName*, *displayDescription* and
*displayFormName* (for data elements and tracked entity attributes).

Tabulka: Možnosti překladu

| Parametr | Hodnoty | Popis |
|---|---|---|
| přeložit | true &#124; false | Přeložte vlastnosti display\* do výstupu metadat (displayName, displayShortName, displayDescription a displayFormName pro datové prvky a sledované atributy entit). Výchozí hodnota je true. |
| národní prostředí | Místní použití | Přeložit výstup metadat pomocí zadaného národního prostředí (vyžaduje translate=true). |

### Překladové API { #webapi_translation_api } 

The translations for an object is rendered as part of the object itself
in the *translations* array. Note that the *translations* array in the
JSON/XML payloads is normally pre-filtered for you, which means they
can not directly be used to import/export translations (as that would
normally overwrite locales other than current users).

Příklad datového prvku s překladovým polem filtrovaným na národní prostředí uživatele:

```json
{
  "id": "FTRrcoaog83",
  "displayName": "Accute French",
  "translations": [
    {
      "property": "SHORT_NAME",
      "locale": "fr",
      "value": "Accute French"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Accute French"
    }
  ]
}
```

Příklad datového prvku s vypnutými překlady:

```json
{
  "id": "FTRrcoaog83",
  "displayName": "Accute Flaccid Paralysis (Deaths < 5 yrs)",
  "translations": [
    {
      "property": "FORM_NAME",
      "locale": "en_FK",
      "value": "aa"
    },
    {
      "property": "SHORT_NAME",
      "locale": "en_GB",
      "value": "Accute Flaccid Paral"
    },
    {
      "property": "SHORT_NAME",
      "locale": "fr",
      "value": "Accute French"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Accute French"
    },
    {
      "property": "NAME",
      "locale": "en_FK",
      "value": "aa"
    },
    {
      "property": "DESCRIPTION",
      "locale": "en_FK",
      "value": "aa"
    }
  ]
}
```

Note that even if you get the unfiltered result, and are using the
appropriate type endpoint i..e `/api/dataElements` we do not allow
updates, as it would be too easy to make mistakes and overwrite the
other available locales.

To read and update translations you can use the special translations
endpoint for each object resource. These can be accessed by *GET* or
*PUT* on the appropriate `/api/<object-type>/<object-id>/translations` endpoint.

As an example, for a data element with identifier `FTRrcoaog83`, you could use
`/api/dataElements/FTRrcoaog83/translations` to get and update
translations. The fields available are `property` with options *NAME*,
*SHORT_NAME*, *FORM_NAME*, *DESCRIPTION*, `locale` which supports any valid
locale ID and the translated property `value`.

Příklad vlastnosti NAME pro francouzské národní prostředí:

```json
{
  "property": "NAME",
  "locale": "fr",
  "value": "Paralysie Flasque Aiguë (Décès <5 ans)"
}
```

This payload would then be added to a translation array, and sent back
to the appropriate endpoint:

```json
{
  "translations": [
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Paralysie Flasque Aiguë (Décès <5 ans)"
    }
  ]
}
```

For a data element with ID *FTRrcoaog83* you can *PUT* this to
`/api/dataElements/FTRrcoaog83/translations`. Make sure to send all
translations for the specific object and not just for a single locale
(if not you will potentially overwrite existing locales for other
locales).

Stavový kód bude `204 No Content` , pokud byla hodnota dat úspěšně uložena nebo aktualizována, nebo `404 Not Found` , pokud došlo k chybě ověření (např. více než jeden  `SHORT_NAME`  pro stejné `locale`).


### Verze webového rozhraní API { #webapi_api_versions } 

Webové rozhraní API je verzováno od verze DHIS 2.25. Verzování API se řídí číslováním hlavních verzí DHIS2. Příklad: verze API pro DHIS 2.33 je `33`.

You can access a specific API version by including the version number
after the `/api` component, as an example like this:

    /api/33/dataElements

If you omit the version part of the URL, the system will use the current
API version. As an example, for DHIS 2.25, when omitting the API part,
the system will use API version 25. When developing API clients it is
recommended to use explicit API versions (rather than omitting the API
version), as this will protect the client from unforeseen API changes.

The last three API versions will be supported. As an example, DHIS
version 2.27 will support API version 27, 26 and 25.

Note that the metadata model is not versioned and that you might
experience changes e.g. in associations between objects. These changes
will be documented in the DHIS2 major version release notes.

## Filtr objektů metadat { #webapi_metadata_object_filter } 

To filter the metadata there are several filter operations that can be
applied to the returned list of metadata. The format of the filter
itself is straight-forward and follows the pattern
*property:operator:value*, where *property* is the property on the
metadata you want to filter on, *operator* is the comparison operator
you want to perform and *value* is the value to check against (not all
operators require value). 

Please see the *schema* section to discover which properties are available. 
In addition to the listed properties filters can apply to custom attribute 
values by using the attribute's ID as property name.

Recursive filtering, ie. filtering on associated objects or collection of 
objects, is supported as well.

Tabulka: Dostupné operátory

| Operátor | Typy | Požadovaná hodnota | Popis |
|---|---|---|---|
| eq | řetězec &#124; booleovský &#124; celé číslo &#124; plovoucí &#124; výčet &#124; sběr (kontroluje velikost) &#124; datum | true | Rovnost |
| !eq | řetězec &#124; booleovský &#124; celé číslo &#124; plovoucí &#124; výčet &#124; sběr (kontroluje velikost) &#124; datum | true | Nerovnost |
| ieq | řetězec  | true  | Case insensitive string, match exact |
| ne | řetězec &#124; booleovský &#124; celé číslo &#124; plovoucí &#124; výčet &#124; sběr (kontroluje velikost) &#124; datum | true | Nerovnost |
| like | řetězec | true | Řetězec rozlišující malá a velká písmena, shodujte se kdekoli |
| !like | řetězec | true | Řetězec rozlišující malá a velká písmena, nikde se neshoduje |
| $like | řetězec | true | Řetězec rozlišující malá a velká písmena, shoduje se na začátku |
| !$like | řetězec | true | Řetězec rozlišující malá a velká písmena, neshoduje se na začátku |
| like$ | řetězec | true | Řetězec rozlišující malá a velká písmena, shoduje konec |
| !like$ | řetězec | true | Řetězec rozlišující malá a velká písmena, konec se neshoduje |
| ilike | řetězec | true | Řetězec necitlivý na malá a velká písmena, shoduje kdekoli |
| !ilike | řetězec | true | Řetězec necitlivý na malá a velká písmena, nikde se neshoduje |
| $ilike | řetězec | true | Řetězec nerozlišující malá a velká písmena, shoduje se na začátku |
| !$ilike | řetězec | true | Řetězec nerozlišuje velká a malá písmena, neshoduje se na začátku |
| ilike$ | řetězec | true | Řetězec nerozlišující malá a velká písmena, shoduje se na konci |
| !ilike$ | řetězec | true | Řetězec nerozlišující malá a velká písmena, neshoduje se na konci |
| gt | řetězec &#124; booleovský &#124; celé číslo &#124; plovoucí &#124; odběr (kontroluje velikost) &#124; datum | true | Větší než |
| ge | řetězec &#124; booleovský &#124; celé číslo &#124; plovoucí &#124; odběr (kontroluje velikost) &#124; datum | true | Větší než nebo rovno |
| lt | řetězec &#124; booleovský &#124; celé číslo &#124; plovoucí &#124; odběr (kontroluje velikost) &#124; datum | true | Menší než |
| le | řetězec &#124; booleovský &#124; celé číslo &#124; plovoucí &#124; odběr (kontroluje velikost) &#124; datum | true | Menší než nebo rovno |
| null | all | false | Vlastnost je nulová |
| !null | all | false | Vlastnost není nulová |
| empty | odběr | false | Odběr je prázdný |
| token | řetězec | true | Shoda na více tokenech ve vlastnosti vyhledávání |
| !token | řetězec | true | Neshoda u více tokenů ve vlastnosti vyhledávání |
| in | string &#124; boolean &#124; integer &#124; float &#124; date | true | Najděte objekty odpovídající 1 nebo více hodnotám |
| !in | string &#124; boolean &#124; integer &#124; float &#124; date | true | Najděte objekty, které neodpovídají 1 nebo více hodnotám |

Operators will be applied as logical *and* query. If you need a *or*
query, you can have a look at the *in* filter and the section below.
The filtering mechanism allows for recursion. See below for some examples.

Získejte datové prvky s ID vlastností ID1 nebo ID2:

    /api/dataElements?filter=id:eq:ID1&filter=id:eq:ID2

Get data elements, ignoring case, with name property MyDataElement:

    /api/dataElements?filter=name:ieq:mydataelement

Získejte všechny datové prvky, které mají datovou sadu s ID ID1:

    /api/dataElements?filter=dataSetElements.dataSet.id:eq:ID1

Get all data elements with aggregation operator *sum* and value type
*int*:

    /api/dataElements.json?filter=aggregationOperator:eq:sum&filter=type:eq:int

You can do filtering within collections, e.g. to get data elements which
are members of the *ANC* data element group you can use the following
query using the id property of the associated data element groups:

    /api/dataElements.json?filter=dataElementGroups.id:eq:qfxEYY9xAl6

To get data elements with a particular attribute value for a metadata 
attribute, a filter for the attribute ID and the attribute value can be 
specified using the same collection query syntax:

    /api/dataElements.json?filter=attributeValues.attribute.id:eq:n2xYlNbsfko&filter=attributeValues.value:eq:AFP

Get data elements which have any option set:

    /api/dataElements?filter=optionSet:!null

Since all operators are *and* by default, you can't find a data
element matching more than one id, for that purpose you can use the *in*
operator.

    /api/dataElements.json?filter=id:in:[fbfJHSPpUQD,cYeuwXTCPkU]

### Logické operátory { #webapi_metadata_logical_operator } 

As mentioned in the section before, the default logical operator applied
to the filters is *AND* which means that all object filters must be
matched. There are however cases where you want to match on one of
several filters (maybe id and code field) and in those cases, it is
possible to switch the root logical operator from *AND* to *OR*
using the *rootJunction* parameter.

Example: Normal filtering where both id and code must match to have a
result returned

    /api/dataElements.json?filter=id:in:[id1,id2]&filter=code:eq:code1

Example: Filtering where the logical operator has been switched to OR
and now only one of the filters must match to have a result
    returned

    /api/dataElements.json?filter=id:in:[id1,id2]&filter=code:eq:code1&rootJunction=OR

### Filtr identifikovatelných tokenů { #identifiable-token-filter } 

In addition to the specific property based filtering mentioned above,
we also have *token* based *AND* filtering across a set of
properties: id, code, and name (also shortName if available). These
properties are commonly referred to as *identifiable*. The idea is to
filter metadata whose id, name, code or short name containing something.

Example: Filter all data elements containing *2nd* in any of the
following: id,name,code, shortName

    /api/dataElements.json?filter=identifiable:token:2nd

Je také možné zadat více hodnot filtrování.

Příklad: Získejte všechny datové prvky, kde se *ANC visit* nachází v kterékoli z *identifikovatelných* vlastností. Systém vrací všechny datové prvky, kde se oba tokeny (ANC a návštěva) nacházejí kdekoli v identifikovatelných vlastnostech.

    /api/dataElements.json?filter=identifiable:token:ANC visit

It is also possible to combine the identifiable filter with property-based filter and expect the *rootJunction* to be applied.

    /api/dataElements.json?filter=identifiable:token:ANC visit&filter=displayName:ilike:tt1

    /api/dataElements.json?filter=identifiable:token:ANC visit
      &filter=displayName:ilike:tt1&rootJunction=OR

### Indexable only filter for tracked entity attributes { #indexable-only-filter-for-tracked-entity-attributes } 

For tracked entity attributes, there is a special filter in addition to the previous mentioned filtering capabilities. 
Some of the tracked entity attributes are candidates for creating a trigram index for better lookup performance. 
Using the *indexableOnly* parameter set to true, the results can be filtered to include only the attributes that are trigram indexable.

Example: Get all tracked entity attributes that are indexable.

    /api/trackedEntityAttributtes.json?indexableOnly=true

Additional filters along with the `indexableOnly` parameter can be specified.

Example: Get all tracked entity attributes where *ANC* is found in any of the *name* property. The system returns the tracked entity attributes where the name matches the provided keyword as well as if the attribute is indexable.

    /api/trackedEntityAttributtes.json?filter=name:like:ANC&indexableOnly=true

## Filtr pole metadat { #webapi_metadata_field_filter } 

In many situations, the default views of the metadata can be too
verbose. A client might only need a few fields from each object and want
to remove unnecessary fields from the response. To discover which fields
are available for each object please see the *schema* section.
In addition to the listed properties custom attributes can be included
for top level objects by using the attribute's ID as property name.

The format for include/exclude allows for infinite recursion. To filter
at the "root" level you can just use the name of the field,
i.e. `?fields=id,name` which would only display the `id` and
`name` fields for every object. For objects that are either collections or
complex objects with properties on their own, you can use the format
`?fields=id,name,dataSets[id,name]` which would return `id`, `name` of
the root, and the `id` and `name` of every data set on that object.
Negation can be done with the exclamation operator, and we have a set of
presets of field select. Both XML and JSON formats are supported.

**Příklad**: Získejte `id` a` name` ve zdroji indikátorů:

    /api/indicators?fields=id,name

**Example**: Get `id` and `name` from data elements, and `id` and `name`
from the associated data sets:

    /api/dataElements?fields=id,name,dataSets[id,name]

**Example**: Get `id`, `name` and the value of a user defined attribute 
with ID `DnrLSdo4hMl` for organisation units:

    /api/organisationUnits?fields=id,name,DnrLSdo4hMl

The attribute is then included as property `DnrLSdo4hMl` of each
matching object in the response. This can be renamed using the `rename` 
transformer as shown in the next section.

To exclude a field from the output you can use the exclamation `!`
operator. This is allowed anywhere in the query and will simply not
include that property as it might have been inserted in some of the
presets.

A few presets (selected fields groups) are available and can be applied
using the `:` operator.

Tabulka: operátory vlastností

| Operátor | Popis |
|---|---|
| <field-name\> | Zahrnout vlastnost s názvem, pokud existuje. |
| <object\>[<field-name\>, ...] | Zahrnuje pole buď v kolekci (bude použito na každý objekt v této kolekci), nebo jen na jednom objektu. |
| !<field-name\>, <object\>[!<field-name\> | Nezahrnujte tento název pole, funguje také uvnitř objektů/odběrů. Užitečné, když použijete předvolbu k zahrnutí polí. |
| \*, <object\>[\*] | Zahrnuje všechna pole na určitém objektu, pokud je použita na kolekci, bude zahrnovat všechna pole na všech objektech v dané kolekci. |
| :<preset\> | Alias pro výběr více polí. V současné době jsou k dispozici tři předvolby, popis naleznete v tabulce níže. |

Tabulka: Předvolby pole

| Preset | Popis |
|---|---|
| all | Všechna pole objektu |
| \* | Alias pro všechny |
| identifikovatelné | Obsahuje pole id, name, code, created a lastUpdated |
| pojmenovatelné | Zahrnuje pole id, name, shortName, code, description, created a lastUpdated |
| trvalé | Vrací veškerou trvalou vlastnost na objektu, nebere v úvahu, pokud je objekt vlastníkem relace. |
| vlastník | Vrací veškerou trvalou vlastnost na objekt, kde je objekt vlastníkem všech vlastností, tuto datovou část lze použít k aktualizaci prostřednictvím rozhraní API. |

**Příklad**: Zahrňte všechna pole z datových sad kromě organizačních jednotek:

    /api/dataSets?fields=:all,!organisationUnits

**Příklad**: Zahrnout pouze ID, název a kolekci organizačních jednotek z datové sady, ale ID z organizačních jednotek vyloučit:

    /api/dataSets/BfMAe6Itzgt?fields=id,name,organisationUnits[:all,!id]

**Příklad**: Zahrňte pojmenovatelné vlastnosti ze všech indikátorů:

    /api/indicators.json?fields=:nameable

### Transformátory polí { #webapi_field_transformers } 

Transformace pole lze použít k transformaci vlastností. Syntaxe je popsána níže.

    /api/dataElements/ID?fields=id~rename(i),name~rename(n)

This will rename the *id* property to *i* and *name* property to *n*.

Na jednu vlastnost lze použít více transformátorů opakováním operátoru transformátoru:

    /api/dataElementGroups.json?fields=id,displayName,dataElements~isNotEmpty~rename(haveDataElements)

Podporované transformátory jsou popsány v tabulce níže.

Tabulka: Dostupné transformátory

| Název | Argumenty | Popis |
|---|---|---|
| velikost || Udává velikosti řetězců (délka) a sbírek |
| isEmpty || Je řetězec nebo sbírka prázdná |
| isNotEmpty || Není řetězec nebo sbírka prázdná |
| rename | Arg1: name | Přejmenuje název vlastnosti |
| stránkování | Arg1: page,Arg2: pageSize | Stránky kolekce, výchozí velikost stránky je 50. |
| pluck | Volitelný Arg1: fieldName | Převede pole objektů na pole vybraného pole tohoto objektu. Ve výchozím nastavení je použito první pole vrácené kolekcí (obvykle ID). |
| keyBy | Volitelný Arg1: fieldName | Převede pole objektů na objekt, kde je jako klíč použit název_pole (výchozí id). To může být užitečné například pro rychlé vyhledávání v JavaScriptu |

#### Příklady { #webapi_field_transformers_examples } 

Příklady použití transformátoru jsou uvedeny níže.

Získejte velikost sbírky:

    /api/dataElements?fields=dataSets~size

Otestujte, zda je kolekce prázdná:

    /api/dataElements?fields=dataSets~isEmpty

Otestujte, zda kolekce není prázdná:

    /api/dataElements?fields=dataSets~isNotEmpty

Přejmenovat vlastnosti:

    /api/dataElements/ID?fields=id~rename(i),name~rename(n)

Použít stránkování na kolekci:

    /api/dataElementGroups?fields=id,displayName,dataElements~paging(1;20)

Získejte pole s ID organizačních jednotek:

    /api/categoryOptions.json?fields=id,organisationUnits~pluck

Získejte pole s názvy organizačních jednotek:

    /api/categoryOptions.json?fields=id,organisationUnits~pluck[name]

Zadejte pole dataElements do pole `id`:

    /api/dataElementGroups.json?fields=id,name,dataElements~keyBy[id,name,valueType]

Zadejte pole dataElements pomocí pole `valueType`, protože vícenásobné požadavky budou mít za následek pole (datových prvků):

    /api/dataElementGroups.json?fields=id,name,dataElements~keyBy(valueType)[id,name,valueType]

## Vytváření, čtení, aktualizace, mazání, ověřování metadat { #webapi_metadata_crud } 

All metadata entities in DHIS2 have their own API endpoint which supports
*CRUD* operations (create, read, update and delete). The endpoint URLs
follows this format:

    /api/<entityName>

The _entityName_ uses the camel-case notation. As an example, the endpoint
for _data elements_ is:

    /api/dataElements

> **_NOTE:_**  When updating objects, all existing property values will be overwritten, even if the new value is null. Please use [JSON Patch API](#webapi_partial_updates) in case you want do partial update to an object.

### Vytvořit / aktualizovat parametry { #webapi_metadata_create_update } 

Následující parametry dotazu na dotaz jsou k dispozici ve všech koncových bodech metadat.

Tabulka: Dostupné filtry dotazů

| Param | Typ | Požadované | Možnosti (nejprve výchozí) | Popis |
|---|---|---|---|---|
| preheatCache | boolean | false | true &#124; false | Zapněte/vypněte předehřívání mapy mezipaměti. Toto je ve výchozím nastavení zapnuto. Vypnutím této možnosti se počáteční doba načítání importéru výrazně zkrátí (ale zpomalí se samotný import). To se většinou používá pro případy, kdy máte malý soubor XML/JSON, který chcete importovat, a nechcete čekat na předehřívání mapy mezipaměti. |
| importStrategy | enum | false | CREATE_AND_UPDATE &#124; CREATE &#124; UPDATE &#124; DELETE | Chcete -li použít strategii importu, další informace naleznete níže. |

### Vytváření a aktualizace objektů { #webapi_creating_updating_objects } 

For creating new objects you will need to know the endpoint, the type
format, and make sure that you have the required authorities. As an
example, we will create and update a *constant*. To figure out the
format, we can use the new *schema* endpoint for getting format
description. So we will start with getting that info:

    http://<server>/api/schemas/constant.json

From the output, you can see that the required authorities for create
are `F_CONSTANT_ADD`, and the important properties are: *name* and
*value*. From this, we can create a JSON payload and save it as a file
called constant.json:

```json
{
  "name": "PI",
  "value": "3.14159265359"
}
```

Stejný obsah jako datový obsah XML:

```xml
<constant name="PI" xmlns="http://dhis2.org/schema/dxf/2.0">
  <value>3.14159265359</value>
</constant>
```

We are now ready to create the new *constant* by sending a POST request to
the `constants` endpoint with the JSON payload using curl:

```bash
curl -d @constant.json "http://server/api/constants" -X POST
  -H "Content-Type: application/json" -u user:password
```

Konkrétní příklad zveřejnění konstanty na demo serveru:

```bash
curl -d @constant.json "https://play.dhis2.org/api/constants" -X POST
  -H "Content-Type: application/json" -u admin:district
```

Pokud vše proběhlo dobře, měli byste vidět výstup podobný:

```json
{
  "status": "SUCCESS",
  "importCount": {
    "imported": 1,
    "updated": 0,
    "ignored": 0,
    "deleted": 0
  },
  "type": "Constant"
}
```

The process will be exactly the same for updating, you make your changes
to the JSON/XML payload, find out the *ID* of the constant, and then
send a PUT request to the endpoint including ID:

```bash
curl -X PUT -d @pi.json -H "Content-Type: application/json"
  -u user:password "http://server/api/constants/ID"
```

### Mazání objektů { #webapi_deleting_objects } 

Deleting objects is very straight forward, you will need to know the
*ID* and the endpoint of the type you want to delete, let's continue our
example from the last section and use a *constant*. Let's assume that
the id is *abc123*, then all you need to do is the send the DELETE
request to the endpoint + id:

```bash
curl -X DELETE -u user:password "http://server/api/constants/ID"
```

Úspěšné odstranění by mělo vrátit stav HTTP 204 (žádný obsah).

### Přidávání a odebírání objektů ze sbírek { #webapi_adding_removing_objects_collections } 

The collections resource lets you modify collections of
objects.

#### Přidávání nebo odebírání jednotlivých objektů { #webapi_collections_adding_removing_single_objects } 

In order to add or remove objects to or from a collection of objects you
can use the following
    pattern:

    /api/{collection-object}/{collection-object-id}/{collection-name}/{object-id}

You should use the POST method to add, and the DELETE method to remove
an object. When there is a many-to-many relationship between objects,
you must first determine which object owns the relationship. If it isn't
clear which object this is, try the call both ways to see which works.

Součásti vzoru jsou:

  - collection object: The type of objects that owns the collection you
    chtít upravit.

  - collection object id: Identifikátor objektu, který vlastní
    collection you want to modify.

  - collection name: Název kolekce, kterou chcete upravit.

  - object id: Identifikátor objektu, který chcete přidat nebo odebrat
    from the collection.

As an example, in order to remove a data element with identifier IDB
from a data element group with identifier IDA you can do a DELETE
request:

    DELETE /api/dataElementGroups/IDA/dataElements/IDB

To add a category option with identifier IDB to a category with
identifier IDA you can do a POST
request:

    POST /api/categories/IDA/categoryOptions/IDB

#### Přidání nebo odebrání více objektů { #webapi_collections_adding_removing_multiple_objects } 

You can add or remove multiple objects from a collection in one request
with a payload like this:

```json
{
  "identifiableObjects": [{
      "id": "IDA"
    }, {
      "id": "IDB"
    }, {
      "id": "IDC"
    }
  ]
}
```

Pomocí tohoto datového obsahu můžete přidávat, nahrazovat nebo mazat položky:

*Přidávání položek:*

    POST /api/categories/IDA/categoryOptions

*Replacing Items:*

    PUT /api/categories/IDA/categoryOptions

*Delete
Items:*

    DELETE /api/categories/IDA/categoryOptions

#### Přidávání a odebírání objektů v jednom požadavku { #webapi_collections_adding_removing_objects_single_request } 

You can both add and remove objects from a collection in a single POST
request to the following URL:

    POST /api/categories/IDA/categoryOptions

Formát datového obsahu je:

```json
{
  "additions": [{
      "id": "IDA"
    }, {
      "id": "IDB"
    }, {
      "id": "IDC"
    }
  ],
  "deletions": [{
      "id": "IDD"
    }, {
      "id": "IDE"
    }, {
      "id": "IDF"
    }
  ]
}
```

### Ověřování datového obsahu { #webapi_validating_payloads } 

DHIS 2 podporuje systémovou validaci datového obsahu metadat, což znamená, že operace vytváření a aktualizace na koncových bodech API budou před povolením změn kontrolovány na platném datovém obsahu. Chcete-li zjistit, jaké validace platí pro konkrétní koncový bod, podívejte se na koncový bod `/api/schemas`, tj. chcete-li zjistit, jaká omezení má datový prvek, přejděte na `/api/schemas/dataElement`.

You can also validate your payload manually by sending it to the proper
schema endpoint. If you wanted to validate the constant from the create
section before, you would send it like this:

    POST /api/schemas/constant

Jednoduchý (nevalidující) příklad by byl:

```bash
curl -X POST -d "{\"name\": \"some name\"}" -H "Content-Type: application/json"
  -u admin:district "https://play.dhis2.org/dev/api/schemas/dataElement"
```

Což přinese výsledek:

```json
[
   {
      "message" : "Required property missing.",
      "property" : "type"
   },
   {
      "property" : "aggregationOperator",
      "message" : "Required property missing."
   },
   {
      "property" : "domainType",
      "message" : "Required property missing."
   },
   {
      "property" : "shortName",
      "message" : "Required property missing."
   }
]
```

### Částečné aktualizace { #webapi_partial_updates } 

Pro naše koncové body API, které se zabývají metadaty, podporujeme částečné aktualizace (PATCH) pomocí opravy JSON [standardní] (https://tools.ietf.org/html/rfc6902). Užitná zátěž v podstatě nastiňuje sadu operací, které chcete použít na existující objekt metadat. Podrobnosti a příklady oprav JSON najdete na [jsonpatch.com] (http://jsonpatch.com/). Podporovány jsou tři operátory: `add`, `remove` a `replace`.

Níže je uvedeno několik příkladů relevantních pro DHIS2. Všimněte si, že jakákoli aktualizace datové části by měla být považována za operaci HTTP PUT, tj. jakákoli mutace musí vést k platnému datovému obsahu metadat PUT.

Výchozí `importReportMode` pro opravu JSON je `ERRORS_NOT_OWNER`, což znamená, že při aktualizaci jakékoli vlastnosti, která není vlastněna tímto konkrétním objektem (například při pokusu o přidání skupiny indikátorů přímo do indikátoru), se zobrazí chyba.

Podle specifikace opravy JSON musíte při odesílání oprav vždy použít typ mime `application/json-patch+json`.

#### Příklady { #examples } 

##### Update name and value type of data element { #update-name-and-value-type-of-data-element } 

```
PATCH /api/dataElements/{id}
```

```json
[
  {"op": "add", "path": "/name", "value": "New Name"},
  {"op": "add", "path": "/valueType", "value": "INTEGER"}
] 
```

##### Add new data element to a data element group { #add-new-data-element-to-a-data-element-group } 

```
PATCH /api/dataElementGroups/{id}
```

```json
[
  {"op": "add", "path": "/dataElements/-", "value": {"id": "data-element-id"}}
]
```

##### Remove all data element associations from a data element group { #remove-all-data-element-associations-from-a-data-element-group } 

```
PATCH /api/dataElementGroups/{id}
```

```json
[
  {"op": "remove", "path": "/dataElements"}
]
```

##### Change domain and value type of a data element { #change-domain-and-value-type-of-a-data-element } 

```
PATCH /api/dataElements/{id}
```

```json
[
    {"op": "add", "path": "/domainType", "value": "TRACKER"},
    {"op": "add", "path": "/valueType", "value": "INTEGER"}
]
```

##### Remove a specific orgUnit from an orgUnit group { #remove-a-specific-orgunit-from-an-orgunit-group } 

```
PATCH /api/organisationUnitGroups/{id}
```

```json
[
  {"op": "remove", "path": "/organisationUnits/1"}
]
```

#### Blocked add dataElementGroup to dataElement { #blocked-add-dataelementgroup-to-dataelement } 

```
PATCH /api/dataElements/{id}?importReportMode=ERRORS_NOT_OWNER
```

```json
[
    {"op": "add", "path": "/dataElementGroups/-", "value": {"id": "data-element-group-id"}}
]
```

#### Blocked update name of dataElementGroup in dataElement { #blocked-update-name-of-dataelementgroup-in-dataelement } 

```
PATCH /api/dataElements/{id}?importReportMode=ERRORS_NOT_OWNER
```

```json
[
    {"op": "add", "path": "/dataElementGroups/0", "value": {"name": "new-name"}}
]
```
#### Remove collection item by id { #remove-collection-item-by-id } 

```
PATCH /api/dataSets/{id}?importReportMode=ERRORS_NOT_OWNER
```

```json
[
    {"op": "remove-by-id", "path": "/organisationUnits", "id": "u6CvKyF0Db5"}
]
```

#### Patch request with invalid path { #patch-request-with-invalid-path } 
Pokud je vlastnost `cesta` neplatná nebo neexistuje, opravná služba vrátí chybu, jak je uvedeno níže


```
PATCH /api/dataSets/{id}?importReportMode=ERRORS_NOT_OWNER
```

```json
[
    {"op": "remove-by-id", "path": "/test", "id": "u6CvKyF0Db5"}
]
```
Odezva
```json
{
    "httpStatus": "Bad Request",
    "httpStatusCode": 400,
    "status": "ERROR",
    "message": "Invalid path /test"
}
```

### Metadata CSV export { #webapi_metadata_csv_export } 

Field filtering works almost the same for CSV (please note that using CSV on the `/api/metadata` endpoint is not supported), but not that
field fransformations are not yet supported.

For endpoints that support CSV (our metadata endpoints like `/api/dataElements` `/api/organisationUnits`) you can either use the `Accept` header with
value `text/csv` or you can use the extension `.csv`. Be aware that complex objects are not supported, and we only support id-object collections (so a list of UIDs
will be returned).

| Název | Možnosti | Popis |
|---|---|---|
| pole | Stejné jako filtr pole metadat (s výše uvedenými výhradami) | Výchozí filtr je `id,displayName` |
| skipHeader | false/true | Má nebo nemá být zahrnuto záhlaví (s názvy sloupců).
| oddělovač | Výchozí: `.` | Oddělovač sloupců
| arraySeparator | Výchozí: `;` | Pokud je jedno z polí kolekce id-objektů, tento oddělovač oddělí všechna UID

#### Příklady { #examples } 

#### Get all data elements including their group associations { #get-all-data-elements-including-their-group-associations } 

```
/api/dataElements.csv?fields=id,displayName,dataElementGroups
```

#### Get all org units including geometry (which will get ignored) { #get-all-org-units-including-geometry-which-will-get-ignored } 

```
/api/organisationUnits.csv?fields=id,displayName,organisationUnitGroups,geometry
```

## Export metadat { #webapi_metadata_export } 

This section explains the metatada API which is available at
`/api/metadata`. XML and JSON resource representations are supported.

    /api/metadata

The most common parameters are described below in the "Export Parameter"
table. You can also apply this to all available types by using
`type:fields=<filter>` and `type:filter=<filter>`. You can also
enable/disable the export of certain types by setting `type=true|false`.

Tabulka: Parametr exportu

| Název | Možnosti | Popis |
|---|---|---|
| pole | Stejné jako filtr metadatového pole | Výchozí filtr pole platí pro všechny typy, výchozí je `:owner`. |
| filtr | Stejné jako objektový filtr metadat | Výchozí objektový filtr platí pro všechny typy, výchozí je `none`. |
| řazení | Stejné jako pořadí metadat | Výchozí pořadí platí pro všechny typy, výchozí je `název`, pokud je k dispozici, nebo `vytvořeno`, pokud není. |
| přeložit | false/true | Povolit překlady. Uvědomte si, že toto je ve výchozím nastavení vypnuto (v jiných koncových bodech je ve výchozím nastavení zapnuto). |
| národní prostředí | <locale\> | Přepněte z národního prostředí uživatele na své vlastní národní prostředí. |
| výchozí | INCLUDE/EXCLUDE | Má nebo nemá být automaticky generovaný objekt kategorie zahrnut do datového obsahu. Pokud přesouváte metadata mezi 2 nesynchronizovanými instancemi, může mít smysl nastavit toto na EXCLUDE, aby se usnadnila manipulace s těmito generovanými objekty. |
| skipSharing | false/true | Enabling this will strip the sharing properties from the exported objects. This includes *user*, *publicAccess*, *userGroupAccesses*, *userAccesses*, and *externalAccess*. |
| stažení | false/true | Povolením této možnosti se přidá hlavička HTTP Content-Disposition, která určuje, že data by měla být zpracována jako příloha a budou nabízena webovými prohlížeči jako stahování. |

### Příklady exportu metadat { #webapi_metadata_export_examples } 

Export all metadata. Be careful as the response might be very large depending
on your metadata configuration:

    /api/metadata

Export všech metadat seřazených podle lastUpdated sestupně:

    /api/metadata?defaultOrder=lastUpdated:desc

Exportujte metadata pouze včetně indikátorů a skupin indikátorů:

    /api/metadata?indicators=true&indicatorGroups=true

Export id a displayName pro všechny datové prvky, seřazené podle displayName:

    /api/metadata?dataElements:fields=id,name&dataElements:order=displayName:desc

Export datových prvků a indikátorů, kde název začíná „ANC“:

    /api/metadata?filter=name:^like:ANC&dataElements=true&indicators=true

### Export metadat se závislostmi { #webapi_dataset_program_export_dependencies } 

When you want to exchange metadata for a data set, program, category combo,
dashboard, option set or data element group
from one DHIS2 instance to another instance there are six dedicated endpoints available:

```
/api/dataSets/{id}/metadata.json

/api/programs/{id}/metadata.json

/api/categoryCombos/{id}/metadata.json

/api/dashboards/{id}/metadata.json

/api/optionSets/{id}/metadata.json

/api/dataElementGroups/{id}/metadata.json
```

Tyto exporty lze poté importovat pomocí `/api/metadata`.

Tyto koncové body také podporují následující parametry:

Tabulka: Parametr exportu

| Název | Možnosti | Popis |
|---|---|---|
| skipSharing | false/true | Enabling this will strip the sharing properties from the exported objects. This includes *user*, *publicAccess*, *userGroupAccesses*, *userAccesses*, and *externalAccess*. |
| stažení | false/true | Povolením této možnosti se přidá hlavička HTTP Content-Disposition, která určuje, že data by měla být zpracována jako příloha a budou nabízena webovými prohlížeči jako stahování. |

## Import metadat { #webapi_metadata_import } 

This section explains the metadata import API. XML and JSON resource
representations are supported. Metadata can be imported using a *POST* request.

    /api/metadata

The importer allows you to import metadata payloads which may include many
different entities and any number of objects per entity. The metadata export
generated by the metadata export API can be imported directly.

The metadata import endpoint support a variety of parameters, which are
listed below.

Tabulka: Parametr importu

| Název | Možnosti (první je výchozí) | Popis |
|---|---|---|
| importMode | COMMIT, VALIDATE | Nastavuje celkový režim importu, rozhoduje, zda metadata pouze `VALIDATE` nebo také `COMMIT`, má podobnou funkci jako náš starý příznak dryRun. |
| identifikátor | UID, CODE, AUTO | Nastavuje schéma identifikátoru, které se má použít pro porovnávání referencí. `AUTO` znamená nejprve zkusit `UID`, potom `CODE`. |
| importReportMode | ERRORS, FULL, DEBUG | Sets the `ImportReport` mode, controls how much is reported back after the import is done. `ERRORS` only includes *ObjectReports* for object which has errors. `FULL` returns an *ObjectReport* for all objects imported, and `DEBUG` returns the same plus a name for the object (if available). |
| preheatMode | REFERENCE, ALL, NONE | Sets the preheater mode, used to signal if preheating should be done for `ALL` (as it was before with *preheatCache=true*) or do a more intelligent scan of the objects to see what to preheat (now the default), setting this to `NONE` is not recommended. |
| importStrategy | CREATE_AND_UPDATE, CREATE, UPDATE, DELETE | Nastaví strategii importu, `CREATE_AND_UPDATE` se pokusí najít shodu s identifikátorem, pokud neexistuje, vytvoří objekt. |
| atomicMode | ALL, NONE | Sets atomic mode, in the old importer we always did a *best effort* import, which means that even if some references did not exist, we would still import (i.e. missing data elements on a data element group import). Default for new importer is to not allow this, and similar reject any validation errors. Setting the `NONE` mode emulated the old behavior. |
| flushMode | AUTO, OBJECT | Sets the flush mode, which controls when to flush the internal cache. It is *strongly* recommended to keep this to `AUTO` (which is the default). Only use `OBJECT` for debugging purposes, where you are seeing hibernate exceptions and want to pinpoint the exact place where the stack happens (hibernate will only throw when flushing, so it can be hard to know which object had issues). | 
| skipSharing | false, true | Přeskočit vlastnosti sdílení, nesloučit sdílení při provádění aktualizací a nepřidávat přístup ke skupině uživatelů při vytváření nových objektů. |
| skipValidation | false, true | Přeskočit ověření pro import. `NOT RECOMMENDED`. |
| async | false, true | Asynchronous import, returns immediately with a *Location* header pointing to the location of the *importReport*. The payload also contains a json object of the job created. |
| inclusionStrategy | NON_NULL, ALWAYS, NON_EMPTY | *NON_NULL* includes properties which are not null, *ALWAYS* include all properties, *NON_EMPTY* includes non empty properties (will not include strings of 0 length, collections of size 0, etc.) |
| userOverrideMode | NONE, CURRENT, SELECTED | Umožňuje přepsat uživatelskou vlastnost každého objektu, který importujete, možnosti jsou NONE (nedělat nic), CURRENT (použít importovaného uživatele), SELECTED (vybrat konkrétního uživatele pomocí overrideUser=X) |
| overrideUser | User ID | Pokud je userOverrideMode SELECTED, použijte tento parametr k výběru uživatele, u kterého chcete přepsat. |

> **NOTE** When updating objects, all property values will be overwritten even if the new values are `null`. Please use [JSON Patch API](#webapi_partial_updates) in case you want do partial update to an object.


An example of a metadata payload to be imported looks like this. Note how
each entity type have their own property with an array of objects:

```json
{
  "dataElements": [
    {
      "name": "EPI - IPV 3 doses given",
      "shortName": "EPI - IPV 3 doses given",
      "aggregationType": "SUM",
      "domainType": "AGGREGATE",
      "valueType": "INTEGER_ZERO_OR_POSITIVE"
    },
    {
      "name": "EPI - IPV 4 doses given",
      "shortName": "EPI - IPV 4 doses given",
      "aggregationType": "SUM",
      "domainType": "AGGREGATE",
      "valueType": "INTEGER_ZERO_OR_POSITIVE"
    }
  ],
  "indicators": [
    {
      "name": "EPI - ADS stock used",
      "shortName": "ADS stock used",
      "numerator": "#{LTb8XeeqeqI}+#{Fs28ZQJET6V}-#{A3mHIZd2tPg}",
      "numeratorDescription": "ADS 0.05 ml used",
      "denominator": "1",
      "denominatorDescription": "1",
      "annualized": false,
      "indicatorType": {
        "id": "kHy61PbChXr"
      }
    }
  ]
}
```

When posting this payload to the metadata endpoint, the response will contain
information about the parameters used during the import and a summary per
entity type including how many objects were created, updated, deleted and
ignored:

```json
{
  "importParams": {
    "userOverrideMode": "NONE",
    "importMode": "COMMIT",
    "identifier": "UID",
    "preheatMode": "REFERENCE",
    "importStrategy": "CREATE_AND_UPDATE",
    "atomicMode": "ALL",
    "flushMode": "AUTO",
    "skipSharing": false,
    "skipTranslation": false,
    "skipValidation": false,
    "metadataSyncImport": false,
    "firstRowIsHeader": true,
    "username": "UNICEF_admin"
  },
  "status": "OK",
  "typeReports": [
    {
      "klass": "org.hisp.dhis.dataelement.DataElement",
      "stats": {
        "created": 2,
        "updated": 0,
        "deleted": 0,
        "ignored": 0,
        "total": 2
      }
    },
    {
      "klass": "org.hisp.dhis.indicator.Indicator",
      "stats": {
        "created": 1,
        "updated": 0,
        "deleted": 0,
        "ignored": 0,
        "total": 1
      }
    }
  ],
  "stats": {
    "created": 3,
    "updated": 0,
    "deleted": 0,
    "ignored": 0,
    "total": 3
  }
}
```

## GeoJSON import <!-- DHIS2-EDIT:https://github.com/dhis2/dhis2-docs/edit/master/src/developer/web-api/geo-json.md --> { #geojson-import } 

Import GeoJSON se používá k připojení geometrických dat k organizačním jednotkám.

For a bulk import a GeoJSON file with a feature collection is expected.
Each feature in the collection requires a reference to the organisation unit it
should be linked to.

By default, the geometry from the file is stored as the `geometry` property of
an organisation unit. To store additional geometries attributes of type
`GEOJSON` can be created. When attributes are use all geometries from a file
are stored for the same attribute which is provided with an additional 
parameter `attributeId`.

### Hromadný import dat GeoJSON { #webapi_geojson_bulk_import }

Tabulka: Parametry importu

| Název              | Typ                           | Výchozí | Popis                                                                                                                       |
|-------------------|--------------------------------|---|-----------------------------------------------------------------------------------------------------------------------------------|
| `geoJsonId`       | `boolean`                      | `true` | Když se očekává, že `true`, vlastnost `id` funkcí GeoJSON bude obsahovat identifikátor organizační jednotky                        |
| `geoJsonProperty` | `String`                       | _undefined_ | Pokud je `geoJsonId` `false`, tento parametr pojmenuje vlastnost ve vlastnostech `properties` funkce GeoJSON, která obsahuje identifikátor organizační jednotky. |
| `orgUnitProperty` | `enum`: [`id`, `code`, `name`] | `id` | Vlastnost organizační jednotky, na kterou odkazují identifikátory použité v souboru GeoJSON                             |
| `attributeId`     | `String` | _undefined_ | When set the geometry is stored as value of the attribute referenced  by ID                                                       |
| `dryRun`          | `boolean` | `false` | Když je `true`, import je zpracován bez skutečné aktualizace organizačních jednotek |
| `async`           | `boolean` | `false` | Když je `true`, import je zpracován asnychronně |

Uasge:

    POST /api/organisationUnits/geometry

The post body is the GeoJSON file. Content type should be `application/json` or
`application/geo+json`. The file may be `.zip` or `.gzip` compressed.

For example, a default file where `id` is used to refer to an organisation unit 
id has this structure:

```json
{ 
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "id": "O6uvpzGd5pu",
      "geometry": { ... }
    },
    ...
  ]
}
```

A file where a feature property is used to refer to the organisation unit code
would have this structure:

```json
{ 
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": { "code": "OU1_CODE" },
      "geometry": { ... }
    },
    ...
  ]
}
```
The `coordinates` in a `geometry` may be pairs or triplets. 
If a third dimension is present it is stripped during the import.

A `geometry` may also be `null` to effectively clear or delete the geometry 
for specific organisation units. There is a special bulk deletion API that is
described in the next section.

When run synchronously an import report is returned directly.
The HTTP status code is always `OK`, the `status` in the message payload
indicates if all rows were imported successfully.
The import counts statistics contained in the report give further information:

* `imported`: number of organisation units that were successfully updated with a geometry that did not have one before for the updated property
* `updated`: number of organisation units that were successfully updated with a geometry that did have value for the updated property already
* `ignored`: number of organisation units that failed to update
* `deleted`: number of organisation units that where successfully update with a _empty_ geometry

When the import is run asynchronous the request returns immediately with status 
`OK` and job configuration response that contains a relative reference to 
the task endpoint that allows to track the status of the asynchronous import.
For example:

    /api/system/tasks/GEOJSON_IMPORT/{job-id}

Souhrn, který je vrácen přímo pro synchronní spuštění, je k dispozici na adrese

    /api/system/taskSummaries/GEOJSON_IMPORT/{job-id}

jakmile je import dokončen.

### Hromadné mazání dat GeoJSON { #webapi_geojson_bulk_deletion }
To clear or unset the `geometry` data for all organisation units use:

    DELETE /api/organisationUnits/geometry

To clear or unset the geometry data for a specific `GEOJSON` attribute for
all organisation units use:

    DELETE /api/organisationUnits/geometry?attributeId={attr-id}

Clearing is always synchronous and returns a similar report as the bulk import.
It does not support any other parameters. No `dry-run` can be performed.
Bulk clearing requires the `F_PERFORM_MAINTENANCE` authority.

### GeoJSON Single Data Import { #webapi_geojson_single_import }
Samostatný import umožňuje aktualizovat geometrii jedné organizační jednotky.

    POST /api/organisationUnits/{id}/geometry

The post body only contains the GeoJSON `geometry` value, for example:
```json
{
  "type": "Polygon",
  "coordinates": [...]
}
```
Single import only supports `attributeId` and `dryRun` parameters.

### GeoJSON Single Data Deletion { #webapi_geojson_single_deletion }
To clear the `geometry` GeoJSON data of an individual organisation unit use:

    DELETE /api/organisationUnits/{id}/geometry

Similarly to clear a `GEOJSON` attribute value for an individual organisation 
unit use:

    DELETE /api/organisationUnits/{id}/geometry?attributeId={attr-id}

Clearing is always synchronous returns a similar report as single import.
The `dry-run` parameter is supported as well. 
The performing user requires authority to modify the target organisation unit.



## Schéma { #webapi_schema } 

A resource which can be used to introspect all available DXF 2 objects
can be found on `/api/schemas`. For specific resources you can have a
look at `/api/schemas/<type>`.

Chcete-li získat všechna dostupná schémata v XML:

    GET /api/schemas.xml

Chcete-li získat všechna dostupná schémata v JSON:

    GET /api/schemas.json

Postup získání schématu JSON pro konkrétní třídu:

    GET /api/schemas/dataElement.json


## Ikony { #webapi_icons } 

DHIS2 includes a collection of icons that can be used to give visual
context to metadata. There are two different kind of icons:
  - Default icons: they are pre-installed in the application and are not possible to modify nor delete.
  - Custom icons: can be created, updated and deleted at will.

Both of them be accessed through the icons resource.

    GET /api/icons

This endpoint returns a list of information about the available icons.
In case of default icons, each entry contains the icon's metadata, and a reference to the actual file resource.

```json
{
  key: "mosquito_outline",
  description: "Mosquito outline",
  keywords: [
    "malaria",
    "mosquito",
    "dengue"
  ],
  href: "<dhis server>/api/icons/mosquito_outline/icon.svg"
}
```
When it comes to custom icons, the response also includes the referenced file resource and the user who created the icon:

```json
{
  key: "custom key",
  description: "description",
  keywords: [
    "keyword 1",
    "keyword 2"
  ],
  fileResourceUid: "ohUVXsOZ8qp",
  userUid: "AIK2aQOJIbj",
  href: "<dhis server>/api/fileResources/ohUVXsOZ8qp/data"
}
```

It's also possible to get a particular icon directly by filtering by its key, in the example below, the key is mosquito_outline.

    GET /api/icons/mosquito_outline

Keywords can be used to filter which icons to return. Passing a list
of keywords with the request will only return icons (both default and custom) that match all the keywords:

    GET /api/icons?keywords=shape,small

Seznam všech jedinečných klíčových slov naleznete na zdroji klíčových slov:

    GET /api/icons/keywords

### Custom icon operations { #webapi_icons_custom }


A custom icon resource can be downloaded by providing the icon key:

    GET /api/icons/{key}/icon

Custom icons can be created, modified and deleted.
To create a custom icon, use the resource below.

    POST /api/icons

It expects a payload containing the icon key, description, list of keywords and the file resource uid to be linked to the data.

```json
{
    "key": "iconKey",
    "description": "description",
    "keywords": ["keyword 1","keyword 2"],
    "fileResourceUid": "ARsqBjfB2cf"
}
```

Two of these properties are possible to update, they are the description and keywords, using the resource below.

    PUT /api/icons

With the following payload, the icon's description and keywords would be updated.

```json
{
    "key": "iconKey",
    "description": "new description",
    "keywords": ["new keyword 1", "new keyword 2"] 
}
```

Please notice that's also possible to just update one of the two. That means in case we would like to update the description while keeping the keywords, we would just need to provide the icon key and the descripton json field. Same would work the other way around, to update the keywords and leave the original description untouched.

To delete a custom icon we use the resource

    DELETE /api/icons/{icon_key}


## Typ vykreslení { #webapi_render_type } 

Some metadata types have a property named *renderType*. The render type
property is a map between a *device* and a *renderingType*. Applications
can use this information as a hint on how the object should be rendered
on a specific device. For example, a mobile device might want to render
a data element differently than a desktop computer.

V současné době jsou k dispozici dva různé druhy typů vykreslování:

1.  Vykreslení typu hodnoty

2.  Vykreslování části programové fáze

K dispozici jsou také 2 typy zařízení:

1.  MOBILE

2.  PLOCHA

The following table lists the metadata and rendering types available.
The value type rendering has addition constraints based on the metadata
configuration, which will be shown in a second table.

Tabulka: Přehled metadat a RenderingType

| Typ metadat | Dostupné typy vykreslování RenderingTypes |
|---|---|
| Sekce fáze programu | * LISTING (default)<br> * SEQUENTIAL<br> * MATRIX |
| Datový prvek | * DEFAULT<br> * DROPDOWN<br> * VERTICAL_RADIOBUTTONS<br> * HORIZONTAL_RADIOBUTTONS<br> * VERTICAL_CHECKBOXES<br> * HORIZONTAL_CHECKBOXES<br> * SHARED_HEADER_RADIOBUTTONS<br> * ICONS_AS_BUTTONS<br> * SPINNER<br> * ICON<br> * TOGGLE<br> * VALUE<br> * SLIDER<br> * LINEAR_SCALE<br> * AUTOCOMPLETE<br> * QR_CODE<br> * BAR_CODE<br> * GS1_DATAMATRIX |

Since handling the default rendering of data elements and tracked entity
attributes are depending on the value type of the object, there is also
a DEFAULT type to tell the client it should be handled as normal.
Program Stage Section is LISTING as default.

Tabulka: RenderingTypes povoleny na základě typů hodnot

| Typ hodnoty               | Je objekt sadou možností? | Povoleny typy vykreslování RenderingTypes |
|--------------------------|---|---|
| TRUE_ONLY                | Ne | DEFAULT, VERTICAL_RADIOBUTTONS, HORIZONTAL_RADIOBUTTONS, VERTICAL_CHECKBOXES, HORIZONTAL_CHECKBOXES, TOGGLE |
| BOOLEAN                  | Ne ||
| -                        | Ano | DEFAULT, DROPDOWN, VERTICAL_RADIOBUTTONS, HORIZONTAL_RADIOBUTTONS, VERTICAL_CHECKBOXES, HORIZONTAL_CHECKBOXES, SHARED_HEADER_RADIOBUTTONS, ICONS_AS_BUTTONS, SPINNER, ICON |
| INTEGER                  | Ne | DEFAULT, VALUE, SLIDER, LINEAR_SCALE, SPINNER |
| TEXT                     | Ne | DEFAULT, VALUE, AUTOCOMPLETE, QR_CODE, BAR_CODE, GS1_DATAMATRIX |
| INTEGER_POSITIVE         | Ne ||
| INTEGER_NEGATIVE         | Ne ||
| INTEGER_ZERO_OR_POSITIVE | Ne ||
| NUMBER                   | Ne ||
| UNIT_INTERVAL            | Ne ||
| PERCENTAGE               | Ne ||

A complete reference of the previous table can also be retrieved using
the following endpoint:

    GET /api/staticConfiguration/renderingOptions

Value type rendering also has some additional properties that can be
set, which is usually needed when rendering some of the specific types:

Tabulka: vlastnosti objektu renderType

| Vlastnictví | Popis | Typ |
|---|---|---|
| typ | RenderingType objektu, jak je vidět v první tabulce. Tato vlastnost je stejná pro typ hodnoty i pro sekci fáze programu, ale je jedinou vlastností dostupnou pro sekci fáze programu. | Výčet (viz seznam v tabulce Metadata a typ vykreslení) |
| min | Pouze pro vykreslování typu hodnoty. Představuje minimální hodnotu, kterou může toto pole mít. | Celé číslo |
| max | Pouze pro vykreslování typu hodnoty. Představuje maximální hodnotu, kterou toto pole může mít. | Celé číslo |
| krok | Pouze pro vykreslování typu hodnoty. Představuje velikost kroků, o které by se měla hodnota zvýšit, například pro SLIDER nebo LINEAR_SCALE | Celé číslo |
| decimalPoints | Pouze pro vykreslování typu hodnoty. Představuje počet desetinných míst, který má hodnota použít. | Celé číslo |

Při vytváření nebo aktualizaci metadat uvedených v první tabulce lze nastavit *renderingType*. Příklad datového obsahu pro typ vykreslování pro sekci fáze programu vypadá takto:

```json
{
  "renderingType": {
    "type": "MATRIX"
  }
}
```

Pro datový prvek a atribut trasované entity:

```json
{
  "renderingType": {
    "type": "SLIDER",
    "min": 0,
    "max": 1000,
    "step": 50,
    "decimalPoints": 0
  }
}
```

## Styl objektu { #webapi_object_style } 

Most metadata have a property names "style". This property can be used
by clients to represent the object in a certain way. The properties
currently supported by style is as follows:

Tabulka: Vlastnosti stylu

| Vlastnictví | Popis | Typ |
|---|---|---|
| color | Barva reprezentovaná šestnáctkovou soustavou. | String (#000000) |
| icon | Ikona reprezentovaná názvem ikony. | Řetězec |

Currently, there is no official list or support for icon-libraries, so
this is currently up to the client to provide. The following list shows
all objects that support style:

  - Datový prvek

  - Možnost kategorie datových prvků

  - Datová sada

  - Indikátor

  - Možnost

  - Program

  - Indikátor programu

  - Sekce programu

  - Fáze programu

  - Sekce fáze programu

  - Vztah (Trasovač)

  - Atribut trasované entity

  - Typ trasované entity

When creating or updating any of these objects, you can include the
following payload to change the style:

```json
{
  "style": {
    "color": "#ffffff",
    "icon": "my-beautiful-icon"
  }
}
```

## Indikátory { #webapi_indicators } 

Tato část popisuje indikátory a výrazy indikátorů.

### Agregované indikátory { #webapi_aggregate_indicators } 

To retrieve indicators you can make a GET request to the indicators
resource like this:

    /api/indicators

Indikátory představují výrazy, které lze vypočítat a prezentovat jako výsledek. Výrazy indikátorů se dělí na čitatele a jmenovatele. Čitatelé a jmenovatelé jsou matematické výrazy, které mohou obsahovat odkazy na datové prvky, jiné indikátory, konstanty a skupiny organizačních jednotek. Proměnné budou při použití např. ve výkazech nahrazeny hodnotami dat. Proměnné, které jsou ve výrazech povoleny, jsou popsány v následující tabulce.

Tabulka: Indikátorové proměnné

| Proměnná | Objekt | Popis |
|---|---|---|
| #{<data-element-id\>.<category-option-combo-id\>.<attribute-option-combo-id\>} | Operand datového prvku | Odkazuje na kombinaci agregovaného datového prvku a kombinace možností kategorie. Id kombinace možností kategorie i atributu jsou volitelné a k označení jakékoli hodnoty lze použít zástupný znak „\*“. |
| #{<dataelement-id\>.<category-option-group-id\>.<attribute-option-combo-id\>} | Skupina možností kategorií | Odkazuje na agregovaný datový prvek a skupinu možností kategorie obsahující více kombinací možností kategorie. |
| #{<data-element-id\>} | Agregovaný datový prvek | Odkazuje na celkovou hodnotu agregovaného datového prvku ve všech kombinacích možností kategorií. |
| D{<program-id\>.<data-element-id\>} | Datový prvek programu | Odkazuje na hodnotu datového prvku trasovače v programu. |
| A{<program-id\>.<attribute-id\>} | Atribut trasované entity programu | Odkazuje na hodnotu atributu trasované entity v rámci programu. |
| I{<program-indicator-id\>} | Indikátor programu | Odkazuje na hodnotu indikátoru programu. |
| R{<dataset-id\>.<metric\>} | četnost hlášení | Odkazuje na metriku rychlosti vykazování. Metrika může být REPORTING_RATE, REPORTING_RATE_ON_TIME, ACTUAL_REPORTS, ACTUAL_REPORTS_ON_TIME, EXPECTED_REPORTS. |
| C{<constant-id\>} | Konstantní | Odkazuje na konstantní hodnotu. |
| N{<indicator-id\>} | Indikátor | Odkazuje na existující indikátor. |
| OUG{<orgunitgroup-id\>} | Skupina organizační jednotky | Odkazuje na počet organizačních jednotek ve skupině organizačních jednotek. |

V rámci operandu datového prvku nebo agregovaného datového prvku lze provést následující substituce:

| Položka | Hodnota | Popis |
|---|---|---|
| data-element-id | data-element-id | Souhrnný datový prvek |
| data-element-id | deGroup:data-element-group-id | Všechny agregované datové prvky ve skupině datových prvků |
| category-option-combo-id | category-option-combo-id | Kombinace možností kategorie |
| category-option-combo-id | co:category-option-id | Všechny kombinace možností kategorie v možnosti kategorie |
| category-option-combo-id | coGroup:category-option-group-id | Všechny kombinace možností kategorie ve skupině možností kategorie |
| category-option-combo-id | coGroup:co-group-id1&co-group-id2... | Všechny kombinace možností kategorií, které jsou členy více skupin možností kategorií |

Syntaxe vypadá jako
    toto:

    #{<dataelement-id>.<catoptcombo-id>} + C{<constant-id>} + OUG{<orgunitgroup-id>}

Odpovídající příklad vypadá takto:

    #{P3jJH5Tu5VC.S34ULMcHMca} + C{Gfd3ppDfq8E} + OUG{CXw2yu5fodb}

Note that for data element variables the category option combo
identifier can be omitted. The variable will then represent the total
for the data element, e.g. across all category option combos. Example:

    #{P3jJH5Tu5VC} + 2

Data element operands can include any of category option combination and
attribute option combination, and use wildcards to indicate any
    value:

    #{P3jJH5Tu5VC.S34ULMcHMca} + #{P3jJH5Tu5VC.*.j8vBiBqGf6O} + #{P3jJH5Tu5VC.S34ULMcHMca.*}

Příklad použití skupiny datových prvků:

    #{deGroup:oDkJh5Ddh7d} + #{deGroup:GBHN1a1Jddh.j8vBiBqGf6O}

Příklad použití možností kategorie, skupiny datových prvků a skupiny možností kategorie:

    #{P3jJH5Tu5VC.co:FbLZS3ueWbQ} + #{deGroup:GBHN1a1Jddh.coGroup:OK2Nr4wdfrZ.j8vBiBqGf6O}

Příklad použití více skupin možností kategorií:

    #{P3jJH5Tu5VC.coGroup:OK2Nr4wdfrZ&j3C417uW6J7&ddAo6zmIHOk}

Příklad s použitím datového prvku programu a atributu programu:

    ( D{eBAyeGv0exc.vV9UWAZohSf} * A{IpHINAT79UW.cejWyOfXge6} ) / D{eBAyeGv0exc.GieVkTxp4HH}

Příklad kombinace programových indikátorů a souhrnných indikátorů:

    I{EMOt6Fwhs1n} * 1000 / #{WUg3MYWQ7pt}

Příklad použití četnosti hlášení zpráv:

    R{BfMAe6Itzgt.REPORTING_RATE} * #{P3jJH5Tu5VC.S34ULMcHMca}

Další příklad četnosti hlášení zpráv využívající skutečné hlášení zpráv datových souborů a očekávané hlášení zpráv:

    R{BfMAe6Itzgt.ACTUAL_REPORTS} / R{BfMAe6Itzgt.EXPECTED_REPORTS}

Příklad použití existujícího indikátoru:

    N{Rigf2d2Zbjp} * #{P3jJH5Tu5VC.S34ULMcHMca}

Expressions can be any kind of valid mathematical expression, as an
example:

    ( 2 * #{P3jJH5Tu5VC.S34ULMcHMca} ) / ( #{FQ2o8UBlcrS.S34ULMcHMca} - 200 ) * 25

### Indikátory programu { #webapi_program_indicators } 

To retrieve program indicators you can make a GET request to the program
indicators resource like this:

    /api/programIndicators

Program indicators can contain information collected in a program.
Indicators have an expression which can contain references to data
elements, attributes, constants and program variables. Variables which
are allowed in expressions are described in the following table.



Tabulka: proměnné Programového indikátoru

| Proměnná | Popis |
|---|---|
| #{<programstage-id\>.<dataelement-id\>} | Odkazuje na kombinaci fáze programu a id datového prvku. |
| A{<attribute-id\>} | Odkazuje na atribut trasované entity. |
| V{<variable-id\>} | Odkazuje na proměnnou programu. |
| C{<constant-id\>} | Odkazuje na konstantu. |

Syntaxe vypadá jako
    toto:

    #{<programstage-id>.<dataelement-id>} + #{<attribute-id>} + V{<varible-id>} + C{<constant-id>}

Odpovídající příklad vypadá takto:

    #{A03MvHHogjR.a3kGcGDCuk6} + A{OvY4VVhSDeJ} + V{incident_date} + C{bCqvfPR02Im}

### Výrazy { #webapi_expressions } 

Expressions are mathematical formulas which can contain references to
data elements, constants and organisation unit groups. To validate and
get the textual description of an expression, you can make a GET request
to the expressions resource:

    /api/expressions/description?expression=<expression-string>

The response follows the standard JSON web message format. The *status*
property indicates the outcome of the validation and will be "OK" if
successful and "ERROR" if failed. The *message* property will be "Valid"
if successful and provide a textual description of the reason why the
validation failed if not. The *description* provides a textual
description of the expression.

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Valid",
  "description": "Acute Flaccid Paralysis"
}
```

### Merge indicators { #webapi_indicator_merge }

The indicator merge endpoint allows you to merge a number of indicators (sources) into a target indicator.

#### Authorisation { #authorisation } 

The authority `F_INDICATOR_MERGE` is required to perform indicator merges.

#### Request { #request } 

Merge indicators with a POST request:

```
POST /api/indicators/merge
```

Užitná zátěž ve formátu JSON vypadá takto:

```json
{
  "sources": [
    "jNb63DIHuwU",
    "WAjjFMDJKcx"
  ],
  "target": "V9rfpjwHbYg",
  "deleteSources": true
}
```

Vlastnosti JSON jsou popsány v následující tabulce.

Tabulka: Sloučit pole datového obsahu

| Pole         | Požadované | Hodnota                                                                         |
|---------------|----------|-------------------------------------------------------------------------------|
| zdroje       | Ano      | Array of identifiers of the indicators to merge (the source indicators)       |
| cíl        | Ano      | Identifier of the indicator to merge the sources into (the target indicator)  |
| deleteSources | Ne       | Whether to delete the source indicators after the operation. Default is false |

The merge operation will merge the source indicators into the target indicator. One or many source indicators can be specified. Only one target should be specified.

The merge operation will transfer all source indicator metadata associations to the target indicator. 
The following metadata get updated:


| Metadata            | Vlastnictví                                   | Action taken                                                                |
|---------------------|--------------------------------------------|-----------------------------------------------------------------------------|
| IndicatorGroup      | members                                    | Source indicator removed, target indicator added                            |
| DataSet             | indikátory                                 | Source indicator removed, target indicator added                            |
| DataDimensionalItem | n/a                                        | Any linked data items with sources will be linked with the target           |
| Sekce             | indikátory                                 | Source indicator removed, target indicator added                            |
| Konfigurace       | infrastructuralIndicators (IndicatorGroup) | Source indicator removed, target indicator added                            |
| Indikátor           | numerator / denominator                    | Replace any source reference with the target reference                      |
| DataEntryForm       | htmlCode                                   | Replace any source reference with the target reference                      |
| Vizualizace       | sorting                                    | Replace any source reference with the target reference as Sorting dimension |


#### Validation { #validation } 

Platí následující omezení a chybové kódy.

Tabulka: Omezení a chybové kódy

| Chybový kód | Popis                                     |
|------------|-------------------------------------------------|
| E1540      | At least one source indicator must be specified |
| E1541      | Target indicator must be specified              |
| E1542      | Target indicator cannot be a source indicator   |
| E1543      | Source/Target indicator does not exist: `{uid}` |

#### Odpověď { #response }
##### Success { #success } 
Sample success response looks like:

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "response": {
        "mergeReport": {
            "mergeErrors": [],
            "mergeType": "INDICATOR",
            "sourcesDeleted": [
                "vQ0dGV9EDrw"
            ],
            "message": "INDICATOR merge complete"
        }
    }
}
```

Sample error response looks like:

```json
{
    "httpStatus": "Conflict",
    "httpStatusCode": 409,
    "status": "WARNING",
    "message": "One or more errors occurred, please see full details in merge report.",
    "response": {
        "mergeReport": {
            "mergeErrors": [
                {
                    "message": "At least one source indicator must be specified",
                    "errorCode": "E1540",
                    "args": []
                },
                {
                    "message": "Target indicator does not exist: `abcdefg1221`",
                    "errorCode": "E1543",
                    "args": [
                        "Target",
                        "abcdefg1221"
                    ]
                }
            ],
            "mergeType": "INDICATOR",
            "sourcesDeleted": [],
            "message": "INDICATOR merge has errors"
        }
    }
}
```

## Indicator Types { #webapi_indicator_types}

### Merge indicator types { #webapi_indicator_type_merge}

The indicator type merge endpoint allows you to merge a number of indicator types into a target indicator type.

#### Authorisation { #authorisation } 

The authority `F_INDICATOR_TYPE_MERGE` is required to perform indicator type merges.

#### Request { #request } 

Merge indicator types with a POST request:

```
POST /api/indicatorTypes/merge
```

Užitná zátěž ve formátu JSON vypadá takto:

```json
{
  "sources": [
    "jNb63DIHuwU",
    "WAjjFMDJKcx"
  ],
  "target": "V9rfpjwHbYg",
  "deleteSources": true
}
```

Vlastnosti JSON jsou popsány v následující tabulce.

Tabulka: Sloučit pole datového obsahu

| Pole         | Požadované | Hodnota                                                                                   |
|---------------|----------|-----------------------------------------------------------------------------------------|
| zdroje       | Ano      | Array of identifiers of the indicator types to merge (the source indicator types).      |
| cíl        | Ano      | Identifier of the indicator type to merge the sources into (the target indicator type). |
| deleteSources | Ne       | Whether to delete the source indicator types after the operation. Default is false.     |

The merge operation will merge the source indicator types into the target indicator type. One or many source indicator types can be specified. Only one target should be specified.

The merge operation will transfer all of the indicator metadata associations to the source indicator types over to the target indicator type.

#### Validation { #validation } 

Platí následující omezení a chybové kódy.

Tabulka: Omezení a chybové kódy

| Chybový kód | Popis                                             |
|------------|---------------------------------------------------------|
| E1530      | At least one source indicator type must be specified    |
| E1531      | Target indicator type must be specified                 |
| E1532      | Target indicator type cannot be a source indicator type |
| E1533      | Source/Target indicator type does not exist: `{uid}`    |

#### Odpověď { #response }
##### Success { #success } 
Sample success response looks like:

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "response": {
        "mergeReport": {
            "mergeErrors": [],
            "mergeType": "INDICATOR_TYPE",
            "sourcesDeleted": [
                "vQ0dGV9EDrw"
            ],
            "message": "INDICATOR_TYPE merge complete"
        }
    }
}
```

Sample error response looks like:

```json
{
    "httpStatus": "Conflict",
    "httpStatusCode": 409,
    "status": "WARNING",
    "message": "One or more errors occurred, please see full details in merge report.",
    "response": {
        "mergeReport": {
            "mergeErrors": [
                {
                    "message": "At least one source indicator type must be specified",
                    "errorCode": "E1530",
                    "args": []
                },
                {
                    "message": "Target indicator type does not exist: `abcdefg1221`",
                    "errorCode": "E1533",
                    "args": [
                        "Target",
                        "abcdefg1221"
                    ]
                }
            ],
            "mergeType": "INDICATOR_TYPE",
            "sourcesDeleted": [],
            "message": "INDICATOR_TYPE merge has errors"
        }
    }
}
```

## Organizační jednotky { #webapi_organisation_units } 

The *organisationUnits* resource follows the standard conventions as
other metadata resources in DHIS2. This resource supports some
additional query parameters.

### Získejte seznam organizačních jednotek { #webapi_list_of_organisation_units } 

Chcete-li získat seznam organizačních jednotek, můžete použít následující zdroj.

    /api/33/organisationUnits

Tabulka: Parametry dotazu organizačních jednotek

| Parametr dotazu | Možnosti | Popis |
|---|---|---|
| userOnly | false &#124; true | Sběr dat Organizační jednotky spojené pouze s aktuálním uživatelem. |
| userDataViewOnly | false &#124; true | Zobrazení dat Organizační jednotky spojené pouze s aktuálním uživatelem. |
| userDataViewFallback | false &#124; true | Organizační jednotky zobrazení dat přidružené k aktuálnímu uživateli pouze se záložními organizačními jednotkami pro sběr dat. |
| query | řetězec | Dotaz na vlastnosti názvu, kódu a ID. |
| level | celé číslo | Organizační jednotky na dané úrovni v hierarchii. |
| maxLevel | celé číslo | Organizační jednotky na dané maximální úrovni nebo úrovních výše v hierarchii. |
| withinUserHierarchy | false &#124; true | Omezuje vyhledávání a načítání na organizační jednotky, které jsou v rámci rozsahu sběru dat uživatelů. |
| withinUserSearchHierarchy | false &#124; true | Omezuje vyhledávání a načítání na organizační jednotky, které jsou v rozsahu vyhledávání aktuálních uživatelů. Poznámka: "v rámciUserHierarchy", pokud je pravda, má vyšší prioritu. |
| memberCollection | řetězec | Pro zobrazení počtu členů v rámci kolekce odkazuje na název kolekce přidružené k organizačním jednotkám. |
| memberObject | UID | Pro zobrazení počtu členů v rámci kolekce odkazuje na identifikátor objektového člena kolekce. |

### Get organisation unit with sub-hierarchy { #webapi_organisation_units_with_sub_hierarchy } 

Chcete-li získat organizační jednotku včetně organizačních jednotek v její podhierarchii, můžete použít následující zdroj.

    /api/33/organisationUnits/{id}

Tabulka: Parametry organizační jednotky

| Parametr dotazu | Možnosti | Popis |
|---|---|---|
| includeChildren | false &#124; true | Zahrňte bezprostřední podřazené k zadané organizační jednotce, tj. Jednotky na bezprostřední úrovni níže v subhierarchii. |
| includeDescendants | false &#124; true | Zahrnout všechny podřízené objekty uvedené organizační jednotky, tj. Všechny jednotky v podhierarchii. |
| includeAncestors | false &#124; true | Zahrnout všechny nadřazené zadané organizační jednotky. |
| level | celé číslo | Zahrnout podřazené zadané organizační jednotky na dané úrovni podhierarchie. To se vztahuje k organizační jednotce, počínaje 1 pro úroveň bezprostředně pod organizační jednotkou. |

### Get organisation units by category option  { #webapi_organisation_units_by_category_options }

Účelově vytvořený koncový bod pro načtení přidružení mezi možnostmi kategorií a organizačními jednotkami. Tento koncový bod je preferovaným způsobem načítání přidružení organizačních jednotek programu.

    /api/33/categoryOptions/orgUnits?categoryOptions={categoryOptionIdA},{categoryOptionIdB}

odpovědi budou mít následující formát:

```json
{
  "<categoryOptionIdA>": [
    "<orgUnitUid>",
    "<orgUnitUid>"
  ],
  "<categoryOptionIdB>": [
    "<orgUnitUid>",
    "<orgUnitUid>"
  ],
  "<categoryOptionIdC>": []
}
```

Možnosti kategorií, které jsou přístupné všem organizačním jednotkám, jsou vráceny s prázdným polem (`[]`) organizačních jednotek.

### Get organisation units by programs { #webapi_organisation_units_by_programs } 

Účelově vytvořený koncový bod pro načtení přidružení mezi programy a organizačními jednotkami. Tento koncový bod je preferovaným způsobem načítání přidružení organizačních jednotek programu.

    /api/33/programs/orgUnits?programs={programIdA},{programIdB}

odpovědi budou mít následující formát:

```json
{
  "<programIdA>": [
    "<orgUnitUid>",
    "<orgUnitUid>"
  ],
  "<programIdB>": [
    "<orgUnitUid>",
    "<orgUnitUid>"
  ],
  "<programIdC>": []
}
```

Programy, které jsou přístupné všem organizačním jednotkám, jsou vráceny s prázdným polem (`[]`) organizačních jednotek.

### Rozdělená organizační jednotka { #webapi_organisation_unit_split }

The organisation unit split endpoint allows you to split organisation units into a number of target organisation units. 

#### Request { #request } 

Rozdělení organizačních jednotek pomocí požadavku POST:

```
POST /api/organisationUnits/split
```

Užitná zátěž ve formátu JSON vypadá takto:

```json
{
  "source": "rspjJHg4WY1",
  "targets": [
    "HT0w9YLMLyn",
    "rEpnzuNpRKM"
  ],
  "primaryTarget": "HT0w9YLMLyn",
  "deleteSource": true
}
```

Vlastnosti JSON jsou popsány v následující tabulce.

Tabulka: Rozdělit pole datového obsahu

| Pole         | Požadované | Hodnota |
| ------------- | -------- |------ |
| zdroj        | Ano      | Identifikátor organizační jednotky k rozdělení (zdrojová organizační jednotka). |
| cíle       | Ano      | Pole identifikátorů organizačních jednotek, na které se má zdroj rozdělit (cílové organizační jednotky). |
| primaryTarget | Ne       | Identifikátor organizační jednotky, do které se přenášejí souhrnná data, události a sledované entity spojené se zdrojem. Pokud není zadán, použije se první cíl. |
| deleteSource  | Ne       | Zda se má po operaci odstranit zdrojová organizační jednotka. Výchozí hodnota je `true`. |

Operace rozdělení rozdělí zdrojovou organizační jednotku na cílové organizační jednotky. Před rozdělením se doporučuje nejprve vytvořit nové cílové organizační jednotky a minimálně zajistit, že pro cílové organizační jednotky neexistují žádná agregovaná data. Lze zadat libovolný počet cílových organizačních jednotek.

Operace rozdělení přenese všechna přidružení metadat zdrojové organizační jednotky do cílových organizačních jednotek. To zahrnuje datové sady, programy, skupiny organizačních jednotek, možnosti kategorií, uživatele, vizualizace, mapy a zprávy o událostech.

Operace přenese všechny datové záznamy zdrojové organizační jednotky do organizační jednotky zadané jako primární cíl, nebo pokud není specifikována, do první zadané cílové organizační jednotky. To zahrnuje agregované hodnoty dat, záznamy o schválení dat, události, sledované entity a další.

#### Validation { #validation } 

Platí následující omezení a chybové kódy.

Tabulka: Omezení a chybové kódy

| Chybový kód | Popis                                     |
| ---------- | ----------------------------------------------- |
| E1510      | Musí být uvedena zdrojová organizační jednotka               |
| E1511      | Musí být zadány alespoň dvě cílové organizační jednotky |
| E1512      | Zdrojová organizační jednotka nemůže být cílová organizační jednotka     |
| E1513      | Primární cíl musí být specifikován                |
| E1514      | Primárním cílem musí být cílová organizační jednotka        |
| E1515      | Cílová organizační jednotka neexistuje                  |

### Sloučit organizační jednotky { #webapi_organisation_unit_merge}

Koncový bod sloučení organizačních jednotek vám umožňuje sloučit několik organizačních jednotek do cílové organizační jednotky.

#### Request { #request } 

Sloučení organizačních jednotek s požadavkem POST:

```
POST /api/organisationUnits/merge
```

Užitná zátěž ve formátu JSON vypadá takto:

```json
{
  "sources": [
    "jNb63DIHuwU",
    "WAjjFMDJKcx"
  ],
  "target": "V9rfpjwHbYg",
  "dataValueMergeStrategy": "LAST_UPDATED",
  "dataApprovalMergeStrategy": "LAST_UPDATED",
  "deleteSources": true
}
```

Vlastnosti JSON jsou popsány v následující tabulce.

Tabulka: Sloučit pole datového obsahu

| Pole                     | Požadované | Hodnota |
| ------------------------- | -------- | ----- |
| zdroje                   | Ano      | Pole identifikátorů organizačních jednotek ke sloučení (zdrojové organizační jednotky). |
| cíl                    | Ano      | Identifikátor organizační jednotky, do které se mají zdroje sloučit (cílová organizační jednotka). |
| dataValueMergeStrategy    | Ne       | Strategie pro slučování datových hodnot. Možnosti: `LAST_UPDATED` (výchozí), `DISCARD`. |
| dataApprovalMergeStrategy | Ne       | Strategie pro slučování záznamů schvalování dat. Možnosti: `LAST_UPDATED` (výchozí), `DISCARD`. |
| deleteSources             | Ne       | Zda po operaci odstranit zdrojové organizační jednotky. Výchozí hodnota je true. |

Operace sloučení sloučí zdrojové organizační jednotky do cílové organizační jednotky. Před provedením sloučení se doporučuje nejprve vytvořit novou cílovou organizační jednotku a minimálně zajistit, že pro cílovou organizační jednotku neexistují žádná agregovaná data. Lze zadat libovolný počet zdrojových organizačních jednotek.

Operace sloučení přenese všechna přidružení metadat zdrojových organizačních jednotek do cílové organizační jednotky. To zahrnuje datové sady, programy, skupiny organizačních jednotek, možnosti kategorií, uživatele, vizualizace, mapy a zprávy o událostech. Operace také přenese všechna data událostí a sledování, jako jsou události, registrace, historie vlastnictví, vlastnictví programu a sledované entity, do cílové organizační jednotky.

Zadaná strategie slučování datových hodnot definuje, jak se zachází s datovými hodnotami. U strategie `LAST_UPDATED` se datové hodnoty pro všechny zdrojové organizační jednotky přenesou do cílové organizační jednotky a v situaci, kdy pro stejné parametry existují datové hodnoty, bude použita poslední aktualizovaná nebo vytvořená datová hodnota. To se provádí, aby se zabránilo duplicitě dat. U strategie `DISCARD` se datové hodnoty nepřenesou do cílové organizační jednotky a jednoduše se smažou. Zadaná strategie slučování schvalování dat definuje, jak se zachází se záznamy schvalování dat, a řídí se stejnou logikou jako hodnoty dat.

#### Validation { #validation } 

Platí následující omezení a chybové kódy.

Tabulka: Omezení a chybové kódy

| Chybový kód | Popis                                     |
| ---------- | ----------------------------------------------- |
| E1500      | Musí být zadány alespoň dvě zdrojové organizační jednotky |
| E1501      | Musí být zadána cílová organizační jednotka               |
| E1502      | Cílová organizační jednotka nemůže být zdrojovou organizační jednotkou     |
| E1503      | Zdrojová organizační jednotka neexistuje                  |

## Datové sady { #webapi_data_sets } 

The *dataSets* resource follows the standard conventions as other
metadata resources in DHIS2. This resource supports some additional
query parameters.

    /api/33/dataSets

Chcete-li načíst verzi datové sady, můžete vystavit požadavek GET:

    GET /api/33/dataSets/<uid>/version

To bump (increase by one) the version of a data set you can issue a POST
request:

    POST /api/33/dataSets/<uid>/version

### Data set notification template { #webapi_dataset_notifications } 

The *dataset notification templates* resource follows the standard
conventions as other metadata resources in DHIS2.

    GET /api/33/dataSetNotficationTemplates

Chcete-li načíst šablonu oznámení sady dat, můžete vystavit požadavek GET:

    GET /api/33/dataSetNotficationTemplates/<uid>

Chcete-li přidat šablonu oznámení sady dat, můžete vystavit požadavek POST:

    POST /api/33/dataSetNotficationTemplates

Chcete-li odstranit šablonu oznámení datové sady, můžete zadat požadavek DELETE:

    DELETE /api/33/dataSetNotficationTemplates/<uid>

Ukázka datového obsahu JSON je uvedena níže:

```json
{
  "name": "dataSetNotificationTemplate1",
  "dataSetNotificationTrigger": "DATA_SET_COMPLETION",
  "relativeScheduledDays": 0,
  "notificationRecipient": "ORGANISATION_UNIT_CONTACT",
  "dataSets": [{
    "id": "eZDhcZi6FLP"
  }],
  "deliveryChannels": ["SMS","EMAIL"],
  "subjectTemplate": "V{data_set_name}",
  "messageTemplate": "V{data_set_name}V{registration_period}",
  "sendStrategy": "SINGLE_NOTIFICATION"
}

```

`notificationRecipient` can be one of:
- `USER_GROUP` for internal messages
- `ORGANISATION_UNIT_CONTACT` for external messages


## Naplněné úrovně organizační jednotky { #webapi_filled_organisation_unit_levels } 

The *filledOrganisationUnitLevels* resource provides an ordered list of
organisation unit levels, where generated levels are injected into the
list to fill positions for which it does not exist a persisted level.

    GET /api/33/filledOrganisationUnitLevels

To set the organisation unit levels you can issue a POST request with a
JSON payload and content type `application/json` looking like this:

```json
{
  "organisationUnitLevels": [{
    "name": "National",
    "level": 1,
    "offlineLevels": 3
  }, {
    "name": "District",
    "level": 2
  }, {
    "name": "Chiefdom",
    "level": 3
  }, {
    "name": "Facility",
    "level": 4
  }]
}
```

## Prediktory { #webapi_predictors } 

A predictor allows you to generate data values based on an expression.
This can be used for example to generate targets, thresholds,
or estimated values.

To retrieve predictors you can make a GET request to the predictors
resource like this:

    /api/predictors

### Vytvoření prediktoru { #webapi_create_predictor } 

You can create a predictor with a POST request to the predictors
resource:

    POST /api/predictors

Ukázkové užitečné zatížení vypadá takto:

```json
{
  "id": "AG10KUJCrRk",
  "name": "Malaria Outbreak Threshold Predictor",
  "shortName": "Malaria Outbreak Predictor",
  "description": "Computes the threshold for potential malaria outbreaks based on the mean plus 1.5x the std dev",
  "output": {
    "id": "nXJJZNVAy0Y"
  },
  "generator": {
    "expression": "AVG(#{r6nrJANOqMw})+1.5*STDDEV(#{r6nrJANOqMw})",
    "description": "Maximum normal malaria case count",
    "missingValueStrategy": "NEVER_SKIP",
    "slidingWindow": false
  },
  "periodType": "Monthly",
  "sequentialSampleCount": 4,
  "sequentialSkipCount": 1,
  "annualSampleCount": 3,
  "organisationUnitLevels": [4]
}
```

The output element refers to the identifier of the data element for
which to saved predicted data values. The generator element refers to the
expression to use when calculating the predicted values.

### Výrazy prediktoru { #webapi_predictor_expressions } 

A predictor always has a generator expression that describes how the
predicted value is calculated. A predictor may also have a skip test
expression returning a boolean value. When the skip test expression is
present, it is evaluated in each of the sampled periods to tell whether
values from that period should be skipped.

The following variables may be used in either a generator expression
or a skip test expression:

| Proměnná    | Objekt     | Popis |
| ----------- | ---------- | ----------- |
| #{<dataelement-id>} | Agregovaný datový prvek | Odkazuje na celkovou hodnotu agregovaného datového prvku ve všech kombinacích možností kategorií. |
| #{<dataelement-id>.<categoryoptcombo-id> | Operand datového prvku | Odkazuje na kombinaci agregovaného datového prvku a kombinace možnosti kategorie. |
| D{<program-id>.<dataelement-id>} | Datový prvek programu | Odkazuje na hodnotu datového prvku trasovače v programu. |
| A{<program-id>.<attribute-id>} | Atribut trasované entity programu | Odkazuje na hodnotu atributu trasované entity v rámci programu. |
| I{<program-indicator-id>} | Indikátor programu | Odkazuje na hodnotu indikátoru programu. |
| R{<dataset-id>.<metric>} | četnost hlášení | Odkazuje na metriku rychlosti vykazování. Metrika může být REPORTING_RATE, REPORTING_RATE_ON_TIME, ACTUAL_REPORTS, ACTUAL_REPORTS_ON_TIME, EXPECTED_REPORTS. |
| C{<constant-id>} | Konstantní | Odkazuje na konstantní hodnotu. |
| OUG{<orgunitgroup-id>} | Skupina organizační jednotky | Odkazuje na počet organizačních jednotek ve skupině organizačních jednotek. |
| [dny] | Počet dní | Počet dní v aktuálním období. |

### Generování předpokládaných hodnot { #webapi_generating_predicted_values } 

To run all predictors (generating predicted values) you can make a POST
request to the run resource:

    POST /api/predictors/run

To run a single predictor you can make a POST request to the run
resource for a predictor:

    POST /api/predictors/AG10KUJCrRk/run

## Pravidla programu { #webapi_program_rules } 

This section is about sending and reading program rules, and explains
the program rules data model. The program rules give functionality to
configure dynamic behaviour in the programs in DHIS2.

### Model pravidla programu { #webapi_program_rule_model } 

The program rules data model consists of programRuleVariables,
programRules and programRuleActions. The programRule contains an
expression - when this expression is true, the child programRuleActions
is triggered. The programRuleVariables is used to address data elements,
tracked entity data values and other data values needed to run the
expressions. All programRules in a program share the same library of
programRuleVariables, and one programRuleVariable can be used in several
programRules' expressions.

![](resources/images/program_rules/program-rule-model.jpg)

#### Podrobnosti modelu modelu programu { #program-rule-model-details } 

The following table gives a detailed overview over the programRule
model.

Tabulka: programRule

| název | popis | Povinný |
|---|---|---|
| program | Program, ve kterém se programRule provádí. | Povinný |
| název | Název, pod kterým se programové pravidlo zobrazí v konfigurátorech dhis2. Není viditelný pro koncového uživatele programu. | Povinný |
| popis | Popis programového pravidla může být použit konfigurátory k popisu pravidla. Není viditelný pro koncového uživatele programu. | Povinný |
| programStage | Je-li pro programové pravidlo nastaven programStage, bude pravidlo vyhodnoceno pouze v zadané fázi programu. | volitelný |
| condition | Výraz, který je třeba vyhodnotit jako true, aby programové pravidlo spustilo své podřízené akce. Výraz je zapsán pomocí operátorů, volání funkcí, pevně zakódovaných hodnot, konstant a proměnných programových pravidel. `d2:hasValue('hemoglobin') && #{hemoglobin} <= 7 `| Povinný |
| přednost | Priorita spuštění pravidla v případech, kdy na pořadí pravidel záleží. Ve většině případů pravidla nezávisí na spuštění před nebo po jiných pravidlech a v těchto případech lze prioritu vynechat. Pokud není nastavena žádná priorita, pravidlo se spustí po každém pravidle, které má definovanou prioritu. Pokud je nastavena priorita (celé číslo), bude pravidlo s nejnižší prioritou spuštěno před pravidly s vyšší prioritou. | volitelný |

#### Podrobnosti o akčním modelu pravidla programu { #program-rule-action-model-details } 

The following table gives a detailed overview over the programRuleAction
model.

Tabulka: programRuleAction

| název | popis | Povinný |
|---|---|---|
| programRule | ProgramRule, které je nadřazeným této akce. | Povinný |
| programRule- ActionType | The type of action that is to be performed.<br>  * `DISPLAYTEXT` - Displays a text in a given widget.<br> * `DISPLAYKEYVALUEPAIR` - Displays a key and value pair(like a program indicator) in a given widget.<br> * `HIDEFIELD` - Hide a specified dataElement or trackedEntityAttribute.<br>    -         *content* - if defined, the text in *content* will be displayed to the end user in the instance where a value is previously entered into a field that is now about to be hidden (and therefore blanked). If *content* is not defined, a standard message will be shown to the user in this instance.<br>   -         *dataElement* - if defined, the HIDEFIELD action will hide this dataElement when the rule is effective.<br>   -         *trackedEntityDataValue* - if defined, the HIDEFIELD action will hide this trackedEntityDataValue when the rule is effective.<br>  * `HIDESECTION` - Hide a specified section.<br>    -         *programStageSection* - must be defined. This is the programStageSection that will be hidden in case the parent rule is effective.<br>  * `ASSIGN` - Assign a dataElement a value(help the user calculate something or fill in an obvious value somewhere)<br>    -         *content* - if defined, the value in *data* is assigned to this variable. If content id defined, and thus a variable is assigned for use in other rules, it is important to also assign a *programRule.priority* to make sure the rule with an ASSIGN action runs before the rule that will in turn evaluate the assigned variable.<br>   -         *data* - must be defined, data forms an expression that is evaluated and assigned to either a variable(#{myVariable}), a dataElement, or both.<br>   -         *dataElement* - if defined, the value in *data* is assigned to this data element.<br>  Either the content or dataElement must be defined for the ASSIGN action to be effective.<br> * `SHOWWARNING` - Show a warning to the user, not blocking the user from completing the event or registration.<br>    -         *content* - if defined, content is a static part that is displayed at the end of the error message.<br>   -         *data* - if defined, data forms an expression that is evaluated and added to the end of the warning message.<br>   -         *dataElement* - if defined, the warning message is displayed next to this data element.<br>   -         *trackedEntityAttribute* - if defined, the warning message is displayed next to this tracked entity attribute.<br>  Either dataElement or trackedEntityAttribute must be specified.<br> * `SHOWERROR` - Show an error to the user, blocking the user from completing the event or registration.<br>    -         *content* - if defined, content is a static part that is displayed in the start of the error message.<br>   -         *data* - if defined, data forms an expression that is evaluated and added to the end of the error message.<br>   -         *dataElement* - if defined, the error message is linked to this data element.<br>   -         *trackedEntityAttribute* - if defined, the error message is linked to this tracked entity attribute.<br>  Either dataElement or trackedEntityAttribute must be specified.<br> * `WARNINGONCOMPLETE` - Show a warning to the user on the "Complete form" dialog, but allowing the user to complete the event.<br>    -         *content* - if defined, content is a static part that is displayed at the end of the error message.<br>   -         *data* - if defined, data forms an expression that is evaluated and added to the end of the warning message.<br>   -         *dataElement* - if defined, the warning message prefixed with the name/formName of the data element.<br>  * `ERRORONCOMPLETE` - Show an error to the user on in a modal window when the user tries to complete the event. The user is prevented from completing the event.<br>    -         *content* - if defined, content is a static part that is displayed in the start of the error message.<br>   -         *data* - if defined, data forms an expression that is evaluated and added to the end of the error message.<br>   -         *dataElement* - if defined, the error message is linked to this data element.<br>  * `CREATEEVENT` - Create an event within the same enrollment.<br>    -         *content*<br>   -         *data* - if defined, contains data values to assign the created event. The format is <uid\>:<data value\>. Where several values is specified, these are separated with comma.<br> AcMrnleqHqc:100,AqK1IHqCkEE:'Polyhydramnios'   -         *programStage* - must be defined, and designates the program stage that the rule shall create an event of.<br>  * `SETMANDATORYFIELD` - Set a field to be mandatory.<br>    -         *dataElement* - if defined, this data element will be set to be mandatory in the data entry form.<br>   -         *trackedEntityAttribute* - if defined, this tracked entity attribute will be set to mandatory in the registration form or profile.<br>  * `SENDMESSAGE` - To send message at completion of event/enrollment or at data value update.<br>    -         *messageTemplate* - if defined, this template will be delivered either as SMS or EMAIL depending upon DeliveryChannel value in message template.<br>  * `SCHEDULEMESSAGE` - To schedule message at completion of event/enrollment or at data value update.<br>    -         *messageTemplate* - if defined, this template will be delivered either as SMS or EMAIL depending upon DeliveryChannel value in message template.<br>   -         *Date to send message* - Expression which is going to be used for evaluation of scheduled date. This expression should result in Date, any other resultant will be discarded and notification will not get scheduled. | Povinný |
| umístění | Používá se pro actionType DISPLAYKEYVALUEPAIR a DISPLAYTEXT k určení, ve kterém widgetu se má zobrazit text nebo pár klíč-hodnota. Povinné pro DISPLAYKEYVALUEPAIR a DISPLAYTEXT. | Viz popis |
| obsah | Používá se pro uživatelské zprávy v různých akcích. Podrobné vysvětlení, jak se používá v jednotlivých typech akcí, najdete v přehledu actionType. Povinné pro SHOWWARNING, SHOWERROR, WARNINGONCOMPLETE, ERRORONCOMPLETE, DISPLAYTEXT a DISPLAYKEYVALUEPAIR. Volitelné pro HIDEFIELD a ASSIGN. | Viz popis |
| data | Používá se pro výrazy v různých akcích. Podrobné vysvětlení, jak se používá v jednotlivých typech akcí, najdete v přehledu actionType. Povinné pro ASSIGN. Volitelné pro SHOWVARNING, SHOWERROR, WARNINGONCOMPLETE, ERRORONCOMPLETE, DISPLAYTEXT, CREATEEVENT a DISPLAYKEYVALUEPAIR | Viz popis |
| dataElement | Používá se k propojení akcí pravidel s dataElements. Podrobné vysvětlení, jak se používá v jednotlivých typech akcí, najdete v přehledu actionType. Volitelné pro SHOWWARNING, SHOWERROR, WARNINGONCOMPLETE, ERRORONCOMPLETE, ASSIGN a HIDEFIELD | Viz popis |
| trackedEntity- Atribut | Používá se k propojení akcí pravidel s trackedEntityAttributes. Podrobné vysvětlení, jak se používá v jednotlivých typech akcí, najdete v přehledu actionType. Volitelně pro SHOWVARNING, SHOWERROR a HIDEFIELD. | Viz popis |
| možnost | Používá se k propojení akcí pravidel s možnostmi. Podrobné vysvětlení, jak se používá v jednotlivých typech akcí, najdete v přehledu actionType. Volitelné pro HIDEOPTION | Viz popis |
| optionGroup | Používá se k propojení akcí pravidel s optionGroups. Podrobné vysvětlení, jak se používá v jednotlivých typech akcí, najdete v přehledu actionType. Povinné pro SHOWOPTIONGROUP, HIDEOPTIONGROUP. | Viz popis |
| programStage | Používá se pouze pro akce pravidla CREATEEVENT. Povinné pro CREATEEEVENT. | Viz popis |
| programStage- Sekce | Používá se pouze pro akce pravidla HIDESECTION. Povinné pro HIDESECTION | Viz popis |

##### ProgramRuleAction Validation { #programruleaction-validation } 
There are certain validations added to ProgramRuleAction model in 2.37. Main purpose was to keep user from creating erroneous ProgramRules in order to keep the database consistent. These validations depends on program rule action type. Each action type has its own respective validation. 

Tabulka: Ověření ProgramRuleAction

| název | ověření ověření existence ID |
|---|---|
|SENDMESSAGE| ID šablony oznámení |
|SCHEDULEMESSAGE| ID šablony oznámení |
|HIDESECTION| ID sekce ProgramStage |
|HIDEPROGRAMSTAGE| ProgramStage id |
|HIDEFIELD| ID DataElement nebo TrackedEntityAttribute |
|HIDEOPTION| Option id |
|HIDEOPTIONGROUP| ID skupiny možností |
|SHOWOPTIONGROUP| ID skupiny možností |
|SETMANDATORYFIELD| ID DataElement nebo TrackedEntityAttribute |
|SHOWERROR| Vždy platné |
|SHOWWARNING| Vždy platné |
|DISPLAYTEXT| ID DataElement nebo TrackedEntityAttribute |
|DISPLAYKEYVALUEPAIR||
|ASSIGN| ID DataElement nebo TrackedEntityAttribute |
|WARNINGONCOMPLETE| ID DataElement nebo TrackedEntityAttribute |
|ERRORONCOMPLETE| ID DataElement nebo TrackedEntityAttribute |

Apart from above validations, `data` field in program rule action which normally contains expression can also be evaluated using below api endpoint.

    POST /api/programRuleActions/data/expression/description?programId=<uid>


```json
{
  "condition": "1 + 1"
}
```

#### Podrobnosti o variabilním modelu pravidla programu { #program-rule-variable-model-details } 

Následující tabulka poskytuje podrobný přehled 
o modelu programRuleVariable.

Tabulka: programRuleVariable

| název | popis | Povinný |
|---|---|---|
| název | název pro programRuleVariable - tento název se používá ve výrazech. #{myVariable} \> 5 | Povinný |
| sourceType | Defines how this variable is populated with data from the enrollment and events. <br> * DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE - In tracker capture, gets the newest value that exists for a data element, within the events of a given program stage in the current enrollment. In event capture, gets the newest value among the 10 newest events on the organisation unit.<br> * DATAELEMENT_NEWEST_EVENT_PROGRAM - In tracker capture, get the newest value that exists for a data element across the whole enrollment. In event capture, gets the newest value among the 10 newest events on the organisation unit.<br> * DATAELEMENT_CURRENT_EVENT - Gets the value of the given data element in the current event only.<br> * DATAELEMENT_PREVIOUS_EVENT - In tracker capture, gets the newest value that exists among events in the program that precedes the current event. In event capture, gets the newvest value among the 10 preceeding events registered on the organisation unit.<br> * CALCULATED_VALUE - Used to reserve a variable name that will be assigned by a ASSIGN program rule action<br> * TEI_ATTRIBUTE - Gets the value of a given tracked entity attribute | Povinný |
| valueType | Parametr valueType definuje typ hodnoty, kterou může tato proměnná ProgramRuleVariable obsahovat. Jeho hodnota je závislá na parametru sourceType. Pokud je zdrojem DataElement nebo TrackedEntityAttribute <br>, pak valueType bude odvozena z valueType zdroje. Když je sourceType CALCULATED_VALUE, měl by hodnotu valueType zadat uživatel, jinak bude výchozí <br> na ValueType.TEXT| Povinný
| dataElement | Used for linking the programRuleVariable to a dataElement. Compulsory for all sourceTypes that starts with DATAELEMENT_. | Viz popis |
| trackedEntity- Atribut | Používá se k propojení programRuleVariable s trackedEntityAttribute. Povinné pro sourceType TEI_ATTRIBUTE. | Viz popis |
| useCodeFor- OptionSet | Je-li zaškrtnuto, proměnná bude naplněna kódem – nikoli názvem – z libovolné propojené sady možností. Výchozí není zaškrtnuto, což znamená, že název volby je vyplněn. ||
| programStage | Používá se k určení konkrétní fáze programu, ze které se má načíst hodnota programRuleVariable. Povinné pro DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE. | Viz popis |

### Vytváření pravidel programu { #webapi_creating_program_rules } 

- K provádění hrubých operací je v rozhraní API k dispozici zdroj `programRules`.

Chcete-li načíst seznam programRules, můžete provést požadavek GET takto:

    /api/programRules

Chcete-li načíst jeden programRule, můžete provést požadavek GET takto:

    /api/programRules/<program_rule_uid>

Chcete-li uložit / přidat jeden programRule, můžete provést požadavek POST takto:

    /api/programRules/<program_rule_uid>

Chcete-li aktualizovat jeden programRule, můžete provést požadavek PUT takto:

    /api/programRules/<program_rule_uid>

Chcete-li odstranit jeden programRule, můžete provést požadavek VYMAZAT takto:

    /api/programRules/<program_rule_uid>

Chcete-li získat popis podmínky programRule, můžete použít POST a zadat řetězec podmínky v těle POST.

    /api/programRules/condition/description?<program_rule_uid>

## formuláře { #webapi_forms } 

To retrieve information about a form (which corresponds to a data set
and its sections) you can interact with the `form` resource. The form
response is accessible as XML and JSON and will provide information
about each section (group) in the form as well as each field in the
sections, including labels and identifiers. By supplying period and
organisation unit identifiers the form response will be populated with
data values.

Tabulka: Parametry dotazu formuláře

| Parametr | Možnost | Popis |
|---|---|---|
| pe | Období ISO | Období, pro které se mají vyplnit hodnoty dat formuláře. |
| ou | UID | Organizační jednotka, pro kterou se mají vyplnit hodnoty dat formuláře. |
| metaData | false &#124; true | Zda zahrnout metadata o každém datovém prvku částí formuláře. |

Chcete-li načíst formulář pro datovou sadu, můžete provést požadavek GET takto:

    /api/dataSets/<dataset-id>/form.json

Načíst formulář pro datovou sadu s identifikátorem "BfMAe6Itzgt" v XML:

    /api/dataSets/BfMAe6Itzgt/form

Načtení formuláře včetně metadat v JSON:

    /api/dataSets/BfMAe6Itzgt/form.json?metaData=true

To retrieve the form filled with data values for a specific period and
organisation unit in XML:

    /api/dataSets/BfMAe6Itzgt/form.xml?ou=DiszpKrYNg8&pe=201401

When it comes to custom data entry forms, this resource also allows for
creating such forms directly for a data set. This can be done through a
POST or PUT request with content type text/html where the payload is the
custom form markup such as:

```bash
curl -d @form.html "localhost/api/dataSets/BfMAe6Itzgt/form"
  -H "Content-Type:text/html" -u admin:district -X PUT
```

## Dokumenty { #webapi_documents } 

Odkazy na soubory lze uložit pomocí zdroje dokumentu.



Tabulka: Pole dokumentu

| Název pole | Popis |
|---|---|
| název | jedinečný název dokumentu |
| externí | příznak identifikující umístění dokumentu. TRUE pro externí soubory, FALSE pro ty interní  |
| url | umístění souboru. URL pro externí soubory. ID zdroje souboru pro interní zdroje (viz [Zdroje souboru](#webapi_file_resources)) |

Požadavek GET na koncový bod dokumentů vrátí všechny dokumenty:

    /api/documents

Požadavek POST na koncový bod dokumentů vytvoří nový dokument:

```bash
curl -X POST -d @document.json -H "Content-type: application/json"
  "http://dhis.domain/api/documents"
```

```json
{
  "name": "dhis home",
  "external": true,
  "url": "https://www.dhis2.org"
}
```

A GET request with the id of a document appended will return information
about the document. A PUT request to the same endpoint will update the
fields of the document:

    /api/documents/<documentId>

Appending */data* to the GET request will return the actual file content
of the document:

    /api/documents/<documentId>/data

## Import metadat CSV { #webapi_csv_metadata_import } 

DHIS2 podporuje import metadat ve formátu CSV, jako jsou datové prvky, organizační jednotky a ověřovací pravidla. Vlastnosti různých objektů metadat jsou identifikovány na základě pořadí sloupců / indexu sloupců (podrobnosti viz níže). Můžete vynechat nepožadované vlastnosti / sloupce objektu, ale protože pořadí sloupců je významné, musí být zahrnut prázdný sloupec. Jinými slovy, pokud byste chtěli určit vlastnosti / sloupce, které se objeví pozdě v pořadí sloupců, ale neurčit určité sloupce, které se objeví brzy v pořadí, můžete pro ně zahrnout prázdné / nevyplněné sloupce.

První řádek souboru CSV je považován za záhlaví a je během importu ignorován. Znak _comma_ by měl být použit jako oddělovač textu. Text, který obsahuje čárky, musí být uveden v _dvojitých uvozovkách_.

Chcete-li nahrát metadata ve formátu CSV, můžete odeslat požadavek POST do koncového bodu metadat:

    POST /api/metadata?classKey=CLASS-KEY

Jsou podporovány následující typy objektů. Parametr dotazu `classKey` je povinný a je uveden vedle každého typu objektu v tabulce níže.

Tabulka: Typy objektů a klíče

| Typ objektu | Klíč třídy |
|---|---|
| Datové prvky | DATA_ELEMENT |
| Skupiny datových prvků | DATA_ELEMENT_GROUP |
| Možnosti kategorie | CATEGORY_OPTION |
| Skupiny možností kategorie | CATEGORY_OPTION_GROUP |
| Organizační jednotky | ORGANISATION_UNIT |
| Skupiny organizačních jednotek | ORGANISATION_UNIT_GROUP |
| Pravidla ověřování | VALIDATION_RULE |
| Sady možností | OPTION_SET |
| Překlady | PŘEKLAD |

> **Tip**
>
> Pokud používáte *curl*, měla by být použita možnost `--data-binary`, protože zachovává konce řádků a nové řádky, což je pro data CSV zásadní.

Jako příklad můžete k nahrání souboru datových prvků ve formátu CSV pomocí `curl` použít následující příkaz:

```bash
curl --data-binary @data_elements.csv "http://localhost/api/metadata?classKey=DATA_ELEMENT"
  -H "Content-Type:application/csv" -u admin:district
```

Formáty aktuálně podporovaných typů objektů pro import CSV jsou uvedeny v následujících částech.

### Datové prvky { #webapi_csv_data_elements } 

Tabulka: Formát CSV datových prvků

| Index | Sloupec | Požadované | Hodnota (výchozí první) | Popis |
|---|---|---|---|---|
| 1 | Název | Ano || Název. Max. 230 znaků Unikátní. |
| 2 | UID | Ne | UID | Stabilní identifikátor. Přesně 11 alfanumerických znaků, začínajících písmenem. Pokud není uvedeno, bude generováno systémem. |
| 3 | Kód | Ne || Stabilní kód. Max. 50 znaků |
| 4 | Krátký název | Ne | 50 prvních znaků názvu | Pokud není uvedeno, vrátí se na prvních 50 znaků názvu. Max. 50 znaků Unikátní. |
| 5 | Popis | Ne || Libovolný textový popisek. |
| 6 | Název formuláře | Ne || Max. 230 znaků |
| 7 | Typ domény | Ne | AGGREGATE &#124; TRACKER | Typ domény pro datový prvek může být agregační nebo sledovací. Max. 16 znaků |
| 8 | Typ hodnoty | Ne | INTEGER &#124; NUMBER &#124; UNIT_INTERVAL &#124; PERCENTAGE &#124; INTEGER_POSITIVE &#124; INTEGER_NEGATIVE &#124; INTEGER_ZERO_OR_POSITIVE &#124; FILE_RESOURCE &#124; COORDINATE &#124;TEXT &#124; LONG_TEXT &#124; LETTER &#124; PHONE_NUMBER &#124; EMAIL &#124; BOOLEAN &#124; TRUE_ONLY &#124; DATE &#124; DATETIME | Typ hodnoty. Max. 16 znaků |
| 9 | Typ agregace | Ne | SUM &#124; AVERAGE &#124; AVERAGE_SUM_ORG_UNIT &#124; COUNT &#124; STDDEV &#124; VARIANCE &#124; MIN &#124; MAX &#124; NONE | Typ agregace udávající, jak agregovat data v různých dimenzích. Max. 16 znaků |
| 10 | Kombinace kategorií | Ne | UID | UID kombinace kategorií. Pokud není zadáno, provede se výchozí kombinace výchozích kategorií. |
| 11 | Url | Ne || Adresa URL zdroje datových prvků. Max. 255 znaků |
| 12 | Nulová hodnota je významná | Ne | false &#124; true | Udává, zda budou pro tento datový prvek uloženy nulové hodnoty. |
| 13 | Sada možností | Ne | UID | UID možnosti nastavené pro použití pro data. |
| 14 | Nastavena možnost komentáře | Ne | UID | UID možnosti nastavené pro použití pro komentáře. |

An example of a CSV file for data elements can be seen below. The first
row will always be ignored. Note how you can skip columns and rely on
default values to be used by the system. You can also skip columns which
you do not use which appear to the right of the ones

```csv
name,uid,code,shortname,description
"Women participated skill development training",,"D0001","Women participated in training"
"Women participated community organizations",,"D0002","Women participated in organizations"
```

### Organizační jednotky { #webapi_csv_org_units } 

Tabulka: Formát CSV organizační jednotky

| Index | Sloupec | Požadované | Hodnota (výchozí první) | Popis |
|---|---|---|---|---|
| 1 | Název | Ano || Název. Maximálně 230 znaků. Unikátní. |
| 2 | UID | Ne | UID | Stabilní identifikátor. Max. 11 znaků Pokud není specifikováno, bude generováno systémem. |
| 3 | Kód | Ne || Stabilní kód. Max. 50 znaků |
| 4 | Nadřazený | Ne | UID | UID nadřazené organizační jednotky. |
| 5 | Krátký název | Ne | 50 prvních znaků názvu | Pokud není zadáno, vrátí se zpět na prvních 50 znaků názvu. Maximálně 50 znaků. Unikátní. |
| 6 | Popis | Ne || Libovolný textový popisek. |
| 7 | Datum otevření | Ne | 1970-01-01 | Datum otevření organizační jednotky ve formátu RRRR-MM-DD. |
| 8 | Datum uzavření | Ne || Datum uzavření organizační jednotky ve formátu RRRR-MM-DD, přeskočte, pokud je aktuálně otevřeno. |
| 9 | Komentář | Ne || Volný textový komentář pro organizační jednotku. |
| 10 | Typ prvku | Ne | NONE &#124; MULTI_POLYGON &#124; POLYGON &#124; POINT &#124; SYMBOL | Typ geoprostorového prvku. |
| 11 | Souřadnice | Ne || Souřadnice používané pro geoprostorovou analýzu ve formátu Geo JSON. |
| 12 | URL | Ne || Adresa URL zdroje organizační jednotky. Max. 255 znaků |
| 13 | Kontaktní osoba | Ne || Kontaktní osoba pro organizační jednotku. Max. 255 znaků |
| 14 | Adresa | Ne || Adresa organizační jednotky. Max. 255 znaků |
| 15 | E-mail | Ne || E-mail pro organizační jednotku. Max. 150 znaků |
| 16 | Telefonní číslo | Ne || Telefonní číslo na organizační jednotku. Max. 150 znaků |

A minimal example for importing organisation units with a parent unit
looks like this:

```csv
name,uid,code,parent
"West province",,"WESTP","ImspTQPwCqd"
"East province",,"EASTP","ImspTQPwCqd"
```

### Pravidla ověřování { #webapi_csv_validation_rules } 

Tabulka: Formát CSV ověřovacího pravidla

| Index | Sloupec | Požadované | Hodnota (výchozí první) | Popis |
|---|---|---|---|---|
| 1 | Název | Ano || Název. Maximálně 230 znaků. Unikátní. |
| 2 | UID | Ne | UID | Stabilní identifikátor. Max. 11 znaků Pokud není specifikováno, bude generováno systémem. |
| 3 | Kód | Ne || Stabilní kód. Maximálně 50 |
| 4 | Popis | Ne || Libovolný textový popisek. |
| 5 | Návod | Ne || Volný textový pokyn. |
| 6 | Důležitost | Ne | MEDIUM &#124; HIGH &#124; LOW | Význam ověřovacího pravidla. |
| 7 | Typ pravidla (ignorováno) | Ne | VALIDATION &#124; SURVEILLANCE | Typ ověřovacího pravidla. |
| 8 | Operátor | Ne | equal_to &#124; not_equal_to &#124; greater_than &#124; greater_than_or_equal_to &#124; less_than &#124; less_than_or_equal_to &#124; compulsory_pair &#124; exclusive_pair | Operátor výrazu. |
| 9 | Typ období | Ne | měsíčně &#124; denně &#124; týdně &#124; čtvrtletně &#124; půlročně &#124; ročně | Typ období. |
| 10 | Výraz na levé straně | Ano || Matematický vzorec založený na UID datového prvku a kombinace možností. |
| 11 | Popis výrazu na levé straně | Ano || Volný text. |
| 12 | Na levé straně chybí hodnotová strategie | Ne | SKIP_IF_ANY_VALUE_MISSING &#124; SKIP_IF_ALL_VALUES_MISSING &#124; NEVER_SKIP | Chování v případě chybějících hodnot ve výrazu na levé straně. |
| 13 | Výraz na pravé straně | Ano || Matematický vzorec založený na UID datového prvku a kombinace možností. |
| 14 | Popis výrazu na pravé straně | Ano || Volný text. |
| 15 | Na pravé straně chybí hodnotová strategie | Ne | SKIP_IF_ANY_VALUE_MISSING &#124; SKIP_IF_ALL_VALUES_MISSING &#124; NEVER_SKIP | Chování v případě chybějících hodnot ve výrazu na pravé straně. |

### Sady možností { #webapi_csv_option_sets } 

Tabulka: Možnost Nastavit formát CSV

| Index | Sloupec | Požadované | Hodnota (výchozí první) | Popis |
|---|---|---|---|---|
| 1 | OptionSetName | Ano || Název. Maximálně 230 znaků. Unikátní. Mělo by se opakovat pro každou možnost. |
| 2 | OptionSetUID | Ne | UID | Stabilní identifikátor. Max. 11 znaků Pokud není uvedeno, bude generováno systémem. Mělo by se opakovat pro každou možnost. |
| 3 | OptionSetCode | Ne || Stabilní kód. Max. 50 znaků Mělo by se opakovat pro každou možnost. |
| 4 | OptionName | Ano || Název možnosti. Maximálně 230 znaků. |
| 5 | OptionUID | Ne | UID | Stabilní identifikátor. Max. 11 znaků Pokud není specifikováno, bude generováno systémem. |
| 6 | OptionCode | Ano || Stabilní kód. Max. 50 znaků |

The format for option sets is special. The three first values represent
an option set. The three last values represent an option. The first
three values representing the option set should be repeated for each
option.

```csv
optionsetname,optionsetuid,optionsetcode,optionname,optionuid,optioncode
"Color",,"COLOR","Blue",,"BLUE"
"Color",,"COLOR","Green",,"GREEN"
"Color",,"COLOR","Yellow",,"YELLOW"
"Sex",,,"Male",,"MALE"
"Sex",,,"Female",,"FEMALE"
"Sex",,,"Unknown",,"UNKNOWN"
"Result",,,"High",,"HIGH"
"Result",,,"Medium",,"MEDIUM"
"Result",,,"Low",,"LOW"
"Impact","cJ82jd8sd32","IMPACT","Great",,"GREAT"
"Impact","cJ82jd8sd32","IMPACT","Medium",,"MEDIUM"
"Impact","cJ82jd8sd32","IMPACT","Poor",,"POOR"
```

### Skupina možností { #option-group } 

Tabulka: Formát CSV skupiny možností

| Index | Sloupec | Požadované | Hodnota (výchozí první) | Popis |
|---|---|---|---|---|
| 1 | OptionGroupName | Ano || Název. Maximálně 230 znaků. Unikátní. Mělo by se opakovat pro každou možnost. |
| 2 | OptionGroupUid | Ne || Stabilní identifikátor. Max. 11 znaků Pokud není uvedeno, bude generováno systémem. Mělo by se opakovat pro každou možnost. |
| 3 | OptionGroupCode | Ne || Stabilní kód. Max. 50 znaků Mělo by se opakovat pro každou možnost. |
| 4 | OptionGroupShortName | Ano || Krátký název. Maximálně 50 znaků. Unikátní. Mělo by se opakovat pro každou možnost. |
| 5 | OptionSetUid | Ano || Stabilní identifikátor. Max. 11 znaků Mělo by se opakovat pro každou možnost. |
| 6 | OptionUid | Ne || Stabilní identifikátor. Max. 11 znaků |
| 7 | OptionCode | Ne || Stabilní kód. Max. 50 znaků |

Ukázkový datový obsah CSV OptionGroup

```csv
optionGroupName,optionGroupUid,optionGroupCode,optionGroupShortName,optionSetUid,optionUid,optionCode
optionGroupA,,,groupA,xmRubJIhmaK,,OptionA
optionGroupA,,,groupA,xmRubJIhmaK,,OptionB
optionGroupB,,,groupB,QYDAByFgTr1,,OptionC
```
### Sada skupin možností { #option-group-set } 



Tabulka: Skupina možností Nastavit formát CSV

| Index | Sloupec | Požadované | Hodnota (výchozí první) | Popis |
|---|---|---|---|---|
| 1 | OptionGroupSetName | Ano || Název. Maximálně 230 znaků. Unikátní. Mělo by se opakovat pro každou možnost. |
| 2 | OptionGroupSetUid | Ne || Stabilní identifikátor. Max. 11 znaků Pokud není uvedeno, bude generováno systémem. Mělo by se opakovat pro každou možnost. |
| 3 | OptionGroupSetCode | Ne || Stabilní kód. Max. 50 znaků Mělo by se opakovat pro každou možnost. |
| 4 | OptionGroupSetDescription | Ne || Popis. Mělo by se opakovat pro každou možnost. |
| 5 | DataDimension | Ne || TRUE, FALSE |
| 6 | OptionSetUid | Ne || OptionSet UID. Stabilní identifikátor. Max. 11 znaků |

Ukázkový datový obsah CSV OptionGroupSet

```csv
name,uid,code,description,datadimension,optionsetuid
optiongroupsetA,,,,,xmRubJIhmaK
optiongroupsetB,,,,false,QYDAByFgTr1
```
Chcete-li přidat OptionGroups do importované OptionGroupSet, postupujte podle pokynů jako import členství v kolekci

### Indicators { #webapi_csv_indicators } 

Table: Indicator CSV Format

| Index | Sloupec | Požadované | Hodnota (výchozí první) | Popis |
|---|---|---|---|---|
| 1 | Název | Ano || Název. Max. 230 znaků Unikátní. |
| 2 | UID | Ne | UID | Stabilní identifikátor. Přesně 11 alfanumerických znaků, začínajících písmenem. Pokud není uvedeno, bude generováno systémem. |
| 3 | Kód | Ne || Stabilní kód. Max. 50 znaků |
| 4 | Krátký název | Ano | 50 prvních znaků názvu | Pokud není uvedeno, vrátí se na prvních 50 znaků názvu. Max. 50 znaků Unikátní. |
| 5 | jmenovatel | Ano || Indicator expression. |
| 6 | denominatorDescription | Ne || Max. 230 znaků |
| 5 | čitatel | Ano || Indicator expression. |
| 6 | numeratorDescription | Ne || Max. 230 znaků |
| 6 | annualized | Ano ||  TRUE, FALSE |
| 6 | decimals | Ne || Number of decimals to use for indicator value, null implies default.
| 6 | Typ indikátoru | Ano || UID | UID of Indicator Type.

An example of a CSV file for Indicators can be seen below. The first
row will always be ignored. Note how you can skip columns and rely on
default values to be used by the system. You can also skip columns which
you do not use which appear to the right of the ones

```csv
Name,UID,Code,Description,shortName,denominator,denominatorDescription,numerator,numeratorDescription,annualized,decimals,indicatorType
Indicator A,yiAKjiZVoOU,CodeA,Indicator A description,Indicator A shortname,#{fbfJHSPpUQD},denominatorDescription,#{h0xKKjijTdI},numeratorDescription,false,2,sqGRzCziswD
Indicator B,Uvn6LCg7dVU,CodeB,Indicator B description,Indicator B shortname,#{fbfJHSPpUQD},denominatorDescription,#{h0xKKjijTdI},numeratorDescription,false,2,sqGRzCziswD
```

### Členství ve sbírce { #collection-membership } 

In addition to importing objects, you can also choose to only import the
group-member relationship between an object and a group. Currently, the
following group and object pairs are supported

  - Skupina organizační jednotky - organizační jednotka

  - Skupina datových prvků - datový prvek

  - Skupina indikátorů - indikátor

  - Sada skupin možností - Skupina možností

Formát CSV pro tyto importy je stejný



Tabulka: Formát CSV členství ve sbírce

| Index | Sloupec | Požadované | Hodnota (výchozí první) | Popis |
|---|---|---|---|---|
| 1 | UID | Ano | UID | UID kolekce, do které se má přidat objekt |
| 2 | UID | Ano | UID | UID objektu, který se má přidat do kolekce |

### Category Option Group { #category-option-group } 

| Index | Sloupec | Požadované | Hodnota (výchozí první) | Popis |
|---|---|---|---|---|
| 1 | Název | Ano || Název. Maximálně 230 znaků. Unikátní. |
| 2 | UID | Ne | UID | Stabilní identifikátor. Max. 11 znaků. Pokud není uvedeno, bude generováno systémem. |
| 3 | Kód | Ne || Stabilní kód. Max. 50 znaků |
| 4 | Krátký název | Ne || Krátký název. Maximálně 50 znaků. |
| 5 | Data Dimension Type | Ano || Data Dimension Type, can be either DISAGGREGATION or ATTRIBUTE |

### Ostatní objekty { #webapi_csv_other_objects } 

Table: Data Element Group, Category Option, Organisation Unit Group CSV Format

| Index | Sloupec | Požadované | Hodnota (výchozí první) | Popis |
|---|---|---|---|---|
| 1 | Název | Ano || Název. Maximálně 230 znaků. Unikátní. |
| 2 | UID | Ne | UID | Stabilní identifikátor. Max. 11 znaků. Pokud není uvedeno, bude generováno systémem. |
| 3 | Kód | Ne || Stabilní kód. Max. 50 znaků |
| 4 | Krátký název | Ne || Krátký název. Maximálně 50 znaků. |

Příklad možností kategorií vypadá takto:

```csv
name,uid,code,shortname
"Male",,"MALE"
"Female",,"FEMALE"
```

## Odstraněné objekty { #webapi_deleted_objects } 

Prostředek odstraněné objekty poskytuje protokol odstraněných objektů metadat.

    /api/deletedObjects

Whenever an object of type metadata is deleted, a log is being kept of
the uid, code, the type and the time of when it was deleted. This API is
available at `/api/deletedObjects` field filtering and object filtering
works similarly to other metadata resources.

Získejte odstraněné objekty datových prvků typu:

    GET /api/deletedObjects.json?klass=DataElement

Get deleted object of type indicator which was deleted in 2015 and
forward:

    GET /api/deletedObjects.json?klass=Indicator&deletedAt=2015-01-01

## Oblíbené { #webapi_favorites } 

Některé typy objektů metadat lze označit jako oblíbené pro
aktuálně přihlášeného uživatele. V současnosti to platí pro ovládací panely.

    /api/dashboards/<uid>/favorite

To make a dashboard a favorite you can make a *POST* request (no content
type required) to a URL like this:

    /api/dashboards/iMnYyBfSxmM/favorite

To remove a dashboard as a favorite you can make a *DELETE* request
using the same URL as above.

The favorite status will appear as a boolean *favorite* field on the
object (e.g. the dashboard) in the metadata response.

## Odběry { #webapi_subscription } 

A logged user can subscribe to certain types of objects. Currently
subscribable objects are those of type EventChart, EventReport,
Map, Visualization and EventVisualization.

> **Poznámka**
>
> Objekty EventChart a EventReport jsou zastaralé. Místo toho použijte EventVisualization.

To get the subscribers of an object (return an array of user IDs) you
can make a *GET* request:

    /api/<object-type>/<object-id>/subscribers

Viz příklad takto:

    /api/visualizations/DkPKc1EUmC2/subscribers

To check whether the current user is subscribed to an object (returns a
boolean) you can perform a *GET* call:

    /api/<object-type>/<object-id>/subscribed

Viz příklad takto:

    /api/visualizations/DkPKc1EUmC2/subscribed

Pro přihlášení/odhlášení k odběru objektu provedete *POST/DELETE*
požadavek (není vyžadován typ obsahu):

    /api/<object-type>/<object-id>/subscriber

## Zdroje souborů { #webapi_file_resources } 

*File resources* are objects used to represent and store binary content.
The *FileResource* object itself contains the file meta-data (name,
Content-Type, size, etc.) as well as a key allowing retrieval of the
contents from a database-external file store. The *FileResource* object
is stored in the database like any other but the content (file) is
stored elsewhere and is retrievable using the contained reference
*(storageKey)*.

    /api/fileResources

Obsah souborových prostředků není přímo přístupný, ale odkazuje se na ně z jiných objektů (například z datových hodnot) k ukládání binárního obsahu prakticky neomezené velikosti.

To create a file resource that does not require a corresponding data value,
POST to the endpoint `/api/fileResources` with a multipart upload:

```bash
curl "https://server/api/fileResources" -X POST
  -F "file=@/path/to/file/name-of-file.png"
```
The `uid` of a file resource can be provided when it is created, for example:
```bash
curl "https://server/api/fileResources?uid=0123456789x" -X POST
  -F "file=@/path/to/file/name-of-file.png"
```

To create both a file resource and a data value that references the file,
POST to the `/api/dataValues/file` endpoint in DHIS 2.36 or later:

```bash
curl "https://server/api/dataValues/file?de=xPTAT98T2Jd
  &pe=201301&ou=DiszpKrYNg8&co=Prlt0C1RF0s" -X POST
  -F "file=@/path/to/file/name-of-file.png"
```

For the `api/fileResources` endpoint, the only form parameter required is
*file*, which is the file to upload. For the `api/dataValues/file`
endpoint, the parameters required are the same as for a post to
`api/dataValues`, with the addition of *file*.

The filename and content-type should also be included in the request but
will be replaced with defaults when not supplied.

On successfully creating a file resource the returned data will contain
a `response` field which in turn contains the `fileResource` like this:

```json
{
  "httpStatus": "Accepted",
  "httpStatusCode": 202,
  "status": "OK",
  "response": {
    "responseType": "FileResource",
    "fileResource": {
      "name": "name-of-file.png",
      "created": "2015-10-16T16:34:20.654+0000",
      "lastUpdated": "2015-10-16T16:34:20.667+0000",
      "externalAccess": false,
      "publicAccess": "--------",
      "user": { ... },
      "displayName": "name-of-file.png",
      "contentType": "image/png",
      "contentLength": 512571,
      "contentMd5": "4e1fc1c3f999e5aa3228d531e4adde58",
      "storageStatus": "PENDING",
      "id": "xm4JwRwke0i"
    }
  }
}
```

Note that the response is a *202 Accepted*, indicating that the returned
resource has been submitted for background processing (persisting to the
external file store in this case). Also, note the `storageStatus` field
which indicates whether the contents have been stored or not. At this
point, the persistence to the external store is not yet finished (it is
likely being uploaded to a cloud-based store somewhere) as seen by the
`PENDING` status.

Even though the content has not been fully stored yet the file resource
can now be used, for example as referenced content in a data value (see
[Working with file data values](#datavalue_file)). If we need to check
the updated *storageStatus* or otherwise retrieve the metadata of the
file, the `fileResources` endpoint can be queried.

```bash
curl "https://server/api/fileResources/xm4JwRwke0i" -H "Accept: application/json"
```

This request will return the `FileResource` object as seen in the
response of the above example.

### Omezení souborových zdrojů { #webapi_file_resources_constraints } 

  - Souborové zdroje *musí* být odkazovány (přiřazeny) z jiného objektu
    in order to be persisted in the long term. A file resource which is
    created but not referenced by another object such as a data value is
    considered to be in *staging*. Any file resources which are in this
    state and are older than *two hours* will be marked for deletion
    and will eventually be purged from the system.

  - ID vrácené počátečním vytvořením souborového prostředku není
    retrievable from any other location unless the file resource has
    bylo odkazováno (ve kterém bude ID uloženo jako reference),
    takže jeho ztráta bude vyžadovat opakování požadavku POST a nové
    objekt, který má být vytvořen. Prostředek *osiřelého* souboru bude vyčištěn
    up automatically.

  - Objekty souborových prostředků jsou *neměnné*, což znamená, že modifikace nemají
    allowed and requires creating a completely new resource instead.

### Seznam blokovaných zdrojů souborů { #file-resource-blocklist } 

Nahrávání určitých typů souborů je z bezpečnostních důvodů blokováno.

Následující typy obsahu jsou blokovány.

| Typ obsahu | Typ obsahu |
| ------------------------------------- | ---- |
| text/html                             | application/x-ms-dos-executable |
| text/css                              | application/vnd.microsoft.portable-executable |
| text/javascript                       | application/vnd.apple.installer+xml |
| font/otf                              | application/vnd.mozilla.xul+xml |
| application/x-shockwave-flash         | application/x-httpd-php  |
| application/vnd.debian.binary-package | application/x-sh |
| application/x-rpm                     | application/x-csh |
| application/java-archive              |  |

Následující přípony souborů jsou blokovány.

| Přípona souboru | Přípona souboru | Přípona souboru |
| ---- | ---- | ---- |
| html | deb  | xul  |
| htm  | rpm  | php  |
| css  | jar  | bin  |
| js   | jsp  | sh   |
| mjs  | exe  | csh  |
| otf  | msi  | bat  |
| swf  | mpkg |      |

## Verze metadat { #webapi_metadata_versioning } 

Tato část vysvětluje rozhraní API pro správu verzí metadat.

  - `/api/metadata/version`: This endpoint will return the current metadata
    verzi systému, na kterém je vyvolána.



Tabulka: Parametry dotazu

| Název | Požadované | Popis |
|---|---|---|
| versionName | false | If this parameter is not specified, it will return the current version of the system or otherwise it will return the details of the versionName passed as parameter. (versionName is of the syntax "Version_<id\>" |

### Získejte příklady verzí metadat { #webapi_metadata_versioning_examples } 

**Příklad:** Získejte aktuální verzi metadat tohoto systému

Požadavek:

```
/api/metadata/version
```

Odezva:

```json
{
  "name": "Version_4",
  "created": "2016-06-30T06:01:28.684+0000",
  "lastUpdated": "2016-06-30T06:01:28.685+0000",
  "externalAccess": false,
  "displayName": "Version_4",
  "type": "BEST_EFFORT",
  "hashCode": "848bf6edbaf4faeb7d1a1169445357b0",
  "id": "Ayz2AEMB6ry"
}
```

**Příklad:** Získejte podrobnosti o verzi s názvem „Version_2“

Požadavek:

```
/api/metadata/version?versionName=Version_2
```

Odezva:

```json
{
  "name": "Version_2",
  "created": "2016-06-30T05:59:33.238+0000",
  "lastUpdated": "2016-06-30T05:59:33.239+0000",
  "externalAccess": false,
  "displayName": "Version_2",
  "type": "BEST_EFFORT",
  "hashCode": "8050fb1a604e29d5566675c86d02d10b",
  "id": "SaNyhusVxBG"
}
```

  - `/api/metadata/version/history`: This endpoint will return the list of all
    metadata versions of the system on which it is invoked.



Tabulka: Parametry dotazu

| Název | Požadované | Popis |
|---|---|---|
| základní linie | false | If this parameter is not specified, it will return list of all metadata versions. Otherwise we need to pass a versionName parameter of the form "Version_<id\>". It will then return the list of versions present in the system which were created after the version name supplied as the query parameter. |

### Získá seznam všech verzí metadat { #webapi_get_list_of_metadata_versions } 

**Příklad:** Získat seznam všech verzí v tomto systému

Požadavek:

```
/api/metadata/version/history
```

Odezva:

```json
{
  "metadataversions": [{
    "name": "Version_1",
    "type": "BEST_EFFORT",
    "created": "2016-06-30T05:54:41.139+0000",
    "id": "SjnhUp6r4hG",
    "hashCode": "fd1398ff7ec9fcfd5b59d523c8680798"
  }, {
    "name": "Version_2",
    "type": "BEST_EFFORT",
    "created": "2016-06-30T05:59:33.238+0000",
    "id": "SaNyhusVxBG",
    "hashCode": "8050fb1a604e29d5566675c86d02d10b"
  }, {
    "name": "Version_3",
    "type": "BEST_EFFORT",
    "created": "2016-06-30T06:01:23.680+0000",
    "id": "FVkGzSjAAYg",
    "hashCode": "70b779ea448b0da23d8ae0bd59af6333"
  }]
}
```

**Příklad:** Získat seznam všech verzí v tomto systému vytvořených po verzi „Version_2“

Požadavek:

```
/api/metadata/version/history?baseline=Version_2
```

Odezva:

```json
{
  "metadataversions": [{
    "name": "Version_3",
    "type": "BEST_EFFORT",
    "created": "2016-06-30T06:01:23.680+0000",
    "id": "FVkGzSjAAYg",
    "hashCode": "70b779ea448b0da23d8ae0bd59af6333"
  }, {
    "name": "Version_4",
    "type": "BEST_EFFORT",
    "created": "2016-06-30T06:01:28.684+0000",
    "id": "Ayz2AEMB6ry",
    "hashCode": "848bf6edbaf4faeb7d1a1169445357b0"
  }]
 }
```

  - `/api/metadata/version/create`: Tento koncový bod vytvoří metadata
    version for the version type as specified in the parameter.



Tabulka: Parametry dotazu

| Název | Požadované | Popis |
|---|---|---|
| typ | true | The type of metadata version which needs to be created.<br>  * BEST_EFFORT<br> * ATOMIC |

Users can select the type of metadata which needs to be created.
Metadata Version type governs how the importer should treat the given
version. This type will be used while importing the metadata. There are
two types of metadata.

  - *BEST_EFFORT*: This type suggests that missing references can be
    ignored and the importer can continue importing the metadata (e.g.
    missing data elements on a data element group import).

  - *ATOMIC*: This type ensures a strict type checking of the metadata
    references and the metadata import will fail if any of the references
    do not exist.

> **Note**
>
> It's recommended to have an ATOMIC type of versions to ensure that all
> systems (central and local) have the same metadata. Any missing
> reference is caught in the validation phase itself. Please see the
> importer details for a full explanation.

### Vytvořte verzi metadat { #webapi_create_metadata_version } 

**Příklad:** Vytvořte verzi metadat typu `BEST_EFFORT`

Požadavek:

```bash
curl -X POST -u admin:district "https://play.dhis2.org/dev/api/metadata/version/create?type=BEST_EFFORT"
```

Odezva:

```json
{
  "name": "Version_1",
  "created": "2016-06-30T05:54:41.139+0000",
  "lastUpdated": "2016-06-30T05:54:41.333+0000",
  "externalAccess": false,
  "publicAccess": "--------",
  "user": {
    "name": "John Traore",
    "created": "2013-04-18T17:15:08.407+0000",
    "lastUpdated": "2016-04-06T00:06:06.571+0000",
    "externalAccess": false,
    "displayName": "John Traore",
    "id": "xE7jOejl9FI"
  },
  "displayName": "Version_1",
  "type": "BEST_EFFORT",
  "hashCode": "fd1398ff7ec9fcfd5b59d523c8680798",
  "id": "SjnhUp6r4hG"
}
```

  - `/api/metadata/version/{versionName}/data`: This endpoint will download
    the actual metadata specific to the version name passed as path
    parameter.

  - `/api/metadata/version/{versionName}/data.gz`: Tento koncový bod se stáhne
    the actual metadata specific to the version name passed as path
    parameter in a compressed format (gzipped).



Tabulka: Parametry cesty

| Název | Požadované | Popis |
|---|---|---|
| versionName | true | Path parameter of the form "Version_<id\>" so that the API downloads the specific version |

### Stažení metadat verze { #webapi_download_version_metadata } 

**Příklad:** Získejte aktuální metadata pro "Version 5"

Požadavek:

```bash
curl -u admin:district "https://play.dhis2.org/dev/api/metadata/version/Version_5/data"
```

Odezva:

```json
{
  "date": "2016-06-30T06:10:23.120+0000",
  "dataElements": [
    {
      "code": "ANC 5th Visit",
      "created": "2016-06-30T06:10:09.870+0000",
      "lastUpdated": "2016-06-30T06:10:09.870+0000",
      "name": "ANC 5th Visit",
      "id": "sCuZKDsix7Y",
      "shortName": "ANC 5th Visit ",
      "aggregationType": "SUM",
      "domainType": "AGGREGATE",
      "zeroIsSignificant": false,
      "valueType": "NUMBER",
      "categoryCombo": {
        "id": "p0KPaWEg3cf"
      },
      "user": {
        "id": "xE7jOejl9FI"
      }
    }
  ]
}
```

## Synchronizace metadat { #webapi_metadata_synchronization }

This section explains the Metadata Synchronization API available
starting 2.24

  - `/api/metadata/sync`: Tento koncový bod provádí synchronizaci metadat
    název verze předaný v parametru dotazu stažením a
    import zadané verze ze vzdáleného serveru, jak je definováno v
    the settings app.



Tabulka: Parametry databázového dotazu

| Název | Požadované | Popis |
|---|---|---|
| versionName | true | versionName query parameter of the form "Version_<id\>" . The api downloads this version from the remote server and imports it in the local system. |

  - Toto API by mělo být používáno s maximální opatrností. Upozorňujeme, že existuje
    alternativní způsob, jak dosáhnout synchronizace zcela automatizovaným způsobem
    využití úlohy synchronizace metadat ze „správy dat“
    app. See Chapter 22, Section 22.17 of User Manual for more details
    regarding Metadata Sync Task.

  - This sync API can alternatively be used to sync metadata for the
    verze, které selhaly z plánovače synchronizace metadat. Kvůli
    its dependence on the given metadata version number, care should be
    taken for the order in which this gets invoked. E.g. If this api is
    used to sync some higher version from the central instance, then the
    sync might fail as the metadata dependencies are not present in the
    local instance.

  - Assume the local instance is at `Version_12` and if this endpoint is used
    to sync `Version_15` (of type `BEST_EFFORT`) from the central
    instance, the scheduler will start syncing metadata from
    `Version_16`. Místní instance tedy nebude mít metadata
    verze mezi `Version_12` a `Version_15`. Musíte ručně
    sync the missing versions using these endpoints only.

### Synchronizovat verzi metadat { #webapi_metadata_synchronization_version } 

**Příklad:** Synchronizace Version_6 z centrálního systému do tohoto systému

Požadavek:

```bash
curl -u admin:district "https://play.dhis2.org/dev/api/metadata/sync?versionName=Version_6"
```

## Úložiště metadat { #webapi_metadata_repository } 

DHIS2 provides a metadata repository containing metadata packages with
various content. A metadata package is a DHIS2-compliant JSON document
which describes a set of metadata objects.

Chcete-li získat index dostupných balíčků metadat, můžete zadat požadavek GET na prostředek *metadataRepo*:

    GET /api/synchronization/metadataRepo

A metadata package entry contains information about the package and a
URL to the relevant package. An index could look like this:

```json
{
  "packages": [
    {
      "id": "sierre-leone-demo",
      "name": "Sierra Leone demo",
      "description": "Sierra Leone demo database",
      "version": "0.1",
      "href": "https://dhis2.org/metadata-repo/221/sierra-leone-demo/metadata.json"
    },
    {
      "id": "trainingland-org-units",
      "name": "Trainingland organisation units",
      "description": "Trainingland organisation units with four levels",
      "version": "0.1",
      "href": "https://dhis2.org/metadata-repo/221/trainingland-org-units/metadata.json"
    }
  ]
}
```

A client can follow the URLs and install a metadata package through a
POST request with content type *text/plain* with the metadata package
URL as the payload to the *metadataPull* resource:

    POST /api/synchronization/metadataPull

Příklad příkazu curl vypadá takto:

```bash
curl "localhost:8080/api/synchronization/metadataPull" -X POST
  -d "https://dhis2.org/metadata-repo/221/trainingland-org-units/metadata.json"
  -H "Content-Type:text/plain" -u admin:district
```


> **Note**
>
> The supplied URL will be checked against the config property `system.remote_servers_allowed` in the `dhis.conf` file.
> If the base URL is not one of the configured servers allowed then the operation will not be allowed. See failure example below.  
> Some examples where the config set is `system.remote_servers_allowed=https://server1.org/,https://server2.org/`
> - supply `https://server1.org/path/to/resource` -> this will be accepted
> - supply `https://server2.org/resource/path` -> this will be accepted
> - supply `https://oldserver.org/resource/path` -> this will be rejected
>
Sample failure response

```json
 {
  "httpStatus": "Conflict",
  "httpStatusCode": 409,
  "status": "ERROR",
  "message": "Provided URL is not in the remote servers allowed list",
  "errorCode": "E1004"
}
```


## Reference to created by user { #reference-to-created-by-user } 

Každý objekt vytvořený v DHIS2 bude mít vlastnost s názvem `user`, která je spojena s `User`, který objekt vytvořil.

Od verze 2.36 jsme změnili název této vlastnosti na `createdBy`, aby nedošlo k záměně.

Aby však byla zachována zpětná kompatibilita, je původní vlastnost `user` stále zahrnuta do datového obsahu a funguje normálně jako dříve.

```json
{
  "createdBy": {
      "displayName": "John Kamara",
      "name": "John Kamara",
      "id": "N3PZBUlN8vq",
      "username": "district"
  },
  "user": {
      "displayName": "John Kamara",
      "name": "John Kamara",
      "id": "N3PZBUlN8vq",
      "username": "district"
  }
}
```

## Pracovní postup návrhu metadat { #webapi_metadata_proposal_workflow }

Koncový bod pracovního postupu návrhu metadat umožňuje pracovní postup navrhování a přijímání změn metadat.

```
/api/metadata/proposals
```

### Navrhněte změnu metadat { #webapi_metadata_proposal_propose }

Nabídka vždy cílí na jeden objekt metadat pomocí:

    POST /api/metadata/proposals

V závislosti na datovém obsahu by návrh mohl:

* Přidat nový objekt metadat.
* Aktualizujte existující odkazy na objekt metadat podle ID.
* Odstraňte existující objekt metadat, na který odkazuje ID.

Chcete-li navrhnout přidání nového objektu metadat, odešlete datovou část JSON, jako je následující:

```json
{
  "type": "ADD",
  "target": "ORGANISATION_UNIT",
  "change": {"name":"My Unit", "shortName":"MyOU", "openingDate": "2020-01-01"}
}
```
Vlastnost `change` obsahuje stejný objekt JSON, který lze přímo odeslat do odpovídajícího koncového bodu za účelem vytvoření objektu.

Chcete-li navrhnout aktualizaci existujícího objektu metadat, odešlete datovou část JSON jako v níže uvedeném příkladu:

```json
{
  "type": "UPDATE",
  "target": "ORGANISATION_UNIT",
  "targetId": "<id>",
  "change": [
    {"op": "replace", "path": "/name", "value": "New name"}
  ]
}
```
The `targetId` refers to the object by its ID which should be updated. The `change` property here contains a JSON patch payload. This is the same
patch payload that could be posted to the corresponding endpoint to directly apply the update.

Chcete-li navrhnout odstranění existujícího objektu, odešlete datový obsah jako v posledním příkladu:

```json
{
  "type": "REMOVE",
  "target": "ORGANISATION_UNIT",
  "targetId": "<id>"
}
```
The `targetId` refers to the object  by its ID which should be removed. A free text `comment` can be added to any type of comment.

V současnosti je podporován pouze cílový `target` typ `ORGANISATION_UNIT`.

### Přijměte návrh na změnu metadat { #webapi_metadata_proposal_accept }
Chcete-li přijmout otevřenou nabídku, použijte příkaz `POST` ve zdroji nabídky

    POST /api/metadata/proposals/<uid>

Po úspěchu se stav návrhu změní na stav `ACCEPTED`. Jakmile je návrh přijat, již nelze odmítnout.

Should a proposal fail to apply it changes to status `NEEDS_UPDATE`. The `reason` field contains a summary of the failures when this information is 
available.

### Odmítněte návrh změny metadat { #webapi_metadata_proposal_oppose }
Pokud návrh není zcela v pořádku a potřebuje úpravu, lze to označit tak, že se proti návrhu postavíte zasláním `PATCH` pro zdroj návrhu.

    PATCH /api/metadata/proposals/<uid>

Volitelně lze k tomu přidat tělo ve formátu prostého textu, aby byl uveden `důvod`, proč byl návrh proti.

Oponovaný návrh musí být ve stavu `PROPOSED` a změní se na stav `NEEDS_UPDATE`.

### Upravte návrh změny metadat { #webapi_metadata_proposal_adjust }
A proposal in state `NEEDS_UPDATE` needs to be adjusted before it can be accepted. To adjust the proposal a `PUT` request is made for the proposal's 
resource

    PUT /api/metadata/proposals/<uid>

Such an adjustment can either be made without a body or with a JSON body containing an object with the updated `change` and `targetId` for the 
adjustment:

```json
{
  "targetId": "<id>",
  "change": ...
}
```
Typ JSON hodnoty `change` závisí na `type` nabídky, který je analogický tomu, kdy byla nabídka původně vytvořena.

### Odmítněte návrh změny metadat { #webapi_metadata_proposal_reject }
Chcete-li odmítnout otevřenou nabídku, použijte ve zdroji nabídky možnost `DELETE`

    DELETE /api/metadata/proposals/<uid>

Tím se definitivně změní stav návrhu na `REJECTED`. V tomto návrhu nelze provádět žádné další změny. Je vedena jako dokumentace událostí.

### Výpis návrhů změn metadat { #webapi_metadata_proposal_list }
Všechny návrhy mohou být uvedeny:

    GET /api/metadata/proposals/

The result list can be filtered using the `filter` parameter.
For example, to list only accepted proposals use:

    GET /api/metadata/proposals?filter=status:eq:ACCEPTED

Podobně jako k zobrazení pouze otevřených návrhů použijte:

    GET /api/metadata/proposals?filter=status:eq:PROPOSED

Filtry lze také použít na libovolné pole kromě pole `change`. Podporované operátory filtrů jsou popsány v Gist Metadata API. Patří sem také transformátory vlastností popsané pro Gist API.

Seznam dostupných polí je:

| Pole       | Popis |
| ----------- | -------------------------------------------------------------- |
| id          | jedinečný identifikátor nabídky |
| typ        | `ADD` nový objekt, `UPDATE` existující objekt, `REMOVE` existující objekt |
| status      | `PROPOSED` (otevřený návrh), `ACCEPTED` (úspěšný), `NEEDS_UPDATE` (přijetí způsobené chyby nebo proti), `REJECTED` |
| cíl      | typ objektu metadat, který se má přidat/aktualizovat/odebrat; aktuálně pouze `ORGANISATION_UNIT` |
| targetId    | UID aktualizovaného nebo odebraného objektu, není definováno pro `ADD` |
| createdBy   | uživatel, který návrh vytvořil |
| created     | datum a čas, kdy byl návrh vytvořen |
| finalisedBy | uživatel, který návrh přijal nebo odmítl |
| dokončeno   | datum a čas, kdy se návrh změnil na konečný stav buď přijat, nebo zamítnut |
| comment     | volitelný prostý textový komentář uvedený u původního návrhu |
| důvod      | nepovinný prostý text zadaný, když byl návrh vznesen proti, nebo chyby, které se vyskytly při neúspěšném přijetí návrhu | 
| změna      | Objekt JSON pro návrh `ADD`, pole JSON pro návrh `UPDATE`, nic pro návrh `REMOVE` |

### Zobrazení návrhů na změnu metadat { #webapi_metadata_proposal_show }
Individual change proposals can be viewed using 

    GET /api/metadata/proposals/<uid>

Parametr `fields` lze použít k zúžení polí zahrnutých pro zobrazený objekt. Například:

    GET /api/metadata/proposals/<uid>?fields=id,type,status,change

## Metadata Attribute Value Type and validations { #metadata-attribute-value-type-and-validations } 
| Typ | Ověření
|---| --- |
| TEXT | Žádný
| LONG_TEXT | Žádný
| LETTER | Value length = 1 AND is a letter
| PHONE_NUMBER  | Validation is based on this regex `^[0-9+\\(\\)#\\.\\s\\/ext-]{6,50}$`. Max length is 50.  <br /> Examples: +4733987937, (+47) 3398 7937, (47) 3398 7937.123
| EMAIL | Obecný e-mailový formát abc@email.com
| BOOLEAN | `true` nebo `false`
| TRUE_ONLY | Only accept `true`
| DATE | Use format `yyyy-MM-dd`
| DATETIME | Use format `yyyy-MM-dd HH:mm:ssZ` or `yyyy-MM-dd'T'HH:mm:ss`
| TIME | Use fornat `HH:mm`
| NUMBER | Value must be numberic with max length = 250
| UNIT_INTERVAL | Value is numeric and inclusive between 0 and 1
| PERCENTAGE | Value is a number in the inclusive range of 0 to 100
| INTEGER | Value is an integer
| INTEGER_POSITIVE | Value is a positive integer
| INTEGER_NEGATIVE | Value is a negative integer
| INTEGER_ZERO_OR_POSITIVE | Value is an positive or zero integer
| TRACKER_ASSOCIATE | Žádný
| USERNAME | Value is a username of an existing `User`
| COORDINATE | Žádný
| ORGANISATION_UNIT | Value is a valid UID of an existing `OrganisationUnit`
| REFERENCE | Žádný
| AGE | Value is date of birth. Use format as in DATE type.
| URL | Value is a valid URL
| FILE_RESOURCE | Value is a valid UID of existing `FileResource`
| IMAGE | Value is a valid UID of existing `FileResource`
| GEOJSON |Follow [GeoJson Specification](https://geojson.org)
| MULTI_TEXT | Žádný

## Copy Program { #copy-program } 

### Úvod { #introduction } 

A user will often want to create many `Program`s which share many of the same characteristics, and instead of having to create a new `Program` from scratch, it is efficient and beneficial to copy an existing `Program` and make modifications to it.  
A template `Program` could theoretically be setup as a base to copy from, which may help with the consistency of `Program` setups also.

### API info { #api-info } 

#### Endpoint  { #endpoint } 

    POST /api/programs/{uid}/copy

Example with a `Program` with a `UID` of `Program123a`

    POST /api/programs/Program123a/copy

Successful response will include the new `Program` `UID` and will look like this:

```json
{
    "httpStatus": "Created",
    "httpStatusCode": 201,
    "status": "OK",
    "message": "Program created: 'Program456b'"
}
```

The response will also contain a `Location` header with a link to the newly-created `Program`. e.g. when run locally the `Location` value would be `http://localhost:9090/api/programs/Program456b`

#### Copy options { #copy-options } 

The API does allow the optional supplying of a custom prefix, which will be prefixed to the following properties.

| Objekt           | Vlastnictví  | Info                                     |
|------------------|-----------|------------------------------------------|
| Program          | název      | Help identify the new Program            |
| ProgramIndicator | název      | Database constraint - needs to be unique |
| ProgramIndicator | shortName | Database constraint - needs to be unique |

In this example when a custom prefix is supplied, an original `Program` with a name of `My Simple Program` would be copied to a new `Program` with the name `my prefix My Simple Program` 

If no copy options are sent in the API call then the default `Copy of ` prefix will be used for the above properties.  
To send a custom prefix just add a HTTP request param `prefix` like so:  

     POST /api/programs/{uid}/copy?prefix=my prefix 

> **Note**
>
> The database does have limits for the number of characters allowed for properties. At the time of writing these limits are noted in the table below. Bear these in mind.

| Vlastnictví  | character limit |
|-----------|-----------------|
| název      | 230             |
| shortName | 50              |

If a property has exceeded its character limit, then an error will be returned like so:

```json
{
    "httpStatus": "Conflict",
    "httpStatusCode": 409,
    "status": "ERROR",
    "message": "ERROR: value too long for type character varying(230)",
    "errorCode": "E1004"
}
```

If trying to copy a Program that is not found, a response like this will be returned:
```json
{
    "httpStatus": "Not Found",
    "httpStatusCode": 404,
    "status": "ERROR",
    "message": "Program with id {uid} could not be found.",
    "errorCode": "E1005"
}
```

### Authorisation { #authorisation } 

#### Authorities { #authorities } 

A `User` will need the following authorities to be able to copy a `Program`:

- F_PROGRAM_PUBLIC_ADD
- F_PROGRAM_INDICATOR_PUBLIC_ADD

#### Přístup { #access } 

A `Program` needs one of the following states for it to be able to be copied:

- Public `read` & `write` access
- A specific `User` to have sharing `read` & `write` access
- A `User` is part of a `UserGroup` that has sharing `read` & `write` access

If a `User` does not have the correct permissions, a `Forbidden` response is returned like so:

```json
{
    "httpStatus": "Forbidden",
    "httpStatusCode": 403,
    "status": "ERROR",
    "message": "You don't have write permissions for Program Program123a",
    "errorCode": "E1006"
}
```

### Points to note { #points-to-note } 

#### Deep and shallow copy { #deep-and-shallow-copy } 

When a `Program` is copied, certain properties of the `Program` need different kinds of copying. It is important to be aware of what has been deep-copied and what has been shallow-copied.  
First of all let's explain the difference between deep and shallow copying in this context.  

##### Deep copy { #deep-copy } 

A deep copy in this context means that a completely new instance of a `Program` or `Program` property has been created with its own unique identifiers. These include amongst others:

- id
- uid  

Deep copies of `Program` properties will all belong to the newly-created `Program` copy.

##### Shallow copy { #shallow-copy } 

A shallow copy in this context means that an existing `Program` property will be reused by the newly-created `Program` or `Program` property.

#### Properties that get deep copied { #properties-that-get-deep-copied } 

All properties below have been deep copied. Anything not in included in this table means that it has been shallow copied.

| Objekt                         | Property of  |
|--------------------------------|--------------|
| Program                        |              |
| ProgramSection                 | Program      |
| ProgramIndicator               | Program      |
| ProgramRuleVariable            | Program      |
| Fáze programu                   | Program      |
| ProgramStageSection            | Fáze programu |
| ProgramStageSectionDataElement | Fáze programu |
| Zápis                     |              |

> **Note**
>
> The following properties have been set as empty as an initial approach. This approach should keep things simple to start off with.  

| Objekt                        | Vlastnictví          |
|-------------------------------|-------------------|
| ProgramIndicator              | groups            |
| ProgramStageSection           | programIndicators |
| Zápis                    | Události            |


# Metadata Gist API { #gist_api } 
<!--DHIS2-SECTION-ID:gist_api-->

The Metadata Gist API is a RESTful read-only JSON API to fetch and browse 
metadata. Items in this API contain the gist of the same item in the Metadata API.

API je speciálně navrženo tak, aby se zabránilo:

* Large response payloads because of the inclusion of partial nested object 
  graphs.
* Resource intensive in memory processing of requests 
  (e.g. in memory filtering or object graph traversal).
* _n + 1_ database queries as a result of object graph traversal while rendering
  the response.

## Comparison with Metadata API { #gist_vs_metadata_api } 
<!--DHIS2-SECTION-ID:gist_vs_metadata_api-->

The standard Metadata API is a flexible and powerful API built to serve any and 
every use case.
The downside of this is that not all features and combinations can scale while 
keeping good performance in the presence of huge numbers of items.
In particular lists with items where each item itself has a property which is a 
large collection of complex objects have proven problematic as they quickly
reference a large part of the entire object graph.

The `/gist` API was added to provide a metadata API where scaling well is our 
first priority. The downside of this is that there are more distinct limits to
what features are technically reasonable, which means not all features of the 
standard Metadata API exist for the Gist API.

The Gist API uses a divide and conquer strategy to avoid responses with large
partial object graphs. Instead of including nested objects or lists it provides
a `/gist` endpoint URI where this object or list can be viewed in isolation.

**The `/gist` API refers to nested data using URIs rather than including it.**
This means if a client is interested in this nested information more requests
are required but each of them is kept reasonable small and will scale
well in context of huge number of potential items.

Známé rozdíly:

* items only includes fields of referenced identifiable objects if these do not
  have an endpoint on their own
* nikdy nezahrnuje přímo identifikovatelné kolekce objektů
* items by default do not include all available fields, but a subset that depends 
  on context and parameters
* seznamy nelze použít bez pageru (proto neexistuje parametr `pager`)
* fields with collections are not paged using the `pager`-transformer but through
  a paged API endpoint for the particular collection property
* items in a list, a collection property size or boolean transformer result 
  always considers object sharing (the set of considered items is always the set
  visible to the user)
* Gist nabízí sbírkové transformátory pole `member( <id> )` a `not-member( <id> )`
* Gist offers `canRead` and `canWrite` access check filter instead of filtering
  on the `access` property
* Gist offers using attribute UIDs as field and filter property names to allow
  listing or filtering based on custom attribute values
* Gist nabízí seskupení filtrů
* Gist offers renaming the enrty list in a paged response using `pageListName`
* Gist offers to pluck multiple simple properties

Známá omezení:

* by default only persisted are included; a handful of special 
  non-persistent fields (synthetic fields) can be added explicitly; other 
  non-persistent fields might be possible to extract using `from` transformation
* filtry lze použít pouze na trvalá pole
* řazení lze použít pouze na trvalá pole
* filtry tokenů nejsou k dispozici
* pořadí vždy rozlišuje velká a malá písmena
* `pluck` transformer limited to text properties (or simple properties for multi-pluck)
* fields which hold collections of simple (non-identifiable) items cannot always
  be included depending on how they are stored

Where possible to use the `/gist` API should be considered the preferable way
of fetching metadata information.


## Koncové body { #gist_endpoints } 
<!--DHIS2-SECTION-ID:gist_endpoints-->

Rozhraní API `/gist` má 3 druhy koncových bodů:

* <code>/api/&lt;object-type><b>/gist</b></code>: automaticky viditelný seznam všech známých a viditelných objektů typu (implicit `auto=S`)
* <code>/api/&lt;object-type&gt;/&lt;object-id&gt;<b>/gist</b></code>: pohled jeden objekt podle ID (implicit `auto=L`)
*  <code> / api / &lt;object-type&gt; / &lt;object-id&gt; / &lt;field-name&gt; <b> / podstata </b> </code>: Stránkovaný seznam všech známých a viditelných položek ve sbírce poli Vlastník objektu (implicitní `auto = m`, v případě, že to je jednoduchý, pole pouze hodnota pole)

These endpoints correspond to the endpoints of the standard metadata API without 
the `/gist` suffix and share the majority of parameters and their options with 
that API.


## Procházení dat { #gist_browse } 
<!--DHIS2-SECTION-ID:gist_browse-->

Since `/gist` API avoids deeply nested data structures in the response the
details of referenced complex objects or list of objects is instead provided
in form of a URI to the gist endpoint that only returns the complex object or
list of objects. These URIs are provided by the `apiEndpoints` field of an item
which is automatically added to an item when such references exist.
The item property itself might contain a transformation result on the object
or collection such as its size, emptiness, non-emptiness, id(s) or plucked 
property such as its name.

To manually browse data it can be handy to use the `absoluteUrls=true` parameter.
Linkage between parts of the gist can now be followed directly in browsers that
render JSON responses.


## Parametry { #gist_parameters } 
<!--DHIS2-SECTION-ID:gist_parameters-->

All endpoints of the `/gist` API accept the same set of parameters.
Parameters and their options that do not make sense in the endpoint context are 
ignored.


### Přehled { #overview } 
Parametry v abecedním pořadí:

| Parametr      | Možnosti               | Výchozí                            | Popis          |
| -------------- | --------------------- |------------------------------------| ---------------------|
| `absoluteUrls` | `true` nebo `false`     | `false`                            | `true` používá v odkazech relativní cesty, `false` používá v odkazech absolutní URL |
| `auto`         | `XS`, `S`, `M`, `L`, `XL` | (závislé na kontextu)                | rozsah polí vybraných voličem polí `*` |
| `fields`       | (závisí na koncovém bodu) | `*`                                | čárkou oddělený seznam polí nebo předvoleb, které chcete zahrnout |
| `filter`       | `<field>:<operator>` nebo `<field>:<operator>:<value>` |                                    | čárkami oddělený seznam filtrů pole dotazu (lze použít více než jednou) |
| `headless`     | `true` nebo `false`     | `false`                            | `true` přeskočí wrapping na pager (ignoruje `total`), `false` použije wrapper objekt pageru kolem seznamu výsledků |
| `inverse`      | `true` nebo `false`     | `false`                            | `true` vrací položky které **nejsou** v seznamu,` false` vrací položky v seznamu |
| `locale`       |                       | (jazyk konfigurovaný uživatelským účtem) | přepsat jazyk překladu |
| `order`        | `<field>` or  `<field>:asc` or `<field>:desc` | `:asc`                             | čárkami oddělený seznam polí pořadí dotazů (lze použít více než jednou) |
| `page`         | 1-n                   | 1                                  | číslo stránky |
| `pageSize`     | 1-1000                | 50                                 | počet položek na stránce |
| `pageListName` | `<text>` | (object type plural) | overrides the property name of the result entry list | 
| `rootJunction` | `AND` nebo `OR`         | `AND`                              | logická kombinace `filter` `AND`= všechny se musí shodovat, `OR` = alespoň jeden se musí shodovat |
| `total`        | `true` nebo `false`     | `false`                            | `true` přidat celkový počet shod na pager,` false` přeskočit počítání celkového počtu shod |
| `translate`    | `true` nebo `false`     | `true`                             | `true` přeložit všechny přeložitelné vlastnosti, `false` přeskočit překlad přeložitelných vlastností (žádný vliv na syntetické zobrazované názvy) |


### Parametr `absoluteUrls` { #gist_parameters_absoluteUrls } 
<!--DHIS2-SECTION-ID:gist_parameters_absoluteUrls-->

By default, URIs in `apiEndpoints`, `href` and the `pager` `prev` and `next` 
members are relative, starting with `/<object-type>/` path.

Identifikátory URI lze změnit na absolutní adresy URL pomocí parametru `absoluteUrls`.

Například `/api/users/rWLrZL8rP3K/gist?fields=id,href` vrací:

```json
{
  "id": "rWLrZL8rP3K",
  "href": "/users/rWLrZL8rP3K/gist"
}
```

whereas `/api/users/rWLrZL8rP3K/gist?fields=id,href&absoluteUrls=true` 
returns:

```json
{
  "id": "rWLrZL8rP3K",
  "href": "http://localhost:8080/api/users/rWLrZL8rP3K/gist?absoluteUrls=true"
}
```

As the example shows the `absoluteUrls` parameter is also forwarded or carried
over to the included URLs so allowing to browse the responses by following the 
provided URLs.


### Parametr `auto` { #the-auto-parameter } 
Each endpoint implicitly sets a default for the extent of fields matched by the
`*` / `:all` fields selector:

* `/api/<object-type>/gist`: implies `auto=S`
* `/api/<object-type>/<object-id>/gist`: implies  `auto=L`
* `/api/<object-type>/<object-id>/<field-name>/gist`: implies `auto=M`

The `auto` parameter is used to manually override the default to make list items
include more or less fields. This setting again acts as a default which can be
further overridden on a per field basis using an explicit transformation.

Možné možnosti pro  `auto`  jsou („velikosti triček“):

* `XS`: obsahuje pouze ID a textové vlastnosti
* `S`: vylučuje komplexní (objektové) vlastnosti, kolekce je pouze propojená (nepočítá se)
* `M`: komplex zahrnutý jako referenční URL, reference a kolekce jako počet a referenční URL
* `L`: jako` M`, ale reference a sbírky jsou zahrnuty jako ID (OBS! Velikost bez vazby)
* `XL`: jako `L`, ale odkazy a kolekce zahrnuté jako objekty ID: `{ "id": <id> }`

For example, `/api/users/gist` would list items with fields `id`, `surname`, 
`firstName`, `phoneNumber`, `email`, `lastUpdated` whereas 
`/api/users/gist?auto=XS` only lists `id`, `surname`,
`firstName`, `phoneNumber`, `email`. Using `/api/users/gist?auto=L` would also
include `organisationUnits`, `dataViewOrganisationUnits`, 
`teiSearchOrganisationUnits` and `userGroups` each with the list of IDs of the
members in the lists/sets.


### Parametr `fields` { #gist_parameters_fields } 
<!--DHIS2-SECTION-ID:gist_parameters_fields-->

Určuje seznam polí, která mají být zahrnuta pro každou položku seznamu.

Fields are included in the result JSON objects for an item in the provided order.
A preset in the list of fields is expanded to the fields it contains at the 
position in the `fields` list it appears.
Fields within the preset are ordered from simple to complex.

If no `fields` parameter is provided `fields=*` is assumed.
Note that the fields of the `*` preset also depend on the `auto` parameter

To remove a field use either `!<name>` or `-<name>` in the list of fields.
For example to remove the userGroups from a user, use:

    /api/users/gist?fields=*,!userGroups

The same principle can also be used to specify the transformer to use for a 
field. For example, to include the IDs of the user's user groups use:

    /api/users/gist?fields=*,userGroups::ids

The `fields` parameter does allow listing fields of nested objects. 
For example to add `userCredentials` with `id` and `name` of a user use:

    /api/users/gist?fields=*,userCredentials[id,username]

Tím se vytvoří položky formuláře:

```json
{
  ...
  "userCredentials": {
    "id": "Z9oOHPi3FHB",
    "username": "guest"
  }
}
```

When including nested fields of collections the nested field must be a text
property. 

Chcete-li například zahrnout všechna `name` uživatelských `userGroups` pomocí:

    /api/users/gist?fields=*,userGroups[name]

To vypíše `userGroups` jako:

```json
{
  "userGroups": {
    "name": [
      "_PROGRAM_Inpatient program",
      "_PROGRAM_TB program",
      "_DATASET_Superuser",
      "_PROGRAM_Superuser",
      "_DATASET_Data entry clerk",
      "_DATASET_M and E Officer"
    ]
  }
}
```
Výše uvedené je funkčně totožné s:

    /api/users/gist?fields=*,userGroups::pluck(name)~rename(userGroups.name)

When requesting a single field, like `/api/users/gist?fields=surname` the
response is a (still paged) list of simple values:

```json
{
  "pager": {
    "page": 1,
    "pageSize": 50
  },
  "users": [
    "Kamara",
    "Wakiki",
    "Nana",
    "Malai",
    ...
  ]
}
```

When requesting a single field of a specific owner object which has a simple
(non collection) value, like for example 
`/api/users/rWLrZL8rP3K/gist?fields=surname` the response only include the plain
JSON value:

```json
"Wakiki"
```

Další podrobnosti o předvolbách polí lze nalézt v sekci [Pole](#gist_fields).

### The `filter` Parameter { #gist_parameters_filter } 
<!--DHIS2-SECTION-ID:gist_parameters_filter-->

Chcete -li filtrovat seznam vrácených položek, přidejte jeden nebo více parametrů `filter`.

Multiple filters can either be specified as comma-separated list of a single 
`filter` parameter or as multiple `filter` parameters each with a single filter.

Existují dva typy filtrů:

* unary: `<field>:<operator>`
* binary: `<field>:<operator>:<value>`

A field can be: 

* a persisted field of the listed item type 
* trvalé pole přímo odkazovaného objektu (vztah 1:1)
* UID atributu

K dispozici jsou unární operátoři:

| Unární operátor | Popis                                                 |
| -------- | ----------------------------------------------------------------- |
| `null`   | pole je _null_ (nedefinováno)                                       |
| `!null`  | pole je _not null_ (definováno)                                     |
| `empty`  | pole je _empty_ kolekce nebo řetězec                           |
| `!empty` | pole je _non-empty_ kolekce nebo řetězec                       |

K dispozici jsou binární operátory:

| Binární operátor   | Popis                                              |
| ----------------- | -------------------------------------------------------- |
| `eq`              | pole _rovná se_ hodnota                                     |
| `ieq`             | pole _rovná se_ hodnota (nerozlišují se malá a velká písmena)                  |
| `!eq`, `neq`, `ne`| pole je _nerovná se_ hodnotě                               |
| `lt`              | pole je _menší než_ hodnota                               |
| `le`, `lte`       | pole je _menší nebo rovno_ hodnotě                   |
| `gt`              | pole je _větší než_ hodnota                            |
| `ge`, `gte`       | pole je _větší nebo rovno_ hodnotě                |
| `in`              | pole je kolekce a hodnota je položka _obsažená v_ kolekci |
| `!in`             | pole je kolekce a hodnota je položka _není obsažena v_ kolekci |

If the `<value>` of an `in` or `!in` filter is a list it is given in the form
`[value1,value2,...]`, for example: `userGroups:in:[fbfJHSPpUQD,cYeuwXTCPkU]`.

Any `>`, `>=`, `<` `<=`, `==` or `!=` comparison applied to a collection field 
with a numeric value will compare the size of the collection to the value, for
example: `userGroups:gt:0`.

Any `>`, `>=`, `<` `<=`, `==` or `!=` comparison applied to a text field 
with a integer number value will compare the text length to the value, for 
example: `name:eq:4` (name has length 4).


Dostupné operátory shody binárních vzorů jsou:

| Binární operátor                   | Popis                              |
| --------------------------------- | ---------------------------------------- |
| `like`, `ilike`                   | pole _obsahuje_ `<value>` nebo pole _odpovídá_ vzoru `<value>` (když mají hodnotu zástupné znaky `*` nebo `?`) |
| `!like`, `!ilike`                 | pole _neobsahuje_ `<value>` nebo pole _neodpovídá_ vzoru `<value>` (když mají hodnotu zástupné znaky `*` nebo `?`) |
| `$like`, `$ilike`, `startsWith`   | pole _začíná_ `<value>`            |
| `!$like`, `!$ilike`, `!startsWith`| pole _nezačíná_ `<value>`    |
| `like$`, `ilike$`, `endsWith`     | pole _končí_ `<value>`              |
| `!like$`, `!ilike$`, `!endsWith`  | pole _nekončí_ `<value>`      |

The `like` and `!like` operators can be used by either providing a search term
in which case a match is any value where the term occurs anywhere, or they can
be used by providing the search pattern using `*` as _any number of characters_
and `?` as _any single character_.

All pattern matching operators named `like` are case-sensitive. All others 
are case-insensitive. 

Note that filters on attribute values use text based comparison which means 
all text filters are supported.

Chcete-li například vypsat pouze organizace na druhé úrovni, použijte příkaz

    /api/organisationUnits/gist?filter=level:eq:2

Similarly, when listing the `children` of a particular organisation unit the
collection can be filtered. To only list those children that are connected to
a program one would use:

    /api/organisationUnits/rZxk3S0qN63/children/gist?filter=programs:gt:0

Binární operátory pro filtrování založené na přístupu (sdílení):

| Binární operátor   | Popis                                              |
| ----------------- | -------------------------------------------------------- |
| `canRead`         | Má uživatel `<value>` oprávnění ke čtení metadat objektu |
| `canWrite`        | Má uživatel `<value>` oprávnění k zápisu metadat do objektu |
| `canDataRead`     | Má uživatel `<value>` oprávnění ke čtení dat k objektu    |
| `canDataWrite`    | Má uživatel `<value>` oprávnění k zápisu dat do objektu   |
| `canAccess`       | Má uživatel `<value0>` oprávnění `<value1>` k objektu  |

When the user ID `<value>` is omitted the check is performed for the currently
logged-in user. Similarly, if `<value0>` is ommitted for `canAccess` filter
the check is performed for the currently logged-in user.

When applied to a simple value property, here `code`, the filter restricts the response to
those data elements (owner object) the user can read/write:

    /api/dataElements/gist?filter=code:canWrite:OYLGMiazHtW

When applied to a reference property, here `categoryCombo`, the filter restricts the response 
to those data elements having a category combo that the user can read/write:

    /api/dataElements/gist?filter=categoryCombo:canWrite:OYLGMiazHtW

When applied to a reference collection property, here `dataElementGroups`, the
filter restricts the response to those data elements where a data element group exists in the
collection property and which the user can read/write:

    /api/dataElements/gist?filter=dataElementGroups:canWrite:OYLGMiazHtW

The `canAccess` expects two arguments, 1st is user ID, 2nd the access pattern,
for example to check metadata read and write access the pattern is `rw%`:

    /api/dataElements/gist?filter=code:canAccess:[OYLGMiazHtW,rw%]


In addition, filter can be grouped to allow combining selected filters with 
logical OR when the general filter combinator is logical AND, or vice-versa 
with logical AND when the general combinator is logical OR.

Pro skupiny je vzor filtru rozšířen následovně:

* unární: `<group>:<field>:<operator>`
* binární: `<group>:<field>:<operator>:<value>`

The group is an arbitrary number between `0` and `9` (when omitted `0` is 
assumed). 

The behaviour is best explained with a small example for an imaginary object
type with an `age` and `name` property.

    ?filter=1:age:eq:50&filter=2:name:eq:foo&filter=2:name:eq:bar

The above filter has two groups `1` and `2`, and the `2` group has 2 members.
This is equivalent to the SQL (note the `and` and `or` as well as the 
grouping braces):

    e.age = 50 and (e.name = 'foo' or e.name = 'bar')

Nyní, pokud by byly použity stejné `filtry` v kombinaci s `rootJunction=OR`

    ?filter=1:age:eq:50&filter=2:name:eq:foo&filter=2:name:eq:bar&rootJunction=OR

místo toho by účinek byl ekvivalentní následujícímu SQL:

    e.age = 50 or (e.name = 'foo' and e.name = 'bar')


### The `headless` Parameter { #gist_parameters_headless } 
<!--DHIS2-SECTION-ID:gist_parameters_headless-->

Endpoints returning a list by default wrap the items with an envelope containing 
the `pager` and the list, which is named according to the type of object listed.

Například `/api/organisationUnits/gist` vrací:

```json
{
  "pager": {
    "page": 1,
    "pageSize": 50,
    "nextPage": "/organisationUnits/gist?page=2"
  },
  "organisationUnits": [
    ...
  ]
}
```

With `headless=true` the response to `/api/organisationUnits/gist?headless=true` 
is just the `[...]` list part in above example.


### The `inverse` Parameter { #the-inverse-parameter } 
The `inverse` can be used in context of a collection field gist of the form 
`/api/<object-type>/<object-id>/<field-name>/gist` to not list all items that
are contained in the member collection but all items that are **not** contained
in the member collection.

For example, while 

    /api/organisationUnits/rZxk3S0qN63/children/gist

uvede všechny organizační jednotky, které jsou podřízenými inverzními `rZxk3S0qN63`

    /api/organisationUnits/rZxk3S0qN63/children/gist?inverse=true

would list all organisation units that are not children of `rZxk3S0qN63`. 
This would e.g. be used to compose a list of all units that can be made a child 
of a particular unit.

Filters and orders do apply normally, meaning they filter or order the items
not contained in the member collection.


### The `locale` Parameter { #gist_parameters_locale } 
<!--DHIS2-SECTION-ID:gist_parameters_locale-->
The `locale` parameter is usually used for testing purposes to ad-hoc switch 
translation language of display names. 

If not specified the translation language is the one configured in the users
account settings.

Examples:

    /api/organisationUnits/gist?locale=en
    /api/organisationUnits/gist?locale=en_GB

### The `order` Parameter { #gist_parameters_order } 
<!--DHIS2-SECTION-ID:gist_parameters_order-->

K seřazení seznamu položek lze zadat jeden nebo více výrazů řazení.

An order expression is either just a field name of a persisted field, or a field
name followed by `:asc` (ascending order - the default) or `:desc` 
(descending order).

Chcete -li například řadit organizační jednotky abecedně podle názvu, použijte:

    /api/organisationUnits/gist?order=name

V opačném abecedním pořadí by bylo použito:

    /api/organisationUnits/gist?order=name:desc

Chcete -li seřadit organizační jednotky nejprve podle úrovně, pak podle názvu, použijte:

    /api/organisationUnits/gist?order=level,name

Začalo by to kořenem (kořeny) na úrovni 1. Chcete-li začít s koncovými jednotkami, použijte:

    /api/organisationUnits/gist?order=level:desc,name

If no order is specified the result list will have a stable order based on 
internal data organisation.


### The `page` Parameter { #gist_parameters_page } 
<!--DHIS2-SECTION-ID:gist_parameters_page-->

Odkazuje na zobrazenou stránku v stránkovaném seznamu začínající `1` pro první stránku.

Pokud není přítomen žádný parametr `page`, rovná se `page=1`.

The `page` is always in relation to the `pageSize`.
If a `page` is given beyond the number of existing matches an empty item list
is returned.


### The `pageSize` Parameter { #gist_parameters_pageSize } 
<!--DHIS2-SECTION-ID:gist_parameters_pageSize-->

Odkazuje na počet položek na `stránce`. Maximum je 1000 položek.

Pokud není přítomen žádný parametr `pageSize`, rovná se `pageSize=50`.


### The `rootJunction` Parameter { #gist_parameters_rootJunction } 
<!--DHIS2-SECTION-ID:gist_parameters_rootJunction-->

The `rootJunction` parameter can be used to explicitly set the logic junction
used between filters. Possible are:

* `AND`: všechny filtry musí odpovídat záznamu, aby byl zahrnut do výsledků
* `OR`: kterýkoli z filtrů odpovídá záznamu, který má být zahrnut do výsledků

Výchozí hodnota je `AND`.


### The `pageListName` Parameter { #gist_parameters_pageListName }
<!--DHIS2-SECTION-ID:gist_parameters_pageListName-->
The array property in a paged response that contains the matching entry list is 
named  after the object type contained in the list. 
For `/api/organisationUnits/gist` it would be named `organisationUnits`.

This default naming can be customized using the `pageListName` parameter.
For example, `/api/organisationUnits/gist?pageListName=matches` returns a
response root object with the format:

```json
{
  "pager": {},
  "matches": []
}
```
(details of the pager and matches are omitted here)


### The `total` Parameter { #gist_parameters_total } 
<!--DHIS2-SECTION-ID:gist_parameters_total-->

By default, a gist query will **not** count the total number of matches should 
those exceed the `pageSize` limit. Instead, we opt-in to the additional costs
the total count implicates.

When not counting the total matches (`total=false`) the response `pager` will
assume that there is a `next` page in case `pageSize` items were found. This
could however turn out to be false when browsing to the page. Also, the `total`
field stating the number of total matches is not included in the `pager`.

Například `/api/organisationUnits/gist` vrátí `pager`:

```json
{
  "pager": {
    "page": 1,
    "pageSize": 50,
    "nextPage": "/organisationUnits/gist?page=2"
  }
}
```

When counting the total matches (`total=true`) the response `pager` will 
contain the `total` field with the actual number of total matches at the cost
of an additional database operation.

Odpověď na `/api/organisationUnits/gist?total=true` nyní vrací tento `pager`:

```json
{
  "pager": {
    "page": 1,
    "pageSize": 50,
    "total": 1332,
    "nextPage": "/organisationUnits/gist?total=true&page=2",
    "pageCount": 27
  }
}
```


### The `translate` Parameter { #gist_parameters_translate } 
<!--DHIS2-SECTION-ID:gist_parameters_translate-->

Pole jako `name` nebo `shortName` lze přeložit (internacionalizovat).

By default, any translatable field that has a translation is returned translated
given that the user requesting the gist has an interface language configured.

Chcete-li vrátit prosté nepřeložené pole, použijte `translate=false`.

Například `/api/organisationUnits/gist` vrátí položky jako je tato:

```json
{
  "name": "Přeložený název",
  ...
}
```

Zatímco `/api/organisationUnits/gist?translate=false` vrátí položky jako:

```json
{
  "name"
  "Plain field name",
  ...
}
```

Note that synthetic fields `displayName` and `displayShortName` are always
returning the translated value independent of the `translate` parameter.


## Fields { #gist_fields } 
<!--DHIS2-SECTION-ID:gist_fields-->

The fields included by default (without `fields` parameter) correspond to 
`fields=*`. 
This means the list of fields shown depends on object type, endpoint context as 
well as the `auto` parameter.

Note that the `/gist` API always excludes certain fields that usually are of no 
interest to clients, like for example the `translations` or `sharing` fields. 
These can be added explicitly.

When not explicitly provided by name in the `fields` parameters the list of 
fields is computed from a preset.
A preset can be used in the list of fields like a field name. 
It expands to zero, one or many fields depending on the object type, used 
endpoint and selector.


### Field Presets { #field-presets } 

* `*` / `:all`: výchozí pole závisí na kontextu a parametru `auto`
* `:identifiable`: všechna trvalá pole rozhraní `IdentifiableObject`
* `:owner`: všechna trvalá pole, kde je uvedený typ vlastníkem
* `:nameable`: všechna trvalá pole rozhraní `NameableObject`
* `:persisted`: doslova všechna trvalá pole


### Field Transformers { #field-transformers } 
A transformer or transformation can be applied to a field by appending 
any of the indicators `::`, `~` or `@` followed by the transformer expression.

Dostupné výrazy transformátoru jsou:

| Transformátor          | Typ výsledku JSON       | Popis                                                                                           |
|----------------------|------------------------|-------------------------------------------------------------------------------------------------------|
| `rename(<name>)`     | -                      | přejmenuje pole v odpovědi na `<name>`                                                         |
| `size`               | `number`               | počet položek v poli sbírky                                                               |
| `isEmpty`            | `boolean`              | prázdnota sběrného pole                                                                       |
| `isNotEmpty`         | `boolean`              | nevyprázdnění sběrného pole                                                                   |
| `ids`                | `string` or `[string]` | ID objektu nebo ID předmětů sběru                                                            |
| `id-objects`         | `[{ "id": <id> }]`     | ID předmětů sběru jako objektu                                                                     |
| `member(<id>)`       | `boolean`              | má člena s `<id>` pro pole sběru                                                           |
| `not-member(<id>)`   | `boolean`              | nemá člena s `<id>` pro pole sběru                                                       |
| `pluck(<field>,...)` | `string` or `[string]` | extract single text property or multiple simple properties from the object or of each collection item |
| `from(<field>,...)`  | záleží na typu bean   | extrahuje neperzistentní pole z jednoho nebo více trvalých                                      |

A field can receive both the `rename` transformer and one of the other 
transformers, for example:

    /api/organisationUnits/gist?fields=*,children::size~rename(child-count)

The returned items now no longer have a `children` member but a `child-count`
member instead. Note that `rename` also affects the member name of the URI
reference given in `apiEndpoints`.

The `from` transformation can be used with one or more persistent fields as
parameter. These will be loaded from the database, set in an instance of the 
listed element object before the non-persistent property transformed with 
`from` is extracted from that instance by calling the getter. This allows to 
extract derived fields while using the same logic that is used in usual metadata API.

For example, a user's (non-persistent property) `name` is composed of the 
persistent property `firstName` and `surname`. It can be fetched like this:

    /api/users/gist?fields=id,name~from(firstName,surname)

Since a user's name is such a common case an auto-detection was added so that in
this special case the `from` transformation is added automatically to `name`.
We are allowed to just use the following which internally adds the `from` 
transformation:

    /api/users/gist?fields=id,name

While this makes non-persistent properties accessible in general these always 
have to be included in the `fields` explicitly. For a user this could be 
done using the following:

    /api/users/gist?fields=*,name


## Synthetic Fields { #gist_syntheticFields } 
<!--DHIS2-SECTION-ID:gist_syntheticFields-->

The `/gist` API is tightly coupled to properties that exist the database.
This means properties that aren't stored in the database usually aren't 
available.
The exception to this are the "synthetic" properties which are dynamically 
computed on the basis of one or more database stored properties.

Synthetic properties are available for all endpoints where the persisted 
properties needed to compute the synthetic property exist.

Except for the `apiEndpoints` property which is automatically added when needed 
all other synthetic properties are not included by default and have to be 
requested explicitly in the list of `fields`.


### Přehled { #overview } 
Syntetická pole v abecedním pořadí:

| Pole              | Popis                                             |
| ------------------ | ------------------------------------------------------- |
| `apiEndpoints`     | obsahuje odkazy pro procházení vnořených složitých objektů nebo sbírek |
| `href`             | odkaz na samotnou položku seznamu (zobrazení jedné položky)         |
| `displayName`      | přeložen `název` (vždy přeložen)                   |
| `displayShortName` | přeloženo `shortName` (vždy přeloženo)              |
| `access`           | shrnutí o schopnosti aktuálního uživatele číst/zapisovat/upravovat záznam |


### The `href` Field { #gist_syntheticFields_href } 
<!--DHIS2-SECTION-ID:gist_syntheticFields_href-->

Each item in a `/gist` response can link to itself. This link is given in the 
`href` property.

Chcete-li přidat pole `href`, použijte (například):

        /api/<object-type>/gist?fields=*,href

### The `displayName` and `displayShortName` Field { #gist_syntheticFields_displayName } 
<!--DHIS2-SECTION-ID:gist_syntheticFields_displayName-->

By definition the `displayName` is the translated `name` and the 
`displayShortName` is the translated `shortName`. 

Chcete-li přidat `displayName` nebo `displayShortName`, přidejte je do seznamu pomocí (například):

        /api/<object-type>/gist?fields=*,displayName
        /api/<object-type>/gist?fields=*,displayShortName

Note that by default all translatable properties like `name` and `shortName` 
would also be translated. When `translate=false` is used to disable this 
`displayName` and `displayShortName` stay translated.


### The `apiEndpoints` Field { #gist_syntheticFields_apiEndpoints } 
<!--DHIS2-SECTION-ID:gist_syntheticFields_apiEndpoints-->

This property provides the links to further browse complex objects or list of 
items that are included in the `/gist` response in form of a transformed simple 
value like an item count.

The `apiEndpoints` object will have a member of the same name for every member 
in the item that was transformed to a simple value.

For example, 

    /api/users/gist?fields=id,userGroups::size,organisationUnits::size 

vrací položky ve formuláři:

```json
{
  "id": "rWLrZL8rP3K",
  "userGroups": 0,
  "organisationUnits": 1,
  "apiEndpoints": {
    "organisationUnits": "/users/rWLrZL8rP3K/organisationUnits/gist",
    "userGroups": "/users/rWLrZL8rP3K/userGroups/gist"
  }
}
```

The list of `userGroups` and `organisationUnits` are included as their `size`. 
Each has a corresponding member in `apiEndpoints` with the path to browse the 
list.

The paths can be changed to URLs by using the `absoluteUrls` parameter. 

    /api/users/gist?fields=id,userGroups::size,organisationUnits::size&absoluteUrls=true

vrací položky ve formuláři:

```json
{
  "id": "rWLrZL8rP3K",
  "userGroups": 0,
  "organisationUnits": 1,
  "apiEndpoints": {
    "organisationUnits": "http://{host}/api/users/rWLrZL8rP3K/organisationUnits/gist?absoluteUrls=true",
    "userGroups": "http://{host}/api/users/rWLrZL8rP3K/userGroups/gist?absoluteUrls=true"
  }
}
```

### The `access` Field { #the-access-field } 
The `access` summary is based on the `sharing` and the current user.
This means it is only applicable for objects that have a `sharing` property.

Například při výpisu datových prvků s polem `access`

    /api/dataElements/gist?fields=*,access

vrácené položky datových prvků obsahují člen `"access"` , jako je ten níže:

```json
"access": {
  "manage": false,
  "externalize": false,
  "write": false,
  "read": true,
  "update": false,
  "delete": false
}
```

### Atributy jako pole { #gist_attributeFields }
DHIS2 allows creating and adding custom attributes to metadata objects.
Their values are contained in the `attributeValues` property of a metadata 
object in form of a map with the attribute UID as the map's key.

To directly list one or more specific attribute values from this map as if they
were usual fields of the metadata object the attribute UID can be used as if it
was a name of a usual field.

For example, to include the value of the attribute with UID `Y1LUDU8sWBR` as 
the property `unit-of-measure` in the list use:

    /api/dataElements/gist?fields=id,name,Y1LUDU8sWBR::rename(unit-of-measure)

Výsledkem jsou položky seznamu formuláře:
```json
{
  "id": "qrur9Dvnyt5",
  "name": "Age in years",
  "unit-of-measure": "years"
}
```

By default, the values are fetched as JSON and extracted from the map of 
attribute values. This means the listing will contain the proper JSON type for
the type of attribute value. This comes at the overhead of fetching all 
attribute values. To single out the value within the database the `PLUCK` 
transformation can be used.

    /api/dataElements/gist?fields=id,name,Y1LUDU8sWBR::rename(unit-of-measure)~pluck

The result will look the same but now the value is extracted as text in the 
database turning any JSON value to a string in the property output. 

## Příklady { #gist_examples } 
<!--DHIS2-SECTION-ID:gist_examples-->
A few examples starting from simple listings moving on to very specific use cases. 

It is preferable to always supply an explicit list of `fields` so this section 
will do so. 

Seznam organizačních jednotek s ID a názvem:

    /api/organisationUnits/gist?fields=id,name

Seznam organizačních jednotek s ID a názvem a celkovým počtem:

    /api/organisationUnits/gist?fields=id,name&total=true

Seznam uživatelů s ID a uživatelským jménem:

    /api/users/gist?fields=id,userCredentials.username

Seznam uživatelů s ID, uživatelským jménem a datem posledního přihlášení:

    /api/users/gist?fields=id,userCredentials[username,lastLogin]

Uveďte pouze organizační jednotky na druhé úrovni s ID, názvem a úrovní:

    /api/organisationUnits/gist?fields=id,name,level&filter=level:eq:2

List only organisation units that have more than 1 child with id, name and
number of children:

    /api/organisationUnits/gist?fields=id,name,children::size&filter=children:gt:1

List only organisation units that are not yet a children of another unit
`zFDYIgyGmXG`:

    /api/organisationUnits/zFDYIgyGmXG/children/gist?fields=id,name&inverse=true

List users and flag whether they are a member of a specific user group 
`NTC8GjJ7p8P` and name that field `is-member` in the response:

    /api/users/gist?fields=id,userCredentials.username,userGroups::member(NTC8GjJ7p8P)~rename(is-member)

Seznam odkazů na všechny uživatele na stránkách po 10 položkách:

    /api/users/gist?fields=href&absoluteUrls&pageSize=10




# Data { #data } 

## Hodnoty dat { #webapi_data_values } 

Tato část je o odesílání a čtení datových hodnot.

    /api/dataValueSets

### Odesílání datových hodnot { #webapi_sending_data_values } 

Chcete-li odeslat datové hodnoty, můžete odeslat požadavek POST na následující zdroj.

```
POST /api/dataValueSets
```

A common use-case for system integration is the need to send a set of
data values from a third-party system into DHIS. In this example, we will
use the DHIS2 demo on `http://play.dhis2.org/demo` as basis. We assume
that we have collected case-based data using a simple software client
running on mobile phones for the *Mortality <5 years* data set in the
community of *Ngelehun CHC* (in *Badjia* chiefdom, *Bo* district) for
the month of January 2014. We have now aggregated our data into a
statistical report and want to send that data to the DHIS2 instance. The
base URL to the demo API is `http://play.dhis2.org/demo/api`. The following
links are relative to the base URL.


Zdrojem, který je nejvhodnější pro náš účel odesílání datových hodnot, je zdroj `/api/dataValueSets`. Sada datových hodnot představuje sadu datových hodnot, které jsou ve vzájemném vztahu, obvykle z důvodu jejich zachycení ze stejného formuláře pro zadávání dat. Formát vypadá takto:

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataSet="dataSetID"
  completeDate="date" period="period" orgUnit="orgUnitID" attributeOptionCombo="aocID">
  <dataValue dataElement="dataElementID"
    categoryOptionCombo="cocID" value="1" comment="comment1"/>
  <dataValue dataElement="dataElementID"
    categoryOptionCombo="cocID" value="2" comment="comment2"/>
  <dataValue dataElement="dataElementID"
    categoryOptionCombo="cocID" value="3" comment="comment3"/>
</dataValueSet>
```

JSON je podporován v tomto formátu:

```json
{
  "dataSet": "dataSetID",
  "completeDate": "date",
  "period": "period",
  "orgUnit": "orgUnitID",
  "attributeOptionCombo": "aocID",
  "dataValues": [
    {
      "dataElement": "dataElementID",
      "categoryOptionCombo": "cocID",
      "value": "1",
      "comment": "comment1"
    },
    {
      "dataElement": "dataElementID",
      "categoryOptionCombo": "cocID",
      "value": "2",
      "comment": "comment2"
    },
    {
      "dataElement": "dataElementID",
      "categoryOptionCombo": "cocID",
      "value": "3",
      "comment": "comment3"
    }
  ]
}
```

CSV je podporován v tomto formátu:

```csv
"dataelement","period","orgunit","catoptcombo","attroptcombo","value","strby","lstupd","cmt"
"dataElementID","period","orgUnitID","cocID","aocID","1","username","2015-04-01","comment1"
"dataElementID","period","orgUnitID","cocID","aocID","2","username","2015-04-01","comment2"
"dataElementID","period","orgUnitID","cocID","aocID","3","username","2015-04-01","comment3"
```

> **Note**
>
> Please refer to the date and period section above for time formats.

> **Note**
>
> Any imported data value which is seen as unchanged will be ignored and the import summary will reflect this. An unchanged data value is classed as one which has the same value for all 3 of these properties:
> - value
> - comment
> - followUp

From the example, we can see that we need to identify the period, the
data set, the org unit (facility) and the data elements for which to
report.

To obtain the identifier for the data set we make a request to the
`/api/dataSets` resource. From there we find and follow the link to
the *Mortality < 5 years* data set which leads us to `/api/dataSets/pBOMPrpg1QX`.
The resource representation for the *Mortality < 5 years* data set conveniently
advertises links to the data elements which are members of it. From here
we can follow these links and obtain the identifiers of the data
elements. For brevity we will only report on three data elements:
*Measles* with id `f7n9E0hX8qk`, *Dysentery* with id `Ix2HsbDMLea` and
*Cholera* with id `eY5ehpbEsB7`.

What remains is to get hold of the identifier of the organisation
unit. The *dataSet* representation conveniently provides a link to organisation
units which report on it so we search for *Ngelehun CHC* and follow the
link to the HTML representation at `/api/organisationUnits/DiszpKrYNg8`, which
tells us that the identifier of this org unit is `DiszpKrYNg8`.

From our case-based data, we assume that we have 12 cases of measles, 14
cases of dysentery and 16 cases of cholera. We have now gathered enough
information to be able to put together the XML data value set
message:

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataSet="pBOMPrpg1QX"
  completeDate="2014-02-03" period="201401" orgUnit="DiszpKrYNg8">
  <dataValue dataElement="f7n9E0hX8qk" value="12"/>
  <dataValue dataElement="Ix2HsbDMLea" value="14"/>
  <dataValue dataElement="eY5ehpbEsB7" value="16"/>
</dataValueSet>
```

Ve formátu JSON:

```json
{
  "dataSet": "pBOMPrpg1QX",
  "completeDate": "2014-02-03",
  "period": "201401",
  "orgUnit": "DiszpKrYNg8",
  "dataValues": [
    {
      "dataElement": "f7n9E0hX8qk",
      "value": "1"
    },
    {
      "dataElement": "Ix2HsbDMLea",
      "value": "2"
    },
    {
      "dataElement": "eY5ehpbEsB7",
      "value": "3"
    }
  ]
}
```

To perform functional testing we will use the _curl_ tool which provides
an easy way of transferring data using HTTP. First, we save the data
value set XML content in a file called `datavalueset.xml`. From the
directory where this file resides we invoke the following from the
command line:

```bash
curl -d @datavalueset.xml "https://play.dhis2.org/demo/api/dataValueSets"
  -H "Content-Type:application/xml" -u admin:district
```

For sending JSON content you must set the content-type header
accordingly:

```bash
curl -d @datavalueset.json "https://play.dhis2.org/demo/api/dataValueSets"
  -H "Content-Type:application/json" -u admin:district
```

The command will dispatch a request to the demo Web API, set
`application/xml` as the content-type and authenticate using
`admin`/`district` as username/password. If all goes well this will return a
`200 OK` HTTP status code. You can verify that the data has been
received by opening the data entry module in DHIS2 and select the org
unit, data set and period used in this example.

The API follows normal semantics for error handling and HTTP status
codes. If you supply an invalid username or password, `401 Unauthorized`
is returned. If you supply a content-type other than `application/xml`,
`415 Unsupported Media Type` is returned. If the XML content is invalid
according to the DXF namespace, `400 Bad Request` is returned. If you
provide an invalid identifier in the XML content, `409 Conflict` is
returned together with a descriptive message.

### Odesílání hromadných datových hodnot { #webapi_sending_bulks_data_values } 

The previous example showed us how to send a set of related data values
sharing the same period and organisation unit. This example will show us
how to send large bulks of data values which don't necessarily are
logically related.

Again we will interact with the `/api/dataValueSets` resource. This time we
will not specify the `dataSet` and `completeDate` attributes. Also, we will
specify the `period` and `orgUnit` attributes on the individual data value
elements instead of on the outer data value set element. This will
enable us to send data values for various periods and organisation units:

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0">
  <dataValue dataElement="f7n9E0hX8qk"
    period="201401" orgUnit="DiszpKrYNg8" value="12"/>
  <dataValue dataElement="f7n9E0hX8qk"
    period="201401" orgUnit="FNnj3jKGS7i" value="14"/>
  <dataValue dataElement="f7n9E0hX8qk"
    period="201402" orgUnit="DiszpKrYNg8" value="16"/>
  <dataValue dataElement="f7n9E0hX8qk"
    period="201402" orgUnit="Jkhdsf8sdf4" value="18"/>
</dataValueSet>
```

Ve formátu JSON:

```json
{
  "dataValues": [
    {
      "dataElement": "f7n9E0hX8qk",
      "period": "201401",
      "orgUnit": "DiszpKrYNg8",
      "value": "12"
    },
    {
      "dataElement": "f7n9E0hX8qk",
      "period": "201401",
      "orgUnit": "FNnj3jKGS7i",
      "value": "14"
    },
    {
      "dataElement": "f7n9E0hX8qk",
      "period": "201402",
      "orgUnit": "DiszpKrYNg8",
      "value": "16"
    },
    {
      "dataElement": "f7n9E0hX8qk",
      "period": "201402",
      "orgUnit": "Jkhdsf8sdf4",
      "value": "18"
    }
  ]
}
```

Ve formátu CSV:

```csv
"dataelement","period","orgunit","categoryoptioncombo","attributeoptioncombo","value"
"f7n9E0hX8qk","201401","DiszpKrYNg8","bRowv6yZOF2","bRowv6yZOF2","1"
"Ix2HsbDMLea","201401","DiszpKrYNg8","bRowv6yZOF2","bRowv6yZOF2","2"
"eY5ehpbEsB7","201401","DiszpKrYNg8","bRowv6yZOF2","bRowv6yZOF2","3"
```

Testujeme pomocí curl k odeslání datových hodnot ve formátu XML:

```bash
curl -d @datavalueset.xml "https://play.dhis2.org/demo/api/dataValueSets"
  -H "Content-Type:application/xml" -u admin:district
```

Všimněte si, že při použití formátu CSV musíte použít možnost binárních dat, aby se v souboru CSV zachovaly zalomení řádků:

```bash
curl --data-binary @datavalueset.csv "https://play.dhis2.org/demo/24/api/dataValueSets"
  -H "Content-Type:application/csv" -u admin:district
```

The data value set resource provides an XML response which is useful
when you want to verify the impact your request had. The first time we
send the data value set request above the server will respond with the
following import summary:

```xml
<importSummary>
  <dataValueCount imported="2" updated="1" ignored="1"/>
  <dataSetComplete>false</dataSetComplete>
</importSummary>
```

This message tells us that 3 data values were imported, 1 data value was
updated while zero data values were ignored. The single update comes as
a result of us sending that data value in the previous example. A data
value will be ignored if it references a non-existing data element,
period, org unit or data set. In our case, this single ignored value was
caused by the last data value having an invalid reference to org unit.
The data set complete element will display the date of which the data
value set was completed, or false if no data element attribute was
supplied.

### Import parametrů { #webapi_data_values_import_parameters } 

Proces importu lze přizpůsobit pomocí sady parametrů importu:

Tabulka: Parametry importu

| Parametr | Hodnoty (výchozí první) | Popis |
|---|---|---|
| dataElementIdScheme | uid &#124; jméno &#124; kód &#124; atribut:ID | Vlastnost objektu datového prvku, který se má použít k mapování hodnot dat. |
| orgUnitIdScheme | uid &#124; jméno &#124; kód &#124; atribut:ID | Vlastnost objektu organizační jednotky, která se má použít k mapování datových hodnot. |
| attributeOptionComboIdScheme | uid &#124; name &#124; code&#124; attribute:ID | Property of the attribute option combo object to use to map the data values. |
| categoryOptionComboIdScheme | uid &#124; jméno &#124; kód &#124; atribut:ID | Property of the category option combo object to use to map the data values. |
| dataSetIdScheme | uid &#124; name &#124; code&#124; attribute:ID | Vlastnost objektu datové sady, která se má použít k mapování datových hodnot. |
| categoryIdScheme | uid &#124; name &#124; code&#124; attribute:ID | Vlastnost objektu kategorie, která se má použít k mapování datových hodnot (pouze ADX). |
| categoryOptionIdScheme | uid &#124; name &#124; code&#124; attribute:ID | Vlastnost objektu možnosti kategorie, která se má použít k mapování datových hodnot (pouze ADX). |
| idScheme | uid &#124; name &#124; code&#124; attribute:ID | Vlastnost některého z výše uvedených objektů, pokud nejsou specifikovány, k použití k mapování datových hodnot. |
| preheatCache | false &#124; true | Označuje, zda před zahájením importu datových hodnot předem načíst mezipaměti metadat, urychlí velký datový obsah importu s vysokou mohutností metadat. |
| dryRun | false &#124; true | Zda uložit změny na serveru nebo jen vrátit souhrn importu. |
| importStrategy | CREATE &#124; UPDATE &#124; CREATE_AND_UPDATE &#124; DELETE | Uložit objekty všech, nový nebo aktualizovat stav importu na server. |
| skipExistingCheck | false &#124; true | Přeskočit kontroly existujících datových hodnot. Zlepšuje výkon. Použijte pouze pro prázdné databáze nebo v případě, že datové hodnoty k importu ještě neexistují. |
| skipAudit | false &#124; true | Přeskočit audit, což znamená, že hodnoty auditu nebudou generovány. Zlepšuje výkon za cenu schopnosti auditovat změny. Vyžaduje oprávnění „F_SKIP_DATA_IMPORT_AUDIT“. |
| async | false &#124; true | Označuje, zda má být import proveden asynchronně nebo synchronně. První z nich je vhodný pro velmi velké importy, protože zajišťuje, že požadavek nevyprší, ačkoli má značnou režii na výkon. Druhý je rychlejší, ale vyžaduje, aby připojení přetrvávalo, dokud nebude proces dokončen. |
| force | false &#124; true | Označuje, zda má být import vynucený. Import dat může být odmítnut z různých důvodů uzamčení datové sady, například z důvodu schválení, doby zadávání dat, dnů vypršení platnosti atd. K přepsání těchto zámků a vynucení zadávání dat lze použít import dat s force=true. Aby však tento parametr fungoval, musíte být \*superuser\*. |
| dataSet | uid | Provide the data set ID for CSV import where the ID cannot be provided in the file itself |

All parameters are optional and can be supplied as query parameters in
the request URL like this:

    /api/dataValueSets?dataElementIdScheme=code&orgUnitIdScheme=name
      &dryRun=true&importStrategy=CREATE

They can also be supplied as XML attributes on the data value set
element like below. XML attributes will override query string
parameters.

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataElementIdScheme="code"
  orgUnitIdScheme="name" dryRun="true" importStrategy="CREATE">
</dataValueSet>
```

Note that the `preheatCache` parameter can have a huge impact on
performance. For small import files, leaving it to false will be fast.
For large import files which contain a large number of distinct data
elements and organisation units, setting it to true will be orders of
magnitude faster.

#### Požadavky na datovou hodnotu { #webapi_data_values_import_requirement } 

Data value import supports a set of value types. For each value type,
there is a special requirement. The following table lists the edge cases
for value types.



Tabulka: Požadavky na typ hodnoty

| Typ hodnoty | Požadavky | Komentář |
|---|---|---|
| BOOLEAN | true &#124; True &#124; TRUE &#124; false &#124; False &#124; FALSE &#124; 1 &#124; 0 &#124; t &#124; f &#124; | Používá se, když je hodnota logická, pravdivá nebo nepravdivá. Importní službu nezajímá, zda vstup začíná velkým nebo malým písmenem, nebo zda je celý v KAPITÁLKÁCH. |

#### Schémata identifikátorů { #webapi_data_values_identifier_schemes } 

Regarding the id schemes, by default the identifiers used in the XML
messages use the DHIS2 stable object identifiers referred to as `UID`.
In certain interoperability situations we might experience that an external
system decides the identifiers of the objects. In that case we can use
the `code` property of the organisation units and other objects to set
fixed identifiers. When importing data values we hence need to reference
the code property instead of the identifier property of these metadata
objects. Identifier schemes can be specified in the XML message as well
as in the request as query parameters. To specify it in the XML payload
you can do this:

```xml
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0"
  dataElementIdScheme="CODE" orgUnitIdScheme="UID" idScheme="CODE">
</dataValueSet>
```

The parameter table above explains how the id schemes can be specified
as query parameters. The following rules apply for what takes
precedence:

  - Id schemes defined in the XML or JSON payload take precedence over
    schémata id definovaná jako parametry dotazu URL.

  - Specific id schemes such as dataElementIdScheme or
    orgUnitIdScheme take precedence over the general idScheme.

  - If no explicit id scheme is defined, the default id scheme is `code`
    for ADX format, and `uid` for all other formats.

K dispozici jsou následující schémata identifikátorů.

  - uid

  - code

  - název

  - atribut (následován UID atributu)

The attribute option is special and refers to meta-data attributes which
have been marked as *unique*. When using this option, `attribute` must
be immediately followed by the identifier of the attribute, e.g.
"attribute:DnrLSdo4hMl".

#### Asynchronní import hodnoty dat { #webapi_data_values_async_import } 

Data values can be sent and imported in an asynchronous fashion by
supplying an `async` query parameter set to *true*:

    /api/dataValueSets?async=true

This will initiate an asynchronous import job for which you can monitor
the status at the task summaries API. The API response indicates the
unique identifier of the job, type of job and the URL you can use to
monitor the import job status. The response will look similar to this:

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Initiated dataValueImport",
  "response": {
    "name": "dataValueImport",
    "id": "YR1UxOUXmzT",
    "created": "2018-08-20T14:17:28.429",
    "jobType": "DATAVALUE_IMPORT",
    "relativeNotifierEndpoint": "/api/system/tasks/DATAVALUE_IMPORT/YR1UxOUXmzT"
  }
}
```

Please read the section on *asynchronous task status* for more
information.

### Formát hodnoty dat CSV { #webapi_data_values_csv } 

The following section describes the CSV format used in DHIS2. The first
row is assumed to be a header row and will be ignored during import.



Tabulka: CSV formát DHIS2

||||
|---|---|---|
| Sloupec | Požadované | Popis |
| Datový prvek | Ano | Ve výchozím nastavení odkazuje na ID, může to být také název a kód na základě vybraného schématu ID |
| Období | Ano | Ve formátu ISO |
| Org. jednotka | Ano | Ve výchozím nastavení odkazuje na ID, může to být také název a kód na základě vybraného schématu ID |
| Kombinace možnosti kategorie | Ne | Odkazuje na ID |
| Kombinace možností atributů | Ne | Odkazuje na ID (od verze 2.16) |
| Hodnota | Ne | Hodnota dat |
| Uloženo | Ne | Odkazuje na uživatelské jméno uživatele, který zadal hodnotu |
| Naposledy aktualizováno | Ne | Datum ve formátu ISO |
| Komentář | Ne | Volný textový komentář |
| Následovat | Ne | true nebo false |

Níže je uveden příklad souboru CSV, který lze importovat do DHIS2.

```csv
"dataelement","period","orgunit","catoptcombo","attroptcombo","value","storedby","timestamp"
"DUSpd8Jq3M7","201202","gP6hn503KUX","Prlt0C1RF0s",,"7","bombali","2010-04-17"
"DUSpd8Jq3M7","201202","gP6hn503KUX","V6L425pT3A0",,"10","bombali","2010-04-17"
"DUSpd8Jq3M7","201202","OjTS752GbZE","V6L425pT3A0",,"9","bombali","2010-04-06"
```

### Generování šablony sady datových hodnot { #webapi_data_values_template } 

To generate a data value set template for a certain data set you can use
the `/api/dataSets/<id>/dataValueSet` resource. XML and JSON response
formats are supported. Example:

    /api/dataSets/BfMAe6Itzgt/dataValueSet

Parametry, které můžete použít k dalšímu nastavení výstupu, jsou popsány níže:



Tabulka: Parametry dotazu na hodnoty dat

| Parametr dotazu | Požadované | Popis |
|---|---|---|
| period | Ne | Doba použití bude zahrnuta bez jakýchkoli kontrol. |
| orgUnit | Ne | Organizační jednotka k použití, podporuje více orgUnits, lze použít id i kód. |
| comment | Ne | Pokud mají být komentáře zahrnuty, výchozí: Yes. |
| orgUnitIdScheme | Ne | Schéma organizačních jednotek k použití, podporuje id &#124; kód. |
| dataElementIdScheme | Ne | Schéma datových prvků k použití, podporuje id &#124; kód. |

### Čtení datových hodnot { #webapi_reading_data_values } 

Chcete-li číst datové hodnoty, můžete zadat požadavek GET na následující zdroj.

```
GET /api/dataValueSets
```

Data values can be retrieved in *XML*, *JSON*, *CSV*, and *ADX* format. Since we want to read data we will use the *GET* HTTP verb. We will also specify that we are
interested in the XML resource representation by including an `Accept` HTTP header with our request. The following query parameters are
accepted:


Tabulka: Parametry dotazu sady hodnot dat

| Parametr | Popis |
|---|---|
| dataSet | Identifikátor datové sady. Lze libovolněkrát opakovat. |
| dataElementGroup | Identifikátor skupiny datových prvků. Lze opakovat libovolněkrát (nepodporováno pro ADX). |
| dataElement | Data element identifier. Can be repeated any number of times. |
| period | Identifikátor období ve formátu ISO. Lze libovolněkrát opakovat. |
| startDate | Počáteční datum pro časové rozpětí hodnot k exportu. |
| endDate | Datum ukončení pro časové rozpětí hodnot k exportu. |
| orgUnit | Identifikátor organizační jednotky. Lze libovolněkrát opakovat. |
| children | Zda zahrnout podřazené do hierarchie organizačních jednotek. |
| orgUnitGroup | Identifikátor skupiny organizační jednotky. Lze libovolněkrát opakovat. |
| attributeOptionCombo | Kombinovaný identifikátor možnosti atributu. Lze libovolněkrát opakovat. |
| includeDeleted | Zda zahrnout smazané datové hodnoty. |
| lastUpdated | Zahrňte pouze hodnoty dat, které jsou aktualizovány od daného časového razítka. |
| lastUpdatedDuration | Zahrňte pouze hodnoty dat, které jsou aktualizovány během daného trvání. Formát je <value\> <time-unit\> , kde podporované časové jednotky jsou „d“ (dny), „h“ (hodiny), „m“ (minuty) a „s“ (sekundy). |
| limit | Maximální počet výsledků v odpovědi. |
| dataElementIdScheme | Vlastnost objektu datového prvku, který se má použít pro datové hodnoty v odpovědi. |
| orgUnitIdScheme | Vlastnost objektu organizační jednotky, která se má použít pro datové hodnoty v odpovědi. |
| categoryOptionComboIdScheme | Vlastnost kombinace možností kategorie, která se má použít pro datové hodnoty v odpovědi. |
| attributeOptionComboIdScheme | Vlastnost kombinovaných objektů atributu, které se mají použít pro datové hodnoty v odpovědi. |
| dataSetIdScheme | Vlastnost objektu datové sady, která se má použít v odpovědi. |
| categoryIdScheme | Vlastnost objektu kategorie pro použití v odpovědi (pouze ADX). |
| categoryOptionIdScheme | Vlastnost objektu volby kategorie, která se má použít v odpovědi (pouze ADX). |
| idScheme | Vlastnost některého z výše uvedených objektů, pokud nejsou specifikovány, k použití v odpovědi. Pokud není zadáno, výchozí idScheme pro ADX je kód a pro všechny ostatní formáty je uid. |
| inputOrgUnitIdScheme | Identifikační vlastnost použitá pro poskytnuté hodnoty parametru `orgUnit`; `id` nebo `code`. |
| inputDataSetIdScheme | Identifikační vlastnost použitá pro poskytnuté hodnoty parametru `dataSet`; `id` nebo `code` |
| inputDataElementGroupIdScheme | Identifikační vlastnost použitá pro poskytnuté hodnoty parametru `dataElementGroup`; `id` nebo `code` |
| inputDataElementIdScheme | Identification property used for the provided `dataElement` parameter values; `id` or `code` |
| inputIdScheme | Identification property used for any of the provided `dataSet`, `dataElementGroup`, `orgUnit`, `orgUnitGroup`, `attributeOptionCombo`  parameter values unless any of the three schemes above explicitly overrides this input default; `id` or `code` |

Jsou vyžadovány následující parametry z výše uvedeného seznamu:
- buď dataSet, nebo dataElementGroup (pro ADX to musí být dataSet)
- buď období, počáteční datum i datum ukončení, lastUpdated nebo lastUpdatedDuration
- buď orgUnit nebo orgUnitGroup

Podporovány jsou následující formáty odpovědí:

  - xml (application/xml)

  - json (application/json)

  - csv (application/csv)

  - adx (application/adx+xml)

Assuming that we have posted data values to DHIS2 according to the
previous section called *Sending data values* we can now put together
our request for a single data value set and request it using cURL:

```bash
curl "https://play.dhis2.org/demo/api/dataValueSets?dataSet=pBOMPrpg1QX&period=201401&orgUnit=DiszpKrYNg8"
  -H "Accept:application/xml" -u admin:district
```

We can also use the start and end dates query parameters to request a
larger bulk of data values. I.e. you can also request data values for
multiple data sets and org units and a time span in order to export
larger chunks of data. Note that the period query parameter takes
precedence over the start and end date parameters. An example looks like
this:

```bash
curl "https://play.dhis2.org/demo/api/dataValueSets?dataSet=pBOMPrpg1QX&dataSet=BfMAe6Itzgt
  &startDate=2013-01-01&endDate=2013-01-31&orgUnit=YuQRtpLP10I&orgUnit=vWbkYPRmKyS&children=true"
  -H "Accept:application/xml" -u admin:district
```

To retrieve data values which have been created or updated within the
last 10 days you can make a request like this:

    /api/dataValueSets?dataSet=pBOMPrpg1QX&orgUnit=DiszpKrYNg8&lastUpdatedDuration=10d

Odpověď bude vypadat takto:

```xml
<?xml version='1.0' encoding='UTF-8'?>
<dataValueSet xmlns="http://dhis2.org/schema/dxf/2.0" dataSet="pBOMPrpg1QX"
  completeDate="2014-01-02" period="201401" orgUnit="DiszpKrYNg8">
<dataValue dataElement="eY5ehpbEsB7" period="201401" orgUnit="DiszpKrYNg8"
  categoryOptionCombo="bRowv6yZOF2" value="10003"/>
<dataValue dataElement="Ix2HsbDMLea" period="201401" orgUnit="DiszpKrYNg8"
  categoryOptionCombo="bRowv6yZOF2" value="10002"/>
<dataValue dataElement="f7n9E0hX8qk" period="201401" orgUnit="DiszpKrYNg8"
  categoryOptionCombo="bRowv6yZOF2" value="10001"/>
</dataValueSet>
```

Můžete požádat o data ve formátu JSON takto:

    /api/dataValueSets.json?dataSet=pBOMPrpg1QX&period=201401&orgUnit=DiszpKrYNg8

Odpověď bude vypadat asi takto:

```json
{
  "dataSet": "pBOMPrpg1QX",
  "completeDate": "2014-02-03",
  "period": "201401",
  "orgUnit": "DiszpKrYNg8",
  "dataValues": [
    {
      "dataElement": "eY5ehpbEsB7",
      "categoryOptionCombo": "bRowv6yZOF2",
      "period": "201401",
      "orgUnit": "DiszpKrYNg8",
      "value": "10003"
    },
    {
      "dataElement": "Ix2HsbDMLea",
      "categoryOptionCombo": "bRowv6yZOF2",
      "period": "201401",
      "orgUnit": "DiszpKrYNg8",
      "value": "10002"
    },
    {
      "dataElement": "f7n9E0hX8qk",
      "categoryOptionCombo": "bRowv6yZOF2",
      "period": "201401",
      "orgUnit": "DiszpKrYNg8",
      "value": "10001"
    }
  ]
}
```

Note that data values are softly deleted, i.e. a deleted value has the
`deleted` property set to true instead of being permanently deleted.
This is useful when integrating multiple systems in order to communicate
deletions. You can include deleted values in the response like this:

    /api/dataValueSets.json?dataSet=pBOMPrpg1QX&period=201401
      &orgUnit=DiszpKrYNg8&includeDeleted=true

Můžete také požadovat údaje ve formátu CSV, jako je tento:

    /api/dataValueSets.csv?dataSet=pBOMPrpg1QX&period=201401
      &orgUnit=DiszpKrYNg8

Odpověď bude vypadat takto:

```csv
dataelement,period,orgunit,catoptcombo,attroptcombo,value,storedby,lastupdated,comment,flwup
f7n9E0hX8qk,201401,DiszpKrYNg8,bRowv6yZOF2,bRowv6yZOF2,12,system,2015-04-05T19:58:12.000,comment1,false
Ix2HsbDMLea,201401,DiszpKrYNg8,bRowv6yZOF2,bRowv6yZOF2,14,system,2015-04-05T19:58:12.000,comment2,false
eY5ehpbEsB7,201401,DiszpKrYNg8,bRowv6yZOF2,bRowv6yZOF2,16,system,2015-04-05T19:58:12.000,comment3,false
FTRrcoaog83,201401,DiszpKrYNg8,bRowv6yZOF2,bRowv6yZOF2,12,system,2014-03-02T21:45:05.519,comment4,false
```

Pro prostředek sady datových hodnot platí následující omezení:

  - Musí být zadán alespoň jeden soubor dat.

  - Either at least one period or a start date and end date must be
    specifikováno.

  - Musí být uvedena alespoň jedna organizační jednotka.

  - Organisation units must be within the hierarchy of the organisation
    units of the authenticated user.

  - Limit nesmí být menší než nula.

### Odesílání, čtení a mazání jednotlivých hodnot dat { #webapi_sending_individual_data_values } 

This example will show how to send individual data values to be saved in
a request. This can be achieved by sending a *POST* request to the
`dataValues` resource:

    POST /api/dataValues

Pro tento prostředek jsou podporovány následující parametry dotazu:

Tabulka: Parametry dotazu na hodnoty dat

| Parametr dotazu | Požadované | Popis |
|---|---|---|
| de | Ano | Identifikátor datového prvku |
| pe | Ano | Identifikátor období |
| ou | Ano | Identifikátor organizační jednotky |
| co | Ne | Kombinovaný identifikátor možnosti kategorie, pokud je vynechán, použije se výchozí |
| cc | Ne (nutno kombinovat s cp) | Kombinovaný identifikátor kategorie atributů |
| cp | Ne (nutno kombinovat s cc) | Identifikátory možností kategorie atributů oddělené ; pro více hodnot |
| ds | Ne | Sada dat pro kontrolu, zda je povoleno POST nebo DELETE pro období a organizační jednotku. Pokud je zadán, musí být datový prvek přiřazen k této datové sadě. Pokud není zadáno, bude zvolena datová sada obsahující datový prvek, aby se ověřilo, zda je operace povolena. |
| value | Ne | Hodnota dat. Pro booleovské hodnoty budou akceptovány následující hodnoty: true &#124; True &#124; TRUE &#124; false &#124; False &#124; FALSE &#124; 1 &#124; 0 &#124; t &#124; f &#124; |
| comment | Ne | Komentář k datům |
| followUp | Ne | Následuje hodnotu dat, přepne aktuální booleovskou hodnotu |

If any of the identifiers given are invalid, if the data value or
comment is invalid or if the data is locked, the response will contain
the *409 Conflict* status code and descriptive text message. If the
operation leads to a saved or updated value, *200 OK* will be returned.
An example of a request looks like this:

```bash
curl "https://play.dhis2.org/demo/api/dataValues?de=s46m5MS0hxu
  &pe=201301&ou=DiszpKrYNg8&co=Prlt0C1RF0s&value=12"
  -X POST -u admin:district
```

This resource also allows a special syntax for associating the value to
an attribute option combination. This can be done by sending the
identifier of the attribute category combination, together with the identifiers
of the attribute category options which the value represents within the
combination. The category combination is specified with the `cc` parameter, while
the category options are specified as a semi-colon separated string with the `cp`
parameter. It is necessary to ensure that the category options are all part
of the category combination. An example looks like this:

```bash
curl "https://play.dhis2.org/demo/api/dataValues?de=s46m5MS0hxu&ou=DiszpKrYNg8
  &pe=201308&cc=dzjKKQq0cSO&cp=wbrDrL2aYEc;btOyqprQ9e8&value=26"
  -X POST -u admin:district
```

Datovou hodnotu můžete získat pomocí požadavku pomocí metody *GET*. Na adrese value, comment a followUp se v tomto ohledu nepoužívají:

```bash
curl "https://play.dhis2.org/demo/api/dataValues?de=s46m5MS0hxu
  &pe=201301&ou=DiszpKrYNg8&co=Prlt0C1RF0s"
  -u admin:district
```

Hodnotu dat můžete smazat s požadavkem pomocí metody *DELETE*.

### Sending individual data values as payload { #webapi_sending_individual_data_values_as_payload } 

Jednotlivé datové hodnoty můžete odeslat jako datovou část JSON pomocí následujícího zdroje pomocí `Content-Type: application/json`.

```
POST /api/dataValues
```

Prostředek vytvoří novou datovou hodnotu nebo aktualizuje datovou hodnotu, pokud již existuje. Formát datové části JSON je definován níže.

```json
{
  "dataElement": "fbfJHSPpUQD",
  "categoryOptionCombo": "PT59n8BQbqM",
  "period": "202201",
  "orgUnit": "DiszpKrYNg8",
  "value": "10",
  "comment": "OK"
}
```

Koncový bod podporuje specifikování kombinací možností atributů ve vnořené struktuře.

```json
{
  "dataElement": "BOSZApCrBni",
  "categoryOptionCombo": "TkDhg29x18A",
  "attribute": {
    "combo": "O4VaNks6tta",
    "options": [
      "C6nZpLKjEJr", "i4Nbp8S2G6A"
    ]
  },
  "dataSet": "lyLU2wR22tC",
  "period": "202201",
  "orgUnit": "DiszpKrYNg8",
  "value": "15",
  "comment": "Good"
}
```

Stavový kód bude `201 Vytvořeno`, pokud byla datová hodnota úspěšně uložena nebo aktualizována, nebo `409 Konflikt`, pokud došlo k chybě ověření.

### Práce s hodnotami dat souboru { #datavalue_file } 

When dealing with data values which have a data element of type *file*
there is some deviation from the method described above. These data
values are special in that the contents of the value is a UID reference
to a *FileResource* object instead of a self-contained constant. These
data values will behave just like other data values which store text
content, but should be handled differently in order to produce
meaningful input and output.

Existují dva způsoby ukládání hodnot dat prostředku souboru.

* Upload the file to the `/api/dataValues/file` endpoint as
  described in the file resource section.  This works on versions 2.36 and later.

* If you are writing code that needs to be compatible
  with versions of DHIS2 before 2.36, then the process is:

1.  Upload the file to the `/api/fileResources` endpoint as described
    in the file resource section.

2.  Načtěte vlastnost `id` vráceného souborového prostředku.

3.  Store the retrieved identifier using the `value` property of the data value using any
    výše popsaných metod.

Only one-to-one relationships between data values and file resources are
allowed. This is enforced internally so that saving a file resource id
in several data values is not allowed and will return an error. Deleting
the data value will delete the referenced file resource. Direct deletion
of file resources are not possible.

The data value can now be retrieved as any other but the returned data
will be the UID of the file resource. In order to retrieve the actual
contents (meaning the file which is stored in the file resource mapped
to the data value) a GET request must be made to `/api/dataValues/files`
mirroring the query parameters as they would be for the data value
itself. The `/api/dataValues/files` endpoint only supports GET requests.

It is worth noting that due to the underlying storage mechanism working
asynchronously the file content might not be immediately ready for
download from the `/api/dataValues/files` endpoint. This is especially true
for large files which might require time consuming uploads happening in
the background to an external file store (depending on the system
configuration). Retrieving the file resource meta-data from the
`/api/fileResources/<id>` endpoint allows checking the `storageStatus`
of the content before attempting to download it.

## Datový formát ADX { #webapi_adx_data_format } 

From version 2.20 we have included support for an international standard
for aggregate data exchange called ADX. ADX is developed and maintained
by the Quality Research and Public Health committee of the IHE
(Integrating the HealthCare Enterprise). The wiki page detailing QRPH
activity can be found at
[wiki.ihe.net](http://wiki.ihe.net/index.php?title=Quality,_Research_and_Public_Health#Current_Domain_Activities).
ADX is still under active development and has now been published for
trial implementation. Note that what is implemented currently in DHIS2
is the functionality to read and write ADX formatted data, i.e. what is
described as Content Consumer and Content Producer actors in the ADX
profile.

The structure of an ADX data message is quite similar to what you might
already be familiar with from DXF 2 data described earlier. There are a
few important differences. We will describe these differences with
reference to a small example:

```xml
<adx xmlns="urn:ihe:qrph:adx:2015" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ihe:qrph:adx:2015 ../schema/adx_loose.xsd"
  exported="2015-02-08T19:30:00Z">
  <group orgUnit="OU_559" period="2015-06-01/P1M"
    completeDate="2015-07-01" dataSet="(TB/HIV)VCCT">
    <dataValue dataElement="VCCT_0" GENDER="FMLE" HIV_AGE="AGE0-14" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="FMLE" HIV_AGE="AGE0-14" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="FMLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="FMLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="FMLE" HIV_AGE="AGE0-14" value="10"/>

    <dataValue dataElement="VCCT_0" GENDER="MLE" HIV_AGE="AGE0-14" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="MLE" HIV_AGE="AGE0-14" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="MLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="MLE" HIV_AGE="AGE0-14" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="MLE" HIV_AGE="AGE0-14" value="10"/>

    <dataValue dataElement="VCCT_0" GENDER="FMLE" HIV_AGE="AGE15-24" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="FMLE" HIV_AGE="AGE15-24" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="FMLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="FMLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="FMLE" HIV_AGE="AGE15-24" value="10"/>

    <dataValue dataElement="VCCT_0" GENDER="MLE" HIV_AGE="AGE15-24" value="32"/>
    <dataValue dataElement="VCCT_1" GENDER="MLE" HIV_AGE="AGE15-24" value="20"/>
    <dataValue dataElement="VCCT_2" GENDER="MLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_0" GENDER="MLE" HIV_AGE="AGE15-24" value="10"/>
    <dataValue dataElement="PLHIV_TB_1" GENDER="MLE" HIV_AGE="AGE15-24" value="10"/>
  </group>
</adx>
```

### The ADX root element { #the-adx-root-element } 

The ADX root element has only one mandatory attribute, which is the
*exported* timestamp. In common with other ADX elements, the schema is
extensible in that it does not restrict additional application specific
attributes.

### The ADX group element { #the-adx-group-element } 

Unlike dxf2, ADX requires that the datavalues are grouped according to
orgUnit, period and dataSet. The example above shows a data report for
the "(TB/HIV) VCCT" dataset from the online demo database. This example
is using codes as identifiers instead of dhis2 uids. Codes are the
preferred form of identifier when using ADX.

The orgUnit, period and dataSet attributes are mandatory in ADX. The
group element may contain additional attributes. In our DHIS2
implementation any additional attributes are simply passed through to
the underlying importer. This means that all attributes which currently
have meaning in dxf2 (such as completeDate in the example above) can
continue to be used in ADX and they will be processed in the same way.

A significant difference between ADX and dxf2 is in the way that periods
are encoded. ADX makes strict use of ISO8601 and encodes the reporting
period as (date|datetime)/(duration). So the period in the example above
is a period of 1 month (P1M) starting on 2015-06-01. So it is the data
for June 2015. The notation is a bit more verbose, but it is very
flexible and allows us to support all existing period types in DHIS2

### Definice období ADX { #adx-period-definitions } 

Periods begin with the date in which the duration begins, followed by
a "/" and then the duration notation as noted in the table. The
following table details all of the DHIS2 period types and how they are
represented in ADX, along with examples.

Tabulka: Období ADX

| Typ období | Zápis trvání | Příklad(y) | trvání (více) |
|---|---|---|---|
| Denně | P1D | 2017-10-01/P1M | Oct 01 2017 |
| Týdně | P7D | 2017-10-02/P7D | Oct 02 2017-Oct 08-2017 |
| Týdenní středa | P7D | 2017-10-04/P7D | Oct 04 2017-Oct 10-2017 |
| Týdenní čtvrtek | P7D | 2017-10-05/P7D | Oct 05 2017-Oct 011-2017 |
| Týdenní sobota | P7D | 2017-10-07/P7D | Oct 07 2017-Oct 13-2017 |
| Týdenní neděle | P7D | 2017-10-01/P7D | Oct 01 2017-Oct 07-2017 |
| Dvoutýdenní | P14D | 2017-10-02/P14D | Oct 02 2017-Oct 15 2017 |
| Měsíčně | P1M | 2017-10-01/P1M | Oct 01 2017-Oct 31 2017 |
| Dvouměsíční | P2M | 2017-11-01/P2M | Nov 01 2017-Dec 31 2017 |
| Čtvrtletně | P3M | 2017-09-01/P3M | Sep 01 2017-Dec 31 2017 |
| Šestiměsíční | P6M | 2017-01-01/P6M<br>2017-07-01/P6M | Jan 01 2017-Jun 30 2017<br>Jul 01 2017-Dec 31 2017 |
| Šestiměsíční duben | P6M | 2017-04-01/P6M<br>2017-10-01/P6M | Apr 01 2017-Sep 30 2017<br>Oct 01 2017-Mar 31 2018 |
| Šestiměsíční listopad | P6M | 2017-10-01/P6M<br>2018-05-01/P6M | Nov 01 2017-Apr 30 2018<br>May 01 2018-Oct 31 2018 |
| Ročně | P1Y | 2017-01-01/P1Y | Jan 01 2017-Dec 31 2017 |
| Finanční duben | P1Y | 2017-04-01/P1Y | April 1 2017-Mar 31 2018 |
| Finanční červenec | P1Y | 2017-07-01/P1Y | July 1 2017-June 30 2018 |
| Finanční říjen | P1Y | 2017-10-01/P1Y | Oct 01 2017-Sep 30 2018 |
| Finanční listopad | P1Y | 2017-11-01/P1Y | Nov 01 2017-Oct 31 2018 |

### ADX Data values { #adx-data-values } 

The dataValue element in ADX is very similar to its equivalent in DXF.
The mandatory attributes are *dataElement* and *value*. The *orgUnit* and
*period* attributes don't appear in the dataValue as they are required
at the *group* level.

The most significant difference is the way that disaggregation is
represented. DXF uses the categoryOptionCombo to indicate the disaggregation
of data. In ADX the disaggregations (e.g. AGE_GROUP and SEX) are
expressed explicitly as attributes. If you use `code` as the id scheme for
`category`, not that you must assign a code to all the categories used for
dataElements in the dataSet, and further, that code must be of a form
which is suitable for use as an XML attribute. The exact constraint on
an XML attribute name is described in the W3C XML standard - in practice,
this means no spaces, no non-alphanumeric characters other than '_' and
it may not start with a letter. The example above shows examples of
'good' category codes ('GENDER' and 'HIV_AGE'). The same restrictions
apply if you use `name` or `attribute` as id schemes.

In ADX, only category identifiers are used as XML attributes; identifiers
for other metadata types do not have to be usalbe as XML attributes.
Note that this syntax is not enforced by DHIS2 when you are assigning
names, codes, or DHIS2 attributes, but you will get an informative error
message if you try to import ADX data and the category identifiers are
either not assigned or not suitable.

The main benefits of using explicit dimensions of disaggregated data are
that

  - The system producing the data does not have to be synchronised with the
    categoryOptionCombo within DHIS2.

  - The producer and consumer can match their codes to a 3rd party
    authoritative source, such as a vterminology service. Note that in
    the example above the Gender and AgeGroup codes are using code lists
    z [WHO Global Health Observatory](http://apps.who.int/gho/data/node.resources.api).

Note that this feature may be extremely useful, for example when
producing disaggregated data from an EMR system, but there may be cases
where a *categoryOptionCombo* mapping is easier or more desirable. The
DHIS2 implementation of ADX will check for the existence of a
*categoryOptionCombo* attribute and, if it exists, it will use that in
preference to exploded dimension attributes. Similarly, an
*attributeOptionCombo* attribute on the *group* element will be
processed in the legacy way. Otherwise, the attributeOptionCombo can be
treated as exploded categories just as on the *dataValue*.

In the simple example above, each of the dataElements in the dataSet
have the same dimensionality (categorycombo) so the data is neatly
rectangular. This need not be the case. dataSets may contain
dataElements with different categoryCombos, resulting in a
*ragged-right* ADX data message (i.e. values for different dataElements
may have different numbers of categories.)

### Importing ADX data { #importing-adx-data } 

DHIS2 exposes an endpoint for POST ADX data at `/api/dataValueSets`
using *application/xml+adx* as content type. So, for example, the
following curl command can be used to POST the example data above to the
DHIS2 demo server:

```bash
curl -u admin:district -X POST -H "Content-Type: application/adx+xml"
  -d @data.xml "https://play.dhis2.org/demo/api/dataValueSets?dataElementIdScheme=code&orgUnitIdScheme=code"
```

Note the query parameters are the same as are used with DXF data. The
ADX endpoint should interpret all the existing DXF parameters with the
same semantics as DXF.

### Exporting ADX data { #exporting-adx-data } 

DHIS2 exposes an endpoint to GET ADX data sets at `/api/dataValueSets`
using *application/xml+adx* as the accepted content type. So, for
example, the following curl command can be used to retrieve the ADX
data:

```bash
curl -u admin:district -H "Accept: application/adx+xml"
 "https://play.dhis2.org/demo/api/dataValueSets?dataValueSets?orgUnit=M_CLINIC&dataSet=MALARIA&period=201501"
```

Note the query parameters are the same as are used with DXF data. An
important difference is that the identifiers for dataSet and orgUnit may
be either uids or codes.

## Sledování { #webapi_follow_up } 

Tato část popisuje údaje o značení pro sledování.

### Sledování hodnoty dat { #data-value-follow-up } 

Koncový bod sledování datových hodnot umožňuje označování datových hodnot pro sledování.

```
PUT /api/36/dataValues/followup
```

datový obsah ve formátu `JSON` vypadá takto:

```json
{
  "dataElement": "s46m5MS0hxu",
  "period": "202005",
  "orgUnit": "DiszpKrYNg8",
  "categoryOptionCombo": "psbwp3CQEhs",
  "attributeOptionCombo": "HllvX50cXC0",
  "followup": true
}
```

Pole `categoryOptionCombo` a` attributeOptionCombo` jsou volitelná. Minimální datový obsah `JSON` vypadá takto:

```json
{
  "dataElement": "s46m5MS0hxu",
  "period": "202005",
  "orgUnit": "DiszpKrYNg8",
  "followup": false
}
```

Pole `followup` by mělo být nastaveno na `true`, aby se označila datová hodnota pro následné sledování, a `false`, aby se značka odstranila.

Kód stavu odpovědi bude `200 OK`, pokud byla operace úspěšná, a `409 Conflict` v případě chyby v požadavku.

Chcete-li hromadně aktualizovat hodnoty dat pro následné použití:

    PUT /api/dataValues/followups

s datovým obsahem `JSON`:

```json
{
  "values": [
    {
      "dataElement": "s46m5MS0hxu",
      "period": "202005",
      "orgUnit": "DiszpKrYNg8",
      "categoryOptionCombo": "psbwp3CQEhs",
      "attributeOptionCombo": "HllvX50cXC0",
      "followup": true
    }
  ]
}
```

Each item of the bulk update has the same fields and requirements as the single
update endpoint.

Bulk update equally confirms with a `200 OK` on success or returns a 
`409 Conflict` in case of input errors.



# Ověření dat { #data-validation } 

## Ověření { #webapi_validation } 

To generate a data validation summary you can interact with the
validation resource. The dataSet resource is optimized for data entry
clients for validating a data set / form, and can be accessed like this:

    GET /api/33/validation/dataSet/QX4ZTUbOt3a.json?pe=201501&ou=DiszpKrYNg8

In addition to validate rules based on data set, there are two
additional methods for performing validation: Custom validation and
Scheduled validation.

The first path variable is an identifier referring to the data set to
validate. XML and JSON resource representations are supported. The
response contains violations of validation rules. This will be extended
with more validation types in the coming versions.

To retrieve validation rules which are relevant for a specific data set,
meaning validation rules with formulas where all data elements are part
of the specific data set, you can make a GET request to to
`validationRules` resource like this:

    GET /api/validationRules?dataSet=<dataset-id>

The validation rules have a left side and a right side, which is
compared for validity according to an operator. The valid operator
values are found in the table below.



Tabulka: Operátoři

| Hodnota | Popis |
|---|---|
| equal_to | Rovno |
| not_equal_to | Nerovná se |
| greater_than | Větší než |
| greater_than_or_equal_to | Větší než nebo rovno |
| less_than | Menší než |
| less_than_or_equal_to | Menší nebo rovno |
| compulsory_pair | Pokud je přítomna kterákoli strana, musí být přítomna i druhá |
| exclusive_pair | Pokud je přítomna kterákoli strana, druhá nesmí být přítomna |

The left side and right side expressions are mathematical expressions
which can contain references to data elements and category option
combinations on the following format:

    ${<dataelement-id>.<catoptcombo-id>}

The left side and right side expressions have a *missing value
strategy*. This refers to how the system should treat data values which
are missing for data elements / category option combination references
in the formula in terms of whether the validation rule should be checked
for validity or skipped. The valid missing value strategies are found in
the table below.



Tabulka: Chybějící hodnotové strategie

| Hodnota | Popis |
|---|---|
| SKIP_IF_ANY_VALUE_MISSING | Pokud chybí nějaká datová hodnota, přeskočte ověřovací pravidlo |
| SKIP_IF_ALL_VALUES_MISSING | Pokud chybí všechny hodnoty dat, přeskočte ověřovací pravidlo |
| NEVER_SKIP | Nikdy nepřeskakujte ověřovací pravidlo bez ohledu na chybějící datové hodnoty |

## Validation results { #webapi_validation_results } 

Validation results are persisted results of violations found during a
validation analysis. If you choose "persist results" when starting or
scheduling a validation analysis, any violations found will be stored in
the database. When a result is stored in the database it will be used
for 3 things:

1.  Generování analytiky na základě uložených výsledků.

2.  Persisted results that have not generated a notification, will do so,
    jednou.

3.  Keeping track of whether or not the result has generated a
    notification.

4.  Přeskakování pravidel, která již byla zkontrolována při spuštění
    validační analýza.

This means if you don't persist your results, you will be unable to
generate analytics for validation results, if checked, results will
generate notifications every time it's found and running validation
analysis might be slower.

### Query validation results { #query-validation-results } 

The validation results persisted can be viewed at the following
endpoint:

    GET /api/33/validationResults

You can also inspect an individual result using the validation result id
in this endpoint:

    GET /api/33/validationResults/<id>

Výsledky ověření lze filtrovat také podle následujících vlastností:

* Organizační jednotka: `ou=<UID>`
* Pravidlo ověření: `vr=<UID>`
* Období: `pe=<ISO-expression>`

Každá z výše uvedených vlastností filtru se může vyskytnout několikrát, například:

    GET /api/36/validationResults?ou=jNb63DIHuwU&ou=RzgSFJ9E46G

Více hodnot pro stejný filtr je kombinováno s OR, výsledky musí odpovídat jedné z daných hodnot.

Pokud je použito více než jedné vlastnosti filtru, jsou kombinovány s AND, výsledky musí odpovídat jedné z hodnot pro každou z vlastností.

U filtru období se musí výsledky shody překrývat s některým ze zadaných období.

Kromě toho lze výsledky ověření filtrovat také k datu jejich vytvoření:

    GET /api/36/validationResults?createdDate=<date>

Tento filtr lze kombinovat s jakýmkoli z ostatních filtrů.

### Trigger validation result notifications { #trigger-validation-result-notifications } 

Validation results are sent out to the appropriate users once every day,
but can also be manually triggered to run on demand using the following
API endpoint:

    POST /api/33/validation/sendNotifications

Pomocí tohoto koncového bodu se odesílají pouze neodeslané výsledky.

### Delete validation results { #delete-validation-results } 

Výsledky ověření lze ručně odstranit pomocí ID,

    DELETE /api/36/validationResults/<id>

nebo pomocí filtrů

    DELETE /api/36/validationResults?<filters>

Mezi podporované parametry filtru patří:

* `ou=<UID>`, aby odpovídal všem výsledkům ověření organizační jednotky; více jednotek kombinuje OR, pokud je parametr poskytnut více než jednou
* `vr=<UID>`, aby odpovídal všem výsledkům ověření pravidla ověření; kombinuje více pravidel NEBO pokud je parametr poskytnut více než jednou
* `pe=<ISO-expression>`, aby se shodovaly všechny výsledky ověření týkající se období, které se překrývá se zadaným obdobím
* `created=<ISO-expression>`, aby odpovídalo všem výsledkům ověření, které byly vytvořeny v zadaném období
* `notificationSent=<boolean>`, aby odpovídal pouze výsledkům ověření, pro které bylo nebo nebylo odesláno oznámení

Pokud jsou filtry kombinovány, musí být splněny všechny podmínky (logika AND).

Nějaké příklady:

Chcete-li odstranit všechny výsledky ověření související s organizační jednotkou s UID `NqwvaQC1ni4` pro 1. čtvrtletí roku 2020, použijte:

```
DELETE /api/36/validationResults?ou=NqwvaQC1ni4&pe=2020Q1
```

Chcete-li odstranit všechny výsledky ověření, které byly vytvořeny v 1. týdnu 2019 a pro které bylo odesláno oznámení, použijte:

```
DELETE /api/36/validationResults?created=2019W1&notificationSent=true
```

Jakákoli operace odstranění bude vyžadovat oprávnění _Provádět úlohy údržby_.


## Detekce odlehlých hodnot { #outlier-detection } 

Koncový bod detekce odlehlých hodnot umožňuje detekci odlehlých hodnot v agregovaných hodnotách dat.

```
GET /api/36/outlierDetection
```

Tento koncový bod podporuje dva algoritmy pro zjišťování odlehlých hodnot:

* **Z-skóre:** Z-skóre je definováno jako absolutní odchylka mezi skóre a průměrem děleno standardní odchylkou. Parametr prahové hodnoty vztahující se k počtu standardních odchylek od střední hodnoty musí být zadán pomocí algoritmu z-skóre, aby bylo možné definovat horní a dolní hranici pro to, co je považováno za odlehlou hodnotu.
* **Upravené Z-skóre:** Stejné jako z-skóre s tím rozdílem, že jako měřítko centrální tendence používá medián místo průměru. Parametry jsou stejné jako u Z-skóre.
* **Min-max:** Min-max hodnoty datových prvků odkazují na vlastní hranice, které lze vložit do DHIS 2 na základě kombinace datových prvků, organizačních jednotek a kategorií.

The outlier values will be *ordered according to significance*, by default by the absolute deviation from the mean, with the most significant value first. This is helpful to quickly identify the outlier values which have the biggest impact on data quality and data analytics.

### Parametry požadavku databázového dotazu { #request-query-parameters } 

Jsou podporovány následující parametry dotazu.

| Parametr dotazu | Popis                                                  | Povinné | Možnosti (nejprve výchozí)                   |
| --------------- | ------------------------------------------------------------ | --------- | ----------------------------------------- |
| ds              | Datová sada, lze zadat vícekrát.                   | č. [*]    | Identifikátor datové sady.                      |
| de              | Datový prvek, lze zadat vícekrát.               | č. [*]    | Identifikátor datového prvku.                  |
| startDate       | Datum zahájení intervalu pro kontrolu odlehlých hodnot.               | Ano       | Datum (rrrr-MM-dd).                        |
| endDate         | Datum ukončení intervalu pro kontrolu odlehlých hodnot.                 | Ano       | Datum (rrrr-MM-dd).                        |
| ou              | Organizační jednotka, lze zadat vícekrát.          | Ano       | Identifikátor organizační jednotky.             |
| algoritmus       | Algoritmus pro detekci odlehlých hodnot.                      | Ne        | `Z_SCORE`, `MIN_MAX`, `MOD_Z_SCORE`       |
| práh       | Prahová hodnota pro odlehlé hodnoty. Pouze algoritmus `Z_SCORE` a `MOD_Z_SCORE`. | Ne        | Číselné, větší než nula. Výchozí: 3.0. |
| dataStartDate   | Počáteční datum intervalu pro výpočet střední hodnoty a standardního vývoje. Pouze algoritmus `Z_SCORE` a `MOD_Z_SCORE`. | Ne        | Datum (rrrr-MM-dd). |
| dataEndDate     | Koncové datum pro interval pro výpočet střední hodnoty a standardního vývoje. Pouze algoritmus `Z_SCORE` a `MOD_Z_SCORE`. | Ne        | Datum (rrrr-MM-dd).   |
| orderBy         | Pole na objednávku. Pouze algoritmus `Z_SCORE` a `MOD_Z_SCORE`.| Ne        | `MEAN_ABS_DEV`, `Z_SCORE`                 |
| maxResults      | Maximální limit pro výstup.                                    | Ne        | Celé číslo, větší než nula. Výchozí: 500. |

[*] Musíte zadat buď datové sady s parametrem `ds`, který bude zahrnovat všechny datové prvky v datových sadách, _nebo_ specifikovat datové prvky s parametrem `de`.

Musí být definován alespoň jeden datový soubor nebo datový prvek, datum zahájení a datum ukončení a alespoň jedna organizační jednotka.

Parametry `startDate` a `endDate` jsou povinné a odkazují na časový interval, ve kterém chcete zjistit odlehlé hodnoty. Parametry `dataStartDate` a `dataEndDate` jsou volitelné a odkazují na časový interval, který mají data použít při výpočtu střední hodnoty a std dev, které se použijí k případnému výpočtu z-skóre.

### Použití a příklady { #usage-and-examples } 

Získejte hodnoty odlehlých hodnot pomocí výchozího algoritmu z-skóre:

```
GET /api/36/outlierDetection?ds=BfMAe6Itzgt&ds=QX4ZTUbOt3a
  &ou=O6uvpzGd5pu&ou=fdc6uOvgoji&startDate=2020-01-01&endDate=2020-12-31
```

Získejte hodnoty odlehlých hodnot pomocí konkrétního algoritmu a konkrétní prahové hodnoty:

```
GET /api/36/outlierDetection?ds=BfMAe6Itzgt&ds=QX4ZTUbOt3a
  &ou=O6uvpzGd5pu&startDate=2020-01-01&endDate=2020-12-31
  &algorithm=Z_SCORE&threshold=2.5
```

Získejte hodnoty odlehlých hodnot seřazené podle z-skóre:

```
GET /api/36/outlierDetection?ds=BfMAe6Itzgt
  &ou=O6uvpzGd5pu&startDate=2020-01-01&endDate=2020-12-31
  &orderBy=Z_SCORE
```

Získejte 10 nejlepších hodnot odlehlých hodnot:

```
GET /api/36/outlierDetection?ds=BfMAe6Itzgt
  &ou=O6uvpzGd5pu&startDate=2020-01-01&endDate=2020-12-31
  &maxResults=10
```

Získejte odlehlé hodnoty s definovaným intervalem pro data, která se mají použít při výpočtu střední hodnoty a standardní hodnoty:

```
GET /api/36/outlierDetection?ds=BfMAe6Itzgt
  &ou=O6uvpzGd5pu&startDate=2020-01-01&endDate=2020-12-31
  &dataStartDate=2018-01-01&dataEndDate=2020-12-31
```

Získejte hodnoty odlehlých hodnot pomocí algoritmu min-max:

```
GET /api/36/outlierDetection?ds=BfMAe6Itzgt&ds=QX4ZTUbOt3a
  &ou=O6uvpzGd5pu&ou=fdc6uOvgoji&startDate=2020-01-01&endDate=2020-12-31
  &algorithm=MIN_MAX
```

### Formát odpovědi { #response-format } 

Podporovány jsou následující formáty odpovědí.

| Formát | Formát API                                                   |
| ------ | ------------------------------------------------------------ |
| JSON   | `/api/36/outlierDetection.json` or `Accept: application/json` (výchozí formát) |
| CSV    | `/api/36/outlierDetection.csv` nebo `Accept: application/csv`  |

Odpověď obsahuje následující pole:

| Pole      | Popis                                                  |
| ---------- | ------------------------------------------------------------ |
| de         | Identifikátor datového prvku.                                     |
| deName     | Název datového prvku.                                           |
| pe         | Identifikátor období ISO.                                       |
| ou         | Identifikátor organizační jednotky.                                |
| ouName     | Název organizační jednotky.                                      |
| coc        | Identifikátor kombinace možnosti kategorie.                      |
| cocName    | Název kombinace možnosti kategorie.                            |
| aoc        | Identifikátor kombinace možnosti atributu.                     |
| aocName    | Název kombinace možnosti atributu.                           |
| value      | Hodnota dat.                                                  |
| mean       | Průměr hodnot dat v časové dimenzi.                   |
| stdDev     | Standardní odchylka.                                          |
| absDev     | Pro z-skóre absolutní odchylka od průměru. Pro min-max, absolutní odchylka od minimální nebo maximální hranice. |
| zScore     | Z-skóre. Pouze algoritmus Z-skóre.                         |
| lowerBound | Dolní hranice.                                          |
| upperBound | Horní hranice.                                          |
| followUp   | Zda je datová hodnota označena pro následnou kontrolu.                  |

Pole `mean`, `stdDev` a `zScore` jsou přítomny pouze když `algorithm` je `Z_SCORE`.

Odpověď bude vypadat podobně. Sekce `metadata` obsahuje metadata pro požadavek a odpověď. Sekce `outlierValues` obsahuje hodnoty odlehlých hodnot.

```json
{
  "metadata": {
    "algorithm": "Z_SCORE",
    "threshold": 2.5,
    "orderBy": "MEAN_ABS_DEV",
    "maxResults": 10,
    "count": 10
  },
  "outlierValues": [
    {
      "de": "rbkr8PL0rwM",
      "deName": "Iron Folate given at ANC 3rd",
      "pe": "202011",
      "ou": "Pae8DR7VmcL",
      "ouName": "MCH (Kakua) Static",
      "coc": "pq2XI5kz2BY",
      "cocName": "Fixed",
      "aoc": "HllvX50cXC0",
      "aocName": "default",
      "value": 9000.0,
      "mean": 1524.5555,
      "stdDev": 2654.4661,
      "absDev": 7475.4444,
      "zScore": 2.8161,
      "lowerBound": -5111.6097,
      "upperBound": 8160.7208,
      "followUp": false
    },
    {
      "de": "rbkr8PL0rwM",
      "deName": "Iron Folate given at ANC 3rd",
      "pe": "202010",
      "ou": "vELbGdEphPd",
      "ouName": "Jimmi CHC",
      "coc": "pq2XI5kz2BY",
      "cocName": "Fixed",
      "aoc": "HllvX50cXC0",
      "aocName": "default",
      "value": 8764.0,
      "mean": 1448.0833,
      "stdDev": 2502.3031,
      "absDev": 7315.9166,
      "zScore": 2.9236,
      "lowerBound": -4807.6745,
      "upperBound": 7703.8412,
      "followUp": false
    }
  ]
}
```

### Omezení a validace { #constraints-and-validation } 

Během ověřování dotazu platí následující omezení. Každá chyba ověření má odpovídající kód chyby.

| Chybový kód | Zpráva                                                      |
| ---------- | ------------------------------------------------------------ |
| E2200      | Musí být zadán alespoň jeden datový prvek                  |
| E2201      | Musí být uvedeno datum zahájení a datum ukončení                    |
| E2202      | Datum zahájení musí být před datem ukončení                           |
| E2203      | Musí být uvedena alespoň jedna organizační jednotka             |
| E2204      | Prahová hodnota musí být kladné číslo                          |
| E2205      | Maximální počet výsledků musí být kladné číslo                        |
| E2206      | Maximální počet výsledků překračuje povolený maximální limit: {d}               |
| E2207      | Datum zahájení dat musí být před datem ukončení dat                 |
| E2208      | Při detekci odlehlých hodnot došlo k nečíselným datovým hodnotám |

## Analýza dat { #webapi_data_analysis } 

Several resources for performing data analysis and finding data quality
and validation issues are provided.

**Poznámka:** Tento koncový bod je zastaralý a bude odstraněn ve verzi 2.38. Místo toho použijte koncový bod `outlierAnalysis`.

### Analýza ověřovacích pravidel { #webapi_data_analysis_validation_rules } 

Spuštění ověřovacích pravidel a načtení porušení pravidel:

    GET /api/dataAnalysis/validationRules

Jsou podporovány následující parametry dotazu:



Tabulka: Parametry dotazu analýzy ověřovacích pravidel

| Parametr dotazu | Popis | Možnost |
|---|---|---|
| vrg | Skupina ověřovacích pravidel | ID |
| ou | Organizační jednotka | ID |
| startDate | Datum zahájení pro časové období | Datum |
| endDate | Datum ukončení pro časové období | Datum |
| trvalé | Zda přetrvávat porušení v systému | false &#124; true |
| oznámení | Zda se mají zasílat oznámení o porušení | false &#124; true |

Ukázkový výstup:
```json
[{
    "validationRuleId": "kgh54Xb9LSE",
    "validationRuleDescription": "Malaria outbreak",
    "organisationUnitId": "DiszpKrYNg8",
    "organisationUnitDisplayName": "Ngelehun CHC",
    "organisationUnitPath": "/ImspTQPwCqd/O6uvpzGd5pu/YuQRtpLP10I/DiszpKrYNg8",
    "organisationUnitAncestorNames": "Sierra Leone / Bo / Badjia / ",
    "periodId": "201901",
    "periodDisplayName": "January 2019",
    "attributeOptionComboId": "HllvX50cXC0",
    "attributeOptionComboDisplayName": "default",
    "importance": "MEDIUM",
    "leftSideValue": 10.0,
    "operator": ">",
    "rightSideValue": 14.0
}, {
    "validationRuleId": "ZoG4yXZi3c3",
    "validationRuleDescription": "ANC 2 cannot be higher than ANC 1",
    "organisationUnitId": "DiszpKrYNg8",
    "organisationUnitDisplayName": "Ngelehun CHC",
    "organisationUnitPath": "/ImspTQPwCqd/O6uvpzGd5pu/YuQRtpLP10I/DiszpKrYNg8",
    "organisationUnitAncestorNames": "Sierra Leone / Bo / Badjia / ",
    "periodId": "201901",
    "periodDisplayName": "January 2019",
    "attributeOptionComboId": "HllvX50cXC0",
    "attributeOptionComboDisplayName": "default",
    "importance": "MEDIUM",
    "leftSideValue": 22.0,
    "operator": "<=",
    "rightSideValue": 19.0
}]
```

### Analýza odlehlých hodnot založená na směrodatné odchylce { #webapi_data_analysis_std_dev_outlier } 

To identify data outliers based on standard deviations of the average
value:

    GET /api/dataAnalysis/stdDevOutlier

Jsou podporovány následující parametry dotazu:



Tabulka: Parametry dotazu analýzy odlehlých hodnot standardní odchylky

| Parametr dotazu | Popis | Možnost |
|---|---|---|
| ou | Organizační jednotka | ID |
| startDate | Datum zahájení pro časové období | Datum |
| endDate | Datum ukončení pro časové období | Datum |
| ds | Datové sady, parametr lze opakovat | ID |
| standardní odchylka | Počet směrodatných odchylek od průměru | Číselná hodnota |

### Analýza odlehlých hodnot založená na minimální / maximální hodnotě { #webapi_data_analysis_min_max_outlier } 

Identifikace odlehlých dat na základě min / max hodnot:

    GET /api/dataAnalysis/minMaxOutlier

The supported query parameters are equal to the *std dev based outlier
analysis* resource described above.

### Následná analýza dat { #follow-up-data-analysis } 

Identifikace údajů označených pro následnou kontrolu:

    GET /api/dataAnalysis/followup

Musí být definována alespoň jedna datová sada nebo datový prvek, počáteční a koncové datum nebo období a alespoň jedna organizační jednotka.

Jsou podporovány následující parametry dotazu.

| Parametr  | Popis                                                  | Povinné | Možnosti (nejprve výchozí)                   |
| ---------- | ------------------------------------------------------------ | --------- | ----------------------------------------- |
| ou         | Organizační jednotka, lze zadat vícekrát.          | Ano       | Identifikátor organizační jednotky.             |
| ds         | Datová sada, lze zadat vícekrát.                   | č. [*]    | Identifikátor datové sady.                      |
| de         | Datový prvek, lze zadat vícekrát.               | č. [*]    | Identifikátor datového prvku.                  |
| startDate  | Datum zahájení intervalu pro kontrolu odlehlých hodnot.               | č. [*]    | Datum (rrrr-MM-dd).                        |
| endDate    | Datum ukončení intervalu pro kontrolu odlehlých hodnot.                 | č. [*]    | Datum (rrrr-MM-dd).                        |
| pe         | ID období ISO.                                               | č. [*]    | Období ISO ID.                        |
| peType     | ISO období.                                                  | č. [*]    | Řetězec ISO období.                        |
| coc        | Kombinace možností kategorie, lze zadat vícekrát.     | Ne        | Kombinovaný identifikátor možností kategorie.         |
| maxResults | Maximální limit pro výstup.                                    | Ne        | Celé číslo větší než nula. Výchozí: 50.  |

[*]  You must specify either data sets with the `ds` parameter, which will include all data elements in the data sets, _or_ specify data elements with the `de` parameter.
     Equally, either `startDate` and `endDate` _or_ `period` must be specified.

The `startDate` and `endDate` parameters refer to the time interval for which you want to detect outliers.
If a period `pe` is provided instead the interval start and end is that of the period.

Pokud nejsou zadány žádné kombinace voleb `coc`, berou se v úvahu všechny datové prvky typu číselné hodnoty.


## Integrita dat { #webapi_data_integrity } 

The data integrity capabilities of the data administration module are
available through the web API. This section describes how to run the
data integrity process and retrieve the results. The specific
details regarding each check are described in the user manual.

### Výpis dostupných kontrol integrity dat { #webapi_data_integrity_list }
A description of the available checks is returned by a request to:

    GET /api/dataIntegrity

```
[
    {
        "name": "data_elements_without_groups",
        "displayName": "Data elements lacking groups",
        "section": "Data Elements",
        "severity": "WARNING",
        "description": "Lists all data elements that have no data element groups",
        "issuesIdType": "dataElements",
        "isSlow": false
    }
]
```

The `name` member of the returned check elements is the identifier used for the
`checks` parameter to declare the set of checks to run.

> **Note**
> 
> Each check will indicate whether it may require significant time and resources to complete with the `isSlow` field. 
> Users should be cautious about running these
> checks on production systems as they could lead to decreased performance. 
> These checks can be run individually, but will 
> not be run unless specifically requested.

Checks are grouped semantically by the `section` member and categorised in 
one of four `severity` levels:

| Závažnost | Popis                                                                                                                   |
| -------- |-------------------------------------------------------------------------------------------------------------------------------|
| INFO     | Označuje, že toto je pouze pro informaci.                                                                                  |
| VAROVÁNÍ  | A warning indicates that this may be a problem, but not necessarily an error. It is however recommended to triage these issues. |
| TĚŽKÉ   | An error that should be fixed but which may not necessarily lead to the system not functioning.                               |
| KRITICKÉ | An error that must be fixed and which may lead to end-user error or system crashes.                                           |

Dostupné kontroly lze filtrovat pomocí parametru `checks`.

    GET /api/dataIntegrity?checks=<pattern1>,<pattern2>

One or more exact names or patterns using `*` as a wildcard can be provided.

Additional results can be filtered using a `section` parameter.

    GET /api/dataIntegrity?section=Categories

The `section` filter will return all exact matches which have the specified section. 

Furthermore, to filter (select) only checks marked as `isSlow` use `slow=true`,

    GET /api/dataIntegrity?slow=true

or to filter (select) only checks that are not performed via database query 
(programmed checks) use `programmatic=true`:

    GET /api/dataIntegrity?programmatic=true

The `slow`, `programmatic` and `section` filters can be combined in which case
all conditions must be met.

### Running data integrity summaries { #webapi_data_integrity_run_summary }

Since version 2.38, data integrity checks have two levels of specificity: 
- a `summary` level that provides an overview of the number of issues
- a `details` level that provides a list of issues pointing to individual data integrity violations.

Chcete-li spustit souhrnnou analýzu pro sadu kontrol:

    POST /api/dataIntegrity/summary?checks=<name1>,<name2>

This triggers a job that runs the check(s) asynchronously. Individual check results
will be returned to the application cache as soon as the check has completed.

Alternatively the list of checks can also be given as BODY of the POST request.
This can be useful if the list becomes to long to be used in the URL.

Chcete-li načíst souhrn dat o integritě spuštěných kontrol(y), použijte:

    GET /api/dataIntegrity/summary?checks=<name1>,<name2>

When the `checks` parameter is omitted, all checks are fetched from the server cache.

The response is a "map" of check results, one for each check that has completed already.
This information is cached for one hour or until the check is rerun.

To wait for the summary to be available in the cache a `timeout` in milliseconds can be added:

    GET /api/dataIntegrity/summary?checks=<name1>,<name2>&timeout=500

An example of a summary response could look like: 
```json
{
  "<name1>": {
    "name": "<name1>",
    "displayName": "<displayName1>",
    "startTime": "2023-01-11T06:12:56.436",
    "finishedTime": "2023-01-11T06:12:57.021",
    "section": "...",
    "severity": "WARNING",
    "description": "...",
    "count": 12,
    "percentage": 2.3
  },
  "<name2>": {
    "name": "<name2>",
    "displayName": "<displayName2>",
    "startTime": "2023-01-11T06:12:57.345",
    "finishedTime": "2023-01-11T06:12:58.007",
    "section": "...",
    "severity": "WARNING",
    "description": "...",
    "count": 4,
    "percentage": 5.1
  }
}
```

Each summary response will contain the `name`, `section`, `severity`, 
`description` and optionally  an `introduction` and `recommendation`.  
Each summary contains the number of issues found in the `count` field. When possible,
an optional `percentage` field will provide the percentage of objects with data
integrity issues when compared to all objects of the same type.
The `startTime` field indicates when the check was initiated. Using the `finishedTime`
the duration which was required to execute the check can be calculated.

Should a check analysis fail due to programming error or unforeseen data inconsistencies
both the summary and the details will have an `error` field describing the error that occurred.
The `count` of any checks which failed will be set to -1. 
No `percentage` will be returned in such cases.

```json
{
  "<name1>": {
    "name": "<name1>",
    "displayName": "<displayName1>",
    "finishedTime": "2022-02-15 14:55",
    "section": "...",
    "severity": "WARNING",
    "description": "...",
    "error": "what has happened",
    "issues": []
  }
}
```

> **Note**
> 
> Each metadata check is run asynchronously on the server.  Results
> will be returned as soon as each check completes. The safest way to ensure 
> that you have retrieved the latest set of results which has been 
> requested is to compare the timestamp of when the request was made
> with the `finishedTime` in the response.

To get a list of the names of checks that are currently being performed by the 
server use:

    GET /api/dataIntegrity/summary/running

To get a list of the names of checks for which results are available already use:

    GET /api/dataIntegrity/summary/completed


### Running data integrity details { #webapi_data_integrity_run_details }

To run a selection of details checks first trigger them using a  `POST` request:

    POST /api/dataIntegrity/details?checks=<name1>,<name2>

Similar to the summary the list of checks can also be given as the POST body.

Poté načtěte výsledky z mezipaměti pomocí:

    GET /api/dataIntegrity/details?checks=<name1>,<name2>&timeout=500

When the `checks` parameter is not provided,  all checks which 
have not been marked as `isSlow` will be scheduled to be run on the server.

Omitting the `timeout` will not wait for results to be found in the cache, 
but instead not have a result for the requested check.

The `/details` response returns a map similar to the `summary`, but does not contain
a `count` or `percentage`. Instead, a list of `issues` is returned.

```json
{
  "<name1>": {
    "name": "<name1>",
    "displayName": "<displayName1>",
    "startTime": "2023-01-11T06:12:56.436",
    "finishedTime": "2023-01-11T06:12:57.021",
    "section": "...",
    "severity": "WARNING",
    "description": "...",
    "issuesIdType": "<object-type-plural>",
    "isSlow": false,
    "issues": [{
      "id": "<id-or-other-identifier>",
      "name": "<name-of-the-id-obj>",
      "comment": "optional plain text description or hint of the issue",
      "refs": ["<id1>", "<id2>"]
    }]
  },
  "<name2>": {
    "name": "<name2>",
    "displayName": "<displayName2>",
    "startTime": "2023-01-11T06:12:57.345",
    "finishedTime": "2023-01-11T06:12:58.007",
    "section": "...",
    "severity": "WARNING",
    "description": "...",
    "issuesIdType": "<object-type-plural>",
    "isSlow": false,
    "issues": []
  }
}
```
Each issue will always have `id` and `name` members.  Often the `issuesIdType`
is available to indicate the type of objects the `id` refers to. If the 
`issuesIdType` is not available, the `id` often is not available either and the
`name` is used for an aggregate key of an issue that has no object equivalent.

The `comment` and `refs` fields are optional for each issue.
A `comment` may provide more context or
insight into why this particular issue is regarded to be a data integrity problem. 
The `refs` list may also give the identifiers of other objects that contributed to the violation.
The `finishedTime` field shows when the particular check finished processing on the server.
The cache will store the result of each completed check for one hour.

> **Tip**
>
> A set of checks can also be specified using wild-cards. To include all 
> checks with _element_ in the name use `checks=*element*`. Like full names 
> such patterns can be used in a comma-separated list and be mixed with full 
> names as well. Duplicates will be eliminated. 
> Also a check can be given by its code. A code consists of the first letters
> of each word in the name as upper case letter. 
> For example, `orgunits_invalid_geometry` has the code `OIG`.

Similar to the summary a set of names of the currently performed and the
already completed details checks can be obtained using:

    GET /api/dataIntegrity/details/running
    GET /api/dataIntegrity/details/completed

### Custom Data Integrity Checks { #custom_data_integrity_checks } 

Users of DHIS2 can now create and supply their own Data Integrity Checks. This can be useful if users
want to avail of this functionality and extend upon the supplied set of core data integrity checks.

> **Tip**
> 
> Users are also encouraged to share their custom checks with others by opening a pull request in the 
> [dhis2-core](https://github.com/dhis2/dhis2-core) repository containing their `.yaml` file(s).
> Please select `platform-backend` as reviewer to put the PR on our radar early on. The team will 
> take care of checking and linking the check correctly, so it becomes part of the provided suite of 
> checks with the next release. 

An example of a custom check could be for determining if certain users are members of specific user groups.
This type of check would be very specific to an implementation, and not generally applicable across all installs.
These types of metadata checks can be used to extend the default checks which are included with DHIS2.

Custom checks can be implemented by satisfying the following requirements, each of which we will go into detail:
- Supplying your own list of custom data integrity checks in a list file named `custom-data-integrity-checks.yaml`
 in your `DHIS2_HOME` directory
- Having a directory named `custom-data-integrity-checks` in your `DHIS2_HOME` directory
- Supplying your valid custom data integrity check yaml files

#### Custom Data Integrity Check List File { #custom-data-integrity-check-list-file } 

DHIS2 will only try to load data integrity files when they are needed. e.g. when making a call to view all
data integrity checks:

    GET /api/dataIntegrity

DHIS2 will look for a file named `custom-data-integrity-checks.yaml` in your `DHIS2_HOME` directory when loading
data integrity files. If you are not using custom checks and the file is not present, a warning log like this will
be present:

```text
08:29:57.729  WARN o.h.d.d.DataIntegrityYamlReader: Failed to load data integrity check from YAML. Error message `{DHIS2_HOME}/custom-data-integrity-checks.yaml (No such file or directory)
```

If you are implementing custom data integrity checks then this file must be present. To see what the core data integrity checks
file looks like as an example, check out [this file](https://github.com/dhis2/dhis2-core/blob/master/dhis-2/dhis-services/dhis-service-administration/src/main/resources/data-integrity-checks.yaml).


The `custom-data-integrity-checks.yaml` file should list all of your custom data integrity checks.
As an example, it could look something like this:

```yaml
checks:
  - categories/my_custom_check.yaml
  - users/my_user_group_check.yaml
  - base_check.yaml
```

Check names in this file can be preceded with a directory name for logical grouping. From the 3 example checks listed 
above, the directory structure should look like this:

```
├── DHIS2_HOME
│   ├── dhis.conf
│   ├── custom-data-integrity-checks.yaml
│   ├── custom-data-integrity-checks
│   │   ├── categories
│   │   │   ├── my_custom_check.yaml
│   │   ├── users
│   │   │   ├── my_user_group_check.yaml
│   │   ├── base_check.yaml
```

#### Name and Code constraints { #name-and-code-constraints } 

Each data integrity check `name` and `code` must be unique. If there are any clashes then the violating custom
check will not be loaded.

> **Note**
>
> System data integrity checks are always loaded first. Any name or code clashes resulting from
> custom checks will not affect these core system checks.

An example data integrity check yaml file is located [here](https://github.com/dhis2/dhis2-core/blob/master/dhis-2/dhis-services/dhis-service-administration/src/main/resources/data-integrity-checks/orgunits/orgunits_orphaned.yaml)
for reference. Note the `name` property.

The data integrity `code` is calculated dynamically by using the first letter of each word in the `name`. Some examples:

| Název                   | Kód |
|------------------------|------|
| my_custom_check        | MCC  |
| my_second_custom_check | MSCC |
| another_custom_check   | ACC  |

If there is a `name` clash, a warning log like this will be present:
```text
09:48:43.138  WARN o.h.d.d.DefaultDataIntegrityService: Data Integrity Check `my_custom_check` not added as a check with that name already exists
```

If there is a `code` clash, a warning log like this will be present:
```text
09:48:43.138  WARN o.h.d.d.DefaultDataIntegrityService: Data Integrity Check `my_custom_check` not added as a check with the code `MCC` already exists
```

#### Data Integrity Check Schema { #data-integrity-check-schema } 

A data integrity check file must comply with this [JSON schema](https://github.com/dhis2/dhis2-core/blob/master/dhis-2/dhis-services/dhis-service-administration/src/main/resources/data-integrity-checks/integrity_check_schema.json).
If a check does not comply with the schema then a warning like this will be present:
```text
09:48:43.136  WARN o.h.d.d.DataIntegrityYamlReader: JsonSchema validation errors found for Data Integrity Check `categories/my_custom_check.yaml`. Errors: [$.name: is missing but it is required]
```

Any schema violations must be fixed before that check can be loaded and used.

If a data integrity check file contains invalid yaml then a warning log like this could be present:
```text
10:30:37.858  WARN o.h.d.d.DataIntegrityYamlReader: JsonSchema validation errors found for Data Integrity Check `my_custom_check.yaml`. Errors: [$: string found, object expected]
```

To view and use the custom checks please refer to the main [Data Integrity section](#webapi_data_integrity)

> **Note**
>
> It is recommended to follow any naming and format conventions seen in the provided examples above when implementing
> your own custom checks to help avoid any issues

#### Data Integrity File { #data-integrity-file } 

Details of the data integrity check yaml file, taken from the JSON schema file

| property        | Vyžadováno | info                                                                                                                          |
|-----------------|----------|-------------------------------------------------------------------------------------------------------------------------------|
| název            | yes      | unique name of the check                                                                                                      |
| popis     | yes      | popis                                                                                                                   |
| sekce         | yes      | used for logical grouping of checks e.g. categories, users                                                                    |
| section_order   | yes      | the order of the check when displayed in the UI                                                                               |
| summary_sql     | yes      | an SQL query which should return a single result which represents the total count of issues                                   |
| details_sql     | yes      | an SQL query which should return a list of identified objects from this particular issue. Should return at least uid and name |
| details_id_type | yes      | a short string which identifies the section of the details SQL                                                                |
| severity        | yes      | level of severity of the issue. One of [INFO, WARNING, SEVERE, CRITICAL]                                                      |
| introduction    | yes      | outlining the objective of the check                                                                                          |
| recommendation  | yes      | outlining how to resolve identified issues                                                                                    |

### Example custom data integrity check { #example-custom-data-integrity-check } 


An example of a custom check could be for determining if users have an email. Emails are useful to be
able to communicate with users and sent them notifications, as well as password recovery. So, in some
instllations of DHIS2, it could be a policy that all users should have emails. An example of this type
of custom check is shown below.

```
---
name: users_should_have_emails
description: Users should have emails.
section: Users
section_order: 6
summary_sql: >-
  WITH users_no_email as (
  SELECT uid,username from
  userinfo where email IS NULL)
  SELECT COUNT(*) as value,
  100*COUNT(*) / NULLIF( ( select COUNT(*) from userinfo), 0) as percent
  from users_no_email;
details_sql: >-
  WITH users_no_email as (
  SELECT uid,username from
  userinfo where email IS NULL)
  SELECT uid,username as from users_no_email;
severity: WARNING
introduction: >
  Users should have defined emails. This is important for password recovery and to be able
  to send notifications to users.
recommendation: >
  Make sure that all users have defined emails.
details_id_type: users
```

More examples of different types of metadata integrity checks can be found in the DHIS2 source code [here](https://github.com/dhis2/dhis2-core/tree/master/dhis-2/dhis-services/dhis-service-administration/src/main/resources/data-integrity-checks).

## Dokončená registrace datových sad { #webapi_complete_data_set_registrations }

This section is about complete data set registrations for data sets. A
registration marks as a data set as completely captured.

### Dokončení datových sad { #webapi_completing_data_sets }

This section explains how to register data sets as complete. This is
achieved by interacting with the *completeDataSetRegistrations*
resource:

    GET /api/33/completeDataSetRegistrations

The endpoint supports the *POST* method for registering data set
completions. The endpoint is functionally very similar to the
*dataValueSets* endpoint, with support for bulk import of complete
registrations.

Importing both *XML* and *JSON* formatted payloads are supported. The
basic format of this payload, given as *XML* in this example, is like
so:

```xml
<completeDataSetRegistrations xmlns="http://dhis2.org/schema/dxf/2.0">
  <completeDataSetRegistration period="200810" dataSet="eZDhcZi6FLP"
    organisationUnit="qhqAxPSTUXp" attributeOptionCombo="bRowv6yZOF2" storedBy="imported"/>
  <completeDataSetRegistration period="200811" dataSet="eZDhcZi6FLP"
    organisationUnit="qhqAxPSTUXp" attributeOptionCombo="bRowv6yZOF2" storedBy="imported"/>
</completeDataSetRegistrations>
```

The *storedBy* attribute is optional (as it is a nullable property on
the complete registration object). You can also optionally set the
*date* property (time of registration) as an attribute. It the time is
not set, the current time will be used.

Proces importu podporuje následující parametry dotazu:



Tabulka: Parametry dotazu na registraci kompletní datové sady

| Parametr | Hodnoty | Popis |
|---|---|---|
| dataSetIdScheme | id &#124; jméno &#124; kód &#124; atribut:ID | Vlastnost datové sady, která se má použít k mapování úplných registrací. |
| orgUnitIdScheme | id &#124; jméno &#124; kód &#124; atribut:ID | Vlastnost organizační jednotky, která se má použít k mapování úplných registrací. |
| attributeOptionComboIdScheme | id &#124; jméno &#124; kód &#124; atribut:ID | Vlastnost kombinací možností atributů, které se mají použít k mapování úplných registrací. |
| idScheme | id &#124; jméno &#124; kód &#124; atribut:ID | Vlastnost všech objektů včetně datových sad, organizačních jednotek a kombinací možností atributů, které se mají použít k mapování kompletních registrací. |
| preheatCache | false &#124; true | Zda uložit změny na serveru nebo jen vrátit souhrn importu. |
| dryRun | false &#124; true | Zda se registrace vztahuje na dílčí jednotky |
| importStrategy | CREATE &#124; UPDATE &#124; CREATE_AND_UPDATE &#124; DELETE | Uložit objekty všech, nový nebo aktualizovat stav importu na server. |
| skipExistingCheck | false &#124; true | Přeskočit kontroly existujících úplných registrací. Zlepšuje výkon. Použijte pouze pro prázdné databáze nebo když registrace k importu ještě neexistují. |
| async | false &#124; true | Označuje, zda má být import proveden asynchronně nebo synchronně. První z nich je vhodný pro velmi velké importy, protože zajišťuje, že požadavek nevyprší, ačkoli má značnou režii na výkon. Druhý je rychlejší, ale vyžaduje, aby připojení přetrvávalo, dokud nebude proces dokončen. |

The `idScheme`, `dataSetIdScheme`, `orgUnitIdScheme`, `attributeOptionComboIdScheme`, 
`dryRun` and `strategy` (note the dissimilar naming to parameter `importStrategy`) 
can also be set as part of the payload.
In case of XML these are attributes, in case of JSON these are members in the
`completeDataSetRegistrations` node.

Například:
```xml
<completeDataSetRegistrations xmlns="http://dhis2.org/schema/dxf/2.0"
      orgUnitIdScheme="CODE">
    <completeDataSetRegistration period="200810" dataSet="eZDhcZi6FLP"
    organisationUnit="OU_559" attributeOptionCombo="bRowv6yZOF2" storedBy="imported"/>
</completeDataSetRegistrations>
```

Should both URL parameter and payload set a scheme the payload takes precedence. 

### Čtení registrací úplných datových sad { #webapi_reading_complete_data_sets } 

This section explains how to retrieve data set completeness
registrations. We will be using the *completeDataSetRegistrations*
resource. The query parameters to use are these:



Tabulka: Parametry dotazu sady hodnot dat

| Parametr | Popis |
|---|---|
| dataSet | Identifikátor datové sady, více datových sad je povoleno |
| period | Identifikátor období ve formátu ISO. Je povoleno více období. |
| startDate | Datum zahájení pro časové rozpětí hodnot k exportu |
| endDate | Datum ukončení pro časové rozpětí hodnot k exportu |
| created | Zahrňte pouze registrace, které byly vytvořeny od daného časového razítka |
| createdDuration | Include only registrations which were created within the given duration. The format is <value\><time-unit\>, where the supported time units are "d", "h", "m", "s" *(days, hours, minutes, seconds).* The time unit is relative to the current time. |
| orgUnit | Identifikátor organizační jednotky, lze zadat vícekrát. Nelze použít, pokud je zadáno orgUnitGroup. |
| orgUnitGroup | Identifikátor skupiny organizační jednotky, lze zadat vícekrát. Nelze použít, pokud je uvedena orgUnit. |
| children | Zda zahrnout podřazené do hierarchie organizačních jednotek |
| limit | Maximální počet registrací, které lze zahrnout do odpovědi. |
| idScheme | Vlastnost identifikátoru použitá pro objekty metadat v odpovědi. |
| dataSetIdScheme | Vlastnost identifikátoru použitá pro datové sady v odpovědi. Přepíše idScheme. |
| orgUnitIdScheme | Vlastnost identifikátoru použitá pro organizační jednotky v odpovědi. Přepíše idScheme. |
| attributeOptionComboIdScheme | Vlastnost identifikátoru použitá pro kombinace možností atributu v odpovědi. Přepíše idScheme. |
Parametry `dataSet` a `orgUnit` lze opakovat, aby bylo možné zahrnout více sad dat a organizačních jednotek.

The `period`, `startDate`,  `endDate`, `created` and `createdDuration` parameters provide multiple ways to set the time dimension for the request, thus only
one can be used. For example, it doesn't make sense to both set the start/end date and to set the periods.

Příklad požadavku vypadá takto:

```bash
GET /api/33/completeDataSetRegistrations?dataSet=pBOMPrpg1QX
  &startDate=2014-01-01&endDate=2014-01-31&orgUnit=YuQRtpLP10I
  &orgUnit=vWbkYPRmKyS&children=true
```

You can get the response in *xml* and *json* format. You can indicate which response format you prefer through the *Accept* HTTP header like
in the example above. For xml you use *application/xml*; for json you use *application/json*.

### Zrušení dokončení datových sad { #webapi_uncompleting_data_sets } 

Tato část vysvětluje, jak můžete zrušit registraci úplnosti datové sady. Chcete-li zrušit dokončení datové sady, budete pracovat s prostředkem completeDataSetRegistrations:

    GET /api/33/completeDataSetRegistrations

This resource supports *DELETE* for un-registration. The following query
parameters are supported:



Tabulka: Parametry dotazu na registraci kompletní datové sady

| Parametr dotazu | Požadované | Popis |
|---|---|---|
| ds | Ano | Identifikátor datové sady |
| pe | Ano | Identifikátor období |
| ou | Ano | Identifikátor organizační jednotky |
| cc | Ne (nutno kombinovat s cp) | Kombinovaný identifikátor atributů (pro kontrolu uzamčení) |
| cp | Ne (nutno kombinovat s cp) | Identifikátory možností atributů oddělené ; pro více hodnot (pro kontrolu uzamčení) |
| multiOu | Ne (výchozí hodnota false) | Zda se registrace vztahuje na dílčí jednotky |



# Schválení dat { #data-approval } 

## Schválení dat { #webapi_data_approval } 

Tato část vysvětluje, jak schválit, zrušit schválení a zkontrolovat stav schválení pomocí prostředku *dataApprovals*. Schvalování se provádí podle pracovního postupu schvalování dat, období, organizační jednotky a kombinace možností atributů.

    /api/33/dataApprovals

Pracovní postup schválení dat je přidružen k několika entitám:

* Typ období, který určuje četnost schválení
* Volitelná kombinace kategorií
* Jedna nebo více úrovní schválení dat, které jsou součástí pracovního postupu
* Jedna nebo více datových sad, které se používají pro sběr dat

### Získejte stav schválení { #webapi_data_approval_get_status } 

Chcete-li získat informace o schválení sady dat, můžete vystavit požadavek GET:

    /api/dataApprovals?wf=rIUL3hYOjJc&pe=201801&ou=YuQRtpLP10I



Tabulka: Parametry dotazu na schválení dat

| Parametr dotazu | Požadované | Popis |
|---|---|---|
| wf | Ano | Identifikátor pracovního postupu schválení dat |
| pe | Ano | Identifikátor období |
| ou | Ano | Identifikátor organizační jednotky |
| aoc | Ne | Identifikátor kombinace možnosti atributu |

> **Poznámka**
>
> Z důvodu zpětné kompatibility může být pro pracovní tok v tomto a dalších požadavcích na schválení dat, jak je popsáno níže, místo parametru `wf` uveden parametr `ds`. Pokud je zadána datová sada, použije se pracovní postup přidružený k této datové sadě.

To způsobí odpověď podobnou této:

```json
{
  "mayApprove": false,
  "mayUnapprove": false,
  "mayAccept": false,
  "mayUnaccept": false,
  "state": "APPROVED_HERE",
  "approvedBy": "User A",
  "approvedAt": "2022-01-13T12:56:07.005",
  "acceptedBy": "User A",
  "acceptedAt": "2022-01-13T12:56:07.005"
}
```

Vrácené parametry jsou:

Tabulka: Vrácené parametry schválení dat

| Návratový parametr | Popis |
|---|---|
| mayApprove        | Zda může aktuální uživatel schválit tento výběr dat. |
| mayUnapprove      | Zda může aktuální uživatel zrušit schválení tohoto výběru dat. |
| mayAccept         | Zda může aktuální uživatel přijmout tento výběr dat. |
| mayUnaccept       | Zda může aktuální uživatel odmítnout tento výběr dat. |
| stav             | Jeden z údajů o schválení uvádí z níže uvedené tabulky. |
| approvedBy        | Pokud je výběr schválen a je-li přítomen (není vždy potřeba), jméno uživatele, který toto schválení provedl. |
| approvedAt        | Pokud je výběr schválen a je-li přítomen (není vždy potřeba), datum a čas, kdy byla vytvořena nejvyšší úroveň schválení. |
| acceptedBy        | Pokud je výběr schválen a je-li přítomen (ne vždy potřeba), jméno uživatele, který provedl poslední aktualizaci. |
| acceptedAt        | Pokud je výběr schválen a je-li přítomen (ne vždy potřeba), datum a čas, kdy byla nejvyšší úroveň schválení naposledy aktualizována. |


Tabulka: Stavy schválení dat

| Stav | Popis |
|---|---|
| UNAPPROVABLE | Schválení dat se na tento výběr nevztahuje. (Údaje nejsou ani schválené, ani neschválené.) |
| UNAPPROVED_WAITING | Data pro tento výběr mohou být schválena, ale před schválením čekají na schválení nižší úrovně. |
| UNAPPROVED_ELSEWHERE | Data nejsou schválena a čekají na schválení někde jinde (zde nelze schválit.) |
| UNAPPROVED_READY | Data nejsou schválena a jsou připravena ke schválení pro tento výběr. |
| APPROVED_HERE | Data jsou schválena a byla zde schválena (zde tedy mohla být zrušena). |
| APPROVED_ELSEWHERE | Data is approved, but was not approved here (so cannot be unapproved here.) This covers the following cases: <br> * Data is approved at a higher level.<br> * Data is approved for wider scope of category options.<br> * Data is approved for all sub-periods in selected period.<br>  In the first two cases, there is a single data approval object that covers the selection. In the third case there is not. |
| ACCEPTED_HERE | Zde jsou data schválena a přijata (zde tedy mohou být zrušena). |
| ACCEPTED_ELSEWHERE | Data jsou schválena a přijata, ale jinde. |

Upozorňujeme, že při dotazování na stav schválení dat můžete určit libovolnou kombinaci parametrů dotazu. Kombinace, kterou zadáte, nemusí popisovat místo, kde mají být údaje schváleny na jedné ze úrovní schválení. Například:

  - The organisation unit might not be at an approval level. The
    approval status is determined by whether data is approved at an
    approval level for an ancestor of the organisation unit.

  - Můžete zadat jednotlivé možnosti kategorií atributů. Schválení
    stav je určen tím, zda jsou data pro atribut schválena
    kombinace možností kategorie, která zahrnuje jednu nebo více z nich
    options.

  - You may specify a time period that is longer than the period for the
    data set at which the data is entered and approved. The approval
    status is determined by whether the data is approved for all the
    období datových souborů ve vámi určeném období.

For data sets which are associated with a category combo you might want
to fetch data approval records for individual attribute option combos
from the following resource with a GET request:

    /api/dataApprovals/categoryOptionCombos?wf=rIUL3hYOjJc&pe=201801&ou=YuQRtpLP10I

### Hromadně získat stav schválení { #bulk-get-approval-status } 

Chcete-li získat seznam několika stavů schválení, můžete vystavit požadavek GET podobný tomuto:

    /api/dataApprovals/approvals?wf=rIUL3hYOjJc&pe=201801,201802&ou=YuQRtpLP10I

Parametry `wf`, `pe`, `ou` a `aoc` jsou stejné jako pro získání jediného stavu schválení, kromě toho, že pro každý parametr můžete poskytnout seznam jedné nebo více hodnot oddělených čárkami.

Získáte odpověď obsahující seznam parametrů schválení a stavů, například:

```json
[
  {
    "aoc": "HllvX50cXC0",
    "pe": "201801",
    "level": "KaTJLhGmU95",
    "ou": "YuQRtpLP10I",
    "permissions": {
      "mayApprove": false,
      "mayUnapprove": true,
      "mayAccept": true,
      "mayUnaccept": false,
      "mayReadData": true,
      "approvedBy": "User A",
      "approvedAt": "2022-01-13T12:56:07.005",
      "acceptedBy": "User A",
      "acceptedAt": "2022-01-13T12:56:07.005"      
    },
    "state": "APPROVED_HERE",
    "wf": "rIUL3hYOjJc"
  },
  {
    "aoc": "HllvX50cXC0",
    "pe": "201802",
    "ou": "YuQRtpLP10I",
    "permissions": {
      "mayApprove": true,
      "mayUnapprove": false,
      "mayAccept": false,
      "mayUnaccept": false,
      "mayReadData": true
    },
    "state": "UNAPPROVED_READY",
    "wf": "rIUL3hYOjJc"
  }
]
```

Vrácená pole jsou popsána v tabulce níže.

| Pole       | Popis |
| ----------- | ----------- |
| aoc         | Identifikátor kombinace možnosti atributu |
| pe          | Identifikátor období |
| ou          | Identifikátor organizační jednotky |
| oprávnění | Oprávnění: stejné definice jako pro získání stavu jediného schválení (viz tabulka _Vrácené parametry schválení dat_) . |
| stav       | Jeden ze stavů schválení dat (stejný jako u stavu získání jediného schválení.) |
| wf          | Identifikátor pracovního postupu schválení dat |

### Schválit data { #webapi_data_approval_approve_data } 

To approve data you can issue a *POST* request to the *dataApprovals*
resource. To un-approve data, you can issue a *DELETE* request to the
dataApprovals resource.

    POST DELETE /api/33/dataApprovals

To accept data that is already approved you can issue a *POST* request
to the *dataAcceptances* resource. To un-accept data, you can issue a
*DELETE* request to the *dataAcceptances* resource.

    POST DELETE /api/33/dataAcceptances

Tyto požadavky obsahují následující parametry:



Tabulka: Parametry akce schválení dat

| Parametr akce | Požadované | Popis |
|---|---|---|
| wf | Ano | Identifikátor pracovního postupu schválení dat |
| pe | Ano | Identifikátor období |
| ou | Ano | Identifikátor organizační jednotky |
| aoc | Ne | Identifikátor kombinace možnosti atributu |

Note that, unlike querying the data approval status, you must specify
parameters that correspond to a selection of data that could be
approved. In particular, both of the following must be true:

  - The organisation unit's level must be specified by an approval level
    v pracovním postupu.

  - The time period specified must match the period type of the
    workflow.

### Hromadně schvalovat data { #webapi_data_approval_bulk_approve_data } 

Hromadné datové záznamy můžete schválit odesláním do zdroje `/api/dataApprovals/approvals`.

    POST /api/33/dataApprovals/approvals

You can unapprove a bulk of data records by posting to the
`/api/dataApprovals/unapprovals` resource.

    POST /api/33/dataApprovals/unapprovals

You can accept a bulk of records by posting to the
`/api/dataAcceptances/acceptances` resource.

    POST /api/33/dataAcceptances/acceptances

Většinu záznamů můžete zrušit odesláním na
zdroj `/api/dataAcceptances/unacceptances`.

    POST /api/33/dataAcceptances/unacceptances

Schválení datového obsahu je podporováno jako JSON a vypadá takto:

```json
{
  "wf": [
    "pBOMPrpg1QX", "lyLU2wR22tC"
  ],
  "pe": [
    "201601", "201602"
  ],
  "approvals": [
    {
      "ou": "cDw53Ej8rju",
      "aoc": "ranftQIH5M9"
    },
    {
      "ou": "cDw53Ej8rju",
      "aoc": "fC3z1lcAW5x"
    }
  ]
}
```

### Získejte úrovně schválení dat { #get-data-approval-levels } 

To retrieve data approval workflows and their data approval levels you
can make a GET request similar to this:

    /api/dataApprovalWorkflows?
      fields=id,name,periodType,dataApprovalLevels[id,name,level,orgUnitLevel]


### Authorities for data approval { #authorities-for-data-approval } 

- `F_DATA_APPROVAL_WORKFLOW` : povolit uživateli přidat / aktualizovat pracovní postup schvalování dat
- `F_DATA_APPROVAL_LEVEL` : povolit uživateli přidat / aktualizovat úroveň schválení dat


# Sdílení { #sharing } 

## Sdílení { #webapi_sharing } 

Řešení pro sdílení umožňuje sdílet většinu objektů v systému s konkrétními skupinami uživatelů a definovat, zda mají být objekty veřejně přístupné nebo soukromé. Chcete-li získat a nastavit stav sdílení pro objekty, můžete komunikovat s prostředkem *sdílení*.

    /api/33/sharing

### Získejte stav sdílení { #webapi_get_sharing_status } 

Chcete-li požádat o stav sdílení objektu, použijte požadavek GET k:

    /api/33/sharing?type=dataElement&id=fbfJHSPpUQD

Odpověď vypadá jako níže.

```json
{
  "meta": {
    "allowPublicAccess": true,
    "allowExternalAccess": false
  },
  "object": {
    "id": "fbfJHSPpUQD",
    "name": "ANC 1st visit",
    "publicAccess": "rw------",
    "externalAccess": false,
    "user": {},
    "userGroupAccesses": [
      {
        "id": "hj0nnsVsPLU",
        "access": "rw------"
      },
      {
        "id": "qMjBflJMOfB",
        "access": "r-------"
      }
    ]
  }
}
```

### Nastavit stav sdílení { #webapi_set_sharing_status } 

Stav sdílení můžete definovat pro objekt pomocí stejné adresy URL s požadavkem POST, kde datový obsah ve formátu JSON vypadá takto:

```json
{
  "object": {
    "publicAccess": "rw------",
    "externalAccess": false,
    "user": {},
    "userGroupAccesses": [
      {
        "id": "hj0nnsVsPLU",
        "access": "rw------"
      },
      {
        "id": "qMjBflJMOfB",
        "access": "r-------"
      }
    ]
  }
}
```

V tomto příkladu datový obsah definuje objekt, který má veřejný přístup pro čtení a zápis, žádný externí přístup (bez přihlášení), přístup pro čtení a zápis do jedné skupiny uživatelů a přístup pouze pro čtení k jiné skupině uživatelů. Toto můžete odeslat do zdroje sdílení pomocí výrazu curl:

```bash
curl -d @sharing.json "localhost/api/33/sharing?type=dataElement&id=fbfJHSPpUQD"
  -H "Content-Type:application/json" -u admin:district
```
**Poznámka**
> It is possible to create surprising sharing combinations. For
> instance, if `externalAccess` is set to `true` but `publicAccess` is
> set to `--------`, then users will have access to the object 
> only when they are logged out.




## New Sharing object { #new-sharing-object } 
From 2.36 a new `sharing` property has been introduced in order to replace the old sharing properties `userAccesses`, `userGroupAccesses`, `publicAccess`, `externalAccess` in all metadata classes that have sharing enabled. This `Sharing` object is saved as a JSONB column in database. 
However, in order make it backward compatible the old sharing objects still work normally as before, for both import and export. In backend sharing data will be saved to new  JSONb `sharing` column instead of the old `*accesses` tables.

Formát vypadá takto:
```json
{
  "name": "ANC 1st visit",
  "publicAccess": "rw------",
  "externalAccess": false,
  "userGroupAccesses": [
      {
          "access": "r-r-----",
          "userGroupUid": "Rg8wusV7QYi",
          "displayName": "HIV Program Coordinators",
          "id": "Rg8wusV7QYi"
      }
  ],
  "userAccesses": [],
  "user": {
      "displayName": "Tom Wakiki",
      "name": "Tom Wakiki",
      "id": "GOLswS44mh8",
      "username": "system"
  },
  "sharing": {
      "owner": "GOLswS44mh8",
      "external": false,
      "users": {},
      "userGroups": {
          "Rg8wusV7QYi": {
              "access": "r-r-----",
              "id": "Rg8wusV7QYi"
          }
      },
      "public": "rw------"
  }
}
```

### Set sharing status using new JSON Patch Api { #webapi_set_sharing_status_using_json_patch_api } 
K aktualizaci sdílení objektu můžete použít [JSON Patch API](#webapi_partial_updates) k aktualizaci sdílení objektu odesláním požadavku `PATCH` tomuto koncovému bodu se záhlavím `Content-Type: application/json-patch+json`
```
api/dataElements/fbfJHSPpUQD
```
Please note that this function ***only supports*** new `sharing` format. The payload in JSON format looks like this:
```json
[
  {
    "op": "replace",
    "path": "/sharing/users",
    "value": {
      "NOOF56dveaZ": {
        "access": "rw------",
        "id": "NOOF56dveaZ"
      },
      "Kh68cDMwZsg": {
        "access": "rw------",
        "id": "Kh68cDMwZsg"
      }
    }
  }
]
```
Můžete přidat uživatele do vlastnosti `sharing` objektu, jako je tento
```json
[
  {
    "op": "add",
    "path": "/sharing/users",
    "value": {
      "NOOF56dveaZ": {
        "access": "rw------",
        "id": "NOOF56dveaZ"
      },
      "Kh68cDMwZsg": {
        "access": "rw------",
        "id": "Kh68cDMwZsg"
      }
    }
  }
]
```
Takto můžete přidat jednoho uživatele do `sharing`.
```json
[
  {
    "op": "add",
    "path": "/sharing/users/NOOF56dveaZ",
    "value": {
      "access": "rw------",
      "id": "NOOF56dveaZ"
    }
  }
]
```
Tímto způsobem můžete odebrat jednoho uživatele ze `sharing`.
```json
[
  { 
    "op": "remove", 
    "path": "/sharing/users/N3PZBUlN8vq"
  }
]
```

## Cascade Sharing for Dashboard { #cascade-sharing-for-dashboard } 

### Přehled { #overview } 

- `cascadeSharing` is available for Dashboards. This function copies the `userAccesses` and `userGroupAccesses` of a Dashboard to all of the objects in its `DashboardItems`, including `Map`, `EventReport`, `EventChart`, `Visualization`. 
- This function will not copy `METADATA_WRITE` access. The copied `UserAccess` and `UserGroupAccess` will **only** receive the `METADATA_READ` permission. 
- Nastavení `publicAccess` ovládacího panelu se nezkopíruje.
- Pokud má jakýkoli cílový objekt povolen `publicAccess`, bude přeskočen a nebude přijímat `UserAccesses` nebo `UserGroupAccesses` z ovládacího panelu.
- Aktuální uživatel musí mít oprávnění ke sdílení `METADATA_READ` se všemi cílovými objekty. Pokud tak uživatel neučiní, je vyvolána chyba `E5001`.
- Aktuální uživatel musí mít oprávnění ke sdílení `METADATA_WRITE`, aby mohl aktualizovat jakékoli cílové objekty. Pokud by měl být cílový objekt aktualizován a uživatel toto oprávnění nemá, vyvolá se chyba `E3001`.

### Sample use case { #sample-use-case } 

- DashboardA is shared to userA with `METADATA_READ_WRITE` permission. 
- DashboardA má VisualizationA, která má DataElementA.
- VisualizationA, DataElementA have `publicAccess` *disabled* and are *not shared* to userA.
- Po provedení kaskádového sdílení pro DashboardA bude mít uživatelA přístup `METADATA_READ` k VisualizationA a DataElementA.

### API endpoint  { #api-endpoint } 

- Send `POST` request to endpoint 
```
api/dashboards/cascadeSharing/{dashboardUID}
```


### API Parameters { #api-parameters } 

| Název | Výchozí | Popis |
| --- | --- | -- |
| dryRun | false | Pokud je toto nastaveno na `true`, funkce kaskádového sdílení bude pokračovat bez aktualizace jakýchkoli objektů. </br> Odpověď bude obsahovat případné chyby a všechny objekty, které budou aktualizovány. </br> To pomáhá uživateli znát výsledek před skutečným spuštěním funkce kaskádového sdílení.
| atomic | false | Pokud je toto nastaveno na `true`, pak se funkce kaskádového sdílení zastaví a v případě chyby nebude aktualizovat žádné objekty. </br> V opačném případě, pokud je to `false`, funkce se pokusí pokračovat v režimu maximálního úsilí.

Sample response: 

```json
{
  "errorReports": [
    {
      "message": "No matching object for reference. Identifier was s46m5MS0hxu, and object was DataElement.",
      "mainKlass": "org.hisp.dhis.dataelement.DataElement",
      "errorCode": "E5001",
      "errorProperties": [
        "s46m5MS0hxu",
        "DataElement"
      ]
    }
  ],
  "countUpdatedDashBoardItems": 1,
  "updateObjects": {
    "dataElements": [
      {
        "id": "YtbsuPPo010",
        "name": "Measles doses given"
      },
      {
        "id": "l6byfWFUGaP",
        "name": "Yellow Fever doses given"
      }
    ]
  }
}
```

### Response properties: { #response-properties } 

- `errorReports`: zahrnuje všechny chyby během procesu sdílení kaskády.
- `countUpdatedDashBoardItems`: Počet `DashboardItem` bude nebo byl aktualizován v závislosti na režimu `dryRun`.
- `updateObjects`: Seznam všech objektů, které budou nebo byly aktualizovány, závisí na režimu `dryRun`.

## Bulk Sharing patch API { #webapi_bulk_sharing } 
- Rozhraní API pro hromadné sdílení umožňuje použít nastavení sdílení na více objektů metadat. To znamená možnost přidat nebo odebrat mnoho uživatelů a skupin uživatelů k mnoha objektům v jedné operaci API.
- Toto rozhraní API by nemělo podporovat synchronizaci objektů metadat v průběhu času a místo toho by to mělo považovat za jednorázovou operaci.
- Rozhraní API musí respektovat řízení přístupu ke sdílení v tom smyslu, že aktuální uživatel musí mít přístup k úpravě sdílení aktualizovaných objektů.
- Od verze 2.38 byly představeny dva nové koncové body rozhraní API, které umožňují aktualizaci oprav hromadného sdílení, jak je popsáno níže.
- Vezměte prosím na vědomí, že tyto požadavky `PATCH` musí používat hlavičku `Content-type:application/json-patch+json`

### Použití `/api/{object-type}/sharing` s požadavkem `PATCH`
- This endpoint allows user to apply one set of Sharing settings for multiple metadata objects of *one object-type*.
- Všimněte si, že stále podporujeme požadavek JsonPatch pro jeden objekt s koncovým bodem `api/{object-type}/{uid}`. Například stále můžete aktualizovat sdílení DataElement odesláním požadavku PATCH na `api/dataElements/cYeuwXTCPkU/sharing`

Example: 
```
curl -X PATCH -d @payload.json -H "Content-Type: application/json-patch+json" "https://play.dhis2.org/dev/api/dataElements/sharing"
```

### Using `/api/metadata/sharing` with `PATCH` request { #using-apimetadatasharing-with-patch-request } 
- This endpoint allows user to apply Sharing settings for *multiple object-types* in one payload.

Příklad:
```
curl -X PATCH -d @payload.json -H "Content-Type: application/json-patch+json" "https://play.dhis2.org/dev/api/metadata/sharing"
```

## Parameters { #parameters } 
- Oba koncové body patch api mají stejný parametr:

| Název  |  Výchozí  |  Popis  |
| ---- | ---- | -------------------- |
| atomic | false | Pokud je toto nastaveno na hodnotu true, pak se dávková funkce zastaví a nebude aktualizovat žádné objekty, pokud dojde k chybě <br> V opačném případě, pokud je tato hodnota nepravda, funkce se pokusí pokračovat v režimu maximálního úsilí. |


## Validation { #validation } 
- Existence všech ID objektů bude ověřena.
- Aktuální uživatel musí mít oprávnění ke čtení / zápisu metadat pro aktualizaci objektů.
- Budou také použita všechna stávající ověření ze služby importu metadat.

## Odpověď { #response }
- Formát odpovědi by měl být stejný jako z `/api/metadata` api.

## Payload formats { #payload-formats } 
- Užitná zátěž pro jeden typ objektu pomocí `/api/{object-type}/sharing` vypadá takto
```json
{
  "dataSets":[
    "cYeuwXTCPkU",
    "aYeuwXTCPkU"
  ],
  "patch":[
    {
      "op":"add",
      "path":"/sharing/users/DXyJmlo9rge",
      "value":{
        "access":"rw------",
        "id":"DXyJmlo9rge"
      }
    },
    {
      "op":"remove",
      "path":"/sharing/users/N3PZBUlN8vq"
    }
  ]
}
```

- Užitná zátěž pro více typů objektů v jedné užitečné zátěži pomocí `api/metadata/sharing`
```json
{
  "dataElements": {
    "fbfJHSPpUQD": [
      {
        "op": "replace",
        "path": "/sharing/users",
        "value": {
          "NOOF56dveaZ": {
            "access": "rw------",
            "id": "CotVI2NX0rI"
          },
          "Kh68cDMwZsg": {
            "access": "rw------",
            "id": "DLjZWMsVsq2"
          }
        }
      }
    ]
  },
  "dataSets": {
    "cYeuwXTCPkA": [
      {
        "op": "remove",
        "path": "/sharing/users/N3PZBUlN8vq"
      }
    ],
    "cYeuwXTCPkU": [
      {
        "op": "add",
        "path": "/sharing/users/DXyJmlo9rge",
        "value": {
          "access": "rw------",
          "id": "DXyJmlo9rge"
        }
      }
    ]
  },
  "programs": {
    "GOLswS44mh8": [
      {
        "op": "add",
        "path": "/sharing/userGroups",
        "value": {
          "NOOF56dveaZ": {
            "access": "rw------",
            "id": "NOOF56dveaZ"
          },
          "Kh68cDMwZsg": {
            "access": "rw------",
            "id": "Kh68cDMwZsg"
          }
        }
      }
    ]
  }
}
```


# Plánování { #webapi_scheduling }

## Get available job types { #types }

Chcete-li získat seznam všech dostupných typů úloh, můžete použít následující koncový bod:

    GET /api/jobConfigurations/jobTypes

Odpověď obsahuje informace o každém typu úlohy, včetně názvu, typu úlohy, klíče, typu plánování a dostupných parametrů. Typ plánování může být buď `CRON`, což znamená, že úlohy lze naplánovat pomocí výrazu cron s polem `cronExpression`, nebo `FIXED_DELAY`, což znamená, že je možné naplánovat spuštění úloh s pevným zpožděním mezi polem `delay`. Zpoždění pole se udává v sekundách.

Odpověď bude vypadat podobně jako tato:

```json
{
  "jobTypes": [
    {
      "name": "Data integrity",
      "jobType": "DATA_INTEGRITY",
      "key": "dataIntegrityJob",
      "schedulingType": "CRON"
    }, {
      "name": "Resource table",
      "jobType": "RESOURCE_TABLE",
      "key": "resourceTableJob",
      "schedulingType": "CRON"
    }, {
      "name": "Continuous analytics table",
      "jobType": "CONTINUOUS_ANALYTICS_TABLE",
      "key": "continuousAnalyticsTableJob",
      "schedulingType": "FIXED_DELAY"
    }
  ]
}
```

## Job Configurations  { #job-configurations } 
DHIS2 umožňuje plánování úloh různých typů. Každý typ úlohy má různé vlastnosti pro konfiguraci, což vám dává lepší kontrolu nad tím, jak jsou úlohy spouštěny. Kromě toho můžete nakonfigurovat stejnou úlohu tak, aby běžela s různými konfiguracemi a v případě potřeby v různých intervalech.

Tabulka: Hlavní vlastnosti

| Vlastnictví | Popis | Typ |
|---|---|---|
| název | Název jobu. | Řetězec |
| cronExpression | Výraz cron, který definuje interval, kdy se má úloha spustit. | Řetězec (výraz Cron) |
| jobType | Typ úlohy představuje, která úloha je spuštěna. V další tabulce můžete získat přehled stávajících typů pracovních míst. Každý typ úlohy může mít specifickou sadu parametrů pro konfiguraci úlohy. | Řetězec (výčet) |
| jobParameters | Parametry úlohy, pokud jsou pro typ úlohy použitelné. | (Viz seznam typů úloh) |
| povoleno | Úlohu lze přidat do systému, aniž by byla naplánována, nastavením `enabled` na hodnotu false v datové části JSON. Tuto možnost použijte, pokud chcete dočasně zastavit plánování úlohy nebo pokud konfigurace úlohy ještě není dokončena. | Boolean |



### Parametry úlohy { #job-parameters }

Tabulka: Parametry úlohy `DATA_INTEGRITY`

| Název          | Typ          | Výchozí | Popis                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `checks` | pole řetězců | `[]` = vše | názvy kontrol, které se mají spustit v pořadí provedení |
| `type`   | enum            | `REPORT`   | REPORT, SUMMARY nebo DETAILS                       |

Tabulka: Parametry úlohy `ANALYTICS_TABLE`

| Název          | Typ          | Výchozí | Popis                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `lastYears` | int  | 0       | Počet let zpět k zahrnutí |
| `skipTableTypes` | array of enum  | `[]`    | Přeskočit generování tabulek; Možné hodnoty: `DATA_VALUE`, `COMPLETENESS`, `COMPLETENESS_TARGET`, `ORG_UNIT_TARGET`, `EVENT`, `ENROLLMENT`, `VALIDATION_RESULT` |
| `skipResourceTables` | boolean | `false`   | Přeskočit generování tabulek zdrojů |
| `skipPrograms` | pole řetězců | `[]`    | Volitelný seznam programů (ID), které by měly být přeskočeny |

Tabulka: Parametry úlohy `CONTINUOUS_ANALYTICS_TABLE`

| Název          | Typ          | Výchozí | Popis                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `lastYears` | int           | `0`     | Počet let zpět k zahrnutí |
| `skipTableTypes` | array of enum | `[]`    | Přeskočit generování tabulek; Možné hodnoty: `DATA_VALUE`, `COMPLETENESS`, `COMPLETENESS_TARGET`, `ORG_UNIT_TARGET`, `EVENT`, `ENROLLMENT`, `VALIDATION_RESULT` |
| `fullUpdateHourOfDay` | int           | `0`     | Hodina dne pro úplnou aktualizaci analytických tabulek (0-23) |

Tabulka: Parametry úlohy `DATA_SYNC`

| Název          | Typ          | Výchozí | Popis                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `pageSize` | int | `10000` | počet datových hodnot zpracovaných jako jednotka |

Tabulka: Parametry úlohy `META_DATA_SYNC`

| Název          | Typ          | Výchozí | Popis                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `trackerProgramPageSize` | int | `20` | počet trasovaných entit zpracovaných jako jednotka |
| `eventProgramPageSize` | int | `60` | počet událostí zpracovaných jako jednotka           |
| `dataValuesPageSize` | int | `10000` | počet datových hodnot zpracovaných jako jednotka  |

Tabulka: Parametry úlohy `MONITOROVÁNÍ` (analýza ověřovacích pravidel).

| Název          | Typ          | Výchozí | Popis                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `relativeStart` | int | `0` | Číslo související s datem provedení, které připomíná začátek sledovaného období |
| `relativeEnd` | int | `0` | Číslo související s datem provedení, které se podobá konci sledovaného období |
| `validationRuleGroups` | pole řetězců | `[]` | Skupiny ověřovacích pravidel (UID), které mají být zahrnuty do úlohy |
| `sendNotification` | boolean | `false` | Nastavte `true`, pokud má úloha posílat upozornění na základě skupin ověřovacích pravidel |
| `persistsResults` | boolean | `false` | Pokud má úloha přetrvat výsledky ověření, nastavte `true` |

Tabulka: Parametry úlohy `PUSH_ANALYSIS`

| Název          | Typ          | Výchozí | Popis                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `pushAnalysis` | pole řetězců | `[]` |  UID analýzy push, kterou chcete spustit |

Tabulka: Parametry úlohy `PREDICTOR`

| Název          | Typ          | Výchozí | Popis                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `relativeStart` | int | `0` | Číslo související s datem provedení, které připomíná začátek sledovaného období |
| `relativeEnd` | int | `0` | Číslo související s datem provedení, které připomíná začátek sledovaného období |
| `predictors` | pole řetězců | `[]` | Prediktory (UID), které se mají zahrnout do úlohy                                                      |
| `predictorGroups` | pole řetězců | `[]` | Skupiny prediktorů (UID), které se mají zahrnout do úlohy                                                |

Table: `MATERIALIZED_SQL_VIEW_UPDATE` job parameters

| Název          | Typ          | Výchozí | Popis                                      |
|---------------|---------------|---------|--------------------------------------------------|
| `sqlViews`    | pole řetězců | `[]` | The UIDs of the SQL views that are updated by the job |


### Create a Job Configuration { #create-a-job-configuration } 

Chcete-li konfigurovat úlohy, můžete provést požadavek POST na následující prostředek:

    /api/jobConfigurations

Úloha bez parametrů ve formátu JSON vypadá takto:

```json
{
  "name": "",
  "jobType": "JOBTYPE",
  "cronExpression": "0 * * ? * *",
}
```

Příklad úlohy analytické tabulky s parametry ve formátu JSON:

```json
{
  "name": "Analytics tables last two years",
  "jobType": "ANALYTICS_TABLE",
  "cronExpression": "0 * * ? * *",
  "jobParameters": {
    "lastYears": "2",
    "skipTableTypes": [],
    "skipResourceTables": false
  }
}
```

Jako příklad úlohy nabízené analýzy s parametry ve formátu JSON:

```json
{
   "name": "Push anlysis charts",
   "jobType": "PUSH_ANALYSIS",
   "cronExpression": "0 * * ? * *",
   "jobParameters": {
     "pushAnalysis": [
       "jtcMAKhWwnc"
     ]
    }
 }
```

Příklad úlohy s typem plánování `FIXED_DELAY` a 120 sekundovým zpožděním:

```json
{
  "name": "Continuous analytics table",
  "jobType": "CONTINUOUS_ANALYTICS_TABLE",
  "delay": "120",
  "jobParameters": {
    "fullUpdateHourOfDay": 4
  }
}
```

### Get Job Configurations { #get-job-configurations } 

Seznam všech konfigurací úloh:

    GET /api/jobConfigurations

Načtení úlohy:

    GET /api/jobConfigurations/{id}

Datový obsah odpovědi vypadá takto:

```json
{
  "lastUpdated": "2018-02-22T15:15:34.067",
  "id": "KBcP6Qw37gT",
  "href": "http://localhost:8080/api/jobConfigurations/KBcP6Qw37gT",
  "created": "2018-02-22T15:15:34.067",
  "name": "analytics last two years",
  "jobStatus": "SCHEDULED",
  "displayName": "analytics last two years",
  "enabled": true,
  "externalAccess": false,
  "jobType": "ANALYTICS_TABLE",
  "nextExecutionTime": "2018-02-26T03:00:00.000",
  "cronExpression": "0 0 3 ? * MON",
  "jobParameters": {
    "lastYears": 2,
    "skipTableTypes": [],
    "skipResourceTables": false
  },
  "favorite": false,
  "configurable": true,
  "access": {
    "read": true,
    "update": true,
    "externalize": true,
    "delete": true,
    "write": true,
    "manage": true
  },
  "lastUpdatedBy": {
    "id": "GOLswS44mh8"
  },
  "favorites": [],
  "translations": [],
  "userGroupAccesses": [],
  "attributeValues": [],
  "userAccesses": []
}
```

### Update a Job Configuration { #update-a-job-configuration } 

Aktualizujte úlohu s parametry pomocí následujícího formátu koncového bodu a datového obsahu JSON:

    PUT /api/jobConfiguration/{id}

```json
{
  "name": "analytics last two years",
  "enabled": true,
  "cronExpression": "0 0 3 ? * MON",
  "jobType": "ANALYTICS_TABLE",
  "jobParameters": {
    "lastYears": "3",
    "skipTableTypes": [],
    "skipResourceTables": false
  }
}
```

### Delete a Job Configuration { #delete-a-job-configuration } 

Smazat úlohu pomocí:

    DELETE /api/jobConfiguration/{id}

Některé úlohy s vlastními konfiguračními parametry nemusí být přidány, pokud nejsou nakonfigurována požadovaná nastavení systému. Příkladem toho je synchronizace dat, která vyžaduje konfiguraci vzdáleného serveru.

### Run Jobs Manually { #execute }

Úlohy lze spustit ručně pomocí:

    POST /api/jobConfiguration/{id}/execute



## Scheduler API { #scheduler-api } 
While `/api/jobConfigurations` is centered around the job configuration objects
the `/api/scheduler` API reflects the state of the scheduler 
and the `/api/scheduling` API provides job progress tracking information.  

### Observe Running Jobs { #running}
The execution steps and state can be observed while the job is running.
A list of all types of jobs that are currently running is provided by:

    GET /api/scheduling/running/types

To get an overview of all running jobs by job type use:

    GET /api/scheduling/running

As there only can be one job running for each type at a time the status of a
running job can be viewed in details using:

    GET /api/scheduling/running/{type}

Chcete-li například zobrazit stav použití spuštěné úlohy `ANALYTICS_TABLE`.

    GET /api/scheduling/running/ANALYTICS_TABLE

A job is a sequence of processes. Each process has a sequence of `stages`.
Within each stage there might be zero, one or many `items`. Items could be
processed strictly sequential or parallel, n items at a time. Often the
number of `totalItems` is known up-front.

In general the stages in a process and the items in a stage are "discovered"
as a "side effect" of processing the data. While most processes have a fixed
sequence of stages some processed might have varying stages depending on the
data processed. Items are usually data dependent. Most jobs just include a
single process.

Každý z uzlů ve stromu procesu-fáze-položky má stav, který je buď
* `RUNNING`: aktuálně zpracováno (ještě nedokončeno)
* `SUCCESS`: po úspěšném dokončení
* `CHYBA`: po dokončení s chybami nebo když došlo k výjimce
* `ZRUŠENO`: když bylo požadováno zrušení a položka se nedokončí

### See Completed Job Runs { #completed }
Once a job has completed successful or with a failure as a consequence of an
exception or cancellation the status moves from the set of running states to
the completed job states. This set keeps only the most recent execution
state for each job type. The overview is available at:

    GET /api/scheduling/completed

Podrobnosti o konkrétním typu práce jsou odpovídajícím způsobem uvedeny na:

    GET /api/scheduling/completed/{type}

V případě úlohy `ANALYTICS_TABLE` by to bylo:

    GET /api/scheduling/completed/ANALYTICS_TABLE

### Request Cancelling a Running Jobs { #cancel }
Once a job is started it works through a sequence of steps. Each step might
in turn have collections of items that are processed. While jobs usually
cannot be stopped at any point in time we can request cancellation and the
process gives up cooperatively once it has completed an item or step and
recognises that a cancellation was requested. This means jobs do not stop
immediately and leave at an unknown point right in the middle of some
processing. Instead, they give up when there is an opportunity to skip to
the end. This still means that the overall process is unfinished and is not
rolled back. It might just have done a number of steps and skipped others at
the end.

Chcete-li zrušit běžící úlohu, použijte:

    POST /api/scheduling/cancel/{type}

Chcete-li například zrušit spuštění úlohy `ANALYTICS_TABLE`, postupujte takto:

    POST /api/scheduling/cancel/ANALYTICS_TABLE

Depending on the current step and item performed this can take from
milliseconds to minutes before the cancellation becomes effective.
However, the status of the overall process will be shown as `CANCELLED`
immediately when check using

    GET /api/scheduling/running/ANALYTICS_TABLE

Only jobs that have been split into processes, stages and items can be
cancelled effectively. Not all jobs have been split yet. These will run till
completion even if cancellation has been requested.


## Job Queues { #queues }
Sequences of jobs (configurations) can be created using job queues.
The queue always uses a unique name and a CRON expression trigger. 
Once a queue is started it runs all jobs in the queue in the given sequence.
The second in sequence starts when the first is finished and so forth.

### List Names of Job Queues { #queues-list } 
To list the unique names of existing queues use:

    GET /api/scheduler/queues

The response is a array of the names:
```json
["queue_a", "queue_b"]
```

### Get A Job Queue { #queues-info }
To get all details of a specific queue use:

    GET /api/scheduler/queues/{name}

The details include its name, CRON expression and job sequence:

```json
{
  "name": "myQ",
  "cronExpression": "0 0 1 ? * *",
  "sequence": ["FgAxa6eRSzQ", "BeclVERfWbg" ]
}
```

### Create a new Job Queue { #queues-add }
To create a new queue send a POST request with a payload object having name, 
CRON expression and the job sequence:

    POST /api/scheduler/queues/{name}

To create a queue with name `myQ` use a POST to `/api/scheduler/queues/myQ`:

```json
{
  "cronExpression": "0 0 1 ? * *",
  "sequence": ["FgAxa6eRSzQ", "BeclVERfWbg" ]
}
```
A `name` can be present in the payload as well but name specified in the URL
path takes precedence. 

> **NOTE**
>
> The cron expression of all job configurations but the first in a queue is
> cleared as they do not have a trigger on their own any longer. It needs to
> be restored manually once a job is removed from a queue.

### Update a Job Queue { #queues-update }
To update an existing queue CRON expression or sequence use a PUT request   

    PUT /api/scheduler/queues/{name}

The payload has to state both new CRON expression and job sequence like in 
the example above to create a new queue.

To rename a queue the new name can be stated in the payload, while the old name 
is used in the URL path.  

### Delete a Job Queue { #queues-delete }
To delete a job queue send a DELETE request to its resource URL:

    DELETE /api/scheduler/queues/{name}

> **NOTE**
>
> Deleting a queue does not delete any referenced job configurations. Any job
> configuration that is removed from a queue either by changing the sequence or
> deleting the queue is disabled. To use it individually supply a CRON 
> expression and enable the configuration again.


## Job Scheduler { #scheduler }
The schedule within the scheduler is a list that is based on job configurations
and job queues. Either an entry in the schedule is a simple job configuration,
or it is a job queue. Both are represented using the same entry format.

To get the scheduler listing use: 

    GET /api/scheduler

A job configuration in this list looks like this:

```json
  {
    "name": "User account expiry alert",
    "type": "ACCOUNT_EXPIRY_ALERT",
    "cronExpression": "0 0 2 ? * *",
    "nextExecutionTime": "2023-03-15T02:00:00.000",
    "status": "SCHEDULED",
    "enabled": true,
    "configurable": false,
    "sequence": [
      {
        "id": "fUWM1At1TUx",
        "name": "User account expiry alert",
        "type": "ACCOUNT_EXPIRY_ALERT",
        "cronExpression": "0 0 2 ? * *",
        "nextExecutionTime": "2023-03-15T02:00:00.000",
        "status": "SCHEDULED"
      }
    ]
  }
```
Most notably the `sequence` has only a single item. Information on top level
object and the object in the `sequence` both originate from the job configuration.

A job queue in the list looks like this:

```json
  {
    "name": "myQ",
    "type": "Sequence",
    "cronExpression": "0 0 1 ? * *",
    "nextExecutionTime": "2023-03-15T01:00:00.000",
    "status": "SCHEDULED",
    "enabled": true,
    "configurable": true,
    "sequence": [
      {
        "id": "FgAxa6eRSzQ",
        "name": "test Q1",
        "type": "ANALYTICS_TABLE",
        "cronExpression": "0 0 1 ? * *",
        "nextExecutionTime": "2023-03-15T01:00:00.000",
        "status": "SCHEDULED"
      },
      {
        "id": "BeclVERfWbg",
        "name": "est Q2",
        "type": "DATA_INTEGRITY",
        "status": "SCHEDULED"
      }
    ]
  }
```
The top level object originates from the queue and aggregate information.
The objects within the sequence originate from the job configurations that are
part of the sequence.

### List Jobs Entries addable to a Job Queue { #queueable }
Not all jon configurations can be added to a queue. 
System jobs and jobs that are already part of a queue cannot be used in another 
queue. To list job configurations that can be part of any queue use:

    GET /api/scheduler/queueable

To list job configurations that can be part of a particular queue use:

    GET /api/scheduler/queueable?name={queue}

This will also exclude all jobs that are already part the named queue.


# Synchronizace { #webapi_synchronization }

Tato část pojednává o stahování a odesílání dat a metadat.

## Push datové hodnoty { #webapi_sync_data_push }

Chcete-li zahájit odeslání datové hodnoty na vzdálený server, musíte nejprve nakonfigurovat adresu URL a přihlašovací údaje pro příslušný server v části Nastavení systému > Synchronizace, poté provést požadavek POST na následující prostředek:

    /api/33/synchronization/dataPush

## Stahování metadat { #webapi_sync_metadata_pull }

Chcete-li zahájit načítání metadat ze vzdáleného dokumentu JSON, můžete provést požadavek POST s *url* jako datovou částí požadavku na následující prostředek:

    /api/33/synchronization/metadataPull

> **Note**
>
> The supplied URL will be checked against the config property `system.remote_servers_allowed` in the `dhis.conf` file.
> If the base URL is not one of the configured servers allowed then the operation will not be allowed. See failure example below.  
> Some examples where the config set is `system.remote_servers_allowed=https://server1.org/,https://server2.org/`
> - supply `https://server1.org/path/to/resource` -> this will be accepted
> - supply `https://server2.org/resource/path` -> this will be accepted
> - supply `https://oldserver.org/resource/path` -> this will be rejected
>
Sample failure response

```json
 {
  "httpStatus": "Conflict",
  "httpStatusCode": 409,
  "status": "ERROR",
  "message": "Provided URL is not in the remote servers allowed list",
  "errorCode": "E1004"
}
```

## Kontrola dostupnosti { #webapi_sync_availability_check }

Chcete-li zkontrolovat dostupnost vzdáleného datového serveru a ověřit pověření uživatele, můžete odeslat požadavek GET na následující prostředek:

    /api/33/synchronization/availability



# Audit { #audit } 

## Auditování { #webapi_auditing }

DHIS2 bude auditovat aktualizace a mazání hodnot agregovaných dat, hodnot dat trasovaných entit, hodnot atributů trasovaných entit a záznamů o schválení dat. Tato část vysvětluje, jak získat záznamy auditu pro uvedené subjekty. Všimněte si, že několik parametrů dotazu lze opakovat libovolněkrát.

### Souhrnné audity hodnot dat { #webapi_auditing_aggregate_audits }

Koncový bod pro audity agregovaných datových hodnot se nachází na:

```
/api/audits/dataValue
```

Tabulka: Parametry dotazu na hodnotu souhrnných dat

| Parametr | Možnost | Popis |
|---|---|---|
| ds | ID datové sady | Jeden nebo více identifikátorů datové sady, ze kterých lze získat datové prvky |
| de | ID datového prvku | Jeden nebo více identifikátorů datových prvků |
| pe | Období ISO | Jedno nebo více období identifikátorů ISO |
| ou | ID organizační jednotky | Jeden nebo více identifikátorů organizační jednotky |
| auditType | AKTUALIZACE &#124; VYMAZAT | Filter by one or more audit types |
| skipPaging | false &#124; true | Zapnutí / vypnutí stránkování |
| stránkování | false \| true | Enable or disable paging |
| strana | Číslo | Číslo stránky (výchozí 1) |
| pageSize | Číslo | Velikost stránky (výchozí 50) |

Example: Get audits for a data set `lyLU2wR22tC` and audit type `CREATE` or `UPDATE`:

    /api/33/audits/dataValue?ds=lyLU2wR22tC&auditType=CREATE,UPDATE

Example: Get audits for data element `BOSZApCrBni`, org unit `DiszpKrYNg8` and category option combination `TkDhg29x18A`:

    /api/33/audits/dataValue?de=BOSZApCrBni&ou=DiszpKrYNg8&co=TkDhg29x18A

### Audity hodnot dat trasovaných entit { #webapi_tracked_entity_data_value_audits }

Koncový bod pro audity hodnot dat sledovaných entit se nachází na:

```
/api/audits/trackedEntityDataValue
```

Tabulka: Parametry dotazu na hodnotu dat trasované entity

| Parametr | Možnost | Popis |
|---|---|---|
| de | ID datového prvku | Jeden nebo více identifikátorů datových prvků |
| ou | ID organizační jednotky | One or more organisation unit identifiers of the audited event |
| Události | Events ID | One or more event identifiers of the audited event (comma separated) |
| ps | Program stage ID | One or more program sages of the audit event program |
| startDate | Datum zahájení | Return only audit records created after date |
| endDate | Datum ukončení | Return only audit records created before date |
| ouMode | Organisation unit selection mode | SELECTED \| DESCENDANTS |
| auditType | AKTUALIZACE &#124; VYMAZAT | Filter by one or more audit types |
| skipPaging | false &#124; true | Zapnutí / vypnutí stránkování |
| stránkování | false \| true | Zda povolit nebo zakázat stránkování |
| strana | Číslo | Číslo stránky (výchozí 1) |
| pageSize | Číslo | Velikost stránky (výchozí 50) |

Example: Get audits for data elements `eMyVanycQSC` and `qrur9Dvnyt5`:

    /api/33/audits/trackedEntityDataValue?de=eMyVanycQSC&de=qrur9Dvnyt5

Example: Get audits for org unit `O6uvpzGd5pu` including descendant org units in the org unit hierarchy:

    /api/audits/trackedEntityDataValue?ou=O6uvpzGd5pu&ouMode=DESCENDANTS

### Audity hodnot atributu trasované entity { #webapi_tracked_entity_attribute_value_audits }

The endpoint for tracked entity attribute value audits is located at:

```
/api/audits/trackedEntityAttributeValue
```

Tabulka: Parametry dotazu na hodnotu atributu trasované entity

| Parametr | Možnost | Popis |
|---|---|---|
| tea | Tracked entity attribute ID | One or more tracked entity attribute identifiers |
| trackedEntities | Tracked entity ID | One or more tracked entity identifiers (comma separated) |
| auditType | AKTUALIZACE &#124; VYMAZAT | Filter by one or more audit types |
| skipPaging | false &#124; true | Zapnutí / vypnutí stránkování |
| stránkování | false \| true | Zda povolit nebo zakázat stránkování |
| strana | Číslo | Číslo stránky (výchozí 1) |
| pageSize | Číslo | Velikost stránky (výchozí 50) |

Example: Get audits for tracked entity attribute `VqEFza8wbwA`:

    /api/33/audits/trackedEntityAttributeValue?tea=VqEFza8wbwA

Example: Get audits for tracked entity instance `wNiQ2coVZ39` and audit type `DELETE`:

    /api/33/audits/trackedEntityAttributeValue?trackedEntities=wNiQ2coVZ39&auditType=DELETE

### Audity instance trasované entity { #webapi_tracked_entity_instance_audits }

Once auditing is enabled for tracked entities (by setting `allowAuditLog` of tracked entity types to `true`), all read and search operations are logged. The endpoint for accessing audit logs is located at:

```
/api/audits/trackedEntity
```

Table: Tracked entity audit query parameters

| Parametr | Možnost | Popis |
|---|---|---|
| trackedEntities | Tracked Entity UIDS | One or more tracked entity identifiers (comma separated) |
| user | Uživatel | Jeden nebo více identifikátorů uživatele |
| auditType | HLEDAT &#124; ČÍST | Filter by one or more audit types |
| startDate | Datum zahájení | Start date for audits in `yyyy-mm-dd` format |
| endDate | Datum ukončení | End date for audits in `yyyy-mm-dd` format |
| skipPaging | false &#124; true | Zapnutí / vypnutí stránkování. |
| stránkování | false \| true | Zda povolit nebo zakázat stránkování |
| strana | Číslo | Page number  (default 1) |
| pageSize | Číslo | Page size  (default 50) |

Example: Get audits of audit type `READ` with `startDate` 2018-03-01 and `endDate` 2018-04-24 with a page size of 5:

    /api/33/audits/trackedEntity.json?startDate=2021-03-01&endDate=2022-04-24&auditType=READ&pageSize=5

Example: Get audits for tracked entity `wNiQ2coVZ39`:

    /api/33/audits/trackedEntity.json?trackedEntities=wNiQ2coVZ39

### ***DEPRECATED*** Tracked entity instance audits { #webapi_tracked_entity_instance_audits }

Once auditing is enabled for tracked entity instances (by setting `allowAuditLog` of tracked entity types to `true`), all read and search operations are logged. The endpoint for accessing audit logs is located at:

```
/api/audits/trackedEntityInstance
```

Tabulka: Parametry dotazu auditu instance trasované entity

| Parametr | Možnost | Popis |
|---|---|---|
| trackedEntities | Tracked Entity UIDS | One or more tracked entity identifiers (comma separated) |
| user | Uživatel | Jeden nebo více identifikátorů uživatele |
| auditType | HLEDAT &#124; ČÍST | Filter by one or more audit types |
| startDate | Datum zahájení | Start date for audits in `yyyy-mm-dd` format |
| endDate | Datum ukončení | End date for audits in `yyyy-mm-dd` format |
| skipPaging | false &#124; true | Zapnutí / vypnutí stránkování. |
| stránkování | false \| true | Zda povolit nebo zakázat stránkování |
| strana | Číslo | Page number  (default 1) |
| pageSize | Číslo | Page size  (default 50) |

Example: Get audits of audit type `READ` with `startDate` 2018-03-01 and `endDate` 2018-04-24 with a page size of 5:

    /api/33/audits/trackedEntityInstance.json?startDate=2021-03-01&endDate=2022-04-24&auditType=READ&pageSize=5

Example: Get audits for tracked entity `wNiQ2coVZ39`:

    /api/33/audits/trackedEntityInstance.json?trackedEntities=wNiQ2coVZ39


### Audity schválení dat { #data-approval-audits } 

The endpoint for data approval audits is located at:

```
/api/audits/dataApproval
```

Tabulka: Parametry dotazu na schválení dat

| Parametr | Možnost | Popis |
|---|---|---|
| dal | Data approval level ID | One or more data approval level identifiers |
| wf | Data approval workflow ID | One or more data approval workflow identifiers |
| ou | ID organizační jednotky | One or more organisation unit identifiers |
| aoc | Attribute option combo ID | One or more attribute option combination identifiers |
| startDate | Datum zahájení | Start date for approvals in `yyyy-mm-dd` format |
| endDate | Datum ukončení | End date for approvals in `yyyy-mm-dd` format |
| skipPaging | false &#124; true | Zapnutí / vypnutí stránkování |
| strana | Číslo | Číslo stránky (výchozí 1) |
| pageSize | Číslo | Velikost stránky (výchozí 50) |

Example: Get audits for data approval workflow `i5m0JPw4DQi`:

    /api/33/audits/dataApproval?wf=i5m0JPw4DQi

Exaple: Get audits between `2021-01-01` and `2022-01-01` for org unit `DiszpKrYNg8`:

    /api/33/audits/dataApproval?ou=DiszpKrYNg8&startDate=2021-01-01&endDate=2022-01-01



# Zprávy { #messaging } 

## Konverzace zpráv { #webapi_message_conversations } 

DHIS2 features a mechanism for sending messages for purposes such as
user feedback, notifications, and general information to users. Messages
are grouped into conversations. To interact with message conversations
you can send POST and GET request to the *messageConversations*
resource.

    /api/33/messageConversations

Messages are delivered to the DHIS2 message inbox but can also be sent
to the user's email addresses and mobile phones as SMS. In this example,
we will see how we can utilize the Web API to send, read and manage
messages. We will pretend to be the *DHIS2 Administrator* user and send
a message to the *Mobile* user. We will then pretend to be the mobile
user and read our new message. Following this, we will manage the admin
user inbox by marking and removing messages.

### Psaní a čtení zpráv { #webapi_writing_messages } 

The resource we need to interact with when sending and reading messages
is the *messageConversations* resource. We start by visiting the Web API
entry point at <http://play.dhis2.org/demo/api> where we find and follow
the link to the *messageConversations* resource at
<http://play.dhis2.org/demo/api/messageConversations>. The description
tells us that we can use a POST request to create a new message using
the following XML format for sending to multiple users:

```xml
<message xmlns="http://dhis2.org/schema/dxf/2.0">
  <subject>This is the subject</subject>
  <text>This is the text</text>
  <users>
    <user id="user1ID" />
    <user id="user2ID" />
    <user id="user3ID" />
  </users>
</message>
```

For sending to all users contained in one or more user groups, we can
use:

```xml
<message xmlns="http://dhis2.org/schema/dxf/2.0">
  <subject>This is the subject</subject>
  <text>This is the text</text>
  <userGroups>
    <userGroup id="userGroup1ID" />
    <userGroup id="userGroup2ID" />
    <userGroup id="userGroup3ID" />
  </userGroups>
</message>
```

For sending to all users connected to one or more organisation units, we
can use:

```xml
<message xmlns="http://dhis2.org/schema/dxf/2.0">
  <subject>This is the subject</subject>
  <text>This is the text</text>
  <organisationUnits>
    <organisationUnit id="ou1ID" />
    <organisationUnit id="ou2ID" />
    <organisationUnit id="ou3ID" />
  </organisationUnits>
</message>
```

Since we want to send a message to our friend the mobile user we need to
look up her identifier. We do so by going to the Web API entry point and
follow the link to the *users* resource at `/api/users`. We continue by
following link to the mobile user at `/api/users/PhzytPW3g2J` where we learn
that her identifier is *PhzytPW3g2J*. We are now ready to put our XML
message together to form a message where we want to ask the mobile user
whether she has reported data for January 2014:

```xml
<message xmlns="http://dhis2.org/schema/dxf/2.0">
  <subject>Mortality data reporting</subject>
  <text>Have you reported data for the Mortality data set for January 2014?</text>
  <users>
    <user id="PhzytPW3g2J" />
  </users>
</message>
```

To test this we save the XML content into a file called *message.xml*.
We use cURL to dispatch the message the DHIS2 demo instance where we
indicate that the content-type is XML and authenticate as the *admin*
user:

```bash
curl -d @message.xml "https://play.dhis2.org/demo/api/messageConversations"
  -H "Content-Type:application/xml" -u admin:district -X POST
```

Odpovídající datový obsah v příkazu JSON a POST vypadá takto:

```json
{
  "subject": "Hey",
  "text": "How are you?",
  "users": [
    {
      "id": "OYLGMiazHtW"
    },
    {
      "id": "N3PZBUlN8vq"
    }
  ],
  "userGroups": [
    {
      "id": "ZoHNWQajIoe"
    }
  ],
  "organisationUnits": [
    {
      "id": "DiszpKrYNg8"
    }
  ]
}
```

```bash
curl -d @message.json "https://play.dhis2.org/demo/api/33/messageConversations"
  -H "Content-Type:application/json" -u admin:district -X POST
```

If all is well we receive a *201 Created* HTTP status code. Also, note
that we receive a *Location* HTTP header which value informs us of the
URL of the newly created message conversation resource - this can be
used by a consumer to perform further action.

We will now pretend to be the mobile user and read the message which was
just sent by dispatching a GET request to the *messageConversations*
resource. We supply an *Accept* header with *application/xml* as the
value to indicate that we are interested in the XML resource
representation and we authenticate as the *mobile* user:

```bash
curl "https://play.dhis2.org/demo/api/33/messageConversations"
  -H "Accept:application/xml" -u mobile:district
```

V reakci na to dostaneme následující XML:

```xml
<messageConversations xmlns="http://dhis2.org/schema/dxf/2.0"
  link="https://play.dhis2.org/demo/api/messageConversations">
  <messageConversation name="Mortality data reporting" id="ZjHHSjyyeJ2"
    link="https://play.dhis2.org/demo/api/messageConversations/ZjHHSjyyeJ2"/>
  <messageConversation name="DHIS2 version 2.7 is deployed" id="GDBqVfkmnp2"
    link="https://play.dhis2.org/demo/api/messageConversations/GDBqVfkmnp2"/>
</messageConversations>
```

From the response, we are able to read the identifier of the newly sent
message which is *ZjHHSjyyeJ2*. Note that the link to the specific
resource is embedded and can be followed in order to read the full
message. We can reply directly to an existing message conversation once we know
the URL by including the message text as the request payload. We
are now able to construct a URL for sending our reply:

```bash
curl -d "Yes the Mortality data set has been reported"
  "https://play.dhis2.org/demo/api/messageConversations/ZjHHSjyyeJ2"
  -H "Content-Type:text/plain" -u mobile:district -X POST
```

Pokud vše proběhlo podle plánu, obdržíte stavový kód *200 OK*.

Ve verzi 2.30 jsme přidali parametr vyhledávání URL:

    queryString=?&queryOperator=?

The filter searches for matches in subject, text, and senders for message
conversations. The default query operator is *token*, however other operators
can be defined in the query.

### Správa zpráv { #webapi_managing_messages } 

As users receive and send messages, conversations will start to pile up
in their inboxes, eventually becoming laborious to track. We will now
have a look at managing a user's messages inbox by removing and marking
conversations through the Web-API. We will do so by performing some
maintenance in the inbox of the "DHIS Administrator" user.

First, let's have a look at removing a few messages from the inbox. Be
sure to note that all removal operations described here only remove the
relation between a user and a message conversation. In practical terms
this means that we are not deleting the messages themselves (or any
content for that matter) but are simply removing the message thread from
the user such that it is no longer listed in the
`/api/messageConversations` resource.

To remove a message conversation from a users inbox we need to issue a
*DELETE* request to the resource identified by the id of the message
conversation and the participating user. For example, to remove the user
with id `xE7jOejl9FI` from the conversation with id `jMe43trzrdi`:

```bash
curl "https://play.dhis2.org/demo/api/33/messageConversations/jMe43trzrdi
```

If the request was successful the server will reply with a *200 OK*. The
response body contains an XML or JSON object (according to the accept
header of the request) containing the id of the removed user.

```json
{
  "removed" : ["xE7jOejl9FI"]
}
```

On failure the returned object will contain a message payload which
describes the error.

```json
{
  "message": "No user with uid: dMV6G0tPAEa"
}
```

The observant reader will already have noticed that the object returned
on success in our example is actually a list of ids (containing a single
entry). This is due to the endpoint also supporting batch removals. The
request is made to the same *messageConversations* resource but follows
slightly different semantics. For batch operations, the conversation ids
are given as query string parameters. The following example removes two
separate message conversations for the current user:

```bash
curl "https://play.dhis2.org/demo/api/messageConversations?mc=WzMRrCosqc0&mc=lxCjiigqrJm"
  -X DELETE -u admin:district
```

If you have sufficient permissions, conversations can be removed on
behalf of another user by giving an optional user id parameter.

```bash
curl "https://play.dhis2.org/demo/api/messageConversations?mc=WzMRrCosqc0&mc=lxCjiigqrJm&user=PhzytPW3g2J"
  -X DELETE -u admin:district
```

As indicated, batch removals will return the same message format as for
single operations. The list of removed objects will reflect successful
removals performed. Partially erroneous requests (i.e. non-existing id)
will therefore not cancel the entire batch operation.

Messages carry a boolean *read* property. This allows tracking whether a
user has seen (opened) a message or not. In a typical application
scenario (e.g. the DHIS2 web portal) a message will be marked read as
soon as the user opens it for the first time. However, users might want
to manage the read or unread status of their messages in order to keep
track of certain conversations.

Marking messages read or unread follows similar semantics as batch
removals, and also supports batch operations. To mark messages as read
we issue a *POST* to the `messageConversations/read` resource with a
request body containing one or more message ids. To mark messages as
unread we issue an identical request to the `messageConversations/unread`
resource. As is the case for removals, an optional *user* request parameter
can be given.

Označme několik zpráv jako přečtených aktuálním uživatelem:

```bash
curl "https://play.dhis2.org/dev/api/messageConversations/read"
  -d '["ZrKML5WiyFm","Gc03smoTm6q"]' -X POST
  -H "Content-Type: application/json" -u admin:district
```

The response is a *200 OK* with the following JSON body:

```json
{
  "markedRead": ["ZrKML5WiyFm", "Gc03smoTm6q"]
}
```

Do stávající konverzace se zprávami můžete přidat příjemce. Zdroj se nachází na adrese:

    /api/33/messageConversations/id/recipients

The options for this resource is a list of users, user groups and
organisation units. The request should look like this:

```json
{
  "users": [
    {
      "id": "OYLGMiazHtW"
    },
    {
      "id": "N3PZBUlN8vq"
    }
  ],
  "userGroups": [
    {
      "id": "DiszpKrYNg8"
    }
  ],
  "organisationUnits": [
    {
      "id": "DiszpKrYNg8"
    }
  ]
}

```

### Přílohy zpráv { #webapi_message_attachments } 

Creating messages with attachments is done in two steps: uploading the
file to the *attachments* resource, and then including one or several of
the attachment IDs when creating a new message.

A POST request to the *attachments* resource will upload the file to the
server.

```
curl -F file=@attachment.png "https://play.dhis2.org/demo/api/messageConversations/attachments"
  -u admin:district
```

The request returns an object that represents the attachment. The id of
this object must be used when creating a message in order to link the
attachment with the message.

```json
{
  "created": "2018-07-20T16:54:18.210",
  "lastUpdated": "2018-07-20T16:54:18.212",
  "externalAccess": false,
  "publicAccess": "--------",
  "user": {
    "name": "John Traore",
    "created": "2013-04-18T17:15:08.407",
    "lastUpdated": "2018-03-09T23:06:54.512",
    "externalAccess": false,
    "displayName": "John Traore",
    "favorite": false,
    "id": "xE7jOejl9FI"
  },
  "lastUpdatedBy": {
    "id": "xE7jOejl9FI",
    "name": "John Traore"
  },
  "favorite": false,
  "id": "fTpI4GOmujz"
}
```

When creating a new message, the ids can be passed in the request body
to link the uploaded files to the message being created.

```json
{
  "subject": "Hey",
  "text": "How are you?",
  "users": [
    {
      "id": "OYLGMiazHtW"
    },
    {
      "id": "N3PZBUlN8vq"
    }
  ],
  "userGroups": [
    {
      "id": "ZoHNWQajIoe"
    }
  ],
  "organisationUnits": [
    {
      "id": "DiszpKrYNg8"
    }
  ],
  "attachments": [
    "fTpI4GOmujz",
    "h2ZsOxMFMfq"
  ]
}
```

When replying to a message, the ids can be passed as a request
parameter.

```bash
curl -d "Yes the Mortality data set has been reported"
  "https://play.dhis2.org/demo/api/33/messageConversations/ZjHHSjyyeJ2?attachments=fTpI4GOmujz,h2ZsOxMFMfq"
  -H "Content-Type:text/plain" -u mobile:district -X POST
```

Once a message with an attachment has been created, the attached file
can be accessed with a GET request to the following URL:

    /api/messageConversations/<mcv-id>/<msg-id>/attachments/<attachment-id>

Where <mcv-id> is the *message conversation* ID, <msg-id> is the ID of
the *message* that contains the attachment and <attachment-id> is the
ID of the specific *message attachment*.

### Oznámení o výsledcích tiketů a ověření { #webapi_messaging_tickets } 

You can use the "write feedback" tool to create tickets and messages.
The only difference between a ticket and a message is that you can give
a status and a priority to a ticket. To set the status:

    POST /api/messageConversations/<uid>/status

Nastavení priority:

    POST /api/messageConversations/<uid>/priority

In 2.29, messages generated by validation analysis now also be used in
the status and priority properties. By default, messages generated by
validation analysis will inherit the priority of the validation rule in
question, or the highest importance if the message contains multiple
rules.

In 2.30, validation rules can be assigned to any user while tickets
still need to be assigned to a user in the system's feedback recipient
group.



Tabulka: Seznam platných hodnot stavu a priorit

| Status | Priority |
|---|---|
| OPEN | LOW |
| PENDING | MEDIUM |
| INVALID | HIGH |
| SOLVED ||

You can also add an internal message to a ticket, which can only be seen
by users who have "Manage tickets" permissions. To create an internal
reply, include the "internal" parameter, and set it to

```bash
curl -d "This is an internal message"
  "https://play.dhis2.org/demo/api/33/messageConversations/ZjHHSjyyeJ2?internal=true"
  -H "Content-Type:text/plain" -u admin:district -X POST
```




# Vizualizace { #visualizations } 
## Ovládací panel { #webapi_dashboard } 

The dashboard is designed to give you an overview of multiple analytical
items like maps, charts, pivot tables and reports which together can
provide a comprehensive overview of your data. Dashboards are available
in the Web API through the *dashboards* resource. A dashboard contains a
list of dashboard *items*. An item can represent a single resource, like
a chart, map or report table, or represent a list of links to analytical
resources, like reports, resources, tabular reports and users. A
dashboard item can contain up to eight links. Typically, a dashboard
client could choose to visualize the single-object items directly in a
user interface, while rendering the multi-object items as clickable
links.

    /api/dashboards

### Procházení ovládacích panelů { #webapi_browsing_dashboards } 

To get a list of your dashboards with basic information including
identifier, name and link in JSON format you can make a *GET* request to
the following URL:

    /api/dashboards.json

The dashboards resource will provide a list of dashboards. Remember that
the dashboard object is shared so the list will be affected by the
currently authenticated user. You can retrieve more information about a
specific dashboard by following its link, similar to this:

    /api/dashboards/vQFhmLJU5sK.json

A dashboard contains information like name and creation date and an
array of dashboard items. The response in JSON format will look similar
to this response (certain information has been removed for the sake of
brevity).

```json
{
  "lastUpdated" : "2013-10-15T18:17:34.084+0000",
  "id": "vQFhmLJU5sK",
  "created": "2013-09-08T20:55:58.060+0000",
  "name": "Mother and Child Health",
  "href": "https://play.dhis2.org/demo/api/dashboards/vQFhmLJU5sK",
  "publicAccess": "--------",
  "restrictFilters": false,
  "externalAccess": false,
  "itemCount": 17,
  "displayName": "Mother and Child Health",
  "access": {
    "update": true,
    "externalize": true,
    "delete": true,
    "write": true,
    "read": true,
    "manage": true
  },
  "user": {
    "id": "xE7jOejl9FI",
    "name": "John Traore",
    "created": "2013-04-18T15:15:08.407+0000",
    "lastUpdated": "2014-12-05T03:50:04.148+0000",
    "href": "https://play.dhis2.org/demo/api/users/xE7jOejl9FI"
  },
  "dashboardItems": [{
    "id": "bu1IAnPFa9H",
    "created": "2013-09-09T12:12:58.095+0000",
    "lastUpdated": "2013-09-09T12:12:58.095+0000"
    }, {
    "id": "ppFEJmWWDa1",
    "created": "2013-09-10T13:57:02.480+0000",
    "lastUpdated": "2013-09-10T13:57:02.480+0000"
  }],
  "layout": {
    "spacing": {
      "column": 5,
      "row": 5
    },
    "columns": [{
      "index": 0,
      "span": 2
    }, {
      "index": 1,
      "span": 1
    }]
  },
  "userGroupAccesses": []
}
```

A more tailored response can be obtained by specifying specific fields
in the request. An example is provided below, which would return more
detailed information about each object on a users dashboard.

    /api/dashboards/vQFhmLJU5sK/?fields=:all,dashboardItems[:all]

### Hledání ovládacích panelů { #webapi_searching_dasboards } 

When a user is building a dashboard it is convenient
to be able to search for various analytical resources using the
*/dashboards/q* or */dashboards/search* resources. 
These resources let you search for matches on
the name property of the following objects: visualizations, eventVisualizations maps,
users, reports and resources. You can do a search by making a *GET*
request on the following resource URL pattern, where my-query should be
replaced by the preferred search query:

    /api/dashboards/q/my-query.json
    /api/dashboards/search?q=my-query

Například tento dotaz:

    /api/dashboards/q/ma?count=6&maxCount=20&max=REPORT&max=MAP
    /api/dashboards/search?q=ma?count=6&maxCount=20&max=REPORT&max=MAP

Vyhledá následující:

* Název analytického objektu obsahuje řetězec „ma“
* Vraťte až 6 z každého typu
* U typů REPORT a MAP vrátí až 20 položek



Table: dashboards/q and dashboards/search query parameters

| Parametr dotazu | Popis | Typ | Výchozí |
|---|---|---|---|
| počet | Počet položek každého typu, které se mají vrátit | Kladné celé číslo | 6 |
| maxCount | Počet položek maximálních typů, které se mají vrátit | Kladné celé číslo | 25 |
| max | Typ, pro který se má vrátit maxCount | String [MAP&#124;USER&#124;REPORT&#124;RESOURCE&#124;VISUALIZATION#124;EVENT_VISUALIZATION,EVENT_CHART,EVENT_REPORT] | Nedostupné |

Podporovány jsou formáty odpovědí JSON a XML. Odpověď ve formátu JSON bude obsahovat odkazy na odpovídající zdroje a počty nalezených shod celkem a pro každý typ zdroje. Bude vypadat podobně:

```json
{
  "visualizations": [{
    "name": "ANC: ANC 3 Visits Cumulative Numbers",
    "id": "arf9OiyV7df",
    "type": "LINE"
  }, {
    "name": "ANC: 1st and 2rd trends Monthly",
    "id": "jkf6OiyV7el",
    "type": "PIVOT_TABLE"
  }],
  "eventVisualizations": [{
    "name": "Inpatient: Cases 5 to 15 years this year (case)",
    "id": "TIuOzZ0ID0V",
    "type": "LINE_LIST"
  }, {
    "name": "Inpatient: Cases last quarter (case)",
    "id": "R4wAb2yMLik",
    "type": "LINE_LIST"
  }],
  "maps": [{
    "name": "ANC: 1st visit at facility (fixed) 2013",
    "id": "YOEGBvxjAY0"
  }, {
    "name": "ANC: 3rd visit coverage 2014 by district",
    "id": "ytkZY3ChM6J"
  }],
  "reports": [{
    "name": "ANC: 1st Visit Cumulative Chart",
    "id": "Kvg1AhYHM8Q"
  }, {
    "name": "ANC: Coverages This Year",
    "id": "qYVNH1wkZR0"
  }],
  "searchCount": 8,
  "visualizationCount": 2,
  "eventVisualizationCount": 2,
  "mapCount": 2,
  "reportCount": 2,
  "userCount": 0,
  "eventReports": 0,
  "eventCharts" :0,
  "resourceCount": 0
}
```

### Vytváření, aktualizace a odstraňování ovládacích panelů { #webapi_creating_updating_removing_dashboards } 

Creating, updating and deleting dashboards follow standard REST
semantics. In order to create a new dashboard you can make a *POST*
request to the `/api/dashboards` resource. From a consumer perspective
it might be convenient to first create a dashboard and later add items
to it. JSON and XML formats are supported for the request payload. To
create a dashboard with the name "My dashboard" you can use a payload in
JSON like this:

    {
      "name": "Můj ovládací panel"
    }

To update, e.g. rename, a dashboard, you can make a *PUT* request with a
similar request payload the same api/dashboards resource.

To remove a dashboard, you can make a *DELETE* request to the specific
dashboard resource similar to this:

    /api/dashboards/vQFhmLJU5sK

### Přidávání, přesouvání a odebírání položek a obsahu ovládacích panelů { #webapi_adding_moving_removing_dashboard_items } 

In order to add dashboard items a consumer can use the
`/api/dashboards/<dashboard-id>/items/content` resource, where
<dashboard-id\> should be replaced by the relevant dashboard
identifier. The request must use the *POST* method. The URL syntax and
parameters are described in detail in the following table.



Tabulka: Parametry obsahu položek

| Parametr dotazu | Popis | Možnosti |
|---|---|---|
| typ | Typ zdroje, který má být reprezentován položkou ovládacího panelu | vizualizace &#124; mapa &#124; eventVizualizace &#124; uživatelé &#124; zprávy &#124; zdroje &#124; aplikace |
| id | Identifikátor zdroje, který má být reprezentován položkou ovládacího panelu | Identifikátor zdroje |

A *POST* request URL for adding a visualization to a specific dashboard could look like this, where the last id query parameter value is the chart resource identifier:

    /api/dashboards/vQFhmLJU5sK/items/content?type=visualization&id=LW0O27b7TdD

When adding resource of type map, visualization and app, the API
will create and add a new item to the dashboard. When adding a resource
of type users, reports and resources, the API will try to
add the resource to an existing dashboard item of the same type. If no
item of same type or no item of same type with less than eight resources
associated with it exists, the API will create a new dashboard item and
add the resource to it.

In order to move a dashboard item to a new position within the list of
items in a dashboard, a consumer can make a *POST* request to the
following resource URL, where `<dashboard-id>` should be replaced by the
identifier of the dashboard, `<item-id>` should be replaced by the
identifier of the dashboard item and `<index>` should be replaced by the
new position of the item in the dashboard, where the index is
zero-based:

    /api/dashboards/<dashboard-id>/items/<item-id>/position/<index>

To remove a dashboard item completely from a specific dashboard a
consumer can make a *DELETE* request to the below resource URL, where
`<dashboard-id>` should be replaced by the identifier of the dashboard
and `<item-id>` should be replaced by the identifier of the dashboard
item. The dashboard item identifiers can be retrieved through a GET
request to the dashboard resource URL.

    /api/dashboards/<dashboard-id>/items/<item-id>

To remove a specific content resource within a dashboard item a consumer
can make a *DELETE* request to the below resource URL, where
`<content-resource-id>` should be replaced by the identifier of a
resource associated with the dashboard item; e.g. the identifier of a
report or a user. For instance, this can be used to remove a single
report from a dashboard item of type reports, as opposed to removing the
dashboard item completely:

    /api/dashboards/<dashboard-id>/items/<item-id>/content/<content-resource-id>

### Defining a dashboard layout { #webapi_dasboard_layout } 

Pro každý ovládací panel můžete definovat a uložit rozvržení. Následující objekt je zodpovědný za udržení tohoto nastavení.

    {
      "layout": {
        "spacing": {
          "column": 5,
          "row": 5
        },
        "columns": [{
          "index": 0,
          "span": 2
        }, {
          "index": 1,
          "span": 1
        }]
      }
    }

Definice rozvržení bude použita pro všechny položky ovládacího panelu související s daným řídicím panelem, přičemž budou respektovány atributy rozvržení, jako jsou mezery, sloupce, rozpětí a tak dále. Níže naleznete stručný popis každého atributu.

Tabulka: Atributy rozvržení

| Atribut | Popis | Typ |
|---|---|---|
| layout | Toto je kořenový objekt | Objekt |
| spacing | Definuje mezery pro konkrétní součásti rozvržení. V současné době podporuje sloupce a řádky. | Objekt |
| sloupce | Ukládá specifické parametry související se sloupci (v tuto chvíli index a rozsah) | Pole objektů |

## Vizualizace { #webapi_visualization } 

Vizualizace API je navržena tak, aby pomohla klientům komunikovat s grafy a kontingenčními / reportovacími tabulkami. Koncové body tohoto API používá aplikace Vizualizace dat, která umožňuje vytváření, konfiguraci a správu grafů a kontingenčních tabulek na základě definic klienta. Hlavní myšlenkou je umožnit klientům a uživatelům mít jedinečné a centralizované API poskytující všechny typy grafů a kontingenčních tabulek, jakož i specifické parametry a konfiguraci pro každý typ vizualizace.

Toto rozhraní API bylo zavedeno s cílem sjednotit rozhraní API `charts` a `reportTables` a zcela je nahradit rozhraním `vizualizations` API.

A Visualization object is composed of many attributes (some of them related to charts and others related to pivot tables), but the most important ones responsible to reflect the core information of the object are: *"id", "name", "type", "dataDimensionItems", "columns", "rows" and "filters".*

The root endpoint of the API is `/api/visualizations`, and the list of current attributes and elements are described in the table below.



Tabulka: Atributy vizualizace

| Pole | Popis |
|---|---|
| id | Jedinečný identifikátor. |
| code | Vlastní kód k identifikaci vizualizace. |
| název | Název vizualizace |
| typ | Typ vizualizace. Platné typy jsou: COLUMN, STACKED_COLUMN, BAR, STACKED_BAR, LINE, AREA, PIE, RADAR, GAUGE, YEAR_OVER_YEAR_LINE YEAR_OVER_YEAR_COLUMN, SINGLE_VALUE, PIVOT_TABLE. |
| title | Vlastní nadpis. |
| subtitle | Vlastní podnadpis. |
| popis | Definuje vlastní popis pro vizualizaci. |
| created | Datum/čas vytvoření vizualizace. |
| startDate | Počáteční datum použité při filtrování. |
| endDate | Datum ukončení použité během filtrování. |
| sortOrder | Pořadí řazení této vizualizace. Celočíselná hodnota. |
| user | Objekt představující tvůrce vizualizace. |
| publicAccess | Nastavuje oprávnění pro veřejný přístup. |
| displayDensity | Hustota zobrazení textu. |
| fontSize | Velikost písma textu. |
| fontStyle | Vlastní styly písma pro: visualizationTitle, visualizationSubtitle, horizontalAxisTitle, verticalAxisTitle, targetLineLabel, baseLineLabel, seriesAxisLabel, categoryAxisLabel, legenda. |
| relativePeriods | Objekt představující relativní období použitá v analytickém dotazu. |
| legendSet | Objekt představující definice pro legendu. |
| legendDisplayStyle | Styl zobrazení legendy. Může to být: FILL nebo TEXT. |
| legendDisplayStrategy | Styl zobrazení legendy. Může to být: FIXED nebo BY_DATA_ITEM. |
| aggregationType | Určuje, jak se agregují hodnoty v kontingenční tabulce. Platné možnosti: SUM, AVERAGE, AVERAGE_SUM_ORG_UNIT, LAST, LAST_AVERAGE_ORG_UNIT, FIRST, FIRST_AVERAGE_ORG_UNIT, COUNT, STDDEV, VARIANCE, MIN, MAX, NONE, CUSTOM nebo DEFAULT. |
| regressionType | Platný typ regrese: NONE, LINEAR, POLYNOMIAL nebo LOESS. |
| targetLineValue | Cílová čára grafu. Přijímá typ Double. |
| targetLineLabel | Štítek cílové čáry grafu. |
| rangeAxisLabel | Popis / název svislé osy (y) grafu. |
| domainAxisLabel | Popis / název vodorovné osy (x) grafu. |
| rangeAxisMaxValue | Maximální hodnota osy grafu. Hodnoty mimo rozsah se nezobrazí. |
| rangeAxisMinValue | Minimální hodnota osy grafu. Hodnoty mimo rozsah se nezobrazí. |
| rangeAxisSteps | Počet kroků osy mezi minimální a maximální hodnotou. |
| rangeAxisDecimals | Počet desetinných míst pro hodnoty os. |
| baseLineValue | Základní hodnota grafu. |
| baseLineLabel | Popisek základní linie grafu. |
| digitGroupSeparator | Oddělovač skupiny číslic. Platné hodnoty: COMMA, SPACE nebo NONE. |
| topLimit | Horní limit nastavený pro kontingenční tabulku. |
| measureCriteria | Popisuje kritéria použitá pro toto opatření. |
| percentStackedValues | Používá složené hodnoty nebo ne. Pravděpodobnější použití pro grafiku / grafy. Booleovská hodnota. |
| noSpaceBetweenColumns | Zobrazit / skrýt mezeru mezi sloupci. Booleovská hodnota. |
| regression | Označuje, zda vizualizace obsahuje regresní sloupce. S větší pravděpodobností bude použitelný pro Pivot / Report. Booleovská hodnota. |
| externalAccess | Označuje, zda je vizualizace dostupná jako externí pouze pro čtení. Platí pouze v případě, že není přihlášen žádný uživatel. Booleovská hodnota. |
| userOrganisationUnit | Označuje, zda má uživatel organizační jednotku. Booleovská hodnota. |
| userOrganisationUnitChildren | Označuje, zda má uživatel podřízenou organizační jednotku. Booleovská hodnota. |
| userOrganisationUnitGrandChildren | Označuje, zda má uživatel velkou podřízenou organizační jednotku . Booleovská hodnota. |
| reportingParams | Objekt používaný k definování booleovských atributů souvisejících s vytvářením přehledů. |
| rowTotals | Zobrazí (nebo ne) součty řádků. Booleovská hodnota. |
| colTotals | Zobrazí (nebo ne) součty sloupců. Booleovská hodnota. |
| rowSubTotals | Zobrazí (nebo ne) řádkové mezisoučty. Booleovská hodnota. |
| colSubTotals | Zobrazí (nebo ne) mezisoučty sloupců. Booleovská hodnota. |
| cumulativeValues | Označuje, zda vizualizace používá kumulativní hodnoty. Booleovská hodnota. |
| hideEmptyColumns | Označuje, zda se mají skrýt sloupce bez datových hodnot. Booleovská hodnota. |
| hideEmptyRows | Označuje, zda se mají skrýt řádky bez datových hodnot. Booleovská hodnota. |
| fixColumnHeaders | Udržuje záhlaví sloupců v kontingenční tabulce pevná (nebo ne). Booleovská hodnota. |
| fixRowHeaders | Udržuje záhlaví řádků v kontingenční tabulce pevná (nebo ne). Booleovská hodnota. |
| completedOnly | Flag used in analytics requests. If true, only completed events/enrollments will be taken into consideration. Boolean value. |
| skipRounding | Použít nebo nezaokrouhlit. Booleovská hodnota. |
| showDimensionLabels | Zobrazuje štítky rozměrů nebo ne. Booleovská hodnota. |
| hideTitle | Skryje název nebo ne. Booleovská hodnota. |
| hideSubtitle | Skryje titulky nebo ne. Booleovská hodnota. |
| hideLegend | Zobrazit / skrýt legendu. Velmi pravděpodobně bude používán grafy. Booleovská hodnota. |
| showHierarchy | Zobrazuje (nebo ne) názvy hierarchie organizačních jednotek. Booleovská hodnota. |
| showData | Používá se v grafech ke skrytí nebo neskrytí dat / hodnot v rámci vykresleného modelu. Booleovská hodnota. |
| lastUpdatedBy | Objekt, který představuje uživatele, který použil poslední změny ve vizualizaci. |
| lastUpdated | Datum / čas poslední změny vizualizace. |
| favorites | Seznam ID uživatelů, kteří označili tento objekt jako oblíbený. |
| subscribers | Seznam ID uživatelů, kteří se přihlásili k odběru této vizualizace. |
| translations | Sada dostupných překladů objektů, obvykle filtrovaných podle národního prostředí. |
| outlierAnalysis | Objekt odpovědný za zachování nastavení souvisejících s analýzou odlehlých hodnot. Interní atribut 'outlierMethod' podporuje: IQR, STANDARD_Z_SCORE, MODIFIED_Z_SCORE. „Metoda normalizace“ prozatím přijímá pouze Y_RESIDUALS_LINEAR. |
| seriesKey | Možnosti stylingu a zda se má či nemá zobrazit klíč řady. |
| legenda | Možnosti a zda použít barvy legendy na řadu grafů. |

### Načítání vizualizací { #webapi_visualization_retrieving_visualizations } 

Chcete-li načíst seznam všech existujících vizualizací, ve formátu JSON, s některými základními informacemi (včetně identifikátoru, názvu a stránkování), můžete na níže uvedenou adresu URL vytvořit požadavek `GET`. Měli byste vidět seznam všech veřejných / sdílených vizualizací a vašich soukromých.

    GET /api/visualizations.json

Pokud chcete načíst definici JSON konkrétní vizualizace, můžete do adresy URL přidat její příslušný identifikátor:

    GET /api/visualizations/hQxZGXqnLS9.json

Následující reprezentace je příkladem odpovědi ve formátu JSON (pro stručnost byly některé informace odstraněny). Pro kompletní schéma použijte `GET /api/schemas/visualization`.

```json
{
  "lastUpdated": "2020-02-06T11:57:09.678",
  "href": "http://my-domain/dhis/api/visualizations/hQxZGXqnLS9",
  "id": "hQxZGXqnLS9",
  "created": "2017-05-19T17:22:00.785",
  "name": "ANC: ANC 1st visits last 12 months cumulative values",
  "publicAccess": "rw------",
  "userOrganisationUnitChildren": false,
  "type": "LINE",
  "access": {},
  "reportingParams": {
    "parentOrganisationUnit": false,
    "reportingPeriod": false,
    "organisationUnit": false,
    "grandParentOrganisationUnit": false
  },
  "dataElementGroupSetDimensions": [],
  "attributeDimensions": [],
  "yearlySeries": [],
  "axes": [
    {
      "index": 0,
      "type": "RANGE",
      "title": {
        "textMode": "CUSTOM",
        "text": "Any Title"
      }
    }
  ],
  "filterDimensions": [
    "dx"
  ],
  "columns": [
    {
      "id": "ou"
    }
  ],
  "dataElementDimensions": [],
  "categoryDimensions": [],
  "rowDimensions": [
    "pe"
  ],
  "columnDimensions": [
    "ou"
  ],
  "dataDimensionItems": [
    {
      "dataDimensionItemType": "DATA_ELEMENT",
      "dataElement": {
        "id": "fbfJHSPpUQD"
      }
    }
  ],
  "filters": [
    {
      "id": "dx"
    }
  ],
  "rows": [
    {
      "id": "pe"
    }
  ]
}
```
Více přizpůsobené odpovědi lze získat zadáním polí, která chcete extrahovat, do adresy URL. Např.:

    GET /api/visualizations/hQxZGXqnLS9.json?fields=interpretations

vrátí se

```json
{
  "interpretations": [
    {
      "id": "Lfr8I2RPU0C"
    },
    {
      "id": "JuwgdJlJPGb"
    },
    {
      "id": "WAoU2rSpyZp"
    }
  ]
}
```

Jak je vidět, výše uvedené `ZÍSKAT` vrátí pouze interpretace související s daným identifikátorem (v tomto případě `hQxZGXqnLS9`).

### Vytváření, aktualizace a odstraňování vizualizací { #webapi_visualization_add_update_remove_visualizations } 

These operations follow the standard *REST* semantics. A new Visualization can be created through a `POST` request to the `/api/visualizations` resource with a valid JSON payload. An example of payload could be:

```json
{
  "columns": [
    {
      "dimension": "J5jldMd8OHv",
      "items": [
        {
          "name": "CHP",
          "id": "uYxK4wmcPqA",
          "displayName": "CHP",
          "displayShortName": "CHP",
          "dimensionItemType": "ORGANISATION_UNIT_GROUP"
        },
        {
          "name": "Hospital",
          "id": "tDZVQ1WtwpA",
          "displayName": "Hospital",
          "displayShortName": "Hospital",
          "dimensionItemType": "ORGANISATION_UNIT_GROUP"
        }
      ]
    }
  ],
  "rows": [
    {
      "dimension": "SooXFOUnciJ",
      "items": [
        {
          "name": "DOD",
          "id": "B0bjKC0szQX",
          "displayName": "DOD",
          "displayShortName": "DOD",
          "dimensionItemType": "CATEGORY_OPTION_GROUP"
        },
        {
          "name": "CDC",
          "id": "OK2Nr4wdfrZ",
          "displayName": "CDC",
          "displayShortName": "CDC",
          "dimensionItemType": "CATEGORY_OPTION_GROUP"
        }
      ]
    }
  ],
  "filters": [
    {
      "dimension": "ou",
      "items": [
        {
          "name": "Sierra Leone",
          "id": "ImspTQPwCqd",
          "displayName": "Sierra Leone",
          "displayShortName": "Sierra Leone",
          "dimensionItemType": "ORGANISATION_UNIT"
        },
        {
          "name": "LEVEL-1",
          "id": "LEVEL-H1KlN4QIauv",
          "displayName": "LEVEL-1"
        }
      ]
    }
  ],
  "name": "HIV Cases Monthly",
  "description": "Cases of HIV across the months",
  "category": "XY1vwCQskjX",
  "showDimensionLabels": true,
  "hideEmptyRows": true,
  "hideEmptyColumns": true,
  "skipRounding": true,
  "aggregationType": "SUM",
  "regressionType": "LINEAR",
  "type": "PIVOT_TABLE",
  "numberType": "VALUE",
  "measureCriteria": "Some criteria",
  "showHierarchy": true,
  "completedOnly": true,
  "displayDensity": "NORMAL",
  "fontSize": "NORMAL",
  "digitGroupSeparator": "SPACE",
  "legendDisplayStyle": "FILL",
  "legendDisplayStrategy": "FIXED",
  "hideEmptyRowItems": "BEFORE_FIRST_AFTER_LAST",
  "fixColumnHeaders": true,
  "fixRowHeaders": false,
  "regression": false,
  "cumulative": true,
  "sortOrder": 1,
  "topLimit": 2,
  "rowTotals": true,
  "colTotals": true,
  "hideTitle": true,
  "hideSubtitle": true,
  "hideLegend": true,
  "showData": true,
  "percentStackedValues": true,
  "noSpaceBetweenColumns": true,
  "rowSubTotals": true,
  "colSubTotals": true,
  "userOrgUnitType": "TEI_SEARCH",
  "externalAccess": false,
  "publicAccess": "--------",
  "reportingParams": {
    "reportingPeriod": true,
    "organisationUnit": true,
    "parentOrganisationUnit": true,
    "grandParentOrganisationUnit": true
  },
  "parentGraphMap": {
    "ImspTQPwCqd": ""
  },
  "access": {
    "read": true,
    "update": true,
    "externalize": true,
    "delete": false,
    "write": true,
    "manage": false
  },
  "optionalAxes": [
    {
      "dimensionalItem": "fbfJHSPpUQD",
      "axis": 1
    },
    {
      "dimensionalItem": "cYeuwXTCPkU",
      "axis": 2
    }
  ],
  "relativePeriods": {
    "thisYear": false,
    "quartersLastYear": true,
    "last52Weeks": false,
    "thisWeek": false,
    "lastMonth": false,
    "last14Days": false,
    "biMonthsThisYear": false,
    "monthsThisYear": false,
    "last2SixMonths": false,
    "yesterday": false,
    "thisQuarter": false,
    "last12Months": false,
    "last5FinancialYears": false,
    "thisSixMonth": false,
    "lastQuarter": false,
    "thisFinancialYear": false,
    "last4Weeks": false,
    "last3Months": false,
    "thisDay": false,
    "thisMonth": false,
    "last5Years": false,
    "last6BiMonths": false,
    "last4BiWeeks": false,
    "lastFinancialYear": false,
    "lastBiWeek": false,
    "weeksThisYear": false,
    "last6Months": false,
    "last3Days": false,
    "quartersThisYear": false,
    "monthsLastYear": false,
    "lastWeek": false,
    "last7Days": false,
    "thisBimonth": false,
    "lastBimonth": false,
    "lastSixMonth": false,
    "thisBiWeek": false,
    "lastYear": false,
    "last12Weeks": false,
    "last4Quarters": false
  },
  "user": {},
  "yearlySeries": [
    "THIS_YEAR"
  ],
  "userGroupAccesses": [
    {
      "access": "rwx-----",
      "userGroupUid": "ZoHNWQajIoe",
      "displayName": "Bo District M&E officers",
      "id": "ZoHNWQajIoe"
    }
  ],
  "userAccesses": [
    {
      "access": "--------",
      "displayName": "John Barnes",
      "id": "DXyJmlo9rge",
      "userUid": "DXyJmlo9rge"
    }
  ],
  "legendSet": {
    "name": "Death rate up",
    "id": "ham2eIDJ9k6",
    "legends": [
      {
        "startValue": 1,
        "endValue": 2,
        "color": "red",
        "image": "some-image"
      },
      {
        "startValue": 2,
        "endValue": 3,
        "color": "blue",
        "image": "other-image"
      }
    ]
  },
  "outlierAnalysis": {
    "enabled": true,
    "outlierMethod": "IQR",
    "thresholdFactor": 1.5,
    "normalizationMethod": "Y_RESIDUALS_LINEAR",
    "extremeLines": {
      "enabled": true,
      "value": 3.5
    }
  },
  "legend": {
    "strategy": "FIXED",
    "style": "FILL",
    "set": {
      "id": "fqs276KXCXi",
      "displayName": "ANC Coverage"
    },
    "showKey": false
  },
  "seriesKey": {
    "hidden": true,
    "label": {
      "fontStyle": {
        "textColor": "#cccddd"
      }
    }
  },
  "axes": [
    {
      "index": 0,
      "type": "RANGE",
      "label": {
        "fontStyle": {
          "textColor": "#cccddd"
        }
      },
      "title": {
        "text": "Range axis title",
        "textMode": "CUSTOM",
        "fontStyle": {
          "textColor": "#000000"
        }
      },
      "decimals": 1,
      "maxValue": 100,
      "minValue": 20,
      "steps": 5,
      "baseLine": {
        "value": 50,
        "title": {
          "text": "My baseline",
          "fontStyle": {
            "textColor": "#000000"
          }
        }
      },
      "targetLine": {
        "value": 80,
        "title": {
          "text": "My targetline",
          "fontStyle": {
            "textColor": "#cccddd"
          }
        }
      }
    },
    {
      "index": 1,
      "type": "DOMAIN",
      "label": {
        "fontStyle": {
          "textColor": "#000000"
        }
      },
      "title": {
        "text": "Domain axis title",
        "textMode": "CUSTOM",
        "fontStyle": {
          "textColor": "#cccddd"
        }
      }
    }
  ],
  "axes": [
    {
      "index": 0,
      "type": "RANGE",
      "label": {
        "fontStyle": {
          "textColor": "#cccddd"
        }
      },
      "title": {
        "text": "Range axis title",
        "fontStyle": {
          "textColor": "#000000"
        }
      },
      "decimals": 1,
      "maxValue": 100,
      "minValue": 20,
      "steps": 5,
      "baseLine": {
        "value": 50,
        "title": {
          "text": "My baseline",
          "fontStyle": {
            "textColor": "#000000"
          }
        }
      },
      "targetLine": {
        "value": 80,
        "title": {
          "text": "My targetline",
          "fontStyle": {
            "textColor": "#cccddd"
          }
        }
      }
    },
    {
      "index": 1,
      "type": "DOMAIN",
      "label": {
        "fontStyle": {
          "textColor": "#000000"
        }
      },
      "title": {
        "text": "Domain axis title",
        "fontStyle": {
          "textColor": "#cccddd"
        }
      }
    }
  ]
}
```

Chcete-li aktualizovat konkrétní vizualizaci, můžete odeslat požadavek `PUT` na stejný prostředek `/api/visualizations` s podobným datovým obsahem `PLUS` a příslušným identifikátorem vizualizace, např.:

    PUT /api/visualizations/hQxZGXqnLS9

Nakonec, chcete-li odstranit existující vizualizaci, můžete provést požadavek `DELETE` s uvedením identifikátoru vizualizace, která má být odstraněna, jak je znázorněno:

    DELETE /api/visualizations/hQxZGXqnLS9

## Event visualization { #webapi_event_visualization } 
<!--DHIS2-SECTION-ID:webapi_event_visualization-->
The EventVisualization API is designed to help clients to interact with event charts and reports. The endpoints of this API are used by the Event Visualization application which allows the creation, configuration and management of charts and reports based on the client's definitions. The main idea is to enable clients and users to have a unique and centralized API providing all types of event charts and reports as well as specific parameters and configuration for each type of event visualization.
This API was introduced with the expectation to unify both `eventCharts` and `eventReports` APIs and entirely replace them in favour of the `eventVisualizations` API (which means that the usage of `eventCharts` and `eventReports` APIs should be avoided). In summary, the following resources/APIs:
    /api/eventCharts, /api/eventReports
*are being replaced by*
    /api/eventVisualizations

> **Poznámka**
>
> Nové aplikace a klienti by se měli vyvarovat používání rozhraní API `eventCharts` a `eventReports`, protože jsou zastaralá. Místo toho použijte rozhraní API `eventVisualizations`.

An EventVisualization object is composed of many attributes (some of them related to charting and others related to reporting), but the most important ones responsible to reflect the core information of the object are: *"id", "name", "type", "dataDimensionItems", "columns", "rows" and "filters".*
The root endpoint of the API is `/api/eventVisualizations`, and the list of current attributes and elements are described in the table below.



Tabulka: Atributy EventVisualization

| Pole | Popis |
|---|---|
| id | Jedinečný identifikátor. |
| code | Vlastní kód k identifikaci EventVisualation. |
| název | Název EventVisualation |
| typ | Platné typy EventVisualiation jsou: The valid types are: COLUMN, STACKED_COLUMN, BAR, STACKED_BAR, LINE, LINE_LIST, AREA, STACKED_AREA, PIE, RADAR, GAUGE, YEAR_OVER_YEAR_LINE, YEAR_OVER_YEAR_COLUMN, SINGLE_VALUE, PIVOT_TABLE, SCATTER, BUBBLE. |
| title | Vlastní nadpis. |
| subtitle | Vlastní podnadpis. |
| popis | Definuje vlastní popis pro EventVisualation. |
| created | Datum / čas vytvoření EventVisualation. |
| startDate | Počáteční datum použité při filtrování. |
| endDate | Datum ukončení použité během filtrování. |
| sortOrder | Pořadí řazení této EventVisualation. Celočíselná hodnota. |
| user | Objekt představující tvůrce vizualizace. |
| publicAccess | Nastavuje oprávnění pro veřejný přístup. |
| displayDensity | Hustota zobrazení textu. |
| fontSize | Velikost písma textu. |
| relativePeriods | Objekt představující relativní období použitá v analytickém dotazu. |
| legenda | An object representing the definitions for the legend and legend set, display style (FILL or TEXT) and display strategy (FIXED or BY_DATA_ITEM). |
| aggregationType | Určuje, jak jsou hodnoty agregovány (pokud existuje). Platné možnosti: SUM, AVERAGE, AVERAGE_SUM_ORG_UNIT, LAST, LAST_AVERAGE_ORG_UNIT, FIRST, FIRST_AVERAGE_ORG_UNIT, COUNT, STDDEV, VARIANCE, MIN, MAX, NONE, CUSTOM or DEFAULT. |
| regressionType | Platný typ regrese: NONE, LINEAR, POLYNOMIAL nebo LOESS. |
| targetLineValue | Cílová čára grafu. Přijímá typ Double. |
| targetLineLabel | Štítek cílové čáry grafu. |
| rangeAxisLabel | Popis / název svislé osy (y) grafu. |
| domainAxisLabel | Popis / název vodorovné osy (x) grafu. |
| rangeAxisMaxValue | Maximální hodnota osy grafu. Hodnoty mimo rozsah se nezobrazí. |
| rangeAxisMinValue | Minimální hodnota osy grafu. Hodnoty mimo rozsah se nezobrazí. |
| rangeAxisSteps | Počet kroků osy mezi minimální a maximální hodnotou. |
| rangeAxisDecimals | Počet desetinných míst pro hodnoty os. |
| baseLineValue | Základní hodnota grafu. |
| baseLineLabel | Popisek základní linie grafu. |
| digitGroupSeparator | Oddělovač skupiny číslic. Platné hodnoty: COMMA, SPACE nebo NONE. |
| topLimit | Horní limit nastavený pro kontingenční tabulku. |
| measureCriteria | Popisuje kritéria použitá pro toto opatření. |
| percentStackedValues | Používá složené hodnoty nebo ne. Pravděpodobnější použití pro grafiku / grafy. Booleovská hodnota. |
| noSpaceBetweenColumns | Zobrazit / skrýt mezeru mezi sloupci. Booleovská hodnota. |
| externalAccess | Označuje, zda je EventVisualization k dispozici jako externí pouze pro čtení. Booleovská hodnota. |
| userOrganisationUnit | Označuje, zda má uživatel organizační jednotku. Booleovská hodnota. |
| userOrganisationUnitChildren | Označuje, zda má uživatel podřízenou organizační jednotku. Booleovská hodnota. |
| userOrganisationUnitGrandChildren | Označuje, zda má uživatel organizační jednotku velkých dětí. Booleovská hodnota. |
| rowTotals | Zobrazí (nebo ne) součty řádků. Booleovská hodnota. |
| colTotals | Zobrazí (nebo ne) součty sloupců. Booleovská hodnota. |
| rowSubTotals | Zobrazí (nebo ne) řádkové mezisoučty. Booleovská hodnota. |
| colSubTotals | Zobrazí (nebo ne) mezisoučty sloupců. Booleovská hodnota. |
| cumulativeValues | Označuje, zda EventVisualization používá kumulativní hodnoty. Booleovská hodnota. |
| hideEmptyRows | Označuje, zda se mají skrýt řádky bez datových hodnot. Booleovská hodnota. |
| completedOnly | Flag used in analytics requests. If true, only completed events/enrollments will be taken into consideration. Boolean value. |
| showDimensionLabels | Zobrazuje štítky rozměrů nebo ne. Booleovská hodnota. |
| hideTitle | Skryje název nebo ne. Booleovská hodnota. |
| hideSubtitle | Skryje titulky nebo ne. Booleovská hodnota. |
| showHierarchy | Zobrazuje (nebo ne) názvy hierarchie organizačních jednotek. Booleovská hodnota. |
| showData | Používá se v grafech ke skrytí nebo neskrytí dat / hodnot v rámci vykresleného modelu. Booleovská hodnota. |
| lastUpdatedBy | Objekt, který představuje uživatele, který použil poslední změny na EventVisualization. |
| lastUpdated | Datum / čas poslední změny EventVisualization. |
| favorites | Seznam ID uživatelů, kteří označili tento objekt jako oblíbený. |
| subscribers | Seznam ID uživatelů, kteří se přihlásili k odběru této EventVisualization. |
| translations | Sada dostupných překladů objektů, obvykle filtrovaných podle národního prostředí. |
| program | Program spojený. |
| programStage | Související programová fáze. |
| programStatus | Stav programu. Může být ACTIVE, COMPLETED, CANCELLED. |
| eventStatus | Stav události. Může být ACTIVE, COMPLETED, VISITED, SCHEDULE, OVERDUE, SKIPPED. |
| dataType | Typ dat události. Může to být AGGREGATED_VALUES nebo EVENTS. |
| columnDimensions | Rozměry definované pro sloupce. |
| rowDimensions | Rozměry definované pro řádky. |
| filterDimensions | Rozměry definované pro filtry. |
| outputType | Označuje typ výstupu EventVisualization. Může to být EVENT, ENROLLMENT nebo TRACKED_ENTITY_INSTANCE. |
| collapseDataDimensions | Označuje, zda se mají sbalit všechny datové dimenze do jedné dimenze. Booleovská hodnota. |
| hideNaData | Označuje, zda se mají skrýt N/A data. Booleovská hodnota. |

### Retrieving event visualizations { #webapi_event_visualization_retrieving_event_visualizations } 
<!--DHIS2-SECTION-ID:webapi_event_visualization_retrieving_event_visualizations-->
To retrieve a list of all existing event visualizations, in JSON format, with some basic information (including identifier, name and pagination) you can make a `GET` request to the URL below. You should see a list of all public/shared event visualizations plus your private ones.
    GET /api/eventVisualizations.json
If you want to retrieve the JSON definition of a specific EventVisualization you can add its respective identifier to the URL:
    GET /api/eventVisualizations/hQxZGXqnLS9.json
The following representation is an example of a response in JSON format (for brevity, certain information has been removed). For the complete schema, please use `GET /api/schemas/eventVisualization`.

```json
{
    "lastUpdated": "2021-11-25T17:18:03.834",
    "href": "http://localhost:8080/dhis/api/eventVisualizations/EZ5jbRTxRGh",
    "id": "EZ5jbRTxRGh",
    "created": "2021-11-25T17:18:03.834",
    "name": "Inpatient: Mode of discharge by facility type this year",
    "publicAccess": "rw------",
    "userOrganisationUnitChildren": false,
    "type": "STACKED_COLUMN",
    "subscribed": false,
    "userOrganisationUnit": false,
    "rowSubTotals": false,
    "cumulativeValues": false,
    "showDimensionLabels": false,
    "sortOrder": 0,
    "favorite": false,
    "topLimit": 0,
    "collapseDataDimensions": false,
    "userOrganisationUnitGrandChildren": false,
    "displayName": "Inpatient: Mode of discharge by facility type this year",
    "percentStackedValues": false,
    "noSpaceBetweenColumns": false,
    "showHierarchy": false,
    "hideTitle": false,
    "showData": true,
    "hideEmptyRows": false,
    "hideNaData": false,
    "regressionType": "NONE",
    "completedOnly": false,
    "colTotals": false,
    "sharing": {
      "owner": "GOLswS44mh8",
      "external": false,
      "users": {},
      "userGroups": {},
      "public": "rw------"
    },
    "programStatus": "CANCELLED",
    "hideEmptyRowItems": "NONE",
    "hideSubtitle": false,
    "outputType": "EVENT",
    "hideLegend": false,
    "externalAccess": false,
    "colSubTotals": false,
    "rowTotals": false,
    "digitGroupSeparator": "SPACE",
    "program": {
      "id": "IpHINAT79UW"
    },
    "access": {
      "read": true,
      "update": true,
      "externalize": true,
      "delete": true,
      "write": true,
      "manage": true
    },
    "lastUpdatedBy": {
      "displayName": "John Traore",
      "name": "John Traore",
      "id": "xE7jOejl9FI",
      "username": "admin"
    },
    "relativePeriods": {
      "thisYear": false,
      ...
    },
    "programStage": {
      "id": "A03MvHHogjR"
    },
    "createdBy": {
      "displayName": "Tom Wakiki",
      "name": "Tom Wakiki",
      "id": "GOLswS44mh8",
      "username": "system"
    },
    "user": {
      "displayName": "Tom Wakiki",
      "name": "Tom Wakiki",
      "id": "GOLswS44mh8",
      "username": "system"
    },
    "attributeDimensions": [],
    "translations": [],
    "legend": {
      "set": {
        "id": "gFJUXah1uRH"
      },
      "showKey": false,
      "style": "FILL",
      "strategy": "FIXED"
    },
    "filterDimensions": [
      "ou",
      "H6uSAMO5WLD"
    ],
    "interpretations": [],
    "userGroupAccesses": [],
    "subscribers": [],
    "columns": [
      {
        "id": "X8zyunlgUfM"
      }
    ]
    "periods": [],
    "categoryDimensions": [],
    "rowDimensions": [
      "pe"
    ],
    "itemOrganisationUnitGroups": [],
    "programIndicatorDimensions": [],
    "attributeValues": [],
    "columnDimensions": [
      "X8zyunlgUfM"
    ],
    "userAccesses": [],
    "favorites": [],
    "dataDimensionItems": [],
    "categoryOptionGroupSetDimensions": [],
    "organisationUnitGroupSetDimensions": [],
    "organisationUnitLevels": [],
    "organisationUnits": [
      {
        "id": "ImspTQPwCqd"
      }
    ],
    "filters": [
      {
        "id": "ou"
      },
      {
        "id": "H6uSAMO5WLD"
      }
    ],
    "rows": [
      {
        "id": "pe"
      }
    ]
}
```

A more tailored response can be obtained by specifying, in the URL, the fields you want to extract. Ie.:
    GET /api/eventVisualizations/hQxZGXqnLS9.json?fields=interpretations
will return

```json
{
  "interpretations": [
    {
      "id": "Lfr8I2RPU0C"
    },
    {
      "id": "JuwgdJlJPGb"
    },
    {
      "id": "WAoU2rSpyZp"
    }
  ]
}
```

Jak je vidět, výše uvedené `ZÍSKAT` vrátí pouze interpretace související s daným identifikátorem (v tomto případě `hQxZGXqnLS9`).

### Creating, updating and removing event visualizations { #webapi_event_visualization_add_update_remove_event_visualizations } 
<!--DHIS2-SECTION-ID:webapi_event_visualization_add_update_remove_event_visualizations-->
These operations follow the standard *REST* semantics. A new EventVisualization can be created through a `POST` request to the `/api/eventVisualizations` resource with a valid JSON payload. An example of payload could be:

```json
{
    "name": "Inpatient: Cases under 10 years last 4 quarters",
    "publicAccess": "rw------",
    "userOrganisationUnitChildren": false,
    "type": "STACKED_COLUMN",
    "subscribed": false,
    "userOrganisationUnit": false,
    "rowSubTotals": false,
    "cumulativeValues": false,
    "showDimensionLabels": false,
    "sortOrder": 0,
    "favorite": false,
    "topLimit": 0,
    "collapseDataDimensions": false,
    "userOrganisationUnitGrandChildren": false,
    "displayName": "Inpatient: Cases under 10 years last 4 quarters",
    "percentStackedValues": false,
    "noSpaceBetweenColumns": false,
    "showHierarchy": false,
    "hideTitle": false,
    "showData": true,
    "hideEmptyRows": false,
    "userAccesses": [],
    "userGroupAccesses": [],
    "hideNaData": false,
    "regressionType": "NONE",
    "completedOnly": false,
    "colTotals": false,
    "programStatus": "CANCELLED",
    "sharing": {
      "owner": "GOLswS44mh8",
      "external": false,
      "users": {},
      "userGroups": {},
      "public": "rw------"
    },
    "displayFormName": "Inpatient: Cases under 10 years last 4 quarters",
    "hideEmptyRowItems": "NONE",
    "hideSubtitle": false,
    "outputType": "EVENT",
    "hideLegend": false,
    "externalAccess": false,
    "colSubTotals": false,
    "rowTotals": false,
    "digitGroupSeparator": "SPACE",
    "access": {
      "read": true,
      "update": true,
      "externalize": false,
      "delete": true,
      "write": true,
      "manage": true
    },
    "lastUpdatedBy": {
      "displayName": "Tom Wakiki",
      "name": "Tom Wakiki",
      "id": "GOLswS44mh8",
      "username": "system"
    },
    "legend": {
      "set": {
        "id": "gFJUXah1uRH"
      },
      "showKey": false,
      "style": "FILL",
      "strategy": "FIXED"
    },
    "relativePeriods": {
      "thisYear": false,
    ...
    },
    "program": {
      "id": "IpHINAT79UW",
      "enrollmentDateLabel": "Date of enrollment",
      "incidentDateLabel": "Date of birth",
      "name": "Child Programme"
    },
    "programStage": {
      "id": "A03MvHHogjR",
      "executionDateLabel": "Report date",
      "name": "Birth"
    },
    "createdBy": {
      "displayName": "Tom Wakiki",
      "name": "Tom Wakiki",
      "id": "GOLswS44mh8",
      "username": "system"
    },
    "user": {
      "displayName": "Tom Wakiki",
      "name": "Tom Wakiki",
      "id": "GOLswS44mh8",
      "username": "system"
    },
    "translations": [],
    "filterDimensions": [
      "ou"
    ],
    "interpretations": [],
    "dataElementDimensions": [
      {
        "filter": "LE:10",
        "dataElement": {
          "id": "qrur9Dvnyt5"
        }
      }
    ],
    "periods": [],
    "categoryDimensions": [],
    "rowDimensions": [
      "pe"
    ],
    "columnDimensions": [
      "qrur9Dvnyt5"
    ],
    "organisationUnits": [
      {
        "id": "ImspTQPwCqd"
      }
    ],
    "filters": [
      {
        "dimension": "ou",
        "items": [
          {
            "id": "ImspTQPwCqd"
          }
        ]
      },
      {
        "dimension": "H6uSAMO5WLD",
        "items": []
      }
    ],
    "columns": [
      {
        "dimension": "X8zyunlgUfM",
        "items": [],
        "repetition": {
          "indexes": [1, 2, 3, -2, -1, 0]
        }
      },
      {
        "dimension": "eventDate",
        "items": [
          {
            "id": "2021-07-21_2021-08-01"
          },
          {
            "id": "2021-01-21_2021-02-01"
          }
        ]
      },
      {
        "dimension": "incidentDate",
        "items": [
          {
            "id": "2021-10-01_2021-10-30"
          }
        ]
      },
      {
        "dimension": "eventStatus",
        "items": [
          {
            "id": "ACTIVE"
          },
          {
            "id": "COMPLETED"
          }
        ]
      },
      {
        "dimension": "createdBy",
        "items": [
          {
            "id": "userA"
          }
        ]
      },
      {
        "dimension": "lastUpdatedBy",
        "items": [
          {
            "id": "userB"
          }
        ]
      }
    ],
    "rows": [
      {
        "dimension": "pe",
        "items": [
          {
            "id": "LAST_12_MONTHS"
          }
        ]
      }
    ]
}
```

For multi-program support, the root `program` should not be specified. This will turn the `eventVisualization` into a multi-program. Consequently, we have to specify the `program` and `programStage` (when applicable) for each `dimension` in `rows`, `columns`, and `filters`.

Příklad:

```json
"program": null,
"columns": [
  {
    "dimension": "ou",
    "items": [
        {
            "id": "O6uvpzGd5pu"
        }
    ],
    "program": {
        "id": "IpHINAT79UW"
    }
  },
  {
    "dimensionType": "CATEGORY_OPTION_GROUP_SET",
    "items": [
      {
          "id": "JLGV7lRQRAg"
      },
      {
          "id": "p916ZCVGNyq"
      }
    ],
    "dimension": "C31vHZqu0qU",
    "program": {
        "id": "kla3mAPgvCH"
    },
    "programStage": {
        "id": "aNLq9ZYoy9W"
    }
  }
]
```

> **Note**
>
> The `repetition` attribute (in `rows`, `columns` or `filters`) indicates the events indexes to be retrieved. Taking the example above (in the previous `json` payload), it can be read as follows:
> 
    1 = First event
    2 = Second event
    3 = Third event
    ...
    -2 = Third latest event
    -1 = Second latest event
    0 = Latest event (default)

To update a specific EventVisualization, you can send a `PUT` request to the same `/api/eventVisualizations` resource with a similar payload `PLUS` the respective EventVisualization's identifier, ie.:
    PUT /api/eventVisualizations/hQxZGXqnLS9
Finally, to delete an existing EventVisualization, you can make a `DELETE` request specifying the identifier of the EventVisualization to be removed, as shown:
    DELETE /api/eventVisualizations/hQxZGXqnLS9

## Interpretace { #webapi_interpretations } 

Pro zdroje související s analýzou dat v DHIS2, jako jsou vizualizace, mapy, zprávy událostí, grafy událostí a dokonce vizualizace, můžete psát a sdílet interpretace dat. Interpretace může být komentář, otázka, pozorování nebo výklad k datové zprávě nebo vizualizaci.

    /api/interpretations

### Čtení interpretací { #webapi_reading_interpretations } 

To read interpretations we will interact with the
`/api/interpretations` resource. A typical GET request using field
filtering can look like this:

    GET /api/interpretations?fields=*,comments[id,text,user,mentions]

The output in JSON response format could look like below (additional
fields omitted for brevity):

```json
{
  "interpretations": [
    {
      "id": "XSHiFlHAhhh",
      "created": "2013-05-30T10:24:06.181+0000",
      "text": "Data looks suspicious, could be a data entry mistake.",
      "type": "MAP",
      "likes": 2,
      "user": {
        "id": "uk7diLujYif"
      },
      "reportTable": {
        "id": "LcSxnfeBxyi"
      },
      "visualization": {
        "id": "LcSxnfeBxyi"
      }
    }, {
      "id": "kr4AnZmYL43",
      "created": "2013-05-29T14:47:13.081+0000",
      "text": "Delivery rates in Bo looks high.",
      "type": "VISUALIZATION",
      "likes": 3,
      "user": {
        "id": "uk7diLujYif"
      },
      "visualization": {
        "id": "HDEDqV3yv3H"
      },
      "mentions": [
        {
          "created": "2018-06-25T10:25:54.498",
          "username": "boateng"
        }
      ],
      "comments": [
        {
          "id": "iB4Etq8yTE6",
          "text": "This report indicates a surge.",
          "user": {
            "id": "B4XIfwOcGyI"
          }
        },
        {
          "id": "iB4Etq8yTE6",
          "text": "Likely caused by heavy rainfall.",
          "user": {
            "id": "B4XIfwOcGyI"
          }
        },
        {
          "id": "SIjkdENan8p",
          "text": "Have a look at this @boateng.",
          "user": {
            "id": "xE7jOejl9FI"
          },
          "mentions": [
            {
              "created": "2018-06-25T10:03:52.316",
              "username": "boateng"
            }
          ]
        }
      ]
    }
  ]
}
```



Tabulka: Interpretační pole

| Pole | Popis |
|---|---|
| id | Identifikátor interpretace. |
| created | Doba, kdy interpretace vznikala. |
| typ | Typ interpretovaného analytického objektu. Platné možnosti: VISUALIZATION, MAP, EVENT_REPORT, EVENT_CHART, EVENT_VISUALIZATION, DATASET_REPORT. |
| user | Přidružení k uživateli, který interpretaci vytvořil. |
| vizualizace | Přidružení k vizualizaci, pokud je typ VIZUALIZACE |
| eventVisualization | Přidružení k vizualizaci události, pokud je typ EVENT_VISUALIZATION |
| mapa | Přidružení k mapě, pokud je typ MAP. |
| eventReport | Přidružení k přehledu události je typu EVENT_REPORT. |
| eventChart | Přidružení k grafu událostí, pokud je typ EVENT_CHART. |
| dataSet | Přidružení k datové sadě, pokud je typ DATASET_REPORT. |
| comments | Soubor komentářů k výkladu. Textové pole obsahuje aktuální komentář. |
| mentions | Soubor zmínek pro výklad. Seznam identifikátorů uživatelů. |

For all analytical objects you can append */data* to the URL to retrieve
the data associated with the resource (as opposed to the metadata). As
an example, by following the map link and appending /data one can
retrieve a PNG (image) representation of the thematic map through the
following URL:

    https://play.dhis2.org/demo/api/maps/bhmHJ4ZCdCd/data

For all analytical objects you can filter by *mentions*. To retrieve all
the interpretations/comments where a user has been mentioned you have
three options. You can filter by the interpretation mentions (mentions
in the interpretation
    description):

    GET /api/interpretations?fields=*,comments[*]&filter=mentions.username:in:[boateng]

Můžete filtrovat podle zmínek v komentářích interpretace (zmínky v jakémkoli komentáři):

    GET /api/interpretations?fields=*,comments[*]
      &filter=comments.mentions.username:in:[boateng]

You can filter by intepretations which contains the mentions either
in the interpretation or in any comment (OR junction):

    GET /api/interpretations?fields=*,comments[*]&filter=mentions:in:[boateng]

### Psaní interpretací { #webapi_writing_interpretations } 

When writing interpretations you will supply the interpretation text as
the request body using a POST request with content type "text/plain".
The URL pattern looks like the below, where {object-type} refers to the
type of the object being interpreted and {object-id} refers to the
identifier of the object being interpreted.

    /api/interpretations/{object-type}/{object-id}

Valid options for object type are *visualization*, *map*,
*eventReport*, *eventChart*, *eventVisualization* and *dataSetReport*.

Některé platné příklady interpretací jsou uvedeny níže.

> **Poznámka**
>
> Rozhraní API `eventCharts` a `eventReports` jsou zastaralé. Místo toho doporučujeme použít rozhraní `eventVisualizations` API.

    /api/interpretations/visualization/hQxZGXqnLS9
    /api/interpretations/map/FwLHSMCejFu
    /api/interpretations/eventReport/xJmPLGP3Cde
    /api/interpretations/eventChart/nEzXB2M9YBz
    /api/interpretations/eventVisualization/nEzXB2M9YBz
    /api/interpretations/dataSetReport/tL7eCjmDIgM

As an example, we will start by writing an interpretation for the visualization with identifier *EbRN2VIbPdV*. To write visualization interpretations we will interact with the `/api/interpretations/visualization/{visualizationId}` resource.
The interpretation will be the request body. Based on this we can put
together the following request using cURL:

```bash
curl -d "This visualization shows a significant ANC 1-3 dropout" -X POST
  "https://play.dhis2.org/demo/api/interpretations/visualization/EbRN2VIbPdV" -H "Content-Type:text/plain" -u admin:district
```

Notice that the response provides a Location header with a value
indicating the location of the created interpretation. This is useful
from a client perspective when you would like to add a comment to the
interpretation.

### Aktualizace a odstranění interpretací { #webapi_updating_removing_interpretations } 

To update an existing interpretation you can use a PUT request where the
interpretation text is the request body using the following URL pattern,
where {id} refers to the interpretation identifier:

    /api/interpretations/{id}

Na základě toho můžeme použít curl k aktualizaci interpretace:

```bash
curl -d "This visualization shows a high dropout" -X PUT
  "https://play.dhis2.org/demo/api/interpretations/visualization/EV08iI1cJRA" -H "Content-Type:text/plain" -u admin:district
```

You can use the same URL pattern as above using a DELETE request to
remove the interpretation.

### Vytváření komentářů interpretací { #webapi_creating_interpretation_comments } 

When writing comments to interpretations you will supply the comment
text as the request body using a POST request with content type
"text/plain". The URL pattern looks like the below, where
{interpretation-id} refers to the interpretation identifier.

    /api/interpretations/{interpretation-id}/comments

Second, we will write a comment to the interpretation we wrote in the
example above. By looking at the interpretation response you will see
that a *Location* header is returned. This header tells us the URL of
the newly created interpretation and from that, we can read its
identifier. This identifier is randomly generated so you will have to
replace the one in the command below with your own. To write a comment
we can interact with the `/api/interpretations/{id}/comments`
resource like this:

```bash
curl -d "An intervention is needed" -X POST
  "https://play.dhis2.org/demo/api/interpretations/j8sjHLkK8uY/comments"
  -H "Content-Type:text/plain" -u admin:district
```

### Aktualizace a odstranění komentářů k výkladu { #webapi_updating_removing_interpretation_comments } 

To updating an interpretation comment you can use a PUT request where
the comment text is the request body using the following URL pattern:

    /api/interpretations/{interpretation-id}/comments/{comment-id}

Na základě toho můžeme použít curl k aktualizaci komentáře:

```bash
curl "https://play.dhis2.org/demo/api/interpretations/j8sjHLkK8uY/comments/idAzzhVWvh2"
  -d "I agree with that." -X PUT -H "Content-Type:text/plain" -u admin:district
```

You can use the same URL pattern as above using a DELETE request to the
remove the interpretation comment.

### Interpretace Líbí se mi { #webapi_liking_interpretations } 

To like an interpretation you can use an empty POST request to the
*like* resource:

    POST /api/interpretations/{id}/like

A like will be added for the currently authenticated user. A user can
only like an interpretation once.

To remove a like for an interpretation you can use a DELETE request to
the same resource as for the like operation.

The like status of an interpretation can be viewed by looking at the
regular Web API representation:

    GET /api/interpretations/{id}

The like information is found in the *likes* field, which represents the
number of likes, and the *likedBy* array, which enumerates the users who
have liked the interpretation.

```json
{
  "id": "XSHiFlHAhhh",
  "text": "Data looks suspicious, could be a data entry mistake.",
  "type": "VISUALIZATION",
  "likes": 2,
  "likedBy": [
    {
      "id": "k7Hg12fJ2f1"
    },
    {
      "id": "gYhf26fFkjFS"
    }
  ]
}
```
## Zobrazení SQL { #webapi_sql_views } 

Prostředek SQL views umožňuje vytvářet a načítat výslednou sadu pohledů SQL. Pohledy SQL lze spustit přímo proti databázi a vykreslit sadu výsledků prostřednictvím prostředku Web API.

    /api/sqlViews

SQL views are useful for creating data views which may be more easily
constructed with SQL compared combining the multiple objects of the Web
API. As an example, lets assume we have been asked to provide a view of
all organization units with their names, parent names, organization unit
level and name, and the coordinates listed in the database. The view
might look something like this:

```sql
select ou.name as orgunit, par.name as parent, ou.coordinates, ous.level, oul.name 
from organisationunit ou
inner join _orgunitstructure ous on ou.organisationunitid = ous.organisationunitid
inner join organisationunit par on ou.parentid = par.organisationunitid
inner join orgunitlevel oul on ous.level = oul.level
where ou.coordinates is not null
order by oul.level, par.name, ou.name;
```

We will use *curl* to first execute the view on the DHIS2 server. This
is essentially a materialization process, and ensures that we have the
most recent data available through the SQL view when it is retrieved
from the server. You can first look up the SQL view from the
api/sqlViews resource, then POST using the following command:

```bash
curl "https://play.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/execute" -X POST -u admin:district
```

The next step in the process is the retrieval of the data. The endpoint is available at:

    /api/sqlViews/{id}/data(.csv)

The `id` path represents the SQL view identifier. The path extensions refers to the format of the data download. Append either `data` for JSON data or `data.csv` for comma separated  values. Support response formats are json, xml, csv, xls, html and html+css. 

As an example, the following command would retrieve CSV data for the SQL view defined above.

```bash
curl "https://play.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/data.csv" -u admin:district
```

Existují tři typy SQL pohledu:

  - *SQL pohled:* Standardní SQL pohledy.

  - *Materializovaný SQL pohled:* SQL pohledy, které jsou zhmotněné
    zapsáním na disk. Je třeba aktualizovat, aby odrážely změny v
    podkladové tabulky. Podporuje kritéria pro filtrování sady výsledků.

  - *SQL dotazy:* Obyčejné SQL dotazy. Podpora inline proměnných pro
    přizpůsobené dotazy.

### Kritéria { #webapi_sql_view_criteria } 

You can do simple filtering on the columns in the result set by
appending *criteria* query parameters to the URL, using the column names
and filter values separated by columns as parameter values, on the
following format:

    /api/sqlViews/{id}/data?criteria=col1:value1&criteria=col2:value2

As an example, to filter the SQL view result set above to only return
organisation units at level 4 you can use the following URL:

    https://play.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/data.csv?criteria=level:4

### Proměnné { #webapi_sql_view_variables } 

SQL views support variable substitution. Variable substitution is only
available for SQL view of type *query*, meaning SQL views which are not
created in the database but simply executed as regular SQL queries.
Variables can be inserted directly into the SQL query and must be on
this format:

    ${variable-key}

As an example, an SQL query that retrieves all data elements of a given
value type where the value type is defined through a variable can look
like this:

    select * from dataelement where valuetype = '${valueType}';

These variables can then be supplied as part of the URL when requested
through the *sqlViews* Web API resource. Variables can be supplied on
the following format:

    /api/sqlViews/{id}/data?var=key1:value1&var=key2:value2

Ukázkový dotaz odpovídající výše uvedenému příkladu může vypadat takto:

    /api/sqlViews/dI68mLkP1wN/data.json?var=valueType:int

Proměnná *valueType* bude nahrazena hodnotou *int* a dotaz vrátí datové prvky s hodnotovým typem int.

The variable parameter must contain alphanumeric characters only. The
variables must contain alphanumeric, dash, underscore and whitespace
characters only.

SQL Views of type *query* also support two system-defined variables that allow the query to access information about the user executing the view:

| proměnná | prostředek |
| -------- | ----- |
| ${_current_user_id} | ID uživatele databáze |
| ${_current_username} | uživatelské jméno uživatele |

Hodnoty těchto proměnných nelze zadat jako součást adresy URL. Vždy jsou vyplněny informacemi o uživateli.

For example, the following SQL view of type *query* shows all the organisation units that are assigned to the user:

```sql
select ou.path, ou.name
from organisationunit ou_user
join organisationunit ou on ou.path like ou_user.path || '%'
join usermembership um on um.organisationunitid = ou_user.organisationunitid
where um.userinfoid = ${_current_user_id}
order by ou.path;
```

### Filtrování { #webapi_sql_view_filtering } 

The SQL view API supports data filtering, equal to the [metadata object_filter](#webapi_metadata_object_filter). For a complete list of filter operators you can look at the documentation for [metadata object_filter](#webapi_metadata_object_filter).

To use filters, simply add them as parameters at the end of the request URL for your SQL view like this. This request will return a result including org units with "bo" in the name at level 2 of the org unit hierarchy:

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_level:eq:2&filter=orgunit_name:ilike:bo

Následující příklad vrátí všechny org jednotky s `orgunit_level` 2 nebo 4:

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_level:in:[2,4]

And last, an example to return all org units that does not start with "Bo":

    /api/sqlViews/w3UxFykyHFy/data.json?filter=orgunit_name:!like:Bo


## Datové položky { #webapi_data_items } 

Tento koncový bod umožňuje uživateli dotazovat se na data týkající se několika různých dimenzionálních položek. Jedná se o tyto položky: `INDICATOR`,` DATA_ELEMENT`, `DATA_SET`,` PROGRAM_INDICATOR`, `PROGRAM_DATA_ELEMENT`,` PROGRAM_ATTRIBUTE`. Koncový bod podporuje pouze požadavky `GET` a jako ostatní koncové body může vracet odpovědi ve formátu JSON nebo XML.

URL je `/api/dataItems` a jak si dokážete představit, je schopen načíst různé objekty prostřednictvím stejného koncového bodu ve stejném požadavku `GET`. Z tohoto důvodu se některé dostupné dotazovatelné atributy budou lišit v závislosti na dotazované položce (položkách) dimenze.

Abychom porozuměli výše uvedenému prohlášení, podívejme se na následující příklady požadavků:

1) `GET /api/dataItems?filter=dimensionItemType:eq:DATA_ELEMENT&filter=valueType:eq:TEXT`
V tomto příkladu má typ položky `DATA_ELEMENT` atribut `valueType`, který lze použít v dotazu.

2) `GET /api/dataItems?pageSize=50&order=displayName:asc&filter=dimensionItemType:eq:PROGRAM_INDICATOR&filter=displayName:ilike:someName&filter=programId:eq:WSGAb5XwJ3Y`

Zde `PROGRAM_INDICATOR` umožňuje filtrování podle `programId`.

So, based on the examples `1)` and `2)` if you try filtering a `DATA_ELEMENT` by `programId` or filter a `PROGRAM_INDICATOR` by `valueType`, you should get no results.
In other words, the filter will be applied only when the attribute actually exists for the respective data item.

Another important aspect to be highlighted is that this endpoint does NOT follow the same querying standards as other existing endpoints, like [Metadata object filter](#webapi_metadata_object_filter) for example. As a consequence, it supports a smaller set of features and querying.
The main reason for that is the need for querying multiple different items that have different relationships, which is not possible using the existing filtering components (used by the others endpoints).

### Endpoint responses { #webapi_data_items_possible_responses } 

Base on the `GET` request/query, the following status codes and responses are can be returned.

#### Results found (status code 200) { #results-found-status-code-200 } 

```json
{
  "pager": {
    "page": 1,
    "pageCount": 27,
    "total": 1339,
    "pageSize": 50
  },
  "dataItems": [
    {
      "simplifiedValueType": "TEXT",
      "displayName": "TB program Gender",
      "displayShortName": "TB prog. Gen.",
      "valueType": "TEXT",
      "name": "TB program Gender",
      "shortName": "TB prog Gen",
      "id": "ur1Edk5Oe2n.cejWyOfXge6",
      "programId": "ur1Edk5Oe2n",
      "dimensionItemType": "PROGRAM_ATTRIBUTE"
    }
  ]
}
```

#### Results not found (status code 200) { #results-not-found-status-code-200 } 

```json
{
  "pager": {
    "page": 1,
    "pageCount": 1,
    "total": 0,
    "pageSize": 50
  },
  "dataItems": [
  ]
}
```

#### Invalid query (status code 409) { #invalid-query-status-code-409 } 

```json
{
  "httpStatus": "Conflict",
  "httpStatusCode": 409,
  "status": "ERROR",
  "message": "Unable to parse element `INVALID_TYPE` on filter dimensionItemType`. The values available are: [INDICATOR, DATA_ELEMENT, DATA_ELEMENT_OPERAND, DATA_SET, PROGRAM_INDICATOR, PROGRAM_DATA_ELEMENT, PROGRAM_ATTRIBUTE]",
  "errorCode": "E2016"
}
```

### Stránkování { #webapi_data_items_pagination } 

This endpoint also supports pagination as a default option. If needed, you can disable pagination by adding `paging=false` to the `GET` request, i.e.: `/api/dataItems?filter=dimensionItemType:in:[INDICATOR]&paging=false`.

Zde je příklad datového obsahu, když je povoleno stránkování. Pamatujte, že stránkování je výchozí možnost a není nutné ji výslovně nastavovat.

```json
{
  "pager": {
    "page": 1,
    "pageCount": 20,
    "total": 969,
    "pageSize": 50
  },
  "dataItems": [...]
}
```

> **Note**
>
> For elements where there is an associated Program, the program name should also be returned as part of the element name (as a prefix). The only exception is `Program Indicators`. We will not prefix the element name in this case, in order to keep the same behavior as existing endpoints.
>
> The /dataItems endpoint will bring only data items that are defined as aggregatable type. The current list of valid aggregatable types is:
`TEXT, LONG_TEXT`, `LETTER`, `BOOLEAN`, `TRUE_ONLY`, `NUMBER`, `UNIT_INTERVAL`, `PERCENTAGE`, `INTEGER`, `INTEGER_POSITIVE`, `INTEGER_NEGATIVE`, `INTEGER_ZERO_OR_POSITIVE`, `COORDINATE`.
>
> Even though the response returns several different attributes, the filtering can only be applied to specific ones: `displayName`, `name`, `valueType`, `id`, `dimensionItemType`, `programId`.
>
> The `order` will be considered invalid if it is set on top of `name` (ie.: order=*name:asc*) and a `filter` is set to `displayName` (ie.: filter=*displayName:ilike:aName*), and vice-versa.

### Atributy odpovědi { #webapi_data_items_response_attributes } 

Nyní, když máme dobrou představu o hlavních funkcích a použití tohoto koncového bodu, pojďme se podívat na seznam atributů vrácených v odpovědi.

Tabulka: Atributy datových položek

| Pole | Popis |
|---|---|
| id | Jedinečný identifikátor. |
| code | Vlastní kód k identifikaci položky dimenze. |
| název | Název uvedený pro položku. |
| displayName | Definovaný zobrazovaný název. |
| shortName | Krátký název položky. |
| displayShortName | Definovaný zobrazovaný krátký název. |
| dimensionItemType | Typ dimenzí. Možné typy: INDICATOR, DATA_ELEMENT, REPORTING_RATE, PROGRAM_INDICATOR, PROGRAM_DATA_ELEMENT, PROGRAM_ATTRIBUTE. |
| valueType | Typ hodnoty položky (přesnější definice). Možné typy: TEXT, LONG_TEXT, LETTER, BOOLEAN, TRUE_ONLY, UNIT_INTERVAL, PERCENTAGE, INTEGER, INTEGER_POSITIVE, INTEGER_NEGATIVE, INTEGER_ZERO_OR_POSITIVE, COORDINATE |
| simplifiedValueType | Obecná reprezentace hodnotového typu. Platné hodnoty: NUMBER, BOOLEAN, DATE, FILE_RESOURCE, COORDINATE, TEXT |
| programId | Přidružené ID programu. |

## Prohlížení reprezentací analytických zdrojů { #webapi_viewing_analytical_resource_representations } 

DHIS2 has several resources for data analysis. These resources include
*maps*, *visualizations*, *eventVisualizations*, *reports* and *documents*. By visiting these resources you will retrieve information about the resource. For instance, by navigating to `/api/visualizations/R0DVGvXDUNP` the response will contain the name, last date of modification and so on for the chart. To retrieve the analytical representation, for instance, a PNG representation of the visualization, you can append */data* to all these resources. For instance, by visiting `/api/visualizations/R0DVGvXDUNP/data` the system will return a PNG image of the visualization.

Tabulka: Analytické zdroje

| Zdroj | Popis | Data URL | Reprezentace zdrojů |
|---|---|---|---|
| eventCharts | Grafy událostí | /api/eventCharts/<identifier\>/data | png |
| mapy | Mapy | /api/maps/<identifier\>/data | png |
| visualizations | Kontingenční tabulky a grafy | /api/visualizations/<identifier\>/data | json &#124; jsonp &#124; html &#124; xml &#124; pdf &#124; xls &#124; csv 
| eventVisualizations | Grafy událostí | /api/eventVisualizations/<identifier\>/data | png 
| png |
| zprávy | Standardní zprávy | /api/reports/<identifier\>/data | pdf &#124; xls &#124; html |
| dokumenty | Zdroje | /api/documents/<identifier\>/data | <follows document\> |

The data content of the analytical representations can be modified by
providing a *date* query parameter. This requires that the analytical
resource is set up for relative periods for the period dimension.

Tabulka: Parametry dotazu na data

| Parametr dotazu | Hodnota | Popis |
|---|---|---|
| datum | Datum ve formátu yyyy-MM-dd | Základ pro relativní období v přehledu (vyžaduje relativní období) |

Tabulka: Parametry dotazu pro typy png / obrázky (vizualizace, mapy)

| Parametr dotazu | Popis |
|---|---|
| width | Šířka obrázku v pixelech |
| height | Výška obrázku v pixelech |

Some examples of valid URLs for retrieving various analytical
representations are listed below.

    /api/visualizations/R0DVGvXDUNP/data
    /api/visualizations/R0DVGvXDUNP/data?date=2013-06-01

    /api/visualizations/jIISuEWxmoI/data.html
    /api/visualizations/jIISuEWxmoI/data.html?date=2013-01-01
    /api/visualizations/FPmvWs7bn2P/data.xls
    /api/visualizations/FPmvWs7bn2P/data.pdf

    /api/eventVisualizations/x5FVFVt5CDI/data
    /api/eventVisualizations/x5FVFVt5CDI/data.png

    /api/maps/DHE98Gsynpr/data
    /api/maps/DHE98Gsynpr/data?date=2013-07-01

    /api/reports/OeJsA6K1Otx/data.pdf
    /api/reports/OeJsA6K1Otx/data.pdf?date=2014-01-01



# Analytika { #analytics } 

## Analytika { #webapi_analytics } 

To access analytical, aggregated data in DHIS2 you can work with the
*analytics* resource. The analytics resource is powerful as it lets you
query and retrieve data aggregated along all available data dimensions.
For instance, you can ask the analytics resource to provide the
aggregated data values for a set of data elements, periods and
organisation units. Also, you can retrieve the aggregated data for a
combination of any number of dimensions based on data elements and
organisation unit group sets.

    /api/analytics

### Parametry požadavku databázového dotazu { #webapi_analytics_query_parameters } 

Prostředek pro analýzu umožňuje určit řadu parametrů dotazu:



Tabulka: Parametry databázového dotazu

| Parametr dotazu | Požadované | Popis | Možnosti (nejprve výchozí) |
|---|---|---|---|
| dimenze | Ano | Rozměry a položky dimenzí, které mají být načteny, se opakují pro každou. | Libovolná dimenze |
| filtr | Ne | Filtry a položky filtru, které se mají použít na dotaz, opakují se pro každý z nich. | Libovolná dimenze |
| aggregationType | Ne | Typ agregace, který se má použít v procesu agregace. | SUM &#124; AVERAGE &#124; AVERAGE_SUM_ORG_UNIT &#124; LAST &#124; LAST_AVERAGE_ORG_UNIT &#124; COUNT &#124; STDDEV &#124; VARIANCE &#124; MIN &#124; MAX |
| measureCriteria | Ne | Filtry pro data / opatření. | EQ &#124; GT &#124; GE &#124; LT &#124; LE |
| preAggregationMeasureCriteria | Ne | Filtry pro data / opatření použité před agregací. | EQ &#124; GT &#124; GE &#124; LT &#124; LE |
| startDate | Ne | Počáteční datum pro časové období. Bude použit jako filtr. Nelze použít společně s  dimenzí období nebo s filtrem. | Datum |
| endDate | Ne | Koncové datum pro časové období. Bude použit jako filtr. Nelze použít společně s  dimenzí období nebo s filtrem. | Datum |
| skipMeta | Ne | Vyloučí část metadat odpovědi (zlepšuje výkon). | false &#124; true |
| skipData | Ne | Vyloučí datovou část odpovědi. | false &#124; true |
| skipRounding | Ne | Přeskočí zaokrouhlování hodnot dat, tj. poskytuje úplnou přesnost. | false &#124; true |
| hierarchyMeta | Ne | Do metadat zahrňte názvy předků organizačních jednotek a cesty hierarchie organizačních jednotek. | false &#124; true |
| ignoreLimit | Ne | Ignorujte limit max. 50 000 záznamů v odpovědi - používejte opatrně. | false &#124; true |
| tableLayout | Ne | Pro odpověď použijte prostý zdroj dat nebo rozložení tabulky. | false &#124; true |
| hideEmptyRows | Ne | Skryje v odpovědi prázdné řádky, použitelné, pokud je rozvržení tabulky true. | false &#124; true |
| hideEmptyColumns | Ne | Skryje v odpovědi prázdné sloupce, použitelné, pokud je rozvržení tabulky true. | false &#124; true |
| showHierarchy | Ne | Zobrazí úplnou cestu hierarchie organizačních jednotek spolu s názvem organizační jednotky. | false &#124; true |
| includeNumDen | Ne | Zahrnuje čitatele a jmenovatele použitého k výpočtu hodnoty v odpovědi. | false &#124; true |
| includeMetadataDetails | Ne | Zahrnuje podrobnosti o metadatech do odpovědi na nezpracovaná data. | false &#124; true |
| displayProperty | Ne | Vlastnost k zobrazení pro metadata. | NÁZEV &#124; KRÁTKÝ NÁZEV |
| outputIdScheme | Ne | Schéma identifikátoru použité pro položky metadat v odpovědi na dotaz. Přijímá identifikátor, kód nebo atributy. | UID &#124; UUID &#124; CODE &#124; NAME &#124; ATTRIBUTE:<ID\> |
| outputOrgUnitIdScheme | Ne | Schéma identifikátoru používané pro položky metadat v odpovědi na dotaz. Tento parametr přepíše "outputIdScheme" speciálně pro organizační jednotky. Přijímá identifikátor, kód nebo atributy. | UUID &#124; CODE &#124; NAME &#124; ATTRIBUTE:<ID\> |
| outputDataElementIdScheme | Ne | Schéma identifikátoru používané pro položky metadat v odpovědi na dotaz. Tento parametr přepíše "outputIdScheme" konkrétně pro datové prvky. Přijímá identifikátor, kód nebo atributy. | UUID &#124; CODE &#124; NAME &#124; ATTRIBUTE:<ID\> |
| inputIdScheme | Ne | Schéma identifikátoru, které se má použít pro položky metadat v požadavku na dotaz, může být identifikátor, kód nebo atributy. | UID &#124; CODE &#124; ATTRIBUTE:<ID\> |
| approvalLevel | Ne | Zahrnuje data, která byla schválena alespoň do dané úrovně schválení, odkazuje na identifikátor úrovně schválení. | Identifikátor úrovně schválení |
| relativePeriodDate | Ne | Datum použité jako základ pro relativní období. | Datum. |
| userOrgUnit | Ne | Explicitně definujte uživatelské organizační jednotky k použití, přepíše organizační jednotky přidružené k aktuálnímu uživateli, více identifikátorů lze oddělit středníkem. | Identifikátory organizační jednotky. |
| sloupce | Ne | Dimenze, které se použijí jako sloupce pro rozložení tabulky. | Jakákoli dimenze (musí být dimenze dotazu) |
| řádky | Ne | Dimenze, které se použijí jako řádky pro rozložení tabulky. | Jakákoli dimenze (musí být dimenze dotazu) |
| řazení | Ne | Zadejte pořadí řádků na základě hodnoty. | ASC &#124; DESC |
| timeField | Ne | Časové pole, na kterém se má založit agregace událostí. Platí pouze pro datové položky událostí. Může to být předdefinovaná volba nebo ID atributu nebo datového prvku s typem hodnoty založené na čase. | EVENT_DATE &#124; ENROLLMENT_DATE &#124; INCIDENT_DATE &#124; DUE_DATE &#124; COMPLETED_DATE &#124; CREATED &#124; LAST_UPDATED &#124; <Attribute ID\> &#124; <Data element ID\> |
| orgUnitField | Ne | The organisation unit field to base event aggregation on. Applies to event data items only. Can be the ID of an attribute or data element with the Organisation unit value type. The default option is specified as omitting the query parameter. | <Attribute ID\> &#124; <Data element ID\> &#124; REGISTRATION &#124; ENROLLMENT &#124; OWNER_AT_START &#124; OWNER_AT_END |
| enhancedConditions           | Ne       | Povolit rozšířené podmínky pro dimenze / filtry | false &#124; true |

The *dimension* query parameter defines which dimensions should be
included in the analytics query. Any number of dimensions can be
specified. The dimension parameter should be repeated for each dimension
to include in the query response. The query response can potentially
contain aggregated values for all combinations of the specified
dimension items.

Parametr *filtr* určuje, které dimenze mají být použity jako filtry pro data získaná v analytickém dotazu. Lze zadat libovolný počet filtrů. Parametr filter by se měl opakovat pro každý filtr, který se má v dotazu použít. Filtr se od dimenze liší tím, že dimenze filtru nebudou součástí obsahu odpovědi dotazu a že agregované hodnoty v odpovědi budou sbaleny na dimenze filtru. Jinými slovy, data v odpovědi budou agregována na dimenze filtru, ale filtry nebudou zahrnuty jako dimenze ve skutečné odpovědi. Jako příklad můžete pro dotaz na určité datové prvky filtrované podle období a organizačních jednotek použít následující adresu URL:

    /api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&filter=pe:2014Q1;2014Q2
      &filter=ou:O6uvpzGd5pu;lc3eMKXaEfw

The *aggregationType* query parameter lets you define which aggregation
operator should be used for the query. By default, the aggregation
operator defined for data elements included in the query will be used.
If your query does not contain any data elements but does include data
element groups, the aggregation operator of the first data element in
the first group will be used. The order of groups and data elements is
undefined. This query parameter allows you to override the default and
specify a specific aggregation operator. As an example, you can set the
aggregation operator to "count" with the following URL:

    /api/analytics?dimension=dx:fbfJHSPpUQD&dimension=pe:2014Q1&dimension=ou:O6uvpzGd5pu
      &aggregationType=COUNT

The *measureCriteria* query parameter lets you filter out ranges of data
records to return. You can instruct the system to return only records
where the aggregated data value is equal, greater than, greater or
equal, less than or less or equal to certain values. You can specify any
number of criteria on the following format, where *criteria* and
*value* should be substituted with real values:

    /api/analytics?measureCriteria=criteria:value;criteria:value

As an example, the following query will return only records where the
data value is greater or equal to 6500 and less than 33000:

    /api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&dimension=pe:2014
      &dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw&measureCriteria=GE:6500;LT:33000

Similar to *measureCriteria*, the *preAggregationMeasureCriteria* query
parameter lets you filter out data, only before aggregation is
performed. For example, the following query only aggregates data where
the original value is within the criteria defined:

    /api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&dimension=pe:2014
      &dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw&preAggregationMeasureCriteria=GE:10;LT:100

The *startDate* and *endDate* parameters can be used to specify a custom
date range to aggregate over. When specifying a date range you can not
specify relative nor fixed periods as dimension or filter. The date range
will filter the analytics response. You can use it like this:

    /api/analytics.json?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      &dimension=ou:ImspTQPwCqd&startDate=2018-01-01&endDate=2018-06-01

In order to have the analytics resource generate the data in the shape
of a ready-made table, you can provide the *tableLayout* parameter with
true as value. Instead of generating a plain, normalized data source,
the analytics resource will now generate the data in a table layout. You
can use the *columns* and *rows* parameters with dimension identifiers
separated by semi-colons as values to indicate which ones to use as
table columns and rows. The column and rows dimensions must be present
as a data dimension in the query (not a filter). Such a request can look
like this:

    /api/analytics.html?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&dimension=pe:2014Q1;2014Q2
      &dimension=ou:O6uvpzGd5pu&tableLayout=true&columns=dx;ou&rows=pe

The *order* parameter can be used for analytics resource to generate
ordered data. The data will be ordered in ascending (or descending) order
of values. An example request for ordering the values in descending
order is:

    /api/analytics?dimension=dx:fbfJHSPpUQD&dimension=pe:LAST_12_MONTHS
      &dimension=ou:O6uvpzGd5pu&order=DESC

### Rozměry a položky { #webapi_analytics_dimensions_and_items } 

DHIS2 features a multi-dimensional data model with several fixed and
dynamic data dimensions. The fixed dimensions are the data element,
period (time) and organisation unit dimension. You can dynamically add
dimensions through categories, category option group sets, 
organisation unit group sets, data element group sets and organisation
unit group sets. The table below displays the available data dimensions
in DHIS2. Each data dimension has a corresponding *dimension
identifier*, and each dimension can have a set of *dimension items*:



Tabulka: Dimenze a položky dimenzí

| Dimenze | ID dimenze | Položky dimenze |
|---|---|---|
| Datové prvky, indikátory, metriky rychlosti vykazování datových souborů, operandy datových prvků, programové indikátory, datové prvky programu, atributy programu, pravidla ověřování | dx | Datový prvek, indikátor, metrika rychlosti vykazování datové sady, operand datového prvku, indikátor programu, identifikátory atributů programu, klíčové slovo DE_GROUP- <group-id\> , IN_GROUP- <group-id\> , použití <dataelement-id\> . <optioncombo-id\> pro operandy datových prvků, <program-id\> . <dataelement-id\> pro datové prvky programu, <program-id\> . <attribute-id\> pro atributy programu, <validationrule-id\> pro výsledky ověření. |
| Období (čas) | pe | Období ISO a relativní období, viz "formát data a období" |
| Hierarchie organizačních jednotek | ou | Identifikátory organizační jednotky a klíčová slova USER_ORGUNIT, USER_ORGUNIT_CHILDREN, USER_ORGUNIT_GRANDCHILDREN, LEVEL- <level\> a OU_GROUP- <group-id\> |
| Kombinace možností kategorií | co | Category option combo identifiers  (omit to get all items) |
| Kombinace možností atributů | ao | Kombinované identifikátory možností kategorie (vynechejte, chcete-li získat všechny položky) |
| Kategorie | <category id\> | Identifikátory možností kategorií (vynechejte, chcete-li získat všechny položky) |
| Sady skupin datových prvků | <group set id\> | Identifikátory skupiny datových prvků (vynechejte, chcete-li získat všechny položky) |
| Sady skupin organizačních jednotek | <group set id\> | Identifikátory skupiny organizačních jednotek (vynechejte, chcete-li získat všechny položky) |
| Sady skupin možností kategorie | <group set id\> | Identifikátory skupiny možností kategorie (vynechejte, chcete-li získat všechny položky) |

Při navrhování analytických dotazů není nutné si uvědomovat, které objekty se používají pro různé dynamické dimenze. Úplný seznam dynamických dimenzí můžete získat na této adrese URL ve webovém rozhraní API:

    /api/dimensions

If you want to retrieve only the dimensional items for a given dynamic dimension you can
use the example below. Pagination is disabled by default. It can be enabled by adding
the pagination parameter `paging=true` to the URL.

    /api/dimensions/J5jldMd8OHv/items?paging=true

The `/dimensions` API also provides an endpoint where the clients can get the *recomendations* for a given set of *dimensions*. For example:

    /api/33/dimensions/recommendations?fields=id&dimension=dx:fbfJHSPpUQD

In the example above, the client will receive back all the *Categories* that are configured as `Data dimension`s and associated (through data sets and category combos) with the data element `fbfJHSPpUQD`.
In addition, all *Organization Unit Group Set*s that are configured as `Data dimension`s will also (and always) be returned as part of the response.


The endpoint supports multiple data elements. If one wishes to send multiple data elements, they should be separated by `;`. For example:

    /api/33/dimensions/recommendations?fields=id&dimension=dx:fbfJHSPpUQD;JuTpJ2Ywq5b

> Note
>
> This endpoint returns only dimensions that can be read by the current logged user. It will check if the current user can read the data or the metadata of the respective recommended dimension. Non-authorized dimensions are omitted from the list.


The base URL to the analytics resource is `/api/analytics`. To request
specific dimensions and dimension items you can use a query string on
the following format, where `dim-id` and `dim-item` should be substituted with real values:

    /api/analytics?dimension=dim-id:dim-item;dim-item&dimension=dim-id:dim-item;dim-item

As illustrated above, the dimension identifier is followed by a colon
while the dimension items are separated by semi-colons. As an example, a
query for two data elements, two periods and two organisation units can
be done with the following URL:

    /api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      &dimension=pe:2016Q1;2016Q2&dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw

To query for data broken down by category option combinations instead of
data element totals you can include the category dimension in the query
string, for instance like this:

    /api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      &dimension=co&dimension=pe:201601&dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw

When selecting data elements you can also select all data elements in a
group as items by using the `DE_GROUP-<id>` syntax:

    /api/analytics?dimension=dx:DE_GROUP-h9cuJOkOwY2
      &dimension=pe:201601&dimension=ou:O6uvpzGd5pu

When selecting data set reporting rates, the syntax contains a data
set identifier followed by a reporting rate metric:

    /api/analytics?dimension=dx:BfMAe6Itzgt.REPORTING_RATE;BfMAe6Itzgt.ACTUAL_REPORTS
      &dimension=pe:201601&dimension=ou:O6uvpzGd5pu

To query for program data elements (of tracker domain type) you can get
those by specifying the program for each data element using the
`<program-id>.<dataelement-id>` syntax:

    /api/analytics.json?dimension=dx:eBAyeGv0exc.qrur9Dvnyt5;eBAyeGv0exc.GieVkTxp4HH
      &dimension=pe:LAST_12_MONTHS&filter=ou:ImspTQPwCqd

To query for program attributes (tracked entity attributes) you can get
those by specifying the program for each attribute using the
`<program.id>.<attribute-id>` syntax:

    /api/analytics.json?dimension=dx:IpHINAT79UW.a3kGcGDCuk6;IpHINAT79UW.UXz7xuGCEhU
      &dimension=pe:LAST_4_QUARTERS&dimension=ou:ImspTQPwCqd

To query for organisation unit group sets and data elements you can use
the following URL. Notice how the group set identifier is used as
a dimension identifier and the groups as dimension items:

    /api/analytics?dimension=Bpx0589u8y0:oRVt7g429ZO;MAs88nJc9nL
      &dimension=pe:2016&dimension=ou:ImspTQPwCqd

To query for data elements and categories you can use this URL. Use the
category identifier as a dimension identifier and the category options as
dimension items:

    /api/analytics?dimension=dx:s46m5MS0hxu;fClA2Erf6IO&dimension=pe:2016
      &dimension=YNZyaJHiHYq:btOyqprQ9e8;GEqzEKCHoGA&filter=ou:ImspTQPwCqd

To query using relative periods and organisation units associated with
the current user you can use a URL like this:

    /api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      &dimension=pe:LAST_12_MONTHS&dimension=ou:USER_ORGUNIT

When selecting organisation units for a dimension you can select an
entire level optionally constrained by any number of boundary
organisation units with the `LEVEL-<level>` syntax. Boundary refers to a
top node in a sub-hierarchy, meaning that all organisation units at the
given level below the given boundary organisation unit in the hierarchy
will be included in the response, and is provided as regular organisation unit
dimension items. The level value can either be a numerical level or refer to the identifier
of the organisation unit level entity. A simple query for all org units at level three:

    /api/analytics?dimension=dx:fbfJHSPpUQD&dimension=pe:2016&dimension=ou:LEVEL-3

A query for level three and four with two boundary org units can be
specified like this:

    /api/analytics?dimension=dx:fbfJHSPpUQD&dimension=pe:2016
      &dimension=ou:LEVEL-3;LEVEL-4;O6uvpzGd5pu;lc3eMKXaEf

When selecting organisation units you can also select all organisation
units in an organisation unit group to be included as dimension items
using the `OU_GROUP-<id>` syntax. The organisation units in the groups
can optionally be constrained by any number of boundary organisation
units. Both the level and the group items can be repeated any number of
times:

    /api/analytics?dimension=dx:fbfJHSPpUQD&dimension=pe:2016
      &dimension=ou:OU_GROUP-w0gFTTmsUcF;OU_GROUP-EYbopBOJWsW;O6uvpzGd5pu;lc3eMKXaEf

You can utilize identifier schemes for the metadata part of the
analytics response with the outputIdScheme property like this. You can
use ID, code and attributes as identifier scheme:

    /api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      &dimension=pe:2017Q1;2017Q2&dimension=ou:O6uvpzGd5pu&outputIdScheme=CODE

Níže je uvedeno několik věcí, na které je třeba dávat pozor při používání analytických zdrojů.

  - Data elements, indicator, data set reporting rates, program data
    elements and program indicators are part of a common data dimension,
    identified as "dx". This means that you can use any of data
    elements, indicators and data set identifiers together with the "dx"
    dimension identifier in a query.

  - For the category, data element group set and organisation unit group
    set dimensions, all dimension items will be used in the query if no
    položky rozměrů jsou specifikovány.

  - For the period dimension, the dimension items are ISO period
    identifikátory a/nebo relativní období. Podívejte se prosím do sekce
    above called "Date and period format" for the period format and
    dostupná relativní období.

  - For the organisation unit dimension, you can specify the items to be
    organizační jednotku nebo dílčí jednotky organizační jednotky
    associated with the user currently authenticated for the request
    pomocí klíčů `USER_ORGUNIT` nebo `USER_ORGUNIT_CHILDREN` jako položek,
    respectively. You can also specify organisation unit identifiers
    directly, or a combination of both.

  - For the organisation unit dimension, you can specify the organisation
    hierarchy level and the boundary unit to use for the request on the
    format `LEVEL-<level>-<boundary-id>`; as an example
    `LEVEL-3-ImspTQPwCqd` implies all organisation units below the given
    boundary unit at level 3 in the hierarchy.

  - For the organisation unit dimension, the dimension items are the
    organisation units and their sub-hierarchy - data will be aggregated
    for all organisation units below the given organisation unit in the
    hierarchy.

  - You cannot specify dimension items for the category option
    combination dimension. Instead, the response will contain the items
    which are linked to the data values.

### Dimenze dx { #webapi_analytics_dx_dimension } 

The `dx` dimension is a special dimension which can contain all of the
following data types.



Tabulka: Typy rozměrů dat dx

| Typ | Syntaxe | Popis | Zdroj dat |
|---|---|---|---|
| Indikátor | <indicator-id\> | Identifikátor indikátoru. | Agregovaná data |
| Skupina indikátorů | IN_GROUP-<indicatorgroup-id\> | Klíčové slovo následované identifikátorem skupiny indikátorů. Do odpovědi zahrne všechny indikátory ve skupině. | Agregovaná data |
| Datový prvek | <dataelement-id\> | Identifikátor datového prvku. | Agregovaná data |
| Skupina datových prvků | DE_GROUP-<dataelementgroup-id\> | Klíčové slovo následované identifikátorem skupiny datových prvků. Do odpovědi zahrne všechny datové prvky ve skupině. | Agregovaná data |
| Operand datového prvku | <dataelement-id\>.<categoryoptcombo-id\>.<attributeoptcombo-id\> | Identifikátor datového prvku následovaný jedním nebo oběma kombinacemi možností kategorie a identifikátorem kombinace možností atributů. Zástupný znak "\*" lze použít k označení libovolné hodnoty kombinace možností. Identifikátor kombinace možností atributu lze zcela vynechat. | Agregát dat |
| Datová sada | <dataset-id\>.<reporting-rate-metric\> | Identifikátor souboru dat následovaný metrikou četnosti přehledů. Může být REPORTING_RATE &#124; REPORTING_RATE_ON_TIME &#124; ACTUAL_REPORTS &#124; ACTUAL_REPORTS_ON_TIME &#124; EXPECTED_REPORTS. | Registrace úplnosti datové sady |
| Datový prvek programu | <program-id\>.<dataelement-id\> | Identifikátor programu následovaný identifikátorem datového prvku. Čte z událostí v rámci zadaného programu. | Akce z daného programu |
| Indikátor programu | <programindicator-id\> | Identifikátor indikátoru programu. Čte z událostí z programu spojených s identifikátorem programu. | Události z programu ukazatele programu |
| Výsledek ověření | <validationrule-id\> | Identifikátor ověřovacího pravidla. Bude zahrnovat porušení ověřovacích pravidel pro ověřovací pravidlo, vyžaduje, aby byly generovány a uchovány výsledky ověření. | Výsledky ověření |

Items from all of the various `dx` types can be combined in an analytics
request. An example looks like this:

    /api/analytics.json
      ?dimension=dx:Uvn6LCg7dVU;BfMAe6Itzgt.REPORTING_RATE;IpHINAT79UW.a3kGcGDCuk6
      &dimension=pe:LAST_12_MONTHS&filter=ou:ImspTQPwCqd

Syntaxi skupiny lze použít i s jakoukoli jinou položkou. Příklad vypadá takto:

    /api/analytics.json
      ?dimension=dx:DE_GROUP-qfxEYY9xAl6;IN_GROUP-oehv9EO3vP7;BfMAe6Itzgt.REPORTING_RATE
      &dimension=pe:LAST_12_MONTHS&filter=ou:ImspTQPwCqd

Data element operands can optionally specify attribute option
combinations and use wildcards e.g. to specify all category option
combination values:

    /api/analytics.json
      ?dimension=dx:Uvn6LCg7dVU.*.j8vBiBqGf6O;Uvn6LCg7dVU.Z4oQs46iTeR
      &dimension=pe:LAST_12_MONTHS&filter=ou:ImspTQPwCqd

> **Tip**
>
> A great way to learn how to use the analytics API is to use the DHIS2
> Data Visualizer web app and create a pivot table. You can play around 
> with pivot tables using the various dimensions and items and click 
> **Download** > **Plain data source** > **JSON** to see the resulting analytics 
> API calls in the address bar of your web browser.

### Formáty odpovědí { #webapi_analytics_response_formats } 

The analytics response containing aggregate data can be returned in
various representation formats. As usual, you can indicate interest in a
specific format by appending a file extension to the URL, through the
`Accept` HTTP header or through the `format` query parameter. The
default format is JSON. The available formats and content-types are
listed below.

  - json (application/json)

  - jsonp (application/javascript)

  - xml (application/xml)

  - csv (application/csv)

  - html (text/html)

  - html+css (text/html)

  - xls (application/vnd.ms-excel)

As an example, to request an analytics response in XML format you can
use the following URL:

    /api/analytics.xml?dimension=dx:fbfJHSPpUQD
      &dimension=pe:2016&dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw

Odpověď JSON bude vypadat takto:

```json
{
  "headers": [
    {
      "name": "dx",
      "column": "Data",
      "meta": true,
      "type": "java.lang.String"
    },
    {
      "name": "pe",
      "column": "Period",
      "meta": true,
      "type": "java.lang.String"
    },
    {
      "name": "value",
      "column": "Value",
      "meta": false,
      "type": "java.lang.Double"
    }
  ],
  "height": 4,
  "metaData": {
    "pe": [
      "2016Q1",
      "2016Q2"
    ],
    "ou": [
      "ImspTQPwCqd"
    ],
    "names": {
      "2016Q1": "Jan to Mar 2016",
      "2016Q2": "Apr to Jun 2016",
      "FbKK4ofIv5R": "Measles Coverage <1 y",
      "ImspTQPwCqd": "Sierra Leone",
      "eTDtyyaSA7f": "Fully Immunized Coverage"
    }
  },
  "rows": [
    [
      "eTDtyyaSA7f",
      "2016Q2",
      "81.1"
    ],
    [
      "eTDtyyaSA7f",
      "2016Q1",
      "74.7"
    ],
    [
      "FbKK4ofIv5R",
      "2016Q2",
      "88.9"
    ],
    [
      "FbKK4ofIv5R",
      "2016Q1",
      "84.0"
    ]
  ],
  "width": 3
}
```

Odpověď představuje tabulku rozměrových dat. Pole *záhlaví* poskytuje přehled o tom, které sloupce jsou v tabulce obsaženy a co obsahují. Vlastnost *sloupec* zobrazuje identifikátor rozměru sloupce, nebo pokud sloupec obsahuje míry, slovo "Hodnota". Vlastnost *meta* je *pravdivá*, pokud sloupec obsahuje položky dimenze, nebo *nepravdivá*, pokud sloupec obsahuje míru (agregované hodnoty dat). Vlastnost *jméno* je podobná vlastnosti sloupce, s tím rozdílem, že v případě, že sloupec obsahuje míru, zobrazuje slovo "hodnota". Vlastnost *type* udává typ třídy Java pro hodnoty sloupce.

The *height* and *width* properties indicate how many data columns and
rows are contained in the response, respectively.

The *metaData periods* property contains a unique, ordered array of the
periods included in the response. The *metaData ou* property contains an
array of the identifiers of organisation units included in the response.
The *metaData names* property contains a mapping between the identifiers
used in the data response and the names of the objects they represent.
It can be used by clients to substitute the identifiers within the data
response with names in order to give a more meaningful view of the data
table.

Pole *rows* obsahuje rozměrovou tabulku dat. Obsahuje sloupce s položkami dimenze (identifikátory objektů nebo období) a sloupec s agregovanými hodnotami dat. Výše uvedená příkladová odpověď obsahuje sloupec s údaji/indikátory, sloupec s periodou a sloupec s hodnotou. První sloupec obsahuje identifikátory ukazatelů, druhý obsahuje identifikátory období ISO a třetí obsahuje hodnoty agregovaných dat.

### Omezení a validace { #webapi_analytics_constraints } 

There are several constraints to the input parameters you can provide to the
analytics resource. If any of the constraints are violated, the API will
return a *409 Conflict* response and a response message looking similar to this:

```json
{
  "httpStatus": "Conflict",
  "httpStatusCode": 409,
  "status": "ERROR",
  "message": "Only a single indicator can be specified as filter",
  "errorCode": "E7108"
}
```

The `httpStatus` and `httpStatusCode` fields indicate the HTTP status and
status code per the HTTP specification. The `messsage` field provides a
human-readable description of the validation error. The `errorCode` field
provides a machine-readable code which can be used by clients to handle
validation errors. The possible validation errors for the aggregate analytics
API are described in the table below.

| Chybový kód | Zpráva |
| ---------- | ------- |
| E7100      | Parametry dotazu nemohou mít hodnotu null |
| E7101      | Musí být zadána alespoň jedna dimenze |
| E7102      | Musí být zadána alespoň jedna položka dimenze dat nebo položka dimenze sady datových skupin |
| E7103      | Dimenze nelze zadat jako dimenzi a filtr současně |
| E7104      | Musí být zadáno alespoň jedno období jako dimenze nebo filtr nebo začátek a data |
| E7105      | Období a datum zahájení a ukončení nelze určit současně |
| E7106      | Datum zahájení nesmí být po datu ukončení |
| E7107      | U sazeb hlášení nelze určit datum zahájení a ukončení |
| E7108      | Jako filtr lze zadat pouze jeden indikátor |
| E7109      | Jako filtr lze zadat pouze jednu četnost vykazování |
| E7110      | Kombinace možností kategorie nelze zadat jako filtr |
| E7111      | Dimenze nelze zadat více než jednou |
| E7112      | Četnost hlášení lze zadat pouze společně s dimenzemi typu |
| E7113      | Přiřazené kategorie nelze určit, pokud nejsou zadány datové prvky |
| E7114      | Přiřazené kategorie lze zadat pouze společně s datovými prvky, nikoli s indikátory nebo četností hlášení |
| E7115      | Datové prvky musí být hodnoty a typu agregace, které umožňují agregaci |
| E7116      | Výrazy indikátoru nemohou obsahovat cyklické odkazy |
| E7117      | Je-li výstupní formát DATA_VALUE_SET, je třeba zadat datovou dimenzi „dx“ |
| E7118      | Pokud je výstupní formát DATA_VALUE_SET, musí být zadána dimenze období 'pe' |
| E7119      | Je-li výstupní formát DATA_VALUE_SET, je třeba zadat dimenzi organizační jednotky 'ou' |
| E7120      | Uživatel nemá povoleno prohlížet organizační jednotku |
| E7121      | Uživatel nemá povoleno číst data pro objekt |
| E7122      | Úroveň schválení dat neexistuje |
| E7123      | Aktuální uživatel je omezen dimenzí, ale nemá přístup k žádným položkám dimenze |
| E7124      | Dimenze je v dotazu přítomna bez jakýchkoli platných možností dimenze |
| E7125      | Identifikátor dimenze neodkazuje na žádnou dimenzi |
| E7126      | Sloupec musí být v dotazu přítomen jako dimenze |
| E7127      | Řádek musí být v dotazu uveden jako dimenze |
| E7128      | Sada výsledků dotazu překročila maximální limit |
| E7129      | Program je zadán, ale neexistuje |
| E7130      | Fáze programu je zadána, ale neexistuje |
| E7131      | Dotaz se nezdařil, pravděpodobně proto, že vypršel časový limit dotazu |

### Formát sady datových hodnot { #webapi_analytics_data_value_set_format } 

The analytics *dataValueSet* resource allows for returning aggregated
data in the data value set format. This format represents raw data
values, as opposed to data which has been aggregated along various
dimensions. Exporting aggregated data as regular data values is useful
for data exchange between systems when the target system contains data
of finer granularity compared to what the destination system is storing.

Jako příklad lze v cílovém systému určit indikátor, který shrne data pro více datových prvků a importuje tato data pro jeden datový prvek v cílovém systému. Jako další příklad lze agregovat data shromážděná na úrovni organizační jednotky 4 v cílovém systému na úroveň 2 a importovat tato data do cílového systému.

Ze zdroje dataValueSet můžete načíst data v surovém formátu sady datových hodnot:

    /api/analytics/dataValueSet

Jsou podporovány následující reprezentace prostředků:

  - json (application/json)

  - xml (application/xml)

When using the data value set format, exactly three dimensions must be
specified as analytics dimensions with at least one dimension item each:

  - Data (dx)

  - Období (pe)

  - Organizační jednotka (ou)

Jakákoli jiná dimenze bude ignorována. Filtry budou použity jako u běžných analytických požadavků. Lze zadat jakýkoli typ datové dimenze, včetně indikátorů, datových prvků, operandů datových prvků, datových sad a indikátorů programu.

Příklad požadavku, který agreguje data pro určité ukazatele, období a organizační jednotky a vrací je jako běžné hodnoty dat v XML, vypadá takto:

    api/analytics/dataValueSet.xml?dimension=dx:Uvn6LCg7dVU;OdiHJayrsKo
      &dimension=pe:LAST_4_QUARTERS&dimension=ou:lc3eMKXaEfw;PMa2VCrupOd

A request which aggregates data for data element operands and uses CODE
as output identifier scheme looks like the below. When defining the
output identifier scheme, all metadata objects part of the response are
affected:

    api/analytics/dataValueSet.json?dimension=dx:fbfJHSPpUQD.pq2XI5kz2BY;fbfJHSPpUQD.PT59n8BQbqM
      &dimension=pe:LAST_12_MONTHS&dimension=ou:ImspTQPwCqd&outputIdScheme=CODE

Při použití schémat identifikátorů založených na atributech pro export hrozí riziko vzniku duplicitních datových hodnot. Pro účely ladění lze použít logický parametr dotazu duplicatesOnly, který vrací pouze duplicitní hodnoty dat. Tuto odpověď lze použít k vyčištění duplicit:

    api/analytics/dataValueSet.xml?dimension=dx:Uvn6LCg7dVU;OdiHJayrsKo
      &dimension=pe:LAST_4_QUARTERS&dimension=ou:lc3eMKXaEfw&duplicatesOnly=true

### Formát surových dat { #webapi_analytics_raw_data } 

The analytics *rawData* resource allows for returning the data stored in
the analytics data tables without any aggregation being performed. This
is useful for clients which would like to perform aggregation and
filtering on their own without having to denormalize data in the
available data dimensions themselves.

    /api/analytics/rawData

Jsou podporovány následující reprezentace prostředků:

  - json (application/json)

  - csv (application/csv)

This resource follows the syntax of the regular analytics resource. Only
a subset of the query parameters are supported. Additionally, a
*startDate* and *endDate* parameter are available. The supported
parameters are listed in the table below.



Tabulka: Parametry databázového dotazu

| Parametr dotazu | Vyžadované / Poznámky |
|---|---|
| dimenze | Ano |
| startDate | Ne / yyyy-MM-dd |
| endDate | Ne / yyyy-MM-dd |
| skipMeta | Ne |
| skipData | Ne |
| hierarchyMeta | Ne |
| showHierarchy | Ne |
| displayProperty | Ne |
| outputIdScheme | Ne |
| outputOrgUnitIdScheme | Ne |
| outputDataElementIdScheme | Ne |
| inputIdScheme | Ne |
| userOrgUnit | Ne |

The *dimension* query parameter defines which dimensions (table columns)
should be included in the response. It can optionally be constrained
with items. The *filter* query parameter defines which items and
dimensions (table columns) should be used as a filter for the response.

For the organisation unit dimension, the response will contain data
associated with the organisation unit and all organisation units in the
sub-hierarchy (children in the tree). This is different compared to the
regular analytics resource, where only the explicitly selected
organisation units are included.

To retrieve a response with specific data elements, specific periods,
specific organisation units and all data for two custom dimensions you
can issue a request like this:

    /api/analytics/rawData.json?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU;Jtf34kNZhzP
      &dimension=J5jldMd8OHv&dimension=Bpx0589u8y0
      &dimension=pe:LAST_12_MONTHS
      &dimension=ou:O6uvpzGd5pu;fdc6uOvgoji

The *startDate* and *endDate* parameters allow for fetching data linked
to any period between those dates. This avoids the need for defining all
periods explicitly in the
    request:

    /api/analytics/rawData.json?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU;Jtf34kNZhzP
      &dimension=J5jldMd8OHv&dimension=Bpx0589u8y0
      &startDate=2015-01-01&endDate=2015-12-31
      &dimension=ou:O6uvpzGd5pu;fdc6uOvgoji

The *filter* parameter can be used to filter a response without
including that dimension as part of the response, this time in CSV
format:

    /api/analytics/rawData.csv?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU;Jtf34kNZhzP
      &filter=J5jldMd8OHv:uYxK4wmcPqA;tDZVQ1WtwpA
      &startDate=2015-01-01&endDate=2015-12-31
      &dimension=ou:O6uvpzGd5pu

The *outputIdScheme* parameter is useful if you want human readable data
responses as it can be set to *NAME* like this:

    /api/analytics/rawData.csv?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      &filter=J5jldMd8OHv:uYxK4wmcPqA;tDZVQ1WtwpA
      &startDate=2017-01-01&endDate=2017-12-31
      &dimension=ou:O6uvpzGd5pu
      &outputIdScheme=NAME

The response from the *rawData* resource will look identical to the
regular analytics resource; the difference is that the response contains
raw, non-aggregated data, suitable for further aggregation by
third-party systems.

### Ladění { #webapi_analytics_debugging } 

When debugging analytics requests it can be useful to examine the data
value source of the aggregated analytics response. The
*analytics/debug/sql* resource will provide an SQL statement that
returns the relevant content of the datavalue table. You can produce
this SQL by doing a GET request with content type "text/html" or
"text/plain" like below. The dimension and filter syntax are identical to
regular analytics queries:

    /api/analytics/debug/sql?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
      &filter=pe:2016Q1;2016Q2&filter=ou:O6uvpzGd5pu

## Analýza události { #webapi_event_analytics } 

The event analytics API lets you access aggregated event data and query
*events* captured in DHIS2. This resource lets you retrieve events based
on a program and optionally a program stage, and lets you retrieve and
filter events on any event dimensions.

    /api/analytics/events

### Rozměry a položky { #webapi_event_analytics_dimensions_items } 

Event dimensions include data elements, attributes, organisation units
and periods. The aggregated event analytics resource will return
aggregated information such as counts or averages. The query analytics
resource will simply return events matching a set of criteria and does
not perform any aggregation. You can specify dimension items in the form
of options from option sets and legends from legend sets for data
elements and attributes which are associated with such. The event
dimensions are listed in the table below.



Tabulka: Dimenze události

| Dimenze | ID dimenze | Popis |
|---|---|---|
| Datové prvky | <id\> | Identifikátory datových prvků |
| Atributy | <id\> | Identifikátory atributů |
| Období | pe | Období ISO a relativní období, viz "formát data a období" |
| Organizační jednotky | ou | Identifikátory organizační jednotky a klíčová slova USER_ORGUNIT, USER_ORGUNIT_CHILDREN, USER_ORGUNIT_GRANDCHILDREN, LEVEL- <level\> a OU_GROUP- <group-id\> |
| Sady skupin organizačních jednotek | <org unit group set id\> | Identifikátory sady skupin organizačních jednotek |
| Kategorie | <category id\> | Identifikátory kategorií (pouze kategorie atributů programu) |

### Parametry požadavku databázového dotazu { #webapi_event_analytics_request_query_parameters } 

Rozhraní API pro analytickou událost umožňuje určit rozsah parametrů dotazu.



Tabulka: Parametry dotazu pro dotaz události i souhrnnou analýzu

| Parametr dotazu | Požadované | Popis | Možnosti (nejprve výchozí) |
|---|---|---|---|
| program | Ano | Identifikátor programu. | Jakýkoli identifikátor programu |
| fáze | Ne | Identifikátor fáze programu. | Jakýkoli identifikátor fáze programu |
| startDate | Ano | Datum zahájení událostí. | Datum ve formátu yyyy-MM-dd |
| endDate | Ano | Datum ukončení událostí. | Datum ve formátu yyyy-MM-dd |
| dimenze | Ano | Identifikátor dimenze zahrnující datové prvky, atributy, indikátory programu, období, organizační jednotky a sady skupin organizačních jednotek. Parametr lze opakovat libovolněkrát. Filtry položek lze použít na dimenzi ve formátu <item-id\>: <operator\>: <filter\>. Hodnoty filtru nerozlišují malá a velká písmena. | Operátory mohou být EQ &#124; GT &#124; GE &#124; LT &#124; LE &#124; NE &#124; LIKE &#124; IN |
| filtr | Ne | Identifikátor dimenze zahrnující datové prvky, atributy, období, organizační jednotky a sady skupin organizačních jednotek. Parametr lze opakovat libovolněkrát. Filtry položek lze použít na dimenzi ve formátu <item-id\>: <operator\>: <filter\>. Hodnoty filtru nerozlišují malá a velká písmena. ||
| hierarchyMeta | Ne | Do metadat zahrňte názvy předků organizačních jednotek a cesty hierarchie organizačních jednotek. | false &#124; true |
| eventStatus | Ne | Zadejte stav událostí, které chcete zahrnout. | ACTIVE &#124; COMPLETED &#124; SCHEDULE &#124; OVERDUE &#124; SKIPPED. Can be comma separated (*for query only*). |
| programStatus | Ne | Zadejte stav zápisu událostí, které chcete zahrnout. | ACTIVE &#124; COMPLETED &#124; CANCELLED. Can be comma separated (*for query only*). |
| relativePeriodDate | řetězec | Ne | Identifikátor data, např.: "2016-01-01". Přepíše počáteční datum relativního období |
| sloupce | Ne | Dimenze, které se použijí jako sloupce pro rozložení tabulky. | Jakákoli dimenze (musí být dimenze dotazu) |
| řádky | Ne | Dimenze, které se použijí jako řádky pro rozložení tabulky. | Jakákoli dimenze (musí být dimenze dotazu) |
| timeField | Ne | Time field used in aggregations/queries on events. Applies to event data items only. Can be a predefined option or the ID of an attribute or data element with a time-based value type. For "/analytics/events/" endpoints, the default "timeField" is EVENT_DATE. | EVENT_DATE &#124; SCHEDULED_DATE &#124; <Attribute ID\> &#124; <Data element ID\> |



Tabulka: Parametry dotazu pouze pro analýzu dotazů událostí

| Parametr dotazu | Požadované | Popis | Možnosti |
|---|---|---|---|
| ouMode | Ne | The mode of selecting organisation units. Default is DESCENDANTS, meaning all sub units in the hierarchy. CHILDREN refers to immediate children in the hierarchy; SELECTED refers to the selected organisation units only. More details [here].(https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/tracker.html#webapi_nti_ou_scope) | DESCENDANTS, CHILDREN, SELECTED |
| asc | Ne | Dimenze, které mají být seřazeny vzestupně, mohou odkazovat na datum události, název a kód organizační jednotky a jakékoli identifikátory položek. | `ouname` &#124; `programstatus` &#124; `eventstatus` &#124; `createdbydisplayname` &#124; `lastupdatedbydisplayname` &#124; `eventdate` &#124; `enrollmentdate` &#124; `incidentdate` &#124; `lastupdated` &#124; item identifier |
| desc | Ne | Dimenze, které mají být seřazeny sestupně, mohou odkazovat na datum události, název a kód organizační jednotky a jakékoli identifikátory položek. | `ouname` &#124; `programstatus` &#124; `eventstatus` &#124; `createdbydisplayname` &#124; `lastupdatedbydisplayname` &#124; `eventdate` &#124; `enrollmentdate` &#124; `incidentdate` &#124; `lastupdated` &#124; item identifier |
| coordinatesOnly | Ne | Zda se mají vrátit pouze události, které mají souřadnice. | false &#124; true |
| coordinateOuFallback | Ne | Geometrie instance programu se použije vždy, když geometrie organizační jednotky chybí. | false &#124; true |
| dataIdScheme | Ne | Schéma ID, které se má použít pro data, konkrétněji datové prvky a atributy, které mají sadu voleb nebo sadu legend, např. v datové odpovědi vraťte název možnosti místo kódu nebo název legendy místo ID legendy. | NAME &#124; CODE &#124; UID |
| záhlaví | Ne | Názvy záhlaví, které mají být vráceny jako součást odpovědi. | Jeden nebo více názvů záhlaví oddělených čárkou |
| strana | Ne | Číslo stránky. Výchozí stránka je 1. | Číselná kladná hodnota |
| pageSize | Ne | Velikost stránky. Výchozí velikost je 50 položek na stránku. | Nulová nebo kladná hodnota |
| eventDate | ne | (pouze zdroj `events`) Vlastní období v `eventDate` (viz část „období vlastního data“) | viz část "formát data a období". |
| enrollmentDate | ne | Vlastní období v `enrollmentDate` (viz část „období vlastního data“) | viz část "formát data a období". |
| scheduledDate | ne | (pouze zdroj `events`) Vlastní období na `scheduledDate` (viz část „období vlastního data“) | viz část "formát data a období". |
| incidentDate | ne | Vlastní období v `incidentDate` (viz část „období vlastního data“) | viz část "formát data a období". |
| lastUpdated | ne | Vlastní období na `lastUpdated` (viz část „období vlastního data“) | viz část "formát data a období". |



Tabulka: Parametry dotazu pouze pro agregovanou analýzu událostí

| Parametr dotazu | Požadované | Popis | Možnosti |
|---|---|---|---|
| value | Ne | Identifikátor dimenze hodnoty. Může to být datový prvek nebo atribut, který musí být typu číselné hodnoty. | Identifikátor datového prvku nebo atributu |
| aggregationType | Ne | Typ agregace pro dimenzi hodnoty. Výchozí hodnota je AVERAGE. | SUM &#124; AVERAGE &#124; AVERAGE_SUM_ORG_UNIT &#124; LAST &#124; LAST_AVERAGE_ORG_UNIT &#124; COUNT &#124; STDDEV &#124; VARIANCE &#124; MIN &#124; MAX |
| showHierarchy | Ne | Zobrazí úplnou cestu hierarchie organizačních jednotek spolu s názvem organizační jednotky. | false &#124; true |
| displayProperty | Ne | Vlastnost k zobrazení pro metadata. | NÁZEV &#124; KRÁTKÝ NÁZEV |
| sortOrder | Ne | Seřaďte záznamy ve sloupci hodnoty ve vzestupném nebo sestupném pořadí. | ASC &#124; DESC |
| limit | Ne | Maximální počet vrácených záznamů. Nesmí být větší než 10 000. | Číselná kladná hodnota |
| outputType | Ne | Zadejte typ výstupu pro analytická data, což mohou být události, zápisy nebo instance sledovaných entit. Poslední dvě možnosti platí pouze pro programy s registrací. | EVENT &#124; ENROLLMENT &#124; TRACKED_ENTITY_INSTANCE |
| collapseDataDimensions | Ne | Sbalte všechny datové dimenze (datové prvky a atributy) do jediné dimenze v odpovědi. | false &#124; true |
| skipMeta | Ne | Vyloučit metadatovou část odpovědi (zlepšuje výkon). | false &#124; true |
| skipData | Ne | Vyloučí datovou část odpovědi. | false &#124; true |
| skipRounding | Ne | Přeskočit zaokrouhlování agregovaných datových hodnot. | false &#124; true |
| aggregateData | Ne | Vytvořte souhrnné hodnoty pro datové dimenze (na rozdíl od položek dimenzí). | false &#124; true |
| orgUnitField | Ne | The organisation unit field to base event aggregation on. Applies to event data items only. Can be the ID of an attribute or data element with the Organisation unit value type. The default option is specified as omitting the query parameter. | <Attribute ID\> &#124; <Data element ID\> &#124; REGISTRATION &#124; ENROLLMENT &#124; OWNER_AT_START &#124; OWNER_AT_END |




Tabulka: Parametry dotazu pouze pro analýzu událostí clusteru

| Parametr dotazu | Požadované | Popis | Možnosti |
|---|---|---|---|
| clusterSize | Ano | Velikost shluků v metrech. | Číselná kladná hodnota |
| coordinateField | Ne | Pole, na kterém se má založit analýza geoprostorových událostí. Výchozí je událost. Lze nastavit na identifikátory atributů a datových prvků souřadnic typu hodnoty. | EVENT &#124; <attribute-id\> &#124; <dataelement-id\> |
| bbox | Ano | Ohraničující rámeček / oblast událostí, které mají být zahrnuty do odpovědi ve formátu „min. zeměpisná délka, minimální zeměpisná šířka, maximální zeměpisná délka, maximální zeměpisná šířka“. | Řetězec |
| includeClusterPoints | Ne | U každého shluku uveďte informace o základních bodech, buďte opatrní, pokud shluky představují velmi vysoký počet bodů. | false &#124; true |

### Analýza dotazů na události { #webapi_event_query_analytics } 

The *analytics/events/query* resource lets you query for captured
events. This resource does not perform any aggregation, rather it lets
you query and filter for information about events.

    /api/analytics/events/query

You can specify any number of dimensions and any number of filters in a
query. Dimension item identifiers can refer to any of data elements,
person attributes, person identifiers, fixed and relative periods and
organisation units. Dimensions can optionally have a query operator and
a filter. Event queries should be on the format described
    below.

    /api/analytics/events/query/<program-id>?startDate=yyyy-MM-dd&endDate=yyyy-MM-dd
      &dimension=ou:<ou-id>;<ou-id>&dimension=<item-id>&dimension=<item-id>:<operator>:<filter>

Chcete-li například získat události z programu "Ústavní nemocnost a úmrtnost" mezi lednem a říjnem 2016, kde jsou zahrnuty datové prvky "Pohlaví" a "Věk" a dimenze "Věk" je filtrována na "18", můžete použít následující dotaz:

    /api/analytics/events/query/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31
      &dimension=ou:O6uvpzGd5pu;fdc6uOvgoji&dimension=oZg33kd9taw&dimension=qrur9Dvnyt5:EQ:18

To retrieve events for the "Birth" program stage of the "Child
programme" program between March and December 2016, where the "Weight"
data element, filtered for values larger than
    2000:

    /api/analytics/events/query/IpHINAT79UW?stage=A03MvHHogjR&startDate=2016-03-01
      &endDate=2016-12-31&dimension=ou:O6uvpzGd5pu&dimension=UXz7xuGCEhU:GT:2000

Sorting can be applied to the query for the event date of the event and
any dimensions. To sort descending on the event date and ascending on
the "Age" data element dimension you can
    use:

    /api/analytics/events/query/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31
      &dimension=ou:O6uvpzGd5pu&dimension=qrur9Dvnyt5&desc=EVENTDATE&asc=qrur9Dvnyt5

Paging can be applied to the query by specifying the page number and the
page size parameters. If page number is specified but page size is not,
a page size of 50 will be used. If page size is specified but page
number is not, a page number of 1 will be used. To get the third page of
the response with a page size of 20 you can use a query like
    this:

    /api/analytics/events/query/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31
      &dimension=ou:O6uvpzGd5pu&dimension=qrur9Dvnyt5&page=3&pageSize=20

#### Filtrování { #filtering } 

Filtry lze použít na datové prvky, atributy osob a identifikátory osob. Filtrování se provádí pomocí hodnoty parametru dotazu v následujícím formátu:

    &dimension=<item-id>:<operator>:<filter-value>

Jako příklad můžete filtrovat datový prvek "Váha" pro hodnoty větší než 2000 a nižší než 4000 takto:

    &dimension=UXz7xuGCEhU:GT:2000&dimension=UXz7xuGCEhU:LT:4000

You can filter the "Age" data element for multiple, specific ages using
the IN operator like this:

    &dimension=qrur9Dvnyt5:IN:18;19;20

Můžete zadat více filtrů pro danou položku opakováním operátoru a součástí filtru, všechny oddělené středníky:

    &dimension=qrur9Dvnyt5:GT:5:LT:15

Dostupné operátory jsou uvedeny níže.



Tabulka: Operátory filtrů

| Operátor | Popis |
|---|---|
| EQ | Rovno |
| !EQ | Nerovná se |
| IEQ | Rovná se, malá a velká písmena se ignorují |
| !IEQ | Nerovná se, ignoruje se malá a velká písmena |
| GT | Větší než |
| GE | Větší než nebo rovno |
| LT | Menší než |
| LE | Menší nebo rovno |
| NE | Nerovná se |
| LIKE | Jako (shoda volného textu) |
| !LIKE | Není jako (shoda volného textu) |
| ILIKE | Jako, ignorování malých a velkých písmen (shoda volného textu) |
| !ILIKE | Není jako, ignorování velkých a malých písmen (shoda volného textu) |
| IN | Rovná se jedné z více hodnot oddělených ";" |

#### Time Field Filtering { #time-field-filtering } 

By default, the `query` endpoints filter periods based on `eventDate`.
However, it is possible to filter entries based on `lastUpdated` or `schedule` instead, by using the `timeField` query parameter.
For example:

    &timeField=LAST_UPDATED
    &timeField=SCHEDULED_DATE

#### Enhanced conditions { #enhanced-conditions } 

By default `enhancedConditions` flag is set to `false`. This means all conditions expressed in `dimension` and `filter` are meant as `AND` conditions.
For example:

    dimension=a:GT:20:LT:40&dimension=b:GT:1:LT:5

převádí do následující logické podmínky:

    a>20 and a<40 and b>1 and b<5 

However, there are cases in which more control on conditions might be needed and can be enabled by setting `enhancedConditions` query parameter to `true`.
By doing so, a client can use a special `_OR_` separator to join conditions using `OR` logical operator.

Příklad:

    dimension=a:GT:20:LT:40_OR_b:GT:1:LT:5&dimension=c:EQ:test

převádí do následující logické podmínky:

    ((a>20 and a<40) or (b>1 and b<5)) and c = "test"

#### Formáty odpovědí { #response-formats } 

The default response representation format is JSON. The requests must be
using the HTTP *GET* method. The following response formats are
supported.

  - json (application/json)

  - jsonp (application/javascript)

  - xls (application/vnd.ms-excel)

Například pro získání odpovědi ve formátu Excel můžete použít příponu souboru v URL požadavku takto:

    /api/analytics/events/query/eBAyeGv0exc.xls?startDate=2016-01-01&endDate=2016-10-31
      &dimension=ou:O6uvpzGd5pu&dimension=oZg33kd9taw&dimension=qrur9Dvnyt5

You can set the hierarchyMeta query parameter to true in order to
include names of all ancestor organisation units in the meta-section of
the response:

    /api/analytics/events/query/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31
      &dimension=ou:YuQRtpLP10I&dimension=qrur9Dvnyt5:EQ:50&hierarchyMeta=true

Výchozí formát odpovědi JSON bude vypadat podobně jako tento:

```json
{
  "headers": [
    {
      "name": "psi",
      "column": "Event",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "ps",
      "column": "Program stage",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "eventdate",
      "column": "Event date",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "storedby",
      "column": "Stored by",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "lastupdated",
      "column": "Last Updated",
      "valueType": "DATE",
      "type": "java.time.LocalDate",
      "hidden": false,
      "meta": true
    },
    {
      "name": "createdbydisplayname",
      "column": "Created by (display name)",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "lastupdatedbydisplayname",
      "column": "Last updated by (display name)",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "coordinates",
      "column": "Coordinates",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "ouname",
      "column": "Organisation unit name",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "oucode",
      "column": "Organisation unit code",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "ou",
      "column": "Organisation unit",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "oZg33kd9taw",
      "column": "Gender",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    },
    {
      "name": "qrur9Dvnyt5",
      "column": "Age",
      "type": "java.lang.String",
      "hidden": false,
      "meta": false
    }
  ],
  "metaData": {
    "names": {
      "qrur9Dvnyt5": "Age",
      "eBAyeGv0exc": "Inpatient morbidity and mortality",
      "ImspTQPwCqd": "Sierra Leone",
      "O6uvpzGd5pu": "Bo",
      "YuQRtpLP10I": "Badjia",
      "oZg33kd9taw": "Gender"
    },
    "ouHierarchy": {
      "YuQRtpLP10I": "/ImspTQPwCqd/O6uvpzGd5pu"
    }
  },
  "width": 8,
  "height": 4,
  "rows": [
    [
      "yx9IDINf82o",
      "Zj7UnCAulEk",
      "2016-08-05",
      "system",
      "2018-08-07",
      "[5.12, 1.23]",
      "Ngelehun",
      "OU_559",
      "YuQRtpLP10I",
      "Female",
      "50"
    ],
    [
      "IPNa7AsCyFt",
      "Zj7UnCAulEk",
      "2016-06-12",
      "system",
      "2018-08-07",
      "[5.22, 1.43]",
      "Ngelehun",
      "OU_559",
      "YuQRtpLP10I",
      "Female",
      "50"
    ],
    [
      "ZY9JL9dkhD2",
      "Zj7UnCAulEk",
      "2016-06-15",
      "system",
      "2018-08-07",
      "[5.42, 1.33]",
      "Ngelehun",
      "OU_559",
      "YuQRtpLP10I",
      "Female",
      "50"
    ],
    [
      "MYvh4WAUdWt",
      "Zj7UnCAulEk",
      "2016-06-16",
      "system",
      "2018-08-07",
      "[5.32, 1.53]",
      "Ngelehun",
      "OU_559",
      "YuQRtpLP10I",
      "Female",
      "50"
    ]
  ]
}
```

The *headers* section of the response describes the content of the query
result. The event unique identifier, the program stage identifier, the
event date, the organisation unit name, the organisation unit code and
the organisation unit identifier appear as the first six dimensions in
the response and will always be present. Next comes the data elements,
person attributes and person identifiers which were specified as
dimensions in the request, in this case, the "Gender" and "Age" data
element dimensions. The header section contains the identifier of the
dimension item in the "name" property and a readable dimension
description in the "column" property.

The *metaData* section, *ou* object contains the identifiers of all
organisation units present in the response mapped to a string
representing the hierarchy. This hierarchy string lists the identifiers
of the ancestors (parents) of the organisation unit starting from the
root. The *names* object contains the identifiers of all items in the
response mapped to their names.

The *rows* section contains the events produced by the query. Each row
represents exactly one event.

In order to have the event analytics resource generate the data in the
shape of a ready-made table, you can provide *rows* and *columns*
parameters with requested dimension identifiers separated by semi-colons
as values to indicate which ones to use as table columns and rows.
Instead of generating a plain, normalized data source, the event
analytics resource will now generate the data in table layout. The
column and rows dimensions must be present as a data dimension in the
query (not a filter). Such a request can look like this:

    /api/analytics.html+css?dimension=dx:cYeuwXTCPkU;fbfJHSPpUQD&dimension=pe:WEEKS_THIS_YEAR
      &filter=ou:ImspTQPwCqd&displayProperty=SHORTNAME&columns=dx&rows=pe

### Agregovaná analýza událostí { #webapi_event_aggregate_analytics } 

The `/analytics/events/aggregate` resource lets you retrieve *aggregated
numbers* of events captured in DHIS2. This resource lets you retrieve
aggregate data based on a program and optionally a program stage, and
lets you filter on any event dimension.

    /api/analytics/events/aggregate

Agregovaný zdroj událostí nevrací samotné informace o událostech, ale spíše souhrnný počet událostí, které odpovídají dotazu. Rozměry událostí zahrnují datové prvky, atributy osob, identifikátory osob, období a organizační jednotky. Agregátní dotazy na události by měly být ve formátu popsaném níže.

    /api/analytics/events/aggregate/<program-id>?startDate=yyyy-MM-dd&endDate=yyyy-MM-dd
      &dimension=ou:<ou-id>;<ou-id>&dimension=<item-id>&dimension=<item-id>:<operator>:<filter>

For example, to retrieve aggregate numbers for events from the
"Inpatient morbidity and mortality" program between January and October
2016, where the "Gender" and "Age" data elements are included, the "Age"
dimension item is filtered on "18" and the "Gender" item is filtered on
"Female", you can use the following query:

    /api/analytics/events/aggregate/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31
      &dimension=ou:O6uvpzGd5pu&dimension=oZg33kd9taw:EQ:Female&dimension=qrur9Dvnyt5:GT:50

To retrieve data for fixed and relative periods instead of start and end
date, in this case, May 2016 and last 12 months, and the organisation
unit associated with the current user, you can use the following query:

    /api/analytics/events/aggregate/eBAyeGv0exc?dimension=pe:201605;LAST_12_MONTHS
      &dimension=ou:USER_ORGUNIT;fdc6uOvgo7ji&dimension=oZg33kd9taw

Chcete-li zadat "Ženy" jako filtr pro "Pohlaví" pro datovou odpověď, což znamená, že "Pohlaví" nebude součástí odpovědi, ale bude filtrovat souhrnná čísla v ní, můžete použít následující syntaxi:

    /api/analytics/events/aggregate/eBAyeGv0exc?dimension=pe:2016;
      &dimension=ou:O6uvpzGd5pu&filter=oZg33kd9taw:EQ:Female

To specify the "Bo" organisation unit and the period "2016" as filters,
and the "Mode of discharge" and Gender" as dimensions, where "Gender" is
filtered on the "Male" item, you can use a query like this:

    /api/analytics/events/aggregate/eBAyeGv0exc?filter=pe:2016&filter=ou:O6uvpzGd5pu
      &dimension=fWIAEtYVEGk&dimension=oZg33kd9taw:EQ:Male

To create a "Top 3 report" for _Mode of discharge_ you can use the limit
and sortOrder query parameters similar to this:

    /api/analytics/events/aggregate/eBAyeGv0exc?filter=pe:2016&filter=ou:O6uvpzGd5pu
      &dimension=fWIAEtYVEGk&limit=3&sortOrder=DESC

To specify a value dimension with a corresponding aggregation type you
can use the value and aggregationType query parameters. Specifying a
value dimension will make the analytics engine return aggregate values
for the values of that dimension in the response as opposed to counts of
events.

    /api/analytics/events/aggregate/eBAyeGv0exc.json?stage=Zj7UnCAulEk
      &dimension=ou:ImspTQPwCqd&dimension=pe:LAST_12_MONTHS&dimension=fWIAEtYVEGk
      &value=qrur9Dvnyt5&aggregationType=AVERAGE

To base event analytics aggregation on a specific data element or attribute
of value type date or date time you can use the `timeField` parameter:

    /api/analytics/events/aggregate/IpHINAT79UW.json?dimension=ou:ImspTQPwCqd
      &dimension=pe:LAST_12_MONTHS&dimension=cejWyOfXge6&stage=A03MvHHogjR
      &timeField=ENROLLMENT_DATE

To base event analytics aggregation on a specific data element or attribute
of value type organisation unit you can use the `orgUnitField` parameter:

    /api/analytics/events/aggregate/eBAyeGv0exc.json?dimension=ou:ImspTQPwCqd
      &dimension=pe:THIS_YEAR&dimension=oZg33kd9taw&stage=Zj7UnCAulEk
      &orgUnitField=S33cRBsnXPo

The `orgUnitField` parameter value may be one of the following:

| orgUnitField | Popis |
| --- | --- |
| <Attribute ID\> | ID of an attribute with the organisation unit value type |
| <Data element ID\> | ID of a data element with the organisation unit value type |
| REGISTRATION | The organization unit at which the tracked entity instance was registered (created) |
| ZÁPIS | The organization unit at which the tracked entity instance was enrolled in the program |
| OWNER_AT_START | The tracked entity instance's owning organisation unit at the start of the reporting period |
| OWNER_AT_END | The tracked entity instance's owning organisation unit at the end of the reporting period |

#### Sady rozsahů / legend { #ranges-legend-sets } 

For aggregate queries, you can specify a range / legend set for numeric
data element and attribute dimensions. The purpose is to group the
numeric values into ranges. As an example, instead of generating data
for an "Age" data element for distinct years, you can group the
information into age groups. To achieve this, the data element or
attribute must be associated with the legend set. The format is
described below:

    ?dimension=<item-id>-<legend-set-id>

Příklad vypadá takto:

    /api/analytics/events/aggregate/eBAyeGv0exc.json?stage=Zj7UnCAulEk
      &dimension=qrur9Dvnyt5-Yf6UHoPkdS6&dimension=ou:ImspTQPwCqd&dimension=pe:LAST_MONTH

#### Formáty odpovědí { #response-formats } 

The default response representation format is JSON. The requests must be
using the HTTP *GET* method. The response will look similar to this:

```json
{
  "headers": [
    {
      "name": "oZg33kd9taw",
      "column": "Gender",
      "type": "java.lang.String",
      "meta": false
    },
    {
      "name": "qrur9Dvnyt5",
      "column": "Age",
      "type": "java.lang.String",
      "meta": false
    },
    {
      "name": "pe",
      "column": "Period",
      "type": "java.lang.String",
      "meta": false
    },
    {
      "name": "ou",
      "column": "Organisation unit",
      "type": "java.lang.String",
      "meta": false
    },
    {
      "name": "value",
      "column": "Value",
      "type": "java.lang.String",
      "meta": false
    }
  ],
  "metaData": {
    "names": {
      "eBAyeGv0exc": "Inpatient morbidity and mortality"
    }
  },
  "width": 5,
  "height": 39,
  "rows": [
    [
      "Female",
      "95",
      "201605",
      "O6uvpzGd5pu",
      "2"
    ],
    [
      "Female",
      "63",
      "201605",
      "O6uvpzGd5pu",
      "2"
    ],
    [
      "Female",
      "67",
      "201605",
      "O6uvpzGd5pu",
      "1"
    ],
    [
      "Female",
      "71",
      "201605",
      "O6uvpzGd5pu",
      "1"
    ],
    [
      "Female",
      "75",
      "201605",
      "O6uvpzGd5pu",
      "14"
    ],
    [
      "Female",
      "73",
      "201605",
      "O6uvpzGd5pu",
      "5"
    ]
  ]
}
```

Note that the max limit for rows to return in a single response is 10 000.
If the query produces more than the max limit, a *409 Conflict* status code
will be returned.

### Analýza shluků událostí { #webapi_event_clustering_analytics } 

The *analytics/events/cluster* resource provides clustered geospatial
event data. A request looks like this:

    /api/analytics/events/cluster/eBAyeGv0exc?startDate=2016-01-01&endDate=2016-10-31
      &dimension=ou:LEVEL-2&clusterSize=100000
      &bbox=-13.2682125,7.3721619,-10.4261178,9.904012&includeClusterPoints=false

The cluster response provides the count of underlying points, the center
point and extent of each cluster. If the `includeClusterPoints` query
parameter is set to true, a comma-separated string with the identifiers
of the underlying events is included. A sample response looks like this:

```json
{
  "headers": [
    {
      "name": "count",
      "column": "Count",
      "type": "java.lang.Long",
      "meta": false
    },
    {
      "name": "center",
      "column": "Center",
      "type": "java.lang.String",
      "meta": false
    },
    {
      "name": "extent",
      "column": "Extent",
      "type": "java.lang.String",
      "meta": false
    },
    {
      "name": "points",
      "column": "Points",
      "type": "java.lang.String",
      "meta": false
    }
  ],
  "width": 3,
  "height": 4,
  "rows": [
    [
      "3",
      "POINT(-13.15818 8.47567)",
      "BOX(-13.26821 8.4St7215,-13.08711 8.47807)",
      ""
    ],
    [
      "9",
      "POINT(-13.11184 8.66424)",
      "BOX(-13.24982 8.51961,-13.05816 8.87696)",
      ""
    ],
    [
      "1",
      "POINT(-12.46144 7.50597)",
      "BOX(-12.46144 7.50597,-12.46144 7.50597)",
      ""
    ],
    [
      "7",
      "POINT(-12.47964 8.21533)",
      "BOX(-12.91769 7.66775,-12.21011 8.49713)",
      ""
    ]
  ]
}
```

### Počet a rozsah analýzy událostí { #webapi_event_count_extent_analytics } 

The *analytics/events/count* resource is suitable for geometry-related
requests for retrieving the count and extent (bounding box) of events
for a specific query. The query syntax is equal to the *events/query*
resource. A request looks like this:

    /api/analytics/events/count/eBAyeGv0exc?startDate=2016-01-01
      &endDate=2016-10-31&dimension=ou:O6uvpzGd5pu

Odpověď poskytne počet a rozsah ve formátu JSON:

```json
{
  extent: "BOX(-13.2682125910096 7.38679562779441,-10.4261178860988 9.90401290212795)",
  count: 59
}
```

### Omezení a validace { #webapi_event_analytics_constraints } 

There are several constraints to the input parameters you can provide to the
event analytics resource. If any of the constraints are violated, the API will
return a *409 Conflict* response and a response message looking similar to this:

```json
{
  "httpStatus": "Conflict",
  "httpStatusCode": 409,
  "status": "ERROR",
  "message": "At least one organisation unit must be specified",
  "errorCode": "E7200"
}
```

The possible validation errors for the event analytics API are described
in the table below.

| Chybový kód | Zpráva |
| ---------- | ------- |
| E7200      | Musí být uvedena alespoň jedna organizační jednotka |
| E7201      | Dimenze nelze zadat více než jednou |
| E7202      | Položky dotazu nelze zadat více než jednou |
| E7203      | Hodnoty dimenzi nelze také určit jako položku nebo filtr položky |
| E7204      | Při zadání typu agregace je nutné zadat hodnoty dimenze nebo agregovaná data |
| E7205      | Musí být uvedeno datum zahájení a ukončení nebo alespoň jedno období |
| E7206      | Datum zahájení je po datu ukončení |
| E7207      | Číslo stránky musí být kladné číslo |
| E7208      | Velikost stránky musí být nula nebo kladné číslo |
| E7209      | Limit je větší než maximální limit |
| E7210      | Pole času je neplatné |
| E7211      | Pole organizační jednotky je neplatné |
| E7212      | Velikost klastru musí být kladné číslo |
| E7213      | ohraničovací rámeček je neplatný, musí být ve formátu: 'min-lng, min-lat, max-lng, max-lat' |
| E7214      | Pokud je zadán ohraničující rámeček nebo velikost clusteru, musí být zadáno pole clusteru |
| E7215      | Položka dotazu nemůže určit sadu legend i sadu možností |
| E7216      | Při použití v agregovaném dotazu musí být položka dotazu agregovatelná |
| E7217      | Uživatel nemá povoleno prohlížet analytická data událostí |
| E7218      | Podpora prostorové databáze není povolena |
| E7219      | Aby bylo možné použít jako souřadnicové pole datový prvek, musí mít souřadnici hodnotového typu |
| E7220      | Atribut musí být souřadnicového typu hodnoty, aby mohl být použit jako pole souřadnic |
| E7221      | Pole souřadnic je neplatné |
| E7222      | Položka dotazu nebo filtr jsou neplatné |
| E7223      | Hodnota neodkazuje na datový prvek nebo atribut, které jsou číselné a jsou součástí programu |
| E7224      | Identifikátor položky neodkazuje na žádný datový prvek, atribut nebo indikátorovou část programu |
| E7225      | Fáze programu je povinná pro dimenze datových prvků v analytických dotazech registrace |
| E7226      | Dimenze není platná položka dotazu |
| E7227      | Typ entity vztahu není podporován |
| E7228      | Pole záložní souřadnice je neplatné |
| E7229      | Operátor nepovolí chybějící hodnotu |

## Analytika zápisu { #webapi_enrollment_analytics } 

The enrollment analytics API lets you access aggregated event data and query *enrollments with their event data* captured in DHIS2. This resource lets you retrieve data for a program based on program stages and data elements - in addition to tracked entity attributes. When querying event data for a specific programstages within each enrollment, the data element values for each program stage will be returned as one row in the response from the api. If querying a data element in a program stage that is repeatable, the newest data element value will be used for that data element in the api response.

### Rozměry a položky { #webapi_enrollment_analytics_dimensions } 

Dimenze zápisu zahrnují datové prvky, atributy, organizační jednotky a období. Prostředek pro analýzu dotazů jednoduše vrátí zápisy odpovídající sadě kritérií a neprovádí žádnou agregaci.



Tabulka: Rozměry pro zápis

| Dimenze | ID dimenze | Popis |
|---|---|---|
| Datové prvky ve fázích programu | <program stage id\>.<data element id\> | Data element identifiers must include the program stage when querying data for enrollments.      dimension=edqlbukwRfQ.vANAXwtLwcT |
| Atributy | <id\> | Identifikátory atributů |
| Období | pe | Období ISO a relativní období, viz "formát data a období" |
| Organizační jednotky | ou | Identifikátory organizační jednotky a klíčová slova USER_ORGUNIT, USER_ORGUNIT_CHILDREN, USER_ORGUNIT_GRANDCHILDREN, LEVEL- <level\> a OU_GROUP- <group-id\> |

#### Repeatable stages { #repeatable-stages } 

Data element identifier must include program stage. The program stage can be repeatable. For example the dimension edqlbukwRfQ.vANAXwtLwcT can refer to repeatable program stage. The data element of this stage is accessible via index parameters (enclosed with [ ]).

Table: Possible indexing of repeatable stages

| Dimenze                                  | Index parameters             | DataElement value refers to                                                                |
|--------------------------------------------|------------------------------|--------------------------------------------------------------------------------------------|
| edqlbukwRfQ.vANAXwtLwcT                    | Nedostupné                          | last execution date                                                                        |
| edqlbukwRfQ[0].vANAXwtLwcT                 | 0                            | last execution date                                                                        |
| dqlbukwRfQ[-2].vANAXwtLwcT                 | -2                           | second from last execution date                                                            |
| dqlbukwRfQ[1].vANAXwtLwcT                  | 1                            | first execution date                                                                       |
| dqlbukwRfQ[3].vANAXwtLwcT                  | 3                            | third execution date                                                                       |
| edqlbukwRfQ[*].vANAXwtLwcT                 | *                            | all repetitions                                                                            |
| edqlbukwRfQ[-1~3].vANAXwtLwcT              | -1, 3                        | 3 repetitions starting with -1 (first after last execution date)                           |
| edqlbukwRfQ[0~5~LAST_3_MONTHS ].vANAXwtLwcT | 0, 5, LAST_3_MONTHS          | 5 repetitions starting with last execution date down to the fifth one within last 3 months |
| edqlbukwRfQ[-1~3~2021-01-01~2022-05-31].vANAXwtLwcT            | -1, 3, 2021-01-01,2022-05-31 | 3 repetitions starting with -1 (first after last execution date) within specified dates                                     |

Warning: Indexing of non-repeatable program stage leads to parameter validation error.

### Analýza dotazů na zápis { #webapi_enrollment_query_analytics } 

The `analytics/enrollments/query` resource lets you query for captured enrollments. This resource does not perform any aggregation, rather it lets you query and filter for information about enrollments.

    /api/analytics/enrollments/query

V dotazu můžete zadat libovolný počet dimenzí a libovolný počet filtrů. Identifikátory položky dimenze mohou odkazovat na kterýkoli z datových prvků ve fázích programu, trasované atributy entity, pevná a relativní období a organizační jednotky. Dimenze mohou volitelně mít operátor dotazu a filtr. Dotazy k registraci by měly být ve formátu popsaném níže.

    /api/analytics/enrollments/query/<program-id>?startDate=yyyy-MM-dd&endDate=yyyy-MM-dd
      &dimension=ou:<ou-id>;<ou-id>&dimension=<item-id>&dimension=<item-id>:<operator>:<filter>

Například k načtení zápisů z programu „Antenatální péče“ z ledna 2019, kde je z atributů převzato „Jméno“, jsou od první fáze programu zahrnuty datové prvky „Chronické stavy“ a „Kouření“ a „Hodnota hemoglobinu“ z následující programové fáze a zahrnuty by byly pouze ženy, které mají „Chronické stavy“, můžete použít následující dotaz:

    /api/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=ou:ImspTQPwCqd
      &dimension=w75KJ2mc4zz&dimension=WZbXY0S00lP.de0FEHSIoxh:eq:1&dimension=w75KJ2mc4zz
      &dimension=WZbXY0S00lP.sWoqcoByYmD&dimension=edqlbukwRfQ.vANAXwtLwcT
      &startDate=2019-01-01&endDate=2019-01-31

Chcete-li načíst registrace z programu „Předporodní péče“ z minulého měsíce (ve vztahu k okamžiku, kdy je dotaz proveden), kde jsou od první fáze programu zahrnuty datové prvky „Chronické stavy“ a „Kouření“, a „Hodnota hemoglobinu“ od fáze následného programu, zahrnuje pouze kouřící ženy s hemoglobinem nižším než 20:

    /api/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=ou:ImspTQPwCqd
      &dimension=WZbXY0S00lP.de0FEHSIoxh&dimension=w75KJ2mc4zz
      &dimension=WZbXY0S00lP.sWoqcoByYmD:eq:1&dimension=edqlbukwRfQ.vANAXwtLwcT:lt:20
      &dimension=pe:LAST_MONTH

Řazení lze použít na dotaz pro data zápisu a incidentů zápisu:

    /api/analytics/enrollments/query/WSGAb5XwJ3Y.xls?dimension=ou:ImspTQPwCqd
      &columns=w75KJ2mc4zz&dimension=WZbXY0S00lP.sWoqcoByYmD&dimension=pe:LAST_MONTH
      &stage=WZbXY0S00lP&pageSize=10&page=1&asc=ENROLLMENTDATE&ouMode=DESCENDANTS

Stránkování lze na dotaz použít zadáním čísla stránky a parametrů velikosti stránky. Pokud je zadáno číslo stránky, ale velikost stránky není, použije se velikost stránky 50. Pokud je zadána velikost stránky, ale číslo stránky není, použije se číslo stránky 1. Chcete-li získat druhou stránku odpovědi s velikostí stránky 10, můžete použít dotaz, jako je tento:

    /api/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=ou:ImspTQPwCqd
      &dimension=WZbXY0S00lP.de0FEHSIoxh&dimension=w75KJ2mc4zz&dimension=pe:LAST_MONTH
      &dimension=WZbXY0S00lP.sWoqcoByYmD&pageSize=10&page=2

#### Filtrování { #filtering } 

Filtry lze použít na datové prvky, atributy osob a identifikátory osob. Filtrování se provádí pomocí hodnoty parametru dotazu v následujícím formátu:

    &dimension=<item-id>:<operator>:<filter-value>

Jako příklad můžete filtrovat datový prvek "Váha" pro hodnoty větší než 2000 a nižší než 4000 takto:

    &dimension=WZbXY0S00lP.UXz7xuGCEhU:GT:2000&dimension=WZbXY0S00lP.UXz7xuGCEhU:LT:4000

Atribut "Věk" můžete filtrovat pro více konkrétních věků pomocí operátoru IN takto:

    &dimension=qrur9Dvnyt5:IN:18;19;20

Můžete zadat více filtrů pro danou položku opakováním operátoru a součástí filtru, všechny oddělené středníky:

    &dimension=qrur9Dvnyt5:GT:5:LT:15

#### Time Field Filtering { #time-field-filtering } 

By default, the `query` endpoints filter periods based on `enrollmentDate`.
However, it is possible to filter entries based on `lastUpdated` instead, by using the `timeField` query parameter.

    &timeField=LAST_UPDATED

##### NV keyword { #nv-keyword } 
Speciální klíčové slovo `NV` lze použít k filtrování podle hodnot `null`

Filtr podle AGE je null

    &dimension=qrur9Dvnyt5:EQ:NV

Filtr podle AGE není nulový

    &dimension=qrur9Dvnyt5:NE:NV

Filtr podle AGE je 18, 19 nebo je nulový

    &dimension=qrur9Dvnyt5:IN:18;19;NV

`NV` lze použít s operátory `EQ`, `NE` a `IN`

##### Operators { #operators } 

Dostupné operátory jsou uvedeny níže.

Tabulka: Operátory filtrů

| Operátor | Popis |
|---|---|
| EQ | Rovno |
| GT | Větší než |
| GE | Větší než nebo rovno |
| LT | Menší než |
| LE | Menší nebo rovno |
| NE | Nerovná se |
| LIKE | Jako (shoda volného textu) |
| IN | Rovná se jedné z více hodnot oddělených ";" |

### Parametry požadavku databázového dotazu { #webapi_enrollment_analytics_query_parameters } 

Rozhraní API pro analytický dotaz na zápis umožňuje určit rozsah parametrů dotazu.



Tabulka: Parametry dotazu pro koncový bod dotazu registrace

| Parametr dotazu | Požadované | Popis | Možnosti (nejprve výchozí) |
|---|---|---|---|
| program | Ano | Identifikátor programu. | Jakýkoli identifikátor programu |
| startDate | Ne | Datum zahájení zápisů. | Datum ve formátu yyyy-MM-dd |
| endDate | Ne | Datum ukončení zápisů. | Datum ve formátu yyyy-MM-dd |
| dimenze | Ano | Identifikátor dimenze zahrnující datové prvky, atributy, indikátory programu, období, organizační jednotky a sady skupin organizačních jednotek. Parametr lze opakovat libovolněkrát. Filtry položek lze použít na dimenzi ve formátu <item-id\>: <operator\>: <filter\>. Hodnoty filtru nerozlišují malá a velká písmena. | Operátory mohou být EQ &#124; GT &#124; GE &#124; LT &#124; LE &#124; NE &#124; LIKE &#124; IN |
| filtr | Ne | Identifikátor dimenze zahrnující datové prvky, atributy, období, organizační jednotky a sady skupin organizačních jednotek. Parametr lze opakovat libovolněkrát. Filtry položek lze použít na dimenzi ve formátu <item-id\>: <operator\>: <filter\>. Hodnoty filtru nerozlišují malá a velká písmena. ||
| programStatus | Ne | Zadejte stav zápisu zápisů, které chcete zahrnout. | ACTIVE &#124; COMPLETED &#124; CANCELLED |
| relativePeriodDate | řetězec | Ne | Identifikátor data, např.: "2016-01-01". Přepíše počáteční datum relativního období |
| ouMode | Ne | The mode of selecting organisation units. Default is DESCENDANTS, meaning all sub units in the hierarchy. CHILDREN refers to immediate children in the hierarchy; SELECTED refers to the selected organisation units only. More details [here].(https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/tracker.html#webapi_nti_ou_scope) | DESCENDANTS, CHILDREN, SELECTED |
| asc | Ne | Dimenze, které mají být seřazeny vzestupně, mohou odkazovat na datum registrace, datum incidentu, název a kód organizační jednotky. | `ouname` &#124; `programstatus` &#124; `createdbydisplayname` &#124; `lastupdatedbydisplayname` &#124; `enrollmentdate` &#124; `incidentdate` &#124; `lastupdated` &#124; item identifier |
| desc | Ne | Dimenze, které mají být seřazeny sestupně, mohou odkazovat na datum registrace, datum incidentu, název a kód organizační jednotky. | `ouname` &#124; `programstatus` &#124; `createdbydisplayname` &#124; `lastupdatedbydisplayname` &#124; `enrollmentdate` &#124; `incidentdate` &#124; `lastupdated` &#124; item identifier |
| coordinatesOnly | Ne | Zda se mají vrátit pouze zápisy, které mají souřadnice. | false &#124; true |
| záhlaví | Ne | Názvy záhlaví, které mají být vráceny jako součást odpovědi. | Jeden nebo více názvů záhlaví oddělených čárkou |
| strana | Ne | Číslo stránky. Výchozí stránka je 1. | Číselná kladná hodnota |
| pageSize | Ne | Velikost stránky. Výchozí velikost je 50 položek na stránku. | Nulová nebo kladná hodnota |
| timeField | Ne | Time field used in aggregations/queries on enrollments. Applies to enrollment data items only. Can be a predefined option or the ID of an attribute or data element with a time-based value type. For "/analytics/enrollments/" endpoints, the default "timeField" is ENROLLMENT_DATE. | ENROLLMENT_DATE &#124; LAST_UPDATED &#124; <Attribute ID\> &#124; <Data element ID\> |

#### Formáty odpovědí { #response-formats } 

The default response representation format is JSON. The requests must be using the HTTP *GET* method. The following response formats are supported.

  - json (application/json)
  - xml (application/xml)
  - xls (application/vnd.ms-excel)
  - csv (application/csv)
  - html (text/html)
  - html+css (text/html)

Například pro získání odpovědi ve formátu Excel můžete použít příponu souboru v URL požadavku takto:

    /api/analytics/enrollments/query/WSGAb5XwJ3Y.xls?dimension=ou:ImspTQPwCqd
      &dimension=WZbXY0S00lP.de0FEHSIoxh&columns=w75KJ2mc4zz
      &dimension=WZbXY0S00lP.sWoqcoByYmD&dimension=pe:LAST_MONTH&stage=WZbXY0S00lP
      &pageSize=10&page=1&asc=ENROLLMENTDATE&ouMode=DESCENDANTS

Výchozí formát odpovědi JSON bude vypadat podobně jako tento:

```json
{
  "headers": [
    {
      "name": "pi",
      "column": "Enrollment",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "tei",
      "column": "Tracked entity instance",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "enrollmentdate",
      "column": "Enrollment date",
      "valueType": "DATE",
      "type": "java.util.Date",
      "hidden": false,
      "meta": true
    },
    {
      "name": "incidentdate",
      "column": "Incident date",
      "valueType": "DATE",
      "type": "java.util.Date",
      "hidden": false,
      "meta": true
    },
    {
      "name": "storedby",
      "column": "Stored by",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "lastupdated",
      "column": "Last Updated",
      "valueType": "DATE",
      "type": "java.time.LocalDate",
      "hidden": false,
      "meta": true
    },
    {
      "name": "storedby",
      "column": "Stored by",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "createdbydisplayname",
      "column": "Created by (display name)",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "lastupdatedbydisplayname",
      "column": "Last updated by (display name)",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "geometry",
      "column": "Geometry",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "longitude",
      "column": "Longitude",
      "valueType": "NUMBER",
      "type": "java.lang.Double",
      "hidden": false,
      "meta": true
    },
    {
      "name": "latitude",
      "column": "Latitude",
      "valueType": "NUMBER",
      "type": "java.lang.Double",
      "hidden": false,
      "meta": true
    },
    {
      "name": "ouname",
      "column": "Organisation unit name",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "oucode",
      "column": "Organisation unit code",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "ou",
      "column": "Organisation unit",
      "valueType": "TEXT",
      "type": "java.lang.String",
      "hidden": false,
      "meta": true
    },
    {
      "name": "de0FEHSIoxh",
      "column": "WHOMCH Chronic conditions",
      "valueType": "BOOLEAN",
      "type": "java.lang.Boolean",
      "hidden": false,
      "meta": true
    },
    {
      "name": "sWoqcoByYmD",
      "column": "WHOMCH Smoking",
      "valueType": "BOOLEAN",
      "type": "java.lang.Boolean",
      "hidden": false,
      "meta": true
    }
  ],
  "metaData": {
    "pager": {
      "page": 2,
      "total": 163,
      "pageSize": 4,
      "pageCount": 41
    },
    "items": {
      "ImspTQPwCqd": {
        "name": "Sierra Leone"
      },
      "PFDfvmGpsR3": {
        "name": "Care at birth"
      },
      "bbKtnxRZKEP": {
        "name": "Postpartum care visit"
      },
      "ou": {
        "name": "Organisation unit"
      },
      "PUZaKR0Jh2k": {
        "name": "Previous deliveries"
      },
      "edqlbukwRfQ": {
        "name": "Antenatal care visit"
      },
      "WZbXY0S00lP": {
        "name": "First antenatal care visit"
      },
      "sWoqcoByYmD": {
        "name": "WHOMCH Smoking"
      },
      "WSGAb5XwJ3Y": {
        "name": "WHO RMNCH Tracker"
      },
      "de0FEHSIoxh": {
        "name": "WHOMCH Chronic conditions"
      }
    },
    "dimensions": {
      "pe": [],
      "ou": [
        "ImspTQPwCqd"
      ],
      "sWoqcoByYmD": [],
      "de0FEHSIoxh": []
    }
  },
  "width": 12,
  "rows": [
    [
      "A0cP533hIQv",
      "to8G9jAprnx",
      "2019-02-02 12:05:00.0",
      "2019-02-02 12:05:00.0",
      "system",
      "2020-08-06 21:20:52.0",
      "",
      "0.0",
      "0.0",
      "Tonkomba MCHP",
      "OU_193264",
      "xIMxph4NMP1",
      "0",
      "1"
    ],
    [
      "ZqiUn2uXmBi",
      "SJtv0WzoYki",
      "2019-02-02 12:05:00.0",
      "2019-02-02 12:05:00.0",
      "system",
      "2020-08-06 21:20:52.0",
      "",
      "0.0",
      "0.0",
      "Mawoma MCHP",
      "OU_254973",
      "Srnpwq8jKbp",
      "0",
      "0"
    ],
    [
      "lE747mUAtbz",
      "PGzTv2A1xzn",
      "2019-02-02 12:05:00.0",
      "2019-02-02 12:05:00.0",
      "system",
      "2020-08-06 21:20:52.0",
      "",
      "0.0",
      "0.0",
      "Kunsho CHP",
      "OU_193254",
      "tdhB1JXYBx2",
      "",
      "0"
    ],
    [
      "nmcqu9QF8ow",
      "pav3tGLjYuq",
      "2019-02-03 12:05:00.0",
      "2019-02-03 12:05:00.0",
      "system",
      "2020-08-06 21:20:52.0",
      "",
      "0.0",
      "0.0",
      "Korbu MCHP",
      "OU_678893",
      "m73lWmo5BDG",
      "",
      "1"
    ]
  ],
  "height": 4
}
```

The *headers* section of the response describes the content of the query result. The enrollment unique identifier, the tracked entity instance identifier, the enrollment date, the incident date, geometry, latitude, longitude, the organisation unit name and the organisation unit code appear as the first dimensions in the response and will always be present. Next comes the data elements, and tracked entity attributes which were specified as dimensions in the request, in this case, the "WHOMCH Chronic conditions" and "WHOMCH smoking" data element dimensions. The header section contains the identifier of the dimension item in the "name" property and a readable dimension description in the "column" property.

The *metaData* section, *ou* object contains the identifiers of all organisation units present in the response mapped to a string representing the hierarchy. This hierarchy string lists the identifiers of the ancestors (parents) of the organisation unit starting from the root. The *names* object contains the identifiers of all items in the response mapped to their names.

The *rows* section contains the enrollments produced by the query. Each row represents exactly one enrollment.

### Analýza napříč vztahy TEI s indikátory programu { #analytics-across-tei-relationships-with-program-indicators } 

Neagregační zápisové analytické API také podporuje propojení indikátorů programu s typy vztahů, aby se zobrazil výsledek výpočtu konkrétního indikátoru programu použitého na související entity uvedené instance trasované entity.

![](resources/images/enrollments/enrollments-pi-relationship.jpg)

For the Program Indicator/Relationship Type link to work, the `/api/analytics/enrollments/query` API requires an additional dimension which must include the chosen Relationship Type UID and the chosen Program Indicator UID:

    /api/analytics/enrollments/query/<program-id>
      ?dimension=<relationshiptype-id>.<programindicator-id>

Chcete-li například načíst seznam zápisů z programu „WHO RMNCH Tracker“ pro leden 2019 a zobrazit počet případů malárie propojených s tímto zápisem podle typu vztahu „případ malárie spojený s osobou“, můžete použít následující dotaz

    /api/analytics/enrollments/query/WSGAb5XwJ3Y.json?dimension=mxZDvSZYxlw.nFICjJluo74
      &startDate=2019-01-01&endDate=2019-01-31    

API podporuje použití indikátorů programu, které nejsou spojeny s "hlavním" programem (to je ID programu zadané za `/query/`).

## Dimenze { #webapi_dimensions }

Five resources allow to easily retrieve data dimensions:

- [Event Query data dimensions](#webapi_event_query_analytics_dimension)`/analytics/events/query/dimensions` 
- [Dimenze souhrnných dat událostí](#webapi_event_aggregate_analytics_dimension) `/analytics/events/aggregate/dimensions`
- [Datové dimenze dotazu pro zápis](#webapi_enrollment_query_analytics_dimension) `/analytics/enrollments/query/dimensions`
- [Dimenze souhrnných dat pro registraci](#webapi_enrollment_aggregate_analytics_dimension) `/analytics/enrollments/aggregate/dimensions`
- [Tracked Entities query data dimensions](#webapi_teis_query_analytics_dimensions)) `/analytics/teis/query/dimensions`

Výše uvedené zdroje sdílejí následující parametr požadavku:

| Parametr dotazu | Vyžadováno                                         | Popis                                                                                       | Možnosti                                                                                                                                              |
|-----------------|--------------------------------------------------|---------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------|
| filtr          | ne                                               | Umožňuje filtrování hodnot pole ve formátu: <br/> `filter=field:OP:value&filter=field:OP:value&...` | Viz [sekce filtrů dimenzí](#webapi_analytics_dimension_filters)                                                                                |
| pole          | ne                                               | Umožňuje filtrování polí                                                  |
| strana            | ne | Číslo stránky                                                                                       | Výchozí hodnota je 1 (první stránka)                                                                                                                           |
| pageSize        | ne | Velikost stránky                                                                                         | Výchozí hodnota je 50 prvků na stránku                                                                                                                     |
| stránkování          | ne | Zakáže stránkování, když je `false`                                                                  | `true` nebo `false`, výchozí hodnota je `true`                                                                                                                |
| řazení           | ne | Umožňuje řazení ve formátu: `order=field:direction`                                                                   | Řaditelná pole: `created` (výchozí), `lastUpdated`, `code`, `uid`, `id`, `name`, `displayName`, `dimensionType` <br/> <br/> Směr může být `ASC` (výchozí) nebo `DESC` |

#### Filtry dimenzí { #webapi_analytics_dimension_filters }

Dimensions endpoints support filtering the output to narrow down the response to desired elements.
Filters are in the format `filter=field:op:value&filter=field:op:value&...&filter=field:op:value`.

Podporované hodnoty pole `field` jsou:

- **id**/**uid** – id dimenze
- **code** - kód rozměru
- **valueType** – typ hodnoty dimenze
- **name** – název dimenze
- **dimensionType** - the type of the dimension 
    - `DATA_ELEMENT`
    - `PROGRAM_INDICATOR`
    - `PROGRAM_ATTRIBUTE`
    - `CATEGORY`
    - `CATEGORY_OPTION_GROUP_SET`
- **displayName** - displayName dimenze
- **displayShortName** – displayShortName dimenze

Podporované `op` hodnoty jsou:

- `startsWith` - pole začíná na
- `!startsWith` - pole nezačíná
- `endsWith` - pole končí na
- `!endsWith` - field does not end with- 
- `eq` – rovná se
- `ieq` - rovná se ignorování velkých a malých písmen
- `ne` – nerovná se
- `like` - obsahuje
- `!like` - neobsahuje
- `jako` - obsahuje,  ignorování velkých a malých písmen
- `!like` - neobsahuje ignorování velkých a malých písmen

### Event analytics dimensions { #event-analytics-dimensions } 
#### Dimenze analýzy dotazů událostí { #webapi_event_query_analytics_dimension }

The `/analytics/events/query/dimensions?programId={programId}&programStageId={programStageId}` resource accepts:

- a tracker `program`
- a tracker `programStage`
- both `program` and `programStage`

There are constraints on the combination of program and programStage:

- If only `program` is specified, the resource returns data dimensions for each program stage in the provided program
- If only `programStage` is specified, the resource returns data dimensions for the provided `programStage`
- If both `program` and `programStage` are specified, the resource returns data dimensions for the provided `programStage` if it belongs to the provided `program`. Returns an error otherwise.

the returned data dimensions are:

- **Indikátory programu** spojené s programem (odvozeno z programStageId)
- **Data elements** of *supported types* in the program stage
- **Tracked entity attributes** of *supported types* associated with the program (derived from programStageId)
- **Kategorie** v kombinaci kategorií spojených s programem (odvozeno z programStageId)
- **Sady skupin možností kategorie** typu `ATTRIBUTE`

All value types for data elements and tracked entity attributes are considered *supported types*, except `IMAGE`, `FILE_RESOURCE` and `TRACKER_ASSOCIATE`.

#### Dimenze souhrnu událostí { #webapi_event_aggregate_analytics_dimension }

Zdroj `/analytics/events/aggregate/dimensions?programStageId=...` přijímá povinný parametr `programStageId` a vrací následující datové dimenze:

- **Data elements** of *supported types* in the program stage
- **Tracked entity attributes** of *supported types* associated with the program (derived from programStageId)
- **Kategorie** v kombinaci kategorií spojených s programem (odvozeno z programStageId)
- **Sady skupin možností kategorie** typu `ATTRIBUTE` přidružené k programu (odvozeno z programStageId)

Data elements and tracked entity attributes are considered *supported types* if their value type is one of the following:

- `NUMBER`
- `UNIT_INTERVAL`
- `PERCENTAGE`
- `INTEGER`
- `INTEGER_POSITIVE`
- `INTEGER_NEGATIVE`
- `INTEGER_ZERO_OR_POSITIVE`
- `BOOLEAN`
- `TRUE_ONLY`

### Enrollment analytics dimensions { #enrollment-analytics-dimensions } 

#### Dimenze analýzy dotazů zápisu { #webapi_enrollment_query_analytics_dimension }

Zdroj `/analytics/enrollments/query/dimensions?programId=...` přijímá povinné ID sledovacího programu a vrací následující datové dimenze:

- **Indikátory programu** připojené k programu
- **Data elements** of *supported types* in the program, with program stage for each data element
- **Tracked entity attributes** of *supported types* associated with the program that are not confidential

All value types for data elements and tracked entity attributes are considered *supported types*, except `IMAGE`, `FILE_RESOURCE` and `TRACKER_ASSOCIATE`.

#### Dimenze souhrnu zápisu{ #webapi_enrollment_aggregate_analytics_dimension }

Zdroj `/analytics/enrollments/aggregate/dimensions?programId=...` přijímá povinné ID trasovacího programu odkazující na program s registrací a vrací následující dimenze dat:

- **Data elements** of *supported types* in the program, with program stage for each data element
- **Tracked entity attributes** of *supported types* associated with the program that are not confidential

Data elements and tracked entity attributes are considered *supported types* if their value type is one of the following:

- `NUMBER`
- `UNIT_INTERVAL`
- `PERCENTAGE`
- `INTEGER`
- `INTEGER_POSITIVE`
- `INTEGER_NEGATIVE`
- `INTEGER_ZERO_OR_POSITIVE`
- `BOOLEAN`
- `TRUE_ONLY`

### Tracked Entities analytics dimensions { #tracked-entities-analytics-dimensions } 

#### Tracked Entities query analytics dimensions { #webapi_teis_query_analytics_dimensions }

The `/analytics/teis/query/dimensions?trackedEntityType=TET` resource accepts a mandatory id of a tracked entity type `TET` and returns the following data dimensions:

for each program `P` associated with a tracked entity instance of type `TET`:
- **Program indicators** associated to `P`
- **Data elements** of *supported types* in `P`, with program stage for each data element
- **Tracked entity attributes** of *supported types* associated with the program that are not confidential
- **Program attributes** of `P`

All value types for data elements and tracked entity attributes are considered *supported types*, except `IMAGE`, `FILE_RESOURCE` and `TRACKER_ASSOCIATE`.

### Sample request and response { #sample-request-and-response } 

    GET /api/analytics/teis/query/dimensions?programStageId=A03MvHHogjR&order=code&filter=name:ilike:weight

```json
{
   "page":1,
   "total":5,
   "pageSize":50,
   "dimensions":[
      {
         "dimensionType":"PROGRAM_INDICATOR",
         "created":"2015-08-06T22:49:20.128",
         "lastUpdated":"2015-08-06T22:51:19.787",
         "name":"Measles + Yellow fever doses low infant weight",
         "displayName":"Measles + Yellow fever doses low infant weight",
         "id":"tt54DiKuQ9c",
         "uid":"tt54DiKuQ9c",
         "displayShortName":"Measles + Yellow fever doses low infant weight"
      },
      {
         "dimensionType":"PROGRAM_INDICATOR",
         "created":"2017-01-20T10:32:26.388",
         "lastUpdated":"2017-01-20T10:32:26.388",
         "name":"Weight gain(in g) between birth and last postnatal",
         "displayName":"Weight gain(in g) between birth and last postnatal",
         "id":"qhTkqwAJLMv",
         "uid":"qhTkqwAJLMv",
         "displayShortName":"Weight gain(g)"
      },
      {
         "dimensionType":"PROGRAM_INDICATOR",
         "created":"2015-09-14T20:25:55.543",
         "lastUpdated":"2018-08-28T12:22:47.857",
         "name":"Average weight (g)",
         "displayName":"Average weight (g)",
         "id":"GxdhnY5wmHq",
         "uid":"GxdhnY5wmHq",
         "displayShortName":"Average weight (g)"
      },
      {
         "dimensionType":"PROGRAM_INDICATOR",
         "created":"2015-08-06T22:35:40.391",
         "lastUpdated":"2015-08-06T22:35:40.391",
         "name":"BCG doses low birth weight",
         "displayName":"BCG doses low birth weight",
         "id":"hCYU0G5Ti2T",
         "uid":"hCYU0G5Ti2T",
         "displayShortName":"BCG doses low birth weight"
      },
      {
         "valueType":"NUMBER",
         "dimensionType":"DATA_ELEMENT",
         "created":"2012-09-20T17:37:45.474",
         "lastUpdated":"2014-11-11T21:56:05.418",
         "name":"MCH Weight (g)",
         "displayName":"MCH Weight (g)",
         "id":"A03MvHHogjR.UXz7xuGCEhU",
         "uid":"UXz7xuGCEhU",
         "code":"DE_2005736",
         "displayShortName":"Weight (g)"
      }
   ]
}
```

## Analytika Organizační jednotky { #webapi_org_unit_analytics } 

Rozhraní API pro analýzu organizačních jednotek poskytuje statistiku o organizačních jednotkách klasifikovaných podle sad skupin organizačních jednotek, tj. Počty organizačních jednotek na skupinu organizačních jednotek v rámci sad skupin organizačních jednotek.

    GET /api/orgUnitAnalytics?ou=<org-unit-id>&ougs=<org-unit-group-set-id>

API vyžaduje alespoň jednu organizační jednotku a alespoň jednu sadu skupin organizačních jednotek. Lze poskytnout více organizačních jednotek a skupinových skupin oddělených středníkem.

### Parametry požadavku databázového dotazu { #request-query-parameters } 

Prostředek analytiky organizační jednotky vám umožní určit řadu parametrů dotazu:



Tabulka: Parametry analytického dotazu organizační jednotky

| Vlastnictví | Popis | Požadované |
|---|---|---|
| ou | Identifikátory organizační jednotky, případně oddělené středníkem. | Ano |
| ougs | Identifikátory sady skupin organizačních jednotek, potenciálně oddělené středníkem. | Ano |
| sloupce | Identifikátory sady skupin organizačních jednotek, potenciálně oddělené středníkem. Definuje, které sady skupin se vykreslí jako sloupce v rozložení tabulky. | Ne |

Odpověď bude obsahovat sloupec pro nadřazenou organizační jednotku, sloupce pro každou skupinu organizačních jednotek jako část požadavku a sloupec pro počet. Statistiky zahrnují počet organizačních jednotek, které jsou součástí podhierarchie organizačních jednotek uvedených v požadavku. Odpověď obsahuje část metadat, která určuje název každé organizační jednotky a části skupiny organizační jednotky a části odpovědí, na kterou odkazují jejich identifikátory.

Výchozí odpověď je normalizována pomocí jediného sloupce `count` Odpověď lze vykreslit v rozložení tabulky zadáním alespoň jedné sady skupin organizačních jednotek pomocí parametru dotazu `columns`.

### Formáty odpovědí { #response-formats } 

Koncový bod analytiky jednotky org podporuje následující formáty reprezentace:

- json (application/json)
- csv (application/csv)
- xls (application/vnd.ms-excel)
- pdf (application/pdf)

### Příklady { #examples } 

Načtení analytiky organizačních jednotek pro organizační jednotku a sadu skupin organizačních jednotek:

    GET /api/orgUnitAnalytics?ou=lc3eMKXaEfw&ougs=J5jldMd8OHv

Chcete-li načíst analytická data jednotky org pro dvě jednotky org a dvě sady skupin jednotek org:

    GET /api/orgUnitAnalytics?ou=lc3eMKXaEfw;PMa2VCrupOd&ougs=J5jldMd8OHv;Bpx0589u8y0

Pokud chcete načíst analytická data organizační jednotky v režimu tabulky s jednou sadou skupin vykreslenou jako sloupce:

    GET /api/orgUnitAnalytics?ou=fdc6uOvgoji;jUb8gELQApl;lc3eMKXaEfw;PMa2VCrupOd
      &ougs=J5jldMd8OHv&columns=J5jldMd8OHv

### Omezení a validace { #constraints-and-validation } 

Možné chyby v ověření konkrétně pro analytické API org jednotky jsou popsány v tabulce níže. Relevantní jsou také některé chyby zadané pro agregované analytické API.

| Chybový kód | Zpráva |
| ---------- | ------- |
| E7300      | Musí být uvedena alespoň jedna organizační jednotka |
| E7301      | Musí být zadána alespoň jedna sada skupin organizačních jednotek |

## Zpráva o souboru dat { #webapi_data_set_report } 

Data set reports can be generated through the web api using the
`/dataSetReport` resource. This resource generates reports on data set
and returns the result in the form of an HTML table.

    /api/dataSetReport

### Parametry požadavku databázového dotazu { #request-query-parameters } 

Požadavek podporuje následující parametry:



Tabulka: Parametry dotazu sestavy datové sady

| Parametr | Popis | Typ | Požadované |
|---|---|---|---|
| ds | Sada dat, ze které se má vytvořit sestava. | UID datové sady | Ano |
| pe | Období, ze kterého (kterých) se má sestava vytvořit. Může to být seznam oddělený čárkami. | Řetězec ISO | Ano |
| ou | Organizační jednotka, ze které se má sestava vytvořit. | UID organizační jednotky | Ano |
| filtr | Filtry, které se mají použít jako filtry pro sestavu. Lze libovolněkrát opakovat. Dodržuje syntaxi analytického rozhraní API. | Jedno nebo více UID | Ne |
| selectedUnitOnly | Zda použít pouze zachycená data nebo agregovaná data. | Boolean | Ne |

Prostředek sestavy datové sady přijímá pouze požadavky `GET`. Typ obsahu odpovědi je `application/json` a vrací data v mřížce. Tento koncový bod funguje pro všechny typy datových sad, včetně výchozích, sekčních a vlastních formulářů.

Příklad požadavku na načtení přehledu pro měsíční soubor dat a organizační jednotku za říjen 2018 vypadá takto:

    GET /api/dataSetReport?ds=BfMAe6Itzgt&pe=201810&ou=ImspTQPwCqd&selectedUnitOnly=false

Příklad požadavku na načtení přehledu pro měsíční soubor dat a organizační jednotku za říjen, listopad a prosinec 2018 vypadá takto:

    GET /api/dataSetReport?ds=BfMAe6Itzgt&pe=201810,201811,201812&ou=ImspTQPwCqd&selectedUnitOnly=false

Chcete-li získat sestavu datové sady s filtrem, můžete použít parametr `filter`. V tomto případě je filtr založen na sadě skupin org jednotek a dvou skupinách org jednotek:

    GET /api/dataSetReport?ds=BfMAe6Itzgt&pe=201810&ou=ImspTQPwCqd
      &filter=J5jldMd8OHv:RXL3lPSK8oG;tDZVQ1WtwpA

### Formáty odpovědí { #response-formats } 

Koncový bod sestavy datové sady podporuje výstup v následujících formátech. Konkrétní koncový bod můžete načíst pomocí přípony souboru nebo záhlaví HTTP  `Accept`.

- json (application/json)
- pdf (application/pdf)
- xls (application/vnd.ms-excel)

### Vlastní formuláře { #custom-forms } 

Pro datové sady s vlastními formuláři HTML je k dispozici vyhrazený koncový bod. Tento koncový bod vrací obsah formuláře HTML s typem obsahu `text/html` s vloženými daty. Všimněte si, že koncový bod sestavy obecné sady dat můžete použít také pro sady dat s vlastními formuláři; to však vrátí zprávu ve formátu JSON jako mřížku. Tento koncový bod funguje pouze pro datové sady s vlastními formuláři HTML.

    GET /api/dataSetReport/custom

Syntaxe pro tento koncový bod se jinak rovná koncovému bodu sestavy obecné sady dat. Chcete-li načíst vlastní sestavu datové sady HTML, můžete vystavit požadavek takto:

    GET /api/dataSetReport/custom?ds=lyLU2wR22tC&pe=201810&ou=ImspTQPwCqd


## Nabízená analýza { #webapi_push_analysis } 

The push analysis API includes endpoints for previewing a push analysis
report for the logged in user and manually triggering the system to
generate and send push analysis reports, in addition to the normal CRUD
operations. When using the create and update endpoints for push
analysis, the push analysis will be scheduled to run based on the
properties of the push analysis. When deleting or updating a
push analysis to be disabled, the job will also be stopped from running
in the future.

To get an HTML preview of an existing push analysis, you can do a GET
request to the following endpoint:

    /api/pushAnalysis/<id>/render

To manually trigger a push analysis job, you can do a POST request to
this endpoint:

    /api/pushAnalysis/<id>/run

A push analysis consists of the following properties, where some are
required to automatically run push analysis jobs:



Tabulka: Vlastnosti analýzy tlaku

| Vlastnictví | Popis | Typ | Požadované |
|---|---|---|---|
| ovládací panel | Ovládací panel, na kterém jsou založeny přehledy | Dashboard UID | Ano |
| message | Zobrazuje se za názvem v přehledech | Řetězec | Ne |
| recipientUserGroups | Sada uživatelských skupin, které by měly dostávat zprávy | Jedno nebo více UID skupiny uživatelů | Ne. Naplánované úlohy bez příjemce budou přeskočeny. |
| povoleno | Označuje, zda má být tato analýza push naplánována nebo ne. Ve výchozím nastavení False. | Boolean | Ano. Aby bylo možné naplánovat, musí to být pravda. |
| schedulingFrequency | Četnost hlášení by měla být naplánována. | "DAILY", "WEEKLY", "MONTHLY" | Ne. Push analýza bez frekvence nebude naplánována |
| schedulingDayOfFrequency | Den ve frekvenci, kdy by měla být úloha naplánována. | Celé číslo. Jakákoli hodnota, když je frekvence "DAILY". 0-7, když je frekvence "WEEKLY". 1-31, když je frekvence "MONTHLY" | Ne. Push analýza bez platného dne frekvence pro nastavenou frekvenci nebude naplánována. |

## Analýza využití dat { #webapi_usage_analytics } 

Rozhraní API pro analýzu používání umožňuje přístup k informacím o tom, jak lidé používají DHIS2 na základě analýzy dat. Když uživatelé přistupují k oblíbeným položkám, zaznamená se událost. Událost se skládá ze jména uživatele, UID oblíbené položky, času, kdy k události došlo, a typu události. Různé typy událostí jsou uvedeny v tabulce.

    /api/dataStatistics

The usage analytics API lets you retrieve aggregated snapshots of usage
analytics based on time intervals. The API captures user views (for
example the number of times a chart or pivot table has been viewed by a
user) and saved analysis favorites (for example favorite charts and
pivot tables). DHIS2 will capture nightly snapshots which are then
aggregated at request.

### Parametry požadavku databázového dotazu { #webapi_usage_analytics_request_query_parameters } 

Rozhraní API pro analýzu využití (statistiku dat) podporuje dvě operace:

  - *POST:* creates a view event

  - *GET:* načte agregované statistiky

### Vytvoření události zobrazení (POST) { #webapi_usage_analytics_create_view_events } 

The usage analytics API lets you create event views. The
dataStatisticsEventType parameter describes what type of item was
viewed. The favorite parameter indicates the identifier of the relevant
favorite.

URL, které vytváří nové zobrazení událostí grafů:

    POST /api/dataStatistics?eventType=CHART_VIEW&favorite=LW0O27b7TdD

A successful save operation returns an HTTP status code 201. The table
below shows the supported types of events.


Tabulka: Podporované typy událostí

| Klíč | Popis |
|---|---|
| VISUALIZATION_VIEW | Vizualizační pohled |
| MAP_VIEW | Zobrazení mapy (GIS) |
| EVENT_REPORT_VIEW | Zobrazení přehledu událostí |
| EVENT_CHART_VIEW | Zobrazení grafu událostí |
| EVENT_VISUALIZATION_VIEW | Zobrazení vizualizace události |
| DASHBOARD_VIEW | Zobrazení Ovládacího panelu |
| PASSIVE_DASHBOARD_VIEW | Zobrazení ovládacího panelu (pokud není výslovně vybrán ovládací panel) |
| DATA_SET_REPORT_VIEW | Zobrazení přehledu datové sady |

### Načíst agregovaný analytický přehled využití (GET) { #webapi_aggregated_usage_analytics } 

The usage analytics (data statistics) API lets you specify certain query
parameters when asking for an aggregated report.



Tabulka: Parametry dotazu pro agregovanou analýzu využití (statistiky dat)

| Parametr dotazu | Požadované | Popis | Možnosti |
|---|---|---|---|
| startDate | Ano | Datum zahájení období | Datum ve formátu yyyy-MM-dd |
| endDate | Ano | Datum ukončení období | Datum ve formátu yyyy-MM-dd |
| interval | Ano | Typ intervalu, který se má agregovat | DAY, WEEK, MONTH, YEAR |

The startDate and endDate parameters specify the period for which
snapshots are to be used in the aggregation. You must format the dates
as shown above. If no snapshots are saved in the specified period, an
empty list is sent back. The parameter called interval specifies what
type of aggregation will be done.

API query that creates a query for a monthly
    aggregation:

    GET /api/dataStatistics?startDate=2014-01-02&endDate=2016-01-01&interval=MONTH

### Načíst hlavní oblíbené položky { #webapi_usage_analytics_top_favorites } 

Rozhraní API pro analýzu využití vám umožňuje načíst nejoblíbenější oblíbené položky používané v DHIS2 a podle uživatele.


Tabulka: Parametry dotazu na oblíbené položky

| Parametr dotazu | Požadované | Popis | Možnosti |
|---|---|---|---|
| eventType | Ano | Typ události statistiky dat | Viz výše uvedená tabulka |
| pageSize | Ne | Velikost vráceného seznamu | Například 5, 10, 25. Výchozí hodnota je 25 |
| sortOrder | Ne | Sestupně nebo vzestupně | ASC nebo DESC. Výchozí hodnota je DESC. |
| uživatelské jméno | Ne | Pokud je zadáno, odpověď bude obsahovat pouze oblíbené položky tohoto uživatele. | Například 'admin' |

The API query can be used without a username, and will then find the top
favorites of the system.

    /api/dataStatistics/favorites?eventType=CHART_VIEW&pageSize=25&sortOrder=ASC

Pokud je zadáno uživatelské jméno, odpověď bude obsahovat pouze nejoblíbenější oblíbené uživatele.

    /api/dataStatistics/favorites?eventType=CHART_VIEW&pageSize=25
      &sortOrder=ASC&username=admin

### Formát odpovědi { #webapi_usage_analytics_response_format } 

You can return the aggregated data in a usage analytics response in
several representation formats. The default format is JSON. The
available formats and content types are:

  - json (application/json)

  - xml (application/xml)

  - html (text/html)

Databázový dotaz API, který požaduje odpověď na analýzu využití ve formátu XML:

    /api/dataStatistics.xml?startDate=2014-01-01&endDate=2016-01-01&interval=WEEK

Postup získání odpovědi na analýzu využití ve formátu JSON:

    /api/dataStatistics?startDate=2016-02-01&endDate=2016-02-14&interval=WEEK

Odpověď JSON vypadá takto:

```json
[
  {
    "year": 2016,
    "week": 5,
    "mapViews": 2181,
    "chartViews": 2227,
    "reportTableViews": 5633,
    "eventReportViews": 6757,
    "eventChartViews": 9860,
    "eventVisualizationViews": 2387,
    "dashboardViews": 10082,
    "passiveDashboardViews": 0,
    "totalViews": 46346,
    "averageViews": 468,
    "averageMapViews": 22,
    "averageChartViews": 22,
    "averageReportTableViews": 56,
    "averageEventReportViews": 68,
    "averageEventChartViews": 99,
    "averageEventVisualizationViews": 10,
    "averageDashboardViews": 101,
    "averagePassiveDashboardViews": 0,
    "savedMaps": 1805,
    "savedCharts": 2205,
    "savedReportTables": 1995,
    "savedEventReports": 1679,
    "savedEventCharts": 1613,
    "savedEventVisualizations": 1231,
    "savedDashboards": 0,
    "savedIndicators": 1831,
    "activeUsers": 99,
    "users": 969
  },
  {
    "year": 2016,
    "week": 6,
    "mapViews": 2018,
    "chartViews": 2267,
    "reportTableViews": 4714,
    "eventReportViews": 6697,
    "eventChartViews": 9511,
    "dashboardViews": 12181,
    "passiveDashboardViews": 0,
    "totalViews": 47746,
    "averageViews": 497,
    "averageMapViews": 21,
    "averageChartViews": 23,
    "averageReportTableViews": 49,
    "averageEventReportViews": 69,
    "averageEventChartViews": 99,
    "averageDashboardViews": 126,
    "averagePassiveDashboardViews": 0,
    "savedMaps": 1643,
    "savedCharts": 1935,
    "savedReportTables": 1867,
    "savedEventReports": 1977,
    "savedEventCharts": 1714,
    "savedDashboards": 0,
    "savedIndicators": 1646,
    "activeUsers": 96,
    "users": 953
  }
]
```

Note that the number of `activeUsers` indicates the number of distinct users who had any events during the requested time period. The number of `users` represents the total number of users in the system (both enabled and disabled).

### Načíst statistiky oblíbené položky { #webapi_usage_analytics_retrieve_favorite_statistics }

You can retrieve the number of view for a specific favorite by using the
*favorites* resource, where *{favorite-id}* should be substituted with
the identifier of the favorite of interest:

    /api/dataStatistics/favorites/{favorite-id}.json

The response will contain the number of views for the given favorite and
look like this:

```json
{
  "views": 3
}
```

## Geoprostorové prvky { #webapi_geospatial_features } 

The *geoFeatures* resource lets you retrieve geospatial information from
DHIS2. Geospatial features are stored together with organisation units.
The syntax for retrieving features is identical to the syntax used for
the organisation unit dimension for the analytics resource. It is
recommended to read up on the analytics api resource before continuing
to read this section. You must use the GET request type, and only JSON
response format is supported.

As an example, to retrieve geo features for all organisation units at
level 3 in the organisation unit hierarchy you can use a GET request
with the following URL:

    /api/geoFeatures.json?ou=ou:LEVEL-3

To retrieve geo features for organisation units at a level within the
boundary of an organisation unit (e.g. at level 2) you can use this URL:

    /api/geoFeatures.json?ou=ou:LEVEL-4;O6uvpzGd5pu

Hodnotu souřadnic odezvy lze číst ze dvou vlastností, o kterých rozhoduje parametr `coordinateField`.
  - Vlastnost `geometry` OrganisationUnit: toto je výchozí chování, které se použije, když není zadán parametr `coordinateField`.
  - Atribut OrgansationUnit typu hodnoty GeoJSON: API použije zadaný `coordinateField={attributeId}` k získání souřadnic GeoJSON z této hodnoty atributu.

Chcete-li například načíst geografické prvky pro všechny organizační jednotky na úrovni 3, jak je uvedeno výše, ale získat souřadnice z atributu OrganisationUnit `tJqtSV4quLb`

    /api/geoFeatures.json?ou=ou:LEVEL-3&coordinateField=tJqtSV4quLb

The semantics of the response properties are described in the following
table.

Tabulka: Odezva geografických funkcí

| Vlastnictví | Popis |
|---|---|
| id | Identifikátor organizační jednotky / geografického prvku |
| na | Název organizační jednotky / geografického prvku |
| hcd | Má souřadnice dole, označující, zda existuje jedna nebo více podřízených organizačních jednotek se souřadnicemi (níže v hierarchii) |
| hcu | Má souřadnice nahoru, což označuje, zda má nadřazená organizační jednotka souřadnice (výše v hierarchii) |
| le | Úroveň této organizační jednotky / geografické funkce. |
| pg | Nadřazený graf, graf identifikátorů nadřazených organizačních jednotek až po kořen v hierarchii |
| pi | Parent identifier, identifikátor nadřazeného této organizační jednotky |
| pn | Parent name, název nadřazeného této organizační jednotky |
| ty | Typ geografického prvku, 1 = bod a 2 = mnohoúhelník nebo multi-polygon |
| co | Souřadnice tohoto geografického prvku |


### GeoJSON { #geojson } 

To export GeoJSON, you can simply add *.geosjon* as an extension to the
endpoint */api/organisationUnits*, or you can use the *Accept* header
*application/json+geojson*.

Jsou podporovány dva parametry: `level` (výchozí je 1) a `parent` (výchozí jsou kořenové organizační jednotky). Oba mohou být zahrnuty vícekrát. Nějaké příklady:

Získejte všechny funkce na úrovni 2 a 4:

    /api/organisationUnits.geojson?level=2&level=4

Získejte všechny funkce na úrovni 3 s organizační jednotkou která určuje hranice:

    /api/organisationUnits.geojson?parent=fdc6uOvgoji&level=3

## Hooks analytické tabulky { #webapi_analytics_table_hooks } 

Analytics table hooks provide a mechanism for invoking SQL scripts
during different phases of the analytics table generation process. This
is useful for customizing data in resource and analytics tables, e.g. in
order to achieve specific logic for calculations and aggregation.
Analytics table hooks can be manipulated at the following API endpoint:

    /api/analyticsTableHooks

The analytics table hooks API supports the standard HTTP CRUD operations
for creating (POST), updating (PUT), retrieving (GET) and deleting
(DELETE) entities.

### Hooks pole { #webapi_analytics_table_hook_fields } 

Hooks analytické tabulky mají následující pole:



Tabulka: Pole pro hooks tabulky Analytics

| Pole | Možnosti | Popis |
|---|---|---|
| název | Text | Název hook. |
| phase | RESOURCE_TABLE_POPULATED, ANALYTICS_TABLE_POPULATED | Fáze, kdy má být SQL skript vyvolán. |
| resourceTableType | Viz sloupec "Typ tabulky" v tabulce "Fáze, typy tabulek a dočasné tabulky" níže | Typ tabulky prostředků, pro kterou se má vyvolat skript SQL. Platí pouze pro háky definované ve fázi RESOURCE_TABLE_POPULATED. |
| analyticsTableType | Viz sloupec "Typ tabulky" v tabulce "Fáze, typy tabulek a dočasné tabulky" níže | Typ analytické tabulky, pro kterou se má vyvolat skript SQL. Platí pouze pro háky definované ve fázi ANALYTICS_TABLE_POPULATED. |
| sql | Text | SQL skript, který se má vyvolat. |

The *ANALYTICS_TABLE_POPULATED* phase takes place after the analytics
table has been populated, but before indexes have been created and the
temp table has been swapped with the main table. As a result, the SQL
script should refer to the analytics temp table, e.g. *analytics_temp*,
*analytics_completeness_temp*, *analytics_event_temp_ebayegv0exc*.

This applies also to the *RESOURCE_TABLE_POPULATED* phase, which takes
place after the resource table has been populated, but before indexes
have been created and the temp table has been swapped with the main
table. As a result, the SQL script should refer to the resource temp
table, e.g. *_orgunitstructure_temp*, *_categorystructure_temp*.

You should define only one of the *resourceTableType* and
*analyticsTableType* fields, depending on which *phase* is defined.

You can refer to the temporary database table which matches the
specified hook table type only (other temporary tables will not be
available). As an example, if you specify *ORG_UNIT_STRUCTURE* as the
resource table type, you can refer to the *_orgunitstructure_temp*
temporary database table only.

V následující tabulce jsou uvedeny platné kombinace fází, typů tabulek a dočasných tabulek.



Tabulka: Fáze, typy tabulek a dočasné tabulky

| Fáze | Typ tabulky | Dočasná tabulka |
|---|---|---|
| RESOURCE_TABLE_POPULATED | ORG_UNIT_STRUCTURE | \_orgunitstructure\_temp |
|| DATA_SET_ORG_UNIT_CATEGORY |\_datasetorgunitcategory\_temp |
|| CATEGORY_OPTION_COMBO_NAME | \_categoryoptioncomboname\_temp |
|| DATA_ELEMENT_GROUP_SET_STRUCTURE | \_dataelementgroupsetstructure\_temp |
|| INDICATOR_GROUP_SET_STRUCTURE |\_indicatorgroupsetstructure\_temp |
|| ORG_UNIT_GROUP_SET_STRUCTURE | \_organisationunitgroupsetstructure\_temp |
|| CATEGORY_STRUCTURE | \_categorystructure\_temp |
|| DATA_ELEMENT_STRUCTURE | \_dataelementstructure\_temp |
|| PERIOD_STRUCTURE | \_periodstructure\_temp |
|| DATE_PERIOD_STRUCTURE | \_dateperiodstructure\_temp |
|| DATA_ELEMENT_CATEGORY_OPTION_COMBO | \_dataelementcategoryoptioncombo\_temp |
|| DATA_APPROVAL_MIN_LEVEL | \_dataapprovalminlevel\_temp |
| ANALYTICS_TABLE_POPULATED | DATA_VALUE | analytics\_temp |
|| COMPLETENESS | analytics\_completeness\_temp |
|| COMPLETENESS_TARGET | analytics\_completenesstarget\_temp |
|| ORG_UNIT_TARGET | analytics\_orgunittarget\_temp |
|| EVENT | analytics\_event\_temp\_{program-uid} |
|| ZÁPIS | analytics\_enrollment\_temp\_{program-uid} |
|| VALIDATION_RESULT | analytics\_validationresult\_temp |

### Vytváření hooks { #webapi_create_analytics_table_hook } 

To create a hook which should run after the resource tables have been populated you can do a *POST* request like this using *JSON* as content type:

```
POST /api/analyticsTableHooks
```

```json
{
  "name": "Update 'Area' in org unit group set resource table",
  "phase": "RESOURCE_TABLE_POPULATED",
  "resourceTableType": "ORG_UNIT_GROUP_SET_STRUCTURE",
  "sql": "update _organisationunitgroupsetstructure_temp set \"uIuxlbV1vRT\" = 'b0EsAxm8Nge'"
}
```

To create a hook which should run after the data value analytics table has been populated you can do a *POST* request like this using *JSON* format:

```json
{
  "name": "Update 'Currently on treatment' data in analytics table",
  "phase": "ANALYTICS_TABLE_POPULATED",
  "analyticsTableType": "DATA_VALUE",
  "sql": "update analytics_temp set monthly = '200212' where monthly in ('200210', '200211')"
}
```

To create a hook which should run after the event analytics tables are populated you can do a *POST* request like this using *JSON* format:

```json
{
  "name": "Delete data for a data element",
  "phase": "ANALYTICS_TABLE_POPULATED",
  "analyticsTableType": "EVENT",
  "sql": "delete from analytics_event_temp_lxaq7zs9vyr where dx = 'uDX9LKGRwaH'"
}
```



## Konverze SVG { #webapi_svg_conversion } 

The Web API provides a resource which can be used to convert SVG content
into more widely used formats such as PNG and PDF. Ideally this
conversion should happen on the client side, but not all client side
technologies are capable of performing this task. Currently PNG and PDF
output formats are supported. The SVG content itself should be passed with
a *svg* query parameter, and an optional query parameter *filename* can
be used to specify the filename of the response attachment file. Note
that the file extension should be omitted. For PNG you can send a *POST*
request to the following URL with Content-type
`application/x-www-form-urlencoded`, identical to a regular HTML form
submission.

    api/svg.png

For PDF you can send a *POST* request to the following URL with
content-type `application/x-www-form-urlencoded`.

    api/svg.pdf

Tabulka: Parametry databázového dotazu

| Parametr dotazu | Požadované | Popis |
|---|---|---|
| svg | Ano | Obsah SVG |
| název souboru | Ne | Název souboru pro vrácenou přílohu bez přípony souboru |

## Analytics outlier detection { #webapi_analytics_outlier_detection } 

The analytics outliert API provides endpoints for investigation of the data quality based on Z Score and Modified Z Score. Both scores are statistical measures that help analyze and interpret data in the context of deviations from the middle value. They are particularly useful in identifying outliers or extreme values in a dataset. The API is implemented as a single analytics endpoint:

- /api/analytics/outlierDetection

### Request  { #webapi_analytics_outlier_detection_request } 

**Query parameters**

| Parametr dotazu    | Popis                                                                                                 | Požadované                                            | Možnosti (nejprve výchozí)                                                                          |                                                                          
|--------------------|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------|--------------------------------------------------------------------------------------------------|
| ds                 | Datová sada                                                                                                    | Ano                                                 | Identifikátor datové sady                                                                              |
| startDate          | Start date for interval tocheck for outliers                                                                | No (relative date period is mandatory in this case) | Date (yyyy-MM-dd)                                                                                |
| endDate            | End date for interval to check for outliers                                                                 | No (relative date period is mandatory in this case) | Date (yyyy-MM-dd)                                                                                |
| pe                 | ISO periods and relative periods                                                                            | No (start and end date is mandatory in this case)   | see "date and period format"                                                                     |
| relativePeriodDate | Datum použité jako základ pro relativní období.                                                                    | Ne                                                  | Date (yyyy-MM-dd)                                                                                |
| ou                 | Organisation unit, organisation unit level or groups (can be combined)                                      | Ne                                                  | Organisation unit (level, group) identifier                                                      |
| záhlaví            | The name of the headers to be returned as part of the response. One or more headers name separated by comma | Ne                                                  | (NULL), dx, dxname, pename, pe ...                                                               |
| orderBy            | Sort the records on the value column                                                                        | Ne                                                  | absdev, zscore, modifiedzscore, median, mean, stddev, medianabsdeviation, lowerbound, upperbound |
| sortOrder          | Sort the records on the value column in ascending or descending order                                       | Ne                                                  | ASC, DESC                                                                                        |
| algoritmus          | Algorithm to use for outlier detection                                                                      | Ne                                                  | Z_SCORE, MODIFIED_Z_SCORE                                                                        |
| práh          | Threshold for outlier values Z_SCORE or MODIFIED_Z_SCORE                                                    | Ne                                                  | Numeric, greater than zero. Default: 3.0                                                         |
| inputIdScheme      | Schéma identifikátoru, které se má použít pro položky metadat v požadavku na dotaz, může být identifikátor, kód nebo atributy. | Ne                                                  | UID, ID, CODE, NAME                                                                              |
| maxResults         | Maximum rows (responses)                                                                                    | Ne                                                  | 500                                                                                              |
| skipRounding       | Skip rounding of data values, i.e. provide fine precision (scale 10).                                       | Ne                                                  | false, true                                                                                      |

**Request example**

    GET api/analytics/outlierDetection?ds=BfMAe6Itzgt&ou=ImspTQPwCqd&startDate=2022-07-26&endDate=2022-10-26&algorithm=Z_SCORE&maxResults=30&orderBy=value&threshold=3.0&sortOrder=asc&outputIdScheme=code


### Response { #webapi_analytics_outlier_detection_response } 

Response is delivered in several representation formats. The default format is JSON. The
available formats and content types are:

  - json (application/json)
  - xml (application/xml)
  - xsl (application/vnd.ms-excel)
  - csv (application/csv)
  - html (text/html)
  - html+css (text/html)

**Response example**

```json
{
    "headers": [
        {
            "name": "dx",
            "column": "Data",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "dxname",
            "column": "Data name",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "pe",
            "column": "Period",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "pename",
            "column": "Period name",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "ou",
            "column": "Organisation unit",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "ouname",
            "column": "Organisation unit name",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "ounamehierarchy",
            "column": "Organisation unit name hierarchy",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "coc",
            "column": "Category option combo",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "cocname",
            "column": "Category option combo name",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "aoc",
            "column": "Attribute option combo",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "aocname",
            "column": "Attribute option combo name",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": false
        },
        {
            "name": "value",
            "column": "Value",
            "valueType": "NUMBER",
            "type": "java.lang.Double",
            "hidden": false,
            "meta": false
        },
        {
            "name": "mean",
            "column": "Mean",
            "valueType": "NUMBER",
            "type": "java.lang.Double",
            "hidden": false,
            "meta": false
        },
        {
            "name": "stddev",
            "column": "Standard deviation",
            "valueType": "NUMBER",
            "type": "java.lang.Double",
            "hidden": false,
            "meta": false
        },
        {
            "name": "absdev",
            "column": "Absolute deviation",
            "valueType": "NUMBER",
            "type": "java.lang.Double",
            "hidden": false,
            "meta": false
        },
        {
            "name": "zscore",
            "column": "zScore",
            "valueType": "NUMBER",
            "type": "java.lang.Double",
            "hidden": false,
            "meta": false
        },
        {
            "name": "lowerbound",
            "column": "Lower boundary",
            "valueType": "NUMBER",
            "type": "java.lang.Double",
            "hidden": false,
            "meta": false
        },
        {
            "name": "upperbound",
            "column": "Upper boundary",
            "valueType": "NUMBER",
            "type": "java.lang.Double",
            "hidden": false,
            "meta": false
        }
    ],
    "metaData": {
        "maxResults": 30,
        "count": 3,
        "orderBy": "VALUE",
        "threshold": 3.0,
        "algorithm": "Z_SCORE"
    },
    "rowContext": {},
    "width": 18,
    "rows": [
        [
            "DE_22",
            "Q_Early breastfeeding (within 1 hr after delivery) at BCG",
            "202209",
            "September 2022",
            "OU_204860",
            "Sandaru CHC",
            "/Sierra Leone/Kailahun/Penguia/Sandaru CHC",
            "COC_292",
            "Fixed, <1y",
            "default",
            "default",
            "105.0",
            "18.3",
            "28.7",
            "86.7",
            "3.0",
            "-67.9",
            "104.4"
        ],
        [
            "DE_359706",
            "BCG doses given",
            "202208",
            "August 2022",
            "OU_595",
            "Ngalu CHC",
            "/Sierra Leone/Bo/Bargbe/Ngalu CHC",
            "COC_292",
            "Fixed, <1y",
            "default",
            "default",
            "220.0",
            "41.6",
            "57.4",
            "178.3",
            "3.1",
            "-130.7",
            "213.9"
        ],
        [
            "DE_35",
            "Yellow Fever doses given",
            "202209",
            "September 2022",
            "OU_1027",
            "Yemoh Town CHC",
            "/Sierra Leone/Bo/Kakua/Yemoh Town CHC",
            "COC_292",
            "Fixed, <1y",
            "default",
            "default",
            "466.0",
            "48.1",
            "114.2",
            "417.8",
            "3.6",
            "-294.6",
            "391.0"
        ]
    ],
    "headerWidth": 18,
    "height": 3
}
```
### Statistics in response { #webapi_analytics_outlier_detection_stats_in_response }

| Statistical Measure | Header name | Popis | Odkaz |
|---|---|---|---|
| Hodnota | value | The data set/ data element numeric value (Penta1 doses given, Measles doses given, etc.) | |
| Mean | mean |The average value of a set of numbers. Calculated by summing all values and dividing by the count.| https://www.khanacademy.org/math/statistics-probability/summarizing-quantitative-data |
| Standard Deviation | stddev | A measure of the amount of variation or dispersion in a set of values. | https://www.statisticshowto.com/probability-and-statistics/standard-deviation/ |
| Absolute Deviation | absdev | The absolute difference between each data value and the middle value. | https://www.mathsisfun.com/data/mean-absolute-deviation.html |
| Z Score | zscore | A standardized score that represents how many standard deviations a data value is from the mean. | https://www.statisticshowto.com/probability-and-statistics/z-score/ |
| Modified Z Score | modifiedzscore | Similar to the Z score but robust to outliers. It uses the median and median absolute deviation. | https://www.statisticshowto.com/modified-z-scores/ |
| Median Absolute Deviation | medianabsdeviation | A robust measure of the spread of data values, calculated as the median of the absolute deviations from the median. | https://math.stackexchange.com/questions/2232309/median-absolute-deviation-mad-formula |
| Minimum | lowerbound | The minimum is the smallest value in a dataset. It represents the lowest observed value among all the data values. | |
| Maximum| upperbound | The maximum is the largest value in a dataset. It represents the highest observed value among all the data values. | |


### Error messages { #webapi_analytics_outlier_detection_error_messages } 

**_NOTE:_** *All messages are delivered with http status code 409.*

| Kód | Zpráva |
|---|---|
| E2200 | At least one data element must be specified. |
| E2201 | Start date and end date or relative period must be specified. |
| E2202 | Start date must be before end date. |
| E2203 | Musí být uvedena alespoň jedna organizační jednotka. | 
| E2204 | Threshold must be a positive number. |
| E2205 | Max results must be a positive number. |
| E2206 | Max results exceeds the allowed max limit: *500*. |
| E2207 | Data start date must be before data end date. |
| E2208 | Non-numeric data values encountered during outlier value detection. |
| E2209 | Data start date not allowed. |
| E2210 | Data end date not allowed. |
| E2211 | Algorithm min-max values not allowed. |
| E2212 | Specifying both a start date/end date and a relative period is not allowed. |
| E2213 | Value of param orderBy is not compatible with algorithm *Z_SCORE*. |
| E7180 | The analytics outliers data does not exist. Please ensure analytics job was run and did not skip the outliers. |
| E7181 | Column *dxname* specified in orderBy, is not eligible for orderBy or does not exist. |

**_NOTE:_** *The values in error messages are examples only*

**Error message example**
```json
{
    "httpStatus": "Conflict",
    "httpStatusCode": 409,
    "status": "ERROR",
    "message": "Start date and end date or relative period must be specified",
    "errorCode": "E2201"
}
```
## Analytics query execution plan and costs including execution time estimation { #analytics-query-execution-plan-and-costs-including-execution-time-estimation } 

The analytics API provides endpoints for investigation of query performance issues. It is implemented as part of all analytics endpoints:

- analytics/explain
- analytics/event/explain
- analytics/enrollment/explain

**Příklad**

    GET /api/analytics/explain?displayProperty=NAME
      &dimension=dx:Uvn6LCg7dVU;sB79w2hiLp8,ou:USER_ORGUNIT
      &filter=pe:THIS_YEAR&includeNumDen=false&skipMeta=false
      &skipData=true&includeMetadataDetails=true

The response looks like this.

```json
{
    "headers": [
        {
            "name": "dx",
            "column": "Data",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": true
        },
        {
            "name": "ou",
            "column": "Organisation unit",
            "valueType": "TEXT",
            "type": "java.lang.String",
            "hidden": false,
            "meta": true
        },
        {
            "name": "value",
            "column": "Value",
            "valueType": "NUMBER",
            "type": "java.lang.Double",
            "hidden": false,
            "meta": false
        }
    ],
    "metaData": {
        "items": {
            "ImspTQPwCqd": {
                "uid": "ImspTQPwCqd",
                "code": "OU_525",
                "name": "Sierra Leone",
                "dimensionItemType": "ORGANISATION_UNIT",
                "valueType": "NUMBER",
                "totalAggregationType": "SUM"
            },
            "sB79w2hiLp8": {
                "uid": "sB79w2hiLp8",
                "name": "ANC 3 Coverage",
                "description": "Total 3rd ANC visits (Fixed and outreach) by expected number of pregnant women.",
                "legendSet": "fqs276KXCXi",
                "dimensionItemType": "INDICATOR",
                "valueType": "NUMBER",
                "totalAggregationType": "AVERAGE",
                "indicatorType": {
                    "name": "Per cent",
                    "displayName": "Per cent",
                    "factor": 100,
                    "number": false
                }
            },
            "dx": {
                "uid": "dx",
                "name": "Data",
                "dimensionType": "DATA_X"
            },
            "pe": {
                "uid": "pe",
                "name": "Period",
                "dimensionType": "PERIOD"
            },
            "ou": {
                "uid": "ou",
                "name": "Organisation unit",
                "dimensionType": "ORGANISATION_UNIT"
            },
            "Uvn6LCg7dVU": {
                "uid": "Uvn6LCg7dVU",
                "code": "IN_52486",
                "name": "ANC 1 Coverage",
                "description": "Total 1st ANC visits (Fixed and outreach) by expected number of pregnant women.",
                "legendSet": "fqs276KXCXi",
                "dimensionItemType": "INDICATOR",
                "valueType": "NUMBER",
                "totalAggregationType": "AVERAGE",
                "indicatorType": {
                    "name": "Per cent",
                    "displayName": "Per cent",
                    "factor": 100,
                    "number": false
                }
            },
            "THIS_YEAR": {
                "name": "This year"
            },
            "2022": {
                "uid": "2022",
                "code": "2022",
                "name": "2022",
                "dimensionItemType": "PERIOD",
                "valueType": "NUMBER",
                "totalAggregationType": "SUM",
                "startDate": "2022-01-01T00:00:00.000",
                "endDate": "2022-12-31T00:00:00.000"
            }
        },
        "dimensions": {
            "dx": [
                "Uvn6LCg7dVU",
                "sB79w2hiLp8"
            ],
            "pe": [
                "2022"
            ],
            "ou": [
                "ImspTQPwCqd"
            ],
            "co": []
        }
    },
    "performanceMetrics": {
        "totalTimeInMillis": 90.894,
        "executionPlans": [
            {
                "timeInMillis": 12.314,
                "planningTime": 6.801,
                "executionTime": 5.513,
                "query": "select ax.\"dx\",ax.\"uidlevel1\", sum(daysxvalue) / 365 as value from analytics_2022 as ax where ax.\"dx\" in ('h0xKKjijTdI') and ax.\"uidlevel1\" in ('ImspTQPwCqd') and ( ax.\"yearly\" in ('2022') ) and ax.\"year\" in (2022) group by ax.\"dx\",ax.\"uidlevel1\"",
                "plan": {
                    "Node Type": "Aggregate",
                    "Strategy": "Sorted",
                    "Partial Mode": "Simple",
                    "Parallel Aware": false,
                    "Async Capable": false,
                    "Startup Cost": 20.21,
                    "Total Cost": 5602.98,
                    "Plan Rows": 260,
                    "Plan Width": 32,
                    "Actual Startup Time": 5.448,
                    "Actual Total Time": 5.449,
                    "Actual Rows": 1,
                    "Actual Loops": 1,
                    "Group Key": [
                        "dx",
                        "uidlevel1"
                    ],
                    "Plans": [
                        {
                            "Node Type": "Bitmap Heap Scan",
                            "Parent Relationship": "Outer",
                            "Parallel Aware": false,
                            "Async Capable": false,
                            "Relation Name": "analytics_2022",
                            "Alias": "ax",
                            "Startup Cost": 20.21,
                            "Total Cost": 5588.33,
                            "Plan Rows": 1520,
                            "Plan Width": 32,
                            "Actual Startup Time": 0.446,
                            "Actual Total Time": 5.003,
                            "Actual Rows": 1032,
                            "Actual Loops": 1,
                            "Recheck Cond": "(dx = 'h0xKKjijTdI'::bpchar)",
                            "Rows Removed by Index Recheck": 0,
                            "Filter": "((uidlevel1 = 'ImspTQPwCqd'::bpchar) AND (yearly = '2022'::text) AND (year = 2022))",
                            "Rows Removed by Filter": 0,
                            "Exact Heap Blocks": 46,
                            "Lossy Heap Blocks": 0,
                            "Plans": [
                                {
                                    "Node Type": "Bitmap Index Scan",
                                    "Parent Relationship": "Outer",
                                    "Parallel Aware": false,
                                    "Async Capable": false,
                                    "Index Name": "in_dx_ao_ax_2022_MClNI",
                                    "Startup Cost": 0.0,
                                    "Total Cost": 19.83,
                                    "Plan Rows": 1520,
                                    "Plan Width": 0,
                                    "Actual Startup Time": 0.406,
                                    "Actual Total Time": 0.407,
                                    "Actual Rows": 1032,
                                    "Actual Loops": 1,
                                    "Index Cond": "(dx = 'h0xKKjijTdI'::bpchar)"
                                }
                            ]
                        }
                    ]
                }
            },
            {
                "timeInMillis": 38.35,
                "planningTime": 0.627,
                "executionTime": 37.723,
                "query": "select ax.\"dx\",ax.\"uidlevel1\", sum(value) as value from analytics_2022 as ax where ax.\"dx\" in ('Jtf34kNZhzP') and ax.\"uidlevel1\" in ('ImspTQPwCqd') and ( ax.\"yearly\" in ('2022') ) and ax.\"year\" in (2022) group by ax.\"dx\",ax.\"uidlevel1\"",
                "plan": {
                    "Node Type": "Aggregate",
                    "Strategy": "Sorted",
                    "Partial Mode": "Simple",
                    "Parallel Aware": false,
                    "Async Capable": false,
                    "Startup Cost": 193.57,
                    "Total Cost": 47322.83,
                    "Plan Rows": 261,
                    "Plan Width": 32,
                    "Actual Startup Time": 37.685,
                    "Actual Total Time": 37.685,
                    "Actual Rows": 1,
                    "Actual Loops": 1,
                    "Group Key": [
                        "dx",
                        "uidlevel1"
                    ],
                    "Plans": [
                        {
                            "Node Type": "Bitmap Heap Scan",
                            "Parent Relationship": "Outer",
                            "Parallel Aware": false,
                            "Async Capable": false,
                            "Relation Name": "analytics_2022",
                            "Alias": "ax",
                            "Startup Cost": 193.57,
                            "Total Cost": 47191.38,
                            "Plan Rows": 17179,
                            "Plan Width": 32,
                            "Actual Startup Time": 1.981,
                            "Actual Total Time": 32.332,
                            "Actual Rows": 17462,
                            "Actual Loops": 1,
                            "Recheck Cond": "(dx = 'Jtf34kNZhzP'::bpchar)",
                            "Rows Removed by Index Recheck": 0,
                            "Filter": "((uidlevel1 = 'ImspTQPwCqd'::bpchar) AND (yearly = '2022'::text) AND (year = 2022))",
                            "Rows Removed by Filter": 0,
                            "Exact Heap Blocks": 1165,
                            "Lossy Heap Blocks": 0,
                            "Plans": [
                                {
                                    "Node Type": "Bitmap Index Scan",
                                    "Parent Relationship": "Outer",
                                    "Parallel Aware": false,
                                    "Async Capable": false,
                                    "Index Name": "in_dx_ax_2022_Eb64F",
                                    "Startup Cost": 0.0,
                                    "Total Cost": 189.27,
                                    "Plan Rows": 17179,
                                    "Plan Width": 0,
                                    "Actual Startup Time": 1.765,
                                    "Actual Total Time": 1.765,
                                    "Actual Rows": 17462,
                                    "Actual Loops": 1,
                                    "Index Cond": "(dx = 'Jtf34kNZhzP'::bpchar)"
                                }
                            ]
                        }
                    ]
                }
            }
        ]
    },
    "width": 0,
    "rows": [],
    "height": 0,
    "headerWidth": 2
}
```

This response displays the execution plan that the PostgreSQL planner generates for the supplied statement.

The execution plan shows how the table(s) referenced by the statement will be scanned: by plain sequential scan, index scan,and if multiple tables are referenced, what joins will be used to bring together the required rows from each input table.

The most critical part of the display is the estimated statement execution cost, which is the query planner's estimate at how long it will take to run the statement.

All entry points are secured by authorization. The `F_PERFORM_ANALYTICS_EXPLAIN` role is required.

## Analytics vysvětluje { #webapi_analytics_explain }

    /api/analytics/explain

## Analytika událostí vysvětluje { #webapi_event_analytics_explain }

    /api/analytics/event/aggregate/{program}/explain

    /api/analytics/event/query/{program}/explain

## Analytika zápisu vysvětluje { #webapi_enrollment_analytics_explain }

    /api/analytics/enrollment/query/{program}/explain

## Outliers analytics explain  { #webapi_analytics_outlier_detection_explain } 

    /api/analytics/outlierDetection/explain


# Údržba { #maintenance } 

## Resource and analytics tables { #webapi_generating_resource_analytics_tables } 

DHIS2 features a set of generated database tables which are used as
a basis for various system functionality. These tables can be executed
immediately or scheduled to be executed at regular intervals through the
user interface. They can also be generated through the Web API as
explained in this section. This task is typically one for a system
administrator and not consuming clients.

The resource tables are used internally by the DHIS2 application for
various analysis functions. These tables are also valuable for users
writing advanced SQL reports. They can be generated with a POST or PUT
request to the following URL:

    /api/33/resourceTables

The analytics tables are optimized for data aggregation and used
currently in DHIS2 for the pivot table module. The analytics tables can
be generated with a POST or PUT request to:

    /api/33/resourceTables/analytics



Tabulka: Volitelné parametry dotazu tabulek Analytiky

| Parametr dotazu | Možnosti | Popis |
|---|---|---|
| skipResourceTables | false &#124; true | Přeskočit generování tabulek zdrojů |
| skipAggregate | false &#124; true | Přeskočit generování souhrnných dat a dat o úplnosti |
| skipEvents | false &#124; true | Přeskočit generování dat událostí |
| skipEnrollment | false &#124; true | Přeskočit generování dat o zápisu |
| skipOrgUnitOwnership | false &#124; true | Skip generation of organization unit ownership data |
| lastYears | celé číslo | Počet údajů za poslední roky, které mají být zahrnuty |

> **Note**
>
> lastYears=0 means latest or continuous analytics, as defined in
[Continuous analytics table](../../../use/user-guides/dhis-core-version-master/maintaining-the-system/scheduling.html#scheduling_continuous_analytics_table).


"Kvalitu dat" a "Dohled nad daty" lze spustit prostřednictvím monitorovací úlohy, která se spouští pomocí následujícího koncového bodu:

    /api/33/resourceTables/monitoring

This task will analyse your validation rules, find any violations and
persist them as validation results.

These requests will return immediately and initiate a server-side
process.

## Údržba { #webapi_maintenance } 

To perform maintenance you can interact with the *maintenance* resource. You should use *POST* or *PUT* as a method for requests. The following methods are available.

Vymazání analytických tabulek zruší všechny analytické tabulky.

    POST PUT /api/maintenance/analyticsTablesClear

Analýza analytické tabulky shromáždí statistiky o obsahu analytických tabulek v databázi.

    POST PUT /api/maintenance/analyticsTablesAnalyze

Expired invitations clear will remove all user account invitations which
have expired.

    POST PUT /api/maintenance/expiredInvitationsClear

Period pruning will remove periods which are not linked to any data
values.

    POST PUT /api/maintenance/periodPruning

Zero data value removal will delete zero data values linked to data
elements where zero data is defined as not significant:

    POST PUT /api/maintenance/zeroDataValueRemoval

Odebráním hodnot s měkkými odstraněnými daty trvale odstraníte hodnoty s měkkými odstraněnými daty.

    POST PUT /api/maintenance/softDeletedDataValueRemoval

Odebrání instance instance programu s měkkým odstraněním trvale odstraní události s měkkým odstraněním.

    POST PUT /api/maintenance/softDeletedProgramStageInstanceRemoval

Odebrání instance programu s měkkým odstraněním trvale odstraní registrace s měkkým odstraněním.

    POST PUT /api/maintenance/softDeletedProgramInstanceRemoval

Odstranění instance trasované entity s měkkým odstraněním trvale odstraní instance s trasovanou entitou s měkkým odstraněním.

    POST PUT /api/maintenance/softDeletedTrackedEntityInstanceRemoval

Zrušit zobrazení SQL zruší všechna zobrazení SQL v databázi. Všimněte si, že neodstraní entity zobrazení DHIS2 SQL.

    POST PUT /api/maintenance/sqlViewsDrop

Vytvoření pohledů SQL znovu vytvoří všechny pohledy SQL v databázi.

    POST PUT /api/maintenance/sqlViewsCreate

Aktualizace kombinace možností kategorie odstraní zastaralé a vygeneruje chybějící kombinace možností kategorie pro všechny kombinace kategorií.

    POST PUT /api/maintenance/categoryOptionComboUpdate

Je také možné aktualizovat kombinace možností kategorie pro kombo jedné kategorie pomocí následujícího koncového bodu.

    POST PUT /api/maintenance/categoryOptionComboUpdate/categoryCombo/<category-combo-uid>

Vyčištění mezipaměti vymaže mezipaměť aplikace Hibernate a mezipaměti analytického oddílu.

    POST PUT /api/maintenance/cacheClear

Aktualizace cest organizačních jednotek znovu vygeneruje vlastnost cesty organizační jednotky. To může být užitečné např. pokud jste importovali organiyační jednotky s SQL.

    POST PUT /api/maintenance/ouPathsUpdate

Ořezání dat odstraní kompletní registrace datových sad, schválení dat, audity hodnot dat a hodnoty dat, v tomto případě pro organizační jednotku.

    POST PUT /api/maintenance/dataPruning/organisationUnits/<org-unit-id>

Ořezávání dat pro datové prvky, které odstraní audity a hodnoty dat.

    POST PUT /api/maintenance/dataPruning/dataElement/<data-element-uid>

Ověření metadat použije všechna pravidla ověření metadat a vrátí výsledek operace.

    POST PUT /api/metadataValidation

Opětovné načtení aplikace obnoví mezipaměť spravovanou DHIS2 nainstalovaných aplikací čtením ze systému souborů.

    POST PUT /api/appReload

Operace údržby jsou podporovány v dávkovém stylu s požadavkem POST na prostředek api / údržba, kde jsou operace dodávány jako parametry dotazu:

    POST PUT /api/maintenance?analyticsTablesClear=true&expiredInvitationsClear=true
      &periodPruning=true&zeroDataValueRemoval=true&sqlViewsDrop=true&sqlViewsCreate=true
      &categoryOptionComboUpdate=true&cacheClear=true&ouPathsUpdate=true

## Systémová informace { #webapi_system_resource } 

The system resource provides you with convenient information and
functions. The system resource can be found at */api/system*.

### Generování identifikátorů { #webapi_system_resource_generate_identifiers } 

Chcete-li vygenerovat platné, náhodné identifikátory DHIS2, můžete zadat požadavek GET na tento zdroj:

    /api/33/system/id?limit=3

The *limit* query parameter is optional and indicates how many
identifiers you want to be returned with the response. The default is to
return one identifier. The response will contain a JSON object with an
array named codes, similar to this:

```json
{
  "codes": [
    "Y0moqFplrX4",
    "WI0VHXuWQuV",
    "BRJNBBpu4ki"
  ]
}
```

Formát DHIS2 UID má tyto požadavky:

  - Délka 11 znaků.

  - Alphanumeric characters only, ie. alphabetic or numeric characters
    (A-Za-z0-9).

  - Začíná abecedním znakem (A-Za-z).

### Zobrazení informací o systému { #webapi_system_resource_view_system_information } 

To get information about the current system you can do a GET request to
this URL:

    /api/33/system/info

JSON and JSONP response formats are supported. The system info response
currently includes the below properties.

```json
{
  "contextPath": "http://yourdomain.com",
  "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 Chrome/29.0.1547.62",
  "calendar": "iso8601",
  "dateFormat": "yyyy-mm-dd",
  "serverDate": "2021-01-05T09:16:03.548",
  "serverTimeZoneId": "Etc/UTC",
  "serverTimeZoneDisplayName": "Coordinated Universal Time",
  "version": "2.13-SNAPSHOT",
  "revision": "11852",
  "buildTime": "2013-09-01T21:36:21.000+0000",
  "serverDate": "2013-09-02T12:35:54.311+0000",
  "environmentVariable": "DHIS2_HOME",
  "javaVersion": "1.7.0_06",
  "javaVendor": "Oracle Corporation",
  "javaIoTmpDir": "/tmp",
  "javaOpts": "-Xms600m -Xmx1500m -XX:PermSize=400m -XX:MaxPermSize=500m",
  "osName": "Linux",
  "osArchitecture": "amd64",
  "osVersion": "3.2.0-52-generic",
  "externalDirectory": "/home/dhis/config/dhis2",
  "databaseInfo": {
    "type": "PostgreSQL",
    "name": "dhis2",
    "user": "dhis",
    "spatialSupport": false
  },
  "memoryInfo": "Mem Total in JVM: 848 Free in JVM: 581 Max Limit: 1333",
  "cpuCores": 8
}
```

> **Poznámka**
>
> Pokud uživatel požadující tento zdroj nemá plné oprávnění, budou zahrnuty pouze vlastnosti, které nejsou považovány za citlivé.

To get information about the system context only, i.e. `contextPath` and
`userAgent`, you can make a GET request to the below URL. JSON and
JSONP response formats are supported:

    /api/33/system/context

### Zkontrolujte, zda je kombinace uživatelského jména a hesla správná { #webapi_system_resource_check_username_password } 

To check if some user credentials (a username and password combination)
is correct you can make a *GET* request to the following resource using
*basic authentication*:

    /api/33/system/ping

You can detect the outcome of the authentication by inspecting the *HTTP
status code* of the response header. The meanings of the possible status
codes are listed below. Note that this applies to Web API requests in
general.



Tabulka: Stavové kódy HTTP

| Stavový kód HTTP | Popis | Výsledek |
|---|---|---|
| 200 | OK | Ověření proběhlo úspěšně |
| 302 | Nalezeno | S požadavkem nebyly dodány žádné přihlašovací údaje – neproběhlo žádné ověření |
| 401 | Neoprávněný | Kombinace uživatelského jména a hesla byla nesprávná – ověření se nezdařilo |

### Zobrazení stavu asynchronního úkolu { #webapi_system_resource_view_async_task_status } 

Tasks which often take a long time to complete can be performed
asynchronously. After initiating an async task you can poll the status
through the `system/tasks` resource by supplying the task category and
the task identifier of interest.

When polling for the task status you need to authenticate as the same
user which initiated the task. The following task categories are
supported:



Tabulka: Kategorie úkolů

| Identifikátor | Popis |
|---|---|
| ANALYTICS_TABLE | Generování analytických tabulek. |
| RESOURCE_TABLE | Generování tabulek zdrojů. |
| MONITORING | Zpracování validačních pravidel dohledu / monitorování dat. |
| DATAVALUE_IMPORT | Import hodnot dat. |
| EVENT_IMPORT | Import událostí. |
| ENROLLMENT_IMPORT | Import zápisů. |
| TEI_IMPORT | Import instancí trasovaných entit. |
| METADATA_IMPORT | Import metadat. |
| DATA_INTEGRITY | Zpracování kontrol integrity dat. |

Každému asynchronnímu úkolu je automaticky přiřazen identifikátor, který lze použít ke sledování stavu úkolu. Tento identifikátor úkolu je vrácen API, když inicializujete asynchronní úkol prostřednictvím různých koncových bodů s povolenou async.

#### Monitorování úkolu { #monitoring-a-task } 

You can poll the task status through a GET request to the system tasks
resource like this:

    /api/33/system/tasks/{task-category-id}/{task-id}

Příklad požadavku může vypadat takto:

    /api/33/system/tasks/DATAVALUE_IMPORT/j8Ki6TgreFw

The response will provide information about the status, such as the
notification level, category, time and status. The *completed* property
indicates whether the process is considered to be complete.

```json
[{
  "uid": "hpiaeMy7wFX",
  "level": "INFO",
  "category": "DATAVALUE_IMPORT",
  "time": "2015-09-02T07:43:14.595+0000",
  "message": "Import done",
  "completed": true
}]
```

#### Monitorování všech úkolů pro kategorii { #monitoring-all-tasks-for-a-category } 

You can poll all tasks for a specific category through a GET request to
the system tasks resource:

    /api/33/system/tasks/{task-category-id}

An example request to poll for the status of data value import tasks
looks like this:

    /api/33/system/tasks/DATAVALUE_IMPORT

#### Monitorujte všechny úkoly { #monitor-all-tasks } 

You can request a list of all currently running tasks in the system with
a GET request to the system tasks resource:

    /api/33/system/tasks

Odpověď bude vypadat podobně jako tato:

```json
[{
  "EVENT_IMPORT": {},
  "DATA_STATISTICS": {},
  "RESOURCE_TABLE": {},
  "FILE_RESOURCE_CLEANUP": {},
  "METADATA_IMPORT": {},
  "CREDENTIALS_EXPIRY_ALERT": {},
  "SMS_SEND": {},
  "MOCK": {},
  "ANALYTICSTABLE_UPDATE": {},
  "COMPLETE_DATA_SET_REGISTRATION_IMPORT": {},
  "DATAVALUE_IMPORT": {},
  "DATA_SET_NOTIFICATION": {},
  "DATA_INTEGRITY": {
    "OB1qGRlCzap": [{
      "uid": "LdHQK0PXZyF",
      "level": "INFO",
      "category": "DATA_INTEGRITY",
      "time": "2018-03-26T15:02:32.171",
      "message": "Data integrity checks completed in 38.31 seconds.",
      "completed": true
    }]
  },
  "PUSH_ANALYSIS": {},
  "MONITORING": {},
  "VALIDATION_RESULTS_NOTIFICATION": {},
  "REMOVE_EXPIRED_RESERVED_VALUES": {},
  "DATA_SYNC": {},
  "SEND_SCHEDULED_MESSAGE": {},
  "DATAVALUE_IMPORT_INTERNAL": {},
  "PROGRAM_NOTIFICATIONS": {},
  "META_DATA_SYNC": {},
  "ANALYTICS_TABLE": {},
  "PREDICTOR": {}
}]
```

### Zobrazit asynchronní souhrny úkolů { #view-asynchronous-task-summaries } 

The task summaries resource allows you to retrieve a summary of an
asynchronous task invocation. You need to specify the category and
optionally the identifier of the task. The task identifier can be
retrieved from the response of the API request which initiated the
asynchronous task.

Chcete-li načíst souhrn konkrétního úkolu, můžete vystavit požadavek na:

    /api/33/system/taskSummaries/{task-category-id}/{task-id}

Příklad požadavku může vypadat takto:

    /api/33/system/taskSummaries/DATAVALUE_IMPORT/k72jHfF13J1

Odpověď bude vypadat podobně jako tato:

```json
{
  "responseType": "ImportSummary",
  "status": "SUCCESS",
  "importOptions": {
    "idSchemes": {},
    "dryRun": false,
    "async": true,
    "importStrategy": "CREATE_AND_UPDATE",
    "reportMode": "FULL",
    "skipExistingCheck": false,
    "sharing": false,
    "skipNotifications": false,
    "datasetAllowsPeriods": false,
    "strictPeriods": false,
    "strictCategoryOptionCombos": false,
    "strictAttributeOptionCombos": false,
    "strictOrganisationUnits": false,
    "requireCategoryOptionCombo": false,
    "requireAttributeOptionCombo": false,
    "skipPatternValidation": false
  },
  "description": "Import process completed successfully",
  "importCount": {
    "imported": 0,
    "updated": 431,
    "ignored": 0,
    "deleted": 0
  },
  "dataSetComplete": "false"
}
```

You might also retrieve import summaries for multiple tasks of a
specific category with a request like
this:

    /api/33/system/taskSummaries/{task-category-id}

### Získejte informace o vzhledu { #webapi_system_resource_get_appearance_information } 

You can retrieve the available flag icons in JSON format with a GET
request:

    /api/33/system/flags

You can retrieve the available UI styles in JSON format with a GET
request:

    /api/33/system/styles


## Trigram Index Summary { #trigram-index-summary } 

Trigram indexes can be created using Tracker Search Optimization jobs. It is useful to know which tracked entity attributes are indexed and which ones are not. The following API can be used to get a summary of the trigram index status. The API supports field selection and filtering using the field query parameter.

The attributes corresponding to the property "indexedAttributes" are currently indexed in the system. The attributes corresponding to the property "indexableAttributes" are not indexed currently but are candidates for creating indexes if required. The attributes corresponding to the property "obsoleteIndexedAttributes" are indexed in the system, but those indexes are obsolete due to changes in the attribute configuration which do not qualify them as indexable anymore.

```
GET /api/39/trigramSummary
```

Ukázková odpověď JSON vypadá takto:

```json
{
    "indexedAttributes": [{
        "displayName": "First name",
        "id": "w75KJ2mc4zz"
    }, {
        "displayName": "Last name",
        "id": "zDhUuAYrxNC"
    }],
    "indexableAttributes": [{
        "displayName": "Phone number",
        "id": "P2cwLGskgxn"
    }],
    "obsoleteIndexedAttributes": [{
        "displayName": "TB identifier",
        "id": "xs8A6tQJY0s"
    }, {
        "displayName": "Provider ID",
        "id": "DODgdr5Oo2v"
    }]
}
```

## Cluster info { #cluster-info } 

Když je DHIS 2 nastaven v konfiguraci klastru, je užitečné vědět, který uzel v klastru funguje jako vedoucí klastru. Následující API lze použít k získání podrobností o instanci vedoucího uzlu. Rozhraní API podporuje formáty JSON i XML.

```
GET /api/36/cluster/leader
```

Ukázková odpověď JSON vypadá takto:

```json
{
  "leaderNodeId": "play-dhis2-org-dev",
  "leaderNodeUuid": "d386e46b-26d4-4937-915c-025eb99c8cad",
  "currentNodeId": "play-dhis2-org-dev",
  "currentNodeUuid": "d386e46b-26d4-4937-915c-025eb99c8cad",
  "leader": true
}
```

## Min-max datové prvky { #webapi_min_max_data_elements } 

Prostředek datových prvků min-max umožňuje nastavit rozsahy minimálních a maximálních hodnot pro datové prvky. Je jedinečnou kombinací organizační jednotky, datového prvku a kombinace možnosti kategorie.

    /api/minMaxDataElements



Tabulka: Min-max datová struktura datového prvku

| Položka | Popis | Datový typ |
|---|---|---|
| zdroj | Identifikátor organizační jednotky | Řetězec |
| dataElement | Identifikátor datového prvku | Řetězec |
| optionCombo | Kombinovaný identifikátor kategorie datových prvků | Řetězec |
| min | Minimální hodnota | Celé číslo |
| max | Maximální hodnota | Celé číslo |
| vytvořené | Označuje, zda je tento objekt generován systémem (a není nastaven ručně). | Boolean |

You can retrieve a list of all min-max data elements from the following
resource:

    GET /api/minMaxDataElements.json

Odpověď můžete filtrovat takto:

    GET /api/minMaxDataElements.json?filter=dataElement.id:eq:UOlfIjgN8X6

    GET /api/minMaxDataElements.json?filter=dataElement.id:in:[UOlfIjgN8X6,xc8gmAKfO95]

The filter parameter for min-max data elements supports two operators:
eq and in. You can also use the `fields` query parameter.

    GET /api/minMaxDataElements.json?fields=:all,dataElement[id,name]

### Přidat / aktualizovat datový prvek min-max { #webapi_add_update_min_max_data_element } 

Chcete-li přidat nový datový prvek min-max, použijte požadavek POST k:

    POST /api/minMaxDataElements.json

Formát obsahu JSON vypadá takto:

```json
{
  "min": 1,
  "generated": false,
  "max": 100,
  "dataElement": {
    "id": "UOlfIjgN8X6"
  },
  "source": {
    "id": "DiszpKrYNg8"
  },
  "optionCombo": {
    "id": "psbwp3CQEhs"
  }
}
```

Pokud existuje kombinace datového prvku, organizační jednotky a kombinace 
možností kategorie, bude aktualizována minimální a maximální hodnota.

### Odstranit datový prvek min-max { #webapi_delete_min_max_data_element } 

Chcete-li odstranit datový prvek min-max, odešlete požadavek metodou DELETE:

    DELETE /api/minMaxDataElements.json

Obsah JSON je v podobném formátu jako výše:

```json
{
  "min": 1,
  "generated": false,
  "max": 100,
  "dataElement": {
    "id": "UOlfIjgN8X6"
  },
  "source": {
    "id": "DiszpKrYNg8"
  },
  "optionCombo": {
    "id": "psbwp3CQEhs"
  }
}
```

## Zamknout výjimky { #webapi_lock_exceptions } 

The lock exceptions resource allows you to open otherwise locked data
sets for data entry for a specific data set, period and organisation
unit. You can read lock exceptions from the following resource:

    /api/lockExceptions

To create a new lock exception you can use a POST request and specify
the data set, period and organisation unit:

    POST /api/lockExceptions?ds=BfMAe6Itzgt&pe=201709&ou=DiszpKrYNg8

To delete a lock exception you can use a similar request syntax with a
DELETE request:

    DELETE /api/lockExceptions?ds=BfMAe6Itzgt&pe=201709&ou=DiszpKrYNg8




# Výměna dat { #data-exchange }

## Souhrnná výměna dat { #aggregate-data-exchange }

Tato část popisuje službu agregované výměny dat a rozhraní API.

### Úvod { #introduction } 

Služba agregované výměny dat nabízí možnost výměny dat mezi instancemi DHIS 2 a případně dalším softwarem, který podporuje formát JSON sady hodnot dat DHIS 2. Umožňuje také výměnu dat v rámci jedné instance DHIS 2, například pro agregaci dat trackeru a uložení výsledku jako souhrnná data.

Služba výměny souhrnných dat je vhodná pro případy použití, jako jsou:

* Výměna dat mezi instancí HMIS a instancí datového portálu nebo datového skladu DHIS 2.
* Výměna dat mezi instancí sledovače DHIS 2 s jednotlivými daty agregovanou instancí HMIS.
* Předvýpočet sledovacích dat s indikátory programu uloženými jako agregované hodnoty dat.
* Hlášení dat od národního HMIS globálnímu dárci.

### Přehled { #overview } 

Služba agregované výměny dat umožňuje výměnu dat mezi *zdrojovou* instancí DHIS 2 a *cílovou* instancí DHIS 2. Výměna dat může být *externí*, pro kterou je cílová instance odlišná/externí než zdrojová instance . Výměna dat může být také *interní*, pro kterou je cílová instance stejná jako zdrojová instance. Zdroj agregované výměny dat může obsahovat více zdrojových požadavků, přičemž zdrojový požadavek zhruba odpovídá požadavku analytického rozhraní API.

Datová hodnota bude načtena a transformována do formátu *data value set* a poté odeslána do cílové instance DHIS 2. Služba agregované výměny dat podporuje *schémata identifikátorů*, aby umožnila flexibilitu při mapování metadat mezi instancemi.

Data budou načtena a agregována ze zdrojové instance pomocí analytického nástroje. To znamená, že v požadavku na zdrojovou instanci lze odkazovat na datové prvky, souhrnné ukazatele, četnost hlášení datových souborů a ukazatele programu. Zdrojový požadavek také obsahuje období, kde jsou podporována pevná i relativní období, a organizační jednotky. Na zdrojový požadavek lze použít libovolný počet *filtrů*.

Výměna dat může být spuštěna jako plánovaná úloha, kde lze výměnu dat nastavit tak, aby probíhala v určitém intervalu. Výměna dat může být také spuštěna na vyžádání prostřednictvím API.

K vytváření a manipulaci s výměnami souhrnných dat jsou vyžadována oprávnění `F_AGGREGATE_DATA_EXCHANGE_PUBLIC_ADD` / `F_AGGREGATE_DATA_EXCHANGE_PRIVATE_ADD` a `F_AGGREGATE_DATA_EXCHANGE_DELETE`.

Definice agregované výměny dat jsou běžná metadata v DHIS 2, což znamená, že definice lze importovat a exportovat mezi instancemi DHIS 2. Výjimkou jsou přihlašovací údaje (uživatelská jména a přístupové tokeny), které nebudou při exportech metadat vystaveny. Pověření jsou v úložišti šifrována, aby byla zajištěna další vrstva zabezpečení.

The aggregate data exchange service was introduced in version 2.39, which means that the source instance of DHIS 2 must be version 2.39 or later. The target instance of DHIS 2 must be version 2.38 or later.

### Ověření { #authentication }

Pro výměny dat typu externí musí být zadána základní adresa URL a autentizační pověření pro cílovou instanci DHIS 2. Pro autentizaci je podporována základní autentizace a osobní přístupové tokeny (PAT).

Doporučuje se zadat buď základní ověřování, nebo ověřování PAT. Pokud jsou zadány oba, má přednost ověřování PAT.

Všimněte si, že podpora PAT byla zavedena ve verzi 2.38.1, což znamená, že pro použití ověřování PAT musí být cílová instance DHIS 2 verze 2.38.1 nebo novější.

### API { #api } 

Rozhraní API pro agregovanou výměnu dat je popsáno v následující části.

#### Vytvořte agregovanou výměnu dat { #create-aggregate-data-exchange }

```
POST /api/aggregateDataExchanges
```

```
Content-Type: application/json
```

Příklad interní výměny dat, kde jsou data událostí vypočítána s programovými indikátory a uložena jako agregované hodnoty dat:

```json
{
  "name": "Internal data exchange",
  "source": {
    "params": {
      "periodTypes": [
        "MONTHLY",
        "QUARTERLY"
      ]
    },
    "requests": [
      {
        "name": "ANC",
        "visualization": null,
        "dx": [
          "fbfJHSPpUQD",
          "cYeuwXTCPkU",
          "Jtf34kNZhzP"
        ],
        "pe": [
          "LAST_12_MONTHS",
          "202201"
        ],
        "ou": [
          "ImspTQPwCqd"
        ],
        "filters": [
          {
            "dimension": "Bpx0589u8y0",
            "items": [
              "oRVt7g429ZO", 
              "MAs88nJc9nL"
            ]
          }
        ],
        "inputIdScheme": "UID",
        "outputDataElementIdScheme": "UID",
        "outputOrgUnitIdScheme": "UID",
        "outputIdScheme": "UID"
      }
    ]
  },
  "target": {
    "type": "INTERNAL",
    "request": {
      "dataElementIdScheme": "UID",
      "orgUnitIdScheme": "UID",
      "categoryOptionComboIdScheme": "UID",
      "idScheme": "UID"
    }
  }
}
```

Příklad externí datové výměny dat se základním ověřováním a schématem ID *kódu*, kde jsou data odeslána do externí instance DHIS 2:

```json
{
  "name": "External data exchange with basic authentication",
  "source": {
    "requests": [
      {
        "name": "ANC",
        "visualization": null,
        "dx": [
          "fbfJHSPpUQD",
          "cYeuwXTCPkU",
          "Jtf34kNZhzP"
        ],
        "pe": [
          "LAST_12_MONTHS",
          "202201"
        ],
        "ou": [
          "ImspTQPwCqd"
        ],
        "inputIdScheme": "UID",
        "outputIdScheme": "CODE"
      }
    ]
  },
  "target": {
    "type": "EXTERNAL",
    "api": {
        "url": "https://play.dhis2.org/2.38.2.1",
        "username": "admin",
        "password": "district"
    },
    "request": {
      "idScheme": "CODE"
    }
  }
}
```

Příklad externí datové výměny dat s autentizací PAT a schématem ID *code*, kde jsou data odeslána do externí instance DHIS 2:

```json
{
  "name": "External data exchange with PAT authentication",
  "source": {
    "requests": [
      {
        "name": "ANC",
        "dx": [
          "fbfJHSPpUQD",
          "cYeuwXTCPkU",
          "Jtf34kNZhzP"
        ],
        "pe": [
          "LAST_12_MONTHS",
          "202201"
        ],
        "ou": [
          "ImspTQPwCqd"
        ],
        "inputIdScheme": "UID",
        "outputIdScheme": "CODE"
      }
    ]
  },
  "target": {
    "type": "EXTERNAL",
    "api": {
        "url": "https://play.dhis2.org/2.38.2.1",
        "accessToken": "d2pat_XIrqgAGjW935LLPuSP2hXSZwpTxTW2pg3580716988"
    },
    "request": {
      "idScheme": "CODE"
    }
  }
}
```

The syntax for the source requests follow the analytics endpoint API syntax. This means that for the `dx` part, data elements, indicators, data set reporting rates, program data elements and program indicators are supported. Note that for program data elements, the data element must be prefixed with the program identifier. For the `pe` part, relative periods as well as fixed periods are supported. For the `ou` part, user org units, org unit levels and org unit groups as well as individual org units are supported. Consult the *Analytics* chapter > the *Dimensions and items* and *The dx dimension* sections for a full explanation.

##### Odpověď { #response }

```
201 Created
```

```json
{
  "httpStatus": "Created",
  "httpStatusCode": 201,
  "status": "OK",
  "response": {
    "responseType": "ObjectReport",
    "uid": "pG4bBTMiCqO",
    "klass": "org.hisp.dhis.dataexchange.aggregate.AggregateDataExchange",
    "errorReports": []
  }
}
```

#### Update aggregate data exchange { #update-aggregate-data-exchange } 

```
PUT /api/aggregateDataExchanges/{id}
```

```
Content-Type: application/json
```

The request payload is identical to the create operation.

##### Odpověď { #response }

```
200 OK
```

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "response": {
    "responseType": "ObjectReport",
    "uid": "pG4bBTMiCqO",
    "klass": "org.hisp.dhis.dataexchange.aggregate.AggregateDataExchange",
    "errorReports": []
  }
}
```

#### Get aggregate data exchange { #get-aggregate-data-exchange } 

```
GET /api/aggregateDataExchanges/{id}
```

``` 
Accept: application/json
```

The retrieval endpoints follow the regular metadata endpoint field filtering and object filtering semantics. JSON is the only supported response format.

##### Odpověď { #response }

```
200 OK
```

#### Delete aggregate data exchange { #delete-aggregate-data-exchange } 

```
DELETE /api/aggregateDataExchanges/{id}
```

##### Odpověď { #response }

```
204 No Content
```

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "response": {
    "responseType": "ObjectReport",
    "uid": "pG4bBTMiCqO",
    "klass": "org.hisp.dhis.dataexchange.aggregate.AggregateDataExchange",
    "errorReports": []
  }
}
```

#### Run aggregate data exchange { #run-aggregate-data-exchange } 

An aggregate data exchange can be run directly with a POST request to the following endpoint:

```
POST /api/aggregateDataExchanges/{id}/exchange
```

##### Odpověď { #response }

```
200 OK
```

```json
{
  "responseType": "ImportSummaries",
  "status": "SUCCESS",
  "imported": 36,
  "updated": 0,
  "deleted": 0,
  "ignored": 0,
  "importSummaries": ["<import summaries here>"]
}
```

An import summary describing the outcome of the data exchange will be returned, including the number of data values which were imported, updated, deleted and ignored.

#### Get source data { #get-source-data } 

The aggregate data for the source request of an aggregated data exchange can be retrieved in the analytics data format with a GET request to the following endpoint:

```
GET /api/aggregateDataExchanges/{id}/sourceData
```

```
Accept: application/json
```

##### Odpověď { #response }

```
200 OK
```

##### Query parameters { #query-parameters } 

| Parametr dotazu | Požadované | Popis                                                  | Možnosti                       |
| --------------- | -------- | ------------------------------------------------------------ | ----------------------------- |
| outputIdScheme  | Ne       | Override the output identifier scheme for the data response. | UID \| CODE \| ATTRIBUTE:{ID} |

The response payload format is identical with the analytics API endpoint. This endpoint is useful for debugging purposes. Consult the analytics API guide for additional details.

#### Get source data value sets { #get-source-data-value-sets } 

The aggregate data for the source request of an aggregated data exchange can be retrieved in the data value set format with a GET request to the following endpoint:

```
GET /api/aggregateDataExchanges/{id}/sourceDataValueSets
```

```
Accept: application/json
```

##### Odpověď { #response }

```
200 OK
```

##### Query parameters { #query-parameters } 

| Parametr dotazu | Požadované | Popis                                                  | Možnosti                       |
| --------------- | -------- | ------------------------------------------------------------ | ----------------------------- |
| outputIdScheme  | Ne       | Override the output identifier scheme for the data response. | UID \| CODE \| ATTRIBUTE:{ID} |

The response payload format is identical with the data value sets API endpoint. This endpoint is useful for debugging purposes. Consult the data value sets API guide for additional details.

### Data model { #data-model } 

The aggregate data exchange data model / payload is described in the following section.

| Pole                                             | Datový typ      | Povinné   | Popis                                                  |
| ------------------------------------------------- | -------------- | ----------- | ------------------------------------------------------------ |
| název                                              | Řetězec         | Ano         | Name of aggregate data exchange. Unique.                     |
| zdroj                                            | Objekt         | Ano         | Source for aggregate data exchange.                          |
| source.params                                     | Objekt         | Ne          | Parameters for source request.                               |
| source.params.periodTypes                         | Array/String   | Ne          | Allowed period types for overriding periods in source request. |
| source.requests                                   | Array/Object   | Ano         | Source requests.                                             |
| source.requests.name                              | Řetězec         | Ano         | Name of source request.                                      |
| source.requests.visualization                     | Řetězec         | Ne          | Identifier of associated visualization object.               |
| source.requests.dx                                | Array/String   | Ano         | Identifiers of data elements, indicators, data sets and program indicators for the source request. |
| source.requests.pe                                | Array/String   | Ano         | Identifiers of fixed and relative periods for the source request. |
| source.requests.ou                                | Array/String   | Ano         | Identifiers of organisation units for the source request.    |
| source.requests.filters                           | Array (Object) | Ne          | Filters for the source request.                              |
| source.requests.filters.dimension                 | Řetězec         | Ne          | Dimension identifier for the filter.                         |
| source.requests.filters.items                     | Array/String   | Ne          | Item identifiers for the filter.                             |
| source.requests.inputIdScheme                     | Řetězec         | Ne          | Input ID scheme, can be `UID`, `CODE`, `ATTRIBUTE:{ID}`.     |
| source.requests.outputDataElementIdScheme         | Řetězec         | Ne          | Output data element ID scheme, can be `UID`, `CODE`, `ATTRIBUTE:{ID}`. |
| source.requests.outputOrgUnitIdScheme             | Řetězec         | Ne          | Output org unit ID scheme, can be `UID`, `CODE`, `ATTRIBUTE:{ID}`. |
| source.requests.outputIdScheme                    | Řetězec         | Ne          | Output general ID scheme, can be `UID`, `CODE`, `ATTRIBUTE:{ID}`. |
| source.target                                     | Objekt         | Ano         | Target for  aggregate data exchange.                         |
| source.target.type                                | Řetězec         | Ano         | Type of target, can be `EXTERNAL`, `INTERNAL`.               |
| source.target.api                                 | Objekt         | Conditional | Target API information, only mandatory for type `EXTERNAL`.  |
| source.target.api.url                             | Řetězec         | Conditional | Base URL of target DHIS 2 instance, do not include the `/api` part. |
| source.target.api.accessToken                     | Řetězec         | Conditional | Access token (PAT) for target DHIS 2 instance, used for PAT authentication. |
| source.target.api.username                        | Řetězec         | Conditional | Username for target DHIS 2 instance, used for basic authentication. |
| source.target.api.password                        | Řetězec         | Conditional | Password for target DHIS 2 instance, used for basic authentication. |
| source.target.request                             | Objekt         | Ne          | Target request information.                                  |
| source.target.request.dataElementIdScheme         | Řetězec         | Ne          | Input data element ID scheme, can be `UID`, `CODE`, `ATTRIBUTE:{ID}`. |
| source.target.request.orgUnitIdScheme             | Řetězec         | Ne          | Input org unit ID scheme, can be `UID`, `CODE`, `ATTRIBUTE:{ID}`. |
| source.target.request.categoryOptionComboIdScheme | Řetězec         | Ne          | Input category option combo ID scheme, can be `UID`, `CODE`, `ATTRIBUTE:{ID}`. |
| source.target.request.idScheme                    | Řetězec         | Ne          | Input general ID scheme, can be `UID`, `CODE`, `ATTRIBUTE:{ID}`. |

### Error handling { #error-handling } 

When running a data exchange by identifier, information about the outcome of the operation will be available in the response payload. The response will contain a list of import summaries, i.e. one import summary per source request. The import summary will indicate any potential conflicts as a result of data retrieval from the source instance and data import in the target instance.

### Příklady { #examples } 

#### External data exchange with identifier scheme code { #external-data-exchange-with-identifier-scheme-code } 

This example will demonstrate how to exchange data based on program indicators in the source DHIS 2 instance and data elements in the target instance. The `code` identifier scheme, which means the data exchange will use the `code` property on the metadata to reference the data. Using codes is useful when the ID properties don't match across DHIS 2 instances. The example will demonstrate how data can be aggregated in the source instance, including aggregation in time and the unit hierarchy, before being exchanged with the target instance.

The example will exchange data using the DHIS 2 play environment, and refer to the 2.39 version at `https://play.dhis2.org/2.39` as the *source instance*, and the 2.38 version at `https://play.dhis2.org/2.38.2.1` as the *target instance*. Note that the URLs will change over time as new patch versions are released, so make sure to update the target URLs.

* Log in to the **source** instance, navigate to the Maintenance app and observe that three program indicators exist.

  * _BCG doses_ with code `BCG_DOSE`
  * _Measles doses_ with code `MEASLES_DOSE` 
  * _Yellow fever doses_ with code `YELLOW_FEVER_DOSE`

* Observe that the root org unit is `Sierra Leone` with code `OU_525`.

* Log in to the **target** instance and navigate to the *Maintenance* app. Create three data elements, where the codes match the previously mentioned program indicators:

  * Name _BCG doses_ and code `BCG_DOSE`
  * Name _Measles doses_ and code `MEASLES_DOSE`
  * Name _Yellow fever doses_ with code `YELLOW_FEVER_DOSE`

* In the **target** instance, create a new data set with any name, e.g. _Data exchange_, select the tree newly created data elements, and assign the data set to the root org unit _Sierra Leone_.

* Observe that the root org unit `Sierra Leone` has the code `OU_525`, which is equal to the source instance.

* Open an HTTP tool such as _Postman_ and put together the following aggregate data exchange payload in JSON.
  ```
  POST /api/aggregateDataExchanges
  ```

  ```
  Content-Type: application/json
  ```

  ```json
  {
    "name": "Immunization doses program indicators to data elements",
    "source": {
      "requests": [
        {
          "name": "Immunization doses",
          "dx": [
            "BCG_DOSE",
            "MEASLES_DOSE",
            "YELLOW_FEVER_DOSE"
          ],
          "pe": [
            "202201"
          ],
          "ou": [
            "OU_525"
          ],
          "inputIdScheme": "code",
          "outputIdScheme": "code"
        }
      ]
    },
    "target": {
      "type": "EXTERNAL",
      "api": {
        "url": "https://play.dhis2.org/2.38.2.1",
        "username": "admin",
        "password": "district"
      },
      "request": {
        "idScheme": "code"
      }
    }
  }
  ```

* In this payload, observe that for the source request, program indicators are referred to using codes. The `inputIdScheme` is set to `code`, which means that the DHIS 2 analytics engine will use the `code` property to reference metadata, such as program indicators. The `outputIdScheme` is set to `code`, which means that the `code` property will be used to reference metadata in the output. For the target request, the `idScheme` is also set to `code`, which means that the `code` property will be used to reference metadata during the data value import. Note that ID schemes can be specified per entity type, such as `dataElementIdScheme` and `orgUnitIdScheme`. 

* Note that the period is `202201` or _January 2022_. Note that the period might have to be updated over time.

* Run the POST request to create the aggregate data exchange definition. Confirm that the API response status code is 201. Note that the name of the data exchange is unique. Take a note of the ID of the newly created object by looking at `response` > `uid` in the response body.

* Run the newly created data exchange with a POST request (replace `{id}` with the ID of the data exchange):
  ```
  POST /api/aggregateDataExchanges/{id}/exchange
  ```

* Confirm that the API response indicates that three data values were successfully imported. 
  ```json
  {
    "responseType": "ImportSummaries",
    "status": "SUCCESS",
    "imported": 3,
    "updated": 0,
    "deleted": 0,
    "ignored": 0
  }
  ```

* In the **target** instance, navigate to the *Data entry* app, select org unit _Sierra Leone_, data set _Data exchange_ and period _January 2022_. Observe that the exchanged data values are visible in the form.

To summarize, in this example, event data records were aggregated from the facility level to the national level in the org unit hierarchy and from event data to monthly data values using program indicators. The data values were exchanged with a target DHIS 2 instance by using the `code` property to reference metadata.



# I18n { #i18n } 

## Národní prostředí { #webapi_locales } 

DHIS2 podporuje překlady jak pro uživatelské rozhraní, tak pro obsah databáze.

### Uživatelské rozhraní Národního prostředí { #ui-locales } 

Dostupné národní prostředí pro uživatelské rozhraní můžete načíst pomocí následujícího zdroje s požadavkem GET. Jsou podporovány reprezentace prostředků XML a JSON.

    /api/33/locales/ui

### Národní prostředí obsahu databáze { #database-content-locales } 

You can retrieve and create locales for the database content with GET and POST requests through the `dbLocales` resource. XML and JSON resource representations are supported. To POST data, there are two required parameters: `country` and `language`. 

    /api/locales/dbLocales?country=US&language=en

## Překlady { #webapi_translations } 

DHIS2 allows for translations of database content. 
If a metadata is translatable, then it will have a `translations` property.

To znamená, že můžete načíst a aktualizovat překlady pomocí zdrojů třídy metadat, jako jsou `api/dataElements`, `api/organisationUnits`, `api/dataSets` atd.

### Získejte překlady { #get-translations } 

Překlady pro objekt metadat, jako je DataElement, můžete získat odesláním požadavku GET na `api/dataElements/{dataElementUID}`

Odpověď obsahuje úplné podrobnosti o prvku DataElement, který také zahrnuje vlastnost `translations`, jak je uvedeno níže

```json
{
  "id": "fbfJHSPpUQD",
  "href": "https://play.dhis2.org/dev/api/29/dataElements/fbfJHSPpUQD",
  "created": "2010-02-05T10:58:43.646",
  "name": "ANC 1st visit",
  "shortName": "ANC 1st visit",
  "translations": 
  [
    {
      "property": "SHORT_NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Soin prénatal 1"
    },
    {
      "property": "NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    }
  ]
}
```
You can also get only the `translations` property of an object by sending a GET request to 
`api/dataElements/{dataElementUID}/translations`

```json
{
  "translations": 
  [
    {
      "property": "SHORT_NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Soin prénatal 1"
    },
    {
      "property": "NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    }
  ]
}
```

### Create/Update translations { #createupdate-translations } 

You can create translations by sending a PUT request with same JSON format to `api/dataElements/{dataElementUID}/translations`

```json
{
  "translations": 
  [
    {
      "property": "SHORT_NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Soin prénatal 1"
    },
    {
      "property": "DESCRIPTION",
      "locale": "fr",
      "value": "description in french"
    },
    {
      "property": "FORM_NAME",
      "locale": "fr",
      "value": "name in french"
    }
  ]
}
```

Případně můžete také jen aktualizovat objekt pomocí užitečného zatížení včetně vlastnosti `translations`.

Odešlete požadavek PUT na `api/dataElements/{dataElementUID}` s úplným zatížením objektu, jak je uvedeno níže:

```json
{
  "id": "fbfJHSPpUQD",
  "created": "2010-02-05T10:58:43.646",
  "name": "ANC 1st visit",
  "shortName": "ANC 1st visit",
  "translations": 
  [
    {
      "property": "SHORT_NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Soin prénatal 1"
    },
    {
      "property": "NAME",
      "locale": "en_GB",
      "value": "ANC 1st visit"
    }
  ]
}
```

The status code will be `204 No Content` if the data value was successfully saved or updated, or `409 Conflict` if there was a validation error (e.g. more than one `SHORT_NAME` for the same `locale`).

Společné vlastnosti, které podporují překlady, jsou uvedeny v tabulce níže.

Tabulka: Názvy vlastností

| Název vlastnosti | Popis |
|---|---|
| název | Název objektu |
| shortName | Krátký název objektu |
| popis | Popis objektu |

Třídy, které podporují překlady, jsou uvedeny v tabulce níže.

Tabulka: Názvy tříd

| Název třídy | Popis | Další přeložitelné vlastnosti |
|---|---|---|
| DataElementCategoryOption | Možnost kategorie | |
| DataElementCategory | Kategorie | |
| DataElementCategoryCombo | Kombinace kategorií | |
| Datový prvek | Datový prvek | |
| DataElementGroup | Skupina datových prvků | |
| DataElementGroupSet | Sada skupin datových prvků | |
| Indikátor | Indikátor | numeratorDescription, denominatorDescription |
| IndicatorType | Typ indikátoru | |
| IndicatorGroup | Skupina indikátorů | |
| IndicatorGroupSet | Sada skupin indikátorů | |
| OrganisationUnit | Organizační jednotka | |
| OrganisationUnitGroup | Skupina organizační jednotky | |
| OrganisationUnitGroupSet | Sada skupin organizačních jednotek | |
| DataSet | Datová sada | |
| Sekce | Sekce datové sady | |
| ValidationRule | Pravidlo ověření | návod |
| ValidationRuleGroup | Skupina ověřovacích pravidel | |
| Program | Program | enrollmentDateLabel, incidentDateLabel |
| Fáze programu | Programová fáze | executionDateLabel, dueDateLabel |
| Atribut trasované entity | Atribut trasované entity | |
| TrackedEntity | Trasovaná entita | |
| Typ vztahu | Typ vztahu pro instance trasovaných entit | fromToName, toFromName |
| Sada možností | Sada možností | |
| Atribut | Atribut pro metadata | |
| ProgramNotificationTemplate | Šablona oznámení programu | subjectTemplate, messageTemplate |
| ValidationNotificationTemplate | Šablona oznámení o ověření | subjectTemplate, messageTemplate |
| DataSetNotificationTemplate | Šablona oznámení DataSet | subjectTemplate, messageTemplate |
| Vizualizace | Vizualizace | title, subtitle, rangeAxisLabel, baseLineLabel, targetLineLabel, domainAxisLabel |
| ProgramRuleAction | Akce programových pravidel | obsah |
| Prediktor | Prediktor | Name, ShortName, Description, Generator Description  |
| ValidationRule | ValidationRule | Název, Popis, Instrukce, Levý výraz, Pravý výraz |

## Internacionalizace { #webapi_i18n } 

Chcete-li načíst páry klíč-hodnota pro přeložené řetězce, můžete použít prostředek *i18n*.

    /api/33/i18n

Koncový bod je umístěn na */api/i18n* a formát požadavku je jednoduchá řada párů klíč-hodnota:

```json
[
  "access_denied",
  "uploading_data_notification"
]
```

Požadavek musí být typu *POST* a jako typ obsahu použít *application/json*. Příklad použití curl za předpokladu, že se data požadavku uloží jako soubor `keys.json`:

```bash
curl -d @keys.json "play.dhis2.org/demo/api/33/i18n" -X POST
  -H "Content-Type: application/json" -u admin:district
```

Výsledek bude vypadat takto:

```json
{
  "access_denied":"Přístup odepřen",
  "uploading_data_notification":"Nahrávání lokálně uložených dat na server"
}
```





# SMS { #sms } 

## Short Message Service (SMS) { #webapi_sms } 

This section covers the SMS Web API for sending and receiving short text
messages.

### Odchozí služba SMS { #outbound-sms-service } 

The Web API supports sending outgoing SMS using the POST method. SMS can
be sent to single or multiple destinations. One or more gateways need
to be configured before using the service. An SMS will not be sent if
there is no gateway configured. It needs a set of recipients and
message text in JSON format as shown below.

    /api/sms/outbound

```json
{
  "message":"Sms Text",
  "recipients": [
    "004712341234",
    "004712341235"
  ]
}
```

> **Poznámka**
>
> Seznam příjemců bude rozdělen, pokud `MAX_ALLOWED_RECIPIENTS` překročí limit 200.

The Web API also supports a query parameter version, but the
parameterized API can only be used for sending SMS to a single
destination.

    /api/sms/outbound?message=text&recipient=004712341234

Odchozí zprávy lze načíst pomocí prostředku GET.

    GET /api/sms/outbound
    GET /api/sms/outbound?filter=status:eq:SENT
    GET /api/sms/outbound?filter=status:eq:SENT&fields=*

Odchozí zprávy lze odstranit pomocí prostředku DELETE.

    DELETE /api/sms/outbound/{uid}
    DELETE /api/sms/outbound?ids=uid1,uid2

#### Kódy odezvy brány { #gateway-response-codes } 

Brána může reagovat s následujícími kódy odpovědí.



Tabulka: Kódy odezvy brány

| Kód odezvy | Zpráva s odpovědí | Detailní popis |
|---|---|---|
| RESULT_CODE_0 | success | Zpráva byla úspěšně odeslána |
| RESULT_CODE_1 | scheduled | Zpráva byla úspěšně naplánována |
| RESULT_CODE_22 | internal fatal error | Vnitřní fatální chyba |
| RESULT_CODE_23 | authentication failure | Ověřovací údaje jsou nesprávné |
| RESULT_CODE_24 | data validation failed | Parametry uvedené v požadavku jsou nesprávné |
| RESULT_CODE_25 | insufficient credits | Kredit nestačí k odeslání zprávy |
| RESULT_CODE_26 | upstream credits not available | Upstream kredity nejsou k dispozici |
| RESULT_CODE_27 | exceeded your daily quota | Překročili jste svou denní kvótu |
| RESULT_CODE_40 | temporarily unavailable | Služba je dočasně mimo provoz |
| RESULT_CODE_201 | maximum batch size exceeded | Překročena maximální velikost dávky |
| RESULT_CODE_200 | success | Žádost byla úspěšně dokončena |
| RESULT_CODE_202 | accepted | Zpráva(y) budou zpracovány |
| RESULT_CODE_207 | multi-status | Do rozhraní API byla odeslána více než jedna zpráva; ne všechny zprávy však mají stejný stav |
| RESULT_CODE_400 | bad request | Selhání ověření (například chybějící / neplatné parametry nebo záhlaví) |
| RESULT_CODE_401 | unauthorized | Selhání autentizace. To může být také způsobeno nastavením uzamčení IP |
| RESULT_CODE_402 | payment required | Nedostatek kreditu k odeslání zprávy |
| RESULT_CODE_404 | not found | Zdroj neexistuje |
| RESULT_CODE_405 | method not allowed | Metoda HTTP není na zdroji podporována |
| RESULT_CODE_410 | gone | Mobilní číslo je blokováno |
| RESULT_CODE_429 | too many requests | Obecná chyba omezení četnosti |
| RESULT_CODE_503 | service unavailable | Na naší platformě došlo k dočasné chybě – zkuste to prosím znovu |

### Služba příchozích SMS { #inbound-sms-service } 

The Web API supports collecting incoming SMS messages using the POST
method. Incoming messages routed towards the DHIS2 Web API can be
received using this API. The API collects inbound SMS messages and
provides it to listeners for parsing, based on the SMS content (SMS
Command). An example payload in JSON format is given below. Text,
originator, received date and sent date are mandatory parameters. The
rest are optional but the system will use the default value for these
parameters.

    /api/sms/inbound

```json
{
  "text": "sample text",
  "originator": "004712341234",
  "gatewayid": "unknown",
  "receiveddate": "2016-05-01",
  "sentdate": "2016-05-01",
  "smsencoding": "1",
  "smsstatus": "1"
}
```

Příchozí zprávy lze načíst pomocí prostředku GET 

    GET /api/sms/inbound
    GET /api/sms/inbound?fields=*&filter=smsstatus=INCOMING

Příchozí zprávy lze odstranit pomocí prostředku DELETE

    DELETE /api/sms/inbound/{uid}
    DELETE /api/sms/inbound?ids=uid1,uid2

Chcete-li importovat všechny nepřečtené zprávy

    POST /api/sms/inbound/import



Tabulka: Parametry dotazu uživatele

| Parametr | Typ | Popis |
|---|---|---|
| message | Řetězec | Toto je povinný parametr, který nese skutečnou textovou zprávu. |
| originator | Řetězec | Toto je povinný parametr, který ukazuje, od koho byla tato zpráva skutečně odeslána. |
| gateway | Řetězec | Toto je volitelný parametr, který udává ID brány. Pokud není uveden, bude uložen výchozí text „NEZNÁMÝ“. |
| receiveTime | Datum | Toto je volitelný parametr. Je to časové razítko, ve kterém byla zpráva přijata na bráně. |

### Správa služby brány { #gateway-service-administration } 

The Web API exposes resources which provide a way to configure and
update SMS gateway configurations.

The list of different gateways configured can be retrieved using a GET
method.

    GET /api/33/gateways

Configurations can also be retrieved for a specific gateway type using
GET method.

    GET /api/33/gateways/{uid}

New gateway configurations can be added using POST. POST api requires type request parameter and currently its value can have either one *http,bulksms,clickatell,smpp*. First added gateway will be set to default. Only one gateway is allowed to be default at one time. Default gateway can only be changed through its api. If default gateway is removed then the next one the list will automatically becomes default.

    POST /api/33/gateways

Konfiguraci lze aktualizovat poskytnutím konfigurací uid a gateway, jak je uvedeno níže

    PUT /api/33/gateways/{uids}

Configurations can be removed for specific gateway type using DELETE
method.

    DELETE /api/33/gateways/{uid}

Výchozí bránu lze načíst a aktualizovat.

    GET /api/33/gateways/default

Výchozí bránu lze nastavit pomocí metody PUT.

    PUT /api/33/gateways/default/{uid}

### Konfigurace brány { #gateway-configuration } 

Webové rozhraní API umožňuje vytvářet a aktualizovat konfigurace brány. Pro každý typ brány jsou v zátěži JSON různé parametry. Níže jsou uvedeny příklady užitečných zatížení JSON pro jednotlivé brány. Pro vytvoření konfigurace se používá POST a pro aktualizaci PUT. Parametr hlavičky lze použít v případě brány GenericHttpGateway k odeslání jednoho nebo více parametrů jako hlavičky http.

#### Clickatell { #clickatell } 

```json
{
  "type": "clickatell",
  "name": "clickatell",
  "username": "clickatelluser",
  "authToken": "XXXXXXXXXXXXXXXXXXXX",
  "urlTemplate": "https://platform.clickatell.com/messages"
}
```

#### Bulksms { #bulksms }

```json
{
  "type": "bulksms",
  "name": "bulkSMS",
  "username": "bulkuser",
  "password": "abc123"
}
```

#### SMPP Brána { #smpp-gateway } 

```json
{
  "type": "smpp",
  "name": "smpp gateway2",
  "systemId": "smppclient1",
  "host": "localhost",
  "systemType": "cp",
  "numberPlanIndicator": "UNKNOWN",
  "typeOfNumber": "UNKNOWN",
  "bindType": "BIND_TX",
  "port": 2775,
  "password": "password",
  "compressed": false
}
```

#### Obecný HTTP { #generic-http } 

```json
{
  "type": "http",
  "name": "Generic",
  "configurationTemplate": "username=${username}&password=${password}&to=${recipients}&countrycode=880&message=${text$}&messageid=0",
  "useGet": false,
  "sendUrlParameters": false,
  "contentType": "APPLICATION_JSON",
  "urlTemplate": "https://samplegateway.com/messages",
  "parameters": [
    {
      "header": true,
      "encode": false,
      "key": "username",
      "value": "user_uio",
      "confidential": true
    },
    {
      "header": true,
      "encode": false,
      "key": "password",
      "value": "123abcxyz",
      "confidential": true
    },
    {
      "header": false,
      "encode": false,
      "key": "deliveryReport",
      "value": "yes",
      "confidential": false
    }
  ],
  "isDefault": false
}
```

V obecné bráně http lze přidat libovolný počet parametrů.



Tabulka: Obecné parametry SMS brány

| Parametr | Typ | Popis |
|---|---|---|
| název | Řetězec | název brány |
| configurationTemplate | Řetězec | Šablona konfigurace, která se naplní hodnotami parametrů. Například výše uvedená konfigurační šablona bude vyplněna takto { "to": "+27001234567", "body": "Hello World!"} |
| useGet | Boolean | Ve výchozím nastavení bude použita metoda POST Http. Chcete-li to změnit a Http GET, může uživatel nastavit příznak useGet na true. |
| contentType | Řetězec | Typ obsahu určete, jaký typ dat se odesílá. Podporované typy jsou APPLICATION_JSON, APPLICATION_XML, FORM_URL_ENCODED, TEXT_PLAIN |
| urlTemplate | Řetězec | Šablona adresy URL |
| header | Boolean | Pokud je třeba odeslat parametr v hlavičkách HTTP |
| encode | Boolean | Pokud je třeba parametr zakódovat |
| key | Řetězec | parameter key |
| value | Řetězec | parameter value |
| confidential | Boolean | Pokud je parametr důvěrný. Tento parametr nebude vystaven prostřednictvím API |
| sendUrlParameters | Boolean | Pokud je tento příznak zaškrtnutý, lze k urlTemplate přidat parametry dotazu. To je užitečné, pokud rozhraní API brány podporuje pouze HTTP GET. Ukázková šablona url vypadá takto  `"urlTemplate":"https://samplegateway.com/messages?apiKey={apiKey}&to={recipients},content={text},deliveryreport={dp}"` |

HTTP.OK will be returned if configurations are saved successfully otherwise *Error*

## SMS příkazy { #webapi_sms_commands } 

SMS commands are being used to collect data through SMS. These commands
belong to specific parser type. Each parser has different functionality.

Seznam příkazů lze vyvolat pomocí GET.

    GET /api/smsCommands

Jeden konkrétní příkaz lze načíst pomocí GET.

    GET /api/smsCommands/uid

Jeden konkrétní příkaz lze aktualizovat pomocí PUT.

    PUT /api/smsCommands/uid

Příkaz lze vytvořit pomocí POST.

    POST /api/smsCommands

Jeden konkrétní příkaz lze odstranit pomocí DELETE.

    DELETE /api/smsCommands/uid

#### Typy příkazů SMS { #sms-command-types } 

| Typ | Používání |
|---|---|
|KEY_VALUE_PARSER | Pro agregovaný sběr dat.|
|ALERT_PARSER | Odesílání výstražných zpráv.|
|UNREGISTERED_PARSER | Pro hlášení případů dozoru nad chorobami.|
|TRACKED_ENTITY_REGISTRATION_PARSER | Pro registraci entity trasovače.|
|PROGRAM_STAGE_DATAENTRY_PARSER | Sběr dat pro programovou fázi. (TEI je identifikován na základě phoneNumner)|
|EVENT_REGISTRATION_PARSER | Registrace jednotlivé události. Používá se pro programy událostí.|

#### Typy příkazů SMS pro Android { #sms-command-types-for-android } 

Tyto typy příkazů může aplikace pro Android používat k odesílání dat pomocí SMS, když není k dispozici internet. SMS se skládá z aplikace pro Android.

| Typ | Používání |
|---|---|
|AGGREGATE_DATASET | Pro agregovaný sběr dat.|
|ZÁPIS | Pro registraci entity trasovače.|
|TRACKER_EVENT | Registrace události pro programy sledování.|
|SIMPLE_EVENT | Registrace události pro programy událostí.|
|VZTAH | Vytvářet vztahy.|
|SMAZAT | Smazat událost.|



# Uživatelé { #users } 

## Uživatelé { #webapi_users } 

Tato část popisuje metody uživatelských prostředků.

    /api/users

### Databázový dotaz uživatele { #webapi_users_query } 

The *users* resource offers additional query parameters beyond the
standard parameters (e.g. paging). To query for users at the users
resource you can use the following parameters.

Tabulka: Parametry dotazu uživatele

| Parametr | Typ | Popis |
|---|---|---|
| query | Text | Hodnota dotazu na jméno, příjmení, uživatelské jméno a e-mail, nerozlišují se malá a velká písmena. |
| phoneNumber | Text | Dotaz na telefonní číslo. |
| canManage | false &#124; true | Filtrujte, zda aktuální uživatel může spravovat vrácené uživatele prostřednictvím vztahů spravovaných skupin uživatelů. |
| authSubset | false &#124; true | Filtrujte, zda mají vrácení uživatelé podmnožinu oprávnění aktuálního uživatele. |
| lastLogin | Datum | Filtrujte uživatele, kteří se přihlásili později než k danému datu. |
| inactiveMonths | Číslo | Filtrujte uživatele, kteří se daný počet měsíců nepřihlásili. |
| inactiveSince | Datum | Filtrujte uživatele, kteří se nepřihlásili později než k danému datu. |
| selfRegistered | false &#124; true | Filtrujte uživatele, kteří si sami zaregistrovali svůj uživatelský účet. |
| invitationStatus | žádné &#124; vše &#124; platnost vypršela | Filtrujte pozvánky uživatelů, včetně všech pozvánek nebo pozvánek, jejichž platnost vypršela. |
| ou | Identifikátor | Filtrujte uživatele, kteří jsou přidruženi k organizační jednotce s daným identifikátorem. |
| userOrgUnits | false &#124; true | Filtrujte uživatele, kteří jsou přidruženi k organizačním jednotkám propojeným s aktuálně přihlášeným uživatelem. |
| includeChildren | false &#124; true | Zahrnuje uživatele ze všech podřízených organizačních jednotek parametru ou. |
| strana | Číslo | Číslo stránky. |
| pageSize | Číslo | Velikost stránky. |
| orgUnitBoundary | data_capture &#124; data_output &#124; tei_search | Restrict search to users having a common organisation unit with the current user for the given boundary        |

A query for max 10 users with "konan" as first name or surname (case
in-sensitive) who have a subset of authorities compared to the current
user:

    /api/users?query=konan&authSubset=true&pageSize=10

Chcete-li načíst všechny uživatelské účty, které byly původně samoregistrované:

```
/api/users?selfRegistered=true
```

#### User query by identifier { #user-query-by-identifier } 

Úplné informace o uživateli s konkrétním identifikátorem můžete získat pomocí následující syntaxe.

```
/api/users/{id}
```

Příklad konkrétního identifikátoru vypadá takto:

```
/api/users/OYLGMiazHtW
```

### Vyhledávání uživatelů { #user-lookup } 

The user lookup API provides an endpoint for retrieving users where the
response contains a minimal set of information. It does not require a
specific authority and is suitable  for allowing clients to look up information
such as user first and surname,  without exposing potentially sensitive
user information.

```
/api/userLookup
```

Koncový bod vyhledávání uživatelů má dvě metody.

#### Vyhledání uživatele podle identifikátoru { #user-lookup-by-identifier } 

Vyhledávání uživatelů podle identifikátoru můžete provést pomocí následujícího požadavku API.

```
GET /api/userLookup/{id}
```

The user `id` will be matched against the following user properties
in the specified order:

- UID
- UUID
- uživatelské jméno

Příklad požadavku vypadá takto:

```
/api/userLookup/QqvaU7JjkUV
```

Odpověď bude obsahovat minimální informace o uživateli.

```json
{
  "id": "QqvaU7JjkUV",
  "username": "nkono",
  "firstName": "Thomas",
  "surname": "Nkono",
  "displayName": "Thomas Nkono"
}
```

#### Vyhledávací dotaz uživatele { #user-lookup-query } 

Můžete vytvořit dotaz pro uživatele pomocí následujícího požadavku API.

```
GET /api/userLookup?query={string}
```

The `query` request parameter is mandatory. The query `string` will be matched
against the following user properties:

- Jméno
- Příjmení
- E-mail
- Uživatelské jméno

In addition to the `query` parameter the search can be restricted by the
`orgUnitBoundary` parameter as described in table of parameters for users above.

Příklad požadavku vypadá takto:

```
/api/userLookup?query=John
```

Odpověď bude obsahovat informace o uživatelích odpovídajících požadavku.

```json
{
  "users": [
    {
      "id": "DXyJmlo9rge",
      "username": "jbarnes",
      "firstName": "John",
      "surname": "Barnes",
      "displayName": "John Barnes"
    },
    {
      "id": "N3PZBUlN8vq",
      "username": "jkamara",
      "firstName": "John",
      "surname": "Kamara",
      "displayName": "John Kamara"
    }
  ]
}
```

### Vytvoření a aktualizace uživatelského účtu { #webapi_users_create_update } 

Creating and updating users are supported through the API. A basic
payload to create a user looks like the below example. Note that the password
will be sent in plain text so remember to enable SSL/HTTPS for network transport.

```json
{
  "id": "Mj8balLULKp",
  "firstName": "John",
  "surname": "Doe",
  "email": "johndoe@mail.com",
  "userCredentials": {
    "id": "lWCkJ4etppc",
    "userInfo": {
      "id": "Mj8balLULKp"
    },
    "username": "johndoe123",
    "password": "Your-password-123",
    "skype": "john.doe",
    "telegram": "joh.doe",
    "whatsApp": "+1-541-754-3010",
    "facebookMessenger": "john.doe",
    "avatar": {
      "id": "<fileResource id>"
    },
    "userRoles": [
      {
        "id": "Ufph3mGRmMo"
      }
    ]
  },
  "organisationUnits": [
    {
      "id": "Rp268JB6Ne4"
    }
  ],
  "userGroups": [
    {
      "id": "wl5cDMuUhmF"
    }
  ]
}
```

```bash
curl -X POST -d @u.json "http://server/api/33/users" -u user:pass
  -H "Content-Type: application/json"
```

In the user creation payload, user groups are only supported when importing
or *POSTing* a single user at a time. If you attempt to create more than one
user while specifiying user groups, you will not recieve an error and the
users will be created but no user groups will be assigned. This is by design
and is limited because of the many-to-many relationship between users and
user groups whereby user groups is the owner of the relationship. To update
or create mulitple users and their user groups, consider a program to *POST*
one at a time, or *POST* all users followed by another action to
update their user groups while specifiying the new user's identifiers.

When creating a user the payload may also contain user settings.
These are added as `settings` object to the root object.
Each key-value pair becomes a member in the `settings` object, for example:
```json
{
    "id": "Mj8balLULKp",
    "firstName": "John",
    "surname": "Doe",
    "settings": {
        "keyUiLocale": "de"
    },
    //...
}
```

After the user is created, a *Location* header is sent back with the
newly generated ID (you can also provide your own using the `/api/system/id`
endpoint). The same payload can then be used to do updates, but remember
to then use *PUT* instead of *POST* and the endpoint is now `/api/users/ID`.

```bash
curl -X PUT -d @u.json "http://server/api/33/users/ID" -u user:pass
  -H "Content-Type: application/json"
```

Další informace o úplném dostupném datovém obsahu najdete na `/api/schemas/user`.

For more info about uploading and retrieving user avatars, please see the
`/fileResources` endpoint.

### Pozvánky uživatelských účtů { #webapi_user_invitations } 

The Web API supports inviting people to create user accounts through the
`invite` resource. To create an invitation you should POST a user in XML
or JSON format to the invite resource. A specific username can be forced
by defining the username in the posted entity. By omitting the username,
the person will be able to specify it herself. The system will send out
an invitation through email. This requires that email settings have been
properly configured.

The invite resource is useful in order to securely
allow people to create accounts without anyone else knowing the password
or by transferring the password in plain text. The payload to use for
the invite is the same as for creating users. An example payload in JSON
looks like this:

```json
{
  "firstName": "John",
  "surname": "Doe",
  "email": "johndoe@mail.com",
  "userCredentials": {
    "username": "johndoe",
    "userRoles": [{
      "id": "Euq3XfEIEbx"
    }]
  },
  "organisationUnits": [ {
    "id": "ImspTQPwCqd"
  } ],
  "userGroups": [ {
    "id": "vAvEltyXGbD"
  }]
}
```

Entitu pozvání uživatele lze zveřejnit takto:

```bash
curl -d @invite.json "localhost/api/33/users/invite" -u admin:district
  -H "Content-Type:application/json"
```

To send out invites for multiple users at the same time you must use a
slightly different format. For JSON:

```json
{
  "users": [ {
    "firstName": "John",
    "surname": "Doe",
    "email": "johndoe@mail.com",
    "userCredentials": {
      "username": "johndoe",
      "userRoles": [ {
        "id": "Euq3XfEIEbx"
      } ]
    },
    "organisationUnits": [ {
      "id": "ImspTQPwCqd"
      } ]
    }, {
    "firstName": "Tom",
    "surname": "Johnson",
    "email": "tomj@mail.com",
    "userCredentials": {
      "userRoles": [ {
        "id": "Euq3XfEIEbx"
      } ]
    },
    "organisationUnits": [ {
      "id": "ImspTQPwCqd"
      } ]
    }
  ]
}
```

To create multiple invites you can post the payload to the
api/users/invites resource like this:

```bash
curl -d @invites.json "localhost/api/33/users/invites" -u admin:district
  -H "Content-Type:application/json"
```

There are certain requirements for user account invitations to be sent
out:

  - E-mailový server SMTP musí být na serveru správně nakonfigurován.

  - Uživatel, který má být pozván, musí zadat platný e-mail.

  - If username is specified it must not be already taken by another
    existing user.

Pokud některý z těchto požadavků není splněn, vrátí se zdroj pozvánky
se stavovým kódem *409 Konflikt* spolu s popisnou zprávou.

### User account confirm invite (Experimental) { #webapi_user_confirm_invite }

> **Important**  
> Before confirming an invitation, an admin user should have set up the User and sent an invitation link. That prerequisite also adds some required data in the `userinfo` database table (`idToken`, `restoreToken`, `restoreExpiry`) for that user, in order to complete the invite.

A user can confirm an invitation through the following endpoint:  
`POST` `/api/auth/invite`  
with `JSON` body:

```json
{
    "username": "TestUser",
    "firstName": "Test",
    "surname": "User",
    "password": "Test123!",
    "email": "test@test.com",
    "phoneNumber": "123456789",
    "g-recaptcha-response": "recaptchaResponse",
    "token": "aWRUb2tlbjpJRHJlc3RvcmVUb2tlbg=="
}
```

> **Note**  
> The `g-recaptcha-response` value would be populated through the use of the core Login App UI normally.  
> The `token` field expects a Base64-encoded value. In this example, decoded, it's `idToken:IDrestoreToken`. This would be sent by email to the invited user (it is actually created internally (and populated in the database) during the `/api/users/invite` operation).

Successful response looks like:  

```json
{
    "httpStatus": "OK",
    "httpStatusCode": 200,
    "status": "OK",
    "message": "Account updated"
}
```

### User account registration (Experimental) { #webapi_user_registration }
A user can register directly through the following endpoint:  
`POST` `/api/auth/registration` with `JSON` body:  

```json
{
    "username": "testSelfReg",
    "firstName": "test",
    "surname": "selfReg",
    "password": "P@ssword123",
    "email": "test@test.com",
    "phoneNumber": "12345oooo",
    "g-recaptcha-response": "recap response"
}

```

A successful response looks like:  

```json
{
    "httpStatus": "Created",
    "httpStatusCode": 201,
    "status": "OK",
    "message": "Account created"
}
```

### User forgot password (Experimental) { #webapi_user_forgot_password }

This endpoint is used to trigger the forgotten password flow. It can be triggered by supplying the username or email of the user whose password needs resetting.  
`POST` `/api/auth/forgotPassword` with `JSON` body:  

```json
{
    "emailOrUsername": "testUsername1"
}
```

A successful response returns an empty `200 OK`. This should trigger an email to be sent to the user which allows them to reset their password.

### User password reset (Experimental) { #webapi_user_password_reset }

Once a user has received an email with a link to reset their password, it will contain a token which can be used to reset their password.  
`POST` `/api/auth/passwordReset` with `JSON` body:  

```json
{
    "newPassword": "ChangeMe123!",
    "resetToken": "token-value-from-email-link"
}
```

A successful response returns an empty `200 OK`. The user should now be able to log in using the new password.


### Replikace uživatele { #webapi_user_replication }

Chcete-li replikovat uživatele, můžete použít prostředek *replica*. Replikace uživatele může být užitečná při ladění nebo reprodukci problémů nahlášených konkrétním uživatelem. Pro replikovaného uživatele musíte zadat nové uživatelské jméno a heslo, které později použijete k ověření. Všimněte si, že k provedení této akce potřebujete autoritu ALL. Chcete-li replikovat uživatele, můžete odeslat datový obsah JSON, který vypadá jako níže:

```json
{
  "username": "user_replica",
  "password": "SecretPassword"
}
```

This payload can be posted to the replica resource, where you provide
the identifier of the user to replicate in the URL:

    /api/33/users/<uid>/replica

Příklad replikace uživatele pomocí curl vypadá takto:

```bash
curl -d @replica.json "localhost/api/33/users/N3PZBUlN8vq/replica"
  -H "Content-Type:application/json" -u admin:district
```

### Resetovat uživatelské heslo { #webapi_user_reset }

User administrators (with appropriate rights) can reset another user's account
by triggering password recovery. Once triggered an email is sent to the user
containing a recovery link. Users following the link get to a form which allows
to set a new password.

Chcete-li spustit tento pracovní postup pro uživatele `tH7WIiIJ0O3`, použijte:

    POST /api/37/users/tH7WIiIJ0O3/reset

### Disable and enable user accounts { #webapi_user_disable } 

User accounts can be marked disabled.
A disabled user can no longer log in.

Chcete-li označit uživatele s UID `tH7WIiIJ0O3` jako zakázané použití (vyžaduje uživatele s příslušnými právy):

    POST /api/36/users/tH7WIiIJ0O3/disabled

Chcete-li znovu povolit vypnutého uživatele, udělejte to odpovídajícím způsobem (vyžaduje uživatele s příslušnými právy):

    POST /api/36/users/tH7WIiIJ0O3/enabled

### User expiration { #webapi_user_expiration } 

An expiration date can be set for an user account.
It marks the point in time from which the user account has expired 
and can no longer be used. Expired user can no longer log in.

To update the expiration date of user with UID `tH7WIiIJ0O3` 
and set it to the date `2021-01-01` use (requires user with appropriate rights):

    POST /api/36/users/tH7WIiIJ0O3/expired?date=2021-01-01

To unset the expiration date so that the account never expires 
use accordingly (requires user with appropriate rights):

    POST /api/36/users/tH7WIiIJ0O3/unexpired

### User data approval workflows { #user-data-approval-workflows } 

To see which data approval workflows and levels a user may access,
you can use the *dataApprovalWorkflows* resource as follows:

```
GET /api/users/{id}/dataApprovalWorkflows
```

### Switching between user accounts connected to the same identity provider account { #switching-between-user-accounts-connected-to-the-same-identity-provider-account } 

If [linked accounts are enabled in dhis.conf](../../../manage/performing-system-administration/dhis-core-version-master/installation.html#connecting-a-single-identity-provider-account-to-multiple-dhis2-accounts) and a user has logged in via OIDC, then it is possible for the user to switch between DHIS2 accounts that are linked to the same identity provider account using this API call:

```
GET /dhis-web-commons-security/logout.action?current={current_username}&switch={username_to_switch_to}
```

This has the effect of signing out the current user and signing in the new user. It looks seamless as it is happening, except that the new user ends up on the default page of the DHIS2 instance.

Note that this API call will likely change in the future, but its general function will remain the same.

To see a list of users that can be switched to, use this API call:

```
GET /api/account/linkedAccounts
```

## Aktuální informace o uživateli { #webapi_current_user_information } 

In order to get information about the currently authenticated user and
its associations to other resources you can work with the *me* resource
(you can also refer to it by its old name *currentUser*). The current
user related resources gives your information which is useful when
building clients for instance for data entry and user management. The
following describes these resources and their purpose.

Provides basic information about the user that you are currently logged
in as, including username, user credentials, assigned organisation
units:

    /api/me

Poskytuje informace o aktuálně nepřečtených zprávách a interpretacích:

    /api/me/dashboard

In order to change password, this end point can be used to validate
newly entered password. Password validation will be done based on
PasswordValidationRules configured in the system. This end point support
POST and password string should be sent in POST body.

    /api/me/validatePassword

While changing password, this end point (support POST) can be used to
verify old password. Password string should be sent in POST body.

    /api/me/verifyPassword

Vrátí sadu oprávnění udělených aktuálnímu uživateli:

    /api/me/authorization

Returns true or false, indicating whether the current user has been
granted the given `<auth>` authorization:

    /api/me/authorization/<auth>

Poskytuje úrovně schválení dat, které jsou relevantní pro aktuálního uživatele:

    /api/me/dataApprovalLevels

Gives the data approval workflows which are accessible to the current user.
For each workflow, shows which data approval levels the user may see, and
what permissions they have at each level:

    /api/me/dataApprovalWorkflows



# Nastavení a konfigurace { #settings-and-configuration } 

## Nastavení systému { #webapi_system_settings } 

You can manipulate system settings by interacting with the
*systemSettings* resource. A system setting is a simple key-value pair,
where both the key and the value are plain text strings. To save or
update a system setting you can make a *POST* request to the following URL:

    /api/33/systemSettings/my-key?value=my-val

Alternatively, you can submit the setting value as the request body,
where content type is set to "text/plain". As an example, you can use
curl like this:

```bash
curl "play.dhis2.org/demo/api/33/systemSettings/my-key" -d "My long value"
  -H "Content-Type: text/plain" -u admin:district
```

To set system settings in bulk you can send a JSON object with a
property and value for each system setting key-value pair using a POST request:

```json
{
  "keyApplicationNotification": "Welcome",
  "keyApplicationIntro": "DHIS2",
  "keyApplicationFooter": "Read more at dhis2.org"
}
```

Translations for translatable Setting keys can be set by specifying locale as
a query parameter and translated value which can be specified
either as a query param or withing the body payload. See an example URL:

    /api/33/systemSettings/<my-key>?locale=<my-locale>&value=<my-translated-value>

You should replace my-key with your real key and my-val with your real
value. To retrieve the value for a given key (in JSON or plain text)
you can make a *GET* request to the following URL:

    /api/33/systemSettings/my-key

Alternativně můžete zadat klíč jako parametr dotazu:

    /api/33/systemSettings?key=my-key

If a key is not found or marked confidential then a `404` response will be returned like so:

```json
{
    "httpStatus": "Not Found",
    "httpStatusCode": 404,
    "status": "ERROR",
    "message": "Setting does not exist or is marked as confidential",
    "errorCode": "E1005"
}
```

You can retrieve specific system settings as JSON by repeating the key
query parameter:

```bash
curl "play.dhis2.org/demo/api/33/systemSettings?key=keyApplicationNotification&key=keyApplicationIntro"
  -u admin:district
```

Všechna nastavení systému můžete načíst pomocí požadavku GET:

    /api/33/systemSettings

To retrieve a specific translation for a given translatable key you can specify
a locale as query param:

    /api/33/systemSettings/<my-key>?locale=<my-locale>

If present, the translation for the given locale is returned. Otherwise, a default
value is returned. If no locale is specified for the translatable key, the user default
UI locale is used to fetch the correct translation. If the given translation is not
present, again, the default value is returned.

Priorita překladatelných klíčů je následující:

    zadané národní prostředí > národní prostředí uživatelského rozhraní výchozího uživatele > výchozí hodnota

To delete a system setting, you can make a *DELETE* request to the URL
similar to the one used above for retrieval. If a translatable key is
used, all present translations will be deleted as well.

Chcete-li odstranit pouze konkrétní překlad přeložitelného klíče, měla by se použít stejná adresa URL jako pro přidání překladu a měla by být uvedena prázdná hodnota:

    /api/33/systemSettings/<my-key>?locale=<my-locale>&value=

Dostupná nastavení systému jsou uvedena níže.

Tabulka: Nastavení systému

| Klíč | Popis | Přeložitelný |
|---|---|---|
| keyUiLocale | Národní prostředí pro uživatelské rozhraní | Ne |
| keyDbLocale | Národní prostředí pro databázi | Ne |
| keyAnalysisDisplayProperty | Vlastnost, která se má zobrazit v analýze. Výchozí: "jméno" | Ne |
| keyAnalysisDigitGroupSeparator | Oddělovač slouží k oddělení skupin číslic | Ne |
| keyCurrentDomainType | Zatím nepoužívané | Ne |
| keyTrackerDashboardLayout | Používá se k zachycení trackeru | Ne |
| applicationTitle | Název aplikace. Výchozí: „DHIS2“ | Ano |
| keyApplicationIntro | Úvod do aplikace | Ano |
| keyApplicationNotification | Oznámení aplikace | Ano |
| keyApplicationFooter | Zápatí aplikace vlevo | Ano |
| keyApplicationRightFooter | Zápatí aplikace vpravo | Ano |
| keyFlag | Příznak aplikace | Ne |
| keyFlagImage | Příznak použitý v nabídce ovládacího panelu | Ne |
| startModule | Úvodní stránka aplikace. Výchozí: "dhis-web-dashboard-integration" | Ne |
| startModuleEnableLightweight | Aplikace pro úvodní stránku k vykreslení odlehčené vstupní stránky. Výchozí: "false" | Ne |
| factorDeviation | Faktor standardní odchylky analýzy dat. Výchozí: "2d" | Ne |
| keyEmailHostName | Název hostitele e-mailového serveru | Ne |
| keyEmailPort | Port e-mailového serveru | Ne |
| keyEmailTls | Použijte TLS. Výchozí: "true" | Ne |
| keyEmailSender | Odesílatel e-mailu | Ne |
| keyEmailUsername | Uživatelské jméno e-mailového serveru | Ne |
| keyEmailPassword | Heslo k e-mailovému serveru | Ne |
| minPasswordLength | Minimální délka hesla | Ne |
| maxPasswordLength | Maximální délka hesla | Ne |
| keySmsSetting | Konfigurace SMS | Ne |
| keyCacheStrategy | Strategie mezipaměti. Výchozí: „CACHE_6AM_TOMORROW“ | Ne |
| keyCacheability | PUBLIC nebo PRIVATE. Určuje, zda mají proxy servery povoleno ukládat data do mezipaměti nebo ne. | Ne |
| phoneNumberAreaCode | Předčíslí telefonního čísla | Ne |
| multiOrganisationUnitForms | Povolit formuláře s více organizacemi. Výchozí: "false" | Ne |
| keyConfig || Ne |
| keyAccountRecovery | Povolit obnovení uživatelského účtu. Výchozí: "false" | Ne |
| keyLockMultipleFailedLogins | Povolit uzamčení přístupu po více neúspěšných přihlášeních | Ne |
| googleAnalyticsUA | Klíč Google Analytic UA pro sledování používání webu | Ne |
| credentialsExpires | Vyžadovat změnu hesla uživatelského účtu. Výchozí: "0" (nikdy) | Ne |
| credentialsExpiryAlert | Povolit upozornění, když se pověření blíží datu vypršení platnosti | Ne |
| credentialsExpiresReminderInDays | Number of days the credential expiry alert should be send in advance of the actual expiry. Default: 28 | Ne |
| accountExpiryAlert | Odeslat e-mail s upozorněním uživatelům, jejichž účet brzy vyprší kvůli nastavenému datu vypršení platnosti. Výchozí: "false" | Ne |
| accountExpiresInDays | Počet dní, po které by mělo být upozornění na vypršení platnosti účtu odesláno před skutečným vypršením platnosti. Výchozí: 7 | Ne |
| keySelfRegistrationNoRecaptcha | Nevyžadujte recaptcha pro vlastní registraci. Výchozí: "false" | Ne |
| recaptchaSecret | Tajemství recaptcha rozhraní Google API. Výchozí: tajné API instance dhis2 play, ale to bude fungovat pouze na vaší místní instanci a ne ve výrobě. | Ne |
| recaptchaSite | Web Google API pro recaptcha. Výchozí: dhis2 play instance API site, ale to bude fungovat pouze na vaší místní instanci a ne v produkci. | Ne |
| keyCanGrantOwnUserAuthorityGroups | Povolit uživatelům udělovat vlastní uživatelské role. Výchozí: "false" | Ne |
| keySqlViewMaxLimit | Maximální limit pro zobrazení SQL | Ne |
| keyRespectMetaDataStartEndDatesInAnalyticsTableExport | Když je hodnota „true“, analytika vynechá data, která nespadají do počátečního a koncového data možnosti kategorie. Výchozí: "false" | Ne |
| keySkipDataTypeValidationInAnalyticsTableExport | Přeskočí ověření datového typu v exportu analytické tabulky | Ne |
| keyCustomLoginPageLogo | Logo pro vlastní přihlašovací stránku | Ne |
| keyCustomTopMenuLogo | Logo pro vlastní horní menu | Ne |
| keyCacheAnalyticsDataYearThreshold | Data Analytics starší než tato hodnota (v letech) budou vždy uložena do mezipaměti. "0" toto nastavení deaktivovalo. Výchozí: 0 | Ne |
| analyticsFinancialYearStart | Nastavit začátek finančního roku. Výchozí: říjen | Ne |
| keyIgnoreAnalyticsApprovalYearThreshold | "0" kontrola schválení pro všechna data. "-1" deaktivuje kontrolu schválení. "1" nebo vyšší kontroluje schválení pro všechna data, která jsou novější než "1" rok. | Ne |
| keyAnalyticsMaxLimit | Maximum number of analytics records. Default: "50000" | Ne |
| keyAnalyticsPeriodYearsOffset | Defines the years' offset to be used in the analytics export process. If the year of a respective date is out of the offset the system sends back a warning message during the process. At this point, the period generation step is skipped. ie.: suppose the system user sets the offset value to `5`, and we are in the year 2023. It means that analytics will accept exporting dates from 2018 (inclusive) to 2028 (inclusive). Which translates to: [2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028]. NOTE: The offset will have a significant influence on resource usage. Higher values will trigger higher usage of memory RAM/HEAP and CPU. Setting negative numbers to this key will disable any kind of validation (which means no warnings) and the internal range of years will be used (1970 to current year plus 10) Default: 22 | Ne |
| keyDatabaseServerCpus | Počet CPU databázového serveru. Výchozí: "0" (automaticky) | Ne |
| keyLastSuccessfulAnalyticsTablesRuntime | Uchovává časové razítko posledních úspěšných spuštěných analytických tabulek | Ne |
| keyLastSuccessfulLatestAnalyticsPartitionRuntime | Uchovává časové razítko posledního úspěšného posledního spuštění analytického oddílu | Ne |
| keyLastMonitoringRun | Uchovává časové razítko posledního sledování | Ne |
| keyLastSuccessfulDataSynch | Udržuje časové razítko poslední úspěšné synchronizace datových hodnot | Ne |
| keyLastSuccessfulEventsDataSynch | Udržuje časové razítko poslední úspěšné synchronizace dat programů událostí | Ne |
| keyLastCompleteDataSetRegistrationSyncSuccess | Uchovává časové razítko poslední úspěšné synchronizace úplnosti | Ne |
| syncSkipSyncForDataChangedBefore | Určuje časové razítko používané k přeskočení synchronizace všech dat změněných před tímto časovým okamžikem | Ne |
| keyLastSuccessfulAnalyticsTablesUpdate | Uchovává časové razítko poslední úspěšné aktualizace analytických tabulek | Ne |
| keyLastSuccessfulLatestAnalyticsPartitionUpdate | Uchovává časové razítko poslední úspěšné aktualizace analytického oddílu | Ne |
| keyLastSuccessfulResourceTablesUpdate | Uchovává časové razítko poslední úspěšné aktualizace tabulek zdrojů | Ne |
| keyLastSuccessfulSystemMonitoringPush | Udržuje časové razítko posledního úspěšného systému monitorování push | Ne |
| keyLastSuccessfulMonitoring | Uchovává časové razítko posledního úspěšného monitorování | Ne |
| keyNextAnalyticsTableUpdate | Uchovává časové razítko příští aktualizace analytické tabulky | Ne |
| helpPageLink | Odkaz na stránku nápovědy. Výchozí: "[https://dhis2.github.io/dhis2-docs/master/en/user/html/dhis2_user_manual_en.html](http://dhis2.github.io/dhis2-docs/master/en/user/html/dhis2_user_manual_en.html) | Ne |
| keyAcceptanceRequiredForApproval | Před schválením je vyžadováno přijetí. Výchozí: "false" | Ne |
| keySystemNotificationsEmail | Kam zasílat e-mailová systémová upozornění | Ne |
| keyAnalysisRelativePeriod | Výchozí relativní období pro analýzu. Výchozí: „LAST_12_MONTHS“ | Ne |
| keyRequireAddToView | K zobrazení seznamů objektů vyžadovat přidání oprávnění. Výchozí: "false" | Ne |
| keyAllowObjectAssignment | Povolit přiřazení objektu k souvisejícím objektům během přidávání nebo aktualizace. Výchozí: "false" | Ne |
| keyUseCustomLogoFront | Umožňuje použití vlastního loga na přední straně. Výchozí: "false" | Ne |
| keyUseCustomLogoBanner | Umožňuje použití vlastního banneru na webu. Výchozí: "false" | Ne |
| keyDataImportStrictPeriods || Ne |
| keyDataImportStrictPeriods | Vyžadovat období, aby odpovídalo typu období souboru dat. Výchozí: "false" | Ne |
| keyDataImportStrictDataElements | Vyžadovat, aby datové prvky byly součástí datové sady. Výchozí: "false" | Ne |
| keyDataImportStrictCategoryOptionCombos | Vyžadovat kombinace možností kategorií, aby odpovídaly kombinaci kategorií datového prvku. Výchozí: "false" | Ne |
| keyDataImportStrictOrganisationUnits | Vyžadovat, aby organizační jednotky odpovídaly přiřazení souboru dat. Výchozí: "false" | Ne |
| keyDataImportStrictAttributeOptionsCombos | Vyžadovat kombinaci možností atributu, aby odpovídala kombinaci kategorií sady dat. Výchozí: "false" | Ne |
| keyDataImportStrictDataSetApproval | true: If an already approved dataset exists for a given data value entry is not permitted; false: If a not yet approved dataset exists for a given data value entry is permitted. Default: "true" | Ne |
| keyDataImportStrictDataSetLocking | true: If a dataset exists for which entry expired without lock exception for a given data value entry is not permitted; false: If a dataset exists for which entry is not expired or a lock exception applies for a given data value entry is permitted. Default: "true" | Ne |
| keyDataImportStrictDataSetInputPeriods | true: If a dataset exists for which the input period is closed for a given data value entry is not permitted; false: If a dataset exists for which data the input period is open for a given data value entry is permitted. Default: "true" | Ne |
| keyDataImportRequireCategoryOptionCombo | Vyžadovat zadání kombinace možností kategorie. Výchozí: "false" | Ne |
| keyDataImportRequireAttributeOptionCombo | Vyžadovat zadání kombinace možností atributu. Výchozí: "false" | Ne |
| keyCustomJs | Vlastní JavaScript pro použití na webu | Ne |
| keyCustomCss | Vlastní CSS pro použití na webu | Ne |
| keyCalendar | Typ kalendáře. Výchozí: "iso8601". | Ne |
| keyDateFormat | Formát, ve kterém se mají zobrazovat data. Výchozí: "yyyy-MM-dd". | Ne |
| keyStyle | Styl použitý na webových stránkách DHIS2. Výchozí: "light_blue/light_blue.css". | Ne |
| keyRemoteInstanceUrl | Adresa URL použitá pro připojení ke vzdálené instanci | Ne |
| keyRemoteInstanceUsername | Uživatelské jméno používané pro připojení ke vzdálené instanci DHIS2 | Ne |
| keyRemoteInstancePassword | Heslo používané pro připojení ke vzdálené instanci DHIS2 | Ne |
| keyGoogleMapsApiKey | Google Maps API key | Ne |
| keyGoogleCloudApiKey | Google Cloud API key | Ne |
| keyLastMetaDataSyncSuccess | Uchovává časové razítko poslední úspěšné synchronizace metadat | Ne |
| keyVersionEnabled | Umožňuje správu verzí metadat | Ne |
| keyMetadataFailedVersion | Uchovává podrobnosti o neúspěšné synchronizaci verze metadat | Ne |
| keyMetadataLastFailedTime | Uchovává časové razítko posledního selhání synchronizace metadat | Ne |
| keyLastSuccessfulScheduledProgramNotifications || Ne |
| keyLastSuccessfulScheduledDataSetNotifications || Ne |
| keyRemoteMetadataVersion | Podrobnosti o verzi metadat vzdálené instance | Ne |
| keySystemMetadataVersion | Podrobnosti o verzi metadat systému | Ne |
| keyStopMetadataSync | Příznakem zastavit synchronizaci metadat | Ne |
| keyFileResourceRetentionStrategy | Určuje, jak dlouho se uchovávají souborové prostředky spojené s odstraněnými nebo aktualizovanými hodnotami. NONE, THREE_MONTHS, ONE_YEAR nebo FOREVER. | Ne |
| syncMaxRemoteServerAvailabilityCheckAttempts | Určuje, kolikrát bude zkontrolována dostupnost vzdáleného serveru, než se úlohy synchronizace nezdaří. | Ne |
| syncMaxAttempts | Určuje maximální počet pokusů pro úlohy synchronizace | Ne |
| syncDelayBetweenRemoteServerAvailabilityCheckAttempts | Prodleva mezi kontrolami dostupnosti vzdáleného serveru | Ne |
| lastSuccessfulDataStatistics | Uchovává časové razítko poslední úspěšné analýzy dat | Ne |
| keyHideDailyPeriods | Nepoužívané | Ne |
| keyHideWeeklyPeriods || Ne |
| keyHideBiWeeklyPeriods | Booleovský příznak používaný ke skrytí / zobrazení dvoutýdenních období | Ne |
| keyHideMonthlyPeriods || Ne |
| keyHideBiMonthlyPeriods || Ne |
| keyGatherAnalyticalObjectStatisticsInDashboardViews | Zda se mají shromažďovat analytické statistiky o objektech, když jsou zobrazeny na ovládacím panelu | Ne |
| keyCountPassiveDashboardViewsInUsageAnalytics | Počítá „pasivní“ zobrazení ovládacího panelu (bez výběru konkrétního ovládacího panelu) v analýze využití | Ne |
| keyDashboardContextMenuItemSwitchViewType | Umožnit uživatelům přepínat mezi oblíbenými typy zobrazení ovládacího panelu | Ano |
| keyDashboardContextMenuItemOpenInRelevantApp | Umožněte uživatelům otevírat oblíbené položky na ovládacím panelu v relevantních aplikacích | Ano |
| keyDashboardContextMenuItemShowInterpretationsAndDetails | Umožněte uživatelům zobrazit interpretace a podrobnosti oblíbených položek na ovládacím panelu | Ano |
| keyDashboardContextMenuItemViewFullscreen | Umožněte uživatelům zobrazit oblíbené položky na ovládacím panelu na celé obrazovce | Ano |
| jobsRescheduleAfterMinutes | If a job is in state `RUNNING` for this amount of minutes or longer without making progress in form of updating its `lastAlive` timestamp the job is considered stale and reset to `SCHEDULED` state | Ne |
| jobsCleanupAfterMinutes | A "run once" job is deleted when this amount of minutes has passed since it finished successful or unsuccessful | Ne |                                                                                                                                                                                                                        
| jobsMaxCronDelayHours | A CRON expression triggered job will only trigger in the window between its target time of the day and this amount of hours later. If it wasn't able to run in that window the execution is skipped and next execution according to the CRON expression is the next target execution | Ne |
| jobsLogDebugBelowSeconds | A job with an execution interval below this number of seconds logs its information on debug rather than info | Ne |
| keyParallelJobsInAnalyticsTableExport | Returns the number of parallel jobs to use for processing analytics tables. It takes priority over "keyDatabaseServerCpus". Default: -1 | Ne |

## Uživatelské nastavení { #webapi_user_settings } 

You can manipulate user settings by interacting with the *userSettings*
resource. A user setting is a simple key-value pair, where both the key
and the value are plain text strings. The user setting will be linked to
the user who is authenticated for the Web API request. To return a list
of all user settings, you can send a *GET* request to the following URL:

    /api/33/userSettings

Uživatelská nastavení, která uživatel nenastaví, se vrátí k ekvivalentnímu systémovému nastavení. Chcete-li vrátit pouze hodnoty explicitně nastavené uživatelem, můžete k výše uvedené adrese URL připojit ?useFallback=false, například takto:

    /api/33/userSettings?useFallback=false

Chcete-li uložit nebo aktualizovat nastavení pro aktuálně ověřeného uživatele, můžete zadat požadavek *POST* na následující adresu URL:

    /api/33/userSettings/my-key?value=my-val

You can specify the user for which to save the setting explicitly with
this syntax:

    /api/33/userSettings/my-key?user=username&value=my-val

Alternatively, you can submit the setting value as the request body,
where content type is set to "text/plain". As an example, you can use
curl like this:

```bash
curl "https://play.dhis2.org/demo/api/33/userSettings/my-key" -d "My long value"
  -H "Content-Type: text/plain" -u admin:district
```

As an example, to set the UI locale of the current user to French you
can use the following command.

```bash
curl "https://play.dhis2.org/demo/api/33/userSettings/keyUiLocale?value=fr"
  -X POST -u admin:district
```

You should replace my-key with your real key and my-val with your real
value. To retrieve the value for a given key in plain text you can make
a *GET* request to the following URL:

    /api/33/userSettings/my-key

To delete a user setting, you can make a *DELETE* request to the URL
similar to the one used above for retrieval.

Dostupná nastavení systému jsou uvedena níže.



Tabulka: Uživatelská nastavení

| Klíč | Možnosti | Popis |
|---|---|---|
| keyStyle | light_blue/light_blue.css &#124; green/green.css &#124; vietnam/vietnam.css | Styly uživatelského rozhraní. |
| keyMessageEmailNotification | false &#124; true | Zda se mají odesílat e-mailová upozornění. |
| keyMessageSmsNotification | false &#124; true | Zda se mají odesílat upozornění SMS. |
| keyUiLocale | Hodnota národního prostředí | Národní prostředí uživatelského rozhraní. |
| keyDbLocale | Hodnota národního prostředí | Národní prostředí obsahu databáze. |
| keyAnalysisDisplayProperty | name &#124; shortName | Vlastnost, která se má zobrazit pro metadata v analytických aplikacích. |
| keyCurrentDomainType | vše &#124; agregát &#124; tracker | Typ domény datového prvku k zobrazení v seznamech. |
| keyAutoSaveCaseEntryForm | false &#124; true | Pravidelně ukládat formuláře pro zadání případů. |
| keyAutoSaveTrackedEntityForm | false &#124; true | Pravidelně ukládat registrační formuláře osob  |
| keyAutoSaveDataEntryForm | false &#124; true | Pravidelně ukládat formuláře pro zadávání souhrnných dat. |
| keyTrackerDashboardLayout | false &#124; true | Rozložení ovládacího panelu trackeru. |

## Konfigurace { #webapi_configuration } 

To access configuration you can interact with the *configuration*
resource. You can get XML and JSON responses through the *Accept* header
or by using the .json or .xml extensions. You can *GET* all properties
of the configuration from:

    /api/33/configuration

You can send *GET* and *POST* requests to the following specific
resources:

    GET /api/33/configuration/systemId

    GET POST DELETE /api/configuration/feedbackRecipients

    GET POST DELETE /api/configuration/offlineOrganisationUnitLevel

    GET POST /api/configuration/infrastructuralDataElements

    GET POST /api/configuration/infrastructuralIndicators

    GET POST /api/configuration/infrastructuralPeriodType

    GET POST DELETE /api/configuration/selfRegistrationRole

    GET POST DELETE /api/configuration/selfRegistrationOrgUnit

    GET POST /api/facilityOrgUnitGroupSet

    GET POST /api/facilityOrgUnitLevel

For the CORS allowlist configuration you can make a POST request with an
array of URLs to allowlist as payload using "application/json" as
content-type, for instance:

```json
["www.google.com", "www.dhis2.org", "www.who.int"]
```

    GET POST /api/33/configuration/corsAllowlist

For POST requests, the configuration value should be sent as the request
payload as text. The following table shows appropriate configuration
values for each property.



Tabulka: Hodnoty konfigurace

| Vlastnost konfigurace | Hodnota |
|---|---|
| feedbackRecipients | ID skupiny uživatelů |
| offlineOrganisationUnitLevel | ID úrovně organizační jednotky |
| infrastructuralDataElements | ID skupiny datových prvků |
| infrastructuralIndicators | ID skupiny indikátorů |
| infrastructuralPeriodType | Název typu období (např. „Měsíčně“) |
| selfRegistrationRole | ID uživatelské role |
| selfRegistrationOrgUnit | ID organizační jednotky |
| smtpPassword | Heslo e-mailového serveru SMTP |
| remoteServerUrl | URL na vzdálený server |
| remoteServerUsername | Uživatelské jméno pro ověření vzdáleného serveru |
| remoteServerPassword | Heslo pro ověření vzdáleného serveru |
| corsAllowlist | JSON seznam URL |

As an example, to set the feedback recipients user group you can invoke
the following curl command:

```bash
curl "localhost/api/33/configuration/feedbackRecipients" -d "wl5cDMuUhmF"
  -H "Content-Type:text/plain"-u admin:district
```

## Konfigurace jen pro čtení { #webapi_readonly_configuration_interface } 

To access all configuration settings and properties you can use the read-only configuration endpoint. This will provide read-only access to *UserSettings, SystemSettings and DHIS2 server configurations* You can get XML and JSON responses through the *Accept* header. You can *GET* all settings from:

    /api/33/configuration/settings

Můžete získat filtrovaná nastavení podle typu nastavení:

    GET /api/33/configuration/settings/filter?type=USER_SETTING

    GET /api/33/configuration/settings/filter?type=CONFIGURATION

Lze poskytnout více než jeden typ:

    GET /api/33/configuration/settings/filter?type=USER_SETTING&type=SYSTEM_SETTING



Tabulka: Hodnoty SettingType

| Hodnota | Popis |
|---|---|
| USER_SETTING | Chcete-li získat uživatelská nastavení |
| SYSTEM_SETTING | Chcete-li získat nastavení systému |
| CONFIGURATION | Chcete-li získat nastavení serveru DHIS |

> **Poznámka**
>
> Pole, která jsou důvěrná, budou poskytnuta na výstupu, ale bez hodnot.

## Tokeny { #webapi_tokens } 

Prostředek *tokeny* poskytuje přístupové tokeny k různým službám.

### Účet služby Google { #webapi_tokens_google_service_account } 

You can retrieve a Google service account OAuth 2.0 access token with a
GET request to the following resource.

    GET /api/tokens/google

The token will be valid for a certain amount of time, after which
another token must be requested from this resource. The response
contains a cache control header which matches the token expiration. The
response will contain the following properties in JSON format.



Tabulka: Odezva tokenu

| Vlastnictví | Popis |
|---|---|
| access_token | Přístupový token OAuth 2.0, který se má použít při ověřování proti službám Google. |
| expires_in | Počet sekund do vypršení platnosti přístupového tokenu, obvykle 3600 sekund (1 hodina). |
| client_id | ID klienta servisního účtu Google. |

To předpokládá, že účet služby Google byl nastaven a nakonfigurován pro DHIS2. Další informace najdete v instalační příručce.

## Statický obsah { #webapi_static_content } 

The *staticContent* resource allows you to upload and retrieve custom
logos used in DHIS2. The resource lets the user upload a file with an
associated key, which can later be retrieved using the key. Only PNG
files are supported and can only be uploaded to the `logo_banner` and
`logo_front` keys.

    /api/33/staticContent



Tabulka: Klíče statického obsahu

| Klíč | Popis |
|---|---|
| logo_banner | Logo v horním menu aplikace na levé straně. |
| logo_front | Logo na přihlašovací stránce nad přihlašovacím formulářem. |

Chcete-li nahrát soubor, odešlete soubor s požadavkem *POST* na adresu:

    POST /api/33/staticContent/<key>

Příklad požadavku na nahrání logo.png do klíče `logo_front`:

```bash
curl -F "file=@logo.png;type=image/png" "https://play.dhis2.org/demo/api/33/staticContent/logo_front"
  -X POST -H "Content-Type: multipart/form-data" -u admin:district
```

Nahrání více souborů se stejným klíčem přepíše stávající soubor. Tímto způsobem se při načtení souboru pro daný klíč vrátí pouze poslední nahraný soubor.

To retrieve a logo, you can *GET* the following:

    GET /api/33/staticContent/<key>

Příklad požadavků na načtení souboru uloženého pro `logo_front`:

* Adding "Accept: text/html" to the HTTP header.*__ In this case, the endpoint will return a default image if nothing is defined. Will return an image stream when a custom or default image is found.

```bash
curl "https://play.dhis2.org/demo/api/33/staticContent/logo_front"
  -H "Accept: text/html" -L -u admin:district
```

* Adding "Accept: application/json" to the HTTP header.*__ With this parameter set, the endpoint will never return a default image if the custom logo is not found. Instead, an error message will be returned. When the custom image is found this endpoint will return a JSON response containing the path/URL to the respective image.

```bash
curl "https://play.dhis2.org/demo/api/33/staticContent/logo_front"
  -H "Accept: application/json" -L -u admin:district
```

Úspěšné a chybové zprávy budou vypadat takto:

```json
{
  "images": {
    "png": "http://localhost:8080/dhis/api/staticContent/logo_front"
  }
}
```

```json
{
  "httpStatus": "Not Found",
  "httpStatusCode": 404,
  "status": "ERROR",
  "message": "No custom file found."
}
```

To use custom logos, you need to enable the corresponding system
settings by setting it to *true*. If the corresponding setting is false,
the default logo will be served.

## Přizpůsobení uživatelského rozhraní { #webapi_ui_customization } 

To customize the UI of the DHIS2 application you can insert custom
JavaScript and CSS styles through the *files* resource.

```
POST GET DELETE /api/33/files/script
POST GET DELETE /api/33/files/style
```

The JavaScript and CSS content inserted through this resource will be loaded by the
DHIS2 web application. This can be particularly useful in certain situations:

  - Overriding the CSS styles of the DHIS2 application, such as the
    přihlašovací stránka nebo hlavní stránka.

  - Defining JavaScript functions which are common to several custom
    formuláře pro zadávání dat a zprávy založené na HTML.

  - Including CSS styles which are used in custom data entry forms and
    HTML-based reports.

### Javascript { #webapi_customization_javascript } 

To insert Javascript from a file called *script.js* you can interact
with the *files/script* resource with a POST request:

```bash
curl --data-binary @script.js "localhost/api/33/files/script"
  -H "Content-Type:application/javascript" -u admin:district
```

Note that we use the `--data-binary` option to preserve formatting of the
file content. You can fetch the JavaScript content with a GET request:

    /api/33/files/script

Chcete-li odstranit obsah JavaScriptu, můžete použít požadavek DELETE.

### CSS { #webapi_customization_css } 

To insert CSS from a file called *style.css* you can interact with the
*files/style* resource with a POST-request:

```bash
curl --data-binary @style.css "localhost/api/33/files/style"
  -H "Content-Type:text/css" -u admin:district
```

Obsah CSS můžete načíst pomocí požadavku GET:

    /api/33/files/style

Chcete-li odstranit obsah JavaScriptu, můžete použít požadavek DELETE.



# Trasovač { #tracker } 

> **Caution**
>
> Tracker has been re-implemented in DHIS2 2.36. This document describes the new tracker endpoints
>
> * `POST /api/tracker`
> * `GET  /api/tracker/trackedEntities`
> * `GET  /api/tracker/enrollments`
> * `GET  /api/tracker/events`
> * `GET  /api/tracker/relationships`
>
> [Tracker
> (deprecated)](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/tracker-deprecated.html)
> describes the deprecated endpoints
>
> * `GET/POST/PUT/DELETE /api/trackedEntityInstance`
> * `GET/POST/PUT/DELETE /api/enrollments`
> * `GET/POST/PUT/DELETE /api/events`
> * `GET/POST/PUT/DELETE /api/relationships`
>
> The deprecated endpoints will be removed in version **42**!
>
> [Migrating to new tracker
> endpoints](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/tracker-deprecated.html#webapi_tracker_migration)
> should help you get started with your migration. Reach out on the [community of
> practice](https://community.dhis2.org) if you need further assistance.

## Objekty Trasovače { #webapi_nti_tracker_objects }

Tracker consists of a few different types of objects that are nested together to represent the data.
In this section, we will show and describe each of the objects used in the Tracker API.

### Tracked Entity { #tracked-entity } 

`Trasované entity` jsou kořenovým objektem pro model trasování.

| Vlastnictví | Popis | Požadované | Neměnný | Typ | Příklad |
|---|---|---|---|---|---|
| trackedEntity | Identifikátor trasované entity. Vygenerováno, pokud není dodáno | Ne | Ano | String:Uid | ABCDEF12345 |
| trackedEntityType | Typ trasované entity. | Ano | Ano | String:Uid | ABCDEF12345 |
| createdAt | Časové razítko, kdy uživatel vytvořil trasovanou entitu. Nastavit na serveru. | Ne | Ne | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| createdAtClient | Časové razítko, kdy uživatel vytvořil trasovanou entitu na klientovi. | Ne | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| updatedAt | Časové razítko, kdy byl objekt naposledy aktualizován. Nastavit na serveru. | Ne | Ne | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| updatedAtClient | Časové razítko, kdy byl objekt naposledy aktualizován na klientovi. | Ne | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| orgUnit | Organizační jednotka, kde uživatel vytvořil trasovanou entitu. | Ano | Ano | String:Uid | ABCDEF12345 |
| neaktivní | Udává, zda je trasovaná entita neaktivní nebo ne. | Ne | Ano | Boolean | Výchozí: False, True |
| smazáno | Označuje, zda byla trasovaná entita odstraněna. Může se změnit pouze při mazání. | Ne | Ne | Boolean | Nepravda, dokud nebude smazán |
| geometrie | A  geographical representation of the tracked entity. Based on the "featureType" of the TrackedEntityType. | Ne | Ano | GeoJson | {<br>"type": "POINT",<br>"coordinates": [123.0, 123.0]<br>} |
| storedBy | Odkaz klienta na to, kdo uložil/vytvořil trasovanou entitu. | Ne | Ano | String:Any | John Doe |
| createdBy | Pouze pro čtení dat. Uživatel, který objekt vytvořil. Nastaveno na serveru | Ne | Ano | Uživatel | {<br>"uid": "ABCDEF12345",<br>"username": "username",<br>"firstName": "John",<br>"surname": "Doe"<br>} |
| updatedBy | Pouze pro čtení dat. Uživatel, který naposledy aktualizoval objekt. Nastavit na serveru | Ne | Ano | Uživatel | {<br>"uid": "ABCDEF12345",<br>"username": "username",<br>"firstName": "John",<br>"surname": "Doe"<br>} |
| atributy | Seznam hodnot atributů trasované entity vlastněných trasovanou entitou. | Ne | Ano | Seznam TrackedEntityAttributeValue | Viz Atribut |
| zápisy | Seznam zápisů vlastněných trasovanou entitou. | Ne | Ano | Seznam zápisů | Viz Zápis |
| vztahy | Seznam vztahů spojených s trasovanou entitou. | Ne | Ano | Seznam vztahů | Viz Vztah |
| programOwners | Seznam organizačních jednotek, které mají prostřednictvím konkrétních programů přístup k této sledované entitě. Více viz "Vlastnictví programu". | Ne | Ano | Seznam ProgramOwner | Viz část "Vlastnictví programu" |

> **Note**
>
> `Tracked Entities` "owns" all `Tracked Entity Attribute Values` (Or "attributes" as described in
> the previous table). However, `Tracked Entity Attributes` are either connected to a `Tracked
> Entity` through its `Tracked Entity Type` or a `Program`. We often refer to this separation as
> `Tracked Entity Type Attributes` and `Tracked Entity Program Attributes`. The importance of this
> separation is related to access control and limiting what information the user can see.
>
> The "attributes" referred to in the `Tracked Entity` are `Tracked Entity Type Attributes`.

### Zápis { #enrollment } 

`Tracked Entities` can enroll into `Programs` for which they are eligible. Tracked entities are
eligible as long as the program is configured with the same `Tracked Entity Type` as the tracked
entity. We represent the enrollment with the `Enrollment` object, which we describe in this section.

| Vlastnictví | Popis | Požadované | Neměnný | Typ | Příklad |
|---|---|---|---|---|---|
| zápis | Identifikátor zápisu. Vygenerováno, pokud není dodáno | Ne | Ano | String:Uid | ABCDEF12345 |
| program | Program, který zápis představuje. | Ano | Ne | String:Uid | ABCDEF12345 |
| trackedEntity | Odkaz na zaregistrovanou trasovanou entitu. | Ano | Ano | String:Uid | ABCDEF12345 |
| trackedEntityType | Pouze pro čtení dat. Typ zapsané trasované entity | Ne | Ano | String:Uid | ABCDEF12345 |
| status | Stav zápisu. AKTIVNÍ, pokud není součástí dodávky. | Ne | Ne | Výčet | AKTIVNÍ, DOKONČENO, ZRUŠENO |
| orgUnit | Organizační jednotka, do které uživatel zapsal trasovanou entitu. | Ano | Ne | String:Uid | ABCDEF12345 |
| createdAt | Časové razítko, kdy uživatel vytvořil objekt. Nastavit na serveru. | Ne | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| createdAtClient | Časové razítko, kdy uživatel vytvořil objekt na klientovi | Ne | Ne | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| updatedAt | Časové razítko, kdy byl objekt naposledy aktualizován. Nastavit na serveru. | Ne | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| updatedAtClient | Časové razítko, kdy byl objekt naposledy aktualizován na klientovi | Ne | Ne | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| enrolledAt | Časové razítko, kdy uživatel zaregistroval trasovanou entitu. | Ano | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| occurredAt | Časové razítko, kdy došlo k registraci. | Ne | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| completedAt | Časové razítko, kdy uživatel dokončil registraci. Nastaveno na serveru. | Ne | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| completedBy | Odkaz na to, kdo dokončil registraci | Ne | Ne | String:any | John Doe |
| followUp | Označuje, zda zápis vyžaduje následnou kontrolu. Nesprávné, pokud není dodáno | Ne | Ne | Booelan | Výchozí: False, True |
| smazáno | Označuje, zda byla registrace smazána. Může se změnit pouze při mazání. | Ne | Ano | Boolean | Nepravda, dokud nebude smazán |
| geometrie | A  geographical representation of the enrollment. Based on the "featureType" of the Program | Ne | Ne | GeoJson | {<br>"type": "POINT",<br>"coordinates": [123.0, 123.0]<br>} |
| storedBy | Odkaz klienta na to, kdo uložil / vytvořil registraci. | Ne | Ne | String:Any | John Doe |
| createdBy | Pouze pro čtení dat. Uživatel, který objekt vytvořil. Nastaveno na serveru | Ne | Ano | Uživatel | {<br>"uid": "ABCDEF12345",<br>"username": "username",<br>"firstName": "John",<br>"surname": "Doe"<br>} |
| updatedBy | Pouze pro čtení dat. Uživatel, který naposledy aktualizoval objekt. Nastavit na serveru | Ne | Ano | Uživatel | {<br>"uid": "ABCDEF12345",<br>"username": "username",<br>"firstName": "John",<br>"surname": "Doe"<br>} |
| atributy | Seznam hodnot atributů trasovaných entit spojených s registrací. | Ne | Ne | Seznam TrackedEntityAttributeValue | Viz Atribut |
| Události | Seznam událostí vlastněných registrací. | Ne | Ne | Seznam událostí | Viz Událost |
| vztahy | Seznam vztahů spojených s registrací. | Ne | Ne | Seznam vztahů | Viz Vztah |
| poznámky | Poznámky spojené s registrací. Lze jej pouze vytvořit. | Ne | Ano | Seznam poznámek | Viz poznámka |

> **Note**
>
> `Tracked Entities` "owns" all `Tracked Entity Attribute Values` (Or "attributes" as described in
> the previous table). However, `Tracked Entity Attributes` are either connected to a `Tracked
> Entity` through its `Tracked Entity Type` or a `Program`. We often refer to this separation as
> `Tracked Entity Type Attributes` and `Tracked Entity Program Attributes`. The importance of this
> separation is related to access control and limiting what information the user can see.
>
> The "attributes" referred to in the `Enrollment` are `Tracked Entity Program Attributes`.

### Události { #events } 

`Events` are either part of an `EVENT PROGRAM` or `TRACKER PROGRAM`. For `TRACKER PROGRAM`, events
belong to an `Enrollment`, which again belongs to a `Tracked Entity`. On the other hand, `EVENT
PROGRAM` is `Events` not connected to a specific `Enrollment` or `Tracked Entity`. The difference is
related to whether we track a specific `Tracked Entity` or not. We sometimes refer to `EVENT
PROGRAM` events as "anonymous events" or "single events" since they only represent themselves and
not another `Tracked Entity`.

In the API, the significant difference is that all events are either connected to the same
enrollment (`EVENT PROGRAM`) or different enrollments (`TRACKER PROGRAM`). The table below will
point out any exceptional cases between these two.

| Vlastnictví | Popis | Požadované | Neměnný | Typ | Příklad |
|---|---|---|---|---|---|
| událost | Identifikátor události. Vygenerováno, pokud není dodáno | Ne | Ano | String:Uid | ABCDEF12345 |
| programStage | Fáze programu, kterou akce představuje. | Ano | Ne | String:Uid | ABCDEF12345 |
| zápis | A reference to the enrollment which owns the event. ***Not applicable for `EVENT PROGRAM`*** | Ano | Ano | String:Uid | ABCDEF12345 |
| program | Pouze pro čtení dat. Typ programu, který má registrace, která událost vlastní. | Ne | Ano | String:Uid | ABCDEF12345 |
| trackedEntity | Pouze pro čtení dat. Trasovaná entita, která událost vlastní. ***Neplatí pro `PROGRAM AKCE`*** | Ne | Ne | String:Uid | ABCDEF12345 |
| status | Stav události. AKTIVNÍ, pokud není součástí dodávky. | Ne | Ne | Výčet | AKTIVNÍ, DOKONČENÉ, NAVŠTÍVENÉ, PLÁNOVANÉ, PO TERMÍNU, PŘESKOČENO |
| enrollmentStatus | Only for reading data. The status of the enrollment which owns the event. ***Not applicable for `EVENT PROGRAM`*** | Ne | Ne | Výčet | AKTIVNÍ, DOKONČENO, ZRUŠENO |
| orgUnit | Organizační jednotka, kde uživatel zaregistroval událost. | Ano | Ne | String:Uid | ABCDEF12345 |
| createdAt | Only for reading data. Timestamp when the user created the event. Set on the server. | Ne | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| createdAtClient | Časové razítko, kdy uživatel vytvořil událost na klientovi | Ne | Ne | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| updatedAt | Only for reading data. Timestamp when the event was last updated. Set on the server. | Ne | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| updatedAtClient | Časové razítko, kdy byla událost naposledy aktualizována na klientovi | Ne | Ne | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| scheduledAt | Časové razítko, kdy byla událost naplánována. | Ne | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| occurredAt | Časové razítko, když se něco stalo. | Ano | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| completedAt | Časové razítko, kdy uživatel dokončil událost. Nastaveno na serveru. | Ne | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| completedBy | Odkaz na toho, kdo akci dokončil | Ne | Ne | String:Any | John Doe |
| followUp | Only for reading data. Indicates whether the event has been flagged for follow-up. | Ne | Ne | Boolean | False, True |
| smazáno | Only for reading data. Indicates whether the event has been deleted. It can only change when deleting. | Ne | Ano | Boolean | Nepravda, dokud nebude smazán |
| geometrie | A  geographical representation of the event. Based on the "featureType" of the Program Stage | Ne | Ne | GeoJson | {<br>"type": "POINT",<br>"coordinates": [123.0, 123.0]<br>} |
| storedBy | Odkaz klienta na to, kdo událost uložil/vytvořil. | Ne | Ne | String:Any | John Doe |
| createdBy | Pouze pro čtení dat. Uživatel, který objekt vytvořil. Nastaveno na serveru | Ne | Ano | Uživatel | {<br>"uid": "ABCDEF12345",<br>"username": "username",<br>"firstName": "John",<br>"surname": "Doe"<br>} |
| updatedBy | Pouze pro čtení dat. Uživatel, který naposledy aktualizoval objekt. Nastavit na serveru | Ne | Ano | Uživatel | {<br>"uid": "ABCDEF12345",<br>"username": "username",<br>"firstName": "John",<br>"surname": "Doe"<br>} |
| attributeOptionCombo | Kombinace možností atributu pro událost. Výchozí, pokud není dodáno nebo nakonfigurováno. | Ne | Ne | String:Uid | ABCDEF12345
| attributeCategoryOptions | Možnost kategorie atributu pro událost. Výchozí, pokud není dodáno nebo nakonfigurováno. | Ne | Ne | String:Uid | ABCDEF12345
| assignedUser | Odkaz na uživatele, který byl přiřazen k události. | Ne | Ne | Uživatel | {<br>"uid": "ABCDEF12345",<br>"username": "username",<br>"firstName": "John",<br>"surname": "Doe"<br>} |
| dataValues | Seznam datových hodnot spojených s událostí. | Ne | Ne | Seznam TrackedEntityAttributeValue | Viz Atribut |
| vztahy | Seznam vztahů spojených s událostí. | Ne | Ne | Seznam vztahů | Viz Vztah |
| poznámky | Poznámky spojené s událostí. Lze jej pouze vytvořit. | Ne | Ano | Seznam poznámek | Viz poznámka |

### Relationship { #relationship } 

`Relationships` are objects that link together two other tracker objects. The constraints each side
of the relationship must conform to are based on the `Relationship Type` of the `Relationship`.


| Vlastnictví | Popis | Požadované | Neměnný | Typ | Příklad |
|---|---|---|---|---|---|
| vztah | Identifikátor vztahu. Vygenerováno, pokud není dodáno. | Ne | Ano | String:Uid | ABCDEF12345 |
| relationshipType | Typ vztahu. Rozhoduje, jaké objekty mohou být spojeny ve vztahu. | Ano | Ano | String:Uid | ABCDEF12345 |
| relationshipName | Pouze pro čtení dat. Název typu vztahu tohoto vztahu | Ne | Ne | String:Any | Sourozenec |
| createdAt | Časové razítko, kdy uživatel vytvořil vztah. Nastaveno na serveru. | Ne | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| updatedAt | Časové razítko, kdy byl vztah naposledy aktualizován. Nastavuje se na serveru. | Ne | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| createdAtClient | Timestamp when the user created the relationship on the client. | Ne | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| obousměrný | Pouze pro čtení dat. Označuje, zda je typ vztahu obousměrný nebo ne. | Ne | Ne | Boolean | True nebo False |
| od, do | Odkaz na každou stranu vztahu. Musí odpovídat omezením nastaveným v typu vztahu | Ano | Ano | RelationshipItem | {"trackedEntity": {"trackedEntity": "ABCEF12345"}}, {"enrollment": {"enrollment": "ABCDEF12345"}} or {"event": {"event": "ABCDEF12345" }} |

> **Note**
>
>`Relationship item` represents a link to an object. Since a `relationship` can be between any
>tracker object like `tracked entity`, `enrollment`, and `event`, the value depends on the
>`relationship type`. For example, if the `relationship type` connects from an `event` to a `tracked
>entity`, the format is strict:

>```json
>{
>   "from": {
>     "event": { "event": "ABCDEF12345" }
>   },
>   "to": {
>     "trackedEntity": { "trackedEntity": "FEDCBA12345" }
>   }
>}
>```

### Atribut { #attribute } 

`Attributes` are the actual values describing the `tracked entities`. They can either be connected
through a `tracked entity type` or a `program`. Implicitly this means `attributes` can be part of
both a `tracked entity` and an `enrollment`.

| Vlastnictví | Popis | Požadované | Neměnný | Typ | Příklad |
|---|---|---|---|---|---|
| attribute | Odkaz na zastoupený atribut trasované entity. | Ano | Ano | String:Uid | ABCDEF12345 |
| code | Pouze pro čtení dat. Kód atributu trasované entity. | Ne | Ne | String:Any | ABC |
| displayName | Pouze pro čtení dat. DisplayName atributu trasované entity. | Ne | Ne | String:Any | Název |
| createdAt | Časové razítko, kdy byla hodnota přidána. Nastavit na serveru. | Ne | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| updatedAt | Časové razítko, kdy byla hodnota naposledy aktualizována. Nastavit na serveru. | Ne | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| storedBy | Odkaz klienta na to, kdo hodnotu uložil / vytvořil. | Ne | Ne | String:Any | John Doe |
| valueType | Pouze pro čtení dat. Typ hodnoty, kterou atribut představuje. | Ne | Ne | Výčet | TEXT, INTEGER a další |
| value | Hodnota atributu trasované entity. | Ne | Ne | String:Any | John Doe |

> **Note**
>
> For `attributes` only the "attribute" and "value" properties are required when adding data.
> "value" can be null, which implies the user should remove the value.
>
> In the context of tracker objects, we refer to `Tracked Entity Attributes` and `Tracked Entity
> Attribute Values` as "attributes". However, attributes are also their own thing, related to
> metadata. Therefore it's vital to separate Tracker attributes and metadata attributes. In the
> tracker API, it is possible to reference the metadata attributes when specifying `idScheme` (See
> request parameters for more information).

### Data Values { #data-values } 

Zatímco `Attributes` popisuje `trasovanou entitu` nebo `zápis`, `datové hodnoty` popisují `událost`. Hlavní rozdíl spočívá v tom, že `atributy` mohou mít pro danou `trasovanou entitu` pouze jednu hodnotu. Naproti tomu `datové hodnoty` mohou mít mnoho různých hodnot pro různé `události` - i když všechny `události` patří ke stejnému `zápisu` nebo `trasované entitě`.

| Vlastnictví | Popis | Požadované | Neměnný | Typ | Příklad |
|---|---|---|---|---|---|
| dataElement | Datový prvek, který tato hodnota představuje. | Ano | Ano | String:Uid | ABCDEF12345 |
| value | Hodnota datové hodnoty. | Ne | Ne | String:Any | 123 |
| providedElsewhere | Označuje, zda uživatel zadal hodnotu jinde nebo ne. Nesprávné, pokud není dodáno. | Ne | Ne | Boolean | False nebo True |
| createdAt | Časové razítko, kdy uživatel přidal hodnotu. Nastavit na serveru. | Ne | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| updatedAt | Časové razítko, kdy byla hodnota naposledy aktualizována. Nastavit na serveru. | Ne | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| storedBy | Odkaz klienta na to, kdo hodnotu uložil / vytvořil. | Ne | Ne | String:Any | John Doe |
| createdBy | Pouze pro čtení dat. Uživatel, který objekt vytvořil. Nastaveno na serveru | Ne | Ano | Uživatel | {<br>"uid": "ABCDEF12345",<br>"username": "username",<br>"firstName": "John",<br>"surname": "Doe"<br>} |
| updatedBy | Pouze pro čtení dat. Uživatel, který naposledy aktualizoval objekt. Nastavit na serveru | Ne | Ano | Uživatel | {<br>"uid": "ABCDEF12345",<br>"username": "username",<br>"firstName": "John",<br>"surname": "Doe"<br>} |

> **Note**
>
> For `data elements` only the "dataElement" and "value" properties are required when adding data.
> "value" can be null, which implies the user should remove the value.

### Tracker Notes { #tracker-notes } 

DHIS2 tracker allows for capturing of data using data elements and tracked entity attributes.
However, sometimes there could be a situation where it is necessary to record additional information
or comment about the issue at hand. Such additional information can be captured using tracker notes.
Tracker notes are equivalent to data value comments from the Aggregate DHIS2 side.

There are two types of tracker notes - notes recorded at the event level and those recorded at the
enrollment level. An enrollment can have one or more events. Comments about each of the events - for
example, why an event was missed, rescheduled, or why only a few data elements were filled and the
like - can be documented using event notes. Each of the events within an enrollment can have its own
story/notes. One can then record, for example, an overall observation of these events using the
parent enrollment note. Enrollment notes are also helpful to document, for example, why an
enrollment is canceled. It is the user's imagination and use-case when and how to use notes.

Both enrollment and event can have as many notes as needed - there is no limit. However, it is not
possible to delete or update neither of these notes. They are like a logbook. If one wants to amend
a note, one can do so by creating another note. The only way to delete a note is by deleting the
parent object - either event or enrollment.

Tracker notes do not have their dedicated endpoint; they are exchanged as part of the parent event
and/or enrollment payload. Below is a sample payload.

```json
{
  "trackedEntity": "oi3PMIGYJH8",
  "enrollments": [
    {
      "enrollment": "EbRsJr8LSSO",
      "notes": [
        {
          "note": "vxmCvYcPdaW",
          "value": "Enrollment note 2."
        },
        {
          "value": "Enrollment note 1"
        }
      ],
      "events": [
        {
          "event": "zfzS9WeO0uM",
          "notes": [
            {
              "note": "MAQFb7fAggS",
              "value": "Event Note 1."
            },
            {
              "value": "Event Note 2."
            }
          ]
        }
      ]
    }
  ]
}
```

| Vlastnictví | Popis | Požadované | Neměnný | Typ | Příklad |
|---|---|---|---|---|---|
| Poznámka | Odkaz na poznámku. Vygenerováno, pokud je prázdné | Ne | Ano | String:Uid | ABCDEF12345 |
| value | Obsah poznámky. | Ano | Ano | String:Any | Toto je poznámka |
| storedAt | Časové razítko, kdy uživatel přidal poznámku. Nastavit na serveru. | Ne | Ano | Date:ISO 8601 | RRRR-MM-DDThh:mm:ss |
| storedBy | Odkaz klienta na to, kdo uložil / vytvořil poznámku. | Ne | Ne | String:Any | John Doe |
| createdBy | Pouze pro čtení dat. Uživatel, který objekt vytvořil. Nastaveno na serveru | Ne | Ano | Uživatel | {<br>"uid": "ABCDEF12345",<br>"username": "username",<br>"firstName": "John",<br>"surname": "Doe"<br>} |

### Uživatel { #user } 

| Vlastnictví | Popis | Požadované | Neměnný | Typ | Příklad |
|---|---|---|---|---|---|
| uid | Identifikátor uživatele. | Yes* | Ano | String:Uid | ABCDEF12345 |
| uživatelské jméno | Uživatelské jméno používané uživatelem. | Yes* | Ano | String:Any | 123 |
| firstName | Pouze pro čtení dat. Křestní jméno uživatele. | Ne | Ano | String:Any | John |
| surname | Pouze pro čtení dat. Příjmení uživatele. | Ne | Ano | String:Any | Doe |

> One between `uid` or `username` field must be provided. If both are provided, only username is
> considered.

### Program stage working lists { #webapi_working_list_filters }

The program stage working lists feature within the Capture app is designed to display
pre-established working lists relevant to a particular program stage. This functionality enables
users to save filters and sorting preferences that are related to program stages, facilitating the
organisation and management of their workflow. To interact with them, you'll need to use the
*/api/programStageWorkingLists* resource. These lists can be shared and follow the same sharing
pattern as any other metadata. When using the */api/sharing* the type parameter will be
*programStageWorkingLists*.

    /api/40/programStageWorkingLists

##### Payload on CRUD operations to program stage working lists { #payload-on-crud-operations-to-program-stage-working-lists } 

The endpoint above can be used to get all program stage working lists. To get a single one, just add
at the end the id of the one you are interested in. This is the same in case you want to delete it.
On the other hand, if you are looking to create or update a program stage working list, besides the
endpoint mentioned above, you'll need to provide a payload in the following format:

Tabulka: Datový obsah

| Hodnoty datového obsahu | Popis | Příklad |
|---|---|---|
| název | Name of the working list. Required. ||
| popis | A description of the working list. ||
| program | Objekt obsahující id programu. Požadované. | {"id" : "uy2gU8kTjF"} |
| programStage | Object containing the id of the program stage. Required. | {"id" : "oRySG82BKE6"} |
| programStageQueryCriteria | An object representing various possible filtering values. See *Program Stage Query Criteria* definition table below.

Table: Program Stage Query Criteria

| Criteria values | Popis | Příklad |
|---|---|---|
| status | The event status. Possible values are ACTIVE, COMPLETED, VISITED, SCHEDULE, OVERDUE, SKIPPED and VISITED | "status":"VISITED" |
| eventCreatedAt | DateFilterPeriod object filtering based on the event creation date. | {"type":"ABSOLUTE","startDate":"2020-03-01","endDate":"2022-12-30"} |
| scheduledAt | DateFilterPeriod object filtering based on the event scheduled date. | {"type":"RELATIVE","period":"TODAY"} |
| enrollmentStatus | Any valid ProgramStatus. Possible values are ACTIVE, COMPLETED and CANCELLED. | "enrollmentStatus": "COMPLETED" |
| followUp | Indicates whether to filter enrollments marked for follow up or not | "followUp":true |
| enrolledAt | DateFilterPeriod object filtering based on the event enrollment date. | "enrolledAt": {"type":"RELATIVE","period":"THIS_MONTH"} |
| enrollmentOccurredAt | DateFilterPeriod object filtering based on the event occurred date. | {"type":"RELATIVE","period":"THIS_MONTH"} |
| orgUnit | A valid organisation unit UID | "orgUnit": "Rp268JB6Ne4" |
| ouMode | A valid OU selection mode | "ouMode": "SELECTED" |
| assignedUserMode | A valid user selection mode for events. Possible values are CURRENT, PROVIDED, NONE, ANY and ALL. If PROVIDED (or null), non-empty assignedUsers in the payload will be expected. | "assignedUserMode":"PROVIDED" |
| assignedUsers | A list of assigned users for events. To be used along with PROVIDED assignedUserMode above. | "assignedUsers":["DXyJmlo9rge"] |
| řazení | List of fields and its directions in comma separated values, the results will be sorted according to it. A single item in order is of the form "orderDimension:direction". | "order": "w75KJ2mc4zz:asc" |
| displayColumnOrder | Output ordering of columns | "displayColumnOrder":["w75KJ2mc4zz","zDhUuAYrxNC"] |
| dataFilters | A list of items that contains the filters to be used when querying events | "dataFilters":[{"dataItem": "GXNUsigphqK","ge": "10","le": "20"}] |
| attributeValueFilters | A list of attribute value filters. This is used to specify filters for attribute values when listing tracked entities | "attributeValueFilters":[{"attribute": "ruQQnf6rswq","eq": "15"}] |

See an example payload below:

```json
{   
    "name":"Test WL",
    "program":{"id":"uy2gU8kT1jF"},
    "programStage":{"id":"oRySG82BKE6"},
    "description": "Test WL definition",
    "programStageQueryCriteria":
        {
            "status":"VISITED",
            "eventCreatedAt":{"type":"ABSOLUTE","startDate":"2020-03-01","endDate":"2022-12-30"},
            "scheduledAt": {"type":"RELATIVE","period":"TODAY"},
            "enrollmentStatus": "COMPLETED",
            "followUp" : true,
            "enrolledAt": {"type":"RELATIVE","period":"THIS_MONTH"},
            "enrollmentOccurredAt": {"type":"RELATIVE","period":"THIS_MONTH"},
            "orgUnit": "Rp268JB6Ne4",
            "ouMode": "SELECTED",
            "assignedUserMode":"PROVIDED",
            "assignedUsers":["DXyJmlo9rge"],
            "order": "w75KJ2mc4zz:asc",
            "displayColumnOrder":["w75KJ2mc4zz","zDhUuAYrxNC"],
            "dataFilters":[{
                "dataItem": "GXNUsigphqK",
                "ge": "10",
                "le": "20"
            }],
            "attributeValueFilters":[{
                "attribute": "ruQQnf6rswq",
                "eq": "15"
            }]
        }
}
```

## Import trackeru (`POST /api/tracker`) { #webapi_nti_import }

The `POST /api/tracker` endpoint allows clients to import the following tracker objects

* **Trasované entity**
* **Zápisy**
* **Události**
* **Relationships**
* Data vložená do jiných [trasovacích objektů](#webapi_nti_tracker_objects)

### Request parameters { #request-parameters } 

V současné době koncový bod importu trackeru podporuje následující parametry:

| Název parametru | Popis | Typ | Povolené hodnoty |
|---|---|---|---|
| async | Označuje, zda má import probíhat asynchronně nebo synchronně. | Boolean | `TRUE`, `FALSE` |
| reportMode | Pouze při provádění synchronního importu. Další informace najdete v importSummary. | Výčet | `FULL`, `ERRORS`, `WARNINGS` |
| importMode | Indicates the mode of import. Can either be validate only (dry run) or commit (Default) | Výčet | `VALIDATE`, `COMMIT` |
| idScheme | Označuje celkové idScheme, které se má použít pro odkazy na metadata při importu. Výchozí je UID. Lze přepsat pro konkrétní metadata (uvedeno níže) | Výčet | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| dataElementIdScheme | Označuje idScheme, které se má použít pro datové prvky při importu. | Výčet | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| orgUnitIdScheme | Označuje idScheme, které se má použít pro organizační jednotky při importu. | Výčet | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| programIdScheme | Označuje idScheme, které se má použít pro programy při importu. | Výčet | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| programStageIdScheme | Označuje idScheme, které se má použít pro fáze programu při importu. | Výčet | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| categoryOptionComboIdScheme | Označuje idScheme, které se má použít pro kombinace možností kategorií při importu. | Výčet | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| categoryOptionIdScheme | Označuje idScheme, které se má použít pro možnosti kategorií při importu. | Výčet | `UID`, `CODE`, `NAME`, `ATTRIBUTE` |
| importStrategy | Označuje účinek, který by měl import mít. Může být `CREATE`, `UPDATE`, `CREATE_AND_UPDATE` a `DELETE`, což umožňuje pouze import nových dat, import změn existujících dat, import jakýchkoli nových nebo aktualizací existujících dat a nakonec smazání dat. | Výčet | `CREATE`, `UPDATE`, `CREATE_AND_UPDATE`, `DELETE` |
| atomicMode | Indicates how the import responds to validation errors. If `ALL`, all data imported must be valid for any data to be committed. For `OBJECT`, only the data committed needs to be valid, while other data can be invalid. | Výčet | `ALL`, `OBJECT` |
| flushMode | Udává frekvenci pročištění. To souvisí s tím, jak často jsou data vkládána do databáze během importu. Primárně se používá z důvodů ladění a nemělo by se měnit v produkčním nastavení | Výčet | `AUTO`, `OBJECT` |
| validationMode | Označuje úplnost kroku ověření. Lze jej přeskočit, nastavit na rychlé selhání (Návrat při první chybě) nebo úplné (Výchozí), které vrátí všechny nalezené chyby | Výčet | `FULL`, `FAIL_FAST`, `SKIP` |
| skipPatternValidation | Pokud je true, přeskočí ověřování vzoru generovaných atributů. | Boolean | `TRUE`, `FALSE` |
| skipSideEffects | Pokud je true, přeskočí se spuštění jakýchkoli vedlejších efektů importu | Boolean | `TRUE`, `FALSE` |
| skipRuleEngine | Pokud je true, přeskočí spuštění jakýchkoli programových pravidel pro import | Boolean | `TRUE`, `FALSE` |

**NOTE**: idScheme and its metadata specific idScheme parameters like
orgUnitIdScheme, programIdScheme, ... used to allow and use the default `AUTO`.
`AUTO` has been removed. The default idScheme has already been `UID`. Any
requests sent with idScheme `AUTO` will see the same behavior as before, namely
matching done using `UID`.

### Flat and nested payloads { #flat-and-nested-payloads } 

The importer support both flat and nested payloads.

**Flat**
:   The flat payload can contain collections for each of the core tracker objects we have at the
:   top level. This works seamlessly with existing data, which already have UIDs assigned. However,
:   for new data, the client will have to provide new UIDs for any references between objects. For
:   example, if you import a new tracked entity with a new enrollment, the tracked entity requires
:   the client to provide a UID so that the enrollment can be linked to that UID.

**Nested**
:   Nested payloads are the most commonly used structure. Here, tracker objects are embedded within
:   their parent object. For example, an enrollment within a tracked entity. The advantage of this
:   structure is that the client does not need to provide UIDs for these references as this is done
:   automatically.

> **NOTE**
>
> While nested payloads might prove simpler for clients to deal with, the payload will always be
> flattened before the import. This means that for large imports, providing a flat structured
> payload will provide both more control and lower overhead for the import process itself.

Examples for the **FLAT** and the **NESTED** versions of the payload are listed below.

#### ***FLAT*** payload { #flat-payload } 

```json
{
  "trackedEntities": [
    {
      "orgUnit": "y77LiPqLMoq",
      "trackedEntity": "Kj6vYde4LHh",
      "trackedEntityType": "nEenWmSyUEp"
    },
    {
      "orgUnit": "y77LiPqLMoq",
      "trackedEntity": "Gjaiu3ea38E",
      "trackedEntityType": "nEenWmSyUEp"
    }
  ],
  "enrollments": [
    {
      "enrolledAt": "2019-08-19T00:00:00.000",
      "enrollment": "MNWZ6hnuhSw",
      "occurredAt": "2019-08-19T00:00:00.000",
      "orgUnit": "y77LiPqLMoq",
      "program": "IpHINAT79UW",
      "status": "ACTIVE",
      "trackedEntity": "Kj6vYde4LHh",
      "trackedEntityType": "nEenWmSyUEp"
    }
  ],
  "events": [
    {
      "attributeCategoryOptions": "xYerKDKCefk",
      "attributeOptionCombo": "HllvX50cXC0",
      "dataValues": [
        {
          "dataElement": "bx6fsa0t90x",
          "value": "true"
        },
        {
          "dataElement": "UXz7xuGCEhU",
          "value": "5.7"
        }
      ],
      "enrollment": "MNWZ6hnuhSw",
      "enrollmentStatus": "ACTIVE",
      "event": "ZwwuwNp6gVd",
      "occurredAt": "2019-08-01T00:00:00.000",
      "orgUnit": "y77LiPqLMoq",
      "program": "IpHINAT79UW",
      "programStage": "A03MvHHogjR",
      "scheduledAt": "2019-08-19T13:59:13.688",
      "status": "ACTIVE",
      "trackedEntity": "Kj6vYde4LHh"
    },
    {
      "attributeCategoryOptions": "xYerKDKCefk",
      "attributeOptionCombo": "HllvX50cXC0",
      "enrollment": "MNWZ6hnuhSw",
      "enrollmentStatus": "ACTIVE",
      "event": "XwwuwNp6gVE",
      "occurredAt": "2019-08-01T00:00:00.000",
      "orgUnit": "y77LiPqLMoq",
      "program": "IpHINAT79UW",
      "programStage": "ZzYYXq4fJie",
      "scheduledAt": "2019-08-19T13:59:13.688",
      "status": "ACTIVE",
      "trackedEntity": "Kj6vYde4LHh"
    }
  ],
  "relationships": [
    {
      "from": {
        "trackedEntity": {
          "trackedEntity": "Kj6vYde4LHh"
        }
      },
      "relationshipType": "dDrh5UyCyvQ",
      "to": {
        "trackedEntity": {
          "trackedEntity": "Gjaiu3ea38E"
        }
      }
    }
  ]
}
```

#### ***NESTED*** payload { #nested-payload } 

```json
{
  "trackedEntities": [
    {
      "enrollments": [
        {
          "attributes": [
            {
              "attribute": "zDhUuAYrxNC",
              "displayName": "Last name",
              "value": "Kelly"
            },
            {
              "attribute": "w75KJ2mc4zz",
              "displayName": "First name",
              "value": "John"
            }
          ],
          "enrolledAt": "2019-08-19T00:00:00.000",
          "events": [
            {
              "attributeCategoryOptions": "xYerKDKCefk",
              "attributeOptionCombo": "HllvX50cXC0",
              "dataValues": [
                {
                  "dataElement": "bx6fsa0t90x",
                  "value": "true"
                },
                {
                  "dataElement": "UXz7xuGCEhU",
                  "value": "5.7"
                }
              ],
              "enrollmentStatus": "ACTIVE",
              "notes": [
                {
                  "value": "need to follow up"
                }
              ],
              "occurredAt": "2019-08-01T00:00:00.000",
              "orgUnit": "y77LiPqLMoq",
              "program": "IpHINAT79UW",
              "programStage": "A03MvHHogjR",
              "scheduledAt": "2019-08-19T13:59:13.688",
              "status": "ACTIVE"
            }
          ],
          "occurredAt": "2019-08-19T00:00:00.000",
          "orgUnit": "y77LiPqLMoq",
          "program": "IpHINAT79UW",
          "status": "ACTIVE",
          "trackedEntityType": "nEenWmSyUEp"
        }
      ],
      "orgUnit": "y77LiPqLMoq",
      "trackedEntityType": "nEenWmSyUEp"
    }
  ]
}
```

### SYNC and ASYNC { #sync-and-async } 

For the user, the main difference between importing synchronously rather than asynchronously is the
immediate response from the API. For the synchronous import, the response will be returned as soon
as the import finishes with the importSummary. However, for asynchronous imports, the response will
be immediate and contain a reference where the client can poll for updates to the import.

For significant imports, it might be beneficial for the client to use the asynchronous import to
avoid waiting too long for a response.

Examples of the **ASYNC** response is shown below. For **SYNC** response, look at the [importSummary
section](#webapi_nti_import_summary).

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Tracker job added",
  "response": {
    "id": "cHh2OCTJvRw",
    "location": "https://play.im.dhis2.org/dev/api/tracker/jobs/cHh2OCTJvRw"
  }
}
```

### CSV Events payload { #csv-events-payload } 

In order to maintain compatibility with older versions of tracker, the API allows to import events
using the CSV format. As this format does not allow list as field, every row of the CSV payload
represents an event and a data value. So for events with multiple data values, the CSV file will
have `x` rows per event where `x` is the number of data values in that event. Other fields that are
lists as ***relationships*** and ***notes*** are not supported. To import a CSV payload, the content
type of the request must be set to ***application/csv*** or ***text/csv***.

#### ***CSV PAYLOAD*** example { #csv-payload-example } 

|událost|status|program|programStage|zápis|orgUnit|occurredAt|scheduledAt|dataElement|value|storedBy|providedElsewhere
|---|---|---|---|---|---|---|---|---|---|---|---|
|V1CerIi3sdL|COMPLETED|IpHINAT79UW|A03MvHHogjR|CCBLMntFuzb|DiszpKrYNg8|2020-02-26T23:00:00Z|2020-02-27T23:00:00Z|a3kGcGDCuk6|11|admin|false
|V1CerIi3sdL|COMPLETED|IpHINAT79UW|A03MvHHogjR|CCBLMntFuzb|DiszpKrYNg8|2020-02-26T23:00:00Z|2020-02-27T23:00:00Z|mB2QHw1tU96|[-11.566044,9.477801]|admin|false

### Souhrn importu { #webapi_nti_import_summary }

The Tracker API has two primary endpoints for consumers to acquire feedback from their imports.
These endpoints are most relevant for async import jobs but are available for sync jobs as well.
These endpoints will return either the log related to the import or the import summary itself.

> **Note**
>
> These endpoints rely on information stored in the application memory. This means the information
> will be unavailable after certain cases, as an application restart or after a large number of
> import requests have started after this one.

After submitting a tracker import request, we can access the following endpoints in order to monitor
the job progress based on logs:

`GET /tracker/jobs/{uid}`

| Parametr|Popis|Příklad
|---|---|---|
|`{uid}`| UID existující úlohy importu trackeru | ABCDEF12345

#### ***REQUEST*** example { #request-example } 

`GET /tracker/jobs/PQK63sMwjQp`

#### ***RESPONSE*** example { #response-example } 

```json
[
  {
    "uid": "PQK63sMwjQp",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.370",
    "message": "Import complete with status OK, 0 created, 0 updated, 0 deleted, 0 ignored",
    "completed": true,
    "id": "PQK63sMwjQp"
  },
  {
    "uid": "XIfTJ1UUNcd",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.369",
    "message": "PostCommit",
    "completed": false,
    "id": "XIfTJ1UUNcd"
  },
  {
    "uid": "uCG4FNJLLBJ",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.364",
    "message": "Commit Transaction",
    "completed": false,
    "id": "uCG4FNJLLBJ"
  },
  {
    "uid": "xfOUv2Lk2MC",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.361",
    "message": "Running Rule Engine Validation",
    "completed": false,
    "id": "xfOUv2Lk2MC"
  },
  {
    "uid": "cSPfA776obb",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.325",
    "message": "Running Rule Engine",
    "completed": false,
    "id": "cSPfA776obb"
  },
  {
    "uid": "mru3HJrFGKA",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.313",
    "message": "Running Validation",
    "completed": false,
    "id": "mru3HJrFGKA"
  },
  {
    "uid": "oTbCUJ2RnA6",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.312",
    "message": "Running PreProcess",
    "completed": false,
    "id": "oTbCUJ2RnA6"
  },
  {
    "uid": "lcUNbWTn6uh",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:16.312",
    "message": "Calculating Payload Size",
    "completed": false,
    "id": "lcUNbWTn6uh"
  },
  {
    "uid": "l4jQiSS9qdK",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:15.903",
    "message": "Running PreHeat",
    "completed": false,
    "id": "l4jQiSS9qdK"
  },
  {
    "uid": "qGbiuqgwPX5",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:15.850",
    "message": "Loading file content",
    "completed": false,
    "id": "qGbiuqgwPX5"
  },
  {
    "uid": "eWNHzVf7iAj",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:15.838",
    "message": "Loading file resource",
    "completed": false,
    "id": "eWNHzVf7iAj"
  },
  {
    "uid": "t9gOjotekQt",
    "level": "INFO",
    "category": "TRACKER_IMPORT_JOB",
    "time": "2024-03-19T13:18:15.837",
    "message": "Tracker import started",
    "completed": false,
    "dataType": "PARAMETERS",
    "data": {
      "userId": "xE7jOejl9FI",
      "importMode": "VALIDATE",
      "idSchemes": {
        "dataElementIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "orgUnitIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "programIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "programStageIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "idScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "categoryOptionComboIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        },
        "categoryOptionIdScheme": {
          "idScheme": "UID",
          "attributeUid": null
        }
      },
      "importStrategy": "CREATE_AND_UPDATE",
      "atomicMode": "ALL",
      "flushMode": "AUTO",
      "validationMode": "FULL",
      "skipPatternValidation": false,
      "skipSideEffects": false,
      "skipRuleEngine": false,
      "filename": null,
      "reportMode": "ERRORS"
    },
    "id": "t9gOjotekQt"
  }
]
```

Additionally, the following endpoint will return the import summary of the import job. This import
summary will only be available after the import has completed:

`GET /tracker/jobs/{uid}/report`

| Parametr|Popis|Příklad
|---|---|---|
|path `/{uid}`|The UID of an existing tracker import job.|ABCDEF12345|
|`reportMode`|The level of detail the report should have.|`FULL`&#124;`ERRORS`&#124;`WARNINGS`|

#### ***REQUEST*** example { #request-example } 

`GET /tracker/jobs/mEfEaFSCKCC/report`

#### ***RESPONSE*** example { #response-example } 

The response payload is the same as the one returned after a sync import request.

> **Note**
>
> Both endpoints are used primarily for async import; however, `GET /tracker/jobs/{uid}` would also
> work for sync requests as it eventually uses the same import process and logging as async
> requests.

### Import Summary Structure { #import-summary-structure } 

Souhrny importu mají v závislosti na požadovaném `reportMode` následující celkovou strukturu:

```json
{
  "status": "OK",
  "validationReport": {
    "errorReports": [],
    "warningReports": []
  },
  "stats": {
    "created": 3,
    "updated": 0,
    "deleted": 0,
    "ignored": 0,
    "total": 3
  },
  "bundleReport": {
    "typeReportMap": {
      "EVENT": {
        "trackerType": "EVENT",
        "stats": {
          "created": 1,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 1
        },
        "objectReports": [
          {
            "trackerType": "EVENT",
            "uid": "gTZBPT3Jq39",
            "errorReports": []
          }
        ]
      },
      "ENROLLMENT": {
        "trackerType": "ENROLLMENT",
        "stats": {
          "created": 1,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 1
        },
        "objectReports": [
          {
            "trackerType": "ENROLLMENT",
            "uid": "ffcvJvWjiNZ",
            "errorReports": []
          }
        ]
      },
      "RELATIONSHIP": {
        "trackerType": "RELATIONSHIP",
        "stats": {
          "created": 0,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 0
        },
        "objectReports": []
      },
      "TRACKED_ENTITY": {
        "trackerType": "TRACKED_ENTITY",
        "stats": {
          "created": 1,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 1
        },
        "objectReports": [
          {
            "trackerType": "TRACKED_ENTITY",
            "uid": "aVcGf9iO8Xp",
            "errorReports": []
          }
        ]
      }
    }
  }
}
```

***status***

The property, `status`, of the import summary indicates the overall status of the import. If no
errors or warnings were raised during the import, the `status` is reported as `OK`. The presence of
any error or warnings in the import will result in a status of type `ERROR` or `WARNING`.

`status` is based on the presence of the most significant `validationReport`. `ERROR` has the
highest significance, followed by `WARNING` and finally `OK`. This implies that `ERROR` is reported
as long as a single error was found during the import, regardless of how many warnings occurred.

> **Note**
>
> If the import is performed using the AtomicMode "OBJECT", where the import will import any data
> without validation errors, the overall status will still be `ERROR` if any errors were found.

***validationReport***

The `validationReport` might include `errorReports` and `warningReports` if any errors or warnings
were present during the import. When present, they provide a detailed list of any errors or warnings
encountered.

Například chyba ověření při importu `TRACKED_ENTITY`:

```json
{
  "validationReport": {
    "errorReports": [
      {
        "message": "Could not find TrackedEntityType: `Q9GufDoplCL`.",
        "errorCode": "E1005",
        "trackerType": "TRACKED_ENTITY",
        "uid": "Kj6vYde4LHh"
      },
      ...
    ],
    "warningReports" : [ ... ]
  }
}
```

The report contains a message and a code describing the actual error (See the [error
codes](#error-codes) section for more information about errors). Additionally, the report includes
the `trackerType` and `uid`, which aims to describe where in the data the error was found. In this
case, there was a `TRACKED_ENTITY` with the uid `Kj6vYde4LHh`, which had a reference to a tracked
entity type that was not found.

> **Note**
>
> When referring to the `uid` of tracker objects, they are labeled as their object names in the
> payload. For example, the `uid` of a tracked entity would in the payload have the name
> "trackedEntity". The same goes for "enrollment", "event" and "relationship" for enrollments,
> events, and relationships, respectively.
>
> If no uid is provided in the payload, the import process will generate new uids. This means the
> error report might refer to a uid that does not exist in your payload.
>
> Errors represent issues with the payload which the importer can not circumvent. Any errors will
> block that data from being imported. Warnings, on the other hand, are issues where it's safe to
> circumvent them, but the user should be made aware that it happened. Warnings will not block data
> from being imported.

***stats***

The stats provide a quick overview of the import. After an import is completed, these will be the
actual counts representing how much data was created, updated, deleted, or ignored.

Příklad:

```json
{
  "stats": {
    "created": 2,
    "updated": 2,
    "deleted": 1,
    "ignored": 5,
    "total": 10
  }
}
```

`created` refers to how many new objects were created. In general, objects without an existing uid
in the payload will be treated as new objects.

`updated` refers to the number of objects updated. If an object has a uid set in the payload, it
will be treated as an update as long as that same uid exists in the database.

`deleted` refers to the number of objects deleted during the import. Deletion only happens when the
import is configured to delete data and only then when the objects in the payload have existing uids
set.

`ignored` refers to objects that were not persisted. Objects can be ignored for several reasons, for
example trying to create something that already exists. Ignores should always be safe, so if
something was ignored, it was not necessary, or it was due to the configuration of the import.

***bundleReport***

When the import is completed, the `bundleReport` contains all the [tracker
objects](#tracker-objects) imported.

Například `TRACKED_ENTITY`:

```json
{
  "bundleReport": {
    "typeReportMap": {
      "TRACKED_ENTITY": {
        "trackerType": "TRACKED_ENTITY",
        "stats": {
          "created": 1,
          "updated": 0,
          "deleted": 0,
          "ignored": 0,
          "total": 1
        },
        "objectReports": [
          {
            "trackerType": "TRACKED_ENTITY",
            "uid": "aVcGf9iO8Xp",
            "errorReports": []
          }
        ]
      }
    }
  }
}
```

As seen, each type of tracker object will be reported, and each has its own stats and
`objectReports`. These `objectReports` will provide details about each imported object, like their
type, their uid, and any error or warning reports is applicable.

***message***

If the import ended abruptly, the `message` would contain further information in relation to what
happened.

### Import Summary Report Level { #import-summary-report-level } 

As previously stated, `GET /tracker/jobs/{uid}/report` can be retrieved using a specific
`reportMode` parameter. By default the endpoint will return an `importSummary` with `reportMode`
`ERROR`.

| Parametr | Popis |
|---|---|
| `FULL` | Vrátí vše z `WARNINGS` plus `timingsStats` |
| `WARNINGS` | Vrátí vše z `ERRORS` plus `warningReports` v `validationReports` |
| `ERRORS` (výchozí) | Vrací pouze `errorReports` v `validationReports` |

In addition, all `reportModes` will return `status`, `stats`, `bundleReport` and `message` when
applicable.

### Kódy chyb { #webapi_nti_error_codes }

There are various error codes for different error scenarios. The following table has the list of
error codes thrown from the new Tracker API, along with the error messages and some additional
descriptions. The placeholders in the error messages (`{0}`,`{1}`,`{2}`..) are usually uids unless
otherwise specified.

| Chybový kód | Chybové hlášení | Popis |
|:--|:----|:----|
| E1000 | Uživatel: `{0}`, nemá přístup k zápisu do OrganisationUnit: `{1}`. | Obvykle to znamená, že organizační jednotka `{1}` není v rozsahu zachycení uživatele `{0}`, aby byla operace zápisu autorizována. |
| E1001 | Uživatel: `{0}`, nemá přístup k zápisu dat do TrackedEntityType: `{1}`. | The error occurs when the user is not authorized to create or modify data of the TrackedEntityType `{1}`  
| E1002 | TrackedEntity: `{0}`, already exists. | Tato chyba je vyvolána při pokusu o vytvoření nové TrackedEntity s již existujícím uid. Ujistěte se, že se při přidávání nové TrackedEntity používá nové uid. |
| E1005 | Nelze najít TrackedEntityType: `{0}`. | Error thrown when trying to fetch a non existing TrackedEntityType with uid `{0}` . This might also mean that the user does not have read access to the TrackedEntityType. |
| E1006 | Atribut: `{0}`, neexistuje. | Error thrown when the system was not able to find a matching TrackedEntityAttribute with uid `{0}`. This might also mean that the user does not have access to the TrackedEntityAttribute. |
| E1007 | Chyba při ověřování typu hodnoty atributu: `{0}`; Chyba: `{1}`. | Mismatch between value type of a TrackedEntityAttribute and its provided attribute value. The actual validation error will be displayed in `{1}`. |
| E1009 | Zdroj souboru: `{0}`, již byl přiřazen k jinému objektu. | Uid prostředku souboru `{0}` je již přiřazen k jinému objektu v systému. |
| E1010 | Nelze najít program: `{0}`, propojený s událostí. | Systém nemohl najít program s uid `{0}` zadaným uvnitř datové části události. To může také znamenat, že konkrétní Program není přihlášenému uživateli přístupný. |
| E1011 | Could not find OrganisationUnit: `{0}`, linked to Event. | Systém nemohl najít Organizační jednotku s uid `{0}` zadaným uvnitř datové části události.  |
| E1012 | Geometrie neodpovídá FeatureType: `{0}`. | Zadaný FeatureType je buď NONE, nebo je pro zadanou hodnotu geometrie nekompatibilní. |
| E1013 | Could not find ProgramStage: `{0}`, linked to Event. | The system was unable to find a ProgramStage with uid `{0}` specified inside the Event payload. This might also mean that the ProgramStage is not accessible to the logged in user.  |
| E1014 | Provided Program: `{0}`, is a Program without registration. An Enrollment cannot be created into Program without registration. | Enrollments can only be created for Programs with registration. |
| E1015 | TrackedEntity: `{0}`, already has an active Enrollment in Program `{1}`. | Cannot enroll into a Program if another active enrollment already exists for the Program. The active enrollment will have to be completed first at least.|
| E1016 | TrackedEntity: `{0}`, already has an active enrollment in Program: `{1}`, and this program only allows enrolling one time. | As per the Program `{1}` configuration, a TrackedEntity can only be enrolled into that Program once. It looks like the TrackedEntity `{0}` already has either an ACTIVE or COMPLETED enrollment in that Program. Hence another enrollment cannot be added. |
| E1018 | Attribute: `{0}`, is mandatory in program `{1}` but not declared in enrollment `{2}`. | Attribute value is missing in payload, for an attribute that is defined as mandatory for a Program. Make sure that attribute values for mandatory attributes are provided in the payload.  |
| E1019 | Only Program attributes is allowed for enrollment; Non valid attribute: `{0}`. | Attribute uid `{0}` specified in the enrollment payload is not associated with the Program.  |
| E1020 | Enrollment date: `{0}`, can`t be future date. | Cannot enroll into a future date unless the Program allows for it in its configuration. |
| E1021 | Incident date: `{0}`, can`t be future date. | Incident date cannot be a future date unless the Program allows for it in its configuration. |
| E1022 | TrackedEntity: `{0}`, must have same TrackedEntityType as Program `{1}`. | The Program is configured to accept TrackedEntityType uid that is different from what is provided in the enrollment payload. |
| E1023 | DisplayIncidentDate is true but property occurredAt is null or has an invalid format: `{0}`. | Program is configured with DisplayIncidentDate but its either null or an invalid date in the payload. |
| E1025 | Property enrolledAt is null or has an invalid format: `{0}`. | EnrolledAt Date is mandatory for an Enrollment. Make sure it is not null and has a valid date format. |
| E1029 | Event OrganisationUnit: `{0}`, and Program: `{1}`, don't match. | The Event payload uses a Program `{1}` which is not configured to be accessible by OrganisationUnit `{0}`. |
| E1030 | Událost: `{0}`, již existuje. | Tato chyba je vyvolána při pokusu o přidání nové události s již existujícím uid. Ujistěte se, že je při přidávání nové události použito nové uid. |
| E1031 | Datum události OccurredAt chybí. | Vlastnost OccuredAt je buď null, nebo má v datové části neplatný formát data. |
| E1032 | Událost: `{0}`, neexistuje. | |
| E1033 | Událost: `{0}`, hodnota zápisu je NULL. | |
| E1035 | Událost: `{0}`, hodnota ProgramStage je NULL. | |
| E1036 | Event: `{0}`, TrackedEntity does not point to a existing object. | Systém nemohl najít TrackedEntity s uid zadaným v datové části události. To může také znamenat, že uživatel nemá přístup ke čtení k TrackedEntity. |
| E1039 | ProgramStage: `{0}`, nelze opakovat a událost již existuje. | Událost pro ProgramStage pro konkrétní registraci již existuje. Protože je ProgramStage nakonfigurován jako neopakovatelný, nelze přidat další událost pro stejnou ProgramStage.  |
| E1041 | Zápis OrganisationUnit: `{0}` a Program: `{1}`, nesouhlasí. | The Enrollment payload contains a Program `{1}` which is not configured to be accessible by the OrganisationUnit  `{0}`. |
| E1042 | Událost: `{0}`, musí mít datum dokončení. | Pokud je program nakonfigurován tak, aby měl completeExpiryDays, je CompletedDate povinné pro datový obsah události COMPLETED. Událost se stavem COMPLETED by měla mít vlastnost CompleteDate jinou než nulovou a platný formát data. |
| E1048 | Objekt: `{0}`, uid: `{1}`, má neplatný formát uid. | A valid uid has 11 characters. The first character has to be an alphabet (a-z or A-Z) and the remaining 10 characters can be alphanumeric (a-z or A-Z or 0-9). |
| E1049 | Could not find OrganisationUnit: `{0}`, linked to Tracked Entity. | Systém nemohl najít Organizační jednotku s uid `{0}`. |
| E1050 | Event ScheduledAt date is missing. | ScheduledAt property in the Event payload is either missing or an invalid date format. |
| E1055 | Default AttributeOptionCombo is not allowed since program has non-default CategoryCombo. | The Program is configured to contain non-default CategoryCombo but the request uses the Default AttributeOptionCombo. |
| E1056 | Event date: `{0}`, is before start date: `{1}`, for AttributeOption: `{2}`. | The CategoryOption has a start date configured , the Event date in the payload cannot be earlier than this start date. |
| E1057 | Event date: `{0}`, is after end date: `{1}`, for AttributeOption; `{2}`. | The CategoryOption has an end date configured, the Event date in the payload cannot be later than this end date.  |
| E1063 | TrackedEntity: `{0}`, does not exist. | Error thrown when trying to fetch a non existing TrackedEntity with uid `{0}` . This might also mean that the user does not have read access to the TrackedEntity. |
| E1064 | Non-unique attribute value `{0}` for attribute `{1}` | The attribute value has to be unique within the defined scope. The error indicates that the attribute value already exists for another TrackedEntity. |
| E1068 | Could not find TrackedEntity: `{0}`, linked to Enrollment. | The system could not find the TrackedEntity specified in the Enrollment payload. This might also mean that the user does not have read access to the TrackedEntity. |
| E1069 | Could not find Program: `{0}`, linked to Enrollment. | The system could not find the Program specified in the Enrollment payload. This might also mean that the user does not have read access to the Program. |
| E1070 | Could not find OrganisationUnit: `{0}`, linked to Enrollment. | The system could not find the OrganisationUnit specified in the Enrollment payload. |
| E1074 | FeatureType is missing. | |
| E1075 | Atribut: `{0}`, chybí uid. | |
| E1076 | `{0}` `{1}` is mandatory and can't be null | |
| E1077 | Attribute: `{0}`, text value exceed the maximum allowed length: `{0}`. | |
| E1080 | Enrollment: `{0}`, already exists. | Tato chyba je vyvolána při pokusu o vytvoření nového Zápisu s již existujícím uid. Při přidávání nového Zápisu se ujistěte, že je použito nové uid. |
| E1081 | Zápis: `{0}`, neexistuje. | Error thrown when trying to fetch a non existing Enrollment with uid `{0}` . This might also mean that the user does not have read access to the Enrollment. |
| E1082 | Event: `{0}`, is already deleted and can't be modified. | If the event is soft deleted, no modifications on it are allowed. |
| E1083 | User: `{0}`, is not authorized to modify completed events. | Only a super user or a user with the authority "F_UNCOMPLETE_EVENT" can modify completed events. Completed Events are those Events with status as COMPLETED. |
| E1084 | File resource: `{0}`, reference could not be found. | |
| E1085 | Attribute: `{0}`, value does not match value type: `{1}`. | Mismatch between value type of an attribute and its provided attribute value. |
| E1089 | Event: `{0}`, references a Program Stage `{1}` that does not belong to Program `{2}`. | The ProgramStage uid and Program uid in the Event payload is incompatible. |
| E1090 | Atribut: `{0}`, je povinný v typu trasované entity `{1}`, ale není deklarován ve trasované entitě `{2}`. | The payload has missing values for mandatory TrackedEntityTypeAttributes. |
| E1091 | User: `{0}`, has no data write access to Program: `{1}`. | The Program sharing configuration is such that, the user does not have write access for this Program. |
| E1095 | User: `{0}`, has no data write access to ProgramStage: `{1}`. | The ProgramStage sharing configuration is such that, the user does not have write access for this ProgramStage.  |
| E1096 | User: `{0}`, has no data read access to Program: `{1}`. | The Program sharing configuration is such that, the user does not have read access for this Program. |
| E1099 | User: `{0}`, has no write access to CategoryOption: `{1}`. | The CategoryOption sharing configuration is such that, the user does not have write access for this CategoryOption |
| E1100 | User: `{0}`, is lacking 'F_TEI_CASCADE_DELETE' authority to delete TrackedEntity: `{1}`. | There exists undeleted Enrollments for this TrackedEntity. If the user does not have 'F_TEI_CASCADE_DELETE' authority, then these Enrollments has to be deleted first explicitly to be able to delete the TrackedEntity. |
| E1102 | User: `{0}`, does not have access to the tracked entity: `{1}`, Program: `{2}`, combination. | This error is thrown when the user's OrganisationUnit does not have the ownership of this TrackedEntity for this specific Program. The owning OrganisationUnit of the TrackedEntity-Program combination should fall into the capture scope (in some cases the search scope) of the user. |
| E1103 | User: `{0}`, is lacking 'F_ENROLLMENT_CASCADE_DELETE' authority to delete Enrollment : `{1}`. | Pro tento zápis existují nesmazané události. Pokud uživatel nemá oprávnění 'F_ENROLLMENT_CASCADE_DELETE', musí být tyto události nejprve explicitně vymazány, aby bylo možné vymazat zápis. |
| E1104 | User: `{0}`, has no data read access to program: `{1}`, TrackedEntityType: `{2}`. | The sharing configuration of the TrackedEntityType associated with the Program is such that, the user does not have data read access to it. |
| E1112 | Attribute value: `{0}`, is set to confidential but system is not properly configured to encrypt data. | Either JCE files is missing or the configuration property `encryption.password` might be missing in `dhis.conf`. |
| E1113 | Enrollment: `{0}`, is already deleted and can't be modified. | If the Enrollment is soft deleted, no modifications on it are allowed. |
| E1114 | TrackedEntity: `{0}`, is already deleted and can't be modified. | If the TrackedEntity is soft deleted, no modifications on it are allowed. |
| E1115 | Could not find CategoryOptionCombo: `{0}`. | |
| E1116 | Could not find CategoryOption: `{0}`. | This might also mean the CategoryOption is not accessible to the user.|
| E1117 | CategoryOptionCombo does not exist for given category combo and category options: `{0}`. | |
| E1118 | Assigned user `{0}` is not a valid uid. | |
| E1119 | A Tracker Note with uid `{0}` already exists. | |
| E1120 | ProgramStage `{0}` does not allow user assignment | Datový obsah události má assignedUserId, ale ProgramStage není nakonfigurován tak, aby umožňoval přiřazení uživatele. |
| E1121 | Missing required tracked entity property: `{0}`. | |
| E1122 | Missing required enrollment property: `{0}`. | |
| E1123 | Missing required event property: `{0}`. | |
| E1124 | Missing required relationship property: `{0}`. | |
| E1125 | Value `{0}` is not a valid option for `{1}` `{2}` in option set `{3}` | |
| E1017 | Atribut: `{0}`, neexistuje. | |
| E1093 | User: `{0}`, has no search access to OrganisationUnit: `{1}`. | |
| E1094 | Not allowed to update Enrollment: `{0}`, existing Program `{1}`. | The Enrollment payload for an existing Enrollment has a different Program uid than the one it was originally enrolled with. |
| E1110 | Not allowed to update Event: `{0}`, existing Program `{1}`. | Datový obsah události pro existující událost má jiné uid programu než to, se kterým byla původně vytvořena.  |
| E1111 | We have a generated attribute: `{0}`, but no pattern. | |
| E1043 | Event: `{0}`, completeness date has expired. Not possible to make changes to this event. | A user without 'F_EDIT_EXPIRED' authority cannot update an Event that has passed its expiry days as configured in its Program. |
| E1046 | Event: `{0}`, needs to have at least one (event or schedule) date. | Either of occuredAt or scheduledAt property should be present in the Event payload. |
| E1047 | Event: `{0}`, date belongs to an expired period. It is not possible to create such event. | Event occuredAt or scheduledAt has a value that is earlier than the PeriodType start date.  |
| E1300 | Generated by program rule (`{0}`) - `{1}` | |
| E1302 | Generated by program rule (`{0}`) - DataElement `{1}` is not valid: `{2}` | |
| E1303 | Generated by program rule (`{0}`) - Mandatory DataElement `{1}` is not present | |
| E1304 | Generated by program rule (`{0}`) - DataElement `{1}` is not a valid data element | |
| E1305 | Generováno programovým pravidlem (`{0}`) – DataElement `{1}` není součástí programové fáze `{2}` | |
| E1306 | Vygenerováno programovým pravidlem (`{0}`) – povinný atribut `{1}` není přítomen | |
| E1307 | Generováno programovým pravidlem (`{0}`) – Nelze přiřadit hodnotu datovému prvku `{1}`. Zadaná hodnota musí být prázdná nebo odpovídat vypočítané hodnotě `{2}` | |
| E1308 | Generováno programovým pravidlem (`{0}`) – DataElement `{1}` je nahrazen v události `{2}` | |
| E1309 | Generováno programovým pravidlem (`{0}`) – Nelze přiřadit hodnotu atributu `{1}`. Zadaná hodnota musí být prázdná nebo odpovídat vypočítané hodnotě `{2}` | |
| E1310 | Generováno programovým pravidlem (`{0}`) - Atribut `{1}` je nahrazen v tei `{2}` | |
| E4000 | Vztah: `{0}` nemůže odkazovat sám na sebe | |
| E4001 | Položka vztahu `{0}` pro vztah `{1}` je neplatná: Položka může propojit pouze jednu entitu sledování. | |
| E4006 | Nelze najít vztah Typ: `{0}`. | |
| E4009 | Typ vztahu `{0}` není platný. | |
| E4010 | Omezení typu vztahu `{0}` vyžaduje {1}, ale bylo nalezeno {2}. | |
| E4011 | Vztah: `{0}` nelze uchovat, protože {1} {2}, na které odkazuje tento vztah, není platné. | |
| E4012 | Nelze najít `{0}`: `{1}`, propojený s Relationship. | |
| E4013 | Chybí omezení typu vztahu `{0}` {1}. | |
| E4014 | Omezení typu vztahu `{0}` vyžaduje sledovanou entitu typu `{1}`, ale bylo nalezeno `{2}`. | |
| E4062 | Start date or end date not specified with ABSOLUTE date period type for item `{0}` | |
| E4063 | Assigned users cannot be empty when assigned user mode is set to PROVIDED | |
| E4064 | Organisation unit cannot be empty with `{0}` org unit mode | |
| E4065 | Data item UID is missing in filter | |
| E4066 | No data element found for item: `{0}` | |
| E4067 | Attribute UID is missing in filter | |
| E4068 | No tracked entity attribute found for attribute: `{0}` | |
| E9999 | Nedostupné | Nedefinovaná chybová zpráva. |

### Ověření { #webapi_nti_validation }

While importing data using the tracker importer, a series of validations are performed to ensure the
validity of the data. This section will describe some of the different types of validation performed
to provide a better understanding if validation fails for your import.

#### Required properties { #required-properties } 

Each of the tracker objects has a few required properties that need to be present when importing
data. For an exhaustive list of required properties, have a look at the [Tracker Object
section](#webapi_nti_tracker_objects).

When validating required properties, we are usually talking about references to other data or
metadata. In these cases, there are three main criteria:

1. Reference je přítomna a není nulová v užitečném zatížení.
2. Odkaz ukazuje na správný typ dat a existuje v databázi
3. Uživatel má přístup k zobrazení reference

If the first condition fails, the import will fail with a message about a missing reference.
However, suppose the reference points to something that doesn't exist or which the user cannot
access. In that case, both cases will result in a message about the reference not being found.

#### Formats { #formats } 

Some of the properties of tracker objects require a specific format. When importing data, each of
these properties is validated against the expected format and will return different errors depending
on which property has a wrong format. Some examples of properties that are validated this way:

- UID (Pokrývají všechny odkazy na jiná data nebo metadata v DHIS2.)
- Termíny
- Geometrie (souřadnice musí odpovídat formátu určenému jeho typem)

#### User access { #user-access } 

All data imported will be validated based on the metadata  ([Sharing](#webapi_nti_metadata_sharing))
and the organisation units ([Organisation Unit Scopes](#webapi_nti_orgunit_scope)) referenced in the
data. You can find more information about sharing and organisation unit scopes in the following
sections.

Sharing is validated at the same time as references are looked up in the database. Metadata outside
of the user's access will be treated as if it doesn't exist. The import will validate any metadata
referenced in the data.

Organisation units, on the other hand, serve a dual purpose. It will primarily make sure that data
can only be imported when imported for an organisation unit the user has within their "capture
scope". Secondly, organisation units are also used to restrict what programs are available. That
means if you are trying to import data for an organisation unit that does not have access to the
Program you are importing, the import will be invalid.

Users with the `ALL` authority will ignore the limits of sharing and organisation unit scopes when
they import data. However, they can not import enrollments in organisation units that do not have
access to the enrollment program.

#### Attribute and Data values { #attribute-and-data-values } 

Attributes and data values are part of a tracked entity and an event, respectively. However,
attributes can be linked to a tracked entity either through its type (TrackedEntityType) or its
Program (Program). Additionally, attributes can also be unique.

The initial validation done in the import is to make sure the value provided for an attribute or
data element conforms to the type of value expected. For example, suppose you import a value for a
data element with a numeric type. In that case, the value is expected to be numeric. Any errors
related to a mismatch between a type and a value will result in the same error code but with a
specific message related to the type of violation.

Mandatory attributes and data values are also checked. Currently, removing mandatory attributes is
not allowed. Some use-cases require values to be sent separately, while others require all values to
be sent as one. Programs can be configured to either validate mandatory attributes `ON_COMPLETE` or
`ON_UPDATE_AND_INSERT` to accommodate these use-cases.

The import will validate unique attributes at the time of import. That means as long as the provided
value is unique for the attribute in the whole system, it will pass. However, if the unique value is
fpound used by any other tracked entity other than the one being imported, it will fail.

#### Konfigurace { #configuration } 

The last part of validations in the importer are validations based on the user's configuration of
relevant metadata. For more information about each configuration, check out the relevant sections.
Some examples of configurable validations:

- Typ prvku (pro geometrii)
- Uživatelsky přiřaditelné události
- Povolit budoucí data
- Zapsat se jednou
- A více.

Tyto konfigurace dále změní způsob provádění ověřování během importu.

### Pravidla programu { #webapi_nti_program_rules }

Users can configure [Program Rules](#webapi_program_rules), which adds conditional behavior to
tracker forms. In addition to running these rules in the tracker apps, the tracker importer will
also run a selection of these rules. Since the importer is also running these rules, we can ensure
an additional level of validation.

Not all program rule actions are supported since they are only suitable for a frontend presentation.
A complete list of the supported program rule actions is presented below.

  |Akce programového pravidla|Podporováno|
  |---|:---:|
  |**DISPLAYTEXT**| |
  |**DISPLAYKEYVALUEPAIR**| |
  |**HIDEFIELD**||
  |**HIDESECTION**||
  |**ASSIGN**|**X**|
  |**SHOWWARNING**|**X**|
  |**SHOWERROR**|**X**|
  |**WARNINGONCOMPLETION**|**X**|
  |**ERRORONCOMPLETION**|**X**|
  |**CREATEEVENT**||
  |**SETMANDATORYFIELD**|**X**|
  |**SENDMESSAGE**|**X**|
  |**SCHEDULEMESSAGE**|**X**|

Program rules are evaluated in the importer in the same way they are evaluated in the Tracker apps.
To summarize, the following conditions are considered when enforcing the program rules:

* The program rule must be linked to the data being imported. For example, a program stage or a data
element.
* Podmínka programového pravidla musí být vyhodnocena jako true

Výsledky pravidel programu závisí na akcích definovaných v těchto pravidlech:

* Akce programových pravidel mohou skončit se 2 různými výsledky: Varování nebo Chyby.
  * Errors will make the validation fail, while the warnings will be reported as a message in the
  import summary.
    * Akce SHOWWARNING a WARNINGONCOMPLETION mohou generovat pouze varování.
    * SHOWERROR, ERRORONCOMPLETION, and SETMANDATORYFIELD actions can generate only Errors.
    * ASSIGN action can generate both Warnings and Errors.
      * When the action is assigning a value to an empty attribute/data element, a warning is
      generated.
      * When the action is assigning a value to an attribute/data element that already has the same
      value to be assigned, a warning is generated.
      * When the action is assigning a value to an attribute/data element that already has a value
      and the value to be assigned is different, an error is generated unless the
      `RULE_ENGINE_ASSIGN_OVERWRITE` system setting is set to true.

Additionally, program rules can also result in side-effects, like send and schedule messages. More
information about side effects can be found in the following section.

> **POZNÁMKA**
>
> Programová pravidla lze během importu přeskočit pomocí parametru `skipProgramRules`.

### Vedlejší účinky { #webapi_nti_side_effects }

After an import has been completed, specific tasks might be triggered as a result of the import.
These tasks are what we refer to as "Side effects". These tasks perform operations that do not
affect the import itself.

Side effects are tasks running detached from the import but are always triggered by an import. Since
side effects are detached from the import, they can fail even when the import is successful.
Additionally, side effects are only run when the import is successful, so they cannot fail the other
way around.

V současné době jsou podporovány následující vedlejší účinky:

|Vedlejší efekty|Podporováno|Popis|
|---|:---:|---|
|**Oznámení trackeru**|**X**| Updates can trigger notifications. Updates which trigger notifications are **enrollment**, **event update**, **event or enrollment completion**. |
|**Oznámení ProgramRule**|**X**| Pravidla programu mohou spouštět upozornění. Všimněte si, že tato upozornění jsou součástí efektů programových pravidel, které jsou generovány prostřednictvím modulu pravidel DHIS2.|

> **POZNÁMKA**
>
> Určité konfigurace mohou řídit provádění vedlejších účinků. Během importu lze nastavit příznak `skipSideEffects`, aby se vedlejší efekty zcela vynechaly. Tento parametr může být užitečný, pokud například importujete něco, na co nechcete spouštět upozornění.

### Přiřadit uživatele k událostem { #webapi_nti_user_event_assignment }

Specific workflows benefit from treating events like tasks, and for this reason, you can assign a
user to an event.

Assigning a user to an event will not change the access or permissions for users but will create a
link between the Event and the user. When an event has a user assigned, you can query events from
the API using the `assignedUser` field as a parameter.

When you want to assign a user to an event, you simply provide the UID of the user you want to
assign in the `assignedUser` field. See the following example:

```json
{
  ...
  "events": [
    {
      "event": "ZwwuwNp6gVd",
      "programStage": "nlXNK4b7LVr",
      "orgUnit": "O6uvpzGd5pu",
      "enrollment": "MNWZ6hnuhSw",
      "assignedUser" : "M0fCOxtkURr"
    }
  ],
  ...
}
```

In this example, the user with uid `M0fCOxtkURr` will be assigned to the Event with uid
`ZwwuwNp6gVd`. Only one user can be assigned to a single event.

To use this feature, the relevant program stage needs to have user assignment enabled, and the uid
provided for the user must refer to a valid, existing user.

## Tracker Export { #webapi_nti_export }

Tracker export endpoints allow you to retrieve the previously imported objects which are:

- **tracked entities**
- **events**
- **enrollments**
- **relationships**

> **NOTE**
>
> - All these endpoints currently support `JSON`. `CSV` is only supported by tracked entities and
>   events.

### Common request parameters { #common-request-parameters } 

The following endpoint supports standard parameters for pagination.

- **Tracked entities** `GET /api/tracker/trackedEntities`
- **Události** `GET /api/tracker/events`
- **Enrollments** `GET /api/tracker/enrollments`
- **Relationships** `GET /api/tracker/relationships`

#### Request parameters for pagination { #request-parameters-for-pagination } 

|Parametr požadavku|Typ|Povolené hodnoty|Popis|
|---|---|---|---|
|`page`|`Integer`|Any positive integer|Page number to return. Defaults to 1.|
|`pageSize`|`Integer`|Any positive integer|Page size. Defaults to 50.|
|`totalPages`|`Boolean`|`true`&#124;`false`|Indicates whether to return the total number of elements and pages. Defaults to `false` as getting the totals is an expensive operation.|
|`paging`|`Boolean`|`true`&#124;`false`|Indicates whether paging should be ignored and all rows should be returned. Defaults to `true`, meaning that by default all requests are paginated, unless `paging=false`.|
|`skipPaging` **deprecated for removal in version 42 use `paging`**|`Boolean`|`true`&#124;`false`|Indicates whether paging should be ignored and all rows should be returned. Defaults to `false`, meaning that by default all requests are paginated, unless `skipPaging=true`.|
|`order`|`String`|Comma-separated list of property name and sort direction pairs in format `propName:sortDirection`.<br><br>Example: `createdAt:desc`<br><br>**Note:** `propName` is case sensitive. Valid `sortDirections` are `asc` and `desc`. `sortDirection` is case-insensitive. `sortDirection` defaults to `asc` for properties or UIDs without explicit `sortDirection`.||

> **Caution**
>
> Be aware that the performance is directly related to the amount of data requested. Larger pages
> will take more time to return.

#### Request parameters for Organisational Unit selection mode { #request-parameters-for-organisational-unit-selection-mode } 

The available organisation unit selection modes are `SELECTED`, `CHILDREN`, `DESCENDANTS`,
`ACCESSIBLE`, `CAPTURE` and `ALL`. Each mode is explained in detail in [this
section](#webapi_nti_orgunit_scope).

#### Request parameter to filter responses { #webapi_nti_field_filter }

All export endpoints accept a `fields` parameter which controls which fields will be returned in the
JSON response. `fields` parameter accepts a comma separated list of field names or patterns. A few
possible `fields` filters are shown below. Refer to [Metadata field
filter](#webapi_metadata_field_filter) for a more complete guide on how to use `fields`.

##### Příklady { #examples } 

|Příklad parametru|Význam|
|:---|:---|
|`fields=*`|returns all fields|
|`fields=createdAt,uid`|only returns fields `createdAt` and `uid`|
|`fields=enrollments[*,!uid]`|returns all fields of `enrollments` except `uid`|
|`fields=enrollments[uid]`|only returns `enrollments` field `uid`|
|`fields=enrollments[uid,enrolledAt]`|only returns `enrollments` fields `uid` and `enrolledAt`|

### Tracked Entities (`GET /api/tracker/trackedEntities`) { #tracked-entities-get-apitrackertrackedentities } 

Dva koncové body jsou vyhrazeny trasovaným entitám:

- `GET /api/tracker/trackedEntities`
  - načte trasované entity odpovídající daným kritériím
- `GET /api/tracker/trackedEntities/{id}`
  - načte trasovanou entitu podle poskytnutého ID

#### Tracked Entities Collection endpoint `GET /api/tracker/trackedEntities` { #tracked-entities-collection-endpoint-get-apitrackertrackedentities } 

Účelem tohoto koncového bodu je načíst trasované entity odpovídající kritériím zadaným klientem.

Koncový bod vrátí seznam trasovaných entit, které odpovídají parametrům požadavku.

##### Požádat o syntaxi { #request-syntax } 

|Parametr požadavku|Typ|Povolené hodnoty|Popis|
|---|---|---|---|
|`filter`|`String`|Comma-separated values of attribute filters.|Narrows response to TEIs matching given filters. A filter is a colon separated property or attribute UID with optional operator and value pairs. Example: `filter=H9IlTX2X6SL:sw:A` with operator starts with `sw` followed by a value. Special characters like `+` need to be percent-encoded so `%2B` instead of `+`. Characters such as `:` (colon) or `,` (comma), as part of the filter value, need to be escaped by `/` (slash). Likewise, `/` needs to be escaped. Multiple operator/value pairs for the same property/attribute like `filter=AuPLng5hLbE:gt:438901703:lt:448901704` are allowed. Repeating the same attribute UID is not allowed. User needs access to the attribute to filter on it.|
|`orgUnits`|`String`|Comma-separated list of organisation unit `UID`s.|Only return tracked entities belonging to provided organisation units|
|`orgUnit` **deprecated for removal in version 42 use `orgUnits`**|`String`|Semicolon-separated list of organisation units `UID`s.|Only return tracked entities belonging to provided organisation units.|
|`orgUnitMode` see [orgUnitModes](#webapi_nti_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|Způsob výběru organizačních jednotek může být. Výchozí hodnota je `SELECTED`, což se týká pouze vybraných organizačních jednotek.|
|`ouMode` **deprecated for removal in version 42 use `orgUnitMode`** see [orgUnitModes](#webapi_nti_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|Způsob výběru organizačních jednotek může být. Výchozí hodnota je `SELECTED`, což se týká pouze vybraných organizačních jednotek.|
|`program`|`String`|Program `UID`|A program `UID` for which tracked entities in the response must be enrolled into.|
|`programStatus`|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`|The program status of the tracked entity in the given program.|
|`programStage`|`String`|`UID`|A program stage `UID` for which tracked entities in the response must have events for.|
|`followUp`|`Boolean`|`true`&#124;`false`|Indicates whether the tracked entity is marked for follow up for the specified program.|
|`updatedAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | Start date and time for last updated|
|`updatedBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | End date and time for last updated|
|`updatedWithin`|`Duration`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) | Vrátí TEI ne starší než zadaná doba trvání|
|`enrollmentEnrolledAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Start date and time for enrollment in the given program|
|`enrollmentEnrolledBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|End date and time for enrollment in the given program|
|`enrollmentOccurredAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Start date and time and time and time for occurred in the given program|
|`enrollmentOccurredBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|End date and time and time for occurred in the given program|
|`trackedEntityType`|`String`|UID typu trasované entity|Only returns tracked entities of given type.|
|`trackedEntities`|`String`|Comma-separated list of tracked entity `UID`s.|Filter the result down to a limited set of tracked entities using explicit uids of the tracked entities by using `trackedEntity=id1,id2`. This parameter will, at the very least, create the outer boundary of the results, forming the list of all tracked entities using the uids provided. If other parameters/filters from this table are used, they will further limit the results from the explicit outer boundary.|
|`trackedEntity` **deprecated for removal in version 42 use `trackedEntities`**|`String`|Semicolon-separated list of tracked entity `UID`s.|Filter the result down to a limited set of tracked entities using explicit uids of the tracked entities by using `trackedEntity=id1;id2`. This parameter will, at the very least, create the outer boundary of the results, forming the list of all tracked entities using the uids provided. If other parameters/filters from this table are used, they will further limit the results from the explicit outer boundary.|
|`assignedUserMode`|`String`|`CURRENT`&#124;`PROVIDED`&#124;`NONE`&#124;`ANY`|Restricts result to tracked entities with events assigned based on the assigned user selection mode. See table below "Assigned user modes" for explanations. |
|`assignedUsers`|`String`|Comma-separated list of user UIDs to filter based on events assigned to the users.|Filter the result down to a limited set of tracked entities with events that are assigned to the given user IDs by using `assignedUser=id1,id2`. This parameter will only be considered if `assignedUserMode` is either `PROVIDED` or `null`. The API will error out, if for example, `assignedUserMode=CURRENT` and `assignedUser=someId`.|
|`assignedUser` **deprecated for removal in version 42 use `assignedUsers`**|`String`|Semicolon-separated list of user UIDs to filter based on events assigned to the users.|Filter the result down to a limited set of tracked entities with events that are assigned to the given user IDs by using `assignedUser=id1;id2`.This parameter will only be considered if assignedUserMode is either `PROVIDED` or `null`. The API will error out, if for example, `assignedUserMode=CURRENT` and `assignedUser=someId`|
|`order`|`String`|Comma-separated list of property name or attribute or UID and sort direction pairs in format `propName:sortDirection`.|Supported values are `createdAt, createdAtClient, enrolledAt, inactive, trackedEntity, updatedAt, updatedAtClient`.|
|`eventStatus`|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`VISITED`&#124;`SCHEDULE`&#124;`OVERDUE`&#124;`SKIPPED`|Status of any events in the specified program|
|`eventOccurredAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Start date and time for Event for the given Program|
|`eventOccurredBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|End date and time for Event for the given Program|
|`includeDeleted`|`Boolean`|`true`&#124;`false`|Indicates whether to include soft-deleted elements|
|`potentialDuplicate`|`Boolean`|`true`&#124;`false`| Filter the result based on the fact that a TEI is a Potential Duplicate. true: return TEIs flagged as Potential Duplicates. false: return TEIs NOT flagged as Potential Duplicates. If omitted, we don't check whether a TEI is a Potential Duplicate or not. |

The available assigned user modes are explained in the following table.


Tabulka: Přiřazené uživatelské režimy

| Režim | Popis |
|---|---|
| CURRENT | Zahrnuje události přiřazené aktuálně přihlášenému uživateli. |
| PROVIDED | Includes events assigned to the user provided in the request. |
| NONE | Includes unassigned events only. |
| ANY | Includes all assigned events, doesn't matter who are they assigned to as long as they assigned to someone. |

V dotazu se nerozlišují velká a malá písmena. Pro parametry dotazu platí následující pravidla.

- At least one organisation unit must be specified using the `orgUnit`
  parameter (one or many), or `orgUnitMode=ALL` must be specified.

- Only one of the `program` and `trackedEntity` parameters can be
  specifikováno (nula nebo jedna).

- If `programStatus` is specified, then `program` must also be
  specifikováno.

- If `followUp` is specified, then `program` must also be specified.

- If `enrollmentEnrolledAfter` or `enrollmentEnrolledBefore` is specified then
  `program` must also be specified.

- Položky filtru lze zadat pouze jednou.

##### Example requests { #example-requests } 

A query for all tracked entities associated with a specific organisation unit and program can look
like this:

    GET /api/tracker/trackedEntities?program=IpHINAT79UW&orgUnits=DiszpKrYNg8

To query for tracked entities using one attribute with a filter and one attribute without a filter,
with one organisation unit using the descendant organisation unit query mode:

    GET /api/tracker/trackedEntities?program=IpHINAT79UW&orgUnits=DiszpKrYNg8&filter=w75KJ2mc4zz:EQ:John

Dotaz, kde je pro položku filtru zadáno více operandů a filtrů:

    GET /api/tracker/trackedEntities?orgUnits=DiszpKrYNg8&program=ur1Edk5Oe2n&filter=lw1SqmMlnfh:GT:150&filter=lw1SqmMlnfh:LT:190

A query filter with a value that needs escaping and will be interpreted as `:,/`:

    GET /api/tracker/trackedEntities?orgUnits=DiszpKrYNg8&program=ur1Edk5Oe2n&filter=lw1SqmMlnfh:EQ:/:/,//

Chcete-li zadat data zápisu programu jako součást dotazu:

    GET /api/tracker/trackedEntities?orgUnits=DiszpKrYNg8&program=IpHINAT79UW&fields=trackedEntity,enrollments[enrolledAt]&enrollmentEnrolledAfter=2024-01-01

To query on an attribute using multiple values in an *IN* filter:

    GET /api/tracker/trackedEntities?trackedEntityType=nEenWmSyUEp&orgUnits=DiszpKrYNg8&filter=w75KJ2mc4zz:IN:Scott;Jimmy;Santiago

K filtrování můžete použít řadu operátorů:

|Operátor|  Popis|
|---|---|
|`EQ`|Rovno|
|`GE`|Větší než nebo rovno|
|`GT`|Větší než|
|`IN`|Rovná se jedné z více hodnot oddělených ";"|
|`LE`|Menší nebo rovno|
|`LIKE`|Jako (shoda volného textu)|
|`LT`|Menší než|
|`NE`|Nerovná se|

##### Formát odpovědi { #response-format } 

Odpověď `JSON` může vypadat následovně.

Responses can be filtered on desired fields, see [Request parameter to filter
responses](#webapi_nti_field_filter)

```json
{
  "pager": {
    "page": 1,
    "pageSize": 1
  },
  "trackedEntities": [
    {
      "trackedEntity": "PQfMcpmXeFE",
      "trackedEntityType": "nEenWmSyUEp",
      "createdAt": "2014-03-06T05:49:28.256",
      "createdAtClient": "2014-03-06T05:49:28.256",
      "updatedAt": "2016-08-03T23:49:43.309",
      "orgUnit": "DiszpKrYNg8",
      "inactive": false,
      "deleted": false,
      "potentialDuplicate": false,
      "attributes": [
        {
          "attribute": "w75KJ2mc4zz",
          "code": "MMD_PER_NAM",
          "displayName": "First name",
          "createdAt": "2016-08-03T23:49:43.308",
          "updatedAt": "2016-08-03T23:49:43.308",
          "valueType": "TEXT",
          "value": "John"
        },
        {
          "attribute": "zDhUuAYrxNC",
          "displayName": "Last name",
          "createdAt": "2016-08-03T23:49:43.309",
          "updatedAt": "2016-08-03T23:49:43.309",
          "valueType": "TEXT",
          "value": "Kelly"
        }
      ]
    }
  ]
}
```

#### Tracked Entities single object endpoint `GET /api/tracker/trackedEntities/{uid}`

Účelem tohoto koncového bodu je načíst jednu trasovanou entitu s jejím uid.

##### Požádat o syntaxi { #request-syntax } 

`GET /api/tracker/trackedEntities/{uid}?program={programUid}&fields={fields}`

|Parametr požadavku|Typ|Povolené hodnoty|Popis|
|---|---|---|---|
|`uid`|`String`|`uid`|Return the tracked entity with specified `uid`|
|`program`|`String`|`uid`| Zahrnout atributy programu do odpovědi (pouze ty, ke kterým má uživatel přístup) |
|`fields`|`String`| Libovolný platný filtr polí (výchozí `*,!relationships,!enrollments,!events,!programOwners`) |Zahrnout do odpovědi zadané dílčí objekty|

##### Example requests { #example-requests } 

A query for a tracked entity:

    GET /api/tracker/trackedEntities/PQfMcpmXeFE

##### Formát odpovědi { #response-format } 

This endpoint supports returning sub-objects when the `fields` request parameter is passed when json
format is requested. In case of csv the `fields` request parameter has no effect and the response
will always contain the same fields, which are:

  - trackedEntity (Identifier)
  - trackedEntityType (Identifier)
  - createdAt (Datetime)
  - createdAtClient (Datetime)
  - updatedAt (Datetime)
  - updatedAtClient (Datetime)
  - orgUnit (Identifier)
  - inactive (boolean)
  - deleted (boolean)
  - potentialDuplicate (boolean)
  - geometry (WKT, https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry)
  - storedBy (String)
  - createdBy (Username of user)
  - updatedBy (Username of user)
  - attributes (each valid attribute listed as another column)

Příklad odpovědi json:

```json
{
  "trackedEntity": "PQfMcpmXeFE",
  "trackedEntityType": "nEenWmSyUEp",
  "createdAt": "2014-03-06T05:49:28.256",
  "createdAtClient": "2014-03-06T05:49:28.256",
  "updatedAt": "2016-08-03T23:49:43.309",
  "orgUnit": "DiszpKrYNg8",
  "inactive": false,
  "deleted": false,
  "potentialDuplicate": false,
  "attributes": [
    {
      "attribute": "w75KJ2mc4zz",
      "code": "MMD_PER_NAM",
      "displayName": "First name",
      "createdAt": "2016-08-03T23:49:43.308",
      "updatedAt": "2016-08-03T23:49:43.308",
      "valueType": "TEXT",
      "value": "John"
    },
    {
      "attribute": "zDhUuAYrxNC",
      "displayName": "Last name",
      "createdAt": "2016-08-03T23:49:43.309",
      "updatedAt": "2016-08-03T23:49:43.309",
      "valueType": "TEXT",
      "value": "Kelly"
    }
  ],
  "enrollments": [
    {
      "enrollment": "JMgRZyeLWOo",
      "createdAt": "2017-03-06T05:49:28.340",
      "createdAtClient": "2016-03-06T05:49:28.340",
      "updatedAt": "2017-03-06T05:49:28.357",
      "trackedEntity": "PQfMcpmXeFE",
      "program": "IpHINAT79UW",
      "status": "ACTIVE",
      "orgUnit": "DiszpKrYNg8",
      "enrolledAt": "2024-03-06T00:00:00.000",
      "occurredAt": "2024-03-04T00:00:00.000",
      "followUp": false,
      "deleted": false,
      "events": [
        {
          "event": "Zq2dg6pTNoj",
          "status": "ACTIVE",
          "program": "IpHINAT79UW",
          "programStage": "ZzYYXq4fJie",
          "enrollment": "JMgRZyeLWOo",
          "trackedEntity": "PQfMcpmXeFE",
          "relationships": [],
          "scheduledAt": "2023-03-10T00:00:00.000",
          "followUp": false,
          "deleted": false,
          "createdAt": "2017-03-06T05:49:28.353",
          "createdAtClient": "2016-03-06T05:49:28.353",
          "updatedAt": "2017-03-06T05:49:28.353",
          "attributeOptionCombo": "HllvX50cXC0",
          "attributeCategoryOptions": "xYerKDKCefk",
          "dataValues": [],
          "notes": [],
          "followup": false
        }
      ],
      "relationships": [],
      "attributes": [
        {
          "attribute": "w75KJ2mc4zz",
          "code": "MMD_PER_NAM",
          "displayName": "First name",
          "createdAt": "2016-08-03T23:49:43.308",
          "updatedAt": "2016-08-03T23:49:43.308",
          "valueType": "TEXT",
          "value": "John"
        },
        {
          "attribute": "zDhUuAYrxNC",
          "displayName": "Last name",
          "createdAt": "2016-08-03T23:49:43.309",
          "updatedAt": "2016-08-03T23:49:43.309",
          "valueType": "TEXT",
          "value": "Kelly"
        },
        {
          "attribute": "AuPLng5hLbE",
          "code": "National identifier",
          "displayName": "National identifier",
          "createdAt": "2016-08-03T23:49:43.301",
          "updatedAt": "2016-08-03T23:49:43.301",
          "valueType": "TEXT",
          "value": "245435245"
        },
        {
          "attribute": "ruQQnf6rswq",
          "displayName": "TB number",
          "createdAt": "2016-08-03T23:49:43.308",
          "updatedAt": "2016-08-03T23:49:43.308",
          "valueType": "TEXT",
          "value": "1Z 1F2 A84 59 4464 173 6"
        },
        {
          "attribute": "cejWyOfXge6",
          "displayName": "Gender",
          "createdAt": "2016-08-03T23:49:43.307",
          "updatedAt": "2016-08-03T23:49:43.307",
          "valueType": "TEXT",
          "value": "Male"
        },
        {
          "attribute": "VqEFza8wbwA",
          "code": "MMD_PER_ADR1",
          "displayName": "Address",
          "createdAt": "2016-08-03T23:49:43.307",
          "updatedAt": "2016-08-03T23:49:43.307",
          "valueType": "TEXT",
          "value": "Main street 2"
        }
      ],
      "notes": []
    }
  ],
  "programOwners": [
    {
      "orgUnit": "DiszpKrYNg8",
      "trackedEntity": "PQfMcpmXeFE",
      "program": "ur1Edk5Oe2n"
    },
    {
      "orgUnit": "DiszpKrYNg8",
      "trackedEntity": "PQfMcpmXeFE",
      "program": "IpHINAT79UW"
    }
  ]
}
```

### Enrollments (`GET /api/tracker/enrollments`) { #enrollments-get-apitrackerenrollments } 

Pro zápisy jsou vyhrazeny dva koncové body:

- `GET /api/tracker/enrollments`
    - načte zápisy odpovídající zadaným kritériím
- `GET /api/tracker/enrollments/{id}`
    - načte zápis podle poskytnutého ID

#### Enrollment Collection endpoint `GET /api/tracker/enrollments` { #enrollment-collection-endpoint-get-apitrackerenrollments } 

Vrátí seznam událostí na základě filtrů.

|Parametr požadavku|Typ|Povolené hodnoty|Popis|
|---|---|---|---|
|`orgUnits`|`String`|Comma-separated list of organisation unit `UID`s.|Only return enrollments belonging to provided organisation units.|
|`orgUnit` **deprecated for removal in version 42 use `orgUnits`**|`String`|Semicolon-separated list of organisation units `UID`s.|Only return enrollments belonging to provided organisation units.|
|`orgUnitMode` see [orgUnitModes](#webapi_nti_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|Způsob výběru organizačních jednotek může být. Výchozí hodnota je `SELECTED`, což se týká pouze vybraných organizačních jednotek.|
|`ouMode` **deprecated for removal in version 42 use `orgUnitMode`** see [orgUnitModes](#webapi_nti_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|Způsob výběru organizačních jednotek může být. Výchozí hodnota je `SELECTED`, což se týká pouze vybraných organizačních jednotek.|
|`program`|`String`|`uid`| Identifikátor programu|
|`programStatus`|`enum`| `ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`| Stav programu |
|`followUp`|`boolean`| `true`&#124;`false` | Follow up status of the tracked entity for the given program. Can be `true`&#124;`false` or omitted.|
|`updatedAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | Pouze zápisy aktualizované po tomto datu|
|`updatedWithin`|`Duration`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| Pouze zápisy aktualizované od daného data |
|`enrolledAfter`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|  Pouze zápisy novější než toto datum|
|`enrolledBefore`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| Pouze přihlášky starší než toto datum|
|`trackedEntityType`|`String`|`uid`| Identifikátor typu trasované entity|
|`trackedEntity`|`String`|`uid`| Identifier of tracked entity|
|`order`|`String`|Comma-separated list of property name or attribute or UID and sort direction pairs in format `propName:sortDirection`.|Supported fields: `completedAt, createdAt, createdAtClient, enrolledAt, updatedAt, updatedAtClient`.|
|`enrollments`|`String`|Comma-separated list of enrollment `UID`s.|Filter the result down to a limited set of IDs by using `enrollments=id1,id2`.|
|`enrollment` **deprecated for removal in version 42 use `enrollments`**|`String`|Semicolon-separated list of `uid`|Filter the result down to a limited set of IDs by using `enrollment=id1;id2`.|
|`includeDeleted`|`Boolean`| |Když je true, budou do výsledku dotazu zahrnuty měkké odstraněné události.|

V dotazu se nerozlišují velká a malá písmena. Následující pravidla platí pro parametry dotazu.

- At least one organisation unit must be specified using the `orgUnit` parameter (one or many), or
*orgUnitMode=ALL* must be specified.

- Only one of the *program* and *trackedEntity* parameters can be specified (zero or one).

- If *programStatus* is specified, then *program* must also be specified.

- If *followUp* is specified, then *program* must also be specified.

- If *enrolledAfter* or *enrolledBefore* is specified, then *program* must also be specified.

##### Example requests { #example-requests } 

Dotaz na všechny zápisy přidružené ke konkrétní organizační jednotce může vypadat takto:

    GET /api/tracker/enrollments?orgUnits=DiszpKrYNg8

To constrain the response to enrollments which are part of a specific program you can include a
program query parameter:

    GET /api/tracker/enrollments?orgUnits=O6uvpzGd5pu&orgUnitMode=DESCENDANTS&program=ur1Edk5Oe2n

Chcete-li zadat data zápisu programu jako součást dotazu:

    GET /api/tracker/enrollments?orgUnits=DiszpKrYNg8&program=M3xtLkYBlKI&enrolledAfter=2023-11-14&enrolledBefore=2024-02-07

To constrain the response to enrollments of a specific tracked entity you can include a tracked
entity query parameter:

    GET /api/tracker/enrollments?trackedEntity=ClJ3fn47c4s

To constrain the response to enrollments of a specific tracked entity you can include a tracked
entity query parameter, in In this case, we have restricted it to available enrollments viewable for
current user:

    GET /api/tracker/enrollments?orgUnitMode=ACCESSIBLE&trackedEntity=tphfdyIiVL6

##### Formát odpovědi { #response-format } 

Odpověď `JSON` může vypadat následovně.

```json
{
  "pager": {
    "page": 1,
    "pageSize": 1
  },
  "enrollments": [
    {
      "enrollment": "TRE0GT7eh7Q",
      "createdAt": "2019-08-21T13:28:00.056",
      "createdAtClient": "2018-11-13T15:06:49.009",
      "updatedAt": "2019-08-21T13:29:44.942",
      "updatedAtClient": "2019-08-21T13:29:44.942",
      "trackedEntity": "s4NfKOuayqG",
      "program": "M3xtLkYBlKI",
      "status": "COMPLETED",
      "orgUnit": "DiszpKrYNg8",
      "enrolledAt": "2023-11-13T00:00:00.000",
      "occurredAt": "2023-11-13T00:00:00.000",
      "followUp": false,
      "deleted": false,
      "storedBy": "healthworker1",
      "notes": []
    }
  ]
}
```

#### Koncový bod registrace jednoho objektu `GET /api/tracker/enrollments/{uid}`

Účelem tohoto koncového bodu je načíst jednu prohlášku s jejím uid.

##### Požádat o syntaxi { #request-syntax } 

`GET /api/tracker/enrollment/{uid}`

|Parametr požadavku|Typ|Povolené hodnoty|Popis|
|---|---|---|---|
|`uid`|`String`|`uid`|Vraťte registraci se zadaným `uid`|
|`fields`|`String`| Libovolný platný filtr polí (výchozí `*,!relationships,!events,!attributes`) |Include
specified sub-objects in the response|

##### Example requests { #example-requests } 

A query for an enrollment:

    GET /api/tracker/enrollments/JMgRZyeLWOo

##### Formát odpovědi { #response-format } 

```json
{
  "enrollment": "JMgRZyeLWOo",
  "createdAt": "2017-03-06T05:49:28.340",
  "createdAtClient": "2016-03-06T05:49:28.340",
  "updatedAt": "2017-03-06T05:49:28.357",
  "trackedEntity": "PQfMcpmXeFE",
  "program": "IpHINAT79UW",
  "status": "ACTIVE",
  "orgUnit": "DiszpKrYNg8",
  "enrolledAt": "2024-03-06T00:00:00.000",
  "occurredAt": "2024-03-04T00:00:00.000",
  "followUp": false,
  "deleted": false,
  "notes": []
}
```

### Events (`GET /api/tracker/events`) { #events-get-apitrackerevents } 

Two endpoints are dedicated to events:

- `GET /api/tracker/events`
    - načte události odpovídající zadaným kritériím
- `GET /api/tracker/events/{id}`
    - načte událost se zadaným ID

#### Events Collection endpoint `GET /api/tracker/events` { #events-collection-endpoint-get-apitrackerevents } 

Vrátí seznam událostí na základě poskytnutých filtrů.

|Parametr požadavku|Typ|Povolené hodnoty|Popis|
|---|---|---|---|
|`program`|`String`|`uid`| Identifikátor programu|
|`programStage`|`String`|`uid`| Identifikátor fáze programu|
|`programStatus`|`enum`| `ACTIVE`&#124;`COMPLETED`&#124;`CANCELLED`| Stav události v programu |
|`filter`|`String`|Čárkami oddělené hodnoty filtrů datových prvků|Narrows response to events matching given filters. A filter is a colon separated property or data element UID with optional operator and value pairs. Example: `filter=fazCI2ygYkq:eq:PASSIVE` with operator starts with `eq` followed by a value. Characters such as `:` (colon) or `,` (comma), as part of the filter value, need to be escaped by `/` (slash). Likewise, `/` needs to be escaped. Multiple operator/value pairs for the same property/data element like `filter=qrur9Dvnyt5:gt:70:lt:80` are allowed. Repeating the same data element UID is not allowed. User needs access to the data element to filter on it.|
|`filterAttributes`|`String`|Hodnoty filtrů atributů oddělené čárkami|Narrows response to TEIs matching given filters. A filter is a colon separated property or attribute UID with optional operator and value pairs. Example: `filter=H9IlTX2X6SL:sw:A` with operator starts with `sw` followed by a value. Special characters like `+` need to be percent-encoded so `%2B` instead of `+`. Characters such as `:` (colon) or `,` (comma), as part of the filter value, need to be escaped by `/` (slash). Likewise, `/` needs to be escaped. Multiple operator/value pairs for the same property/attribute like `filter=AuPLng5hLbE:gt:438901703:lt:448901704` are allowed. Repeating the same attribute UID is not allowed. User needs access to the attribute to filter on it.|
|`followUp`|`boolean`| `true`&#124;`false` | Zda je událost zvažována pro pokračování v programu. Výchozí hodnota je `true`|
|`trackedEntity`|`String`|`uid`|Identifier of tracked entity|
|`orgUnit`|`String`|`uid`|Identifikátor organizační jednotky|
|`orgUnitMode` see [orgUnitModes](#webapi_nti_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|Způsob výběru organizačních jednotek může být. Výchozí hodnota je `SELECTED`, což se týká pouze vybraných organizačních jednotek.|
|`ouMode` **deprecated for removal in version 42 use `orgUnitMode`** see [orgUnitModes](#webapi_nti_orgunit_scope)|`String`|`SELECTED`&#124;`CHILDREN`&#124;`DESCENDANTS`&#124;`ACCESSIBLE`&#124;`CAPTURE`&#124;`ALL`|Způsob výběru organizačních jednotek může být. Výchozí hodnota je `SELECTED`, což se týká pouze vybraných organizačních jednotek.|
|`status`|`String`|`ACTIVE`&#124;`COMPLETED`&#124;`VISITED`&#124;`SCHEDULE`&#124;`OVERDUE`&#124;`SKIPPED` | Stav události|
|`occurredAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | Filtrujte události, které nastaly po tomto datu.|
|`occurredBefore`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| Filtrujte události, které nastaly do tohoto data.|
|`scheduledAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | Filtr pro události, které byly naplánovány po tomto datu.|
|`scheduledBefore`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| Filtrujte události, které byly naplánovány před tímto datem.|
|`updatedAfter`|`DateTime`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)| Filtr pro události, které byly aktualizovány po tomto datu. Nelze použít společně s `updatedWithin`.|
|`updatedBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) | Filtrujte události, které byly do tohoto data aktualizovány. Nelze použít společně s `updatedWithin`.|
|`updatedWithin`|`Duration`| [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Durations)| Include only items which are updated within the given duration.<br><br> The format is [ISO-8601#Duration](https://en.wikipedia.org/wiki/ISO_8601#Durations)|
|`enrollmentEnrolledAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Start date and time for enrollment in the given program|
|`enrollmentEnrolledBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|End date and time for enrollment in the given program|
|`enrollmentOccurredAfter`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|Start date and time for occurred in the given program|
|`enrollmentOccurredBefore`|`DateTime`|[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)|End date and time for occurred in the given program|
|`dataElementIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| Schéma ID datového prvku pro export.|
|`categoryOptionComboIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| Category Option Combo ID scheme to use for export|
|`orgUnitIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| Organisation Unit ID scheme to use for export|
|`programIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| Program ID scheme to use for export|
|`programStageIdScheme`|`String`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| Schéma ID fáze programu, které se má použít pro export|
|`idScheme`|`string`| `UID`&#124;`CODE`&#124;`ATTRIBUTE:{ID}`| Umožňuje nastavit id schéma pro datový prvek, kombinaci možností kategorie, orgUnit, program a fázi programu najednou.|
|`order`|`String`|Comma-separated list of property name, attribute or data element UID and sort direction pairs in format `propName:sortDirection`.|Supported fields: `assignedUser, assignedUserDisplayName, attributeOptionCombo, completedAt, completedBy, createdAt, createdAtClient, createdBy, deleted, enrolledAt, enrollment, enrollmentStatus, event, followUp, followup (deprecated), occurredAt, orgUnit, program, programStage, scheduledAt, status, storedBy, trackedEntity, updatedAt, updatedAtClient, updatedBy`.|
|`events`|`String`|Comma-separated list of event `UID`s.|Filter the result down to a limited set of IDs by using `event=id1,id2`.|
|`event` **deprecated for removal in version 42 use `events`**|`String`|Semicolon-separated list of `uid`| Filter the result down to a limited set of IDs by using `event=id1;id2`.|
|`attributeCategoryCombo` (see note)|`String`|Attribute category combo identifier. Must be combined with `attributeCategoryOptions`.|
|`attributeCc` **deprecated for removal in version 42 use `attributeCategoryCombo`**|`String`|Attribute category combo identifier (must be combined with attributeCos)|
|`attributeCategoryOptions` (see note)|`String`|Comma-separated attribute category option identifiers. Must be combined with `attributeCategoryCombo`.|
|`attributeCos` **deprecated for removal in version 42 use `attributeCategoryOptions`**|`String`|Semicolon-separated attribute category option identifiers. Must be combined with `attributeCc`.|
|`includeDeleted`|`Boolean`| |  Když je true, budou do výsledku dotazu zahrnuty měkké odstraněné události.|
|`assignedUserMode`|`String`| `CURRENT`&#124;`PROVIDED`&#124;`NONE`&#124;`ANY`| Režim výběru přiřazeného uživatele|
|`assignedUsers`|`String`|Comma-separated list of user UIDs to filter based on events assigned to the users.|Filter the result down to a limited set of tracked entities with events that are assigned to the given user IDs by using `assignedUser=id1,id2`.This parameter will only be considered if `assignedUserMode` is either `PROVIDED` or `null`. The API will error out, if for example, `assignedUserMode=CURRENT` and `assignedUser=someId`.|
|`assignedUser` **deprecated for removal in version 42 use `assignedUsers`**|`String`|Semicolon-separated list of user UIDs to filter based on events assigned to the users.|Filter the result down to a limited set of tracked entities with events that are assigned to the given user IDs by using `assignedUser=id1;id2`.This parameter will only be considered if assignedUserMode is either `PROVIDED` or `null`. The API will error out, if for example, `assignedUserMode=CURRENT` and `assignedUser=someId`|

> **Note**
>
> If the query contains neither `attributeCategoryOptions` nor `attributeCategoryOptions`,
> the server returns events for all attribute option combos where the user has read access.

##### Example requests { #example-requests } 

Dotaz na všechny události s potomky konkrétní organizační jednotky:

    GET /api/tracker/events?orgUnit=YuQRtpLP10I&orgUnitMode=CHILDREN

The query for all events with all descendants of a particular organisation unit, implying all
organisation units in the sub-hierarchy:

    GET /api/tracker/events?orgUnit=O6uvpzGd5pu&orgUnitMode=DESCENDANTS

Dotaz na všechny události s určitou programovou a organizační jednotkou:

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc

Query for all events with a certain program and organisation unit, sorting by scheduled date
ascending:

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&order=scheduledAt

Query for the 10 events with the newest occurred date in a certain program and organisation unit -
by paging and ordering by occurred date descending:

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&order=occurredAt:desc&pageSize=10&page=1

Query for all events with a certain program and organisation unit for a specific tracked entity:

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=M3xtLkYBlKI&trackedEntity=dNpxRu1mWG5

Query for all events older or equal to 2024-02-03 and associated with a program and organisation
unit:

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&occurredBefore=2024-02-03

A query where multiple operand and filters are specified for a data element UID:

    GET /api/tracker/events?orgUnit=g8upMTyEZGZ&program=M3xtLkYBlKI&filter=rFQNCGMYud2:GT:35&filter=rFQNCGMYud2:LT:50

A query filter with a value that needs escaping and will be interpreted as `:,/`:

    GET /api/tracker/events?orgUnit=DiszpKrYNg8&program=lxAQ7Zs9VYR&filter=DanTR5x0WDK:EQ:/:/,//

##### Formát odpovědi { #response-format } 

Odpověď `JSON` může vypadat následovně.

```json
{
  "pager": {
    "page": 1,
    "pageSize": 1
  },
  "events": [
    {
      "event": "uup8whjPHyH",
      "status": "ACTIVE",
      "program": "M3xtLkYBlKI",
      "programStage": "CWaAcQYKVpq",
      "enrollment": "aOc1W0Xb7Yj",
      "trackedEntity": "neR4cmMY22o",
      "orgUnit": "g8upMTyEZGZ",
      "occurredAt": "2023-11-12T00:00:00.000",
      "scheduledAt": "2023-11-12T00:00:00.000",
      "storedBy": "josemp10",
      "followUp": false,
      "deleted": false,
      "createdAt": "2019-08-21T13:27:49.280",
      "createdAtClient": "2018-11-12T04:20:51.016",
      "updatedAt": "2019-08-21T13:29:37.255",
      "updatedAtClient": "2019-08-21T13:29:37.255",
      "attributeOptionCombo": "HllvX50cXC0",
      "attributeCategoryOptions": "xYerKDKCefk",
      "dataValues": [
        {
          "createdAt": "2019-08-21T13:27:49.328",
          "updatedAt": "2019-08-21T13:29:37.234",
          "storedBy": "healthworker2",
          "providedElsewhere": false,
          "dataElement": "DanTR5x0WDK",
          "value": "RESIDENT_IN_THE_FOCUS"
        },
        {
          "createdAt": "2019-08-21T13:27:49.328",
          "updatedAt": "2019-08-21T13:29:37.234",
          "storedBy": "healthworker2",
          "providedElsewhere": false,
          "dataElement": "rFQNCGMYud2",
          "value": "45"
        }
      ],
      "notes": [],
      "followup": false
    }
  ]
}
```

Odpověď `CSV` může vypadat následovně.

```
|event|status|program|programStage|enrollment|orgUnit|occurredAt|scheduledAt|dataElement|value|storedBy|providedElsewhere
|---|---|---|---|---|---|---|---|---|---|---|---|
|V1CerIi3sdL|COMPLETED|IpHINAT79UW|A03MvHHogjR|CCBLMntFuzb|DiszpKrYNg8|2020-02-26T23:00:00Z|2020-02-27T23:00:00Z|a3kGcGDCuk6|11|admin|false
|V1CerIi3sdL|COMPLETED|IpHINAT79UW|A03MvHHogjR|CCBLMntFuzb|DiszpKrYNg8|2020-02-26T23:00:00Z|2020-02-27T23:00:00Z|mB2QHw1tU96|[-11.566044,9.477801]|admin|false
```

#### Koncový bod jednoho objektu událostí `GET /api/tracker/events/{uid}`

Účelem tohoto koncového bodu je načíst jednu událost s jejím uid.

##### Požádat o syntaxi { #request-syntax } 

`GET /api/tracker/events/{uid}?fields={fields}`

|Parametr požadavku|Typ|Povolené hodnoty|Popis|
|---|---|---|---|
|`uid`|`String`|`uid`|Vraťte událost se zadaným `uid`|
|`fields`|`String`| Jakýkoli platný filtr polí (výchozí `*,!relationships`) |Zahrnout do odpovědi zadané dílčí objekty|

##### Example requests { #example-requests } 

Dotaz na událost:

    GET /api/tracker/events/rgWr86qs0sI

##### Formát odpovědi { #response-format } 

```json
{
  "event": "rgWr86qs0sI",
  "status": "ACTIVE",
  "program": "kla3mAPgvCH",
  "programStage": "aNLq9ZYoy9W",
  "enrollment": "Lo3SHzCnMSm",
  "orgUnit": "DiszpKrYNg8",
  "occurredAt": "2024-10-12T00:00:00.000",
  "followUp": false,
  "deleted": false,
  "createdAt": "2018-10-20T12:09:19.492",
  "createdAtClient": "2017-10-20T12:09:19.492",
  "updatedAt": "2018-10-20T12:09:19.492",
  "attributeOptionCombo": "amw2rQP6r6M",
  "attributeCategoryOptions": "RkbOhHwiOgW",
  "dataValues": [
    {
      "createdAt": "2015-10-20T12:09:19.640",
      "updatedAt": "2015-10-20T12:09:19.640",
      "storedBy": "system",
      "providedElsewhere": false,
      "dataElement": "HyJL2Lt37jN",
      "value": "12"
    }
  ],
  "notes": [],
  "followup": false
}
```

### Relationships (`GET /api/tracker/relationships`) { #relationships-get-apitrackerrelationships } 

Relationships are links between two entities in the Tracker. These entities can be tracked entities,
enrollments, and events.

Účelem tohoto koncového bodu je načíst vztahy mezi objekty.

Na rozdíl od jiných koncových bodů trasovaných objektů vztahy odhalují pouze jeden koncový bod:

- `GET /api/tracker/relationships?[trackedEntity={trackedEntityUid}|enrollment={enrollmentUid}|event={eventUid}]&fields=[fields]`

#### Request parameters { #request-parameters } 

|Parametr požadavku|Typ|Povolené hodnoty|Popis|
|---|---|---|---|
|`trackedEntity`|`String`|`uid`|Identifier of a tracked entity|
|`enrollment`|`String`|`uid`|Identifier of an enrollment|
|`event`|`String`|`uid`|Identifier of an event|
|`fields`|`String`|Any valid field filter (default `relationship,relationshipType,createdAtClient,from[trackedEntity[trackedEntity],enrollment[enrollment],event[event]],to[trackedEntity[trackedEntity],enrollment[enrollment],event[event]]`) |Zahrnout do odpovědi zadané dílčí objekty|
|`order`|`String`|Comma-separated list of property name or attribute or UID and sort direction pairs in format `propName:sortDirection`.|Supported fields: `createdAt, createdAtClient`.|
|`includeDeleted`|`Boolean`|`true`&#124;`false`| whether to include soft-deleted elements in your query result|

Následující pravidla platí pro parametry dotazu.

- lze předat pouze jeden parametr mezi `trackedEntity`, `enrollment`, `event`

> **NOTE**
>
> Using tracked entity, enrollment or event params, will return any relationship where the
> trackedEntity, enrollment or event is part of the relationship (either from or to). As long as
> user has access, that is.

#### Example response { #example-response } 

```json
{
  "pager": {
    "page": 1,
    "pageSize": 2
  },
  "relationships": [
    {
      "relationship": "oGtgtJpp6fG",
      "relationshipType": "Mv8R4MPcNcX",
      "from": {
        "trackedEntity": {
          "trackedEntity": "neR4cmMY22o"
        }
      },
      "to": {
        "trackedEntity": {
          "trackedEntity": "DsSlC54GNXy"
        }
      }
    },
    {
      "relationship": "SSfIicJKbh5",
      "relationshipType": "Mv8R4MPcNcX",
      "from": {
        "trackedEntity": {
          "trackedEntity": "neR4cmMY22o"
        }
      },
      "to": {
        "trackedEntity": {
          "trackedEntity": "rEYUGH97Ssd"
        }
      }
    }
  ]
}
```

## Tracker Access Control { #webapi_nti_access_control }

Tracker has a few different concepts in regards to access control, like sharing, organisation unit
scopes, ownership, and access levels. The following sections provide a short introduction to the
different topics.

### Sdílení metadat { #webapi_nti_metadata_sharing }

Sharing setting is standard DHIS2 functionality that applies to both Tracker and Aggregate
metadata/data as well as dashboards and visualization items. At the core of sharing is the ability
to define who can see/do what. In general, there are five possible sharing configurations – no
access, metadata read, metadata write, data read, and data write. These access configurations can be
granted at user and/or user group level (for more flexibility). With a focus on Tracker, the
following metadata and their sharing setting is of particular importance: Data Element, Category
Option, Program, Program Stage, Tracked Entity Type, Tracked Entity Attribute as well as Tracker
related Dashboards and Dashboard Items.

How sharing setting works is straightforward – the settings are enforced during Tracker data
import/export processes. To read value, one needs to have data read access. If a user is expected to
modify data, he/she needs to have data write access. Similarly, if a user is expected to modify
metadata, it is essential to grant metadata write access.

One critical point with Tracker data is the need to have a holistic approach. For example, a user
won’t be able to see the Data Element value by having read access to just the Data Element. The user
needs to have data read to access the parent Program Stage and Program where this Data Element
belongs. It is the same with the category option combination. In Tracker, the Event is related to
AttributeOptionCombo, which is made up of a combination of Category Options. Therefore, for a user
to read data of an Event, he/she needs to have data read access to all Category Options and
corresponding Categories that constitute the AttributeOptionCombo of the Event in question. If a
user lacks access to just one Category Option or Category, then the user has no access to the entire
Event.

When it comes to accessing Enrollment data, it is essential to have access to the Tracked Entity
first. Access to a Tracked Entity is controlled through sharing setting of Program, Tracked Entity
Type, and Tracked Entity Attribute. Once Enrollment is accessed, it is possible to access Event
data, again depending on Program Stage and Data element sharing setting.

Another vital point to consider is how to map out access to different Program Stages of a Program.
Sometimes we could be in a situation where we need to grant access to a specific stage – for
example, “Lab Result” – to a specific group of users (Lab Technicians). In this situation, we can
provide data write access to "Lab Result" stage, probably data read to one or more stages just in
case we want Lab Technicians to read other medical results or no access if we think it not necessary
for the Lab Technicians to see data other than lab related.

In summary, DHIS2 has a fine-grained sharing setting that we can use to implement access control
mechanisms both at the data and metadata level. These sharing settings can be applied directly at
the user level or user group level. How exactly to apply a sharing setting depends on the use-case
at hand.

For more detailed information about data sharing, check out [Data
sharing](https://docs.dhis2.org/en/use/user-guides/dhis-core-version-master/configuring-the-system/about-sharing-of-objects.html#data-sharing-for-event-based-programs).

### Organisation Unit Scopes { #webapi_nti_orgunit_scope }

Organisation units are one of the most fundamental objects in DHIS2. They define a universe under
which a user is allowed to record and/or read data. There are three types of organisation units that
can be assigned to a user. These are data capture, data view (not used in tracker), and tracker
search. As the name implies, these organisation units define a scope under which a user is allowed
to conduct the respective operations.

However, to further fine-tune the scope, DHIS2 Tracker introduces a concept that we call
**OrganisationUnitSelectionMode**. Such a mode is often used at the time exporting tracker objects.
For example, given that a user has a particular tracker search scope, does it mean that we have to
use this scope every time a user tries to search for a tracker, Enrollment, or Event object? Or is
the user interested in limiting the searching just to the selected org unit, or the entire capture
org unit scope, and so on.

Users can do the fine-tuning by passing a specific value of `orgUnitMode` in their API request:

*api/tracker/trackedEntities?orgUnit=UID&orgUnitMode=specific_organisation_unit_selection_mode*

Currently, there are six selection modes available: *SELECTED, CHILDREN, DESCENDANTS, CAPTURE,
ACCESSIBLE, and ALL*.

1. **SELECTED**: As the name implies, this mode narrows down all operations initiated by the
   requesting API to the specified organisation unit in the request.
2. **CHILDREN**: Under this mode, the organisation unit scope is constructed using the selected
   organisation unit and its immediate children, i.e., the organisation units at the level below.
3. **DESCENDANTS**: In this mode, the selected organisation unit and everything underneath it,
   encompassing not only the immediate children but all descendants, constitute the data operation
universe.
4. **CAPTURE**: This mode includes the data capture organization units associated with the current
   user and all descendants. It encompasses all organization units in the sub-hierarchy.
5. **ACCESSIBLE**: This mode is designed to retrieve data within the user's search scope
   organization units. This encompasses everything visible to the user, including open and audited
programs within its search scope, as well as data in protected and closed programs within the user's
capture scope. If a user lacks search organization units, the system defaults to capture scope,
ensuring that the user always has access to at least one universe. The capture scope, being
mandatory, serves as a foundational element in guaranteeing a data environment for the user.
6. **ALL**: This mode is reserved for authorized users, specifically those with the authority ALL
   (super users). Users with the authority F_TRACKED_ENTITY_INSTANCE_SEARCH_IN_ALL_ORGUNITS can also
search system-wide but need sharing access to the returned program, program stage, and/or tracked
entity type. For non-authorized users, an exception will be raised.

The first three modes, *SELECTED*, *CHILDREN* and *DESCENDANTS* expect an organisation unit to be
supplied in the request, while the last three, *CAPTURE*, *ACCESSIBLE* and *ALL* do not expect it
and in fact the request will fail if an organisation unit is provided.

The organisation unit mode will be one of the ones listed above when it's explicitly provided in the
API request. Since it's not a mandatory field, in case it's not specified, then the default value
will be *SELECTED* if an organisation unit is present, and *ACCESSIBLE* otherwise.

It makes little sense to pass these modes at the time of tracker import operations. Because when
writing tracker data, each of the objects needs to have a specific organisation unit attached to
them. The system will then ensure if each of the mentioned organisation units falls under the
CAPTURE scope. If not, the system will simply reject the write operation.

Note that there is 4 type of organisation unit associations relevant for Tracker objects. A
TrackedEntity has an organisation unit, commonly referred to as the Registration Organisation unit.
Enrollments have an organisation unit associated with them. Events also have an organisation unit
associated with them. There is also an Owner organisation unit for a TrackedEntity-Program
combination.

When fetching Tracker objects, depending on the context, the organisation unit scope is applied to
one of the above four organisation unit associations.

For example, when retrieving TrackedEntities without the context of a program, the organisation unit
scope is applied to the registration organisation unit of the TrackedEntity. Whereas, when
retrieving TrackedEntities, including specific program data, the organisation unit scope is applied
to the Owner organisation unit.

### Tracker Program Ownership { #webapi_nti_ownership }

A new concept called Tracker Ownership is introduced from 2.30. This introduces a new organisation
unit association for a TrackedEntity - Program combination. We call this the Owner (or Owning)
Organisation unit of a TrackedEntity in the context of a Program. The Owner organisation unit is
used to decide access privileges when reading and writing tracker data related to a program. This,
along with the Program's [Access Level](#webapi_nti_access_level) configuration, decides the access
behavior for Program-related data (Enrollments and Events). A user can access a TrackedEntity's
Program data if the corresponding Owner OrganisationUnit for that TrackedEntity-Program combination
falls under the user's organisation unit scope (Search/Capture). For Programs that are configured
with access level  *OPEN* or *AUDITED* , the Owner OrganisationUnit has to be in the user's search
scope. For Programs that are configured with access level  *PROTECTED* or *CLOSED* , the Owner
OrganisationUnit has to be in the user's capture scope to be able to access the corresponding
program data for the specific tracked entity. Irrespective of the program access level, to access
Tracker objects, the requested organisation unit must always be within the user's search scope. A
user cannot request objects outside its search scope unless it's using the organisation unit mode
ALL and has enough privileges to use that mode.

#### Přepsání vlastnictví trasovače: Rozbijte sklo { #webapi_nti_tracker_ownership_override }

It is possible to temporarily override this ownership privilege for a program that is configured
with an access level of *PROTECTED*. Any user will be able to temporarily gain access to the Program
related data if the user specifies a reason for accessing the TrackedEntity-Program data. This act
of temporarily gaining access is termed as *breaking the glass*. Currently, temporary access is
granted for 3 hours. DHIS2 audits breaking the glass along with the reason specified by the user. It
is not possible to gain temporary access to a program that has been configured with an access level
of *CLOSED*. To break the glass for a TrackedEntity-Program combination, the following POST request
can be used:

    /api/tracker/ownership/override?trackedEntity=DiszpKrYNg8&program=eBAyeGv0exc&reason=patient+showed+up+for+emergency+care

#### Převod vlastnictví trasovače { #webapi_nti_tracker_ownership_transfer }

It is possible to transfer the ownership of a TrackedEntity-Program from one organisation unit to
another. This will be useful in case of patient referrals or migrations. Only a user who has
Ownership access (or temporary access by breaking the glass) can transfer the ownership. To transfer
ownership of a TrackedEntity-Program to another organisation unit, the following PUT request can be
used:

    /api/tracker/ownership/transfer?trackedEntity=DiszpKrYNg8&program=eBAyeGv0exc&ou=EJNxP3WreNP

### Úroveň přístupu { #webapi_nti_access_level }

DHIS2 treats Tracker data with an extra level of protection. In addition to the standard feature of
metadata and data protection through sharing settings, Tracker data are shielded with additional
access level protection mechanisms.  Currently, there are four access levels that can be configured
for a Program: Open, Audited, Protected, and Closed.

These access levels are only triggered when users try to interact with program data, namely
Enrollments and Events data. The different Access Level configuration for Program is a degree of
openness (or closedness) of program data. Note that all other sharing settings are still respected,
and the access level is only an additional layer of access control. Here is a short description of
the four access levels that can be configured for a Program.

#### Open { #open } 

This access level is the least restricted among the access levels. Data inside an OPEN program can
be accessed and modified by users if the Owner organisation unit falls under the user's search
scope.  With this access level, accessing and modifying data outside the capture scope is possible
without any justification or consequence.

#### Audited { #audited } 

This is the same as the Open access level. The difference here is that the system will automatically
add an audit log entry on the data being accessed by the specific user.

#### Protected { #protected } 

This access level is slightly more restricted. Data inside a PROTECTED program can only be accessed
by users if the Owner organisation unit falls under the user's capture scope. However, a user who
only has the Owner organisation unit in the search scope can gain temporary ownership by [breaking
the glass](#webapi_nti_tracker_ownership_override). The user has to provide a justification of why
they are accessing the data at hand. The system will then put a log of both the justification and
access audit and provide temporary access for 3 hours to the user. Note that when breaking the
glass, the Owner Organisation Unit remains unchanged, and only the user who has broken the glass
gains temporary access.

#### Closed { #closed } 

This is the most restricted access level. Data recorded under programs configured with access level
CLOSED will not be accessible if the Owner Organisation Unit does not fall within the user's capture
scope. It is also not possible to break the glass or gain temporary ownership in this configuration.
Note that it is still possible to transfer the ownership to another organisation unit. Only a user
who has access to the data can transfer the ownership of a TrackedEntity-Program combination to
another Organisation Unit. If ownership is transferred, the Owner Organisation Unit is updated.


# Tracker (deprecated APIs) { #tracker-deprecated-apis } 

> **Caution**
>
> Tracker has been re-implemented in DHIS2 2.36. The new endpoints are documented at
> [Tracker](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/tracker.html).
>
> Endpoints
>
> * `GET/POST/PUT/DELETE /api/trackedEntityInstance`
> * `GET/POST/PUT/DELETE /api/enrollments`
> * `GET/POST/PUT/DELETE /api/events`
> * `GET/POST/PUT/DELETE /api/relationships`
>
> will be removed in version **42**!
>
> * If you plan to use the tracker endpoints use the new endpoints described in
>   [Tracker](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/tracker.html)
> * If you are still using the deprecated tracker endpoints in production, please migrate over to the
>   new endpoints. [Migrating to new tracker endpoints](#webapi_tracker_migration) should help you
>   get started. Reach out on the [community of practice](https://community.dhis2.org) if you need
>   further assistance.

## Migrating to new tracker endpoints { #webapi_tracker_migration }

The following sections highlight the important differences between the deprecated endpoints.

* `GET/POST/PUT/DELETE /api/trackedEntityInstance`
* `GET/POST/PUT/DELETE /api/enrollments`
* `GET/POST/PUT/DELETE /api/events`
* `GET/POST/PUT/DELETE /api/relationships`

and the newly introduced endpoints

* `POST /api/tracker`
* `GET  /api/tracker/trackedEntities`
* `GET  /api/tracker/enrollments`
* `GET  /api/tracker/events`
* `GET  /api/tracker/relationships`

### Property names { #webapi_tracker_migration_names }

API property names have changed so they are consistent across all the endpoints. The following table
lists the old and new property names.

|Objekt trasování|Dříve|Nyní|
|---|---|---|
|**Atribut**|`created`<br>`lastUpdated`|`createdAt`<br>`updatedAt`|
|**DataValue**|`created`<br>`lastUpdated`<br>`createByUserInfo`<br>`lastUpdatedByUserInfo`|`createdAt`<br>`updatedAt`<br>`createdBy`<br>`updatedBy`|
|**Zápis**|`created`<br>`createdAtClient`<br>`lastUpdated`<br>`lastUpdatedAtClient`<br>`trackedEntityInstance`<br>`enrollmentDate`<br>`incidentDate`<br>`completedDate`<br>`createByUserInfo`<br>`lastUpdatedByUserInfo`|`createdAt`<br>`createdAtClient`<br>`updatedAt`<br>`updatedAtClient`<br>`trackedEntity`<br>`enrolledAt`<br>`occurredAt`<br>`completedAt`<br>`createdBy`<br>`updatedBy`|
|**Událost**|`trackedEntityInstance`<br>`eventDate`<br>`dueDate`<br>`created`<br>`createdAtClient`<br>`lastUpdated`<br>`lastUpdatedAtClient`<br>`completedDate`<br>`createByUserInfo`<br>`lastUpdatedByUserInfo`<br>`assignedUser`*|`trackedEntity`<br>`occurredAt`<br>`scheduledAt`<br>`createdAt`<br>`createdAtClient`<br>`updatedAt`<br>`updatedAtClient`<br>`completedAt`<br>`createdBy`<br>`updatedBy`<br>`assignedUser`*|
|**Poznámka**|`storedDate`<br>`lastUpdatedBy`|`storedAt`<br>`createdBy`|
|**ProgramOwner**|`ownerOrgUnit`<br>`trackedEntityInstance`|`orgUnit`<br>`trackedEntity`|
|**RelationshipItem**|`trackedEntityInstance.trackedEntityInstance`<br>`enrollment.enrollment`<br>`event.event`|`trackedEntity`<br>`enrollment`<br>`event`|
|**Vztah**|`created`<br>`lastUpdated`|`createdAt`<br>`updatedAt`|
|**TrackedEntity**|`trackedEntityInstance`<br>`created`<br>`createdAtClient`<br>`lastUpdated`<br>`lastUpdatedAtClient`<br>`createByUserInfo`<br>`lastUpdatedByUserInfo`|`trackedEntity`<br>`createdAt`<br>`createdAtClient`<br>`updatedAt`<br>`updatedAtClient`<br>`createdBy`<br>`updatedBy`|

> **Note**
>
> Property `assignedUser` was a string before and is now an object of the following shape (type `User`):
> ```json
> {
>    "assignedUser": {
>      "uid": "ABCDEF12345",
>      "username": "username",
>      "firstName": "John",
>      "surname": "Doe"
>    }
> }
> ```

### Semicolon as separator for identifiers (UID) { #semicolon-as-separator-for-identifiers-uid } 

Fields or query parameter accepting multiple values like UIDs are now consistently separated by
comma instead of semicolon. This is to ensure UIDs are consistently separated by comma across all
DHIS2 endpoints.

The following fields are affected

* `event.attributeCategoryOptions` (as well as an event returned as part of a relationship
`from`/`to`)

### Tracker import changelog (`POST`) { #tracker-import-changelog-post } 

The previous tracker import endpoints

* `POST/PUT/DELETE /api/trackedEntityInstance`
* `POST/PUT/DELETE /api/enrollments`
* `POST/PUT/DELETE /api/events`
* `POST/PUT/DELETE /api/relationships`

are replaced by the new endpoint

* `POST /api/tracker`

[Tracker
Import](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/tracker.html#webapi_nti_import)
describes how to use this new endpoint.

### Tracker export changelog (`GET`) { #tracker-export-changelog-get } 

In addition to the changed names shown in [Property names](#webapi_tracker_migration_names) some
request parameters have been changed as well.

The following tables list the differences in old and new request parameters for `GET` endpoints.

#### Request parameter changes for `GET /api/tracker/trackedEntities` { #request-parameter-changes-for-get-apitrackertrackedentities } 

|Dříve|Nyní|
|---|---|
|`assignedUser`|`assignedUsers`<br>Values are now separated by comma instead of semicolon.|
|`attachment`|Removed|
|`attribute`|Removed - use `filter` instead|
|`eventStartDate`<br>`eventEndDate`|`eventOccurredAfter`<br>`eventOccurredBefore`|
|`includeAllAttributes`|Removed|
|`lastUpdatedStartDate`<br>`lastUpdatedEndDate`<br>`lastUpdatedDuration`|`updatedAfter`<br>`updatedBefore`<br>`updatedWithin`|
|`ouMode`|`orgUnitMode`|
|`ou`|`orgUnits`<br>Values are now separated by comma instead of semicolon.|
|`programEnrollmentStartDate`<br>`programEnrollmentEndDate`|`enrollmentEnrolledAfter`<br>`enrollmentEnrolledBefore`|
|`programIncidentStartDate`<br>`programIncidentEndDate`|`enrollmentOccurredAfter`<br>`enrollmentOccurredBefore`|
|`programStartDate`<br>`programEndDate`|Odebráno – zastaralé, viz <br><ul><li>`enrollmentEnrolledAfter`</li><li>`enrollmentEnrolledBefore`</li></ul>|
|`query`|Removed - use `filter` instead|
|`skipMeta`|Removed|
|`skipPaging`|`paging`<br>Is the inverse so `paging=false` replaces `skipPaging=true`.|
|`trackedEntityInstance`|`trackedEntities`<br>Values are now separated by comma instead of semicolon.|

#### Request parameter changes for `GET /api/tracker/enrollments` { #request-parameter-changes-for-get-apitrackerenrollments } 

|Dříve|Nyní|
|---|---|
|`enrollment`|`enrollments`<br>Values are now separated by comma instead of semicolon.|
|`lastUpdated`<br>`lastUpdatedDuration`|`updatedAfter`<br>`updatedWithin`|
|`ouMode`|`orgUnitMode`|
|`ou`|`orgUnits`<br>Values are now separated by comma instead of semicolon.|
|`programStartDate`<br>`programEndDate`|`enrolledAfter`<br>`enrolledBefore`|
|`skipPaging`|`paging`<br>Is the inverse so `paging=false` replaces `skipPaging=true`.|
|`trackedEntityInstance`|`trackedEntity`|

#### Request parameter changes for `GET /api/tracker/events` { #request-parameter-changes-for-get-apitrackerevents } 

|Dříve|Nyní|
|---|---|
|`assignedUser`|`assignedUsers`<br>Values are now separated by comma instead of semicolon.|
|`attachment`|Removed|
|`attributeCc`|`attributeCategoryCombo`|
|`attributeCos`|`attributeCategoryOptions`<br>Values are now separated by comma instead of semicolon.|
|`dueDateStart`<br>`dueDateEnd`|`scheduledAfter`<br>`scheduledBefore`|
|`event`|`events`<br>Values are now separated by comma instead of semicolon.|
|`lastUpdatedStartDate`<br>`lastUpdatedEndDate`<br>`lastUpdatedDuration`|`updatedAfter`<br>`updatedBefore`<br>`updatedWithin`|
|`lastUpdated`|Odebráno - zastaralé, viz: <br><ul><li>`01cupdatedAfter`</li><li>`updatedBefore`</li></ul>|
|`ouMode`|`orgUnitMode`|
|`skipEventId`|Removed|
|`skipMeta`|Removed|
|`skipPaging`|`paging`<br>Is the inverse so `paging=false` replaces `skipPaging=true`.|
|`startDate`<br>`endDate`|`occurredAfter`<br>`occurredBefore`|
|`startDate`<br>`endDate`|`occurredAfter`<br>`occurredBefore`|
|`trackedEntityInstance`|`trackedEntity`|

#### Request parameter changes for `GET /api/tracker/relationships` { #request-parameter-changes-for-get-apitrackerrelationships } 

|Dříve|Nyní|
|---|---|
|`skipPaging`|`paging`<br>Is the inverse so `paging=false` replaces `skipPaging=true`.|
|`tei`|`trackedEntity`|

## Web API Trasovače { #webapi_tracker_api }

Tracker Web API consists of 3 endpoints that have full CRUD (create,
read, update, delete) support. The 3 endpoints are
`/api/trackedEntityInstances`, `/api/enrollments` and
`/api/events` and they are responsible for tracked entity instance,
enrollment and event items.

### Správa instance trasované entity { #webapi_tracked_entity_instance_management }

Tracked entity instances have full CRUD support in the API. Together
with the API for enrollment most operations needed for working with
tracked entity instances and programs are supported.

    /api/33/trackedEntityInstances

#### Vytváření nové instance trasované entity { #webapi_creating_tei }

For creating a new person in the system, you will be working with the
*trackedEntityInstances* resource. A template payload can be seen below:

```json
{
  "trackedEntity": "tracked-entity-id",
  "orgUnit": "org-unit-id",
  "geometry": "<Geo JSON>",
  "attributes": [{
    "attribute": "attribute-id",
    "value": "attribute-value"
  }]
}
```

The field "geometry" accepts a GeoJson object, where the type of the
GeoJson have to match the featureType of the TrackedEntityType
definition. An example GeoJson object looks like this:

```json
{
  "type": "Point",
  "coordinates": [1, 1]
}
```

The "coordinates" field was introduced in 2.29, and accepts a coordinate
or a polygon as a value.

For getting the IDs for `relationship` and `attributes` you can have a look
at the respective resources `relationshipTypes`, `trackedEntityAttributes`.
To create a tracked entity instance you must use the HTTP *POST* method.
You can post the payload the following URL:

    /api/trackedEntityInstances

For example, let us create a new instance of a person tracked entity and
specify its first name and last name attributes:

```json
{
  "trackedEntity": "nEenWmSyUEp",
  "orgUnit": "DiszpKrYNg8",
  "attributes": [
    {
      "attribute": "w75KJ2mc4zz",
      "value": "Joe"
    },
    {
      "attribute": "zDhUuAYrxNC",
      "value": "Smith"
    }
  ]
}
```

Chcete-li to odeslat na server, můžete použít příkaz cURL takto:

```bash
curl -d @tei.json "https://play.dhis2.org/demo/api/trackedEntityInstances" -X POST
  -H "Content-Type: application/json" -u admin:district
```

To create multiple instances in one request you can wrap the payload in
an outer array like this and POST to the same resource as above:[]()

```json
{
  "trackedEntityInstances": [
    {
      "trackedEntity": "nEenWmSyUEp",
      "orgUnit": "DiszpKrYNg8",
      "attributes": [
        {
          "attribute": "w75KJ2mc4zz",
          "value": "Joe"
        },
        {
          "attribute": "zDhUuAYrxNC",
          "value": "Smith"
        }
      ]
    },
    {
      "trackedEntity": "nEenWmSyUEp",
      "orgUnit": "DiszpKrYNg8",
      "attributes": [
        {
          "attribute": "w75KJ2mc4zz",
          "value": "Jennifer"
        },
        {
          "attribute": "zDhUuAYrxNC",
          "value": "Johnson"
        }
      ]
    }
  ]
}
```

The system does not allow the creation of a tracked entity instance
(as well as enrollment and event) with a UID that was already used in
the system. That means that UIDs cannot be reused.

#### Aktualizace instance trasované entity { #webapi_updating_tei }

For updating a tracked entity instance, the payload is equal to the
previous section. The difference is that you must use the HTTP *PUT*
method for the request when sending the payload. You will also need to
append the person identifier to the *trackedEntityInstances* resource in
the URL like this, where `<tracked-entity-instance-identifier>` should
be replaced by the identifier of the tracked entity instance:

    /api/trackedEntityInstances/<tracked-entity-instance-id>

The payload has to contain all, even non-modified, attributes and
relationships. Attributes or relationships that were present before and
are not present in the current payload any more will be removed from the
system. This means that if attributes/relationships are empty in the
current payload, all existing attributes/relationships will be deleted
from the system. From 2.31, it is possible to ignore empty
attributes/relationships in the current payload. A request parameter of
`ignoreEmptyCollection` set to `true` can be used in case you do not
wish to send in any attributes/relationships and also do not want them
to be deleted from the system.

It is not allowed to update an already deleted tracked entity instance.
Also, it is not allowed to mark a tracked entity instance as deleted via
an update request. The same rules apply to enrollments and events.

#### Odstranění instance trasované entity { #webapi_deleting_tei }

In order to delete a tracked entity instance, make a request to the URL
identifying the tracked entity instance with the *DELETE*
method. The URL is equal to the one above used for update.

#### Vytvářejte a zapisujte instance trasovaných entit { #webapi_create_enroll_tei }

It is also possible to both create (and update) a tracked entity
instance and at the same time enroll into a program.

```json
{
  "trackedEntity": "tracked-entity-id",
  "orgUnit": "org-unit-id",
  "attributes": [{
    "attribute": "attribute-id",
    "value": "attribute-value"
  }],
  "enrollments": [{
    "orgUnit": "org-unit-id",
    "program": "program-id",
    "enrollmentDate": "2013-09-17",
    "incidentDate": "2013-09-17"
   }, {
    "orgUnit": "org-unit-id",
    "program": "program-id",
    "enrollmentDate": "2013-09-17",
    "incidentDate": "2013-09-17"
   }]
}
```

You would send this to the server as you would normally when creating or
updating a new tracked entity instance.

```bash
curl -X POST -d @tei.json -H "Content-Type: application/json"
  -u user:pass "http://server/api/33/trackedEntityInstances"
```

#### Kompletní příklad datového obsahu včetně: instance trasované entity, registrace a události { #webapi_create_enroll_tei_create_event }

It is also possible to create (and update) a tracked entity instance, at
the same time enroll into a program and create an event.

```json
{
  "trackedEntityType": "nEenWmSyUEp",
  "orgUnit": "DiszpKrYNg8",
  "attributes": [
    {
      "attribute": "w75KJ2mc4zz",
      "value": "Joe"
    },
    {
      "attribute": "zDhUuAYrxNC",
      "value": "Rufus"
    },
    {
      "attribute": "cejWyOfXge6",
      "value": "Male"
    }
  ],
  "enrollments": [
    {
      "orgUnit": "DiszpKrYNg8",
      "program": "ur1Edk5Oe2n",
      "enrollmentDate": "2017-09-15",
      "incidentDate": "2017-09-15",
      "events": [
        {
          "program": "ur1Edk5Oe2n",
          "orgUnit": "DiszpKrYNg8",
          "eventDate": "2017-10-17",
          "status": "COMPLETED",
          "storedBy": "admin",
          "programStage": "EPEcjy3FWmI",
          "coordinate": {
            "latitude": "59.8",
            "longitude": "10.9"
          },
          "dataValues": [
            {
              "dataElement": "qrur9Dvnyt5",
              "value": "22"
            },
            {
              "dataElement": "oZg33kd9taw",
              "value": "Male"
            }
          ]
        },
        {
          "program": "ur1Edk5Oe2n",
          "orgUnit": "DiszpKrYNg8",
          "eventDate": "2017-10-17",
          "status": "COMPLETED",
          "storedBy": "admin",
          "programStage": "EPEcjy3FWmI",
          "coordinate": {
            "latitude": "59.8",
            "longitude": "10.9"
          },
          "dataValues": [
            {
              "dataElement": "qrur9Dvnyt5",
              "value": "26"
            },
            {
              "dataElement": "oZg33kd9taw",
              "value": "Female"
            }
          ]
        }
      ]
    }
  ]
}
```

You would send this to the server as you would normally when creating or
updating a new tracked entity instance.

```bash
curl -X POST -d @tei.json -H "Content-Type: application/json"
  -u user:pass "http://server/api/33/trackedEntityInstances"
```

#### Vygenerované atributy instance trasované entity { #webapi_generate_tei_attributes }

Tracked entity instance attributes that are using automatic generation of
unique values have three endpoints that are used by apps. The endpoints
are all used for generating and reserving values.

In 2.29 we introduced TextPattern for defining and generating these
patterns. All existing patterns will be converted to a valid TextPattern
when upgrading to 2.29.

> **Note**
>
> As of 2.29, all these endpoints will require you to include any
> variables reported by the `requiredValues` endpoint listed as
> required. Existing patterns, consisting of only `#`, will be upgraded
> to the new TextPattern syntax `RANDOM(<old-pattern>)`. The RANDOM
> segment of the TextPattern is not a required variable, so this
> endpoint will work as before for patterns defined before 2.29.

##### Nalezení požadovaných hodnot { #finding-required-values } 

A TextPattern can contain variables that change based on different
factors. Some of these factors will be unknown to the server, so the
values for these variables have to be supplied when generating and
reserving values.

This endpoint will return a map of required and optional values, that
the server will inject into the TextPattern when generating new values.
Required variables have to be supplied for the generation, but optional
variables should only be supplied if you know what you are doing.

    GET /api/33/trackedEntityAttributes/Gs1ICEQTPlG/requiredValues

```json
{
  "REQUIRED": [
    "ORG_UNIT_CODE"
  ],
  "OPTIONAL": [
    "RANDOM"
  ]
}
```

##### Generovat koncový bod hodnoty { #webapi_generate_values }

Online web apps and other clients that want to generate a value that
will be used right away can use the simple generate endpoint. This
endpoint will generate a value that is guaranteed to be unique at the
time of generation. The value is also guaranteed not to be reserved. As
of 2.29, this endpoint will also reserve the value generated for 3 days.

If your TextPattern includes required values, you can pass them as
parameters like the example below:

The expiration time can also be overridden at the time of generation, by
adding the `?expiration=<number-of-days>` to the request.

    GET /api/33/trackedEntityAttributes/Gs1ICEQTPlG/generate?ORG_UNIT_CODE=OSLO

```json
{
  "ownerObject": "TRACKEDENTITYATTRIBUTE",
  "ownerUid": "Gs1ICEQTPlG",
  "key": "RANDOM(X)-OSL",
  "value": "C-OSL",
  "created": "2018-03-02T12:01:36.680",
  "expiryDate": "2018-03-05T12:01:36.678"
}
```

##### Generovat a rezervovat koncový bod hodnoty { #webapi_generate_reserve_values }

The generate and reserve endpoint is used by offline clients that need
to be able to register tracked entities with unique ids. They will
reserve a number of unique ids that this device will then use when
registering new tracked entity instances. The endpoint is called to
retrieve a number of tracked entity instance reserved values. An
optional parameter numberToReserve specifies how many ids to generate
(default is 1).

If your TextPattern includes required values, you can pass them as
parameters like the example below:

Similar to the /generate endpoint, this endpoint can also specify the
expiration time in the same way. By adding the `?expiration=<number-of-days>`
you can override the default 60 days.

    GET /api/33/trackedEntityAttributes/Gs1ICEQTPlG/generateAndReserve?numberToReserve=3&ORG_UNIT_CODE=OSLO

```json
[
  {
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "B-OSL",
    "created": "2018-03-02T13:22:35.175",
    "expiryDate": "2018-05-01T13:22:35.174"
  },
  {
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "Q-OSL",
    "created": "2018-03-02T13:22:35.175",
    "expiryDate": "2018-05-01T13:22:35.174"
  },
  {
    "ownerObject": "TRACKEDENTITYATTRIBUTE",
    "ownerUid": "Gs1ICEQTPlG",
    "key": "RANDOM(X)-OSL",
    "value": "S-OSL",
    "created": "2018-03-02T13:22:35.175",
    "expiryDate": "2018-05-01T13:22:35.174"
  }
]
```

##### Rezervované hodnoty { #reserved-values } 

Reserved values are currently not accessible through the api, however, they
are returned by the `generate` and `generateAndReserve` endpoints. The
following table explains the properties of the reserved value object:

#####



Tabulka: Rezervované hodnoty

| Vlastnictví | Popis |
|---|---|
| ownerObject | Typ metadat odkazovaný při generování a rezervaci hodnoty. V současné době je podporován pouze TRACKEDENTITYATTRIBUTE. |
| ownerUid | Uid objektu metadat odkazovaného při generování a rezervaci hodnoty. |
| key | Částečně generovaná hodnota, kde generované segmenty ještě nejsou přidány. |
| value | Plně vyřešená hodnota vyhrazena. Toto je hodnota, kterou odesíláte na server při ukládání dat. |
| created | Časové razítko, kdy byla rezervace provedena |
| expiryDate | Časové razítko, kdy rezervace již nebude rezervována |

Expired reservations are removed daily. If a pattern changes, values
that were already reserved will be accepted when storing data, even if
they don't match the new pattern, as long as the reservation has not
expired.

#### Atributy obrázku { #image-attributes } 

Working with image attributes is a lot like working with file data
values. The value of an attribute with the image value type is the id of
the associated file resource. A GET request to the
`/api/trackedEntityInstances/<entityId>/<attributeId>/image`
endpoint will return the actual image. The optional height and width
parameters can be used to specify the dimensions of the image.

```bash
curl "http://server/api/33/trackedEntityInstances/ZRyCnJ1qUXS/zDhUuAYrxNC/image?height=200&width=200"
  > image.jpg
```

The API also supports a *dimension* parameter. It can take three possible values (please note capital letters): `SMALL` (254x254), `MEDIUM` (512x512), `LARGE` (1024x1024) or `ORIGINAL`. Image type attributes will be stored in pre-generated sizes
and will be furnished upon request based on the value of the `dimension` parameter.

```bash
curl "http://server/api/33/trackedEntityInstances/ZRyCnJ1qUXS/zDhUuAYrxNC/image?dimension=MEDIUM"
```

#### File attributes { #file-attributes } 

Working with file attributes is a lot like working with image data
values. The value of an attribute with the file value type is the id of
the associated file resource. A GET request to the
`/api/trackedEntityInstances/<entityId>/<attributeId>/file`
endpoint will return the actual file content.

```bash
curl "http://server/api/trackedEntityInstances/ZRyCnJ1qUXS/zDhUuAYrxNC/file
```

#### Dotaz na instanci trasované entity { #webapi_tracked_entity_instance_query }

To query for tracked entity instances you can interact with the
`/api/trackedEntityInstances` resource.

    /api/33/trackedEntityInstances

##### Požádat o syntaxi { #webapi_tei_query_request_syntax }



Tabulka: Parametry dotazu instancí trasovaných entit

| Parametr dotazu | Popis |
|---|---|
| filtr | Atributy, které se mají použít jako filtr pro dotaz. Parametr lze opakovat libovolněkrát. Filtry lze použít na rozměr ve formátu <attribute-id\>:<operator\>:<filter\>[:<operator\>:<filter\>].  Hodnoty filtru nerozlišují velká a malá písmena a lze je spolu s operátorem opakovat libovolněkrát. Operátory mohou být EQ &#124; GT &#124; GE &#124; LT &#124; LE &#124; NE &#124; LIKE &#124; V. |
| ou | Identifikátory organizační jednotky oddělené „;“. |
| ouMode | Režim výběru organizačních jednotek lze SELECTED &#124; CHILDREN &#124; DESCENDANTS &#124; ACCESSIBLE &#124; CAPTURE &#124; ALL. Výchozí hodnota je SELECTED, což se týká pouze vybraných vybraných organizačních jednotek. Vysvětlení viz tabulka níže. |
| program | Identifikátor programu. Omezuje instance na přihlášení do daného programu. |
| programStatus | Stav instance pro daný program. Může být AKTIVNÍ &#124; DOKONČENO &#124; ZRUŠENO. |
| followUp | Sledovat stav instance pro daný program. Může to být true &#124; false nebo omitted. |
| programStartDate | Datum zahájení zápisu v daném programu pro instanci trasované entity. |
| programEndDate | Datum ukončení zápisu v daném programu pro instanci trasované entity. |
| trackedEntity | Identifikátor trasované entity. Omezuje instance na daný typ trasované instance. |
| strana | Číslo stránky. Výchozí stránka je 1. |
| pageSize | Velikost stránky. Výchozí velikost je 50 řádků na stránku. |
| totalPages | Označuje, zda se má do odpovědi stránkování zahrnout celkový počet stránek (znamená delší dobu odezvy). |
| skipPaging | Označuje, zda má být stránkování ignorováno a mají být vráceny všechny řádky. |
| lastUpdatedStartDate | Filter for teis which were updated after this date. Cannot be used together with *lastUpdatedDuration*. |
| lastUpdatedEndDate | Filter for teis which were updated up until this date. Cannot be used together with *lastUpdatedDuration*. |
| lastUpdatedDuration | Include only items which are updated within the given duration. The format is , where the supported time units are “d” (days), “h” (hours), “m” (minutes) and “s” (seconds). Cannot be used together with *lastUpdatedStartDate* and/or *lastUpdatedEndDate*. |
| assignedUserMode | Restricts result to tei with events assigned based on the assigned user selection mode, can be CURRENT &#124; PROVIDED &#124; NONE &#124; ANY. See table below "Assigned user modes" for explanations. |
| assignedUser | Filter the result down to a limited set of teis with events that are assigned to the given user IDs by using *assignedUser=id1;id2*.This parameter will be considered only if assignedUserMode is either PROVIDED or null. The API will error out, if for example, assignedUserMode=CURRENT and assignedUser=someId |
| trackedEntityInstance | Filter the result down to a limited set of teis using explicit uids of the tracked entity instances by using *trackedEntityInstance=id1;id2*. This parameter will at the very least create the outer boundary of the results, forming the list of all teis using the uids provided. If other parameters/filters from this table are used, they will further limit the results from the explicit outer boundary. |
| includeDeleted | Označuje, zda zahrnout měkké odstraněné TEI nebo ne. Ve výchozím nastavení je fase. |
| potentialDuplicate | Filter the result based on the fact that a TEI is a Potential Duplicate. true: return TEIs flagged as Potential Duplicates. false: return TEIs NOT flagged as Potential Duplicates. If omitted, we don't check whether a TEI is a Potential Duplicate or not.|

The available organisation unit selection modes are explained in the
following table.



Tabulka: Režimy výběru organizační jednotky

| Režim | Popis |
|---|---|
| SELECTED | Organizační jednotky definované v požadavku. |
| CHILDREN | Vybrané organizační jednotky a bezprostřední podřazené, tedy organizační jednotky na níže uvedené úrovni. |
| DESCENDANTS | Vybrané organizační jednotky a všechny podřazené, tedy všechny organizační jednotky v podhierarchii. |
| ACCESSIBLE | technically, returns everything in the user's tracker search organisation units. In practice, if a user lacks search organisation units, the system defaults to the data capture scope. As the capture scope is mandatory, we ensure that a user always has at least one universe. |
| CAPTURE | The data capture organisation units associated with the current user and all descendants, encompassing all organisation units in the sub-hierarchy. |
| VŠE | The term "ALL" logically refers to the entire organisation unit available in the system for super users. However, for non-superusers, "ALL" is equivalent to "ACCESSIBLE" organisation units. |

The available assigned user modes are explained in the following table.



Tabulka: Přiřazené uživatelské režimy

| Režim | Popis |
|---|---|
| CURRENT | Zahrnuje události přiřazené aktuálně přihlášenému uživateli. |
| PROVIDED | Includes events assigned to the user provided in the request. |
| NONE | Includes unassigned events only. |
| ANY | Includes all assigned events, doesn't matter who are they assigned to as long as they assigned to someone. |

V dotazu se nerozlišují velká a malá písmena. Pro parametry dotazu platí následující pravidla.

  - Alespoň jedna organizační jednotka musí být specifikována pomocí *ou*
    parameter (one or many), or *ouMode=ALL* must be specified.

  - Může být pouze jeden z parametrů *program* a *trackedEntity*
    specifikováno (nula nebo jedna).

  - If *programStatus* is specified then *program* must also be
    specifikováno.

  - Je-li zadáno *followUp*, musí být zadáno také *program*.

  - Pokud je zadáno *programStartDate* nebo *programEndDate*, pak
    musí být také specifikován *program*.

  - Položky filtru lze zadat pouze jednou.

A query for all instances associated with a specific organisation unit
can look like this:

    /api/33/trackedEntityInstances.json?ou=DiszpKrYNg8

To query for instances using one attribute with a filter and one
attribute without a filter, with one organisation unit using the
descendant organisation unit query mode:

    /api/33/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A
      &filter=AMpUYgxuCaE&ou=DiszpKrYNg8;yMCshbaVExv

A query for instances where one attribute is included in the response
and one attribute is used as a filter:

    /api/33/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A
      &filter=AMpUYgxuCaE:LIKE:Road&ou=DiszpKrYNg8

A query where multiple operand and filters are specified for a filter
item:

    api/33/trackedEntityInstances.json?ou=DiszpKrYNg8&program=ur1Edk5Oe2n
      &filter=lw1SqmMlnfh:GT:150:LT:190

To query on an attribute using multiple values in an *IN* filter:

    api/33/trackedEntityInstances.json?ou=DiszpKrYNg8
      &filter=dv3nChNSIxy:IN:Scott;Jimmy;Santiago

To constrain the response to instances which are part of a specific
program you can include a program query parameter:

    api/33/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&ou=O6uvpzGd5pu
      &ouMode=DESCENDANTS&program=ur1Edk5Oe2n

Chcete-li zadat data zápisu programu jako součást dotazu:

    api/33/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&ou=O6uvpzGd5pu
      &program=ur1Edk5Oe2n&programStartDate=2013-01-01&programEndDate=2013-09-01

To constrain the response to instances of a specific tracked entity you
can include a tracked entity query parameter:

    api/33/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&ou=O6uvpzGd5pu
      &ouMode=DESCENDANTS&trackedEntity=cyl5vuJ5ETQ

By default the instances are returned in pages of size 50, to change
this you can use the page and pageSize query parameters:

    api/33/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&ou=O6uvpzGd5pu
      &ouMode=DESCENDANTS&page=2&pageSize=3

K filtrování můžete použít řadu operátorů:



Tabulka: Operátory filtrů

| Operátor | Popis |
|---|---|
| EQ | Rovno |
| GT | Větší než |
| GE | Větší než nebo rovno |
| LT | Menší než |
| LE | Menší nebo rovno |
| NE | Nerovná se |
| LIKE | Shoda volného textu (obsahuje) |
| SW | Začíná s |
| EW | Končí s |
| IN | Rovná se jedné z více hodnot oddělených ";" |

##### Formát odpovědi { #webapi_tei_query_response_format }

Tento zdroj podporuje zdroj JSON, JSONP, XLS a CSV
reprezentace.

  - json (application/json)

  - jsonp (application/javascript)

  - xml (application/xml)

The response in JSON/XML is in object format and can look like the
following. Please note that field filtering is supported, so if you want
a full view, you might want to add `fields=*` to the query:

```json
{
  "trackedEntityInstances": [
    {
      "lastUpdated": "2014-03-28 12:27:52.399",
      "trackedEntity": "cyl5vuJ5ETQ",
      "created": "2014-03-26 15:40:19.997",
      "orgUnit": "ueuQlqb8ccl",
      "trackedEntityInstance": "tphfdyIiVL6",
      "relationships": [],
      "attributes": [
        {
          "displayName": "Address",
          "attribute": "AMpUYgxuCaE",
          "type": "string",
          "value": "2033 Akasia St"
        },
        {
          "displayName": "TB number",
          "attribute": "ruQQnf6rswq",
          "type": "string",
          "value": "1Z 989 408 56 9356 521 9"
        },
        {
          "displayName": "Weight in kg",
          "attribute": "OvY4VVhSDeJ",
          "type": "number",
          "value": "68.1"
        },
        {
          "displayName": "Email",
          "attribute": "NDXw0cluzSw",
          "type": "string",
          "value": "LiyaEfrem@armyspy.com"
        },
        {
          "displayName": "Gender",
          "attribute": "cejWyOfXge6",
          "type": "optionSet",
          "value": "Female"
        },
        {
          "displayName": "Phone number",
          "attribute": "P2cwLGskgxn",
          "type": "phoneNumber",
          "value": "085 813 9447"
        },
        {
          "displayName": "First name",
          "attribute": "dv3nChNSIxy",
          "type": "string",
          "value": "Liya"
        },
        {
          "displayName": "Last name",
          "attribute": "hwlRTFIFSUq",
          "type": "string",
          "value": "Efrem"
        },
        {
          "code": "Height in cm",
          "displayName": "Height in cm",
          "attribute": "lw1SqmMlnfh",
          "type": "number",
          "value": "164"
        },
        {
          "code": "City",
          "displayName": "City",
          "attribute": "VUvgVao8Y5z",
          "type": "string",
          "value": "Kranskop"
        },
        {
          "code": "State",
          "displayName": "State",
          "attribute": "GUOBQt5K2WI",
          "type": "number",
          "value": "KwaZulu-Natal"
        },
        {
          "code": "Zip code",
          "displayName": "Zip code",
          "attribute": "n9nUvfpTsxQ",
          "type": "number",
          "value": "3282"
        },
        {
          "code": "National identifier",
          "displayName": "National identifier",
          "attribute": "AuPLng5hLbE",
          "type": "string",
          "value": "465700042"
        },
        {
          "code": "Blood type",
          "displayName": "Blood type",
          "attribute": "H9IlTX2X6SL",
          "type": "string",
          "value": "B-"
        },
        {
          "code": "Latitude",
          "displayName": "Latitude",
          "attribute": "Qo571yj6Zcn",
          "type": "string",
          "value": "-30.659626"
        },
        {
          "code": "Longitude",
          "displayName": "Longitude",
          "attribute": "RG7uGl4w5Jq",
          "type": "string",
          "value": "26.916172"
        }
      ]
    }
  ]
}
```

#### Databázový dotaz na mřížku instance trasované entity { #webapi_tracked_entity_instance_grid_query }

To query for tracked entity instances you can interact with the
*/api/trackedEntityInstances/grid* resource. There are two types of
queries: One where a *query* query parameter and optionally *attribute*
parameters are defined, and one where *attribute* and *filter*
parameters are defined. This endpoint uses a more compact "grid" format,
and is an alternative to the query in the previous section.

    /api/33/trackedEntityInstances/query

##### Požádat o syntaxi { #webapi_tei_grid_query_request_syntax }



Tabulka: Parametry dotazu instancí trasovaných entit

| Parametr dotazu | Popis |
|---|---|
| query | Řetězec dotazu. Parametr dotazu na atributy lze použít k definování atributů, které se mají zahrnout do odpovědi. Pokud nejsou definovány žádné atributy, ale program, použijí se atributy z programu. Pokud není definován žádný program, použijí se všechny atributy. Existují dva formáty. První je řetězec dotazu plánu. Druhý je ve formátu <operator\> : <query\> . Operátory mohou být EQ &#124; JAKO. EQ znamená přesné shody slov, LIKE znamená částečné shody slov. Dotaz bude rozdělen na mezeru, kde každé slovo bude tvořit logický dotaz AND. |
| attribute | Atributy, které mají být zahrnuty do odpovědi. Lze také použít jako filtr pro dotaz. Parametr lze opakovat libovolněkrát. Filtry lze použít na rozměr ve formátu <attribute-id\>:<operator\>:<filter\>[:<operator\>:<filter\>]. Hodnoty filtru nerozlišují velká a malá písmena a lze je spolu s operátorem opakovat libovolněkrát. Operátory mohou být EQ &#124; GT &#124; GE &#124; LT &#124; LE &#124; NE &#124; LIKE &#124; V. Filtry lze vynechat, aby bylo možné atribut jednoduše zahrnout do odpovědi bez jakýchkoli omezení. |
| filtr | Atributy, které se mají použít jako filtr pro dotaz. Parametr lze opakovat libovolněkrát. Filtry lze použít na rozměr ve formátu <attribute-id\>:<operator\>:<filter\>[:<operator\>:<filter\>].  Hodnoty filtru nerozlišují velká a malá písmena a lze je spolu s operátorem opakovat libovolněkrát. Operátory mohou být EQ &#124; GT &#124; GE &#124; LT &#124; LE &#124; NE &#124; LIKE &#124; V. |
| ou | Identifikátory organizační jednotky oddělené „;“. |
| ouMode | Režim výběru organizačních jednotek může být  SELECTED &#124; CHILDREN &#124; DESCENDANTS &#124; ACCESSIBLE &#124; ALL. Výchozí hodnota je SELECTED, což se týká pouze vybraných organizačních jednotek. Vysvětlení viz tabulka níže. |
| program | Identifikátor programu. Omezuje instance na přihlášení do daného programu. |
| programStatus | Stav instance pro daný program. Může být AKTIVNÍ &#124; DOKONČENO &#124; ZRUŠENO. |
| followUp | Sledovat stav instance pro daný program. Může to být true &#124; false nebo omitted. |
| programStartDate | Datum zahájení zápisu v daném programu pro instanci trasované entity. |
| programEndDate | Datum ukončení zápisu v daném programu pro instanci trasované entity. |
| trackedEntity | Identifikátor trasované entity. Omezuje instance na daný typ trasované instance. |
| eventStatus | Status of any event associated with the given program and the tracked entity instance. Can be ACTIVE &#124; COMPLETED &#124; VISITED &#124; SCHEDULE &#124; OVERDUE &#124; SKIPPED. |
| eventStartDate | Datum zahájení akce spojené s daným programem a stav akce. |
| eventEndDate | Datum ukončení události spojené s daným programem a stavem události. |
| programStage | ProgramStage, pro kterou by se měly použít filtry související s událostmi. Pokud nebudou poskytnuty, budou zváženy všechny fáze. |
| skipMeta | Označuje, zda by měla být zahrnuta metadata pro odpověď. |
| strana | Číslo stránky. Výchozí stránka je 1. |
| pageSize | Velikost stránky. Výchozí velikost je 50 řádků na stránku. |
| totalPages | Označuje, zda se má do odpovědi stránkování zahrnout celkový počet stránek (znamená delší dobu odezvy). |
| skipPaging | Označuje, zda má být stránkování ignorováno a mají být vráceny všechny řádky. |
| assignedUserMode | Omezuje výsledek na tei s událostmi přiřazenými na základě přiřazeného režimu výběru uživatele, může být CURRENT &#124; PROVIDED &#124; NONE &#124; ANY. |
| assignedUser | Filter the result down to a limited set of teis with events that are assigned to the given user IDs by using *assignedUser=id1;id2*.This parameter will be considered only if assignedUserMode is either PROVIDED or null. The API will error out, if for example, assignedUserMode=CURRENT and assignedUser=someId |
| trackedEntityInstance | Filter the result down to a limited set of teis using explicit uids of the tracked entity instances by using *trackedEntityInstance=id1;id2*. This parameter will at the very least create the outer boundary of the results, forming the list of all teis using the uids provided. If other parameters/filters from this table are used, they will further limit the results from the explicit outer boundary. |
| potentialDuplicate | Filter the result based on the fact that a TEI is a Potential Duplicate. true: return TEIs flagged as Potential Duplicates. false: return TEIs NOT flagged as Potential Duplicates. If omitted, we don't check whether a TEI is a Potential Duplicate or not.|

The available organisation unit selection modes are explained in the
following table.



Tabulka: Režimy výběru organizační jednotky

| Režim | Popis |
|---|---|
| SELECTED | Organizační jednotky definované v požadavku. |
| CHILDREN | Bezprostřední podřazené, tedy pouze první úroveň níže, organizačních jednotek definovaných v požadavku. |
| DESCENDANTS | Všechny podřazení, tedy pouze na nižších úrovních, např. včetně podřazených do druhé úrovně organizačních jednotek definovaných v požadavku. |
| ACCESSIBLE | Všichni podřazení organizačních jednotek zobrazení dat přidružení k aktuálnímu uživateli. Pokud první není definován, vrátí se zpět k organizačním jednotkám sběru dat přidruženým k aktuálnímu uživateli. |
| CAPTURE | Data zachycují organizační jednotky spojené s aktuálním uživatelem a všemi potomky, tj. všemi organizačními jednotkami v podhierarchii. |
| VŠE | Všechny organizační jednotky v systému. Vyžaduje autoritu. |

Note that you can specify "attribute" with filters or directly using the "filter" params for constraining the
instances to return.

Pro vrácení atributů platí určitá pravidla.

  - If "query" is specified without any attributes or program, then all attributes that
    are marked as "Display in List without Program" is included in the response.

  - Pokud je zadán program, budou všechny atributy spojené s programem
    be included in the response.

  - If tracked entity type is specified, then all tracked entity type attributes
    will be included in the response.

You can specify queries with words separated by space - in that
situation the system will query for each word independently and return
records where each word is contained in any attribute. A query item can
be specified once as an attribute and once as a filter if needed. The
query is case insensitive. The following rules apply to the query
parameters.

  - Alespoň jedna organizační jednotka musí být specifikována pomocí *ou*
    parameter (one or many), or *ouMode=ALL* must be specified.

  - Může být pouze jeden z parametrů *program* a *trackedEntity*
    specifikováno (nula nebo jedna).

  - If *programStatus* is specified then *program* must also be
    specifikováno.

  - Je-li zadáno *followUp*, musí být zadáno také *program*.

  - Pokud je zadáno *programStartDate* nebo *programEndDate*, pak
    musí být také specifikován *program*.

  - If *eventStatus* is specified then *eventStartDate* and
    *eventEndDate* must also be specified.

  - Spolu s filtry nelze zadat dotaz.

  - Položky atributů lze zadat pouze jednou.

  - Položky filtru lze zadat pouze jednou.

A query for all instances associated with a specific organisation unit
can look like this:

    /api/33/trackedEntityInstances/query.json?ou=DiszpKrYNg8

A query on all attributes for a specific value and organisation unit,
using an exact word match:

    /api/33/trackedEntityInstances/query.json?query=scott&ou=DiszpKrYNg8

A query on all attributes for a specific value, using a partial word
match:

    /api/33/trackedEntityInstances/query.json?query=LIKE:scott&ou=DiszpKrYNg8

You can query on multiple words separated by the URL character for
space which is %20, will use a logical AND query for each
    word:

    /api/33/trackedEntityInstances/query.json?query=isabel%20may&ou=DiszpKrYNg8

Dotaz, kde jsou specifikovány atributy, které mají být zahrnuty v odpovědi:

    /api/33/trackedEntityInstances/query.json?query=isabel
      &attribute=dv3nChNSIxy&attribute=AMpUYgxuCaE&ou=DiszpKrYNg8

To query for instances using one attribute with a filter and one
attribute without a filter, with one organisation unit using the
descendants organisation unit query mode:

    /api/33/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      &attribute=AMpUYgxuCaE&ou=DiszpKrYNg8;yMCshbaVExv

A query for instances where one attribute is included in the response
and one attribute is used as a
    filter:

    /api/33/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      &filter=AMpUYgxuCaE:LIKE:Road&ou=DiszpKrYNg8

A query where multiple operand and filters are specified for a filter
item:

    /api/33/trackedEntityInstances/query.json?ou=DiszpKrYNg8&program=ur1Edk5Oe2n
      &filter=lw1SqmMlnfh:GT:150:LT:190

To query on an attribute using multiple values in an IN
    filter:

    /api/33/trackedEntityInstances/query.json?ou=DiszpKrYNg8
      &attribute=dv3nChNSIxy:IN:Scott;Jimmy;Santiago

To constrain the response to instances which are part of a specific
program you can include a program query parameter:

    /api/33/trackedEntityInstances/query.json?filter=zHXD5Ve1Efw:EQ:A
      &ou=O6uvpzGd5pu&ouMode=DESCENDANTS&program=ur1Edk5Oe2n

Chcete-li zadat data zápisu programu jako součást dotazu:

    /api/33/trackedEntityInstances/query.json?filter=zHXD5Ve1Efw:EQ:A
      &ou=O6uvpzGd5pu&program=ur1Edk5Oe2n&programStartDate=2013-01-01
      &programEndDate=2013-09-01

To constrain the response to instances of a specific tracked entity you
can include a tracked entity query parameter:

    /api/33/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      &ou=O6uvpzGd5pu&ouMode=DESCENDANTS&trackedEntity=cyl5vuJ5ETQ

By default the instances are returned in pages of size 50, to change
this you can use the page and pageSize query parameters:

    /api/33/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
      &ou=O6uvpzGd5pu&ouMode=DESCENDANTS&page=2&pageSize=3

To query for instances which have events of a given status within a
given time span:

    /api/33/trackedEntityInstances/query.json?ou=O6uvpzGd5pu
      &program=ur1Edk5Oe2n&eventStatus=COMPLETED
      &eventStartDate=2014-01-01&eventEndDate=2014-09-01

K filtrování můžete použít řadu operátorů:



Tabulka: Operátory filtrů

| Operátor | Popis |
|---|---|
| EQ | Rovno |
| GT | Větší než |
| GE | Větší než nebo rovno |
| LT | Menší než |
| LE | Menší nebo rovno |
| NE | Nerovná se |
| LIKE | Shoda volného textu (obsahuje) |
| SW | Začíná s |
| EW | Končí s |
| IN | Rovná se jedné z více hodnot oddělených ";" |

##### Formát odpovědi { #webapi_tei_grid_query_response_format }

Tento zdroj podporuje zdroj JSON, JSONP, XLS a CSV
reprezentace.

  - json (application/json)

  - jsonp (application/javascript)

  - xml (application/xml)

  - csv (application/csv)

  - xls (application/vnd.ms-excel)

The response in JSON comes is in a tabular format and can look like the
following. The *headers* section describes the content of each column.
The instance, created, last updated, org unit and tracked entity columns
are always present. The following columns correspond to attributes
specified in the query. The *rows* section contains one row per
instance.

```json
{
  "headers": [{
    "name": "instance",
    "column": "Instance",
    "type": "java.lang.String"
  }, {
    "name": "created",
    "column": "Created",
    "type": "java.lang.String"
  }, {
    "name": "lastupdated",
    "column": "Last updated",
    "type": "java.lang.String"
  }, {
    "name": "ou",
    "column": "Org unit",
    "type": "java.lang.String"
  }, {
    "name": "te",
    "column": "Tracked entity",
    "type": "java.lang.String"
  }, {
    "name": "zHXD5Ve1Efw",
    "column": "Date of birth type",
    "type": "java.lang.String"
  }, {
    "name": "AMpUYgxuCaE",
    "column": "Address",
    "type": "java.lang.String"
  }],
  "metaData": {
    "names": {
      "cyl5vuJ5ETQ": "Person"
    }
  },
  "width": 7,
  "height": 7,
  "rows": [
    ["yNCtJ6vhRJu", "2013-09-08 21:40:28.0", "2014-01-09 19:39:32.19", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "21 Kenyatta Road"],
    ["fSofnQR6lAU", "2013-09-08 21:40:28.0", "2014-01-09 19:40:19.62", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "56 Upper Road"],
    ["X5wZwS5lgm2", "2013-09-08 21:40:28.0", "2014-01-09 19:40:31.11", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "56 Main Road"],
    ["pCbogmlIXga", "2013-09-08 21:40:28.0", "2014-01-09 19:40:45.02", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "12 Lower Main Road"],
    ["WnUXrY4XBMM", "2013-09-08 21:40:28.0", "2014-01-09 19:41:06.97", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "13 Main Road"],
    ["xLNXbDs9uDF", "2013-09-08 21:40:28.0", "2014-01-09 19:42:25.66", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "14 Mombasa Road"],
    ["foc5zag6gbE", "2013-09-08 21:40:28.0", "2014-01-09 19:42:36.93", "DiszpKrYNg8", "cyl5vuJ5ETQ", "A", "15 Upper Hill"]
  ]
}
```

#### Filtry instance trasované entity { #webapi_tei_filters }

To create, read, update and delete tracked entity instance filters you
can interact with the */api/trackedEntityInstanceFilters* resource. Tracked entity instance filters are shareable and follows the same pattern of sharing as any other metadata object. When using the */api/sharing* the type parameter will be *trackedEntityInstanceFilter*.

    /api/33/trackedEntityInstanceFilters

##### Vytvořte a aktualizujte definici filtru instance trasované entity { #create-and-update-a-tracked-entity-instance-filter-definition } 

For creating and updating a tracked entity instance filter in the
system, you will be working with the *trackedEntityInstanceFilters*
resource. The tracked entity instance filter definitions are used in the
Tracker Capture app to display relevant predefined "Working lists" in
the tracker user interface.



Tabulka: Datový obsah

| Hodnoty datového obsahu | Popis | Příklad |
|---|---|---|
| název | Název filtru. Požadované. ||
| popis | Popis filtru. ||
| sortOrder | Pořadí řazení filtru. Používá se v aplikaci Tracker Capture k uspořádání filtrů na ovládacím panelu programu. ||
| styl | Objekt obsahující styl css. | ( "color": "blue", "icon": "fa fa-calendar"} |
| program | Objekt obsahující id programu. Požadované. | { "id" : "uy2gU8kTjF"} |
| entityQueryCriteria | An object representing various possible filtering values. See *Entity Query Criteria* definition table below.
| eventFilters | A list of eventFilters. See *Event filters* definition table below. | [{"programStage": "eaDH9089uMp", "eventStatus": "OVERDUE", "eventCreatedPeriod": {"periodFrom": -15, "periodTo": 15}}] |

Tabulka: Definice kritérií dotazu entity

||||
|---|---|---|
| attributeValueFilters | Seznam FilterValueFilters. To se používá ke specifikaci filtrů pro hodnoty atributů při výpisu instancí sledovaných entit | "attributeValueFilters"=[{       "attribute": "abcAttributeUid",       "le": "20",       "ge": "10",       "lt": "20",       "gt": "10",       "in": ["India", "Norway"],       "like": "abc",       "sw": "abc",       "ew": "abc",       "dateFilter": {         "startDate": "2014-05-01",         "endDate": "2019-03-20",         "startBuffer": -5,         "endBuffer": 5,         "period": "LAST_WEEK",         "type": "RELATIVE"       }     }] |
| enrollmentStatus | The TEIs enrollment status. Can be none(any enrollmentstatus) or ACTIVE&#124;COMPLETED&#124;CANCELLED ||
| followup | Když je tento parametr pravdivý, filtr vrátí pouze TEI, které mají registraci s následným sledováním stavu. ||
| organisationUnit | Chcete-li zadat uid organizační jednotky | "organisationUnit": "a3kGcGDCuk7" |
| ouMode | Chcete-li určit režim výběru OU. Možné hodnoty jsou VYBRANÉ&#124; PŘÍSTUPNÉ DĚTI&#124;POTOMCI&#124;ZAJIŠTĚNÍ VŠECH | "ouMode": "SELECTED" |
| assignedUserMode | Chcete-li určit režim výběru přiřazeného uživatele pro události. Možné hodnoty jsou CURRENT&#124; PROVIDED&#124; NONE &#124; ANY. Podívejte se do tabulky níže, abyste pochopili, co jednotlivé hodnoty znamenají. Je-li hodnota PROVIDED (nebo null), budou v datovém obsahu zohledněni neprázdní přiřazení uživatelé. | "assignedUserMode": "PROVIDED" |
| assignedUsers | Chcete-li zadat seznam přiřazených uživatelů pro události. K použití spolu s výše uvedeným režimem PROVIDEDassignedUserMode. | "assignedUsers": ["a3kGcGDCuk7", "a3kGcGDCuk8"] |
| displayColumnOrder | Chcete-li určit výstupní pořadí sloupců | "displayOrderColumns": ["enrollmentDate", "program"] |
| řazení | To specify ordering/sorting of fields and its directions in comma separated values. A single item in order is of the form "orderDimension:direction". Note: Supported orderDimensions are trackedEntity, created, createdAt, createdAtClient, updatedAt, updatedAtClient, enrolledAt, inactive and the tracked entity attributes | "order"="a3kGcGDCuk6:desc" |
| eventStatus | Jakýkoli platný EventStatus | "eventStatus": "COMPLETED" |
| programStage | Chcete-li zadat uid programuStage, podle kterého se má filtrovat. TEI budou filtrovány na základě přítomnosti zapsaných ve specifikované fázi programu.| "programStage"="a3kGcGDCuk6" |
| trackedEntityType | Chcete-li určit TEI filtru trackedEntityType na. | "trackedEntityType"="a3kGcGDCuk6" |
| trackedEntityInstances | Chcete-li zadat seznam trackedEntityInstance, který se má použít při dotazování na TEI. | "trackedEntityInstances"=["a3kGcGDCuk6","b4jGcGDCuk7"] |
| enrollmentIncidentDate | DateFilterPeriod filtrování data objektu na základě data incidentu registrace. | "enrollmentIncidentDate": {     "startDate": "2014-05-01",     "endDate": "2019-03-20",     "startBuffer": -5,     "endBuffer": 5,     "period": "LAST_WEEK",     "type": "RELATIVE"   } |
| eventDate | DateFilterPeriod filtrování data objektu na základě data události. | "eventDate": {     "startBuffer": -5,     "endBuffer": 5,     "type": "RELATIVE"   } |
| enrollmentCreatedDate | DateFilterPeriod filtrování data objektu na základě data vytvoření registrace. | "enrollmentCreatedDate": {     "period": "LAST_WEEK",     "type": "RELATIVE"   } |
| lastUpdatedDate | DateFilterPeriod filtrování data objektu na základě data poslední aktualizace. | "lastUpdatedDate": {     "startDate": "2014-05-01",     "endDate": "2019-03-20",     "type": "ABSOLUTE"   } |

Tabulka: Definice filtrů událostí

||||
|---|---|---|
| programStage | Ve které fázi programu TEI potřebuje událost, aby byla vrácena. | "eaDH9089uMp" |
| eventStatus | The events status. Can be none(any event status) or ACTIVE&#124;COMPLETED&#124;SCHEDULE&#124;OVERDUE | ACTIVE |
| eventCreatedPeriod | Period object containing a period in which the event must be created. See *Period* definition below. | { "periodFrom": -15, "periodTo": 15} |
| assignedUserMode | Chcete-li určit režim výběru přiřazeného uživatele pro události. Možné hodnoty jsou CURRENT (události přiřazené aktuálnímu uživateli)&#124; PROVIDED (události přiřazené uživatelům v seznamu „assignedUsers“) &#124; ŽÁDNÉ (události přiřazené nikomu) &#124; JAKÉKOLI (události přiřazené komukoli). Je-li POSKYTNUTO (nebo null), budou zohledněni neprázdní přiřazení uživatelé v užitečné zátěži. | "assignedUserMode": "PROVIDED" |
| assignedUsers | Chcete-li zadat seznam přiřazených uživatelů pro události. K použití spolu s výše uvedeným režimem PROVIDEDassignedUserMode. | "assignedUsers": ["a3kGcGDCuk7", "a3kGcGDCuk8"] |


Tabulka: Definice objektu DateFilterPeriod

||||
|---|---|---|
| typ | Určete, zda je typ období typu ABSOLUTE &#124; RELATIVNÍ | "type" : "RELATIVE" |
| period | Určete, zda se má použít období definované relativním systémem. Použitelné pouze tehdy, když je "typ" RELATIVNÍ. (podporovaná relativní období viz [Relativní období](#webapi_date_relative_period_values)) | "period" : "THIS_WEEK" |
| startDate | Absolutní datum zahájení. Použitelné pouze tehdy, když je "typ" ABSOLUTNÍ | "startDate":"2014-05-01" |
| endDate | Absolutní datum ukončení. Použitelné pouze tehdy, když je "typ" ABSOLUTE | "startDate":"2014-05-01" |
| startBuffer | Relativní vlastní datum zahájení. Použitelné pouze tehdy, když je "typ" RELATIVNÍ | "startBuffer":-10 |
| endBuffer | Relativní vlastní datum ukončení. Použitelné pouze tehdy, když je "typ" RELATIVNÍ | "startDate":+10 |

Tabulka: Definice období

||||
|---|---|---|
| periodFrom | Počet dní od aktuálního dne. Může být kladné nebo záporné celé číslo. | -15 |
| periodTo | Počet dní od aktuálního dne. Musí být větší než období od. Může být kladné nebo záporné celé číslo. | 15 |

##### Dotaz na filtry instance trasované entity { #tracked-entity-instance-filters-query } 

Chcete-li se dotazovat na filtry instancí sledovaných entit v systému, můžete komunikovat se zdrojem */api/trackedEntityInstanceFilters*.



Tabulka: Instance sledované entity filtruje parametry dotazu

| Parametr dotazu | Popis |
|---|---|
| program | Identifikátor programu. Omezí filtry na daný program. |

### Správa zápisů { #webapi_enrollment_management }

Zápisy mají v rozhraní API plnou podporu CRUD. Společně s API pro trasované instance entit většina operací potřebných pro práci s trasovanými instancemi entit a programy jsou podporovány.

    /api/33/enrollments

#### Registrace instance trasované entity do programu { #webapi_enrolling_tei }

For enrolling persons into a program, you will need to first get the
identifier of the person from the *trackedEntityInstances* resource.
Then, you will need to get the program identifier from the *programs*
resource. A template payload can be seen below:

```json
{
  "trackedEntityInstance": "ZRyCnJ1qUXS",
  "orgUnit": "ImspTQPwCqd",
  "program": "S8uo8AlvYMz",
  "enrollmentDate": "2013-09-17",
  "incidentDate": "2013-09-17"
}
```

Tento datový obsah by měl být použit v požadavku *POST* na zápis 
identifikovaný následující adresou URL:

    /api/33/enrollments

The different status of an enrollment are:

* **ACTIVE**: It is used meanwhile when the tracked entity participates on the program.
* **COMPLETED**: It is used when the tracked entity finished its participation on the program.
* **CANCELLED**: "Deactivated" in the web UI. It is used when the tracked entity cancelled its participation on the program.

For cancelling or completing an enrollment, you can make a *PUT*
request to the `enrollments` resource, including the identifier and the
action you want to perform. For cancelling an enrollment for a tracked
entity instance:

    /api/33/enrollments/<enrollment-id>/cancelled

For completing an enrollment for a tracked entity instance you can make a
*PUT* request to the following URL:

    /api/33/enrollments/<enrollment-id>/completed

For deleting an enrollment, you can make a *DELETE* request to the
following URL:

    /api/33/enrollments/<enrollment-id>

#### Databázový dotaz na zápis instance { #webapi_enrollment_instance_query }

Chcete-li se zeptat na zápisy, můžete komunikovat se zdrojem */api/enrollments*.

    /api/33/enrollments

##### Požádat o syntaxi { #webapi_enrollment_query_request_syntax }



Tabulka: Parametry dotazu zápisu

| Parametr dotazu | Popis |
|---|---|
| ou | Identifikátory organizační jednotky oddělené „;“. |
| ouMode | The mode of selecting organisation units, can be SELECTED &#124; CHILDREN &#124; DESCENDANTS &#124; ACCESSIBLE &#124; CAPTURE &#124; ALL. Default is SELECTED, which refers to the selected organisation units only. See table below for explanations. |
| program | Identifikátor programu. Omezuje instance na přihlášení do daného programu. |
| programStatus | Stav instance pro daný program. Může být AKTIVNÍ &#124; DOKONČENO &#124; ZRUŠENO. |
| followUp | Sledovat stav instance pro daný program. Může to být true &#124; false nebo omitted. |
| programStartDate | Datum zahájení zápisu v daném programu pro instanci trasované entity. |
| programEndDate | Datum ukončení zápisu v daném programu pro instanci trasované entity. |
| lastUpdatedDuration | Zahrňte pouze položky, které jsou aktualizovány během daného trvání. Formát je , kde podporované časové jednotky jsou „d“ (dny), „h“ (hodiny), „m“ (minuty) a „s“ (sekundy). |
| trackedEntity | Identifikátor trasované entity. Omezuje instance na daný typ trasované instance. |
| trackedEntityInstance | Identifikátor instance trasované entity. Nemělo by se používat společně s trackedEntity. |
| strana | Číslo stránky. Výchozí stránka je 1. |
| pageSize | Velikost stránky. Výchozí velikost je 50 řádků na stránku. |
| totalPages | Označuje, zda se má do odpovědi stránkování zahrnout celkový počet stránek (znamená delší dobu odezvy). |
| skipPaging | Označuje, zda má být stránkování ignorováno a mají být vráceny všechny řádky. |
| includeDeleted | Označuje, zda se mají zahrnout měkké smazané zápisy nebo ne. Ve výchozím nastavení je nepravda. |

The available organisation unit selection modes are explained in the
following table.



Tabulka: Režimy výběru organizační jednotky

| Režim | Popis |
|---|---|
| SELECTED | Organizační jednotky definované v požadavku (výchozí). |
| CHILDREN | Bezprostřední podřazené, tedy pouze první úroveň níže, organizačních jednotek definovaných v požadavku. |
| DESCENDANTS | Všechny podřazení, tedy pouze na nižších úrovních, např. včetně podřazených do druhé úrovně organizačních jednotek definovaných v požadavku. |
| ACCESSIBLE | Všichni podřazení organizačních jednotek zobrazení dat přidružení k aktuálnímu uživateli. Pokud první není definován, vrátí se zpět k organizačním jednotkám sběru dat přidruženým k aktuálnímu uživateli. |
| VŠE | Všechny organizační jednotky v systému. Vyžaduje autoritu. |

V dotazu se nerozlišují velká a malá písmena. Pro parametry dotazu platí následující pravidla.

  - Alespoň jedna organizační jednotka musí být specifikována pomocí *ou*
    parameter (one or many), or *ouMode=ALL* must be specified.

  - Může být pouze jeden z parametrů *program* a *trackedEntity*
    specifikováno (nula nebo jedna).

  - If *programStatus* is specified then *program* must also be
    specifikováno.

  - Je-li zadáno *followUp*, musí být zadáno také *program*.

  - Pokud je zadáno *programStartDate* nebo *programEndDate*, pak
    musí být také specifikován *program*.

A query for all enrollments associated with a specific organisation unit
can look like this:

    /api/33/enrollments.json?ou=DiszpKrYNg8

To constrain the response to enrollments which are part of a specific
program you can include a program query
    parameter:

    /api/33/enrollments.json?ou=O6uvpzGd5pu&ouMode=DESCENDANTS&program=ur1Edk5Oe2n

Chcete-li zadat data zápisu programu jako součást dotazu:

    /api/33/enrollments.json?&ou=O6uvpzGd5pu&program=ur1Edk5Oe2n
      &programStartDate=2013-01-01&programEndDate=2013-09-01

To constrain the response to enrollments of a specific tracked entity
you can include a tracked entity query
    parameter:

    /api/33/enrollments.json?ou=O6uvpzGd5pu&ouMode=DESCENDANTS&trackedEntity=cyl5vuJ5ETQ

To constrain the response to enrollments of a specific tracked entity
instance you can include a tracked entity instance query parameter, in
this case we have restricted it to available enrollments viewable for
current
    user:

    /api/33/enrollments.json?ouMode=ACCESSIBLE&trackedEntityInstance=tphfdyIiVL6

By default the enrollments are returned in pages of size 50, to change
this you can use the page and pageSize query
    parameters:

    /api/33/enrollments.json?ou=O6uvpzGd5pu&ouMode=DESCENDANTS&page=2&pageSize=3

##### Formát odpovědi { #webapi_enrollment_query_response_format }

Tento zdroj podporuje zdroj JSON, JSONP, XLS a CSV
reprezentace.

  - json (application/json)

  - jsonp (application/javascript)

  - xml (application/xml)

The response in JSON/XML is in object format and can look like the
following. Please note that field filtering is supported, so if you want
a full view, you might want to add `fields=*` to the query:

```json
{
  "enrollments": [
    {
      "lastUpdated": "2014-03-28T05:27:48.512+0000",
      "trackedEntity": "cyl5vuJ5ETQ",
      "created": "2014-03-28T05:27:48.500+0000",
      "orgUnit": "DiszpKrYNg8",
      "program": "ur1Edk5Oe2n",
      "enrollment": "HLFOK0XThjr",
      "trackedEntityInstance": "qv0j4JBXQX0",
      "followup": false,
      "enrollmentDate": "2013-05-23T05:27:48.490+0000",
      "incidentDate": "2013-05-10T05:27:48.490+0000",
      "status": "ACTIVE"
    }
  ]
}
```

### Události { #webapi_events }

Tato část je o odesílání a čtení událostí.

    /api/33/events

Různé stavy události jsou:

* **AKTIVNÍ**: Pokud má událost stav AKTIVNÍ, je možné upravit podrobnosti události. DOKONČENÉ události lze znovu přepnout na AKTIVNÍ a naopak.
* **DOKONČENO**: Událost změní stav na DOKONČENO pouze tehdy, když uživatel klikne na tlačítko dokončení. Pokud má událost stav DOKONČENO, není možné upravit podrobnosti události. AKTIVNÍ události lze znovu změnit na DOKONČENÉ a naopak.
* **SKIPPED**: Naplánované události, které se již nemusí konat. V Tracker Capture je na to tlačítko.
* **SCHEDULE**: If an event has no event date (but it has an due date) then the event status is saved as SCHEDULE.
* **OVERDUE**: If the due date of a scheduled event (no event date) has expired, it can be interpreted as OVERDUE.
* **VISITED**: (Removed since 2.38. VISITED migrate to ACTIVE). In Tracker Capture its possible to reach VISITED by adding a new event with an event date, and then leave before adding any data to the event - but it is not known to the tracker product team that anyone uses the status for anything. The VISITED status is not visible in the UI, and in all means treated in the same way as an ACTIVE event.


#### Odesílání událostí { #webapi_sending_events }

DHIS2 supports three kinds of events: single events with no registration
(also referred to as anonymous events), single event with registration
and multiple events with registration. Registration implies that the
data is linked to a tracked entity instance which is identified using
some sort of identifier.

To send events to DHIS2 you must interact with the *events* resource.
The approach to sending events is similar to sending aggregate data
values. You will need a *program* which can be looked up using the
*programs* resource, an *orgUnit* which can be looked up using the
*organisationUnits* resource, and a list of valid data element
identifiers which can be looked up using the *dataElements* resource.
For events with registration, a *tracked entity instance* identifier is
required, read about how to get this in the section about the
*trackedEntityInstances* resource. For sending events to programs with
multiple stages, you will need to also include the *programStage*
identifier, the identifiers for programStages can be found in the
*programStages* resource.

A simple single event with no registration example payload in XML format
where we send events from the "Inpatient morbidity and mortality"
program for the "Ngelehun CHC" facility in the demo database can be seen
below:

```xml
<?xml version="1.0" encoding="utf-8"?>
<event program="eBAyeGv0exc" orgUnit="DiszpKrYNg8"
  eventDate="2013-05-17" status="COMPLETED" storedBy="admin">
  <coordinate latitude="59.8" longitude="10.9" />
  <dataValues>
    <dataValue dataElement="qrur9Dvnyt5" value="22" />
    <dataValue dataElement="oZg33kd9taw" value="Male" />
    <dataValue dataElement="msodh3rEMJa" value="2013-05-18" />
  </dataValues>
</event>
```

To perform some testing we can save the XML payload as a file
called *event.xml* and send it as a POST request to the events resource
in the API using curl with the following command:

```bash
curl -d @event.xml "https://play.dhis2.org/demo/api/33/events"
  -H "Content-Type:application/xml" -u admin:district
```

Stejný datový obsah ve formátu JSON vypadá takto:

```json
{
  "program": "eBAyeGv0exc",
  "orgUnit": "DiszpKrYNg8",
  "eventDate": "2013-05-17",
  "status": "COMPLETED",
  "completedDate": "2013-05-18",
  "storedBy": "admin",
  "coordinate": {
    "latitude": 59.8,
    "longitude": 10.9
  },
  "dataValues": [
    {
      "dataElement": "qrur9Dvnyt5",
      "value": "22"
    },
    {
      "dataElement": "oZg33kd9taw",
      "value": "Male"
    },
    {
      "dataElement": "msodh3rEMJa",
      "value": "2013-05-18"
    }
  ]
}
```

To send this you can save it to a file called *event.json* and use curl
like this:

```bash
curl -d @event.json "localhost/api/33/events" -H "Content-Type:application/json"
  -u admin:district
```

We also support sending multiple events at the same time. A payload in
XML format might look like this:

```xml
<?xml version="1.0" encoding="utf-8"?>
<events>
  <event program="eBAyeGv0exc" orgUnit="DiszpKrYNg8"
    eventDate="2013-05-17" status="COMPLETED" storedBy="admin">
    <coordinate latitude="59.8" longitude="10.9" />
    <dataValues>
      <dataValue dataElement="qrur9Dvnyt5" value="22" />
      <dataValue dataElement="oZg33kd9taw" value="Male" />
    </dataValues>
  </event>
  <event program="eBAyeGv0exc" orgUnit="DiszpKrYNg8"
    eventDate="2013-05-17" status="COMPLETED" storedBy="admin">
    <coordinate latitude="59.8" longitude="10.9" />
    <dataValues>
      <dataValue dataElement="qrur9Dvnyt5" value="26" />
      <dataValue dataElement="oZg33kd9taw" value="Female" />
    </dataValues>
  </event>
</events>
```

You will receive an import summary with the response which can be
inspected in order to get information about the outcome of the request,
like how many values were imported successfully. The payload in JSON
format looks like this:

```json
{
  "events": [
  {
    "program": "eBAyeGv0exc",
    "orgUnit": "DiszpKrYNg8",
    "eventDate": "2013-05-17",
    "status": "COMPLETED",
    "storedBy": "admin",
    "coordinate": {
      "latitude": "59.8",
      "longitude": "10.9"
    },
    "dataValues": [
      {
        "dataElement": "qrur9Dvnyt5",
        "value": "22"
      },
      {
        "dataElement": "oZg33kd9taw",
        "value": "Male"
      }
    ]
  },
  {
    "program": "eBAyeGv0exc",
    "orgUnit": "DiszpKrYNg8",
    "eventDate": "2013-05-17",
    "status": "COMPLETED",
    "storedBy": "admin",
    "coordinate": {
      "latitude": "59.8",
      "longitude": "10.9"
    },
    "dataValues": [
      {
        "dataElement": "qrur9Dvnyt5",
        "value": "26"
      },
      {
        "dataElement": "oZg33kd9taw",
        "value": "Female"
      }
    ]
  } ]
}
```

GeoJson můžete také použít k uložení jakéhokoli druhu geometrie vaší události. Zde můžete vidět příklad datového obsahu pomocí GeoJson namísto dřívějších vlastností zeměpisné šířky a délky:

```json
{
  "program": "eBAyeGv0exc",
  "orgUnit": "DiszpKrYNg8",
  "eventDate": "2013-05-17",
  "status": "COMPLETED",
  "storedBy": "admin",
  "geometry": {
    "type": "POINT",
    "coordinates": [59.8, 10.9]
  },
  "dataValues": [
    {
      "dataElement": "qrur9Dvnyt5",
      "value": "22"
    },
    {
      "dataElement": "oZg33kd9taw",
      "value": "Male"
    },
    {
      "dataElement": "msodh3rEMJa",
      "value": "2013-05-18"
    }
  ]
}
```

As part of the import summary you will also get the identifier
*reference* to the event you just sent, together with a *href* element
which points to the server location of this event. The table below
describes the meaning of each element.



Tabulka: Formát zdroje událostí

| Parametr | Typ | Požadované | Možnosti (nejprve výchozí) | Popis |
|---|---|---|---|---|
| program | řetězec | true || Identifikátor jedné události bez registračního programu |
| orgUnit | řetězec | true || Identifikátor organizační jednotky, kde se akce konala |
| eventDate | datum | true || Datum, kdy k události došlo |
| completedDate | datum | false || Datum, kdy je akce dokončena. Pokud není zadáno, je jako datum dokončení události vybráno aktuální datum |
| status | enum | false | ACTIVE &#124; COMPLETED &#124; VISITED &#124; SCHEDULE &#124; OVERDUE &#124; SKIPPED | Zda je akce dokončena nebo ne |
| storedBy | řetězec | false | Výchozí nastavení pro aktuálního uživatele | Kdo uložil tuto událost (může to být uživatelské jméno, název systému atd.) |
| souřadnice | dvojnásobek | false || Odkazuje na místo, kde se událost geograficky odehrála (zeměpisná šířka a délka) |
| dataElement | řetězec | true || Identifikátor datového prvku |
| value | řetězec | true || Hodnota nebo míra dat pro tuto událost |

##### Shoda OrgUnit { #orgunit-matching } 

By default the orgUnit parameter will match on the
ID, you can also select the orgUnit id matching scheme by using the
parameter orgUnitIdScheme=SCHEME, where the options are: *ID*, *UID*,
*UUID*, *CODE*, and *NAME*. There is also the *ATTRIBUTE:* scheme, which
matches on a *unique* metadata attribute value.

#### Aktualizace událostí { #webapi_updating_events }

To update an existing event, the format of the payload is the same, but
the URL you are posting to must add the identifier to the end of the URL
string and the request must be PUT.

The payload has to contain all, even non-modified, attributes.
Attributes that were present before and are not present in the current
payload any more will be removed by the system.

It is not allowed to update an already deleted event. The same applies
to tracked entity instance and enrollment.

```bash
curl -X PUT -d @updated_event.xml "localhost/api/33/events/ID"
  -H "Content-Type: application/xml" -u admin:district
```

```bash
curl -X PUT -d @updated_event.json "localhost/api/33/events/ID"
  -H "Content-Type: application/json" -u admin:district
```

#### Mazání událostí { #webapi_deleting_events }

To delete an existing event, all you need is to send a DELETE request
with an identifier reference to the server you are using.

```bash
curl -X DELETE "localhost/api/33/events/ID" -u admin:district
```

#### Přiřazení uživatele k událostem { #webapi_user_assign_event }

K události lze přiřadit uživatele. To lze provést zahrnutím příslušné vlastnosti do datového obsahu při aktualizaci nebo vytváření události.

      "assignedUser": "<id>"

ID odkazuje na if uživatele. K události lze najednou přiřadit pouze jednoho uživatele.

Přiřazení uživatele musí být povoleno ve fázi programu, než mohou být uživatelé přiřazeni k událostem.
#### Získávání událostí { #webapi_getting_events }

To get an existing event you can issue a GET request including the
identifier like this:

```bash
curl "http://localhost/api/33/events/ID" -H "Content-Type: application/xml" -u admin:district
```

#### Dotazování a čtení událostí { #webapi_querying_reading_events }

This section explains how to read out the events that have been stored
in the DHIS2 instance. For more advanced uses of the event data, please
see the section on event analytics. The output format from the
`/api/events` endpoint will match the format that is used to send events
to it (which the analytics event api does not support). Both XML and
JSON are supported, either through adding .json/.xml or by setting the
appropriate *Accept* header. The query is paged by default and the
default page size is 50 events, *field* filtering works as it does for
metadata, add the *fields* parameter and include your wanted properties,
i.e. *?fields=program,status*.



Tabulka: Parametry dotazu na zdroj událostí

| Klíč | Typ | Požadované | Popis |
|---|---|---|---|
| program | identifikátor | true (pokud není poskytnut programStage) | Identifikátor programu |
| programStage | identifikátor | false | Identifikátor fáze programu |
| programStatus | enum | false | Stav události v programu, může být ACTIVE &#124; COMPLETED &#124; CANCELLED |
| followUp | boolean | false | Zda je událost zvažována pro pokračování v programu, může být pravda &#124; nepravdivé nebo vynechané. |
| trackedEntityInstance | identifikátor | false | Identifikátor instance trasované entity |
| orgUnit | identifikátor | true | Identifikátor organizační jednotky |
| ouMode | enum | false | Org unit selection mode, can be SELECTED &#124; CHILDREN &#124; DESCENDANTS |
| startDate | datum | false | Pouze události novější než toto datum |
| endDate | datum | false | Pouze události starší než toto datum |
| status | enum | false | Status of event, can be ACTIVE &#124; COMPLETED &#124; VISITED &#124; SCHEDULE &#124; OVERDUE &#124; SKIPPED |
| lastUpdatedStartDate | datum | false | Filter for events which were updated after this date. Cannot be used together with *lastUpdatedDuration*. |
| lastUpdatedEndDate | datum | false | Filter for events which were updated up until this date. Cannot be used together with *lastUpdatedDuration*. |
| lastUpdatedDuration | řetězec | false | Include only items which are updated within the given duration. The format is , where the supported time units are “d” (days), “h” (hours), “m” (minutes) and “s” (seconds). Cannot be used together with *lastUpdatedStartDate* and/or *lastUpdatedEndDate*. |
| skipMeta | boolean | false | Vyloučí metadatovou část odpovědi (zlepšuje výkon) |
| strana | celé číslo | false | Číslo stránky |
| pageSize | celé číslo | false | Počet položek na každé stránce |
| totalPages | boolean | false | Označuje, zda se má do odpovědi stránkování zahrnout celkový počet stránek. |
| skipPaging | boolean | false | Označuje, zda se má přeskočit stránkování v dotazu a vrátit všechny události. |
| dataElementIdScheme | řetězec | false | Schéma ID datového prvku pro export, platné možnosti jsou UID, CODE a ATTRIBUTE:{ID} |
| categoryOptionComboIdScheme | řetězec | false | ID schéma Možnost kombinace kategorií pro export, platné možnosti jsou UID, CODE a ATRIBUTE:{ID} |
| orgUnitIdScheme | řetězec | false | Schéma ID organizační jednotky pro export, platné možnosti jsou UID, CODE a ATTRIBUTE:{ID} |
| programIdScheme | řetězec | false | Program ID scheme to use for export, valid options are UID, CODE and ATTRIBUTE:{ID} |
| programStageIdScheme | řetězec | false | Program Stage ID scheme to use for export, valid options are UID, CODE and ATTRIBUTE:{ID} |
| idScheme | řetězec | false | Umožňuje nastavit id schéma pro datový prvek, kombinaci možností kategorie, orgUnit, program a fázi programu najednou. |
| řazení | řetězec | false | The order of which to retrieve the events from the API. Usage: order=<property\>:asc/desc - Ascending order is default. <br>Properties: event &#124; program &#124; programStage &#124; enrollment &#124; enrollmentStatus &#124; orgUnit &#124; orgUnitName &#124; trackedEntityInstance &#124; eventDate &#124; followup &#124; status &#124; dueDate &#124; storedBy &#124; created &#124; lastUpdated &#124; completedBy &#124; completedDate<br> order=orgUnitName:DESC order=lastUpdated:ASC |
| událost | čárkou oddělený řetězec | false | Filter the result down to a limited set of IDs by using *event=id1;id2*. |
| skipEventId | boolean | false | Přeskočí identifikátory událostí v odpovědi |
| atributCc (\*\*) | řetězec | false | Attribute category combo identifier (must be combined with *attributeCos*) |
| attributeCos (\*\*) | řetězec | false | Attribute category option identifiers, separated with ; (must be combined with *attributeCc*) |
| async | false &#124; true | false | Označuje, zda má být import proveden asynchronně nebo synchronně. |
| includeDeleted | boolean | false | Když je true, budou do výsledku dotazu zahrnuty měkké odstraněné události. |
| assignedUserMode | enum | false | Assigned user selection mode, can be CURRENT &#124; PROVIDED &#124; NONE &#124; ANY. |
| assignedUser | čárkou oddělené řetězce | false | Filter the result down to a limited set of events that are assigned to the given user IDs by using *assignedUser=id1;id2*. This parameter will be considered only if assignedUserMode is either PROVIDED or null. The API will error out, if for example, assignedUserMode=CURRENT and assignedUser=someId |

> **Poznámka**
>
> Pokud dotaz neobsahuje ani `attributeCC`, ani `attributeCos`, vrátí server události pro všechna komba voleb atributů, kde má uživatel přístup ke čtení.

##### Příklady { #examples } 

Dotaz na všechny události s podřazenými určité organizační jednotky:

    /api/29/events.json?orgUnit=YuQRtpLP10I&ouMode=CHILDREN

Dotaz na všechny události se všemi potomky určité organizační jednotky, což znamená všechny organizační jednotky v subhierarchii:

    /api/33/events.json?orgUnit=O6uvpzGd5pu&ouMode=DESCENDANTS

Dotaz na všechny události s určitou programovou a organizační jednotkou:

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc

Query for all events with a certain program and organisation unit,
sorting by due date
    ascending:

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&order=dueDate

Query for the 10 events with the newest event date in a certain program
and organisation unit - by paging and ordering by due date descending:

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc
      &order=eventDate:desc&pageSize=10&page=1

Query for all events with a certain program and organisation unit for a
specific tracked entity instance:

    /api/33/events.json?orgUnit=DiszpKrYNg8
      &program=eBAyeGv0exc&trackedEntityInstance=gfVxE3ALA9m

Query for all events with a certain program and organisation unit older
or equal to
    2014-02-03:

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc&endDate=2014-02-03

Query for all events with a certain program stage, organisation unit and
tracked entity instance in the year 2014:

    /api/33/events.json?orgUnit=DiszpKrYNg8&program=eBAyeGv0exc
      &trackedEntityInstance=gfVxE3ALA9m&startDate=2014-01-01&endDate=2014-12-31

Query files associated with event data values. In the specific case of fetching an image file an
additional parameter can be provided to fetch the image with different dimensions. If dimension is
not provided, the system will return the original image. The parameter will be ignored in case of
fetching non-image files e.g pdf. Possible dimension values are *small(254 x 254),
medium(512 x 512), large(1024 x 1024) or original*. Any value other than those mentioned will be
discarded and the original image will be returned.

    /api/33/events/files?eventUid=hcmcWlYkg9u&dataElementUid=C0W4aFuVm4P&dimension=small

Retrieve events with specified Organisation unit and Program, and use _Attribute:Gq0oWTf2DtN_ as
identifier scheme

    /api/events?orgUnit=DiszpKrYNg8&program=lxAQ7Zs9VYR&idScheme=Attribute:Gq0oWTf2DtN

Retrieve events with specified Organisation unit and Program, and use UID as identifier scheme for
orgUnits, Code as identifier scheme for Program stages, and _Attribute:Gq0oWTf2DtN_ as identifier
scheme for the rest of the metadata with assigned attribute.

    api/events.json?orgUnit=DiszpKrYNg8&program=lxAQ7Zs9VYR&idScheme=Attribute:Gq0oWTf2DtN
      &orgUnitIdScheme=UID&programStageIdScheme=Code

#### Dotaz na mřížku událostí { #event-grid-query } 

In addition to the above event query end point, there is an event grid
query end point where a more compact "grid" format of events are
returned. This is possible by interacting with
/api/events/query.json|xml|xls|csv endpoint.

    /api/33/events/query

Most of the query parameters mentioned in event querying and reading
section above are valid here. However, since the grid to be returned
comes with specific set of columns that apply to all rows (events), it
is mandatory to specify a program stage. It is not possible to mix
events from different programs or program stages in the return.

Vracení událostí z jedné fáze programu také otevírá nové funkce - například třídění a vyhledávání událostí na základě hodnot jejich datových prvků. api/events/query to podporuje. Níže je uvedeno několik příkladů

A query to return an event grid containing only selected data elements
for a program stage

    /api/33/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk
      &dataElement=qrur9Dvnyt5,fWIAEtYVEGk,K6uUAvq500H&order=lastUpdated:desc
      &pageSize=50&page=1&totalPages=true

A query to return an event grid containing all data elements of a
program
    stage

    /api/33/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk
      &includeAllDataElements=true

A query to filter events based on data element
    value

    /api/33/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk
      &filter=qrur9Dvnyt5:GT:20:LT:50

In addition to the filtering, the above example also illustrates one
thing: the fact that there are no data elements mentioned to be returned
in the grid. When this happens, the system defaults back to return only
those data elements marked "Display in report" under program stage
configuration.

We can also extend the above query to return us a grid sorted (asc|desc)
based on data element
    value

    /api/33/events/query.json?orgUnit=DiszpKrYNg8&programStage=Zj7UnCAulEk
      &filter=qrur9Dvnyt5:GT:20:LT:50&order=qrur9Dvnyt5:desc

#### Filtry událostí { #webapi_event_filters }

To create, read, update and delete event filters you
can interact with the `/api/eventFilters` resource.

    /api/33/eventFilters

##### Vytvořte a aktualizujte definici filtru událostí { #create-and-update-an-event-filter-definition } 

For creating and updating an event filter in the
system, you will be working with the *eventFilters*
resource. *POST* is used to create and *PUT* method is used to update. The event filter definitions are used in the
Tracker Capture app to display relevant predefined "Working lists" in
the tracker user interface.



Tabulka: Požadavek na užitečné zatížení

| Vlastnost požadavku | Popis | Příklad |
|---|---|---|
| název | Název filtru. | "name":"Můj pracovní seznam" |
| popis | Popis filtru. | "description":"pro výpis všech událostí, které mi byly přiřazeny". |
| program | Uid programu. | "program" : "a3kGcGDCuk6" |
| programStage | Uid fáze programu. | "programStage" : "a3kGcGDCuk6" |
| eventQueryCriteria | Objekt obsahující parametry pro dotazování, řazení a filtrování událostí. | "eventQueryCriteria": {     "organisationUnit":"a3kGcGDCuk6",     "status": "COMPLETED",     "createdDate": {       "from": "2014-05-01",       "to": "2019-03-20"     },     "dataElements": ["a3kGcGDCuk6:EQ:1", "a3kGcGDCuk6"],     "filters": ["a3kGcGDCuk6:EQ:1"],     "programStatus": "ACTIVE",     "ouMode": "SELECTED",     "assignedUserMode": "PROVIDED",     "assignedUsers" : ["a3kGcGDCuk7", "a3kGcGDCuk8"],     "followUp": false,     "trackedEntityInstance": "a3kGcGDCuk6",     "events": ["a3kGcGDCuk7", "a3kGcGDCuk8"],     "fields": "eventDate,dueDate",     "order": "dueDate:asc,createdDate:desc"   } |



Tabulka: Definice kritérií dotazu na událost

||||
|---|---|---|
| followUp | Používá se k filtrování událostí na základě příznaku sledování registrace. Možné hodnoty jsou true&#124;false. | "followUp": true |
| organisationUnit | Chcete-li zadat uid organizační jednotky | "organisationUnit": "a3kGcGDCuk7" |
| ouMode | Chcete-li určit režim výběru OU. Možné hodnoty jsou VYBRANÉ&#124; PŘÍSTUPNÉ DĚTI&#124;POTOMCI&#124;ZAJIŠTĚNÍ VŠECH | "ouMode": "SELECTED" |
| assignedUserMode | Chcete-li určit režim výběru přiřazeného uživatele pro události. Možné hodnoty jsou CURRENT&#124; PROVIDED&#124; NONE &#124; ANY. Podívejte se do tabulky níže, abyste pochopili, co jednotlivé hodnoty znamenají. Je-li hodnota PROVIDED (nebo null), budou v datovém obsahu zohledněni neprázdní přiřazení uživatelé. | "assignedUserMode": "PROVIDED" |
| assignedUsers | Chcete-li zadat seznam přiřazených uživatelů pro události. K použití spolu s výše uvedeným režimem PROVIDEDassignedUserMode. | "assignedUsers": ["a3kGcGDCuk7", "a3kGcGDCuk8"] |
| displayOrderColumns | Chcete-li určit výstupní pořadí sloupců | "displayOrderColumns": ["eventDate", "dueDate", "program"] |
| řazení | Specifikovat řazení/třídění polí a jejich směry v hodnotách oddělených čárkami. Jedna položka v objednávce má tvar "dataItem:direction". | "order"="a3kGcGDCuk6:desc,eventDate:asc" |
| dataFilters | Chcete-li určit filtry, které se mají použít při vypisování událostí | "dataFilters"=[{       "dataItem": "abcDataElementUid",       "le": "20",       "ge": "10",       "lt": "20",       "gt": "10",       "in": ["India", "Norway"],       "like": "abc",       "dateFilter": {         "startDate": "2014-05-01",         "endDate": "2019-03-20",         "startBuffer": -5,         "endBuffer": 5,         "period": "LAST_WEEK",         "type": "RELATIVE"       }     }] |
| status | Jakýkoli platný EventStatus | "eventStatus": "COMPLETED" |
| Události | Chcete-li specifikovat seznam událostí | "events"=["a3kGcGDCuk6"] |
| completedDate | DateFilterPeriod filtrování data objektu na základě data dokončení. | "completedDate": {     "startDate": "2014-05-01",     "endDate": "2019-03-20",     "startBuffer": -5,     "endBuffer": 5,     "period": "LAST_WEEK",     "type": "RELATIVE"   } |
| eventDate | DateFilterPeriod filtrování data objektu na základě data události. | "eventDate": {     "startBuffer": -5,     "endBuffer": 5,     "type": "RELATIVE"   } |
| dueDate | DateFilterPeriod filtrování data objektu na základě data platnosti. | "dueDate": {     "period": "LAST_WEEK",     "type": "RELATIVE"   } |
| lastUpdatedDate | DateFilterPeriod filtrování data objektu na základě data poslední aktualizace. | "lastUpdatedDate": {     "startDate": "2014-05-01",     "endDate": "2019-03-20",     "type": "ABSOLUTE"   } |



Tabulka: Definice objektu DateFilterPeriod

||||
|---|---|---|
| typ | Určete, zda je typ období typu ABSOLUTE &#124; RELATIVNÍ | "type" : "RELATIVE" |
| period | Určete, zda se má použít období definované relativním systémem. Použitelné pouze tehdy, když je "typ" RELATIVNÍ. (podporovaná relativní období viz [Relativní období](#webapi_date_relative_period_values)) | "period" : "THIS_WEEK" |
| startDate | Absolutní datum zahájení. Použitelné pouze tehdy, když je "typ" ABSOLUTNÍ | "startDate":"2014-05-01" |
| endDate | Absolutní datum ukončení. Použitelné pouze tehdy, když je "typ" ABSOLUTE | "startDate":"2014-05-01" |
| startBuffer | Relativní vlastní datum zahájení. Použitelné pouze tehdy, když je "typ" RELATIVNÍ | "startBuffer":-10 |
| endBuffer | Relativní vlastní datum ukončení. Použitelné pouze tehdy, když je "typ" RELATIVNÍ | "startDate":+10 |

The available assigned user selection modes are explained in the
following table.



Tabulka: Režimy výběru přiřazených uživatelů (přiřazení události)

| Režim | Popis |
|---|---|
| CURRENT | Přiřazeno aktuálně přihlášenému uživateli |
| PROVIDED | Přiřazeno uživatelům uvedeným v parametru „assignedUser“. |
| NONE | Nepřiřazeno žádným uživatelům. |
| ANY | Přiděleno všem uživatelům. |

Ukázkový datový obsah, který lze použít k vytvoření / aktualizaci eventFilter, je uveden níže.

```json
{
  "program": "ur1Edk5Oe2n",
  "description": "Simple Filter for TB events",
  "name": "TB events",
  "eventQueryCriteria": {
    "organisationUnit":"DiszpKrYNg8",
    "eventStatus": "COMPLETED",
    "eventDate": {
      "startDate": "2014-05-01",
      "endDate": "2019-03-20",
      "startBuffer": -5,
      "endBuffer": 5,
      "period": "LAST_WEEK",
      "type": "RELATIVE"
    },
    "dataFilters": [{
      "dataItem": "abcDataElementUid",
      "le": "20",
      "ge": "10",
      "lt": "20",
      "gt": "10",
      "in": ["India", "Norway"],
      "like": "abc"
    },
    {
      "dataItem": "dateDataElementUid",
      "dateFilter": {
        "startDate": "2014-05-01",
        "endDate": "2019-03-20",
        "type": "ABSOLUTE"
      }
    },
    {
      "dataItem": "anotherDateDataElementUid",
      "dateFilter": {
        "startBuffer": -5,
        "endBuffer": 5,
        "type": "RELATIVE"
      }
    },
    {
      "dataItem": "yetAnotherDateDataElementUid",
      "dateFilter": {
        "period": "LAST_WEEK",
        "type": "RELATIVE"
      }
    }],
    "programStatus": "ACTIVE"
  }
}
```


##### Načítání a mazání filtrů událostí { #retrieving-and-deleting-event-filters } 

Filtr konkrétních událostí lze načíst pomocí následujícího rozhraní API

    GET /api/33/eventFilters/{uid}

Všechny filtry událostí lze načíst pomocí následujícího rozhraní API.

    GET /api/33/eventFilters?fields=*

Všechny filtry událostí pro konkrétní program lze načíst pomocí následujícího rozhraní API

    GET /api/33/eventFilters?filter=program:eq:IpHINAT79UW

Filtr událostí lze odstranit pomocí následujícího rozhraní API

    DELETE /api/33/eventFilters/{uid}

### Vztahy { #relationships } 
Vztahy jsou vazby mezi dvěma entitami v trasovači. Tyto entity mohou být instance trasovaných entit, zápisy a události.

Existuje několik koncových bodů, které vám umožňují zobrazit, vytvořit, odstranit a aktualizovat vztahy. Nejběžnější je /api/trackedEntityInstances koncový bod, kde můžete zahrnout vztahy v datovém obsahu, abyste je mohli vytvořit, aktualizovat nebo odstranit, pokud je vynecháte - podobně jako při práci se zápisy a událostmi ve stejném koncovém bodě. Všechny koncové body trasovače, /api/trackedEntityInstances, /api/enrollments a /api/events také uvedou jejich vztahy, pokud je to požadováno ve filtru pole.

Standardní koncový bod pro vztahy je však /api/relationships. Tento koncový bod poskytuje všechny normální operace CRUD pro vztahy.

You can view a list of relationships by trackedEntityInstance, enrollment or event:


    GET /api/relationships?[tei={teiUID}|enrollment={enrollmentUID}|event={eventUID}]


Tento požadavek vrátí seznam všech vztahů, ke kterým máte přístup, a který obsahuje trasovanou entitu, zápis, nebo událost, kterou jste zadali. Každý vztah je reprezentován následujícím JSON:

```json
{
  "relationshipType": "dDrh5UyCyvQ",
  "relationshipName": "Mother-Child",
  "relationship": "t0HIBrc65Rm",
  "bidirectional": false,
  "from": {
    "trackedEntityInstance": {
      "trackedEntityInstance": "vOxUH373fy5"
    }
  },
  "to": {
    "trackedEntityInstance": {
      "trackedEntityInstance": "pybd813kIWx"
    }
  },
  "created": "2019-04-26T09:30:56.267",
  "lastUpdated": "2019-04-26T09:30:56.267"
}
```

Můžete také zobrazit zadané vztahy pomocí následujícího koncového bodu:

    GET /api/relationships/<id>

Chcete-li vytvořit nebo aktualizovat vztah, můžete použít následující koncové body:

    POST /api/relationships
    PUT /api/relationships

A použijte následující strukturu datového obsahu:

```json
{
  "relationshipType": "dDrh5UyCyvQ",
  "from": {
    "trackedEntityInstance": {
      "trackedEntityInstance": "vOxUH373fy5"
    }
  },
  "to": {
    "trackedEntityInstance": {
      "trackedEntityInstance": "pybd813kIWx"
    }
  }
}
```

Chcete-li odstranit vztah, můžete použít tento koncový bod:

      DELETE /api/relationships/<id>

V našem příkladu datového obsahu používáme vztah mezi trackedEntityInstances. Z tohoto důvodu vlastnosti „od“ a „do“ našich užitečných dat zahrnují objekty „trackedEntityInstance“. Pokud váš vztah zahrnuje další entity, můžete použít následující vlastnosti:

```json
{
  "enrollment": {
    "enrollment": "<id>"
  }
}
```

```json
{
  "event": {
    "event": "<id>"
  }
}
```

Relationship can be soft deleted. In that case, you can use the `includeDeleted` request parameter to see the relationship.


    GET /api/relationships?tei=pybd813kIWx?includeDeleted=true


### Strategie aktualizací { #webapi_tei_update_strategies }

Two update strategies for all 3 tracker endpoints are supported:
enrollment and event creation. This is useful when you have generated an
identifier on the client side and are not sure if it was created or not
on the server.



Tabulka: Dostupné strategie sledování

| Parametr | Popis |
|---|---|
| VYTVOŘIT | Pouze vytvořit, toto je výchozí chování. |
| CREATE_AND_UPDATE | Zkuste a porovnejte ID, pokud existuje, aktualizujte, pokud ne vytvořte. |

Chcete-li změnit parametr, použijte parametr strategie:

    POST /api/33/trackedEntityInstances?strategy=CREATE_AND_UPDATE

### Hromadné mazání trasovače { #webapi_tracker_bulk_deletion }

Bulk deletion of tracker objects work in a similar fashion to adding and
updating tracker objects, the only difference is that the
`importStrategy` is *DELETE*.

*Example: Bulk deletion of tracked entity instances:*

```json
{
  "trackedEntityInstances": [
    {
      "trackedEntityInstance": "ID1"
    }, {
      "trackedEntityInstance": "ID2"
    }, {
      "trackedEntityInstance": "ID3"
    }
  ]
}
```

```bash
curl -X POST -d @data.json -H "Content-Type: application/json"
  "http://server/api/33/trackedEntityInstances?strategy=DELETE"
```

*Příklad: Hromadné mazání zápisů:*

```json
{
  "enrollments": [
    {
       "enrollment": "ID1"
    }, {
      "enrollment": "ID2"
    }, {
      "enrollment": "ID3"
    }
  ]
}
```

```bash
curl -X POST -d @data.json -H "Content-Type: application/json"
  "http://server/api/33/enrollments?strategy=DELETE"
```

*Příklad: Hromadné mazání událostí:*

```json
{
  "events": [
    {
      "event": "ID1"
    }, { 
      "event": "ID2"
    }, { 
      "event": "ID3"
    }
  ]
}
```

```bash
curl -X POST -d @data.json -H "Content-Type: application/json"
  "http://server/api/33/events?strategy=DELETE"
```

### Opětovné použití identifikátoru a odstranění položky metodami POST a PUT { #webapi_updating_and_deleting_items }

Tracker endpoints */trackedEntityInstances*, */enrollments*, */events*
support CRUD operations. The system keeps track of used identifiers.
Therefore, an item which has been created and then deleted (e.g. events,
enrollments) cannot be created or updated again. If attempting to delete
an already deleted item, the system returns a success response as
deletion of an already deleted item implies no change.

The system does not allow to delete an item via an update (*PUT*) or
create (*POST*) method. Therefore, an attribute *deleted* is ignored in
both *PUT* and *POST* methods, and in *POST* method it is by default set
to *false*.

### Import parametrů { #webapi_import_parameters }

Proces importu lze přizpůsobit pomocí sady parametrů importu:



Tabulka: Parametry importu

| Parametr | Hodnoty (výchozí první) | Popis |
|---|---|---|
| dataElementIdScheme | id &#124; jméno &#124; kód &#124; atribut:ID | Vlastnost objektu datového prvku, který se má použít k mapování hodnot dat. |
| orgUnitIdScheme | id &#124; jméno &#124; kód &#124; atribut:ID | Vlastnost objektu organizační jednotky, která se má použít k mapování datových hodnot. |
| idScheme | id &#124; name &#124; code&#124; attribute:ID | Vlastnost všech objektů včetně datových prvků, organizačních jednotek a kombinací možností kategorií, které se mají použít k mapování datových hodnot. |
| dryRun | false &#124; true | Zda uložit změny na serveru nebo jen vrátit souhrn importu. |
| strategie | CREATE &#124; UPDATE &#124; CREATE_AND_UPDATE &#124; DELETE | Uložit objekty všech, nový nebo aktualizovat stav importu na server. |
| skipNotifications | true &#124; false | Označuje, zda se mají odesílat upozornění na dokončené události. |
| skipFirst | true &#124; false | Relevantní pouze pro import CSV. Označuje, zda soubor CSV obsahuje řádek záhlaví, který by měl být přeskočen. |
| importReportMode | FULL, ERRORS, DEBUG | Sets the `ImportReport` mode, controls how much is reported back after the import is done. `ERRORS` only includes *ObjectReports* for object which has errors. `FULL` returns an *ObjectReport* for all objects imported, and `DEBUG` returns the same plus a name for the object (if available). |

#### CSV Import / Export { #webapi_events_csv_import_export }

In addition to XML and JSON for event import/export, in DHIS2.17 we
introduced support for the CSV format. Support for this format builds on
what was described in the last section, so here we will only write about
what the CSV specific parts are.

To use the CSV format you must either use the `/api/events.csv`
endpoint, or add *content-type: text/csv* for import, and *accept:
text/csv* for export when using the `/api/events` endpoint.

The order of column in the CSV which are used for both export and import
is as follows:



Tabulka: Sloupec CSV

| Index | Klíč | Typ | Popis |
|---|---|---|---|
| 1 | událost | identifikátor | Identifikátor události |
| 2 | status | enum | Status of event, can be ACTIVE &#124; COMPLETED &#124; VISITED &#124; SCHEDULE &#124; OVERDUE &#124; SKIPPED |
| 3 | program | identifikátor | Identifikátor programu |
| 4 | programStage | identifikátor | Identifikátor fáze programu |
| 5 | zápis | identifikátor | Identifikátor zápisu (instance programu) |
| 6 | orgUnit | identifikátor | Identifikátor organizační jednotky |
| 7 | eventDate | datum | Datum události |
| 8 | dueDate | datum | Datum splatnosti |
| 9 | latitude | dvojnásobek | Zeměpisná šířka, kde se událost stala |
| 10 | longitude | dvojnásobek | Zeměpisná délka, kde se událost stala |
| 11 | dataElement | identifikátor | Identifikátor datového prvku |
| 12 | value | řetězec | Hodnota / míra události |
| 13 | storedBy | řetězec | Událost byla uložena uživatelem (výchozí nastavení pro aktuálního uživatele) |
| 14 | providedElsewhere | boolean | Byla tato hodnota shromážděna někde jinde |
| 14 | completedDate | datum | Dokončený termín akce |
| 14 | completedBy | řetězec | Uživatelské jméno uživatele, který dokončil událost |

*Example of 2 events with 2 different data value
    each:*

```csv
EJNxP3WreNP,COMPLETED,<pid>,<psid>,<enrollment-id>,<ou>,2016-01-01,2016-01-01,,,<de>,1,,
EJNxP3WreNP,COMPLETED,<pid>,<psid>,<enrollment-id>,<ou>,2016-01-01,2016-01-01,,,<de>,2,,
qPEdI1xn7k0,COMPLETED,<pid>,<psid>,<enrollment-id>,<ou>,2016-01-01,2016-01-01,,,<de>,3,,
qPEdI1xn7k0,COMPLETED,<pid>,<psid>,<enrollment-id>,<ou>,2016-01-01,2016-01-01,,,<de>,4,,
```

#### Strategie importu: SYNC { #webapi_sync_import_strategy }

Strategie importu SYNC by měla být používána pouze interní synchronizační úlohou a ne pro běžný import. Strategie SYNC umožňuje, aby všechny 3 operace: CREATE, UPDATE, DELETE byly přítomny současně i v datovém obsahu.

### Správa vlastnictví trasovače { #webapi_tracker_ownership_management }

A new concept called Tracker Ownership is introduced from 2.30. There
will now be one owner organisation unit for a tracked entity instance in
the context of a program. Programs that are configured with an access
level of *PROTECTED* or *CLOSED* will adhere to the ownership
privileges. Only those users belonging to the owning org unit for a
tracked entity-program combination will be able to access the data
related to that program for that tracked entity.

#### Přepsání vlastnictví trasovače: Rozbijte sklo { #webapi_tracker_ownership_override_api }

It is possible to temporarily override this ownership privilege for a
program that is configured with an access level of *PROTECTED*. Any user
will be able to temporarily gain access to the program related data, if
the user specifies a reason for accessing the tracked entity-program
data. This act of temporarily gaining access is termed as *breaking the
glass*. Currently, the temporary access is granted for 3 hours. DHIS2
audits breaking the glass along with the reason specified by the user.
It is not possible to gain temporary access to a program that has been
configured with an access level of *CLOSED*. To break the glass for a
tracked entity program combination, you can issue a POST request as
shown:

    /api/33/tracker/ownership/override?trackedEntityInstance=DiszpKrYNg8
      &program=eBAyeGv0exc&reason=patient+showed+up+for+emergency+care

#### Převod vlastnictví trasovače { #webapi_tracker_ownership_transfer_api }

Je možné převést vlastnictví sledovaného subjektu - programu z jedné organizační jednotky na druhou. To bude užitečné v případě předávání pacientů nebo migrace. Vlastnictví může převést pouze vlastník (nebo uživatelé, kteří rozbili sklo). Chcete-li převést vlastnictví sledované entity-programu na jinou organizační jednotku, můžete vystavit požadavek PUT, jak je znázorněno na obrázku:

    /api/33/tracker/ownership/transfer?trackedEntityInstance=DiszpKrYNg8
      &program=eBAyeGv0exc&ou=EJNxP3WreNP


## Potenciální duplikáty   { #potential-duplicates } 

Potenciální duplikáty jsou záznamy, se kterými pracujeme ve funkci deduplikace dat. Vzhledem k povaze funkce deduplikace je tento koncový bod API poněkud omezen.

Potenciální duplikát představuje dvojici záznamů, u kterých existuje podezření, že jsou duplikáty.

Datový obsah potenciálního duplikátu vypadá takto:

```json
{
  "original": "<id>",
  "duplicate": "<id>",
  "status": "OPEN|INVALID|MERGED"
}
```

Seznam potenciálních duplikátů můžete načíst pomocí následujícího koncového bodu:

    GET /api/potentialDuplicates

| Název parametru | Popis | Typ | Povolené hodnoty |
|---|---|---|---|
| tei | Seznam instancí trasovaných entit | Seznam řetězců (oddělených čárkou)| ID existující instance trasované entity |
| status | Potenciální duplicitní stav | řetězec | `OPEN <default>`, `INVALID`, `MERGED`, `ALL` |

| Stavový kód | Popis
|---|---|
| 400 | Neplatný stav vstupu

Jednotlivé potenciální duplicitní záznamy můžete zkontrolovat:

    GET /api/potentialDuplicates/<id>

| Stavový kód | Popis
|---|---|
| 404 | Potenciální duplikát nebyl nalezen

Chcete-li vytvořit nový potenciální duplikát, můžete použít tento koncový bod:

    POST /api/potentialDuplicates

The payload you provide must include IDs of Original and Duplicate TEIs.

```json
{
  "original": "<id>",
  "duplicate": "<id>"
}
```

| Stavový kód | Popis
|---|---|
| 400 | Input original or duplicate is null or has invalid id
| 403 | User do not have access to read origianl or duplicate TEIs
| 404 | TEI not found
| 409 | Pair of original and duplicate TEIs already existing

Chcete-li aktualizovat potenciální duplicitní stav:

    PUT /api/potentialDuplicates/<id>

| Název parametru | Popis | Typ | Povolené hodnoty |
|---|---|---|---|
| status | Potenciální duplicitní stav | řetězec | `OPEN`, `INVALID`, `MERGED` |

| Stavový kód | Popis
|---|---|
| 400 | Potenciální duplikát nemůžete aktualizovat na MERGED, protože to je možné pouze na základě žádosti o sloučení
| 400 | Nelze aktualizovat potenciální duplikát, který je již ve stavu MERGED

## Merging Tracked Entity Instances { #merging-tracked-entity-instances } 
Tracked entity instances can now be merged together if they are viable. To initiate a merge, the first step is to define two tracked entity instances as a Potential Duplicate. The merge endpoint
will move data from the duplicate tracked entity instance to the original tracked entity instance, and delete the remaining data of the duplicate.

Ke sloučení potenciálního duplikátu nebo dvou instancí trasovaných entit, které potenciální duplikát představuje, lze použít následující koncový bod:

    POST /api/potentialDuplicates/<id>/merge

| Název parametru | Popis | Typ | Povolené hodnoty |
|---|---|---|---|
| mergeStrategy | Strategie, která se má použít pro sloučení potenciálního duplikátu | enum | AUTO (výchozí) nebo MANUAL |

The endpoint accepts a single parameter, "mergeStrategy", which decides which strategy to use when merging. For the AUTO strategy, the server will attempt to merge the two tracked entities
automatically, without any input from the user. This strategy only allows merging tracked entities without conflicting data (See examples below). The other strategy, MANUAL, requires the
user to send in a payload describing how the merge should be done. For examples and rules for each strategy, see their respective sections below.

### Merge Strategy AUTO { #merge-strategy-auto } 
The automatic merge will evaluate the mergability of the two tracked entity instances, and merge them if they are deemed mergable. The mergability is based on whether the two tracked entity instances
has any conflicts or not. Conflicts refers to data which cannot be merged together automatically. Examples of possible conflicts are:
- Stejný atribut má v každé instanci trasované entity různé hodnoty
- Obě instance trasovaných entit jsou zapsány do stejného programu
- Instance trasovaných entit mají různé typy

Pokud dojde ke konfliktu, uživateli se vrátí chybová zpráva.

When no conflicts are found, all data in the duplicate that is not already in the original will be moved over to the original. This includes attribute values, enrollments (Including events) and relationships.
After the merge completes, the duplicate is deleted and the potentialDuplicate is marked as MERGED.

Při požadavku na automatické sloučení, jako je tento, není datový obsah vyžadován a bude ignorován.

### Merge Strategy MANUAL { #merge-strategy-manual } 
The manual merge is suitable when the merge has resolvable conflicts, or when not all the data is required to be moved over during a merge. For example, if an attribute has different values in both tracked
entity instances, the user can specify whether to keep the original value, or move over the duplicate's value. Since the manual merge is the user explicitly requesting to move data, there are some different
checks being done here:
- Vztah nemůže být mezi originálem a duplikátem (To má za následek neplatný vztah odkazující na sebe)
- Vztah nemůže být stejného typu a ke stejnému objektu v obou instancích trasované entity (např. mezi původní a jinou a duplicitní a jinou; výsledkem by byl duplicitní vztah)

Existují dva způsoby, jak provést ruční sloučení: S a bez datového obsahu.

When a manual merge is requested without a payload, we are telling the API to merge the two tracked entity instances without moving any data. In other words, we are just removing the duplicate and marking the
potentialDuplicate MERGED. This might be valid in a lot of cases where the tracked entity instance was just created, but not enrolled for example.

V opačném případě, pokud je požadováno ruční sloučení s datovou částí, datová část odkazuje na to, jaká data by měla být přesunuta z duplikátu do originálu. Datový obsah vypadá takto:
```json
{
  "trackedEntityAttributes": ["B58KFJ45L9D"],
  "enrollments": ["F61SJ2DhINO"],
  "relationships": ["ETkkZVSNSVw"]
}
```

This payload contains three lists, one for each of the types of data that can be moved. `trackedEntityAttributes` is a list of uids for tracked entity attributes, `enrollments` is a list of uids for enrollments and `relationships` 
a list of uids for relationships. The uids in this payload have to refer to data that actually exists on the duplicate. There is no way to add new data or change data using the merge endpoint - Only moving data.


### Additional information about merging { #additional-information-about-merging } 
Currently it is not possible to merge tracked entity instances that are enrolled in the same program, due to the added complexity. A workaround is to manually remove the enrollments from one of the tracked entity
instances before starting the merge.

All merging is based on data already persisted in the database, which means the current merging service is not validating that data again. This means if data was already invalid, it will not be reported during the merge.
The only validation done in the service relates to relationships, as mentioned in the previous section.



## Program Notification Template { #program-notification-template } 

Program Notification Template lets you create message templates which can be sent as a result of different type of events.
Message and Subject templates will be translated into actual values and can be sent to the configured destination. Each program notification template will be
transformed to either MessageConversation object or ProgramMessage object based on external or internal notificationRecipient. These intermediate objects will
only contain translated message and subject text.
There are multiple configuraiton parameters in Program Notification Template which are critical for correct working of notifications.
All those are explained in the table below.

    POST /api/programNotificationTemplates

```json
{
    "name": "Case notification",
    "notificationTrigger": "ENROLLMENT",
    "subjectTemplate": "Case notification V{org_unit_name}",
    "displaySubjectTemplate": "Case notification V{org_unit_name}",
    "notifyUsersInHierarchyOnly": false,
    "sendRepeatable": false,
    "notificationRecipient": "ORGANISATION_UNIT_CONTACT",
    "notifyParentOrganisationUnitOnly": false,
    "displayMessageTemplate": "Case notification A{h5FuguPFF2j}",
    "messageTemplate": "Case notification A{h5FuguPFF2j}",
    "deliveryChannels": [
        "EMAIL"
    ]
}
```

Pole jsou vysvětlena v následující tabulce.


Tabulka: Datový obsah šablony oznámení programu

| Pole | Požadované | Popis | Hodnoty |
|---|---|---|---|
| název | Ano | name of Program Notification Template | case-notification-alert |
| notificationTrigger | Ano | Kdy má být spuštěno oznámení. Možné hodnoty jsou ENROLLMENT, COMPLETION, PROGRAM_RULE, SCHEDULED_DAYS_DUE_DATE| ZÁPIS |
| subjectTemplate | Ne | Šablona řetězce předmětu | Case notification V{org_unit_name} |
| messageTemplate | Ano | Řetězec šablony zprávy | Oznámení o případu A{h5FuguPFF2j} |
| notificationRecipient | ANO | Kdo bude dostávat oznámení. Možné hodnoty jsou USER_GROUP, ORGANISATION_UNIT_CONTACT, TRACKED_ENTITY_INSTANCE, USERS_AT_ORGANISATION_UNIT, DATA_ELEMENT, PROGRAM_ATTRIBUTE, WEB_HOOK  | USER_GROUP |
| deliveryChannels | Ne | Který kanál by měl být použit pro toto oznámení. Může to být buď SMS, EMAIL nebo HTTP | SMS |
| sendRepeatable | Ne | Zda má být oznámení odesláno vícekrát | false |

POZNÁMKA: WEB_HOOK notificationRecipient se používá pouze k POST http požadavku na externí systém. Při použití WEB_HOOK se ujistěte, že jste zvolili doručovací kanál HTTP.

### Retrieving and deleting Program Notification Template { #retrieving-and-deleting-program-notification-template } 

Seznam šablon oznámení programu lze získat pomocí GET.

    GET /api/programNotificationTemplates

Pro jednu konkrétní šablonu oznámení programu.

    GET /api/33/programNotificationTemplates/{uid}

Chcete-li získat filtrovaný seznam šablon oznámení programu

    GET /api/programNotificationTemplates/filter?program=<uid>
    GET /api/programNotificationTemplates/filter?programStage=<uid>

Šablonu oznámení programu lze odstranit pomocí DELETE.

    DELETE /api/33/programNotificationTemplates/{uid}


## Program Messages { #program-messages } 

Program message lets you send messages to tracked entity instances,
contact addresses associated with organisation units, phone numbers and
email addresses. You can send messages through the `messages` resource.

    /api/33/messages

### Odesílání zpráv programu { #sending-program-messages } 

Programové zprávy lze odesílat pomocí dvou doručovacích kanálů:

  - SMS (SMS)

  - E-mailová adresa (EMAIL)

Zprávy programu lze zasílat různým příjemcům:

  - Tracked entity instance: The system will look up attributes of value
    type PHONE_NUMBER or EMAIL (depending on the specified delivery
    channels) and use the corresponding attribute values.

  - Organisation unit: The system will use the phone number or email
    information registered for the organisation unit.

  - List of phone numbers: The system will use the explicitly defined
    phone numbers.

  - List of email addresses: The system will use the explicitly defined
    email addresses.

Below is a sample JSON payload for sending messages using POST requests.
Note that message resource accepts a wrapper object named
`programMessages` which can contain any number of program messages.

    POST /api/33/messages

```json
{
  "programMessages": [{
    "recipients": {
      "trackedEntityInstance": {
        "id": "UN810PwyVYO"
      },
      "organisationUnit": {
        "id": "Rp268JB6Ne4"
      },
      "phoneNumbers": [
        "55512345",
        "55545678"
      ],
      "emailAddresses": [
        "johndoe@mail.com",
        "markdoe@mail.com"
      ]
    },
    "programInstance": {
      "id": "f3rg8gFag8j"
    },
    "programStageInstance": {
      "id": "pSllsjpfLH2"
    },
    "deliveryChannels": [
      "SMS", "EMAIL"
    ],
    "notificationTemplate": "Zp268JB6Ne5",
    "subject": "Outbreak alert",
    "text": "An outbreak has been detected",
    "storeCopy": false
  }]
}
```

Pole jsou vysvětlena v následující tabulce.



Tabulka: Datový obsah zprávy programu

| Pole | Požadované | Popis | Hodnoty |
|---|---|---|---|
| příjemci | Ano | Příjemci programové zprávy. Musí být uveden alespoň jeden příjemce. Pro zprávu lze zadat libovolný počet příjemců / typů. | Lze sledovat EntityInstance, OrganizationUnit, řadu telefonních čísel nebo řadu e-mailových adres. |
| programInstance | Je vyžadováno buď toto, nebo programStageInstance | Instance programu / zápisu. | ID zápisu. |
| programStageInstance | Vyžaduje se buď toto, nebo programInstance | Instance / událost fáze programu. | Event ID. |
| deliveryChannels | Ano | Pole doručovacích kanálů. | SMS &#124; EMAIL |
| předmět | Ne | Předmět zprávy. Neplatí pro kanál doručování SMS. | Text. |
| text | Ano | Text zprávy. | Text. |
| storeCopy | Ne | Zda uložit kopii zprávy programu v DHIS2. | false (default) &#124; true |

Minimalistický příklad pro odeslání zprávy přes SMS na instanci trasované entity vypadá takto:

```bash
curl -d @message.json "https://play.dhis2.org/demo/api/33/messages"
  -H "Content-Type:application/json" -u admin:district
```

```json
{
  "programMessages": [{
    "recipients": {
      "trackedEntityInstance": {
        "id": "PQfMcpmXeFE"
      }
    },
    "programInstance": {
      "id": "JMgRZyeLWOo"
    },
    "deliveryChannels": [
      "SMS"
    ],
    "text": "Please make a visit on Thursday"
  }]
}
```

### Načítání a mazání zpráv programu { #retrieving-and-deleting-program-messages } 

Seznam zpráv lze načíst pomocí GET.

    GET /api/33/messages

Chcete-li získat seznam odeslaných zpráv trasování, můžete použít níže uvedený koncový bod. Musí být poskytnuto uid ProgramInstance nebo ProgramStageInstance.

    GET /api/33/messages/scheduled/sent?programInstance={uid}
    GET /api/33/messages/scheduled/sent?programStageInstance={uid}

Chcete-li získat seznam všech naplánovaných zpráv

    GET /api/33/messages/scheduled
    GET /api/33/messages/scheduled?scheduledAt=2020-12-12

Jednu konkrétní zprávu lze také načíst pomocí GET.

    GET /api/33/messages/{uid}

Zprávu lze smazat pomocí DELETE.

    DELETE /api/33/messages/{uid}


### Dotazování na zprávy programu { #querying-program-messages } 

The program message API supports program message queries based on
request parameters. Messages can be filtered based on below mentioned
query parameters. All requests should use the GET HTTP verb for
retrieving information.



Tabulka: API zpráv dotazovacího programu

| Parametr | URL |
|---|---|
| programInstance | /api/33/messages?programInstance=6yWDMa0LP7 |
| programStageInstance | /api/33/messages?programStageInstance=SllsjpfLH2 |
| trackedEntityInstance | /api/33/messages?trackedEntityInstance=xdfejpfLH2 |
| organisationUnit | /api/33/messages?ou=Sllsjdhoe3 |
| processedDate | /api/33/messages?processedDate=2016-02-01 |



# E-mail { #email } 

## E-mail { #webapi_email } 

Webové rozhraní API obsahuje prostředek pro odesílání e-mailů. Pro odesílání e-mailů je nutné, aby byla správně nastavena konfigurace SMTP a byla definována e-mailová adresa pro upozornění systému pro instanci DHIS2. Nastavení SMTP můžete provést na obrazovce nastavení e-mailu a e-mailová adresa upozornění systému z obrazovky obecného nastavení v DHIS2.

    /api/33/email

### Oznámení systému { #webapi_email_system_notification } 

Prostředek *oznámení* vám umožňuje odesílat systémová e-mailová oznámení s daným předmětem a textem v JSON nebo XML. E-mail bude odeslán na e-mailovou adresu s oznámením, jak je definováno v obecném nastavení systému DHIS2:

```json
{
  "subject": "Integrity check summary",
  "text": "All checks ran successfully"
}
```

Systémové e-mailové oznámení můžete odeslat zveřejněním příspěvku do zdroje oznámení takto:

```bash
curl -d @email.json "localhost/api/33/email/notification" -X POST
  -H "Content-Type:application/json" -u admin:district
```

### Odchozí e-maily { #outbound-emails } 

Můžete také poslat obecné e-mailové oznámení odesláním do zdroje oznámení, jak je uvedeno níže. Aby bylo možné použít tento API, musí být v systému oprávnění `F_SEND_EMAIL` nebo `ALL.` Parametr subjektu je volitelný. Řetězec „DHIS 2“ bude odeslán jako výchozí předmět, pokud není uveden v adrese URL. Adresa URL by měla být kódována, aby bylo možné používat toto API.

```bash
curl "localhost/api/33/email/notification?recipients=xyz%40abc.com&message=sample%20email&subject=Test%20Email"
  -X POST -u admin:district
```

### Zkušební zpráva { #webapi_email_test_message } 

Chcete-li otestovat, zda je nastavení SMTP správné, zasláním testovacího e-mailu sami sobě, můžete komunikovat s prostředkem *test*. K odesílání testovacích e-mailů je nutné, aby měl váš uživatelský účet DHIS2 přidruženou platnou e-mailovou adresu. Můžete poslat zkušební e-mail takto:

```bash
curl "localhost/api/33/email/test" -X POST -H "Content-Type:application/json" -u admin:district
```






# Data store { #data-store } 

## Data store { #webapi_data_store } 

Using the *dataStore* resource, developers can store arbitrary data for
their apps. Access to a datastore's key is based on its sharing settings.
By default all keys created are publicly accessible (read and write).
Additionally,  access to a datastore's namespace is limited to the user's
access to the corresponding app, if the app has reserved the namespace.
For example a user with access to the "sampleApp" application will also
be able to use the sampleApp namespace in the datastore. If a namespace
is not reserved, no specific access is required to use it.

    /api/33/dataStore

Note that there are reserved namespaces used by the system that require 
special authority to be able to read or write entries. 
For example the namespace for the android settings app `ANDROID_SETTINGS_APP`
will require the `M_androidsettingsapp` authority.

### Struktura úložiště Data store { #webapi_data_store_structure } 

Data store entries consist of a namespace, key and value. The
combination of namespace and key is unique. The value data type is JSON.

Tabulka: Struktura úložiště dat

| Položka | Popis | Datový typ |
|---|---|---|
| Jmenný prostor | Jmenné prostory pro organizaci záznamů. | Řetězec |
| Klíč | Klíč pro identifikaci hodnot. | Řetězec |
| Hodnota | Hodnota, která obsahuje informace o záznamu. | JSON |
| Šifrováno | Označuje, zda má být hodnota daného klíče zašifrována | Boolean |

### Získejte klíče a jmenné prostory { #webapi_data_store_get_keys_and_namespaces } 

Seznam všech existujících jmenných prostorů:

    GET /api/33/dataStore

Příklad požadavku curl pro výpis:

```bash
curl "play.dhis2.org/demo/api/33/dataStore" -u admin:district
```

Příklad odpovědi:

```json
[
  "foo",
  "bar"
]
```

Seznam všech klíčů ve jmenném prostoru:

    GET /api/33/dataStore/<namespace>

Příklad požadavku curl pro výpis:

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo" -u admin:district
```

Příklad odpovědi:

```json
[
  "key_1",
  "key_2"
]
```

Načtení hodnoty pro existující klíč z oboru názvů:

    GET /api/33/dataStore/<namespace>/<key>

Příklad curl požadavku pro načtení:

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo/key_1"-u admin:district
```

Příklad odpovědi:

```json
{
  "foo":"bar"
}
```

Načtení metadat pro existující klíč z oboru názvů:

    GET /api/33/dataStore/<namespace>/<key>/metaData

Příklad curl požadavku pro načtení:

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo/key_1/metaData" -u admin:district
```

Příklad odpovědi:

```json
{
  "id": "dsKeyUid001", 
  "created": "...",
  "user": {...},
  "namespace": "foo",
  "key": "key_1"
}
```

### Query API { #query-api } 
The query API is allows you to query and filter values over all keys in a namespace. The `fields` parameter is used to specify the query. This is useful for retrieving specific values of keys across a namespace in a single request. 

    GET /api/dataStore/<namespace>?fields=

Seznam `fields` může být:

* prázdné: vrátí pouze vstupní klávesy
* `.`: vrátí kořenovou hodnotu tak, jak byla uložena
* comma separated list of paths: `<path>[,<path>]`; each `<path>` can be a simple property name (like `age`) or a nested path (like `person.age`) 

Furthermore, entries can be filtered using one or more `filter` parameters 
and sorted using the `order` parameter. 

Multiple filters can be combined using `rootJunction=OR` (default) or `rootJunction=AND`. 

Všechny podrobnosti o parametrech `fields`, `filter` a `order` jsou uvedeny v následujících částech.

#### Paging { #paging } 
By default, results use paging. Use `pageSize` and `page` to adjust size and offset. 
The parameter `paging=false` can be used to opt-out and always return all matches. 
This should be used with caution as there could be many entries in a namespace. The default page size is 50.

    GET /api/dataStore/<namespace>?fields=.&page=2&pageSize=10

Když je stránkování vypnuto, položky se vrátí jako prosté pole výsledků jako kořenová struktura JSON. Stejného efektu lze dosáhnout při stránkovaných výsledcích pomocí `headless=true`.

```json
{
  "pager": { ... },
  "entries": [...]
}
```
vs.
```json
[...]
```

#### Value extraction { #value-extraction } 
The data store allows extracting entire simple or complex values 
as well as the extraction of parts of complex JSON values.

> **Note**
> 
> For clarity of the examples the responses shown mostly omit the outermost object with the `pager` information
> and the `entries` array that the examples show.

To filter a certain set of fields add a `fields` parameter to the namespace 
query:

    GET /api/dataStore/<namespace>?fields=name,description

This returns a list of all entries having a non-null `name` and/or a 
`description` field like in the following example:

```json
[
  {"key": "key1", "name": "name1", "description": "description1"},
  {"key": "key2", "name": "name2", "description": "description2"}
]
```

If for some reason we even want entries where none of the extracted fields 
is non-null contained in the result list the `includeAll` parameter can be 
added:

    GET /api/dataStore/<namespace>?fields=name,description&includeAll=true

Odpověď nyní může vypadat takto:

```json
[
  {"key": "key1", "name": "name1", "description": "description1"},
  {"key": "key2", "name": "name2", "description": "description2"},
  {"key": "key3", "name": null, "description": null},
  {"key": "key4", "name": null, "description": null}
]
```

The extraction is not limited to simple root level members but can pick 
nested members as well by using square or round brackets after a members name:

    GET /api/dataStore/<namespace>?fields=name,root[child1,child2]
    GET /api/dataStore/<namespace>?fields=name,root(child1,child2)

Příklad odpovědi může vypadat takto:

```json
[
  { "key": "key1", "name": "name1", "root": {"child1": 1, "child2": []}},
  { "key": "key2", "name": "name2", "root": {"child1": 2, "child2": []}}
]
```

Stejná syntaxe funguje pro vnořené členy:

    GET /api/dataStore/<namespace>?fields=root[level1[level2[level3]]]
    GET /api/dataStore/<namespace>?fields=root(level1(level2(level3)))

Příklad odpovědi zde:

```json
[
  { "key": "key1", "root": {"level1": {"level2": {"level3": 42}}}},
  { "key": "key1", "root": {"level1": {"level2": {"level3": 13}}}}
]
```

When such deeply nested values are extracted we might not want to keep the 
structure but extract the leaf member to a top level member in the response.
Aliases can be used to make this happen. An alias can be placed anywhere 
after a member name using `~hoist` followed by the alias in round brackets like so:

    GET /api/dataStore/<namespace>?fields=root[level1[level2[level3~hoist(my-prop)]]]

Odpověď by nyní vypadala takto:

```json
[
  { "key": "key1", "my-prop": 42},
  { "key": "key2", "my-prop": 13}
]
```

If the full path should be kept while giving an alias to a nested member the 
parent path needs to be repeated using dot-syntax to indicate the nesting.
This can also be used to restructure a response in a new different structure 
like so:

    GET /api/dataStore/<namespace>?fields=root[level1[level2[level3~hoist(my-root.my-prop)]]]

Nově strukturovaná odpověď nyní vypadá takto:

```json
[
  { "key": "key1", "my-root": {"my-prop": 42}},
  { "key": "key2", "my-root": {"my-prop": 13}}
]
```

OBS! An alias cannot be used to rename an intermediate level. However, an alias
could be used to resolve a name collision with the `key` member.

    GET /api/dataStore/<namespace>?fields=id,key~hoist(value-key)

```json
[
  { "key": "key1", "id": 1, "value-key": "my-key1"},
  { "key": "key2", "id": 2, "value-key": "my-key2"}
]
```

### Sorting results { #sorting-results } 
Results can be sored by a single property using the `order=<path>[:direction]` parameter.
This can be any valid value `<path>` or the entry key (use `_` as path).

Ve výchozím nastavení je řazení alfanumerické za předpokladu, že hodnota na cestě je řetězec smíšeného typu.

Chcete-li například extrahovat vlastnost name a také podle ní seřadit výsledek, použijte:

    GET /api/dataStore/<namespace>?fields=name&order=name

Pro přepnutí na sestupné pořadí použijte `:desc`:

    GET /api/dataStore/<namespace>?fields=name&order=name:desc

Sometimes the property sorted by is numeric so alphanumeric interpretation would be confusing.
In such cases special ordering types `:nasc` and `:ndesc` can be used.

Stručně řečeno, pořadí může být jedno z následujících:

* `asc`: alfanumerické vzestupné pořadí
* `desc:`: alfanumerické sestupné pořadí
* `nasc`: číselné vzestupné pořadí
* `ndesc`: číselné sestupné pořadí

> **OBS!**
> 
> When using numeric order all matches must have a numeric value for the property at the provided `<path>`.

### Filtering entries { #filtering-entries } 
To filter entries within the query API context add one or more `filter` parameters
while also using the `fields` parameter.

Každý parametr `filter` má následující tvar:

* unární operátory: `<path>:<operator>`
* binární operátory: `<path>:<operator>:<value>`
* sada operatorů: `<path>:<operator>:[<value>,<value>,...]`

Unární operátory jsou:

| Operátor | Popis |
| -------- | ----------- |
| `null`   | hodnota je JSON `null` |
| `!null`  | hodnota je definována, ale liší se od JSON `null` |
| `empty`  | hodnota je prázdný objekt, prázdné pole nebo řetězec JSON o délce nula |
| `!empty` | hodnota se liší od prázdného objektu, prázdného pole nebo řetězce nulové délky |

Binární operátory jsou:

| Operátor | Popis |
| -------- | ----------- |
| `eq`     | hodnota se rovná danému booleovskému číslu, číslu nebo řetězci |
| `!eq`, `ne`, `neq` | hodnota se nerovná danému booleovskému číslu, číslu nebo řetězci |
| `lt`     | hodnota je číselně nebo abecedně menší než zadané číslo nebo řetězec |
| `le`     | hodnota je číselně nebo abecedně menší nebo rovna danému číslu nebo řetězci |
| `gt`     | hodnota je číselně nebo abecedně větší než zadané číslo nebo řetězec |
| `ge`     | hodnota je číselně nebo abecedně větší nebo rovna danému číslu nebo řetězci |

Binární operátory pro shodu textových vzorů jsou:

| Operátor | Nerozlišují se malá a velká písmena |  Popis |
| -------- | ---------------- | ----------- |
| `like`   | `ilike`          | hodnota odpovídá danému vzoru textu |
| `!like`  | `!ilike`         | hodnota neodpovídá zadanému vzoru textu |
| `$like`  | `$ilike`, `startswith`   | hodnota začíná zadaným textovým vzorem |
| `!$like` | `!$ilike`, `!startswith` | hodnota nezačíná zadaným textovým vzorem |
| `like$`  | `ilike$`, `endswith`     | hodnota končí zadaným textovým vzorem |
| `!like$` | `!ilike$`, `!endswith`   | hodnota nekončí zadaným textovým vzorem |

For operators that work for multiple JSON node types the semantic is determined from the provided value.
If the value is `true` or `false` the filter matches boolean JSON values.
If the value is a number the filter matches number JSON values.
Otherwise, the value matches string JSON values or mixed types of values.

> **Tip**
>
> To force text comparison for a value that is numeric quote the value in single quotes.
> For example, the value `'13'` is the text 13 while `13` is the number 13.  

Operátoři sady jsou:

| Operátor | Popis |
| -------- | ----------- |
| `in`     | vstupní hodnota je textově rovna jedné z uvedených hodnot (je v sadě) |
| `!in`    | vstupní hodnota není textově rovna žádné z uvedených hodnot (není nastavena) |

`<path>` může být:

* `_`: vstupní klíč je
* `.`: kořenová hodnota záznamu je
* `<member>`: člen kořenové hodnoty je
* `<member>.<member>`: člen na cestě je (až do hloubky 5 úrovní)

A `<member>` path expression can be a member name or in case of arrays an array index.
In case of an array the index can also be given in the form: `[<index>]`.
For example, the path `addresses[0].street` would be identical to `addresses.0.street`.

Některé příklady dotazů naleznete níže.

Jméno (kořenového objektu) je "Luke":

    GET /api/dataStore/<namespace>?fields=.&filter=name:eq:Luke

Věk (kořenového objektu) je větší než 42 (číselný):

    GET /api/dataStore/<namespace>?fields=.&filter=age:gt:42

Kořenová hodnota je číslo větší než 42 (číselná shoda odvozená z hodnoty):

    GET /api/dataStore/<namespace>?fields=.&filter=.:gt:42

Povoleno (kořenového objektu) má hodnotu true (logická shoda odvozená z hodnoty):

    GET /api/dataStore/<namespace>?fields=.&filter=enabled:eq:true

Kořenový objekt má jméno obsahující „Pet“ a má věk vyšší než 20:

    GET /api/dataStore/<namespace>?fields=.&filter=name:like:Pet&filter=age:gt:20

Kořenový objekt je buď označen jako neplnoletý, nebo má méně než 18 let:

    GET /api/dataStore/<namespace>?fields=.&filter=minor:eq:true&filter=age:lt:18&rootJunction=or

### Vytvořte hodnoty { #webapi_data_store_create_values } 

Vytvoření nového klíče a hodnoty pro jmenný prostor:

    POST /api/33/dataStore/<namespace>/<key>

Příklad curl požadavku pro vytvoření za předpokladu platného datového obsahu JSON:

```bash
curl "https://play.dhis2.org/demo/api/33/dataStore/foo/key_1" -X POST
  -H "Content-Type: application/json" -d "{\"foo\":\"bar\"}" -u admin:district
```

Příklad odpovědi:

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 201,
  "status": "OK",
  "message": "Key 'key_1' created."
}
```

Pokud požadujete šifrování dat, která ukládáte (například pověření uživatele apod.), Můžete k adrese URL připojit dotaz takto:

    GET /api/33/dataStore/<namespace>/<key>?encrypt=true

### Aktualizace hodnot { #webapi_data_store_update_values } 

Aktualizace klíče, který existuje ve jmenném prostoru:

    PUT /api/33/dataStore/<namespace>/<key>

Příklad curl požadavku pro aktualizaci za předpokladu platného datového obsahu JSON:

```bash
curl "https://play.dhis2.org/demo/api/33/dataStore/foo/key_1" -X PUT -d "[1, 2, 3]"
  -H "Content-Type: application/json" -u admin:district
```

Příklad odpovědi:

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Key 'key_1' updated."
}
```

### Smazání klíčů { #webapi_data_store_delete_keys } 

Odstranění existujícího klíče z jmenného prostoru:

    DELETE /api/33/dataStore/<namespace>/<key>

Příklad žádosti o smazání curl:

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo/key_1" -X DELETE -u admin:district
```

Příklad odpovědi:

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Key 'key_1' deleted from namespace 'foo'."
}
```

Odstranění všech klíčů ve jmenném prostoru:

    DELETE /api/33/dataStore/<namespace>

Příklad žádosti o smazání curl:

```bash
curl "play.dhis2.org/demo/api/33/dataStore/foo" -X DELETE -u admin:district
```

Příklad odpovědi:

```json
{
  "httpStatus": "OK",
  "httpStatusCode": 200,
  "status": "OK",
  "message": "Namespace 'foo' deleted."
}
```

### Sharing data store keys { #webapi_data_store_sharing } 

Sharing of data store keys follows the same principle as for other metadata sharing (see
[Sharing](#webapi_sharing)).

Chcete-li získat nastavení sdílení pro konkrétní klíč úložiště dat:

    GET /api/33/sharing?type=dataStore&id=<uid>

Kde id klíče úložiště dat pochází z koncového bodu `/metaData` pro tento klíč:

    GET /api/33/dataStore/<namespace>/<key>/metaData

As usual the `access` property in the response reflects the capabilities of the 
current user for the target entry.
Namespace wide protection might still apply and render a user incapable to
perform certain changes.

Chcete-li upravit nastavení sdílení pro konkrétní klíč úložiště dat:

    POST /api/33/sharing?type=dataStore&id=<uid>

s následujícím požadavkem:

```json
{
  "object": {
    "publicAccess": "rw------",
    "externalAccess": false,
    "user": {},
    "userAccesses": [],
    "userGroupAccesses": [
      {
        "id": "hj0nnsVsPLU",
        "access": "rw------"
      },
      {
        "id": "qMjBflJMOfB",
        "access": "r-------"
      }
    ]
  }
}
```

## Úložiště uživatelských dat { #webapi_user_data_store } 

In addition to the *dataStore* which is shared between all users of the
system, a user-based data store is also available. Data stored to the
*userDataStore* is associated with individual users, so that each user
can have different data on the same namespace and key combination. All
calls against the *userDataStore* will be associated with the logged in
user. This means one can only see, change, remove and add values
associated with the currently logged in user.

    /api/33/userDataStore

### Struktura úložiště uživatelských dat { #webapi_user_data_store_structure } 

*userDataStore* consists of a user, a namespace, keys and associated
values. The combination of user, namespace and key is unique.

Tabulka: Struktura úložiště uživatelských dat

| Položka | Popis | Datový typ |
|---|---|---|
| Uživatel | Uživatel, se kterým jsou tato data spojena | Řetězec |
| Jmenný prostor | Jmenný prostor, do kterého klíč patří | Řetězec |
| Klíč | Klíč, na kterém je uložena hodnota | Řetězec |
| Hodnota | Uložená hodnota | JSON |
| Šifrováno | Označuje, zda má být hodnota zašifrována | Boolean |

### Získejte jmenné prostory { #webapi_user_data_store_get_namespaces } 

Vrátí pole všech existujících jmenných prostorů

    GET /api/33/userDataStore

Příklad
    požadavek:

```bash
curl -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/33/userDataStore"
```

```json
[
  "foo",
  "bar"
]
```

### Získejte klíče { #webapi_user_data_store_get_keys } 

Vrátí pole všech existujících klíčů v daném oboru názvů

    GET /api/userDataStore/<namespace>

Příklad požadavku:

```bash
curl -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/33/userDataStore/foo"
```

```json
[
  "key_1",
  "key_2"
]
```

### Získejte hodnoty { #webapi_user_data_store_get_values } 

Vrátí hodnotu pro daný jmenný prostor a klíč

    GET /api/33/userDataStore/<namespace>/<key>

Příklad požadavku:

```bash
curl -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
  "some": "value"
}
```

### Vytvořte hodnotu { #webapi_user_data_store_create_values } 

Přidá novou hodnotu k danému klíči v daném jmenném prostoru.

    POST /api/33/userDataStore/<namespace>/<key>

Příklad požadavku:

```bash
curl -X POST -H "Content-Type: application/json" -u admin:district -d "['some value']"
  "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
  "httpStatus": "Created",
  "httpStatusCode": 201,
  "status": "OK",
  "message": "Key 'bar' in namespace 'foo' created."
}
```

Pokud požadujete šifrování hodnoty (například pověření uživatele apod.), Můžete k adrese URL připojit dotaz takto:

    GET /api/33/userDataStore/<namespace>/<key>?encrypt=true

### Aktualizace hodnot { #webapi_user_data_store_update_values } 

Aktualizuje existující hodnotu

    PUT /api/33/userDataStore/<namespace>/<key>

Příklad požadavku:

```bash
curl -X PUT -H "Content-Type: application/json" -u admin:district -d "['new value']"
  "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
  "httpStatus":"Created",
  "httpStatusCode":201,
  "status":"OK",
  "message":"Key 'bar' in namespace 'foo' updated."
}
```

### Odstranit klíč { #webapi_user_data_store_delete_key } 

Odstranění klíče

    DELETE /api/33/userDataStore/<namespace>/<key>

Příklad požadavku:

```bash
curl -X DELETE -u admin:district "play.dhis2.org/api/33/userDataStore/foo/bar"
```

```json
{
  "httpStatus":"OK",
  "httpStatusCode":200,
  "status":"OK",
  "message":"Key 'bar' deleted from the namespace 'foo."
}
```

### Odstranit jmenný prostor { #webapi_user_data_store_delete_namespace } 

Odstranění všech klíčů v daném jmenném prostoru

    DELETE /api/33/userDataStore/<namespace>

Příklad požadavku:

```bash
curl -X DELETE -u admin:district "play.dhis2.org/api/33/userDataStore/foo"
```

```json
{
  "httpStatus":"OK",
  "httpStatusCode":200,
  "status":"OK",
  "message":"All keys from namespace 'foo' deleted."
}
```

### Admin Access to another User's Datastore { #admin-access-to-another-users-datastore } 
Admins can manipulate another user's datastore by adding the `username`
parameter to any of the manipulations described above to not have them affect
the admins own datastore but the datastore of the user given by the `username`
parameter.

Například pro přidání hodnoty do datového úložiště `Peter` správce používá:

    POST /api/userDataStore/<namespace>/<key>?username=Peter

## Partial Update (Experimental) { #partial-update-experimental } 
Both the datastore and user datastore allow partial updating of entry values.  

All the subsequent examples operate on the basis that the following JSON entry is in the namespace `pets` with key `whiskers`.  

```json
{
  "name": "wisker",
  "favFood": [
    "fish", "rabbit"
  ]
}
```

We can perform many update operations on this entry. The following examples use `{store}` in the API calls, please substitute with `dataStore` or `userDataStore` for your use case.

### Update root (entire entry) { #update-root-entire-entry } 
We can update the entry at the root by not supplying the `path` request param or leaving it empty `path=`.  

`PUT` `/api/{store}/pets/whiskers` with body `"whiskers"` updates the entry to be the supplied body. So a `GET` request to `/api/{store}/pets/whiskers` would now show:  
```json
"whiskers"
```

### Update at specific path { #update-at-specific-path } 
We can update the entry at a specific path by supplying the `path` request param and the property to update.

`PUT` `/api/{store}/pets/whiskers?path=name` with body `"whiskers"` updates the entry at the `name` property only. So a `GET` request to `/api/{store}/pets/whiskers` would now show the updated `name`:

```json
{
    "name": "whiskers",
    "favFood": [
        "fish",
        "rabbit"
    ]
}
```

We can update an array element at a specific path.

`PUT` `/api/{store}/pets/whiskers?path=favFood.[0]` with body `"carrot"` updates the first element in the `favFood` array only. So a `GET` request to `/api/{store}/pets/whiskers` would now show the updated `favFood`:

```json
{
    "name": "wisker",
    "favFood": [
        "carrot",
        "rabbit"
    ]
}
```

### Benefits { #benefits } 
- smaller payloads required for small changes
- less error-prone (no copy-pasting large entries to change 1 property)

## Roll (Experimental) { #roll-experimental } 
The `roll` request param enables the user to have a 'rolling' number of elements in an array. In our example we have the `favFood` array. If we wanted to update this array previously, we'd have to supply the whole payload like so:  
`PUT` `/api/{store}/pets/whiskers` with body

```json
{
    "name": "wisker",
    "favFood": [
        "fish",
        "rabbit",
        "carrot"
    ]
}
```

Now we can use the `roll` request param (with the `path` functionality) to state that we want the rolling functionality for _n_ number of elements.
In this example we state that we want the array to have a rolling value of 3, passing in an extra element in the call.  
`PUT` `/api/{store}/pets/whiskers?roll=3&path=favFood` with body `"carrot"` would result in the following state.

```json
{
    "name": "wisker",
    "favFood": [
        "fish",
        "rabbit",
        "carrot"
    ]
}
```

Since we passed the rolling value of `3`, this indicates that we only want the last 3 elements passed into the array. So if we now make another call and add a new element to the array, we would expect the first element (`fish`) to be dropped from the array.
`PUT` `/api/{store}/pets/whiskers?roll=3&path=favFood` with body `"bird"` would result in the following state:

```json
{
    "name": "wisker",
    "favFood": [
        "rabbit",
        "carrot",
        "bird"
    ]
}
```

> **Note**
>
> Once a rolling value has been set (e.g. `role=3`), it can only be increased (e.g. `roll=5`) and cannot be decreased (e.g. `roll=2`)

Dot notation does allow for nested calls. Let's say we have this current entry value:

```json
{
  "name": "wisker",
  "favFood": [
    "fish", "rabbit"
  ],
  "type": {
    "breed": ["shorthair"]
  }
}
```

If we wanted to add another breed using a rolling array we could make the call:
`PUT` `/api/{store}/pets/whiskers?roll=3&path=type.breed` with body `"small"` which would result in the following state:

```json
{
  "name": "wisker",
  "favFood": [
    "fish", "rabbit"
  ],
  "type": {
    "breed": ["shorthair, small"]
  }
}
```

### Benefits { #benefits } 
- Only interested in keeping track of _n_ values which may change over time


# Profil organizační jednotky { #org_unit_profile }

Prostředek profilu organizační jednotky umožňuje definovat a načíst informační profil pro organizační jednotky v DHIS 2.

```
/api/organisationUnitProfile
```

Lze vytvořit jeden profil organizační jednotky, který se vztahuje na všechny organizační jednotky.

Informační část profilu organizační jednotky zahrnuje:

- Název, zkrácený název, popis, nadřazená organizační jednotka, úroveň, datum otevření, datum ukončení, URL.
- Kontaktní osoba, adresa, e-mail, telefonní číslo (pokud existuje).
- Poloha (zeměpisná délka / šířka).
- Atributy metadat (konfigurovatelné).
- Sady a skupiny skupin organizačních jednotek (konfigurovatelné).
- Agregujte data pro datové prvky, indikátory, míry hlášení, programové indikátory (konfigurovatelné).

## Vytvořte profil organizační jednotky { #create-organisation-unit-profile } 

Chcete-li definovat profil organizační jednotky, můžete použít požadavek `POST`:

```
POST /api/organisationUnitProfile
```

Datový obsah ve formátu JSON vypadá takto, kde `attributes` odkazují na atributy metadat, `groupSets` odkazují na sady skupin organizačních jednotek a `dataItems` odkazují na datové prvky, indikátory, soubory dat a indikátory programu:

```json
{
  "attributes": [
    "xqWyz9jNCA5",
    "n2xYlNbsfko"
  ],
  "groupSets": [
    "Bpx0589u8y0",
    "J5jldMd8OHv"
  ],
  "dataItems": [
    "WUg3MYWQ7pt",
    "vg6pdjObxsm",
    "DTVRnCGamkV",
    "Uvn6LCg7dVU",
    "eTDtyyaSA7f"
  ]
}
```

K definování profilu je vyžadováno oprávnění `F_ORG_UNIT_PROFILE_ADD`.

## Get organisation unit profile { #get-organisation-unit-profile } 

K načtení definice profilu organizační jednotky můžete použít požadavek `GET` 

```
GET /api/organisationUnitProfile
```

Odpověď bude ve formátu JSON.

## Get organisation unit profile data { #get-organisation-unit-profile-data } 

Chcete-li načíst data profilu organizační jednotky, můžete použít požadavek `GET` 

```
GET /api/organisationUnitProfile/{org-unit-id}/data?period={iso-period}
```

Koncový bod profilu dat organizační jednotky bude kombinovat definici profilu s přidruženými hodnotami informací / dat.

* Proměnná cesty `org-unit-id` je povinná a odkazuje na ID organizační jednotky, pro kterou se poskytují agregovaná data.
* Parametr dotazu `iso-period` je volitelný a odkazuje na ID období ISO pro období za účelem poskytnutí agregovaných dat pro datové položky. Pokud není zadán žádný, použije se jako nouzové období _this year_ relativní období.

Odpověď bude zahrnovat následující části:

* `info`: Opravené informace o organizační jednotce.
* `atributy`: Atributy metadat s odpovídajícími hodnotami atributů.
* `groupSets`: Sady skupin organizačních jednotek s odpovídající skupinou organizačních jednotek, jejichž je organizační jednotka členem.
* `dataItems`: Datové položky s odpovídající hodnotou agregovaných dat.

Pamatujte, že jsou prováděny kontroly řízení přístupu a položky metadat, které nejsou aktuálnímu uživateli přístupné, budou vynechány.

Příklad požadavku vypadá takto:

```
GET /api/organisationUnitProfile/DiszpKrYNg8/data?period=2021
```

Obsah dat profilu ve formátu JSON bude vypadat takto, kde pole `id` a` label` odkazují na položku metadat a pole `value` odkazuje na přidruženou hodnotu:

```json
{
  "info": {
    "id": "DiszpKrYNg8",
    "code": "OU_559",
    "name": "Ngelehun CHC",
    "shortName": "Ngelehun CHC",
    "parentName": "Badjia",
    "level": 4,
    "levelName": "Facility",
    "openingDate": "1970-01-01T00:00:00.000",
    "longitude": -11.4197,
    "latitude": 8.1039
  },
  "attributes": [
    {
      "id": "n2xYlNbsfko",
      "label": "NGO ID",
      "value": "GHE51"
    },
    {
      "id": "xqWyz9jNCA5",
      "label": "TZ code",
      "value": "NGE54"
    }
  ],
  "groupSets": [
    {
      "id": "Bpx0589u8y0",
      "label": "Facility Ownership",
      "value": "Public facilities"
    },
    {
      "id": "J5jldMd8OHv",
      "label": "Facility Type",
      "value": "CHC"
    }
  ],
  "dataItems": [
    {
      "id": "WUg3MYWQ7pt",
      "label": "Total Population",
      "value": 3503
    },
    {
      "id": "DTVRnCGamkV",
      "label": "Total population < 1 year",
      "value": 140
    },
    {
      "id": "vg6pdjObxsm",
      "label": "Population of women of child bearing age (WRA)",
      "value": 716
    },
    {
      "id": "Uvn6LCg7dVU",
      "label": "ANC 1 Coverage",
      "value": 368.2
    },
    {
      "id": "eTDtyyaSA7f",
      "label": "FIC <1y",
      "value": 291.4
    }
  ]
}
```

## Upload image for organisation unit { #upload-image-for-organisation-unit } 

Chcete-li nahrát obrázek pro organizační jednotku, můžete použít koncový bod `fileResources`.

```
/api/fileResources
```

Koncový bod `fileResource` přijímá jako tělo požadavku nezpracovaný soubor. U obrázků organizačních jednotek jsou podporovány formáty `JPG`, `JPEG` a `PNG`. Doména pro obrázky organizační jednotky je `ORG_UNIT`.

Please consult *File resources* in the *Metadata* section for details about the `fileResources` endpoint. 

Chcete-li nahrát obrázek, můžete odeslat požadavek `POST` s `ORG_UNIT` jako parametr dotazu domény spolu s obrázkem jako datovou částí požadavku. Záhlaví `Content-Type` by mělo odpovídat typu nahrávaného souboru.

```
POST /api/fileResources?domain=ORG_UNIT
```

Vlastnost `id ` objektu `response` > `fileResource` v odpovědi JSON bude obsahovat odkaz na identifikátor zdroje souboru.

Entita organizační jednotky má vlastnost `image`, která odkazuje na obraz prostředku souboru. Chcete-li nastavit odkaz na souborový prostředek na organizační jednotce, můžete organizační jednotce odeslat požadavek `PATCH` s datovou částí JSON:

```
PATCH /api/organisationUnits/{id}
```

```json
{ 
  "image": "{file-resource-id}" 
}
```

Alternativně můžete použít požadavek `PUT` s celým datovým obsahem organizační jednotky (pole jsou kvůli stručnosti vynechána):

```
PUT /api/organisationUnits/{id}
```

```json
{
  "id": "Rp268JB6Ne4",
  "name": "Adonkia CHP",
  "image": {
    "id":  "{file-resource-iid}"
  }
}
```

## Get image for organisation unit { #get-image-for-organisation-unit } 

Entita organizační jednotky má objekt `image`, který odkazuje na souborový zdroj podle identifikátoru. Informace o organizační jednotce můžete získat z koncového bodu `organisationUnits`. Pokud je nastaven, formát JSON vypadá takto:

```
GET /api/organisationUnits/{id}
```

```json
{
  "id": "Rp268JB6Ne4",
  "name": "Adonkia CHP",
  "image": {
    "id":  "{file-resource-id}"
  }
}
```

Identifikátor prostředku obrazového souboru lze použít k vytvoření požadavku na koncový bod `fileResources` k načtení obsahu souboru:

```
GET /api/fileResources/{id}/data
```

Záhlaví `Content-Type` bude odrážet typ načítaného souboru.



# Aplikace { #apps } 

## Aplikace { #webapi_apps } 

Koncový bod `/api/apps` lze použít k instalaci, mazání a výpisu aplikací. Klíč aplikace je založen na názvu aplikace, ale se všemi nealfanumerickými znaky odstraněnými a mezerami nahrazenými pomlčkou. *Moje aplikace!* Vrátí klíč *Moje aplikace*.

> **Poznámka**
>
> Předchozí do 2.28 byl klíč aplikace odvozen od názvu archivu ZIP, 
> s výjimkou přípony souboru. Adresy URL používající starý formát 
> by měly v API vracet správnou aplikaci.

    /api/33/apps

### Získat aplikace { #webapi_get_apps } 

> **Poznámka**
>
> Předchozí až 2.28 se složka vlastností aplikace odkazovala na skutečnou 
> cestu nainstalované aplikace. Díky možnosti ukládat aplikace do cloudových 
> služeb se změnil účel jmenné složky a nyní bude odkazovat na klíč 
> aplikace.

Můžete si přečíst klíče pro aplikace vypsáním všech aplikací ze zdroje aplikací a vyhledáním vlastnosti *key*. Seznam všech nainstalovaných aplikací v JSON:

```bash
curl -u user:pass -H "Accept: application/json" "http://server.com/api/33/apps"
```

Můžete také jednoduše nasměrovat webový prohlížeč na adresu URL zdroje:

    http://server.com/api/33/apps

Seznam aplikací lze filtrovat také podle typu aplikace a podle názvu připojením jednoho nebo více parametrů *filtru* k adrese URL:

    http://server.com/api/33/apps?filter=appType:eq:DASHBOARD_APP&filter=name:ilike:youtube

Názvy aplikací podporují operátory filtru *eq* a *ilike*, zatímco *appType* podporuje pouze *eq*.

### Instalace aplikace { #webapi_install_app } 

K instalaci aplikace lze provést následující příkaz:

```bash
curl -X POST -u user:pass -F file=@app.zip "http://server.com/api/33/apps"
```

### Smazat aplikaci { #webapi_delete_app } 

Chcete-li aplikaci odstranit, můžete zadat následující příkaz:

```bash
curl -X DELETE -u user:pass "http://server.com/api/33/apps/<app-key>"
```

### Znovu načíst aplikace { #webapi_reload_apps } 

Chcete-li vynutit opětovné načtení aktuálně nainstalovaných aplikací, můžete vydat následující příkaz. To je užitečné, pokud jste místo nahrání přes uživatelské rozhraní DHIS2 přidali soubor ručně přímo do systému souborů.

```bash
curl -X PUT -u user:pass "http://server.com/api/33/apps"
```

### Sdílet aplikace mezi instancemi { #webapi_share_apps_between_instances } 

Pokud byla instance DHIS2 nakonfigurována pro použití cloudového úložiště, aplikace se nyní nainstalují a uloží do cloudové služby. To umožní více instancím sdílet stejné verze v nainstalovaných aplikacích namísto instalace stejných aplikací v každé jednotlivé instanci.

> **Poznámka**
>
> Předchozí verze 2.28 by nainstalované aplikace ukládala pouze do místního 
> souborového systému instance. Aplikace nainstalované před 2.28 budou stále 
> k dispozici v instanci, ve které byla nainstalována, ale nebudou sdíleny s jinými 
> instancemi, protože jsou stále umístěny v místním souborovém systému instancí.

## App store { #webapi_app_store } 

The Web API exposes the content of the DHIS2 App Store as a JSON
representation which can found at the `/api/appHub` resource.

    /api/33/appHub

### Získat aplikace { #webapi_get_app_store_apps } 

Aplikace můžete načíst s požadavkem GET:

    GET /api/33/appHub

Níže je popsána ukázková odpověď JSON.

```json
{
  [
    {
      "name": "Tabular Tracker Capture",
      "description": "Tabular Tracker Capture is an app that makes you more effective.",
      "sourceUrl": "https://github.com/dhis2/App-repository",
      "appType": "DASHBOARD_WIDGET",
      "status": "PENDING",
      "id": "NSD06BVoV21",
      "developer": {
        "name": "DHIS",
        "organisation": "Uio",
        "address": "Oslo",
        "email": "dhis@abc.com",
      },
      "versions": [
        {
          "id": "upAPqrVgwK6",
          "version": "1.2",
          "minDhisVersion": "2.17",
          "maxDhisVersion": "2.20",
          "downloadUrl": "https://dhis2.org/download/appstore/tabular-capture-12.zip",
          "demoUrl": "http://play.dhis2.org/demo"
        }
      ],
      "images": [
        {
          "id": "upAPqrVgwK6",
          "logo": "true",
          "imageUrl": "https://dhis2.org/download/appstore/tabular-capture-12.png",
          "description": "added feature snapshot",
          "caption": "dialog",
        }
      ]
    }
  ]
}
```

### Instalovat aplikace { #webapi_install_app_store_apps } 

Do instance DHIS2 můžete instalovat aplikace za předpokladu, že máte příslušná oprávnění. Na aplikaci se odkazuje pomocí vlastnosti `id` příslušné verze aplikace. Aplikace je nainstalována s požadavkem POST s ID verze do následujícího zdroje:

    POST /api/33/appHub/{app-version-id}



# OpenAPI { #openapi } 

The DHIS2 server can provide an OpenAPI document for its API.
This document is created on the fly from analysis of the actual API.
It means the document is complete but details may be lost or misrepresented
due to limitations in the analysis.

Both JSON and YAML format are supported by all OpenAPI endpoints.
YAML should be requested with `Accept` header of `application/x-yaml`.

To fetch a single document containing all endpoints of the server use:

    GET /api/openapi.json
    GET /api/openapi.yaml

OBS! Be aware that this generates a document that is several MBs in size.

A document for a specific endpoint can be accessed by appending either 
`openapi.json` or `openapi.yaml` to an endpoint root path. 
For example, to generate a document for the `/users` endpoints use:

    GET /api/users/openapi.json
    GET /api/users/openapi.yaml

To generate a document with a specific selection of root paths and/or tags the
general `/openapi` endpoint can be used with one or more `tag` and `path`
selectors.

    GET /api/openapi/openapi.json?path=/users&path=/dataElements
    GET /api/openapi/openapi.yaml?tag=system&tag=metadata

Available tags are:

* `user`
* `data`
* `metadata`
* `ui`
* `analytics`
* `system`
* `messaging`
* `tracker`
* `integration`
* `login`
* `query`
* `management`

All endpoints that generate a OpenAPI document support the following optional 
request parameters:

### `failOnNameClash` { #failonnameclash } 
When set to `true`, two or more types of same simple (unqualified) name are considered clashing and the generation fails with an error. 

When set `false` (default), name clashes are resolved by adding numbers to the simple name to make each of them unique.
As a result the names are not predictable or stable. Merging simple names with their intended markdown documentation based on name will be broken. 
This option is meant as a preview feature which should only be used during development.

### `failOnInconsistency` { #failoninconsistency } 
When set to `true`, a semantic inconsistency in the declaration causes the generation to fail with an error.
Usually this indicates a programming mistake. For example, declaring a field both as required and having a default value.

When set to `false`, a semantic inconsistency is logged as warning but the generation proceeds.
This might produce a document that contradicts itself semantically but is valid formally.
